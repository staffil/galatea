"use strict";import{jsx as i,jsxs as C,Fragment as B}from"react/jsx-runtime";import{Svg as q}from"@granite-js/native/react-native-svg";import{colors as a}from"@toss/tds-colors";import c from"hex-to-rgba";import{useCallback as I,useEffect as d,useMemo as b,useRef as V,useState as H}from"react";import{Animated as t,Pressable as J,View as K}from"react-native";import{useAdaptive as L}from"../../../../core/index.js";import{usePressAnim as Q}from"../../../../interactions/pressable-effect/index.js";import{SPRING_CONFIG as U,TIMING_CONFIG as W}from"../../const.js";import{Check as O}from"./paths.js";import{styles as h}from"./styles.js";export function AnimatedCheckboxGraphic({checked:n,size:o,children:N,style:P,onTouchStart:R,onTouchEnd:T,onTouchCancel:G,onPress:_,...j}){const[r,f]=H(n?"on":"off"),g=b(()=>o*20/24,[o]),u=L(),k=b(()=>({background:c(u.background??a.background),grey200:c(u.grey200??a.grey200),blue600:c(a.blue600),blue500:c(a.blue500),white:c(a.white),transparent:c(a.grey200,0)}),[u.background,u.grey200]),{startPressInAnim:x,startPressOutAnim:w,scaleAnim:A}=Q(l),s=b(()=>{const{background:e,grey200:E,blue600:m,blue500:v,white:D,transparent:M}=k;return{check:{off:{stroke:M,strokeDashoffset:24,scale:l.pressOut.scale},"off-press":{stroke:m,strokeDashoffset:16,scale:l.pressIn.scale},on:{stroke:D,strokeDashoffset:0,scale:l.pressOut.scale},"on-press":{stroke:D,strokeDashoffset:13.5,scale:l.pressIn.scale}},backgroundCheck:{off:{opacity:1},"off-press":{opacity:1},on:{opacity:0},"on-press":{opacity:0}},outerCircle:{off:{fill:E},"off-press":{fill:m},on:{fill:v},"on-press":{fill:m}},innerCircle:{off:{fill:e,scale:1},"off-press":{fill:e,scale:1},on:{fill:v,scale:0},"on-press":{fill:m,scale:0}},innerCircleScaleOrigin\uBCF4\uC815:{off:{x:0,y:0},"off-press":{x:0,y:0},on:{x:12,y:12},"on-press":{x:12,y:12}}}},[k]),F=I(()=>{f(e=>e==="on"?"on-press":"off-press"),x()},[x]),S=I(()=>{f(n?e=>e==="on-press"?"on":"off":e=>e==="off-press"?"off":"on"),w()},[n,w]);d(()=>{f(n?"on":"off")},[n]);const p=V(new t.Value(s.innerCircle[r].scale)).current;d(()=>{r==="on"||r==="off"?t.spring(p,{toValue:s.innerCircle[r].scale,...U,useNativeDriver:!0}).start():t.timing(p,{toValue:s.innerCircle[r].scale,duration:0,useNativeDriver:!0}).start()},[s.innerCircle,r,p]);const y=V(new t.Value(s.check[r].strokeDashoffset)).current;return d(()=>{t.timing(y,{toValue:s.check[r].strokeDashoffset,...W,useNativeDriver:!0}).start()},[s.check,r,y]),i(J,{onTouchStart:e=>{F(),R?.(e)},onTouchEnd:e=>{S(),T?.(e)},onTouchCancel:e=>{S(),G?.(e)},onPress:_,style:[h.container,{width:o,height:o},P],accessibilityRole:"checkbox",accessibilityState:{checked:n,disabled:!1},...j,children:C(B,{children:[C(t.View,{style:[{transform:[{scale:A}]},{width:o,height:o},h.circleContainer],children:[i(t.View,{style:[{backgroundColor:s.outerCircle[r].fill,borderRadius:o/2},h.outerCircle]}),i(t.View,{style:[{width:g,height:g,backgroundColor:s.innerCircle[r].fill,borderRadius:g/2,transform:[{scale:p}]}]})]}),i(K,{style:[{width:o,height:o},h.checkContainer],children:C(X,{viewBox:"0 0 24 24",style:{transform:[{scale:A}]},children:[i(O,{stroke:k.grey200,style:{opacity:s.backgroundCheck[r].opacity}}),i(O,{stroke:s.check[r].stroke,strokeDasharray:"24px 24px",strokeDashoffset:y})]})}),N]})})}const X=t.createAnimatedComponent(q),l={pressIn:{scale:.9,opacity:0},pressOut:{scale:1,opacity:0}};
