"use strict";import{Gesture as P}from"@granite-js/native/react-native-gesture-handler";import{spring as M}from"@toss/tds-easings";import{useMemo as f,useRef as a,useState as S}from"react";import{Animated as p,Dimensions as v}from"react-native";export function useSnapAnimation(t){const i=a(new p.Value(t.padding)).current,r=a(!1),[n,g]=S(0),d=a(t.padding),e=a(t.padding),c=f(()=>{const o=P.Pan().onUpdate(s=>{r.current!==!0&&(e.current=d.current+s.translationX,i.setValue(e.current))}).onEnd(s=>{if(r.current===!0)return;const m=A(t),W=b({translateX:e.current,translationX:s.translationX,velocityX:s.velocityX},t),u=I(W,m);r.current=!0,p.spring(i,{toValue:u,useNativeDriver:!0,...M.quick}).start(()=>{e.current=u,d.current=e.current,r.current=!1}),g(m.findIndex(w=>w===u))});return o.runOnJS(!0),o},[t,i]),h=f(()=>[{translateX:i}],[i]);return{gesture:c,transforms:h,activeIndex:n}}const l=v.get("window").width;function A(t){"worklet";return Array(t.itemsCount).fill(void 0).map((i,r)=>{switch(r){case 0:return t.padding;case t.itemsCount-1:{const n=l-t.itemWidth-t.padding;return t.padding-(t.itemWidth+t.itemGap)*(t.itemsCount-1)+(n-t.padding)}default:{const n=(l-t.itemWidth)/2;return t.padding-(t.itemWidth+t.itemGap)*r+(n-t.padding)}}})}function I(t,i){"worklet";let r=i[0];for(const n of i)Math.abs(n-t)<Math.abs(r-t)&&(r=n);return r}function b({translateX:t,translationX:i,velocityX:r},n){"worklet";return Math.abs(r)<n.itemWidth/2||Math.abs(i)>=n.itemWidth/2?t:t+Math.sign(r)*n.itemWidth}
