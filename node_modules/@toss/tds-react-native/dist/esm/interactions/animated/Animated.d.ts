import { Animated as ReactNativeAnimated } from 'react-native';
export declare const Animated: {
    spring: (value: ReactNativeAnimated.Value | ReactNativeAnimated.ValueXY, config: import("./spring.js").SpringAnimationConfig) => ReactNativeAnimated.CompositeAnimation;
    decay(value: ReactNativeAnimated.AnimatedValue | ReactNativeAnimated.AnimatedValueXY, config: ReactNativeAnimated.DecayAnimationConfig): ReactNativeAnimated.CompositeAnimation;
    add<OutputT extends number | string>(a: ReactNativeAnimated.Animated, b: ReactNativeAnimated.Animated): ReactNativeAnimated.AnimatedAddition<OutputT>;
    subtract<OutputT extends number | string>(a: ReactNativeAnimated.Animated, b: ReactNativeAnimated.Animated): ReactNativeAnimated.AnimatedSubtraction<OutputT>;
    divide<OutputT extends number | string>(a: ReactNativeAnimated.Animated, b: ReactNativeAnimated.Animated): ReactNativeAnimated.AnimatedDivision<OutputT>;
    multiply<OutputT extends number | string>(a: ReactNativeAnimated.Animated, b: ReactNativeAnimated.Animated): ReactNativeAnimated.AnimatedMultiplication<OutputT>;
    modulo<OutputT extends number | string>(a: ReactNativeAnimated.Animated, modulus: number): ReactNativeAnimated.AnimatedModulo<OutputT>;
    diffClamp<OutputT extends number | string>(a: ReactNativeAnimated.Animated, min: number, max: number): ReactNativeAnimated.AnimatedDiffClamp<OutputT>;
    delay(time: number): ReactNativeAnimated.CompositeAnimation;
    sequence(animations: Array<ReactNativeAnimated.CompositeAnimation>): ReactNativeAnimated.CompositeAnimation;
    stagger(time: number, animations: Array<ReactNativeAnimated.CompositeAnimation>): ReactNativeAnimated.CompositeAnimation;
    loop(animation: ReactNativeAnimated.CompositeAnimation, config?: ReactNativeAnimated.LoopAnimationConfig): ReactNativeAnimated.CompositeAnimation;
    parallel(animations: Array<ReactNativeAnimated.CompositeAnimation>, config?: ReactNativeAnimated.ParallelConfig): ReactNativeAnimated.CompositeAnimation;
    event<T>(argMapping: Array<ReactNativeAnimated.Mapping | null>, config?: ReactNativeAnimated.EventConfig<T>): (...args: any[]) => void;
    createAnimatedComponent<T extends React.ComponentType<any>>(component: T, options?: ReactNativeAnimated.AnimatedComponentOptions): ReactNativeAnimated.AnimatedComponent<T>;
    Animated: typeof ReactNativeAnimated.Animated;
    AnimatedNode: typeof ReactNativeAnimated.AnimatedNode;
    AnimatedWithChildren: typeof ReactNativeAnimated.AnimatedWithChildren;
    AnimatedColor: typeof ReactNativeAnimated.AnimatedColor;
    AnimatedInterpolation: typeof ReactNativeAnimated.AnimatedInterpolation;
    Value: typeof ReactNativeAnimated.Value;
    ValueXY: typeof ReactNativeAnimated.ValueXY;
    timing: (value: ReactNativeAnimated.AnimatedValue | ReactNativeAnimated.AnimatedValueXY, config: ReactNativeAnimated.TimingAnimationConfig) => ReactNativeAnimated.CompositeAnimation;
    AnimatedAddition: typeof ReactNativeAnimated.AnimatedAddition;
    AnimatedSubtraction: typeof ReactNativeAnimated.AnimatedSubtraction;
    AnimatedDivision: typeof ReactNativeAnimated.AnimatedDivision;
    AnimatedMultiplication: typeof ReactNativeAnimated.AnimatedMultiplication;
    AnimatedModulo: typeof ReactNativeAnimated.AnimatedModulo;
    AnimatedDiffClamp: typeof ReactNativeAnimated.AnimatedDiffClamp;
    View: ReactNativeAnimated.AnimatedComponent<typeof import("react-native")._View>;
    Image: ReactNativeAnimated.AnimatedComponent<typeof import("react-native")._Image>;
    Text: ReactNativeAnimated.AnimatedComponent<typeof import("react-native")._Text>;
    ScrollView: ReactNativeAnimated.AnimatedComponent<typeof import("react-native")._ScrollView>;
    FlatList: typeof ReactNativeAnimated.FlatList;
    SectionList: typeof ReactNativeAnimated.SectionList;
};
