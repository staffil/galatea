"use strict";import{objectEntries as R}from"@toss/utils";export function createInterpolationStyle(o,{inputRange:c,motion:n}){const e=o.interpolate({inputRange:c,outputRange:[0,1]});return v({progress:e,motion:n})}function v({progress:o,motion:c}){const n={transform:[]},e={transform:[]},i={transform:[]},{perspective:u,...f}=c,m=[["perspective",u],...R(f)];for(const[s,r]of m)switch(s){case"width":case"height":case"opacity":{const t=r;if(t==null)continue;n[s]=o.interpolate({inputRange:[0,1],outputRange:[t.from,t.to]});break}case"color":{const t=r;t!=null&&(n.color=o.interpolate({inputRange:[0,1],outputRange:[t.from,t.to]}));break}case"backgroundColor":{const t=r;typeof t?.from=="string"&&typeof t?.to=="string"&&(n.backgroundColor=o.interpolate({inputRange:[0,1],outputRange:[t.from,t.to]}));break}case"scaleX":case"scaleY":case"scale":{const t=r;if(t!=null){const a=o.interpolate({inputRange:[0,1],outputRange:[t.from,t.to]});n.transform=[...n.transform,{[s]:a}]}break}case"perspective":{const t=r;if(t!=null){const a=o.interpolate({inputRange:[0,1],outputRange:[t.from,t.to]});n.transform=[...n.transform,{perspective:a}]}break}case"rotateY":case"rotateZ":case"rotateX":case"rotate":{const t=r;if(t!=null){const a=o.interpolate({inputRange:[0,1],outputRange:[`${t.from}deg`,`${t.to}deg`]});n.transform=[...n.transform,{[s]:a}]}break}case"translateX":{const t=r;if(t!=null){const a=o.interpolate({inputRange:[0,1],outputRange:[t.from,t.to]});n.transform=[...n.transform,{[s]:a}]}break}case"translateY":{const t=r;if(t!=null){const a=o.interpolate({inputRange:[0,1],outputRange:[t.from,t.to]});n.transform=[...n.transform,{[s]:a}]}break}case"transformOriginX":{const t=r;if(t!=null){const a=o.interpolate({inputRange:[0,1],outputRange:[t.from,t.to]}),l=o.interpolate({inputRange:[0,1],outputRange:[-t.from,-t.to]});e.transform=[{translateX:a},{translateX:l}]}break}case"transformOriginY":{const t=r;if(t!=null){const a=o.interpolate({inputRange:[0,1],outputRange:[t.from,t.to]}),l=o.interpolate({inputRange:[0,1],outputRange:[-t.from,-t.to]});i.transform=[{translateY:a},{translateY:l}]}break}}const p=Array.isArray(e.transform)&&e.transform.length===2,g=Array.isArray(i.transform)&&i.transform.length===2;return p&&(n.transform=[e.transform[0],...n.transform??[],e.transform[1]]),g&&(n.transform=[i.transform[0],...n.transform??[],i.transform[1]]),n}
