import type { TextInput, View } from 'react-native';
import type { TextFieldProps } from './types.js';
import { format } from './utils/format.js';
declare const _TextField: import("react").ForwardRefExoticComponent<import("./types.js").TextFieldContainerPublicProps & import("./types.js").TextFieldPublicProps & Omit<import("react-native").TextInputProps, "value" | keyof import("./types.js").TextFieldPublicProps | keyof import("./types.js").TextFieldContainerPublicProps> & {
    value?: import("./types.js").TextFieldValue;
    defaultValue?: string;
} & import("react").RefAttributes<TextInput>>;
declare const _ClearableTextField: import("react").ForwardRefExoticComponent<Omit<TextFieldProps, "right"> & {
    onClear?: () => void;
} & import("react").RefAttributes<TextInput>>;
declare const _TextFieldButton: import("react").ForwardRefExoticComponent<import("./types.js").TextFieldContainerPublicProps & import("./types.js").TextFieldPublicProps & Omit<Omit<import("react-native").PressableProps & import("react").RefAttributes<View>, "ref">, "value" | keyof import("./types.js").TextFieldPublicProps | keyof import("./types.js").TextFieldContainerPublicProps> & {
    value?: import("./types.js").TextFieldValue;
    defaultValue?: string;
    focused?: boolean;
    placeholder?: string;
    style?: import("react-native").StyleProp<import("react-native").TextStyle>;
} & import("react").RefAttributes<View>>;
type ExportedTextField = typeof _TextField & {
    Clearable: typeof _ClearableTextField;
    format: typeof format;
    Button: typeof _TextFieldButton;
};
export declare const TextField: ExportedTextField;
export {};
