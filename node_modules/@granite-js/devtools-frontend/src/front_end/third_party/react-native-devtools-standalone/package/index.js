var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "node_modules/react/cjs/react.development.js"(exports, module) {
    "use strict";
    (function() {
      function defineDeprecationWarning(methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
          get: function() {
            warn(
              "%s(...) is deprecated in plain JavaScript React classes. %s",
              info[0],
              info[1]
            );
          }
        });
      }
      function warn(format) {
        for (var _len = arguments.length, args = Array(1 < _len ? _len - 1 : 0), _key = 1; _key < _len; _key++)
          args[_key - 1] = arguments[_key];
        printWarning("warn", format, args, Error("react-stack-top-frame"));
      }
      function error$jscomp$0(format) {
        for (var _len2 = arguments.length, args = Array(1 < _len2 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
          args[_key2 - 1] = arguments[_key2];
        printWarning("error", format, args, Error("react-stack-top-frame"));
      }
      function printWarning(level, format, args, currentStack) {
        !supportsCreateTask && ReactSharedInternals.getCurrentStack && (currentStack = ReactSharedInternals.getCurrentStack(currentStack), "" !== currentStack && (format += "%s", args = args.concat([currentStack])));
        args.unshift(format);
        Function.prototype.apply.call(console[level], console, args);
      }
      function getIteratorFn(maybeIterable) {
        if (null === maybeIterable || "object" !== typeof maybeIterable)
          return null;
        maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
        return "function" === typeof maybeIterable ? maybeIterable : null;
      }
      function warnNoop(publicInstance, callerName) {
        publicInstance = (publicInstance = publicInstance.constructor) && (publicInstance.displayName || publicInstance.name) || "ReactClass";
        var warningKey = publicInstance + "." + callerName;
        didWarnStateUpdateForUnmountedComponent[warningKey] || (error$jscomp$0(
          "Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",
          callerName,
          publicInstance
        ), didWarnStateUpdateForUnmountedComponent[warningKey] = true);
      }
      function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      function ComponentDummy() {
      }
      function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        try {
          testStringCoercion(value);
          var JSCompiler_inline_result = false;
        } catch (e) {
          JSCompiler_inline_result = true;
        }
        if (JSCompiler_inline_result)
          return JSCompiler_inline_result = "function" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object", error$jscomp$0(
            "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
            JSCompiler_inline_result
          ), testStringCoercion(value);
      }
      function getComponentNameFromType(type) {
        if (null == type)
          return null;
        if ("function" === typeof type)
          return type.$$typeof === REACT_CLIENT_REFERENCE$1 ? null : type.displayName || type.name || null;
        if ("string" === typeof type)
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if ("object" === typeof type)
          switch ("number" === typeof type.tag && error$jscomp$0(
            "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
          ), type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              return (type.displayName || "Context") + ".Provider";
            case REACT_CONSUMER_TYPE:
              return (type._context.displayName || "Context") + ".Consumer";
            case REACT_FORWARD_REF_TYPE:
              var innerType = type.render;
              type = type.displayName;
              type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
              return type;
            case REACT_MEMO_TYPE:
              return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
              innerType = type._payload;
              type = type._init;
              try {
                return getComponentNameFromType(type(innerType));
              } catch (x) {
              }
          }
        return null;
      }
      function getTaskName(type) {
        if (type === REACT_FRAGMENT_TYPE)
          return "<>";
        if ("object" === typeof type && null !== type && type.$$typeof === REACT_LAZY_TYPE)
          return "<...>";
        try {
          var name = getComponentNameFromType(type);
          return name ? "<" + name + ">" : "<...>";
        } catch (x) {
          return "<...>";
        }
      }
      function getOwner() {
        var dispatcher = ReactSharedInternals.A;
        return null === dispatcher ? null : dispatcher.getOwner();
      }
      function hasValidRef(config) {
        if (hasOwnProperty.call(config, "ref")) {
          var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
          if (getter && getter.isReactWarning)
            return false;
        }
        return void 0 !== config.ref;
      }
      function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
          var getter = Object.getOwnPropertyDescriptor(config, "key").get;
          if (getter && getter.isReactWarning)
            return false;
        }
        return void 0 !== config.key;
      }
      function defineKeyPropWarningGetter(props, displayName) {
        function warnAboutAccessingKey() {
          specialPropKeyWarningShown || (specialPropKeyWarningShown = true, error$jscomp$0(
            "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
            displayName
          ));
        }
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
      function elementRefGetterWithDeprecationWarning() {
        var componentName = getComponentNameFromType(this.type);
        didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = true, error$jscomp$0(
          "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."
        ));
        componentName = this.props.ref;
        return void 0 !== componentName ? componentName : null;
      }
      function ReactElement(type, key, _ref, self2, source, owner, props, debugStack, debugTask) {
        _ref = props.ref;
        type = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          props,
          _owner: owner
        };
        null !== (void 0 !== _ref ? _ref : null) ? Object.defineProperty(type, "ref", {
          enumerable: false,
          get: elementRefGetterWithDeprecationWarning
        }) : Object.defineProperty(type, "ref", { enumerable: false, value: null });
        type._store = {};
        Object.defineProperty(type._store, "validated", {
          configurable: false,
          enumerable: false,
          writable: true,
          value: 0
        });
        Object.defineProperty(type, "_debugInfo", {
          configurable: false,
          enumerable: false,
          writable: true,
          value: null
        });
        Object.defineProperty(type, "_debugStack", {
          configurable: false,
          enumerable: false,
          writable: true,
          value: debugStack
        });
        Object.defineProperty(type, "_debugTask", {
          configurable: false,
          enumerable: false,
          writable: true,
          value: debugTask
        });
        Object.freeze && (Object.freeze(type.props), Object.freeze(type));
        return type;
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        newKey = ReactElement(
          oldElement.type,
          newKey,
          null,
          void 0,
          void 0,
          oldElement._owner,
          oldElement.props,
          oldElement._debugStack,
          oldElement._debugTask
        );
        newKey._store.validated = oldElement._store.validated;
        return newKey;
      }
      function isValidElement(object) {
        return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function escape(key) {
        var escaperLookup = { "=": "=0", ":": "=2" };
        return "$" + key.replace(/[=:]/g, function(match) {
          return escaperLookup[match];
        });
      }
      function getElementKey(element, index) {
        return "object" === typeof element && null !== element && null != element.key ? (checkKeyStringCoercion(element.key), escape("" + element.key)) : index.toString(36);
      }
      function noop$1() {
      }
      function resolveThenable(thenable) {
        switch (thenable.status) {
          case "fulfilled":
            return thenable.value;
          case "rejected":
            throw thenable.reason;
          default:
            switch ("string" === typeof thenable.status ? thenable.then(noop$1, noop$1) : (thenable.status = "pending", thenable.then(
              function(fulfilledValue) {
                "pending" === thenable.status && (thenable.status = "fulfilled", thenable.value = fulfilledValue);
              },
              function(error) {
                "pending" === thenable.status && (thenable.status = "rejected", thenable.reason = error);
              }
            )), thenable.status) {
              case "fulfilled":
                return thenable.value;
              case "rejected":
                throw thenable.reason;
            }
        }
        throw thenable;
      }
      function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if ("undefined" === type || "boolean" === type)
          children = null;
        var invokeCallback = false;
        if (null === children)
          invokeCallback = true;
        else
          switch (type) {
            case "bigint":
            case "string":
            case "number":
              invokeCallback = true;
              break;
            case "object":
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
                  break;
                case REACT_LAZY_TYPE:
                  return invokeCallback = children._init, mapIntoArray(
                    invokeCallback(children._payload),
                    array,
                    escapedPrefix,
                    nameSoFar,
                    callback
                  );
              }
          }
        if (invokeCallback) {
          invokeCallback = children;
          callback = callback(invokeCallback);
          var childKey = "" === nameSoFar ? "." + getElementKey(invokeCallback, 0) : nameSoFar;
          isArrayImpl(callback) ? (escapedPrefix = "", null != childKey && (escapedPrefix = childKey.replace(userProvidedKeyEscapeRegex, "$&/") + "/"), mapIntoArray(callback, array, escapedPrefix, "", function(c) {
            return c;
          })) : null != callback && (isValidElement(callback) && (null != callback.key && (invokeCallback && invokeCallback.key === callback.key || checkKeyStringCoercion(callback.key)), escapedPrefix = cloneAndReplaceKey(
            callback,
            escapedPrefix + (null == callback.key || invokeCallback && invokeCallback.key === callback.key ? "" : ("" + callback.key).replace(
              userProvidedKeyEscapeRegex,
              "$&/"
            ) + "/") + childKey
          ), "" !== nameSoFar && null != invokeCallback && isValidElement(invokeCallback) && null == invokeCallback.key && invokeCallback._store && !invokeCallback._store.validated && (escapedPrefix._store.validated = 2), callback = escapedPrefix), array.push(callback));
          return 1;
        }
        invokeCallback = 0;
        childKey = "" === nameSoFar ? "." : nameSoFar + ":";
        if (isArrayImpl(children))
          for (var i = 0; i < children.length; i++)
            nameSoFar = children[i], type = childKey + getElementKey(nameSoFar, i), invokeCallback += mapIntoArray(
              nameSoFar,
              array,
              escapedPrefix,
              type,
              callback
            );
        else if (i = getIteratorFn(children), "function" === typeof i)
          for (i === children.entries && (didWarnAboutMaps || warn(
            "Using Maps as children is not supported. Use an array of keyed ReactElements instead."
          ), didWarnAboutMaps = true), children = i.call(children), i = 0; !(nameSoFar = children.next()).done; )
            nameSoFar = nameSoFar.value, type = childKey + getElementKey(nameSoFar, i++), invokeCallback += mapIntoArray(
              nameSoFar,
              array,
              escapedPrefix,
              type,
              callback
            );
        else if ("object" === type) {
          if ("function" === typeof children.then)
            return mapIntoArray(
              resolveThenable(children),
              array,
              escapedPrefix,
              nameSoFar,
              callback
            );
          array = String(children);
          throw Error(
            "Objects are not valid as a React child (found: " + ("[object Object]" === array ? "object with keys {" + Object.keys(children).join(", ") + "}" : array) + "). If you meant to render a collection of children, use an array instead."
          );
        }
        return invokeCallback;
      }
      function mapChildren(children, func, context) {
        if (null == children)
          return children;
        var result = [], count = 0;
        mapIntoArray(children, result, "", "", function(child) {
          return func.call(context, child, count++);
        });
        return result;
      }
      function lazyInitializer(payload) {
        if (-1 === payload._status) {
          var ctor = payload._result;
          ctor = ctor();
          ctor.then(
            function(moduleObject) {
              if (0 === payload._status || -1 === payload._status)
                payload._status = 1, payload._result = moduleObject;
            },
            function(error) {
              if (0 === payload._status || -1 === payload._status)
                payload._status = 2, payload._result = error;
            }
          );
          -1 === payload._status && (payload._status = 0, payload._result = ctor);
        }
        if (1 === payload._status)
          return ctor = payload._result, void 0 === ctor && error$jscomp$0(
            "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?",
            ctor
          ), "default" in ctor || error$jscomp$0(
            "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",
            ctor
          ), ctor.default;
        throw payload._result;
      }
      function resolveDispatcher() {
        var dispatcher = ReactSharedInternals.H;
        null === dispatcher && error$jscomp$0(
          "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
        );
        return dispatcher;
      }
      function useOptimistic(passthrough, reducer) {
        return resolveDispatcher().useOptimistic(passthrough, reducer);
      }
      function noop3() {
      }
      function enqueueTask(task) {
        if (null === enqueueTaskImpl)
          try {
            var requireString = ("require" + Math.random()).slice(0, 7);
            enqueueTaskImpl = (module && module[requireString]).call(
              module,
              "timers"
            ).setImmediate;
          } catch (_err) {
            enqueueTaskImpl = function(callback) {
              false === didWarnAboutMessageChannel && (didWarnAboutMessageChannel = true, "undefined" === typeof MessageChannel && error$jscomp$0(
                "This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."
              ));
              var channel = new MessageChannel();
              channel.port1.onmessage = callback;
              channel.port2.postMessage(void 0);
            };
          }
        return enqueueTaskImpl(task);
      }
      function aggregateErrors(errors) {
        return 1 < errors.length && "function" === typeof AggregateError ? new AggregateError(errors) : errors[0];
      }
      function popActScope(prevActQueue, prevActScopeDepth) {
        prevActScopeDepth !== actScopeDepth - 1 && error$jscomp$0(
          "You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "
        );
        actScopeDepth = prevActScopeDepth;
      }
      function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        var queue = ReactSharedInternals.actQueue;
        if (null !== queue)
          if (0 !== queue.length)
            try {
              flushActQueue(queue);
              enqueueTask(function() {
                return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
              });
              return;
            } catch (error$3) {
              ReactSharedInternals.thrownErrors.push(error$3);
            }
          else
            ReactSharedInternals.actQueue = null;
        0 < ReactSharedInternals.thrownErrors.length ? (queue = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, reject(queue)) : resolve(returnValue);
      }
      function flushActQueue(queue) {
        if (!isFlushing) {
          isFlushing = true;
          var i = 0;
          try {
            for (; i < queue.length; i++) {
              var callback = queue[i];
              do {
                ReactSharedInternals.didUsePromise = false;
                var continuation = callback(false);
                if (null !== continuation) {
                  if (ReactSharedInternals.didUsePromise) {
                    queue[i] = callback;
                    queue.splice(0, i);
                    return;
                  }
                  callback = continuation;
                } else
                  break;
              } while (1);
            }
            queue.length = 0;
          } catch (error$4) {
            queue.splice(0, i + 1), ReactSharedInternals.thrownErrors.push(error$4);
          } finally {
            isFlushing = false;
          }
        }
      }
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
      var ReactSharedInternals = {
        H: null,
        A: null,
        T: null,
        S: null,
        actQueue: null,
        isBatchingLegacy: false,
        didScheduleLegacyUpdate: false,
        didUsePromise: false,
        thrownErrors: [],
        getCurrentStack: null
      }, supportsCreateTask = !!console.createTask, REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      Symbol.for("react.provider");
      var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), REACT_POSTPONE_TYPE = Symbol.for("react.postpone"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, didWarnStateUpdateForUnmountedComponent = {}, ReactNoopUpdateQueue = {
        isMounted: function() {
          return false;
        },
        enqueueForceUpdate: function(publicInstance) {
          warnNoop(publicInstance, "forceUpdate");
        },
        enqueueReplaceState: function(publicInstance) {
          warnNoop(publicInstance, "replaceState");
        },
        enqueueSetState: function(publicInstance) {
          warnNoop(publicInstance, "setState");
        }
      }, assign = Object.assign, emptyObject = {};
      Object.freeze(emptyObject);
      Component.prototype.isReactComponent = {};
      Component.prototype.setState = function(partialState, callback) {
        if ("object" !== typeof partialState && "function" !== typeof partialState && null != partialState)
          throw Error(
            "takes an object of state variables to update or a function which returns an object of state variables."
          );
        this.updater.enqueueSetState(this, partialState, callback, "setState");
      };
      Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
      };
      var deprecatedAPIs = {
        isMounted: [
          "isMounted",
          "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
          "replaceState",
          "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
      }, fnName;
      for (fnName in deprecatedAPIs)
        deprecatedAPIs.hasOwnProperty(fnName) && defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
      ComponentDummy.prototype = Component.prototype;
      deprecatedAPIs = PureComponent.prototype = new ComponentDummy();
      deprecatedAPIs.constructor = PureComponent;
      assign(deprecatedAPIs, Component.prototype);
      deprecatedAPIs.isPureReactComponent = true;
      var isArrayImpl = Array.isArray, REACT_CLIENT_REFERENCE$1 = Symbol.for("react.client.reference"), hasOwnProperty = Object.prototype.hasOwnProperty, REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
      new ("function" === typeof WeakMap ? WeakMap : Map)();
      var createTask = console.createTask ? console.createTask : function() {
        return null;
      }, specialPropKeyWarningShown, didWarnAboutOldJSXRuntime;
      var didWarnAboutElementRef = {};
      var didWarnAboutMaps = false, userProvidedKeyEscapeRegex = /\/+/g, reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
        if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
          var event = new window.ErrorEvent("error", {
            bubbles: true,
            cancelable: true,
            message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
            error
          });
          if (!window.dispatchEvent(event))
            return;
        } else if ("object" === typeof process && "function" === typeof process.emit) {
          process.emit("uncaughtException", error);
          return;
        }
        console.error(error);
      }, didWarnAboutMessageChannel = false, enqueueTaskImpl = null, actScopeDepth = 0, didWarnNoAwaitAct = false, isFlushing = false, queueSeveralMicrotasks = "function" === typeof queueMicrotask ? function(callback) {
        queueMicrotask(function() {
          return queueMicrotask(callback);
        });
      } : enqueueTask;
      exports.Children = {
        map: mapChildren,
        forEach: function(children, forEachFunc, forEachContext) {
          mapChildren(
            children,
            function() {
              forEachFunc.apply(this, arguments);
            },
            forEachContext
          );
        },
        count: function(children) {
          var n = 0;
          mapChildren(children, function() {
            n++;
          });
          return n;
        },
        toArray: function(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        },
        only: function(children) {
          if (!isValidElement(children))
            throw Error(
              "React.Children.only expected to receive a single React element child."
            );
          return children;
        }
      };
      exports.Component = Component;
      exports.Fragment = REACT_FRAGMENT_TYPE;
      exports.Profiler = REACT_PROFILER_TYPE;
      exports.PureComponent = PureComponent;
      exports.StrictMode = REACT_STRICT_MODE_TYPE;
      exports.Suspense = REACT_SUSPENSE_TYPE;
      exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals;
      exports.act = function(callback) {
        var prevActQueue = ReactSharedInternals.actQueue, prevActScopeDepth = actScopeDepth;
        actScopeDepth++;
        var queue = ReactSharedInternals.actQueue = null !== prevActQueue ? prevActQueue : [], didAwaitActCall = false;
        try {
          var result = callback();
        } catch (error$1) {
          ReactSharedInternals.thrownErrors.push(error$1);
        }
        if (0 < ReactSharedInternals.thrownErrors.length)
          throw popActScope(prevActQueue, prevActScopeDepth), callback = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, callback;
        if (null !== result && "object" === typeof result && "function" === typeof result.then) {
          var thenable = result;
          queueSeveralMicrotasks(function() {
            didAwaitActCall || didWarnNoAwaitAct || (didWarnNoAwaitAct = true, error$jscomp$0(
              "You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"
            ));
          });
          return {
            then: function(resolve, reject) {
              didAwaitActCall = true;
              thenable.then(
                function(returnValue) {
                  popActScope(prevActQueue, prevActScopeDepth);
                  if (0 === prevActScopeDepth) {
                    try {
                      flushActQueue(queue), enqueueTask(function() {
                        return recursivelyFlushAsyncActWork(
                          returnValue,
                          resolve,
                          reject
                        );
                      });
                    } catch (error$2) {
                      ReactSharedInternals.thrownErrors.push(error$2);
                    }
                    if (0 < ReactSharedInternals.thrownErrors.length) {
                      var _thrownError = aggregateErrors(
                        ReactSharedInternals.thrownErrors
                      );
                      ReactSharedInternals.thrownErrors.length = 0;
                      reject(_thrownError);
                    }
                  } else
                    resolve(returnValue);
                },
                function(error) {
                  popActScope(prevActQueue, prevActScopeDepth);
                  0 < ReactSharedInternals.thrownErrors.length ? (error = aggregateErrors(
                    ReactSharedInternals.thrownErrors
                  ), ReactSharedInternals.thrownErrors.length = 0, reject(error)) : reject(error);
                }
              );
            }
          };
        }
        var returnValue$jscomp$0 = result;
        popActScope(prevActQueue, prevActScopeDepth);
        0 === prevActScopeDepth && (flushActQueue(queue), 0 !== queue.length && queueSeveralMicrotasks(function() {
          didAwaitActCall || didWarnNoAwaitAct || (didWarnNoAwaitAct = true, error$jscomp$0(
            "A component suspended inside an `act` scope, but the `act` call was not awaited. When testing React components that depend on asynchronous data, you must await the result:\n\nawait act(() => ...)"
          ));
        }), ReactSharedInternals.actQueue = null);
        if (0 < ReactSharedInternals.thrownErrors.length)
          throw callback = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, callback;
        return {
          then: function(resolve, reject) {
            didAwaitActCall = true;
            0 === prevActScopeDepth ? (ReactSharedInternals.actQueue = queue, enqueueTask(function() {
              return recursivelyFlushAsyncActWork(
                returnValue$jscomp$0,
                resolve,
                reject
              );
            })) : resolve(returnValue$jscomp$0);
          }
        };
      };
      exports.cache = function(fn) {
        return function() {
          return fn.apply(null, arguments);
        };
      };
      exports.captureOwnerStack = function() {
        var getCurrentStack = ReactSharedInternals.getCurrentStack;
        return null === getCurrentStack ? null : getCurrentStack(null);
      };
      exports.cloneElement = function(element, config, children) {
        if (null === element || void 0 === element)
          throw Error(
            "The argument must be a React element, but you passed " + element + "."
          );
        var props = assign({}, element.props), key = element.key, owner = element._owner;
        if (null != config)
          for (propName in hasValidRef(config) && (owner = getOwner()), hasValidKey(config) && (checkKeyStringCoercion(config.key), key = "" + config.key), config)
            !hasOwnProperty.call(config, propName) || "key" === propName || "__self" === propName || "__source" === propName || "ref" === propName && void 0 === config.ref || (props[propName] = config[propName]);
        var propName = arguments.length - 2;
        if (1 === propName)
          props.children = children;
        else if (1 < propName) {
          for (var childArray = Array(propName), i = 0; i < propName; i++)
            childArray[i] = arguments[i + 2];
          props.children = childArray;
        }
        props = ReactElement(
          element.type,
          key,
          null,
          void 0,
          void 0,
          owner,
          props,
          element._debugStack,
          element._debugTask
        );
        for (key = 2; key < arguments.length; key++)
          owner = arguments[key], isValidElement(owner) && owner._store && (owner._store.validated = 1);
        return props;
      };
      exports.createContext = function(defaultValue) {
        defaultValue = {
          $$typeof: REACT_CONTEXT_TYPE,
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          _threadCount: 0,
          Provider: null,
          Consumer: null
        };
        defaultValue.Provider = defaultValue;
        defaultValue.Consumer = {
          $$typeof: REACT_CONSUMER_TYPE,
          _context: defaultValue
        };
        defaultValue._currentRenderer = null;
        defaultValue._currentRenderer2 = null;
        return defaultValue;
      };
      exports.createElement = function(type, config, children) {
        for (var i = 2; i < arguments.length; i++) {
          var node = arguments[i];
          isValidElement(node) && node._store && (node._store.validated = 1);
        }
        i = {};
        node = null;
        if (null != config)
          for (propName in didWarnAboutOldJSXRuntime || !("__self" in config) || "key" in config || (didWarnAboutOldJSXRuntime = true, warn(
            "Your app (or one of its dependencies) is using an outdated JSX transform. Update to the modern JSX transform for faster performance: https://react.dev/link/new-jsx-transform"
          )), hasValidRef(config), hasValidKey(config) && (checkKeyStringCoercion(config.key), node = "" + config.key), config)
            hasOwnProperty.call(config, propName) && "key" !== propName && "__self" !== propName && "__source" !== propName && (i[propName] = config[propName]);
        var childrenLength = arguments.length - 2;
        if (1 === childrenLength)
          i.children = children;
        else if (1 < childrenLength) {
          for (var childArray = Array(childrenLength), _i = 0; _i < childrenLength; _i++)
            childArray[_i] = arguments[_i + 2];
          Object.freeze && Object.freeze(childArray);
          i.children = childArray;
        }
        if (type && type.defaultProps)
          for (propName in childrenLength = type.defaultProps, childrenLength)
            void 0 === i[propName] && (i[propName] = childrenLength[propName]);
        if (node) {
          var propName = "function" === typeof type ? type.displayName || type.name || "Unknown" : type;
          node && defineKeyPropWarningGetter(i, propName);
        }
        return ReactElement(
          type,
          node,
          null,
          void 0,
          void 0,
          getOwner(),
          i,
          Error("react-stack-top-frame"),
          createTask(getTaskName(type))
        );
      };
      exports.createRef = function() {
        var refObject = { current: null };
        Object.seal(refObject);
        return refObject;
      };
      exports.experimental_useEffectEvent = function(callback) {
        return resolveDispatcher().useEffectEvent(callback);
      };
      exports.experimental_useOptimistic = function(passthrough, reducer) {
        error$jscomp$0(
          "useOptimistic is now in canary. Remove the experimental_ prefix. The prefixed alias will be removed in an upcoming release."
        );
        return useOptimistic(passthrough, reducer);
      };
      exports.forwardRef = function(render) {
        null != render && render.$$typeof === REACT_MEMO_TYPE ? error$jscomp$0(
          "forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))."
        ) : "function" !== typeof render ? error$jscomp$0(
          "forwardRef requires a render function but was given %s.",
          null === render ? "null" : typeof render
        ) : 0 !== render.length && 2 !== render.length && error$jscomp$0(
          "forwardRef render functions accept exactly two parameters: props and ref. %s",
          1 === render.length ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined."
        );
        null != render && null != render.defaultProps && error$jscomp$0(
          "forwardRef render functions do not support defaultProps. Did you accidentally pass a React component?"
        );
        var elementType = { $$typeof: REACT_FORWARD_REF_TYPE, render }, ownName;
        Object.defineProperty(elementType, "displayName", {
          enumerable: false,
          configurable: true,
          get: function() {
            return ownName;
          },
          set: function(name) {
            ownName = name;
            render.name || render.displayName || (Object.defineProperty(render, "name", { value: name }), render.displayName = name);
          }
        });
        return elementType;
      };
      exports.isValidElement = isValidElement;
      exports.lazy = function(ctor) {
        return {
          $$typeof: REACT_LAZY_TYPE,
          _payload: { _status: -1, _result: ctor },
          _init: lazyInitializer
        };
      };
      exports.memo = function(type, compare) {
        "string" === typeof type || "function" === typeof type || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_OFFSCREEN_TYPE || "object" === typeof type && null !== type && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_CONSUMER_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_CLIENT_REFERENCE || void 0 !== type.getModuleId) || error$jscomp$0(
          "memo: The first argument must be a component. Instead received: %s",
          null === type ? "null" : typeof type
        );
        compare = {
          $$typeof: REACT_MEMO_TYPE,
          type,
          compare: void 0 === compare ? null : compare
        };
        var ownName;
        Object.defineProperty(compare, "displayName", {
          enumerable: false,
          configurable: true,
          get: function() {
            return ownName;
          },
          set: function(name) {
            ownName = name;
            type.name || type.displayName || (Object.defineProperty(type, "name", { value: name }), type.displayName = name);
          }
        });
        return compare;
      };
      exports.startTransition = function(scope) {
        var prevTransition = ReactSharedInternals.T, transition = {};
        ReactSharedInternals.T = transition;
        var currentTransition = ReactSharedInternals.T;
        ReactSharedInternals.T._updatedFibers = /* @__PURE__ */ new Set();
        try {
          var returnValue = scope(), onStartTransitionFinish = ReactSharedInternals.S;
          null !== onStartTransitionFinish && onStartTransitionFinish(transition, returnValue);
          "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && returnValue.then(noop3, reportGlobalError);
        } catch (error$0) {
          reportGlobalError(error$0);
        } finally {
          null === prevTransition && currentTransition._updatedFibers && (scope = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < scope && warn(
            "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
          )), ReactSharedInternals.T = prevTransition;
        }
      };
      exports.unstable_Activity = REACT_OFFSCREEN_TYPE;
      exports.unstable_DebugTracingMode = REACT_DEBUG_TRACING_MODE_TYPE;
      exports.unstable_SuspenseList = REACT_SUSPENSE_LIST_TYPE;
      exports.unstable_getCacheForType = function(resourceType) {
        var dispatcher = ReactSharedInternals.A;
        return dispatcher ? dispatcher.getCacheForType(resourceType) : resourceType();
      };
      exports.unstable_postpone = function(reason) {
        reason = Error(reason);
        reason.$$typeof = REACT_POSTPONE_TYPE;
        throw reason;
      };
      exports.unstable_useCacheRefresh = function() {
        return resolveDispatcher().useCacheRefresh();
      };
      exports.use = function(usable) {
        return resolveDispatcher().use(usable);
      };
      exports.useActionState = function(action, initialState, permalink) {
        return resolveDispatcher().useActionState(
          action,
          initialState,
          permalink
        );
      };
      exports.useCallback = function(callback, deps) {
        return resolveDispatcher().useCallback(callback, deps);
      };
      exports.useContext = function(Context) {
        var dispatcher = resolveDispatcher();
        Context.$$typeof === REACT_CONSUMER_TYPE && error$jscomp$0(
          "Calling useContext(Context.Consumer) is not supported and will cause bugs. Did you mean to call useContext(Context) instead?"
        );
        return dispatcher.useContext(Context);
      };
      exports.useDebugValue = function(value, formatterFn) {
        return resolveDispatcher().useDebugValue(value, formatterFn);
      };
      exports.useDeferredValue = function(value, initialValue) {
        return resolveDispatcher().useDeferredValue(value, initialValue);
      };
      exports.useEffect = function(create, deps) {
        return resolveDispatcher().useEffect(create, deps);
      };
      exports.useId = function() {
        return resolveDispatcher().useId();
      };
      exports.useImperativeHandle = function(ref, create, deps) {
        return resolveDispatcher().useImperativeHandle(ref, create, deps);
      };
      exports.useInsertionEffect = function(create, deps) {
        return resolveDispatcher().useInsertionEffect(create, deps);
      };
      exports.useLayoutEffect = function(create, deps) {
        return resolveDispatcher().useLayoutEffect(create, deps);
      };
      exports.useMemo = function(create, deps) {
        return resolveDispatcher().useMemo(create, deps);
      };
      exports.useOptimistic = useOptimistic;
      exports.useReducer = function(reducer, initialArg, init) {
        return resolveDispatcher().useReducer(reducer, initialArg, init);
      };
      exports.useRef = function(initialValue) {
        return resolveDispatcher().useRef(initialValue);
      };
      exports.useState = function(initialState) {
        return resolveDispatcher().useState(initialState);
      };
      exports.useSyncExternalStore = function(subscribe, getSnapshot, getServerSnapshot) {
        return resolveDispatcher().useSyncExternalStore(
          subscribe,
          getSnapshot,
          getServerSnapshot
        );
      };
      exports.useTransition = function() {
        return resolveDispatcher().useTransition();
      };
      exports.version = "19.0.0-experimental-3da26163a3-20240704";
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
    })();
  }
});

// node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/react/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_development();
    }
  }
});

// node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
    "use strict";
    (function() {
      function performWorkUntilDeadline() {
        if (isMessageLoopRunning) {
          var currentTime = exports.unstable_now();
          startTime = currentTime;
          var hasMoreWork = true;
          try {
            a: {
              isHostCallbackScheduled = false;
              isHostTimeoutScheduled && (isHostTimeoutScheduled = false, localClearTimeout(taskTimeoutID), taskTimeoutID = -1);
              isPerformingWork = true;
              var previousPriorityLevel = currentPriorityLevel;
              try {
                b: {
                  advanceTimers(currentTime);
                  for (currentTask = peek(taskQueue); null !== currentTask && !(currentTask.expirationTime > currentTime && shouldYieldToHost()); ) {
                    var callback = currentTask.callback;
                    if ("function" === typeof callback) {
                      currentTask.callback = null;
                      currentPriorityLevel = currentTask.priorityLevel;
                      var continuationCallback = callback(
                        currentTask.expirationTime <= currentTime
                      );
                      currentTime = exports.unstable_now();
                      if ("function" === typeof continuationCallback) {
                        currentTask.callback = continuationCallback;
                        advanceTimers(currentTime);
                        hasMoreWork = true;
                        break b;
                      }
                      currentTask === peek(taskQueue) && pop(taskQueue);
                      advanceTimers(currentTime);
                    } else
                      pop(taskQueue);
                    currentTask = peek(taskQueue);
                  }
                  if (null !== currentTask)
                    hasMoreWork = true;
                  else {
                    var firstTimer = peek(timerQueue);
                    null !== firstTimer && requestHostTimeout(
                      handleTimeout,
                      firstTimer.startTime - currentTime
                    );
                    hasMoreWork = false;
                  }
                }
                break a;
              } finally {
                currentTask = null, currentPriorityLevel = previousPriorityLevel, isPerformingWork = false;
              }
              hasMoreWork = void 0;
            }
          } finally {
            hasMoreWork ? schedulePerformWorkUntilDeadline() : isMessageLoopRunning = false;
          }
        }
      }
      function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        a:
          for (; 0 < index; ) {
            var parentIndex = index - 1 >>> 1, parent = heap[parentIndex];
            if (0 < compare(parent, node))
              heap[parentIndex] = node, heap[index] = parent, index = parentIndex;
            else
              break a;
          }
      }
      function peek(heap) {
        return 0 === heap.length ? null : heap[0];
      }
      function pop(heap) {
        if (0 === heap.length)
          return null;
        var first = heap[0], last = heap.pop();
        if (last !== first) {
          heap[0] = last;
          a:
            for (var index = 0, length = heap.length, halfLength = length >>> 1; index < halfLength; ) {
              var leftIndex = 2 * (index + 1) - 1, left = heap[leftIndex], rightIndex = leftIndex + 1, right = heap[rightIndex];
              if (0 > compare(left, last))
                rightIndex < length && 0 > compare(right, left) ? (heap[index] = right, heap[rightIndex] = last, index = rightIndex) : (heap[index] = left, heap[leftIndex] = last, index = leftIndex);
              else if (rightIndex < length && 0 > compare(right, last))
                heap[index] = right, heap[rightIndex] = last, index = rightIndex;
              else
                break a;
            }
        }
        return first;
      }
      function compare(a, b) {
        var diff = a.sortIndex - b.sortIndex;
        return 0 !== diff ? diff : a.id - b.id;
      }
      function advanceTimers(currentTime) {
        for (var timer = peek(timerQueue); null !== timer; ) {
          if (null === timer.callback)
            pop(timerQueue);
          else if (timer.startTime <= currentTime)
            pop(timerQueue), timer.sortIndex = timer.expirationTime, push(taskQueue, timer);
          else
            break;
          timer = peek(timerQueue);
        }
      }
      function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled)
          if (null !== peek(taskQueue))
            isHostCallbackScheduled = true, requestHostCallback();
          else {
            var firstTimer = peek(timerQueue);
            null !== firstTimer && requestHostTimeout(
              handleTimeout,
              firstTimer.startTime - currentTime
            );
          }
      }
      function shouldYieldToHost() {
        return exports.unstable_now() - startTime < frameInterval ? false : true;
      }
      function requestHostCallback() {
        isMessageLoopRunning || (isMessageLoopRunning = true, schedulePerformWorkUntilDeadline());
      }
      function requestHostTimeout(callback, ms) {
        taskTimeoutID = localSetTimeout(function() {
          callback(exports.unstable_now());
        }, ms);
      }
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
      exports.unstable_now = void 0;
      if ("object" === typeof performance && "function" === typeof performance.now) {
        var localPerformance = performance;
        exports.unstable_now = function() {
          return localPerformance.now();
        };
      } else {
        var localDate = Date, initialTime = localDate.now();
        exports.unstable_now = function() {
          return localDate.now() - initialTime;
        };
      }
      var taskQueue = [], timerQueue = [], taskIdCounter = 1, currentTask = null, currentPriorityLevel = 3, isPerformingWork = false, isHostCallbackScheduled = false, isHostTimeoutScheduled = false, localSetTimeout = "function" === typeof setTimeout ? setTimeout : null, localClearTimeout = "function" === typeof clearTimeout ? clearTimeout : null, localSetImmediate = "undefined" !== typeof setImmediate ? setImmediate : null, isMessageLoopRunning = false, taskTimeoutID = -1, frameInterval = 5, startTime = -1;
      if ("function" === typeof localSetImmediate)
        var schedulePerformWorkUntilDeadline = function() {
          localSetImmediate(performWorkUntilDeadline);
        };
      else if ("undefined" !== typeof MessageChannel) {
        var channel = new MessageChannel(), port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        schedulePerformWorkUntilDeadline = function() {
          port.postMessage(null);
        };
      } else
        schedulePerformWorkUntilDeadline = function() {
          localSetTimeout(performWorkUntilDeadline, 0);
        };
      exports.unstable_IdlePriority = 5;
      exports.unstable_ImmediatePriority = 1;
      exports.unstable_LowPriority = 4;
      exports.unstable_NormalPriority = 3;
      exports.unstable_Profiling = null;
      exports.unstable_UserBlockingPriority = 2;
      exports.unstable_cancelCallback = function(task) {
        task.callback = null;
      };
      exports.unstable_continueExecution = function() {
        isHostCallbackScheduled || isPerformingWork || (isHostCallbackScheduled = true, requestHostCallback());
      };
      exports.unstable_forceFrameRate = function(fps) {
        0 > fps || 125 < fps ? console.error(
          "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
        ) : frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5;
      };
      exports.unstable_getCurrentPriorityLevel = function() {
        return currentPriorityLevel;
      };
      exports.unstable_getFirstCallbackNode = function() {
        return peek(taskQueue);
      };
      exports.unstable_next = function(eventHandler) {
        switch (currentPriorityLevel) {
          case 1:
          case 2:
          case 3:
            var priorityLevel = 3;
            break;
          default:
            priorityLevel = currentPriorityLevel;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      };
      exports.unstable_pauseExecution = function() {
      };
      exports.unstable_requestPaint = function() {
      };
      exports.unstable_runWithPriority = function(priorityLevel, eventHandler) {
        switch (priorityLevel) {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
            break;
          default:
            priorityLevel = 3;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      };
      exports.unstable_scheduleCallback = function(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        "object" === typeof options && null !== options ? (options = options.delay, options = "number" === typeof options && 0 < options ? currentTime + options : currentTime) : options = currentTime;
        switch (priorityLevel) {
          case 1:
            var timeout = -1;
            break;
          case 2:
            timeout = 250;
            break;
          case 5:
            timeout = 1073741823;
            break;
          case 4:
            timeout = 1e4;
            break;
          default:
            timeout = 5e3;
        }
        timeout = options + timeout;
        priorityLevel = {
          id: taskIdCounter++,
          callback,
          priorityLevel,
          startTime: options,
          expirationTime: timeout,
          sortIndex: -1
        };
        options > currentTime ? (priorityLevel.sortIndex = options, push(timerQueue, priorityLevel), null === peek(taskQueue) && priorityLevel === peek(timerQueue) && (isHostTimeoutScheduled ? (localClearTimeout(taskTimeoutID), taskTimeoutID = -1) : isHostTimeoutScheduled = true, requestHostTimeout(handleTimeout, options - currentTime))) : (priorityLevel.sortIndex = timeout, push(taskQueue, priorityLevel), isHostCallbackScheduled || isPerformingWork || (isHostCallbackScheduled = true, requestHostCallback()));
        return priorityLevel;
      };
      exports.unstable_shouldYield = shouldYieldToHost;
      exports.unstable_wrapCallback = function(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = parentPriorityLevel;
          try {
            return callback.apply(this, arguments);
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
      };
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
    })();
  }
});

// node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "node_modules/scheduler/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_scheduler_development();
    }
  }
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
    "use strict";
    (function() {
      function noop3() {
      }
      function error(format) {
        for (var _len2 = arguments.length, args = Array(1 < _len2 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
          args[_key2 - 1] = arguments[_key2];
        _len2 = format;
        _key2 = Error("react-stack-top-frame");
        !supportsCreateTask && ReactSharedInternals.getCurrentStack && (_key2 = ReactSharedInternals.getCurrentStack(_key2), "" !== _key2 && (_len2 += "%s", args = args.concat([_key2])));
        args.unshift(_len2);
        Function.prototype.apply.call(console.error, console, args);
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function createPortal$1(children, containerInfo, implementation) {
        var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
        try {
          testStringCoercion(key);
          var JSCompiler_inline_result = false;
        } catch (e) {
          JSCompiler_inline_result = true;
        }
        JSCompiler_inline_result && (error(
          "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
          "function" === typeof Symbol && Symbol.toStringTag && key[Symbol.toStringTag] || key.constructor.name || "Object"
        ), testStringCoercion(key));
        return {
          $$typeof: REACT_PORTAL_TYPE,
          key: null == key ? null : "" + key,
          children,
          containerInfo,
          implementation
        };
      }
      function getCrossOriginStringAs(as, input) {
        if ("font" === as)
          return "";
        if ("string" === typeof input)
          return "use-credentials" === input ? input : "";
      }
      function getValueDescriptorExpectingObjectForWarning(thing) {
        return null === thing ? "`null`" : void 0 === thing ? "`undefined`" : "" === thing ? "an empty string" : 'something with type "' + typeof thing + '"';
      }
      function getValueDescriptorExpectingEnumForWarning(thing) {
        return null === thing ? "`null`" : void 0 === thing ? "`undefined`" : "" === thing ? "an empty string" : "string" === typeof thing ? JSON.stringify(thing) : "number" === typeof thing ? "`" + thing + "`" : 'something with type "' + typeof thing + '"';
      }
      function resolveDispatcher() {
        var dispatcher = ReactSharedInternals.H;
        null === dispatcher && error(
          "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
        );
        return dispatcher;
      }
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
      var React = require_react(), Internals = {
        d: {
          f: noop3,
          r: function() {
            throw Error(
              "Invalid form element. requestFormReset must be passed a form that was rendered by React."
            );
          },
          D: noop3,
          C: noop3,
          L: noop3,
          m: noop3,
          X: noop3,
          S: noop3,
          M: noop3
        },
        p: 0,
        findDOMNode: null
      }, ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, supportsCreateTask = !!console.createTask, REACT_PORTAL_TYPE = Symbol.for("react.portal");
      "function" === typeof Map && null != Map.prototype && "function" === typeof Map.prototype.forEach && "function" === typeof Set && null != Set.prototype && "function" === typeof Set.prototype.clear && "function" === typeof Set.prototype.forEach || error(
        "React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"
      );
      exports.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = Internals;
      exports.createPortal = function(children, container) {
        var key = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
        if (!container || 1 !== container.nodeType && 9 !== container.nodeType && 11 !== container.nodeType)
          throw Error("Target container is not a DOM element.");
        return createPortal$1(children, container, null, key);
      };
      exports.flushSync = function(fn) {
        var previousTransition = ReactSharedInternals.T, previousUpdatePriority = Internals.p;
        try {
          if (ReactSharedInternals.T = null, Internals.p = 2, fn)
            return fn();
        } finally {
          ReactSharedInternals.T = previousTransition, Internals.p = previousUpdatePriority, Internals.d.f() && error(
            "flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task."
          );
        }
      };
      exports.preconnect = function(href, options) {
        "string" === typeof href && href ? null != options && "object" !== typeof options ? error(
          "ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.",
          getValueDescriptorExpectingEnumForWarning(options)
        ) : null != options && "string" !== typeof options.crossOrigin && error(
          "ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.",
          getValueDescriptorExpectingObjectForWarning(options.crossOrigin)
        ) : error(
          "ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",
          getValueDescriptorExpectingObjectForWarning(href)
        );
        "string" === typeof href && (options ? (options = options.crossOrigin, options = "string" === typeof options ? "use-credentials" === options ? options : "" : void 0) : options = null, Internals.d.C(href, options));
      };
      exports.prefetchDNS = function(href) {
        if ("string" !== typeof href || !href)
          error(
            "ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",
            getValueDescriptorExpectingObjectForWarning(href)
          );
        else if (1 < arguments.length) {
          var options = arguments[1];
          "object" === typeof options && options.hasOwnProperty("crossOrigin") ? error(
            "ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.",
            getValueDescriptorExpectingEnumForWarning(options)
          ) : error(
            "ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.",
            getValueDescriptorExpectingEnumForWarning(options)
          );
        }
        "string" === typeof href && Internals.d.D(href);
      };
      exports.preinit = function(href, options) {
        "string" === typeof href && href ? null == options || "object" !== typeof options ? error(
          "ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.",
          getValueDescriptorExpectingEnumForWarning(options)
        ) : "style" !== options.as && "script" !== options.as && error(
          'ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are "style" and "script".',
          getValueDescriptorExpectingEnumForWarning(options.as)
        ) : error(
          "ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",
          getValueDescriptorExpectingObjectForWarning(href)
        );
        if ("string" === typeof href && options && "string" === typeof options.as) {
          var as = options.as, crossOrigin = getCrossOriginStringAs(as, options.crossOrigin), integrity = "string" === typeof options.integrity ? options.integrity : void 0, fetchPriority = "string" === typeof options.fetchPriority ? options.fetchPriority : void 0;
          "style" === as ? Internals.d.S(
            href,
            "string" === typeof options.precedence ? options.precedence : void 0,
            {
              crossOrigin,
              integrity,
              fetchPriority
            }
          ) : "script" === as && Internals.d.X(href, {
            crossOrigin,
            integrity,
            fetchPriority,
            nonce: "string" === typeof options.nonce ? options.nonce : void 0
          });
        }
      };
      exports.preinitModule = function(href, options) {
        var encountered = "";
        "string" === typeof href && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
        void 0 !== options && "object" !== typeof options ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : options && "as" in options && "script" !== options.as && (encountered += " The `as` option encountered was " + getValueDescriptorExpectingEnumForWarning(options.as) + ".");
        if (encountered)
          error(
            "ReactDOM.preinitModule(): Expected up to two arguments, a non-empty `href` string and, optionally, an `options` object with a valid `as` property.%s",
            encountered
          );
        else
          switch (encountered = options && "string" === typeof options.as ? options.as : "script", encountered) {
            case "script":
              break;
            default:
              encountered = getValueDescriptorExpectingEnumForWarning(encountered), error(
                'ReactDOM.preinitModule(): Currently the only supported "as" type for this function is "script" but received "%s" instead. This warning was generated for `href` "%s". In the future other module types will be supported, aligning with the import-attributes proposal. Learn more here: (https://github.com/tc39/proposal-import-attributes)',
                encountered,
                href
              );
          }
        if ("string" === typeof href)
          if ("object" === typeof options && null !== options) {
            if (null == options.as || "script" === options.as)
              encountered = getCrossOriginStringAs(
                options.as,
                options.crossOrigin
              ), Internals.d.M(href, {
                crossOrigin: encountered,
                integrity: "string" === typeof options.integrity ? options.integrity : void 0,
                nonce: "string" === typeof options.nonce ? options.nonce : void 0
              });
          } else
            null == options && Internals.d.M(href);
      };
      exports.preload = function(href, options) {
        var encountered = "";
        "string" === typeof href && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
        null == options || "object" !== typeof options ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : "string" === typeof options.as && options.as || (encountered += " The `as` option encountered was " + getValueDescriptorExpectingObjectForWarning(options.as) + ".");
        encountered && error(
          'ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel="preload" as="..." />` tag.%s',
          encountered
        );
        if ("string" === typeof href && "object" === typeof options && null !== options && "string" === typeof options.as) {
          encountered = options.as;
          var crossOrigin = getCrossOriginStringAs(
            encountered,
            options.crossOrigin
          );
          Internals.d.L(href, encountered, {
            crossOrigin,
            integrity: "string" === typeof options.integrity ? options.integrity : void 0,
            nonce: "string" === typeof options.nonce ? options.nonce : void 0,
            type: "string" === typeof options.type ? options.type : void 0,
            fetchPriority: "string" === typeof options.fetchPriority ? options.fetchPriority : void 0,
            referrerPolicy: "string" === typeof options.referrerPolicy ? options.referrerPolicy : void 0,
            imageSrcSet: "string" === typeof options.imageSrcSet ? options.imageSrcSet : void 0,
            imageSizes: "string" === typeof options.imageSizes ? options.imageSizes : void 0,
            media: "string" === typeof options.media ? options.media : void 0
          });
        }
      };
      exports.preloadModule = function(href, options) {
        var encountered = "";
        "string" === typeof href && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
        void 0 !== options && "object" !== typeof options ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : options && "as" in options && "string" !== typeof options.as && (encountered += " The `as` option encountered was " + getValueDescriptorExpectingObjectForWarning(options.as) + ".");
        encountered && error(
          'ReactDOM.preloadModule(): Expected two arguments, a non-empty `href` string and, optionally, an `options` object with an `as` property valid for a `<link rel="modulepreload" as="..." />` tag.%s',
          encountered
        );
        "string" === typeof href && (options ? (encountered = getCrossOriginStringAs(
          options.as,
          options.crossOrigin
        ), Internals.d.m(href, {
          as: "string" === typeof options.as && "script" !== options.as ? options.as : void 0,
          crossOrigin: encountered,
          integrity: "string" === typeof options.integrity ? options.integrity : void 0
        })) : Internals.d.m(href));
      };
      exports.requestFormReset = function(form) {
        Internals.d.r(form);
      };
      exports.unstable_batchedUpdates = function(fn, a) {
        return fn(a);
      };
      exports.useFormState = function(action, initialState, permalink) {
        return resolveDispatcher().useFormState(action, initialState, permalink);
      };
      exports.useFormStatus = function() {
        return resolveDispatcher().useHostTransitionStatus();
      };
      exports.version = "19.0.0-experimental-3da26163a3-20240704";
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
    })();
  }
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "node_modules/react-dom/index.js"(exports, module) {
    "use strict";
    if (false) {
      checkDCE();
      module.exports = null;
    } else {
      module.exports = require_react_dom_development();
    }
  }
});

// node_modules/react-dom/cjs/react-dom-client.development.js
var require_react_dom_client_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom-client.development.js"(exports) {
    "use strict";
    (function() {
      function findHook(fiber, id) {
        for (fiber = fiber.memoizedState; null !== fiber && 0 < id; )
          fiber = fiber.next, id--;
        return fiber;
      }
      function copyWithSetImpl(obj, path, index, value) {
        if (index >= path.length)
          return value;
        var key = path[index], updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
        updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
        return updated;
      }
      function copyWithRename(obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length)
          warn("copyWithRename() expects paths of the same length");
        else {
          for (var i = 0; i < newPath.length - 1; i++)
            if (oldPath[i] !== newPath[i]) {
              warn(
                "copyWithRename() expects paths to be the same except for the deepest key"
              );
              return;
            }
          return copyWithRenameImpl(obj, oldPath, newPath, 0);
        }
      }
      function copyWithRenameImpl(obj, oldPath, newPath, index) {
        var oldKey = oldPath[index], updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
        index + 1 === oldPath.length ? (updated[newPath[index]] = updated[oldKey], isArrayImpl(updated) ? updated.splice(oldKey, 1) : delete updated[oldKey]) : updated[oldKey] = copyWithRenameImpl(
          obj[oldKey],
          oldPath,
          newPath,
          index + 1
        );
        return updated;
      }
      function copyWithDeleteImpl(obj, path, index) {
        var key = path[index], updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
        if (index + 1 === path.length)
          return isArrayImpl(updated) ? updated.splice(key, 1) : delete updated[key], updated;
        updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
        return updated;
      }
      function shouldSuspendImpl() {
        return false;
      }
      function shouldErrorImpl() {
        return null;
      }
      function warnInvalidHookAccess() {
        error$jscomp$0(
          "Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://react.dev/link/rules-of-hooks"
        );
      }
      function warnInvalidContextAccess() {
        error$jscomp$0(
          "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
        );
      }
      function noop$2() {
      }
      function warnForMissingKey() {
      }
      function setToSortedString(set) {
        var array = [];
        set.forEach(function(value) {
          array.push(value);
        });
        return array.sort().join(", ");
      }
      function findHostInstancesForRefresh(root2, families) {
        var hostInstances = /* @__PURE__ */ new Set();
        families = new Set(
          families.map(function(family) {
            return family.current;
          })
        );
        findHostInstancesForMatchingFibersRecursively(
          root2.current,
          families,
          hostInstances
        );
        return hostInstances;
      }
      function scheduleRoot(root2, element) {
        root2.context === emptyContextObject && (updateContainerSync(element, root2, null, null), flushSyncWork$1());
      }
      function scheduleRefresh(root2, update) {
        if (null !== resolveFamily) {
          var staleFamilies = update.staleFamilies;
          update = update.updatedFamilies;
          flushPassiveEffects();
          scheduleFibersWithFamiliesRecursively(
            root2.current,
            update,
            staleFamilies
          );
          flushSyncWork$1();
        }
      }
      function setRefreshHandler(handler) {
        resolveFamily = handler;
      }
      function warn(format) {
        if (!suppressWarning) {
          for (var _len = arguments.length, args = Array(1 < _len ? _len - 1 : 0), _key = 1; _key < _len; _key++)
            args[_key - 1] = arguments[_key];
          printWarning("warn", format, args, Error("react-stack-top-frame"));
        }
      }
      function error$jscomp$0(format) {
        if (!suppressWarning) {
          for (var _len2 = arguments.length, args = Array(1 < _len2 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning("error", format, args, Error("react-stack-top-frame"));
        }
      }
      function printWarning(level, format, args, currentStack) {
        !supportsCreateTask && ReactSharedInternals.getCurrentStack && (currentStack = ReactSharedInternals.getCurrentStack(currentStack), "" !== currentStack && (format += "%s", args = args.concat([currentStack])));
        args.unshift(format);
        Function.prototype.apply.call(console[level], console, args);
      }
      function isValidContainer(node) {
        return !(!node || 1 !== node.nodeType && 9 !== node.nodeType && 11 !== node.nodeType);
      }
      function getIteratorFn(maybeIterable) {
        if (null === maybeIterable || "object" !== typeof maybeIterable)
          return null;
        maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
        return "function" === typeof maybeIterable ? maybeIterable : null;
      }
      function getComponentNameFromType(type) {
        if (null == type)
          return null;
        if ("function" === typeof type)
          return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
        if ("string" === typeof type)
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if ("object" === typeof type)
          switch ("number" === typeof type.tag && error$jscomp$0(
            "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
          ), type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              return (type.displayName || "Context") + ".Provider";
            case REACT_CONSUMER_TYPE:
              return (type._context.displayName || "Context") + ".Consumer";
            case REACT_FORWARD_REF_TYPE:
              var innerType = type.render;
              type = type.displayName;
              type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
              return type;
            case REACT_MEMO_TYPE:
              return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
              innerType = type._payload;
              type = type._init;
              try {
                return getComponentNameFromType(type(innerType));
              } catch (x) {
              }
          }
        return null;
      }
      function getComponentNameFromOwner(owner) {
        return "number" === typeof owner.tag ? getComponentNameFromFiber(owner) : "string" === typeof owner.name ? owner.name : null;
      }
      function getComponentNameFromFiber(fiber) {
        var type = fiber.type;
        switch (fiber.tag) {
          case 24:
            return "Cache";
          case 9:
            return (type._context.displayName || "Context") + ".Consumer";
          case 10:
            return (type.displayName || "Context") + ".Provider";
          case 18:
            return "DehydratedFragment";
          case 11:
            return fiber = type.render, fiber = fiber.displayName || fiber.name || "", type.displayName || ("" !== fiber ? "ForwardRef(" + fiber + ")" : "ForwardRef");
          case 7:
            return "Fragment";
          case 26:
          case 27:
          case 5:
            return type;
          case 4:
            return "Portal";
          case 3:
            return "Root";
          case 6:
            return "Text";
          case 16:
            return getComponentNameFromType(type);
          case 8:
            return type === REACT_STRICT_MODE_TYPE ? "StrictMode" : "Mode";
          case 22:
            return "Offscreen";
          case 12:
            return "Profiler";
          case 21:
            return "Scope";
          case 13:
            return "Suspense";
          case 19:
            return "SuspenseList";
          case 25:
            return "TracingMarker";
          case 1:
          case 0:
          case 14:
          case 15:
            if ("function" === typeof type)
              return type.displayName || type.name || null;
            if ("string" === typeof type)
              return type;
            break;
          case 29:
            type = fiber._debugInfo;
            if (null != type) {
              for (var i = type.length - 1; 0 <= i; i--)
                if ("string" === typeof type[i].name)
                  return type[i].name;
            }
            if (null !== fiber.return)
              return getComponentNameFromFiber(fiber.return);
        }
        return null;
      }
      function disabledLog() {
      }
      function disableLogs() {
        if (0 === disabledDepth) {
          prevLog = console.log;
          prevInfo = console.info;
          prevWarn = console.warn;
          prevError = console.error;
          prevGroup = console.group;
          prevGroupCollapsed = console.groupCollapsed;
          prevGroupEnd = console.groupEnd;
          var props = {
            configurable: true,
            enumerable: true,
            value: disabledLog,
            writable: true
          };
          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
        }
        disabledDepth++;
      }
      function reenableLogs() {
        disabledDepth--;
        if (0 === disabledDepth) {
          var props = { configurable: true, enumerable: true, writable: true };
          Object.defineProperties(console, {
            log: assign({}, props, { value: prevLog }),
            info: assign({}, props, { value: prevInfo }),
            warn: assign({}, props, { value: prevWarn }),
            error: assign({}, props, { value: prevError }),
            group: assign({}, props, { value: prevGroup }),
            groupCollapsed: assign({}, props, { value: prevGroupCollapsed }),
            groupEnd: assign({}, props, { value: prevGroupEnd })
          });
        }
        0 > disabledDepth && error$jscomp$0(
          "disabledDepth fell below zero. This is a bug in React. Please file an issue."
        );
      }
      function describeBuiltInComponentFrame(name) {
        if (void 0 === prefix)
          try {
            throw Error();
          } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || "";
          }
        return "\n" + prefix + name;
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        var frame = componentFrameCache.get(fn);
        if (void 0 !== frame)
          return frame;
        reentry = true;
        frame = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher2 = null;
        previousDispatcher2 = ReactSharedInternals.H;
        ReactSharedInternals.H = null;
        disableLogs();
        var RunInRootFrame = {
          DetermineComponentFrameRoot: function() {
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if ("object" === typeof Reflect && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    var control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x$0) {
                    control = x$0;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x$1) {
                  control = x$1;
                }
                (Fake = fn()) && "function" === typeof Fake.catch && Fake.catch(function() {
                });
              }
            } catch (sample) {
              if (sample && control && "string" === typeof sample.stack)
                return [sample.stack, control.stack];
            }
            return [null, null];
          }
        };
        RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
        var namePropDescriptor = Object.getOwnPropertyDescriptor(
          RunInRootFrame.DetermineComponentFrameRoot,
          "name"
        );
        namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(
          RunInRootFrame.DetermineComponentFrameRoot,
          "name",
          { value: "DetermineComponentFrameRoot" }
        );
        try {
          var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
          if (sampleStack && controlStack) {
            var sampleLines = sampleStack.split("\n"), controlLines = controlStack.split("\n");
            for (sampleStack = _RunInRootFrame$Deter = 0; _RunInRootFrame$Deter < sampleLines.length && !sampleLines[_RunInRootFrame$Deter].includes(
              "DetermineComponentFrameRoot"
            ); )
              _RunInRootFrame$Deter++;
            for (; sampleStack < controlLines.length && !controlLines[sampleStack].includes("DetermineComponentFrameRoot"); )
              sampleStack++;
            if (_RunInRootFrame$Deter === sampleLines.length || sampleStack === controlLines.length)
              for (_RunInRootFrame$Deter = sampleLines.length - 1, sampleStack = controlLines.length - 1; 1 <= _RunInRootFrame$Deter && 0 <= sampleStack && sampleLines[_RunInRootFrame$Deter] !== controlLines[sampleStack]; )
                sampleStack--;
            for (; 1 <= _RunInRootFrame$Deter && 0 <= sampleStack; _RunInRootFrame$Deter--, sampleStack--)
              if (sampleLines[_RunInRootFrame$Deter] !== controlLines[sampleStack]) {
                if (1 !== _RunInRootFrame$Deter || 1 !== sampleStack) {
                  do
                    if (_RunInRootFrame$Deter--, sampleStack--, 0 > sampleStack || sampleLines[_RunInRootFrame$Deter] !== controlLines[sampleStack]) {
                      var _frame = "\n" + sampleLines[_RunInRootFrame$Deter].replace(
                        " at new ",
                        " at "
                      );
                      fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName));
                      "function" === typeof fn && componentFrameCache.set(fn, _frame);
                      return _frame;
                    }
                  while (1 <= _RunInRootFrame$Deter && 0 <= sampleStack);
                }
                break;
              }
          }
        } finally {
          reentry = false, ReactSharedInternals.H = previousDispatcher2, reenableLogs(), Error.prepareStackTrace = frame;
        }
        sampleLines = (sampleLines = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(sampleLines) : "";
        "function" === typeof fn && componentFrameCache.set(fn, sampleLines);
        return sampleLines;
      }
      function callComponentInDEV(Component, props, secondArg) {
        var wasRendering = isRendering;
        isRendering = true;
        try {
          return Component(props, secondArg);
        } finally {
          isRendering = wasRendering;
        }
      }
      function callRenderInDEV(instance) {
        var wasRendering = isRendering;
        isRendering = true;
        try {
          return instance.render();
        } finally {
          isRendering = wasRendering;
        }
      }
      function callLazyInitInDEV(lazy) {
        var init = lazy._init;
        return init(lazy._payload);
      }
      function isNotExternal(stackFrame) {
        return !externalRegExp.test(stackFrame);
      }
      function filterDebugStack(error) {
        error = error.stack;
        error.startsWith("Error: react-stack-top-frame\n") && (error = error.slice(29));
        error = error.split("\n").slice(1);
        if (null === callComponentFrame) {
          var stack = callComponentInDEV(
            Error,
            "react-stack-top-frame",
            {}
          ).stack, startIdx = stack.startsWith("Error: react-stack-top-frame\n") ? 29 : 0, endIdx = stack.indexOf("\n", startIdx);
          callComponentFrame = -1 === endIdx ? stack.slice(startIdx) : stack.slice(startIdx, endIdx);
        }
        stack = error.indexOf(callComponentFrame);
        if (-1 === stack && (null === callLazyInitFrame && (stack = callLazyInitInDEV({
          $$typeof: REACT_LAZY_TYPE,
          _init: Error,
          _payload: "react-stack-top-frame"
        }).stack, startIdx = stack.startsWith("Error: react-stack-top-frame\n") ? 29 : 0, endIdx = stack.indexOf("\n", startIdx), callLazyInitFrame = -1 === endIdx ? stack.slice(startIdx) : stack.slice(startIdx, endIdx)), stack = error.indexOf(callLazyInitFrame), -1 === stack)) {
          if (null === callIteratorFrame)
            try {
              callRenderInDEV({ render: null }), callIteratorFrame = "";
            } catch (error$2) {
              stack = error$2.stack, startIdx = stack.startsWith("TypeError: ") ? stack.indexOf("\n") + 1 : 0, endIdx = stack.indexOf("\n", startIdx), callIteratorFrame = -1 === endIdx ? stack.slice(startIdx) : stack.slice(startIdx, endIdx);
            }
          stack = error.indexOf(callIteratorFrame);
        }
        if (-1 !== stack)
          error.length = stack;
        else
          return "";
        return error.filter(isNotExternal).join("\n");
      }
      function describeFiber(fiber) {
        switch (fiber.tag) {
          case 26:
          case 27:
          case 5:
            return describeBuiltInComponentFrame(fiber.type);
          case 16:
            return describeBuiltInComponentFrame("Lazy");
          case 13:
            return describeBuiltInComponentFrame("Suspense");
          case 19:
            return describeBuiltInComponentFrame("SuspenseList");
          case 0:
          case 15:
            return fiber = describeNativeComponentFrame(fiber.type, false), fiber;
          case 11:
            return fiber = describeNativeComponentFrame(fiber.type.render, false), fiber;
          case 1:
            return fiber = describeNativeComponentFrame(fiber.type, true), fiber;
          default:
            return "";
        }
      }
      function getStackByFiberInDevAndProd(workInProgress2) {
        try {
          var info = "";
          do {
            info += describeFiber(workInProgress2);
            var debugInfo = workInProgress2._debugInfo;
            if (debugInfo)
              for (var i = debugInfo.length - 1; 0 <= i; i--) {
                var entry = debugInfo[i];
                if ("string" === typeof entry.name) {
                  var JSCompiler_temp_const = info, env = entry.env;
                  var JSCompiler_inline_result = describeBuiltInComponentFrame(
                    entry.name + (env ? " (" + env + ")" : "")
                  );
                  info = JSCompiler_temp_const + JSCompiler_inline_result;
                }
              }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2);
          return info;
        } catch (x) {
          return "\nError generating stack: " + x.message + "\n" + x.stack;
        }
      }
      function describeFunctionComponentFrameWithoutLineNumber(fn) {
        return (fn = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(fn) : "";
      }
      function getCurrentFiberOwnerNameInDevOrNull() {
        if (null === current)
          return null;
        var owner = current._debugOwner;
        return null != owner ? getComponentNameFromOwner(owner) : null;
      }
      function getCurrentParentStackInDev() {
        return null === current ? "" : getStackByFiberInDevAndProd(current);
      }
      function getCurrentFiberStackInDev(stack) {
        if (null === current)
          return "";
        var workInProgress2 = current;
        try {
          var info = "";
          if (stack) {
            var formattedTopStack = filterDebugStack(stack);
            "" !== formattedTopStack && (info += "\n" + formattedTopStack);
          }
          6 === workInProgress2.tag && (workInProgress2 = workInProgress2.return);
          switch (workInProgress2.tag) {
            case 26:
            case 27:
            case 5:
              info += describeBuiltInComponentFrame(workInProgress2.type);
              break;
            case 13:
              info += describeBuiltInComponentFrame("Suspense");
              break;
            case 19:
              info += describeBuiltInComponentFrame("SuspenseList");
              break;
            case 0:
            case 15:
            case 1:
              workInProgress2._debugOwner || "" !== info || (info += describeFunctionComponentFrameWithoutLineNumber(
                workInProgress2.type
              ));
              break;
            case 11:
              workInProgress2._debugOwner || "" !== info || (info += describeFunctionComponentFrameWithoutLineNumber(
                workInProgress2.type.render
              ));
          }
          for (stack = workInProgress2; stack; )
            if ("number" === typeof stack.tag) {
              workInProgress2 = stack;
              stack = workInProgress2._debugOwner;
              var debugStack = workInProgress2._debugStack;
              stack && debugStack && ("string" !== typeof debugStack && (workInProgress2._debugStack = debugStack = filterDebugStack(debugStack)), "" !== debugStack && (info += "\n" + debugStack));
            } else if ("string" === typeof stack.stack) {
              var ownerStack = stack.stack;
              (stack = stack.owner) && "" !== ownerStack && (info += "\n" + ownerStack);
            } else
              break;
          var JSCompiler_inline_result = info;
        } catch (x) {
          JSCompiler_inline_result = "\nError generating stack: " + x.message + "\n" + x.stack;
        }
        return JSCompiler_inline_result;
      }
      function runWithFiberInDEV(fiber, callback, arg0, arg1, arg2, arg3, arg4) {
        var previousFiber = current;
        ReactSharedInternals.getCurrentStack = null === fiber ? null : getCurrentFiberStackInDev;
        isRendering = false;
        current = fiber;
        try {
          return null !== fiber && fiber._debugTask ? fiber._debugTask.run(
            callback.bind(null, arg0, arg1, arg2, arg3, arg4)
          ) : callback(arg0, arg1, arg2, arg3, arg4);
        } finally {
          current = previousFiber;
        }
        throw Error(
          "runWithFiberInDEV should never be called in production. This is a bug in React."
        );
      }
      function getNearestMountedFiber(fiber) {
        var node = fiber, nearestMounted = fiber;
        if (fiber.alternate)
          for (; node.return; )
            node = node.return;
        else {
          fiber = node;
          do
            node = fiber, 0 !== (node.flags & 4098) && (nearestMounted = node.return), fiber = node.return;
          while (fiber);
        }
        return 3 === node.tag ? nearestMounted : null;
      }
      function getSuspenseInstanceFromFiber(fiber) {
        if (13 === fiber.tag) {
          var suspenseState = fiber.memoizedState;
          null === suspenseState && (fiber = fiber.alternate, null !== fiber && (suspenseState = fiber.memoizedState));
          if (null !== suspenseState)
            return suspenseState.dehydrated;
        }
        return null;
      }
      function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber)
          throw Error("Unable to find node on an unmounted component.");
      }
      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
          alternate = getNearestMountedFiber(fiber);
          if (null === alternate)
            throw Error("Unable to find node on an unmounted component.");
          return alternate !== fiber ? null : fiber;
        }
        for (var a = fiber, b = alternate; ; ) {
          var parentA = a.return;
          if (null === parentA)
            break;
          var parentB = parentA.alternate;
          if (null === parentB) {
            b = parentA.return;
            if (null !== b) {
              a = b;
              continue;
            }
            break;
          }
          if (parentA.child === parentB.child) {
            for (parentB = parentA.child; parentB; ) {
              if (parentB === a)
                return assertIsMounted(parentA), fiber;
              if (parentB === b)
                return assertIsMounted(parentA), alternate;
              parentB = parentB.sibling;
            }
            throw Error("Unable to find node on an unmounted component.");
          }
          if (a.return !== b.return)
            a = parentA, b = parentB;
          else {
            for (var didFindChild = false, _child = parentA.child; _child; ) {
              if (_child === a) {
                didFindChild = true;
                a = parentA;
                b = parentB;
                break;
              }
              if (_child === b) {
                didFindChild = true;
                b = parentA;
                a = parentB;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              for (_child = parentB.child; _child; ) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentB;
                  b = parentA;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentB;
                  a = parentA;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild)
                throw Error(
                  "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue."
                );
            }
          }
          if (a.alternate !== b)
            throw Error(
              "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."
            );
        }
        if (3 !== a.tag)
          throw Error("Unable to find node on an unmounted component.");
        return a.stateNode.current === a ? fiber : alternate;
      }
      function findCurrentHostFiber(parent) {
        parent = findCurrentFiberUsingSlowPath(parent);
        return null !== parent ? findCurrentHostFiberImpl(parent) : null;
      }
      function findCurrentHostFiberImpl(node) {
        var tag = node.tag;
        if (5 === tag || 26 === tag || 27 === tag || 6 === tag)
          return node;
        for (node = node.child; null !== node; ) {
          tag = findCurrentHostFiberImpl(node);
          if (null !== tag)
            return tag;
          node = node.sibling;
        }
        return null;
      }
      function createCursor(defaultValue) {
        return { current: defaultValue };
      }
      function pop(cursor, fiber) {
        0 > index$jscomp$0 ? error$jscomp$0("Unexpected pop.") : (fiber !== fiberStack[index$jscomp$0] && error$jscomp$0("Unexpected Fiber popped."), cursor.current = valueStack[index$jscomp$0], valueStack[index$jscomp$0] = null, fiberStack[index$jscomp$0] = null, index$jscomp$0--);
      }
      function push(cursor, value, fiber) {
        index$jscomp$0++;
        valueStack[index$jscomp$0] = cursor.current;
        fiberStack[index$jscomp$0] = fiber;
        cursor.current = value;
      }
      function requiredContext(c) {
        null === c && error$jscomp$0(
          "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."
        );
        return c;
      }
      function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor, null, fiber);
        var nextRootContext = nextRootInstance.nodeType;
        switch (nextRootContext) {
          case 9:
          case 11:
            nextRootContext = 9 === nextRootContext ? "#document" : "#fragment";
            nextRootInstance = (nextRootInstance = nextRootInstance.documentElement) ? (nextRootInstance = nextRootInstance.namespaceURI) ? getOwnHostContext(nextRootInstance) : HostContextNamespaceNone : HostContextNamespaceNone;
            break;
          default:
            if (nextRootInstance = 8 === nextRootContext ? nextRootInstance.parentNode : nextRootInstance, nextRootContext = nextRootInstance.tagName, nextRootInstance = nextRootInstance.namespaceURI)
              nextRootInstance = getOwnHostContext(nextRootInstance), nextRootInstance = getChildHostContextProd(
                nextRootInstance,
                nextRootContext
              );
            else
              switch (nextRootContext) {
                case "svg":
                  nextRootInstance = HostContextNamespaceSvg;
                  break;
                case "math":
                  nextRootInstance = HostContextNamespaceMath;
                  break;
                default:
                  nextRootInstance = HostContextNamespaceNone;
              }
        }
        nextRootContext = nextRootContext.toLowerCase();
        nextRootContext = updatedAncestorInfoDev(null, nextRootContext);
        nextRootContext = {
          context: nextRootInstance,
          ancestorInfo: nextRootContext
        };
        pop(contextStackCursor, fiber);
        push(contextStackCursor, nextRootContext, fiber);
      }
      function popHostContainer(fiber) {
        pop(contextStackCursor, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
      }
      function getHostContext() {
        return requiredContext(contextStackCursor.current);
      }
      function pushHostContext(fiber) {
        null !== fiber.memoizedState && push(hostTransitionProviderCursor, fiber, fiber);
        var context = requiredContext(contextStackCursor.current);
        var type = fiber.type;
        var nextContext = getChildHostContextProd(context.context, type);
        type = updatedAncestorInfoDev(context.ancestorInfo, type);
        nextContext = { context: nextContext, ancestorInfo: type };
        context !== nextContext && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor, nextContext, fiber));
      }
      function popHostContext(fiber) {
        contextFiberStackCursor.current === fiber && (pop(contextStackCursor, fiber), pop(contextFiberStackCursor, fiber));
        hostTransitionProviderCursor.current === fiber && (pop(hostTransitionProviderCursor, fiber), HostTransitionContext._currentValue = null);
      }
      function typeName(value) {
        return "function" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), false;
        } catch (e) {
          return true;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkAttributeStringCoercion(value, attributeName) {
        if (willCoercionThrow(value))
          return error$jscomp$0(
            "The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before using it here.",
            attributeName,
            typeName(value)
          ), testStringCoercion(value);
      }
      function checkCSSPropertyStringCoercion(value, propName) {
        if (willCoercionThrow(value))
          return error$jscomp$0(
            "The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before using it here.",
            propName,
            typeName(value)
          ), testStringCoercion(value);
      }
      function checkFormFieldValueStringCoercion(value) {
        if (willCoercionThrow(value))
          return error$jscomp$0(
            "Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before using it here.",
            typeName(value)
          ), testStringCoercion(value);
      }
      function injectInternals(internals) {
        if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)
          return false;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled)
          return true;
        if (!hook.supportsFiber)
          return error$jscomp$0(
            "The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://react.dev/link/react-devtools"
          ), true;
        try {
          internals = assign({}, internals, {
            getLaneLabelMap,
            injectProfilingHooks
          }), rendererID = hook.inject(internals), injectedHook = hook;
        } catch (err) {
          error$jscomp$0("React instrumentation encountered an error: %s.", err);
        }
        return hook.checkDCE ? true : false;
      }
      function onCommitRoot$1(root2, eventPriority) {
        if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot)
          try {
            var didError = 128 === (root2.current.flags & 128);
            switch (eventPriority) {
              case DiscreteEventPriority:
                var schedulerPriority = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriority = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriority = NormalPriority$1;
                break;
              case IdleEventPriority:
                schedulerPriority = IdlePriority;
                break;
              default:
                schedulerPriority = NormalPriority$1;
            }
            injectedHook.onCommitFiberRoot(
              rendererID,
              root2,
              schedulerPriority,
              didError
            );
          } catch (err) {
            hasLoggedError || (hasLoggedError = true, error$jscomp$0(
              "React instrumentation encountered an error: %s",
              err
            ));
          }
      }
      function setIsStrictModeForDevtools(newIsStrictMode) {
        "function" === typeof log$1 && (unstable_setDisableYieldValue(newIsStrictMode), suppressWarning = newIsStrictMode);
        if (injectedHook && "function" === typeof injectedHook.setStrictMode)
          try {
            injectedHook.setStrictMode(rendererID, newIsStrictMode);
          } catch (err) {
            hasLoggedError || (hasLoggedError = true, error$jscomp$0(
              "React instrumentation encountered an error: %s",
              err
            ));
          }
      }
      function injectProfilingHooks(profilingHooks) {
        injectedProfilingHooks = profilingHooks;
      }
      function getLaneLabelMap() {
        for (var map = /* @__PURE__ */ new Map(), lane = 1, index = 0; index < TotalLanes; index++) {
          var label = getLabelForLane(lane);
          map.set(lane, label);
          lane *= 2;
        }
        return map;
      }
      function markCommitStopped() {
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markCommitStopped && injectedProfilingHooks.markCommitStopped();
      }
      function markComponentRenderStarted(fiber) {
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentRenderStarted && injectedProfilingHooks.markComponentRenderStarted(fiber);
      }
      function markComponentRenderStopped() {
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentRenderStopped && injectedProfilingHooks.markComponentRenderStopped();
      }
      function markComponentLayoutEffectUnmountStarted(fiber) {
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted && injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
      }
      function markComponentLayoutEffectUnmountStopped() {
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped && injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
      }
      function markRenderStarted(lanes) {
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markRenderStarted && injectedProfilingHooks.markRenderStarted(lanes);
      }
      function markRenderStopped() {
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markRenderStopped && injectedProfilingHooks.markRenderStopped();
      }
      function markStateUpdateScheduled(fiber, lane) {
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markStateUpdateScheduled && injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
      }
      function clz32Fallback(x) {
        x >>>= 0;
        return 0 === x ? 32 : 31 - (log(x) / LN2 | 0) | 0;
      }
      function getLabelForLane(lane) {
        if (lane & SyncHydrationLane)
          return "SyncHydrationLane";
        if (lane & SyncLane)
          return "Sync";
        if (lane & InputContinuousHydrationLane)
          return "InputContinuousHydration";
        if (lane & InputContinuousLane)
          return "InputContinuous";
        if (lane & DefaultHydrationLane)
          return "DefaultHydration";
        if (lane & DefaultLane)
          return "Default";
        if (lane & TransitionHydrationLane)
          return "TransitionHydration";
        if (lane & TransitionLanes)
          return "Transition";
        if (lane & RetryLanes)
          return "Retry";
        if (lane & SelectiveHydrationLane)
          return "SelectiveHydration";
        if (lane & IdleHydrationLane)
          return "IdleHydration";
        if (lane & IdleLane)
          return "Idle";
        if (lane & OffscreenLane)
          return "Offscreen";
        if (lane & DeferredLane)
          return "Deferred";
      }
      function getHighestPriorityLanes(lanes) {
        var pendingSyncLanes = lanes & SyncUpdateLanes;
        if (0 !== pendingSyncLanes)
          return pendingSyncLanes;
        switch (lanes & -lanes) {
          case SyncHydrationLane:
            return SyncHydrationLane;
          case SyncLane:
            return SyncLane;
          case InputContinuousHydrationLane:
            return InputContinuousHydrationLane;
          case InputContinuousLane:
            return InputContinuousLane;
          case DefaultHydrationLane:
            return DefaultHydrationLane;
          case DefaultLane:
            return DefaultLane;
          case TransitionHydrationLane:
            return TransitionHydrationLane;
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return lanes & TransitionLanes;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
            return lanes & RetryLanes;
          case SelectiveHydrationLane:
            return SelectiveHydrationLane;
          case IdleHydrationLane:
            return IdleHydrationLane;
          case IdleLane:
            return IdleLane;
          case OffscreenLane:
            return OffscreenLane;
          case DeferredLane:
            return 0;
          default:
            return error$jscomp$0(
              "Should have found matching lanes. This is a bug in React."
            ), lanes;
        }
      }
      function getNextLanes(root2, wipLanes) {
        var pendingLanes = root2.pendingLanes;
        if (0 === pendingLanes)
          return 0;
        var nextLanes = 0, suspendedLanes = root2.suspendedLanes;
        root2 = root2.pingedLanes;
        var nonIdlePendingLanes = pendingLanes & 134217727;
        0 !== nonIdlePendingLanes ? (pendingLanes = nonIdlePendingLanes & ~suspendedLanes, 0 !== pendingLanes ? nextLanes = getHighestPriorityLanes(pendingLanes) : (root2 &= nonIdlePendingLanes, 0 !== root2 && (nextLanes = getHighestPriorityLanes(root2)))) : (pendingLanes &= ~suspendedLanes, 0 !== pendingLanes ? nextLanes = getHighestPriorityLanes(pendingLanes) : 0 !== root2 && (nextLanes = getHighestPriorityLanes(root2)));
        return 0 === nextLanes ? 0 : 0 !== wipLanes && wipLanes !== nextLanes && 0 === (wipLanes & suspendedLanes) && (suspendedLanes = nextLanes & -nextLanes, root2 = wipLanes & -wipLanes, suspendedLanes >= root2 || suspendedLanes === DefaultLane && 0 !== (root2 & TransitionLanes)) ? wipLanes : nextLanes;
      }
      function computeExpirationTime(lane, currentTime) {
        switch (lane) {
          case SyncHydrationLane:
          case SyncLane:
          case InputContinuousHydrationLane:
          case InputContinuousLane:
            return currentTime + 250;
          case DefaultHydrationLane:
          case DefaultLane:
          case TransitionHydrationLane:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return currentTime + 5e3;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
            return -1;
          case SelectiveHydrationLane:
          case IdleHydrationLane:
          case IdleLane:
          case OffscreenLane:
          case DeferredLane:
            return -1;
          default:
            return error$jscomp$0(
              "Should have found matching lanes. This is a bug in React."
            ), -1;
        }
      }
      function getLanesToRetrySynchronouslyOnError(root2, originallyAttemptedLanes) {
        if (root2.errorRecoveryDisabledLanes & originallyAttemptedLanes)
          return 0;
        root2 = root2.pendingLanes & ~OffscreenLane;
        return 0 !== root2 ? root2 : root2 & OffscreenLane ? OffscreenLane : 0;
      }
      function claimNextTransitionLane() {
        var lane = nextTransitionLane;
        nextTransitionLane <<= 1;
        0 === (nextTransitionLane & TransitionLanes) && (nextTransitionLane = 128);
        return lane;
      }
      function claimNextRetryLane() {
        var lane = nextRetryLane;
        nextRetryLane <<= 1;
        0 === (nextRetryLane & RetryLanes) && (nextRetryLane = 4194304);
        return lane;
      }
      function createLaneMap(initial) {
        for (var laneMap = [], i = 0; i < TotalLanes; i++)
          laneMap.push(initial);
        return laneMap;
      }
      function markRootFinished(root2, remainingLanes, spawnedLane) {
        var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
        root2.pendingLanes = remainingLanes;
        root2.suspendedLanes = 0;
        root2.pingedLanes = 0;
        root2.expiredLanes &= remainingLanes;
        root2.entangledLanes &= remainingLanes;
        root2.errorRecoveryDisabledLanes &= remainingLanes;
        root2.shellSuspendCounter = 0;
        remainingLanes = root2.entanglements;
        for (var expirationTimes = root2.expirationTimes, hiddenUpdates = root2.hiddenUpdates; 0 < noLongerPendingLanes; ) {
          var index = 31 - clz32(noLongerPendingLanes), lane = 1 << index;
          remainingLanes[index] = 0;
          expirationTimes[index] = -1;
          var hiddenUpdatesForLane = hiddenUpdates[index];
          if (null !== hiddenUpdatesForLane)
            for (hiddenUpdates[index] = null, index = 0; index < hiddenUpdatesForLane.length; index++) {
              var update = hiddenUpdatesForLane[index];
              null !== update && (update.lane &= ~OffscreenLane);
            }
          noLongerPendingLanes &= ~lane;
        }
        0 !== spawnedLane && markSpawnedDeferredLane(root2, spawnedLane, 0);
      }
      function markSpawnedDeferredLane(root2, spawnedLane, entangledLanes) {
        root2.pendingLanes |= spawnedLane;
        root2.suspendedLanes &= ~spawnedLane;
        var spawnedLaneIndex = 31 - clz32(spawnedLane);
        root2.entangledLanes |= spawnedLane;
        root2.entanglements[spawnedLaneIndex] = root2.entanglements[spawnedLaneIndex] | DeferredLane | entangledLanes & UpdateLanes;
      }
      function markRootEntangled(root2, entangledLanes) {
        var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
        for (root2 = root2.entanglements; rootEntangledLanes; ) {
          var index = 31 - clz32(rootEntangledLanes), lane = 1 << index;
          lane & entangledLanes | root2[index] & entangledLanes && (root2[index] |= entangledLanes);
          rootEntangledLanes &= ~lane;
        }
      }
      function addFiberToLanesMap(root2, fiber, lanes) {
        if (isDevToolsPresent)
          for (root2 = root2.pendingUpdatersLaneMap; 0 < lanes; ) {
            var index = 31 - clz32(lanes), lane = 1 << index;
            root2[index].add(fiber);
            lanes &= ~lane;
          }
      }
      function movePendingFibersToMemoized(root2, lanes) {
        if (isDevToolsPresent)
          for (var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap, memoizedUpdaters = root2.memoizedUpdaters; 0 < lanes; ) {
            var index = 31 - clz32(lanes);
            root2 = 1 << index;
            index = pendingUpdatersLaneMap[index];
            0 < index.size && (index.forEach(function(fiber) {
              var alternate = fiber.alternate;
              null !== alternate && memoizedUpdaters.has(alternate) || memoizedUpdaters.add(fiber);
            }), index.clear());
            lanes &= ~root2;
          }
      }
      function lanesToEventPriority(lanes) {
        lanes &= -lanes;
        return 0 !== DiscreteEventPriority && DiscreteEventPriority < lanes ? 0 !== ContinuousEventPriority && ContinuousEventPriority < lanes ? 0 !== (lanes & 134217727) ? DefaultEventPriority : IdleEventPriority : ContinuousEventPriority : DiscreteEventPriority;
      }
      function resolveUpdatePriority() {
        var updatePriority = ReactDOMSharedInternals.p;
        if (0 !== updatePriority)
          return updatePriority;
        updatePriority = window.event;
        return void 0 === updatePriority ? DefaultEventPriority : getEventPriority(updatePriority.type);
      }
      function runWithPriority(priority, fn) {
        var previousPriority = ReactDOMSharedInternals.p;
        try {
          return ReactDOMSharedInternals.p = priority, fn();
        } finally {
          ReactDOMSharedInternals.p = previousPriority;
        }
      }
      function detachDeletedInstance(node) {
        delete node[internalInstanceKey];
        delete node[internalPropsKey];
        delete node[internalEventHandlersKey];
        delete node[internalEventHandlerListenersKey];
        delete node[internalEventHandlesSetKey];
      }
      function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst)
          return targetInst;
        for (var parentNode = targetNode.parentNode; parentNode; ) {
          if (targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey]) {
            parentNode = targetInst.alternate;
            if (null !== targetInst.child || null !== parentNode && null !== parentNode.child)
              for (targetNode = getParentSuspenseInstance(targetNode); null !== targetNode; ) {
                if (parentNode = targetNode[internalInstanceKey])
                  return parentNode;
                targetNode = getParentSuspenseInstance(targetNode);
              }
            return targetInst;
          }
          targetNode = parentNode;
          parentNode = targetNode.parentNode;
        }
        return null;
      }
      function getInstanceFromNode(node) {
        if (node = node[internalInstanceKey] || node[internalContainerInstanceKey]) {
          var tag = node.tag;
          if (5 === tag || 6 === tag || 13 === tag || 26 === tag || 27 === tag || 3 === tag)
            return node;
        }
        return null;
      }
      function getNodeFromInstance(inst) {
        var tag = inst.tag;
        if (5 === tag || 26 === tag || 27 === tag || 6 === tag)
          return inst.stateNode;
        throw Error("getNodeFromInstance: Invalid argument.");
      }
      function getResourcesFromRoot(root2) {
        var resources = root2[internalRootNodeResourcesKey];
        resources || (resources = root2[internalRootNodeResourcesKey] = { hoistableStyles: /* @__PURE__ */ new Map(), hoistableScripts: /* @__PURE__ */ new Map() });
        return resources;
      }
      function markNodeAsHoistable(node) {
        node[internalHoistableMarker] = true;
      }
      function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + "Capture", dependencies);
      }
      function registerDirectEvent(registrationName, dependencies) {
        registrationNameDependencies[registrationName] && error$jscomp$0(
          "EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.",
          registrationName
        );
        registrationNameDependencies[registrationName] = dependencies;
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;
        "onDoubleClick" === registrationName && (possibleRegistrationNames.ondblclick = registrationName);
        for (registrationName = 0; registrationName < dependencies.length; registrationName++)
          allNativeEvents.add(dependencies[registrationName]);
      }
      function checkControlledValueProps(tagName, props) {
        hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || null == props.value || ("select" === tagName ? error$jscomp$0(
          "You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set `onChange`."
        ) : error$jscomp$0(
          "You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."
        ));
        props.onChange || props.readOnly || props.disabled || null == props.checked || error$jscomp$0(
          "You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`."
        );
      }
      function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName))
          return true;
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName))
          return false;
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName))
          return validatedAttributeNameCache[attributeName] = true;
        illegalAttributeNameCache[attributeName] = true;
        error$jscomp$0("Invalid attribute name: `%s`", attributeName);
        return false;
      }
      function getValueForAttributeOnCustomComponent(node, name, expected) {
        if (isAttributeNameSafe(name)) {
          if (!node.hasAttribute(name)) {
            switch (typeof expected) {
              case "symbol":
              case "object":
                return expected;
              case "function":
                return expected;
              case "boolean":
                if (false === expected)
                  return expected;
            }
            return void 0 === expected ? void 0 : null;
          }
          node = node.getAttribute(name);
          if ("" === node && true === expected)
            return true;
          checkAttributeStringCoercion(expected, name);
          return node === "" + expected ? expected : node;
        }
      }
      function setValueForAttribute(node, name, value) {
        if (isAttributeNameSafe(name))
          if (null === value)
            node.removeAttribute(name);
          else {
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
                node.removeAttribute(name);
                return;
              case "boolean":
                var prefix2 = name.toLowerCase().slice(0, 5);
                if ("data-" !== prefix2 && "aria-" !== prefix2) {
                  node.removeAttribute(name);
                  return;
                }
            }
            checkAttributeStringCoercion(value, name);
            node.setAttribute(name, "" + value);
          }
      }
      function setValueForKnownAttribute(node, name, value) {
        if (null === value)
          node.removeAttribute(name);
        else {
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
            case "boolean":
              node.removeAttribute(name);
              return;
          }
          checkAttributeStringCoercion(value, name);
          node.setAttribute(name, "" + value);
        }
      }
      function setValueForNamespacedAttribute(node, namespace, name, value) {
        if (null === value)
          node.removeAttribute(name);
        else {
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
            case "boolean":
              node.removeAttribute(name);
              return;
          }
          checkAttributeStringCoercion(value, name);
          node.setAttributeNS(namespace, name, "" + value);
        }
      }
      function getToStringValue(value) {
        switch (typeof value) {
          case "bigint":
          case "boolean":
          case "number":
          case "string":
          case "undefined":
            return value;
          case "object":
            return checkFormFieldValueStringCoercion(value), value;
          default:
            return "";
        }
      }
      function isCheckable(elem) {
        var type = elem.type;
        return (elem = elem.nodeName) && "input" === elem.toLowerCase() && ("checkbox" === type || "radio" === type);
      }
      function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? "checked" : "value", descriptor = Object.getOwnPropertyDescriptor(
          node.constructor.prototype,
          valueField
        );
        checkFormFieldValueStringCoercion(node[valueField]);
        var currentValue = "" + node[valueField];
        if (!node.hasOwnProperty(valueField) && "undefined" !== typeof descriptor && "function" === typeof descriptor.get && "function" === typeof descriptor.set) {
          var get = descriptor.get, set = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get.call(this);
            },
            set: function(value) {
              checkFormFieldValueStringCoercion(value);
              currentValue = "" + value;
              set.call(this, value);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          return {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              checkFormFieldValueStringCoercion(value);
              currentValue = "" + value;
            },
            stopTracking: function() {
              node._valueTracker = null;
              delete node[valueField];
            }
          };
        }
      }
      function track(node) {
        node._valueTracker || (node._valueTracker = trackValueOnNode(node));
      }
      function updateValueIfChanged(node) {
        if (!node)
          return false;
        var tracker = node._valueTracker;
        if (!tracker)
          return true;
        var lastValue = tracker.getValue();
        var value = "";
        node && (value = isCheckable(node) ? node.checked ? "true" : "false" : node.value);
        node = value;
        return node !== lastValue ? (tracker.setValue(node), true) : false;
      }
      function getActiveElement(doc) {
        doc = doc || ("undefined" !== typeof document ? document : void 0);
        if ("undefined" === typeof doc)
          return null;
        try {
          return doc.activeElement || doc.body;
        } catch (e) {
          return doc.body;
        }
      }
      function escapeSelectorAttributeValueInsideDoubleQuotes(value) {
        return value.replace(
          escapeSelectorAttributeValueInsideDoubleQuotesRegex,
          function(ch) {
            return "\\" + ch.charCodeAt(0).toString(16) + " ";
          }
        );
      }
      function validateInputProps(element, props) {
        void 0 === props.checked || void 0 === props.defaultChecked || didWarnCheckedDefaultChecked || (error$jscomp$0(
          "%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components",
          getCurrentFiberOwnerNameInDevOrNull() || "A component",
          props.type
        ), didWarnCheckedDefaultChecked = true);
        void 0 === props.value || void 0 === props.defaultValue || didWarnValueDefaultValue$1 || (error$jscomp$0(
          "%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components",
          getCurrentFiberOwnerNameInDevOrNull() || "A component",
          props.type
        ), didWarnValueDefaultValue$1 = true);
      }
      function updateInput(element, value, defaultValue, lastDefaultValue, checked, defaultChecked, type, name) {
        element.name = "";
        null != type && "function" !== typeof type && "symbol" !== typeof type && "boolean" !== typeof type ? (checkAttributeStringCoercion(type, "type"), element.type = type) : element.removeAttribute("type");
        if (null != value)
          if ("number" === type) {
            if (0 === value && "" === element.value || element.value != value)
              element.value = "" + getToStringValue(value);
          } else
            element.value !== "" + getToStringValue(value) && (element.value = "" + getToStringValue(value));
        else
          "submit" !== type && "reset" !== type || element.removeAttribute("value");
        null != value ? setDefaultValue(element, type, getToStringValue(value)) : null != defaultValue ? setDefaultValue(element, type, getToStringValue(defaultValue)) : null != lastDefaultValue && element.removeAttribute("value");
        null == checked && null != defaultChecked && (element.defaultChecked = !!defaultChecked);
        null != checked && (element.checked = checked && "function" !== typeof checked && "symbol" !== typeof checked);
        null != name && "function" !== typeof name && "symbol" !== typeof name && "boolean" !== typeof name ? (checkAttributeStringCoercion(name, "name"), element.name = "" + getToStringValue(name)) : element.removeAttribute("name");
      }
      function initInput(element, value, defaultValue, checked, defaultChecked, type, name, isHydrating2) {
        null != type && "function" !== typeof type && "symbol" !== typeof type && "boolean" !== typeof type && (checkAttributeStringCoercion(type, "type"), element.type = type);
        if (null != value || null != defaultValue) {
          if (!("submit" !== type && "reset" !== type || void 0 !== value && null !== value))
            return;
          defaultValue = null != defaultValue ? "" + getToStringValue(defaultValue) : "";
          value = null != value ? "" + getToStringValue(value) : defaultValue;
          isHydrating2 || value === element.value || (element.value = value);
          element.defaultValue = value;
        }
        checked = null != checked ? checked : defaultChecked;
        checked = "function" !== typeof checked && "symbol" !== typeof checked && !!checked;
        element.checked = isHydrating2 ? element.checked : !!checked;
        element.defaultChecked = !!checked;
        null != name && "function" !== typeof name && "symbol" !== typeof name && "boolean" !== typeof name && (checkAttributeStringCoercion(name, "name"), element.name = name);
      }
      function setDefaultValue(node, type, value) {
        "number" === type && getActiveElement(node.ownerDocument) === node || node.defaultValue === "" + value || (node.defaultValue = "" + value);
      }
      function validateOptionProps(element, props) {
        null == props.value && ("object" === typeof props.children && null !== props.children ? React.Children.forEach(props.children, function(child) {
          null == child || "string" === typeof child || "number" === typeof child || "bigint" === typeof child || didWarnInvalidChild || (didWarnInvalidChild = true, error$jscomp$0(
            "Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>."
          ));
        }) : null == props.dangerouslySetInnerHTML || didWarnInvalidInnerHTML || (didWarnInvalidInnerHTML = true, error$jscomp$0(
          "Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected."
        )));
        null == props.selected || didWarnSelectedSetOnOption || (error$jscomp$0(
          "Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."
        ), didWarnSelectedSetOnOption = true);
      }
      function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        return ownerName ? "\n\nCheck the render method of `" + ownerName + "`." : "";
      }
      function updateOptions(node, multiple, propValue, setDefaultSelected) {
        node = node.options;
        if (multiple) {
          multiple = {};
          for (var i = 0; i < propValue.length; i++)
            multiple["$" + propValue[i]] = true;
          for (propValue = 0; propValue < node.length; propValue++)
            i = multiple.hasOwnProperty("$" + node[propValue].value), node[propValue].selected !== i && (node[propValue].selected = i), i && setDefaultSelected && (node[propValue].defaultSelected = true);
        } else {
          propValue = "" + getToStringValue(propValue);
          multiple = null;
          for (i = 0; i < node.length; i++) {
            if (node[i].value === propValue) {
              node[i].selected = true;
              setDefaultSelected && (node[i].defaultSelected = true);
              return;
            }
            null !== multiple || node[i].disabled || (multiple = node[i]);
          }
          null !== multiple && (multiple.selected = true);
        }
      }
      function validateSelectProps(element, props) {
        for (element = 0; element < valuePropNames.length; element++) {
          var propName = valuePropNames[element];
          if (null != props[propName]) {
            var propNameIsArray = isArrayImpl(props[propName]);
            props.multiple && !propNameIsArray ? error$jscomp$0(
              "The `%s` prop supplied to <select> must be an array if `multiple` is true.%s",
              propName,
              getDeclarationErrorAddendum()
            ) : !props.multiple && propNameIsArray && error$jscomp$0(
              "The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s",
              propName,
              getDeclarationErrorAddendum()
            );
          }
        }
        void 0 === props.value || void 0 === props.defaultValue || didWarnValueDefaultValue || (error$jscomp$0(
          "Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://react.dev/link/controlled-components"
        ), didWarnValueDefaultValue = true);
      }
      function validateTextareaProps(element, props) {
        void 0 === props.value || void 0 === props.defaultValue || didWarnValDefaultVal || (error$jscomp$0(
          "%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://react.dev/link/controlled-components",
          getCurrentFiberOwnerNameInDevOrNull() || "A component"
        ), didWarnValDefaultVal = true);
        null != props.children && null == props.value && error$jscomp$0(
          "Use the `defaultValue` or `value` props instead of setting children on <textarea>."
        );
      }
      function updateTextarea(element, value, defaultValue) {
        if (null != value && (value = "" + getToStringValue(value), value !== element.value && (element.value = value), null == defaultValue)) {
          element.defaultValue !== value && (element.defaultValue = value);
          return;
        }
        element.defaultValue = null != defaultValue ? "" + getToStringValue(defaultValue) : "";
      }
      function initTextarea(element, value, defaultValue, children) {
        if (null == value) {
          if (null != children) {
            if (null != defaultValue)
              throw Error(
                "If you supply `defaultValue` on a <textarea>, do not pass children."
              );
            if (isArrayImpl(children)) {
              if (1 < children.length)
                throw Error("<textarea> can only have at most one child.");
              children = children[0];
            }
            defaultValue = children;
          }
          null == defaultValue && (defaultValue = "");
          value = defaultValue;
        }
        defaultValue = getToStringValue(value);
        element.defaultValue = defaultValue;
        children = element.textContent;
        children === defaultValue && "" !== children && null !== children && (element.value = children);
      }
      function updatedAncestorInfoDev(oldInfo, tag) {
        oldInfo = assign({}, oldInfo || emptyAncestorInfoDev);
        var info = { tag };
        -1 !== inScopeTags.indexOf(tag) && (oldInfo.aTagInScope = null, oldInfo.buttonTagInScope = null, oldInfo.nobrTagInScope = null);
        -1 !== buttonScopeTags.indexOf(tag) && (oldInfo.pTagInButtonScope = null);
        -1 !== specialTags.indexOf(tag) && "address" !== tag && "div" !== tag && "p" !== tag && (oldInfo.listItemTagAutoclosing = null, oldInfo.dlItemTagAutoclosing = null);
        oldInfo.current = info;
        "form" === tag && (oldInfo.formTag = info);
        "a" === tag && (oldInfo.aTagInScope = info);
        "button" === tag && (oldInfo.buttonTagInScope = info);
        "nobr" === tag && (oldInfo.nobrTagInScope = info);
        "p" === tag && (oldInfo.pTagInButtonScope = info);
        "li" === tag && (oldInfo.listItemTagAutoclosing = info);
        if ("dd" === tag || "dt" === tag)
          oldInfo.dlItemTagAutoclosing = info;
        "#document" === tag || "html" === tag ? oldInfo.containerTagInScope = null : oldInfo.containerTagInScope || (oldInfo.containerTagInScope = info);
        return oldInfo;
      }
      function isTagValidWithParent(tag, parentTag) {
        switch (parentTag) {
          case "select":
            return "hr" === tag || "option" === tag || "optgroup" === tag || "#text" === tag;
          case "optgroup":
            return "option" === tag || "#text" === tag;
          case "option":
            return "#text" === tag;
          case "tr":
            return "th" === tag || "td" === tag || "style" === tag || "script" === tag || "template" === tag;
          case "tbody":
          case "thead":
          case "tfoot":
            return "tr" === tag || "style" === tag || "script" === tag || "template" === tag;
          case "colgroup":
            return "col" === tag || "template" === tag;
          case "table":
            return "caption" === tag || "colgroup" === tag || "tbody" === tag || "tfoot" === tag || "thead" === tag || "style" === tag || "script" === tag || "template" === tag;
          case "head":
            return "base" === tag || "basefont" === tag || "bgsound" === tag || "link" === tag || "meta" === tag || "title" === tag || "noscript" === tag || "noframes" === tag || "style" === tag || "script" === tag || "template" === tag;
          case "html":
            return "head" === tag || "body" === tag || "frameset" === tag;
          case "frameset":
            return "frame" === tag;
          case "#document":
            return "html" === tag;
        }
        switch (tag) {
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            return "h1" !== parentTag && "h2" !== parentTag && "h3" !== parentTag && "h4" !== parentTag && "h5" !== parentTag && "h6" !== parentTag;
          case "rp":
          case "rt":
            return -1 === impliedEndTags.indexOf(parentTag);
          case "body":
          case "caption":
          case "col":
          case "colgroup":
          case "frameset":
          case "frame":
          case "head":
          case "html":
          case "tbody":
          case "td":
          case "tfoot":
          case "th":
          case "thead":
          case "tr":
            return null == parentTag;
        }
        return true;
      }
      function findInvalidAncestorForTag(tag, ancestorInfo) {
        switch (tag) {
          case "address":
          case "article":
          case "aside":
          case "blockquote":
          case "center":
          case "details":
          case "dialog":
          case "dir":
          case "div":
          case "dl":
          case "fieldset":
          case "figcaption":
          case "figure":
          case "footer":
          case "header":
          case "hgroup":
          case "main":
          case "menu":
          case "nav":
          case "ol":
          case "p":
          case "section":
          case "summary":
          case "ul":
          case "pre":
          case "listing":
          case "table":
          case "hr":
          case "xmp":
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            return ancestorInfo.pTagInButtonScope;
          case "form":
            return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
          case "li":
            return ancestorInfo.listItemTagAutoclosing;
          case "dd":
          case "dt":
            return ancestorInfo.dlItemTagAutoclosing;
          case "button":
            return ancestorInfo.buttonTagInScope;
          case "a":
            return ancestorInfo.aTagInScope;
          case "nobr":
            return ancestorInfo.nobrTagInScope;
        }
        return null;
      }
      function validateDOMNesting(childTag, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfoDev;
        var parentInfo = ancestorInfo.current;
        ancestorInfo = (parentInfo = isTagValidWithParent(
          childTag,
          parentInfo && parentInfo.tag
        ) ? null : parentInfo) ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        ancestorInfo = parentInfo || ancestorInfo;
        if (!ancestorInfo)
          return true;
        ancestorInfo = ancestorInfo.tag;
        var warnKey = String(!!parentInfo) + "|" + childTag + "|" + ancestorInfo;
        if (didWarn[warnKey])
          return false;
        didWarn[warnKey] = true;
        warnKey = "<" + childTag + ">";
        parentInfo ? (parentInfo = "", "table" === ancestorInfo && "tr" === childTag && (parentInfo += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."), console.error(
          "In HTML, %s cannot be a child of <%s>.%s\nThis will cause a hydration error.%s",
          warnKey,
          ancestorInfo,
          parentInfo,
          getCurrentParentStackInDev()
        )) : console.error(
          "In HTML, %s cannot be a descendant of <%s>.\nThis will cause a hydration error.%s",
          warnKey,
          ancestorInfo,
          getCurrentParentStackInDev()
        );
        return false;
      }
      function validateTextNesting(childText, parentTag) {
        if (isTagValidWithParent("#text", parentTag))
          return true;
        var warnKey = "#text|" + parentTag;
        if (didWarn[warnKey])
          return false;
        didWarn[warnKey] = true;
        /\S/.test(childText) ? console.error(
          "In HTML, text nodes cannot be a child of <%s>.\nThis will cause a hydration error.%s",
          parentTag,
          getCurrentParentStackInDev()
        ) : console.error(
          "In HTML, whitespace text nodes cannot be a child of <%s>. Make sure you don't have any extra whitespace between tags on each line of your source code.\nThis will cause a hydration error.%s",
          parentTag,
          getCurrentParentStackInDev()
        );
        return false;
      }
      function setTextContent(node, text) {
        if (text) {
          var firstChild = node.firstChild;
          if (firstChild && firstChild === node.lastChild && 3 === firstChild.nodeType) {
            firstChild.nodeValue = text;
            return;
          }
        }
        node.textContent = text;
      }
      function camelize(string) {
        return string.replace(hyphenPattern, function(_, character) {
          return character.toUpperCase();
        });
      }
      function setValueForStyle(style2, styleName, value) {
        var isCustomProperty = 0 === styleName.indexOf("--");
        isCustomProperty || (-1 < styleName.indexOf("-") ? warnedStyleNames.hasOwnProperty(styleName) && warnedStyleNames[styleName] || (warnedStyleNames[styleName] = true, error$jscomp$0(
          "Unsupported style property %s. Did you mean %s?",
          styleName,
          camelize(styleName.replace(msPattern, "ms-"))
        )) : badVendoredStyleNamePattern.test(styleName) ? warnedStyleNames.hasOwnProperty(styleName) && warnedStyleNames[styleName] || (warnedStyleNames[styleName] = true, error$jscomp$0(
          "Unsupported vendor-prefixed style property %s. Did you mean %s?",
          styleName,
          styleName.charAt(0).toUpperCase() + styleName.slice(1)
        )) : !badStyleValueWithSemicolonPattern.test(value) || warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value] || (warnedStyleValues[value] = true, error$jscomp$0(
          `Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`,
          styleName,
          value.replace(badStyleValueWithSemicolonPattern, "")
        )), "number" === typeof value && (isNaN(value) ? warnedForNaNValue || (warnedForNaNValue = true, error$jscomp$0(
          "`NaN` is an invalid value for the `%s` css style property.",
          styleName
        )) : isFinite(value) || warnedForInfinityValue || (warnedForInfinityValue = true, error$jscomp$0(
          "`Infinity` is an invalid value for the `%s` css style property.",
          styleName
        ))));
        null == value || "boolean" === typeof value || "" === value ? isCustomProperty ? style2.setProperty(styleName, "") : "float" === styleName ? style2.cssFloat = "" : style2[styleName] = "" : isCustomProperty ? style2.setProperty(styleName, value) : "number" !== typeof value || 0 === value || unitlessNumbers.has(styleName) ? "float" === styleName ? style2.cssFloat = value : (checkCSSPropertyStringCoercion(value, styleName), style2[styleName] = ("" + value).trim()) : style2[styleName] = value + "px";
      }
      function setValueForStyles(node, styles, prevStyles) {
        if (null != styles && "object" !== typeof styles)
          throw Error(
            "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
          );
        styles && Object.freeze(styles);
        node = node.style;
        if (null != prevStyles) {
          if (styles) {
            var expandedUpdates = {};
            if (prevStyles) {
              for (var key in prevStyles)
                if (prevStyles.hasOwnProperty(key) && !styles.hasOwnProperty(key))
                  for (var longhands = shorthandToLonghand[key] || [key], i = 0; i < longhands.length; i++)
                    expandedUpdates[longhands[i]] = key;
            }
            for (var _key in styles)
              if (styles.hasOwnProperty(_key) && (!prevStyles || prevStyles[_key] !== styles[_key]))
                for (key = shorthandToLonghand[_key] || [_key], longhands = 0; longhands < key.length; longhands++)
                  expandedUpdates[key[longhands]] = _key;
            _key = {};
            for (var key$jscomp$0 in styles)
              for (key = shorthandToLonghand[key$jscomp$0] || [key$jscomp$0], longhands = 0; longhands < key.length; longhands++)
                _key[key[longhands]] = key$jscomp$0;
            key$jscomp$0 = {};
            for (var _key2 in expandedUpdates)
              key = expandedUpdates[_key2], (longhands = _key[_key2]) && key !== longhands && (i = key + "," + longhands, key$jscomp$0[i] || (key$jscomp$0[i] = true, i = styles[key], error$jscomp$0(
                "%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.",
                null == i || "boolean" === typeof i || "" === i ? "Removing" : "Updating",
                key,
                longhands
              )));
          }
          for (var styleName in prevStyles)
            !prevStyles.hasOwnProperty(styleName) || null != styles && styles.hasOwnProperty(styleName) || (0 === styleName.indexOf("--") ? node.setProperty(styleName, "") : "float" === styleName ? node.cssFloat = "" : node[styleName] = "");
          for (var _styleName in styles)
            _key2 = styles[_styleName], styles.hasOwnProperty(_styleName) && prevStyles[_styleName] !== _key2 && setValueForStyle(node, _styleName, _key2);
        } else
          for (expandedUpdates in styles)
            styles.hasOwnProperty(expandedUpdates) && setValueForStyle(node, expandedUpdates, styles[expandedUpdates]);
      }
      function isCustomElement(tagName) {
        if (-1 === tagName.indexOf("-"))
          return false;
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      function getAttributeAlias(name) {
        return aliases.get(name) || name;
      }
      function validateProperty$1(tagName, name) {
        if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name])
          return true;
        if (rARIACamel$1.test(name)) {
          tagName = "aria-" + name.slice(4).toLowerCase();
          tagName = ariaProperties.hasOwnProperty(tagName) ? tagName : null;
          if (null == tagName)
            return error$jscomp$0(
              "Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.",
              name
            ), warnedProperties$1[name] = true;
          if (name !== tagName)
            return error$jscomp$0(
              "Invalid ARIA attribute `%s`. Did you mean `%s`?",
              name,
              tagName
            ), warnedProperties$1[name] = true;
        }
        if (rARIA$1.test(name)) {
          tagName = name.toLowerCase();
          tagName = ariaProperties.hasOwnProperty(tagName) ? tagName : null;
          if (null == tagName)
            return warnedProperties$1[name] = true, false;
          name !== tagName && (error$jscomp$0(
            "Unknown ARIA attribute `%s`. Did you mean `%s`?",
            name,
            tagName
          ), warnedProperties$1[name] = true);
        }
        return true;
      }
      function validateProperties$2(type, props) {
        var invalidProps = [], key;
        for (key in props)
          validateProperty$1(type, key) || invalidProps.push(key);
        props = invalidProps.map(function(prop) {
          return "`" + prop + "`";
        }).join(", ");
        1 === invalidProps.length ? error$jscomp$0(
          "Invalid aria prop %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props",
          props,
          type
        ) : 1 < invalidProps.length && error$jscomp$0(
          "Invalid aria props %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props",
          props,
          type
        );
      }
      function validateProperty(tagName, name, value, eventRegistry) {
        if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name])
          return true;
        var lowerCasedName = name.toLowerCase();
        if ("onfocusin" === lowerCasedName || "onfocusout" === lowerCasedName)
          return error$jscomp$0(
            "React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."
          ), warnedProperties[name] = true;
        if ("function" === typeof value && ("form" === tagName && "action" === name || "input" === tagName && "formAction" === name || "button" === tagName && "formAction" === name))
          return true;
        if (null != eventRegistry) {
          tagName = eventRegistry.possibleRegistrationNames;
          if (eventRegistry.registrationNameDependencies.hasOwnProperty(name))
            return true;
          eventRegistry = tagName.hasOwnProperty(lowerCasedName) ? tagName[lowerCasedName] : null;
          if (null != eventRegistry)
            return error$jscomp$0(
              "Invalid event handler property `%s`. Did you mean `%s`?",
              name,
              eventRegistry
            ), warnedProperties[name] = true;
          if (EVENT_NAME_REGEX.test(name))
            return error$jscomp$0(
              "Unknown event handler property `%s`. It will be ignored.",
              name
            ), warnedProperties[name] = true;
        } else if (EVENT_NAME_REGEX.test(name))
          return INVALID_EVENT_NAME_REGEX.test(name) && error$jscomp$0(
            "Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.",
            name
          ), warnedProperties[name] = true;
        if (rARIA.test(name) || rARIACamel.test(name))
          return true;
        if ("innerhtml" === lowerCasedName)
          return error$jscomp$0(
            "Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."
          ), warnedProperties[name] = true;
        if ("aria" === lowerCasedName)
          return error$jscomp$0(
            "The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."
          ), warnedProperties[name] = true;
        if ("is" === lowerCasedName && null !== value && void 0 !== value && "string" !== typeof value)
          return error$jscomp$0(
            "Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.",
            typeof value
          ), warnedProperties[name] = true;
        if ("number" === typeof value && isNaN(value))
          return error$jscomp$0(
            "Received NaN for the `%s` attribute. If this is expected, cast the value to a string.",
            name
          ), warnedProperties[name] = true;
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          if (lowerCasedName = possibleStandardNames[lowerCasedName], lowerCasedName !== name)
            return error$jscomp$0(
              "Invalid DOM property `%s`. Did you mean `%s`?",
              name,
              lowerCasedName
            ), warnedProperties[name] = true;
        } else if (name !== lowerCasedName)
          return error$jscomp$0(
            "React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.",
            name,
            lowerCasedName
          ), warnedProperties[name] = true;
        switch (name) {
          case "dangerouslySetInnerHTML":
          case "children":
          case "style":
          case "suppressContentEditableWarning":
          case "suppressHydrationWarning":
          case "defaultValue":
          case "defaultChecked":
          case "innerHTML":
          case "ref":
            return true;
          case "innerText":
          case "textContent":
            return true;
        }
        switch (typeof value) {
          case "boolean":
            switch (name) {
              case "autoFocus":
              case "checked":
              case "multiple":
              case "muted":
              case "selected":
              case "contentEditable":
              case "spellCheck":
              case "draggable":
              case "value":
              case "autoReverse":
              case "externalResourcesRequired":
              case "focusable":
              case "preserveAlpha":
              case "allowFullScreen":
              case "async":
              case "autoPlay":
              case "controls":
              case "default":
              case "defer":
              case "disabled":
              case "disablePictureInPicture":
              case "disableRemotePlayback":
              case "formNoValidate":
              case "hidden":
              case "loop":
              case "noModule":
              case "noValidate":
              case "open":
              case "playsInline":
              case "readOnly":
              case "required":
              case "reversed":
              case "scoped":
              case "seamless":
              case "itemScope":
              case "capture":
              case "download":
              case "inert":
                return true;
              default:
                lowerCasedName = name.toLowerCase().slice(0, 5);
                if ("data-" === lowerCasedName || "aria-" === lowerCasedName)
                  return true;
                value ? error$jscomp$0(
                  'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.',
                  value,
                  name,
                  name,
                  value,
                  name
                ) : error$jscomp$0(
                  'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.',
                  value,
                  name,
                  name,
                  value,
                  name,
                  name,
                  name
                );
                return warnedProperties[name] = true;
            }
          case "function":
          case "symbol":
            return warnedProperties[name] = true, false;
          case "string":
            if ("false" === value || "true" === value) {
              switch (name) {
                case "checked":
                case "selected":
                case "multiple":
                case "muted":
                case "allowFullScreen":
                case "async":
                case "autoPlay":
                case "controls":
                case "default":
                case "defer":
                case "disabled":
                case "disablePictureInPicture":
                case "disableRemotePlayback":
                case "formNoValidate":
                case "hidden":
                case "loop":
                case "noModule":
                case "noValidate":
                case "open":
                case "playsInline":
                case "readOnly":
                case "required":
                case "reversed":
                case "scoped":
                case "seamless":
                case "itemScope":
                case "inert":
                  break;
                default:
                  return true;
              }
              error$jscomp$0(
                "Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?",
                value,
                name,
                "false" === value ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".',
                name,
                value
              );
              warnedProperties[name] = true;
            }
        }
        return true;
      }
      function warnUnknownProperties(type, props, eventRegistry) {
        var unknownProps = [], key;
        for (key in props)
          validateProperty(type, key, props[key], eventRegistry) || unknownProps.push(key);
        props = unknownProps.map(function(prop) {
          return "`" + prop + "`";
        }).join(", ");
        1 === unknownProps.length ? error$jscomp$0(
          "Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://react.dev/link/attribute-behavior ",
          props,
          type
        ) : 1 < unknownProps.length && error$jscomp$0(
          "Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://react.dev/link/attribute-behavior ",
          props,
          type
        );
      }
      function sanitizeURL(url) {
        return isJavaScriptProtocol.test("" + url) ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')" : url;
      }
      function getEventTarget(nativeEvent) {
        nativeEvent = nativeEvent.target || nativeEvent.srcElement || window;
        nativeEvent.correspondingUseElement && (nativeEvent = nativeEvent.correspondingUseElement);
        return 3 === nativeEvent.nodeType ? nativeEvent.parentNode : nativeEvent;
      }
      function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);
        if (internalInstance && (target = internalInstance.stateNode)) {
          var props = target[internalPropsKey] || null;
          a:
            switch (target = internalInstance.stateNode, internalInstance.type) {
              case "input":
                updateInput(
                  target,
                  props.value,
                  props.defaultValue,
                  props.defaultValue,
                  props.checked,
                  props.defaultChecked,
                  props.type,
                  props.name
                );
                internalInstance = props.name;
                if ("radio" === props.type && null != internalInstance) {
                  for (props = target; props.parentNode; )
                    props = props.parentNode;
                  checkAttributeStringCoercion(internalInstance, "name");
                  props = props.querySelectorAll(
                    'input[name="' + escapeSelectorAttributeValueInsideDoubleQuotes(
                      "" + internalInstance
                    ) + '"][type="radio"]'
                  );
                  for (internalInstance = 0; internalInstance < props.length; internalInstance++) {
                    var otherNode = props[internalInstance];
                    if (otherNode !== target && otherNode.form === target.form) {
                      var otherProps = otherNode[internalPropsKey] || null;
                      if (!otherProps)
                        throw Error(
                          "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported."
                        );
                      updateInput(
                        otherNode,
                        otherProps.value,
                        otherProps.defaultValue,
                        otherProps.defaultValue,
                        otherProps.checked,
                        otherProps.defaultChecked,
                        otherProps.type,
                        otherProps.name
                      );
                    }
                  }
                  for (internalInstance = 0; internalInstance < props.length; internalInstance++)
                    otherNode = props[internalInstance], otherNode.form === target.form && updateValueIfChanged(otherNode);
                }
                break a;
              case "textarea":
                updateTextarea(target, props.value, props.defaultValue);
                break a;
              case "select":
                internalInstance = props.value, null != internalInstance && updateOptions(target, !!props.multiple, internalInstance, false);
            }
        }
      }
      function batchedUpdates$1(fn, a, b) {
        if (isInsideEventHandler)
          return fn(a, b);
        isInsideEventHandler = true;
        try {
          var JSCompiler_inline_result = fn(a);
          return JSCompiler_inline_result;
        } finally {
          if (isInsideEventHandler = false, null !== restoreTarget || null !== restoreQueue) {
            if (flushSyncWork$1(), restoreTarget && (a = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(a), fn))
              for (a = 0; a < fn.length; a++)
                restoreStateOfTarget(fn[a]);
          }
        }
      }
      function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (null === stateNode)
          return null;
        var props = stateNode[internalPropsKey] || null;
        if (null === props)
          return null;
        stateNode = props[registrationName];
        a:
          switch (registrationName) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
              inst = !props;
              break a;
            default:
              inst = false;
          }
        if (inst)
          return null;
        if (stateNode && "function" !== typeof stateNode)
          throw Error(
            "Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof stateNode + "` type."
          );
        return stateNode;
      }
      function getData() {
        if (fallbackText)
          return fallbackText;
        var start, startValue = startText, startLength = startValue.length, end, endValue = "value" in root ? root.value : root.textContent, endLength = endValue.length;
        for (start = 0; start < startLength && startValue[start] === endValue[start]; start++)
          ;
        var minEnd = startLength - start;
        for (end = 1; end <= minEnd && startValue[startLength - end] === endValue[endLength - end]; end++)
          ;
        return fallbackText = endValue.slice(start, 1 < end ? 1 - end : void 0);
      }
      function getEventCharCode(nativeEvent) {
        var keyCode = nativeEvent.keyCode;
        "charCode" in nativeEvent ? (nativeEvent = nativeEvent.charCode, 0 === nativeEvent && 13 === keyCode && (nativeEvent = 13)) : nativeEvent = keyCode;
        10 === nativeEvent && (nativeEvent = 13);
        return 32 <= nativeEvent || 13 === nativeEvent ? nativeEvent : 0;
      }
      function functionThatReturnsTrue() {
        return true;
      }
      function functionThatReturnsFalse() {
        return false;
      }
      function createSyntheticEvent(Interface) {
        function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
          this._reactName = reactName;
          this._targetInst = targetInst;
          this.type = reactEventType;
          this.nativeEvent = nativeEvent;
          this.target = nativeEventTarget;
          this.currentTarget = null;
          for (var propName in Interface)
            Interface.hasOwnProperty(propName) && (reactName = Interface[propName], this[propName] = reactName ? reactName(nativeEvent) : nativeEvent[propName]);
          this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
          this.isPropagationStopped = functionThatReturnsFalse;
          return this;
        }
        assign(SyntheticBaseEvent.prototype, {
          preventDefault: function() {
            this.defaultPrevented = true;
            var event = this.nativeEvent;
            event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
          },
          stopPropagation: function() {
            var event = this.nativeEvent;
            event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
          },
          persist: function() {
          },
          isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
      }
      function modifierStateGetter(keyArg) {
        var nativeEvent = this.nativeEvent;
        return nativeEvent.getModifierState ? nativeEvent.getModifierState(keyArg) : (keyArg = modifierKeyToProp[keyArg]) ? !!nativeEvent[keyArg] : false;
      }
      function getEventModifierState() {
        return modifierStateGetter;
      }
      function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch (domEventName) {
          case "keyup":
            return -1 !== END_KEYCODES.indexOf(nativeEvent.keyCode);
          case "keydown":
            return nativeEvent.keyCode !== START_KEYCODE;
          case "keypress":
          case "mousedown":
          case "focusout":
            return true;
          default:
            return false;
        }
      }
      function getDataFromCustomEvent(nativeEvent) {
        nativeEvent = nativeEvent.detail;
        return "object" === typeof nativeEvent && "data" in nativeEvent ? nativeEvent.data : null;
      }
      function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch (domEventName) {
          case "compositionend":
            return getDataFromCustomEvent(nativeEvent);
          case "keypress":
            if (nativeEvent.which !== SPACEBAR_CODE)
              return null;
            hasSpaceKeypress = true;
            return SPACEBAR_CHAR;
          case "textInput":
            return domEventName = nativeEvent.data, domEventName === SPACEBAR_CHAR && hasSpaceKeypress ? null : domEventName;
          default:
            return null;
        }
      }
      function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        if (isComposing)
          return "compositionend" === domEventName || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent) ? (domEventName = getData(), fallbackText = startText = root = null, isComposing = false, domEventName) : null;
        switch (domEventName) {
          case "paste":
            return null;
          case "keypress":
            if (!(nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) || nativeEvent.ctrlKey && nativeEvent.altKey) {
              if (nativeEvent.char && 1 < nativeEvent.char.length)
                return nativeEvent.char;
              if (nativeEvent.which)
                return String.fromCharCode(nativeEvent.which);
            }
            return null;
          case "compositionend":
            return useFallbackCompositionData && "ko" !== nativeEvent.locale ? null : nativeEvent.data;
          default:
            return null;
        }
      }
      function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return "input" === nodeName ? !!supportedInputTypes[elem.type] : "textarea" === nodeName ? true : false;
      }
      function isEventSupported(eventNameSuffix) {
        if (!canUseDOM)
          return false;
        eventNameSuffix = "on" + eventNameSuffix;
        var isSupported = eventNameSuffix in document;
        isSupported || (isSupported = document.createElement("div"), isSupported.setAttribute(eventNameSuffix, "return;"), isSupported = "function" === typeof isSupported[eventNameSuffix]);
        return isSupported;
      }
      function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [target] : restoreTarget = target;
        inst = accumulateTwoPhaseListeners(inst, "onChange");
        0 < inst.length && (nativeEvent = new SyntheticEvent(
          "onChange",
          "change",
          null,
          nativeEvent,
          target
        ), dispatchQueue.push({ event: nativeEvent, listeners: inst }));
      }
      function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
      }
      function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode))
          return targetInst;
      }
      function getTargetInstForChangeEvent(domEventName, targetInst) {
        if ("change" === domEventName)
          return targetInst;
      }
      function stopWatchingForValueChange() {
        activeElement$1 && (activeElement$1.detachEvent("onpropertychange", handlePropertyChange), activeElementInst$1 = activeElement$1 = null);
      }
      function handlePropertyChange(nativeEvent) {
        if ("value" === nativeEvent.propertyName && getInstIfValueChanged(activeElementInst$1)) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(
            dispatchQueue,
            activeElementInst$1,
            nativeEvent,
            getEventTarget(nativeEvent)
          );
          batchedUpdates$1(runEventInBatch, dispatchQueue);
        }
      }
      function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        "focusin" === domEventName ? (stopWatchingForValueChange(), activeElement$1 = target, activeElementInst$1 = targetInst, activeElement$1.attachEvent("onpropertychange", handlePropertyChange)) : "focusout" === domEventName && stopWatchingForValueChange();
      }
      function getTargetInstForInputEventPolyfill(domEventName) {
        if ("selectionchange" === domEventName || "keyup" === domEventName || "keydown" === domEventName)
          return getInstIfValueChanged(activeElementInst$1);
      }
      function getTargetInstForClickEvent(domEventName, targetInst) {
        if ("click" === domEventName)
          return getInstIfValueChanged(targetInst);
      }
      function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if ("input" === domEventName || "change" === domEventName)
          return getInstIfValueChanged(targetInst);
      }
      function is(x, y) {
        return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
      }
      function shallowEqual(objA, objB) {
        if (objectIs(objA, objB))
          return true;
        if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB)
          return false;
        var keysA = Object.keys(objA), keysB = Object.keys(objB);
        if (keysA.length !== keysB.length)
          return false;
        for (keysB = 0; keysB < keysA.length; keysB++) {
          var currentKey = keysA[keysB];
          if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey]))
            return false;
        }
        return true;
      }
      function getLeafNode(node) {
        for (; node && node.firstChild; )
          node = node.firstChild;
        return node;
      }
      function getNodeForCharacterOffset(root2, offset) {
        var node = getLeafNode(root2);
        root2 = 0;
        for (var nodeEnd; node; ) {
          if (3 === node.nodeType) {
            nodeEnd = root2 + node.textContent.length;
            if (root2 <= offset && nodeEnd >= offset)
              return { node, offset: offset - root2 };
            root2 = nodeEnd;
          }
          a: {
            for (; node; ) {
              if (node.nextSibling) {
                node = node.nextSibling;
                break a;
              }
              node = node.parentNode;
            }
            node = void 0;
          }
          node = getLeafNode(node);
        }
      }
      function containsNode(outerNode, innerNode) {
        return outerNode && innerNode ? outerNode === innerNode ? true : outerNode && 3 === outerNode.nodeType ? false : innerNode && 3 === innerNode.nodeType ? containsNode(outerNode, innerNode.parentNode) : "contains" in outerNode ? outerNode.contains(innerNode) : outerNode.compareDocumentPosition ? !!(outerNode.compareDocumentPosition(innerNode) & 16) : false : false;
      }
      function getActiveElementDeep() {
        for (var win = window, element = getActiveElement(); element instanceof win.HTMLIFrameElement; ) {
          try {
            var JSCompiler_inline_result = "string" === typeof element.contentWindow.location.href;
          } catch (err) {
            JSCompiler_inline_result = false;
          }
          if (JSCompiler_inline_result)
            win = element.contentWindow;
          else
            break;
          element = getActiveElement(win.document);
        }
        return element;
      }
      function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && ("input" === nodeName && ("text" === elem.type || "search" === elem.type || "tel" === elem.type || "url" === elem.type || "password" === elem.type) || "textarea" === nodeName || "true" === elem.contentEditable);
      }
      function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep(), priorFocusedElem = priorSelectionInformation.focusedElem, priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && priorFocusedElem && priorFocusedElem.ownerDocument && containsNode(
          priorFocusedElem.ownerDocument.documentElement,
          priorFocusedElem
        )) {
          if (null !== priorSelectionRange && hasSelectionCapabilities(priorFocusedElem)) {
            if (curFocusedElem = priorSelectionRange.start, priorSelectionInformation = priorSelectionRange.end, void 0 === priorSelectionInformation && (priorSelectionInformation = curFocusedElem), "selectionStart" in priorFocusedElem)
              priorFocusedElem.selectionStart = curFocusedElem, priorFocusedElem.selectionEnd = Math.min(
                priorSelectionInformation,
                priorFocusedElem.value.length
              );
            else if (priorSelectionInformation = (curFocusedElem = priorFocusedElem.ownerDocument || document) && curFocusedElem.defaultView || window, priorSelectionInformation.getSelection) {
              priorSelectionInformation = priorSelectionInformation.getSelection();
              var length = priorFocusedElem.textContent.length, start = Math.min(priorSelectionRange.start, length);
              priorSelectionRange = void 0 === priorSelectionRange.end ? start : Math.min(priorSelectionRange.end, length);
              !priorSelectionInformation.extend && start > priorSelectionRange && (length = priorSelectionRange, priorSelectionRange = start, start = length);
              length = getNodeForCharacterOffset(priorFocusedElem, start);
              var endMarker = getNodeForCharacterOffset(
                priorFocusedElem,
                priorSelectionRange
              );
              length && endMarker && (1 !== priorSelectionInformation.rangeCount || priorSelectionInformation.anchorNode !== length.node || priorSelectionInformation.anchorOffset !== length.offset || priorSelectionInformation.focusNode !== endMarker.node || priorSelectionInformation.focusOffset !== endMarker.offset) && (curFocusedElem = curFocusedElem.createRange(), curFocusedElem.setStart(length.node, length.offset), priorSelectionInformation.removeAllRanges(), start > priorSelectionRange ? (priorSelectionInformation.addRange(curFocusedElem), priorSelectionInformation.extend(
                endMarker.node,
                endMarker.offset
              )) : (curFocusedElem.setEnd(endMarker.node, endMarker.offset), priorSelectionInformation.addRange(curFocusedElem)));
            }
          }
          curFocusedElem = [];
          for (priorSelectionInformation = priorFocusedElem; priorSelectionInformation = priorSelectionInformation.parentNode; )
            1 === priorSelectionInformation.nodeType && curFocusedElem.push({
              element: priorSelectionInformation,
              left: priorSelectionInformation.scrollLeft,
              top: priorSelectionInformation.scrollTop
            });
          "function" === typeof priorFocusedElem.focus && priorFocusedElem.focus();
          for (priorFocusedElem = 0; priorFocusedElem < curFocusedElem.length; priorFocusedElem++)
            priorSelectionInformation = curFocusedElem[priorFocusedElem], priorSelectionInformation.element.scrollLeft = priorSelectionInformation.left, priorSelectionInformation.element.scrollTop = priorSelectionInformation.top;
        }
      }
      function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : 9 === nativeEventTarget.nodeType ? nativeEventTarget : nativeEventTarget.ownerDocument;
        mouseDown || null == activeElement || activeElement !== getActiveElement(doc) || (doc = activeElement, "selectionStart" in doc && hasSelectionCapabilities(doc) ? doc = { start: doc.selectionStart, end: doc.selectionEnd } : (doc = (doc.ownerDocument && doc.ownerDocument.defaultView || window).getSelection(), doc = {
          anchorNode: doc.anchorNode,
          anchorOffset: doc.anchorOffset,
          focusNode: doc.focusNode,
          focusOffset: doc.focusOffset
        }), lastSelection && shallowEqual(lastSelection, doc) || (lastSelection = doc, doc = accumulateTwoPhaseListeners(activeElementInst, "onSelect"), 0 < doc.length && (nativeEvent = new SyntheticEvent(
          "onSelect",
          "select",
          null,
          nativeEvent,
          nativeEventTarget
        ), dispatchQueue.push({ event: nativeEvent, listeners: doc }), nativeEvent.target = activeElement)));
      }
      function makePrefixMap(styleProp, eventName) {
        var prefixes = {};
        prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes["Webkit" + styleProp] = "webkit" + eventName;
        prefixes["Moz" + styleProp] = "moz" + eventName;
        return prefixes;
      }
      function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName])
          return prefixedEventNames[eventName];
        if (!vendorPrefixes[eventName])
          return eventName;
        var prefixMap = vendorPrefixes[eventName], styleProp;
        for (styleProp in prefixMap)
          if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)
            return prefixedEventNames[eventName] = prefixMap[styleProp];
        return eventName;
      }
      function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName);
        registerTwoPhaseEvent(reactName, [domEventName]);
      }
      function finishQueueingConcurrentUpdates() {
        for (var endIndex = concurrentQueuesIndex, i = concurrentlyUpdatedLanes = concurrentQueuesIndex = 0; i < endIndex; ) {
          var fiber = concurrentQueues[i];
          concurrentQueues[i++] = null;
          var queue = concurrentQueues[i];
          concurrentQueues[i++] = null;
          var update = concurrentQueues[i];
          concurrentQueues[i++] = null;
          var lane = concurrentQueues[i];
          concurrentQueues[i++] = null;
          if (null !== queue && null !== update) {
            var pending = queue.pending;
            null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
            queue.pending = update;
          }
          0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);
        }
      }
      function enqueueUpdate$1(fiber, queue, update, lane) {
        concurrentQueues[concurrentQueuesIndex++] = fiber;
        concurrentQueues[concurrentQueuesIndex++] = queue;
        concurrentQueues[concurrentQueuesIndex++] = update;
        concurrentQueues[concurrentQueuesIndex++] = lane;
        concurrentlyUpdatedLanes |= lane;
        fiber.lanes |= lane;
        fiber = fiber.alternate;
        null !== fiber && (fiber.lanes |= lane);
      }
      function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
        enqueueUpdate$1(fiber, queue, update, lane);
        return getRootForUpdatedFiber(fiber);
      }
      function enqueueConcurrentRenderForLane(fiber, lane) {
        enqueueUpdate$1(fiber, null, null, lane);
        return getRootForUpdatedFiber(fiber);
      }
      function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
        sourceFiber.lanes |= lane;
        var alternate = sourceFiber.alternate;
        null !== alternate && (alternate.lanes |= lane);
        for (var isHidden = false, parent = sourceFiber.return; null !== parent; )
          parent.childLanes |= lane, alternate = parent.alternate, null !== alternate && (alternate.childLanes |= lane), 22 === parent.tag && (sourceFiber = parent.stateNode, null === sourceFiber || sourceFiber._visibility & OffscreenVisible || (isHidden = true)), sourceFiber = parent, parent = parent.return;
        isHidden && null !== update && 3 === sourceFiber.tag && (parent = sourceFiber.stateNode, isHidden = 31 - clz32(lane), parent = parent.hiddenUpdates, sourceFiber = parent[isHidden], null === sourceFiber ? parent[isHidden] = [update] : sourceFiber.push(update), update.lane = lane | OffscreenLane);
      }
      function getRootForUpdatedFiber(sourceFiber) {
        throwIfInfiniteUpdateLoopDetected();
        null === sourceFiber.alternate && 0 !== (sourceFiber.flags & 4098) && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        for (var node = sourceFiber, parent = node.return; null !== parent; )
          null === node.alternate && 0 !== (node.flags & 4098) && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber), node = parent, parent = node.return;
        return 3 === node.tag ? node.stateNode : null;
      }
      function resolveFunctionForHotReloading(type) {
        if (null === resolveFamily)
          return type;
        var family = resolveFamily(type);
        return void 0 === family ? type : family.current;
      }
      function resolveForwardRefForHotReloading(type) {
        if (null === resolveFamily)
          return type;
        var family = resolveFamily(type);
        return void 0 === family ? null !== type && void 0 !== type && "function" === typeof type.render && (family = resolveFunctionForHotReloading(type.render), type.render !== family) ? (family = { $$typeof: REACT_FORWARD_REF_TYPE, render: family }, void 0 !== type.displayName && (family.displayName = type.displayName), family) : type : family.current;
      }
      function isCompatibleFamilyForHotReloading(fiber, element) {
        if (null === resolveFamily)
          return false;
        var prevType = fiber.elementType;
        element = element.type;
        var needsCompareFamilies = false, $$typeofNextType = "object" === typeof element && null !== element ? element.$$typeof : null;
        switch (fiber.tag) {
          case 1:
            "function" === typeof element && (needsCompareFamilies = true);
            break;
          case 0:
            "function" === typeof element ? needsCompareFamilies = true : $$typeofNextType === REACT_LAZY_TYPE && (needsCompareFamilies = true);
            break;
          case 11:
            $$typeofNextType === REACT_FORWARD_REF_TYPE ? needsCompareFamilies = true : $$typeofNextType === REACT_LAZY_TYPE && (needsCompareFamilies = true);
            break;
          case 14:
          case 15:
            $$typeofNextType === REACT_MEMO_TYPE ? needsCompareFamilies = true : $$typeofNextType === REACT_LAZY_TYPE && (needsCompareFamilies = true);
            break;
          default:
            return false;
        }
        return needsCompareFamilies && (fiber = resolveFamily(prevType), void 0 !== fiber && fiber === resolveFamily(element)) ? true : false;
      }
      function markFailedErrorBoundaryForHotReloading(fiber) {
        null !== resolveFamily && "function" === typeof WeakSet && (null === failedBoundaries && (failedBoundaries = /* @__PURE__ */ new WeakSet()), failedBoundaries.add(fiber));
      }
      function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type, candidateType = null;
        switch (tag) {
          case 0:
          case 15:
          case 1:
            candidateType = type;
            break;
          case 11:
            candidateType = type.render;
        }
        if (null === resolveFamily)
          throw Error("Expected resolveFamily to be set during hot reload.");
        var needsRender = false;
        type = false;
        null !== candidateType && (candidateType = resolveFamily(candidateType), void 0 !== candidateType && (staleFamilies.has(candidateType) ? type = true : updatedFamilies.has(candidateType) && (1 === tag ? type = true : needsRender = true)));
        null !== failedBoundaries && (failedBoundaries.has(fiber) || null !== alternate && failedBoundaries.has(alternate)) && (type = true);
        type && (fiber._debugNeedsRemount = true);
        if (type || needsRender)
          alternate = enqueueConcurrentRenderForLane(fiber, SyncLane), null !== alternate && scheduleUpdateOnFiber(alternate, fiber, SyncLane);
        null === child || type || scheduleFibersWithFamiliesRecursively(
          child,
          updatedFamilies,
          staleFamilies
        );
        null !== sibling && scheduleFibersWithFamiliesRecursively(
          sibling,
          updatedFamilies,
          staleFamilies
        );
      }
      function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        var child = fiber.child, sibling = fiber.sibling, type = fiber.type, candidateType = null;
        switch (fiber.tag) {
          case 0:
          case 15:
          case 1:
            candidateType = type;
            break;
          case 11:
            candidateType = type.render;
        }
        type = false;
        null !== candidateType && types.has(candidateType) && (type = true);
        if (type)
          a: {
            b:
              for (child = fiber, candidateType = false; ; ) {
                if (5 === child.tag || 26 === child.tag || 27 === child.tag)
                  candidateType = true, hostInstances.add(child.stateNode);
                else if (null !== child.child) {
                  child.child.return = child;
                  child = child.child;
                  continue;
                }
                if (child === fiber) {
                  child = candidateType;
                  break b;
                }
                for (; null === child.sibling; ) {
                  if (null === child.return || child.return === fiber) {
                    child = candidateType;
                    break b;
                  }
                  child = child.return;
                }
                child.sibling.return = child.return;
                child = child.sibling;
              }
            if (!child)
              for (; ; ) {
                switch (fiber.tag) {
                  case 27:
                  case 5:
                    hostInstances.add(fiber.stateNode);
                    break a;
                  case 4:
                    hostInstances.add(fiber.stateNode.containerInfo);
                    break a;
                  case 3:
                    hostInstances.add(fiber.stateNode.containerInfo);
                    break a;
                }
                if (null === fiber.return)
                  throw Error("Expected to reach root first.");
                fiber = fiber.return;
              }
          }
        else
          null !== child && findHostInstancesForMatchingFibersRecursively(
            child,
            types,
            hostInstances
          );
        null !== sibling && findHostInstancesForMatchingFibersRecursively(
          sibling,
          types,
          hostInstances
        );
      }
      function createCapturedValueAtFiber(value, source) {
        if ("object" === typeof value && null !== value) {
          var stack = CapturedStacks.get(value);
          "string" !== typeof stack && (stack = getStackByFiberInDevAndProd(source), CapturedStacks.set(value, stack));
        } else
          stack = getStackByFiberInDevAndProd(source);
        return { value, source, stack };
      }
      function pushTreeFork(workInProgress2, totalChildren) {
        warnIfNotHydrating();
        forkStack[forkStackIndex++] = treeForkCount;
        forkStack[forkStackIndex++] = treeForkProvider;
        treeForkProvider = workInProgress2;
        treeForkCount = totalChildren;
      }
      function pushTreeId(workInProgress2, totalChildren, index) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextProvider = workInProgress2;
        var baseIdWithLeadingBit = treeContextId;
        workInProgress2 = treeContextOverflow;
        var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;
        baseIdWithLeadingBit &= ~(1 << baseLength);
        index += 1;
        var length = 32 - clz32(totalChildren) + baseLength;
        if (30 < length) {
          var numberOfOverflowBits = baseLength - baseLength % 5;
          length = (baseIdWithLeadingBit & (1 << numberOfOverflowBits) - 1).toString(32);
          baseIdWithLeadingBit >>= numberOfOverflowBits;
          baseLength -= numberOfOverflowBits;
          treeContextId = 1 << 32 - clz32(totalChildren) + baseLength | index << baseLength | baseIdWithLeadingBit;
          treeContextOverflow = length + workInProgress2;
        } else
          treeContextId = 1 << length | index << baseLength | baseIdWithLeadingBit, treeContextOverflow = workInProgress2;
      }
      function pushMaterializedTreeId(workInProgress2) {
        warnIfNotHydrating();
        null !== workInProgress2.return && (pushTreeFork(workInProgress2, 1), pushTreeId(workInProgress2, 1, 0));
      }
      function popTreeContext(workInProgress2) {
        for (; workInProgress2 === treeForkProvider; )
          treeForkProvider = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null, treeForkCount = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null;
        for (; workInProgress2 === treeContextProvider; )
          treeContextProvider = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextOverflow = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextId = idStack[--idStackIndex], idStack[idStackIndex] = null;
      }
      function warnIfNotHydrating() {
        isHydrating || error$jscomp$0(
          "Expected to be hydrating. This is a bug in React. Please file an issue."
        );
      }
      function findNotableNode(node, indent) {
        return void 0 === node.serverProps && 0 === node.serverTail.length && 1 === node.children.length && 3 < node.distanceFromLeaf && node.distanceFromLeaf > idealDepth - indent ? findNotableNode(node.children[0], indent) : node;
      }
      function indentation(indent) {
        return "  " + "  ".repeat(indent);
      }
      function added(indent) {
        return "+ " + "  ".repeat(indent);
      }
      function removed(indent) {
        return "- " + "  ".repeat(indent);
      }
      function describeFiberType(fiber) {
        switch (fiber.tag) {
          case 26:
          case 27:
          case 5:
            return fiber.type;
          case 16:
            return "Lazy";
          case 13:
            return "Suspense";
          case 19:
            return "SuspenseList";
          case 0:
          case 15:
            return fiber = fiber.type, fiber.displayName || fiber.name || null;
          case 11:
            return fiber = fiber.type.render, fiber.displayName || fiber.name || null;
          case 1:
            return fiber = fiber.type, fiber.displayName || fiber.name || null;
          default:
            return null;
        }
      }
      function describeTextNode(content, maxLength) {
        return needsEscaping.test(content) ? (content = JSON.stringify(content), content.length > maxLength - 2 ? 8 > maxLength ? '{"..."}' : "{" + content.slice(0, maxLength - 7) + '..."}' : "{" + content + "}") : content.length > maxLength ? 5 > maxLength ? '{"..."}' : content.slice(0, maxLength - 3) + "..." : content;
      }
      function describeTextDiff(clientText, serverProps, indent) {
        var maxLength = maxRowLength - 2 * indent;
        if (null === serverProps)
          return added(indent) + describeTextNode(clientText, maxLength) + "\n";
        if ("string" === typeof serverProps) {
          for (var firstDiff = 0; firstDiff < serverProps.length && firstDiff < clientText.length && serverProps.charCodeAt(firstDiff) === clientText.charCodeAt(firstDiff); firstDiff++)
            ;
          firstDiff > maxLength - 8 && 10 < firstDiff && (clientText = "..." + clientText.slice(firstDiff - 8), serverProps = "..." + serverProps.slice(firstDiff - 8));
          return added(indent) + describeTextNode(clientText, maxLength) + "\n" + removed(indent) + describeTextNode(serverProps, maxLength) + "\n";
        }
        return indentation(indent) + describeTextNode(clientText, maxLength) + "\n";
      }
      function objectName(object) {
        return Object.prototype.toString.call(object).replace(/^\[object (.*)\]$/, function(m, p0) {
          return p0;
        });
      }
      function describeValue(value, maxLength) {
        switch (typeof value) {
          case "string":
            return value = JSON.stringify(value), value.length > maxLength ? 5 > maxLength ? '"..."' : value.slice(0, maxLength - 4) + '..."' : value;
          case "object":
            if (null === value)
              return "null";
            if (isArrayImpl(value))
              return "[...]";
            if (value.$$typeof === REACT_ELEMENT_TYPE)
              return (maxLength = getComponentNameFromType(value.type)) ? "<" + maxLength + ">" : "<...>";
            var name = objectName(value);
            if ("Object" === name) {
              name = "";
              maxLength -= 2;
              for (var propName in value)
                if (value.hasOwnProperty(propName)) {
                  var jsonPropName = JSON.stringify(propName);
                  jsonPropName !== '"' + propName + '"' && (propName = jsonPropName);
                  maxLength -= propName.length - 2;
                  jsonPropName = describeValue(
                    value[propName],
                    15 > maxLength ? maxLength : 15
                  );
                  maxLength -= jsonPropName.length;
                  if (0 > maxLength) {
                    name += "" === name ? "..." : ", ...";
                    break;
                  }
                  name += ("" === name ? "" : ",") + propName + ":" + jsonPropName;
                }
              return "{" + name + "}";
            }
            return name;
          case "function":
            return (maxLength = value.displayName || value.name) ? "function " + maxLength : "function";
          default:
            return String(value);
        }
      }
      function describePropValue(value, maxLength) {
        return "string" !== typeof value || needsEscaping.test(value) ? "{" + describeValue(value, maxLength - 2) + "}" : value.length > maxLength - 2 ? 5 > maxLength ? '"..."' : '"' + value.slice(0, maxLength - 5) + '..."' : '"' + value + '"';
      }
      function describeExpandedElement(type, props, rowPrefix) {
        var remainingRowLength = maxRowLength - rowPrefix.length - type.length, properties = [], propName;
        for (propName in props)
          if (props.hasOwnProperty(propName) && "children" !== propName) {
            var propValue = describePropValue(
              props[propName],
              maxRowLength - rowPrefix.length - propName.length - 1
            );
            remainingRowLength -= propName.length + propValue.length + 2;
            properties.push(propName + "=" + propValue);
          }
        return 0 === properties.length ? rowPrefix + "<" + type + ">\n" : 0 < remainingRowLength ? rowPrefix + "<" + type + " " + properties.join(" ") + ">\n" : rowPrefix + "<" + type + "\n" + rowPrefix + "  " + properties.join("\n" + rowPrefix + "  ") + "\n" + rowPrefix + ">\n";
      }
      function describePropertiesDiff(clientObject, serverObject, indent) {
        var properties = "", remainingServerProperties = assign({}, serverObject), propName;
        for (propName in clientObject)
          if (clientObject.hasOwnProperty(propName)) {
            delete remainingServerProperties[propName];
            var maxLength = maxRowLength - 2 * indent - propName.length - 2, clientPropValue = describeValue(clientObject[propName], maxLength);
            serverObject.hasOwnProperty(propName) ? (maxLength = describeValue(serverObject[propName], maxLength), properties += added(indent) + propName + ": " + clientPropValue + "\n", properties += removed(indent) + propName + ": " + maxLength + "\n") : properties += added(indent) + propName + ": " + clientPropValue + "\n";
          }
        for (var _propName in remainingServerProperties)
          remainingServerProperties.hasOwnProperty(_propName) && (clientObject = describeValue(
            remainingServerProperties[_propName],
            maxRowLength - 2 * indent - _propName.length - 2
          ), properties += removed(indent) + _propName + ": " + clientObject + "\n");
        return properties;
      }
      function describeElementDiff(type, clientProps, serverProps, indent) {
        var content = "", serverPropNames = /* @__PURE__ */ new Map();
        for (propName$jscomp$0 in serverProps)
          serverProps.hasOwnProperty(propName$jscomp$0) && serverPropNames.set(
            propName$jscomp$0.toLowerCase(),
            propName$jscomp$0
          );
        if (1 === serverPropNames.size && serverPropNames.has("children"))
          content += describeExpandedElement(
            type,
            clientProps,
            indentation(indent)
          );
        else {
          for (var _propName2 in clientProps)
            if (clientProps.hasOwnProperty(_propName2) && "children" !== _propName2) {
              var maxLength$jscomp$0 = maxRowLength - 2 * (indent + 1) - _propName2.length - 1, serverPropName = serverPropNames.get(_propName2.toLowerCase());
              if (void 0 !== serverPropName) {
                serverPropNames.delete(_propName2.toLowerCase());
                var propName$jscomp$0 = clientProps[_propName2];
                serverPropName = serverProps[serverPropName];
                var clientPropValue = describePropValue(
                  propName$jscomp$0,
                  maxLength$jscomp$0
                );
                maxLength$jscomp$0 = describePropValue(
                  serverPropName,
                  maxLength$jscomp$0
                );
                "object" === typeof propName$jscomp$0 && null !== propName$jscomp$0 && "object" === typeof serverPropName && null !== serverPropName && "Object" === objectName(propName$jscomp$0) && "Object" === objectName(serverPropName) && (2 < Object.keys(propName$jscomp$0).length || 2 < Object.keys(serverPropName).length || -1 < clientPropValue.indexOf("...") || -1 < maxLength$jscomp$0.indexOf("...")) ? content += indentation(indent + 1) + _propName2 + "={{\n" + describePropertiesDiff(
                  propName$jscomp$0,
                  serverPropName,
                  indent + 2
                ) + indentation(indent + 1) + "}}\n" : (content += added(indent + 1) + _propName2 + "=" + clientPropValue + "\n", content += removed(indent + 1) + _propName2 + "=" + maxLength$jscomp$0 + "\n");
              } else
                content += indentation(indent + 1) + _propName2 + "=" + describePropValue(clientProps[_propName2], maxLength$jscomp$0) + "\n";
            }
          serverPropNames.forEach(function(propName) {
            if ("children" !== propName) {
              var maxLength = maxRowLength - 2 * (indent + 1) - propName.length - 1;
              content += removed(indent + 1) + propName + "=" + describePropValue(serverProps[propName], maxLength) + "\n";
            }
          });
          content = "" === content ? indentation(indent) + "<" + type + ">\n" : indentation(indent) + "<" + type + "\n" + content + indentation(indent) + ">\n";
        }
        type = serverProps.children;
        clientProps = clientProps.children;
        if ("string" === typeof type || "number" === typeof type || "bigint" === typeof type) {
          serverPropNames = "";
          if ("string" === typeof clientProps || "number" === typeof clientProps || "bigint" === typeof clientProps)
            serverPropNames = "" + clientProps;
          content += describeTextDiff(serverPropNames, "" + type, indent + 1);
        } else if ("string" === typeof clientProps || "number" === typeof clientProps || "bigint" === typeof clientProps)
          content += describeTextDiff("" + clientProps, void 0, indent + 1);
        return content;
      }
      function describeSiblingFiber(fiber, indent) {
        var type = describeFiberType(fiber);
        if (null === type) {
          type = "";
          for (fiber = fiber.child; fiber; )
            type += describeSiblingFiber(fiber, indent), fiber = fiber.sibling;
          return type;
        }
        return indentation(indent) + "<" + type + ">\n";
      }
      function describeNode(node, indent) {
        var skipToNode = findNotableNode(node, indent);
        if (skipToNode !== node && (1 !== node.children.length || node.children[0] !== skipToNode))
          return indentation(indent) + "...\n" + describeNode(skipToNode, indent + 1);
        skipToNode = "";
        var debugInfo = node.fiber._debugInfo;
        if (debugInfo)
          for (var i = 0; i < debugInfo.length; i++) {
            var serverComponentName = debugInfo[i].name;
            "string" === typeof serverComponentName && (skipToNode += indentation(indent) + "<" + serverComponentName + ">\n", indent++);
          }
        debugInfo = "";
        i = node.fiber.pendingProps;
        if (6 === node.fiber.tag)
          debugInfo = describeTextDiff(i, node.serverProps, indent);
        else if (serverComponentName = describeFiberType(node.fiber), null !== serverComponentName)
          if (void 0 === node.serverProps) {
            debugInfo = indent;
            var maxLength = maxRowLength - 2 * debugInfo - serverComponentName.length - 2, content = "";
            for (propName in i)
              if (i.hasOwnProperty(propName) && "children" !== propName) {
                var propValue = describePropValue(i[propName], 15);
                maxLength -= propName.length + propValue.length + 2;
                if (0 > maxLength) {
                  content += " ...";
                  break;
                }
                content += " " + propName + "=" + propValue;
              }
            debugInfo = indentation(debugInfo) + "<" + serverComponentName + content + ">\n";
            indent++;
          } else
            null === node.serverProps ? debugInfo = describeExpandedElement(
              serverComponentName,
              i,
              added(indent)
            ) : "string" === typeof node.serverProps ? error$jscomp$0(
              "Should not have matched a non HostText fiber to a Text node. This is a bug in React."
            ) : (debugInfo = describeElementDiff(
              serverComponentName,
              i,
              node.serverProps,
              indent
            ), indent++);
        var propName = "";
        i = node.fiber.child;
        for (serverComponentName = 0; i && serverComponentName < node.children.length; )
          maxLength = node.children[serverComponentName], maxLength.fiber === i ? (propName += describeNode(maxLength, indent), serverComponentName++) : propName += describeSiblingFiber(i, indent), i = i.sibling;
        i && 0 < node.children.length && (propName += indentation(indent) + "...\n");
        node = node.serverTail;
        for (i = 0; i < node.length; i++)
          serverComponentName = node[i], propName = "string" === typeof serverComponentName ? propName + (removed(indent) + describeTextNode(
            serverComponentName,
            maxRowLength - 2 * indent
          ) + "\n") : propName + describeExpandedElement(
            serverComponentName.type,
            serverComponentName.props,
            removed(indent)
          );
        return skipToNode + debugInfo + propName;
      }
      function describeDiff(rootNode) {
        try {
          return "\n\n" + describeNode(rootNode, 0);
        } catch (x) {
          return "";
        }
      }
      function buildHydrationDiffNode(fiber, distanceFromLeaf) {
        if (null === fiber.return) {
          if (null === hydrationDiffRootDEV)
            hydrationDiffRootDEV = {
              fiber,
              children: [],
              serverProps: void 0,
              serverTail: [],
              distanceFromLeaf
            };
          else {
            if (hydrationDiffRootDEV.fiber !== fiber)
              throw Error(
                "Saw multiple hydration diff roots in a pass. This is a bug in React."
              );
            hydrationDiffRootDEV.distanceFromLeaf > distanceFromLeaf && (hydrationDiffRootDEV.distanceFromLeaf = distanceFromLeaf);
          }
          return hydrationDiffRootDEV;
        }
        var siblings = buildHydrationDiffNode(
          fiber.return,
          distanceFromLeaf + 1
        ).children;
        if (0 < siblings.length && siblings[siblings.length - 1].fiber === fiber)
          return siblings = siblings[siblings.length - 1], siblings.distanceFromLeaf > distanceFromLeaf && (siblings.distanceFromLeaf = distanceFromLeaf), siblings;
        distanceFromLeaf = {
          fiber,
          children: [],
          serverProps: void 0,
          serverTail: [],
          distanceFromLeaf
        };
        siblings.push(distanceFromLeaf);
        return distanceFromLeaf;
      }
      function warnNonHydratedInstance(fiber, rejectedCandidate) {
        didSuspendOrErrorDEV || (fiber = buildHydrationDiffNode(fiber, 0), fiber.serverProps = null, null !== rejectedCandidate && (rejectedCandidate = describeHydratableInstanceForDevWarnings(rejectedCandidate), fiber.serverTail.push(rejectedCandidate)));
      }
      function throwOnHydrationMismatch(fiber) {
        var diff = "", diffRoot = hydrationDiffRootDEV;
        null !== diffRoot && (hydrationDiffRootDEV = null, diff = describeDiff(diffRoot));
        queueHydrationError(
          createCapturedValueAtFiber(
            Error(
              "Hydration failed because the server rendered HTML didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\nhttps://react.dev/link/hydration-mismatch" + diff
            ),
            fiber
          )
        );
        throw HydrationMismatchException;
      }
      function prepareToHydrateHostInstance(fiber) {
        var didHydrate = fiber.stateNode;
        var type = fiber.type, props = fiber.memoizedProps;
        didHydrate[internalInstanceKey] = fiber;
        didHydrate[internalPropsKey] = props;
        validatePropertiesInDevelopment(type, props);
        switch (type) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", didHydrate);
            listenToNonDelegatedEvent("close", didHydrate);
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", didHydrate);
            break;
          case "video":
          case "audio":
            for (type = 0; type < mediaEventTypes.length; type++)
              listenToNonDelegatedEvent(mediaEventTypes[type], didHydrate);
            break;
          case "source":
            listenToNonDelegatedEvent("error", didHydrate);
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", didHydrate);
            listenToNonDelegatedEvent("load", didHydrate);
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", didHydrate);
            break;
          case "input":
            checkControlledValueProps("input", props);
            listenToNonDelegatedEvent("invalid", didHydrate);
            validateInputProps(didHydrate, props);
            initInput(
              didHydrate,
              props.value,
              props.defaultValue,
              props.checked,
              props.defaultChecked,
              props.type,
              props.name,
              true
            );
            track(didHydrate);
            break;
          case "option":
            validateOptionProps(didHydrate, props);
            break;
          case "select":
            checkControlledValueProps("select", props);
            listenToNonDelegatedEvent("invalid", didHydrate);
            validateSelectProps(didHydrate, props);
            break;
          case "textarea":
            checkControlledValueProps("textarea", props), listenToNonDelegatedEvent("invalid", didHydrate), validateTextareaProps(didHydrate, props), initTextarea(
              didHydrate,
              props.value,
              props.defaultValue,
              props.children
            ), track(didHydrate);
        }
        type = props.children;
        "string" !== typeof type && "number" !== typeof type && "bigint" !== typeof type || didHydrate.textContent === "" + type || true === props.suppressHydrationWarning || checkForUnmatchedText(didHydrate.textContent, type) ? (null != props.popover && (listenToNonDelegatedEvent("beforetoggle", didHydrate), listenToNonDelegatedEvent("toggle", didHydrate)), null != props.onScroll && listenToNonDelegatedEvent("scroll", didHydrate), null != props.onScrollEnd && listenToNonDelegatedEvent("scrollend", didHydrate), null != props.onClick && (didHydrate.onclick = noop$1), didHydrate = true) : didHydrate = false;
        didHydrate || throwOnHydrationMismatch(fiber);
      }
      function popToNextHostParent(fiber) {
        for (hydrationParentFiber = fiber.return; hydrationParentFiber; )
          switch (hydrationParentFiber.tag) {
            case 3:
            case 27:
              rootOrSingletonContext = true;
              return;
            case 5:
            case 13:
              rootOrSingletonContext = false;
              return;
            default:
              hydrationParentFiber = hydrationParentFiber.return;
          }
      }
      function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber)
          return false;
        if (!isHydrating)
          return popToNextHostParent(fiber), isHydrating = true, false;
        var shouldClear = false, JSCompiler_temp;
        if (JSCompiler_temp = 3 !== fiber.tag && 27 !== fiber.tag) {
          if (JSCompiler_temp = 5 === fiber.tag)
            JSCompiler_temp = fiber.type, JSCompiler_temp = !("form" !== JSCompiler_temp && "button" !== JSCompiler_temp) || shouldSetTextContent(fiber.type, fiber.memoizedProps);
          JSCompiler_temp = !JSCompiler_temp;
        }
        JSCompiler_temp && (shouldClear = true);
        if (shouldClear && nextHydratableInstance) {
          for (shouldClear = nextHydratableInstance; shouldClear; ) {
            JSCompiler_temp = buildHydrationDiffNode(fiber, 0);
            var description = describeHydratableInstanceForDevWarnings(shouldClear);
            JSCompiler_temp.serverTail.push(description);
            shouldClear = "Suspense" === description.type ? getNextHydratableInstanceAfterSuspenseInstance(shouldClear) : getNextHydratable(shouldClear.nextSibling);
          }
          throwOnHydrationMismatch(fiber);
        }
        popToNextHostParent(fiber);
        if (13 === fiber.tag) {
          fiber = fiber.memoizedState;
          fiber = null !== fiber ? fiber.dehydrated : null;
          if (!fiber)
            throw Error(
              "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue."
            );
          nextHydratableInstance = getNextHydratableInstanceAfterSuspenseInstance(fiber);
        } else
          nextHydratableInstance = hydrationParentFiber ? getNextHydratable(fiber.stateNode.nextSibling) : null;
        return true;
      }
      function resetHydrationState() {
        nextHydratableInstance = hydrationParentFiber = null;
        didSuspendOrErrorDEV = isHydrating = false;
      }
      function queueHydrationError(error) {
        null === hydrationErrors ? hydrationErrors = [error] : hydrationErrors.push(error);
      }
      function emitPendingHydrationWarnings() {
        var diffRoot = hydrationDiffRootDEV;
        null !== diffRoot && (hydrationDiffRootDEV = null, diffRoot = describeDiff(diffRoot), error$jscomp$0(
          "A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\n%s%s",
          "https://react.dev/link/hydration-mismatch",
          diffRoot
        ));
      }
      function createThenableState() {
        return { didWarnAboutUncachedPromise: false, thenables: [] };
      }
      function isThenableResolved(thenable) {
        thenable = thenable.status;
        return "fulfilled" === thenable || "rejected" === thenable;
      }
      function noop$3() {
      }
      function trackUsedThenable(thenableState2, thenable, index) {
        null !== ReactSharedInternals.actQueue && (ReactSharedInternals.didUsePromise = true);
        var trackedThenables = thenableState2.thenables;
        index = trackedThenables[index];
        void 0 === index ? trackedThenables.push(thenable) : index !== thenable && (thenableState2.didWarnAboutUncachedPromise || (thenableState2.didWarnAboutUncachedPromise = true, error$jscomp$0(
          "A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework."
        )), thenable.then(noop$3, noop$3), thenable = index);
        switch (thenable.status) {
          case "fulfilled":
            return thenable.value;
          case "rejected":
            throw thenableState2 = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState2), thenableState2;
          default:
            if ("string" === typeof thenable.status)
              thenable.then(noop$3, noop$3);
            else {
              thenableState2 = workInProgressRoot;
              if (null !== thenableState2 && 100 < thenableState2.shellSuspendCounter)
                throw Error(
                  "async/await is not yet supported in Client Components, only Server Components. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."
                );
              thenableState2 = thenable;
              thenableState2.status = "pending";
              thenableState2.then(
                function(fulfilledValue) {
                  if ("pending" === thenable.status) {
                    var fulfilledThenable = thenable;
                    fulfilledThenable.status = "fulfilled";
                    fulfilledThenable.value = fulfilledValue;
                  }
                },
                function(error) {
                  if ("pending" === thenable.status) {
                    var rejectedThenable = thenable;
                    rejectedThenable.status = "rejected";
                    rejectedThenable.reason = error;
                  }
                }
              );
            }
            switch (thenable.status) {
              case "fulfilled":
                return thenable.value;
              case "rejected":
                throw thenableState2 = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState2), thenableState2;
            }
            suspendedThenable = thenable;
            needsToResetSuspendedThenableDEV = true;
            throw SuspenseException;
        }
      }
      function getSuspendedThenable() {
        if (null === suspendedThenable)
          throw Error(
            "Expected a suspended thenable. This is a bug in React. Please file an issue."
          );
        var thenable = suspendedThenable;
        suspendedThenable = null;
        needsToResetSuspendedThenableDEV = false;
        return thenable;
      }
      function checkIfUseWrappedInAsyncCatch(rejectedReason) {
        if (rejectedReason === SuspenseException)
          throw Error(
            "Hooks are not supported inside an async component. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."
          );
      }
      function pushDebugInfo(debugInfo) {
        var previousDebugInfo = currentDebugInfo;
        null != debugInfo && (currentDebugInfo = null === previousDebugInfo ? debugInfo : previousDebugInfo.concat(debugInfo));
        return previousDebugInfo;
      }
      function validateFragmentProps(element, fiber, returnFiber) {
        for (var keys = Object.keys(element.props), i = 0; i < keys.length; i++) {
          var key = keys[i];
          if ("children" !== key && "key" !== key) {
            null === fiber && (fiber = createFiberFromElement(element, returnFiber.mode, 0), fiber._debugInfo = currentDebugInfo, fiber.return = returnFiber);
            runWithFiberInDEV(
              fiber,
              function(erroredKey) {
                error$jscomp$0(
                  "Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",
                  erroredKey
                );
              },
              key
            );
            break;
          }
        }
      }
      function unwrapThenable(thenable) {
        var index = thenableIndexCounter$1;
        thenableIndexCounter$1 += 1;
        null === thenableState$1 && (thenableState$1 = createThenableState());
        return trackUsedThenable(thenableState$1, thenable, index);
      }
      function coerceRef(returnFiber, current2, workInProgress2, element) {
        returnFiber = element.props.ref;
        workInProgress2.ref = void 0 !== returnFiber ? returnFiber : null;
      }
      function throwOnInvalidObjectType(returnFiber, newChild) {
        if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE)
          throw Error(
            'A React Element from an older version of React was rendered. This is not supported. It can happen if:\n- Multiple copies of the "react" package is used.\n- A library pre-bundled an old copy of "react" or "react/jsx-runtime".\n- A compiler tries to "inline" JSX instead of using the runtime.'
          );
        returnFiber = Object.prototype.toString.call(newChild);
        throw Error(
          "Objects are not valid as a React child (found: " + ("[object Object]" === returnFiber ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : returnFiber) + "). If you meant to render a collection of children, use an array instead."
        );
      }
      function warnOnFunctionType(returnFiber, invalidChild) {
        var parentName = getComponentNameFromFiber(returnFiber) || "Component";
        ownerHasFunctionTypeWarning[parentName] || (ownerHasFunctionTypeWarning[parentName] = true, invalidChild = invalidChild.displayName || invalidChild.name || "Component", 3 === returnFiber.tag ? error$jscomp$0(
          "Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  root.render(%s)",
          invalidChild,
          invalidChild,
          invalidChild
        ) : error$jscomp$0(
          "Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  <%s>{%s}</%s>",
          invalidChild,
          invalidChild,
          parentName,
          invalidChild,
          parentName
        ));
      }
      function warnOnSymbolType(returnFiber, invalidChild) {
        var parentName = getComponentNameFromFiber(returnFiber) || "Component";
        ownerHasSymbolTypeWarning[parentName] || (ownerHasSymbolTypeWarning[parentName] = true, invalidChild = String(invalidChild), 3 === returnFiber.tag ? error$jscomp$0(
          "Symbols are not valid as a React child.\n  root.render(%s)",
          invalidChild
        ) : error$jscomp$0(
          "Symbols are not valid as a React child.\n  <%s>%s</%s>",
          parentName,
          invalidChild,
          parentName
        ));
      }
      function createChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (shouldTrackSideEffects) {
            var deletions = returnFiber.deletions;
            null === deletions ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= 16) : deletions.push(childToDelete);
          }
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects)
            return null;
          for (; null !== currentFirstChild; )
            deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
          return null;
        }
        function mapRemainingChildren(currentFirstChild) {
          for (var existingChildren = /* @__PURE__ */ new Map(); null !== currentFirstChild; )
            null !== currentFirstChild.key ? existingChildren.set(currentFirstChild.key, currentFirstChild) : existingChildren.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
          return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
          fiber = createWorkInProgress(fiber, pendingProps);
          fiber.index = 0;
          fiber.sibling = null;
          return fiber;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;
          if (!shouldTrackSideEffects)
            return newFiber.flags |= 1048576, lastPlacedIndex;
          newIndex = newFiber.alternate;
          if (null !== newIndex)
            return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.flags |= 33554434, lastPlacedIndex) : newIndex;
          newFiber.flags |= 33554434;
          return lastPlacedIndex;
        }
        function placeSingleChild(newFiber) {
          shouldTrackSideEffects && null === newFiber.alternate && (newFiber.flags |= 33554434);
          return newFiber;
        }
        function updateTextNode(returnFiber, current2, textContent, lanes) {
          if (null === current2 || 6 !== current2.tag)
            return current2 = createFiberFromText(
              textContent,
              returnFiber.mode,
              lanes
            ), current2.return = returnFiber, current2._debugInfo = currentDebugInfo, current2;
          current2 = useFiber(current2, textContent);
          current2.return = returnFiber;
          current2._debugInfo = currentDebugInfo;
          return current2;
        }
        function updateElement(returnFiber, current2, element, lanes) {
          var elementType = element.type;
          if (elementType === REACT_FRAGMENT_TYPE)
            return current2 = updateFragment(
              returnFiber,
              current2,
              element.props.children,
              lanes,
              element.key
            ), validateFragmentProps(element, current2, returnFiber), current2;
          if (null !== current2 && (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || "object" === typeof elementType && null !== elementType && elementType.$$typeof === REACT_LAZY_TYPE && callLazyInitInDEV(elementType) === current2.type))
            return lanes = useFiber(current2, element.props), coerceRef(returnFiber, current2, lanes, element), lanes.return = returnFiber, lanes._debugOwner = element._owner, lanes._debugInfo = currentDebugInfo, lanes;
          lanes = createFiberFromElement(element, returnFiber.mode, lanes);
          coerceRef(returnFiber, current2, lanes, element);
          lanes.return = returnFiber;
          lanes._debugInfo = currentDebugInfo;
          return lanes;
        }
        function updatePortal(returnFiber, current2, portal, lanes) {
          if (null === current2 || 4 !== current2.tag || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation)
            return current2 = createFiberFromPortal(portal, returnFiber.mode, lanes), current2.return = returnFiber, current2._debugInfo = currentDebugInfo, current2;
          current2 = useFiber(current2, portal.children || []);
          current2.return = returnFiber;
          current2._debugInfo = currentDebugInfo;
          return current2;
        }
        function updateFragment(returnFiber, current2, fragment, lanes, key) {
          if (null === current2 || 7 !== current2.tag)
            return current2 = createFiberFromFragment(
              fragment,
              returnFiber.mode,
              lanes,
              key
            ), current2.return = returnFiber, current2._debugInfo = currentDebugInfo, current2;
          current2 = useFiber(current2, fragment);
          current2.return = returnFiber;
          current2._debugInfo = currentDebugInfo;
          return current2;
        }
        function createChild(returnFiber, newChild, lanes) {
          if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
            return newChild = createFiberFromText(
              "" + newChild,
              returnFiber.mode,
              lanes
            ), newChild.return = returnFiber, newChild._debugInfo = currentDebugInfo, newChild;
          if ("object" === typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return lanes = createFiberFromElement(
                  newChild,
                  returnFiber.mode,
                  lanes
                ), coerceRef(returnFiber, null, lanes, newChild), lanes.return = returnFiber, returnFiber = pushDebugInfo(newChild._debugInfo), lanes._debugInfo = currentDebugInfo, currentDebugInfo = returnFiber, lanes;
              case REACT_PORTAL_TYPE:
                return newChild = createFiberFromPortal(
                  newChild,
                  returnFiber.mode,
                  lanes
                ), newChild.return = returnFiber, newChild._debugInfo = currentDebugInfo, newChild;
              case REACT_LAZY_TYPE:
                var _prevDebugInfo = pushDebugInfo(newChild._debugInfo);
                newChild = callLazyInitInDEV(newChild);
                returnFiber = createChild(returnFiber, newChild, lanes);
                currentDebugInfo = _prevDebugInfo;
                return returnFiber;
            }
            if (isArrayImpl(newChild) || getIteratorFn(newChild) || "function" === typeof newChild[ASYNC_ITERATOR])
              return lanes = createFiberFromFragment(
                newChild,
                returnFiber.mode,
                lanes,
                null
              ), lanes.return = returnFiber, returnFiber = pushDebugInfo(newChild._debugInfo), lanes._debugInfo = currentDebugInfo, currentDebugInfo = returnFiber, lanes;
            if ("function" === typeof newChild.then)
              return _prevDebugInfo = pushDebugInfo(newChild._debugInfo), returnFiber = createChild(
                returnFiber,
                unwrapThenable(newChild),
                lanes
              ), currentDebugInfo = _prevDebugInfo, returnFiber;
            if (newChild.$$typeof === REACT_CONTEXT_TYPE)
              return createChild(
                returnFiber,
                readContextDuringReconciliation(returnFiber, newChild, lanes),
                lanes
              );
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          "function" === typeof newChild && warnOnFunctionType(returnFiber, newChild);
          "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
          return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
          var key = null !== oldFiber ? oldFiber.key : null;
          if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
            return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
          if ("object" === typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return newChild.key === key ? (key = pushDebugInfo(newChild._debugInfo), returnFiber = updateElement(
                  returnFiber,
                  oldFiber,
                  newChild,
                  lanes
                ), currentDebugInfo = key, returnFiber) : null;
              case REACT_PORTAL_TYPE:
                return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
              case REACT_LAZY_TYPE:
                return key = pushDebugInfo(newChild._debugInfo), newChild = callLazyInitInDEV(newChild), returnFiber = updateSlot(
                  returnFiber,
                  oldFiber,
                  newChild,
                  lanes
                ), currentDebugInfo = key, returnFiber;
            }
            if (isArrayImpl(newChild) || getIteratorFn(newChild) || "function" === typeof newChild[ASYNC_ITERATOR]) {
              if (null !== key)
                return null;
              key = pushDebugInfo(newChild._debugInfo);
              returnFiber = updateFragment(
                returnFiber,
                oldFiber,
                newChild,
                lanes,
                null
              );
              currentDebugInfo = key;
              return returnFiber;
            }
            if ("function" === typeof newChild.then)
              return key = pushDebugInfo(newChild._debugInfo), returnFiber = updateSlot(
                returnFiber,
                oldFiber,
                unwrapThenable(newChild),
                lanes
              ), currentDebugInfo = key, returnFiber;
            if (newChild.$$typeof === REACT_CONTEXT_TYPE)
              return updateSlot(
                returnFiber,
                oldFiber,
                readContextDuringReconciliation(returnFiber, newChild, lanes),
                lanes
              );
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          "function" === typeof newChild && warnOnFunctionType(returnFiber, newChild);
          "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
          return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
          if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
            return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, lanes);
          if ("object" === typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return newIdx = existingChildren.get(
                  null === newChild.key ? newIdx : newChild.key
                ) || null, existingChildren = pushDebugInfo(newChild._debugInfo), returnFiber = updateElement(
                  returnFiber,
                  newIdx,
                  newChild,
                  lanes
                ), currentDebugInfo = existingChildren, returnFiber;
              case REACT_PORTAL_TYPE:
                return existingChildren = existingChildren.get(
                  null === newChild.key ? newIdx : newChild.key
                ) || null, updatePortal(returnFiber, existingChildren, newChild, lanes);
              case REACT_LAZY_TYPE:
                var _prevDebugInfo7 = pushDebugInfo(newChild._debugInfo);
                newChild = callLazyInitInDEV(newChild);
                returnFiber = updateFromMap(
                  existingChildren,
                  returnFiber,
                  newIdx,
                  newChild,
                  lanes
                );
                currentDebugInfo = _prevDebugInfo7;
                return returnFiber;
            }
            if (isArrayImpl(newChild) || getIteratorFn(newChild) || "function" === typeof newChild[ASYNC_ITERATOR])
              return newIdx = existingChildren.get(newIdx) || null, existingChildren = pushDebugInfo(newChild._debugInfo), returnFiber = updateFragment(
                returnFiber,
                newIdx,
                newChild,
                lanes,
                null
              ), currentDebugInfo = existingChildren, returnFiber;
            if ("function" === typeof newChild.then)
              return _prevDebugInfo7 = pushDebugInfo(newChild._debugInfo), returnFiber = updateFromMap(
                existingChildren,
                returnFiber,
                newIdx,
                unwrapThenable(newChild),
                lanes
              ), currentDebugInfo = _prevDebugInfo7, returnFiber;
            if (newChild.$$typeof === REACT_CONTEXT_TYPE)
              return updateFromMap(
                existingChildren,
                returnFiber,
                newIdx,
                readContextDuringReconciliation(returnFiber, newChild, lanes),
                lanes
              );
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          "function" === typeof newChild && warnOnFunctionType(returnFiber, newChild);
          "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
          return null;
        }
        function warnOnInvalidKey(returnFiber, workInProgress2, child, knownKeys) {
          if ("object" !== typeof child || null === child)
            return knownKeys;
          switch (child.$$typeof) {
            case REACT_ELEMENT_TYPE:
            case REACT_PORTAL_TYPE:
              warnForMissingKey(returnFiber, workInProgress2, child);
              var key = child.key;
              if ("string" !== typeof key)
                break;
              if (null === knownKeys) {
                knownKeys = /* @__PURE__ */ new Set();
                knownKeys.add(key);
                break;
              }
              if (!knownKeys.has(key)) {
                knownKeys.add(key);
                break;
              }
              runWithFiberInDEV(workInProgress2, function() {
                error$jscomp$0(
                  "Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.",
                  key
                );
              });
              break;
            case REACT_LAZY_TYPE:
              child = callLazyInitInDEV(child), warnOnInvalidKey(returnFiber, workInProgress2, child, knownKeys);
          }
          return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
          for (var knownKeys = null, resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(
              returnFiber,
              oldFiber,
              newChildren[newIdx],
              lanes
            );
            if (null === newFiber) {
              null === oldFiber && (oldFiber = nextOldFiber);
              break;
            }
            knownKeys = warnOnInvalidKey(
              returnFiber,
              newFiber,
              newChildren[newIdx],
              knownKeys
            );
            shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
            currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
            null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (newIdx === newChildren.length)
            return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), resultingFirstChild;
          if (null === oldFiber) {
            for (; newIdx < newChildren.length; newIdx++)
              oldFiber = createChild(returnFiber, newChildren[newIdx], lanes), null !== oldFiber && (knownKeys = warnOnInvalidKey(
                returnFiber,
                oldFiber,
                newChildren[newIdx],
                knownKeys
              ), currentFirstChild = placeChild(
                oldFiber,
                currentFirstChild,
                newIdx
              ), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
            isHydrating && pushTreeFork(returnFiber, newIdx);
            return resultingFirstChild;
          }
          for (oldFiber = mapRemainingChildren(oldFiber); newIdx < newChildren.length; newIdx++)
            nextOldFiber = updateFromMap(
              oldFiber,
              returnFiber,
              newIdx,
              newChildren[newIdx],
              lanes
            ), null !== nextOldFiber && (knownKeys = warnOnInvalidKey(
              returnFiber,
              nextOldFiber,
              newChildren[newIdx],
              knownKeys
            ), shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(
              null === nextOldFiber.key ? newIdx : nextOldFiber.key
            ), currentFirstChild = placeChild(
              nextOldFiber,
              currentFirstChild,
              newIdx
            ), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
          shouldTrackSideEffects && oldFiber.forEach(function(child) {
            return deleteChild(returnFiber, child);
          });
          isHydrating && pushTreeFork(returnFiber, newIdx);
          return resultingFirstChild;
        }
        function reconcileChildrenAsyncIteratable(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
          var newChildren = newChildrenIterable[ASYNC_ITERATOR]();
          newChildren !== newChildrenIterable || 0 === returnFiber.tag && "[object AsyncGeneratorFunction]" === Object.prototype.toString.call(returnFiber.type) && "[object AsyncGenerator]" === Object.prototype.toString.call(newChildren) || (didWarnAboutGenerators || error$jscomp$0(
            "Using AsyncIterators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You can use an AsyncIterable that can iterate multiple times over the same items."
          ), didWarnAboutGenerators = true);
          if (null == newChildren)
            throw Error("An iterable object provided no iterator.");
          return reconcileChildrenIterator(
            returnFiber,
            currentFirstChild,
            {
              next: function() {
                return unwrapThenable(newChildren.next());
              }
            },
            lanes
          );
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildren, lanes) {
          if (null == newChildren)
            throw Error("An iterable object provided no iterator.");
          for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, knownKeys = null, step = newChildren.next(); null !== oldFiber && !step.done; newIdx++, step = newChildren.next()) {
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
            if (null === newFiber) {
              null === oldFiber && (oldFiber = nextOldFiber);
              break;
            }
            knownKeys = warnOnInvalidKey(
              returnFiber,
              newFiber,
              step.value,
              knownKeys
            );
            shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
            currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
            null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (step.done)
            return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), resultingFirstChild;
          if (null === oldFiber) {
            for (; !step.done; newIdx++, step = newChildren.next())
              oldFiber = createChild(returnFiber, step.value, lanes), null !== oldFiber && (knownKeys = warnOnInvalidKey(
                returnFiber,
                oldFiber,
                step.value,
                knownKeys
              ), currentFirstChild = placeChild(
                oldFiber,
                currentFirstChild,
                newIdx
              ), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
            isHydrating && pushTreeFork(returnFiber, newIdx);
            return resultingFirstChild;
          }
          for (oldFiber = mapRemainingChildren(oldFiber); !step.done; newIdx++, step = newChildren.next())
            nextOldFiber = updateFromMap(
              oldFiber,
              returnFiber,
              newIdx,
              step.value,
              lanes
            ), null !== nextOldFiber && (knownKeys = warnOnInvalidKey(
              returnFiber,
              nextOldFiber,
              step.value,
              knownKeys
            ), shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(
              null === nextOldFiber.key ? newIdx : nextOldFiber.key
            ), currentFirstChild = placeChild(
              nextOldFiber,
              currentFirstChild,
              newIdx
            ), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
          shouldTrackSideEffects && oldFiber.forEach(function(child) {
            return deleteChild(returnFiber, child);
          });
          isHydrating && pushTreeFork(returnFiber, newIdx);
          return resultingFirstChild;
        }
        function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes) {
          "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (validateFragmentProps(newChild, null, returnFiber), newChild = newChild.props.children);
          if ("object" === typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                var prevDebugInfo = pushDebugInfo(newChild._debugInfo);
                a: {
                  for (var key = newChild.key, child = currentFirstChild; null !== child; ) {
                    if (child.key === key) {
                      key = newChild.type;
                      if (key === REACT_FRAGMENT_TYPE) {
                        if (7 === child.tag) {
                          deleteRemainingChildren(returnFiber, child.sibling);
                          currentFirstChild = useFiber(
                            child,
                            newChild.props.children
                          );
                          currentFirstChild.return = returnFiber;
                          currentFirstChild._debugOwner = newChild._owner;
                          currentFirstChild._debugInfo = currentDebugInfo;
                          validateFragmentProps(
                            newChild,
                            currentFirstChild,
                            returnFiber
                          );
                          returnFiber = currentFirstChild;
                          break a;
                        }
                      } else if (child.elementType === key || isCompatibleFamilyForHotReloading(child, newChild) || "object" === typeof key && null !== key && key.$$typeof === REACT_LAZY_TYPE && callLazyInitInDEV(key) === child.type) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        currentFirstChild = useFiber(child, newChild.props);
                        coerceRef(
                          returnFiber,
                          child,
                          currentFirstChild,
                          newChild
                        );
                        currentFirstChild.return = returnFiber;
                        currentFirstChild._debugOwner = newChild._owner;
                        currentFirstChild._debugInfo = currentDebugInfo;
                        returnFiber = currentFirstChild;
                        break a;
                      }
                      deleteRemainingChildren(returnFiber, child);
                      break;
                    } else
                      deleteChild(returnFiber, child);
                    child = child.sibling;
                  }
                  newChild.type === REACT_FRAGMENT_TYPE ? (currentFirstChild = createFiberFromFragment(
                    newChild.props.children,
                    returnFiber.mode,
                    lanes,
                    newChild.key
                  ), currentFirstChild.return = returnFiber, currentFirstChild._debugInfo = currentDebugInfo, validateFragmentProps(
                    newChild,
                    currentFirstChild,
                    returnFiber
                  ), returnFiber = currentFirstChild) : (lanes = createFiberFromElement(
                    newChild,
                    returnFiber.mode,
                    lanes
                  ), coerceRef(returnFiber, currentFirstChild, lanes, newChild), lanes.return = returnFiber, lanes._debugInfo = currentDebugInfo, returnFiber = lanes);
                }
                returnFiber = placeSingleChild(returnFiber);
                currentDebugInfo = prevDebugInfo;
                return returnFiber;
              case REACT_PORTAL_TYPE:
                a: {
                  prevDebugInfo = newChild;
                  for (newChild = prevDebugInfo.key; null !== currentFirstChild; ) {
                    if (currentFirstChild.key === newChild)
                      if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === prevDebugInfo.containerInfo && currentFirstChild.stateNode.implementation === prevDebugInfo.implementation) {
                        deleteRemainingChildren(
                          returnFiber,
                          currentFirstChild.sibling
                        );
                        currentFirstChild = useFiber(
                          currentFirstChild,
                          prevDebugInfo.children || []
                        );
                        currentFirstChild.return = returnFiber;
                        returnFiber = currentFirstChild;
                        break a;
                      } else {
                        deleteRemainingChildren(returnFiber, currentFirstChild);
                        break;
                      }
                    else
                      deleteChild(returnFiber, currentFirstChild);
                    currentFirstChild = currentFirstChild.sibling;
                  }
                  currentFirstChild = createFiberFromPortal(
                    prevDebugInfo,
                    returnFiber.mode,
                    lanes
                  );
                  currentFirstChild.return = returnFiber;
                  returnFiber = currentFirstChild;
                }
                return placeSingleChild(returnFiber);
              case REACT_LAZY_TYPE:
                return prevDebugInfo = pushDebugInfo(newChild._debugInfo), newChild = callLazyInitInDEV(newChild), returnFiber = reconcileChildFibersImpl(
                  returnFiber,
                  currentFirstChild,
                  newChild,
                  lanes
                ), currentDebugInfo = prevDebugInfo, returnFiber;
            }
            if (isArrayImpl(newChild))
              return prevDebugInfo = pushDebugInfo(newChild._debugInfo), returnFiber = reconcileChildrenArray(
                returnFiber,
                currentFirstChild,
                newChild,
                lanes
              ), currentDebugInfo = prevDebugInfo, returnFiber;
            if (getIteratorFn(newChild)) {
              prevDebugInfo = pushDebugInfo(newChild._debugInfo);
              child = getIteratorFn(newChild);
              if ("function" !== typeof child)
                throw Error(
                  "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue."
                );
              key = child.call(newChild);
              if (key === newChild) {
                if (0 !== returnFiber.tag || "[object GeneratorFunction]" !== Object.prototype.toString.call(returnFiber.type) || "[object Generator]" !== Object.prototype.toString.call(key))
                  didWarnAboutGenerators || error$jscomp$0(
                    "Using Iterators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. You can also use an Iterable that can iterate multiple times over the same items."
                  ), didWarnAboutGenerators = true;
              } else
                newChild.entries !== child || didWarnAboutMaps || (error$jscomp$0(
                  "Using Maps as children is not supported. Use an array of keyed ReactElements instead."
                ), didWarnAboutMaps = true);
              returnFiber = reconcileChildrenIterator(
                returnFiber,
                currentFirstChild,
                key,
                lanes
              );
              currentDebugInfo = prevDebugInfo;
              return returnFiber;
            }
            if ("function" === typeof newChild[ASYNC_ITERATOR])
              return prevDebugInfo = pushDebugInfo(newChild._debugInfo), returnFiber = reconcileChildrenAsyncIteratable(
                returnFiber,
                currentFirstChild,
                newChild,
                lanes
              ), currentDebugInfo = prevDebugInfo, returnFiber;
            if ("function" === typeof newChild.then)
              return prevDebugInfo = pushDebugInfo(newChild._debugInfo), returnFiber = reconcileChildFibersImpl(
                returnFiber,
                currentFirstChild,
                unwrapThenable(newChild),
                lanes
              ), currentDebugInfo = prevDebugInfo, returnFiber;
            if (newChild.$$typeof === REACT_CONTEXT_TYPE)
              return reconcileChildFibersImpl(
                returnFiber,
                currentFirstChild,
                readContextDuringReconciliation(returnFiber, newChild, lanes),
                lanes
              );
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
            return prevDebugInfo = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(
              returnFiber,
              currentFirstChild.sibling
            ), currentFirstChild = useFiber(
              currentFirstChild,
              prevDebugInfo
            ), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (deleteRemainingChildren(returnFiber, currentFirstChild), currentFirstChild = createFiberFromText(
              prevDebugInfo,
              returnFiber.mode,
              lanes
            ), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild), placeSingleChild(returnFiber);
          "function" === typeof newChild && warnOnFunctionType(returnFiber, newChild);
          "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
          return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return function(returnFiber, currentFirstChild, newChild, lanes) {
          var prevDebugInfo = currentDebugInfo;
          currentDebugInfo = null;
          try {
            thenableIndexCounter$1 = 0;
            var firstChildFiber = reconcileChildFibersImpl(
              returnFiber,
              currentFirstChild,
              newChild,
              lanes
            );
            thenableState$1 = null;
            return firstChildFiber;
          } catch (x) {
            if (x === SuspenseException)
              throw x;
            var fiber = createFiber(29, x, null, returnFiber.mode);
            fiber.lanes = lanes;
            fiber.return = returnFiber;
            var debugInfo = fiber._debugInfo = currentDebugInfo;
            fiber._debugOwner = returnFiber._debugOwner;
            fiber._debugTask = returnFiber._debugTask;
            if (null != debugInfo) {
              for (var i = debugInfo.length - 1; 0 <= i; i--)
                if ("string" === typeof debugInfo[i].stack) {
                  fiber._debugOwner = debugInfo[i];
                  fiber._debugTask = debugInfo[i].task;
                  break;
                }
            }
            return fiber;
          } finally {
            currentDebugInfo = prevDebugInfo;
          }
        };
      }
      function pushHiddenContext(fiber, context) {
        var prevEntangledRenderLanes = entangledRenderLanes;
        push(prevEntangledRenderLanesCursor, prevEntangledRenderLanes, fiber);
        push(currentTreeHiddenStackCursor, context, fiber);
        entangledRenderLanes = prevEntangledRenderLanes | context.baseLanes;
      }
      function reuseHiddenContextOnStack(fiber) {
        push(prevEntangledRenderLanesCursor, entangledRenderLanes, fiber);
        push(
          currentTreeHiddenStackCursor,
          currentTreeHiddenStackCursor.current,
          fiber
        );
      }
      function popHiddenContext(fiber) {
        entangledRenderLanes = prevEntangledRenderLanesCursor.current;
        pop(currentTreeHiddenStackCursor, fiber);
        pop(prevEntangledRenderLanesCursor, fiber);
      }
      function pushPrimaryTreeSuspenseHandler(handler) {
        var current2 = handler.alternate;
        push(
          suspenseStackCursor,
          suspenseStackCursor.current & SubtreeSuspenseContextMask,
          handler
        );
        push(suspenseHandlerStackCursor, handler, handler);
        null === shellBoundary && (null === current2 || null !== currentTreeHiddenStackCursor.current ? shellBoundary = handler : null !== current2.memoizedState && (shellBoundary = handler));
      }
      function pushOffscreenSuspenseHandler(fiber) {
        if (22 === fiber.tag) {
          if (push(suspenseStackCursor, suspenseStackCursor.current, fiber), push(suspenseHandlerStackCursor, fiber, fiber), null === shellBoundary) {
            var current2 = fiber.alternate;
            null !== current2 && null !== current2.memoizedState && (shellBoundary = fiber);
          }
        } else
          reuseSuspenseHandlerOnStack(fiber);
      }
      function reuseSuspenseHandlerOnStack(fiber) {
        push(suspenseStackCursor, suspenseStackCursor.current, fiber);
        push(
          suspenseHandlerStackCursor,
          suspenseHandlerStackCursor.current,
          fiber
        );
      }
      function popSuspenseHandler(fiber) {
        pop(suspenseHandlerStackCursor, fiber);
        shellBoundary === fiber && (shellBoundary = null);
        pop(suspenseStackCursor, fiber);
      }
      function findFirstSuspended(row) {
        for (var node = row; null !== node; ) {
          if (13 === node.tag) {
            var state = node.memoizedState;
            if (null !== state && (state = state.dehydrated, null === state || state.data === SUSPENSE_PENDING_START_DATA || state.data === SUSPENSE_FALLBACK_START_DATA))
              return node;
          } else if (19 === node.tag && void 0 !== node.memoizedProps.revealOrder) {
            if (0 !== (node.flags & 128))
              return node;
          } else if (null !== node.child) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === row)
            break;
          for (; null === node.sibling; ) {
            if (null === node.return || node.return === row)
              return null;
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return null;
      }
      function createCache() {
        return {
          controller: new AbortControllerLocal(),
          data: /* @__PURE__ */ new Map(),
          refCount: 0
        };
      }
      function retainCache(cache) {
        cache.controller.signal.aborted && warn(
          "A cache instance was retained after it was already freed. This likely indicates a bug in React."
        );
        cache.refCount++;
      }
      function releaseCache(cache) {
        cache.refCount--;
        0 > cache.refCount && warn(
          "A cache instance was released after it was already freed. This likely indicates a bug in React."
        );
        0 === cache.refCount && scheduleCallback$2(NormalPriority, function() {
          cache.controller.abort();
        });
      }
      function entangleAsyncAction(transition, thenable) {
        if (null === currentEntangledListeners) {
          var entangledListeners = currentEntangledListeners = [];
          currentEntangledPendingCount = 0;
          currentEntangledLane = requestTransitionLane();
          currentEntangledActionThenable = {
            status: "pending",
            value: void 0,
            then: function(resolve) {
              entangledListeners.push(resolve);
            }
          };
        }
        currentEntangledPendingCount++;
        thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
        return thenable;
      }
      function pingEngtangledActionScope() {
        if (null !== currentEntangledListeners && 0 === --currentEntangledPendingCount) {
          null !== currentEntangledActionThenable && (currentEntangledActionThenable.status = "fulfilled");
          var listeners = currentEntangledListeners;
          currentEntangledListeners = null;
          currentEntangledLane = 0;
          currentEntangledActionThenable = null;
          for (var i = 0; i < listeners.length; i++)
            (0, listeners[i])();
        }
      }
      function chainThenableValue(thenable, result) {
        var listeners = [], thenableWithOverride = {
          status: "pending",
          value: null,
          reason: null,
          then: function(resolve) {
            listeners.push(resolve);
          }
        };
        thenable.then(
          function() {
            thenableWithOverride.status = "fulfilled";
            thenableWithOverride.value = result;
            for (var i = 0; i < listeners.length; i++)
              (0, listeners[i])(result);
          },
          function(error) {
            thenableWithOverride.status = "rejected";
            thenableWithOverride.reason = error;
            for (error = 0; error < listeners.length; error++)
              (0, listeners[error])(void 0);
          }
        );
        return thenableWithOverride;
      }
      function peekCacheFromPool() {
        var cacheResumedFromPreviousRender = resumedCache.current;
        return null !== cacheResumedFromPreviousRender ? cacheResumedFromPreviousRender : workInProgressRoot.pooledCache;
      }
      function pushTransition(offscreenWorkInProgress, prevCachePool) {
        null === prevCachePool ? push(resumedCache, resumedCache.current, offscreenWorkInProgress) : push(resumedCache, prevCachePool.pool, offscreenWorkInProgress);
      }
      function getSuspendedCache() {
        var cacheFromPool = peekCacheFromPool();
        return null === cacheFromPool ? null : { parent: CacheContext._currentValue, pool: cacheFromPool };
      }
      function mountHookTypesDev() {
        var hookName = currentHookNameInDev;
        null === hookTypesDev ? hookTypesDev = [hookName] : hookTypesDev.push(hookName);
      }
      function updateHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (null !== hookTypesDev && (hookTypesUpdateIndexDev++, hookTypesDev[hookTypesUpdateIndexDev] !== hookName)) {
          var componentName2 = getComponentNameFromFiber(
            currentlyRenderingFiber$1
          );
          if (!didWarnAboutMismatchedHooksForComponent.has(componentName2) && (didWarnAboutMismatchedHooksForComponent.add(componentName2), null !== hookTypesDev)) {
            for (var table = "", i = 0; i <= hookTypesUpdateIndexDev; i++) {
              var oldHookName = hookTypesDev[i], newHookName = i === hookTypesUpdateIndexDev ? hookName : oldHookName;
              for (oldHookName = i + 1 + ". " + oldHookName; 30 > oldHookName.length; )
                oldHookName += " ";
              oldHookName += newHookName + "\n";
              table += oldHookName;
            }
            error$jscomp$0(
              "React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://react.dev/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
              componentName2,
              table
            );
          }
        }
      }
      function checkDepsAreArrayDev(deps) {
        void 0 === deps || null === deps || isArrayImpl(deps) || error$jscomp$0(
          "%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.",
          currentHookNameInDev,
          typeof deps
        );
      }
      function warnOnUseFormStateInDev() {
        var componentName2 = getComponentNameFromFiber(currentlyRenderingFiber$1);
        didWarnAboutUseFormState.has(componentName2) || (didWarnAboutUseFormState.add(componentName2), error$jscomp$0(
          "ReactDOM.useFormState has been renamed to React.useActionState. Please update %s to use React.useActionState.",
          componentName2
        ));
      }
      function throwInvalidHookError() {
        throw Error(
          "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
        );
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        if (ignorePreviousDependencies)
          return false;
        if (null === prevDeps)
          return error$jscomp$0(
            "%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.",
            currentHookNameInDev
          ), false;
        nextDeps.length !== prevDeps.length && error$jscomp$0(
          "The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s",
          currentHookNameInDev,
          "[" + prevDeps.join(", ") + "]",
          "[" + nextDeps.join(", ") + "]"
        );
        for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)
          if (!objectIs(nextDeps[i], prevDeps[i]))
            return false;
        return true;
      }
      function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress2;
        hookTypesDev = null !== current2 ? current2._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1;
        ignorePreviousDependencies = null !== current2 && current2.type !== workInProgress2.type;
        if ("[object AsyncFunction]" === Object.prototype.toString.call(Component) || "[object AsyncGeneratorFunction]" === Object.prototype.toString.call(Component))
          nextRenderLanes = getComponentNameFromFiber(
            currentlyRenderingFiber$1
          ), didWarnAboutAsyncClientComponent.has(nextRenderLanes) || (didWarnAboutAsyncClientComponent.add(nextRenderLanes), error$jscomp$0(
            "async/await is not yet supported in Client Components, only Server Components. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."
          ));
        workInProgress2.memoizedState = null;
        workInProgress2.updateQueue = null;
        workInProgress2.lanes = 0;
        ReactSharedInternals.H = null !== current2 && null !== current2.memoizedState ? HooksDispatcherOnUpdateInDEV : null !== hookTypesDev ? HooksDispatcherOnMountWithHookTypesInDEV : HooksDispatcherOnMountInDEV;
        shouldDoubleInvokeUserFnsInHooksDEV = nextRenderLanes = 0 !== (workInProgress2.mode & 8);
        var children = callComponentInDEV(Component, props, secondArg);
        shouldDoubleInvokeUserFnsInHooksDEV = false;
        didScheduleRenderPhaseUpdateDuringThisPass && (children = renderWithHooksAgain(
          workInProgress2,
          Component,
          props,
          secondArg
        ));
        if (nextRenderLanes) {
          setIsStrictModeForDevtools(true);
          try {
            children = renderWithHooksAgain(
              workInProgress2,
              Component,
              props,
              secondArg
            );
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        finishRenderingHooks(current2, workInProgress2);
        return children;
      }
      function finishRenderingHooks(current2, workInProgress2) {
        workInProgress2._debugHookTypes = hookTypesDev;
        ReactSharedInternals.H = ContextOnlyDispatcher;
        var didRenderTooFewHooks = null !== currentHook && null !== currentHook.next;
        renderLanes = 0;
        hookTypesDev = currentHookNameInDev = workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
        hookTypesUpdateIndexDev = -1;
        null !== current2 && (current2.flags & 31457280) !== (workInProgress2.flags & 31457280) && error$jscomp$0(
          "Internal React error: Expected static flag was missing. Please notify the React team."
        );
        didScheduleRenderPhaseUpdate = false;
        thenableIndexCounter = 0;
        thenableState = null;
        if (didRenderTooFewHooks)
          throw Error(
            "Rendered fewer hooks than expected. This may be caused by an accidental early return statement."
          );
        needsToResetSuspendedThenableDEV ? (needsToResetSuspendedThenableDEV = false, current2 = true) : current2 = false;
        current2 && (workInProgress2 = getComponentNameFromFiber(workInProgress2) || "Unknown", didWarnAboutUseWrappedInTryCatch.has(workInProgress2) || didWarnAboutAsyncClientComponent.has(workInProgress2) || (didWarnAboutUseWrappedInTryCatch.add(workInProgress2), error$jscomp$0(
          "`use` was called from inside a try/catch block. This is not allowed and can lead to unexpected behavior. To handle errors triggered by `use`, wrap your component in a error boundary."
        )));
      }
      function renderWithHooksAgain(workInProgress2, Component, props, secondArg) {
        currentlyRenderingFiber$1 = workInProgress2;
        var numberOfReRenders = 0;
        do {
          didScheduleRenderPhaseUpdateDuringThisPass && (thenableState = null);
          thenableIndexCounter = 0;
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          if (numberOfReRenders >= RE_RENDER_LIMIT)
            throw Error(
              "Too many re-renders. React limits the number of renders to prevent an infinite loop."
            );
          numberOfReRenders += 1;
          ignorePreviousDependencies = false;
          workInProgressHook = currentHook = null;
          workInProgress2.updateQueue = null;
          hookTypesUpdateIndexDev = -1;
          ReactSharedInternals.H = HooksDispatcherOnRerenderInDEV;
          var children = callComponentInDEV(Component, props, secondArg);
        } while (didScheduleRenderPhaseUpdateDuringThisPass);
        return children;
      }
      function TransitionAwareHostComponent() {
        var dispatcher = ReactSharedInternals.H, maybeThenable = dispatcher.useState()[0];
        maybeThenable = "function" === typeof maybeThenable.then ? useThenable(maybeThenable) : maybeThenable;
        dispatcher = dispatcher.useState()[0];
        (null !== currentHook ? currentHook.memoizedState : null) !== dispatcher && (currentlyRenderingFiber$1.flags |= 1024);
        return maybeThenable;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = 0 !== localIdCounter;
        localIdCounter = 0;
        return didRenderIdHook;
      }
      function bailoutHooks(current2, workInProgress2, lanes) {
        workInProgress2.updateQueue = current2.updateQueue;
        workInProgress2.flags = 0 !== (workInProgress2.mode & 16) ? workInProgress2.flags & -201328645 : workInProgress2.flags & -2053;
        current2.lanes &= ~lanes;
      }
      function resetHooksOnUnwind(workInProgress2) {
        if (didScheduleRenderPhaseUpdate) {
          for (workInProgress2 = workInProgress2.memoizedState; null !== workInProgress2; ) {
            var queue = workInProgress2.queue;
            null !== queue && (queue.pending = null);
            workInProgress2 = workInProgress2.next;
          }
          didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = 0;
        hookTypesDev = workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        thenableIndexCounter = localIdCounter = 0;
        thenableState = null;
      }
      function mountWorkInProgressHook() {
        var hook = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };
        null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
        return workInProgressHook;
      }
      function updateWorkInProgressHook() {
        if (null === currentHook) {
          var nextCurrentHook = currentlyRenderingFiber$1.alternate;
          nextCurrentHook = null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
        } else
          nextCurrentHook = currentHook.next;
        var nextWorkInProgressHook = null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState : workInProgressHook.next;
        if (null !== nextWorkInProgressHook)
          workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;
        else {
          if (null === nextCurrentHook) {
            if (null === currentlyRenderingFiber$1.alternate)
              throw Error(
                "Update hook called on initial render. This is likely a bug in React. Please file an issue."
              );
            throw Error("Rendered more hooks than during the previous render.");
          }
          currentHook = nextCurrentHook;
          nextCurrentHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
          };
          null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
        }
        return workInProgressHook;
      }
      function useThenable(thenable) {
        var index = thenableIndexCounter;
        thenableIndexCounter += 1;
        null === thenableState && (thenableState = createThenableState());
        thenable = trackUsedThenable(thenableState, thenable, index);
        index = currentlyRenderingFiber$1;
        null === (null === workInProgressHook ? index.memoizedState : workInProgressHook.next) && (index = index.alternate, ReactSharedInternals.H = null !== index && null !== index.memoizedState ? HooksDispatcherOnUpdateInDEV : HooksDispatcherOnMountInDEV);
        return thenable;
      }
      function use(usable) {
        if (null !== usable && "object" === typeof usable) {
          if ("function" === typeof usable.then)
            return useThenable(usable);
          if (usable.$$typeof === REACT_CONTEXT_TYPE)
            return readContext(usable);
        }
        throw Error("An unsupported type was passed to use(): " + String(usable));
      }
      function useMemoCache(size) {
        var memoCache = null, updateQueue = currentlyRenderingFiber$1.updateQueue;
        null !== updateQueue && (memoCache = updateQueue.memoCache);
        if (null == memoCache) {
          var current2 = currentlyRenderingFiber$1.alternate;
          null !== current2 && (current2 = current2.updateQueue, null !== current2 && (current2 = current2.memoCache, null != current2 && (memoCache = {
            data: current2.data.map(function(array) {
              return array.slice();
            }),
            index: 0
          })));
        }
        null == memoCache && (memoCache = { data: [], index: 0 });
        null === updateQueue && (updateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = updateQueue);
        updateQueue.memoCache = memoCache;
        updateQueue = memoCache.data[memoCache.index];
        if (void 0 === updateQueue)
          for (updateQueue = memoCache.data[memoCache.index] = Array(size), current2 = 0; current2 < size; current2++)
            updateQueue[current2] = REACT_MEMO_CACHE_SENTINEL;
        else
          updateQueue.length !== size && error$jscomp$0(
            "Expected a constant size argument for each invocation of useMemoCache. The previous cache was allocated with size %s but size %s was requested.",
            updateQueue.length,
            size
          );
        memoCache.index++;
        return updateQueue;
      }
      function basicStateReducer(state, action) {
        return "function" === typeof action ? action(state) : action;
      }
      function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        if (void 0 !== init) {
          var initialState = init(initialArg);
          shouldDoubleInvokeUserFnsInHooksDEV && (setIsStrictModeForDevtools(true), init(initialArg), setIsStrictModeForDevtools(false));
        } else
          initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        reducer = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialState
        };
        hook.queue = reducer;
        reducer = reducer.dispatch = dispatchReducerAction.bind(
          null,
          currentlyRenderingFiber$1,
          reducer
        );
        return [hook.memoizedState, reducer];
      }
      function updateReducer(reducer) {
        var hook = updateWorkInProgressHook();
        return updateReducerImpl(hook, currentHook, reducer);
      }
      function updateReducerImpl(hook, current2, reducer) {
        var queue = hook.queue;
        if (null === queue)
          throw Error(
            "Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)"
          );
        queue.lastRenderedReducer = reducer;
        var baseQueue = hook.baseQueue, pendingQueue = queue.pending;
        if (null !== pendingQueue) {
          if (null !== baseQueue) {
            var baseFirst = baseQueue.next;
            baseQueue.next = pendingQueue.next;
            pendingQueue.next = baseFirst;
          }
          current2.baseQueue !== baseQueue && error$jscomp$0(
            "Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."
          );
          current2.baseQueue = baseQueue = pendingQueue;
          queue.pending = null;
        }
        pendingQueue = hook.baseState;
        if (null === baseQueue)
          hook.memoizedState = pendingQueue;
        else {
          current2 = baseQueue.next;
          var newBaseQueueFirst = baseFirst = null, newBaseQueueLast = null, update = current2, didReadFromEntangledAsyncAction2 = false;
          do {
            var updateLane = update.lane & ~OffscreenLane;
            if (updateLane !== update.lane ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
              var revertLane = update.revertLane;
              if (0 === revertLane)
                null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {
                  lane: 0,
                  revertLane: 0,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                }), updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction2 = true);
              else if ((renderLanes & revertLane) === revertLane) {
                update = update.next;
                revertLane === currentEntangledLane && (didReadFromEntangledAsyncAction2 = true);
                continue;
              } else
                updateLane = {
                  lane: 0,
                  revertLane: update.revertLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = updateLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = updateLane, currentlyRenderingFiber$1.lanes |= revertLane, workInProgressRootSkippedLanes |= revertLane;
              updateLane = update.action;
              shouldDoubleInvokeUserFnsInHooksDEV && reducer(pendingQueue, updateLane);
              pendingQueue = update.hasEagerState ? update.eagerState : reducer(pendingQueue, updateLane);
            } else
              revertLane = {
                lane: updateLane,
                revertLane: update.revertLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = revertLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = revertLane, currentlyRenderingFiber$1.lanes |= updateLane, workInProgressRootSkippedLanes |= updateLane;
            update = update.next;
          } while (null !== update && update !== current2);
          null === newBaseQueueLast ? baseFirst = pendingQueue : newBaseQueueLast.next = newBaseQueueFirst;
          if (!objectIs(pendingQueue, hook.memoizedState) && (didReceiveUpdate = true, didReadFromEntangledAsyncAction2 && (reducer = currentEntangledActionThenable, null !== reducer)))
            throw reducer;
          hook.memoizedState = pendingQueue;
          hook.baseState = baseFirst;
          hook.baseQueue = newBaseQueueLast;
          queue.lastRenderedState = pendingQueue;
        }
        null === baseQueue && (queue.lanes = 0);
        return [hook.memoizedState, queue.dispatch];
      }
      function rerenderReducer(reducer) {
        var hook = updateWorkInProgressHook(), queue = hook.queue;
        if (null === queue)
          throw Error(
            "Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)"
          );
        queue.lastRenderedReducer = reducer;
        var dispatch = queue.dispatch, lastRenderPhaseUpdate = queue.pending, newState = hook.memoizedState;
        if (null !== lastRenderPhaseUpdate) {
          queue.pending = null;
          var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
          do
            newState = reducer(newState, update.action), update = update.next;
          while (update !== lastRenderPhaseUpdate);
          objectIs(newState, hook.memoizedState) || (didReceiveUpdate = true);
          hook.memoizedState = newState;
          null === hook.baseQueue && (hook.baseState = newState);
          queue.lastRenderedState = newState;
        }
        return [newState, dispatch];
      }
      function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1, hook = mountWorkInProgressHook();
        if (isHydrating) {
          if (void 0 === getServerSnapshot)
            throw Error(
              "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
            );
          var nextSnapshot = getServerSnapshot();
          didWarnUncachedGetSnapshot || nextSnapshot === getServerSnapshot() || (error$jscomp$0(
            "The result of getServerSnapshot should be cached to avoid an infinite loop"
          ), didWarnUncachedGetSnapshot = true);
        } else {
          nextSnapshot = getSnapshot();
          didWarnUncachedGetSnapshot || (getServerSnapshot = getSnapshot(), objectIs(nextSnapshot, getServerSnapshot) || (error$jscomp$0(
            "The result of getSnapshot should be cached to avoid an infinite loop"
          ), didWarnUncachedGetSnapshot = true));
          if (null === workInProgressRoot)
            throw Error(
              "Expected a work-in-progress root. This is a bug in React. Please file an issue."
            );
          0 !== (workInProgressRootRenderLanes & (InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane)) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
        hook.memoizedState = nextSnapshot;
        getServerSnapshot = { value: nextSnapshot, getSnapshot };
        hook.queue = getServerSnapshot;
        mountEffect(
          subscribeToStore.bind(null, fiber, getServerSnapshot, subscribe),
          [subscribe]
        );
        fiber.flags |= 2048;
        pushEffect(
          HasEffect | Passive,
          updateStoreInstance.bind(
            null,
            fiber,
            getServerSnapshot,
            nextSnapshot,
            getSnapshot
          ),
          { destroy: void 0 },
          null
        );
        return nextSnapshot;
      }
      function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1, hook = updateWorkInProgressHook(), isHydrating$jscomp$0 = isHydrating;
        if (isHydrating$jscomp$0) {
          if (void 0 === getServerSnapshot)
            throw Error(
              "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
            );
          getServerSnapshot = getServerSnapshot();
        } else if (getServerSnapshot = getSnapshot(), !didWarnUncachedGetSnapshot) {
          var cachedSnapshot = getSnapshot();
          objectIs(getServerSnapshot, cachedSnapshot) || (error$jscomp$0(
            "The result of getSnapshot should be cached to avoid an infinite loop"
          ), didWarnUncachedGetSnapshot = true);
        }
        if (cachedSnapshot = !objectIs(
          (currentHook || hook).memoizedState,
          getServerSnapshot
        ))
          hook.memoizedState = getServerSnapshot, didReceiveUpdate = true;
        hook = hook.queue;
        var create = subscribeToStore.bind(null, fiber, hook, subscribe);
        updateEffectImpl(2048, Passive, create, [subscribe]);
        if (hook.getSnapshot !== getSnapshot || cachedSnapshot || null !== workInProgressHook && workInProgressHook.memoizedState.tag & HasEffect) {
          fiber.flags |= 2048;
          pushEffect(
            HasEffect | Passive,
            updateStoreInstance.bind(
              null,
              fiber,
              hook,
              getServerSnapshot,
              getSnapshot
            ),
            { destroy: void 0 },
            null
          );
          if (null === workInProgressRoot)
            throw Error(
              "Expected a work-in-progress root. This is a bug in React. Please file an issue."
            );
          isHydrating$jscomp$0 || 0 !== (renderLanes & (InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane)) || pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
        }
        return getServerSnapshot;
      }
      function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= 16384;
        fiber = { getSnapshot, value: renderedSnapshot };
        getSnapshot = currentlyRenderingFiber$1.updateQueue;
        null === getSnapshot ? (getSnapshot = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = getSnapshot, getSnapshot.stores = [fiber]) : (renderedSnapshot = getSnapshot.stores, null === renderedSnapshot ? getSnapshot.stores = [fiber] : renderedSnapshot.push(fiber));
      }
      function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        inst.value = nextSnapshot;
        inst.getSnapshot = getSnapshot;
        checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
      }
      function subscribeToStore(fiber, inst, subscribe) {
        return subscribe(function() {
          checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
        });
      }
      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        inst = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(inst, nextValue);
        } catch (error$4) {
          return true;
        }
      }
      function forceStoreRerender(fiber) {
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        null !== root2 && scheduleUpdateOnFiber(root2, fiber, SyncLane);
      }
      function mountStateImpl(initialState) {
        var hook = mountWorkInProgressHook();
        if ("function" === typeof initialState) {
          var initialStateInitializer = initialState;
          initialState = initialStateInitializer();
          shouldDoubleInvokeUserFnsInHooksDEV && (setIsStrictModeForDevtools(true), initialStateInitializer(), setIsStrictModeForDevtools(false));
        }
        hook.memoizedState = hook.baseState = initialState;
        hook.queue = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState
        };
        return hook;
      }
      function mountState(initialState) {
        initialState = mountStateImpl(initialState);
        var queue = initialState.queue, dispatch = dispatchSetState.bind(
          null,
          currentlyRenderingFiber$1,
          queue
        );
        queue.dispatch = dispatch;
        return [initialState.memoizedState, dispatch];
      }
      function mountOptimistic(passthrough) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = hook.baseState = passthrough;
        var queue = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: null,
          lastRenderedState: null
        };
        hook.queue = queue;
        hook = dispatchOptimisticSetState.bind(
          null,
          currentlyRenderingFiber$1,
          true,
          queue
        );
        queue.dispatch = hook;
        return [passthrough, hook];
      }
      function updateOptimistic(passthrough, reducer) {
        var hook = updateWorkInProgressHook();
        return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
      }
      function updateOptimisticImpl(hook, current2, passthrough, reducer) {
        hook.baseState = passthrough;
        return updateReducerImpl(
          hook,
          currentHook,
          "function" === typeof reducer ? reducer : basicStateReducer
        );
      }
      function rerenderOptimistic(passthrough, reducer) {
        var hook = updateWorkInProgressHook();
        if (null !== currentHook)
          return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
        hook.baseState = passthrough;
        return [passthrough, hook.queue.dispatch];
      }
      function dispatchActionState(fiber, actionQueue, setPendingState, setState, payload) {
        if (isRenderPhaseUpdate(fiber))
          throw Error("Cannot update form state while rendering.");
        fiber = actionQueue.action;
        if (null !== fiber) {
          var actionNode = {
            payload,
            action: fiber,
            next: null,
            isTransition: true,
            status: "pending",
            value: null,
            reason: null,
            listeners: [],
            then: function(listener) {
              actionNode.listeners.push(listener);
            }
          };
          null !== ReactSharedInternals.T ? setPendingState(true) : actionNode.isTransition = false;
          setState(actionNode);
          setPendingState = actionQueue.pending;
          null === setPendingState ? (actionNode.next = actionQueue.pending = actionNode, runActionStateAction(actionQueue, actionNode)) : (actionNode.next = setPendingState.next, actionQueue.pending = setPendingState.next = actionNode);
        }
      }
      function runActionStateAction(actionQueue, node) {
        var action = node.action, payload = node.payload, prevState = actionQueue.state;
        if (node.isTransition) {
          var prevTransition = ReactSharedInternals.T, currentTransition = {};
          ReactSharedInternals.T = currentTransition;
          ReactSharedInternals.T._updatedFibers = /* @__PURE__ */ new Set();
          try {
            var returnValue = action(prevState, payload), onStartTransitionFinish = ReactSharedInternals.S;
            null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
            handleActionReturnValue(actionQueue, node, returnValue);
          } catch (error$5) {
            onActionError(actionQueue, node, error$5);
          } finally {
            ReactSharedInternals.T = prevTransition, null === prevTransition && currentTransition._updatedFibers && (actionQueue = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < actionQueue && warn(
              "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
            ));
          }
        } else
          try {
            currentTransition = action(prevState, payload), handleActionReturnValue(actionQueue, node, currentTransition);
          } catch (error$6) {
            onActionError(actionQueue, node, error$6);
          }
      }
      function handleActionReturnValue(actionQueue, node, returnValue) {
        null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then ? (returnValue.then(
          function(nextState) {
            onActionSuccess(actionQueue, node, nextState);
          },
          function(error) {
            return onActionError(actionQueue, node, error);
          }
        ), node.isTransition || error$jscomp$0(
          "An async function was passed to useActionState, but it was dispatched outside of an action context. This is likely not what you intended. Either pass the dispatch function to an `action` prop, or dispatch manually inside `startTransition`"
        )) : onActionSuccess(actionQueue, node, returnValue);
      }
      function onActionSuccess(actionQueue, actionNode, nextState) {
        actionNode.status = "fulfilled";
        actionNode.value = nextState;
        notifyActionListeners(actionNode);
        actionQueue.state = nextState;
        actionNode = actionQueue.pending;
        null !== actionNode && (nextState = actionNode.next, nextState === actionNode ? actionQueue.pending = null : (nextState = nextState.next, actionNode.next = nextState, runActionStateAction(actionQueue, nextState)));
      }
      function onActionError(actionQueue, actionNode, error) {
        var last = actionQueue.pending;
        actionQueue.pending = null;
        if (null !== last) {
          last = last.next;
          do
            actionNode.status = "rejected", actionNode.reason = error, notifyActionListeners(actionNode), actionNode = actionNode.next;
          while (actionNode !== last);
        }
        actionQueue.action = null;
      }
      function notifyActionListeners(actionNode) {
        actionNode = actionNode.listeners;
        for (var i = 0; i < actionNode.length; i++)
          (0, actionNode[i])();
      }
      function actionStateReducer(oldState, newState) {
        return newState;
      }
      function mountActionState(action, initialStateProp) {
        if (isHydrating) {
          var ssrFormState = workInProgressRoot.formState;
          if (null !== ssrFormState) {
            a: {
              var isMatching = currentlyRenderingFiber$1;
              if (isHydrating) {
                if (nextHydratableInstance) {
                  b: {
                    var markerInstance = nextHydratableInstance;
                    for (var inRootOrSingleton = rootOrSingletonContext; 8 !== markerInstance.nodeType; ) {
                      if (!inRootOrSingleton) {
                        markerInstance = null;
                        break b;
                      }
                      markerInstance = getNextHydratable(
                        markerInstance.nextSibling
                      );
                      if (null === markerInstance) {
                        markerInstance = null;
                        break b;
                      }
                    }
                    inRootOrSingleton = markerInstance.data;
                    markerInstance = inRootOrSingleton === FORM_STATE_IS_MATCHING || inRootOrSingleton === FORM_STATE_IS_NOT_MATCHING ? markerInstance : null;
                  }
                  if (markerInstance) {
                    nextHydratableInstance = getNextHydratable(
                      markerInstance.nextSibling
                    );
                    isMatching = markerInstance.data === FORM_STATE_IS_MATCHING;
                    break a;
                  }
                }
                throwOnHydrationMismatch(isMatching);
              }
              isMatching = false;
            }
            isMatching && (initialStateProp = ssrFormState[0]);
          }
        }
        ssrFormState = mountWorkInProgressHook();
        ssrFormState.memoizedState = ssrFormState.baseState = initialStateProp;
        isMatching = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: actionStateReducer,
          lastRenderedState: initialStateProp
        };
        ssrFormState.queue = isMatching;
        ssrFormState = dispatchSetState.bind(
          null,
          currentlyRenderingFiber$1,
          isMatching
        );
        isMatching.dispatch = ssrFormState;
        isMatching = mountStateImpl(false);
        inRootOrSingleton = dispatchOptimisticSetState.bind(
          null,
          currentlyRenderingFiber$1,
          false,
          isMatching.queue
        );
        isMatching = mountWorkInProgressHook();
        markerInstance = {
          state: initialStateProp,
          dispatch: null,
          action,
          pending: null
        };
        isMatching.queue = markerInstance;
        ssrFormState = dispatchActionState.bind(
          null,
          currentlyRenderingFiber$1,
          markerInstance,
          inRootOrSingleton,
          ssrFormState
        );
        markerInstance.dispatch = ssrFormState;
        isMatching.memoizedState = action;
        return [initialStateProp, ssrFormState, false];
      }
      function updateActionState(action) {
        var stateHook = updateWorkInProgressHook();
        return updateActionStateImpl(stateHook, currentHook, action);
      }
      function updateActionStateImpl(stateHook, currentStateHook, action) {
        currentStateHook = updateReducerImpl(
          stateHook,
          currentStateHook,
          actionStateReducer
        )[0];
        stateHook = updateReducer(basicStateReducer)[0];
        currentStateHook = "object" === typeof currentStateHook && null !== currentStateHook && "function" === typeof currentStateHook.then ? useThenable(currentStateHook) : currentStateHook;
        var actionQueueHook = updateWorkInProgressHook(), actionQueue = actionQueueHook.queue, dispatch = actionQueue.dispatch;
        action !== actionQueueHook.memoizedState && (currentlyRenderingFiber$1.flags |= 2048, pushEffect(
          HasEffect | Passive,
          actionStateActionEffect.bind(null, actionQueue, action),
          { destroy: void 0 },
          null
        ));
        return [currentStateHook, dispatch, stateHook];
      }
      function actionStateActionEffect(actionQueue, action) {
        actionQueue.action = action;
      }
      function rerenderActionState(action) {
        var stateHook = updateWorkInProgressHook(), currentStateHook = currentHook;
        if (null !== currentStateHook)
          return updateActionStateImpl(stateHook, currentStateHook, action);
        updateWorkInProgressHook();
        stateHook = stateHook.memoizedState;
        currentStateHook = updateWorkInProgressHook();
        var dispatch = currentStateHook.queue.dispatch;
        currentStateHook.memoizedState = action;
        return [stateHook, dispatch, false];
      }
      function pushEffect(tag, create, inst, deps) {
        tag = { tag, create, inst, deps, next: null };
        create = currentlyRenderingFiber$1.updateQueue;
        null === create ? (create = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = create, create.lastEffect = tag.next = tag) : (inst = create.lastEffect, null === inst ? create.lastEffect = tag.next = tag : (deps = inst.next, inst.next = tag, tag.next = deps, create.lastEffect = tag));
        return tag;
      }
      function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        initialValue = { current: initialValue };
        return hook.memoizedState = initialValue;
      }
      function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(
          HasEffect | hookFlags,
          create,
          { destroy: void 0 },
          void 0 === deps ? null : deps
        );
      }
      function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        deps = void 0 === deps ? null : deps;
        var inst = hook.memoizedState.inst;
        null !== currentHook && null !== deps && areHookInputsEqual(deps, currentHook.memoizedState.deps) ? hook.memoizedState = pushEffect(hookFlags, create, inst, deps) : (currentlyRenderingFiber$1.flags |= fiberFlags, hook.memoizedState = pushEffect(
          HasEffect | hookFlags,
          create,
          inst,
          deps
        ));
      }
      function mountEffect(create, deps) {
        0 !== (currentlyRenderingFiber$1.mode & 16) && 0 === (currentlyRenderingFiber$1.mode & 64) ? mountEffectImpl(142608384, Passive, create, deps) : mountEffectImpl(8390656, Passive, create, deps);
      }
      function useEffectEventImpl(payload) {
        currentlyRenderingFiber$1.flags |= 4;
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (null === componentUpdateQueue)
          componentUpdateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = componentUpdateQueue, componentUpdateQueue.events = [payload];
        else {
          var events = componentUpdateQueue.events;
          null === events ? componentUpdateQueue.events = [payload] : events.push(payload);
        }
      }
      function mountEvent(callback) {
        var hook = mountWorkInProgressHook(), ref = { impl: callback };
        hook.memoizedState = ref;
        return function() {
          if ((executionContext & RenderContext) !== NoContext)
            throw Error(
              "A function wrapped in useEffectEvent can't be called during rendering."
            );
          return ref.impl.apply(void 0, arguments);
        };
      }
      function updateEvent(callback) {
        var ref = updateWorkInProgressHook().memoizedState;
        useEffectEventImpl({ ref, nextImpl: callback });
        return function() {
          if ((executionContext & RenderContext) !== NoContext)
            throw Error(
              "A function wrapped in useEffectEvent can't be called during rendering."
            );
          return ref.impl.apply(void 0, arguments);
        };
      }
      function mountLayoutEffect(create, deps) {
        var fiberFlags = 4194308;
        0 !== (currentlyRenderingFiber$1.mode & 16) && (fiberFlags |= 67108864);
        return mountEffectImpl(fiberFlags, Layout, create, deps);
      }
      function imperativeHandleEffect(create, ref) {
        if ("function" === typeof ref) {
          create = create();
          var refCleanup = ref(create);
          return function() {
            "function" === typeof refCleanup ? refCleanup() : ref(null);
          };
        }
        if (null !== ref && void 0 !== ref)
          return ref.hasOwnProperty("current") || error$jscomp$0(
            "Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.",
            "an object with keys {" + Object.keys(ref).join(", ") + "}"
          ), create = create(), ref.current = create, function() {
            ref.current = null;
          };
      }
      function mountImperativeHandle(ref, create, deps) {
        "function" !== typeof create && error$jscomp$0(
          "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",
          null !== create ? typeof create : "null"
        );
        deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
        var fiberFlags = 4194308;
        0 !== (currentlyRenderingFiber$1.mode & 16) && (fiberFlags |= 67108864);
        mountEffectImpl(
          fiberFlags,
          Layout,
          imperativeHandleEffect.bind(null, create, ref),
          deps
        );
      }
      function updateImperativeHandle(ref, create, deps) {
        "function" !== typeof create && error$jscomp$0(
          "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",
          null !== create ? typeof create : "null"
        );
        deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
        updateEffectImpl(
          4,
          Layout,
          imperativeHandleEffect.bind(null, create, ref),
          deps
        );
      }
      function mountCallback(callback, deps) {
        mountWorkInProgressHook().memoizedState = [
          callback,
          void 0 === deps ? null : deps
        ];
        return callback;
      }
      function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        deps = void 0 === deps ? null : deps;
        var prevState = hook.memoizedState;
        if (null !== deps && areHookInputsEqual(deps, prevState[1]))
          return prevState[0];
        hook.memoizedState = [callback, deps];
        return callback;
      }
      function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        deps = void 0 === deps ? null : deps;
        var nextValue = nextCreate();
        shouldDoubleInvokeUserFnsInHooksDEV && (setIsStrictModeForDevtools(true), nextCreate(), setIsStrictModeForDevtools(false));
        hook.memoizedState = [nextValue, deps];
        return nextValue;
      }
      function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        deps = void 0 === deps ? null : deps;
        var prevState = hook.memoizedState;
        if (null !== deps && areHookInputsEqual(deps, prevState[1]))
          return prevState[0];
        prevState = nextCreate();
        shouldDoubleInvokeUserFnsInHooksDEV && (setIsStrictModeForDevtools(true), nextCreate(), setIsStrictModeForDevtools(false));
        hook.memoizedState = [prevState, deps];
        return prevState;
      }
      function mountDeferredValue(value, initialValue) {
        var hook = mountWorkInProgressHook();
        return mountDeferredValueImpl(hook, value, initialValue);
      }
      function updateDeferredValue(value, initialValue) {
        var hook = updateWorkInProgressHook();
        return updateDeferredValueImpl(
          hook,
          currentHook.memoizedState,
          value,
          initialValue
        );
      }
      function rerenderDeferredValue(value, initialValue) {
        var hook = updateWorkInProgressHook();
        return null === currentHook ? mountDeferredValueImpl(hook, value, initialValue) : updateDeferredValueImpl(
          hook,
          currentHook.memoizedState,
          value,
          initialValue
        );
      }
      function mountDeferredValueImpl(hook, value, initialValue) {
        if (void 0 === initialValue || 0 !== (renderLanes & DeferredLane))
          return hook.memoizedState = value;
        hook.memoizedState = initialValue;
        hook = requestDeferredLane();
        currentlyRenderingFiber$1.lanes |= hook;
        workInProgressRootSkippedLanes |= hook;
        return initialValue;
      }
      function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
        if (objectIs(value, prevValue))
          return value;
        if (null !== currentTreeHiddenStackCursor.current)
          return hook = mountDeferredValueImpl(hook, value, initialValue), objectIs(hook, prevValue) || (didReceiveUpdate = true), hook;
        if (0 === (renderLanes & (SyncLane | InputContinuousLane | DefaultLane)))
          return didReceiveUpdate = true, hook.memoizedState = value;
        hook = requestDeferredLane();
        currentlyRenderingFiber$1.lanes |= hook;
        workInProgressRootSkippedLanes |= hook;
        return prevValue;
      }
      function startTransition(fiber, queue, pendingState, finishedState, callback) {
        var previousPriority = ReactDOMSharedInternals.p;
        ReactDOMSharedInternals.p = 0 !== previousPriority && previousPriority < ContinuousEventPriority ? previousPriority : ContinuousEventPriority;
        var prevTransition = ReactSharedInternals.T, currentTransition = {};
        ReactSharedInternals.T = currentTransition;
        dispatchOptimisticSetState(fiber, false, queue, pendingState);
        currentTransition._updatedFibers = /* @__PURE__ */ new Set();
        try {
          var returnValue = callback(), onStartTransitionFinish = ReactSharedInternals.S;
          null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
          if (null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then) {
            var thenableForFinishedState = chainThenableValue(
              returnValue,
              finishedState
            );
            dispatchSetState(fiber, queue, thenableForFinishedState);
          } else
            dispatchSetState(fiber, queue, finishedState);
        } catch (error$7) {
          dispatchSetState(fiber, queue, {
            then: function() {
            },
            status: "rejected",
            reason: error$7
          });
        } finally {
          ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition, null === prevTransition && currentTransition._updatedFibers && (fiber = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < fiber && warn(
            "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
          ));
        }
      }
      function startHostTransition(formFiber, pendingState, action, formData) {
        if (5 !== formFiber.tag)
          throw Error(
            "Expected the form instance to be a HostComponent. This is a bug in React."
          );
        var queue = ensureFormComponentIsStateful(formFiber).queue;
        startTransition(
          formFiber,
          queue,
          pendingState,
          NotPendingTransition,
          null === action ? noop$2 : function() {
            requestFormReset$1(formFiber);
            return action(formData);
          }
        );
      }
      function ensureFormComponentIsStateful(formFiber) {
        var existingStateHook = formFiber.memoizedState;
        if (null !== existingStateHook)
          return existingStateHook;
        existingStateHook = {
          memoizedState: NotPendingTransition,
          baseState: NotPendingTransition,
          baseQueue: null,
          queue: {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: NotPendingTransition
          },
          next: null
        };
        var initialResetState = {};
        existingStateHook.next = {
          memoizedState: initialResetState,
          baseState: initialResetState,
          baseQueue: null,
          queue: {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialResetState
          },
          next: null
        };
        formFiber.memoizedState = existingStateHook;
        formFiber = formFiber.alternate;
        null !== formFiber && (formFiber.memoizedState = existingStateHook);
        return existingStateHook;
      }
      function requestFormReset$1(formFiber) {
        null === ReactSharedInternals.T && error$jscomp$0(
          "requestFormReset was called outside a transition or action. To fix, move to an action, or wrap with startTransition."
        );
        var resetStateQueue = ensureFormComponentIsStateful(formFiber).next.queue;
        dispatchSetState(formFiber, resetStateQueue, {});
      }
      function mountTransition() {
        var stateHook = mountStateImpl(false);
        stateHook = startTransition.bind(
          null,
          currentlyRenderingFiber$1,
          stateHook.queue,
          true,
          false
        );
        mountWorkInProgressHook().memoizedState = stateHook;
        return [false, stateHook];
      }
      function updateTransition() {
        var booleanOrThenable = updateReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
        return [
          "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
          start
        ];
      }
      function rerenderTransition() {
        var booleanOrThenable = rerenderReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
        return [
          "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
          start
        ];
      }
      function useHostTransitionStatus() {
        var status = readContext(HostTransitionContext);
        return null !== status ? status : NotPendingTransition;
      }
      function mountId() {
        var hook = mountWorkInProgressHook(), identifierPrefix = workInProgressRoot.identifierPrefix;
        if (isHydrating) {
          var treeId = treeContextOverflow;
          var idWithLeadingBit = treeContextId;
          treeId = (idWithLeadingBit & ~(1 << 32 - clz32(idWithLeadingBit) - 1)).toString(32) + treeId;
          identifierPrefix = ":" + identifierPrefix + "R" + treeId;
          treeId = localIdCounter++;
          0 < treeId && (identifierPrefix += "H" + treeId.toString(32));
          identifierPrefix += ":";
        } else
          treeId = globalClientIdCounter++, identifierPrefix = ":" + identifierPrefix + "r" + treeId.toString(32) + ":";
        return hook.memoizedState = identifierPrefix;
      }
      function mountRefresh() {
        return mountWorkInProgressHook().memoizedState = refreshCache.bind(
          null,
          currentlyRenderingFiber$1
        );
      }
      function refreshCache(fiber, seedKey, seedValue) {
        for (var provider = fiber.return; null !== provider; ) {
          switch (provider.tag) {
            case 24:
            case 3:
              var lane = requestUpdateLane(provider);
              fiber = createUpdate(lane);
              var root2 = enqueueUpdate(provider, fiber, lane);
              null !== root2 && (scheduleUpdateOnFiber(root2, provider, lane), entangleTransitions(root2, provider, lane));
              provider = createCache();
              null !== seedKey && void 0 !== seedKey && null !== root2 && provider.data.set(seedKey, seedValue);
              fiber.payload = { cache: provider };
              return;
          }
          provider = provider.return;
        }
      }
      function dispatchReducerAction(fiber, queue, action, JSCompiler_OptimizeArgumentsArray_p0) {
        "function" === typeof JSCompiler_OptimizeArgumentsArray_p0 && error$jscomp$0(
          "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
        );
        JSCompiler_OptimizeArgumentsArray_p0 = requestUpdateLane(fiber);
        action = {
          lane: JSCompiler_OptimizeArgumentsArray_p0,
          revertLane: 0,
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        isRenderPhaseUpdate(fiber) ? enqueueRenderPhaseUpdate(queue, action) : (action = enqueueConcurrentHookUpdate(
          fiber,
          queue,
          action,
          JSCompiler_OptimizeArgumentsArray_p0
        ), null !== action && (scheduleUpdateOnFiber(
          action,
          fiber,
          JSCompiler_OptimizeArgumentsArray_p0
        ), entangleTransitionUpdate(
          action,
          queue,
          JSCompiler_OptimizeArgumentsArray_p0
        )));
        markStateUpdateScheduled(fiber, JSCompiler_OptimizeArgumentsArray_p0);
      }
      function dispatchSetState(fiber, queue, action, JSCompiler_OptimizeArgumentsArray_p1) {
        "function" === typeof JSCompiler_OptimizeArgumentsArray_p1 && error$jscomp$0(
          "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
        );
        JSCompiler_OptimizeArgumentsArray_p1 = requestUpdateLane(fiber);
        var update = {
          lane: JSCompiler_OptimizeArgumentsArray_p1,
          revertLane: 0,
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber))
          enqueueRenderPhaseUpdate(queue, update);
        else {
          var alternate = fiber.alternate;
          if (0 === fiber.lanes && (null === alternate || 0 === alternate.lanes) && (alternate = queue.lastRenderedReducer, null !== alternate)) {
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              var currentState = queue.lastRenderedState, eagerState = alternate(currentState, action);
              update.hasEagerState = true;
              update.eagerState = eagerState;
              if (objectIs(eagerState, currentState)) {
                enqueueUpdate$1(fiber, queue, update, 0);
                null === workInProgressRoot && finishQueueingConcurrentUpdates();
                return;
              }
            } catch (error$8) {
            } finally {
              ReactSharedInternals.H = prevDispatcher;
            }
          }
          action = enqueueConcurrentHookUpdate(
            fiber,
            queue,
            update,
            JSCompiler_OptimizeArgumentsArray_p1
          );
          null !== action && (scheduleUpdateOnFiber(
            action,
            fiber,
            JSCompiler_OptimizeArgumentsArray_p1
          ), entangleTransitionUpdate(
            action,
            queue,
            JSCompiler_OptimizeArgumentsArray_p1
          ));
        }
        markStateUpdateScheduled(fiber, JSCompiler_OptimizeArgumentsArray_p1);
      }
      function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {
        null === ReactSharedInternals.T && 0 === currentEntangledLane && error$jscomp$0(
          "An optimistic state update occurred outside a transition or action. To fix, move the update to an action, or wrap with startTransition."
        );
        action = {
          lane: SyncLane,
          revertLane: requestTransitionLane(),
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber)) {
          if (throwIfDuringRender)
            throw Error("Cannot update optimistic state while rendering.");
          error$jscomp$0("Cannot call startTransition while rendering.");
        } else
          throwIfDuringRender = enqueueConcurrentHookUpdate(
            fiber,
            queue,
            action,
            SyncLane
          ), null !== throwIfDuringRender && scheduleUpdateOnFiber(throwIfDuringRender, fiber, SyncLane);
        markStateUpdateScheduled(fiber, SyncLane);
      }
      function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate;
        return fiber === currentlyRenderingFiber$1 || null !== alternate && alternate === currentlyRenderingFiber$1;
      }
      function enqueueRenderPhaseUpdate(queue, update) {
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        var pending = queue.pending;
        null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
        queue.pending = update;
      }
      function entangleTransitionUpdate(root2, queue, lane) {
        if (0 !== (lane & TransitionLanes)) {
          var queueLanes = queue.lanes;
          queueLanes &= root2.pendingLanes;
          lane |= queueLanes;
          queue.lanes = lane;
          markRootEntangled(root2, lane);
        }
      }
      function startProfilerTimer(fiber) {
        profilerStartTime = now();
        0 > fiber.actualStartTime && (fiber.actualStartTime = now());
      }
      function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (0 <= profilerStartTime) {
          var elapsedTime = now() - profilerStartTime;
          fiber.actualDuration += elapsedTime;
          overrideBaseTime && (fiber.selfBaseDuration = elapsedTime);
          profilerStartTime = -1;
        }
      }
      function recordLayoutEffectDuration(fiber) {
        if (0 <= layoutEffectStartTime) {
          var elapsedTime = now() - layoutEffectStartTime;
          layoutEffectStartTime = -1;
          for (fiber = fiber.return; null !== fiber; ) {
            switch (fiber.tag) {
              case 3:
                fiber.stateNode.effectDuration += elapsedTime;
                return;
              case 12:
                fiber.stateNode.effectDuration += elapsedTime;
                return;
            }
            fiber = fiber.return;
          }
        }
      }
      function recordPassiveEffectDuration(fiber) {
        if (0 <= passiveEffectStartTime) {
          var elapsedTime = now() - passiveEffectStartTime;
          passiveEffectStartTime = -1;
          for (fiber = fiber.return; null !== fiber; ) {
            switch (fiber.tag) {
              case 3:
                fiber = fiber.stateNode;
                null !== fiber && (fiber.passiveEffectDuration += elapsedTime);
                return;
              case 12:
                fiber = fiber.stateNode;
                null !== fiber && (fiber.passiveEffectDuration += elapsedTime);
                return;
            }
            fiber = fiber.return;
          }
        }
      }
      function startLayoutEffectTimer() {
        layoutEffectStartTime = now();
      }
      function transferActualDuration(fiber) {
        for (var child = fiber.child; child; )
          fiber.actualDuration += child.actualDuration, child = child.sibling;
      }
      function defaultOnUncaughtError(error) {
        reportGlobalError(error);
        warn(
          "%s\n\n%s\n",
          componentName ? "An error occurred in the <" + componentName + "> component." : "An error occurred in one of your React components.",
          "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://react.dev/link/error-boundaries to learn more about error boundaries."
        );
      }
      function defaultOnCaughtError(error$1) {
        var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component." : "The above error occurred in one of your React components.", recreateMessage = "React will try to recreate this component tree from scratch using the error boundary you provided, " + ((errorBoundaryName || "Anonymous") + ".");
        if ("object" === typeof error$1 && null !== error$1 && "string" === typeof error$1.environmentName) {
          var badgeName = error$1.environmentName;
          error$1 = [
            "%o\n\n%s\n\n%s\n",
            error$1,
            componentNameMessage,
            recreateMessage
          ].slice(0);
          "string" === typeof error$1[0] ? error$1.splice(
            0,
            1,
            badgeFormat + error$1[0],
            badgeStyle,
            pad + badgeName + pad,
            resetStyle
          ) : error$1.splice(
            0,
            0,
            badgeFormat,
            badgeStyle,
            pad + badgeName + pad,
            resetStyle
          );
          error$jscomp$0.apply(console, error$1);
        } else
          error$jscomp$0(
            "%o\n\n%s\n\n%s\n",
            error$1,
            componentNameMessage,
            recreateMessage
          );
      }
      function defaultOnRecoverableError(error) {
        reportGlobalError(error);
      }
      function logUncaughtError(root2, errorInfo) {
        try {
          componentName = errorInfo.source ? getComponentNameFromFiber(errorInfo.source) : null;
          errorBoundaryName = null;
          var error = errorInfo.value;
          if (null !== ReactSharedInternals.actQueue)
            ReactSharedInternals.thrownErrors.push(error);
          else {
            var onUncaughtError = root2.onUncaughtError;
            onUncaughtError(error, { componentStack: errorInfo.stack });
          }
        } catch (e$9) {
          setTimeout(function() {
            throw e$9;
          });
        }
      }
      function logCaughtError(root2, boundary, errorInfo) {
        try {
          componentName = errorInfo.source ? getComponentNameFromFiber(errorInfo.source) : null;
          errorBoundaryName = getComponentNameFromFiber(boundary);
          var onCaughtError = root2.onCaughtError;
          onCaughtError(errorInfo.value, {
            componentStack: errorInfo.stack,
            errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
          });
        } catch (e$10) {
          setTimeout(function() {
            throw e$10;
          });
        }
      }
      function createRootErrorUpdate(root2, errorInfo, lane) {
        lane = createUpdate(lane);
        lane.tag = CaptureUpdate;
        lane.payload = { element: null };
        lane.callback = function() {
          runWithFiberInDEV(errorInfo.source, logUncaughtError, root2, errorInfo);
        };
        return lane;
      }
      function createClassErrorUpdate(lane) {
        lane = createUpdate(lane);
        lane.tag = CaptureUpdate;
        return lane;
      }
      function initializeClassErrorUpdate(update, root2, fiber, errorInfo) {
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if ("function" === typeof getDerivedStateFromError) {
          var error$1 = errorInfo.value;
          update.payload = function() {
            return getDerivedStateFromError(error$1);
          };
          update.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber);
            runWithFiberInDEV(
              errorInfo.source,
              logCaughtError,
              root2,
              fiber,
              errorInfo
            );
          };
        }
        var inst = fiber.stateNode;
        null !== inst && "function" === typeof inst.componentDidCatch && (update.callback = function() {
          markFailedErrorBoundaryForHotReloading(fiber);
          runWithFiberInDEV(
            errorInfo.source,
            logCaughtError,
            root2,
            fiber,
            errorInfo
          );
          "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
          var stack = errorInfo.stack;
          this.componentDidCatch(errorInfo.value, {
            componentStack: null !== stack ? stack : ""
          });
          "function" === typeof getDerivedStateFromError || 0 === (fiber.lanes & SyncLane) && error$jscomp$0(
            "%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.",
            getComponentNameFromFiber(fiber) || "Unknown"
          );
        });
      }
      function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
        suspenseBoundary.flags |= 65536;
        suspenseBoundary.lanes = rootRenderLanes;
        return suspenseBoundary;
      }
      function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
        sourceFiber.flags |= 32768;
        isDevToolsPresent && restorePendingUpdaters(root2, rootRenderLanes);
        if (null !== value && "object" === typeof value && (value.$$typeof === REACT_POSTPONE_TYPE && (value = { then: function() {
        } }), "function" === typeof value.then)) {
          isHydrating && (didSuspendOrErrorDEV = true);
          var suspenseBoundary = suspenseHandlerStackCursor.current;
          if (null !== suspenseBoundary) {
            switch (suspenseBoundary.tag) {
              case 13:
                return null === shellBoundary ? renderDidSuspendDelayIfPossible() : null === suspenseBoundary.alternate && workInProgressRootExitStatus === RootInProgress && (workInProgressRootExitStatus = RootSuspended), suspenseBoundary.flags &= -257, markSuspenseBoundaryShouldCapture(
                  suspenseBoundary,
                  returnFiber,
                  sourceFiber,
                  root2,
                  rootRenderLanes
                ), value === noopSuspenseyCommitThenable ? suspenseBoundary.flags |= 16384 : (sourceFiber = suspenseBoundary.updateQueue, null === sourceFiber ? suspenseBoundary.updateQueue = /* @__PURE__ */ new Set([value]) : sourceFiber.add(value), attachPingListener(root2, value, rootRenderLanes)), false;
              case 22:
                return suspenseBoundary.flags |= 65536, value === noopSuspenseyCommitThenable ? suspenseBoundary.flags |= 16384 : (sourceFiber = suspenseBoundary.updateQueue, null === sourceFiber ? (sourceFiber = {
                  transitions: null,
                  markerInstances: null,
                  retryQueue: /* @__PURE__ */ new Set([value])
                }, suspenseBoundary.updateQueue = sourceFiber) : (returnFiber = sourceFiber.retryQueue, null === returnFiber ? sourceFiber.retryQueue = /* @__PURE__ */ new Set([value]) : returnFiber.add(value)), attachPingListener(root2, value, rootRenderLanes)), false;
            }
            throw Error(
              "Unexpected Suspense handler tag (" + suspenseBoundary.tag + "). This is a bug in React."
            );
          }
          attachPingListener(root2, value, rootRenderLanes);
          renderDidSuspendDelayIfPossible();
          return false;
        }
        if (isHydrating)
          return didSuspendOrErrorDEV = true, suspenseBoundary = suspenseHandlerStackCursor.current, null !== suspenseBoundary ? (0 === (suspenseBoundary.flags & 65536) && (suspenseBoundary.flags |= 256), markSuspenseBoundaryShouldCapture(
            suspenseBoundary,
            returnFiber,
            sourceFiber,
            root2,
            rootRenderLanes
          ), value !== HydrationMismatchException && queueHydrationError(
            createCapturedValueAtFiber(
              Error(
                "There was an error while hydrating but React was able to recover by instead client rendering from the nearest Suspense boundary.",
                { cause: value }
              ),
              sourceFiber
            )
          )) : (value !== HydrationMismatchException && queueHydrationError(
            createCapturedValueAtFiber(
              Error(
                "There was an error while hydrating but React was able to recover by instead client rendering the entire root.",
                { cause: value }
              ),
              sourceFiber
            )
          ), root2 = root2.current.alternate, root2.flags |= 65536, rootRenderLanes &= -rootRenderLanes, root2.lanes |= rootRenderLanes, sourceFiber = createCapturedValueAtFiber(value, sourceFiber), rootRenderLanes = createRootErrorUpdate(
            root2.stateNode,
            sourceFiber,
            rootRenderLanes
          ), enqueueCapturedUpdate(root2, rootRenderLanes), workInProgressRootExitStatus !== RootSuspendedWithDelay && (workInProgressRootExitStatus = RootErrored)), false;
        queueConcurrentError(
          createCapturedValueAtFiber(
            Error(
              "There was an error during concurrent rendering but React was able to recover by instead synchronously rendering the entire root.",
              { cause: value }
            ),
            sourceFiber
          )
        );
        workInProgressRootExitStatus !== RootSuspendedWithDelay && (workInProgressRootExitStatus = RootErrored);
        if (null === returnFiber)
          return true;
        sourceFiber = createCapturedValueAtFiber(value, sourceFiber);
        value = returnFiber;
        do {
          switch (value.tag) {
            case 3:
              return value.flags |= 65536, root2 = rootRenderLanes & -rootRenderLanes, value.lanes |= root2, root2 = createRootErrorUpdate(
                value.stateNode,
                sourceFiber,
                root2
              ), enqueueCapturedUpdate(value, root2), false;
            case 1:
              if (returnFiber = value.type, suspenseBoundary = value.stateNode, 0 === (value.flags & 128) && ("function" === typeof returnFiber.getDerivedStateFromError || null !== suspenseBoundary && "function" === typeof suspenseBoundary.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(
                suspenseBoundary
              ))))
                return value.flags |= 65536, rootRenderLanes &= -rootRenderLanes, value.lanes |= rootRenderLanes, rootRenderLanes = createClassErrorUpdate(rootRenderLanes), initializeClassErrorUpdate(
                  rootRenderLanes,
                  root2,
                  value,
                  sourceFiber
                ), enqueueCapturedUpdate(value, rootRenderLanes), false;
          }
          value = value.return;
        } while (null !== value);
        return false;
      }
      function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
        workInProgress2.child = null === current2 ? mountChildFibers(workInProgress2, null, nextChildren, renderLanes2) : reconcileChildFibers(
          workInProgress2,
          current2.child,
          nextChildren,
          renderLanes2
        );
      }
      function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
        Component = Component.render;
        var ref = workInProgress2.ref;
        if ("ref" in nextProps) {
          var propsWithoutRef = {};
          for (var key in nextProps)
            "ref" !== key && (propsWithoutRef[key] = nextProps[key]);
        } else
          propsWithoutRef = nextProps;
        prepareToReadContext(workInProgress2, renderLanes2);
        markComponentRenderStarted(workInProgress2);
        nextProps = renderWithHooks(
          current2,
          workInProgress2,
          Component,
          propsWithoutRef,
          ref,
          renderLanes2
        );
        key = checkDidRenderIdHook();
        markComponentRenderStopped();
        if (null !== current2 && !didReceiveUpdate)
          return bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        isHydrating && key && pushMaterializedTreeId(workInProgress2);
        workInProgress2.flags |= 1;
        reconcileChildren(current2, workInProgress2, nextProps, renderLanes2);
        return workInProgress2.child;
      }
      function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        if (null === current2) {
          var type = Component.type;
          if ("function" === typeof type && !shouldConstruct(type) && void 0 === type.defaultProps && null === Component.compare)
            return Component = resolveFunctionForHotReloading(type), workInProgress2.tag = 15, workInProgress2.type = Component, validateFunctionComponentInDev(workInProgress2, type), updateSimpleMemoComponent(
              current2,
              workInProgress2,
              Component,
              nextProps,
              renderLanes2
            );
          current2 = createFiberFromTypeAndProps(
            Component.type,
            null,
            nextProps,
            workInProgress2,
            workInProgress2.mode,
            renderLanes2
          );
          current2.ref = workInProgress2.ref;
          current2.return = workInProgress2;
          return workInProgress2.child = current2;
        }
        type = current2.child;
        if (0 === (current2.lanes & renderLanes2)) {
          var prevProps = type.memoizedProps;
          Component = Component.compare;
          Component = null !== Component ? Component : shallowEqual;
          if (Component(prevProps, nextProps) && current2.ref === workInProgress2.ref)
            return bailoutOnAlreadyFinishedWork(
              current2,
              workInProgress2,
              renderLanes2
            );
        }
        workInProgress2.flags |= 1;
        current2 = createWorkInProgress(type, nextProps);
        current2.ref = workInProgress2.ref;
        current2.return = workInProgress2;
        return workInProgress2.child = current2;
      }
      function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        if (null !== current2) {
          var prevProps = current2.memoizedProps;
          if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type)
            if (didReceiveUpdate = false, workInProgress2.pendingProps = nextProps = prevProps, 0 !== (current2.lanes & renderLanes2))
              0 !== (current2.flags & 131072) && (didReceiveUpdate = true);
            else
              return workInProgress2.lanes = current2.lanes, bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        return updateFunctionComponent(
          current2,
          workInProgress2,
          Component,
          nextProps,
          renderLanes2
        );
      }
      function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps, nextChildren = nextProps.children, nextIsDetached = 0 !== (workInProgress2.stateNode._pendingVisibility & OffscreenDetached), prevState = null !== current2 ? current2.memoizedState : null;
        markRef(current2, workInProgress2);
        if ("hidden" === nextProps.mode || nextIsDetached) {
          if (0 !== (workInProgress2.flags & 128)) {
            renderLanes2 = null !== prevState ? prevState.baseLanes | renderLanes2 : renderLanes2;
            if (null !== current2) {
              nextProps = workInProgress2.child = current2.child;
              for (nextChildren = 0; null !== nextProps; )
                nextChildren = nextChildren | nextProps.lanes | nextProps.childLanes, nextProps = nextProps.sibling;
              workInProgress2.childLanes = nextChildren & ~renderLanes2;
            } else
              workInProgress2.childLanes = 0, workInProgress2.child = null;
            return deferHiddenOffscreenComponent(
              current2,
              workInProgress2,
              renderLanes2
            );
          }
          if (0 !== (renderLanes2 & OffscreenLane))
            workInProgress2.memoizedState = { baseLanes: 0, cachePool: null }, null !== current2 && pushTransition(
              workInProgress2,
              null !== prevState ? prevState.cachePool : null
            ), null !== prevState ? pushHiddenContext(workInProgress2, prevState) : reuseHiddenContextOnStack(workInProgress2), pushOffscreenSuspenseHandler(workInProgress2);
          else
            return workInProgress2.lanes = workInProgress2.childLanes = OffscreenLane, deferHiddenOffscreenComponent(
              current2,
              workInProgress2,
              null !== prevState ? prevState.baseLanes | renderLanes2 : renderLanes2
            );
        } else
          null !== prevState ? (pushTransition(workInProgress2, prevState.cachePool), pushHiddenContext(workInProgress2, prevState), reuseSuspenseHandlerOnStack(workInProgress2), workInProgress2.memoizedState = null) : (null !== current2 && pushTransition(workInProgress2, null), reuseHiddenContextOnStack(workInProgress2), reuseSuspenseHandlerOnStack(workInProgress2));
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function deferHiddenOffscreenComponent(current2, workInProgress2, nextBaseLanes) {
        var JSCompiler_inline_result = peekCacheFromPool();
        JSCompiler_inline_result = null === JSCompiler_inline_result ? null : {
          parent: CacheContext._currentValue,
          pool: JSCompiler_inline_result
        };
        workInProgress2.memoizedState = {
          baseLanes: nextBaseLanes,
          cachePool: JSCompiler_inline_result
        };
        null !== current2 && pushTransition(workInProgress2, null);
        reuseHiddenContextOnStack(workInProgress2);
        pushOffscreenSuspenseHandler(workInProgress2);
        return null;
      }
      function markRef(current2, workInProgress2) {
        var ref = workInProgress2.ref;
        if (null === ref)
          null !== current2 && null !== current2.ref && (workInProgress2.flags |= 2097664);
        else {
          if ("function" !== typeof ref && "object" !== typeof ref)
            throw Error(
              "Expected ref to be a function, an object returned by React.createRef(), or undefined/null."
            );
          if (null === current2 || current2.ref !== ref)
            workInProgress2.flags |= 2097664;
        }
      }
      function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        if (Component.prototype && "function" === typeof Component.prototype.render) {
          var componentName2 = getComponentNameFromType(Component) || "Unknown";
          didWarnAboutBadClass[componentName2] || (error$jscomp$0(
            "The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",
            componentName2,
            componentName2
          ), didWarnAboutBadClass[componentName2] = true);
        }
        workInProgress2.mode & 8 && ReactStrictModeWarnings.recordLegacyContextWarning(
          workInProgress2,
          null
        );
        null === current2 && (validateFunctionComponentInDev(workInProgress2, workInProgress2.type), Component.contextTypes && error$jscomp$0(
          "%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with React.useContext() instead.",
          getComponentNameFromType(Component) || "Unknown"
        ));
        prepareToReadContext(workInProgress2, renderLanes2);
        markComponentRenderStarted(workInProgress2);
        Component = renderWithHooks(
          current2,
          workInProgress2,
          Component,
          nextProps,
          void 0,
          renderLanes2
        );
        nextProps = checkDidRenderIdHook();
        markComponentRenderStopped();
        if (null !== current2 && !didReceiveUpdate)
          return bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        isHydrating && nextProps && pushMaterializedTreeId(workInProgress2);
        workInProgress2.flags |= 1;
        reconcileChildren(current2, workInProgress2, Component, renderLanes2);
        return workInProgress2.child;
      }
      function replayFunctionComponent(current2, workInProgress2, nextProps, Component, secondArg, renderLanes2) {
        prepareToReadContext(workInProgress2, renderLanes2);
        markComponentRenderStarted(workInProgress2);
        hookTypesUpdateIndexDev = -1;
        ignorePreviousDependencies = null !== current2 && current2.type !== workInProgress2.type;
        nextProps = renderWithHooksAgain(
          workInProgress2,
          Component,
          nextProps,
          secondArg
        );
        finishRenderingHooks(current2, workInProgress2);
        Component = checkDidRenderIdHook();
        markComponentRenderStopped();
        if (null !== current2 && !didReceiveUpdate)
          return bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        isHydrating && Component && pushMaterializedTreeId(workInProgress2);
        workInProgress2.flags |= 1;
        reconcileChildren(current2, workInProgress2, nextProps, renderLanes2);
        return workInProgress2.child;
      }
      function updateClassComponent(current$jscomp$0, workInProgress2, Component, nextProps, renderLanes2) {
        switch (shouldErrorImpl(workInProgress2)) {
          case false:
            var _instance = workInProgress2.stateNode, state = new workInProgress2.type(
              workInProgress2.memoizedProps,
              _instance.context
            ).state;
            _instance.updater.enqueueSetState(_instance, state, null);
            break;
          case true:
            workInProgress2.flags |= 128;
            workInProgress2.flags |= 65536;
            _instance = Error("Simulated error coming from DevTools");
            var lane = renderLanes2 & -renderLanes2;
            workInProgress2.lanes |= lane;
            state = workInProgressRoot;
            if (null === state)
              throw Error(
                "Expected a work-in-progress root. This is a bug in React. Please file an issue."
              );
            lane = createClassErrorUpdate(lane);
            initializeClassErrorUpdate(
              lane,
              state,
              workInProgress2,
              createCapturedValueAtFiber(_instance, workInProgress2)
            );
            enqueueCapturedUpdate(workInProgress2, lane);
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        if (null === workInProgress2.stateNode) {
          state = emptyContextObject;
          _instance = Component.contextType;
          "contextType" in Component && null !== _instance && (void 0 === _instance || _instance.$$typeof !== REACT_CONTEXT_TYPE) && !didWarnAboutInvalidateContextType.has(Component) && (didWarnAboutInvalidateContextType.add(Component), lane = void 0 === _instance ? " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : "object" !== typeof _instance ? " However, it is set to a " + typeof _instance + "." : _instance.$$typeof === REACT_CONSUMER_TYPE ? " Did you accidentally pass the Context.Consumer instead?" : " However, it is set to an object with keys {" + Object.keys(_instance).join(", ") + "}.", error$jscomp$0(
            "%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s",
            getComponentNameFromType(Component) || "Component",
            lane
          ));
          "object" === typeof _instance && null !== _instance && (state = readContext(_instance));
          _instance = new Component(nextProps, state);
          if (workInProgress2.mode & 8) {
            setIsStrictModeForDevtools(true);
            try {
              _instance = new Component(nextProps, state);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          state = workInProgress2.memoizedState = null !== _instance.state && void 0 !== _instance.state ? _instance.state : null;
          _instance.updater = classComponentUpdater;
          workInProgress2.stateNode = _instance;
          _instance._reactInternals = workInProgress2;
          _instance._reactInternalInstance = fakeInternalInstance;
          "function" === typeof Component.getDerivedStateFromProps && null === state && (state = getComponentNameFromType(Component) || "Component", didWarnAboutUninitializedState.has(state) || (didWarnAboutUninitializedState.add(state), error$jscomp$0(
            "`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.",
            state,
            null === _instance.state ? "null" : "undefined",
            state
          )));
          if ("function" === typeof Component.getDerivedStateFromProps || "function" === typeof _instance.getSnapshotBeforeUpdate) {
            var foundWillUpdateName = lane = state = null;
            "function" === typeof _instance.componentWillMount && true !== _instance.componentWillMount.__suppressDeprecationWarning ? state = "componentWillMount" : "function" === typeof _instance.UNSAFE_componentWillMount && (state = "UNSAFE_componentWillMount");
            "function" === typeof _instance.componentWillReceiveProps && true !== _instance.componentWillReceiveProps.__suppressDeprecationWarning ? lane = "componentWillReceiveProps" : "function" === typeof _instance.UNSAFE_componentWillReceiveProps && (lane = "UNSAFE_componentWillReceiveProps");
            "function" === typeof _instance.componentWillUpdate && true !== _instance.componentWillUpdate.__suppressDeprecationWarning ? foundWillUpdateName = "componentWillUpdate" : "function" === typeof _instance.UNSAFE_componentWillUpdate && (foundWillUpdateName = "UNSAFE_componentWillUpdate");
            if (null !== state || null !== lane || null !== foundWillUpdateName) {
              _instance = getComponentNameFromType(Component) || "Component";
              var newApiName = "function" === typeof Component.getDerivedStateFromProps ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              didWarnAboutLegacyLifecyclesAndDerivedState.has(_instance) || (didWarnAboutLegacyLifecyclesAndDerivedState.add(_instance), error$jscomp$0(
                "Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://react.dev/link/unsafe-component-lifecycles",
                _instance,
                newApiName,
                null !== state ? "\n  " + state : "",
                null !== lane ? "\n  " + lane : "",
                null !== foundWillUpdateName ? "\n  " + foundWillUpdateName : ""
              ));
            }
          }
          _instance = workInProgress2.stateNode;
          state = getComponentNameFromType(Component) || "Component";
          _instance.render || (Component.prototype && "function" === typeof Component.prototype.render ? error$jscomp$0(
            "No `render` method found on the %s instance: did you accidentally return an object from the constructor?",
            state
          ) : error$jscomp$0(
            "No `render` method found on the %s instance: you may have forgotten to define `render`.",
            state
          ));
          !_instance.getInitialState || _instance.getInitialState.isReactClassApproved || _instance.state || error$jscomp$0(
            "getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",
            state
          );
          _instance.getDefaultProps && !_instance.getDefaultProps.isReactClassApproved && error$jscomp$0(
            "getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",
            state
          );
          _instance.propTypes && error$jscomp$0(
            "propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.",
            state
          );
          _instance.contextType && error$jscomp$0(
            "contextType was defined as an instance property on %s. Use a static property to define contextType instead.",
            state
          );
          Component.childContextTypes && error$jscomp$0(
            "%s uses the legacy childContextTypes API which was removed in React 19. Use React.createContext() instead.",
            state
          );
          Component.contextTypes && error$jscomp$0(
            "%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with static contextType instead.",
            state
          );
          "function" === typeof _instance.componentShouldUpdate && error$jscomp$0(
            "%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",
            state
          );
          Component.prototype && Component.prototype.isPureReactComponent && "undefined" !== typeof _instance.shouldComponentUpdate && error$jscomp$0(
            "%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.",
            getComponentNameFromType(Component) || "A pure component"
          );
          "function" === typeof _instance.componentDidUnmount && error$jscomp$0(
            "%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",
            state
          );
          "function" === typeof _instance.componentDidReceiveProps && error$jscomp$0(
            "%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().",
            state
          );
          "function" === typeof _instance.componentWillRecieveProps && error$jscomp$0(
            "%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",
            state
          );
          "function" === typeof _instance.UNSAFE_componentWillRecieveProps && error$jscomp$0(
            "%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",
            state
          );
          lane = _instance.props !== nextProps;
          void 0 !== _instance.props && lane && error$jscomp$0(
            "When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",
            state
          );
          _instance.defaultProps && error$jscomp$0(
            "Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.",
            state,
            state
          );
          "function" !== typeof _instance.getSnapshotBeforeUpdate || "function" === typeof _instance.componentDidUpdate || didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(Component) || (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(Component), error$jscomp$0(
            "%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.",
            getComponentNameFromType(Component)
          ));
          "function" === typeof _instance.getDerivedStateFromProps && error$jscomp$0(
            "%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
            state
          );
          "function" === typeof _instance.getDerivedStateFromError && error$jscomp$0(
            "%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
            state
          );
          "function" === typeof Component.getSnapshotBeforeUpdate && error$jscomp$0(
            "%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.",
            state
          );
          (lane = _instance.state) && ("object" !== typeof lane || isArrayImpl(lane)) && error$jscomp$0("%s.state: must be set to an object or null", state);
          "function" === typeof _instance.getChildContext && "object" !== typeof Component.childContextTypes && error$jscomp$0(
            "%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",
            state
          );
          _instance = workInProgress2.stateNode;
          _instance.props = nextProps;
          _instance.state = workInProgress2.memoizedState;
          _instance.refs = {};
          initializeUpdateQueue(workInProgress2);
          state = Component.contextType;
          _instance.context = "object" === typeof state && null !== state ? readContext(state) : emptyContextObject;
          _instance.state === nextProps && (state = getComponentNameFromType(Component) || "Component", didWarnAboutDirectlyAssigningPropsToState.has(state) || (didWarnAboutDirectlyAssigningPropsToState.add(state), error$jscomp$0(
            "%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.",
            state
          )));
          workInProgress2.mode & 8 && ReactStrictModeWarnings.recordLegacyContextWarning(
            workInProgress2,
            _instance
          );
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(
            workInProgress2,
            _instance
          );
          _instance.state = workInProgress2.memoizedState;
          state = Component.getDerivedStateFromProps;
          "function" === typeof state && (applyDerivedStateFromProps(
            workInProgress2,
            Component,
            state,
            nextProps
          ), _instance.state = workInProgress2.memoizedState);
          "function" === typeof Component.getDerivedStateFromProps || "function" === typeof _instance.getSnapshotBeforeUpdate || "function" !== typeof _instance.UNSAFE_componentWillMount && "function" !== typeof _instance.componentWillMount || (state = _instance.state, "function" === typeof _instance.componentWillMount && _instance.componentWillMount(), "function" === typeof _instance.UNSAFE_componentWillMount && _instance.UNSAFE_componentWillMount(), state !== _instance.state && (error$jscomp$0(
            "%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
            getComponentNameFromFiber(workInProgress2) || "Component"
          ), classComponentUpdater.enqueueReplaceState(
            _instance,
            _instance.state,
            null
          )), processUpdateQueue(workInProgress2, nextProps, _instance, renderLanes2), suspendIfUpdateReadFromEntangledAsyncAction(), _instance.state = workInProgress2.memoizedState);
          "function" === typeof _instance.componentDidMount && (workInProgress2.flags |= 4194308);
          0 !== (workInProgress2.mode & 16) && (workInProgress2.flags |= 67108864);
          _instance = true;
        } else if (null === current$jscomp$0) {
          _instance = workInProgress2.stateNode;
          var unresolvedOldProps = workInProgress2.memoizedProps;
          lane = resolveClassComponentProps(Component, unresolvedOldProps);
          _instance.props = lane;
          var oldContext = _instance.context;
          foundWillUpdateName = Component.contextType;
          state = emptyContextObject;
          "object" === typeof foundWillUpdateName && null !== foundWillUpdateName && (state = readContext(foundWillUpdateName));
          newApiName = Component.getDerivedStateFromProps;
          foundWillUpdateName = "function" === typeof newApiName || "function" === typeof _instance.getSnapshotBeforeUpdate;
          unresolvedOldProps = workInProgress2.pendingProps !== unresolvedOldProps;
          foundWillUpdateName || "function" !== typeof _instance.UNSAFE_componentWillReceiveProps && "function" !== typeof _instance.componentWillReceiveProps || (unresolvedOldProps || oldContext !== state) && callComponentWillReceiveProps(
            workInProgress2,
            _instance,
            nextProps,
            state
          );
          hasForceUpdate = false;
          var oldState = workInProgress2.memoizedState;
          _instance.state = oldState;
          processUpdateQueue(workInProgress2, nextProps, _instance, renderLanes2);
          suspendIfUpdateReadFromEntangledAsyncAction();
          oldContext = workInProgress2.memoizedState;
          unresolvedOldProps || oldState !== oldContext || hasForceUpdate ? ("function" === typeof newApiName && (applyDerivedStateFromProps(
            workInProgress2,
            Component,
            newApiName,
            nextProps
          ), oldContext = workInProgress2.memoizedState), (lane = hasForceUpdate || checkShouldComponentUpdate(
            workInProgress2,
            Component,
            lane,
            nextProps,
            oldState,
            oldContext,
            state
          )) ? (foundWillUpdateName || "function" !== typeof _instance.UNSAFE_componentWillMount && "function" !== typeof _instance.componentWillMount || ("function" === typeof _instance.componentWillMount && _instance.componentWillMount(), "function" === typeof _instance.UNSAFE_componentWillMount && _instance.UNSAFE_componentWillMount()), "function" === typeof _instance.componentDidMount && (workInProgress2.flags |= 4194308), 0 !== (workInProgress2.mode & 16) && (workInProgress2.flags |= 67108864)) : ("function" === typeof _instance.componentDidMount && (workInProgress2.flags |= 4194308), 0 !== (workInProgress2.mode & 16) && (workInProgress2.flags |= 67108864), workInProgress2.memoizedProps = nextProps, workInProgress2.memoizedState = oldContext), _instance.props = nextProps, _instance.state = oldContext, _instance.context = state, _instance = lane) : ("function" === typeof _instance.componentDidMount && (workInProgress2.flags |= 4194308), 0 !== (workInProgress2.mode & 16) && (workInProgress2.flags |= 67108864), _instance = false);
        } else {
          _instance = workInProgress2.stateNode;
          cloneUpdateQueue(current$jscomp$0, workInProgress2);
          state = workInProgress2.memoizedProps;
          foundWillUpdateName = resolveClassComponentProps(Component, state);
          _instance.props = foundWillUpdateName;
          newApiName = workInProgress2.pendingProps;
          oldState = _instance.context;
          oldContext = Component.contextType;
          lane = emptyContextObject;
          "object" === typeof oldContext && null !== oldContext && (lane = readContext(oldContext));
          unresolvedOldProps = Component.getDerivedStateFromProps;
          (oldContext = "function" === typeof unresolvedOldProps || "function" === typeof _instance.getSnapshotBeforeUpdate) || "function" !== typeof _instance.UNSAFE_componentWillReceiveProps && "function" !== typeof _instance.componentWillReceiveProps || (state !== newApiName || oldState !== lane) && callComponentWillReceiveProps(
            workInProgress2,
            _instance,
            nextProps,
            lane
          );
          hasForceUpdate = false;
          oldState = workInProgress2.memoizedState;
          _instance.state = oldState;
          processUpdateQueue(workInProgress2, nextProps, _instance, renderLanes2);
          suspendIfUpdateReadFromEntangledAsyncAction();
          var newState = workInProgress2.memoizedState;
          state !== newApiName || oldState !== newState || hasForceUpdate ? ("function" === typeof unresolvedOldProps && (applyDerivedStateFromProps(
            workInProgress2,
            Component,
            unresolvedOldProps,
            nextProps
          ), newState = workInProgress2.memoizedState), (foundWillUpdateName = hasForceUpdate || checkShouldComponentUpdate(
            workInProgress2,
            Component,
            foundWillUpdateName,
            nextProps,
            oldState,
            newState,
            lane
          ) || false) ? (oldContext || "function" !== typeof _instance.UNSAFE_componentWillUpdate && "function" !== typeof _instance.componentWillUpdate || ("function" === typeof _instance.componentWillUpdate && _instance.componentWillUpdate(nextProps, newState, lane), "function" === typeof _instance.UNSAFE_componentWillUpdate && _instance.UNSAFE_componentWillUpdate(
            nextProps,
            newState,
            lane
          )), "function" === typeof _instance.componentDidUpdate && (workInProgress2.flags |= 4), "function" === typeof _instance.getSnapshotBeforeUpdate && (workInProgress2.flags |= 1024)) : ("function" !== typeof _instance.componentDidUpdate || state === current$jscomp$0.memoizedProps && oldState === current$jscomp$0.memoizedState || (workInProgress2.flags |= 4), "function" !== typeof _instance.getSnapshotBeforeUpdate || state === current$jscomp$0.memoizedProps && oldState === current$jscomp$0.memoizedState || (workInProgress2.flags |= 1024), workInProgress2.memoizedProps = nextProps, workInProgress2.memoizedState = newState), _instance.props = nextProps, _instance.state = newState, _instance.context = lane, _instance = foundWillUpdateName) : ("function" !== typeof _instance.componentDidUpdate || state === current$jscomp$0.memoizedProps && oldState === current$jscomp$0.memoizedState || (workInProgress2.flags |= 4), "function" !== typeof _instance.getSnapshotBeforeUpdate || state === current$jscomp$0.memoizedProps && oldState === current$jscomp$0.memoizedState || (workInProgress2.flags |= 1024), _instance = false);
        }
        lane = _instance;
        markRef(current$jscomp$0, workInProgress2);
        state = 0 !== (workInProgress2.flags & 128);
        if (lane || state) {
          lane = workInProgress2.stateNode;
          ReactSharedInternals.getCurrentStack = null === workInProgress2 ? null : getCurrentFiberStackInDev;
          isRendering = false;
          current = workInProgress2;
          if (state && "function" !== typeof Component.getDerivedStateFromError)
            Component = null, profilerStartTime = -1;
          else {
            markComponentRenderStarted(workInProgress2);
            Component = callRenderInDEV(lane);
            if (workInProgress2.mode & 8) {
              setIsStrictModeForDevtools(true);
              try {
                callRenderInDEV(lane);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            markComponentRenderStopped();
          }
          workInProgress2.flags |= 1;
          null !== current$jscomp$0 && state ? (workInProgress2.child = reconcileChildFibers(
            workInProgress2,
            current$jscomp$0.child,
            null,
            renderLanes2
          ), workInProgress2.child = reconcileChildFibers(
            workInProgress2,
            null,
            Component,
            renderLanes2
          )) : reconcileChildren(
            current$jscomp$0,
            workInProgress2,
            Component,
            renderLanes2
          );
          workInProgress2.memoizedState = lane.state;
          current$jscomp$0 = workInProgress2.child;
        } else
          current$jscomp$0 = bailoutOnAlreadyFinishedWork(
            current$jscomp$0,
            workInProgress2,
            renderLanes2
          );
        renderLanes2 = workInProgress2.stateNode;
        _instance && renderLanes2.props !== nextProps && (didWarnAboutReassigningProps || error$jscomp$0(
          "It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.",
          getComponentNameFromFiber(workInProgress2) || "a component"
        ), didWarnAboutReassigningProps = true);
        return current$jscomp$0;
      }
      function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2) {
        resetHydrationState();
        workInProgress2.flags |= 256;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function validateFunctionComponentInDev(workInProgress2, Component) {
        Component && Component.childContextTypes && error$jscomp$0(
          "childContextTypes cannot be defined on a function component.\n  %s.childContextTypes = ...",
          Component.displayName || Component.name || "Component"
        );
        "function" === typeof Component.getDerivedStateFromProps && (workInProgress2 = getComponentNameFromType(Component) || "Unknown", didWarnAboutGetDerivedStateOnFunctionComponent[workInProgress2] || (error$jscomp$0(
          "%s: Function components do not support getDerivedStateFromProps.",
          workInProgress2
        ), didWarnAboutGetDerivedStateOnFunctionComponent[workInProgress2] = true));
        "object" === typeof Component.contextType && null !== Component.contextType && (Component = getComponentNameFromType(Component) || "Unknown", didWarnAboutContextTypeOnFunctionComponent[Component] || (error$jscomp$0(
          "%s: Function components do not support contextType.",
          Component
        ), didWarnAboutContextTypeOnFunctionComponent[Component] = true));
      }
      function mountSuspenseOffscreenState(renderLanes2) {
        return { baseLanes: renderLanes2, cachePool: getSuspendedCache() };
      }
      function getRemainingWorkInPrimaryTree(current2, primaryTreeDidDefer, renderLanes2) {
        current2 = null !== current2 ? current2.childLanes & ~renderLanes2 : 0;
        primaryTreeDidDefer && (current2 |= workInProgressDeferredLane);
        return current2;
      }
      function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
        var JSCompiler_object_inline_componentStack_2343;
        var JSCompiler_object_inline_stack_2342 = workInProgress2.pendingProps;
        shouldSuspendImpl(workInProgress2) && (workInProgress2.flags |= 128);
        var JSCompiler_object_inline_message_2340 = false;
        var didSuspend = 0 !== (workInProgress2.flags & 128);
        (JSCompiler_object_inline_componentStack_2343 = didSuspend) || (JSCompiler_object_inline_componentStack_2343 = null !== current2 && null === current2.memoizedState ? false : 0 !== (suspenseStackCursor.current & ForceSuspenseFallback));
        JSCompiler_object_inline_componentStack_2343 && (JSCompiler_object_inline_message_2340 = true, workInProgress2.flags &= -129);
        JSCompiler_object_inline_componentStack_2343 = 0 !== (workInProgress2.flags & 32);
        workInProgress2.flags &= -33;
        if (null === current2) {
          if (isHydrating) {
            JSCompiler_object_inline_message_2340 ? pushPrimaryTreeSuspenseHandler(workInProgress2) : reuseSuspenseHandlerOnStack(workInProgress2);
            if (isHydrating) {
              var JSCompiler_object_inline_digest_2341 = nextHydratableInstance;
              var JSCompiler_temp;
              if (!(JSCompiler_temp = !JSCompiler_object_inline_digest_2341)) {
                c: {
                  var instance = JSCompiler_object_inline_digest_2341;
                  for (JSCompiler_temp = rootOrSingletonContext; 8 !== instance.nodeType; ) {
                    if (!JSCompiler_temp) {
                      JSCompiler_temp = null;
                      break c;
                    }
                    instance = getNextHydratable(instance.nextSibling);
                    if (null === instance) {
                      JSCompiler_temp = null;
                      break c;
                    }
                  }
                  JSCompiler_temp = instance;
                }
                null !== JSCompiler_temp ? (warnIfNotHydrating(), workInProgress2.memoizedState = {
                  dehydrated: JSCompiler_temp,
                  treeContext: null !== treeContextProvider ? { id: treeContextId, overflow: treeContextOverflow } : null,
                  retryLane: OffscreenLane
                }, instance = createFiber(18, null, null, 0), instance.stateNode = JSCompiler_temp, instance.return = workInProgress2, workInProgress2.child = instance, hydrationParentFiber = workInProgress2, nextHydratableInstance = null, JSCompiler_temp = true) : JSCompiler_temp = false;
                JSCompiler_temp = !JSCompiler_temp;
              }
              JSCompiler_temp && (warnNonHydratedInstance(
                workInProgress2,
                JSCompiler_object_inline_digest_2341
              ), throwOnHydrationMismatch(workInProgress2));
            }
            JSCompiler_object_inline_digest_2341 = workInProgress2.memoizedState;
            if (null !== JSCompiler_object_inline_digest_2341 && (JSCompiler_object_inline_digest_2341 = JSCompiler_object_inline_digest_2341.dehydrated, null !== JSCompiler_object_inline_digest_2341))
              return JSCompiler_object_inline_digest_2341.data === SUSPENSE_FALLBACK_START_DATA ? workInProgress2.lanes = DefaultHydrationLane : workInProgress2.lanes = OffscreenLane, null;
            popSuspenseHandler(workInProgress2);
          }
          JSCompiler_object_inline_digest_2341 = JSCompiler_object_inline_stack_2342.children;
          JSCompiler_temp = JSCompiler_object_inline_stack_2342.fallback;
          if (JSCompiler_object_inline_message_2340)
            return reuseSuspenseHandlerOnStack(workInProgress2), JSCompiler_object_inline_stack_2342 = mountSuspenseFallbackChildren(
              workInProgress2,
              JSCompiler_object_inline_digest_2341,
              JSCompiler_temp,
              renderLanes2
            ), JSCompiler_object_inline_message_2340 = workInProgress2.child, JSCompiler_object_inline_message_2340.memoizedState = mountSuspenseOffscreenState(renderLanes2), JSCompiler_object_inline_message_2340.childLanes = getRemainingWorkInPrimaryTree(
              current2,
              JSCompiler_object_inline_componentStack_2343,
              renderLanes2
            ), workInProgress2.memoizedState = SUSPENDED_MARKER, JSCompiler_object_inline_stack_2342;
          if ("number" === typeof JSCompiler_object_inline_stack_2342.unstable_expectedLoadTime)
            return reuseSuspenseHandlerOnStack(workInProgress2), JSCompiler_object_inline_stack_2342 = mountSuspenseFallbackChildren(
              workInProgress2,
              JSCompiler_object_inline_digest_2341,
              JSCompiler_temp,
              renderLanes2
            ), JSCompiler_object_inline_message_2340 = workInProgress2.child, JSCompiler_object_inline_message_2340.memoizedState = mountSuspenseOffscreenState(renderLanes2), JSCompiler_object_inline_message_2340.childLanes = getRemainingWorkInPrimaryTree(
              current2,
              JSCompiler_object_inline_componentStack_2343,
              renderLanes2
            ), workInProgress2.memoizedState = SUSPENDED_MARKER, workInProgress2.lanes = 4194304, JSCompiler_object_inline_stack_2342;
          pushPrimaryTreeSuspenseHandler(workInProgress2);
          return mountSuspensePrimaryChildren(
            workInProgress2,
            JSCompiler_object_inline_digest_2341
          );
        }
        var prevState = current2.memoizedState;
        if (null !== prevState && (JSCompiler_object_inline_digest_2341 = prevState.dehydrated, null !== JSCompiler_object_inline_digest_2341)) {
          if (didSuspend)
            workInProgress2.flags & 256 ? (pushPrimaryTreeSuspenseHandler(workInProgress2), workInProgress2.flags &= -257, workInProgress2 = retrySuspenseComponentWithoutHydrating(
              current2,
              workInProgress2,
              renderLanes2
            )) : null !== workInProgress2.memoizedState ? (reuseSuspenseHandlerOnStack(workInProgress2), workInProgress2.child = current2.child, workInProgress2.flags |= 128, workInProgress2 = null) : (reuseSuspenseHandlerOnStack(workInProgress2), JSCompiler_object_inline_message_2340 = JSCompiler_object_inline_stack_2342.fallback, JSCompiler_object_inline_digest_2341 = workInProgress2.mode, JSCompiler_object_inline_stack_2342 = mountWorkInProgressOffscreenFiber(
              {
                mode: "visible",
                children: JSCompiler_object_inline_stack_2342.children
              },
              JSCompiler_object_inline_digest_2341
            ), JSCompiler_object_inline_message_2340 = createFiberFromFragment(
              JSCompiler_object_inline_message_2340,
              JSCompiler_object_inline_digest_2341,
              renderLanes2,
              null
            ), JSCompiler_object_inline_message_2340.flags |= 2, JSCompiler_object_inline_stack_2342.return = workInProgress2, JSCompiler_object_inline_message_2340.return = workInProgress2, JSCompiler_object_inline_stack_2342.sibling = JSCompiler_object_inline_message_2340, workInProgress2.child = JSCompiler_object_inline_stack_2342, reconcileChildFibers(
              workInProgress2,
              current2.child,
              null,
              renderLanes2
            ), JSCompiler_object_inline_stack_2342 = workInProgress2.child, JSCompiler_object_inline_stack_2342.memoizedState = mountSuspenseOffscreenState(renderLanes2), JSCompiler_object_inline_stack_2342.childLanes = getRemainingWorkInPrimaryTree(
              current2,
              JSCompiler_object_inline_componentStack_2343,
              renderLanes2
            ), workInProgress2.memoizedState = SUSPENDED_MARKER, workInProgress2 = JSCompiler_object_inline_message_2340);
          else if (pushPrimaryTreeSuspenseHandler(workInProgress2), isHydrating && error$jscomp$0(
            "We should not be hydrating here. This is a bug in React. Please file a bug."
          ), JSCompiler_object_inline_digest_2341.data === SUSPENSE_FALLBACK_START_DATA) {
            JSCompiler_object_inline_componentStack_2343 = JSCompiler_object_inline_digest_2341.nextSibling && JSCompiler_object_inline_digest_2341.nextSibling.dataset;
            if (JSCompiler_object_inline_componentStack_2343) {
              JSCompiler_temp = JSCompiler_object_inline_componentStack_2343.dgst;
              var message = JSCompiler_object_inline_componentStack_2343.msg;
              instance = JSCompiler_object_inline_componentStack_2343.stck;
              var componentStack = JSCompiler_object_inline_componentStack_2343.cstck;
            }
            JSCompiler_object_inline_message_2340 = message;
            JSCompiler_object_inline_digest_2341 = JSCompiler_temp;
            JSCompiler_object_inline_stack_2342 = instance;
            JSCompiler_object_inline_componentStack_2343 = componentStack;
            "POSTPONE" !== JSCompiler_object_inline_digest_2341 && (JSCompiler_object_inline_message_2340 = JSCompiler_object_inline_message_2340 ? Error(JSCompiler_object_inline_message_2340) : Error(
              "The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."
            ), JSCompiler_object_inline_message_2340.stack = JSCompiler_object_inline_stack_2342 || "", JSCompiler_object_inline_message_2340.digest = JSCompiler_object_inline_digest_2341, JSCompiler_object_inline_componentStack_2343 = void 0 === JSCompiler_object_inline_componentStack_2343 ? null : JSCompiler_object_inline_componentStack_2343, "string" === typeof JSCompiler_object_inline_componentStack_2343 && CapturedStacks.set(
              JSCompiler_object_inline_message_2340,
              JSCompiler_object_inline_componentStack_2343
            ), queueHydrationError({
              value: JSCompiler_object_inline_message_2340,
              source: null,
              stack: JSCompiler_object_inline_componentStack_2343
            }));
            workInProgress2 = retrySuspenseComponentWithoutHydrating(
              current2,
              workInProgress2,
              renderLanes2
            );
          } else if (JSCompiler_object_inline_componentStack_2343 = 0 !== (renderLanes2 & current2.childLanes), didReceiveUpdate || JSCompiler_object_inline_componentStack_2343) {
            JSCompiler_object_inline_componentStack_2343 = workInProgressRoot;
            if (null !== JSCompiler_object_inline_componentStack_2343) {
              JSCompiler_object_inline_stack_2342 = renderLanes2 & -renderLanes2;
              if (0 !== (JSCompiler_object_inline_stack_2342 & SyncUpdateLanes))
                JSCompiler_object_inline_stack_2342 = SyncHydrationLane;
              else
                switch (JSCompiler_object_inline_stack_2342) {
                  case SyncLane:
                    JSCompiler_object_inline_stack_2342 = SyncHydrationLane;
                    break;
                  case InputContinuousLane:
                    JSCompiler_object_inline_stack_2342 = InputContinuousHydrationLane;
                    break;
                  case DefaultLane:
                    JSCompiler_object_inline_stack_2342 = DefaultHydrationLane;
                    break;
                  case 128:
                  case 256:
                  case 512:
                  case 1024:
                  case 2048:
                  case 4096:
                  case 8192:
                  case 16384:
                  case 32768:
                  case 65536:
                  case 131072:
                  case 262144:
                  case 524288:
                  case 1048576:
                  case 2097152:
                  case 4194304:
                  case 8388608:
                  case 16777216:
                  case 33554432:
                    JSCompiler_object_inline_stack_2342 = TransitionHydrationLane;
                    break;
                  case IdleLane:
                    JSCompiler_object_inline_stack_2342 = IdleHydrationLane;
                    break;
                  default:
                    JSCompiler_object_inline_stack_2342 = 0;
                }
              JSCompiler_object_inline_stack_2342 = 0 !== (JSCompiler_object_inline_stack_2342 & (JSCompiler_object_inline_componentStack_2343.suspendedLanes | renderLanes2)) ? 0 : JSCompiler_object_inline_stack_2342;
              if (0 !== JSCompiler_object_inline_stack_2342 && JSCompiler_object_inline_stack_2342 !== prevState.retryLane)
                throw prevState.retryLane = JSCompiler_object_inline_stack_2342, enqueueConcurrentRenderForLane(
                  current2,
                  JSCompiler_object_inline_stack_2342
                ), scheduleUpdateOnFiber(
                  JSCompiler_object_inline_componentStack_2343,
                  current2,
                  JSCompiler_object_inline_stack_2342
                ), SelectiveHydrationException;
            }
            JSCompiler_object_inline_digest_2341.data === SUSPENSE_PENDING_START_DATA || renderDidSuspendDelayIfPossible();
            workInProgress2 = retrySuspenseComponentWithoutHydrating(
              current2,
              workInProgress2,
              renderLanes2
            );
          } else
            JSCompiler_object_inline_digest_2341.data === SUSPENSE_PENDING_START_DATA ? (workInProgress2.flags |= 128, workInProgress2.child = current2.child, workInProgress2 = retryDehydratedSuspenseBoundary.bind(
              null,
              current2
            ), JSCompiler_object_inline_digest_2341._reactRetry = workInProgress2, workInProgress2 = null) : (current2 = prevState.treeContext, nextHydratableInstance = getNextHydratable(
              JSCompiler_object_inline_digest_2341.nextSibling
            ), hydrationParentFiber = workInProgress2, isHydrating = true, hydrationErrors = null, didSuspendOrErrorDEV = false, hydrationDiffRootDEV = null, rootOrSingletonContext = false, null !== current2 && (warnIfNotHydrating(), idStack[idStackIndex++] = treeContextId, idStack[idStackIndex++] = treeContextOverflow, idStack[idStackIndex++] = treeContextProvider, treeContextId = current2.id, treeContextOverflow = current2.overflow, treeContextProvider = workInProgress2), workInProgress2 = mountSuspensePrimaryChildren(
              workInProgress2,
              JSCompiler_object_inline_stack_2342.children
            ), workInProgress2.flags |= 4096);
          return workInProgress2;
        }
        if (JSCompiler_object_inline_message_2340)
          return reuseSuspenseHandlerOnStack(workInProgress2), JSCompiler_object_inline_message_2340 = JSCompiler_object_inline_stack_2342.fallback, JSCompiler_object_inline_digest_2341 = workInProgress2.mode, JSCompiler_temp = current2.child, instance = JSCompiler_temp.sibling, JSCompiler_object_inline_stack_2342 = createWorkInProgress(
            JSCompiler_temp,
            {
              mode: "hidden",
              children: JSCompiler_object_inline_stack_2342.children
            }
          ), JSCompiler_object_inline_stack_2342.subtreeFlags = JSCompiler_temp.subtreeFlags & 31457280, null !== instance ? JSCompiler_object_inline_message_2340 = createWorkInProgress(
            instance,
            JSCompiler_object_inline_message_2340
          ) : (JSCompiler_object_inline_message_2340 = createFiberFromFragment(
            JSCompiler_object_inline_message_2340,
            JSCompiler_object_inline_digest_2341,
            renderLanes2,
            null
          ), JSCompiler_object_inline_message_2340.flags |= 2), JSCompiler_object_inline_message_2340.return = workInProgress2, JSCompiler_object_inline_stack_2342.return = workInProgress2, JSCompiler_object_inline_stack_2342.sibling = JSCompiler_object_inline_message_2340, workInProgress2.child = JSCompiler_object_inline_stack_2342, JSCompiler_object_inline_stack_2342 = JSCompiler_object_inline_message_2340, JSCompiler_object_inline_message_2340 = workInProgress2.child, JSCompiler_object_inline_digest_2341 = current2.child.memoizedState, null === JSCompiler_object_inline_digest_2341 ? JSCompiler_object_inline_digest_2341 = mountSuspenseOffscreenState(renderLanes2) : (JSCompiler_temp = JSCompiler_object_inline_digest_2341.cachePool, null !== JSCompiler_temp ? (instance = CacheContext._currentValue, JSCompiler_temp = JSCompiler_temp.parent !== instance ? { parent: instance, pool: instance } : JSCompiler_temp) : JSCompiler_temp = getSuspendedCache(), JSCompiler_object_inline_digest_2341 = {
            baseLanes: JSCompiler_object_inline_digest_2341.baseLanes | renderLanes2,
            cachePool: JSCompiler_temp
          }), JSCompiler_object_inline_message_2340.memoizedState = JSCompiler_object_inline_digest_2341, JSCompiler_object_inline_message_2340.childLanes = getRemainingWorkInPrimaryTree(
            current2,
            JSCompiler_object_inline_componentStack_2343,
            renderLanes2
          ), workInProgress2.memoizedState = SUSPENDED_MARKER, JSCompiler_object_inline_stack_2342;
        pushPrimaryTreeSuspenseHandler(workInProgress2);
        renderLanes2 = current2.child;
        current2 = renderLanes2.sibling;
        renderLanes2 = createWorkInProgress(renderLanes2, {
          mode: "visible",
          children: JSCompiler_object_inline_stack_2342.children
        });
        renderLanes2.return = workInProgress2;
        renderLanes2.sibling = null;
        null !== current2 && (JSCompiler_object_inline_componentStack_2343 = workInProgress2.deletions, null === JSCompiler_object_inline_componentStack_2343 ? (workInProgress2.deletions = [current2], workInProgress2.flags |= 16) : JSCompiler_object_inline_componentStack_2343.push(current2));
        workInProgress2.child = renderLanes2;
        workInProgress2.memoizedState = null;
        return renderLanes2;
      }
      function mountSuspensePrimaryChildren(workInProgress2, primaryChildren) {
        primaryChildren = mountWorkInProgressOffscreenFiber(
          { mode: "visible", children: primaryChildren },
          workInProgress2.mode
        );
        primaryChildren.return = workInProgress2;
        return workInProgress2.child = primaryChildren;
      }
      function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        primaryChildren = mountWorkInProgressOffscreenFiber(
          { mode: "hidden", children: primaryChildren },
          mode
        );
        fallbackChildren = createFiberFromFragment(
          fallbackChildren,
          mode,
          renderLanes2,
          null
        );
        primaryChildren.return = workInProgress2;
        fallbackChildren.return = workInProgress2;
        primaryChildren.sibling = fallbackChildren;
        workInProgress2.child = primaryChildren;
        return fallbackChildren;
      }
      function mountWorkInProgressOffscreenFiber(offscreenProps, mode) {
        return createFiberFromOffscreen(offscreenProps, mode, 0, null);
      }
      function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2) {
        reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        current2 = mountSuspensePrimaryChildren(
          workInProgress2,
          workInProgress2.pendingProps.children
        );
        current2.flags |= 2;
        workInProgress2.memoizedState = null;
        return current2;
      }
      function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
        fiber.lanes |= renderLanes2;
        var alternate = fiber.alternate;
        null !== alternate && (alternate.lanes |= renderLanes2);
        scheduleContextWorkOnParentPath(
          fiber.return,
          renderLanes2,
          propagationRoot
        );
      }
      function validateSuspenseListNestedChild(childSlot, index) {
        var isAnArray = isArrayImpl(childSlot);
        childSlot = !isAnArray && "function" === typeof getIteratorFn(childSlot);
        return isAnArray || childSlot ? (isAnArray = isAnArray ? "array" : "iterable", error$jscomp$0(
          "A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>",
          isAnArray,
          index,
          isAnArray
        ), false) : true;
      }
      function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress2.memoizedState;
        null === renderState ? workInProgress2.memoizedState = {
          isBackwards,
          rendering: null,
          renderingStartTime: 0,
          last: lastContentRow,
          tail,
          tailMode
        } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode);
      }
      function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps, revealOrder = nextProps.revealOrder, tailMode = nextProps.tail;
        nextProps = nextProps.children;
        if (void 0 !== revealOrder && "forwards" !== revealOrder && "backwards" !== revealOrder && "together" !== revealOrder && !didWarnAboutRevealOrder[revealOrder])
          if (didWarnAboutRevealOrder[revealOrder] = true, "string" === typeof revealOrder)
            switch (revealOrder.toLowerCase()) {
              case "together":
              case "forwards":
              case "backwards":
                error$jscomp$0(
                  '"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.',
                  revealOrder,
                  revealOrder.toLowerCase()
                );
                break;
              case "forward":
              case "backward":
                error$jscomp$0(
                  '"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.',
                  revealOrder,
                  revealOrder.toLowerCase()
                );
                break;
              default:
                error$jscomp$0(
                  '"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
                  revealOrder
                );
            }
          else
            error$jscomp$0(
              '%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
              revealOrder
            );
        void 0 === tailMode || didWarnAboutTailOptions[tailMode] || ("collapsed" !== tailMode && "hidden" !== tailMode ? (didWarnAboutTailOptions[tailMode] = true, error$jscomp$0(
          '"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?',
          tailMode
        )) : "forwards" !== revealOrder && "backwards" !== revealOrder && (didWarnAboutTailOptions[tailMode] = true, error$jscomp$0(
          '<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?',
          tailMode
        )));
        a:
          if (("forwards" === revealOrder || "backwards" === revealOrder) && void 0 !== nextProps && null !== nextProps && false !== nextProps)
            if (isArrayImpl(nextProps))
              for (var i = 0; i < nextProps.length; i++) {
                if (!validateSuspenseListNestedChild(nextProps[i], i))
                  break a;
              }
            else if (i = getIteratorFn(nextProps), "function" === typeof i) {
              if (i = i.call(nextProps))
                for (var step = i.next(), _i = 0; !step.done; step = i.next()) {
                  if (!validateSuspenseListNestedChild(step.value, _i))
                    break a;
                  _i++;
                }
            } else
              error$jscomp$0(
                'A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?',
                revealOrder
              );
        reconcileChildren(current2, workInProgress2, nextProps, renderLanes2);
        nextProps = suspenseStackCursor.current;
        if (0 !== (nextProps & ForceSuspenseFallback))
          nextProps = nextProps & SubtreeSuspenseContextMask | ForceSuspenseFallback, workInProgress2.flags |= 128;
        else {
          if (null !== current2 && 0 !== (current2.flags & 128))
            a:
              for (current2 = workInProgress2.child; null !== current2; ) {
                if (13 === current2.tag)
                  null !== current2.memoizedState && scheduleSuspenseWorkOnFiber(
                    current2,
                    renderLanes2,
                    workInProgress2
                  );
                else if (19 === current2.tag)
                  scheduleSuspenseWorkOnFiber(current2, renderLanes2, workInProgress2);
                else if (null !== current2.child) {
                  current2.child.return = current2;
                  current2 = current2.child;
                  continue;
                }
                if (current2 === workInProgress2)
                  break a;
                for (; null === current2.sibling; ) {
                  if (null === current2.return || current2.return === workInProgress2)
                    break a;
                  current2 = current2.return;
                }
                current2.sibling.return = current2.return;
                current2 = current2.sibling;
              }
          nextProps &= SubtreeSuspenseContextMask;
        }
        push(suspenseStackCursor, nextProps, workInProgress2);
        switch (revealOrder) {
          case "forwards":
            renderLanes2 = workInProgress2.child;
            for (revealOrder = null; null !== renderLanes2; )
              current2 = renderLanes2.alternate, null !== current2 && null === findFirstSuspended(current2) && (revealOrder = renderLanes2), renderLanes2 = renderLanes2.sibling;
            renderLanes2 = revealOrder;
            null === renderLanes2 ? (revealOrder = workInProgress2.child, workInProgress2.child = null) : (revealOrder = renderLanes2.sibling, renderLanes2.sibling = null);
            initSuspenseListRenderState(
              workInProgress2,
              false,
              revealOrder,
              renderLanes2,
              tailMode
            );
            break;
          case "backwards":
            renderLanes2 = null;
            revealOrder = workInProgress2.child;
            for (workInProgress2.child = null; null !== revealOrder; ) {
              current2 = revealOrder.alternate;
              if (null !== current2 && null === findFirstSuspended(current2)) {
                workInProgress2.child = revealOrder;
                break;
              }
              current2 = revealOrder.sibling;
              revealOrder.sibling = renderLanes2;
              renderLanes2 = revealOrder;
              revealOrder = current2;
            }
            initSuspenseListRenderState(
              workInProgress2,
              true,
              renderLanes2,
              null,
              tailMode
            );
            break;
          case "together":
            initSuspenseListRenderState(workInProgress2, false, null, null, void 0);
            break;
          default:
            workInProgress2.memoizedState = null;
        }
        return workInProgress2.child;
      }
      function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
        null !== current2 && (workInProgress2.dependencies = current2.dependencies);
        profilerStartTime = -1;
        workInProgressRootSkippedLanes |= workInProgress2.lanes;
        if (0 === (renderLanes2 & workInProgress2.childLanes))
          return null;
        if (null !== current2 && workInProgress2.child !== current2.child)
          throw Error("Resuming work not yet implemented.");
        if (null !== workInProgress2.child) {
          current2 = workInProgress2.child;
          renderLanes2 = createWorkInProgress(current2, current2.pendingProps);
          workInProgress2.child = renderLanes2;
          for (renderLanes2.return = workInProgress2; null !== current2.sibling; )
            current2 = current2.sibling, renderLanes2 = renderLanes2.sibling = createWorkInProgress(current2, current2.pendingProps), renderLanes2.return = workInProgress2;
          renderLanes2.sibling = null;
        }
        return workInProgress2.child;
      }
      function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
        switch (workInProgress2.tag) {
          case 3:
            pushHostContainer(
              workInProgress2,
              workInProgress2.stateNode.containerInfo
            );
            pushProvider(
              workInProgress2,
              CacheContext,
              current2.memoizedState.cache
            );
            resetHydrationState();
            break;
          case 27:
          case 5:
            pushHostContext(workInProgress2);
            break;
          case 4:
            pushHostContainer(
              workInProgress2,
              workInProgress2.stateNode.containerInfo
            );
            break;
          case 10:
            pushProvider(
              workInProgress2,
              workInProgress2.type,
              workInProgress2.memoizedProps.value
            );
            break;
          case 12:
            0 !== (renderLanes2 & workInProgress2.childLanes) && (workInProgress2.flags |= 4);
            var stateNode = workInProgress2.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
            break;
          case 13:
            stateNode = workInProgress2.memoizedState;
            if (null !== stateNode) {
              if (null !== stateNode.dehydrated)
                return pushPrimaryTreeSuspenseHandler(workInProgress2), workInProgress2.flags |= 128, null;
              if (0 !== (renderLanes2 & workInProgress2.child.childLanes))
                return updateSuspenseComponent(
                  current2,
                  workInProgress2,
                  renderLanes2
                );
              pushPrimaryTreeSuspenseHandler(workInProgress2);
              current2 = bailoutOnAlreadyFinishedWork(
                current2,
                workInProgress2,
                renderLanes2
              );
              return null !== current2 ? current2.sibling : null;
            }
            pushPrimaryTreeSuspenseHandler(workInProgress2);
            break;
          case 19:
            stateNode = 0 !== (renderLanes2 & workInProgress2.childLanes);
            if (0 !== (current2.flags & 128)) {
              if (stateNode)
                return updateSuspenseListComponent(
                  current2,
                  workInProgress2,
                  renderLanes2
                );
              workInProgress2.flags |= 128;
            }
            var renderState = workInProgress2.memoizedState;
            null !== renderState && (renderState.rendering = null, renderState.tail = null, renderState.lastEffect = null);
            push(
              suspenseStackCursor,
              suspenseStackCursor.current,
              workInProgress2
            );
            if (stateNode)
              break;
            else
              return null;
          case 22:
          case 23:
            return workInProgress2.lanes = 0, updateOffscreenComponent(current2, workInProgress2, renderLanes2);
          case 24:
            pushProvider(
              workInProgress2,
              CacheContext,
              current2.memoizedState.cache
            );
        }
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      function beginWork(current2, workInProgress2, renderLanes2) {
        if (workInProgress2._debugNeedsRemount && null !== current2) {
          renderLanes2 = createFiberFromTypeAndProps(
            workInProgress2.type,
            workInProgress2.key,
            workInProgress2.pendingProps,
            workInProgress2._debugOwner || null,
            workInProgress2.mode,
            workInProgress2.lanes
          );
          renderLanes2._debugStack = workInProgress2._debugStack;
          renderLanes2._debugTask = workInProgress2._debugTask;
          var returnFiber = workInProgress2.return;
          if (null === returnFiber)
            throw Error("Cannot swap the root fiber.");
          current2.alternate = null;
          workInProgress2.alternate = null;
          renderLanes2.index = workInProgress2.index;
          renderLanes2.sibling = workInProgress2.sibling;
          renderLanes2.return = workInProgress2.return;
          renderLanes2.ref = workInProgress2.ref;
          renderLanes2._debugInfo = workInProgress2._debugInfo;
          if (workInProgress2 === returnFiber.child)
            returnFiber.child = renderLanes2;
          else {
            var prevSibling = returnFiber.child;
            if (null === prevSibling)
              throw Error("Expected parent to have a child.");
            for (; prevSibling.sibling !== workInProgress2; )
              if (prevSibling = prevSibling.sibling, null === prevSibling)
                throw Error("Expected to find the previous sibling.");
            prevSibling.sibling = renderLanes2;
          }
          workInProgress2 = returnFiber.deletions;
          null === workInProgress2 ? (returnFiber.deletions = [current2], returnFiber.flags |= 16) : workInProgress2.push(current2);
          renderLanes2.flags |= 2;
          return renderLanes2;
        }
        if (null !== current2)
          if (current2.memoizedProps !== workInProgress2.pendingProps || workInProgress2.type !== current2.type)
            didReceiveUpdate = true;
          else {
            if (0 === (current2.lanes & renderLanes2) && 0 === (workInProgress2.flags & 128))
              return didReceiveUpdate = false, attemptEarlyBailoutIfNoScheduledUpdate(
                current2,
                workInProgress2,
                renderLanes2
              );
            didReceiveUpdate = 0 !== (current2.flags & 131072) ? true : false;
          }
        else {
          didReceiveUpdate = false;
          if (returnFiber = isHydrating)
            warnIfNotHydrating(), returnFiber = 0 !== (workInProgress2.flags & 1048576);
          returnFiber && (returnFiber = workInProgress2.index, warnIfNotHydrating(), pushTreeId(workInProgress2, treeForkCount, returnFiber));
        }
        workInProgress2.lanes = 0;
        switch (workInProgress2.tag) {
          case 16:
            a:
              if (returnFiber = workInProgress2.pendingProps, current2 = callLazyInitInDEV(workInProgress2.elementType), workInProgress2.type = current2, "function" === typeof current2)
                shouldConstruct(current2) ? (returnFiber = resolveClassComponentProps(
                  current2,
                  returnFiber
                ), workInProgress2.tag = 1, workInProgress2.type = current2 = resolveFunctionForHotReloading(current2), workInProgress2 = updateClassComponent(
                  null,
                  workInProgress2,
                  current2,
                  returnFiber,
                  renderLanes2
                )) : (workInProgress2.tag = 0, validateFunctionComponentInDev(workInProgress2, current2), workInProgress2.type = current2 = resolveFunctionForHotReloading(current2), workInProgress2 = updateFunctionComponent(
                  null,
                  workInProgress2,
                  current2,
                  returnFiber,
                  renderLanes2
                ));
              else {
                if (void 0 !== current2 && null !== current2) {
                  if (prevSibling = current2.$$typeof, prevSibling === REACT_FORWARD_REF_TYPE) {
                    workInProgress2.tag = 11;
                    workInProgress2.type = current2 = resolveForwardRefForHotReloading(current2);
                    workInProgress2 = updateForwardRef(
                      null,
                      workInProgress2,
                      current2,
                      returnFiber,
                      renderLanes2
                    );
                    break a;
                  } else if (prevSibling === REACT_MEMO_TYPE) {
                    workInProgress2.tag = 14;
                    workInProgress2 = updateMemoComponent(
                      null,
                      workInProgress2,
                      current2,
                      returnFiber,
                      renderLanes2
                    );
                    break a;
                  }
                }
                workInProgress2 = "";
                null !== current2 && "object" === typeof current2 && current2.$$typeof === REACT_LAZY_TYPE && (workInProgress2 = " Did you wrap a component in React.lazy() more than once?");
                throw Error(
                  "Element type is invalid. Received a promise that resolves to: " + current2 + ". Lazy element type must resolve to a class or function." + workInProgress2
                );
              }
            return workInProgress2;
          case 0:
            return updateFunctionComponent(
              current2,
              workInProgress2,
              workInProgress2.type,
              workInProgress2.pendingProps,
              renderLanes2
            );
          case 1:
            return returnFiber = workInProgress2.type, prevSibling = resolveClassComponentProps(
              returnFiber,
              workInProgress2.pendingProps
            ), updateClassComponent(
              current2,
              workInProgress2,
              returnFiber,
              prevSibling,
              renderLanes2
            );
          case 3:
            a: {
              pushHostContainer(
                workInProgress2,
                workInProgress2.stateNode.containerInfo
              );
              if (null === current2)
                throw Error(
                  "Should have a current fiber. This is a bug in React."
                );
              var nextProps = workInProgress2.pendingProps;
              prevSibling = workInProgress2.memoizedState;
              returnFiber = prevSibling.element;
              cloneUpdateQueue(current2, workInProgress2);
              processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
              var nextState = workInProgress2.memoizedState;
              nextProps = nextState.cache;
              pushProvider(workInProgress2, CacheContext, nextProps);
              nextProps !== prevSibling.cache && propagateContextChange(workInProgress2, CacheContext, renderLanes2);
              suspendIfUpdateReadFromEntangledAsyncAction();
              nextProps = nextState.element;
              if (prevSibling.isDehydrated)
                if (prevSibling = {
                  element: nextProps,
                  isDehydrated: false,
                  cache: nextState.cache
                }, workInProgress2.updateQueue.baseState = prevSibling, workInProgress2.memoizedState = prevSibling, workInProgress2.flags & 256) {
                  workInProgress2 = mountHostRootWithoutHydrating(
                    current2,
                    workInProgress2,
                    nextProps,
                    renderLanes2
                  );
                  break a;
                } else if (nextProps !== returnFiber) {
                  returnFiber = createCapturedValueAtFiber(
                    Error(
                      "This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."
                    ),
                    workInProgress2
                  );
                  queueHydrationError(returnFiber);
                  workInProgress2 = mountHostRootWithoutHydrating(
                    current2,
                    workInProgress2,
                    nextProps,
                    renderLanes2
                  );
                  break a;
                } else
                  for (nextHydratableInstance = getNextHydratable(
                    workInProgress2.stateNode.containerInfo.firstChild
                  ), hydrationParentFiber = workInProgress2, isHydrating = true, hydrationErrors = null, didSuspendOrErrorDEV = false, hydrationDiffRootDEV = null, rootOrSingletonContext = true, current2 = mountChildFibers(
                    workInProgress2,
                    null,
                    nextProps,
                    renderLanes2
                  ), workInProgress2.child = current2; current2; )
                    current2.flags = current2.flags & -3 | 4096, current2 = current2.sibling;
              else {
                resetHydrationState();
                if (nextProps === returnFiber) {
                  workInProgress2 = bailoutOnAlreadyFinishedWork(
                    current2,
                    workInProgress2,
                    renderLanes2
                  );
                  break a;
                }
                reconcileChildren(
                  current2,
                  workInProgress2,
                  nextProps,
                  renderLanes2
                );
              }
              workInProgress2 = workInProgress2.child;
            }
            return workInProgress2;
          case 26:
            return markRef(current2, workInProgress2), null === current2 ? (current2 = getResource(
              workInProgress2.type,
              null,
              workInProgress2.pendingProps,
              null
            )) ? workInProgress2.memoizedState = current2 : isHydrating || (current2 = workInProgress2.type, renderLanes2 = workInProgress2.pendingProps, returnFiber = requiredContext(
              rootInstanceStackCursor.current
            ), returnFiber = getOwnerDocumentFromRootContainer(
              returnFiber
            ).createElement(current2), returnFiber[internalInstanceKey] = workInProgress2, returnFiber[internalPropsKey] = renderLanes2, setInitialProperties(returnFiber, current2, renderLanes2), markNodeAsHoistable(returnFiber), workInProgress2.stateNode = returnFiber) : workInProgress2.memoizedState = getResource(
              workInProgress2.type,
              current2.memoizedProps,
              workInProgress2.pendingProps,
              current2.memoizedState
            ), null;
          case 27:
            return pushHostContext(workInProgress2), null === current2 && isHydrating && (prevSibling = requiredContext(rootInstanceStackCursor.current), returnFiber = getHostContext(), prevSibling = workInProgress2.stateNode = resolveSingletonInstance(
              workInProgress2.type,
              workInProgress2.pendingProps,
              prevSibling,
              returnFiber,
              false
            ), didSuspendOrErrorDEV || (returnFiber = diffHydratedProperties(
              prevSibling,
              workInProgress2.type,
              workInProgress2.pendingProps,
              returnFiber
            ), null !== returnFiber && (buildHydrationDiffNode(workInProgress2, 0).serverProps = returnFiber)), hydrationParentFiber = workInProgress2, rootOrSingletonContext = true, nextHydratableInstance = getNextHydratable(
              prevSibling.firstChild
            )), returnFiber = workInProgress2.pendingProps.children, null !== current2 || isHydrating ? reconcileChildren(
              current2,
              workInProgress2,
              returnFiber,
              renderLanes2
            ) : workInProgress2.child = reconcileChildFibers(
              workInProgress2,
              null,
              returnFiber,
              renderLanes2
            ), markRef(current2, workInProgress2), workInProgress2.child;
          case 5:
            return null === current2 && isHydrating && (nextProps = getHostContext(), returnFiber = validateDOMNesting(
              workInProgress2.type,
              nextProps.ancestorInfo
            ), prevSibling = nextHydratableInstance, (nextState = !prevSibling) || (nextState = canHydrateInstance(
              prevSibling,
              workInProgress2.type,
              workInProgress2.pendingProps,
              rootOrSingletonContext
            ), null !== nextState ? (workInProgress2.stateNode = nextState, didSuspendOrErrorDEV || (nextProps = diffHydratedProperties(
              nextState,
              workInProgress2.type,
              workInProgress2.pendingProps,
              nextProps
            ), null !== nextProps && (buildHydrationDiffNode(workInProgress2, 0).serverProps = nextProps)), hydrationParentFiber = workInProgress2, nextHydratableInstance = getNextHydratable(
              nextState.firstChild
            ), rootOrSingletonContext = false, nextProps = true) : nextProps = false, nextState = !nextProps), nextState && (returnFiber && warnNonHydratedInstance(workInProgress2, prevSibling), throwOnHydrationMismatch(workInProgress2))), pushHostContext(workInProgress2), prevSibling = workInProgress2.type, nextProps = workInProgress2.pendingProps, nextState = null !== current2 ? current2.memoizedProps : null, returnFiber = nextProps.children, shouldSetTextContent(prevSibling, nextProps) ? returnFiber = null : null !== nextState && shouldSetTextContent(prevSibling, nextState) && (workInProgress2.flags |= 32), null !== workInProgress2.memoizedState && (prevSibling = renderWithHooks(
              current2,
              workInProgress2,
              TransitionAwareHostComponent,
              null,
              null,
              renderLanes2
            ), HostTransitionContext._currentValue = prevSibling, didReceiveUpdate && null !== current2 && current2.memoizedState.memoizedState !== prevSibling && propagateContextChange(
              workInProgress2,
              HostTransitionContext,
              renderLanes2
            )), markRef(current2, workInProgress2), reconcileChildren(
              current2,
              workInProgress2,
              returnFiber,
              renderLanes2
            ), workInProgress2.child;
          case 6:
            return null === current2 && isHydrating && (current2 = workInProgress2.pendingProps, renderLanes2 = getHostContext().ancestorInfo.current, current2 = null != renderLanes2 ? validateTextNesting(current2, renderLanes2.tag) : true, renderLanes2 = nextHydratableInstance, (returnFiber = !renderLanes2) || (returnFiber = canHydrateTextInstance(
              renderLanes2,
              workInProgress2.pendingProps,
              rootOrSingletonContext
            ), null !== returnFiber ? (workInProgress2.stateNode = returnFiber, hydrationParentFiber = workInProgress2, nextHydratableInstance = null, returnFiber = true) : returnFiber = false, returnFiber = !returnFiber), returnFiber && (current2 && warnNonHydratedInstance(workInProgress2, renderLanes2), throwOnHydrationMismatch(workInProgress2))), null;
          case 13:
            return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
          case 4:
            return pushHostContainer(
              workInProgress2,
              workInProgress2.stateNode.containerInfo
            ), returnFiber = workInProgress2.pendingProps, null === current2 ? workInProgress2.child = reconcileChildFibers(
              workInProgress2,
              null,
              returnFiber,
              renderLanes2
            ) : reconcileChildren(
              current2,
              workInProgress2,
              returnFiber,
              renderLanes2
            ), workInProgress2.child;
          case 11:
            return updateForwardRef(
              current2,
              workInProgress2,
              workInProgress2.type,
              workInProgress2.pendingProps,
              renderLanes2
            );
          case 7:
            return reconcileChildren(
              current2,
              workInProgress2,
              workInProgress2.pendingProps,
              renderLanes2
            ), workInProgress2.child;
          case 8:
            return reconcileChildren(
              current2,
              workInProgress2,
              workInProgress2.pendingProps.children,
              renderLanes2
            ), workInProgress2.child;
          case 12:
            return workInProgress2.flags |= 4, returnFiber = workInProgress2.stateNode, returnFiber.effectDuration = 0, returnFiber.passiveEffectDuration = 0, reconcileChildren(
              current2,
              workInProgress2,
              workInProgress2.pendingProps.children,
              renderLanes2
            ), workInProgress2.child;
          case 10:
            a: {
              returnFiber = workInProgress2.type;
              prevSibling = workInProgress2.pendingProps;
              nextProps = workInProgress2.memoizedProps;
              nextState = prevSibling.value;
              "value" in prevSibling || hasWarnedAboutUsingNoValuePropOnContextProvider || (hasWarnedAboutUsingNoValuePropOnContextProvider = true, error$jscomp$0(
                "The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"
              ));
              pushProvider(workInProgress2, returnFiber, nextState);
              if (null !== nextProps)
                if (objectIs(nextProps.value, nextState)) {
                  if (nextProps.children === prevSibling.children) {
                    workInProgress2 = bailoutOnAlreadyFinishedWork(
                      current2,
                      workInProgress2,
                      renderLanes2
                    );
                    break a;
                  }
                } else
                  propagateContextChange(
                    workInProgress2,
                    returnFiber,
                    renderLanes2
                  );
              reconcileChildren(
                current2,
                workInProgress2,
                prevSibling.children,
                renderLanes2
              );
              workInProgress2 = workInProgress2.child;
            }
            return workInProgress2;
          case 9:
            return prevSibling = workInProgress2.type._context, returnFiber = workInProgress2.pendingProps.children, "function" !== typeof returnFiber && error$jscomp$0(
              "A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."
            ), prepareToReadContext(workInProgress2, renderLanes2), prevSibling = readContext(prevSibling), markComponentRenderStarted(workInProgress2), returnFiber = callComponentInDEV(
              returnFiber,
              prevSibling,
              void 0
            ), markComponentRenderStopped(), workInProgress2.flags |= 1, reconcileChildren(
              current2,
              workInProgress2,
              returnFiber,
              renderLanes2
            ), workInProgress2.child;
          case 14:
            return updateMemoComponent(
              current2,
              workInProgress2,
              workInProgress2.type,
              workInProgress2.pendingProps,
              renderLanes2
            );
          case 15:
            return updateSimpleMemoComponent(
              current2,
              workInProgress2,
              workInProgress2.type,
              workInProgress2.pendingProps,
              renderLanes2
            );
          case 19:
            return updateSuspenseListComponent(
              current2,
              workInProgress2,
              renderLanes2
            );
          case 22:
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
          case 24:
            return prepareToReadContext(workInProgress2, renderLanes2), returnFiber = readContext(CacheContext), null === current2 ? (prevSibling = peekCacheFromPool(), null === prevSibling && (prevSibling = workInProgressRoot, nextProps = createCache(), prevSibling.pooledCache = nextProps, retainCache(nextProps), null !== nextProps && (prevSibling.pooledCacheLanes |= renderLanes2), prevSibling = nextProps), workInProgress2.memoizedState = {
              parent: returnFiber,
              cache: prevSibling
            }, initializeUpdateQueue(workInProgress2), pushProvider(workInProgress2, CacheContext, prevSibling)) : (0 !== (current2.lanes & renderLanes2) && (cloneUpdateQueue(current2, workInProgress2), processUpdateQueue(workInProgress2, null, null, renderLanes2), suspendIfUpdateReadFromEntangledAsyncAction()), prevSibling = current2.memoizedState, nextProps = workInProgress2.memoizedState, prevSibling.parent !== returnFiber ? (prevSibling = {
              parent: returnFiber,
              cache: returnFiber
            }, workInProgress2.memoizedState = prevSibling, 0 === workInProgress2.lanes && (workInProgress2.memoizedState = workInProgress2.updateQueue.baseState = prevSibling), pushProvider(workInProgress2, CacheContext, returnFiber)) : (returnFiber = nextProps.cache, pushProvider(workInProgress2, CacheContext, returnFiber), returnFiber !== prevSibling.cache && propagateContextChange(
              workInProgress2,
              CacheContext,
              renderLanes2
            ))), reconcileChildren(
              current2,
              workInProgress2,
              workInProgress2.pendingProps.children,
              renderLanes2
            ), workInProgress2.child;
          case 29:
            throw workInProgress2.pendingProps;
        }
        throw Error(
          "Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue."
        );
      }
      function resetContextDependencies() {
        lastFullyObservedContext = lastContextDependency = currentlyRenderingFiber = null;
        isDisallowedContextReadInDEV = false;
      }
      function pushProvider(providerFiber, context, nextValue) {
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        push(rendererCursorDEV, context._currentRenderer, providerFiber);
        void 0 !== context._currentRenderer && null !== context._currentRenderer && context._currentRenderer !== rendererSigil && error$jscomp$0(
          "Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."
        );
        context._currentRenderer = rendererSigil;
      }
      function popProvider(context, providerFiber) {
        context._currentValue = valueCursor.current;
        var currentRenderer = rendererCursorDEV.current;
        pop(rendererCursorDEV, providerFiber);
        context._currentRenderer = currentRenderer;
        pop(valueCursor, providerFiber);
      }
      function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
        for (; null !== parent; ) {
          var alternate = parent.alternate;
          (parent.childLanes & renderLanes2) !== renderLanes2 ? (parent.childLanes |= renderLanes2, null !== alternate && (alternate.childLanes |= renderLanes2)) : null !== alternate && (alternate.childLanes & renderLanes2) !== renderLanes2 && (alternate.childLanes |= renderLanes2);
          if (parent === propagationRoot)
            break;
          parent = parent.return;
        }
        parent !== propagationRoot && error$jscomp$0(
          "Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue."
        );
      }
      function propagateContextChange(workInProgress2, context, renderLanes2) {
        var fiber = workInProgress2.child;
        null !== fiber && (fiber.return = workInProgress2);
        for (; null !== fiber; ) {
          var list = fiber.dependencies;
          if (null !== list) {
            var nextFiber = fiber.child;
            for (var dependency = list.firstContext; null !== dependency; ) {
              if (dependency.context === context) {
                if (1 === fiber.tag) {
                  dependency = createUpdate(renderLanes2 & -renderLanes2);
                  dependency.tag = ForceUpdate;
                  var updateQueue = fiber.updateQueue;
                  if (null !== updateQueue) {
                    updateQueue = updateQueue.shared;
                    var pending = updateQueue.pending;
                    null === pending ? dependency.next = dependency : (dependency.next = pending.next, pending.next = dependency);
                    updateQueue.pending = dependency;
                  }
                }
                fiber.lanes |= renderLanes2;
                dependency = fiber.alternate;
                null !== dependency && (dependency.lanes |= renderLanes2);
                scheduleContextWorkOnParentPath(
                  fiber.return,
                  renderLanes2,
                  workInProgress2
                );
                list.lanes |= renderLanes2;
                break;
              }
              dependency = dependency.next;
            }
          } else if (10 === fiber.tag)
            nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
          else if (18 === fiber.tag) {
            nextFiber = fiber.return;
            if (null === nextFiber)
              throw Error(
                "We just came from a parent so we must have had a parent. This is a bug in React."
              );
            nextFiber.lanes |= renderLanes2;
            list = nextFiber.alternate;
            null !== list && (list.lanes |= renderLanes2);
            scheduleContextWorkOnParentPath(
              nextFiber,
              renderLanes2,
              workInProgress2
            );
            nextFiber = fiber.sibling;
          } else
            nextFiber = fiber.child;
          if (null !== nextFiber)
            nextFiber.return = fiber;
          else
            for (nextFiber = fiber; null !== nextFiber; ) {
              if (nextFiber === workInProgress2) {
                nextFiber = null;
                break;
              }
              fiber = nextFiber.sibling;
              if (null !== fiber) {
                fiber.return = nextFiber.return;
                nextFiber = fiber;
                break;
              }
              nextFiber = nextFiber.return;
            }
          fiber = nextFiber;
        }
      }
      function prepareToReadContext(workInProgress2, renderLanes2) {
        currentlyRenderingFiber = workInProgress2;
        lastFullyObservedContext = lastContextDependency = null;
        workInProgress2 = workInProgress2.dependencies;
        null !== workInProgress2 && null !== workInProgress2.firstContext && (0 !== (workInProgress2.lanes & renderLanes2) && (didReceiveUpdate = true), workInProgress2.firstContext = null);
      }
      function readContext(context) {
        isDisallowedContextReadInDEV && error$jscomp$0(
          "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
        );
        return readContextForConsumer(currentlyRenderingFiber, context);
      }
      function readContextDuringReconciliation(consumer, context, renderLanes2) {
        null === currentlyRenderingFiber && prepareToReadContext(consumer, renderLanes2);
        return readContextForConsumer(consumer, context);
      }
      function readContextForConsumer(consumer, context) {
        var value = context._currentValue;
        if (lastFullyObservedContext !== context)
          if (context = { context, memoizedValue: value, next: null }, null === lastContextDependency) {
            if (null === consumer)
              throw Error(
                "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
              );
            lastContextDependency = context;
            consumer.dependencies = { lanes: 0, firstContext: context };
          } else
            lastContextDependency = lastContextDependency.next = context;
        return value;
      }
      function initializeUpdateQueue(fiber) {
        fiber.updateQueue = {
          baseState: fiber.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: { pending: null, lanes: 0, hiddenCallbacks: null },
          callbacks: null
        };
      }
      function cloneUpdateQueue(current2, workInProgress2) {
        current2 = current2.updateQueue;
        workInProgress2.updateQueue === current2 && (workInProgress2.updateQueue = {
          baseState: current2.baseState,
          firstBaseUpdate: current2.firstBaseUpdate,
          lastBaseUpdate: current2.lastBaseUpdate,
          shared: current2.shared,
          callbacks: null
        });
      }
      function createUpdate(lane) {
        return {
          lane,
          tag: UpdateState,
          payload: null,
          callback: null,
          next: null
        };
      }
      function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue;
        if (null === updateQueue)
          return null;
        updateQueue = updateQueue.shared;
        if (currentlyProcessingQueue === updateQueue && !didWarnUpdateInsideUpdate) {
          var componentName2 = getComponentNameFromFiber(fiber);
          error$jscomp$0(
            "An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.\n\nPlease update the following component: %s",
            componentName2
          );
          didWarnUpdateInsideUpdate = true;
        }
        if ((executionContext & RenderContext) !== NoContext)
          return componentName2 = updateQueue.pending, null === componentName2 ? update.next = update : (update.next = componentName2.next, componentName2.next = update), updateQueue.pending = update, update = getRootForUpdatedFiber(fiber), markUpdateLaneFromFiberToRoot(fiber, null, lane), update;
        enqueueUpdate$1(fiber, updateQueue, update, lane);
        return getRootForUpdatedFiber(fiber);
      }
      function entangleTransitions(root2, fiber, lane) {
        fiber = fiber.updateQueue;
        if (null !== fiber && (fiber = fiber.shared, 0 !== (lane & TransitionLanes))) {
          var queueLanes = fiber.lanes;
          queueLanes &= root2.pendingLanes;
          lane |= queueLanes;
          fiber.lanes = lane;
          markRootEntangled(root2, lane);
        }
      }
      function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
        var queue = workInProgress2.updateQueue, current2 = workInProgress2.alternate;
        if (null !== current2 && (current2 = current2.updateQueue, queue === current2)) {
          var newFirst = null, newLast = null;
          queue = queue.firstBaseUpdate;
          if (null !== queue) {
            do {
              var clone = {
                lane: queue.lane,
                tag: queue.tag,
                payload: queue.payload,
                callback: null,
                next: null
              };
              null === newLast ? newFirst = newLast = clone : newLast = newLast.next = clone;
              queue = queue.next;
            } while (null !== queue);
            null === newLast ? newFirst = newLast = capturedUpdate : newLast = newLast.next = capturedUpdate;
          } else
            newFirst = newLast = capturedUpdate;
          queue = {
            baseState: current2.baseState,
            firstBaseUpdate: newFirst,
            lastBaseUpdate: newLast,
            shared: current2.shared,
            callbacks: current2.callbacks
          };
          workInProgress2.updateQueue = queue;
          return;
        }
        workInProgress2 = queue.lastBaseUpdate;
        null === workInProgress2 ? queue.firstBaseUpdate = capturedUpdate : workInProgress2.next = capturedUpdate;
        queue.lastBaseUpdate = capturedUpdate;
      }
      function suspendIfUpdateReadFromEntangledAsyncAction() {
        if (didReadFromEntangledAsyncAction) {
          var entangledActionThenable = currentEntangledActionThenable;
          if (null !== entangledActionThenable)
            throw entangledActionThenable;
        }
      }
      function processUpdateQueue(workInProgress2, props, instance$jscomp$0, renderLanes2) {
        didReadFromEntangledAsyncAction = false;
        var queue = workInProgress2.updateQueue;
        hasForceUpdate = false;
        currentlyProcessingQueue = queue.shared;
        var firstBaseUpdate = queue.firstBaseUpdate, lastBaseUpdate = queue.lastBaseUpdate, pendingQueue = queue.shared.pending;
        if (null !== pendingQueue) {
          queue.shared.pending = null;
          var lastPendingUpdate = pendingQueue, firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = null;
          null === lastBaseUpdate ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate;
          lastBaseUpdate = lastPendingUpdate;
          var current2 = workInProgress2.alternate;
          null !== current2 && (current2 = current2.updateQueue, pendingQueue = current2.lastBaseUpdate, pendingQueue !== lastBaseUpdate && (null === pendingQueue ? current2.firstBaseUpdate = firstPendingUpdate : pendingQueue.next = firstPendingUpdate, current2.lastBaseUpdate = lastPendingUpdate));
        }
        if (null !== firstBaseUpdate) {
          var newState = queue.baseState;
          lastBaseUpdate = 0;
          current2 = firstPendingUpdate = lastPendingUpdate = null;
          pendingQueue = firstBaseUpdate;
          do {
            var updateLane = pendingQueue.lane & ~OffscreenLane, isHiddenUpdate = updateLane !== pendingQueue.lane;
            if (isHiddenUpdate ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes2 & updateLane) === updateLane) {
              0 !== updateLane && updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction = true);
              null !== current2 && (current2 = current2.next = {
                lane: 0,
                tag: pendingQueue.tag,
                payload: pendingQueue.payload,
                callback: null,
                next: null
              });
              a: {
                updateLane = workInProgress2;
                var partialState = pendingQueue;
                var nextProps = props, instance = instance$jscomp$0;
                switch (partialState.tag) {
                  case ReplaceState:
                    partialState = partialState.payload;
                    if ("function" === typeof partialState) {
                      isDisallowedContextReadInDEV = true;
                      var nextState = partialState.call(
                        instance,
                        newState,
                        nextProps
                      );
                      if (updateLane.mode & 8) {
                        setIsStrictModeForDevtools(true);
                        try {
                          partialState.call(instance, newState, nextProps);
                        } finally {
                          setIsStrictModeForDevtools(false);
                        }
                      }
                      isDisallowedContextReadInDEV = false;
                      newState = nextState;
                      break a;
                    }
                    newState = partialState;
                    break a;
                  case CaptureUpdate:
                    updateLane.flags = updateLane.flags & -65537 | 128;
                  case UpdateState:
                    nextState = partialState.payload;
                    if ("function" === typeof nextState) {
                      isDisallowedContextReadInDEV = true;
                      partialState = nextState.call(
                        instance,
                        newState,
                        nextProps
                      );
                      if (updateLane.mode & 8) {
                        setIsStrictModeForDevtools(true);
                        try {
                          nextState.call(instance, newState, nextProps);
                        } finally {
                          setIsStrictModeForDevtools(false);
                        }
                      }
                      isDisallowedContextReadInDEV = false;
                    } else
                      partialState = nextState;
                    if (null === partialState || void 0 === partialState)
                      break a;
                    newState = assign({}, newState, partialState);
                    break a;
                  case ForceUpdate:
                    hasForceUpdate = true;
                }
              }
              updateLane = pendingQueue.callback;
              null !== updateLane && (workInProgress2.flags |= 64, isHiddenUpdate && (workInProgress2.flags |= 8192), isHiddenUpdate = queue.callbacks, null === isHiddenUpdate ? queue.callbacks = [updateLane] : isHiddenUpdate.push(updateLane));
            } else
              isHiddenUpdate = {
                lane: updateLane,
                tag: pendingQueue.tag,
                payload: pendingQueue.payload,
                callback: pendingQueue.callback,
                next: null
              }, null === current2 ? (firstPendingUpdate = current2 = isHiddenUpdate, lastPendingUpdate = newState) : current2 = current2.next = isHiddenUpdate, lastBaseUpdate |= updateLane;
            pendingQueue = pendingQueue.next;
            if (null === pendingQueue)
              if (pendingQueue = queue.shared.pending, null === pendingQueue)
                break;
              else
                isHiddenUpdate = pendingQueue, pendingQueue = isHiddenUpdate.next, isHiddenUpdate.next = null, queue.lastBaseUpdate = isHiddenUpdate, queue.shared.pending = null;
          } while (1);
          null === current2 && (lastPendingUpdate = newState);
          queue.baseState = lastPendingUpdate;
          queue.firstBaseUpdate = firstPendingUpdate;
          queue.lastBaseUpdate = current2;
          null === firstBaseUpdate && (queue.shared.lanes = 0);
          workInProgressRootSkippedLanes |= lastBaseUpdate;
          workInProgress2.lanes = lastBaseUpdate;
          workInProgress2.memoizedState = newState;
        }
        currentlyProcessingQueue = null;
      }
      function callCallback(callback, context) {
        if ("function" !== typeof callback)
          throw Error(
            "Invalid argument passed as callback. Expected a function. Instead received: " + callback
          );
        callback.call(context);
      }
      function commitCallbacks(updateQueue, context) {
        var callbacks = updateQueue.callbacks;
        if (null !== callbacks)
          for (updateQueue.callbacks = null, updateQueue = 0; updateQueue < callbacks.length; updateQueue++)
            callCallback(callbacks[updateQueue], context);
      }
      function warnOnInvalidCallback(callback) {
        if (null !== callback && "function" !== typeof callback) {
          var key = String(callback);
          didWarnOnInvalidCallback.has(key) || (didWarnOnInvalidCallback.add(key), error$jscomp$0(
            "Expected the last optional `callback` argument to be a function. Instead received: %s.",
            callback
          ));
        }
      }
      function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress2.memoizedState, partialState = getDerivedStateFromProps(nextProps, prevState);
        if (workInProgress2.mode & 8) {
          setIsStrictModeForDevtools(true);
          try {
            partialState = getDerivedStateFromProps(nextProps, prevState);
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        void 0 === partialState && (ctor = getComponentNameFromType(ctor) || "Component", didWarnAboutUndefinedDerivedState.has(ctor) || (didWarnAboutUndefinedDerivedState.add(ctor), error$jscomp$0(
          "%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.",
          ctor
        )));
        prevState = null === partialState || void 0 === partialState ? prevState : assign({}, prevState, partialState);
        workInProgress2.memoizedState = prevState;
        0 === workInProgress2.lanes && (workInProgress2.updateQueue.baseState = prevState);
      }
      function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress2.stateNode;
        if ("function" === typeof instance.shouldComponentUpdate) {
          oldProps = instance.shouldComponentUpdate(
            newProps,
            newState,
            nextContext
          );
          if (workInProgress2.mode & 8) {
            setIsStrictModeForDevtools(true);
            try {
              oldProps = instance.shouldComponentUpdate(
                newProps,
                newState,
                nextContext
              );
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          void 0 === oldProps && error$jscomp$0(
            "%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",
            getComponentNameFromType(ctor) || "Component"
          );
          return oldProps;
        }
        return ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
      }
      function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
        var oldState = instance.state;
        "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
        "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        instance.state !== oldState && (workInProgress2 = getComponentNameFromFiber(workInProgress2) || "Component", didWarnAboutStateAssignmentForComponent.has(workInProgress2) || (didWarnAboutStateAssignmentForComponent.add(workInProgress2), error$jscomp$0(
          "%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
          workInProgress2
        )), classComponentUpdater.enqueueReplaceState(
          instance,
          instance.state,
          null
        ));
      }
      function resolveClassComponentProps(Component, baseProps) {
        var newProps = baseProps;
        if ("ref" in baseProps) {
          newProps = {};
          for (var propName in baseProps)
            "ref" !== propName && (newProps[propName] = baseProps[propName]);
        }
        if (Component = Component.defaultProps) {
          newProps === baseProps && (newProps = assign({}, newProps));
          for (var _propName in Component)
            void 0 === newProps[_propName] && (newProps[_propName] = Component[_propName]);
        }
        return newProps;
      }
      function shouldProfile(current2) {
        return 0 !== (current2.mode & 2) && (executionContext & CommitContext) !== NoContext;
      }
      function callComponentWillUnmountWithTimer(current2, instance) {
        instance.props = resolveClassComponentProps(
          current2.type,
          current2.memoizedProps
        );
        instance.state = current2.memoizedState;
        if (shouldProfile(current2))
          try {
            startLayoutEffectTimer(), instance.componentWillUnmount();
          } finally {
            recordLayoutEffectDuration(current2);
          }
        else
          instance.componentWillUnmount();
      }
      function safelyAttachRef(current2, nearestMountedAncestor) {
        try {
          var ref = current2.ref;
          if (null !== ref) {
            var instance = current2.stateNode;
            switch (current2.tag) {
              case 26:
              case 27:
              case 5:
                var instanceToUse = instance;
                break;
              default:
                instanceToUse = instance;
            }
            if ("function" === typeof ref)
              if (shouldProfile(current2))
                try {
                  startLayoutEffectTimer(), current2.refCleanup = ref(instanceToUse);
                } finally {
                  recordLayoutEffectDuration(current2);
                }
              else
                current2.refCleanup = ref(instanceToUse);
            else
              "string" === typeof ref ? error$jscomp$0("String refs are no longer supported.") : ref.hasOwnProperty("current") || error$jscomp$0(
                "Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().",
                getComponentNameFromFiber(current2)
              ), ref.current = instanceToUse;
          }
        } catch (error$12) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error$12);
        }
      }
      function safelyDetachRef(current2, nearestMountedAncestor) {
        var ref = current2.ref, refCleanup = current2.refCleanup;
        if (null !== ref)
          if ("function" === typeof refCleanup)
            try {
              if (shouldProfile(current2))
                try {
                  startLayoutEffectTimer(), refCleanup();
                } finally {
                  recordLayoutEffectDuration(current2);
                }
              else
                refCleanup();
            } catch (error$13) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error$13);
            } finally {
              current2.refCleanup = null, current2 = current2.alternate, null != current2 && (current2.refCleanup = null);
            }
          else if ("function" === typeof ref)
            try {
              if (shouldProfile(current2))
                try {
                  startLayoutEffectTimer(), ref(null);
                } finally {
                  recordLayoutEffectDuration(current2);
                }
              else
                ref(null);
            } catch (error$14) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error$14);
            }
          else
            ref.current = null;
      }
      function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
        try {
          destroy();
        } catch (error$15) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error$15);
        }
      }
      function commitBeforeMutationEffects(root2, firstChild) {
        eventsEnabled = _enabled;
        root2 = getActiveElementDeep();
        if (hasSelectionCapabilities(root2)) {
          if ("selectionStart" in root2)
            var JSCompiler_temp = {
              start: root2.selectionStart,
              end: root2.selectionEnd
            };
          else
            a: {
              JSCompiler_temp = (JSCompiler_temp = root2.ownerDocument) && JSCompiler_temp.defaultView || window;
              var selection = JSCompiler_temp.getSelection && JSCompiler_temp.getSelection();
              if (selection && 0 !== selection.rangeCount) {
                JSCompiler_temp = selection.anchorNode;
                var anchorOffset = selection.anchorOffset, focusNode = selection.focusNode;
                selection = selection.focusOffset;
                try {
                  JSCompiler_temp.nodeType, focusNode.nodeType;
                } catch (e$3) {
                  JSCompiler_temp = null;
                  break a;
                }
                var length = 0, start = -1, end = -1, indexWithinAnchor = 0, indexWithinFocus = 0, node = root2, parentNode = null;
                b:
                  for (; ; ) {
                    for (var next; ; ) {
                      node !== JSCompiler_temp || 0 !== anchorOffset && 3 !== node.nodeType || (start = length + anchorOffset);
                      node !== focusNode || 0 !== selection && 3 !== node.nodeType || (end = length + selection);
                      3 === node.nodeType && (length += node.nodeValue.length);
                      if (null === (next = node.firstChild))
                        break;
                      parentNode = node;
                      node = next;
                    }
                    for (; ; ) {
                      if (node === root2)
                        break b;
                      parentNode === JSCompiler_temp && ++indexWithinAnchor === anchorOffset && (start = length);
                      parentNode === focusNode && ++indexWithinFocus === selection && (end = length);
                      if (null !== (next = node.nextSibling))
                        break;
                      node = parentNode;
                      parentNode = node.parentNode;
                    }
                    node = next;
                  }
                JSCompiler_temp = -1 === start || -1 === end ? null : { start, end };
              } else
                JSCompiler_temp = null;
            }
          JSCompiler_temp = JSCompiler_temp || { start: 0, end: 0 };
        } else
          JSCompiler_temp = null;
        selectionInformation = {
          focusedElem: root2,
          selectionRange: JSCompiler_temp
        };
        _enabled = false;
        for (nextEffect = firstChild; null !== nextEffect; )
          if (firstChild = nextEffect, root2 = firstChild.child, 0 !== (firstChild.subtreeFlags & 1028) && null !== root2)
            root2.return = firstChild, nextEffect = root2;
          else
            for (; null !== nextEffect; ) {
              firstChild = nextEffect;
              try {
                runWithFiberInDEV(
                  firstChild,
                  commitBeforeMutationEffectsOnFiber,
                  firstChild
                );
              } catch (error$16) {
                captureCommitPhaseError(firstChild, firstChild.return, error$16);
              }
              root2 = firstChild.sibling;
              if (null !== root2) {
                root2.return = firstChild.return;
                nextEffect = root2;
                break;
              }
              nextEffect = firstChild.return;
            }
        firstChild = shouldFireAfterActiveInstanceBlur;
        shouldFireAfterActiveInstanceBlur = false;
        return firstChild;
      }
      function commitBeforeMutationEffectsOnFiber(finishedWork) {
        var current2 = finishedWork.alternate, flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case 0:
            if (0 !== (flags & 4) && (finishedWork = finishedWork.updateQueue, finishedWork = null !== finishedWork ? finishedWork.events : null, null !== finishedWork))
              for (current2 = 0; current2 < finishedWork.length; current2++)
                flags = finishedWork[current2], flags.ref.impl = flags.nextImpl;
            break;
          case 11:
          case 15:
            break;
          case 1:
            if (0 !== (flags & 1024) && null !== current2) {
              flags = current2.memoizedProps;
              var prevState = current2.memoizedState;
              current2 = finishedWork.stateNode;
              finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (current2.props !== finishedWork.memoizedProps && error$jscomp$0(
                "Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
                getComponentNameFromFiber(finishedWork) || "instance"
              ), current2.state !== finishedWork.memoizedState && error$jscomp$0(
                "Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
                getComponentNameFromFiber(finishedWork) || "instance"
              ));
              flags = current2.getSnapshotBeforeUpdate(
                resolveClassComponentProps(finishedWork.type, flags),
                prevState
              );
              prevState = didWarnAboutUndefinedSnapshotBeforeUpdate;
              void 0 !== flags || prevState.has(finishedWork.type) || (prevState.add(finishedWork.type), error$jscomp$0(
                "%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.",
                getComponentNameFromFiber(finishedWork)
              ));
              current2.__reactInternalSnapshotBeforeUpdate = flags;
            }
            break;
          case 3:
            if (0 !== (flags & 1024)) {
              a:
                if (finishedWork = finishedWork.stateNode.containerInfo, current2 = finishedWork.nodeType, 9 === current2)
                  clearContainerSparingly(finishedWork);
                else if (1 === current2)
                  switch (finishedWork.nodeName) {
                    case "HEAD":
                    case "HTML":
                    case "BODY":
                      clearContainerSparingly(finishedWork);
                      break a;
                    default:
                      finishedWork.textContent = "";
                  }
            }
            break;
          case 5:
          case 26:
          case 27:
          case 6:
          case 4:
          case 17:
            break;
          default:
            if (0 !== (flags & 1024))
              throw Error(
                "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."
              );
        }
      }
      function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
        var updateQueue = finishedWork.updateQueue;
        updateQueue = null !== updateQueue ? updateQueue.lastEffect : null;
        if (null !== updateQueue) {
          var effect = updateQueue = updateQueue.next;
          do {
            if ((effect.tag & flags) === flags) {
              var inst = effect.inst, destroy = inst.destroy;
              void 0 !== destroy && (inst.destroy = void 0, (flags & Passive) !== NoFlags ? null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted && injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(
                finishedWork
              ) : (flags & Layout) !== NoFlags && markComponentLayoutEffectUnmountStarted(finishedWork), (flags & Insertion) !== NoFlags && (isRunningInsertionEffect = true), safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy), (flags & Insertion) !== NoFlags && (isRunningInsertionEffect = false), (flags & Passive) !== NoFlags ? null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped && injectedProfilingHooks.markComponentPassiveEffectUnmountStopped() : (flags & Layout) !== NoFlags && markComponentLayoutEffectUnmountStopped());
            }
            effect = effect.next;
          } while (effect !== updateQueue);
        }
      }
      function commitHookEffectListMount(flags, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        updateQueue = null !== updateQueue ? updateQueue.lastEffect : null;
        if (null !== updateQueue) {
          var effect = updateQueue = updateQueue.next;
          do {
            if ((effect.tag & flags) === flags) {
              (flags & Passive) !== NoFlags ? null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted && injectedProfilingHooks.markComponentPassiveEffectMountStarted(
                finishedWork
              ) : (flags & Layout) !== NoFlags && null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted && injectedProfilingHooks.markComponentLayoutEffectMountStarted(
                finishedWork
              );
              var create = effect.create;
              (flags & Insertion) !== NoFlags && (isRunningInsertionEffect = true);
              var inst = effect.inst;
              create = create();
              inst.destroy = create;
              (flags & Insertion) !== NoFlags && (isRunningInsertionEffect = false);
              (flags & Passive) !== NoFlags ? null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped && injectedProfilingHooks.markComponentPassiveEffectMountStopped() : (flags & Layout) !== NoFlags && null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped && injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              void 0 !== create && "function" !== typeof create && (inst = 0 !== (effect.tag & Layout) ? "useLayoutEffect" : 0 !== (effect.tag & Insertion) ? "useInsertionEffect" : "useEffect", error$jscomp$0(
                "%s must not return anything besides a function, which is used for clean-up.%s",
                inst,
                null === create ? " You returned null. If your effect does not require clean up, return undefined (or nothing)." : "function" === typeof create.then ? "\n\nIt looks like you wrote " + inst + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + inst + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://react.dev/link/hooks-data-fetching" : " You returned: " + create
              ));
            }
            effect = effect.next;
          } while (effect !== updateQueue);
        }
      }
      function commitHookLayoutEffects(finishedWork, hookFlags) {
        if (shouldProfile(finishedWork)) {
          try {
            startLayoutEffectTimer(), commitHookEffectListMount(hookFlags, finishedWork);
          } catch (error$17) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error$17);
          }
          recordLayoutEffectDuration(finishedWork);
        } else
          try {
            commitHookEffectListMount(hookFlags, finishedWork);
          } catch (error$18) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error$18);
          }
      }
      function commitClassCallbacks(finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        if (null !== updateQueue) {
          var instance = finishedWork.stateNode;
          finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (instance.props !== finishedWork.memoizedProps && error$jscomp$0(
            "Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
            getComponentNameFromFiber(finishedWork) || "instance"
          ), instance.state !== finishedWork.memoizedState && error$jscomp$0(
            "Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
            getComponentNameFromFiber(finishedWork) || "instance"
          ));
          try {
            commitCallbacks(updateQueue, instance);
          } catch (error$23) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error$23);
          }
        }
      }
      function commitHostComponentMount(finishedWork) {
        var type = finishedWork.type, props = finishedWork.memoizedProps, instance = finishedWork.stateNode;
        try {
          a:
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                props.autoFocus && instance.focus();
                break a;
              case "img":
                props.src && (instance.src = props.src);
            }
        } catch (error$24) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error$24);
        }
      }
      function commitProfilerUpdate(finishedWork, current2) {
        if (executionContext & CommitContext)
          try {
            var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender, effectDuration = finishedWork.stateNode.effectDuration;
            _finishedWork$memoize2 = commitTime;
            current2 = null === current2 ? "mount" : "update";
            currentUpdateIsNested && (current2 = "nested-update");
            "function" === typeof onRender && onRender(
              finishedWork.memoizedProps.id,
              current2,
              finishedWork.actualDuration,
              finishedWork.treeBaseDuration,
              finishedWork.actualStartTime,
              _finishedWork$memoize2
            );
            "function" === typeof onCommit && onCommit(
              finishedWork.memoizedProps.id,
              current2,
              effectDuration,
              _finishedWork$memoize2
            );
            enqueuePendingPassiveProfilerEffect(finishedWork);
            var parentFiber = finishedWork.return;
            a:
              for (; null !== parentFiber; ) {
                switch (parentFiber.tag) {
                  case 3:
                    parentFiber.stateNode.effectDuration += effectDuration;
                    break a;
                  case 12:
                    parentFiber.stateNode.effectDuration += effectDuration;
                    break a;
                }
                parentFiber = parentFiber.return;
              }
          } catch (error$25) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error$25);
          }
      }
      function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            recursivelyTraverseLayoutEffects(
              finishedRoot,
              finishedWork,
              committedLanes
            );
            flags & 4 && commitHookLayoutEffects(finishedWork, Layout | HasEffect);
            break;
          case 1:
            recursivelyTraverseLayoutEffects(
              finishedRoot,
              finishedWork,
              committedLanes
            );
            if (flags & 4)
              if (finishedRoot = finishedWork.stateNode, null === current2)
                if (finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (finishedRoot.props !== finishedWork.memoizedProps && error$jscomp$0(
                  "Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
                  getComponentNameFromFiber(finishedWork) || "instance"
                ), finishedRoot.state !== finishedWork.memoizedState && error$jscomp$0(
                  "Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
                  getComponentNameFromFiber(finishedWork) || "instance"
                )), shouldProfile(finishedWork)) {
                  try {
                    startLayoutEffectTimer(), finishedRoot.componentDidMount();
                  } catch (error$19) {
                    captureCommitPhaseError(
                      finishedWork,
                      finishedWork.return,
                      error$19
                    );
                  }
                  recordLayoutEffectDuration(finishedWork);
                } else
                  try {
                    finishedRoot.componentDidMount();
                  } catch (error$20) {
                    captureCommitPhaseError(
                      finishedWork,
                      finishedWork.return,
                      error$20
                    );
                  }
              else {
                committedLanes = resolveClassComponentProps(
                  finishedWork.type,
                  current2.memoizedProps
                );
                var prevState = current2.memoizedState;
                finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (finishedRoot.props !== finishedWork.memoizedProps && error$jscomp$0(
                  "Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
                  getComponentNameFromFiber(finishedWork) || "instance"
                ), finishedRoot.state !== finishedWork.memoizedState && error$jscomp$0(
                  "Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
                  getComponentNameFromFiber(finishedWork) || "instance"
                ));
                if (shouldProfile(finishedWork)) {
                  try {
                    startLayoutEffectTimer(), finishedRoot.componentDidUpdate(
                      committedLanes,
                      prevState,
                      finishedRoot.__reactInternalSnapshotBeforeUpdate
                    );
                  } catch (error$21) {
                    captureCommitPhaseError(
                      finishedWork,
                      finishedWork.return,
                      error$21
                    );
                  }
                  recordLayoutEffectDuration(finishedWork);
                } else
                  try {
                    finishedRoot.componentDidUpdate(
                      committedLanes,
                      prevState,
                      finishedRoot.__reactInternalSnapshotBeforeUpdate
                    );
                  } catch (error$22) {
                    captureCommitPhaseError(
                      finishedWork,
                      finishedWork.return,
                      error$22
                    );
                  }
              }
            flags & 64 && commitClassCallbacks(finishedWork);
            flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
            break;
          case 3:
            recursivelyTraverseLayoutEffects(
              finishedRoot,
              finishedWork,
              committedLanes
            );
            if (flags & 64 && (flags = finishedWork.updateQueue, null !== flags)) {
              finishedRoot = null;
              if (null !== finishedWork.child)
                switch (finishedWork.child.tag) {
                  case 27:
                  case 5:
                    finishedRoot = finishedWork.child.stateNode;
                    break;
                  case 1:
                    finishedRoot = finishedWork.child.stateNode;
                }
              try {
                commitCallbacks(flags, finishedRoot);
              } catch (error$26) {
                captureCommitPhaseError(
                  finishedWork,
                  finishedWork.return,
                  error$26
                );
              }
            }
            break;
          case 26:
            recursivelyTraverseLayoutEffects(
              finishedRoot,
              finishedWork,
              committedLanes
            );
            flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
            break;
          case 27:
          case 5:
            recursivelyTraverseLayoutEffects(
              finishedRoot,
              finishedWork,
              committedLanes
            );
            null === current2 && flags & 4 && commitHostComponentMount(finishedWork);
            flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
            break;
          case 12:
            recursivelyTraverseLayoutEffects(
              finishedRoot,
              finishedWork,
              committedLanes
            );
            flags & 4 && commitProfilerUpdate(finishedWork, current2);
            break;
          case 13:
            recursivelyTraverseLayoutEffects(
              finishedRoot,
              finishedWork,
              committedLanes
            );
            flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
            break;
          case 22:
            prevState = null !== finishedWork.memoizedState || offscreenSubtreeIsHidden;
            if (!prevState) {
              current2 = null !== current2 && null !== current2.memoizedState || offscreenSubtreeWasHidden;
              var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden, prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeIsHidden = prevState;
              (offscreenSubtreeWasHidden = current2) && !prevOffscreenSubtreeWasHidden ? recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                0 !== (finishedWork.subtreeFlags & 8772)
              ) : recursivelyTraverseLayoutEffects(
                finishedRoot,
                finishedWork,
                committedLanes
              );
              offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            }
            flags & 512 && ("manual" === finishedWork.memoizedProps.mode ? safelyAttachRef(finishedWork, finishedWork.return) : safelyDetachRef(finishedWork, finishedWork.return));
            break;
          default:
            recursivelyTraverseLayoutEffects(
              finishedRoot,
              finishedWork,
              committedLanes
            );
        }
      }
      function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate;
        null !== alternate && (fiber.alternate = null, detachFiberAfterEffects(alternate));
        fiber.child = null;
        fiber.deletions = null;
        fiber.sibling = null;
        5 === fiber.tag && (alternate = fiber.stateNode, null !== alternate && detachDeletedInstance(alternate));
        fiber.stateNode = null;
        fiber._debugOwner = null;
        fiber.return = null;
        fiber.dependencies = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.stateNode = null;
        fiber.updateQueue = null;
      }
      function isHostParent(fiber) {
        return 5 === fiber.tag || 3 === fiber.tag || 26 === fiber.tag || 27 === fiber.tag || 4 === fiber.tag;
      }
      function getHostSibling(fiber) {
        a:
          for (; ; ) {
            for (; null === fiber.sibling; ) {
              if (null === fiber.return || isHostParent(fiber.return))
                return null;
              fiber = fiber.return;
            }
            fiber.sibling.return = fiber.return;
            for (fiber = fiber.sibling; 5 !== fiber.tag && 6 !== fiber.tag && 27 !== fiber.tag && 18 !== fiber.tag; ) {
              if (fiber.flags & 2)
                continue a;
              if (null === fiber.child || 4 === fiber.tag)
                continue a;
              else
                fiber.child.return = fiber, fiber = fiber.child;
            }
            if (!(fiber.flags & 2))
              return fiber.stateNode;
          }
      }
      function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        if (5 === tag || 6 === tag)
          node = node.stateNode, before ? 8 === parent.nodeType ? parent.parentNode.insertBefore(node, before) : parent.insertBefore(node, before) : (8 === parent.nodeType ? (before = parent.parentNode, before.insertBefore(node, parent)) : (before = parent, before.appendChild(node)), parent = parent._reactRootContainer, null !== parent && void 0 !== parent || null !== before.onclick || (before.onclick = noop$1));
        else if (4 !== tag && 27 !== tag && (node = node.child, null !== node))
          for (insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling; null !== node; )
            insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling;
      }
      function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        if (5 === tag || 6 === tag)
          node = node.stateNode, before ? parent.insertBefore(node, before) : parent.appendChild(node);
        else if (4 !== tag && 27 !== tag && (node = node.child, null !== node))
          for (insertOrAppendPlacementNode(node, before, parent), node = node.sibling; null !== node; )
            insertOrAppendPlacementNode(node, before, parent), node = node.sibling;
      }
      function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
        for (parent = parent.child; null !== parent; )
          commitDeletionEffectsOnFiber(
            finishedRoot,
            nearestMountedAncestor,
            parent
          ), parent = parent.sibling;
      }
      function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
        if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount)
          try {
            injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
          } catch (err) {
            hasLoggedError || (hasLoggedError = true, error$jscomp$0(
              "React instrumentation encountered an error: %s",
              err
            ));
          }
        switch (deletedFiber.tag) {
          case 26:
            offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            deletedFiber.memoizedState ? deletedFiber.memoizedState.count-- : deletedFiber.stateNode && (deletedFiber = deletedFiber.stateNode, deletedFiber.parentNode.removeChild(deletedFiber));
            break;
          case 27:
            offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
            var prevHostParent = hostParent, prevHostParentIsContainer = hostParentIsContainer;
            hostParent = deletedFiber.stateNode;
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            deletedFiber = deletedFiber.stateNode;
            for (finishedRoot = deletedFiber.attributes; finishedRoot.length; )
              deletedFiber.removeAttributeNode(finishedRoot[0]);
            detachDeletedInstance(deletedFiber);
            hostParent = prevHostParent;
            hostParentIsContainer = prevHostParentIsContainer;
            break;
          case 5:
            offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
          case 6:
            prevHostParent = hostParent;
            prevHostParentIsContainer = hostParentIsContainer;
            hostParent = null;
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            hostParent = prevHostParent;
            hostParentIsContainer = prevHostParentIsContainer;
            null !== hostParent && (hostParentIsContainer ? (finishedRoot = hostParent, deletedFiber = deletedFiber.stateNode, 8 === finishedRoot.nodeType ? finishedRoot.parentNode.removeChild(deletedFiber) : finishedRoot.removeChild(deletedFiber)) : hostParent.removeChild(deletedFiber.stateNode));
            break;
          case 18:
            null !== hostParent && (hostParentIsContainer ? (finishedRoot = hostParent, deletedFiber = deletedFiber.stateNode, 8 === finishedRoot.nodeType ? clearSuspenseBoundary(finishedRoot.parentNode, deletedFiber) : 1 === finishedRoot.nodeType && clearSuspenseBoundary(finishedRoot, deletedFiber), retryIfBlockedOn(finishedRoot)) : clearSuspenseBoundary(hostParent, deletedFiber.stateNode));
            break;
          case 4:
            prevHostParent = hostParent;
            prevHostParentIsContainer = hostParentIsContainer;
            hostParent = deletedFiber.stateNode.containerInfo;
            hostParentIsContainer = true;
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            hostParent = prevHostParent;
            hostParentIsContainer = prevHostParentIsContainer;
            break;
          case 0:
          case 11:
          case 14:
          case 15:
            if (!offscreenSubtreeWasHidden && (prevHostParent = deletedFiber.updateQueue, null !== prevHostParent && (prevHostParent = prevHostParent.lastEffect, null !== prevHostParent))) {
              prevHostParentIsContainer = prevHostParent = prevHostParent.next;
              do {
                var tag = prevHostParentIsContainer.tag, inst = prevHostParentIsContainer.inst, destroy = inst.destroy;
                void 0 !== destroy && ((tag & Insertion) !== NoFlags ? (inst.destroy = void 0, safelyCallDestroy(
                  deletedFiber,
                  nearestMountedAncestor,
                  destroy
                )) : (tag & Layout) !== NoFlags && (markComponentLayoutEffectUnmountStarted(deletedFiber), shouldProfile(deletedFiber) ? (startLayoutEffectTimer(), inst.destroy = void 0, safelyCallDestroy(
                  deletedFiber,
                  nearestMountedAncestor,
                  destroy
                ), recordLayoutEffectDuration(deletedFiber)) : (inst.destroy = void 0, safelyCallDestroy(
                  deletedFiber,
                  nearestMountedAncestor,
                  destroy
                )), markComponentLayoutEffectUnmountStopped()));
                prevHostParentIsContainer = prevHostParentIsContainer.next;
              } while (prevHostParentIsContainer !== prevHostParent);
            }
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            break;
          case 1:
            if (!offscreenSubtreeWasHidden && (safelyDetachRef(deletedFiber, nearestMountedAncestor), prevHostParent = deletedFiber.stateNode, "function" === typeof prevHostParent.componentWillUnmount))
              try {
                callComponentWillUnmountWithTimer(deletedFiber, prevHostParent);
              } catch (error$11) {
                captureCommitPhaseError(
                  deletedFiber,
                  nearestMountedAncestor,
                  error$11
                );
              }
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            break;
          case 21:
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            break;
          case 22:
            safelyDetachRef(deletedFiber, nearestMountedAncestor);
            offscreenSubtreeWasHidden = (prevHostParent = offscreenSubtreeWasHidden) || null !== deletedFiber.memoizedState;
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            offscreenSubtreeWasHidden = prevHostParent;
            break;
          default:
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
        }
      }
      function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        if (null === finishedWork.memoizedState && (finishedRoot = finishedWork.alternate, null !== finishedRoot && (finishedRoot = finishedRoot.memoizedState, null !== finishedRoot && (finishedRoot = finishedRoot.dehydrated, null !== finishedRoot))))
          try {
            retryIfBlockedOn(finishedRoot);
          } catch (error$29) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error$29);
          }
      }
      function getRetryCache(finishedWork) {
        switch (finishedWork.tag) {
          case 13:
          case 19:
            var retryCache = finishedWork.stateNode;
            null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
            return retryCache;
          case 22:
            return finishedWork = finishedWork.stateNode, retryCache = finishedWork._retryCache, null === retryCache && (retryCache = finishedWork._retryCache = new PossiblyWeakSet()), retryCache;
          default:
            throw Error(
              "Unexpected Suspense handler tag (" + finishedWork.tag + "). This is a bug in React."
            );
        }
      }
      function attachSuspenseRetryListeners(finishedWork, wakeables) {
        var retryCache = getRetryCache(finishedWork);
        wakeables.forEach(function(wakeable) {
          var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
          if (!retryCache.has(wakeable)) {
            retryCache.add(wakeable);
            if (isDevToolsPresent)
              if (null !== inProgressLanes && null !== inProgressRoot)
                restorePendingUpdaters(inProgressRoot, inProgressLanes);
              else
                throw Error(
                  "Expected finished root and lanes to be set. This is a bug in React."
                );
            wakeable.then(retry, retry);
          }
        });
      }
      function commitMutationEffects(root2, finishedWork, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root2;
        runWithFiberInDEV(
          finishedWork,
          commitMutationEffectsOnFiber,
          finishedWork,
          root2,
          committedLanes
        );
        inProgressRoot = inProgressLanes = null;
      }
      function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber, lanes) {
        var deletions = parentFiber.deletions;
        if (null !== deletions)
          for (var i = 0; i < deletions.length; i++) {
            var childToDelete = deletions[i];
            try {
              var root2 = root$jscomp$0, returnFiber = parentFiber, deletedFiber = childToDelete, parent = returnFiber;
              a:
                for (; null !== parent; ) {
                  switch (parent.tag) {
                    case 27:
                    case 5:
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break a;
                    case 3:
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break a;
                    case 4:
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break a;
                  }
                  parent = parent.return;
                }
              if (null === hostParent)
                throw Error(
                  "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
                );
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
              root2 = deletedFiber;
              var alternate = root2.alternate;
              null !== alternate && (alternate.return = null);
              root2.return = null;
            } catch (error$30) {
              captureCommitPhaseError(childToDelete, parentFiber, error$30);
            }
          }
        if (parentFiber.subtreeFlags & 13878)
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            runWithFiberInDEV(
              parentFiber,
              commitMutationEffectsOnFiber,
              parentFiber,
              root$jscomp$0,
              lanes
            ), parentFiber = parentFiber.sibling;
      }
      function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
        var current2 = finishedWork.alternate, flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            recursivelyTraverseMutationEffects(root2, finishedWork, lanes);
            commitReconciliationEffects(finishedWork);
            if (flags & 4) {
              try {
                commitHookEffectListUnmount(
                  Insertion | HasEffect,
                  finishedWork,
                  finishedWork.return
                ), commitHookEffectListMount(Insertion | HasEffect, finishedWork);
              } catch (error$31) {
                captureCommitPhaseError(
                  finishedWork,
                  finishedWork.return,
                  error$31
                );
              }
              if (shouldProfile(finishedWork)) {
                try {
                  startLayoutEffectTimer(), commitHookEffectListUnmount(
                    Layout | HasEffect,
                    finishedWork,
                    finishedWork.return
                  );
                } catch (error$32) {
                  captureCommitPhaseError(
                    finishedWork,
                    finishedWork.return,
                    error$32
                  );
                }
                recordLayoutEffectDuration(finishedWork);
              } else
                try {
                  commitHookEffectListUnmount(
                    Layout | HasEffect,
                    finishedWork,
                    finishedWork.return
                  );
                } catch (error$33) {
                  captureCommitPhaseError(
                    finishedWork,
                    finishedWork.return,
                    error$33
                  );
                }
            }
            break;
          case 1:
            recursivelyTraverseMutationEffects(root2, finishedWork, lanes);
            commitReconciliationEffects(finishedWork);
            flags & 512 && null !== current2 && safelyDetachRef(current2, current2.return);
            flags & 64 && offscreenSubtreeIsHidden && (finishedWork = finishedWork.updateQueue, null !== finishedWork && (flags = finishedWork.callbacks, null !== flags && (current2 = finishedWork.shared.hiddenCallbacks, finishedWork.shared.hiddenCallbacks = null === current2 ? flags : current2.concat(flags))));
            break;
          case 26:
            var hoistableRoot = currentHoistableRoot;
            recursivelyTraverseMutationEffects(root2, finishedWork, lanes);
            commitReconciliationEffects(finishedWork);
            flags & 512 && null !== current2 && safelyDetachRef(current2, current2.return);
            if (flags & 4) {
              if (root2 = null !== current2 ? current2.memoizedState : null, flags = finishedWork.memoizedState, null === current2)
                if (null === flags)
                  if (null === finishedWork.stateNode) {
                    a: {
                      flags = finishedWork.type;
                      current2 = finishedWork.memoizedProps;
                      root2 = hoistableRoot.ownerDocument || hoistableRoot;
                      b:
                        switch (flags) {
                          case "title":
                            lanes = root2.getElementsByTagName("title")[0];
                            if (!lanes || lanes[internalHoistableMarker] || lanes[internalInstanceKey] || lanes.namespaceURI === SVG_NAMESPACE || lanes.hasAttribute("itemprop"))
                              lanes = root2.createElement(flags), root2.head.insertBefore(
                                lanes,
                                root2.querySelector("head > title")
                              );
                            setInitialProperties(lanes, flags, current2);
                            lanes[internalInstanceKey] = finishedWork;
                            markNodeAsHoistable(lanes);
                            flags = lanes;
                            break a;
                          case "link":
                            if (hoistableRoot = getHydratableHoistableCache(
                              "link",
                              "href",
                              root2
                            ).get(flags + (current2.href || ""))) {
                              for (var i = 0; i < hoistableRoot.length; i++)
                                if (lanes = hoistableRoot[i], lanes.getAttribute("href") === (null == current2.href ? null : current2.href) && lanes.getAttribute("rel") === (null == current2.rel ? null : current2.rel) && lanes.getAttribute("title") === (null == current2.title ? null : current2.title) && lanes.getAttribute("crossorigin") === (null == current2.crossOrigin ? null : current2.crossOrigin)) {
                                  hoistableRoot.splice(i, 1);
                                  break b;
                                }
                            }
                            lanes = root2.createElement(flags);
                            setInitialProperties(lanes, flags, current2);
                            root2.head.appendChild(lanes);
                            break;
                          case "meta":
                            if (hoistableRoot = getHydratableHoistableCache(
                              "meta",
                              "content",
                              root2
                            ).get(flags + (current2.content || ""))) {
                              for (i = 0; i < hoistableRoot.length; i++)
                                if (lanes = hoistableRoot[i], checkAttributeStringCoercion(
                                  current2.content,
                                  "content"
                                ), lanes.getAttribute("content") === (null == current2.content ? null : "" + current2.content) && lanes.getAttribute("name") === (null == current2.name ? null : current2.name) && lanes.getAttribute("property") === (null == current2.property ? null : current2.property) && lanes.getAttribute("http-equiv") === (null == current2.httpEquiv ? null : current2.httpEquiv) && lanes.getAttribute("charset") === (null == current2.charSet ? null : current2.charSet)) {
                                  hoistableRoot.splice(i, 1);
                                  break b;
                                }
                            }
                            lanes = root2.createElement(flags);
                            setInitialProperties(lanes, flags, current2);
                            root2.head.appendChild(lanes);
                            break;
                          default:
                            throw Error(
                              'getNodesForType encountered a type it did not expect: "' + flags + '". This is a bug in React.'
                            );
                        }
                      lanes[internalInstanceKey] = finishedWork;
                      markNodeAsHoistable(lanes);
                      flags = lanes;
                    }
                    finishedWork.stateNode = flags;
                  } else
                    mountHoistable(
                      hoistableRoot,
                      finishedWork.type,
                      finishedWork.stateNode
                    );
                else
                  finishedWork.stateNode = acquireResource(
                    hoistableRoot,
                    flags,
                    finishedWork.memoizedProps
                  );
              else if (root2 !== flags)
                null === root2 ? null !== current2.stateNode && (current2 = current2.stateNode, current2.parentNode.removeChild(current2)) : root2.count--, null === flags ? mountHoistable(
                  hoistableRoot,
                  finishedWork.type,
                  finishedWork.stateNode
                ) : acquireResource(
                  hoistableRoot,
                  flags,
                  finishedWork.memoizedProps
                );
              else if (null === flags && null !== finishedWork.stateNode)
                try {
                  var domElement = finishedWork.stateNode, newProps = finishedWork.memoizedProps;
                  updateProperties(
                    domElement,
                    finishedWork.type,
                    current2.memoizedProps,
                    newProps
                  );
                  domElement[internalPropsKey] = newProps;
                } catch (error$34) {
                  captureCommitPhaseError(
                    finishedWork,
                    finishedWork.return,
                    error$34
                  );
                }
            }
            break;
          case 27:
            if (flags & 4 && null === finishedWork.alternate) {
              hoistableRoot = finishedWork.stateNode;
              i = finishedWork.memoizedProps;
              for (var node = hoistableRoot.firstChild; node; ) {
                var nextNode = node.nextSibling, nodeName = node.nodeName;
                node[internalHoistableMarker] || "HEAD" === nodeName || "BODY" === nodeName || "SCRIPT" === nodeName || "STYLE" === nodeName || "LINK" === nodeName && "stylesheet" === node.rel.toLowerCase() || hoistableRoot.removeChild(node);
                node = nextNode;
              }
              node = finishedWork.type;
              getInstanceFromNode(hoistableRoot) && (nextNode = hoistableRoot.tagName.toLowerCase(), error$jscomp$0(
                "You are mounting a new %s component when a previous one has not first unmounted. It is an error to render more than one %s component at a time and attributes and children of these components will likely fail in unpredictable ways. Please only render a single instance of <%s> and if you need to mount a new one, ensure any previous ones have unmounted first.",
                nextNode,
                nextNode,
                nextNode
              ));
              switch (node) {
                case "html":
                case "head":
                case "body":
                  break;
                default:
                  error$jscomp$0(
                    "acquireSingletonInstance was called with an element type that is not supported. This is a bug in React."
                  );
              }
              for (nextNode = hoistableRoot.attributes; nextNode.length; )
                hoistableRoot.removeAttributeNode(nextNode[0]);
              setInitialProperties(hoistableRoot, node, i);
              hoistableRoot[internalInstanceKey] = finishedWork;
              hoistableRoot[internalPropsKey] = i;
            }
          case 5:
            recursivelyTraverseMutationEffects(root2, finishedWork, lanes);
            commitReconciliationEffects(finishedWork);
            flags & 512 && null !== current2 && safelyDetachRef(current2, current2.return);
            if (finishedWork.flags & 32) {
              root2 = finishedWork.stateNode;
              try {
                setTextContent(root2, "");
              } catch (error$35) {
                captureCommitPhaseError(
                  finishedWork,
                  finishedWork.return,
                  error$35
                );
              }
            }
            if (flags & 4 && (root2 = finishedWork.stateNode, null != root2)) {
              lanes = finishedWork.memoizedProps;
              current2 = null !== current2 ? current2.memoizedProps : lanes;
              hoistableRoot = finishedWork.type;
              try {
                updateProperties(root2, hoistableRoot, current2, lanes), root2[internalPropsKey] = lanes;
              } catch (error$36) {
                captureCommitPhaseError(
                  finishedWork,
                  finishedWork.return,
                  error$36
                );
              }
            }
            flags & 1024 && (needsFormReset = true, "form" !== finishedWork.type && error$jscomp$0(
              "Unexpected host component type. Expected a form. This is a bug in React."
            ));
            break;
          case 6:
            recursivelyTraverseMutationEffects(root2, finishedWork, lanes);
            commitReconciliationEffects(finishedWork);
            if (flags & 4) {
              if (null === finishedWork.stateNode)
                throw Error(
                  "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue."
                );
              flags = finishedWork.stateNode;
              current2 = finishedWork.memoizedProps;
              try {
                flags.nodeValue = current2;
              } catch (error$37) {
                captureCommitPhaseError(
                  finishedWork,
                  finishedWork.return,
                  error$37
                );
              }
            }
            break;
          case 3:
            tagCaches = null;
            hoistableRoot = currentHoistableRoot;
            currentHoistableRoot = getHoistableRoot(root2.containerInfo);
            recursivelyTraverseMutationEffects(root2, finishedWork, lanes);
            currentHoistableRoot = hoistableRoot;
            commitReconciliationEffects(finishedWork);
            if (flags & 4 && null !== current2 && current2.memoizedState.isDehydrated)
              try {
                retryIfBlockedOn(root2.containerInfo);
              } catch (error$38) {
                captureCommitPhaseError(
                  finishedWork,
                  finishedWork.return,
                  error$38
                );
              }
            needsFormReset && (needsFormReset = false, recursivelyResetForms(finishedWork));
            break;
          case 4:
            flags = currentHoistableRoot;
            currentHoistableRoot = getHoistableRoot(
              finishedWork.stateNode.containerInfo
            );
            recursivelyTraverseMutationEffects(root2, finishedWork, lanes);
            commitReconciliationEffects(finishedWork);
            currentHoistableRoot = flags;
            break;
          case 13:
            recursivelyTraverseMutationEffects(root2, finishedWork, lanes);
            commitReconciliationEffects(finishedWork);
            finishedWork.child.flags & 8192 && null !== finishedWork.memoizedState !== (null !== current2 && null !== current2.memoizedState) && (globalMostRecentFallbackTime = now$1());
            flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
            break;
          case 22:
            flags & 512 && null !== current2 && safelyDetachRef(current2, current2.return);
            domElement = null !== finishedWork.memoizedState;
            newProps = null !== current2 && null !== current2.memoizedState;
            var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden, prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || domElement;
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || newProps;
            recursivelyTraverseMutationEffects(root2, finishedWork, lanes);
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
            commitReconciliationEffects(finishedWork);
            root2 = finishedWork.stateNode;
            root2._current = finishedWork;
            root2._visibility &= ~OffscreenDetached;
            root2._visibility |= root2._pendingVisibility & OffscreenDetached;
            if (flags & 8192 && (root2._visibility = domElement ? root2._visibility & ~OffscreenVisible : root2._visibility | OffscreenVisible, domElement && (root2 = offscreenSubtreeIsHidden || offscreenSubtreeWasHidden, null === current2 || newProps || root2 || recursivelyTraverseDisappearLayoutEffects(finishedWork)), null === finishedWork.memoizedProps || "manual" !== finishedWork.memoizedProps.mode))
              a:
                for (current2 = null, root2 = finishedWork; ; ) {
                  if (5 === root2.tag || 26 === root2.tag || 27 === root2.tag) {
                    if (null === current2) {
                      current2 = root2;
                      try {
                        hoistableRoot = root2.stateNode, domElement ? (i = hoistableRoot.style, "function" === typeof i.setProperty ? i.setProperty("display", "none", "important") : i.display = "none") : (node = root2.stateNode, nextNode = root2.memoizedProps[STYLE], nodeName = void 0 !== nextNode && null !== nextNode && nextNode.hasOwnProperty("display") ? nextNode.display : null, node.style.display = null == nodeName || "boolean" === typeof nodeName ? "" : ("" + nodeName).trim());
                      } catch (error$27) {
                        captureCommitPhaseError(
                          finishedWork,
                          finishedWork.return,
                          error$27
                        );
                      }
                    }
                  } else if (6 === root2.tag) {
                    if (null === current2)
                      try {
                        root2.stateNode.nodeValue = domElement ? "" : root2.memoizedProps;
                      } catch (error$28) {
                        captureCommitPhaseError(
                          finishedWork,
                          finishedWork.return,
                          error$28
                        );
                      }
                  } else if ((22 !== root2.tag && 23 !== root2.tag || null === root2.memoizedState || root2 === finishedWork) && null !== root2.child) {
                    root2.child.return = root2;
                    root2 = root2.child;
                    continue;
                  }
                  if (root2 === finishedWork)
                    break a;
                  for (; null === root2.sibling; ) {
                    if (null === root2.return || root2.return === finishedWork)
                      break a;
                    current2 === root2 && (current2 = null);
                    root2 = root2.return;
                  }
                  current2 === root2 && (current2 = null);
                  root2.sibling.return = root2.return;
                  root2 = root2.sibling;
                }
            flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (current2 = flags.retryQueue, null !== current2 && (flags.retryQueue = null, attachSuspenseRetryListeners(finishedWork, current2))));
            break;
          case 19:
            recursivelyTraverseMutationEffects(root2, finishedWork, lanes);
            commitReconciliationEffects(finishedWork);
            flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
            break;
          case 21:
            break;
          default:
            recursivelyTraverseMutationEffects(root2, finishedWork, lanes), commitReconciliationEffects(finishedWork);
        }
      }
      function commitReconciliationEffects(finishedWork) {
        var flags = finishedWork.flags;
        if (flags & 2) {
          try {
            if (27 !== finishedWork.tag) {
              b: {
                for (var parent = finishedWork.return; null !== parent; ) {
                  if (isHostParent(parent)) {
                    var parentFiber = parent;
                    break b;
                  }
                  parent = parent.return;
                }
                throw Error(
                  "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
                );
              }
              switch (parentFiber.tag) {
                case 27:
                  var parent$jscomp$0 = parentFiber.stateNode, before = getHostSibling(finishedWork);
                  insertOrAppendPlacementNode(
                    finishedWork,
                    before,
                    parent$jscomp$0
                  );
                  break;
                case 5:
                  var _parent = parentFiber.stateNode;
                  parentFiber.flags & 32 && (setTextContent(_parent, ""), parentFiber.flags &= -33);
                  var _before = getHostSibling(finishedWork);
                  insertOrAppendPlacementNode(finishedWork, _before, _parent);
                  break;
                case 3:
                case 4:
                  var _parent2 = parentFiber.stateNode.containerInfo, _before2 = getHostSibling(finishedWork);
                  insertOrAppendPlacementNodeIntoContainer(
                    finishedWork,
                    _before2,
                    _parent2
                  );
                  break;
                default:
                  throw Error(
                    "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue."
                  );
              }
            }
          } catch (error$40) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error$40);
          }
          finishedWork.flags &= -3;
        }
        flags & 4096 && (finishedWork.flags &= -4097);
      }
      function recursivelyResetForms(parentFiber) {
        if (parentFiber.subtreeFlags & 1024)
          for (parentFiber = parentFiber.child; null !== parentFiber; ) {
            var fiber = parentFiber;
            recursivelyResetForms(fiber);
            5 === fiber.tag && fiber.flags & 1024 && fiber.stateNode.reset();
            parentFiber = parentFiber.sibling;
          }
      }
      function commitLayoutEffects(finishedWork, root2, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root2;
        runWithFiberInDEV(
          finishedWork,
          commitLayoutEffectOnFiber,
          root2,
          finishedWork.alternate,
          finishedWork,
          committedLanes
        );
        inProgressRoot = inProgressLanes = null;
      }
      function recursivelyTraverseLayoutEffects(root2, parentFiber, lanes) {
        if (parentFiber.subtreeFlags & 8772)
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            runWithFiberInDEV(
              parentFiber,
              commitLayoutEffectOnFiber,
              root2,
              parentFiber.alternate,
              parentFiber,
              lanes
            ), parentFiber = parentFiber.sibling;
      }
      function disappearLayoutEffects(finishedWork) {
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            if (shouldProfile(finishedWork))
              try {
                startLayoutEffectTimer(), commitHookEffectListUnmount(
                  Layout,
                  finishedWork,
                  finishedWork.return
                );
              } finally {
                recordLayoutEffectDuration(finishedWork);
              }
            else
              commitHookEffectListUnmount(
                Layout,
                finishedWork,
                finishedWork.return
              );
            recursivelyTraverseDisappearLayoutEffects(finishedWork);
            break;
          case 1:
            safelyDetachRef(finishedWork, finishedWork.return);
            var instance = finishedWork.stateNode;
            if ("function" === typeof instance.componentWillUnmount) {
              var nearestMountedAncestor = finishedWork.return;
              try {
                callComponentWillUnmountWithTimer(finishedWork, instance);
              } catch (error$11) {
                captureCommitPhaseError(
                  finishedWork,
                  nearestMountedAncestor,
                  error$11
                );
              }
            }
            recursivelyTraverseDisappearLayoutEffects(finishedWork);
            break;
          case 26:
          case 27:
          case 5:
            safelyDetachRef(finishedWork, finishedWork.return);
            recursivelyTraverseDisappearLayoutEffects(finishedWork);
            break;
          case 22:
            safelyDetachRef(finishedWork, finishedWork.return);
            null === finishedWork.memoizedState && recursivelyTraverseDisappearLayoutEffects(finishedWork);
            break;
          default:
            recursivelyTraverseDisappearLayoutEffects(finishedWork);
        }
      }
      function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
        for (parentFiber = parentFiber.child; null !== parentFiber; )
          disappearLayoutEffects(parentFiber), parentFiber = parentFiber.sibling;
      }
      function reappearLayoutEffects(finishedRoot, current2, finishedWork, includeWorkInProgressEffects) {
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              includeWorkInProgressEffects
            );
            commitHookLayoutEffects(finishedWork, Layout);
            break;
          case 1:
            recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              includeWorkInProgressEffects
            );
            finishedRoot = finishedWork.stateNode;
            if ("function" === typeof finishedRoot.componentDidMount)
              try {
                finishedRoot.componentDidMount();
              } catch (error$41) {
                captureCommitPhaseError(
                  finishedWork,
                  finishedWork.return,
                  error$41
                );
              }
            var updateQueue = finishedWork.updateQueue;
            if (null !== updateQueue && (current2 = updateQueue.shared.hiddenCallbacks, null !== current2))
              for (updateQueue.shared.hiddenCallbacks = null, updateQueue = 0; updateQueue < current2.length; updateQueue++)
                callCallback(current2[updateQueue], finishedRoot);
            includeWorkInProgressEffects && flags & 64 && commitClassCallbacks(finishedWork);
            safelyAttachRef(finishedWork, finishedWork.return);
            break;
          case 26:
          case 27:
          case 5:
            recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              includeWorkInProgressEffects
            );
            includeWorkInProgressEffects && null === current2 && flags & 4 && commitHostComponentMount(finishedWork);
            safelyAttachRef(finishedWork, finishedWork.return);
            break;
          case 12:
            recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              includeWorkInProgressEffects
            );
            includeWorkInProgressEffects && flags & 4 && commitProfilerUpdate(finishedWork, current2);
            break;
          case 13:
            recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              includeWorkInProgressEffects
            );
            includeWorkInProgressEffects && flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
            break;
          case 22:
            null === finishedWork.memoizedState && recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              includeWorkInProgressEffects
            );
            safelyAttachRef(finishedWork, finishedWork.return);
            break;
          default:
            recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              includeWorkInProgressEffects
            );
        }
      }
      function recursivelyTraverseReappearLayoutEffects(finishedRoot, parentFiber, includeWorkInProgressEffects) {
        includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);
        for (parentFiber = parentFiber.child; null !== parentFiber; )
          runWithFiberInDEV(
            parentFiber,
            reappearLayoutEffects,
            finishedRoot,
            parentFiber.alternate,
            parentFiber,
            includeWorkInProgressEffects
          ), parentFiber = parentFiber.sibling;
      }
      function commitHookPassiveMountEffects(finishedWork, hookFlags) {
        if (shouldProfile(finishedWork)) {
          passiveEffectStartTime = now();
          try {
            commitHookEffectListMount(hookFlags, finishedWork);
          } catch (error$42) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error$42);
          }
          recordPassiveEffectDuration(finishedWork);
        } else
          try {
            commitHookEffectListMount(hookFlags, finishedWork);
          } catch (error$43) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error$43);
          }
      }
      function commitOffscreenPassiveMountEffects(current2, finishedWork) {
        var previousCache = null;
        null !== current2 && null !== current2.memoizedState && null !== current2.memoizedState.cachePool && (previousCache = current2.memoizedState.cachePool.pool);
        current2 = null;
        null !== finishedWork.memoizedState && null !== finishedWork.memoizedState.cachePool && (current2 = finishedWork.memoizedState.cachePool.pool);
        current2 !== previousCache && (null != current2 && retainCache(current2), null != previousCache && releaseCache(previousCache));
      }
      function commitCachePassiveMountEffect(current2, finishedWork) {
        current2 = null;
        null !== finishedWork.alternate && (current2 = finishedWork.alternate.memoizedState.cache);
        finishedWork = finishedWork.memoizedState.cache;
        finishedWork !== current2 && (retainCache(finishedWork), null != current2 && releaseCache(current2));
      }
      function recursivelyTraversePassiveMountEffects(root2, parentFiber, committedLanes, committedTransitions) {
        if (parentFiber.subtreeFlags & 10256)
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            runWithFiberInDEV(
              parentFiber,
              commitPassiveMountOnFiber,
              root2,
              parentFiber,
              committedLanes,
              committedTransitions
            ), parentFiber = parentFiber.sibling;
      }
      function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
            flags & 2048 && commitHookPassiveMountEffects(finishedWork, Passive | HasEffect);
            break;
          case 3:
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
            flags & 2048 && (finishedRoot = null, null !== finishedWork.alternate && (finishedRoot = finishedWork.alternate.memoizedState.cache), finishedWork = finishedWork.memoizedState.cache, finishedWork !== finishedRoot && (retainCache(finishedWork), null != finishedRoot && releaseCache(finishedRoot)));
            break;
          case 23:
            break;
          case 22:
            var _instance3 = finishedWork.stateNode;
            null !== finishedWork.memoizedState ? _instance3._visibility & OffscreenPassiveEffectsConnected ? recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            ) : recursivelyTraverseAtomicPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            ) : _instance3._visibility & OffscreenPassiveEffectsConnected ? recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            ) : (_instance3._visibility |= OffscreenPassiveEffectsConnected, recursivelyTraverseReconnectPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions,
              0 !== (finishedWork.subtreeFlags & 10256)
            ));
            flags & 2048 && commitOffscreenPassiveMountEffects(
              finishedWork.alternate,
              finishedWork
            );
            break;
          case 24:
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
            flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
            break;
          default:
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
        }
      }
      function recursivelyTraverseReconnectPassiveEffects(finishedRoot, parentFiber, committedLanes, committedTransitions, includeWorkInProgressEffects) {
        includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 10256);
        for (parentFiber = parentFiber.child; null !== parentFiber; )
          runWithFiberInDEV(
            parentFiber,
            reconnectPassiveEffects,
            finishedRoot,
            parentFiber,
            committedLanes,
            committedTransitions,
            includeWorkInProgressEffects
          ), parentFiber = parentFiber.sibling;
      }
      function reconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects) {
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            recursivelyTraverseReconnectPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions,
              includeWorkInProgressEffects
            );
            commitHookPassiveMountEffects(finishedWork, Passive);
            break;
          case 23:
            break;
          case 22:
            var _instance4 = finishedWork.stateNode;
            null !== finishedWork.memoizedState ? _instance4._visibility & OffscreenPassiveEffectsConnected ? recursivelyTraverseReconnectPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions,
              includeWorkInProgressEffects
            ) : recursivelyTraverseAtomicPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            ) : (_instance4._visibility |= OffscreenPassiveEffectsConnected, recursivelyTraverseReconnectPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions,
              includeWorkInProgressEffects
            ));
            includeWorkInProgressEffects && flags & 2048 && commitOffscreenPassiveMountEffects(
              finishedWork.alternate,
              finishedWork
            );
            break;
          case 24:
            recursivelyTraverseReconnectPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions,
              includeWorkInProgressEffects
            );
            includeWorkInProgressEffects && flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
            break;
          default:
            recursivelyTraverseReconnectPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions,
              includeWorkInProgressEffects
            );
        }
      }
      function recursivelyTraverseAtomicPassiveEffects(finishedRoot, parentFiber, committedLanes, committedTransitions) {
        if (parentFiber.subtreeFlags & 10256)
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            runWithFiberInDEV(
              parentFiber,
              commitAtomicPassiveEffects,
              finishedRoot,
              parentFiber,
              committedLanes,
              committedTransitions
            ), parentFiber = parentFiber.sibling;
      }
      function commitAtomicPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions) {
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case 22:
            recursivelyTraverseAtomicPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
            flags & 2048 && commitOffscreenPassiveMountEffects(
              finishedWork.alternate,
              finishedWork
            );
            break;
          case 24:
            recursivelyTraverseAtomicPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
            flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
            break;
          default:
            recursivelyTraverseAtomicPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
        }
      }
      function recursivelyAccumulateSuspenseyCommit(parentFiber) {
        if (parentFiber.subtreeFlags & suspenseyCommitFlag)
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            accumulateSuspenseyCommitOnFiber(parentFiber), parentFiber = parentFiber.sibling;
      }
      function accumulateSuspenseyCommitOnFiber(fiber) {
        switch (fiber.tag) {
          case 26:
            recursivelyAccumulateSuspenseyCommit(fiber);
            fiber.flags & suspenseyCommitFlag && null !== fiber.memoizedState && suspendResource(
              currentHoistableRoot,
              fiber.memoizedState,
              fiber.memoizedProps
            );
            break;
          case 5:
            recursivelyAccumulateSuspenseyCommit(fiber);
            break;
          case 3:
          case 4:
            var previousHoistableRoot = currentHoistableRoot;
            currentHoistableRoot = getHoistableRoot(
              fiber.stateNode.containerInfo
            );
            recursivelyAccumulateSuspenseyCommit(fiber);
            currentHoistableRoot = previousHoistableRoot;
            break;
          case 22:
            null === fiber.memoizedState && (previousHoistableRoot = fiber.alternate, null !== previousHoistableRoot && null !== previousHoistableRoot.memoizedState ? (previousHoistableRoot = suspenseyCommitFlag, suspenseyCommitFlag = 16777216, recursivelyAccumulateSuspenseyCommit(fiber), suspenseyCommitFlag = previousHoistableRoot) : recursivelyAccumulateSuspenseyCommit(fiber));
            break;
          default:
            recursivelyAccumulateSuspenseyCommit(fiber);
        }
      }
      function detachAlternateSiblings(parentFiber) {
        var previousFiber = parentFiber.alternate;
        if (null !== previousFiber && (parentFiber = previousFiber.child, null !== parentFiber)) {
          previousFiber.child = null;
          do
            previousFiber = parentFiber.sibling, parentFiber.sibling = null, parentFiber = previousFiber;
          while (null !== parentFiber);
        }
      }
      function commitHookPassiveUnmountEffects(finishedWork, nearestMountedAncestor, hookFlags) {
        shouldProfile(finishedWork) ? (passiveEffectStartTime = now(), commitHookEffectListUnmount(
          hookFlags,
          finishedWork,
          nearestMountedAncestor
        ), recordPassiveEffectDuration(finishedWork)) : commitHookEffectListUnmount(
          hookFlags,
          finishedWork,
          nearestMountedAncestor
        );
      }
      function recursivelyTraversePassiveUnmountEffects(parentFiber) {
        var deletions = parentFiber.deletions;
        if (0 !== (parentFiber.flags & 16)) {
          if (null !== deletions)
            for (var i = 0; i < deletions.length; i++) {
              var childToDelete = deletions[i];
              nextEffect = childToDelete;
              commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
                childToDelete,
                parentFiber
              );
            }
          detachAlternateSiblings(parentFiber);
        }
        if (parentFiber.subtreeFlags & 10256)
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            runWithFiberInDEV(
              parentFiber,
              commitPassiveUnmountOnFiber,
              parentFiber
            ), parentFiber = parentFiber.sibling;
      }
      function commitPassiveUnmountOnFiber(finishedWork) {
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
            finishedWork.flags & 2048 && commitHookPassiveUnmountEffects(
              finishedWork,
              finishedWork.return,
              Passive | HasEffect
            );
            break;
          case 22:
            var instance = finishedWork.stateNode;
            null !== finishedWork.memoizedState && instance._visibility & OffscreenPassiveEffectsConnected && (null === finishedWork.return || 13 !== finishedWork.return.tag) ? (instance._visibility &= ~OffscreenPassiveEffectsConnected, recursivelyTraverseDisconnectPassiveEffects(finishedWork)) : recursivelyTraversePassiveUnmountEffects(finishedWork);
            break;
          default:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
        }
      }
      function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
        var deletions = parentFiber.deletions;
        if (0 !== (parentFiber.flags & 16)) {
          if (null !== deletions)
            for (var i = 0; i < deletions.length; i++) {
              var childToDelete = deletions[i];
              nextEffect = childToDelete;
              commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
                childToDelete,
                parentFiber
              );
            }
          detachAlternateSiblings(parentFiber);
        }
        for (parentFiber = parentFiber.child; null !== parentFiber; )
          runWithFiberInDEV(parentFiber, disconnectPassiveEffect, parentFiber), parentFiber = parentFiber.sibling;
      }
      function disconnectPassiveEffect(finishedWork) {
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            commitHookPassiveUnmountEffects(
              finishedWork,
              finishedWork.return,
              Passive
            );
            recursivelyTraverseDisconnectPassiveEffects(finishedWork);
            break;
          case 22:
            var instance = finishedWork.stateNode;
            instance._visibility & OffscreenPassiveEffectsConnected && (instance._visibility &= ~OffscreenPassiveEffectsConnected, recursivelyTraverseDisconnectPassiveEffects(finishedWork));
            break;
          default:
            recursivelyTraverseDisconnectPassiveEffects(finishedWork);
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
        for (; null !== nextEffect; ) {
          var fiber = nextEffect;
          runWithFiberInDEV(
            fiber,
            commitPassiveUnmountInsideDeletedTreeOnFiber,
            fiber,
            nearestMountedAncestor
          );
          var child = fiber.child;
          if (null !== child)
            child.return = fiber, nextEffect = child;
          else
            a:
              for (fiber = deletedSubtreeRoot; null !== nextEffect; ) {
                child = nextEffect;
                var sibling = child.sibling, returnFiber = child.return;
                detachFiberAfterEffects(child);
                if (child === fiber) {
                  nextEffect = null;
                  break a;
                }
                if (null !== sibling) {
                  sibling.return = returnFiber;
                  nextEffect = sibling;
                  break a;
                }
                nextEffect = returnFiber;
              }
        }
      }
      function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
        switch (current2.tag) {
          case 0:
          case 11:
          case 15:
            commitHookPassiveUnmountEffects(
              current2,
              nearestMountedAncestor,
              Passive
            );
            break;
          case 23:
          case 22:
            null !== current2.memoizedState && null !== current2.memoizedState.cachePool && (current2 = current2.memoizedState.cachePool.pool, null != current2 && retainCache(current2));
            break;
          case 24:
            releaseCache(current2.memoizedState.cache);
        }
      }
      function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag;
        this.key = key;
        this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
        this.index = 0;
        this.refCleanup = this.ref = null;
        this.pendingProps = pendingProps;
        this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
        this.mode = mode;
        this.subtreeFlags = this.flags = 0;
        this.deletions = null;
        this.childLanes = this.lanes = 0;
        this.alternate = null;
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.treeBaseDuration = this.selfBaseDuration = 0;
        this._debugTask = this._debugStack = this._debugOwner = this._debugInfo = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        hasBadMapPolyfill || "function" !== typeof Object.preventExtensions || Object.preventExtensions(this);
      }
      function createFiber(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
      }
      function shouldConstruct(Component) {
        Component = Component.prototype;
        return !(!Component || !Component.isReactComponent);
      }
      function createWorkInProgress(current2, pendingProps) {
        var workInProgress2 = current2.alternate;
        null === workInProgress2 ? (workInProgress2 = createFiber(
          current2.tag,
          pendingProps,
          current2.key,
          current2.mode
        ), workInProgress2.elementType = current2.elementType, workInProgress2.type = current2.type, workInProgress2.stateNode = current2.stateNode, workInProgress2._debugOwner = current2._debugOwner, workInProgress2._debugStack = current2._debugStack, workInProgress2._debugTask = current2._debugTask, workInProgress2._debugHookTypes = current2._debugHookTypes, workInProgress2.alternate = current2, current2.alternate = workInProgress2) : (workInProgress2.pendingProps = pendingProps, workInProgress2.type = current2.type, workInProgress2.flags = 0, workInProgress2.subtreeFlags = 0, workInProgress2.deletions = null, workInProgress2.actualDuration = 0, workInProgress2.actualStartTime = -1);
        workInProgress2.flags = current2.flags & 31457280;
        workInProgress2.childLanes = current2.childLanes;
        workInProgress2.lanes = current2.lanes;
        workInProgress2.child = current2.child;
        workInProgress2.memoizedProps = current2.memoizedProps;
        workInProgress2.memoizedState = current2.memoizedState;
        workInProgress2.updateQueue = current2.updateQueue;
        pendingProps = current2.dependencies;
        workInProgress2.dependencies = null === pendingProps ? null : {
          lanes: pendingProps.lanes,
          firstContext: pendingProps.firstContext
        };
        workInProgress2.sibling = current2.sibling;
        workInProgress2.index = current2.index;
        workInProgress2.ref = current2.ref;
        workInProgress2.refCleanup = current2.refCleanup;
        workInProgress2.selfBaseDuration = current2.selfBaseDuration;
        workInProgress2.treeBaseDuration = current2.treeBaseDuration;
        workInProgress2._debugInfo = current2._debugInfo;
        workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
        switch (workInProgress2.tag) {
          case 0:
          case 15:
            workInProgress2.type = resolveFunctionForHotReloading(current2.type);
            break;
          case 1:
            workInProgress2.type = resolveFunctionForHotReloading(current2.type);
            break;
          case 11:
            workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
        }
        return workInProgress2;
      }
      function resetWorkInProgress(workInProgress2, renderLanes2) {
        workInProgress2.flags &= 31457282;
        var current2 = workInProgress2.alternate;
        null === current2 ? (workInProgress2.childLanes = 0, workInProgress2.lanes = renderLanes2, workInProgress2.child = null, workInProgress2.subtreeFlags = 0, workInProgress2.memoizedProps = null, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null, workInProgress2.dependencies = null, workInProgress2.stateNode = null, workInProgress2.selfBaseDuration = 0, workInProgress2.treeBaseDuration = 0) : (workInProgress2.childLanes = current2.childLanes, workInProgress2.lanes = current2.lanes, workInProgress2.child = current2.child, workInProgress2.subtreeFlags = 0, workInProgress2.deletions = null, workInProgress2.memoizedProps = current2.memoizedProps, workInProgress2.memoizedState = current2.memoizedState, workInProgress2.updateQueue = current2.updateQueue, workInProgress2.type = current2.type, renderLanes2 = current2.dependencies, workInProgress2.dependencies = null === renderLanes2 ? null : {
          lanes: renderLanes2.lanes,
          firstContext: renderLanes2.firstContext
        }, workInProgress2.selfBaseDuration = current2.selfBaseDuration, workInProgress2.treeBaseDuration = current2.treeBaseDuration);
        return workInProgress2;
      }
      function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = 0, resolvedType = type;
        if ("function" === typeof type)
          shouldConstruct(type) && (fiberTag = 1), resolvedType = resolveFunctionForHotReloading(resolvedType);
        else if ("string" === typeof type)
          fiberTag = getHostContext(), fiberTag = isHostHoistableType(type, pendingProps, fiberTag) ? 26 : "html" === type || "head" === type || "body" === type ? 27 : 5;
        else
          a:
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(
                  pendingProps.children,
                  mode,
                  lanes,
                  key
                );
              case REACT_STRICT_MODE_TYPE:
                fiberTag = 8;
                mode |= 24;
                break;
              case REACT_PROFILER_TYPE:
                return type = pendingProps, owner = mode, "string" !== typeof type.id && error$jscomp$0(
                  'Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.',
                  typeof type.id
                ), key = createFiber(12, type, key, owner | 2), key.elementType = REACT_PROFILER_TYPE, key.lanes = lanes, key.stateNode = { effectDuration: 0, passiveEffectDuration: 0 }, key;
              case REACT_SUSPENSE_TYPE:
                return key = createFiber(13, pendingProps, key, mode), key.elementType = REACT_SUSPENSE_TYPE, key.lanes = lanes, key;
              case REACT_SUSPENSE_LIST_TYPE:
                return key = createFiber(19, pendingProps, key, mode), key.elementType = REACT_SUSPENSE_LIST_TYPE, key.lanes = lanes, key;
              case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
              default:
                if ("object" === typeof type && null !== type)
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                    case REACT_CONTEXT_TYPE:
                      fiberTag = 10;
                      break a;
                    case REACT_CONSUMER_TYPE:
                      fiberTag = 9;
                      break a;
                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = 11;
                      resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      break a;
                    case REACT_MEMO_TYPE:
                      fiberTag = 14;
                      break a;
                    case REACT_LAZY_TYPE:
                      fiberTag = 16;
                      resolvedType = null;
                      break a;
                  }
                resolvedType = "";
                if (void 0 === type || "object" === typeof type && null !== type && 0 === Object.keys(type).length)
                  resolvedType += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                null === type ? pendingProps = "null" : isArrayImpl(type) ? pendingProps = "array" : void 0 !== type && type.$$typeof === REACT_ELEMENT_TYPE ? (pendingProps = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", resolvedType = " Did you accidentally export a JSX literal instead of a component?") : pendingProps = typeof type;
                (fiberTag = owner ? getComponentNameFromOwner(owner) : null) && (resolvedType += "\n\nCheck the render method of `" + fiberTag + "`.");
                fiberTag = 29;
                pendingProps = Error(
                  "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (pendingProps + "." + resolvedType)
                );
                resolvedType = null;
            }
        key = createFiber(fiberTag, pendingProps, key, mode);
        key.elementType = type;
        key.type = resolvedType;
        key.lanes = lanes;
        key._debugOwner = owner;
        return key;
      }
      function createFiberFromElement(element, mode, lanes) {
        mode = createFiberFromTypeAndProps(
          element.type,
          element.key,
          element.props,
          element._owner,
          mode,
          lanes
        );
        mode._debugOwner = element._owner;
        mode._debugStack = element._debugStack;
        mode._debugTask = element._debugTask;
        return mode;
      }
      function createFiberFromFragment(elements, mode, lanes, key) {
        elements = createFiber(7, elements, key, mode);
        elements.lanes = lanes;
        return elements;
      }
      function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        pendingProps = createFiber(22, pendingProps, key, mode);
        pendingProps.elementType = REACT_OFFSCREEN_TYPE;
        pendingProps.lanes = lanes;
        var primaryChildInstance = {
          _visibility: OffscreenVisible,
          _pendingVisibility: OffscreenVisible,
          _pendingMarkers: null,
          _retryCache: null,
          _transitions: null,
          _current: null,
          detach: function() {
            var instance = primaryChildInstance, fiber = instance._current;
            if (null === fiber)
              throw Error(
                "Calling Offscreen.detach before instance handle has been set."
              );
            if (0 === (instance._pendingVisibility & OffscreenDetached)) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              null !== root2 && (instance._pendingVisibility |= OffscreenDetached, scheduleUpdateOnFiber(root2, fiber, SyncLane));
            }
          },
          attach: function() {
            var instance = primaryChildInstance, fiber = instance._current;
            if (null === fiber)
              throw Error(
                "Calling Offscreen.detach before instance handle has been set."
              );
            if (0 !== (instance._pendingVisibility & OffscreenDetached)) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              null !== root2 && (instance._pendingVisibility &= ~OffscreenDetached, scheduleUpdateOnFiber(root2, fiber, SyncLane));
            }
          }
        };
        pendingProps.stateNode = primaryChildInstance;
        return pendingProps;
      }
      function createFiberFromText(content, mode, lanes) {
        content = createFiber(6, content, null, mode);
        content.lanes = lanes;
        return content;
      }
      function createFiberFromPortal(portal, mode, lanes) {
        mode = createFiber(
          4,
          null !== portal.children ? portal.children : [],
          portal.key,
          mode
        );
        mode.lanes = lanes;
        mode.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          implementation: portal.implementation
        };
        return mode;
      }
      function markUpdate(workInProgress2) {
        workInProgress2.flags |= 4;
      }
      function preloadResourceAndSuspendIfNeeded(workInProgress2, resource) {
        if ("stylesheet" !== resource.type || (resource.state.loading & Inserted) !== NotLoaded)
          workInProgress2.flags &= -16777217;
        else if (workInProgress2.flags |= 16777216, !preloadResource(resource))
          if (shouldRemainOnPreviousScreen())
            workInProgress2.flags |= 8192;
          else
            throw suspendedThenable = noopSuspenseyCommitThenable, SuspenseyCommitException;
      }
      function scheduleRetryEffect(workInProgress2, retryQueue) {
        null !== retryQueue ? workInProgress2.flags |= 4 : workInProgress2.flags & 16384 && (retryQueue = 22 !== workInProgress2.tag ? claimNextRetryLane() : OffscreenLane, workInProgress2.lanes |= retryQueue);
      }
      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (!isHydrating)
          switch (renderState.tailMode) {
            case "hidden":
              hasRenderedATailFallback = renderState.tail;
              for (var lastTailNode = null; null !== hasRenderedATailFallback; )
                null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
              null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
              break;
            case "collapsed":
              lastTailNode = renderState.tail;
              for (var _lastTailNode = null; null !== lastTailNode; )
                null !== lastTailNode.alternate && (_lastTailNode = lastTailNode), lastTailNode = lastTailNode.sibling;
              null === _lastTailNode ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : _lastTailNode.sibling = null;
          }
      }
      function bubbleProperties(completedWork) {
        var didBailout = null !== completedWork.alternate && completedWork.alternate.child === completedWork.child, newChildLanes = 0, subtreeFlags = 0;
        if (didBailout)
          if (0 !== (completedWork.mode & 2)) {
            for (var _treeBaseDuration = completedWork.selfBaseDuration, _child2 = completedWork.child; null !== _child2; )
              newChildLanes |= _child2.lanes | _child2.childLanes, subtreeFlags |= _child2.subtreeFlags & 31457280, subtreeFlags |= _child2.flags & 31457280, _treeBaseDuration += _child2.treeBaseDuration, _child2 = _child2.sibling;
            completedWork.treeBaseDuration = _treeBaseDuration;
          } else
            for (_treeBaseDuration = completedWork.child; null !== _treeBaseDuration; )
              newChildLanes |= _treeBaseDuration.lanes | _treeBaseDuration.childLanes, subtreeFlags |= _treeBaseDuration.subtreeFlags & 31457280, subtreeFlags |= _treeBaseDuration.flags & 31457280, _treeBaseDuration.return = completedWork, _treeBaseDuration = _treeBaseDuration.sibling;
        else if (0 !== (completedWork.mode & 2)) {
          _treeBaseDuration = completedWork.actualDuration;
          _child2 = completedWork.selfBaseDuration;
          for (var child = completedWork.child; null !== child; )
            newChildLanes |= child.lanes | child.childLanes, subtreeFlags |= child.subtreeFlags, subtreeFlags |= child.flags, _treeBaseDuration += child.actualDuration, _child2 += child.treeBaseDuration, child = child.sibling;
          completedWork.actualDuration = _treeBaseDuration;
          completedWork.treeBaseDuration = _child2;
        } else
          for (_treeBaseDuration = completedWork.child; null !== _treeBaseDuration; )
            newChildLanes |= _treeBaseDuration.lanes | _treeBaseDuration.childLanes, subtreeFlags |= _treeBaseDuration.subtreeFlags, subtreeFlags |= _treeBaseDuration.flags, _treeBaseDuration.return = completedWork, _treeBaseDuration = _treeBaseDuration.sibling;
        completedWork.subtreeFlags |= subtreeFlags;
        completedWork.childLanes = newChildLanes;
        return didBailout;
      }
      function completeWork(current2, workInProgress2, renderLanes2) {
        var newProps = workInProgress2.pendingProps;
        popTreeContext(workInProgress2);
        switch (workInProgress2.tag) {
          case 16:
          case 15:
          case 0:
          case 11:
          case 7:
          case 8:
          case 12:
          case 9:
          case 14:
            return bubbleProperties(workInProgress2), null;
          case 1:
            return bubbleProperties(workInProgress2), null;
          case 3:
            newProps = workInProgress2.stateNode;
            renderLanes2 = null;
            null !== current2 && (renderLanes2 = current2.memoizedState.cache);
            workInProgress2.memoizedState.cache !== renderLanes2 && (workInProgress2.flags |= 2048);
            popProvider(CacheContext, workInProgress2);
            popHostContainer(workInProgress2);
            newProps.pendingContext && (newProps.context = newProps.pendingContext, newProps.pendingContext = null);
            if (null === current2 || null === current2.child)
              popHydrationState(workInProgress2) ? (emitPendingHydrationWarnings(), markUpdate(workInProgress2)) : null === current2 || current2.memoizedState.isDehydrated && 0 === (workInProgress2.flags & 256) || (workInProgress2.flags |= 1024, null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null));
            bubbleProperties(workInProgress2);
            return null;
          case 26:
            return renderLanes2 = workInProgress2.memoizedState, null === current2 ? (markUpdate(workInProgress2), null !== renderLanes2 ? (bubbleProperties(workInProgress2), preloadResourceAndSuspendIfNeeded(
              workInProgress2,
              renderLanes2
            )) : (bubbleProperties(workInProgress2), workInProgress2.flags &= -16777217)) : renderLanes2 ? renderLanes2 !== current2.memoizedState ? (markUpdate(workInProgress2), bubbleProperties(workInProgress2), preloadResourceAndSuspendIfNeeded(
              workInProgress2,
              renderLanes2
            )) : (bubbleProperties(workInProgress2), workInProgress2.flags &= -16777217) : (current2.memoizedProps !== newProps && markUpdate(workInProgress2), bubbleProperties(workInProgress2), workInProgress2.flags &= -16777217), null;
          case 27:
            popHostContext(workInProgress2);
            renderLanes2 = requiredContext(rootInstanceStackCursor.current);
            var _type = workInProgress2.type;
            if (null !== current2 && null != workInProgress2.stateNode)
              current2.memoizedProps !== newProps && markUpdate(workInProgress2);
            else {
              if (!newProps) {
                if (null === workInProgress2.stateNode)
                  throw Error(
                    "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
                  );
                bubbleProperties(workInProgress2);
                return null;
              }
              current2 = getHostContext();
              popHydrationState(workInProgress2) ? prepareToHydrateHostInstance(workInProgress2, current2) : (current2 = resolveSingletonInstance(
                _type,
                newProps,
                renderLanes2,
                current2,
                true
              ), workInProgress2.stateNode = current2, markUpdate(workInProgress2));
            }
            bubbleProperties(workInProgress2);
            return null;
          case 5:
            popHostContext(workInProgress2);
            renderLanes2 = workInProgress2.type;
            if (null !== current2 && null != workInProgress2.stateNode)
              current2.memoizedProps !== newProps && markUpdate(workInProgress2);
            else {
              if (!newProps) {
                if (null === workInProgress2.stateNode)
                  throw Error(
                    "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
                  );
                bubbleProperties(workInProgress2);
                return null;
              }
              _type = getHostContext();
              if (popHydrationState(workInProgress2))
                prepareToHydrateHostInstance(workInProgress2, _type);
              else {
                current2 = requiredContext(rootInstanceStackCursor.current);
                validateDOMNesting(renderLanes2, _type.ancestorInfo);
                _type = _type.context;
                current2 = getOwnerDocumentFromRootContainer(current2);
                switch (_type) {
                  case HostContextNamespaceSvg:
                    current2 = current2.createElementNS(SVG_NAMESPACE, renderLanes2);
                    break;
                  case HostContextNamespaceMath:
                    current2 = current2.createElementNS(
                      MATH_NAMESPACE,
                      renderLanes2
                    );
                    break;
                  default:
                    switch (renderLanes2) {
                      case "svg":
                        current2 = current2.createElementNS(
                          SVG_NAMESPACE,
                          renderLanes2
                        );
                        break;
                      case "math":
                        current2 = current2.createElementNS(
                          MATH_NAMESPACE,
                          renderLanes2
                        );
                        break;
                      case "script":
                        current2 = current2.createElement("div");
                        current2.innerHTML = "<script><\/script>";
                        current2 = current2.removeChild(current2.firstChild);
                        break;
                      case "select":
                        current2 = "string" === typeof newProps.is ? current2.createElement("select", { is: newProps.is }) : current2.createElement("select");
                        newProps.multiple ? current2.multiple = true : newProps.size && (current2.size = newProps.size);
                        break;
                      default:
                        current2 = "string" === typeof newProps.is ? current2.createElement(renderLanes2, {
                          is: newProps.is
                        }) : current2.createElement(renderLanes2), -1 === renderLanes2.indexOf("-") && (renderLanes2 !== renderLanes2.toLowerCase() && error$jscomp$0(
                          "<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.",
                          renderLanes2
                        ), "[object HTMLUnknownElement]" !== Object.prototype.toString.call(current2) || hasOwnProperty.call(
                          warnedUnknownTags,
                          renderLanes2
                        ) || (warnedUnknownTags[renderLanes2] = true, error$jscomp$0(
                          "The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.",
                          renderLanes2
                        )));
                    }
                }
                current2[internalInstanceKey] = workInProgress2;
                current2[internalPropsKey] = newProps;
                a:
                  for (_type = workInProgress2.child; null !== _type; ) {
                    if (5 === _type.tag || 6 === _type.tag)
                      current2.appendChild(_type.stateNode);
                    else if (4 !== _type.tag && 27 !== _type.tag && null !== _type.child) {
                      _type.child.return = _type;
                      _type = _type.child;
                      continue;
                    }
                    if (_type === workInProgress2)
                      break a;
                    for (; null === _type.sibling; ) {
                      if (null === _type.return || _type.return === workInProgress2)
                        break a;
                      _type = _type.return;
                    }
                    _type.sibling.return = _type.return;
                    _type = _type.sibling;
                  }
                workInProgress2.stateNode = current2;
                a:
                  switch (setInitialProperties(current2, renderLanes2, newProps), renderLanes2) {
                    case "button":
                    case "input":
                    case "select":
                    case "textarea":
                      current2 = !!newProps.autoFocus;
                      break a;
                    case "img":
                      current2 = true;
                      break a;
                    default:
                      current2 = false;
                  }
                current2 && markUpdate(workInProgress2);
              }
            }
            bubbleProperties(workInProgress2);
            workInProgress2.flags &= -16777217;
            return null;
          case 6:
            if (current2 && null != workInProgress2.stateNode)
              current2.memoizedProps !== newProps && markUpdate(workInProgress2);
            else {
              if ("string" !== typeof newProps && null === workInProgress2.stateNode)
                throw Error(
                  "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
                );
              current2 = requiredContext(rootInstanceStackCursor.current);
              renderLanes2 = getHostContext();
              if (popHydrationState(workInProgress2)) {
                current2 = workInProgress2.stateNode;
                newProps = workInProgress2.memoizedProps;
                _type = !didSuspendOrErrorDEV;
                renderLanes2 = null;
                var returnFiber = hydrationParentFiber;
                if (null !== returnFiber)
                  switch (returnFiber.tag) {
                    case 3:
                      _type && (_type = diffHydratedTextForDevWarnings(
                        current2,
                        newProps,
                        renderLanes2
                      ), null !== _type && (buildHydrationDiffNode(workInProgress2, 0).serverProps = _type));
                      break;
                    case 27:
                    case 5:
                      renderLanes2 = returnFiber.memoizedProps, _type && (_type = diffHydratedTextForDevWarnings(
                        current2,
                        newProps,
                        renderLanes2
                      ), null !== _type && (buildHydrationDiffNode(
                        workInProgress2,
                        0
                      ).serverProps = _type));
                  }
                current2[internalInstanceKey] = workInProgress2;
                current2 = current2.nodeValue === newProps || null !== renderLanes2 && true === renderLanes2.suppressHydrationWarning || checkForUnmatchedText(current2.nodeValue, newProps) ? true : false;
                current2 || throwOnHydrationMismatch(workInProgress2);
              } else
                renderLanes2 = renderLanes2.ancestorInfo.current, null != renderLanes2 && validateTextNesting(newProps, renderLanes2.tag), current2 = getOwnerDocumentFromRootContainer(current2).createTextNode(
                  newProps
                ), current2[internalInstanceKey] = workInProgress2, workInProgress2.stateNode = current2;
            }
            bubbleProperties(workInProgress2);
            return null;
          case 13:
            newProps = workInProgress2.memoizedState;
            if (null === current2 || null !== current2.memoizedState && null !== current2.memoizedState.dehydrated) {
              _type = popHydrationState(workInProgress2);
              if (null !== newProps && null !== newProps.dehydrated) {
                if (null === current2) {
                  if (!_type)
                    throw Error(
                      "A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React."
                    );
                  _type = workInProgress2.memoizedState;
                  _type = null !== _type ? _type.dehydrated : null;
                  if (!_type)
                    throw Error(
                      "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue."
                    );
                  _type[internalInstanceKey] = workInProgress2;
                  bubbleProperties(workInProgress2);
                  0 !== (workInProgress2.mode & 2) && null !== newProps && (_type = workInProgress2.child, null !== _type && (workInProgress2.treeBaseDuration -= _type.treeBaseDuration));
                } else
                  emitPendingHydrationWarnings(), resetHydrationState(), 0 === (workInProgress2.flags & 128) && (workInProgress2.memoizedState = null), workInProgress2.flags |= 4, bubbleProperties(workInProgress2), 0 !== (workInProgress2.mode & 2) && null !== newProps && (_type = workInProgress2.child, null !== _type && (workInProgress2.treeBaseDuration -= _type.treeBaseDuration));
                _type = false;
              } else
                null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null), _type = true;
              if (!_type) {
                if (workInProgress2.flags & 256)
                  return popSuspenseHandler(workInProgress2), workInProgress2;
                popSuspenseHandler(workInProgress2);
                return null;
              }
            }
            popSuspenseHandler(workInProgress2);
            if (0 !== (workInProgress2.flags & 128))
              return workInProgress2.lanes = renderLanes2, 0 !== (workInProgress2.mode & 2) && transferActualDuration(workInProgress2), workInProgress2;
            newProps = null !== newProps;
            current2 = null !== current2 && null !== current2.memoizedState;
            newProps && (renderLanes2 = workInProgress2.child, _type = null, null !== renderLanes2.alternate && null !== renderLanes2.alternate.memoizedState && null !== renderLanes2.alternate.memoizedState.cachePool && (_type = renderLanes2.alternate.memoizedState.cachePool.pool), returnFiber = null, null !== renderLanes2.memoizedState && null !== renderLanes2.memoizedState.cachePool && (returnFiber = renderLanes2.memoizedState.cachePool.pool), returnFiber !== _type && (renderLanes2.flags |= 2048));
            newProps !== current2 && newProps && (workInProgress2.child.flags |= 8192);
            scheduleRetryEffect(workInProgress2, workInProgress2.updateQueue);
            bubbleProperties(workInProgress2);
            0 !== (workInProgress2.mode & 2) && newProps && (current2 = workInProgress2.child, null !== current2 && (workInProgress2.treeBaseDuration -= current2.treeBaseDuration));
            return null;
          case 4:
            return popHostContainer(workInProgress2), null === current2 && listenToAllSupportedEvents(
              workInProgress2.stateNode.containerInfo
            ), bubbleProperties(workInProgress2), null;
          case 10:
            return popProvider(workInProgress2.type, workInProgress2), bubbleProperties(workInProgress2), null;
          case 19:
            pop(suspenseStackCursor, workInProgress2);
            _type = workInProgress2.memoizedState;
            if (null === _type)
              return bubbleProperties(workInProgress2), null;
            newProps = 0 !== (workInProgress2.flags & 128);
            returnFiber = _type.rendering;
            if (null === returnFiber)
              if (newProps)
                cutOffTailIfNeeded(_type, false);
              else {
                if (workInProgressRootExitStatus !== RootInProgress || null !== current2 && 0 !== (current2.flags & 128))
                  for (current2 = workInProgress2.child; null !== current2; ) {
                    returnFiber = findFirstSuspended(current2);
                    if (null !== returnFiber) {
                      workInProgress2.flags |= 128;
                      cutOffTailIfNeeded(_type, false);
                      current2 = returnFiber.updateQueue;
                      workInProgress2.updateQueue = current2;
                      scheduleRetryEffect(workInProgress2, current2);
                      workInProgress2.subtreeFlags = 0;
                      current2 = renderLanes2;
                      for (newProps = workInProgress2.child; null !== newProps; )
                        resetWorkInProgress(newProps, current2), newProps = newProps.sibling;
                      push(
                        suspenseStackCursor,
                        suspenseStackCursor.current & SubtreeSuspenseContextMask | ForceSuspenseFallback,
                        workInProgress2
                      );
                      return workInProgress2.child;
                    }
                    current2 = current2.sibling;
                  }
                null !== _type.tail && now$1() > workInProgressRootRenderTargetTime && (workInProgress2.flags |= 128, newProps = true, cutOffTailIfNeeded(_type, false), workInProgress2.lanes = 4194304);
              }
            else {
              if (!newProps)
                if (current2 = findFirstSuspended(returnFiber), null !== current2) {
                  if (workInProgress2.flags |= 128, newProps = true, current2 = current2.updateQueue, workInProgress2.updateQueue = current2, scheduleRetryEffect(workInProgress2, current2), cutOffTailIfNeeded(_type, true), null === _type.tail && "hidden" === _type.tailMode && !returnFiber.alternate && !isHydrating)
                    return bubbleProperties(workInProgress2), null;
                } else
                  2 * now$1() - _type.renderingStartTime > workInProgressRootRenderTargetTime && renderLanes2 !== OffscreenLane && (workInProgress2.flags |= 128, newProps = true, cutOffTailIfNeeded(_type, false), workInProgress2.lanes = 4194304);
              _type.isBackwards ? (returnFiber.sibling = workInProgress2.child, workInProgress2.child = returnFiber) : (current2 = _type.last, null !== current2 ? current2.sibling = returnFiber : workInProgress2.child = returnFiber, _type.last = returnFiber);
            }
            if (null !== _type.tail)
              return current2 = _type.tail, _type.rendering = current2, _type.tail = current2.sibling, _type.renderingStartTime = now$1(), current2.sibling = null, renderLanes2 = suspenseStackCursor.current, renderLanes2 = newProps ? renderLanes2 & SubtreeSuspenseContextMask | ForceSuspenseFallback : renderLanes2 & SubtreeSuspenseContextMask, push(suspenseStackCursor, renderLanes2, workInProgress2), current2;
            bubbleProperties(workInProgress2);
            return null;
          case 22:
          case 23:
            return popSuspenseHandler(workInProgress2), popHiddenContext(workInProgress2), newProps = null !== workInProgress2.memoizedState, null !== current2 ? null !== current2.memoizedState !== newProps && (workInProgress2.flags |= 8192) : newProps && (workInProgress2.flags |= 8192), newProps ? 0 !== (renderLanes2 & OffscreenLane) && 0 === (workInProgress2.flags & 128) && (bubbleProperties(workInProgress2), workInProgress2.subtreeFlags & 6 && (workInProgress2.flags |= 8192)) : bubbleProperties(workInProgress2), newProps = workInProgress2.updateQueue, null !== newProps && scheduleRetryEffect(workInProgress2, newProps.retryQueue), newProps = null, null !== current2 && null !== current2.memoizedState && null !== current2.memoizedState.cachePool && (newProps = current2.memoizedState.cachePool.pool), renderLanes2 = null, null !== workInProgress2.memoizedState && null !== workInProgress2.memoizedState.cachePool && (renderLanes2 = workInProgress2.memoizedState.cachePool.pool), renderLanes2 !== newProps && (workInProgress2.flags |= 2048), null !== current2 && pop(resumedCache, workInProgress2), null;
          case 24:
            return newProps = null, null !== current2 && (newProps = current2.memoizedState.cache), workInProgress2.memoizedState.cache !== newProps && (workInProgress2.flags |= 2048), popProvider(CacheContext, workInProgress2), bubbleProperties(workInProgress2), null;
          case 25:
            return null;
        }
        throw Error(
          "Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue."
        );
      }
      function unwindWork(current2, workInProgress2) {
        popTreeContext(workInProgress2);
        switch (workInProgress2.tag) {
          case 1:
            return current2 = workInProgress2.flags, current2 & 65536 ? (workInProgress2.flags = current2 & -65537 | 128, 0 !== (workInProgress2.mode & 2) && transferActualDuration(workInProgress2), workInProgress2) : null;
          case 3:
            return popProvider(CacheContext, workInProgress2), popHostContainer(workInProgress2), current2 = workInProgress2.flags, 0 !== (current2 & 65536) && 0 === (current2 & 128) ? (workInProgress2.flags = current2 & -65537 | 128, workInProgress2) : null;
          case 26:
          case 27:
          case 5:
            return popHostContext(workInProgress2), null;
          case 13:
            popSuspenseHandler(workInProgress2);
            current2 = workInProgress2.memoizedState;
            if (null !== current2 && null !== current2.dehydrated) {
              if (null === workInProgress2.alternate)
                throw Error(
                  "Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue."
                );
              resetHydrationState();
            }
            current2 = workInProgress2.flags;
            return current2 & 65536 ? (workInProgress2.flags = current2 & -65537 | 128, 0 !== (workInProgress2.mode & 2) && transferActualDuration(workInProgress2), workInProgress2) : null;
          case 19:
            return pop(suspenseStackCursor, workInProgress2), null;
          case 4:
            return popHostContainer(workInProgress2), null;
          case 10:
            return popProvider(workInProgress2.type, workInProgress2), null;
          case 22:
          case 23:
            return popSuspenseHandler(workInProgress2), popHiddenContext(workInProgress2), null !== current2 && pop(resumedCache, workInProgress2), current2 = workInProgress2.flags, current2 & 65536 ? (workInProgress2.flags = current2 & -65537 | 128, 0 !== (workInProgress2.mode & 2) && transferActualDuration(workInProgress2), workInProgress2) : null;
          case 24:
            return popProvider(CacheContext, workInProgress2), null;
          case 25:
            return null;
          default:
            return null;
        }
      }
      function unwindInterruptedWork(current2, interruptedWork) {
        popTreeContext(interruptedWork);
        switch (interruptedWork.tag) {
          case 3:
            popProvider(CacheContext, interruptedWork);
            popHostContainer(interruptedWork);
            break;
          case 26:
          case 27:
          case 5:
            popHostContext(interruptedWork);
            break;
          case 4:
            popHostContainer(interruptedWork);
            break;
          case 13:
            popSuspenseHandler(interruptedWork);
            break;
          case 19:
            pop(suspenseStackCursor, interruptedWork);
            break;
          case 10:
            popProvider(interruptedWork.type, interruptedWork);
            break;
          case 22:
          case 23:
            popSuspenseHandler(interruptedWork);
            popHiddenContext(interruptedWork);
            null !== current2 && pop(resumedCache, interruptedWork);
            break;
          case 24:
            popProvider(CacheContext, interruptedWork);
        }
      }
      function onCommitRoot() {
        commitHooks.forEach(function(commitHook) {
          return commitHook();
        });
      }
      function isConcurrentActEnvironment() {
        var isReactActEnvironmentGlobal = "undefined" !== typeof IS_REACT_ACT_ENVIRONMENT ? IS_REACT_ACT_ENVIRONMENT : void 0;
        isReactActEnvironmentGlobal || null === ReactSharedInternals.actQueue || error$jscomp$0(
          "The current testing environment is not configured to support act(...)"
        );
        return isReactActEnvironmentGlobal;
      }
      function requestUpdateLane(fiber) {
        if ((executionContext & RenderContext) !== NoContext && 0 !== workInProgressRootRenderLanes)
          return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
        var transition = ReactSharedInternals.T;
        return null !== transition ? (transition._updatedFibers || (transition._updatedFibers = /* @__PURE__ */ new Set()), transition._updatedFibers.add(fiber), fiber = currentEntangledLane, 0 !== fiber ? fiber : requestTransitionLane()) : resolveUpdatePriority();
      }
      function requestDeferredLane() {
        0 === workInProgressDeferredLane && (workInProgressDeferredLane = 0 === (workInProgressRootRenderLanes & OffscreenLane) || isHydrating ? claimNextTransitionLane() : OffscreenLane);
        var suspenseHandler = suspenseHandlerStackCursor.current;
        null !== suspenseHandler && (suspenseHandler.flags |= 32);
        return workInProgressDeferredLane;
      }
      function scheduleUpdateOnFiber(root2, fiber, lane) {
        isRunningInsertionEffect && error$jscomp$0("useInsertionEffect must not schedule updates.");
        isFlushingPassiveEffects && (didScheduleUpdateDuringPassiveEffects = true);
        if (root2 === workInProgressRoot && workInProgressSuspendedReason === SuspendedOnData || null !== root2.cancelPendingCommit)
          prepareFreshStack(root2, 0), markRootSuspended(
            root2,
            workInProgressRootRenderLanes,
            workInProgressDeferredLane
          );
        markRootUpdated(root2, lane);
        if (0 !== (executionContext & RenderContext) && root2 === workInProgressRoot) {
          if (isRendering)
            switch (fiber.tag) {
              case 0:
              case 11:
              case 15:
                root2 = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                didWarnAboutUpdateInRenderForAnotherComponent.has(root2) || (didWarnAboutUpdateInRenderForAnotherComponent.add(root2), fiber = getComponentNameFromFiber(fiber) || "Unknown", error$jscomp$0(
                  "Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://react.dev/link/setstate-in-render",
                  fiber,
                  root2,
                  root2
                ));
                break;
              case 1:
                didWarnAboutUpdateInRender || (error$jscomp$0(
                  "Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."
                ), didWarnAboutUpdateInRender = true);
            }
        } else
          isDevToolsPresent && addFiberToLanesMap(root2, fiber, lane), warnIfUpdatesNotWrappedWithActDEV(fiber), root2 === workInProgressRoot && ((executionContext & RenderContext) === NoContext && (workInProgressRootInterleavedUpdatedLanes |= lane), workInProgressRootExitStatus === RootSuspendedWithDelay && markRootSuspended(
            root2,
            workInProgressRootRenderLanes,
            workInProgressDeferredLane
          )), ensureRootIsScheduled(root2);
      }
      function performConcurrentWorkOnRoot(root2, didTimeout) {
        nestedUpdateScheduled = currentUpdateIsNested = false;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
          throw Error("Should not already be working.");
        var originalCallbackNode = root2.callbackNode;
        if (flushPassiveEffects() && root2.callbackNode !== originalCallbackNode)
          return null;
        var lanes = getNextLanes(
          root2,
          root2 === workInProgressRoot ? workInProgressRootRenderLanes : 0
        );
        if (0 === lanes)
          return null;
        var shouldTimeSlice = 0 === (lanes & (InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane)) && 0 === (lanes & root2.expiredLanes) && !didTimeout;
        didTimeout = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
        if (didTimeout !== RootInProgress) {
          var renderWasConcurrent = shouldTimeSlice;
          do {
            if (didTimeout === RootDidNotComplete)
              markRootSuspended(root2, lanes, 0);
            else {
              shouldTimeSlice = root2.current.alternate;
              if (renderWasConcurrent && !isRenderConsistentWithExternalStores(shouldTimeSlice)) {
                didTimeout = renderRootSync(root2, lanes);
                renderWasConcurrent = false;
                continue;
              }
              if (didTimeout === RootErrored) {
                renderWasConcurrent = lanes;
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(
                  root2,
                  renderWasConcurrent
                );
                if (0 !== errorRetryLanes && (lanes = errorRetryLanes, didTimeout = recoverFromConcurrentError(
                  root2,
                  renderWasConcurrent,
                  errorRetryLanes
                ), renderWasConcurrent = false, didTimeout !== RootErrored))
                  continue;
              }
              if (didTimeout === RootFatalErrored) {
                prepareFreshStack(root2, 0);
                markRootSuspended(root2, lanes, 0);
                break;
              }
              root2.finishedWork = shouldTimeSlice;
              root2.finishedLanes = lanes;
              a: {
                renderWasConcurrent = root2;
                switch (didTimeout) {
                  case RootInProgress:
                  case RootFatalErrored:
                    throw Error("Root did not complete. This is a bug in React.");
                  case RootSuspendedWithDelay:
                    if ((lanes & TransitionLanes) === lanes) {
                      markRootSuspended(
                        renderWasConcurrent,
                        lanes,
                        workInProgressDeferredLane
                      );
                      break a;
                    }
                    break;
                  case RootErrored:
                    workInProgressRootRecoverableErrors = null;
                    break;
                  case RootSuspended:
                  case RootCompleted:
                    break;
                  default:
                    throw Error("Unknown root exit status.");
                }
                if (null !== ReactSharedInternals.actQueue)
                  commitRoot(
                    renderWasConcurrent,
                    workInProgressRootRecoverableErrors,
                    workInProgressTransitions,
                    workInProgressRootDidIncludeRecursiveRenderUpdate,
                    workInProgressDeferredLane
                  );
                else {
                  if ((lanes & RetryLanes) === lanes && (didTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1(), 10 < didTimeout)) {
                    markRootSuspended(
                      renderWasConcurrent,
                      lanes,
                      workInProgressDeferredLane
                    );
                    if (0 !== getNextLanes(renderWasConcurrent, 0))
                      break a;
                    renderWasConcurrent.timeoutHandle = scheduleTimeout(
                      commitRootWhenReady.bind(
                        null,
                        renderWasConcurrent,
                        shouldTimeSlice,
                        workInProgressRootRecoverableErrors,
                        workInProgressTransitions,
                        workInProgressRootDidIncludeRecursiveRenderUpdate,
                        lanes,
                        workInProgressDeferredLane
                      ),
                      didTimeout
                    );
                    break a;
                  }
                  commitRootWhenReady(
                    renderWasConcurrent,
                    shouldTimeSlice,
                    workInProgressRootRecoverableErrors,
                    workInProgressTransitions,
                    workInProgressRootDidIncludeRecursiveRenderUpdate,
                    lanes,
                    workInProgressDeferredLane
                  );
                }
              }
            }
            break;
          } while (1);
        }
        ensureRootIsScheduled(root2);
        scheduleTaskForRootDuringMicrotask(root2, now$1());
        root2 = root2.callbackNode === originalCallbackNode ? performConcurrentWorkOnRoot.bind(null, root2) : null;
        return root2;
      }
      function recoverFromConcurrentError(root2, originallyAttemptedLanes, errorRetryLanes) {
        var errorsFromFirstAttempt = workInProgressRootConcurrentErrors, wasRootDehydrated = root2.current.memoizedState.isDehydrated;
        wasRootDehydrated && (prepareFreshStack(root2, errorRetryLanes).flags |= 256);
        errorRetryLanes = renderRootSync(root2, errorRetryLanes);
        if (errorRetryLanes !== RootErrored) {
          if (workInProgressRootDidAttachPingListener && !wasRootDehydrated)
            return root2.errorRecoveryDisabledLanes |= originallyAttemptedLanes, workInProgressRootInterleavedUpdatedLanes |= originallyAttemptedLanes, RootSuspendedWithDelay;
          root2 = workInProgressRootRecoverableErrors;
          workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
          null !== root2 && queueRecoverableErrors(root2);
        }
        return errorRetryLanes;
      }
      function queueRecoverableErrors(errors) {
        null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = errors : workInProgressRootRecoverableErrors.push.apply(
          workInProgressRootRecoverableErrors,
          errors
        );
      }
      function commitRootWhenReady(root2, finishedWork, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane) {
        var subtreeFlags = finishedWork.subtreeFlags;
        if (subtreeFlags & 8192 || 16785408 === (subtreeFlags & 16785408)) {
          if (suspendedState = { stylesheets: null, count: 0, unsuspend: noop3 }, accumulateSuspenseyCommitOnFiber(finishedWork), finishedWork = waitForCommitToBeReady(), null !== finishedWork) {
            root2.cancelPendingCommit = finishedWork(
              commitRoot.bind(
                null,
                root2,
                recoverableErrors,
                transitions,
                didIncludeRenderPhaseUpdate
              )
            );
            markRootSuspended(root2, lanes, spawnedLane);
            return;
          }
        }
        commitRoot(
          root2,
          recoverableErrors,
          transitions,
          didIncludeRenderPhaseUpdate,
          spawnedLane
        );
      }
      function isRenderConsistentWithExternalStores(finishedWork) {
        for (var node = finishedWork; ; ) {
          if (node.flags & 16384) {
            var updateQueue = node.updateQueue;
            if (null !== updateQueue && (updateQueue = updateQueue.stores, null !== updateQueue))
              for (var i = 0; i < updateQueue.length; i++) {
                var check = updateQueue[i], getSnapshot = check.getSnapshot;
                check = check.value;
                try {
                  if (!objectIs(getSnapshot(), check))
                    return false;
                } catch (error$45) {
                  return false;
                }
              }
          }
          updateQueue = node.child;
          if (node.subtreeFlags & 16384 && null !== updateQueue)
            updateQueue.return = node, node = updateQueue;
          else {
            if (node === finishedWork)
              break;
            for (; null === node.sibling; ) {
              if (null === node.return || node.return === finishedWork)
                return true;
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        return true;
      }
      function markRootUpdated(root2, updatedLanes) {
        root2.pendingLanes |= updatedLanes;
        updatedLanes !== IdleLane && (root2.suspendedLanes = 0, root2.pingedLanes = 0);
        executionContext & RenderContext ? workInProgressRootDidIncludeRecursiveRenderUpdate = true : executionContext & CommitContext && (didIncludeCommitPhaseUpdate = true);
        throwIfInfiniteUpdateLoopDetected();
      }
      function markRootSuspended(root2, suspendedLanes, spawnedLane) {
        suspendedLanes &= ~workInProgressRootPingedLanes;
        suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
        root2.suspendedLanes |= suspendedLanes;
        root2.pingedLanes &= ~suspendedLanes;
        for (var expirationTimes = root2.expirationTimes, lanes = suspendedLanes; 0 < lanes; ) {
          var index = 31 - clz32(lanes), lane = 1 << index;
          expirationTimes[index] = -1;
          lanes &= ~lane;
        }
        0 !== spawnedLane && markSpawnedDeferredLane(root2, spawnedLane, suspendedLanes);
      }
      function performSyncWorkOnRoot(root2, lanes) {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
          throw Error("Should not already be working.");
        if (flushPassiveEffects())
          return ensureRootIsScheduled(root2), null;
        currentUpdateIsNested = nestedUpdateScheduled;
        nestedUpdateScheduled = false;
        var exitStatus = renderRootSync(root2, lanes);
        if (exitStatus === RootErrored) {
          var originallyAttemptedLanes = lanes, errorRetryLanes = getLanesToRetrySynchronouslyOnError(
            root2,
            originallyAttemptedLanes
          );
          0 !== errorRetryLanes && (lanes = errorRetryLanes, exitStatus = recoverFromConcurrentError(
            root2,
            originallyAttemptedLanes,
            errorRetryLanes
          ));
        }
        if (exitStatus === RootFatalErrored)
          return prepareFreshStack(root2, 0), markRootSuspended(root2, lanes, 0), ensureRootIsScheduled(root2), null;
        if (exitStatus === RootDidNotComplete)
          return markRootSuspended(root2, lanes, workInProgressDeferredLane), ensureRootIsScheduled(root2), null;
        root2.finishedWork = root2.current.alternate;
        root2.finishedLanes = lanes;
        commitRoot(
          root2,
          workInProgressRootRecoverableErrors,
          workInProgressTransitions,
          workInProgressRootDidIncludeRecursiveRenderUpdate,
          workInProgressDeferredLane
        );
        ensureRootIsScheduled(root2);
        return null;
      }
      function flushSyncWork$1() {
        return (executionContext & (RenderContext | CommitContext)) === NoContext ? (flushSyncWorkOnAllRoots(), false) : true;
      }
      function resetWorkInProgressStack() {
        if (null !== workInProgress) {
          if (workInProgressSuspendedReason === NotSuspended)
            var interruptedWork = workInProgress.return;
          else
            interruptedWork = workInProgress, resetContextDependencies(), resetHooksOnUnwind(interruptedWork), thenableState$1 = null, thenableIndexCounter$1 = 0, interruptedWork = workInProgress;
          for (; null !== interruptedWork; )
            unwindInterruptedWork(interruptedWork.alternate, interruptedWork), interruptedWork = interruptedWork.return;
          workInProgress = null;
        }
      }
      function prepareFreshStack(root2, lanes) {
        root2.finishedWork = null;
        root2.finishedLanes = 0;
        var timeoutHandle = root2.timeoutHandle;
        timeoutHandle !== noTimeout && (root2.timeoutHandle = noTimeout, cancelTimeout(timeoutHandle));
        timeoutHandle = root2.cancelPendingCommit;
        null !== timeoutHandle && (root2.cancelPendingCommit = null, timeoutHandle());
        resetWorkInProgressStack();
        workInProgressRoot = root2;
        workInProgress = timeoutHandle = createWorkInProgress(root2.current, null);
        workInProgressRootRenderLanes = lanes;
        workInProgressSuspendedReason = NotSuspended;
        workInProgressThrownValue = null;
        workInProgressRootDidAttachPingListener = false;
        workInProgressRootExitStatus = RootInProgress;
        workInProgressDeferredLane = workInProgressRootPingedLanes = workInProgressRootInterleavedUpdatedLanes = workInProgressRootSkippedLanes = 0;
        workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors = null;
        workInProgressRootDidIncludeRecursiveRenderUpdate = false;
        0 !== (lanes & InputContinuousLane) && (lanes |= lanes & DefaultLane);
        var allEntangledLanes = root2.entangledLanes;
        if (0 !== allEntangledLanes)
          for (root2 = root2.entanglements, allEntangledLanes &= lanes; 0 < allEntangledLanes; ) {
            var index = 31 - clz32(allEntangledLanes), lane = 1 << index;
            lanes |= root2[index];
            allEntangledLanes &= ~lane;
          }
        entangledRenderLanes = lanes;
        finishQueueingConcurrentUpdates();
        ReactStrictModeWarnings.discardPendingWarnings();
        return timeoutHandle;
      }
      function handleThrow(root2, thrownValue) {
        currentlyRenderingFiber$1 = null;
        ReactSharedInternals.H = ContextOnlyDispatcher;
        ReactSharedInternals.getCurrentStack = null;
        isRendering = false;
        current = null;
        thrownValue === SuspenseException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = shouldRemainOnPreviousScreen() && 0 === (workInProgressRootSkippedLanes & 134217727) && 0 === (workInProgressRootInterleavedUpdatedLanes & 134217727) ? SuspendedOnData : SuspendedOnImmediate) : thrownValue === SuspenseyCommitException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = SuspendedOnInstance) : workInProgressSuspendedReason = thrownValue === SelectiveHydrationException ? SuspendedOnHydration : null !== thrownValue && "object" === typeof thrownValue && "function" === typeof thrownValue.then ? SuspendedOnDeprecatedThrowPromise : SuspendedOnError;
        workInProgressThrownValue = thrownValue;
        var erroredWork = workInProgress;
        if (null === erroredWork)
          workInProgressRootExitStatus = RootFatalErrored, logUncaughtError(
            root2,
            createCapturedValueAtFiber(thrownValue, root2.current)
          );
        else
          switch (erroredWork.mode & 2 && stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true), markComponentRenderStopped(), workInProgressSuspendedReason) {
            case SuspendedOnError:
              null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentErrored && injectedProfilingHooks.markComponentErrored(
                erroredWork,
                thrownValue,
                workInProgressRootRenderLanes
              );
              break;
            case SuspendedOnData:
            case SuspendedOnImmediate:
            case SuspendedOnDeprecatedThrowPromise:
            case SuspendedAndReadyToContinue:
              null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentSuspended && injectedProfilingHooks.markComponentSuspended(
                erroredWork,
                thrownValue,
                workInProgressRootRenderLanes
              );
          }
      }
      function shouldRemainOnPreviousScreen() {
        var handler = suspenseHandlerStackCursor.current;
        return null === handler ? true : (workInProgressRootRenderLanes & TransitionLanes) === workInProgressRootRenderLanes ? null === shellBoundary ? true : false : (workInProgressRootRenderLanes & RetryLanes) === workInProgressRootRenderLanes || 0 !== (workInProgressRootRenderLanes & OffscreenLane) ? handler === shellBoundary : false;
      }
      function pushDispatcher() {
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = ContextOnlyDispatcher;
        return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
      }
      function pushAsyncDispatcher() {
        var prevAsyncDispatcher = ReactSharedInternals.A;
        ReactSharedInternals.A = DefaultAsyncDispatcher;
        return prevAsyncDispatcher;
      }
      function renderDidSuspendDelayIfPossible() {
        workInProgressRootExitStatus = RootSuspendedWithDelay;
        0 === (workInProgressRootSkippedLanes & 134217727) && 0 === (workInProgressRootInterleavedUpdatedLanes & 134217727) || null === workInProgressRoot || markRootSuspended(
          workInProgressRoot,
          workInProgressRootRenderLanes,
          workInProgressDeferredLane
        );
      }
      function queueConcurrentError(error) {
        null === workInProgressRootConcurrentErrors ? workInProgressRootConcurrentErrors = [error] : workInProgressRootConcurrentErrors.push(error);
      }
      function renderRootSync(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root2.memoizedUpdaters;
            0 < memoizedUpdaters.size && (restorePendingUpdaters(root2, workInProgressRootRenderLanes), memoizedUpdaters.clear());
            movePendingFibersToMemoized(root2, lanes);
          }
          workInProgressTransitions = null;
          prepareFreshStack(root2, lanes);
        }
        markRenderStarted(lanes);
        lanes = false;
        a:
          do
            try {
              if (workInProgressSuspendedReason !== NotSuspended && null !== workInProgress) {
                memoizedUpdaters = workInProgress;
                var thrownValue = workInProgressThrownValue;
                switch (workInProgressSuspendedReason) {
                  case SuspendedOnHydration:
                    resetWorkInProgressStack();
                    workInProgressRootExitStatus = RootDidNotComplete;
                    break a;
                  case SuspendedOnImmediate:
                  case SuspendedOnData:
                    lanes || null !== suspenseHandlerStackCursor.current || (lanes = true);
                  default:
                    workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root2, memoizedUpdaters, thrownValue);
                }
              }
              workLoopSync();
              break;
            } catch (thrownValue$46) {
              handleThrow(root2, thrownValue$46);
            }
          while (1);
        lanes && root2.shellSuspendCounter++;
        resetContextDependencies();
        executionContext = prevExecutionContext;
        ReactSharedInternals.H = prevDispatcher;
        ReactSharedInternals.A = prevAsyncDispatcher;
        if (null !== workInProgress)
          throw Error(
            "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue."
          );
        markRenderStopped();
        workInProgressRoot = null;
        workInProgressRootRenderLanes = 0;
        finishQueueingConcurrentUpdates();
        return workInProgressRootExitStatus;
      }
      function workLoopSync() {
        for (; null !== workInProgress; )
          performUnitOfWork(workInProgress);
      }
      function renderRootConcurrent(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root2.memoizedUpdaters;
            0 < memoizedUpdaters.size && (restorePendingUpdaters(root2, workInProgressRootRenderLanes), memoizedUpdaters.clear());
            movePendingFibersToMemoized(root2, lanes);
          }
          workInProgressTransitions = null;
          workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;
          prepareFreshStack(root2, lanes);
        }
        markRenderStarted(lanes);
        a:
          do
            try {
              if (workInProgressSuspendedReason !== NotSuspended && null !== workInProgress)
                b:
                  switch (lanes = workInProgress, memoizedUpdaters = workInProgressThrownValue, workInProgressSuspendedReason) {
                    case SuspendedOnError:
                      workInProgressSuspendedReason = NotSuspended;
                      workInProgressThrownValue = null;
                      throwAndUnwindWorkLoop(root2, lanes, memoizedUpdaters);
                      break;
                    case SuspendedOnData:
                      if (isThenableResolved(memoizedUpdaters)) {
                        workInProgressSuspendedReason = NotSuspended;
                        workInProgressThrownValue = null;
                        replaySuspendedUnitOfWork(lanes);
                        break;
                      }
                      lanes = function() {
                        workInProgressSuspendedReason === SuspendedOnData && workInProgressRoot === root2 && (workInProgressSuspendedReason = SuspendedAndReadyToContinue);
                        ensureRootIsScheduled(root2);
                      };
                      memoizedUpdaters.then(lanes, lanes);
                      break a;
                    case SuspendedOnImmediate:
                      workInProgressSuspendedReason = SuspendedAndReadyToContinue;
                      break a;
                    case SuspendedOnInstance:
                      workInProgressSuspendedReason = SuspendedOnInstanceAndReadyToContinue;
                      break a;
                    case SuspendedAndReadyToContinue:
                      isThenableResolved(memoizedUpdaters) ? (workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, replaySuspendedUnitOfWork(lanes)) : (workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root2, lanes, memoizedUpdaters));
                      break;
                    case SuspendedOnInstanceAndReadyToContinue:
                      var resource = null;
                      switch (workInProgress.tag) {
                        case 26:
                          resource = workInProgress.memoizedState;
                        case 5:
                        case 27:
                          var hostFiber = workInProgress;
                          if (resource ? preloadResource(resource) : 1) {
                            workInProgressSuspendedReason = NotSuspended;
                            workInProgressThrownValue = null;
                            var sibling = hostFiber.sibling;
                            if (null !== sibling)
                              workInProgress = sibling;
                            else {
                              var returnFiber = hostFiber.return;
                              null !== returnFiber ? (workInProgress = returnFiber, completeUnitOfWork(returnFiber)) : workInProgress = null;
                            }
                            break b;
                          }
                          break;
                        default:
                          error$jscomp$0(
                            "Unexpected type of fiber triggered a suspensey commit. This is a bug in React."
                          );
                      }
                      workInProgressSuspendedReason = NotSuspended;
                      workInProgressThrownValue = null;
                      throwAndUnwindWorkLoop(root2, lanes, memoizedUpdaters);
                      break;
                    case SuspendedOnDeprecatedThrowPromise:
                      workInProgressSuspendedReason = NotSuspended;
                      workInProgressThrownValue = null;
                      throwAndUnwindWorkLoop(root2, lanes, memoizedUpdaters);
                      break;
                    case SuspendedOnHydration:
                      resetWorkInProgressStack();
                      workInProgressRootExitStatus = RootDidNotComplete;
                      break a;
                    default:
                      throw Error(
                        "Unexpected SuspendedReason. This is a bug in React."
                      );
                  }
              null !== ReactSharedInternals.actQueue ? workLoopSync() : workLoopConcurrent();
              break;
            } catch (thrownValue$47) {
              handleThrow(root2, thrownValue$47);
            }
          while (1);
        resetContextDependencies();
        ReactSharedInternals.H = prevDispatcher;
        ReactSharedInternals.A = prevAsyncDispatcher;
        executionContext = prevExecutionContext;
        if (null !== workInProgress)
          return null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markRenderYielded && injectedProfilingHooks.markRenderYielded(), RootInProgress;
        markRenderStopped();
        workInProgressRoot = null;
        workInProgressRootRenderLanes = 0;
        finishQueueingConcurrentUpdates();
        return workInProgressRootExitStatus;
      }
      function workLoopConcurrent() {
        for (; null !== workInProgress && !shouldYield(); )
          performUnitOfWork(workInProgress);
      }
      function performUnitOfWork(unitOfWork) {
        var current2 = unitOfWork.alternate;
        0 !== (unitOfWork.mode & 2) ? (startProfilerTimer(unitOfWork), current2 = runWithFiberInDEV(
          unitOfWork,
          beginWork,
          current2,
          unitOfWork,
          entangledRenderLanes
        ), stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true)) : current2 = runWithFiberInDEV(
          unitOfWork,
          beginWork,
          current2,
          unitOfWork,
          entangledRenderLanes
        );
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        null === current2 ? completeUnitOfWork(unitOfWork) : workInProgress = current2;
      }
      function replaySuspendedUnitOfWork(unitOfWork) {
        var next = runWithFiberInDEV(unitOfWork, replayBeginWork, unitOfWork);
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
      }
      function replayBeginWork(unitOfWork) {
        var current2 = unitOfWork.alternate, isProfilingMode = 0 !== (unitOfWork.mode & 2);
        isProfilingMode && startProfilerTimer(unitOfWork);
        switch (unitOfWork.tag) {
          case 15:
          case 0:
            current2 = replayFunctionComponent(
              current2,
              unitOfWork,
              unitOfWork.pendingProps,
              unitOfWork.type,
              void 0,
              workInProgressRootRenderLanes
            );
            break;
          case 11:
            current2 = replayFunctionComponent(
              current2,
              unitOfWork,
              unitOfWork.pendingProps,
              unitOfWork.type.render,
              unitOfWork.ref,
              workInProgressRootRenderLanes
            );
            break;
          case 5:
            resetHooksOnUnwind(unitOfWork);
          default:
            unwindInterruptedWork(current2, unitOfWork), unitOfWork = workInProgress = resetWorkInProgress(unitOfWork, entangledRenderLanes), current2 = beginWork(current2, unitOfWork, entangledRenderLanes);
        }
        isProfilingMode && stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        return current2;
      }
      function throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue) {
        resetContextDependencies();
        resetHooksOnUnwind(unitOfWork);
        thenableState$1 = null;
        thenableIndexCounter$1 = 0;
        var returnFiber = unitOfWork.return;
        try {
          if (throwException(
            root2,
            returnFiber,
            unitOfWork,
            thrownValue,
            workInProgressRootRenderLanes
          )) {
            workInProgressRootExitStatus = RootFatalErrored;
            logUncaughtError(
              root2,
              createCapturedValueAtFiber(thrownValue, root2.current)
            );
            workInProgress = null;
            return;
          }
        } catch (error$48) {
          if (null !== returnFiber)
            throw workInProgress = returnFiber, error$48;
          workInProgressRootExitStatus = RootFatalErrored;
          logUncaughtError(
            root2,
            createCapturedValueAtFiber(thrownValue, root2.current)
          );
          workInProgress = null;
          return;
        }
        if (unitOfWork.flags & 32768)
          a: {
            root2 = unitOfWork;
            do {
              unitOfWork = unwindWork(root2.alternate, root2);
              if (null !== unitOfWork) {
                unitOfWork.flags &= 32767;
                workInProgress = unitOfWork;
                break a;
              }
              if (0 !== (root2.mode & 2)) {
                stopProfilerTimerIfRunningAndRecordDelta(root2, false);
                unitOfWork = root2.actualDuration;
                for (thrownValue = root2.child; null !== thrownValue; )
                  unitOfWork += thrownValue.actualDuration, thrownValue = thrownValue.sibling;
                root2.actualDuration = unitOfWork;
              }
              root2 = root2.return;
              null !== root2 && (root2.flags |= 32768, root2.subtreeFlags = 0, root2.deletions = null);
              workInProgress = root2;
            } while (null !== root2);
            workInProgressRootExitStatus = RootDidNotComplete;
            workInProgress = null;
          }
        else
          completeUnitOfWork(unitOfWork);
      }
      function completeUnitOfWork(unitOfWork) {
        var completedWork = unitOfWork;
        do {
          0 !== (completedWork.flags & 32768) && error$jscomp$0(
            "Internal React error: Expected this fiber to be complete, but it isn't. It should have been unwound. This is a bug in React."
          );
          var current2 = completedWork.alternate;
          unitOfWork = completedWork.return;
          0 === (completedWork.mode & 2) ? current2 = runWithFiberInDEV(
            completedWork,
            completeWork,
            current2,
            completedWork,
            entangledRenderLanes
          ) : (startProfilerTimer(completedWork), current2 = runWithFiberInDEV(
            completedWork,
            completeWork,
            current2,
            completedWork,
            entangledRenderLanes
          ), stopProfilerTimerIfRunningAndRecordDelta(completedWork, false));
          if (null !== current2) {
            workInProgress = current2;
            return;
          }
          completedWork = completedWork.sibling;
          if (null !== completedWork) {
            workInProgress = completedWork;
            return;
          }
          workInProgress = completedWork = unitOfWork;
        } while (null !== completedWork);
        workInProgressRootExitStatus === RootInProgress && (workInProgressRootExitStatus = RootCompleted);
      }
      function commitRoot(root2, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, spawnedLane) {
        var prevTransition = ReactSharedInternals.T, previousUpdateLanePriority = ReactDOMSharedInternals.p;
        try {
          ReactDOMSharedInternals.p = DiscreteEventPriority, ReactSharedInternals.T = null, commitRootImpl(
            root2,
            recoverableErrors,
            transitions,
            didIncludeRenderPhaseUpdate,
            previousUpdateLanePriority,
            spawnedLane
          );
        } finally {
          ReactSharedInternals.T = prevTransition, ReactDOMSharedInternals.p = previousUpdateLanePriority;
        }
        return null;
      }
      function commitRootImpl(root2, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, renderPriorityLevel, spawnedLane) {
        do
          flushPassiveEffects();
        while (null !== rootWithPendingPassiveEffects);
        ReactStrictModeWarnings.flushLegacyContextWarning();
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
          throw Error("Should not already be working.");
        var finishedWork = root2.finishedWork, lanes = root2.finishedLanes;
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markCommitStarted && injectedProfilingHooks.markCommitStarted(lanes);
        if (null === finishedWork)
          return markCommitStopped(), null;
        0 === lanes && error$jscomp$0(
          "root.finishedLanes should not be empty during a commit. This is a bug in React."
        );
        root2.finishedWork = null;
        root2.finishedLanes = 0;
        if (finishedWork === root2.current)
          throw Error(
            "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue."
          );
        root2.callbackNode = null;
        root2.callbackPriority = 0;
        root2.cancelPendingCommit = null;
        var remainingLanes = finishedWork.lanes | finishedWork.childLanes;
        remainingLanes |= concurrentlyUpdatedLanes;
        markRootFinished(root2, remainingLanes, spawnedLane);
        didIncludeCommitPhaseUpdate = false;
        root2 === workInProgressRoot && (workInProgress = workInProgressRoot = null, workInProgressRootRenderLanes = 0);
        0 === (finishedWork.subtreeFlags & 10256) && 0 === (finishedWork.flags & 10256) || rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = true, pendingPassiveEffectsRemainingLanes = remainingLanes, pendingPassiveTransitions = transitions, scheduleCallback$1(NormalPriority$1, function() {
          flushPassiveEffects();
          return null;
        }));
        transitions = 0 !== (finishedWork.flags & 15990);
        if (0 !== (finishedWork.subtreeFlags & 15990) || transitions) {
          transitions = ReactSharedInternals.T;
          ReactSharedInternals.T = null;
          spawnedLane = ReactDOMSharedInternals.p;
          ReactDOMSharedInternals.p = DiscreteEventPriority;
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          commitBeforeMutationEffects(root2, finishedWork);
          commitTime = now();
          commitMutationEffects(root2, finishedWork, lanes);
          restoreSelection(selectionInformation);
          _enabled = !!eventsEnabled;
          selectionInformation = eventsEnabled = null;
          root2.current = finishedWork;
          null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markLayoutEffectsStarted && injectedProfilingHooks.markLayoutEffectsStarted(lanes);
          commitLayoutEffects(finishedWork, root2, lanes);
          null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markLayoutEffectsStopped && injectedProfilingHooks.markLayoutEffectsStopped();
          requestPaint();
          executionContext = prevExecutionContext;
          ReactDOMSharedInternals.p = spawnedLane;
          ReactSharedInternals.T = transitions;
        } else
          root2.current = finishedWork, commitTime = now();
        (transitions = rootDoesHavePassiveEffects) ? (rootDoesHavePassiveEffects = false, rootWithPendingPassiveEffects = root2, pendingPassiveEffectsLanes = lanes) : (releaseRootPooledCache(root2, remainingLanes), nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null);
        remainingLanes = root2.pendingLanes;
        0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
        transitions || commitDoubleInvokeEffectsInDEV(root2);
        onCommitRoot$1(finishedWork.stateNode, renderPriorityLevel);
        isDevToolsPresent && root2.memoizedUpdaters.clear();
        onCommitRoot();
        ensureRootIsScheduled(root2);
        if (null !== recoverableErrors)
          for (renderPriorityLevel = root2.onRecoverableError, finishedWork = 0; finishedWork < recoverableErrors.length; finishedWork++)
            remainingLanes = recoverableErrors[finishedWork], transitions = makeErrorInfo(remainingLanes.stack), runWithFiberInDEV(
              remainingLanes.source,
              renderPriorityLevel,
              remainingLanes.value,
              transitions
            );
        0 !== (pendingPassiveEffectsLanes & (SyncLane | SyncHydrationLane)) && flushPassiveEffects();
        remainingLanes = root2.pendingLanes;
        didIncludeRenderPhaseUpdate || didIncludeCommitPhaseUpdate || 0 !== (lanes & UpdateLanes) && 0 !== (remainingLanes & SyncUpdateLanes) ? (nestedUpdateScheduled = true, root2 === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root2)) : nestedUpdateCount = 0;
        flushSyncWorkOnAllRoots();
        markCommitStopped();
        return null;
      }
      function makeErrorInfo(componentStack) {
        componentStack = { componentStack };
        Object.defineProperty(componentStack, "digest", {
          get: function() {
            error$jscomp$0(
              'You are accessing "digest" from the errorInfo object passed to onRecoverableError. This property is no longer provided as part of errorInfo but can be accessed as a property of the Error instance itself.'
            );
          }
        });
        return componentStack;
      }
      function releaseRootPooledCache(root2, remainingLanes) {
        0 === (root2.pooledCacheLanes &= remainingLanes) && (remainingLanes = root2.pooledCache, null != remainingLanes && (root2.pooledCache = null, releaseCache(remainingLanes)));
      }
      function flushPassiveEffects() {
        if (null !== rootWithPendingPassiveEffects) {
          var root2 = rootWithPendingPassiveEffects, remainingLanes = pendingPassiveEffectsRemainingLanes;
          pendingPassiveEffectsRemainingLanes = 0;
          var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes), priority = 0 === DefaultEventPriority || DefaultEventPriority > renderPriority ? DefaultEventPriority : renderPriority;
          renderPriority = ReactSharedInternals.T;
          var previousPriority = ReactDOMSharedInternals.p;
          try {
            ReactDOMSharedInternals.p = priority;
            ReactSharedInternals.T = null;
            if (null === rootWithPendingPassiveEffects)
              var JSCompiler_inline_result = false;
            else {
              var transitions = pendingPassiveTransitions;
              pendingPassiveTransitions = null;
              priority = rootWithPendingPassiveEffects;
              var lanes = pendingPassiveEffectsLanes;
              rootWithPendingPassiveEffects = null;
              pendingPassiveEffectsLanes = 0;
              if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
                throw Error(
                  "Cannot flush passive effects while already rendering."
                );
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
              null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markPassiveEffectsStarted && injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              var finishedWork = priority.current;
              runWithFiberInDEV(
                finishedWork,
                commitPassiveUnmountOnFiber,
                finishedWork
              );
              var finishedWork$jscomp$0 = priority.current;
              runWithFiberInDEV(
                finishedWork$jscomp$0,
                commitPassiveMountOnFiber,
                priority,
                finishedWork$jscomp$0,
                lanes,
                transitions
              );
              finishedWork = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (finishedWork$jscomp$0 = 0; finishedWork$jscomp$0 < finishedWork.length; finishedWork$jscomp$0++) {
                var finishedWork$jscomp$1 = finishedWork[finishedWork$jscomp$0];
                if (executionContext & CommitContext && 0 !== (finishedWork$jscomp$1.flags & 4))
                  switch (finishedWork$jscomp$1.tag) {
                    case 12:
                      var passiveEffectDuration = finishedWork$jscomp$1.stateNode.passiveEffectDuration, _finishedWork$memoize = finishedWork$jscomp$1.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                      transitions = commitTime;
                      var phase = null === finishedWork$jscomp$1.alternate ? "mount" : "update";
                      currentUpdateIsNested && (phase = "nested-update");
                      "function" === typeof onPostCommit && onPostCommit(
                        id,
                        phase,
                        passiveEffectDuration,
                        transitions
                      );
                      var parentFiber = finishedWork$jscomp$1.return;
                      b:
                        for (; null !== parentFiber; ) {
                          switch (parentFiber.tag) {
                            case 3:
                              parentFiber.stateNode.passiveEffectDuration += passiveEffectDuration;
                              break b;
                            case 12:
                              parentFiber.stateNode.passiveEffectDuration += passiveEffectDuration;
                              break b;
                          }
                          parentFiber = parentFiber.return;
                        }
                  }
              }
              null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markPassiveEffectsStopped && injectedProfilingHooks.markPassiveEffectsStopped();
              commitDoubleInvokeEffectsInDEV(priority);
              executionContext = prevExecutionContext;
              flushSyncWorkOnAllRoots();
              didScheduleUpdateDuringPassiveEffects ? priority === rootWithPassiveNestedUpdates ? nestedPassiveUpdateCount++ : (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = priority) : nestedPassiveUpdateCount = 0;
              didScheduleUpdateDuringPassiveEffects = isFlushingPassiveEffects = false;
              if (injectedHook && "function" === typeof injectedHook.onPostCommitFiberRoot)
                try {
                  injectedHook.onPostCommitFiberRoot(rendererID, priority);
                } catch (err) {
                  hasLoggedError || (hasLoggedError = true, error$jscomp$0(
                    "React instrumentation encountered an error: %s",
                    err
                  ));
                }
              var stateNode = priority.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
              JSCompiler_inline_result = true;
            }
            return JSCompiler_inline_result;
          } finally {
            ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = renderPriority, releaseRootPooledCache(root2, remainingLanes);
          }
        }
        return false;
      }
      function enqueuePendingPassiveProfilerEffect(fiber) {
        pendingPassiveProfilerEffects.push(fiber);
        rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = true, scheduleCallback$1(NormalPriority$1, function() {
          flushPassiveEffects();
          return null;
        }));
      }
      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
        sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
        sourceFiber = createRootErrorUpdate(
          rootFiber.stateNode,
          sourceFiber,
          SyncLane
        );
        rootFiber = enqueueUpdate(rootFiber, sourceFiber, SyncLane);
        null !== rootFiber && (markRootUpdated(rootFiber, SyncLane), ensureRootIsScheduled(rootFiber));
      }
      function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
        isRunningInsertionEffect = false;
        if (3 === sourceFiber.tag)
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
        else {
          for (; null !== nearestMountedAncestor; ) {
            if (3 === nearestMountedAncestor.tag) {
              captureCommitPhaseErrorOnRoot(
                nearestMountedAncestor,
                sourceFiber,
                error$1
              );
              return;
            }
            if (1 === nearestMountedAncestor.tag) {
              var instance = nearestMountedAncestor.stateNode;
              if ("function" === typeof nearestMountedAncestor.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
                sourceFiber = createCapturedValueAtFiber(error$1, sourceFiber);
                error$1 = createClassErrorUpdate(SyncLane);
                instance = enqueueUpdate(
                  nearestMountedAncestor,
                  error$1,
                  SyncLane
                );
                null !== instance && (initializeClassErrorUpdate(
                  error$1,
                  instance,
                  nearestMountedAncestor,
                  sourceFiber
                ), markRootUpdated(instance, SyncLane), ensureRootIsScheduled(instance));
                return;
              }
            }
            nearestMountedAncestor = nearestMountedAncestor.return;
          }
          error$jscomp$0(
            "Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Potential causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s",
            error$1
          );
        }
      }
      function attachPingListener(root2, wakeable, lanes) {
        var pingCache = root2.pingCache;
        if (null === pingCache) {
          pingCache = root2.pingCache = new PossiblyWeakMap();
          var threadIDs = /* @__PURE__ */ new Set();
          pingCache.set(wakeable, threadIDs);
        } else
          threadIDs = pingCache.get(wakeable), void 0 === threadIDs && (threadIDs = /* @__PURE__ */ new Set(), pingCache.set(wakeable, threadIDs));
        threadIDs.has(lanes) || (workInProgressRootDidAttachPingListener = true, threadIDs.add(lanes), pingCache = pingSuspendedRoot.bind(null, root2, wakeable, lanes), isDevToolsPresent && restorePendingUpdaters(root2, lanes), wakeable.then(pingCache, pingCache));
      }
      function pingSuspendedRoot(root2, wakeable, pingedLanes) {
        var pingCache = root2.pingCache;
        null !== pingCache && pingCache.delete(wakeable);
        root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
        executionContext & RenderContext ? workInProgressRootDidIncludeRecursiveRenderUpdate = true : executionContext & CommitContext && (didIncludeCommitPhaseUpdate = true);
        throwIfInfiniteUpdateLoopDetected();
        isConcurrentActEnvironment() && null === ReactSharedInternals.actQueue && error$jscomp$0(
          "A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act"
        );
        workInProgressRoot === root2 && (workInProgressRootRenderLanes & pingedLanes) === pingedLanes && (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && (workInProgressRootRenderLanes & RetryLanes) === workInProgressRootRenderLanes && now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS ? (executionContext & RenderContext) === NoContext && prepareFreshStack(root2, 0) : workInProgressRootPingedLanes |= pingedLanes);
        ensureRootIsScheduled(root2);
      }
      function retryTimedOutBoundary(boundaryFiber, retryLane) {
        0 === retryLane && (retryLane = claimNextRetryLane());
        boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
        null !== boundaryFiber && (markRootUpdated(boundaryFiber, retryLane), ensureRootIsScheduled(boundaryFiber));
      }
      function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState, retryLane = 0;
        null !== suspenseState && (retryLane = suspenseState.retryLane);
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = 0;
        switch (boundaryFiber.tag) {
          case 13:
            var retryCache = boundaryFiber.stateNode;
            var suspenseState = boundaryFiber.memoizedState;
            null !== suspenseState && (retryLane = suspenseState.retryLane);
            break;
          case 19:
            retryCache = boundaryFiber.stateNode;
            break;
          case 22:
            retryCache = boundaryFiber.stateNode._retryCache;
            break;
          default:
            throw Error(
              "Pinged unknown suspense boundary type. This is probably a bug in React."
            );
        }
        null !== retryCache && retryCache.delete(wakeable);
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function throwIfInfiniteUpdateLoopDetected() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT)
          throw nestedPassiveUpdateCount = nestedUpdateCount = 0, rootWithPassiveNestedUpdates = rootWithNestedUpdates = null, executionContext & RenderContext && null !== workInProgressRoot && (workInProgressRoot.errorRecoveryDisabledLanes |= workInProgressRootRenderLanes), Error(
            "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops."
          );
        nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT && (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, error$jscomp$0(
          "Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."
        ));
      }
      function recursivelyTraverseAndDoubleInvokeEffectsInDEV(root$jscomp$0, parentFiber, isInStrictMode) {
        if (0 !== (parentFiber.subtreeFlags & 33562624))
          for (parentFiber = parentFiber.child; null !== parentFiber; ) {
            var root2 = root$jscomp$0, fiber = parentFiber, isStrictModeFiber = fiber.type === REACT_STRICT_MODE_TYPE;
            isStrictModeFiber = isInStrictMode || isStrictModeFiber;
            22 !== fiber.tag ? fiber.flags & 33554432 ? isStrictModeFiber && runWithFiberInDEV(
              fiber,
              doubleInvokeEffectsOnFiber,
              root2,
              fiber,
              0 === (fiber.mode & 64)
            ) : recursivelyTraverseAndDoubleInvokeEffectsInDEV(
              root2,
              fiber,
              isStrictModeFiber
            ) : null === fiber.memoizedState && (isStrictModeFiber && fiber.flags & 8192 ? runWithFiberInDEV(
              fiber,
              doubleInvokeEffectsOnFiber,
              root2,
              fiber
            ) : fiber.subtreeFlags & 33554432 && runWithFiberInDEV(
              fiber,
              recursivelyTraverseAndDoubleInvokeEffectsInDEV,
              root2,
              fiber,
              isStrictModeFiber
            ));
            parentFiber = parentFiber.sibling;
          }
      }
      function doubleInvokeEffectsOnFiber(root2, fiber) {
        var shouldDoubleInvokePassiveEffects = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : true;
        setIsStrictModeForDevtools(true);
        disappearLayoutEffects(fiber);
        shouldDoubleInvokePassiveEffects && disconnectPassiveEffect(fiber);
        reappearLayoutEffects(root2, fiber.alternate, fiber, false);
        shouldDoubleInvokePassiveEffects && reconnectPassiveEffects(root2, fiber, 0, null, false);
        setIsStrictModeForDevtools(false);
      }
      function commitDoubleInvokeEffectsInDEV(root2) {
        var doubleInvokeEffects = true;
        root2.current.mode & 24 || (doubleInvokeEffects = false);
        recursivelyTraverseAndDoubleInvokeEffectsInDEV(
          root2,
          root2.current,
          doubleInvokeEffects
        );
      }
      function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        if ((executionContext & RenderContext) === NoContext) {
          var tag = fiber.tag;
          if (3 === tag || 1 === tag || 0 === tag || 11 === tag || 14 === tag || 15 === tag) {
            tag = getComponentNameFromFiber(fiber) || "ReactComponent";
            if (null !== didWarnStateUpdateForNotYetMountedComponent) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(tag))
                return;
              didWarnStateUpdateForNotYetMountedComponent.add(tag);
            } else
              didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([tag]);
            runWithFiberInDEV(fiber, function() {
              error$jscomp$0(
                "Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead."
              );
            });
          }
        }
      }
      function restorePendingUpdaters(root2, lanes) {
        isDevToolsPresent && root2.memoizedUpdaters.forEach(function(schedulingFiber) {
          addFiberToLanesMap(root2, schedulingFiber, lanes);
        });
      }
      function scheduleCallback$1(priorityLevel, callback) {
        var actQueue = ReactSharedInternals.actQueue;
        return null !== actQueue ? (actQueue.push(callback), fakeActCallbackNode$1) : scheduleCallback$3(priorityLevel, callback);
      }
      function warnIfUpdatesNotWrappedWithActDEV(fiber) {
        isConcurrentActEnvironment() && null === ReactSharedInternals.actQueue && runWithFiberInDEV(fiber, function() {
          error$jscomp$0(
            "An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act",
            getComponentNameFromFiber(fiber)
          );
        });
      }
      function ensureRootIsScheduled(root2) {
        root2 !== lastScheduledRoot && null === root2.next && (null === lastScheduledRoot ? firstScheduledRoot = lastScheduledRoot = root2 : lastScheduledRoot = lastScheduledRoot.next = root2);
        mightHavePendingSyncWork = true;
        null !== ReactSharedInternals.actQueue ? didScheduleMicrotask_act || (didScheduleMicrotask_act = true, scheduleImmediateTask(processRootScheduleInMicrotask)) : didScheduleMicrotask || (didScheduleMicrotask = true, scheduleImmediateTask(processRootScheduleInMicrotask));
      }
      function flushSyncWorkOnAllRoots() {
        if (!isFlushingWork && mightHavePendingSyncWork) {
          isFlushingWork = true;
          do {
            var didPerformSomeWork = false;
            for (var root2 = firstScheduledRoot; null !== root2; ) {
              var workInProgressRootRenderLanes$jscomp$0 = workInProgressRootRenderLanes;
              workInProgressRootRenderLanes$jscomp$0 = getNextLanes(
                root2,
                root2 === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0
              );
              0 !== (workInProgressRootRenderLanes$jscomp$0 & (SyncLane | SyncHydrationLane)) && (didPerformSomeWork = true, performSyncWorkOnRoot(
                root2,
                workInProgressRootRenderLanes$jscomp$0
              ));
              root2 = root2.next;
            }
          } while (didPerformSomeWork);
          isFlushingWork = false;
        }
      }
      function processRootScheduleInMicrotask() {
        mightHavePendingSyncWork = didScheduleMicrotask_act = didScheduleMicrotask = false;
        for (var currentTime = now$1(), prev = null, root2 = firstScheduledRoot; null !== root2; ) {
          var next = root2.next;
          if (0 !== currentEventTransitionLane && shouldAttemptEagerTransition()) {
            var root$jscomp$0 = root2, lane = currentEventTransitionLane;
            root$jscomp$0.pendingLanes |= SyncLane;
            root$jscomp$0.entangledLanes |= SyncLane;
            root$jscomp$0.entanglements[1] |= lane;
          }
          root$jscomp$0 = scheduleTaskForRootDuringMicrotask(root2, currentTime);
          0 === root$jscomp$0 ? (root2.next = null, null === prev ? firstScheduledRoot = next : prev.next = next, null === next && (lastScheduledRoot = prev)) : (prev = root2, 0 !== (root$jscomp$0 & (SyncLane | SyncHydrationLane)) && (mightHavePendingSyncWork = true));
          root2 = next;
        }
        currentEventTransitionLane = 0;
        flushSyncWorkOnAllRoots();
      }
      function scheduleTaskForRootDuringMicrotask(root2, currentTime) {
        for (var suspendedLanes = root2.suspendedLanes, pingedLanes = root2.pingedLanes, expirationTimes = root2.expirationTimes, lanes = root2.pendingLanes & ~RetryLanes; 0 < lanes; ) {
          var index = 31 - clz32(lanes), lane = 1 << index, expirationTime = expirationTimes[index];
          if (-1 === expirationTime) {
            if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes))
              expirationTimes[index] = computeExpirationTime(lane, currentTime);
          } else
            expirationTime <= currentTime && (root2.expiredLanes |= lane);
          lanes &= ~lane;
        }
        currentTime = workInProgressRoot;
        suspendedLanes = workInProgressRootRenderLanes;
        suspendedLanes = getNextLanes(
          root2,
          root2 === currentTime ? suspendedLanes : 0
        );
        pingedLanes = root2.callbackNode;
        if (0 === suspendedLanes || root2 === currentTime && workInProgressSuspendedReason === SuspendedOnData || null !== root2.cancelPendingCommit)
          return null !== pingedLanes && cancelCallback(pingedLanes), root2.callbackNode = null, root2.callbackPriority = 0;
        if (0 !== (suspendedLanes & (SyncLane | SyncHydrationLane)))
          return null !== pingedLanes && cancelCallback(pingedLanes), root2.callbackPriority = SyncLane, root2.callbackNode = null, SyncLane;
        currentTime = suspendedLanes & -suspendedLanes;
        if (currentTime !== root2.callbackPriority || null !== ReactSharedInternals.actQueue && pingedLanes !== fakeActCallbackNode)
          cancelCallback(pingedLanes);
        else
          return currentTime;
        switch (lanesToEventPriority(suspendedLanes)) {
          case DiscreteEventPriority:
            suspendedLanes = ImmediatePriority;
            break;
          case ContinuousEventPriority:
            suspendedLanes = UserBlockingPriority;
            break;
          case DefaultEventPriority:
            suspendedLanes = NormalPriority$1;
            break;
          case IdleEventPriority:
            suspendedLanes = IdlePriority;
            break;
          default:
            suspendedLanes = NormalPriority$1;
        }
        pingedLanes = performConcurrentWorkOnRoot.bind(null, root2);
        null !== ReactSharedInternals.actQueue ? (ReactSharedInternals.actQueue.push(pingedLanes), suspendedLanes = fakeActCallbackNode) : suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes);
        root2.callbackPriority = currentTime;
        root2.callbackNode = suspendedLanes;
        return currentTime;
      }
      function cancelCallback(callbackNode) {
        callbackNode !== fakeActCallbackNode && null !== callbackNode && cancelCallback$1(callbackNode);
      }
      function scheduleImmediateTask(cb) {
        null !== ReactSharedInternals.actQueue && ReactSharedInternals.actQueue.push(function() {
          cb();
          return null;
        });
        scheduleMicrotask(function() {
          (executionContext & (RenderContext | CommitContext)) !== NoContext ? scheduleCallback$3(ImmediatePriority, cb) : cb();
        });
      }
      function requestTransitionLane() {
        0 === currentEventTransitionLane && (currentEventTransitionLane = claimNextTransitionLane());
        return currentEventTransitionLane;
      }
      function coerceFormActionProp(actionProp) {
        if (null == actionProp || "symbol" === typeof actionProp || "boolean" === typeof actionProp)
          return null;
        if ("function" === typeof actionProp)
          return actionProp;
        checkAttributeStringCoercion(actionProp, "action");
        return sanitizeURL("" + actionProp);
      }
      function createFormDataWithSubmitter(form, submitter) {
        var temp = submitter.ownerDocument.createElement("input");
        temp.name = submitter.name;
        temp.value = submitter.value;
        form.id && temp.setAttribute("form", form.id);
        submitter.parentNode.insertBefore(temp, submitter);
        form = new FormData(form);
        temp.parentNode.removeChild(temp);
        return form;
      }
      function extractEvents$1(dispatchQueue, domEventName, maybeTargetInst, nativeEvent, nativeEventTarget) {
        if ("submit" === domEventName && maybeTargetInst && maybeTargetInst.stateNode === nativeEventTarget) {
          var action = coerceFormActionProp(
            (nativeEventTarget[internalPropsKey] || null).action
          ), submitter = nativeEvent.submitter;
          submitter && (domEventName = (domEventName = submitter[internalPropsKey] || null) ? coerceFormActionProp(domEventName.formAction) : submitter.getAttribute("formAction"), null !== domEventName && (action = domEventName, submitter = null));
          var event = new SyntheticEvent(
            "action",
            "action",
            null,
            nativeEvent,
            nativeEventTarget
          );
          dispatchQueue.push({
            event,
            listeners: [
              {
                instance: null,
                listener: function() {
                  if (nativeEvent.defaultPrevented) {
                    if (0 !== currentEventTransitionLane) {
                      var formData = submitter ? createFormDataWithSubmitter(
                        nativeEventTarget,
                        submitter
                      ) : new FormData(nativeEventTarget), pendingState = {
                        pending: true,
                        data: formData,
                        method: nativeEventTarget.method,
                        action
                      };
                      Object.freeze(pendingState);
                      startHostTransition(
                        maybeTargetInst,
                        pendingState,
                        null,
                        formData
                      );
                    }
                  } else
                    "function" === typeof action && (event.preventDefault(), formData = submitter ? createFormDataWithSubmitter(
                      nativeEventTarget,
                      submitter
                    ) : new FormData(nativeEventTarget), pendingState = {
                      pending: true,
                      data: formData,
                      method: nativeEventTarget.method,
                      action
                    }, Object.freeze(pendingState), startHostTransition(
                      maybeTargetInst,
                      pendingState,
                      action,
                      formData
                    ));
                },
                currentTarget: nativeEventTarget
              }
            ]
          });
        }
      }
      function executeDispatch(event, listener, currentTarget) {
        event.currentTarget = currentTarget;
        try {
          listener(event);
        } catch (error$49) {
          reportGlobalError(error$49);
        }
        event.currentTarget = null;
      }
      function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        eventSystemFlags = 0 !== (eventSystemFlags & 4);
        for (var i = 0; i < dispatchQueue.length; i++) {
          var _dispatchQueue$i = dispatchQueue[i];
          a: {
            var previousInstance = void 0, event = _dispatchQueue$i.event;
            _dispatchQueue$i = _dispatchQueue$i.listeners;
            if (eventSystemFlags)
              for (var i$jscomp$0 = _dispatchQueue$i.length - 1; 0 <= i$jscomp$0; i$jscomp$0--) {
                var _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget;
                _dispatchListeners$i = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped())
                  break a;
                null !== instance ? runWithFiberInDEV(
                  instance,
                  executeDispatch,
                  event,
                  _dispatchListeners$i,
                  currentTarget
                ) : executeDispatch(event, _dispatchListeners$i, currentTarget);
                previousInstance = instance;
              }
            else
              for (i$jscomp$0 = 0; i$jscomp$0 < _dispatchQueue$i.length; i$jscomp$0++) {
                _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0];
                instance = _dispatchListeners$i.instance;
                currentTarget = _dispatchListeners$i.currentTarget;
                _dispatchListeners$i = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped())
                  break a;
                null !== instance ? runWithFiberInDEV(
                  instance,
                  executeDispatch,
                  event,
                  _dispatchListeners$i,
                  currentTarget
                ) : executeDispatch(event, _dispatchListeners$i, currentTarget);
                previousInstance = instance;
              }
          }
        }
      }
      function listenToNonDelegatedEvent(domEventName, targetElement) {
        nonDelegatedEvents.has(domEventName) || error$jscomp$0(
          'Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.',
          domEventName
        );
        var listenerSet = targetElement[internalEventHandlersKey];
        void 0 === listenerSet && (listenerSet = targetElement[internalEventHandlersKey] = /* @__PURE__ */ new Set());
        var listenerSetKey = domEventName + "__bubble";
        listenerSet.has(listenerSetKey) || (addTrappedEventListener(targetElement, domEventName, 2, false), listenerSet.add(listenerSetKey));
      }
      function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener && error$jscomp$0(
          'Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.',
          domEventName
        );
        var eventSystemFlags = 0;
        isCapturePhaseListener && (eventSystemFlags |= 4);
        addTrappedEventListener(
          target,
          domEventName,
          eventSystemFlags,
          isCapturePhaseListener
        );
      }
      function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
          rootContainerElement[listeningMarker] = true;
          allNativeEvents.forEach(function(domEventName) {
            "selectionchange" !== domEventName && (nonDelegatedEvents.has(domEventName) || listenToNativeEvent(domEventName, false, rootContainerElement), listenToNativeEvent(domEventName, true, rootContainerElement));
          });
          var ownerDocument = 9 === rootContainerElement.nodeType ? rootContainerElement : rootContainerElement.ownerDocument;
          null === ownerDocument || ownerDocument[listeningMarker] || (ownerDocument[listeningMarker] = true, listenToNativeEvent("selectionchange", false, ownerDocument));
        }
      }
      function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener) {
        switch (getEventPriority(domEventName)) {
          case DiscreteEventPriority:
            var listenerWrapper = dispatchDiscreteEvent;
            break;
          case ContinuousEventPriority:
            listenerWrapper = dispatchContinuousEvent;
            break;
          default:
            listenerWrapper = dispatchEvent;
        }
        eventSystemFlags = listenerWrapper.bind(
          null,
          domEventName,
          eventSystemFlags,
          targetContainer
        );
        listenerWrapper = void 0;
        !passiveBrowserEventsSupported || "touchstart" !== domEventName && "touchmove" !== domEventName && "wheel" !== domEventName || (listenerWrapper = true);
        isCapturePhaseListener ? void 0 !== listenerWrapper ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
          capture: true,
          passive: listenerWrapper
        }) : targetContainer.addEventListener(domEventName, eventSystemFlags, true) : void 0 !== listenerWrapper ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
          passive: listenerWrapper
        }) : targetContainer.addEventListener(domEventName, eventSystemFlags, false);
      }
      function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst$jscomp$0, targetContainer) {
        var ancestorInst = targetInst$jscomp$0;
        if (0 === (eventSystemFlags & 1) && 0 === (eventSystemFlags & 2) && null !== targetInst$jscomp$0)
          a:
            for (; ; ) {
              if (null === targetInst$jscomp$0)
                return;
              var nodeTag = targetInst$jscomp$0.tag;
              if (3 === nodeTag || 4 === nodeTag) {
                var container = targetInst$jscomp$0.stateNode.containerInfo;
                if (container === targetContainer || 8 === container.nodeType && container.parentNode === targetContainer)
                  break;
                if (4 === nodeTag)
                  for (nodeTag = targetInst$jscomp$0.return; null !== nodeTag; ) {
                    var grandTag = nodeTag.tag;
                    if (3 === grandTag || 4 === grandTag) {
                      if (grandTag = nodeTag.stateNode.containerInfo, grandTag === targetContainer || 8 === grandTag.nodeType && grandTag.parentNode === targetContainer)
                        return;
                    }
                    nodeTag = nodeTag.return;
                  }
                for (; null !== container; ) {
                  nodeTag = getClosestInstanceFromNode(container);
                  if (null === nodeTag)
                    return;
                  grandTag = nodeTag.tag;
                  if (5 === grandTag || 6 === grandTag || 26 === grandTag || 27 === grandTag) {
                    targetInst$jscomp$0 = ancestorInst = nodeTag;
                    continue a;
                  }
                  container = container.parentNode;
                }
              }
              targetInst$jscomp$0 = targetInst$jscomp$0.return;
            }
        batchedUpdates$1(function() {
          var targetInst = ancestorInst, nativeEventTarget = getEventTarget(nativeEvent), dispatchQueue = [];
          a: {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (void 0 !== reactName) {
              var SyntheticEventCtor = SyntheticEvent, reactEventType = domEventName;
              switch (domEventName) {
                case "keypress":
                  if (0 === getEventCharCode(nativeEvent))
                    break a;
                case "keydown":
                case "keyup":
                  SyntheticEventCtor = SyntheticKeyboardEvent;
                  break;
                case "focusin":
                  reactEventType = "focus";
                  SyntheticEventCtor = SyntheticFocusEvent;
                  break;
                case "focusout":
                  reactEventType = "blur";
                  SyntheticEventCtor = SyntheticFocusEvent;
                  break;
                case "beforeblur":
                case "afterblur":
                  SyntheticEventCtor = SyntheticFocusEvent;
                  break;
                case "click":
                  if (2 === nativeEvent.button)
                    break a;
                case "auxclick":
                case "dblclick":
                case "mousedown":
                case "mousemove":
                case "mouseup":
                case "mouseout":
                case "mouseover":
                case "contextmenu":
                  SyntheticEventCtor = SyntheticMouseEvent;
                  break;
                case "drag":
                case "dragend":
                case "dragenter":
                case "dragexit":
                case "dragleave":
                case "dragover":
                case "dragstart":
                case "drop":
                  SyntheticEventCtor = SyntheticDragEvent;
                  break;
                case "touchcancel":
                case "touchend":
                case "touchmove":
                case "touchstart":
                  SyntheticEventCtor = SyntheticTouchEvent;
                  break;
                case ANIMATION_END:
                case ANIMATION_ITERATION:
                case ANIMATION_START:
                  SyntheticEventCtor = SyntheticAnimationEvent;
                  break;
                case TRANSITION_END:
                  SyntheticEventCtor = SyntheticTransitionEvent;
                  break;
                case "scroll":
                case "scrollend":
                  SyntheticEventCtor = SyntheticUIEvent;
                  break;
                case "wheel":
                  SyntheticEventCtor = SyntheticWheelEvent;
                  break;
                case "copy":
                case "cut":
                case "paste":
                  SyntheticEventCtor = SyntheticClipboardEvent;
                  break;
                case "gotpointercapture":
                case "lostpointercapture":
                case "pointercancel":
                case "pointerdown":
                case "pointermove":
                case "pointerout":
                case "pointerover":
                case "pointerup":
                  SyntheticEventCtor = SyntheticPointerEvent;
                  break;
                case "toggle":
                case "beforetoggle":
                  SyntheticEventCtor = SyntheticToggleEvent;
              }
              var inCapturePhase = 0 !== (eventSystemFlags & 4), accumulateTargetOnly = !inCapturePhase && ("scroll" === domEventName || "scrollend" === domEventName), reactEventName = inCapturePhase ? null !== reactName ? reactName + "Capture" : null : reactName;
              inCapturePhase = [];
              for (var instance = targetInst, lastHostComponent; null !== instance; ) {
                var _instance2 = instance;
                lastHostComponent = _instance2.stateNode;
                _instance2 = _instance2.tag;
                5 !== _instance2 && 26 !== _instance2 && 27 !== _instance2 || null === lastHostComponent || null === reactEventName || (_instance2 = getListener(instance, reactEventName), null != _instance2 && inCapturePhase.push(
                  createDispatchListener(
                    instance,
                    _instance2,
                    lastHostComponent
                  )
                ));
                if (accumulateTargetOnly)
                  break;
                instance = instance.return;
              }
              0 < inCapturePhase.length && (reactName = new SyntheticEventCtor(
                reactName,
                reactEventType,
                null,
                nativeEvent,
                nativeEventTarget
              ), dispatchQueue.push({
                event: reactName,
                listeners: inCapturePhase
              }));
            }
          }
          if (0 === (eventSystemFlags & 7)) {
            a: {
              reactName = "mouseover" === domEventName || "pointerover" === domEventName;
              SyntheticEventCtor = "mouseout" === domEventName || "pointerout" === domEventName;
              if (reactName && nativeEvent !== currentReplayingEvent && (reactEventType = nativeEvent.relatedTarget || nativeEvent.fromElement) && (getClosestInstanceFromNode(reactEventType) || reactEventType[internalContainerInstanceKey]))
                break a;
              if (SyntheticEventCtor || reactName) {
                reactName = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget : (reactName = nativeEventTarget.ownerDocument) ? reactName.defaultView || reactName.parentWindow : window;
                if (SyntheticEventCtor) {
                  if (reactEventType = nativeEvent.relatedTarget || nativeEvent.toElement, SyntheticEventCtor = targetInst, reactEventType = reactEventType ? getClosestInstanceFromNode(reactEventType) : null, null !== reactEventType && (accumulateTargetOnly = getNearestMountedFiber(reactEventType), inCapturePhase = reactEventType.tag, reactEventType !== accumulateTargetOnly || 5 !== inCapturePhase && 27 !== inCapturePhase && 6 !== inCapturePhase))
                    reactEventType = null;
                } else
                  SyntheticEventCtor = null, reactEventType = targetInst;
                if (SyntheticEventCtor !== reactEventType) {
                  inCapturePhase = SyntheticMouseEvent;
                  _instance2 = "onMouseLeave";
                  reactEventName = "onMouseEnter";
                  instance = "mouse";
                  if ("pointerout" === domEventName || "pointerover" === domEventName)
                    inCapturePhase = SyntheticPointerEvent, _instance2 = "onPointerLeave", reactEventName = "onPointerEnter", instance = "pointer";
                  accumulateTargetOnly = null == SyntheticEventCtor ? reactName : getNodeFromInstance(SyntheticEventCtor);
                  lastHostComponent = null == reactEventType ? reactName : getNodeFromInstance(reactEventType);
                  reactName = new inCapturePhase(
                    _instance2,
                    instance + "leave",
                    SyntheticEventCtor,
                    nativeEvent,
                    nativeEventTarget
                  );
                  reactName.target = accumulateTargetOnly;
                  reactName.relatedTarget = lastHostComponent;
                  _instance2 = null;
                  getClosestInstanceFromNode(nativeEventTarget) === targetInst && (inCapturePhase = new inCapturePhase(
                    reactEventName,
                    instance + "enter",
                    reactEventType,
                    nativeEvent,
                    nativeEventTarget
                  ), inCapturePhase.target = lastHostComponent, inCapturePhase.relatedTarget = accumulateTargetOnly, _instance2 = inCapturePhase);
                  accumulateTargetOnly = _instance2;
                  if (SyntheticEventCtor && reactEventType)
                    b: {
                      inCapturePhase = SyntheticEventCtor;
                      reactEventName = reactEventType;
                      instance = 0;
                      for (lastHostComponent = inCapturePhase; lastHostComponent; lastHostComponent = getParent(lastHostComponent))
                        instance++;
                      lastHostComponent = 0;
                      for (_instance2 = reactEventName; _instance2; _instance2 = getParent(_instance2))
                        lastHostComponent++;
                      for (; 0 < instance - lastHostComponent; )
                        inCapturePhase = getParent(inCapturePhase), instance--;
                      for (; 0 < lastHostComponent - instance; )
                        reactEventName = getParent(reactEventName), lastHostComponent--;
                      for (; instance--; ) {
                        if (inCapturePhase === reactEventName || null !== reactEventName && inCapturePhase === reactEventName.alternate)
                          break b;
                        inCapturePhase = getParent(inCapturePhase);
                        reactEventName = getParent(reactEventName);
                      }
                      inCapturePhase = null;
                    }
                  else
                    inCapturePhase = null;
                  null !== SyntheticEventCtor && accumulateEnterLeaveListenersForEvent(
                    dispatchQueue,
                    reactName,
                    SyntheticEventCtor,
                    inCapturePhase,
                    false
                  );
                  null !== reactEventType && null !== accumulateTargetOnly && accumulateEnterLeaveListenersForEvent(
                    dispatchQueue,
                    accumulateTargetOnly,
                    reactEventType,
                    inCapturePhase,
                    true
                  );
                }
              }
            }
            a: {
              reactName = targetInst ? getNodeFromInstance(targetInst) : window;
              SyntheticEventCtor = reactName.nodeName && reactName.nodeName.toLowerCase();
              if ("select" === SyntheticEventCtor || "input" === SyntheticEventCtor && "file" === reactName.type)
                var getTargetInstFunc = getTargetInstForChangeEvent;
              else if (isTextInputElement(reactName))
                if (isInputEventSupported)
                  getTargetInstFunc = getTargetInstForInputOrChangeEvent;
                else {
                  getTargetInstFunc = getTargetInstForInputEventPolyfill;
                  var handleEventFunc = handleEventsForInputEventPolyfill;
                }
              else
                SyntheticEventCtor = reactName.nodeName, !SyntheticEventCtor || "input" !== SyntheticEventCtor.toLowerCase() || "checkbox" !== reactName.type && "radio" !== reactName.type ? targetInst && isCustomElement(targetInst.elementType) && (getTargetInstFunc = getTargetInstForChangeEvent) : getTargetInstFunc = getTargetInstForClickEvent;
              if (getTargetInstFunc && (getTargetInstFunc = getTargetInstFunc(domEventName, targetInst))) {
                createAndAccumulateChangeEvent(
                  dispatchQueue,
                  getTargetInstFunc,
                  nativeEvent,
                  nativeEventTarget
                );
                break a;
              }
              handleEventFunc && handleEventFunc(domEventName, reactName, targetInst);
              "focusout" === domEventName && targetInst && "number" === reactName.type && null != targetInst.memoizedProps.value && setDefaultValue(reactName, "number", reactName.value);
            }
            handleEventFunc = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(handleEventFunc) || "true" === handleEventFunc.contentEditable)
                  activeElement = handleEventFunc, activeElementInst = targetInst, lastSelection = null;
                break;
              case "focusout":
                lastSelection = activeElementInst = activeElement = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(
                  dispatchQueue,
                  nativeEvent,
                  nativeEventTarget
                );
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent)
                  break;
              case "keydown":
              case "keyup":
                constructSelectEvent(
                  dispatchQueue,
                  nativeEvent,
                  nativeEventTarget
                );
            }
            var fallbackData;
            if (canUseCompositionEvent)
              b: {
                switch (domEventName) {
                  case "compositionstart":
                    var eventType = "onCompositionStart";
                    break b;
                  case "compositionend":
                    eventType = "onCompositionEnd";
                    break b;
                  case "compositionupdate":
                    eventType = "onCompositionUpdate";
                    break b;
                }
                eventType = void 0;
              }
            else
              isComposing ? isFallbackCompositionEnd(domEventName, nativeEvent) && (eventType = "onCompositionEnd") : "keydown" === domEventName && nativeEvent.keyCode === START_KEYCODE && (eventType = "onCompositionStart");
            eventType && (useFallbackCompositionData && "ko" !== nativeEvent.locale && (isComposing || "onCompositionStart" !== eventType ? "onCompositionEnd" === eventType && isComposing && (fallbackData = getData()) : (root = nativeEventTarget, startText = "value" in root ? root.value : root.textContent, isComposing = true)), handleEventFunc = accumulateTwoPhaseListeners(
              targetInst,
              eventType
            ), 0 < handleEventFunc.length && (eventType = new SyntheticCompositionEvent(
              eventType,
              domEventName,
              null,
              nativeEvent,
              nativeEventTarget
            ), dispatchQueue.push({
              event: eventType,
              listeners: handleEventFunc
            }), fallbackData ? eventType.data = fallbackData : (fallbackData = getDataFromCustomEvent(nativeEvent), null !== fallbackData && (eventType.data = fallbackData))));
            if (fallbackData = canUseTextInputEvent ? getNativeBeforeInputChars(domEventName, nativeEvent) : getFallbackBeforeInputChars(domEventName, nativeEvent))
              eventType = accumulateTwoPhaseListeners(
                targetInst,
                "onBeforeInput"
              ), 0 < eventType.length && (handleEventFunc = new SyntheticInputEvent(
                "onBeforeInput",
                "beforeinput",
                null,
                nativeEvent,
                nativeEventTarget
              ), dispatchQueue.push({
                event: handleEventFunc,
                listeners: eventType
              }), handleEventFunc.data = fallbackData);
            extractEvents$1(
              dispatchQueue,
              domEventName,
              targetInst,
              nativeEvent,
              nativeEventTarget
            );
          }
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        });
      }
      function createDispatchListener(instance, listener, currentTarget) {
        return {
          instance,
          listener,
          currentTarget
        };
      }
      function accumulateTwoPhaseListeners(targetFiber, reactName) {
        for (var captureName = reactName + "Capture", listeners = []; null !== targetFiber; ) {
          var _instance3 = targetFiber, stateNode = _instance3.stateNode;
          _instance3 = _instance3.tag;
          5 !== _instance3 && 26 !== _instance3 && 27 !== _instance3 || null === stateNode || (_instance3 = getListener(targetFiber, captureName), null != _instance3 && listeners.unshift(
            createDispatchListener(targetFiber, _instance3, stateNode)
          ), _instance3 = getListener(targetFiber, reactName), null != _instance3 && listeners.push(
            createDispatchListener(targetFiber, _instance3, stateNode)
          ));
          targetFiber = targetFiber.return;
        }
        return listeners;
      }
      function getParent(inst) {
        if (null === inst)
          return null;
        do
          inst = inst.return;
        while (inst && 5 !== inst.tag && 27 !== inst.tag);
        return inst ? inst : null;
      }
      function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        for (var registrationName = event._reactName, listeners = []; null !== target && target !== common; ) {
          var _instance4 = target, alternate = _instance4.alternate, stateNode = _instance4.stateNode;
          _instance4 = _instance4.tag;
          if (null !== alternate && alternate === common)
            break;
          5 !== _instance4 && 26 !== _instance4 && 27 !== _instance4 || null === stateNode || (alternate = stateNode, inCapturePhase ? (stateNode = getListener(target, registrationName), null != stateNode && listeners.unshift(
            createDispatchListener(target, stateNode, alternate)
          )) : inCapturePhase || (stateNode = getListener(target, registrationName), null != stateNode && listeners.push(
            createDispatchListener(target, stateNode, alternate)
          )));
          target = target.return;
        }
        0 !== listeners.length && dispatchQueue.push({ event, listeners });
      }
      function validatePropertiesInDevelopment(type, props) {
        validateProperties$2(type, props);
        "input" !== type && "textarea" !== type && "select" !== type || null == props || null !== props.value || didWarnValueNull || (didWarnValueNull = true, "select" === type && props.multiple ? error$jscomp$0(
          "`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.",
          type
        ) : error$jscomp$0(
          "`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.",
          type
        ));
        var eventRegistry = {
          registrationNameDependencies,
          possibleRegistrationNames
        };
        isCustomElement(type) || "string" === typeof props.is || warnUnknownProperties(type, props, eventRegistry);
        props.contentEditable && !props.suppressContentEditableWarning && null != props.children && error$jscomp$0(
          "A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."
        );
      }
      function warnForPropDifference(propName, serverValue, clientValue, serverDifferences) {
        serverValue !== clientValue && (clientValue = normalizeMarkupForTextOrAttribute(clientValue), normalizeMarkupForTextOrAttribute(serverValue) !== clientValue && (serverDifferences[propName] = serverValue));
      }
      function warnForExtraAttributes(domElement, attributeNames, serverDifferences) {
        attributeNames.forEach(function(attributeName) {
          serverDifferences[getPropNameFromAttributeName(attributeName)] = "style" === attributeName ? getStylesObjectFromElement(domElement) : domElement.getAttribute(attributeName);
        });
      }
      function warnForInvalidEventListener(registrationName, listener) {
        false === listener ? error$jscomp$0(
          "Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.",
          registrationName,
          registrationName,
          registrationName
        ) : error$jscomp$0(
          "Expected `%s` listener to be a function, instead got a value of `%s` type.",
          registrationName,
          typeof listener
        );
      }
      function normalizeHTML(parent, html) {
        parent = parent.namespaceURI === MATH_NAMESPACE || parent.namespaceURI === SVG_NAMESPACE ? parent.ownerDocument.createElementNS(
          parent.namespaceURI,
          parent.tagName
        ) : parent.ownerDocument.createElement(parent.tagName);
        parent.innerHTML = html;
        return parent.innerHTML;
      }
      function normalizeMarkupForTextOrAttribute(markup) {
        willCoercionThrow(markup) && (error$jscomp$0(
          "The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before using it here.",
          typeName(markup)
        ), testStringCoercion(markup));
        return ("string" === typeof markup ? markup : "" + markup).replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
      }
      function checkForUnmatchedText(serverText, clientText) {
        clientText = normalizeMarkupForTextOrAttribute(clientText);
        return normalizeMarkupForTextOrAttribute(serverText) === clientText ? true : false;
      }
      function noop$1() {
      }
      function setProp(domElement, tag, key, value, props, prevValue) {
        switch (key) {
          case "children":
            if ("string" === typeof value)
              validateTextNesting(value, tag), "body" === tag || "textarea" === tag && "" === value || setTextContent(domElement, value);
            else if ("number" === typeof value || "bigint" === typeof value)
              validateTextNesting("" + value, tag), "body" !== tag && setTextContent(domElement, "" + value);
            break;
          case "className":
            setValueForKnownAttribute(domElement, "class", value);
            break;
          case "tabIndex":
            setValueForKnownAttribute(domElement, "tabindex", value);
            break;
          case "dir":
          case "role":
          case "viewBox":
          case "width":
          case "height":
            setValueForKnownAttribute(domElement, key, value);
            break;
          case "style":
            setValueForStyles(domElement, value, prevValue);
            break;
          case "data":
            if ("object" !== tag) {
              setValueForKnownAttribute(domElement, "data", value);
              break;
            }
          case "src":
          case "href":
            if ("" === value && ("a" !== tag || "href" !== key)) {
              "src" === key ? error$jscomp$0(
                'An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
                key,
                key
              ) : error$jscomp$0(
                'An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
                key,
                key
              );
              domElement.removeAttribute(key);
              break;
            }
            if (null == value || "function" === typeof value || "symbol" === typeof value || "boolean" === typeof value) {
              domElement.removeAttribute(key);
              break;
            }
            checkAttributeStringCoercion(value, key);
            value = sanitizeURL("" + value);
            domElement.setAttribute(key, value);
            break;
          case "action":
          case "formAction":
            null != value && ("form" === tag ? "formAction" === key ? error$jscomp$0(
              "You can only pass the formAction prop to <input> or <button>. Use the action prop on <form>."
            ) : "function" === typeof value && (null == props.encType && null == props.method || didWarnFormActionMethod || (didWarnFormActionMethod = true, error$jscomp$0(
              "Cannot specify a encType or method for a form that specifies a function as the action. React provides those automatically. They will get overridden."
            )), null == props.target || didWarnFormActionTarget || (didWarnFormActionTarget = true, error$jscomp$0(
              "Cannot specify a target for a form that specifies a function as the action. The function will always be executed in the same window."
            ))) : "input" === tag || "button" === tag ? "action" === key ? error$jscomp$0(
              "You can only pass the action prop to <form>. Use the formAction prop on <input> or <button>."
            ) : "input" !== tag || "submit" === props.type || "image" === props.type || didWarnFormActionType ? "button" !== tag || null == props.type || "submit" === props.type || didWarnFormActionType ? "function" === typeof value && (null == props.name || didWarnFormActionName || (didWarnFormActionName = true, error$jscomp$0(
              'Cannot specify a "name" prop for a button that specifies a function as a formAction. React needs it to encode which action should be invoked. It will get overridden.'
            )), null == props.formEncType && null == props.formMethod || didWarnFormActionMethod || (didWarnFormActionMethod = true, error$jscomp$0(
              "Cannot specify a formEncType or formMethod for a button that specifies a function as a formAction. React provides those automatically. They will get overridden."
            )), null == props.formTarget || didWarnFormActionTarget || (didWarnFormActionTarget = true, error$jscomp$0(
              "Cannot specify a formTarget for a button that specifies a function as a formAction. The function will always be executed in the same window."
            ))) : (didWarnFormActionType = true, error$jscomp$0(
              'A button can only specify a formAction along with type="submit" or no type.'
            )) : (didWarnFormActionType = true, error$jscomp$0(
              'An input can only specify a formAction along with type="submit" or type="image".'
            )) : "action" === key ? error$jscomp$0("You can only pass the action prop to <form>.") : error$jscomp$0(
              "You can only pass the formAction prop to <input> or <button>."
            ));
            if ("function" === typeof value) {
              domElement.setAttribute(
                key,
                "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')"
              );
              break;
            } else
              "function" === typeof prevValue && ("formAction" === key ? ("input" !== tag && setProp(domElement, tag, "name", props.name, props, null), setProp(
                domElement,
                tag,
                "formEncType",
                props.formEncType,
                props,
                null
              ), setProp(
                domElement,
                tag,
                "formMethod",
                props.formMethod,
                props,
                null
              ), setProp(
                domElement,
                tag,
                "formTarget",
                props.formTarget,
                props,
                null
              )) : (setProp(
                domElement,
                tag,
                "encType",
                props.encType,
                props,
                null
              ), setProp(domElement, tag, "method", props.method, props, null), setProp(
                domElement,
                tag,
                "target",
                props.target,
                props,
                null
              )));
            if (null == value || "symbol" === typeof value || "boolean" === typeof value) {
              domElement.removeAttribute(key);
              break;
            }
            checkAttributeStringCoercion(value, key);
            value = sanitizeURL("" + value);
            domElement.setAttribute(key, value);
            break;
          case "onClick":
            null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), domElement.onclick = noop$1);
            break;
          case "onScroll":
            null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scroll", domElement));
            break;
          case "onScrollEnd":
            null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scrollend", domElement));
            break;
          case "dangerouslySetInnerHTML":
            if (null != value) {
              if ("object" !== typeof value || !("__html" in value))
                throw Error(
                  "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information."
                );
              key = value.__html;
              if (null != key) {
                if (null != props.children)
                  throw Error(
                    "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
                  );
                domElement.innerHTML = key;
              }
            }
            break;
          case "multiple":
            domElement.multiple = value && "function" !== typeof value && "symbol" !== typeof value;
            break;
          case "muted":
            domElement.muted = value && "function" !== typeof value && "symbol" !== typeof value;
            break;
          case "suppressContentEditableWarning":
          case "suppressHydrationWarning":
          case "defaultValue":
          case "defaultChecked":
          case "innerHTML":
          case "ref":
            break;
          case "autoFocus":
            break;
          case "xlinkHref":
            if (null == value || "function" === typeof value || "boolean" === typeof value || "symbol" === typeof value) {
              domElement.removeAttribute("xlink:href");
              break;
            }
            checkAttributeStringCoercion(value, key);
            key = sanitizeURL("" + value);
            domElement.setAttributeNS(xlinkNamespace, "xlink:href", key);
            break;
          case "contentEditable":
          case "spellCheck":
          case "draggable":
          case "value":
          case "autoReverse":
          case "externalResourcesRequired":
          case "focusable":
          case "preserveAlpha":
            null != value && "function" !== typeof value && "symbol" !== typeof value ? (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, "" + value)) : domElement.removeAttribute(key);
            break;
          case "inert":
            "" !== value || didWarnForNewBooleanPropsWithEmptyValue[key] || (didWarnForNewBooleanPropsWithEmptyValue[key] = true, error$jscomp$0(
              "Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.",
              key
            ));
          case "allowFullScreen":
          case "async":
          case "autoPlay":
          case "controls":
          case "default":
          case "defer":
          case "disabled":
          case "disablePictureInPicture":
          case "disableRemotePlayback":
          case "formNoValidate":
          case "hidden":
          case "loop":
          case "noModule":
          case "noValidate":
          case "open":
          case "playsInline":
          case "readOnly":
          case "required":
          case "reversed":
          case "scoped":
          case "seamless":
          case "itemScope":
            value && "function" !== typeof value && "symbol" !== typeof value ? domElement.setAttribute(key, "") : domElement.removeAttribute(key);
            break;
          case "capture":
          case "download":
            true === value ? domElement.setAttribute(key, "") : false !== value && null != value && "function" !== typeof value && "symbol" !== typeof value ? (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, value)) : domElement.removeAttribute(key);
            break;
          case "cols":
          case "rows":
          case "size":
          case "span":
            null != value && "function" !== typeof value && "symbol" !== typeof value && !isNaN(value) && 1 <= value ? (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, value)) : domElement.removeAttribute(key);
            break;
          case "rowSpan":
          case "start":
            null == value || "function" === typeof value || "symbol" === typeof value || isNaN(value) ? domElement.removeAttribute(key) : (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, value));
            break;
          case "popover":
            listenToNonDelegatedEvent("beforetoggle", domElement);
            listenToNonDelegatedEvent("toggle", domElement);
            setValueForAttribute(domElement, "popover", value);
            break;
          case "xlinkActuate":
            setValueForNamespacedAttribute(
              domElement,
              xlinkNamespace,
              "xlink:actuate",
              value
            );
            break;
          case "xlinkArcrole":
            setValueForNamespacedAttribute(
              domElement,
              xlinkNamespace,
              "xlink:arcrole",
              value
            );
            break;
          case "xlinkRole":
            setValueForNamespacedAttribute(
              domElement,
              xlinkNamespace,
              "xlink:role",
              value
            );
            break;
          case "xlinkShow":
            setValueForNamespacedAttribute(
              domElement,
              xlinkNamespace,
              "xlink:show",
              value
            );
            break;
          case "xlinkTitle":
            setValueForNamespacedAttribute(
              domElement,
              xlinkNamespace,
              "xlink:title",
              value
            );
            break;
          case "xlinkType":
            setValueForNamespacedAttribute(
              domElement,
              xlinkNamespace,
              "xlink:type",
              value
            );
            break;
          case "xmlBase":
            setValueForNamespacedAttribute(
              domElement,
              xmlNamespace,
              "xml:base",
              value
            );
            break;
          case "xmlLang":
            setValueForNamespacedAttribute(
              domElement,
              xmlNamespace,
              "xml:lang",
              value
            );
            break;
          case "xmlSpace":
            setValueForNamespacedAttribute(
              domElement,
              xmlNamespace,
              "xml:space",
              value
            );
            break;
          case "is":
            null != prevValue && error$jscomp$0(
              'Cannot update the "is" prop after it has been initialized.'
            );
            setValueForAttribute(domElement, "is", value);
            break;
          case "innerText":
          case "textContent":
            break;
          case "popoverTarget":
            didWarnPopoverTargetObject || null == value || "object" !== typeof value || (didWarnPopoverTargetObject = true, error$jscomp$0(
              "The `popoverTarget` prop expects the ID of an Element as a string. Received %s instead.",
              value
            ));
          default:
            !(2 < key.length) || "o" !== key[0] && "O" !== key[0] || "n" !== key[1] && "N" !== key[1] ? (key = getAttributeAlias(key), setValueForAttribute(domElement, key, value)) : registrationNameDependencies.hasOwnProperty(key) && null != value && "function" !== typeof value && warnForInvalidEventListener(key, value);
        }
      }
      function setPropOnCustomElement(domElement, tag, key, value, props, prevValue) {
        switch (key) {
          case "style":
            setValueForStyles(domElement, value, prevValue);
            break;
          case "dangerouslySetInnerHTML":
            if (null != value) {
              if ("object" !== typeof value || !("__html" in value))
                throw Error(
                  "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information."
                );
              key = value.__html;
              if (null != key) {
                if (null != props.children)
                  throw Error(
                    "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
                  );
                domElement.innerHTML = key;
              }
            }
            break;
          case "children":
            "string" === typeof value ? setTextContent(domElement, value) : ("number" === typeof value || "bigint" === typeof value) && setTextContent(domElement, "" + value);
            break;
          case "onScroll":
            null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scroll", domElement));
            break;
          case "onScrollEnd":
            null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scrollend", domElement));
            break;
          case "onClick":
            null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), domElement.onclick = noop$1);
            break;
          case "suppressContentEditableWarning":
          case "suppressHydrationWarning":
          case "innerHTML":
          case "ref":
            break;
          case "innerText":
          case "textContent":
            break;
          default:
            if (registrationNameDependencies.hasOwnProperty(key))
              null != value && "function" !== typeof value && warnForInvalidEventListener(key, value);
            else
              a: {
                if ("o" === key[0] && "n" === key[1] && (props = key.endsWith("Capture"), tag = key.slice(2, props ? key.length - 7 : void 0), prevValue = domElement[internalPropsKey] || null, prevValue = null != prevValue ? prevValue[key] : null, "function" === typeof prevValue && domElement.removeEventListener(tag, prevValue, props), "function" === typeof value)) {
                  "function" !== typeof prevValue && null !== prevValue && (key in domElement ? domElement[key] = null : domElement.hasAttribute(key) && domElement.removeAttribute(key));
                  domElement.addEventListener(tag, value, props);
                  break a;
                }
                key in domElement ? domElement[key] = value : true === value ? domElement.setAttribute(key, "") : setValueForAttribute(domElement, key, value);
              }
        }
      }
      function setInitialProperties(domElement, tag, props) {
        validatePropertiesInDevelopment(tag, props);
        switch (tag) {
          case "div":
          case "span":
          case "svg":
          case "path":
          case "a":
          case "g":
          case "p":
          case "li":
            break;
          case "input":
            checkControlledValueProps("input", props);
            listenToNonDelegatedEvent("invalid", domElement);
            var name = null, type = null, value = null, defaultValue = null, checked = null, defaultChecked = null;
            for (propKey in props)
              if (props.hasOwnProperty(propKey)) {
                var propValue = props[propKey];
                if (null != propValue)
                  switch (propKey) {
                    case "name":
                      name = propValue;
                      break;
                    case "type":
                      type = propValue;
                      break;
                    case "checked":
                      checked = propValue;
                      break;
                    case "defaultChecked":
                      defaultChecked = propValue;
                      break;
                    case "value":
                      value = propValue;
                      break;
                    case "defaultValue":
                      defaultValue = propValue;
                      break;
                    case "children":
                    case "dangerouslySetInnerHTML":
                      if (null != propValue)
                        throw Error(
                          tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                        );
                      break;
                    default:
                      setProp(domElement, tag, propKey, propValue, props, null);
                  }
              }
            validateInputProps(domElement, props);
            initInput(
              domElement,
              value,
              defaultValue,
              checked,
              defaultChecked,
              type,
              name,
              false
            );
            track(domElement);
            return;
          case "select":
            checkControlledValueProps("select", props);
            listenToNonDelegatedEvent("invalid", domElement);
            var propKey = type = value = null;
            for (name in props)
              if (props.hasOwnProperty(name) && (defaultValue = props[name], null != defaultValue))
                switch (name) {
                  case "value":
                    value = defaultValue;
                    break;
                  case "defaultValue":
                    type = defaultValue;
                    break;
                  case "multiple":
                    propKey = defaultValue;
                  default:
                    setProp(domElement, tag, name, defaultValue, props, null);
                }
            validateSelectProps(domElement, props);
            tag = value;
            props = type;
            domElement.multiple = !!propKey;
            null != tag ? updateOptions(domElement, !!propKey, tag, false) : null != props && updateOptions(domElement, !!propKey, props, true);
            return;
          case "textarea":
            checkControlledValueProps("textarea", props);
            listenToNonDelegatedEvent("invalid", domElement);
            value = name = propKey = null;
            for (type in props)
              if (props.hasOwnProperty(type) && (defaultValue = props[type], null != defaultValue))
                switch (type) {
                  case "value":
                    propKey = defaultValue;
                    break;
                  case "defaultValue":
                    name = defaultValue;
                    break;
                  case "children":
                    value = defaultValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    if (null != defaultValue)
                      throw Error(
                        "`dangerouslySetInnerHTML` does not make sense on <textarea>."
                      );
                    break;
                  default:
                    setProp(domElement, tag, type, defaultValue, props, null);
                }
            validateTextareaProps(domElement, props);
            initTextarea(domElement, propKey, name, value);
            track(domElement);
            return;
          case "option":
            validateOptionProps(domElement, props);
            for (defaultValue in props)
              if (props.hasOwnProperty(defaultValue) && (propKey = props[defaultValue], null != propKey))
                switch (defaultValue) {
                  case "selected":
                    domElement.selected = propKey && "function" !== typeof propKey && "symbol" !== typeof propKey;
                    break;
                  default:
                    setProp(domElement, tag, defaultValue, propKey, props, null);
                }
            return;
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement);
            listenToNonDelegatedEvent("close", domElement);
            break;
          case "iframe":
          case "object":
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "video":
          case "audio":
            for (propKey = 0; propKey < mediaEventTypes.length; propKey++)
              listenToNonDelegatedEvent(mediaEventTypes[propKey], domElement);
            break;
          case "image":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            break;
          case "embed":
          case "source":
          case "img":
          case "link":
            listenToNonDelegatedEvent("error", domElement), listenToNonDelegatedEvent("load", domElement);
          case "area":
          case "base":
          case "br":
          case "col":
          case "hr":
          case "keygen":
          case "meta":
          case "param":
          case "track":
          case "wbr":
          case "menuitem":
            for (checked in props)
              if (props.hasOwnProperty(checked) && (propKey = props[checked], null != propKey))
                switch (checked) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error(
                      tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                    );
                  default:
                    setProp(domElement, tag, checked, propKey, props, null);
                }
            return;
          default:
            if (isCustomElement(tag)) {
              for (defaultChecked in props)
                props.hasOwnProperty(defaultChecked) && (propKey = props[defaultChecked], void 0 !== propKey && setPropOnCustomElement(
                  domElement,
                  tag,
                  defaultChecked,
                  propKey,
                  props,
                  void 0
                ));
              return;
            }
        }
        for (value in props)
          props.hasOwnProperty(value) && (propKey = props[value], null != propKey && setProp(domElement, tag, value, propKey, props, null));
      }
      function updateProperties(domElement, tag, lastProps, nextProps) {
        validatePropertiesInDevelopment(tag, nextProps);
        switch (tag) {
          case "div":
          case "span":
          case "svg":
          case "path":
          case "a":
          case "g":
          case "p":
          case "li":
            break;
          case "input":
            var name = null, type = null, value = null, defaultValue = null, lastDefaultValue = null, checked = null, defaultChecked = null;
            for (propKey in lastProps) {
              var lastProp = lastProps[propKey];
              if (lastProps.hasOwnProperty(propKey) && null != lastProp)
                switch (propKey) {
                  case "checked":
                    break;
                  case "value":
                    break;
                  case "defaultValue":
                    lastDefaultValue = lastProp;
                  default:
                    nextProps.hasOwnProperty(propKey) || setProp(
                      domElement,
                      tag,
                      propKey,
                      null,
                      nextProps,
                      lastProp
                    );
                }
            }
            for (var _propKey7 in nextProps) {
              var propKey = nextProps[_propKey7];
              lastProp = lastProps[_propKey7];
              if (nextProps.hasOwnProperty(_propKey7) && (null != propKey || null != lastProp))
                switch (_propKey7) {
                  case "type":
                    type = propKey;
                    break;
                  case "name":
                    name = propKey;
                    break;
                  case "checked":
                    checked = propKey;
                    break;
                  case "defaultChecked":
                    defaultChecked = propKey;
                    break;
                  case "value":
                    value = propKey;
                    break;
                  case "defaultValue":
                    defaultValue = propKey;
                    break;
                  case "children":
                  case "dangerouslySetInnerHTML":
                    if (null != propKey)
                      throw Error(
                        tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                      );
                    break;
                  default:
                    propKey !== lastProp && setProp(
                      domElement,
                      tag,
                      _propKey7,
                      propKey,
                      nextProps,
                      lastProp
                    );
                }
            }
            tag = "checkbox" === lastProps.type || "radio" === lastProps.type ? null != lastProps.checked : null != lastProps.value;
            nextProps = "checkbox" === nextProps.type || "radio" === nextProps.type ? null != nextProps.checked : null != nextProps.value;
            tag || !nextProps || didWarnUncontrolledToControlled || (error$jscomp$0(
              "A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"
            ), didWarnUncontrolledToControlled = true);
            !tag || nextProps || didWarnControlledToUncontrolled || (error$jscomp$0(
              "A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"
            ), didWarnControlledToUncontrolled = true);
            updateInput(
              domElement,
              value,
              defaultValue,
              lastDefaultValue,
              checked,
              defaultChecked,
              type,
              name
            );
            return;
          case "select":
            propKey = value = defaultValue = _propKey7 = null;
            for (type in lastProps)
              if (lastDefaultValue = lastProps[type], lastProps.hasOwnProperty(type) && null != lastDefaultValue)
                switch (type) {
                  case "value":
                    break;
                  case "multiple":
                    propKey = lastDefaultValue;
                  default:
                    nextProps.hasOwnProperty(type) || setProp(
                      domElement,
                      tag,
                      type,
                      null,
                      nextProps,
                      lastDefaultValue
                    );
                }
            for (name in nextProps)
              if (type = nextProps[name], lastDefaultValue = lastProps[name], nextProps.hasOwnProperty(name) && (null != type || null != lastDefaultValue))
                switch (name) {
                  case "value":
                    _propKey7 = type;
                    break;
                  case "defaultValue":
                    defaultValue = type;
                    break;
                  case "multiple":
                    value = type;
                  default:
                    type !== lastDefaultValue && setProp(
                      domElement,
                      tag,
                      name,
                      type,
                      nextProps,
                      lastDefaultValue
                    );
                }
            nextProps = defaultValue;
            tag = value;
            lastProps = propKey;
            null != _propKey7 ? updateOptions(domElement, !!tag, _propKey7, false) : !!lastProps !== !!tag && (null != nextProps ? updateOptions(domElement, !!tag, nextProps, true) : updateOptions(domElement, !!tag, tag ? [] : "", false));
            return;
          case "textarea":
            propKey = _propKey7 = null;
            for (defaultValue in lastProps)
              if (name = lastProps[defaultValue], lastProps.hasOwnProperty(defaultValue) && null != name && !nextProps.hasOwnProperty(defaultValue))
                switch (defaultValue) {
                  case "value":
                    break;
                  case "children":
                    break;
                  default:
                    setProp(domElement, tag, defaultValue, null, nextProps, name);
                }
            for (value in nextProps)
              if (name = nextProps[value], type = lastProps[value], nextProps.hasOwnProperty(value) && (null != name || null != type))
                switch (value) {
                  case "value":
                    _propKey7 = name;
                    break;
                  case "defaultValue":
                    propKey = name;
                    break;
                  case "children":
                    break;
                  case "dangerouslySetInnerHTML":
                    if (null != name)
                      throw Error(
                        "`dangerouslySetInnerHTML` does not make sense on <textarea>."
                      );
                    break;
                  default:
                    name !== type && setProp(domElement, tag, value, name, nextProps, type);
                }
            updateTextarea(domElement, _propKey7, propKey);
            return;
          case "option":
            for (var _propKey12 in lastProps)
              if (_propKey7 = lastProps[_propKey12], lastProps.hasOwnProperty(_propKey12) && null != _propKey7 && !nextProps.hasOwnProperty(_propKey12))
                switch (_propKey12) {
                  case "selected":
                    domElement.selected = false;
                    break;
                  default:
                    setProp(
                      domElement,
                      tag,
                      _propKey12,
                      null,
                      nextProps,
                      _propKey7
                    );
                }
            for (lastDefaultValue in nextProps)
              if (_propKey7 = nextProps[lastDefaultValue], propKey = lastProps[lastDefaultValue], nextProps.hasOwnProperty(lastDefaultValue) && _propKey7 !== propKey && (null != _propKey7 || null != propKey))
                switch (lastDefaultValue) {
                  case "selected":
                    domElement.selected = _propKey7 && "function" !== typeof _propKey7 && "symbol" !== typeof _propKey7;
                    break;
                  default:
                    setProp(
                      domElement,
                      tag,
                      lastDefaultValue,
                      _propKey7,
                      nextProps,
                      propKey
                    );
                }
            return;
          case "img":
          case "link":
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "keygen":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
          case "menuitem":
            for (var _propKey14 in lastProps)
              _propKey7 = lastProps[_propKey14], lastProps.hasOwnProperty(_propKey14) && null != _propKey7 && !nextProps.hasOwnProperty(_propKey14) && setProp(
                domElement,
                tag,
                _propKey14,
                null,
                nextProps,
                _propKey7
              );
            for (checked in nextProps)
              if (_propKey7 = nextProps[checked], propKey = lastProps[checked], nextProps.hasOwnProperty(checked) && _propKey7 !== propKey && (null != _propKey7 || null != propKey))
                switch (checked) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    if (null != _propKey7)
                      throw Error(
                        tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                      );
                    break;
                  default:
                    setProp(
                      domElement,
                      tag,
                      checked,
                      _propKey7,
                      nextProps,
                      propKey
                    );
                }
            return;
          default:
            if (isCustomElement(tag)) {
              for (var _propKey16 in lastProps)
                _propKey7 = lastProps[_propKey16], lastProps.hasOwnProperty(_propKey16) && void 0 !== _propKey7 && !nextProps.hasOwnProperty(_propKey16) && setPropOnCustomElement(
                  domElement,
                  tag,
                  _propKey16,
                  void 0,
                  nextProps,
                  _propKey7
                );
              for (defaultChecked in nextProps)
                _propKey7 = nextProps[defaultChecked], propKey = lastProps[defaultChecked], !nextProps.hasOwnProperty(defaultChecked) || _propKey7 === propKey || void 0 === _propKey7 && void 0 === propKey || setPropOnCustomElement(
                  domElement,
                  tag,
                  defaultChecked,
                  _propKey7,
                  nextProps,
                  propKey
                );
              return;
            }
        }
        for (var _propKey18 in lastProps)
          _propKey7 = lastProps[_propKey18], lastProps.hasOwnProperty(_propKey18) && null != _propKey7 && !nextProps.hasOwnProperty(_propKey18) && setProp(domElement, tag, _propKey18, null, nextProps, _propKey7);
        for (lastProp in nextProps)
          _propKey7 = nextProps[lastProp], propKey = lastProps[lastProp], !nextProps.hasOwnProperty(lastProp) || _propKey7 === propKey || null == _propKey7 && null == propKey || setProp(domElement, tag, lastProp, _propKey7, nextProps, propKey);
      }
      function getPropNameFromAttributeName(attrName) {
        switch (attrName) {
          case "class":
            return "className";
          case "for":
            return "htmlFor";
          default:
            return attrName;
        }
      }
      function getStylesObjectFromElement(domElement) {
        var serverValueInObjectForm = {};
        domElement = domElement.style;
        for (var i = 0; i < domElement.length; i++) {
          var styleName = domElement[i];
          serverValueInObjectForm[styleName] = domElement.getPropertyValue(styleName);
        }
        return serverValueInObjectForm;
      }
      function diffHydratedStyles(domElement, value$jscomp$0, serverDifferences) {
        if (null != value$jscomp$0 && "object" !== typeof value$jscomp$0)
          error$jscomp$0(
            "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
          );
        else if (canDiffStyleForHydrationWarning) {
          var clientValue;
          var delimiter = clientValue = "", styleName;
          for (styleName in value$jscomp$0)
            if (value$jscomp$0.hasOwnProperty(styleName)) {
              var value = value$jscomp$0[styleName];
              null != value && "boolean" !== typeof value && "" !== value && (0 === styleName.indexOf("--") ? (checkCSSPropertyStringCoercion(value, styleName), clientValue += delimiter + styleName + ":" + ("" + value).trim()) : "number" !== typeof value || 0 === value || unitlessNumbers.has(styleName) ? (checkCSSPropertyStringCoercion(value, styleName), clientValue += delimiter + styleName.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-") + ":" + ("" + value).trim()) : clientValue += delimiter + styleName.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-") + ":" + value + "px", delimiter = ";");
            }
          clientValue = clientValue || null;
          value$jscomp$0 = domElement.getAttribute("style");
          value$jscomp$0 !== clientValue && (clientValue = normalizeMarkupForTextOrAttribute(clientValue), normalizeMarkupForTextOrAttribute(value$jscomp$0) !== clientValue && (serverDifferences.style = getStylesObjectFromElement(domElement)));
        }
      }
      function hydrateAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
        extraAttributes.delete(attributeName);
        domElement = domElement.getAttribute(attributeName);
        if (null === domElement)
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
            case "boolean":
              return;
          }
        else if (null != value)
          switch (typeof value) {
            case "function":
            case "symbol":
            case "boolean":
              break;
            default:
              if (checkAttributeStringCoercion(value, propKey), domElement === "" + value)
                return;
          }
        warnForPropDifference(propKey, domElement, value, serverDifferences);
      }
      function hydrateBooleanAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
        extraAttributes.delete(attributeName);
        domElement = domElement.getAttribute(attributeName);
        if (null === domElement) {
          switch (typeof value) {
            case "function":
            case "symbol":
              return;
          }
          if (!value)
            return;
        } else
          switch (typeof value) {
            case "function":
            case "symbol":
              break;
            default:
              if (value)
                return;
          }
        warnForPropDifference(propKey, domElement, value, serverDifferences);
      }
      function hydrateBooleanishAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
        extraAttributes.delete(attributeName);
        domElement = domElement.getAttribute(attributeName);
        if (null === domElement)
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
              return;
          }
        else if (null != value)
          switch (typeof value) {
            case "function":
            case "symbol":
              break;
            default:
              if (checkAttributeStringCoercion(value, attributeName), domElement === "" + value)
                return;
          }
        warnForPropDifference(propKey, domElement, value, serverDifferences);
      }
      function hydrateNumericAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
        extraAttributes.delete(attributeName);
        domElement = domElement.getAttribute(attributeName);
        if (null === domElement)
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
            case "boolean":
              return;
            default:
              if (isNaN(value))
                return;
          }
        else if (null != value)
          switch (typeof value) {
            case "function":
            case "symbol":
            case "boolean":
              break;
            default:
              if (!isNaN(value) && (checkAttributeStringCoercion(value, propKey), domElement === "" + value))
                return;
          }
        warnForPropDifference(propKey, domElement, value, serverDifferences);
      }
      function hydrateSanitizedAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
        extraAttributes.delete(attributeName);
        domElement = domElement.getAttribute(attributeName);
        if (null === domElement)
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
            case "boolean":
              return;
          }
        else if (null != value)
          switch (typeof value) {
            case "function":
            case "symbol":
            case "boolean":
              break;
            default:
              if (checkAttributeStringCoercion(value, propKey), attributeName = sanitizeURL("" + value), domElement === attributeName)
                return;
          }
        warnForPropDifference(propKey, domElement, value, serverDifferences);
      }
      function diffHydratedProperties(domElement, tag, props, hostContext) {
        for (var serverDifferences = {}, extraAttributes = /* @__PURE__ */ new Set(), attributes = domElement.attributes, i = 0; i < attributes.length; i++)
          switch (attributes[i].name.toLowerCase()) {
            case "value":
              break;
            case "checked":
              break;
            case "selected":
              break;
            default:
              extraAttributes.add(attributes[i].name);
          }
        if (isCustomElement(tag))
          for (var propKey in props) {
            if (props.hasOwnProperty(propKey)) {
              var value = props[propKey];
              if (null != value) {
                if (registrationNameDependencies.hasOwnProperty(propKey))
                  "function" !== typeof value && warnForInvalidEventListener(propKey, value);
                else if (true !== props.suppressHydrationWarning)
                  switch (propKey) {
                    case "children":
                      "string" !== typeof value && "number" !== typeof value || warnForPropDifference(
                        "children",
                        domElement.textContent,
                        value,
                        serverDifferences
                      );
                      continue;
                    case "suppressContentEditableWarning":
                    case "suppressHydrationWarning":
                    case "defaultValue":
                    case "defaultChecked":
                    case "innerHTML":
                    case "ref":
                      continue;
                    case "dangerouslySetInnerHTML":
                      attributes = domElement.innerHTML;
                      value = value ? value.__html : void 0;
                      null != value && (value = normalizeHTML(domElement, value), warnForPropDifference(
                        propKey,
                        attributes,
                        value,
                        serverDifferences
                      ));
                      continue;
                    case "style":
                      extraAttributes.delete(propKey);
                      diffHydratedStyles(domElement, value, serverDifferences);
                      continue;
                    case "offsetParent":
                    case "offsetTop":
                    case "offsetLeft":
                    case "offsetWidth":
                    case "offsetHeight":
                    case "isContentEditable":
                    case "outerText":
                    case "outerHTML":
                      extraAttributes.delete(propKey.toLowerCase());
                      error$jscomp$0(
                        "Assignment to read-only property will result in a no-op: `%s`",
                        propKey
                      );
                      continue;
                    case "className":
                      extraAttributes.delete("class");
                      attributes = getValueForAttributeOnCustomComponent(
                        domElement,
                        "class",
                        value
                      );
                      warnForPropDifference(
                        "className",
                        attributes,
                        value,
                        serverDifferences
                      );
                      continue;
                    default:
                      hostContext.context === HostContextNamespaceNone && "svg" !== tag && "math" !== tag ? extraAttributes.delete(propKey.toLowerCase()) : extraAttributes.delete(propKey), attributes = getValueForAttributeOnCustomComponent(
                        domElement,
                        propKey,
                        value
                      ), warnForPropDifference(
                        propKey,
                        attributes,
                        value,
                        serverDifferences
                      );
                  }
              }
            }
          }
        else
          for (value in props)
            if (props.hasOwnProperty(value) && (propKey = props[value], null != propKey)) {
              if (registrationNameDependencies.hasOwnProperty(value))
                "function" !== typeof propKey && warnForInvalidEventListener(value, propKey);
              else if (true !== props.suppressHydrationWarning)
                switch (value) {
                  case "children":
                    "string" !== typeof propKey && "number" !== typeof propKey || warnForPropDifference(
                      "children",
                      domElement.textContent,
                      propKey,
                      serverDifferences
                    );
                    continue;
                  case "suppressContentEditableWarning":
                  case "suppressHydrationWarning":
                  case "value":
                  case "checked":
                  case "selected":
                  case "defaultValue":
                  case "defaultChecked":
                  case "innerHTML":
                  case "ref":
                    continue;
                  case "dangerouslySetInnerHTML":
                    attributes = domElement.innerHTML;
                    propKey = propKey ? propKey.__html : void 0;
                    null != propKey && (propKey = normalizeHTML(domElement, propKey), attributes !== propKey && (serverDifferences[value] = { __html: attributes }));
                    continue;
                  case "className":
                    hydrateAttribute(
                      domElement,
                      value,
                      "class",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "tabIndex":
                    hydrateAttribute(
                      domElement,
                      value,
                      "tabindex",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "style":
                    extraAttributes.delete(value);
                    diffHydratedStyles(domElement, propKey, serverDifferences);
                    continue;
                  case "multiple":
                    extraAttributes.delete(value);
                    warnForPropDifference(
                      value,
                      domElement.multiple,
                      propKey,
                      serverDifferences
                    );
                    continue;
                  case "muted":
                    extraAttributes.delete(value);
                    warnForPropDifference(
                      value,
                      domElement.muted,
                      propKey,
                      serverDifferences
                    );
                    continue;
                  case "autoFocus":
                    extraAttributes.delete("autofocus");
                    warnForPropDifference(
                      value,
                      domElement.autofocus,
                      propKey,
                      serverDifferences
                    );
                    continue;
                  case "data":
                    if ("object" !== tag) {
                      extraAttributes.delete(value);
                      attributes = domElement.getAttribute("data");
                      warnForPropDifference(
                        value,
                        attributes,
                        propKey,
                        serverDifferences
                      );
                      continue;
                    }
                  case "src":
                  case "href":
                    if (!("" !== propKey || "a" === tag && "href" === value || "object" === tag && "data" === value)) {
                      "src" === value ? error$jscomp$0(
                        'An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
                        value,
                        value
                      ) : error$jscomp$0(
                        'An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
                        value,
                        value
                      );
                      hydrateSanitizedAttribute(
                        domElement,
                        value,
                        value,
                        null,
                        extraAttributes,
                        serverDifferences
                      );
                      continue;
                    }
                    hydrateSanitizedAttribute(
                      domElement,
                      value,
                      value,
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "action":
                  case "formAction":
                    attributes = domElement.getAttribute(value);
                    if ("function" === typeof propKey) {
                      extraAttributes.delete(value.toLowerCase());
                      "formAction" === value ? (extraAttributes.delete("name"), extraAttributes.delete("formenctype"), extraAttributes.delete("formmethod"), extraAttributes.delete("formtarget")) : (extraAttributes.delete("enctype"), extraAttributes.delete("method"), extraAttributes.delete("target"));
                      continue;
                    } else if (attributes === EXPECTED_FORM_ACTION_URL) {
                      extraAttributes.delete(value.toLowerCase());
                      warnForPropDifference(
                        value,
                        "function",
                        propKey,
                        serverDifferences
                      );
                      continue;
                    }
                    hydrateSanitizedAttribute(
                      domElement,
                      value,
                      value.toLowerCase(),
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "xlinkHref":
                    hydrateSanitizedAttribute(
                      domElement,
                      value,
                      "xlink:href",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "contentEditable":
                    hydrateBooleanishAttribute(
                      domElement,
                      value,
                      "contenteditable",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "spellCheck":
                    hydrateBooleanishAttribute(
                      domElement,
                      value,
                      "spellcheck",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "draggable":
                  case "autoReverse":
                  case "externalResourcesRequired":
                  case "focusable":
                  case "preserveAlpha":
                    hydrateBooleanishAttribute(
                      domElement,
                      value,
                      value,
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "allowFullScreen":
                  case "async":
                  case "autoPlay":
                  case "controls":
                  case "default":
                  case "defer":
                  case "disabled":
                  case "disablePictureInPicture":
                  case "disableRemotePlayback":
                  case "formNoValidate":
                  case "hidden":
                  case "loop":
                  case "noModule":
                  case "noValidate":
                  case "open":
                  case "playsInline":
                  case "readOnly":
                  case "required":
                  case "reversed":
                  case "scoped":
                  case "seamless":
                  case "itemScope":
                    hydrateBooleanAttribute(
                      domElement,
                      value,
                      value.toLowerCase(),
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "capture":
                  case "download":
                    a: {
                      i = domElement;
                      var attributeName = attributes = value, serverDifferences$jscomp$0 = serverDifferences;
                      extraAttributes.delete(attributeName);
                      i = i.getAttribute(attributeName);
                      if (null === i)
                        switch (typeof propKey) {
                          case "undefined":
                          case "function":
                          case "symbol":
                            break a;
                          default:
                            if (false === propKey)
                              break a;
                        }
                      else if (null != propKey)
                        switch (typeof propKey) {
                          case "function":
                          case "symbol":
                            break;
                          case "boolean":
                            if (true === propKey && "" === i)
                              break a;
                            break;
                          default:
                            if (checkAttributeStringCoercion(propKey, attributes), i === "" + propKey)
                              break a;
                        }
                      warnForPropDifference(
                        attributes,
                        i,
                        propKey,
                        serverDifferences$jscomp$0
                      );
                    }
                    continue;
                  case "cols":
                  case "rows":
                  case "size":
                  case "span":
                    a: {
                      i = domElement;
                      attributeName = attributes = value;
                      serverDifferences$jscomp$0 = serverDifferences;
                      extraAttributes.delete(attributeName);
                      i = i.getAttribute(attributeName);
                      if (null === i)
                        switch (typeof propKey) {
                          case "undefined":
                          case "function":
                          case "symbol":
                          case "boolean":
                            break a;
                          default:
                            if (isNaN(propKey) || 1 > propKey)
                              break a;
                        }
                      else if (null != propKey)
                        switch (typeof propKey) {
                          case "function":
                          case "symbol":
                          case "boolean":
                            break;
                          default:
                            if (!(isNaN(propKey) || 1 > propKey) && (checkAttributeStringCoercion(propKey, attributes), i === "" + propKey))
                              break a;
                        }
                      warnForPropDifference(
                        attributes,
                        i,
                        propKey,
                        serverDifferences$jscomp$0
                      );
                    }
                    continue;
                  case "rowSpan":
                    hydrateNumericAttribute(
                      domElement,
                      value,
                      "rowspan",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "start":
                    hydrateNumericAttribute(
                      domElement,
                      value,
                      value,
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "xHeight":
                    hydrateAttribute(
                      domElement,
                      value,
                      "x-height",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "xlinkActuate":
                    hydrateAttribute(
                      domElement,
                      value,
                      "xlink:actuate",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "xlinkArcrole":
                    hydrateAttribute(
                      domElement,
                      value,
                      "xlink:arcrole",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "xlinkRole":
                    hydrateAttribute(
                      domElement,
                      value,
                      "xlink:role",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "xlinkShow":
                    hydrateAttribute(
                      domElement,
                      value,
                      "xlink:show",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "xlinkTitle":
                    hydrateAttribute(
                      domElement,
                      value,
                      "xlink:title",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "xlinkType":
                    hydrateAttribute(
                      domElement,
                      value,
                      "xlink:type",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "xmlBase":
                    hydrateAttribute(
                      domElement,
                      value,
                      "xml:base",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "xmlLang":
                    hydrateAttribute(
                      domElement,
                      value,
                      "xml:lang",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "xmlSpace":
                    hydrateAttribute(
                      domElement,
                      value,
                      "xml:space",
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  case "inert":
                    "" !== propKey || didWarnForNewBooleanPropsWithEmptyValue[value] || (didWarnForNewBooleanPropsWithEmptyValue[value] = true, error$jscomp$0(
                      "Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.",
                      value
                    ));
                    hydrateBooleanAttribute(
                      domElement,
                      value,
                      value,
                      propKey,
                      extraAttributes,
                      serverDifferences
                    );
                    continue;
                  default:
                    if (!(2 < value.length) || "o" !== value[0] && "O" !== value[0] || "n" !== value[1] && "N" !== value[1]) {
                      i = getAttributeAlias(value);
                      attributes = false;
                      hostContext.context === HostContextNamespaceNone && "svg" !== tag && "math" !== tag ? extraAttributes.delete(i.toLowerCase()) : (attributeName = value.toLowerCase(), attributeName = possibleStandardNames.hasOwnProperty(
                        attributeName
                      ) ? possibleStandardNames[attributeName] || null : null, null !== attributeName && attributeName !== value && (attributes = true, extraAttributes.delete(attributeName)), extraAttributes.delete(i));
                      a:
                        if (attributeName = domElement, serverDifferences$jscomp$0 = i, i = propKey, isAttributeNameSafe(serverDifferences$jscomp$0))
                          if (attributeName.hasAttribute(serverDifferences$jscomp$0))
                            attributeName = attributeName.getAttribute(
                              serverDifferences$jscomp$0
                            ), checkAttributeStringCoercion(
                              i,
                              serverDifferences$jscomp$0
                            ), i = attributeName === "" + i ? i : attributeName;
                          else {
                            switch (typeof i) {
                              case "function":
                              case "symbol":
                                break a;
                              case "boolean":
                                if (attributeName = serverDifferences$jscomp$0.toLowerCase().slice(0, 5), "data-" !== attributeName && "aria-" !== attributeName)
                                  break a;
                            }
                            i = void 0 === i ? void 0 : null;
                          }
                        else
                          i = void 0;
                      attributes || warnForPropDifference(
                        value,
                        i,
                        propKey,
                        serverDifferences
                      );
                    }
                }
            }
        0 < extraAttributes.size && true !== props.suppressHydrationWarning && warnForExtraAttributes(domElement, extraAttributes, serverDifferences);
        return 0 === Object.keys(serverDifferences).length ? null : serverDifferences;
      }
      function propNamesListJoin(list, combinator) {
        switch (list.length) {
          case 0:
            return "";
          case 1:
            return list[0];
          case 2:
            return list[0] + " " + combinator + " " + list[1];
          default:
            return list.slice(0, -1).join(", ") + ", " + combinator + " " + list[list.length - 1];
        }
      }
      function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return 9 === rootContainerElement.nodeType ? rootContainerElement : rootContainerElement.ownerDocument;
      }
      function getOwnHostContext(namespaceURI) {
        switch (namespaceURI) {
          case SVG_NAMESPACE:
            return HostContextNamespaceSvg;
          case MATH_NAMESPACE:
            return HostContextNamespaceMath;
          default:
            return HostContextNamespaceNone;
        }
      }
      function getChildHostContextProd(parentNamespace, type) {
        if (parentNamespace === HostContextNamespaceNone)
          switch (type) {
            case "svg":
              return HostContextNamespaceSvg;
            case "math":
              return HostContextNamespaceMath;
            default:
              return HostContextNamespaceNone;
          }
        return parentNamespace === HostContextNamespaceSvg && "foreignObject" === type ? HostContextNamespaceNone : parentNamespace;
      }
      function shouldSetTextContent(type, props) {
        return "textarea" === type || "noscript" === type || "string" === typeof props.children || "number" === typeof props.children || "bigint" === typeof props.children || "object" === typeof props.dangerouslySetInnerHTML && null !== props.dangerouslySetInnerHTML && null != props.dangerouslySetInnerHTML.__html;
      }
      function shouldAttemptEagerTransition() {
        var event = window.event;
        if (event && "popstate" === event.type) {
          if (event === currentPopstateTransitionEvent)
            return false;
          currentPopstateTransitionEvent = event;
          return true;
        }
        currentPopstateTransitionEvent = null;
        return false;
      }
      function handleErrorInNextTick(error) {
        setTimeout(function() {
          throw error;
        });
      }
      function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node = suspenseInstance, depth = 0;
        do {
          var nextNode = node.nextSibling;
          parentInstance.removeChild(node);
          if (nextNode && 8 === nextNode.nodeType)
            if (node = nextNode.data, node === SUSPENSE_END_DATA) {
              if (0 === depth) {
                parentInstance.removeChild(nextNode);
                retryIfBlockedOn(suspenseInstance);
                return;
              }
              depth--;
            } else
              node !== SUSPENSE_START_DATA && node !== SUSPENSE_PENDING_START_DATA && node !== SUSPENSE_FALLBACK_START_DATA || depth++;
          node = nextNode;
        } while (node);
        retryIfBlockedOn(suspenseInstance);
      }
      function clearContainerSparingly(container) {
        var nextNode = container.firstChild;
        nextNode && 10 === nextNode.nodeType && (nextNode = nextNode.nextSibling);
        for (; nextNode; ) {
          var node = nextNode;
          nextNode = nextNode.nextSibling;
          switch (node.nodeName) {
            case "HTML":
            case "HEAD":
            case "BODY":
              clearContainerSparingly(node);
              detachDeletedInstance(node);
              continue;
            case "SCRIPT":
            case "STYLE":
              continue;
            case "LINK":
              if ("stylesheet" === node.rel.toLowerCase())
                continue;
          }
          container.removeChild(node);
        }
      }
      function canHydrateInstance(instance, type, props, inRootOrSingleton) {
        for (; 1 === instance.nodeType; ) {
          var anyProps = props;
          if (instance.nodeName.toLowerCase() !== type.toLowerCase()) {
            if (!inRootOrSingleton && ("INPUT" !== instance.nodeName || "hidden" !== instance.type))
              break;
          } else if (!inRootOrSingleton)
            if ("input" === type && "hidden" === instance.type) {
              checkAttributeStringCoercion(anyProps.name, "name");
              var name = null == anyProps.name ? null : "" + anyProps.name;
              if ("hidden" === anyProps.type && instance.getAttribute("name") === name)
                return instance;
            } else
              return instance;
          else if (!instance[internalHoistableMarker])
            switch (type) {
              case "meta":
                if (!instance.hasAttribute("itemprop"))
                  break;
                return instance;
              case "link":
                name = instance.getAttribute("rel");
                if ("stylesheet" === name && instance.hasAttribute("data-precedence"))
                  break;
                else if (name !== anyProps.rel || instance.getAttribute("href") !== (null == anyProps.href ? null : anyProps.href) || instance.getAttribute("crossorigin") !== (null == anyProps.crossOrigin ? null : anyProps.crossOrigin) || instance.getAttribute("title") !== (null == anyProps.title ? null : anyProps.title))
                  break;
                return instance;
              case "style":
                if (instance.hasAttribute("data-precedence"))
                  break;
                return instance;
              case "script":
                name = instance.getAttribute("src");
                if ((name !== (null == anyProps.src ? null : anyProps.src) || instance.getAttribute("type") !== (null == anyProps.type ? null : anyProps.type) || instance.getAttribute("crossorigin") !== (null == anyProps.crossOrigin ? null : anyProps.crossOrigin)) && name && instance.hasAttribute("async") && !instance.hasAttribute("itemprop"))
                  break;
                return instance;
              default:
                return instance;
            }
          instance = getNextHydratable(instance.nextSibling);
          if (null === instance)
            break;
        }
        return null;
      }
      function canHydrateTextInstance(instance, text, inRootOrSingleton) {
        if ("" === text)
          return null;
        for (; 3 !== instance.nodeType; ) {
          if ((1 !== instance.nodeType || "INPUT" !== instance.nodeName || "hidden" !== instance.type) && !inRootOrSingleton)
            return null;
          instance = getNextHydratable(instance.nextSibling);
          if (null === instance)
            return null;
        }
        return instance;
      }
      function getNextHydratable(node) {
        for (; null != node; node = node.nextSibling) {
          var nodeType = node.nodeType;
          if (1 === nodeType || 3 === nodeType)
            break;
          if (8 === nodeType) {
            nodeType = node.data;
            if (nodeType === SUSPENSE_START_DATA || nodeType === SUSPENSE_FALLBACK_START_DATA || nodeType === SUSPENSE_PENDING_START_DATA || nodeType === FORM_STATE_IS_MATCHING || nodeType === FORM_STATE_IS_NOT_MATCHING)
              break;
            if (nodeType === SUSPENSE_END_DATA)
              return null;
          }
        }
        return node;
      }
      function describeHydratableInstanceForDevWarnings(instance) {
        if (1 === instance.nodeType) {
          for (var JSCompiler_temp_const = instance.nodeName.toLowerCase(), serverDifferences = {}, attributes = instance.attributes, i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            serverDifferences[getPropNameFromAttributeName(attr.name)] = "style" === attr.name.toLowerCase() ? getStylesObjectFromElement(instance) : attr.value;
          }
          return { type: JSCompiler_temp_const, props: serverDifferences };
        }
        return 8 === instance.nodeType ? { type: "Suspense", props: {} } : instance.nodeValue;
      }
      function diffHydratedTextForDevWarnings(textInstance, text, parentProps) {
        return null === parentProps || true !== parentProps[SUPPRESS_HYDRATION_WARNING] ? (textInstance.nodeValue === text ? textInstance = null : (text = normalizeMarkupForTextOrAttribute(text), textInstance = normalizeMarkupForTextOrAttribute(textInstance.nodeValue) === text ? null : textInstance.nodeValue), textInstance) : null;
      }
      function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        suspenseInstance = suspenseInstance.nextSibling;
        for (var depth = 0; suspenseInstance; ) {
          if (8 === suspenseInstance.nodeType) {
            var data = suspenseInstance.data;
            if (data === SUSPENSE_END_DATA) {
              if (0 === depth)
                return getNextHydratable(suspenseInstance.nextSibling);
              depth--;
            } else
              data !== SUSPENSE_START_DATA && data !== SUSPENSE_FALLBACK_START_DATA && data !== SUSPENSE_PENDING_START_DATA || depth++;
          }
          suspenseInstance = suspenseInstance.nextSibling;
        }
        return null;
      }
      function getParentSuspenseInstance(targetInstance) {
        targetInstance = targetInstance.previousSibling;
        for (var depth = 0; targetInstance; ) {
          if (8 === targetInstance.nodeType) {
            var data = targetInstance.data;
            if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
              if (0 === depth)
                return targetInstance;
              depth--;
            } else
              data === SUSPENSE_END_DATA && depth++;
          }
          targetInstance = targetInstance.previousSibling;
        }
        return null;
      }
      function resolveSingletonInstance(type, props, rootContainerInstance, hostContext, validateDOMNestingDev) {
        validateDOMNestingDev && validateDOMNesting(type, hostContext.ancestorInfo);
        props = getOwnerDocumentFromRootContainer(rootContainerInstance);
        switch (type) {
          case "html":
            type = props.documentElement;
            if (!type)
              throw Error(
                "React expected an <html> element (document.documentElement) to exist in the Document but one was not found. React never removes the documentElement for any Document it renders into so the cause is likely in some other script running on this page."
              );
            return type;
          case "head":
            type = props.head;
            if (!type)
              throw Error(
                "React expected a <head> element (document.head) to exist in the Document but one was not found. React never removes the head for any Document it renders into so the cause is likely in some other script running on this page."
              );
            return type;
          case "body":
            type = props.body;
            if (!type)
              throw Error(
                "React expected a <body> element (document.body) to exist in the Document but one was not found. React never removes the body for any Document it renders into so the cause is likely in some other script running on this page."
              );
            return type;
          default:
            throw Error(
              "resolveSingletonInstance was called with an element type that is not supported. This is a bug in React."
            );
        }
      }
      function getHoistableRoot(container) {
        return "function" === typeof container.getRootNode ? container.getRootNode() : container.ownerDocument;
      }
      function preconnectAs(rel, href, crossOrigin) {
        var ownerDocument = globalDocument;
        if (ownerDocument && "string" === typeof href && href) {
          var limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);
          limitedEscapedHref = 'link[rel="' + rel + '"][href="' + limitedEscapedHref + '"]';
          "string" === typeof crossOrigin && (limitedEscapedHref += '[crossorigin="' + crossOrigin + '"]');
          preconnectsSet.has(limitedEscapedHref) || (preconnectsSet.add(limitedEscapedHref), rel = { rel, crossOrigin, href }, null === ownerDocument.querySelector(limitedEscapedHref) && (href = ownerDocument.createElement("link"), setInitialProperties(href, "link", rel), markNodeAsHoistable(href), ownerDocument.head.appendChild(href)));
        }
      }
      function getResource(type, currentProps, pendingProps, currentResource) {
        var resourceRoot = (resourceRoot = rootInstanceStackCursor.current) ? getHoistableRoot(resourceRoot) : null;
        if (!resourceRoot)
          throw Error(
            '"resourceRoot" was expected to exist. This is a bug in React.'
          );
        switch (type) {
          case "meta":
          case "title":
            return null;
          case "style":
            return "string" === typeof pendingProps.precedence && "string" === typeof pendingProps.href ? (pendingProps = getStyleKey(pendingProps.href), currentProps = getResourcesFromRoot(resourceRoot).hoistableStyles, currentResource = currentProps.get(pendingProps), currentResource || (currentResource = {
              type: "style",
              instance: null,
              count: 0,
              state: null
            }, currentProps.set(pendingProps, currentResource)), currentResource) : { type: "void", instance: null, count: 0, state: null };
          case "link":
            if ("stylesheet" === pendingProps.rel && "string" === typeof pendingProps.href && "string" === typeof pendingProps.precedence) {
              type = getStyleKey(pendingProps.href);
              var _styles = getResourcesFromRoot(resourceRoot).hoistableStyles, _resource = _styles.get(type);
              if (!_resource && (resourceRoot = resourceRoot.ownerDocument || resourceRoot, _resource = {
                type: "stylesheet",
                instance: null,
                count: 0,
                state: { loading: NotLoaded, preload: null }
              }, _styles.set(type, _resource), (_styles = resourceRoot.querySelector(
                getStylesheetSelectorFromKey(type)
              )) && !_styles._p && (_resource.instance = _styles, _resource.state.loading = Loaded | Inserted), !preloadPropsMap.has(type))) {
                var preloadProps = {
                  rel: "preload",
                  as: "style",
                  href: pendingProps.href,
                  crossOrigin: pendingProps.crossOrigin,
                  integrity: pendingProps.integrity,
                  media: pendingProps.media,
                  hrefLang: pendingProps.hrefLang,
                  referrerPolicy: pendingProps.referrerPolicy
                };
                preloadPropsMap.set(type, preloadProps);
                _styles || preloadStylesheet(
                  resourceRoot,
                  type,
                  preloadProps,
                  _resource.state
                );
              }
              if (currentProps && null === currentResource)
                throw pendingProps = "\n\n  - " + describeLinkForResourceErrorDEV(currentProps) + "\n  + " + describeLinkForResourceErrorDEV(pendingProps), Error(
                  "Expected <link> not to update to be updated to a stylesheet with precedence. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key." + pendingProps
                );
              return _resource;
            }
            if (currentProps && null !== currentResource)
              throw pendingProps = "\n\n  - " + describeLinkForResourceErrorDEV(currentProps) + "\n  + " + describeLinkForResourceErrorDEV(pendingProps), Error(
                "Expected stylesheet with precedence to not be updated to a different kind of <link>. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key." + pendingProps
              );
            return null;
          case "script":
            return currentProps = pendingProps.async, pendingProps = pendingProps.src, "string" === typeof pendingProps && currentProps && "function" !== typeof currentProps && "symbol" !== typeof currentProps ? (pendingProps = getScriptKey(pendingProps), currentProps = getResourcesFromRoot(resourceRoot).hoistableScripts, currentResource = currentProps.get(pendingProps), currentResource || (currentResource = {
              type: "script",
              instance: null,
              count: 0,
              state: null
            }, currentProps.set(pendingProps, currentResource)), currentResource) : { type: "void", instance: null, count: 0, state: null };
          default:
            throw Error(
              'getResource encountered a type it did not expect: "' + type + '". this is a bug in React.'
            );
        }
      }
      function describeLinkForResourceErrorDEV(props) {
        var describedProps = 0, description = "<link";
        "string" === typeof props.rel ? (describedProps++, description += ' rel="' + props.rel + '"') : hasOwnProperty.call(props, "rel") && (describedProps++, description += ' rel="' + (null === props.rel ? "null" : "invalid type " + typeof props.rel) + '"');
        "string" === typeof props.href ? (describedProps++, description += ' href="' + props.href + '"') : hasOwnProperty.call(props, "href") && (describedProps++, description += ' href="' + (null === props.href ? "null" : "invalid type " + typeof props.href) + '"');
        "string" === typeof props.precedence ? (describedProps++, description += ' precedence="' + props.precedence + '"') : hasOwnProperty.call(props, "precedence") && (describedProps++, description += " precedence={" + (null === props.precedence ? "null" : "invalid type " + typeof props.precedence) + "}");
        Object.getOwnPropertyNames(props).length > describedProps && (description += " ...");
        return description + " />";
      }
      function getStyleKey(href) {
        return 'href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"';
      }
      function getStylesheetSelectorFromKey(key) {
        return 'link[rel="stylesheet"][' + key + "]";
      }
      function stylesheetPropsFromRawProps(rawProps) {
        return assign({}, rawProps, {
          "data-precedence": rawProps.precedence,
          precedence: null
        });
      }
      function preloadStylesheet(ownerDocument, key, preloadProps, state) {
        ownerDocument.querySelector(
          'link[rel="preload"][as="style"][' + key + "]"
        ) ? state.loading = Loaded : (key = ownerDocument.createElement("link"), state.preload = key, key.addEventListener("load", function() {
          return state.loading |= Loaded;
        }), key.addEventListener("error", function() {
          return state.loading |= Errored;
        }), setInitialProperties(key, "link", preloadProps), markNodeAsHoistable(key), ownerDocument.head.appendChild(key));
      }
      function getScriptKey(src) {
        return '[src="' + escapeSelectorAttributeValueInsideDoubleQuotes(src) + '"]';
      }
      function getScriptSelectorFromKey(key) {
        return "script[async]" + key;
      }
      function acquireResource(hoistableRoot, resource, props) {
        resource.count++;
        if (null === resource.instance)
          switch (resource.type) {
            case "style":
              var instance = hoistableRoot.querySelector(
                'style[data-href~="' + escapeSelectorAttributeValueInsideDoubleQuotes(props.href) + '"]'
              );
              if (instance)
                return resource.instance = instance, markNodeAsHoistable(instance), instance;
              var styleProps = assign({}, props, {
                "data-href": props.href,
                "data-precedence": props.precedence,
                href: null,
                precedence: null
              });
              instance = (hoistableRoot.ownerDocument || hoistableRoot).createElement("style");
              markNodeAsHoistable(instance);
              setInitialProperties(instance, "style", styleProps);
              insertStylesheet(instance, props.precedence, hoistableRoot);
              return resource.instance = instance;
            case "stylesheet":
              styleProps = getStyleKey(props.href);
              var _instance = hoistableRoot.querySelector(
                getStylesheetSelectorFromKey(styleProps)
              );
              if (_instance)
                return resource.state.loading |= Inserted, resource.instance = _instance, markNodeAsHoistable(_instance), _instance;
              instance = stylesheetPropsFromRawProps(props);
              (styleProps = preloadPropsMap.get(styleProps)) && adoptPreloadPropsForStylesheet(instance, styleProps);
              _instance = (hoistableRoot.ownerDocument || hoistableRoot).createElement("link");
              markNodeAsHoistable(_instance);
              var linkInstance = _instance;
              linkInstance._p = new Promise(function(resolve, reject) {
                linkInstance.onload = resolve;
                linkInstance.onerror = reject;
              });
              setInitialProperties(_instance, "link", instance);
              resource.state.loading |= Inserted;
              insertStylesheet(_instance, props.precedence, hoistableRoot);
              return resource.instance = _instance;
            case "script":
              _instance = getScriptKey(props.src);
              if (styleProps = hoistableRoot.querySelector(
                getScriptSelectorFromKey(_instance)
              ))
                return resource.instance = styleProps, markNodeAsHoistable(styleProps), styleProps;
              instance = props;
              if (styleProps = preloadPropsMap.get(_instance))
                instance = assign({}, props), adoptPreloadPropsForScript(instance, styleProps);
              hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
              styleProps = hoistableRoot.createElement("script");
              markNodeAsHoistable(styleProps);
              setInitialProperties(styleProps, "link", instance);
              hoistableRoot.head.appendChild(styleProps);
              return resource.instance = styleProps;
            case "void":
              return null;
            default:
              throw Error(
                'acquireResource encountered a resource type it did not expect: "' + resource.type + '". this is a bug in React.'
              );
          }
        else
          "stylesheet" === resource.type && (resource.state.loading & Inserted) === NotLoaded && (instance = resource.instance, resource.state.loading |= Inserted, insertStylesheet(instance, props.precedence, hoistableRoot));
        return resource.instance;
      }
      function insertStylesheet(instance, precedence, root2) {
        for (var nodes = root2.querySelectorAll(
          'link[rel="stylesheet"][data-precedence],style[data-precedence]'
        ), last = nodes.length ? nodes[nodes.length - 1] : null, prior = last, i = 0; i < nodes.length; i++) {
          var node = nodes[i];
          if (node.dataset.precedence === precedence)
            prior = node;
          else if (prior !== last)
            break;
        }
        prior ? prior.parentNode.insertBefore(instance, prior.nextSibling) : (precedence = 9 === root2.nodeType ? root2.head : root2, precedence.insertBefore(instance, precedence.firstChild));
      }
      function adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps) {
        null == stylesheetProps.crossOrigin && (stylesheetProps.crossOrigin = preloadProps.crossOrigin);
        null == stylesheetProps.referrerPolicy && (stylesheetProps.referrerPolicy = preloadProps.referrerPolicy);
        null == stylesheetProps.title && (stylesheetProps.title = preloadProps.title);
      }
      function adoptPreloadPropsForScript(scriptProps, preloadProps) {
        null == scriptProps.crossOrigin && (scriptProps.crossOrigin = preloadProps.crossOrigin);
        null == scriptProps.referrerPolicy && (scriptProps.referrerPolicy = preloadProps.referrerPolicy);
        null == scriptProps.integrity && (scriptProps.integrity = preloadProps.integrity);
      }
      function getHydratableHoistableCache(type, keyAttribute, ownerDocument) {
        if (null === tagCaches) {
          var cache = /* @__PURE__ */ new Map();
          var caches = tagCaches = /* @__PURE__ */ new Map();
          caches.set(ownerDocument, cache);
        } else
          caches = tagCaches, cache = caches.get(ownerDocument), cache || (cache = /* @__PURE__ */ new Map(), caches.set(ownerDocument, cache));
        if (cache.has(type))
          return cache;
        cache.set(type, null);
        ownerDocument = ownerDocument.getElementsByTagName(type);
        for (caches = 0; caches < ownerDocument.length; caches++) {
          var node = ownerDocument[caches];
          if (!(node[internalHoistableMarker] || node[internalInstanceKey] || "link" === type && "stylesheet" === node.getAttribute("rel")) && node.namespaceURI !== SVG_NAMESPACE) {
            var nodeKey = node.getAttribute(keyAttribute) || "";
            nodeKey = type + nodeKey;
            var existing = cache.get(nodeKey);
            existing ? existing.push(node) : cache.set(nodeKey, [node]);
          }
        }
        return cache;
      }
      function mountHoistable(hoistableRoot, type, instance) {
        hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
        hoistableRoot.head.insertBefore(
          instance,
          "title" === type ? hoistableRoot.querySelector("head > title") : null
        );
      }
      function isHostHoistableType(type, props, hostContext) {
        var outsideHostContainerContext = !hostContext.ancestorInfo.containerTagInScope;
        if (hostContext.context === HostContextNamespaceSvg || null != props.itemProp)
          return !outsideHostContainerContext || null == props.itemProp || "meta" !== type && "title" !== type && "style" !== type && "link" !== type && "script" !== type || error$jscomp$0(
            "Cannot render a <%s> outside the main document if it has an `itemProp` prop. `itemProp` suggests the tag belongs to an `itemScope` which can appear anywhere in the DOM. If you were intending for React to hoist this <%s> remove the `itemProp` prop. Otherwise, try moving this tag into the <head> or <body> of the Document.",
            type,
            type
          ), false;
        switch (type) {
          case "meta":
          case "title":
            return true;
          case "style":
            if ("string" !== typeof props.precedence || "string" !== typeof props.href || "" === props.href) {
              outsideHostContainerContext && error$jscomp$0(
                'Cannot render a <style> outside the main document without knowing its precedence and a unique href key. React can hoist and deduplicate <style> tags if you provide a `precedence` prop along with an `href` prop that does not conflic with the `href` values used in any other hoisted <style> or <link rel="stylesheet" ...> tags.  Note that hoisting <style> tags is considered an advanced feature that most will not use directly. Consider moving the <style> tag to the <head> or consider adding a `precedence="default"` and `href="some unique resource identifier"`, or move the <style> to the <style> tag.'
              );
              break;
            }
            return true;
          case "link":
            if ("string" !== typeof props.rel || "string" !== typeof props.href || "" === props.href || props.onLoad || props.onError) {
              if ("stylesheet" === props.rel && "string" === typeof props.precedence) {
                type = props.href;
                var onError = props.onError, disabled = props.disabled;
                hostContext = [];
                props.onLoad && hostContext.push("`onLoad`");
                onError && hostContext.push("`onError`");
                null != disabled && hostContext.push("`disabled`");
                onError = propNamesListJoin(hostContext, "and");
                onError += 1 === hostContext.length ? " prop" : " props";
                disabled = 1 === hostContext.length ? "an " + onError : "the " + onError;
                hostContext.length && error$jscomp$0(
                  'React encountered a <link rel="stylesheet" href="%s" ... /> with a `precedence` prop that also included %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.',
                  type,
                  disabled,
                  onError
                );
              }
              outsideHostContainerContext && ("string" !== typeof props.rel || "string" !== typeof props.href || "" === props.href ? error$jscomp$0(
                "Cannot render a <link> outside the main document without a `rel` and `href` prop. Try adding a `rel` and/or `href` prop to this <link> or moving the link into the <head> tag"
              ) : (props.onError || props.onLoad) && error$jscomp$0(
                "Cannot render a <link> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."
              ));
              break;
            }
            switch (props.rel) {
              case "stylesheet":
                return type = props.precedence, props = props.disabled, "string" !== typeof type && outsideHostContainerContext && error$jscomp$0(
                  'Cannot render a <link rel="stylesheet" /> outside the main document without knowing its precedence. Consider adding precedence="default" or moving it into the root <head> tag.'
                ), "string" === typeof type && null == props;
              default:
                return true;
            }
          case "script":
            type = props.async && "function" !== typeof props.async && "symbol" !== typeof props.async;
            if (!type || props.onLoad || props.onError || !props.src || "string" !== typeof props.src) {
              outsideHostContainerContext && (type ? props.onLoad || props.onError ? error$jscomp$0(
                "Cannot render a <script> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."
              ) : error$jscomp$0(
                "Cannot render a <script> outside the main document without `async={true}` and a non-empty `src` prop. Ensure there is a valid `src` and either make the script async or move it into the root <head> tag or somewhere in the <body>."
              ) : error$jscomp$0(
                'Cannot render a sync or defer <script> outside the main document without knowing its order. Try adding async="" or moving it into the root <head> tag.'
              ));
              break;
            }
            return true;
          case "noscript":
          case "template":
            outsideHostContainerContext && error$jscomp$0(
              "Cannot render <%s> outside the main document. Try moving it into the root <head> tag.",
              type
            );
        }
        return false;
      }
      function preloadResource(resource) {
        return "stylesheet" === resource.type && (resource.state.loading & Settled) === NotLoaded ? false : true;
      }
      function noop3() {
      }
      function suspendResource(hoistableRoot, resource, props) {
        if (null === suspendedState)
          throw Error(
            "Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug."
          );
        var state = suspendedState;
        if ("stylesheet" === resource.type && ("string" !== typeof props.media || false !== matchMedia(props.media).matches) && (resource.state.loading & Inserted) === NotLoaded) {
          if (null === resource.instance) {
            var key = getStyleKey(props.href), instance = hoistableRoot.querySelector(
              getStylesheetSelectorFromKey(key)
            );
            if (instance) {
              hoistableRoot = instance._p;
              null !== hoistableRoot && "object" === typeof hoistableRoot && "function" === typeof hoistableRoot.then && (state.count++, state = onUnsuspend.bind(state), hoistableRoot.then(state, state));
              resource.state.loading |= Inserted;
              resource.instance = instance;
              markNodeAsHoistable(instance);
              return;
            }
            instance = hoistableRoot.ownerDocument || hoistableRoot;
            props = stylesheetPropsFromRawProps(props);
            (key = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(props, key);
            instance = instance.createElement("link");
            markNodeAsHoistable(instance);
            var linkInstance = instance;
            linkInstance._p = new Promise(function(resolve, reject) {
              linkInstance.onload = resolve;
              linkInstance.onerror = reject;
            });
            setInitialProperties(instance, "link", props);
            resource.instance = instance;
          }
          null === state.stylesheets && (state.stylesheets = /* @__PURE__ */ new Map());
          state.stylesheets.set(resource, hoistableRoot);
          (hoistableRoot = resource.state.preload) && (resource.state.loading & Settled) === NotLoaded && (state.count++, resource = onUnsuspend.bind(state), hoistableRoot.addEventListener("load", resource), hoistableRoot.addEventListener("error", resource));
        }
      }
      function waitForCommitToBeReady() {
        if (null === suspendedState)
          throw Error(
            "Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug."
          );
        var state = suspendedState;
        state.stylesheets && 0 === state.count && insertSuspendedStylesheets(state, state.stylesheets);
        return 0 < state.count ? function(commit) {
          var stylesheetTimer = setTimeout(function() {
            state.stylesheets && insertSuspendedStylesheets(state, state.stylesheets);
            if (state.unsuspend) {
              var unsuspend = state.unsuspend;
              state.unsuspend = null;
              unsuspend();
            }
          }, 6e4);
          state.unsuspend = commit;
          return function() {
            state.unsuspend = null;
            clearTimeout(stylesheetTimer);
          };
        } : null;
      }
      function onUnsuspend() {
        this.count--;
        if (0 === this.count) {
          if (this.stylesheets)
            insertSuspendedStylesheets(this, this.stylesheets);
          else if (this.unsuspend) {
            var unsuspend = this.unsuspend;
            this.unsuspend = null;
            unsuspend();
          }
        }
      }
      function insertSuspendedStylesheets(state, resources) {
        state.stylesheets = null;
        null !== state.unsuspend && (state.count++, precedencesByRoot = /* @__PURE__ */ new Map(), resources.forEach(insertStylesheetIntoRoot, state), precedencesByRoot = null, onUnsuspend.call(state));
      }
      function insertStylesheetIntoRoot(root2, resource) {
        if (!(resource.state.loading & Inserted)) {
          var precedences = precedencesByRoot.get(root2);
          if (precedences)
            var last = precedences.get(LAST_PRECEDENCE);
          else {
            precedences = /* @__PURE__ */ new Map();
            precedencesByRoot.set(root2, precedences);
            for (var nodes = root2.querySelectorAll(
              "link[data-precedence],style[data-precedence]"
            ), i = 0; i < nodes.length; i++) {
              var node = nodes[i];
              if ("link" === node.nodeName || "not all" !== node.getAttribute("media"))
                precedences.set(node.dataset.precedence, node), last = node;
            }
            last && precedences.set(LAST_PRECEDENCE, last);
          }
          nodes = resource.instance;
          node = nodes.getAttribute("data-precedence");
          i = precedences.get(node) || last;
          i === last && precedences.set(LAST_PRECEDENCE, nodes);
          precedences.set(node, nodes);
          this.count++;
          last = onUnsuspend.bind(this);
          nodes.addEventListener("load", last);
          nodes.addEventListener("error", last);
          i ? i.parentNode.insertBefore(nodes, i.nextSibling) : (root2 = 9 === root2.nodeType ? root2.head : root2, root2.insertBefore(nodes, root2.firstChild));
          resource.state.loading |= Inserted;
        }
      }
      function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, formState) {
        this.tag = 1;
        this.containerInfo = containerInfo;
        this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
        this.timeoutHandle = noTimeout;
        this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null;
        this.callbackPriority = 0;
        this.expirationTimes = createLaneMap(-1);
        this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.finishedLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
        this.entanglements = createLaneMap(0);
        this.hiddenUpdates = createLaneMap(null);
        this.identifierPrefix = identifierPrefix;
        this.onUncaughtError = onUncaughtError;
        this.onCaughtError = onCaughtError;
        this.onRecoverableError = onRecoverableError;
        this.pooledCache = null;
        this.pooledCacheLanes = 0;
        this.formState = formState;
        this.incompleteTransitions = /* @__PURE__ */ new Map();
        this.passiveEffectDuration = this.effectDuration = 0;
        this.memoizedUpdaters = /* @__PURE__ */ new Set();
        containerInfo = this.pendingUpdatersLaneMap = [];
        for (tag = 0; tag < TotalLanes; tag++)
          containerInfo.push(/* @__PURE__ */ new Set());
        this._debugRootType = hydrate ? "hydrateRoot()" : "createRoot()";
      }
      function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks, formState) {
        containerInfo = new FiberRootNode(
          containerInfo,
          tag,
          hydrate,
          identifierPrefix,
          onUncaughtError,
          onCaughtError,
          onRecoverableError,
          formState
        );
        tag = 1;
        true === isStrictMode && (tag |= 24);
        isDevToolsPresent && (tag |= 2);
        isStrictMode = createFiber(3, null, null, tag);
        containerInfo.current = isStrictMode;
        isStrictMode.stateNode = containerInfo;
        tag = createCache();
        retainCache(tag);
        containerInfo.pooledCache = tag;
        retainCache(tag);
        isStrictMode.memoizedState = {
          element: initialChildren,
          isDehydrated: hydrate,
          cache: tag
        };
        initializeUpdateQueue(isStrictMode);
        return containerInfo;
      }
      function getContextForSubtree(parentComponent) {
        if (!parentComponent)
          return emptyContextObject;
        parentComponent = emptyContextObject;
        return parentComponent;
      }
      function updateContainerSync(element, container, parentComponent, callback) {
        0 === container.tag && flushPassiveEffects();
        updateContainerImpl(
          container.current,
          SyncLane,
          element,
          container,
          parentComponent,
          callback
        );
        return SyncLane;
      }
      function updateContainerImpl(rootFiber, lane, element, container, parentComponent, callback) {
        if (injectedHook && "function" === typeof injectedHook.onScheduleFiberRoot)
          try {
            injectedHook.onScheduleFiberRoot(rendererID, container, element);
          } catch (err) {
            hasLoggedError || (hasLoggedError = true, error$jscomp$0(
              "React instrumentation encountered an error: %s",
              err
            ));
          }
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markRenderScheduled && injectedProfilingHooks.markRenderScheduled(lane);
        parentComponent = getContextForSubtree(parentComponent);
        null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
        isRendering && null !== current && !didWarnAboutNestedUpdates && (didWarnAboutNestedUpdates = true, error$jscomp$0(
          "Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.",
          getComponentNameFromFiber(current) || "Unknown"
        ));
        container = createUpdate(lane);
        container.payload = { element };
        callback = void 0 === callback ? null : callback;
        null !== callback && ("function" !== typeof callback && error$jscomp$0(
          "Expected the last optional `callback` argument to be a function. Instead received: %s.",
          callback
        ), container.callback = callback);
        element = enqueueUpdate(rootFiber, container, lane);
        null !== element && (scheduleUpdateOnFiber(element, rootFiber, lane), entangleTransitions(element, rootFiber, lane));
      }
      function markRetryLaneImpl(fiber, retryLane) {
        fiber = fiber.memoizedState;
        if (null !== fiber && null !== fiber.dehydrated) {
          var a = fiber.retryLane;
          fiber.retryLane = 0 !== a && a < retryLane ? a : retryLane;
        }
      }
      function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        (fiber = fiber.alternate) && markRetryLaneImpl(fiber, retryLane);
      }
      function attemptContinuousHydration(fiber) {
        if (13 === fiber.tag) {
          var lane = SelectiveHydrationLane, root2 = enqueueConcurrentRenderForLane(fiber, lane);
          null !== root2 && scheduleUpdateOnFiber(root2, fiber, lane);
          markRetryLaneIfNotHydrated(fiber, lane);
        }
      }
      function findHostInstanceByFiber(fiber) {
        fiber = findCurrentHostFiber(fiber);
        return null === fiber ? null : fiber.stateNode;
      }
      function emptyFindFiberByHostInstance() {
        return null;
      }
      function getCurrentFiberForDevTools() {
        return current;
      }
      function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var prevTransition = ReactSharedInternals.T;
        ReactSharedInternals.T = null;
        var previousPriority = ReactDOMSharedInternals.p;
        try {
          ReactDOMSharedInternals.p = DiscreteEventPriority, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
        }
      }
      function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var prevTransition = ReactSharedInternals.T;
        ReactSharedInternals.T = null;
        var previousPriority = ReactDOMSharedInternals.p;
        try {
          ReactDOMSharedInternals.p = ContinuousEventPriority, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
        }
      }
      function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (_enabled) {
          var blockedOn = findInstanceBlockingEvent(nativeEvent);
          if (null === blockedOn)
            dispatchEventForPluginEventSystem(
              domEventName,
              eventSystemFlags,
              nativeEvent,
              return_targetInst,
              targetContainer
            ), clearIfContinuousEvent(domEventName, nativeEvent);
          else if (queueIfContinuousEvent(
            blockedOn,
            domEventName,
            eventSystemFlags,
            targetContainer,
            nativeEvent
          ))
            nativeEvent.stopPropagation();
          else if (clearIfContinuousEvent(domEventName, nativeEvent), eventSystemFlags & 4 && -1 < discreteReplayableEvents.indexOf(domEventName)) {
            for (; null !== blockedOn; ) {
              var fiber = getInstanceFromNode(blockedOn);
              if (null !== fiber)
                switch (fiber.tag) {
                  case 3:
                    fiber = fiber.stateNode;
                    if (fiber.current.memoizedState.isDehydrated) {
                      var lanes = getHighestPriorityLanes(fiber.pendingLanes);
                      if (0 !== lanes) {
                        var root2 = fiber;
                        root2.pendingLanes |= SyncLane;
                        for (root2.entangledLanes |= SyncLane; lanes; ) {
                          var lane = 1 << 31 - clz32(lanes);
                          root2.entanglements[1] |= lane;
                          lanes &= ~lane;
                        }
                        ensureRootIsScheduled(fiber);
                        (executionContext & (RenderContext | CommitContext)) === NoContext && (workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS, flushSyncWorkOnAllRoots());
                      }
                    }
                    break;
                  case 13:
                    root2 = enqueueConcurrentRenderForLane(fiber, SyncLane), null !== root2 && scheduleUpdateOnFiber(root2, fiber, SyncLane), flushSyncWork$1(), markRetryLaneIfNotHydrated(fiber, SyncLane);
                }
              fiber = findInstanceBlockingEvent(nativeEvent);
              null === fiber && dispatchEventForPluginEventSystem(
                domEventName,
                eventSystemFlags,
                nativeEvent,
                return_targetInst,
                targetContainer
              );
              if (fiber === blockedOn)
                break;
              blockedOn = fiber;
            }
            null !== blockedOn && nativeEvent.stopPropagation();
          } else
            dispatchEventForPluginEventSystem(
              domEventName,
              eventSystemFlags,
              nativeEvent,
              null,
              targetContainer
            );
        }
      }
      function findInstanceBlockingEvent(nativeEvent) {
        nativeEvent = getEventTarget(nativeEvent);
        return findInstanceBlockingTarget(nativeEvent);
      }
      function findInstanceBlockingTarget(targetNode) {
        return_targetInst = null;
        targetNode = getClosestInstanceFromNode(targetNode);
        if (null !== targetNode) {
          var nearestMounted = getNearestMountedFiber(targetNode);
          if (null === nearestMounted)
            targetNode = null;
          else {
            var tag = nearestMounted.tag;
            if (13 === tag) {
              targetNode = getSuspenseInstanceFromFiber(nearestMounted);
              if (null !== targetNode)
                return targetNode;
              targetNode = null;
            } else if (3 === tag) {
              if (nearestMounted.stateNode.current.memoizedState.isDehydrated)
                return 3 === nearestMounted.tag ? nearestMounted.stateNode.containerInfo : null;
              targetNode = null;
            } else
              nearestMounted !== targetNode && (targetNode = null);
          }
        }
        return_targetInst = targetNode;
        return null;
      }
      function getEventPriority(domEventName) {
        switch (domEventName) {
          case "beforetoggle":
          case "cancel":
          case "click":
          case "close":
          case "contextmenu":
          case "copy":
          case "cut":
          case "auxclick":
          case "dblclick":
          case "dragend":
          case "dragstart":
          case "drop":
          case "focusin":
          case "focusout":
          case "input":
          case "invalid":
          case "keydown":
          case "keypress":
          case "keyup":
          case "mousedown":
          case "mouseup":
          case "paste":
          case "pause":
          case "play":
          case "pointercancel":
          case "pointerdown":
          case "pointerup":
          case "ratechange":
          case "reset":
          case "resize":
          case "seeked":
          case "submit":
          case "toggle":
          case "touchcancel":
          case "touchend":
          case "touchstart":
          case "volumechange":
          case "change":
          case "selectionchange":
          case "textInput":
          case "compositionstart":
          case "compositionend":
          case "compositionupdate":
          case "beforeblur":
          case "afterblur":
          case "beforeinput":
          case "blur":
          case "fullscreenchange":
          case "focus":
          case "hashchange":
          case "popstate":
          case "select":
          case "selectstart":
            return DiscreteEventPriority;
          case "drag":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "mousemove":
          case "mouseout":
          case "mouseover":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "scroll":
          case "touchmove":
          case "wheel":
          case "mouseenter":
          case "mouseleave":
          case "pointerenter":
          case "pointerleave":
            return ContinuousEventPriority;
          case "message":
            switch (getCurrentPriorityLevel()) {
              case ImmediatePriority:
                return DiscreteEventPriority;
              case UserBlockingPriority:
                return ContinuousEventPriority;
              case NormalPriority$1:
              case LowPriority:
                return DefaultEventPriority;
              case IdlePriority:
                return IdleEventPriority;
              default:
                return DefaultEventPriority;
            }
          default:
            return DefaultEventPriority;
        }
      }
      function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch (domEventName) {
          case "focusin":
          case "focusout":
            queuedFocus = null;
            break;
          case "dragenter":
          case "dragleave":
            queuedDrag = null;
            break;
          case "mouseover":
          case "mouseout":
            queuedMouse = null;
            break;
          case "pointerover":
          case "pointerout":
            queuedPointers.delete(nativeEvent.pointerId);
            break;
          case "gotpointercapture":
          case "lostpointercapture":
            queuedPointerCaptures.delete(nativeEvent.pointerId);
        }
      }
      function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (null === existingQueuedEvent || existingQueuedEvent.nativeEvent !== nativeEvent)
          return existingQueuedEvent = {
            blockedOn,
            domEventName,
            eventSystemFlags,
            nativeEvent,
            targetContainers: [targetContainer]
          }, null !== blockedOn && (blockedOn = getInstanceFromNode(blockedOn), null !== blockedOn && attemptContinuousHydration(blockedOn)), existingQueuedEvent;
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        blockedOn = existingQueuedEvent.targetContainers;
        null !== targetContainer && -1 === blockedOn.indexOf(targetContainer) && blockedOn.push(targetContainer);
        return existingQueuedEvent;
      }
      function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        switch (domEventName) {
          case "focusin":
            return queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(
              queuedFocus,
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            ), true;
          case "dragenter":
            return queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(
              queuedDrag,
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            ), true;
          case "mouseover":
            return queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(
              queuedMouse,
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            ), true;
          case "pointerover":
            var pointerId = nativeEvent.pointerId;
            queuedPointers.set(
              pointerId,
              accumulateOrCreateContinuousQueuedReplayableEvent(
                queuedPointers.get(pointerId) || null,
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent
              )
            );
            return true;
          case "gotpointercapture":
            return pointerId = nativeEvent.pointerId, queuedPointerCaptures.set(
              pointerId,
              accumulateOrCreateContinuousQueuedReplayableEvent(
                queuedPointerCaptures.get(pointerId) || null,
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent
              )
            ), true;
        }
        return false;
      }
      function attemptExplicitHydrationTarget(queuedTarget) {
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (null !== targetInst) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (null !== nearestMounted) {
            if (targetInst = nearestMounted.tag, 13 === targetInst) {
              if (targetInst = getSuspenseInstanceFromFiber(nearestMounted), null !== targetInst) {
                queuedTarget.blockedOn = targetInst;
                runWithPriority(queuedTarget.priority, function() {
                  if (13 === nearestMounted.tag) {
                    var lane = requestUpdateLane(nearestMounted), root2 = enqueueConcurrentRenderForLane(nearestMounted, lane);
                    null !== root2 && scheduleUpdateOnFiber(root2, nearestMounted, lane);
                    markRetryLaneIfNotHydrated(nearestMounted, lane);
                  }
                });
                return;
              }
            } else if (3 === targetInst && nearestMounted.stateNode.current.memoizedState.isDehydrated) {
              queuedTarget.blockedOn = 3 === nearestMounted.tag ? nearestMounted.stateNode.containerInfo : null;
              return;
            }
          }
        }
        queuedTarget.blockedOn = null;
      }
      function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (null !== queuedEvent.blockedOn)
          return false;
        for (var targetContainers = queuedEvent.targetContainers; 0 < targetContainers.length; ) {
          var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.nativeEvent);
          if (null === nextBlockedOn) {
            nextBlockedOn = queuedEvent.nativeEvent;
            var nativeEventClone = new nextBlockedOn.constructor(
              nextBlockedOn.type,
              nextBlockedOn
            ), event = nativeEventClone;
            null !== currentReplayingEvent && error$jscomp$0(
              "Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue."
            );
            currentReplayingEvent = event;
            nextBlockedOn.target.dispatchEvent(nativeEventClone);
            null === currentReplayingEvent && error$jscomp$0(
              "Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue."
            );
            currentReplayingEvent = null;
          } else
            return targetContainers = getInstanceFromNode(nextBlockedOn), null !== targetContainers && attemptContinuousHydration(targetContainers), queuedEvent.blockedOn = nextBlockedOn, false;
          targetContainers.shift();
        }
        return true;
      }
      function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        attemptReplayContinuousQueuedEvent(queuedEvent) && map.delete(key);
      }
      function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false;
        null !== queuedFocus && attemptReplayContinuousQueuedEvent(queuedFocus) && (queuedFocus = null);
        null !== queuedDrag && attemptReplayContinuousQueuedEvent(queuedDrag) && (queuedDrag = null);
        null !== queuedMouse && attemptReplayContinuousQueuedEvent(queuedMouse) && (queuedMouse = null);
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
      }
      function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null, hasScheduledReplayAttempt || (hasScheduledReplayAttempt = true, Scheduler.unstable_scheduleCallback(
          Scheduler.unstable_NormalPriority,
          replayUnblockedEvents
        )));
      }
      function scheduleReplayQueueIfNeeded(formReplayingQueue) {
        lastScheduledReplayQueue !== formReplayingQueue && (lastScheduledReplayQueue = formReplayingQueue, Scheduler.unstable_scheduleCallback(
          Scheduler.unstable_NormalPriority,
          function() {
            lastScheduledReplayQueue === formReplayingQueue && (lastScheduledReplayQueue = null);
            for (var i = 0; i < formReplayingQueue.length; i += 3) {
              var form = formReplayingQueue[i], submitterOrAction = formReplayingQueue[i + 1], formData = formReplayingQueue[i + 2];
              if ("function" !== typeof submitterOrAction)
                if (null === findInstanceBlockingTarget(submitterOrAction || form))
                  continue;
                else
                  break;
              var formInst = getInstanceFromNode(form);
              null !== formInst && (formReplayingQueue.splice(i, 3), i -= 3, form = {
                pending: true,
                data: formData,
                method: form.method,
                action: submitterOrAction
              }, Object.freeze(form), startHostTransition(
                formInst,
                form,
                submitterOrAction,
                formData
              ));
            }
          }
        ));
      }
      function retryIfBlockedOn(unblocked) {
        function unblock(queuedEvent) {
          return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
        }
        null !== queuedFocus && scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        null !== queuedDrag && scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        null !== queuedMouse && scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for (var i = 0; i < queuedExplicitHydrationTargets.length; i++) {
          var queuedTarget = queuedExplicitHydrationTargets[i];
          queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null);
        }
        for (; 0 < queuedExplicitHydrationTargets.length && (i = queuedExplicitHydrationTargets[0], null === i.blockedOn); )
          attemptExplicitHydrationTarget(i), null === i.blockedOn && queuedExplicitHydrationTargets.shift();
        i = (unblocked.ownerDocument || unblocked).$$reactFormReplay;
        if (null != i)
          for (queuedTarget = 0; queuedTarget < i.length; queuedTarget += 3) {
            var form = i[queuedTarget], submitterOrAction = i[queuedTarget + 1], formProps = form[internalPropsKey] || null;
            if ("function" === typeof submitterOrAction)
              formProps || scheduleReplayQueueIfNeeded(i);
            else if (formProps) {
              var action = null;
              if (submitterOrAction && submitterOrAction.hasAttribute("formAction"))
                if (form = submitterOrAction, formProps = submitterOrAction[internalPropsKey] || null)
                  action = formProps.formAction;
                else {
                  if (null !== findInstanceBlockingTarget(form))
                    continue;
                }
              else
                action = formProps.action;
              "function" === typeof action ? i[queuedTarget + 1] = action : (i.splice(queuedTarget, 3), queuedTarget -= 3);
              scheduleReplayQueueIfNeeded(i);
            }
          }
      }
      function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      function warnIfReactDOMContainerInDEV(container) {
        container[internalContainerInstanceKey] && (container._reactRootContainer ? error$jscomp$0(
          "You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported."
        ) : error$jscomp$0(
          "You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it."
        ));
      }
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
      var React = require_react(), Scheduler = require_scheduler(), ReactDOM = require_react_dom(), ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, suppressWarning = false, supportsCreateTask = !!console.createTask, REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element"), REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy");
      Symbol.for("react.scope");
      Symbol.for("react.debug_trace_mode");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      Symbol.for("react.legacy_hidden");
      Symbol.for("react.tracing_marker");
      var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel"), REACT_POSTPONE_TYPE = Symbol.for("react.postpone"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, ASYNC_ITERATOR = Symbol.asyncIterator, REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), assign = Object.assign, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      disabledLog.__reactDisabledLog = true;
      var prefix, reentry = false;
      var componentFrameCache = new ("function" === typeof WeakMap ? WeakMap : Map)();
      var externalRegExp = /\/node_modules\/|\(<anonymous>\)/, callComponentFrame = null, callIteratorFrame = null, callLazyInitFrame = null, current = null, isRendering = false, isArrayImpl = Array.isArray, ReactDOMSharedInternals = ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, NotPending = Object.freeze({
        pending: false,
        data: null,
        method: null,
        action: null
      }), valueStack = [];
      var fiberStack = [];
      var index$jscomp$0 = -1, contextStackCursor = createCursor(null), contextFiberStackCursor = createCursor(null), rootInstanceStackCursor = createCursor(null), hostTransitionProviderCursor = createCursor(null), HostTransitionContext = {
        $$typeof: REACT_CONTEXT_TYPE,
        Provider: null,
        Consumer: null,
        _currentValue: null,
        _currentValue2: null,
        _threadCount: 0
      }, hasOwnProperty = Object.prototype.hasOwnProperty, scheduleCallback$3 = Scheduler.unstable_scheduleCallback, cancelCallback$1 = Scheduler.unstable_cancelCallback, shouldYield = Scheduler.unstable_shouldYield, requestPaint = Scheduler.unstable_requestPaint, now$1 = Scheduler.unstable_now, getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, ImmediatePriority = Scheduler.unstable_ImmediatePriority, UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, NormalPriority$1 = Scheduler.unstable_NormalPriority, LowPriority = Scheduler.unstable_LowPriority, IdlePriority = Scheduler.unstable_IdlePriority, log$1 = Scheduler.log, unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue, rendererID = null, injectedHook = null, injectedProfilingHooks = null, hasLoggedError = false, isDevToolsPresent = "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__, clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2, TotalLanes = 31, SyncHydrationLane = 1, SyncLane = 2, InputContinuousHydrationLane = 4, InputContinuousLane = 8, DefaultHydrationLane = 16, DefaultLane = 32, SyncUpdateLanes = SyncLane | InputContinuousLane | DefaultLane, TransitionHydrationLane = 64, TransitionLanes = 4194176, RetryLanes = 62914560, SelectiveHydrationLane = 67108864, IdleHydrationLane = 134217728, IdleLane = 268435456, OffscreenLane = 536870912, DeferredLane = 1073741824, UpdateLanes = SyncLane | InputContinuousLane | DefaultLane | TransitionLanes, nextTransitionLane = 128, nextRetryLane = 4194304, DiscreteEventPriority = SyncLane, ContinuousEventPriority = InputContinuousLane, DefaultEventPriority = DefaultLane, IdleEventPriority = IdleLane, randomKey = Math.random().toString(36).slice(2), internalInstanceKey = "__reactFiber$" + randomKey, internalPropsKey = "__reactProps$" + randomKey, internalContainerInstanceKey = "__reactContainer$" + randomKey, internalEventHandlersKey = "__reactEvents$" + randomKey, internalEventHandlerListenersKey = "__reactListeners$" + randomKey, internalEventHandlesSetKey = "__reactHandles$" + randomKey, internalRootNodeResourcesKey = "__reactResources$" + randomKey, internalHoistableMarker = "__reactMarker$" + randomKey, allNativeEvents = /* @__PURE__ */ new Set(), registrationNameDependencies = {}, possibleRegistrationNames = {}, canUseDOM = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
      }, VALID_ATTRIBUTE_NAME_REGEX = RegExp(
        "^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
      ), illegalAttributeNameCache = {}, validatedAttributeNameCache = {}, escapeSelectorAttributeValueInsideDoubleQuotesRegex = /[\n"\\]/g, didWarnValueDefaultValue$1 = false, didWarnCheckedDefaultChecked = false, didWarnSelectedSetOnOption = false, didWarnInvalidChild = false, didWarnInvalidInnerHTML = false;
      var didWarnValueDefaultValue = false;
      var valuePropNames = ["value", "defaultValue"], didWarnValDefaultVal = false, specialTags = "address applet area article aside base basefont bgsound blockquote body br button caption center col colgroup dd details dir div dl dt embed fieldset figcaption figure footer form frame frameset h1 h2 h3 h4 h5 h6 head header hgroup hr html iframe img input isindex li link listing main marquee menu menuitem meta nav noembed noframes noscript object ol p param plaintext pre script section select source style summary table tbody td template textarea tfoot th thead title tr track ul wbr xmp".split(
        " "
      ), inScopeTags = "applet caption html table td th marquee object template foreignObject desc title".split(
        " "
      ), buttonScopeTags = inScopeTags.concat(["button"]), impliedEndTags = "dd dt li option optgroup p rp rt".split(" "), emptyAncestorInfoDev = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null,
        containerTagInScope: null
      }, didWarn = {}, MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML", SVG_NAMESPACE = "http://www.w3.org/2000/svg", shorthandToLonghand = {
        animation: "animationDelay animationDirection animationDuration animationFillMode animationIterationCount animationName animationPlayState animationTimingFunction".split(
          " "
        ),
        background: "backgroundAttachment backgroundClip backgroundColor backgroundImage backgroundOrigin backgroundPositionX backgroundPositionY backgroundRepeat backgroundSize".split(
          " "
        ),
        backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
        border: "borderBottomColor borderBottomStyle borderBottomWidth borderImageOutset borderImageRepeat borderImageSlice borderImageSource borderImageWidth borderLeftColor borderLeftStyle borderLeftWidth borderRightColor borderRightStyle borderRightWidth borderTopColor borderTopStyle borderTopWidth".split(
          " "
        ),
        borderBlockEnd: [
          "borderBlockEndColor",
          "borderBlockEndStyle",
          "borderBlockEndWidth"
        ],
        borderBlockStart: [
          "borderBlockStartColor",
          "borderBlockStartStyle",
          "borderBlockStartWidth"
        ],
        borderBottom: [
          "borderBottomColor",
          "borderBottomStyle",
          "borderBottomWidth"
        ],
        borderColor: [
          "borderBottomColor",
          "borderLeftColor",
          "borderRightColor",
          "borderTopColor"
        ],
        borderImage: [
          "borderImageOutset",
          "borderImageRepeat",
          "borderImageSlice",
          "borderImageSource",
          "borderImageWidth"
        ],
        borderInlineEnd: [
          "borderInlineEndColor",
          "borderInlineEndStyle",
          "borderInlineEndWidth"
        ],
        borderInlineStart: [
          "borderInlineStartColor",
          "borderInlineStartStyle",
          "borderInlineStartWidth"
        ],
        borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
        borderRadius: [
          "borderBottomLeftRadius",
          "borderBottomRightRadius",
          "borderTopLeftRadius",
          "borderTopRightRadius"
        ],
        borderRight: [
          "borderRightColor",
          "borderRightStyle",
          "borderRightWidth"
        ],
        borderStyle: [
          "borderBottomStyle",
          "borderLeftStyle",
          "borderRightStyle",
          "borderTopStyle"
        ],
        borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderWidth: [
          "borderBottomWidth",
          "borderLeftWidth",
          "borderRightWidth",
          "borderTopWidth"
        ],
        columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
        columns: ["columnCount", "columnWidth"],
        flex: ["flexBasis", "flexGrow", "flexShrink"],
        flexFlow: ["flexDirection", "flexWrap"],
        font: "fontFamily fontFeatureSettings fontKerning fontLanguageOverride fontSize fontSizeAdjust fontStretch fontStyle fontVariant fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition fontWeight lineHeight".split(
          " "
        ),
        fontVariant: "fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition".split(
          " "
        ),
        gap: ["columnGap", "rowGap"],
        grid: "gridAutoColumns gridAutoFlow gridAutoRows gridTemplateAreas gridTemplateColumns gridTemplateRows".split(
          " "
        ),
        gridArea: [
          "gridColumnEnd",
          "gridColumnStart",
          "gridRowEnd",
          "gridRowStart"
        ],
        gridColumn: ["gridColumnEnd", "gridColumnStart"],
        gridColumnGap: ["columnGap"],
        gridGap: ["columnGap", "rowGap"],
        gridRow: ["gridRowEnd", "gridRowStart"],
        gridRowGap: ["rowGap"],
        gridTemplate: [
          "gridTemplateAreas",
          "gridTemplateColumns",
          "gridTemplateRows"
        ],
        listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
        margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
        marker: ["markerEnd", "markerMid", "markerStart"],
        mask: "maskClip maskComposite maskImage maskMode maskOrigin maskPositionX maskPositionY maskRepeat maskSize".split(
          " "
        ),
        maskPosition: ["maskPositionX", "maskPositionY"],
        outline: ["outlineColor", "outlineStyle", "outlineWidth"],
        overflow: ["overflowX", "overflowY"],
        padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
        placeContent: ["alignContent", "justifyContent"],
        placeItems: ["alignItems", "justifyItems"],
        placeSelf: ["alignSelf", "justifySelf"],
        textDecoration: [
          "textDecorationColor",
          "textDecorationLine",
          "textDecorationStyle"
        ],
        textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
        transition: [
          "transitionDelay",
          "transitionDuration",
          "transitionProperty",
          "transitionTimingFunction"
        ],
        wordWrap: ["overflowWrap"]
      }, uppercasePattern = /([A-Z])/g, msPattern$1 = /^ms-/, badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = false, warnedForInfinityValue = false, unitlessNumbers = new Set(
        "animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(
          " "
        )
      ), aliases = /* @__PURE__ */ new Map([
        ["acceptCharset", "accept-charset"],
        ["htmlFor", "for"],
        ["httpEquiv", "http-equiv"],
        ["crossOrigin", "crossorigin"],
        ["accentHeight", "accent-height"],
        ["alignmentBaseline", "alignment-baseline"],
        ["arabicForm", "arabic-form"],
        ["baselineShift", "baseline-shift"],
        ["capHeight", "cap-height"],
        ["clipPath", "clip-path"],
        ["clipRule", "clip-rule"],
        ["colorInterpolation", "color-interpolation"],
        ["colorInterpolationFilters", "color-interpolation-filters"],
        ["colorProfile", "color-profile"],
        ["colorRendering", "color-rendering"],
        ["dominantBaseline", "dominant-baseline"],
        ["enableBackground", "enable-background"],
        ["fillOpacity", "fill-opacity"],
        ["fillRule", "fill-rule"],
        ["floodColor", "flood-color"],
        ["floodOpacity", "flood-opacity"],
        ["fontFamily", "font-family"],
        ["fontSize", "font-size"],
        ["fontSizeAdjust", "font-size-adjust"],
        ["fontStretch", "font-stretch"],
        ["fontStyle", "font-style"],
        ["fontVariant", "font-variant"],
        ["fontWeight", "font-weight"],
        ["glyphName", "glyph-name"],
        ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
        ["glyphOrientationVertical", "glyph-orientation-vertical"],
        ["horizAdvX", "horiz-adv-x"],
        ["horizOriginX", "horiz-origin-x"],
        ["imageRendering", "image-rendering"],
        ["letterSpacing", "letter-spacing"],
        ["lightingColor", "lighting-color"],
        ["markerEnd", "marker-end"],
        ["markerMid", "marker-mid"],
        ["markerStart", "marker-start"],
        ["overlinePosition", "overline-position"],
        ["overlineThickness", "overline-thickness"],
        ["paintOrder", "paint-order"],
        ["panose-1", "panose-1"],
        ["pointerEvents", "pointer-events"],
        ["renderingIntent", "rendering-intent"],
        ["shapeRendering", "shape-rendering"],
        ["stopColor", "stop-color"],
        ["stopOpacity", "stop-opacity"],
        ["strikethroughPosition", "strikethrough-position"],
        ["strikethroughThickness", "strikethrough-thickness"],
        ["strokeDasharray", "stroke-dasharray"],
        ["strokeDashoffset", "stroke-dashoffset"],
        ["strokeLinecap", "stroke-linecap"],
        ["strokeLinejoin", "stroke-linejoin"],
        ["strokeMiterlimit", "stroke-miterlimit"],
        ["strokeOpacity", "stroke-opacity"],
        ["strokeWidth", "stroke-width"],
        ["textAnchor", "text-anchor"],
        ["textDecoration", "text-decoration"],
        ["textRendering", "text-rendering"],
        ["transformOrigin", "transform-origin"],
        ["underlinePosition", "underline-position"],
        ["underlineThickness", "underline-thickness"],
        ["unicodeBidi", "unicode-bidi"],
        ["unicodeRange", "unicode-range"],
        ["unitsPerEm", "units-per-em"],
        ["vAlphabetic", "v-alphabetic"],
        ["vHanging", "v-hanging"],
        ["vIdeographic", "v-ideographic"],
        ["vMathematical", "v-mathematical"],
        ["vectorEffect", "vector-effect"],
        ["vertAdvY", "vert-adv-y"],
        ["vertOriginX", "vert-origin-x"],
        ["vertOriginY", "vert-origin-y"],
        ["wordSpacing", "word-spacing"],
        ["writingMode", "writing-mode"],
        ["xmlnsXlink", "xmlns:xlink"],
        ["xHeight", "x-height"]
      ]), possibleStandardNames = {
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        fetchpriority: "fetchPriority",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        inert: "inert",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        popover: "popover",
        popovertarget: "popoverTarget",
        popovertargetaction: "popoverTargetAction",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        transformorigin: "transformOrigin",
        "transform-origin": "transformOrigin",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      }, ariaProperties = {
        "aria-current": 0,
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        "aria-hidden": 0,
        "aria-invalid": 0,
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      }, warnedProperties$1 = {}, rARIA$1 = RegExp(
        "^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
      ), rARIACamel$1 = RegExp(
        "^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
      ), didWarnValueNull = false, warnedProperties = {}, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA = RegExp(
        "^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
      ), rARIACamel = RegExp(
        "^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
      ), isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i, currentReplayingEvent = null, restoreTarget = null, restoreQueue = null, isInsideEventHandler = false, passiveBrowserEventsSupported = false;
      if (canUseDOM)
        try {
          var options$jscomp$0 = {};
          Object.defineProperty(options$jscomp$0, "passive", {
            get: function() {
              passiveBrowserEventsSupported = true;
            }
          });
          window.addEventListener("test", options$jscomp$0, options$jscomp$0);
          window.removeEventListener("test", options$jscomp$0, options$jscomp$0);
        } catch (e) {
          passiveBrowserEventsSupported = false;
        }
      var root = null, startText = null, fallbackText = null, EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
      }, SyntheticEvent = createSyntheticEvent(EventInterface), UIEventInterface = assign({}, EventInterface, { view: 0, detail: 0 }), SyntheticUIEvent = createSyntheticEvent(UIEventInterface), lastMovementX, lastMovementY, lastMouseEvent, MouseEventInterface = assign({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
          return void 0 === event.relatedTarget ? event.fromElement === event.srcElement ? event.toElement : event.fromElement : event.relatedTarget;
        },
        movementX: function(event) {
          if ("movementX" in event)
            return event.movementX;
          event !== lastMouseEvent && (lastMouseEvent && "mousemove" === event.type ? (lastMovementX = event.screenX - lastMouseEvent.screenX, lastMovementY = event.screenY - lastMouseEvent.screenY) : lastMovementY = lastMovementX = 0, lastMouseEvent = event);
          return lastMovementX;
        },
        movementY: function(event) {
          return "movementY" in event ? event.movementY : lastMovementY;
        }
      }), SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface), DragEventInterface = assign({}, MouseEventInterface, { dataTransfer: 0 }), SyntheticDragEvent = createSyntheticEvent(DragEventInterface), FocusEventInterface = assign({}, UIEventInterface, { relatedTarget: 0 }), SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface), AnimationEventInterface = assign({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      }), SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface), ClipboardEventInterface = assign({}, EventInterface, {
        clipboardData: function(event) {
          return "clipboardData" in event ? event.clipboardData : window.clipboardData;
        }
      }), SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface), CompositionEventInterface = assign({}, EventInterface, { data: 0 }), SyntheticCompositionEvent = createSyntheticEvent(
        CompositionEventInterface
      ), SyntheticInputEvent = SyntheticCompositionEvent, normalizeKey = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      }, translateToKey = {
        8: "Backspace",
        9: "Tab",
        12: "Clear",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        19: "Pause",
        20: "CapsLock",
        27: "Escape",
        32: " ",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "ArrowLeft",
        38: "ArrowUp",
        39: "ArrowRight",
        40: "ArrowDown",
        45: "Insert",
        46: "Delete",
        112: "F1",
        113: "F2",
        114: "F3",
        115: "F4",
        116: "F5",
        117: "F6",
        118: "F7",
        119: "F8",
        120: "F9",
        121: "F10",
        122: "F11",
        123: "F12",
        144: "NumLock",
        145: "ScrollLock",
        224: "Meta"
      }, modifierKeyToProp = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
      }, KeyboardEventInterface = assign({}, UIEventInterface, {
        key: function(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if ("Unidentified" !== key)
              return key;
          }
          return "keypress" === nativeEvent.type ? (nativeEvent = getEventCharCode(nativeEvent), 13 === nativeEvent ? "Enter" : String.fromCharCode(nativeEvent)) : "keydown" === nativeEvent.type || "keyup" === nativeEvent.type ? translateToKey[nativeEvent.keyCode] || "Unidentified" : "";
        },
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        charCode: function(event) {
          return "keypress" === event.type ? getEventCharCode(event) : 0;
        },
        keyCode: function(event) {
          return "keydown" === event.type || "keyup" === event.type ? event.keyCode : 0;
        },
        which: function(event) {
          return "keypress" === event.type ? getEventCharCode(event) : "keydown" === event.type || "keyup" === event.type ? event.keyCode : 0;
        }
      }), SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface), PointerEventInterface = assign({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
      }), SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface), TouchEventInterface = assign({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
      }), SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface), TransitionEventInterface = assign({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      }), SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface), WheelEventInterface = assign({}, MouseEventInterface, {
        deltaX: function(event) {
          return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
          return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        deltaMode: 0
      }), SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface), ToggleEventInterface = assign({}, EventInterface, {
        newState: 0,
        oldState: 0
      }), SyntheticToggleEvent = createSyntheticEvent(ToggleEventInterface), END_KEYCODES = [9, 13, 27, 32], START_KEYCODE = 229, canUseCompositionEvent = canUseDOM && "CompositionEvent" in window, documentMode = null;
      canUseDOM && "documentMode" in document && (documentMode = document.documentMode);
      var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode, useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && 8 < documentMode && 11 >= documentMode), SPACEBAR_CODE = 32, SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE), hasSpaceKeypress = false, isComposing = false, supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        "datetime-local": true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
      }, activeElement$1 = null, activeElementInst$1 = null, isInputEventSupported = false;
      canUseDOM && (isInputEventSupported = isEventSupported("input") && (!document.documentMode || 9 < document.documentMode));
      var objectIs = "function" === typeof Object.is ? Object.is : is, skipSelectionChangeEvent = canUseDOM && "documentMode" in document && 11 >= document.documentMode, activeElement = null, activeElementInst = null, lastSelection = null, mouseDown = false, vendorPrefixes = {
        animationend: makePrefixMap("Animation", "AnimationEnd"),
        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
        animationstart: makePrefixMap("Animation", "AnimationStart"),
        transitionrun: makePrefixMap("Transition", "TransitionRun"),
        transitionstart: makePrefixMap("Transition", "TransitionStart"),
        transitioncancel: makePrefixMap("Transition", "TransitionCancel"),
        transitionend: makePrefixMap("Transition", "TransitionEnd")
      }, prefixedEventNames = {}, style = {};
      canUseDOM && (style = document.createElement("div").style, "AnimationEvent" in window || (delete vendorPrefixes.animationend.animation, delete vendorPrefixes.animationiteration.animation, delete vendorPrefixes.animationstart.animation), "TransitionEvent" in window || delete vendorPrefixes.transitionend.transition);
      var ANIMATION_END = getVendorPrefixedEventName("animationend"), ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration"), ANIMATION_START = getVendorPrefixedEventName("animationstart"), TRANSITION_RUN = getVendorPrefixedEventName("transitionrun"), TRANSITION_START = getVendorPrefixedEventName("transitionstart"), TRANSITION_CANCEL = getVendorPrefixedEventName("transitioncancel"), TRANSITION_END = getVendorPrefixedEventName("transitionend"), topLevelEventsToReactNames = /* @__PURE__ */ new Map(), simpleEventPluginEvents = "abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll scrollEnd toggle touchMove waiting wheel".split(
        " "
      ), OffscreenVisible = 1, OffscreenDetached = 2, OffscreenPassiveEffectsConnected = 4, concurrentQueues = [], concurrentQueuesIndex = 0, concurrentlyUpdatedLanes = 0, emptyContextObject = {};
      Object.freeze(emptyContextObject);
      var resolveFamily = null, failedBoundaries = null, ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function() {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function() {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
      }, pendingComponentWillMountWarnings = [], pendingUNSAFE_ComponentWillMountWarnings = [], pendingComponentWillReceivePropsWarnings = [], pendingUNSAFE_ComponentWillReceivePropsWarnings = [], pendingComponentWillUpdateWarnings = [], pendingUNSAFE_ComponentWillUpdateWarnings = [], didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
        didWarnAboutUnsafeLifecycles.has(fiber.type) || ("function" === typeof instance.componentWillMount && true !== instance.componentWillMount.__suppressDeprecationWarning && pendingComponentWillMountWarnings.push(fiber), fiber.mode & 8 && "function" === typeof instance.UNSAFE_componentWillMount && pendingUNSAFE_ComponentWillMountWarnings.push(fiber), "function" === typeof instance.componentWillReceiveProps && true !== instance.componentWillReceiveProps.__suppressDeprecationWarning && pendingComponentWillReceivePropsWarnings.push(fiber), fiber.mode & 8 && "function" === typeof instance.UNSAFE_componentWillReceiveProps && pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber), "function" === typeof instance.componentWillUpdate && true !== instance.componentWillUpdate.__suppressDeprecationWarning && pendingComponentWillUpdateWarnings.push(fiber), fiber.mode & 8 && "function" === typeof instance.UNSAFE_componentWillUpdate && pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber));
      };
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
        0 < pendingComponentWillMountWarnings.length && (pendingComponentWillMountWarnings.forEach(function(fiber) {
          componentWillMountUniqueNames.add(
            getComponentNameFromFiber(fiber) || "Component"
          );
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        }), pendingComponentWillMountWarnings = []);
        var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
        0 < pendingUNSAFE_ComponentWillMountWarnings.length && (pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
          UNSAFE_componentWillMountUniqueNames.add(
            getComponentNameFromFiber(fiber) || "Component"
          );
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        }), pendingUNSAFE_ComponentWillMountWarnings = []);
        var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
        0 < pendingComponentWillReceivePropsWarnings.length && (pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
          componentWillReceivePropsUniqueNames.add(
            getComponentNameFromFiber(fiber) || "Component"
          );
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        }), pendingComponentWillReceivePropsWarnings = []);
        var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
        0 < pendingUNSAFE_ComponentWillReceivePropsWarnings.length && (pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(
          function(fiber) {
            UNSAFE_componentWillReceivePropsUniqueNames.add(
              getComponentNameFromFiber(fiber) || "Component"
            );
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          }
        ), pendingUNSAFE_ComponentWillReceivePropsWarnings = []);
        var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
        0 < pendingComponentWillUpdateWarnings.length && (pendingComponentWillUpdateWarnings.forEach(function(fiber) {
          componentWillUpdateUniqueNames.add(
            getComponentNameFromFiber(fiber) || "Component"
          );
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        }), pendingComponentWillUpdateWarnings = []);
        var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
        0 < pendingUNSAFE_ComponentWillUpdateWarnings.length && (pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
          UNSAFE_componentWillUpdateUniqueNames.add(
            getComponentNameFromFiber(fiber) || "Component"
          );
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        }), pendingUNSAFE_ComponentWillUpdateWarnings = []);
        if (0 < UNSAFE_componentWillMountUniqueNames.size) {
          var sortedNames = setToSortedString(
            UNSAFE_componentWillMountUniqueNames
          );
          error$jscomp$0(
            "Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s",
            sortedNames
          );
        }
        0 < UNSAFE_componentWillReceivePropsUniqueNames.size && (sortedNames = setToSortedString(
          UNSAFE_componentWillReceivePropsUniqueNames
        ), error$jscomp$0(
          "Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n\nPlease update the following components: %s",
          sortedNames
        ));
        0 < UNSAFE_componentWillUpdateUniqueNames.size && (sortedNames = setToSortedString(
          UNSAFE_componentWillUpdateUniqueNames
        ), error$jscomp$0(
          "Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s",
          sortedNames
        ));
        0 < componentWillMountUniqueNames.size && (sortedNames = setToSortedString(componentWillMountUniqueNames), warn(
          "componentWillMount has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
          sortedNames
        ));
        0 < componentWillReceivePropsUniqueNames.size && (sortedNames = setToSortedString(
          componentWillReceivePropsUniqueNames
        ), warn(
          "componentWillReceiveProps has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
          sortedNames
        ));
        0 < componentWillUpdateUniqueNames.size && (sortedNames = setToSortedString(componentWillUpdateUniqueNames), warn(
          "componentWillUpdate has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
          sortedNames
        ));
      };
      var pendingLegacyContextWarning = /* @__PURE__ */ new Map(), didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
      ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
        var strictRoot = null;
        for (var node = fiber; null !== node; )
          node.mode & 8 && (strictRoot = node), node = node.return;
        null === strictRoot ? error$jscomp$0(
          "Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue."
        ) : !didWarnAboutLegacyContext.has(fiber.type) && (node = pendingLegacyContextWarning.get(strictRoot), null != fiber.type.contextTypes || null != fiber.type.childContextTypes || null !== instance && "function" === typeof instance.getChildContext) && (void 0 === node && (node = [], pendingLegacyContextWarning.set(strictRoot, node)), node.push(fiber));
      };
      ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray) {
          if (0 !== fiberArray.length) {
            var firstFiber = fiberArray[0], uniqueNames = /* @__PURE__ */ new Set();
            fiberArray.forEach(function(fiber) {
              uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            runWithFiberInDEV(firstFiber, function() {
              error$jscomp$0(
                "Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://react.dev/link/legacy-context",
                sortedNames
              );
            });
          }
        });
      };
      ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = /* @__PURE__ */ new Map();
      };
      var CapturedStacks = /* @__PURE__ */ new WeakMap(), forkStack = [], forkStackIndex = 0, treeForkProvider = null, treeForkCount = 0, idStack = [], idStackIndex = 0, treeContextProvider = null, treeContextId = 1, treeContextOverflow = "", maxRowLength = 120, idealDepth = 15, needsEscaping = /["'&<>\n\t]/, hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = false, didSuspendOrErrorDEV = false, hydrationDiffRootDEV = null, hydrationErrors = null, rootOrSingletonContext = false, HydrationMismatchException = Error(
        "Hydration Mismatch Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."
      ), SuspenseException = Error(
        "Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`"
      ), SuspenseyCommitException = Error(
        "Suspense Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."
      ), noopSuspenseyCommitThenable = {
        then: function() {
          error$jscomp$0(
            'Internal React error: A listener was unexpectedly attached to a "noop" thenable. This is a bug in React. Please file an issue.'
          );
        }
      }, suspendedThenable = null, needsToResetSuspendedThenableDEV = false, thenableState$1 = null, thenableIndexCounter$1 = 0, currentDebugInfo = null, didWarnAboutMaps;
      var didWarnAboutGenerators = didWarnAboutMaps = false;
      var ownerHasKeyUseWarning = {};
      var ownerHasFunctionTypeWarning = {};
      var ownerHasSymbolTypeWarning = {};
      warnForMissingKey = function(returnFiber, workInProgress2, child) {
        if (null !== child && "object" === typeof child && child._store && (!child._store.validated && null == child.key || 2 === child._store.validated)) {
          if ("object" !== typeof child._store)
            throw Error(
              "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue."
            );
          child._store.validated = 1;
          var componentName2 = getComponentNameFromFiber(returnFiber), componentKey = componentName2 || "null";
          if (!ownerHasKeyUseWarning[componentKey]) {
            ownerHasKeyUseWarning[componentKey] = true;
            child = child._owner;
            returnFiber = returnFiber._debugOwner;
            var currentComponentErrorInfo = "";
            returnFiber && "number" === typeof returnFiber.tag && (componentKey = getComponentNameFromFiber(returnFiber)) && (currentComponentErrorInfo = "\n\nCheck the render method of `" + componentKey + "`.");
            currentComponentErrorInfo || componentName2 && (currentComponentErrorInfo = "\n\nCheck the top-level render call using <" + componentName2 + ">.");
            var childOwnerAppendix = "";
            null != child && returnFiber !== child && (componentName2 = null, "number" === typeof child.tag ? componentName2 = getComponentNameFromFiber(child) : "string" === typeof child.name && (componentName2 = child.name), componentName2 && (childOwnerAppendix = " It was passed a child from " + componentName2 + "."));
            runWithFiberInDEV(workInProgress2, function() {
              error$jscomp$0(
                'Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.',
                currentComponentErrorInfo,
                childOwnerAppendix
              );
            });
          }
        }
      };
      var reconcileChildFibers = createChildReconciler(true), mountChildFibers = createChildReconciler(false), currentTreeHiddenStackCursor = createCursor(null), prevEntangledRenderLanesCursor = createCursor(0), suspenseHandlerStackCursor = createCursor(null), shellBoundary = null, SubtreeSuspenseContextMask = 1, ForceSuspenseFallback = 2, suspenseStackCursor = createCursor(0), NoFlags = 0, HasEffect = 1, Insertion = 2, Layout = 4, Passive = 8, AbortControllerLocal = "undefined" !== typeof AbortController ? AbortController : function() {
        var listeners = [], signal = this.signal = {
          aborted: false,
          addEventListener: function(type, listener) {
            listeners.push(listener);
          }
        };
        this.abort = function() {
          signal.aborted = true;
          listeners.forEach(function(listener) {
            return listener();
          });
        };
      }, scheduleCallback$2 = Scheduler.unstable_scheduleCallback, NormalPriority = Scheduler.unstable_NormalPriority, CacheContext = {
        $$typeof: REACT_CONTEXT_TYPE,
        Consumer: null,
        Provider: null,
        _currentValue: null,
        _currentValue2: null,
        _threadCount: 0,
        _currentRenderer: null,
        _currentRenderer2: null
      }, currentEntangledListeners = null, currentEntangledPendingCount = 0, currentEntangledLane = 0, currentEntangledActionThenable = null, prevOnStartTransitionFinish = ReactSharedInternals.S;
      ReactSharedInternals.S = function(transition, returnValue) {
        "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && entangleAsyncAction(transition, returnValue);
        null !== prevOnStartTransitionFinish && prevOnStartTransitionFinish(transition, returnValue);
      };
      var resumedCache = createCursor(null), didWarnUncachedGetSnapshot;
      var didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
      var didWarnAboutUseWrappedInTryCatch = /* @__PURE__ */ new Set();
      var didWarnAboutAsyncClientComponent = /* @__PURE__ */ new Set();
      var didWarnAboutUseFormState = /* @__PURE__ */ new Set();
      var renderLanes = 0, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, didScheduleRenderPhaseUpdate = false, didScheduleRenderPhaseUpdateDuringThisPass = false, shouldDoubleInvokeUserFnsInHooksDEV = false, localIdCounter = 0, thenableIndexCounter = 0, thenableState = null, globalClientIdCounter = 0, RE_RENDER_LIMIT = 25, currentHookNameInDev = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, ignorePreviousDependencies = false;
      var createFunctionComponentUpdateQueue = function() {
        return { lastEffect: null, events: null, stores: null, memoCache: null };
      };
      var ContextOnlyDispatcher = {
        readContext,
        use,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError
      };
      ContextOnlyDispatcher.useCacheRefresh = throwInvalidHookError;
      ContextOnlyDispatcher.useMemoCache = throwInvalidHookError;
      ContextOnlyDispatcher.useEffectEvent = throwInvalidHookError;
      ContextOnlyDispatcher.useHostTransitionStatus = throwInvalidHookError;
      ContextOnlyDispatcher.useFormState = throwInvalidHookError;
      ContextOnlyDispatcher.useActionState = throwInvalidHookError;
      ContextOnlyDispatcher.useOptimistic = throwInvalidHookError;
      var HooksDispatcherOnMountInDEV = null, HooksDispatcherOnMountWithHookTypesInDEV = null, HooksDispatcherOnUpdateInDEV = null, HooksDispatcherOnRerenderInDEV = null, InvalidNestedHooksDispatcherOnMountInDEV = null, InvalidNestedHooksDispatcherOnUpdateInDEV = null, InvalidNestedHooksDispatcherOnRerenderInDEV = null;
      HooksDispatcherOnMountInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        use,
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          mountHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, deps) {
          currentHookNameInDev = "useEffect";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          mountEffectImpl(4, Insertion, create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create, deps);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          mountHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          mountHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          mountHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useDebugValue: function() {
          currentHookNameInDev = "useDebugValue";
          mountHookTypesDev();
        },
        useDeferredValue: function(value, initialValue) {
          currentHookNameInDev = "useDeferredValue";
          mountHookTypesDev();
          return mountDeferredValue(value, initialValue);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          mountHookTypesDev();
          return mountTransition();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          mountHookTypesDev();
          return mountSyncExternalStore(
            subscribe,
            getSnapshot,
            getServerSnapshot
          );
        },
        useId: function() {
          currentHookNameInDev = "useId";
          mountHookTypesDev();
          return mountId();
        },
        useCacheRefresh: function() {
          currentHookNameInDev = "useCacheRefresh";
          mountHookTypesDev();
          return mountRefresh();
        }
      };
      HooksDispatcherOnMountInDEV.useMemoCache = useMemoCache;
      HooksDispatcherOnMountInDEV.useEffectEvent = function(callback) {
        currentHookNameInDev = "useEffectEvent";
        mountHookTypesDev();
        return mountEvent(callback);
      };
      HooksDispatcherOnMountInDEV.useHostTransitionStatus = useHostTransitionStatus;
      HooksDispatcherOnMountInDEV.useFormState = function(action, initialState) {
        currentHookNameInDev = "useFormState";
        mountHookTypesDev();
        return mountActionState(action, initialState);
      };
      HooksDispatcherOnMountInDEV.useActionState = function(action, initialState) {
        currentHookNameInDev = "useActionState";
        mountHookTypesDev();
        return mountActionState(action, initialState);
      };
      HooksDispatcherOnMountInDEV.useOptimistic = function(passthrough) {
        currentHookNameInDev = "useOptimistic";
        mountHookTypesDev();
        return mountOptimistic(passthrough);
      };
      HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        use,
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          updateHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, deps) {
          currentHookNameInDev = "useEffect";
          updateHookTypesDev();
          return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          updateHookTypesDev();
          return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          updateHookTypesDev();
          mountEffectImpl(4, Insertion, create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          updateHookTypesDev();
          return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create, deps);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          updateHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useDebugValue: function() {
          currentHookNameInDev = "useDebugValue";
          updateHookTypesDev();
        },
        useDeferredValue: function(value, initialValue) {
          currentHookNameInDev = "useDeferredValue";
          updateHookTypesDev();
          return mountDeferredValue(value, initialValue);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          updateHookTypesDev();
          return mountTransition();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          updateHookTypesDev();
          return mountSyncExternalStore(
            subscribe,
            getSnapshot,
            getServerSnapshot
          );
        },
        useId: function() {
          currentHookNameInDev = "useId";
          updateHookTypesDev();
          return mountId();
        },
        useCacheRefresh: function() {
          currentHookNameInDev = "useCacheRefresh";
          updateHookTypesDev();
          return mountRefresh();
        }
      };
      HooksDispatcherOnMountWithHookTypesInDEV.useMemoCache = useMemoCache;
      HooksDispatcherOnMountWithHookTypesInDEV.useEffectEvent = function(callback) {
        currentHookNameInDev = "useEffectEvent";
        updateHookTypesDev();
        return mountEvent(callback);
      };
      HooksDispatcherOnMountWithHookTypesInDEV.useHostTransitionStatus = useHostTransitionStatus;
      HooksDispatcherOnMountWithHookTypesInDEV.useFormState = function(action, initialState) {
        currentHookNameInDev = "useFormState";
        updateHookTypesDev();
        warnOnUseFormStateInDev();
        return mountActionState(action, initialState);
      };
      HooksDispatcherOnMountWithHookTypesInDEV.useActionState = function(action, initialState) {
        currentHookNameInDev = "useActionState";
        updateHookTypesDev();
        return mountActionState(action, initialState);
      };
      HooksDispatcherOnMountWithHookTypesInDEV.useOptimistic = function(passthrough) {
        currentHookNameInDev = "useOptimistic";
        updateHookTypesDev();
        return mountOptimistic(passthrough);
      };
      HooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        use,
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, deps) {
          currentHookNameInDev = "useEffect";
          updateHookTypesDev();
          updateEffectImpl(2048, Passive, create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          updateHookTypesDev();
          return updateEffectImpl(4, Insertion, create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          updateHookTypesDev();
          return updateEffectImpl(4, Layout, create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateReducer(reducer, initialArg, init);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useRef: function() {
          currentHookNameInDev = "useRef";
          updateHookTypesDev();
          return updateWorkInProgressHook().memoizedState;
        },
        useState: function() {
          currentHookNameInDev = "useState";
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateReducer(basicStateReducer);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useDebugValue: function() {
          currentHookNameInDev = "useDebugValue";
          updateHookTypesDev();
        },
        useDeferredValue: function(value, initialValue) {
          currentHookNameInDev = "useDeferredValue";
          updateHookTypesDev();
          return updateDeferredValue(value, initialValue);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          updateHookTypesDev();
          return updateTransition();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          updateHookTypesDev();
          return updateSyncExternalStore(
            subscribe,
            getSnapshot,
            getServerSnapshot
          );
        },
        useId: function() {
          currentHookNameInDev = "useId";
          updateHookTypesDev();
          return updateWorkInProgressHook().memoizedState;
        },
        useCacheRefresh: function() {
          currentHookNameInDev = "useCacheRefresh";
          updateHookTypesDev();
          return updateWorkInProgressHook().memoizedState;
        }
      };
      HooksDispatcherOnUpdateInDEV.useMemoCache = useMemoCache;
      HooksDispatcherOnUpdateInDEV.useEffectEvent = function(callback) {
        currentHookNameInDev = "useEffectEvent";
        updateHookTypesDev();
        return updateEvent(callback);
      };
      HooksDispatcherOnUpdateInDEV.useHostTransitionStatus = useHostTransitionStatus;
      HooksDispatcherOnUpdateInDEV.useFormState = function(action) {
        currentHookNameInDev = "useFormState";
        updateHookTypesDev();
        warnOnUseFormStateInDev();
        return updateActionState(action);
      };
      HooksDispatcherOnUpdateInDEV.useActionState = function(action) {
        currentHookNameInDev = "useActionState";
        updateHookTypesDev();
        return updateActionState(action);
      };
      HooksDispatcherOnUpdateInDEV.useOptimistic = function(passthrough, reducer) {
        currentHookNameInDev = "useOptimistic";
        updateHookTypesDev();
        return updateOptimistic(passthrough, reducer);
      };
      HooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        use,
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, deps) {
          currentHookNameInDev = "useEffect";
          updateHookTypesDev();
          updateEffectImpl(2048, Passive, create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          updateHookTypesDev();
          return updateEffectImpl(4, Insertion, create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          updateHookTypesDev();
          return updateEffectImpl(4, Layout, create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return rerenderReducer(reducer, initialArg, init);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useRef: function() {
          currentHookNameInDev = "useRef";
          updateHookTypesDev();
          return updateWorkInProgressHook().memoizedState;
        },
        useState: function() {
          currentHookNameInDev = "useState";
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return rerenderReducer(basicStateReducer);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useDebugValue: function() {
          currentHookNameInDev = "useDebugValue";
          updateHookTypesDev();
        },
        useDeferredValue: function(value, initialValue) {
          currentHookNameInDev = "useDeferredValue";
          updateHookTypesDev();
          return rerenderDeferredValue(value, initialValue);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          updateHookTypesDev();
          return rerenderTransition();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          updateHookTypesDev();
          return updateSyncExternalStore(
            subscribe,
            getSnapshot,
            getServerSnapshot
          );
        },
        useId: function() {
          currentHookNameInDev = "useId";
          updateHookTypesDev();
          return updateWorkInProgressHook().memoizedState;
        },
        useCacheRefresh: function() {
          currentHookNameInDev = "useCacheRefresh";
          updateHookTypesDev();
          return updateWorkInProgressHook().memoizedState;
        }
      };
      HooksDispatcherOnRerenderInDEV.useMemoCache = useMemoCache;
      HooksDispatcherOnRerenderInDEV.useEffectEvent = function(callback) {
        currentHookNameInDev = "useEffectEvent";
        updateHookTypesDev();
        return updateEvent(callback);
      };
      HooksDispatcherOnRerenderInDEV.useHostTransitionStatus = useHostTransitionStatus;
      HooksDispatcherOnRerenderInDEV.useFormState = function(action) {
        currentHookNameInDev = "useFormState";
        updateHookTypesDev();
        warnOnUseFormStateInDev();
        return rerenderActionState(action);
      };
      HooksDispatcherOnRerenderInDEV.useActionState = function(action) {
        currentHookNameInDev = "useActionState";
        updateHookTypesDev();
        return rerenderActionState(action);
      };
      HooksDispatcherOnRerenderInDEV.useOptimistic = function(passthrough, reducer) {
        currentHookNameInDev = "useOptimistic";
        updateHookTypesDev();
        return rerenderOptimistic(passthrough, reducer);
      };
      InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context) {
          warnInvalidContextAccess();
          return readContext(context);
        },
        use: function(usable) {
          warnInvalidHookAccess();
          return use(usable);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, deps) {
          currentHookNameInDev = "useEffect";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          warnInvalidHookAccess();
          mountHookTypesDev();
          mountEffectImpl(4, Insertion, create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create, deps);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useDebugValue: function() {
          currentHookNameInDev = "useDebugValue";
          warnInvalidHookAccess();
          mountHookTypesDev();
        },
        useDeferredValue: function(value, initialValue) {
          currentHookNameInDev = "useDeferredValue";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountDeferredValue(value, initialValue);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountTransition();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountSyncExternalStore(
            subscribe,
            getSnapshot,
            getServerSnapshot
          );
        },
        useId: function() {
          currentHookNameInDev = "useId";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountId();
        },
        useCacheRefresh: function() {
          currentHookNameInDev = "useCacheRefresh";
          mountHookTypesDev();
          return mountRefresh();
        },
        useMemoCache: function(size) {
          warnInvalidHookAccess();
          return useMemoCache(size);
        },
        useEffectEvent: function(callback) {
          currentHookNameInDev = "useEffectEvent";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountEvent(callback);
        }
      };
      InvalidNestedHooksDispatcherOnMountInDEV.useHostTransitionStatus = useHostTransitionStatus;
      InvalidNestedHooksDispatcherOnMountInDEV.useFormState = function(action, initialState) {
        currentHookNameInDev = "useFormState";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountActionState(action, initialState);
      };
      InvalidNestedHooksDispatcherOnMountInDEV.useActionState = function(action, initialState) {
        currentHookNameInDev = "useActionState";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountActionState(action, initialState);
      };
      InvalidNestedHooksDispatcherOnMountInDEV.useOptimistic = function(passthrough) {
        currentHookNameInDev = "useOptimistic";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountOptimistic(passthrough);
      };
      InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
          warnInvalidContextAccess();
          return readContext(context);
        },
        use: function(usable) {
          warnInvalidHookAccess();
          return use(usable);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, deps) {
          currentHookNameInDev = "useEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          updateEffectImpl(2048, Passive, create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEffectImpl(4, Insertion, create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEffectImpl(4, Layout, create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateReducer(reducer, initialArg, init);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useRef: function() {
          currentHookNameInDev = "useRef";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateWorkInProgressHook().memoizedState;
        },
        useState: function() {
          currentHookNameInDev = "useState";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateReducer(basicStateReducer);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useDebugValue: function() {
          currentHookNameInDev = "useDebugValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
        },
        useDeferredValue: function(value, initialValue) {
          currentHookNameInDev = "useDeferredValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateDeferredValue(value, initialValue);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateTransition();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateSyncExternalStore(
            subscribe,
            getSnapshot,
            getServerSnapshot
          );
        },
        useId: function() {
          currentHookNameInDev = "useId";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateWorkInProgressHook().memoizedState;
        },
        useCacheRefresh: function() {
          currentHookNameInDev = "useCacheRefresh";
          updateHookTypesDev();
          return updateWorkInProgressHook().memoizedState;
        },
        useMemoCache: function(size) {
          warnInvalidHookAccess();
          return useMemoCache(size);
        },
        useEffectEvent: function(callback) {
          currentHookNameInDev = "useEffectEvent";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEvent(callback);
        }
      };
      InvalidNestedHooksDispatcherOnUpdateInDEV.useHostTransitionStatus = useHostTransitionStatus;
      InvalidNestedHooksDispatcherOnUpdateInDEV.useFormState = function(action) {
        currentHookNameInDev = "useFormState";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateActionState(action);
      };
      InvalidNestedHooksDispatcherOnUpdateInDEV.useActionState = function(action) {
        currentHookNameInDev = "useActionState";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateActionState(action);
      };
      InvalidNestedHooksDispatcherOnUpdateInDEV.useOptimistic = function(passthrough, reducer) {
        currentHookNameInDev = "useOptimistic";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateOptimistic(passthrough, reducer);
      };
      InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
          warnInvalidContextAccess();
          return readContext(context);
        },
        use: function(usable) {
          warnInvalidHookAccess();
          return use(usable);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, deps) {
          currentHookNameInDev = "useEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          updateEffectImpl(2048, Passive, create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEffectImpl(4, Insertion, create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEffectImpl(4, Layout, create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return rerenderReducer(reducer, initialArg, init);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useRef: function() {
          currentHookNameInDev = "useRef";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateWorkInProgressHook().memoizedState;
        },
        useState: function() {
          currentHookNameInDev = "useState";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return rerenderReducer(basicStateReducer);
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        },
        useDebugValue: function() {
          currentHookNameInDev = "useDebugValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
        },
        useDeferredValue: function(value, initialValue) {
          currentHookNameInDev = "useDeferredValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return rerenderDeferredValue(value, initialValue);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return rerenderTransition();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateSyncExternalStore(
            subscribe,
            getSnapshot,
            getServerSnapshot
          );
        },
        useId: function() {
          currentHookNameInDev = "useId";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateWorkInProgressHook().memoizedState;
        },
        useCacheRefresh: function() {
          currentHookNameInDev = "useCacheRefresh";
          updateHookTypesDev();
          return updateWorkInProgressHook().memoizedState;
        },
        useMemoCache: function(size) {
          warnInvalidHookAccess();
          return useMemoCache(size);
        },
        useEffectEvent: function(callback) {
          currentHookNameInDev = "useEffectEvent";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEvent(callback);
        }
      };
      InvalidNestedHooksDispatcherOnRerenderInDEV.useHostTransitionStatus = useHostTransitionStatus;
      InvalidNestedHooksDispatcherOnRerenderInDEV.useFormState = function(action) {
        currentHookNameInDev = "useFormState";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return rerenderActionState(action);
      };
      InvalidNestedHooksDispatcherOnRerenderInDEV.useActionState = function(action) {
        currentHookNameInDev = "useActionState";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return rerenderActionState(action);
      };
      InvalidNestedHooksDispatcherOnRerenderInDEV.useOptimistic = function(passthrough, reducer) {
        currentHookNameInDev = "useOptimistic";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return rerenderOptimistic(passthrough, reducer);
      };
      var now = Scheduler.unstable_now, commitTime = 0, layoutEffectStartTime = -1, profilerStartTime = -1, passiveEffectStartTime = -1, currentUpdateIsNested = false, nestedUpdateScheduled = false, reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
        if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
          var event = new window.ErrorEvent("error", {
            bubbles: true,
            cancelable: true,
            message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
            error
          });
          if (!window.dispatchEvent(event))
            return;
        } else if ("object" === typeof process && "function" === typeof process.emit) {
          process.emit("uncaughtException", error);
          return;
        }
        console.error(error);
      }, componentName = null, errorBoundaryName = null, SelectiveHydrationException = Error(
        "This is not a real error. It's an implementation detail of React's selective hydration feature. If this leaks into userspace, it's a bug in React. Please file an issue."
      ), didReceiveUpdate = false;
      var didWarnAboutBadClass = {};
      var didWarnAboutContextTypeOnFunctionComponent = {};
      var didWarnAboutGetDerivedStateOnFunctionComponent = {};
      var didWarnAboutReassigningProps = false;
      var didWarnAboutRevealOrder = {};
      var didWarnAboutTailOptions = {};
      var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: 0
      }, hasWarnedAboutUsingNoValuePropOnContextProvider = false, valueCursor = createCursor(null);
      var rendererCursorDEV = createCursor(null);
      var rendererSigil = {};
      var currentlyRenderingFiber = null, lastContextDependency = null, lastFullyObservedContext = null, isDisallowedContextReadInDEV = false, UpdateState = 0, ReplaceState = 1, ForceUpdate = 2, CaptureUpdate = 3, hasForceUpdate = false;
      var didWarnUpdateInsideUpdate = false;
      var currentlyProcessingQueue = null;
      var didReadFromEntangledAsyncAction = false, fakeInternalInstance = {};
      var didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
      var didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
      var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
      var didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
      var didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
      var didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
      var didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
      var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
      Object.freeze(fakeInternalInstance);
      var classComponentUpdater = {
        isMounted: function(component) {
          var owner = current;
          if (null !== owner && isRendering && 1 === owner.tag) {
            var instance = owner.stateNode;
            instance._warnedAboutRefsInRender || error$jscomp$0(
              "%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",
              getComponentNameFromFiber(owner) || "A component"
            );
            instance._warnedAboutRefsInRender = true;
          }
          return (component = component._reactInternals) ? getNearestMountedFiber(component) === component : false;
        },
        enqueueSetState: function(inst, payload, callback) {
          inst = inst._reactInternals;
          var lane = requestUpdateLane(inst), update = createUpdate(lane);
          update.payload = payload;
          void 0 !== callback && null !== callback && (warnOnInvalidCallback(callback), update.callback = callback);
          payload = enqueueUpdate(inst, update, lane);
          null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
          markStateUpdateScheduled(inst, lane);
        },
        enqueueReplaceState: function(inst, payload, callback) {
          inst = inst._reactInternals;
          var lane = requestUpdateLane(inst), update = createUpdate(lane);
          update.tag = ReplaceState;
          update.payload = payload;
          void 0 !== callback && null !== callback && (warnOnInvalidCallback(callback), update.callback = callback);
          payload = enqueueUpdate(inst, update, lane);
          null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
          markStateUpdateScheduled(inst, lane);
        },
        enqueueForceUpdate: function(inst, callback) {
          inst = inst._reactInternals;
          var lane = requestUpdateLane(inst), update = createUpdate(lane);
          update.tag = ForceUpdate;
          void 0 !== callback && null !== callback && (warnOnInvalidCallback(callback), update.callback = callback);
          callback = enqueueUpdate(inst, update, lane);
          null !== callback && (scheduleUpdateOnFiber(callback, inst, lane), entangleTransitions(callback, inst, lane));
          null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markForceUpdateScheduled && injectedProfilingHooks.markForceUpdateScheduled(inst, lane);
        }
      }, didWarnAboutUndefinedSnapshotBeforeUpdate = null;
      didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
      var offscreenSubtreeIsHidden = false, offscreenSubtreeWasHidden = false, needsFormReset = false, PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set, nextEffect = null, inProgressLanes = null, inProgressRoot = null, shouldFireAfterActiveInstanceBlur = false, hostParent = null, hostParentIsContainer = false, currentHoistableRoot = null, suspenseyCommitFlag = 8192;
      var hasBadMapPolyfill = false;
      try {
        var nonExtensibleObject = Object.preventExtensions({});
        /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
        /* @__PURE__ */ new Set([nonExtensibleObject]);
      } catch (e$44) {
        hasBadMapPolyfill = true;
      }
      var DefaultAsyncDispatcher = {
        getCacheForType: function(resourceType) {
          var cache = readContext(CacheContext), cacheForType = cache.data.get(resourceType);
          void 0 === cacheForType && (cacheForType = resourceType(), cache.data.set(resourceType, cacheForType));
          return cacheForType;
        },
        getOwner: function() {
          return current;
        }
      };
      if ("function" === typeof Symbol && Symbol.for) {
        var symbolFor = Symbol.for;
        symbolFor("selector.component");
        symbolFor("selector.has_pseudo_class");
        symbolFor("selector.role");
        symbolFor("selector.test_id");
        symbolFor("selector.text");
      }
      var commitHooks = [], PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map, NoContext = 0, RenderContext = 2, CommitContext = 4, RootInProgress = 0, RootFatalErrored = 1, RootErrored = 2, RootSuspended = 3, RootSuspendedWithDelay = 4, RootCompleted = 5, RootDidNotComplete = 6, executionContext = NoContext, workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = 0, NotSuspended = 0, SuspendedOnError = 1, SuspendedOnData = 2, SuspendedOnImmediate = 3, SuspendedOnInstance = 4, SuspendedOnInstanceAndReadyToContinue = 5, SuspendedOnDeprecatedThrowPromise = 6, SuspendedAndReadyToContinue = 7, SuspendedOnHydration = 8, workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, workInProgressRootDidAttachPingListener = false, entangledRenderLanes = 0, workInProgressRootExitStatus = RootInProgress, workInProgressRootSkippedLanes = 0, workInProgressRootInterleavedUpdatedLanes = 0, workInProgressRootPingedLanes = 0, workInProgressDeferredLane = 0, workInProgressRootConcurrentErrors = null, workInProgressRootRecoverableErrors = null, workInProgressRootDidIncludeRecursiveRenderUpdate = false, didIncludeCommitPhaseUpdate = false, globalMostRecentFallbackTime = 0, FALLBACK_THROTTLE_MS = 300, workInProgressRootRenderTargetTime = Infinity, RENDER_TIMEOUT_MS = 500, workInProgressTransitions = null, legacyErrorBoundariesThatAlreadyFailed = null, rootDoesHavePassiveEffects = false, rootWithPendingPassiveEffects = null, pendingPassiveEffectsLanes = 0, pendingPassiveProfilerEffects = [], pendingPassiveEffectsRemainingLanes = 0, pendingPassiveTransitions = null, NESTED_UPDATE_LIMIT = 50, nestedUpdateCount = 0, rootWithNestedUpdates = null, isFlushingPassiveEffects = false, didScheduleUpdateDuringPassiveEffects = false, NESTED_PASSIVE_UPDATE_LIMIT = 50, nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, isRunningInsertionEffect = false, didWarnStateUpdateForNotYetMountedComponent = null, didWarnAboutUpdateInRender = false;
      var didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
      var fakeActCallbackNode$1 = {}, firstScheduledRoot = null, lastScheduledRoot = null, didScheduleMicrotask = false, didScheduleMicrotask_act = false, mightHavePendingSyncWork = false, isFlushingWork = false, currentEventTransitionLane = 0, fakeActCallbackNode = {};
      (function() {
        for (var i = 0; i < simpleEventPluginEvents.length; i++) {
          var eventName = simpleEventPluginEvents[i], domEventName = eventName.toLowerCase();
          eventName = eventName[0].toUpperCase() + eventName.slice(1);
          registerSimpleEvent(domEventName, "on" + eventName);
        }
        registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
        registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
        registerSimpleEvent(ANIMATION_START, "onAnimationStart");
        registerSimpleEvent("dblclick", "onDoubleClick");
        registerSimpleEvent("focusin", "onFocus");
        registerSimpleEvent("focusout", "onBlur");
        registerSimpleEvent(TRANSITION_RUN, "onTransitionRun");
        registerSimpleEvent(TRANSITION_START, "onTransitionStart");
        registerSimpleEvent(TRANSITION_CANCEL, "onTransitionCancel");
        registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
      })();
      registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
      registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
      registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
      registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
      registerTwoPhaseEvent(
        "onChange",
        "change click focusin focusout input keydown keyup selectionchange".split(
          " "
        )
      );
      registerTwoPhaseEvent(
        "onSelect",
        "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(
          " "
        )
      );
      registerTwoPhaseEvent("onBeforeInput", [
        "compositionend",
        "keypress",
        "textInput",
        "paste"
      ]);
      registerTwoPhaseEvent(
        "onCompositionEnd",
        "compositionend focusout keydown keypress keyup mousedown".split(" ")
      );
      registerTwoPhaseEvent(
        "onCompositionStart",
        "compositionstart focusout keydown keypress keyup mousedown".split(" ")
      );
      registerTwoPhaseEvent(
        "onCompositionUpdate",
        "compositionupdate focusout keydown keypress keyup mousedown".split(" ")
      );
      var mediaEventTypes = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(
        " "
      ), nonDelegatedEvents = new Set(
        "beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(mediaEventTypes)
      ), listeningMarker = "_reactListening" + Math.random().toString(36).slice(2), didWarnControlledToUncontrolled = false, didWarnUncontrolledToControlled = false, didWarnFormActionType = false, didWarnFormActionName = false, didWarnFormActionTarget = false, didWarnFormActionMethod = false, didWarnPopoverTargetObject = false;
      var didWarnForNewBooleanPropsWithEmptyValue = {};
      var canDiffStyleForHydrationWarning = true;
      var NORMALIZE_NEWLINES_REGEX = /\r\n?/g, NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g, xlinkNamespace = "http://www.w3.org/1999/xlink", xmlNamespace = "http://www.w3.org/XML/1998/namespace", EXPECTED_FORM_ACTION_URL = "javascript:throw new Error('React form unexpectedly submitted.')", SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning", SUSPENSE_START_DATA = "$", SUSPENSE_END_DATA = "/$", SUSPENSE_PENDING_START_DATA = "$?", SUSPENSE_FALLBACK_START_DATA = "$!", FORM_STATE_IS_MATCHING = "F!", FORM_STATE_IS_NOT_MATCHING = "F", STYLE = "style", HostContextNamespaceNone = 0, HostContextNamespaceSvg = 1, HostContextNamespaceMath = 2, eventsEnabled = null, selectionInformation = null, warnedUnknownTags = { dialog: true, webview: true }, currentPopstateTransitionEvent = null, scheduleTimeout = "function" === typeof setTimeout ? setTimeout : void 0, cancelTimeout = "function" === typeof clearTimeout ? clearTimeout : void 0, noTimeout = -1, localPromise = "function" === typeof Promise ? Promise : void 0, scheduleMicrotask = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof localPromise ? function(callback) {
        return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
      } : scheduleTimeout, NotLoaded = 0, Loaded = 1, Errored = 2, Settled = 3, Inserted = 4, preloadPropsMap = /* @__PURE__ */ new Map(), preconnectsSet = /* @__PURE__ */ new Set(), previousDispatcher = ReactDOMSharedInternals.d;
      ReactDOMSharedInternals.d = {
        f: function() {
          var previousWasRendering = previousDispatcher.f(), wasRendering = flushSyncWork$1();
          return previousWasRendering || wasRendering;
        },
        r: function(form) {
          var formInst = getInstanceFromNode(form);
          null !== formInst && 5 === formInst.tag && "form" === formInst.type ? requestFormReset$1(formInst) : previousDispatcher.r(form);
        },
        D: function(href) {
          previousDispatcher.D(href);
          preconnectAs("dns-prefetch", href, null);
        },
        C: function(href, crossOrigin) {
          previousDispatcher.C(href, crossOrigin);
          preconnectAs("preconnect", href, crossOrigin);
        },
        L: function(href, as, options) {
          previousDispatcher.L(href, as, options);
          var ownerDocument = globalDocument;
          if (ownerDocument && href && as) {
            var preloadSelector = 'link[rel="preload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as) + '"]';
            "image" === as ? options && options.imageSrcSet ? (preloadSelector += '[imagesrcset="' + escapeSelectorAttributeValueInsideDoubleQuotes(
              options.imageSrcSet
            ) + '"]', "string" === typeof options.imageSizes && (preloadSelector += '[imagesizes="' + escapeSelectorAttributeValueInsideDoubleQuotes(
              options.imageSizes
            ) + '"]')) : preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]' : preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]';
            var key = preloadSelector;
            switch (as) {
              case "style":
                key = getStyleKey(href);
                break;
              case "script":
                key = getScriptKey(href);
            }
            preloadPropsMap.has(key) || (href = assign(
              {
                rel: "preload",
                href: "image" === as && options && options.imageSrcSet ? void 0 : href,
                as
              },
              options
            ), preloadPropsMap.set(key, href), null !== ownerDocument.querySelector(preloadSelector) || "style" === as && ownerDocument.querySelector(
              getStylesheetSelectorFromKey(key)
            ) || "script" === as && ownerDocument.querySelector(getScriptSelectorFromKey(key)) || (as = ownerDocument.createElement("link"), setInitialProperties(as, "link", href), markNodeAsHoistable(as), ownerDocument.head.appendChild(as)));
          }
        },
        m: function(href, options) {
          previousDispatcher.m(href, options);
          var ownerDocument = globalDocument;
          if (ownerDocument && href) {
            var as = options && "string" === typeof options.as ? options.as : "script", preloadSelector = 'link[rel="modulepreload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as) + '"][href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]', key = preloadSelector;
            switch (as) {
              case "audioworklet":
              case "paintworklet":
              case "serviceworker":
              case "sharedworker":
              case "worker":
              case "script":
                key = getScriptKey(href);
            }
            if (!preloadPropsMap.has(key) && (href = assign({ rel: "modulepreload", href }, options), preloadPropsMap.set(key, href), null === ownerDocument.querySelector(preloadSelector))) {
              switch (as) {
                case "audioworklet":
                case "paintworklet":
                case "serviceworker":
                case "sharedworker":
                case "worker":
                case "script":
                  if (ownerDocument.querySelector(getScriptSelectorFromKey(key)))
                    return;
              }
              as = ownerDocument.createElement("link");
              setInitialProperties(as, "link", href);
              markNodeAsHoistable(as);
              ownerDocument.head.appendChild(as);
            }
          }
        },
        X: function(src, options) {
          previousDispatcher.X(src, options);
          var ownerDocument = globalDocument;
          if (ownerDocument && src) {
            var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts, key = getScriptKey(src), resource = scripts.get(key);
            resource || (resource = ownerDocument.querySelector(
              getScriptSelectorFromKey(key)
            ), resource || (src = assign({ src, async: true }, options), (options = preloadPropsMap.get(key)) && adoptPreloadPropsForScript(src, options), resource = ownerDocument.createElement("script"), markNodeAsHoistable(resource), setInitialProperties(resource, "link", src), ownerDocument.head.appendChild(resource)), resource = {
              type: "script",
              instance: resource,
              count: 1,
              state: null
            }, scripts.set(key, resource));
          }
        },
        S: function(href, precedence, options) {
          previousDispatcher.S(href, precedence, options);
          var ownerDocument = globalDocument;
          if (ownerDocument && href) {
            var styles = getResourcesFromRoot(ownerDocument).hoistableStyles, key = getStyleKey(href);
            precedence = precedence || "default";
            var resource = styles.get(key);
            if (!resource) {
              var state = { loading: NotLoaded, preload: null };
              if (resource = ownerDocument.querySelector(
                getStylesheetSelectorFromKey(key)
              ))
                state.loading = Loaded | Inserted;
              else {
                href = assign(
                  {
                    rel: "stylesheet",
                    href,
                    "data-precedence": precedence
                  },
                  options
                );
                (options = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(href, options);
                var link = resource = ownerDocument.createElement("link");
                markNodeAsHoistable(link);
                setInitialProperties(link, "link", href);
                link._p = new Promise(function(resolve, reject) {
                  link.onload = resolve;
                  link.onerror = reject;
                });
                link.addEventListener("load", function() {
                  state.loading |= Loaded;
                });
                link.addEventListener("error", function() {
                  state.loading |= Errored;
                });
                state.loading |= Inserted;
                insertStylesheet(resource, precedence, ownerDocument);
              }
              resource = {
                type: "stylesheet",
                instance: resource,
                count: 1,
                state
              };
              styles.set(key, resource);
            }
          }
        },
        M: function(src, options) {
          previousDispatcher.M(src, options);
          var ownerDocument = globalDocument;
          if (ownerDocument && src) {
            var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts, key = getScriptKey(src), resource = scripts.get(key);
            resource || (resource = ownerDocument.querySelector(
              getScriptSelectorFromKey(key)
            ), resource || (src = assign({ src, async: true, type: "module" }, options), (options = preloadPropsMap.get(key)) && adoptPreloadPropsForScript(src, options), resource = ownerDocument.createElement("script"), markNodeAsHoistable(resource), setInitialProperties(resource, "link", src), ownerDocument.head.appendChild(resource)), resource = {
              type: "script",
              instance: resource,
              count: 1,
              state: null
            }, scripts.set(key, resource));
          }
        }
      };
      var globalDocument = "undefined" === typeof document ? null : document, tagCaches = null, suspendedState = null, LAST_PRECEDENCE = null, precedencesByRoot = null, NotPendingTransition = NotPending, badgeFormat = "%c%s%c ", badgeStyle = "background: #e6e6e6;background: light-dark(rgba(0,0,0,0.1), rgba(255,255,255,0.25));color: #000000;color: light-dark(#000000, #ffffff);border-radius: 2px", resetStyle = "", pad = " ";
      var didWarnAboutNestedUpdates = false;
      var overrideHookState = null, overrideHookStateDeletePath = null, overrideHookStateRenamePath = null, overrideProps = null, overridePropsDeletePath = null, overridePropsRenamePath = null, scheduleUpdate = null, setErrorHandler = null, setSuspenseHandler = null;
      overrideHookState = function(fiber, id, path, value) {
        id = findHook(fiber, id);
        null !== id && (path = copyWithSetImpl(id.memoizedState, path, 0, value), id.memoizedState = path, id.baseState = path, fiber.memoizedProps = assign({}, fiber.memoizedProps), path = enqueueConcurrentRenderForLane(fiber, SyncLane), null !== path && scheduleUpdateOnFiber(path, fiber, SyncLane));
      };
      overrideHookStateDeletePath = function(fiber, id, path) {
        id = findHook(fiber, id);
        null !== id && (path = copyWithDeleteImpl(id.memoizedState, path, 0), id.memoizedState = path, id.baseState = path, fiber.memoizedProps = assign({}, fiber.memoizedProps), path = enqueueConcurrentRenderForLane(fiber, SyncLane), null !== path && scheduleUpdateOnFiber(path, fiber, SyncLane));
      };
      overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
        id = findHook(fiber, id);
        null !== id && (oldPath = copyWithRename(id.memoizedState, oldPath, newPath), id.memoizedState = oldPath, id.baseState = oldPath, fiber.memoizedProps = assign({}, fiber.memoizedProps), oldPath = enqueueConcurrentRenderForLane(fiber, SyncLane), null !== oldPath && scheduleUpdateOnFiber(oldPath, fiber, SyncLane));
      };
      overrideProps = function(fiber, path, value) {
        fiber.pendingProps = copyWithSetImpl(fiber.memoizedProps, path, 0, value);
        fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
        path = enqueueConcurrentRenderForLane(fiber, SyncLane);
        null !== path && scheduleUpdateOnFiber(path, fiber, SyncLane);
      };
      overridePropsDeletePath = function(fiber, path) {
        fiber.pendingProps = copyWithDeleteImpl(fiber.memoizedProps, path, 0);
        fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
        path = enqueueConcurrentRenderForLane(fiber, SyncLane);
        null !== path && scheduleUpdateOnFiber(path, fiber, SyncLane);
      };
      overridePropsRenamePath = function(fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(
          fiber.memoizedProps,
          oldPath,
          newPath
        );
        fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
        oldPath = enqueueConcurrentRenderForLane(fiber, SyncLane);
        null !== oldPath && scheduleUpdateOnFiber(oldPath, fiber, SyncLane);
      };
      scheduleUpdate = function(fiber) {
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        null !== root2 && scheduleUpdateOnFiber(root2, fiber, SyncLane);
      };
      setErrorHandler = function(newShouldErrorImpl) {
        shouldErrorImpl = newShouldErrorImpl;
      };
      setSuspenseHandler = function(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
      };
      var _enabled = true, return_targetInst = null, hasScheduledReplayAttempt = false, queuedFocus = null, queuedDrag = null, queuedMouse = null, queuedPointers = /* @__PURE__ */ new Map(), queuedPointerCaptures = /* @__PURE__ */ new Map(), queuedExplicitHydrationTargets = [], discreteReplayableEvents = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(
        " "
      ), lastScheduledReplayQueue = null;
      ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children, JSCompiler_OptimizeArgumentsArray_p2) {
        var root2 = this._internalRoot;
        if (null === root2)
          throw Error("Cannot update an unmounted root.");
        "function" === typeof JSCompiler_OptimizeArgumentsArray_p2 ? error$jscomp$0(
          "does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."
        ) : isValidContainer(JSCompiler_OptimizeArgumentsArray_p2) ? error$jscomp$0(
          "You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root."
        ) : "undefined" !== typeof JSCompiler_OptimizeArgumentsArray_p2 && error$jscomp$0(
          "You passed a second argument to root.render(...) but it only accepts one argument."
        );
        JSCompiler_OptimizeArgumentsArray_p2 = root2.current;
        var lane = requestUpdateLane(JSCompiler_OptimizeArgumentsArray_p2);
        updateContainerImpl(
          JSCompiler_OptimizeArgumentsArray_p2,
          lane,
          children,
          root2,
          null,
          null
        );
      };
      ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function(JSCompiler_OptimizeArgumentsArray_p3) {
        "function" === typeof JSCompiler_OptimizeArgumentsArray_p3 && error$jscomp$0(
          "does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."
        );
        JSCompiler_OptimizeArgumentsArray_p3 = this._internalRoot;
        if (null !== JSCompiler_OptimizeArgumentsArray_p3) {
          this._internalRoot = null;
          var container = JSCompiler_OptimizeArgumentsArray_p3.containerInfo;
          (executionContext & (RenderContext | CommitContext)) !== NoContext && error$jscomp$0(
            "Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition."
          );
          updateContainerSync(
            null,
            JSCompiler_OptimizeArgumentsArray_p3,
            null,
            null
          );
          flushSyncWork$1();
          container[internalContainerInstanceKey] = null;
        }
      };
      ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function(target) {
        if (target) {
          var updatePriority = resolveUpdatePriority();
          target = { blockedOn: null, target, priority: updatePriority };
          for (var i = 0; i < queuedExplicitHydrationTargets.length && 0 !== updatePriority && updatePriority < queuedExplicitHydrationTargets[i].priority; i++)
            ;
          queuedExplicitHydrationTargets.splice(i, 0, target);
          0 === i && attemptExplicitHydrationTarget(target);
        }
      };
      (function() {
        var isomorphicReactPackageVersion = React.version;
        if ("19.0.0-experimental-3da26163a3-20240704" !== isomorphicReactPackageVersion)
          throw Error(
            'Incompatible React versions: The "react" and "react-dom" packages must have the exact same version. Instead got:\n  - react:      ' + (isomorphicReactPackageVersion + "\n  - react-dom:  19.0.0-experimental-3da26163a3-20240704\nLearn more: https://react.dev/warnings/version-mismatch")
          );
      })();
      "function" === typeof Map && null != Map.prototype && "function" === typeof Map.prototype.forEach && "function" === typeof Set && null != Set.prototype && "function" === typeof Set.prototype.clear && "function" === typeof Set.prototype.forEach || error$jscomp$0(
        "React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://react.dev/link/react-polyfills"
      );
      ReactDOMSharedInternals.findDOMNode = function(componentOrElement) {
        var fiber = componentOrElement._reactInternals;
        if (void 0 === fiber) {
          if ("function" === typeof componentOrElement.render)
            throw Error("Unable to find node on an unmounted component.");
          componentOrElement = Object.keys(componentOrElement).join(",");
          throw Error(
            "Argument appears to not be a ReactComponent. Keys: " + componentOrElement
          );
        }
        componentOrElement = findCurrentHostFiber(fiber);
        componentOrElement = null === componentOrElement ? null : componentOrElement.stateNode;
        return componentOrElement;
      };
      if (!function(devToolsConfig) {
        return injectInternals({
          bundleType: devToolsConfig.bundleType,
          version: devToolsConfig.version,
          rendererPackageName: devToolsConfig.rendererPackageName,
          rendererConfig: devToolsConfig.rendererConfig,
          overrideHookState,
          overrideHookStateDeletePath,
          overrideHookStateRenamePath,
          overrideProps,
          overridePropsDeletePath,
          overridePropsRenamePath,
          setErrorHandler,
          setSuspenseHandler,
          scheduleUpdate,
          currentDispatcherRef: ReactSharedInternals,
          findHostInstanceByFiber,
          findFiberByHostInstance: devToolsConfig.findFiberByHostInstance || emptyFindFiberByHostInstance,
          findHostInstancesForRefresh,
          scheduleRefresh,
          scheduleRoot,
          setRefreshHandler,
          getCurrentFiber: getCurrentFiberForDevTools,
          reconcilerVersion: "19.0.0-experimental-3da26163a3-20240704"
        });
      }({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: "19.0.0-experimental-3da26163a3-20240704",
        rendererPackageName: "react-dom"
      }) && canUseDOM && window.top === window.self && (-1 < navigator.userAgent.indexOf("Chrome") && -1 === navigator.userAgent.indexOf("Edge") || -1 < navigator.userAgent.indexOf("Firefox"))) {
        var protocol = window.location.protocol;
        /^(https?|file):$/.test(protocol) && console.info(
          "%cDownload the React DevTools for a better development experience: https://react.dev/link/react-devtools" + ("file:" === protocol ? "\nYou might need to use a local HTTP server (instead of file://): https://react.dev/link/react-devtools-faq" : ""),
          "font-weight:bold"
        );
      }
      exports.createRoot = function(container, options) {
        if (!isValidContainer(container))
          throw Error("Target container is not a DOM element.");
        warnIfReactDOMContainerInDEV(container);
        var isStrictMode = false, identifierPrefix = "", onUncaughtError = defaultOnUncaughtError, onCaughtError = defaultOnCaughtError, onRecoverableError = defaultOnRecoverableError, transitionCallbacks = null;
        null !== options && void 0 !== options && (options.hydrate ? warn(
          "hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead."
        ) : "object" === typeof options && null !== options && options.$$typeof === REACT_ELEMENT_TYPE && error$jscomp$0(
          "You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);"
        ), true === options.unstable_strictMode && (isStrictMode = true), void 0 !== options.identifierPrefix && (identifierPrefix = options.identifierPrefix), void 0 !== options.onUncaughtError && (onUncaughtError = options.onUncaughtError), void 0 !== options.onCaughtError && (onCaughtError = options.onCaughtError), void 0 !== options.onRecoverableError && (onRecoverableError = options.onRecoverableError), void 0 !== options.unstable_transitionCallbacks && (transitionCallbacks = options.unstable_transitionCallbacks));
        options = createFiberRoot(
          container,
          1,
          false,
          null,
          null,
          isStrictMode,
          false,
          identifierPrefix,
          onUncaughtError,
          onCaughtError,
          onRecoverableError,
          transitionCallbacks,
          null
        );
        container[internalContainerInstanceKey] = options.current;
        listenToAllSupportedEvents(
          8 === container.nodeType ? container.parentNode : container
        );
        return new ReactDOMRoot(options);
      };
      exports.hydrateRoot = function(container, initialChildren, options) {
        if (!isValidContainer(container))
          throw Error("Target container is not a DOM element.");
        warnIfReactDOMContainerInDEV(container);
        void 0 === initialChildren && error$jscomp$0(
          "Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)"
        );
        var isStrictMode = false, identifierPrefix = "", onUncaughtError = defaultOnUncaughtError, onCaughtError = defaultOnCaughtError, onRecoverableError = defaultOnRecoverableError, transitionCallbacks = null, formState = null;
        null !== options && void 0 !== options && (true === options.unstable_strictMode && (isStrictMode = true), void 0 !== options.identifierPrefix && (identifierPrefix = options.identifierPrefix), void 0 !== options.onUncaughtError && (onUncaughtError = options.onUncaughtError), void 0 !== options.onCaughtError && (onCaughtError = options.onCaughtError), void 0 !== options.onRecoverableError && (onRecoverableError = options.onRecoverableError), void 0 !== options.unstable_transitionCallbacks && (transitionCallbacks = options.unstable_transitionCallbacks), void 0 !== options.formState && (formState = options.formState));
        initialChildren = createFiberRoot(
          container,
          1,
          true,
          initialChildren,
          null != options ? options : null,
          isStrictMode,
          false,
          identifierPrefix,
          onUncaughtError,
          onCaughtError,
          onRecoverableError,
          transitionCallbacks,
          formState
        );
        initialChildren.context = getContextForSubtree(null);
        options = initialChildren.current;
        isStrictMode = requestUpdateLane(options);
        identifierPrefix = createUpdate(isStrictMode);
        identifierPrefix.callback = null;
        enqueueUpdate(options, identifierPrefix, isStrictMode);
        initialChildren.current.lanes = isStrictMode;
        markRootUpdated(initialChildren, isStrictMode);
        ensureRootIsScheduled(initialChildren);
        container[internalContainerInstanceKey] = initialChildren.current;
        listenToAllSupportedEvents(container);
        return new ReactDOMHydrationRoot(initialChildren);
      };
      exports.version = "19.0.0-experimental-3da26163a3-20240704";
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
    })();
  }
});

// node_modules/react-dom/client.js
var require_client = __commonJS({
  "node_modules/react-dom/client.js"(exports, module) {
    "use strict";
    if (false) {
      checkDCE();
      module.exports = null;
    } else {
      module.exports = require_react_dom_client_development();
    }
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_SERVER_CONTEXT_TYPE:
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        var hasWarnedAboutDeprecatedIsConcurrentMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isConcurrentMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
              hasWarnedAboutDeprecatedIsConcurrentMode = true;
              console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        function isSuspenseList(object) {
          return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
        }
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.SuspenseList = SuspenseList;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isSuspenseList = isSuspenseList;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/react-devtools-inline/dist/frontend.js
var require_frontend = __commonJS({
  "node_modules/react-devtools-inline/dist/frontend.js"(exports, module) {
    (() => {
      var __webpack_modules__ = {
        /***/
        3496: (
          /***/
          (__unused_webpack_module, exports2, __webpack_require__2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.importFromOldV8CPUProfile = exports2.importFromChromeCPUProfile = exports2.importFromChromeTimeline = exports2.isChromeTimeline = void 0;
            const profile_1 = __webpack_require__2(2211);
            const utils_1 = __webpack_require__2(7844);
            const value_formatters_1 = __webpack_require__2(8218);
            const v8cpuFormatter_1 = __webpack_require__2(7320);
            function isChromeTimeline(rawProfile) {
              if (!Array.isArray(rawProfile))
                return false;
              if (rawProfile.length < 1)
                return false;
              const first = rawProfile[0];
              if (!("pid" in first && "tid" in first && "ph" in first && "cat" in first))
                return false;
              if (!rawProfile.find((e) => e.name === "CpuProfile" || e.name === "Profile" || e.name === "ProfileChunk"))
                return false;
              return true;
            }
            exports2.isChromeTimeline = isChromeTimeline;
            function importFromChromeTimeline(events, fileName) {
              const cpuProfileByID = /* @__PURE__ */ new Map();
              const pidTidById = /* @__PURE__ */ new Map();
              const threadNameByPidTid = /* @__PURE__ */ new Map();
              utils_1.sortBy(events, (e) => e.ts);
              for (let event of events) {
                if (event.name === "CpuProfile") {
                  const pidTid = `${event.pid}:${event.tid}`;
                  const id = event.id || pidTid;
                  cpuProfileByID.set(id, event.args.data.cpuProfile);
                  pidTidById.set(id, pidTid);
                }
                if (event.name === "Profile") {
                  const pidTid = `${event.pid}:${event.tid}`;
                  cpuProfileByID.set(event.id || pidTid, Object.assign({
                    startTime: 0,
                    endTime: 0,
                    nodes: [],
                    samples: [],
                    timeDeltas: []
                  }, event.args.data));
                  if (event.id) {
                    pidTidById.set(event.id, `${event.pid}:${event.tid}`);
                  }
                }
                if (event.name === "thread_name") {
                  threadNameByPidTid.set(`${event.pid}:${event.tid}`, event.args.name);
                }
                if (event.name === "ProfileChunk") {
                  const pidTid = `${event.pid}:${event.tid}`;
                  const cpuProfile = cpuProfileByID.get(event.id || pidTid);
                  if (cpuProfile) {
                    const chunk = event.args.data;
                    if (chunk.cpuProfile) {
                      if (chunk.cpuProfile.nodes) {
                        cpuProfile.nodes = cpuProfile.nodes.concat(chunk.cpuProfile.nodes);
                      }
                      if (chunk.cpuProfile.samples) {
                        cpuProfile.samples = cpuProfile.samples.concat(chunk.cpuProfile.samples);
                      }
                    }
                    if (chunk.timeDeltas) {
                      cpuProfile.timeDeltas = cpuProfile.timeDeltas.concat(chunk.timeDeltas);
                    }
                    if (chunk.startTime != null) {
                      cpuProfile.startTime = chunk.startTime;
                    }
                    if (chunk.endTime != null) {
                      cpuProfile.endTime = chunk.endTime;
                    }
                  } else {
                    console.warn(`Ignoring ProfileChunk for undeclared Profile with id ${event.id || pidTid}`);
                  }
                }
              }
              if (cpuProfileByID.size > 0) {
                const profiles = [];
                let indexToView = 0;
                utils_1.itForEach(cpuProfileByID.keys(), (profileId) => {
                  let threadName = null;
                  let pidTid = pidTidById.get(profileId);
                  if (pidTid) {
                    threadName = threadNameByPidTid.get(pidTid) || null;
                    if (threadName) {
                    }
                  }
                  const profile = importFromChromeCPUProfile(cpuProfileByID.get(profileId));
                  if (threadName && cpuProfileByID.size > 1) {
                    profile.setName(`${fileName} - ${threadName}`);
                    if (threadName === "CrRendererMain") {
                      indexToView = profiles.length;
                    }
                  } else {
                    profile.setName(`${fileName}`);
                  }
                  profiles.push(profile);
                });
                return {
                  name: fileName,
                  indexToView,
                  profiles
                };
              } else {
                throw new Error("Could not find CPU profile in Timeline");
              }
            }
            exports2.importFromChromeTimeline = importFromChromeTimeline;
            const callFrameToFrameInfo = /* @__PURE__ */ new Map();
            function frameInfoForCallFrame(callFrame) {
              return utils_1.getOrInsert(callFrameToFrameInfo, callFrame, (callFrame2) => {
                const name = callFrame2.functionName || "(anonymous)";
                const file = callFrame2.url;
                const line = callFrame2.lineNumber;
                const col = callFrame2.columnNumber;
                return {
                  key: `${name}:${file}:${line}:${col}`,
                  name,
                  file,
                  line,
                  col
                };
              });
            }
            function shouldIgnoreFunction(callFrame) {
              const {
                functionName,
                url
              } = callFrame;
              if (url === "native dummy.js") {
                return true;
              }
              return functionName === "(root)" || functionName === "(idle)";
            }
            function shouldPlaceOnTopOfPreviousStack(functionName) {
              return functionName === "(garbage collector)" || functionName === "(program)";
            }
            function importFromChromeCPUProfile(chromeProfile) {
              const profile = new profile_1.CallTreeProfileBuilder(chromeProfile.endTime - chromeProfile.startTime);
              const nodeById = /* @__PURE__ */ new Map();
              for (let node of chromeProfile.nodes) {
                nodeById.set(node.id, node);
              }
              for (let node of chromeProfile.nodes) {
                if (typeof node.parent === "number") {
                  node.parent = nodeById.get(node.parent);
                }
                if (!node.children)
                  continue;
                for (let childId of node.children) {
                  const child = nodeById.get(childId);
                  if (!child)
                    continue;
                  child.parent = node;
                }
              }
              const samples = [];
              const sampleTimes = [];
              let elapsed = chromeProfile.timeDeltas[0];
              let lastValidElapsed = elapsed;
              let lastNodeId = NaN;
              for (let i = 0; i < chromeProfile.samples.length; i++) {
                const nodeId = chromeProfile.samples[i];
                if (nodeId != lastNodeId) {
                  samples.push(nodeId);
                  if (elapsed < lastValidElapsed) {
                    sampleTimes.push(lastValidElapsed);
                  } else {
                    sampleTimes.push(elapsed);
                    lastValidElapsed = elapsed;
                  }
                }
                if (i === chromeProfile.samples.length - 1) {
                  if (!isNaN(lastNodeId)) {
                    samples.push(lastNodeId);
                    if (elapsed < lastValidElapsed) {
                      sampleTimes.push(lastValidElapsed);
                    } else {
                      sampleTimes.push(elapsed);
                      lastValidElapsed = elapsed;
                    }
                  }
                } else {
                  const timeDelta = chromeProfile.timeDeltas[i + 1];
                  elapsed += timeDelta;
                  lastNodeId = nodeId;
                }
              }
              let prevStack = [];
              for (let i = 0; i < samples.length; i++) {
                const value = sampleTimes[i];
                const nodeId = samples[i];
                let stackTop = nodeById.get(nodeId);
                if (!stackTop)
                  continue;
                let lca = null;
                for (lca = stackTop; lca && prevStack.indexOf(lca) === -1; lca = shouldPlaceOnTopOfPreviousStack(lca.callFrame.functionName) ? utils_1.lastOf(prevStack) : lca.parent || null) {
                }
                while (prevStack.length > 0 && utils_1.lastOf(prevStack) != lca) {
                  const closingNode = prevStack.pop();
                  const frame = frameInfoForCallFrame(closingNode.callFrame);
                  profile.leaveFrame(frame, value);
                }
                const toOpen = [];
                for (
                  let node = stackTop;
                  node && node != lca && !shouldIgnoreFunction(node.callFrame);
                  // Place Chrome internal functions on top of the previous call stack
                  node = shouldPlaceOnTopOfPreviousStack(node.callFrame.functionName) ? utils_1.lastOf(prevStack) : node.parent || null
                ) {
                  toOpen.push(node);
                }
                toOpen.reverse();
                for (let node of toOpen) {
                  profile.enterFrame(frameInfoForCallFrame(node.callFrame), value);
                }
                prevStack = prevStack.concat(toOpen);
              }
              for (let i = prevStack.length - 1; i >= 0; i--) {
                profile.leaveFrame(frameInfoForCallFrame(prevStack[i].callFrame), utils_1.lastOf(sampleTimes));
              }
              profile.setValueFormatter(new value_formatters_1.TimeFormatter("microseconds"));
              return profile.build();
            }
            exports2.importFromChromeCPUProfile = importFromChromeCPUProfile;
            function importFromOldV8CPUProfile(content) {
              return importFromChromeCPUProfile(v8cpuFormatter_1.chromeTreeToNodes(content));
            }
            exports2.importFromOldV8CPUProfile = importFromOldV8CPUProfile;
          }
        ),
        /***/
        7320: (
          /***/
          (__unused_webpack_module, exports2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.chromeTreeToNodes = void 0;
            function treeToArray(root) {
              const nodes = [];
              function visit(node) {
                nodes.push({
                  id: node.id,
                  callFrame: {
                    columnNumber: 0,
                    functionName: node.functionName,
                    lineNumber: node.lineNumber,
                    scriptId: node.scriptId,
                    url: node.url
                  },
                  hitCount: node.hitCount,
                  children: node.children.map((child) => child.id)
                });
                node.children.forEach(visit);
              }
              visit(root);
              return nodes;
            }
            function timestampsToDeltas(timestamps, startTime) {
              return timestamps.map((timestamp, index) => {
                const lastTimestamp = index === 0 ? startTime * 1e6 : timestamps[index - 1];
                return timestamp - lastTimestamp;
              });
            }
            function chromeTreeToNodes(content) {
              return {
                samples: content.samples,
                startTime: content.startTime * 1e6,
                endTime: content.endTime * 1e6,
                nodes: treeToArray(content.head),
                timeDeltas: timestampsToDeltas(content.timestamps, content.startTime)
              };
            }
            exports2.chromeTreeToNodes = chromeTreeToNodes;
          }
        ),
        /***/
        765: (
          /***/
          (__unused_webpack_module, exports2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.demangleCpp = void 0;
            let cppfilt;
            const cache = /* @__PURE__ */ new Map();
            function demangleCpp(name) {
              if (name.startsWith("__Z")) {
                let result = cache.get(name);
                if (result !== void 0) {
                  name = result;
                } else {
                  if (!cppfilt) {
                    cppfilt = new Function("exports", code)();
                  }
                  result = cppfilt(name.slice(1));
                  result = result === "(null)" ? name : result;
                  cache.set(name, result);
                  name = result;
                }
              }
              return name;
            }
            exports2.demangleCpp = demangleCpp;
            const code = `
return function(){function r(r){eval.call(null,r)}function a(r){throw print(r+":\\n"+(new Error).stack),ke=!0,"Assertion: "+r}function e(r,e){r||a("Assertion failed: "+e)}function i(r,a,i,v){function t(r,a){if("string"==a){var e=Oe;return le.stackAlloc(r.length+1),A(r,e),e}return r}function f(r,a){return"string"==a?s(r):r}try{func=ce.Module["_"+r]}catch(r){}e(func,"Cannot call unknown function "+r+" (perhaps LLVM optimizations or closure removed it?)");var _=0,n=v?v.map(function(r){return t(r,i[_++])}):[];return f(func.apply(null,n),a)}function v(r,a,e){return function(){return i(r,a,e,Array.prototype.slice.call(arguments))}}function t(r,e,i,v){switch(i=i||"i8","*"===i[i.length-1]&&(i="i32"),i){case"i1":Ae[r]=e;break;case"i8":Ae[r]=e;break;case"i16":ye[r>>1]=e;break;case"i32":Se[r>>2]=e;break;case"i64":Se[r>>2]=e;break;case"float":Ce[r>>2]=e;break;case"double":ze[0]=e,Se[r>>2]=xe[0],Se[r+4>>2]=xe[1];break;default:a("invalid type for setValue: "+i)}}function f(r,e,i){switch(e=e||"i8","*"===e[e.length-1]&&(e="i32"),e){case"i1":return Ae[r];case"i8":return Ae[r];case"i16":return ye[r>>1];case"i32":return Se[r>>2];case"i64":return Se[r>>2];case"float":return Ce[r>>2];case"double":return xe[0]=Se[r>>2],xe[1]=Se[r+4>>2],ze[0];default:a("invalid type for setValue: "+e)}return null}function _(r,a,e){var i,v;"number"==typeof r?(i=!0,v=r):(i=!1,v=r.length);var f="string"==typeof a?a:null,_=[Jr,le.stackAlloc,le.staticAlloc][void 0===e?we:e](Math.max(v,f?1:a.length));if(i)return Fa(_,0,v),_;for(var s,n=0;n<v;){var o=r[n];"function"==typeof o&&(o=le.getFunctionIndex(o)),s=f||a[n],0!==s?("i64"==s&&(s="i32"),t(_+n,o,s),n+=le.getNativeTypeSize(s)):n++}return _}function s(r,a){for(var e,i="undefined"==typeof a,v="",t=0,f=String.fromCharCode(0);;){if(e=String.fromCharCode(ge[r+t]),i&&e==f)break;if(v+=e,t+=1,!i&&t==a)break}return v}function n(r){for(var a="",e=0;e<r.length;e++)a+=String.fromCharCode(r[e]);return a}function o(r){return r+4095>>12<<12}function l(){for(;Le<=Ie;)Le=o(2*Le);var r=Ae,a=new ArrayBuffer(Le);Ae=new Int8Array(a),ye=new Int16Array(a),Se=new Int32Array(a),ge=new Uint8Array(a),me=new Uint16Array(a),Me=new Uint32Array(a),Ce=new Float32Array(a),Re=new Float64Array(a),Ae.set(r)}function b(r){for(;r.length>0;){var a=r.shift(),e=a.func;"number"==typeof e&&(e=pe[e]),e(void 0===a.arg?null:a.arg)}}function k(){b(Ve)}function u(){b(Be),be.print()}function c(r,a){return Array.prototype.slice.call(Ae.subarray(r,r+a))}function h(r,a){for(var e=new Uint8Array(a),i=0;i<a;++i)e[i]=Ae[r+i];return e.buffer}function d(r){for(var a=0;Ae[r+a];)a++;return a}function w(r,a){var e=d(r);a&&e++;var i=c(r,e);return a&&(i[e-1]=0),i}function p(r,a){for(var e=[],i=0;i<r.length;){var v=r.charCodeAt(i);v>255&&(v&=255),e.push(v),i+=1}return a||e.push(0),e}function E(r){for(var a=[],e=0;e<r.length;e++){var i=r[e];i>255&&(i&=255),a.push(String.fromCharCode(i))}return a.join("")}function A(r,a,e){for(var i=0;i<r.length;){var v=r.charCodeAt(i);v>255&&(v&=255),Ae[a+i]=v,i+=1}e||(Ae[a+i]=0)}function g(r,a,e,i){return r>=0?r:a<=32?2*Math.abs(1<<a-1)+r:Math.pow(2,a)+r}function y(r,a,e,i){if(r<=0)return r;var v=a<=32?Math.abs(1<<a-1):Math.pow(2,a-1);return r>=v&&(a<=32||r>v)&&(r=-2*v+r),r}function m(r,a,e){if(0==(0|r)|0==(0|a)|0==(0|e))var i=0;else{Se[r>>2]=0,Se[r+4>>2]=a,Se[r+8>>2]=e;var i=1}var i;return i}function S(r,a,e){if(0==(0|r)|(0|a)<0|0==(0|e))var i=0;else{Se[r>>2]=41,Se[r+4>>2]=a,Se[r+8>>2]=e;var i=1}var i;return i}function M(r,a,e){if(0==(0|r)|0==(0|e))var i=0;else{Se[r>>2]=6,Se[r+4>>2]=a,Se[r+8>>2]=e;var i=1}var i;return i}function C(r,a,e){if(0==(0|r)|0==(0|e))var i=0;else{Se[r>>2]=7,Se[r+4>>2]=a,Se[r+8>>2]=e;var i=1}var i;return i}function R(r,a){var e,i=0==(0|a);do if(i)var v=0;else{var e=(r+32|0)>>2,t=Se[e];if((0|t)>=(0|Se[r+36>>2])){var v=0;break}var f=(t<<2)+Se[r+28>>2]|0;Se[f>>2]=a;var _=Se[e]+1|0;Se[e]=_;var v=1}while(0);var v;return v}function T(r,a){var e,e=(r+12|0)>>2,i=Se[e],v=i+1|0;Se[e]=v;var t=Ae[i]<<24>>24==95;do if(t){var f=i+2|0;if(Se[e]=f,Ae[v]<<24>>24!=90){var _=0;break}var s=O(r,a),_=s}else var _=0;while(0);var _;return _}function O(r,a){var e=r+12|0,i=Ae[Se[e>>2]];r:do if(i<<24>>24==71||i<<24>>24==84)var v=Tr(r),t=v;else{var f=Ar(r),_=0==(0|f)|0==(0|a);do if(!_){if(0!=(1&Se[r+8>>2]|0))break;var s=Me[f>>2],n=(s-25|0)>>>0<3;a:do if(n)for(var o=f;;){var o,l=Me[o+4>>2],b=Me[l>>2];if((b-25|0)>>>0>=3){var k=l,u=b;break a}var o=l}else var k=f,u=s;while(0);var u,k;if(2!=(0|u)){var t=k;break r}var c=k+8|0,h=Me[c>>2],d=(Se[h>>2]-25|0)>>>0<3;a:do if(d)for(var w=h;;){var w,p=Me[w+4>>2];if((Se[p>>2]-25|0)>>>0>=3){var E=p;break a}var w=p}else var E=h;while(0);var E;Se[c>>2]=E;var t=k;break r}while(0);var A=Ae[Se[e>>2]];if(A<<24>>24==0||A<<24>>24==69){var t=f;break}var g=Or(f),y=Sr(r,g),m=D(r,3,f,y),t=m}while(0);var t;return t}function N(r){var a,e,i=Oe;Oe+=4;var v=i,e=v>>2,a=(r+12|0)>>2,t=Me[a],f=Ae[t],_=f<<24>>24;r:do if(f<<24>>24==114||f<<24>>24==86||f<<24>>24==75){var s=I(r,v,0);if(0==(0|s)){var n=0;break}var o=N(r);Se[s>>2]=o;var l=Se[e],b=R(r,l);if(0==(0|b)){var n=0;break}var n=Se[e]}else{do{if(97==(0|_)||98==(0|_)||99==(0|_)||100==(0|_)||101==(0|_)||102==(0|_)||103==(0|_)||104==(0|_)||105==(0|_)||106==(0|_)||108==(0|_)||109==(0|_)||110==(0|_)||111==(0|_)||115==(0|_)||116==(0|_)||118==(0|_)||119==(0|_)||120==(0|_)||121==(0|_)||122==(0|_)){var k=ai+20*(_-97)|0,u=P(r,k);Se[e]=u;var c=r+48|0,h=Se[c>>2]+Se[Se[u+4>>2]+4>>2]|0;Se[c>>2]=h;var d=Se[a]+1|0;Se[a]=d;var n=u;break r}if(117==(0|_)){Se[a]=t+1|0;var w=L(r),p=D(r,34,w,0);Se[e]=p;var E=p}else if(70==(0|_)){var A=F(r);Se[e]=A;var E=A}else if(48==(0|_)||49==(0|_)||50==(0|_)||51==(0|_)||52==(0|_)||53==(0|_)||54==(0|_)||55==(0|_)||56==(0|_)||57==(0|_)||78==(0|_)||90==(0|_)){var g=X(r);Se[e]=g;var E=g}else if(65==(0|_)){var y=j(r);Se[e]=y;var E=y}else if(77==(0|_)){var m=U(r);Se[e]=m;var E=m}else if(84==(0|_)){var S=x(r);if(Se[e]=S,Ae[Se[a]]<<24>>24!=73){var E=S;break}var M=R(r,S);if(0==(0|M)){var n=0;break r}var C=Se[e],T=z(r),O=D(r,4,C,T);Se[e]=O;var E=O}else if(83==(0|_)){var B=ge[t+1|0];if((B-48&255&255)<10|B<<24>>24==95|(B-65&255&255)<26){var H=V(r,0);if(Se[e]=H,Ae[Se[a]]<<24>>24!=73){var n=H;break r}var K=z(r),Y=D(r,4,H,K);Se[e]=Y;var E=Y}else{var G=X(r);if(Se[e]=G,0==(0|G)){var E=0;break}if(21==(0|Se[G>>2])){var n=G;break r}var E=G}}else if(80==(0|_)){Se[a]=t+1|0;var W=N(r),Z=D(r,29,W,0);Se[e]=Z;var E=Z}else if(82==(0|_)){Se[a]=t+1|0;var Q=N(r),q=D(r,30,Q,0);Se[e]=q;var E=q}else if(67==(0|_)){Se[a]=t+1|0;var $=N(r),J=D(r,31,$,0);Se[e]=J;var E=J}else if(71==(0|_)){Se[a]=t+1|0;var rr=N(r),ar=D(r,32,rr,0);Se[e]=ar;var E=ar}else{if(85!=(0|_)){var n=0;break r}Se[a]=t+1|0;var er=L(r);Se[e]=er;var ir=N(r),vr=Se[e],tr=D(r,28,ir,vr);Se[e]=tr;var E=tr}}while(0);var E,fr=R(r,E);if(0==(0|fr)){var n=0;break}var n=Se[e]}while(0);var n;return Oe=i,n}function I(r,a,e){for(var i,v=r+12|0,t=0!=(0|e),f=t?25:22,i=(r+48|0)>>2,_=t?26:23,s=t?27:24,n=a;;){var n,o=Se[v>>2],l=Ae[o];if(l<<24>>24!=114&&l<<24>>24!=86&&l<<24>>24!=75){var b=n;break}var k=o+1|0;if(Se[v>>2]=k,l<<24>>24==114){var u=Se[i]+9|0;Se[i]=u;var c=f}else if(l<<24>>24==86){var h=Se[i]+9|0;Se[i]=h;var c=_}else{var d=Se[i]+6|0;Se[i]=d;var c=s}var c,w=D(r,c,0,0);if(Se[n>>2]=w,0==(0|w)){var b=0;break}var n=w+4|0}var b;return b}function P(r,a){var e=0==(0|a);do if(e)var i=0;else{var v=J(r);if(0==(0|v)){var i=0;break}Se[v>>2]=33,Se[v+4>>2]=a;var i=v}while(0);var i;return i}function D(r,a,e,i){var v,t;do{if(1==(0|a)||2==(0|a)||3==(0|a)||4==(0|a)||10==(0|a)||28==(0|a)||37==(0|a)||43==(0|a)||44==(0|a)||45==(0|a)||46==(0|a)||47==(0|a)||48==(0|a)||49==(0|a)||50==(0|a)){if(0==(0|e)|0==(0|i)){var f=0;t=7;break}t=5;break}if(8==(0|a)||9==(0|a)||11==(0|a)||12==(0|a)||13==(0|a)||14==(0|a)||15==(0|a)||16==(0|a)||17==(0|a)||18==(0|a)||19==(0|a)||20==(0|a)||29==(0|a)||30==(0|a)||31==(0|a)||32==(0|a)||34==(0|a)||38==(0|a)||39==(0|a)||42==(0|a)){if(0==(0|e)){var f=0;t=7;break}t=5;break}if(36==(0|a)){if(0==(0|i)){var f=0;t=7;break}t=5;break}if(35==(0|a)||22==(0|a)||23==(0|a)||24==(0|a)||25==(0|a)||26==(0|a)||27==(0|a))t=5;else{var f=0;t=7}}while(0);do if(5==t){var _=J(r),v=_>>2;if(0==(0|_)){var f=0;break}Se[v]=a,Se[v+1]=e,Se[v+2]=i;var f=_}while(0);var f;return f}function L(r){var a=sr(r);if((0|a)<1)var e=0;else{var i=Rr(r,a);Se[r+44>>2]=i;var e=i}var e;return e}function F(r){var a,a=(r+12|0)>>2,e=Se[a],i=e+1|0;if(Se[a]=i,Ae[e]<<24>>24==70){if(Ae[i]<<24>>24==89){var v=e+2|0;Se[a]=v}var t=Sr(r,1),f=Se[a],_=f+1|0;Se[a]=_;var s=Ae[f]<<24>>24==69?t:0,n=s}else var n=0;var n;return n}function X(r){var a=Ar(r);return a}function j(r){var a,a=(r+12|0)>>2,e=Se[a],i=e+1|0;Se[a]=i;var v=Ae[e]<<24>>24==65;do if(v){var t=Ae[i];if(t<<24>>24==95)var f=0;else if((t-48&255&255)<10){for(var _=i;;){var _,s=_+1|0;if(Se[a]=s,(Ae[s]-48&255&255)>=10)break;var _=s}var n=s-i|0,o=lr(r,i,n);if(0==(0|o)){var l=0;break}var f=o}else{var b=nr(r);if(0==(0|b)){var l=0;break}var f=b}var f,k=Se[a],u=k+1|0;if(Se[a]=u,Ae[k]<<24>>24!=95){var l=0;break}var c=N(r),h=D(r,36,f,c),l=h}else var l=0;while(0);var l;return l}function U(r){var a=Oe;Oe+=4;var e=a,i=r+12|0,v=Se[i>>2],t=v+1|0;Se[i>>2]=t;var f=Ae[v]<<24>>24==77;r:do if(f){var _=N(r),s=I(r,e,1);if(0==(0|s)){var n=0;break}var o=N(r);Se[s>>2]=o;var l=(0|s)==(0|e);do if(!l){if(35==(0|Se[o>>2]))break;var b=Se[e>>2],k=R(r,b);if(0==(0|k)){var n=0;break r}}while(0);var u=Se[e>>2],c=D(r,37,_,u),n=c}else var n=0;while(0);var n;return Oe=a,n}function x(r){var a,a=(r+12|0)>>2,e=Se[a],i=e+1|0;Se[a]=i;var v=Ae[e]<<24>>24==84;do if(v){if(Ae[i]<<24>>24==95)var t=0,f=i;else{var _=sr(r);if((0|_)<0){var s=0;break}var t=_+1|0,f=Se[a]}var f,t;if(Se[a]=f+1|0,Ae[f]<<24>>24!=95){var s=0;break}var n=r+40|0,o=Se[n>>2]+1|0;Se[n>>2]=o;var l=Er(r,t),s=l}else var s=0;while(0);var s;return s}function z(r){var a,e=Oe;Oe+=4;var i=e,v=r+44|0,t=Se[v>>2],a=(r+12|0)>>2,f=Se[a],_=f+1|0;Se[a]=_;var s=Ae[f]<<24>>24==73;r:do if(s){Se[i>>2]=0;for(var n=i;;){var n,o=_r(r);if(0==(0|o)){var l=0;break r}var b=D(r,39,o,0);if(Se[n>>2]=b,0==(0|b)){var l=0;break r}var k=Se[a];if(Ae[k]<<24>>24==69)break;var n=b+8|0}var u=k+1|0;Se[a]=u,Se[v>>2]=t;var l=Se[i>>2]}else var l=0;while(0);var l;return Oe=e,l}function V(r,a){var e,e=(r+12|0)>>2,i=Se[e],v=i+1|0;Se[e]=v;var t=Ae[i]<<24>>24==83;r:do if(t){var f=i+2|0;Se[e]=f;var _=ge[v];if(_<<24>>24==95)var s=0;else{if(!((_-48&255&255)<10|(_-65&255&255)<26)){var n=8&Se[r+8>>2],o=n>>>3,l=0!=(0|n)|0==(0|a);do if(l)var b=o;else{if((Ae[f]-67&255&255)>=2){var b=o;break}var b=1}while(0);for(var b,k=0|ei;;){var k;if(k>>>0>=(ei+196|0)>>>0){var u=0;break r}if(_<<24>>24==Ae[0|k]<<24>>24)break;var k=k+28|0}var c=Se[k+20>>2];if(0!=(0|c)){var h=Se[k+24>>2],d=fr(r,c,h);Se[r+44>>2]=d}if(0==(0|b))var w=k+8|0,p=k+4|0;else var w=k+16|0,p=k+12|0;var p,w,E=Se[w>>2],A=Se[p>>2],g=r+48|0,y=Se[g>>2]+E|0;Se[g>>2]=y;var m=fr(r,A,E),u=m;break}for(var S=_,M=0,C=f;;){var C,M,S;if((S-48&255&255)<10)var R=36*M-48|0;else{if((S-65&255&255)>=26){var u=0;break r}var R=36*M-55|0}var R,T=(S<<24>>24)+R|0;if((0|T)<0){var u=0;break r}var O=C+1|0;Se[e]=O;var N=ge[C];if(N<<24>>24==95)break;var S=N,M=T,C=O}var s=T+1|0}var s;if((0|s)>=(0|Se[r+32>>2])){var u=0;break}var I=r+40|0,P=Se[I>>2]+1|0;Se[I>>2]=P;var u=Se[Se[r+28>>2]+(s<<2)>>2]}else var u=0;while(0);var u;return u}function B(r,a,e,i){var v,t,f,_,s=Oe;Oe+=28;var n,o=s,_=o>>2;Se[_]=r;var l=e+1|0,f=(o+12|0)>>2;Se[f]=l;var b=Jr(l),t=(o+4|0)>>2;if(Se[t]=b,0==(0|b))var k=0,u=1;else{var v=(o+8|0)>>2;Se[v]=0,Se[_+4]=0,Se[_+5]=0;var c=o+24|0;Se[c>>2]=0,H(o,a);var h=Me[t],d=0==(0|h);do{if(!d){var w=Me[v];if(w>>>0>=Me[f]>>>0){n=5;break}Se[v]=w+1|0,Ae[h+w|0]=0,n=6;break}n=5}while(0);5==n&&Y(o,0);var p=Se[t],E=0==(0|p)?Se[c>>2]:Se[f],k=p,u=E}var u,k;return Se[i>>2]=u,Oe=s,k}function H(r,a){var e,i,v,t,f,_,s,n,o,l,b,k,u,c,h,d,w,p,E,A,g,y,m,S,M,C,R,T,O,N,I,P,D,L,F,X,j,U,x,z,V,B,K,G,W,J,vr,tr,fr,_r,sr,nr,or,lr,br,kr,ur,cr,hr,dr,wr,pr=a>>2,Er=r>>2,Ar=Oe;Oe+=184;var gr,yr=Ar,wr=yr>>2,mr=Ar+64,dr=mr>>2,Sr=Ar+72,Mr=Ar+88,Cr=Ar+104,hr=Cr>>2,Rr=Ar+168,Tr=0==(0|a);r:do if(Tr)Z(r);else{var cr=(r+4|0)>>2,Or=Me[cr];if(0==(0|Or))break;var Nr=0|a,Ir=Me[Nr>>2];a:do{if(0==(0|Ir)){if(0!=(4&Se[Er]|0)){var Pr=Se[pr+1],Dr=Se[pr+2];q(r,Pr,Dr);break r}var ur=(r+8|0)>>2,Lr=Me[ur],Fr=a+8|0,Xr=Me[Fr>>2];if((Xr+Lr|0)>>>0>Me[Er+3]>>>0){var jr=Se[pr+1];Q(r,jr,Xr);break r}var Ur=Or+Lr|0,xr=Se[pr+1];Pa(Ur,xr,Xr,1);var zr=Se[ur]+Se[Fr>>2]|0;Se[ur]=zr;break r}if(1==(0|Ir)||2==(0|Ir)){var Vr=Se[pr+1];H(r,Vr);var Br=0==(4&Se[Er]|0),Hr=Me[cr],Kr=0!=(0|Hr);e:do if(Br){do if(Kr){var kr=(r+8|0)>>2,Yr=Me[kr];if((Yr+2|0)>>>0>Me[Er+3]>>>0)break;var Gr=Hr+Yr|0;oe=14906,Ae[Gr]=255&oe,oe>>=8,Ae[Gr+1]=255&oe;var Wr=Se[kr]+2|0;Se[kr]=Wr;break e}while(0);Q(r,0|He.__str120,2)}else{do if(Kr){var Zr=r+8|0,Qr=Me[Zr>>2];if(Qr>>>0>=Me[Er+3]>>>0)break;Se[Zr>>2]=Qr+1|0,Ae[Hr+Qr|0]=46;break e}while(0);Y(r,46)}while(0);var qr=Se[pr+2];H(r,qr);break r}if(3==(0|Ir)){for(var br=(r+20|0)>>2,$r=Me[br],lr=(r+16|0)>>2,Jr=a,ra=0,aa=$r;;){var aa,ra,Jr,ea=Me[Jr+4>>2];if(0==(0|ea)){var ia=ra,va=0;gr=33;break}if(ra>>>0>3){Z(r);break r}var ta=(ra<<4)+yr|0;Se[ta>>2]=aa,Se[br]=ta,Se[((ra<<4)+4>>2)+wr]=ea,Se[((ra<<4)+8>>2)+wr]=0;var fa=Me[lr];Se[((ra<<4)+12>>2)+wr]=fa;var _a=ra+1|0,sa=0|ea,na=Me[sa>>2];if((na-25|0)>>>0>=3){gr=25;break}var Jr=ea,ra=_a,aa=ta}e:do if(25==gr){if(4==(0|na)){Se[dr]=fa,Se[lr]=mr,Se[dr+1]=ea;var oa=Se[sa>>2],la=mr}else var oa=na,la=fa;var la,oa;if(2!=(0|oa)){var ia=_a,va=sa;break}for(var ba=_a,ka=ea+8|0;;){var ka,ba,ua=Me[ka>>2];if((Se[ua>>2]-25|0)>>>0>=3){var ia=ba,va=sa;break e}if(ba>>>0>3)break;var ca=(ba<<4)+yr|0,ha=ba-1|0,da=(ha<<4)+yr|0,or=ca>>2,nr=da>>2;Se[or]=Se[nr],Se[or+1]=Se[nr+1],Se[or+2]=Se[nr+2],Se[or+3]=Se[nr+3],Se[ca>>2]=da,Se[br]=ca,Se[((ha<<4)+4>>2)+wr]=ua,Se[((ha<<4)+8>>2)+wr]=0,Se[((ha<<4)+12>>2)+wr]=la;var ba=ba+1|0,ka=ua+4|0}Z(r);break r}while(0);var va,ia,wa=Se[pr+2];if(H(r,wa),4==(0|Se[va>>2])){var pa=Se[dr];Se[lr]=pa}var Ea=0==(0|ia);e:do if(!Ea)for(var Aa=r+8|0,ga=r+12|0,ya=ia;;){var ya,ma=ya-1|0;if(0==(0|Se[((ma<<4)+8>>2)+wr])){var Sa=Me[cr],Ma=0==(0|Sa);do{if(!Ma){var Ca=Me[Aa>>2];if(Ca>>>0>=Me[ga>>2]>>>0){gr=41;break}Se[Aa>>2]=Ca+1|0,Ae[Sa+Ca|0]=32,gr=42;break}gr=41}while(0);41==gr&&Y(r,32);var Ra=Se[((ma<<4)+4>>2)+wr];$(r,Ra)}if(0==(0|ma))break e;var ya=ma}while(0);Se[br]=$r;break r}if(4==(0|Ir)){var sr=(r+20|0)>>2,Ta=Se[sr];Se[sr]=0;var Oa=Se[pr+1];H(r,Oa);var Na=Me[cr],Ia=0==(0|Na);do{if(!Ia){var _r=(r+8|0)>>2,Da=Me[_r],La=0==(0|Da);do if(!La){if(Ae[Na+(Da-1)|0]<<24>>24!=60)break;Da>>>0<Me[Er+3]>>>0?(Se[_r]=Da+1|0,Ae[Na+Da|0]=32):Y(r,32)}while(0);var Fa=Me[cr];if(0==(0|Fa)){gr=54;break}var Xa=Me[_r];if(Xa>>>0>=Me[Er+3]>>>0){gr=54;break}Se[_r]=Xa+1|0,Ae[Fa+Xa|0]=60,gr=55;break}gr=54}while(0);54==gr&&Y(r,60);var ja=Se[pr+2];H(r,ja);var Ua=Me[cr],xa=0==(0|Ua);do{if(!xa){var fr=(r+8|0)>>2,za=Me[fr],Va=0==(0|za);do if(!Va){if(Ae[Ua+(za-1)|0]<<24>>24!=62)break;za>>>0<Me[Er+3]>>>0?(Se[fr]=za+1|0,Ae[Ua+za|0]=32):Y(r,32)}while(0);var Ba=Me[cr];if(0==(0|Ba)){gr=64;break}var Ha=Me[fr];if(Ha>>>0>=Me[Er+3]>>>0){gr=64;break}Se[fr]=Ha+1|0,Ae[Ba+Ha|0]=62,gr=65;break}gr=64}while(0);64==gr&&Y(r,62),Se[sr]=Ta;break r}if(5==(0|Ir)){var tr=(r+16|0)>>2,Ka=Me[tr];if(0==(0|Ka)){Z(r);break r}for(var Ya=Se[pr+1],Ga=Se[Ka+4>>2];;){var Ga,Ya,Wa=Se[Ga+8>>2];if(0==(0|Wa))break;if(39!=(0|Se[Wa>>2])){Z(r);break r}if((0|Ya)<1){if(0!=(0|Ya))break;var Za=Se[Ka>>2];Se[tr]=Za;var Qa=Se[Wa+4>>2];H(r,Qa),Se[tr]=Ka;break r}var Ya=Ya-1|0,Ga=Wa}Z(r);break r}if(6==(0|Ir)){var qa=Se[pr+2];H(r,qa);break r}if(7==(0|Ir)){var $a=r+8|0,Ja=Me[$a>>2];Ja>>>0<Me[Er+3]>>>0?(Se[$a>>2]=Ja+1|0,Ae[Or+Ja|0]=126):Y(r,126);var re=Se[pr+2];H(r,re);break r}if(8==(0|Ir)){var vr=(r+8|0)>>2,ae=Me[vr];if((ae+11|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str121,11);else{for(var ee=Or+ae|0,ie=0|He.__str121,ve=ee,te=ie+11;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var fe=Se[vr]+11|0;Se[vr]=fe}var _e=Se[pr+1];H(r,_e);break r}if(9==(0|Ir)){var J=(r+8|0)>>2,se=Me[J];if((se+8|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str122,8);else{var ne=Or+se|0,le=0|ne;oe=542397526,Ae[le]=255&oe,oe>>=8,Ae[le+1]=255&oe,oe>>=8,Ae[le+2]=255&oe,oe>>=8,Ae[le+3]=255&oe;var be=ne+4|0;oe=544370534,Ae[be]=255&oe,oe>>=8,Ae[be+1]=255&oe,oe>>=8,Ae[be+2]=255&oe,oe>>=8,Ae[be+3]=255&oe;var ke=Se[J]+8|0;Se[J]=ke}var ue=Se[pr+1];H(r,ue);break r}if(10==(0|Ir)){var W=(r+8|0)>>2,ce=Me[W],he=r+12|0;if((ce+24|0)>>>0>Me[he>>2]>>>0)Q(r,0|He.__str123,24);else{var de=Or+ce|0;Pa(de,0|He.__str123,24,1);var we=Se[W]+24|0;Se[W]=we}var pe=Se[pr+1];H(r,pe);var Ee=Me[cr],ge=0==(0|Ee);do{if(!ge){var ye=Me[W];if((ye+4|0)>>>0>Me[he>>2]>>>0){gr=96;break}var me=Ee+ye|0;oe=762210605,Ae[me]=255&oe,oe>>=8,Ae[me+1]=255&oe,oe>>=8,Ae[me+2]=255&oe,oe>>=8,Ae[me+3]=255&oe;var Ce=Se[W]+4|0;Se[W]=Ce,gr=97;break}gr=96}while(0);96==gr&&Q(r,0|He.__str124,4);var Re=Se[pr+2];H(r,Re);break r}if(11==(0|Ir)){var G=(r+8|0)>>2,Te=Me[G];if((Te+13|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str125,13);else{for(var Ne=Or+Te|0,ie=0|He.__str125,ve=Ne,te=ie+13;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var Ie=Se[G]+13|0;Se[G]=Ie}var Pe=Se[pr+1];H(r,Pe);break r}if(12==(0|Ir)){var K=(r+8|0)>>2,De=Me[K];if((De+18|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str126,18);else{for(var Le=Or+De|0,ie=0|He.__str126,ve=Le,te=ie+18;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var Fe=Se[K]+18|0;Se[K]=Fe}var Xe=Se[pr+1];H(r,Xe);break r}if(13==(0|Ir)){var B=(r+8|0)>>2,je=Me[B];if((je+16|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str127,16);else{for(var Ue=Or+je|0,ie=0|He.__str127,ve=Ue,te=ie+16;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var xe=Se[B]+16|0;Se[B]=xe}var ze=Se[pr+1];H(r,ze);break r}if(14==(0|Ir)){var V=(r+8|0)>>2,Ve=Me[V];if((Ve+21|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str128,21);else{var Be=Or+Ve|0;Pa(Be,0|He.__str128,21,1);var Ke=Se[V]+21|0;Se[V]=Ke}var Ye=Se[pr+1];H(r,Ye);break r}if(15==(0|Ir)){var z=(r+8|0)>>2,Ge=Me[z];if((Ge+17|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str129,17);else{for(var We=Or+Ge|0,ie=0|He.__str129,ve=We,te=ie+17;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var Ze=Se[z]+17|0;Se[z]=Ze}var Qe=Se[pr+1];H(r,Qe);break r}if(16==(0|Ir)){var x=(r+8|0)>>2,qe=Me[x];if((qe+26|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str130,26);else{var $e=Or+qe|0;Pa($e,0|He.__str130,26,1);var Je=Se[x]+26|0;Se[x]=Je}var ri=Se[pr+1];H(r,ri);break r}if(17==(0|Ir)){var U=(r+8|0)>>2,ai=Me[U];if((ai+15|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str131,15);else{for(var ei=Or+ai|0,ie=0|He.__str131,ve=ei,te=ie+15;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var ii=Se[U]+15|0;Se[U]=ii}var vi=Se[pr+1];H(r,vi);break r}if(18==(0|Ir)){var j=(r+8|0)>>2,ti=Me[j];if((ti+19|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str132,19);else{for(var fi=Or+ti|0,ie=0|He.__str132,ve=fi,te=ie+19;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var _i=Se[j]+19|0;Se[j]=_i}var si=Se[pr+1];H(r,si);break r}if(19==(0|Ir)){var X=(r+8|0)>>2,ni=Me[X];if((ni+24|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str133,24);else{var oi=Or+ni|0;Pa(oi,0|He.__str133,24,1);var li=Se[X]+24|0;Se[X]=li}var bi=Se[pr+1];H(r,bi);break r}if(20==(0|Ir)){var F=(r+8|0)>>2,ki=Me[F];if((ki+17|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str134,17);else{for(var ui=Or+ki|0,ie=0|He.__str134,ve=ui,te=ie+17;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var ci=Se[F]+17|0;Se[F]=ci}var hi=Se[pr+1];H(r,hi);break r}if(21==(0|Ir)){var L=(r+8|0)>>2,di=Me[L],wi=a+8|0,pi=Me[wi>>2];if((pi+di|0)>>>0>Me[Er+3]>>>0){var Ei=Se[pr+1];Q(r,Ei,pi);break r}var Ai=Or+di|0,gi=Se[pr+1];Pa(Ai,gi,pi,1);var yi=Se[L]+Se[wi>>2]|0;Se[L]=yi;break r}if(22==(0|Ir)||23==(0|Ir)||24==(0|Ir)){for(var mi=r+20|0;;){var mi,Si=Me[mi>>2];if(0==(0|Si))break a;if(0==(0|Se[Si+8>>2])){var Mi=Me[Se[Si+4>>2]>>2];if((Mi-22|0)>>>0>=3)break a;if((0|Mi)==(0|Ir))break}var mi=0|Si}var Ci=Se[pr+1];H(r,Ci);break r}if(25!=(0|Ir)&&26!=(0|Ir)&&27!=(0|Ir)&&28!=(0|Ir)&&29!=(0|Ir)&&30!=(0|Ir)&&31!=(0|Ir)&&32!=(0|Ir)){if(33==(0|Ir)){var D=(r+8|0)>>2,Ri=Me[D],P=(a+4|0)>>2,I=Me[P]>>2;if(0==(4&Se[Er]|0)){var Ti=Me[I+1];if((Ti+Ri|0)>>>0>Me[Er+3]>>>0){var Oi=Se[I];Q(r,Oi,Ti);break r}var Ni=Or+Ri|0,Ii=Se[I];Pa(Ni,Ii,Ti,1);var Pi=Se[D]+Se[Se[P]+4>>2]|0;Se[D]=Pi;break r}var Di=Me[I+3];if((Di+Ri|0)>>>0>Me[Er+3]>>>0){var Li=Se[I+2];Q(r,Li,Di);break r}var Fi=Or+Ri|0,Xi=Se[I+2];Pa(Fi,Xi,Di,1);var ji=Se[D]+Se[Se[P]+12>>2]|0;Se[D]=ji;break r}if(34==(0|Ir)){var Ui=Se[pr+1];H(r,Ui);break r}if(35==(0|Ir)){var N=(0|r)>>2;if(0!=(32&Se[N]|0)){var xi=Se[Er+5];rr(r,a,xi)}var zi=a+4|0,Vi=0==(0|Se[zi>>2]);e:do if(!Vi){var O=(r+20|0)>>2,Bi=Se[O],Hi=0|Mr;Se[Hi>>2]=Bi,Se[O]=Mr,Se[Mr+4>>2]=a;var Ki=Mr+8|0;Se[Ki>>2]=0;var Yi=Se[Er+4];Se[Mr+12>>2]=Yi;var Gi=Se[zi>>2];H(r,Gi);var Wi=Se[Hi>>2];if(Se[O]=Wi,0!=(0|Se[Ki>>2]))break r;if(0!=(32&Se[N]|0))break;var Zi=Me[cr],Qi=0==(0|Zi);do if(!Qi){var qi=r+8|0,$i=Me[qi>>2];if($i>>>0>=Me[Er+3]>>>0)break;Se[qi>>2]=$i+1|0,Ae[Zi+$i|0]=32;break e}while(0);Y(r,32)}while(0);if(0!=(32&Se[N]|0))break r;var Ji=Se[Er+5];rr(r,a,Ji);break r}if(36==(0|Ir)){var T=(r+20|0)>>2,rv=Me[T],av=0|Cr;Se[hr]=rv,Se[T]=av,Se[hr+1]=a;var ev=Cr+8|0;Se[ev>>2]=0;var iv=Se[Er+4];Se[hr+3]=iv;for(var vv=rv,tv=1;;){var tv,vv;if(0==(0|vv))break;if((Se[Se[vv+4>>2]>>2]-22|0)>>>0>=3)break;var fv=vv+8|0;if(0==(0|Se[fv>>2])){if(tv>>>0>3){Z(r);break r}var _v=(tv<<4)+Cr|0,R=_v>>2,C=vv>>2;Se[R]=Se[C],Se[R+1]=Se[C+1],Se[R+2]=Se[C+2],Se[R+3]=Se[C+3];var sv=Se[T];Se[_v>>2]=sv,Se[T]=_v,Se[fv>>2]=1;var nv=tv+1|0}else var nv=tv;var nv,vv=Se[vv>>2],tv=nv}var ov=Se[pr+2];if(H(r,ov),Se[T]=rv,0!=(0|Se[ev>>2]))break r;if(tv>>>0>1){for(var lv=tv;;){var lv,bv=lv-1|0,kv=Se[((bv<<4)+4>>2)+hr];if($(r,kv),bv>>>0<=1)break;var lv=bv}var uv=Se[T]}else var uv=rv;var uv;ar(r,a,uv);break r}if(37==(0|Ir)){var M=(r+20|0)>>2,cv=Se[M],hv=0|Rr;Se[hv>>2]=cv,Se[M]=Rr,Se[Rr+4>>2]=a;var dv=Rr+8|0;Se[dv>>2]=0;var wv=Se[Er+4];Se[Rr+12>>2]=wv;var pv=a+4|0,Ev=Se[pr+2];H(r,Ev);var Av=0==(0|Se[dv>>2]);e:do if(Av){var gv=Me[cr],yv=0==(0|gv);do{if(!yv){var mv=r+8|0,Sv=Me[mv>>2];if(Sv>>>0>=Me[Er+3]>>>0){gr=187;break}Se[mv>>2]=Sv+1|0,Ae[gv+Sv|0]=32,gr=188;break}gr=187}while(0);187==gr&&Y(r,32);var Mv=Se[pv>>2];H(r,Mv);var Cv=Me[cr],Rv=0==(0|Cv);do if(!Rv){var S=(r+8|0)>>2,Tv=Me[S];if((Tv+3|0)>>>0>Me[Er+3]>>>0)break;var Ov=Cv+Tv|0;Ae[Ov]=Ae[0|He.__str135],Ae[Ov+1]=Ae[(0|He.__str135)+1],Ae[Ov+2]=Ae[(0|He.__str135)+2];var Nv=Se[S]+3|0;Se[S]=Nv;break e}while(0);Q(r,0|He.__str135,3)}while(0);var Iv=Se[hv>>2];Se[M]=Iv;break r}if(38==(0|Ir)||39==(0|Ir)){var Pv=Se[pr+1];H(r,Pv);var Dv=a+8|0;if(0==(0|Se[Dv>>2]))break r;var Lv=Me[cr],Fv=0==(0|Lv);do{if(!Fv){var m=(r+8|0)>>2,Xv=Me[m];if((Xv+2|0)>>>0>Me[Er+3]>>>0){gr=197;break}var jv=Lv+Xv|0;oe=8236,Ae[jv]=255&oe,oe>>=8,Ae[jv+1]=255&oe;var Uv=Se[m]+2|0;Se[m]=Uv,gr=198;break}gr=197}while(0);197==gr&&Q(r,0|He.__str136,2);var xv=Se[Dv>>2];H(r,xv);break r}if(40==(0|Ir)){var y=(r+8|0)>>2,zv=Me[y],g=(r+12|0)>>2;if((zv+8|0)>>>0>Me[g]>>>0)Q(r,0|He.__str137,8);else{var Vv=Or+zv|0,le=0|Vv;oe=1919250543,Ae[le]=255&oe,oe>>=8,Ae[le+1]=255&oe,oe>>=8,Ae[le+2]=255&oe,oe>>=8,Ae[le+3]=255&oe;var be=Vv+4|0;oe=1919906913,Ae[be]=255&oe,oe>>=8,Ae[be+1]=255&oe,oe>>=8,Ae[be+2]=255&oe,oe>>=8,Ae[be+3]=255&oe;var Bv=Se[y]+8|0;Se[y]=Bv}var A=(a+4|0)>>2,Hv=(Ae[Se[Se[A]+4>>2]]-97&255&255)<26;e:do if(Hv){var Kv=Me[cr],Yv=0==(0|Kv);do if(!Yv){var Gv=Me[y];if(Gv>>>0>=Me[g]>>>0)break;Se[y]=Gv+1|0,Ae[Kv+Gv|0]=32;break e}while(0);Y(r,32)}while(0);var Wv=Me[cr],Zv=0==(0|Wv);do{if(!Zv){var Qv=Me[y],qv=Me[A],$v=Me[qv+8>>2];if(($v+Qv|0)>>>0>Me[g]>>>0){var Jv=qv,rt=$v;break}var at=Wv+Qv|0,et=Se[qv+4>>2];Pa(at,et,$v,1);var it=Se[y]+Se[Se[A]+8>>2]|0;Se[y]=it;break r}var vt=Me[A],Jv=vt,rt=Se[vt+8>>2]}while(0);var rt,Jv,tt=Se[Jv+4>>2];Q(r,tt,rt);break r}if(41==(0|Ir)){var E=(r+8|0)>>2,ft=Me[E];if((ft+9|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str10180,9);else{for(var _t=Or+ft|0,ie=0|He.__str10180,ve=_t,te=ie+9;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var st=Se[E]+9|0;Se[E]=st}var nt=Se[pr+2];H(r,nt);break r}if(42==(0|Ir)){var p=(r+8|0)>>2,ot=Me[p];if((ot+9|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str10180,9);else{for(var lt=Or+ot|0,ie=0|He.__str10180,ve=lt,te=ie+9;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var bt=Se[p]+9|0;Se[p]=bt}er(r,a);break r}if(43==(0|Ir)){var kt=a+4|0,ut=Se[kt>>2],ct=42==(0|Se[ut>>2]);e:do if(ct){var w=(r+8|0)>>2,ht=Me[w],dt=r+12|0;ht>>>0<Me[dt>>2]>>>0?(Se[w]=ht+1|0,Ae[Or+ht|0]=40):Y(r,40);var wt=Se[kt>>2];er(r,wt);var pt=Me[cr],Et=0==(0|pt);do if(!Et){var At=Me[w];if(At>>>0>=Me[dt>>2]>>>0)break;Se[w]=At+1|0,Ae[pt+At|0]=41;break e}while(0);Y(r,41)}else ir(r,ut);while(0);var gt=Me[cr],yt=0==(0|gt);do{if(!yt){var mt=r+8|0,St=Me[mt>>2];if(St>>>0>=Me[Er+3]>>>0){gr=232;break}Se[mt>>2]=St+1|0,Ae[gt+St|0]=40,gr=233;break}gr=232}while(0);232==gr&&Y(r,40);var Mt=Se[pr+2];H(r,Mt);var Ct=Me[cr],Rt=0==(0|Ct);do if(!Rt){var Tt=r+8|0,Ot=Me[Tt>>2];if(Ot>>>0>=Me[Er+3]>>>0)break;Se[Tt>>2]=Ot+1|0,Ae[Ct+Ot|0]=41;break r}while(0);Y(r,41);break r}if(44==(0|Ir)){var d=(a+8|0)>>2;if(45==(0|Se[Se[d]>>2])){var h=(a+4|0)>>2,Nt=Se[h],It=40==(0|Se[Nt>>2]);do if(It){var Pt=Se[Nt+4>>2];if(1!=(0|Se[Pt+8>>2]))break;if(Ae[Se[Pt+4>>2]]<<24>>24!=62)break;var Dt=r+8|0,Lt=Me[Dt>>2];Lt>>>0<Me[Er+3]>>>0?(Se[Dt>>2]=Lt+1|0,Ae[Or+Lt|0]=40):Y(r,40)}while(0);var Ft=Me[cr],Xt=0==(0|Ft);do{if(!Xt){var jt=r+8|0,Ut=Me[jt>>2];if(Ut>>>0>=Me[Er+3]>>>0){gr=248;break}Se[jt>>2]=Ut+1|0,Ae[Ft+Ut|0]=40,gr=249;break}gr=248}while(0);248==gr&&Y(r,40);var xt=Se[Se[d]+4>>2];H(r,xt);var zt=Me[cr],Vt=0==(0|zt);do{if(!Vt){var c=(r+8|0)>>2,Bt=Me[c];if((Bt+2|0)>>>0>Me[Er+3]>>>0){gr=252;break}var Ht=zt+Bt|0;oe=8233,Ae[Ht]=255&oe,oe>>=8,Ae[Ht+1]=255&oe;var Kt=Se[c]+2|0;Se[c]=Kt,gr=253;break}gr=252}while(0);252==gr&&Q(r,0|He.__str139,2);var Yt=Se[h];ir(r,Yt);var Gt=Me[cr],Wt=0==(0|Gt);do{if(!Wt){var u=(r+8|0)>>2,Zt=Me[u];if((Zt+2|0)>>>0>Me[Er+3]>>>0){gr=256;break}var Qt=Gt+Zt|0;oe=10272,Ae[Qt]=255&oe,oe>>=8,Ae[Qt+1]=255&oe;var qt=Se[u]+2|0;Se[u]=qt,gr=257;break}gr=256}while(0);256==gr&&Q(r,0|He.__str140,2);var $t=Se[Se[d]+8>>2];H(r,$t);var Jt=Me[cr],rf=0==(0|Jt);do{if(!rf){var af=r+8|0,ef=Me[af>>2];if(ef>>>0>=Me[Er+3]>>>0){gr=260;break}Se[af>>2]=ef+1|0,Ae[Jt+ef|0]=41,gr=261;break}gr=260}while(0);260==gr&&Y(r,41);var vf=Se[h];if(40!=(0|Se[vf>>2]))break r;var tf=Se[vf+4>>2];if(1!=(0|Se[tf+8>>2]))break r;if(Ae[Se[tf+4>>2]]<<24>>24!=62)break r;var ff=Me[cr],_f=0==(0|ff);do if(!_f){var sf=r+8|0,nf=Me[sf>>2];if(nf>>>0>=Me[Er+3]>>>0)break;Se[sf>>2]=nf+1|0,Ae[ff+nf|0]=41;break r}while(0);Y(r,41);break r}Z(r);break r}if(45==(0|Ir)){Z(r);break r}if(46==(0|Ir)){var of=a+4|0,k=(a+8|0)>>2,lf=Se[k],bf=47==(0|Se[lf>>2]);do if(bf){if(48!=(0|Se[Se[lf+8>>2]>>2]))break;var b=(r+8|0)>>2,kf=Me[b],l=(r+12|0)>>2;kf>>>0<Me[l]>>>0?(Se[b]=kf+1|0,Ae[Or+kf|0]=40):Y(r,40);var uf=Se[Se[k]+4>>2];H(r,uf);var cf=Me[cr],hf=0==(0|cf);do{if(!hf){var df=Me[b];if((df+2|0)>>>0>Me[l]>>>0){gr=278;break}var wf=cf+df|0;oe=8233,Ae[wf]=255&oe,oe>>=8,Ae[wf+1]=255&oe;var pf=Se[b]+2|0;Se[b]=pf,gr=279;break}gr=278}while(0);278==gr&&Q(r,0|He.__str139,2);var Ef=Se[of>>2];ir(r,Ef);var Af=Me[cr],gf=0==(0|Af);do{if(!gf){var yf=Me[b];if((yf+2|0)>>>0>Me[l]>>>0){gr=282;break}var mf=Af+yf|0;oe=10272,Ae[mf]=255&oe,oe>>=8,Ae[mf+1]=255&oe;var Sf=Se[b]+2|0;Se[b]=Sf,gr=283;break}gr=282}while(0);282==gr&&Q(r,0|He.__str140,2);var Mf=Se[Se[Se[k]+8>>2]+4>>2];H(r,Mf);var Cf=Me[cr],Rf=0==(0|Cf);do{if(!Rf){var Tf=Me[b];if((Tf+5|0)>>>0>Me[l]>>>0){gr=286;break}var Of=Cf+Tf|0;Ae[Of]=Ae[0|He.__str141],Ae[Of+1]=Ae[(0|He.__str141)+1],Ae[Of+2]=Ae[(0|He.__str141)+2],Ae[Of+3]=Ae[(0|He.__str141)+3],Ae[Of+4]=Ae[(0|He.__str141)+4];var Nf=Se[b]+5|0;Se[b]=Nf,gr=287;break}gr=286}while(0);286==gr&&Q(r,0|He.__str141,5);var If=Se[Se[Se[k]+8>>2]+8>>2];H(r,If);var Pf=Me[cr],Df=0==(0|Pf);do if(!Df){var Lf=Me[b];if(Lf>>>0>=Me[l]>>>0)break;Se[b]=Lf+1|0,Ae[Pf+Lf|0]=41;break r}while(0);Y(r,41);break r}while(0);Z(r);break r}if(47==(0|Ir)||48==(0|Ir)){Z(r);break r}if(49==(0|Ir)||50==(0|Ir)){var Ff=a+4|0,Xf=Se[Ff>>2],jf=33==(0|Se[Xf>>2]);do{if(jf){var Uf=Me[Se[Xf+4>>2]+16>>2];if(1==(0|Uf)||2==(0|Uf)||3==(0|Uf)||4==(0|Uf)||5==(0|Uf)||6==(0|Uf)){var xf=a+8|0;if(0!=(0|Se[Se[xf>>2]>>2])){var zf=Uf;break}if(50==(0|Ir)){var Vf=r+8|0,Bf=Me[Vf>>2];Bf>>>0<Me[Er+3]>>>0?(Se[Vf>>2]=Bf+1|0,Ae[Or+Bf|0]=45):Y(r,45)}var Hf=Se[xf>>2];if(H(r,Hf),2==(0|Uf)){var Kf=Me[cr],Yf=0==(0|Kf);do if(!Yf){var Gf=r+8|0,Wf=Me[Gf>>2];if(Wf>>>0>=Me[Er+3]>>>0)break;Se[Gf>>2]=Wf+1|0,Ae[Kf+Wf|0]=117;break r}while(0);Y(r,117);break r}if(3==(0|Uf)){var Zf=Me[cr],Qf=0==(0|Zf);do if(!Qf){var qf=r+8|0,$f=Me[qf>>2];if($f>>>0>=Me[Er+3]>>>0)break;Se[qf>>2]=$f+1|0,Ae[Zf+$f|0]=108;break r}while(0);Y(r,108);break r}if(4==(0|Uf)){var Jf=Me[cr],r_=0==(0|Jf);do if(!r_){var o=(r+8|0)>>2,a_=Me[o];if((a_+2|0)>>>0>Me[Er+3]>>>0)break;var e_=Jf+a_|0;oe=27765,Ae[e_]=255&oe,oe>>=8,Ae[e_+1]=255&oe;var i_=Se[o]+2|0;Se[o]=i_;break r}while(0);Q(r,0|He.__str142,2);break r}if(5==(0|Uf)){var v_=Me[cr],t_=0==(0|v_);do if(!t_){var n=(r+8|0)>>2,f_=Me[n];if((f_+2|0)>>>0>Me[Er+3]>>>0)break;var __=v_+f_|0;oe=27756,Ae[__]=255&oe,oe>>=8,Ae[__+1]=255&oe;var s_=Se[n]+2|0;Se[n]=s_;break r}while(0);Q(r,0|He.__str143,2);break r}if(6==(0|Uf)){var n_=Me[cr],o_=0==(0|n_);do if(!o_){var s=(r+8|0)>>2,l_=Me[s];if((l_+3|0)>>>0>Me[Er+3]>>>0)break;var b_=n_+l_|0;Ae[b_]=Ae[0|He.__str144],Ae[b_+1]=Ae[(0|He.__str144)+1],Ae[b_+2]=Ae[(0|He.__str144)+2];var k_=Se[s]+3|0;Se[s]=k_;break r}while(0);Q(r,0|He.__str144,3);break r}break r}if(7==(0|Uf)){var _=Se[pr+2]>>2;if(0!=(0|Se[_])){var zf=7;break}if(!(1==(0|Se[_+2])&49==(0|Ir))){var zf=Uf;break}var u_=Ae[Se[_+1]]<<24>>24;if(48==(0|u_)){var f=(r+8|0)>>2,c_=Me[f];if((c_+5|0)>>>0>Me[Er+3]>>>0){Q(r,0|He.__str145,5);break r}var h_=Or+c_|0;Ae[h_]=Ae[0|He.__str145],Ae[h_+1]=Ae[(0|He.__str145)+1],Ae[h_+2]=Ae[(0|He.__str145)+2],Ae[h_+3]=Ae[(0|He.__str145)+3],Ae[h_+4]=Ae[(0|He.__str145)+4];var d_=Se[f]+5|0;Se[f]=d_;break r}if(49==(0|u_)){var t=(r+8|0)>>2,w_=Me[t];if((w_+4|0)>>>0>Me[Er+3]>>>0){Q(r,0|He.__str146,4);break r}var p_=Or+w_|0;oe=1702195828,Ae[p_]=255&oe,oe>>=8,Ae[p_+1]=255&oe,oe>>=8,Ae[p_+2]=255&oe,oe>>=8,Ae[p_+3]=255&oe;var E_=Se[t]+4|0;Se[t]=E_;break r}var zf=Uf;break}var zf=Uf;break}var zf=0}while(0);var zf,v=(r+8|0)>>2,A_=Me[v],i=(r+12|0)>>2;A_>>>0<Me[i]>>>0?(Se[v]=A_+1|0,Ae[Or+A_|0]=40):Y(r,40);var g_=Se[Ff>>2];H(r,g_);var y_=Me[cr],m_=0==(0|y_);do{if(!m_){var S_=Me[v];if(S_>>>0>=Me[i]>>>0){gr=335;break}Se[v]=S_+1|0,Ae[y_+S_|0]=41,gr=336;break}gr=335}while(0);335==gr&&Y(r,41);var M_=50==(0|Se[Nr>>2]);e:do if(M_){var C_=Me[cr],R_=0==(0|C_);do if(!R_){var T_=Me[v];if(T_>>>0>=Me[i]>>>0)break;Se[v]=T_+1|0,Ae[C_+T_|0]=45;break e}while(0);Y(r,45)}while(0);if(8==(0|zf)){var O_=Me[cr],N_=0==(0|O_);do{if(!N_){var I_=Me[v];if(I_>>>0>=Me[i]>>>0){gr=345;break}Se[v]=I_+1|0,Ae[O_+I_|0]=91,gr=346;break}gr=345}while(0);345==gr&&Y(r,91);var P_=Se[pr+2];H(r,P_);var D_=Me[cr],L_=0==(0|D_);do if(!L_){var F_=Me[v];if(F_>>>0>=Me[i]>>>0)break;Se[v]=F_+1|0,Ae[D_+F_|0]=93;break r}while(0);Y(r,93);break r}var X_=Se[pr+2];H(r,X_);break r}Z(r);break r}}while(0);var e=(r+20|0)>>2,j_=Se[e],U_=0|Sr;Se[U_>>2]=j_,Se[e]=Sr,Se[Sr+4>>2]=a;var x_=Sr+8|0;Se[x_>>2]=0;var z_=Se[Er+4];Se[Sr+12>>2]=z_;var V_=Se[pr+1];H(r,V_),0==(0|Se[x_>>2])&&$(r,a);var B_=Se[U_>>2];Se[e]=B_}while(0);Oe=Ar}function K(r,a,e,i){var v=i>>2;Se[v]=r,Se[v+1]=r+e|0,Se[v+2]=a,Se[v+3]=r,Se[v+6]=e<<1,Se[v+5]=0,Se[v+9]=e,Se[v+8]=0,Se[v+10]=0,Se[v+11]=0,Se[v+12]=0}function Y(r,a){var e,i=r+4|0,v=Me[i>>2],t=0==(0|v);do if(!t){var e=(r+8|0)>>2,f=Me[e];if(f>>>0<Me[r+12>>2]>>>0)var _=v,s=f;else{tr(r,1);var n=Me[i>>2];if(0==(0|n))break;var _=n,s=Se[e]}var s,_;Ae[_+s|0]=255&a;var o=Se[e]+1|0;Se[e]=o}while(0)}function G(r,a,e,i){var v,t=i>>2,f=Oe;Oe+=4;var _=f,v=_>>2,s=0==(0|r);do if(s){if(0==(0|i)){var n=0;break}Se[t]=-3;var n=0}else{var o=0==(0|e);if(0!=(0|a)&o){if(0==(0|i)){var n=0;break}Se[t]=-3;var n=0}else{var l=W(r,_);if(0==(0|l)){if(0==(0|i)){var n=0;break}if(1==(0|Se[v])){Se[t]=-1;var n=0}else{Se[t]=-2;var n=0}}else{var b=0==(0|a);do if(b){if(o){var k=l;break}var u=Se[v];Se[e>>2]=u;var k=l}else{var c=Ca(l);if(c>>>0<Me[e>>2]>>>0){Ra(a,l);va(l);var k=a}else{va(a);var h=Se[v];Se[e>>2]=h;var k=l}}while(0);var k;if(0==(0|i)){var n=k;break}Se[t]=0;var n=k}}}while(0);var n;return Oe=f,n}function W(r,a){var e,i=Oe;Oe+=52;var v,t=i,e=t>>2;Se[a>>2]=0;var f=Ca(r),_=Ae[r]<<24>>24==95;do{if(_){if(Ae[r+1|0]<<24>>24==90){var s=0;v=13;break}v=3;break}v=3}while(0);do if(3==v){var n=Na(r,0|He.__str117,8);if(0!=(0|n)){var s=1;v=13;break}var o=Ae[r+8|0];if(o<<24>>24!=46&&o<<24>>24!=95&&o<<24>>24!=36){var s=1;v=13;break}var l=r+9|0,b=Ae[l];if(b<<24>>24!=68&&b<<24>>24!=73){
var s=1;v=13;break}if(Ae[r+10|0]<<24>>24!=95){var s=1;v=13;break}var k=f+29|0,u=Jr(k);if(0==(0|u)){Se[a>>2]=1;var c=0;v=19;break}Ae[l]<<24>>24==73?Pa(u,0|He.__str118,30,1):Pa(u,0|He.__str119,29,1);var h=r+11|0,c=(Ia(u,h),u);v=19;break}while(0);if(13==v){var s;K(r,17,f,t);var d=Se[e+6],w=Ta(),p=Oe;Oe+=12*d,Oe=Oe+3>>2<<2;var E=Oe;if(Oe+=4*Se[e+9],Oe=Oe+3>>2<<2,Se[e+4]=p,Se[e+7]=E,s)var A=N(t),g=A;else var y=T(t,1),g=y;var g,m=Ae[Se[e+3]]<<24>>24==0?g:0,S=Se[e+12]+f+10*Se[e+10]|0;if(0==(0|m))var M=0;else var C=S/8+S|0,R=B(17,m,C,a),M=R;var M;Oa(w);var c=M}var c;return Oe=i,c}function Z(r){var a=r+4|0,e=Se[a>>2];va(e),Se[a>>2]=0}function Q(r,a,e){var i,v=r+4|0,t=Me[v>>2],f=0==(0|t);do if(!f){var i=(r+8|0)>>2,_=Me[i];if((_+e|0)>>>0>Me[r+12>>2]>>>0){tr(r,e);var s=Me[v>>2];if(0==(0|s))break;var n=s,o=Se[i]}else var n=t,o=_;var o,n;Pa(n+o|0,a,e,1);var l=Se[i]+e|0;Se[i]=l}while(0)}function q(r,a,e){var i,v,t=a+e|0,f=(0|e)>0;r:do if(f)for(var _=t,s=r+4|0,i=(r+8|0)>>2,n=r+12|0,o=a;;){var o,l=(_-o|0)>3;a:do{if(l){if(Ae[o]<<24>>24!=95){v=21;break}if(Ae[o+1|0]<<24>>24!=95){v=21;break}if(Ae[o+2|0]<<24>>24!=85){v=21;break}for(var b=o+3|0,k=0;;){var k,b;if(b>>>0>=t>>>0){v=21;break a}var u=ge[b],c=u<<24>>24;if((u-48&255&255)<10)var h=c-48|0;else if((u-65&255&255)<6)var h=c-55|0;else{if((u-97&255&255)>=6)break;var h=c-87|0}var h,b=b+1|0,k=(k<<4)+h|0}if(!(u<<24>>24==95&k>>>0<256)){v=21;break}var d=Me[s>>2],w=0==(0|d);do if(!w){var p=Me[i];if(p>>>0>=Me[n>>2]>>>0)break;Se[i]=p+1|0,Ae[d+p|0]=255&k;var E=b;v=25;break a}while(0);Y(r,k);var E=b;v=25;break}v=21}while(0);a:do if(21==v){var A=Me[s>>2],g=0==(0|A);do if(!g){var y=Me[i];if(y>>>0>=Me[n>>2]>>>0)break;var m=Ae[o];Se[i]=y+1|0,Ae[A+y|0]=m;var E=o;break a}while(0);var S=Ae[o]<<24>>24;Y(r,S);var E=o}while(0);var E,M=E+1|0;if(M>>>0>=t>>>0)break r;var o=M}while(0)}function $(r,a){var e,i,v,t,f,_,s,n=r>>2,o=Se[a>>2];r:do if(22==(0|o)||25==(0|o)){var l=Me[n+1],b=0==(0|l);do if(!b){var _=(r+8|0)>>2,k=Me[_];if((k+9|0)>>>0>Me[n+3]>>>0)break;for(var u=l+k|0,c=0|He.__str147,h=u,d=c+9;c<d;c++,h++)Ae[h]=Ae[c];var w=Se[_]+9|0;Se[_]=w;break r}while(0);Q(r,0|He.__str147,9)}else if(23==(0|o)||26==(0|o)){var p=Me[n+1],E=0==(0|p);do if(!E){var f=(r+8|0)>>2,A=Me[f];if((A+9|0)>>>0>Me[n+3]>>>0)break;for(var g=p+A|0,c=0|He.__str148,h=g,d=c+9;c<d;c++,h++)Ae[h]=Ae[c];var y=Se[f]+9|0;Se[f]=y;break r}while(0);Q(r,0|He.__str148,9)}else if(24==(0|o)||27==(0|o)){var m=Me[n+1],S=0==(0|m);do if(!S){var t=(r+8|0)>>2,M=Me[t];if((M+6|0)>>>0>Me[n+3]>>>0)break;var C=m+M|0;Ae[C]=Ae[0|He.__str149],Ae[C+1]=Ae[(0|He.__str149)+1],Ae[C+2]=Ae[(0|He.__str149)+2],Ae[C+3]=Ae[(0|He.__str149)+3],Ae[C+4]=Ae[(0|He.__str149)+4],Ae[C+5]=Ae[(0|He.__str149)+5];var R=Se[t]+6|0;Se[t]=R;break r}while(0);Q(r,0|He.__str149,6)}else if(28==(0|o)){var T=Me[n+1],O=0==(0|T);do{if(!O){var N=r+8|0,I=Me[N>>2];if(I>>>0>=Me[n+3]>>>0){s=17;break}Se[N>>2]=I+1|0,Ae[T+I|0]=32,s=18;break}s=17}while(0);17==s&&Y(r,32);var P=Se[a+8>>2];H(r,P)}else if(29==(0|o)){if(0!=(4&Se[n]|0))break;var D=Me[n+1],L=0==(0|D);do if(!L){var F=r+8|0,X=Me[F>>2];if(X>>>0>=Me[n+3]>>>0)break;Se[F>>2]=X+1|0,Ae[D+X|0]=42;break r}while(0);Y(r,42)}else if(30==(0|o)){var j=Me[n+1],U=0==(0|j);do if(!U){var x=r+8|0,z=Me[x>>2];if(z>>>0>=Me[n+3]>>>0)break;Se[x>>2]=z+1|0,Ae[j+z|0]=38;break r}while(0);Y(r,38)}else if(31==(0|o)){var V=Me[n+1],B=0==(0|V);do if(!B){var v=(r+8|0)>>2,K=Me[v];if((K+8|0)>>>0>Me[n+3]>>>0)break;var G=V+K|0,W=0|G;oe=1886220131,Ae[W]=255&oe,oe>>=8,Ae[W+1]=255&oe,oe>>=8,Ae[W+2]=255&oe,oe>>=8,Ae[W+3]=255&oe;var Z=G+4|0;oe=544761196,Ae[Z]=255&oe,oe>>=8,Ae[Z+1]=255&oe,oe>>=8,Ae[Z+2]=255&oe,oe>>=8,Ae[Z+3]=255&oe;var q=Se[v]+8|0;Se[v]=q;break r}while(0);Q(r,0|He.__str150,8)}else if(32==(0|o)){var $=Me[n+1],J=0==(0|$);do if(!J){var i=(r+8|0)>>2,rr=Me[i];if((rr+10|0)>>>0>Me[n+3]>>>0)break;for(var ar=$+rr|0,c=0|He.__str151,h=ar,d=c+10;c<d;c++,h++)Ae[h]=Ae[c];var er=Se[i]+10|0;Se[i]=er;break r}while(0);Q(r,0|He.__str151,10)}else if(37==(0|o)){var ir=r+4|0,vr=Me[ir>>2],tr=0==(0|vr);do{if(!tr){var fr=r+8|0,_r=Me[fr>>2];if(0!=(0|_r)&&Ae[vr+(_r-1)|0]<<24>>24==40){s=42;break}if(_r>>>0>=Me[n+3]>>>0){s=41;break}Se[fr>>2]=_r+1|0,Ae[vr+_r|0]=32,s=42;break}s=41}while(0);41==s&&Y(r,32);var sr=Se[a+4>>2];H(r,sr);var nr=Me[ir>>2],or=0==(0|nr);do if(!or){var e=(r+8|0)>>2,lr=Me[e];if((lr+3|0)>>>0>Me[n+3]>>>0)break;var br=nr+lr|0;Ae[br]=Ae[0|He.__str135],Ae[br+1]=Ae[(0|He.__str135)+1],Ae[br+2]=Ae[(0|He.__str135)+2];var kr=Se[e]+3|0;Se[e]=kr;break r}while(0);Q(r,0|He.__str135,3)}else if(3==(0|o)){var ur=Se[a+4>>2];H(r,ur)}else H(r,a);while(0)}function J(r){var a=r+20|0,e=Se[a>>2];if((0|e)<(0|Se[r+24>>2])){var i=Se[r+16>>2]+12*e|0,v=e+1|0;Se[a>>2]=v;var t=i}else var t=0;var t;return t}function rr(r,a,e){var i,v,t,f,_=r>>2,s=e,t=s>>2,n=0;r:for(;;){var n,s,o=0==(0|s);do if(!o){if(0!=(0|Se[t+2]))break;var l=Se[Se[t+1]>>2];if(29==(0|l)||30==(0|l)){f=9;break r}if(22==(0|l)||23==(0|l)||24==(0|l)||28==(0|l)||31==(0|l)||32==(0|l)||37==(0|l)){var b=Se[_+1];f=12;break r}var s=Se[t],t=s>>2,n=1;continue r}while(0);if(0!=(0|Se[a+4>>2])&0==(0|n)){f=9;break}var k=0,u=r+4|0,v=u>>2;f=22;break}do if(9==f){var c=Se[_+1];if(0==(0|c)){f=17;break}var h=Se[_+2];if(0==(0|h)){var d=c;f=13;break}var w=Ae[c+(h-1)|0];if(w<<24>>24==40||w<<24>>24==42){f=18;break}var b=c;f=12;break}while(0);do if(12==f){var b;if(0==(0|b)){f=17;break}var d=b;f=13;break}while(0);do if(13==f){var d,p=r+8|0,E=Me[p>>2];if(0!=(0|E)&&Ae[d+(E-1)|0]<<24>>24==32){f=18;break}if(E>>>0>=Me[_+3]>>>0){f=17;break}Se[p>>2]=E+1|0,Ae[d+E|0]=32,f=18;break}while(0);do if(17==f){Y(r,32),f=18;break}while(0);r:do if(18==f){var A=r+4|0,g=Me[A>>2],y=0==(0|g);do if(!y){var m=r+8|0,S=Me[m>>2];if(S>>>0>=Me[_+3]>>>0)break;Se[m>>2]=S+1|0,Ae[g+S|0]=40;var k=1,u=A,v=u>>2;break r}while(0);Y(r,40);var k=1,u=A,v=u>>2}while(0);var u,k,i=(r+20|0)>>2,M=Se[i];Se[i]=0,vr(r,e,0);r:do if(k){var C=Me[v],R=0==(0|C);do if(!R){var T=r+8|0,O=Me[T>>2];if(O>>>0>=Me[_+3]>>>0)break;Se[T>>2]=O+1|0,Ae[C+O|0]=41;break r}while(0);Y(r,41)}while(0);var N=Me[v],I=0==(0|N);do{if(!I){var P=r+8|0,D=Me[P>>2];if(D>>>0>=Me[_+3]>>>0){f=30;break}Se[P>>2]=D+1|0,Ae[N+D|0]=40,f=31;break}f=30}while(0);30==f&&Y(r,40);var L=Se[a+8>>2];0!=(0|L)&&H(r,L);var F=Me[v],X=0==(0|F);do{if(!X){var j=r+8|0,U=Me[j>>2];if(U>>>0>=Me[_+3]>>>0){f=36;break}Se[j>>2]=U+1|0,Ae[F+U|0]=41,f=37;break}f=36}while(0);36==f&&Y(r,41),vr(r,e,1),Se[i]=M}function ar(r,a,e){var i,v,t,f=r>>2,_=0==(0|e);do{if(!_){var s=e,v=s>>2;r:for(;;){var s;if(0==(0|s)){var n=1;t=14;break}if(0==(0|Se[v+2])){var o=36==(0|Se[Se[v+1]>>2]),l=1&o^1;if(o){var n=l;t=14;break}var b=r+4|0,k=Me[b>>2],u=0==(0|k);do{if(!u){var i=(r+8|0)>>2,c=Me[i];if((c+2|0)>>>0>Me[f+3]>>>0){t=9;break}var h=k+c|0;oe=10272,Ae[h]=255&oe,oe>>=8,Ae[h+1]=255&oe;var d=Se[i]+2|0;Se[i]=d,vr(r,e,0),t=10;break}t=9}while(0);9==t&&(Q(r,0|He.__str140,2),vr(r,e,0));var w=Me[b>>2],p=0==(0|w);do if(!p){var E=r+8|0,A=Me[E>>2];if(A>>>0>=Me[f+3]>>>0)break;Se[E>>2]=A+1|0,Ae[w+A|0]=41;var g=l;t=15;break r}while(0);Y(r,41);var g=l;t=15;break}var s=Se[v],v=s>>2}if(14==t){var n;vr(r,e,0);var g=n}var g;if(0!=(0|g)){t=17;break}var y=r+4|0;t=21;break}t=17}while(0);r:do if(17==t){var m=r+4|0,S=Me[m>>2],M=0==(0|S);do if(!M){var C=r+8|0,R=Me[C>>2];if(R>>>0>=Me[f+3]>>>0)break;Se[C>>2]=R+1|0,Ae[S+R|0]=32;var y=m;break r}while(0);Y(r,32);var y=m}while(0);var y,T=Me[y>>2],O=0==(0|T);do{if(!O){var N=r+8|0,I=Me[N>>2];if(I>>>0>=Me[f+3]>>>0){t=24;break}Se[N>>2]=I+1|0,Ae[T+I|0]=91,t=25;break}t=24}while(0);24==t&&Y(r,91);var P=Se[a+4>>2];0!=(0|P)&&H(r,P);var D=Me[y>>2],L=0==(0|D);do{if(!L){var F=r+8|0,X=Me[F>>2];if(X>>>0>=Me[f+3]>>>0){t=30;break}Se[F>>2]=X+1|0,Ae[D+X|0]=93,t=31;break}t=30}while(0);30==t&&Y(r,93)}function er(r,a){var e,i,v,t,f,_,s=Oe;Oe+=8;var n,o=s,_=(a+4|0)>>2,l=Se[_];if(4==(0|Se[l>>2])){var f=(r+20|0)>>2,b=Se[f];Se[f]=0;var t=(r+16|0)>>2,k=Se[t],u=0|o;Se[u>>2]=k,Se[t]=o;var c=Se[_];Se[o+4>>2]=c;var h=Se[c+4>>2];H(r,h);var d=Se[u>>2];Se[t]=d;var v=(r+4|0)>>2,w=Me[v],p=0==(0|w);do{if(!p){var i=(r+8|0)>>2,E=Me[i],A=0==(0|E);do if(!A){if(Ae[w+(E-1)|0]<<24>>24!=60)break;E>>>0<Me[r+12>>2]>>>0?(Se[i]=E+1|0,Ae[w+E|0]=32):Y(r,32)}while(0);var g=Me[v];if(0==(0|g)){n=12;break}var y=Me[i];if(y>>>0>=Me[r+12>>2]>>>0){n=12;break}Se[i]=y+1|0,Ae[g+y|0]=60,n=13;break}n=12}while(0);12==n&&Y(r,60);var m=Se[Se[_]+8>>2];H(r,m);var S=Me[v],M=0==(0|S);do{if(!M){var e=(r+8|0)>>2,C=Me[e],R=0==(0|C);do if(!R){if(Ae[S+(C-1)|0]<<24>>24!=62)break;C>>>0<Me[r+12>>2]>>>0?(Se[e]=C+1|0,Ae[S+C|0]=32):Y(r,32)}while(0);var T=Me[v];if(0==(0|T)){n=22;break}var O=Me[e];if(O>>>0>=Me[r+12>>2]>>>0){n=22;break}Se[e]=O+1|0,Ae[T+O|0]=62,n=23;break}n=22}while(0);22==n&&Y(r,62),Se[f]=b}else H(r,l);Oe=s}function ir(r,a){var e,i=40==(0|Se[a>>2]);r:do if(i){var v=Me[r+4>>2],t=0==(0|v);do{if(!t){var e=(r+8|0)>>2,f=Me[e],_=a+4|0,s=Me[_>>2],n=Me[s+8>>2];if((n+f|0)>>>0>Me[r+12>>2]>>>0){var o=s,l=n;break}var b=v+f|0,k=Se[s+4>>2];Pa(b,k,n,1);var u=Se[e]+Se[Se[_>>2]+8>>2]|0;Se[e]=u;break r}var c=Me[a+4>>2],o=c,l=Se[c+8>>2]}while(0);var l,o,h=Se[o+4>>2];Q(r,h,l)}else H(r,a);while(0)}function vr(r,a,e){var i,v,t,f,_,f=(r+4|0)>>2,s=0==(0|e),t=(r+16|0)>>2;r:do if(s)for(var n=a;;){var n;if(0==(0|n)){_=29;break r}if(0==(0|Se[f])){_=29;break r}var o=n+8|0,l=0==(0|Se[o>>2]);do if(l){var b=n+4|0;if((Se[Se[b>>2]>>2]-25|0)>>>0<3)break;Se[o>>2]=1;var k=Me[t],u=Se[n+12>>2];Se[t]=u;var c=Me[b>>2],h=Se[c>>2];if(35==(0|h)){var d=n,w=k,p=c;_=14;break r}if(36==(0|h)){var E=n,A=k,g=c;_=15;break r}if(2==(0|h)){var y=k,m=b;_=16;break r}$(r,c),Se[t]=k}while(0);var n=Se[n>>2]}else for(var S=a;;){var S;if(0==(0|S)){_=29;break r}if(0==(0|Se[f])){_=29;break r}var M=S+8|0;if(0==(0|Se[M>>2])){Se[M>>2]=1;var C=Me[t],R=Se[S+12>>2];Se[t]=R;var T=S+4|0,O=Me[T>>2],N=Se[O>>2];if(35==(0|N)){var d=S,w=C,p=O;_=14;break r}if(36==(0|N)){var E=S,A=C,g=O;_=15;break r}if(2==(0|N)){var y=C,m=T;_=16;break r}$(r,O),Se[t]=C}var S=Se[S>>2]}while(0);if(14==_){var p,w,d,I=Se[d>>2];rr(r,p,I),Se[t]=w}else if(15==_){var g,A,E,P=Se[E>>2];ar(r,g,P),Se[t]=A}else if(16==_){var m,y,v=(r+20|0)>>2,D=Se[v];Se[v]=0;var L=Se[Se[m>>2]+4>>2];H(r,L),Se[v]=D;var F=0==(4&Se[r>>2]|0),X=Me[f],j=0!=(0|X);r:do if(F){do if(j){var i=(r+8|0)>>2,U=Me[i];if((U+2|0)>>>0>Me[r+12>>2]>>>0)break;var x=X+U|0;oe=14906,Ae[x]=255&oe,oe>>=8,Ae[x+1]=255&oe;var z=Se[i]+2|0;Se[i]=z;break r}while(0);Q(r,0|He.__str120,2)}else{do if(j){var V=r+8|0,B=Me[V>>2];if(B>>>0>=Me[r+12>>2]>>>0)break;Se[V>>2]=B+1|0,Ae[X+B|0]=46;break r}while(0);Y(r,46)}while(0);var K=Me[Se[m>>2]+8>>2],G=(Se[K>>2]-25|0)>>>0<3;r:do if(G)for(var W=K;;){var W,Z=Me[W+4>>2];if((Se[Z>>2]-25|0)>>>0>=3){var q=Z;break r}var W=Z}else var q=K;while(0);var q;H(r,q),Se[t]=y}}function tr(r,a){var e,e=(r+4|0)>>2,i=Se[e],v=0==(0|i);r:do if(!v){for(var t=Se[r+8>>2]+a|0,f=r+12|0,_=Se[f>>2],s=i;;){var s,_;if(t>>>0<=_>>>0)break r;var n=_<<1,o=fa(s,n);if(0==(0|o))break;Se[e]=o,Se[f>>2]=n;var _=n,s=o}var l=Se[e];va(l),Se[e]=0,Se[r+24>>2]=1}while(0)}function fr(r,a,e){var i,v=J(r),i=v>>2;return 0!=(0|v)&&(Se[i]=21,Se[i+1]=a,Se[i+2]=e),v}function _r(r){var a,a=(r+12|0)>>2,e=Se[a],i=Ae[e]<<24>>24;if(88==(0|i)){var v=e+1|0;Se[a]=v;var t=nr(r),f=Se[a],_=f+1|0;Se[a]=_;var s=Ae[f]<<24>>24==69?t:0,n=s}else if(76==(0|i))var o=or(r),n=o;else var l=N(r),n=l;var n;return n}function sr(r){var a,a=(r+12|0)>>2,e=Se[a],i=Ae[e];if(i<<24>>24==110){var v=e+1|0;Se[a]=v;var t=1,f=Ae[v],_=v}else var t=0,f=i,_=e;var _,f,t,s=(f-48&255&255)<10;r:do if(s)for(var n=f,o=0,l=_;;){var l,o,n,b=(n<<24>>24)-48+10*o|0,k=l+1|0;Se[a]=k;var u=ge[k];if((u-48&255&255)>=10){var c=b;break r}var n=u,o=b,l=k}else var c=0;while(0);var c,h=0==(0|t)?c:0|-c;return h}function nr(r){var a,e,a=(r+12|0)>>2,i=Se[a],v=Ae[i];do{if(v<<24>>24==76){var t=or(r),f=t;e=21;break}if(v<<24>>24==84){var _=x(r),f=_;e=21;break}if(v<<24>>24==115){if(Ae[i+1|0]<<24>>24!=114){e=8;break}var s=i+2|0;Se[a]=s;var n=N(r),o=br(r);if(Ae[Se[a]]<<24>>24==73){var l=z(r),b=D(r,4,o,l),k=D(r,1,n,b),f=k;e=21;break}var u=D(r,1,n,o),f=u;e=21;break}e=8}while(0);r:do if(8==e){var c=kr(r);if(0==(0|c)){var f=0;break}var h=0|c,d=Se[h>>2],w=40==(0|d);do{if(w){var p=c+4|0,E=r+48|0,A=Se[Se[p>>2]+8>>2]-2+Se[E>>2]|0;Se[E>>2]=A;var g=Se[h>>2];if(40!=(0|g)){var y=g;e=13;break}var m=Se[p>>2],S=Se[m>>2],M=Da(S,0|He.__str90);if(0!=(0|M)){var C=m;e=15;break}var R=N(r),T=D(r,43,c,R),f=T;break r}var y=d;e=13}while(0);do if(13==e){var y;if(40==(0|y)){var C=Se[c+4>>2];e=15;break}if(41==(0|y)){var O=c+4|0;e=17;break}if(42==(0|y)){e=18;break}var f=0;break r}while(0);do if(15==e){var C,O=C+12|0;e=17;break}while(0);do if(17==e){var O,I=Se[O>>2];if(1==(0|I))break;if(2==(0|I)){var P=nr(r),L=nr(r),F=D(r,45,P,L),X=D(r,44,c,F);return X}if(3==(0|I)){var j=nr(r),U=nr(r),V=nr(r),B=D(r,48,U,V),H=D(r,47,j,B),K=D(r,46,c,H);return K}var f=0;break r}while(0);var Y=nr(r),G=D(r,43,c,Y);return G}while(0);var f;return f}function or(r){var a,a=(r+12|0)>>2,e=Se[a],i=e+1|0;Se[a]=i;var v=Ae[e]<<24>>24==76;r:do if(v){if(Ae[i]<<24>>24==95)var t=T(r,0),f=t;else{var _=N(r);if(0==(0|_)){var s=0;break}var n=33==(0|Se[_>>2]);do if(n){var o=Se[_+4>>2];if(0==(0|Se[o+16>>2]))break;var l=r+48|0,b=Se[l>>2]-Se[o+4>>2]|0;Se[l>>2]=b}while(0);var k=Se[a];if(Ae[k]<<24>>24==110){var u=k+1|0;Se[a]=u;var c=50,h=u}else var c=49,h=k;for(var h,c,d=h;;){var d,w=Ae[d];if(w<<24>>24==69)break;if(w<<24>>24==0){var s=0;break r}var p=d+1|0;Se[a]=p;var d=p}var E=lr(r,h,d-h|0),A=D(r,c,_,E),f=A}var f,g=Se[a],y=g+1|0;Se[a]=y;var m=Ae[g]<<24>>24==69?f:0,s=m}else var s=0;while(0);var s;return s}function lr(r,a,e){var i=J(r),v=m(i,a,e),t=0==(0|v)?0:i;return t}function br(r){var a=r+12|0,e=Me[a>>2],i=ge[e],v=(i-48&255&255)<10;do if(v)var t=L(r),f=t;else if((i-97&255&255)<26){var _=kr(r);if(0==(0|_)){var f=0;break}if(40!=(0|Se[_>>2])){var f=_;break}var s=r+48|0,n=Se[Se[_+4>>2]+8>>2]+Se[s>>2]+7|0;Se[s>>2]=n;var f=_}else if(i<<24>>24==67||i<<24>>24==68)var o=hr(r),f=o;else{if(i<<24>>24!=76){var f=0;break}Se[a>>2]=e+1|0;var l=L(r);if(0==(0|l)){var f=0;break}var b=dr(r),k=0==(0|b)?0:l,f=k}while(0);var f;return f}function kr(r){var a,e,a=(r+12|0)>>2,i=Se[a],v=i+1|0;Se[a]=v;var t=ge[i],f=i+2|0;Se[a]=f;var _=ge[v];do{if(t<<24>>24==118){if((_-48&255&255)>=10){var s=49,n=0;e=6;break}var o=(_<<24>>24)-48|0,l=L(r),b=ur(r,o,l),k=b;e=14;break}if(t<<24>>24==99){if(_<<24>>24!=118){var s=49,n=0;e=6;break}var u=N(r),c=D(r,42,u,0),k=c;e=14;break}var s=49,n=0;e=6}while(0);r:do if(6==e){for(;;){var n,s,h=(s-n)/2+n|0,d=(h<<4)+ri|0,w=Se[d>>2],p=Ae[w],E=t<<24>>24==p<<24>>24;if(E&&_<<24>>24==Ae[w+1|0]<<24>>24)break;var A=t<<24>>24<p<<24>>24;do if(A)var g=h,y=n;else{if(E&&_<<24>>24<Ae[w+1|0]<<24>>24){var g=h,y=n;break}var g=s,y=h+1|0}while(0);var y,g;if((0|y)==(0|g)){var k=0;break r}var s=g,n=y}var m=cr(r,d),k=m}while(0);var k;return k}function ur(r,a,e){var i=J(r),v=S(i,a,e),t=0==(0|v)?0:i;return t}function cr(r,a){var e=J(r);return 0!=(0|e)&&(Se[e>>2]=40,Se[e+4>>2]=a),e}function hr(r){var a,e,i=Se[r+44>>2],e=i>>2,v=0==(0|i);do if(!v){var t=Se[e];if(0==(0|t)){var f=r+48|0,_=Se[f>>2]+Se[e+2]|0;Se[f>>2]=_}else{if(21!=(0|t))break;var s=r+48|0,n=Se[s>>2]+Se[e+2]|0;Se[s>>2]=n}}while(0);var a=(r+12|0)>>2,o=Se[a],l=o+1|0;Se[a]=l;var b=Ae[o]<<24>>24;do if(67==(0|b)){var k=o+2|0;Se[a]=k;var u=Ae[l]<<24>>24;if(49==(0|u))var c=1;else if(50==(0|u))var c=2;else{if(51!=(0|u)){var h=0;break}var c=3}var c,d=wr(r,c,i),h=d}else if(68==(0|b)){var w=o+2|0;Se[a]=w;var p=Ae[l]<<24>>24;if(48==(0|p))var E=1;else if(49==(0|p))var E=2;else{if(50!=(0|p)){var h=0;break}var E=3}var E,A=pr(r,E,i),h=A}else var h=0;while(0);var h;return h}function dr(r){var a=r+12|0,e=Se[a>>2];if(Ae[e]<<24>>24==95){var i=e+1|0;Se[a>>2]=i;var v=sr(r),t=v>>>31^1}else var t=1;var t;return t}function wr(r,a,e){var i=J(r),v=M(i,a,e),t=0==(0|v)?0:i;return t}function pr(r,a,e){var i=J(r),v=C(i,a,e),t=0==(0|v)?0:i;return t}function Er(r,a){var e=J(r);return 0!=(0|e)&&(Se[e>>2]=5,Se[e+4>>2]=a),e}function Ar(r){var a,a=(r+12|0)>>2,e=Se[a],i=Ae[e]<<24>>24;do if(78==(0|i))var v=gr(r),t=v;else if(90==(0|i))var f=yr(r),t=f;else if(76==(0|i))var _=br(r),t=_;else if(83==(0|i)){if(Ae[e+1|0]<<24>>24==116){var s=e+2|0;Se[a]=s;var n=lr(r,0|He.__str152,3),o=br(r),l=D(r,1,n,o),b=r+48|0,k=Se[b>>2]+3|0;Se[b>>2]=k;var u=0,c=l}else var h=V(r,0),u=1,c=h;var c,u;if(Ae[Se[a]]<<24>>24!=73){var t=c;break}if(0==(0|u)){var d=R(r,c);if(0==(0|d)){var t=0;break}}var w=z(r),p=D(r,4,c,w),t=p}else{var E=br(r);if(Ae[Se[a]]<<24>>24!=73){var t=E;break}var A=R(r,E);if(0==(0|A)){var t=0;break}var g=z(r),y=D(r,4,E,g),t=y}while(0);var t;return t}function gr(r){var a,e=Oe;Oe+=4;var i=e,a=(r+12|0)>>2,v=Se[a],t=v+1|0;Se[a]=t;var f=Ae[v]<<24>>24==78;do if(f){var _=I(r,i,1);if(0==(0|_)){var s=0;break}var n=mr(r);if(Se[_>>2]=n,0==(0|n)){var s=0;break}var o=Se[a],l=o+1|0;if(Se[a]=l,Ae[o]<<24>>24!=69){var s=0;break}var s=Se[i>>2]}else var s=0;while(0);var s;return Oe=e,s}function yr(r){var a,a=(r+12|0)>>2,e=Se[a],i=e+1|0;Se[a]=i;var v=Ae[e]<<24>>24==90;do if(v){var t=O(r,0),f=Se[a],_=f+1|0;if(Se[a]=_,Ae[f]<<24>>24!=69){var s=0;break}if(Ae[_]<<24>>24==115){var n=f+2|0;Se[a]=n;var o=dr(r);if(0==(0|o)){var s=0;break}var l=lr(r,0|He.__str168,14),b=D(r,2,t,l),s=b}else{var k=Ar(r),u=dr(r);if(0==(0|u)){var s=0;break}var c=D(r,2,t,k),s=c}}else var s=0;while(0);var s;return s}function mr(r){var a,e=r+12|0,i=0;r:for(;;){var i,v=ge[Se[e>>2]];if(v<<24>>24==0){var t=0;break}var f=(v-48&255&255)<10|(v-97&255&255)<26;do{if(!f){if(v<<24>>24==76||v<<24>>24==68||v<<24>>24==67){a=5;break}if(v<<24>>24==83){var _=V(r,1),s=_;a=10;break}if(v<<24>>24==73){if(0==(0|i)){var t=0;break r}var n=z(r),o=4,l=n;a=11;break}if(v<<24>>24==84){var b=x(r),s=b;a=10;break}if(v<<24>>24==69){var t=i;break r}var t=0;break r}a=5}while(0);do if(5==a){var k=br(r),s=k;a=10;break}while(0);do if(10==a){var s;if(0==(0|i)){var u=s;a=12;break}var o=1,l=s;a=11;break}while(0);if(11==a)var l,o,c=D(r,o,i,l),u=c;var u;if(v<<24>>24!=83)if(Ae[Se[e>>2]]<<24>>24!=69){var h=R(r,u);if(0==(0|h)){var t=0;break}var i=u}else var i=u;else var i=u}var t;return t}function Sr(r,a){var e,i,v=Oe;Oe+=4;var t=v,i=t>>2,e=(r+12|0)>>2,f=Se[e];if(Ae[f]<<24>>24==74){var _=f+1|0;Se[e]=_;var s=1}else var s=a;var s;Se[i]=0;var n=s,o=0,l=t;r:for(;;)for(var l,o,n,b=n,k=o;;){var k,b,u=Ae[Se[e]];if(u<<24>>24==0||u<<24>>24==69){var c=Se[i];if(0==(0|c)){var h=0;break r}var d=0==(0|Se[c+8>>2]);do if(d){var w=Se[c+4>>2];if(33!=(0|Se[w>>2])){var p=c;break}var E=Se[w+4>>2];if(9!=(0|Se[E+16>>2])){var p=c;break}var A=r+48|0,g=Se[A>>2]-Se[E+4>>2]|0;Se[A>>2]=g,Se[i]=0;var p=0}else var p=c;while(0);var p,y=D(r,35,k,p),h=y;break r}var m=N(r);if(0==(0|m)){var h=0;break r}if(0==(0|b)){var S=D(r,38,m,0);if(Se[l>>2]=S,0==(0|S)){var h=0;break r}var n=0,o=k,l=S+8|0;continue r}var b=0,k=m}var h;return Oe=v,h}function Mr(r){for(var a=r;;){var a;if(0==(0|a)){var e=0;break}var i=Se[a>>2];if(1!=(0|i)&&2!=(0|i)){if(6==(0|i)||7==(0|i)||42==(0|i)){var e=1;break}var e=0;break}var a=Se[a+8>>2]}var e;return e}function Cr(r){var a=r>>2;Se[a+3]=0,Se[a+2]=0,Se[a+1]=0,Se[a]=0,Se[a+4]=0}function Rr(r,a){var e,e=(r+12|0)>>2,i=Se[e],v=(Se[r+4>>2]-i|0)<(0|a);r:do if(v)var t=0;else{var f=i+a|0;Se[e]=f;var _=0==(4&Se[r+8>>2]|0);do if(!_){if(Ae[f]<<24>>24!=36)break;var s=a+(i+1)|0;Se[e]=s}while(0);var n=(0|a)>9;do if(n){var o=La(i,0|He.__str117,8);if(0!=(0|o))break;var l=Ae[i+8|0];if(l<<24>>24!=46&&l<<24>>24!=95&&l<<24>>24!=36)break;if(Ae[i+9|0]<<24>>24!=78)break;var b=r+48|0,k=22-a+Se[b>>2]|0;Se[b>>2]=k;var u=lr(r,0|He.__str169,21),t=u;break r}while(0);var c=lr(r,i,a),t=c}while(0);var t;return t}function Tr(r){var a,e,e=(r+48|0)>>2,i=Se[e],v=i+20|0;Se[e]=v;var a=(r+12|0)>>2,t=Se[a],f=t+1|0;Se[a]=f;var _=Ae[t];do if(_<<24>>24==84){var s=t+2|0;Se[a]=s;var n=Ae[f]<<24>>24;if(86==(0|n)){var o=i+15|0;Se[e]=o;var l=N(r),b=D(r,8,l,0),k=b}else if(84==(0|n)){var u=i+10|0;Se[e]=u;var c=N(r),h=D(r,9,c,0),k=h}else if(73==(0|n))var d=N(r),w=D(r,11,d,0),k=w;else if(83==(0|n))var p=N(r),E=D(r,12,p,0),k=E;else if(104==(0|n)){var A=Nr(r,104);if(0==(0|A)){var k=0;break}var g=O(r,0),y=D(r,14,g,0),k=y}else if(118==(0|n)){var m=Nr(r,118);if(0==(0|m)){var k=0;break}var S=O(r,0),M=D(r,15,S,0),k=M}else if(99==(0|n)){var C=Nr(r,0);if(0==(0|C)){var k=0;break}var R=Nr(r,0);if(0==(0|R)){var k=0;break}var T=O(r,0),I=D(r,16,T,0),k=I}else if(67==(0|n)){var P=N(r),L=sr(r);if((0|L)<0){var k=0;break}var F=Se[a],X=F+1|0;if(Se[a]=X,Ae[F]<<24>>24!=95){var k=0;break}var j=N(r),U=Se[e]+5|0;Se[e]=U;var x=D(r,10,j,P),k=x}else if(70==(0|n))var z=N(r),V=D(r,13,z,0),k=V;else{if(74!=(0|n)){var k=0;break}var B=N(r),H=D(r,17,B,0),k=H}}else if(_<<24>>24==71){var K=t+2|0;Se[a]=K;var Y=Ae[f]<<24>>24;if(86==(0|Y))var G=Ar(r),W=D(r,18,G,0),k=W;else if(82==(0|Y))var Z=Ar(r),Q=D(r,19,Z,0),k=Q;else{if(65!=(0|Y)){var k=0;break}var q=O(r,0),$=D(r,20,q,0),k=$}}else var k=0;while(0);var k;return k}function Or(r){for(var a,e=r,a=e>>2;;){var e;if(0==(0|e)){var i=0;break}var v=Se[a];if(4==(0|v)){var t=Se[a+1],f=Mr(t),i=0==(0|f)&1;break}if(25!=(0|v)&&26!=(0|v)&&27!=(0|v)){var i=0;break}var e=Se[a+1],a=e>>2}var i;return i}function Nr(r,a){var e;if(0==(0|a)){var i=r+12|0,v=Se[i>>2],t=v+1|0;Se[i>>2]=t;var f=Ae[v]<<24>>24}else var f=a;var f;do{if(104==(0|f)){var _=(sr(r),r+12|0);e=7;break}if(118==(0|f)){var s=(sr(r),r+12|0),n=Se[s>>2],o=n+1|0;if(Se[s>>2]=o,Ae[n]<<24>>24!=95){var l=0;e=8;break}var _=(sr(r),s);e=7;break}var l=0;e=8}while(0);if(7==e){var _,b=Se[_>>2],k=b+1|0;Se[_>>2]=k;var l=Ae[b]<<24>>24==95&1}var l;return l}function Ir(r){var a,e,i=r>>2,v=Oe;Oe+=56;var t,f=v,_=v+8,s=v+16,n=v+36,e=(0|r)>>2,o=Se[e],l=0==(8192&o|0);r:do{if(l){var a=(r+12|0)>>2,b=Se[a];if(Ae[b]<<24>>24!=63){var k=0;t=111;break}var u=b+1|0;Se[a]=u;var c=Ae[u];do if(c<<24>>24==63){if(Ae[b+2|0]<<24>>24==36){var h=b+3|0;if(Ae[h]<<24>>24!=63){var d=5;t=90;break}Se[a]=h;var w=6,p=h}else var w=0,p=u;var p,w,E=p+1|0;Se[a]=E;var A=Ae[E]<<24>>24;do if(48==(0|A)){var g=1;t=81}else{if(49==(0|A)){var g=2;t=81;break}if(50!=(0|A)){if(51==(0|A)){var y=0|He.__str2172,m=E;t=82;break}if(52==(0|A)){var y=0|He.__str3173,m=E;t=82;break}if(53==(0|A)){var y=0|He.__str4174,m=E;t=82;break}if(54==(0|A)){var y=0|He.__str5175,m=E;t=82;break}if(55==(0|A)){var y=0|He.__str6176,m=E;t=82;break}if(56==(0|A)){var y=0|He.__str7177,m=E;t=82;break}if(57==(0|A)){var y=0|He.__str8178,m=E;t=82;break}if(65==(0|A)){var y=0|He.__str9179,m=E;t=82;break}if(66==(0|A)){Se[a]=p+2|0;var S=0|He.__str10180,M=3;t=88;break}if(67==(0|A)){var y=0|He.__str11181,m=E;t=82;break}if(68==(0|A)){var y=0|He.__str12182,m=E;t=82;break}if(69==(0|A)){var y=0|He.__str13183,m=E;t=82;break}if(70==(0|A)){var y=0|He.__str14184,m=E;t=82;break}if(71==(0|A)){var y=0|He.__str15185,m=E;t=82;break}if(72==(0|A)){var y=0|He.__str16186,m=E;t=82;break}if(73==(0|A)){var y=0|He.__str17187,m=E;t=82;break}if(74==(0|A)){var y=0|He.__str18188,m=E;t=82;break}if(75==(0|A)){var y=0|He.__str19189,m=E;t=82;break}if(76==(0|A)){var y=0|He.__str20190,m=E;t=82;break}if(77==(0|A)){var y=0|He.__str21191,m=E;t=82;break}if(78==(0|A)){var y=0|He.__str22192,m=E;t=82;break}if(79==(0|A)){var y=0|He.__str23193,m=E;t=82;break}if(80==(0|A)){var y=0|He.__str24194,m=E;t=82;break}if(81==(0|A)){var y=0|He.__str25195,m=E;t=82;break}if(82==(0|A)){var y=0|He.__str26196,m=E;t=82;break}if(83==(0|A)){var y=0|He.__str27197,m=E;t=82;break}if(84==(0|A)){var y=0|He.__str28198,m=E;t=82;break}if(85==(0|A)){var y=0|He.__str29199,m=E;t=82;break}if(86==(0|A)){var y=0|He.__str30200,m=E;t=82;break}if(87==(0|A)){var y=0|He.__str31201,m=E;t=82;break}if(88==(0|A)){var y=0|He.__str32202,m=E;t=82;break}if(89==(0|A)){var y=0|He.__str33203,m=E;t=82;break}if(90==(0|A)){var y=0|He.__str34204,m=E;t=82;break}if(95==(0|A)){var C=p+2|0;Se[a]=C;var R=Ae[C]<<24>>24;if(48==(0|R)){var y=0|He.__str35205,m=C;t=82;break}if(49==(0|R)){var y=0|He.__str36206,m=C;t=82;break}if(50==(0|R)){var y=0|He.__str37207,m=C;t=82;break}if(51==(0|R)){var y=0|He.__str38208,m=C;t=82;break}if(52==(0|R)){var y=0|He.__str39209,m=C;t=82;break}if(53==(0|R)){var y=0|He.__str40210,m=C;t=82;break}if(54==(0|R)){var y=0|He.__str41211,m=C;t=82;break}if(55==(0|R)){var y=0|He.__str42212,m=C;t=82;break}if(56==(0|R)){var y=0|He.__str43213,m=C;t=82;break}if(57==(0|R)){var y=0|He.__str44214,m=C;t=82;break}if(65==(0|R)){var y=0|He.__str45215,m=C;t=82;break}if(66==(0|R)){var y=0|He.__str46216,m=C;t=82;break}if(67==(0|R)){Se[a]=p+3|0;var T=0|He.__str47217;t=84;break}if(68==(0|R)){var y=0|He.__str48218,m=C;t=82;break}if(69==(0|R)){var y=0|He.__str49219,m=C;t=82;break}if(70==(0|R)){var y=0|He.__str50220,m=C;t=82;break}if(71==(0|R)){var y=0|He.__str51221,m=C;t=82;break}if(72==(0|R)){var y=0|He.__str52222,m=C;t=82;break}if(73==(0|R)){var y=0|He.__str53223,m=C;t=82;break}if(74==(0|R)){var y=0|He.__str54224,m=C;t=82;break}if(75==(0|R)){var y=0|He.__str55225,m=C;t=82;break}if(76==(0|R)){var y=0|He.__str56226,m=C;t=82;break}if(77==(0|R)){var y=0|He.__str57227,m=C;t=82;break}if(78==(0|R)){var y=0|He.__str58228,m=C;t=82;break}if(79==(0|R)){var y=0|He.__str59229,m=C;t=82;break}if(82==(0|R)){var O=4|o;Se[e]=O;var N=p+3|0;Se[a]=N;var I=Ae[N]<<24>>24;if(48==(0|I)){Se[a]=p+4|0,Cr(s);var P=(Pr(r,_,s,0),Se[_>>2]),D=Se[_+4>>2],L=Dr(r,0|He.__str60230,(ne=Oe,Oe+=8,Se[ne>>2]=P,Se[ne+4>>2]=D,ne)),F=Se[a]-1|0;Se[a]=F;var y=L,m=F;t=82;break}if(49==(0|I)){Se[a]=p+4|0;var X=Lr(r),j=Lr(r),U=Lr(r),x=Lr(r),z=Se[a]-1|0;Se[a]=z;var V=Dr(r,0|He.__str61231,(ne=Oe,Oe+=16,Se[ne>>2]=X,Se[ne+4>>2]=j,Se[ne+8>>2]=U,Se[ne+12>>2]=x,ne)),y=V,m=Se[a];t=82;break}if(50==(0|I)){var y=0|He.__str62232,m=N;t=82;break}if(51==(0|I)){var y=0|He.__str63233,m=N;t=82;break}if(52==(0|I)){var y=0|He.__str64234,m=N;t=82;break}var y=0,m=N;t=82;break}if(83==(0|R)){var y=0|He.__str65235,m=C;t=82;break}if(84==(0|R)){var y=0|He.__str66236,m=C;t=82;break}if(85==(0|R)){var y=0|He.__str67237,m=C;t=82;break}if(86==(0|R)){var y=0|He.__str68238,m=C;t=82;break}if(88==(0|R)){var y=0|He.__str69239,m=C;t=82;break}if(89==(0|R)){var y=0|He.__str70240,m=C;t=82;break}var k=0;t=111;break r}var k=0;t=111;break r}var y=0|He.__str1171,m=E;t=82}while(0);do{if(81==t){var g;Se[a]=p+2|0;var B=g;t=83;break}if(82==t){var m,y;if(Se[a]=m+1|0,1==(0|w)||2==(0|w)){var B=w;t=83;break}if(4==(0|w)){var T=y;t=84;break}if(6!=(0|w)){var S=y,M=w;t=88;break}Cr(n);var H=Xr(r,n,0,60,62);if(0==(0|H))var K=y;else var Y=Dr(r,0|He.__str170,(ne=Oe,Oe+=8,Se[ne>>2]=y,Se[ne+4>>2]=H,ne)),K=Y;var K;Se[i+6]=0;var S=K,M=w;t=88;break}}while(0);if(83==t){var B,G=r+40|0,W=Fr(r,0|He._symbol_demangle_dashed_null,-1,G);if(0==(0|W)){var k=0;t=111;break r}var d=B;t=90;break}if(84==t){var T;Se[i+4]=T;var Z=1,Q=T;t=109;break r}if(88==t){var M,S,q=r+40|0,$=Fr(r,S,-1,q);if(0==(0|$)){var k=0;t=111;break r}var d=M;t=90;break}}else{if(c<<24>>24==36){var J=b+2|0;Se[a]=J;var rr=jr(r);Se[i+4]=rr;var ar=0!=(0|rr)&1;t=107;break}var d=0;t=90}while(0);if(90==t){var d,er=Me[a],ir=Ae[er]<<24>>24;if(64==(0|ir))Se[a]=er+1|0;else if(36==(0|ir))t=93;else{var vr=zr(r);if(0==(0|vr)){var k=-1;t=111;break}}if(5==(0|d)){var tr=r+20|0,fr=Se[tr>>2]+1|0;Se[tr>>2]=fr}else if(1==(0|d)||2==(0|d)){if(Me[i+11]>>>0<2){var k=-1;t=111;break}var _r=r+56|0,sr=Me[_r>>2],nr=Se[sr+4>>2];if(1==(0|d))Se[sr>>2]=nr;else{var or=Dr(r,0|He.__str71241,(ne=Oe,Oe+=4,Se[ne>>2]=nr,ne)),lr=Se[_r>>2];Se[lr>>2]=or}var br=4|Se[e];Se[e]=br}else if(3==(0|d)){var kr=Se[e]&-5;Se[e]=kr}var ur=ge[Se[a]];if((ur-48&255&255)<10)var cr=Vr(r),ar=cr;else if((ur-65&255&255)<26)var hr=Br(r,3==(0|d)&1),ar=hr;else{if(ur<<24>>24!=36){var k=-1;t=111;break}var dr=Hr(r),ar=dr}}var ar;if(0==(0|ar)){var k=-1;t=111;break}var Z=ar,Q=Se[i+4];t=109;break}var wr=Pr(r,f,0,0);if(0==(0|wr)){var k=-1;t=111;break}var pr=Se[f>>2],Er=Se[f+4>>2],Ar=Dr(r,0|He.__str170,(ne=Oe,Oe+=8,Se[ne>>2]=pr,Se[ne+4>>2]=Er,ne));Se[i+4]=Ar;var Z=1,Q=Ar;t=109;break}while(0);do if(109==t){var Q,Z;if(0!=(0|Q)){var k=Z;break}Xa(0|He.__str72242,1499,0|He.___func___symbol_demangle,0|He.__str73243);var k=Z}while(0);var k;return Oe=v,k}function Pr(r,a,e,i){var v,t,f,_=Oe;Oe+=24;var s=_,n=_+4,o=_+8,l=_+16,b=_+20;0==(0|a)&&Xa(0|He.__str72242,829,0|He.___func___demangle_datatype,0|He.__str121291);var f=(a+4|0)>>2;Se[f]=0;var t=(0|a)>>2;Se[t]=0;var v=(r+12|0)>>2,k=Me[v],u=k+1|0;Se[v]=u;var c=Ae[k],h=c<<24>>24;do if(95==(0|h)){Se[v]=k+2|0;var d=Ae[u],w=Zr(d);Se[t]=w}else if(67==(0|h)||68==(0|h)||69==(0|h)||70==(0|h)||71==(0|h)||72==(0|h)||73==(0|h)||74==(0|h)||75==(0|h)||77==(0|h)||78==(0|h)||79==(0|h)||88==(0|h)||90==(0|h)){var p=Qr(c);Se[t]=p}else if(84==(0|h)||85==(0|h)||86==(0|h)||89==(0|h)){var E=qr(r);if(0==(0|E))break;var A=0==(32768&Se[r>>2]|0);do if(A)if(84==(0|h))var g=0|He.__str122292;else if(85==(0|h))var g=0|He.__str123293;else if(86==(0|h))var g=0|He.__str124294;else{if(89!=(0|h)){var g=0;break}var g=0|He.__str125295}else var g=0;while(0);var g,y=Dr(r,0|He.__str170,(ne=Oe,Oe+=8,Se[ne>>2]=g,Se[ne+4>>2]=E,ne));Se[t]=y}else if(63==(0|h))if(0==(0|i))$r(a,r,e,63,0);else{var m=Lr(r);if(0==(0|m))break;var S=Dr(r,0|He.__str126296,(ne=Oe,Oe+=4,Se[ne>>2]=m,ne));Se[t]=S}else if(65==(0|h)||66==(0|h))$r(a,r,e,c,i);else if(81==(0|h)||82==(0|h)||83==(0|h)){var M=0==(0|i)?80:c;$r(a,r,e,M,i)}else if(80==(0|h))if(((Ae[u]<<24>>24)-48|0)>>>0<10){var C=k+2|0;if(Se[v]=C,Ae[u]<<24>>24!=54)break;var R=r+44|0,T=Se[R>>2];Se[v]=k+3|0;var O=Ae[C],N=Se[r>>2]&-17,I=Ur(O,s,n,N);if(0==(0|I))break;var P=Pr(r,o,e,0);if(0==(0|P))break;var D=Xr(r,e,1,40,41);if(0==(0|D))break;Se[R>>2]=T;var L=Se[o>>2],F=Se[o+4>>2],X=Se[s>>2],j=Dr(r,0|He.__str127297,(ne=Oe,Oe+=12,Se[ne>>2]=L,Se[ne+4>>2]=F,Se[ne+8>>2]=X,ne));Se[t]=j;var U=Dr(r,0|He.__str128298,(ne=Oe,Oe+=4,Se[ne>>2]=D,ne));Se[f]=U}else $r(a,r,e,80,i);else if(87==(0|h)){if(Ae[u]<<24>>24!=52)break;Se[v]=k+2|0;var x=qr(r);if(0==(0|x))break;if(0==(32768&Se[r>>2]|0)){var z=Dr(r,0|He.__str129299,(ne=Oe,Oe+=4,Se[ne>>2]=x,ne));Se[t]=z}else Se[t]=x}else if(48==(0|h)||49==(0|h)||50==(0|h)||51==(0|h)||52==(0|h)||53==(0|h)||54==(0|h)||55==(0|h)||56==(0|h)||57==(0|h)){var V=h<<1,B=V-96|0,H=Yr(e,B);Se[t]=H;var K=V-95|0,Y=Yr(e,K);Se[f]=Y}else if(36==(0|h)){var G=k+2|0;Se[v]=G;var W=Ae[u]<<24>>24;if(48==(0|W)){var Z=Lr(r);Se[t]=Z}else if(68==(0|W)){var Q=Lr(r);if(0==(0|Q))break;var q=Dr(r,0|He.__str130300,(ne=Oe,Oe+=4,Se[ne>>2]=Q,ne));Se[t]=q}else if(70==(0|W)){var $=Lr(r);if(0==(0|$))break;var J=Lr(r);if(0==(0|J))break;var rr=Dr(r,0|He.__str131301,(ne=Oe,Oe+=8,Se[ne>>2]=$,Se[ne+4>>2]=J,ne));Se[t]=rr}else if(71==(0|W)){var ar=Lr(r);if(0==(0|ar))break;var er=Lr(r);if(0==(0|er))break;var ir=Lr(r);if(0==(0|ir))break;var vr=Dr(r,0|He.__str132302,(ne=Oe,Oe+=12,Se[ne>>2]=ar,Se[ne+4>>2]=er,Se[ne+8>>2]=ir,ne));Se[t]=vr}else if(81==(0|W)){var tr=Lr(r);if(0==(0|tr))break;var fr=Dr(r,0|He.__str133303,(ne=Oe,Oe+=4,Se[ne>>2]=tr,ne));Se[t]=fr}else{if(36!=(0|W))break;if(Ae[G]<<24>>24!=67)break;Se[v]=k+3|0;var _r=xr(r,l,b);if(0==(0|_r))break;var sr=Pr(r,a,e,i);if(0==(0|sr))break;var nr=Se[t],or=Se[l>>2],lr=Dr(r,0|He.__str83253,(ne=Oe,Oe+=8,Se[ne>>2]=nr,Se[ne+4>>2]=or,ne));Se[t]=lr}}while(0);var br=0!=(0|Se[t])&1;return Oe=_,br}function Dr(r,a){var e,i=Oe;Oe+=4;var v=i,e=v>>2,t=v;Se[t>>2]=arguments[Dr.length];var f=1,_=0;r:for(;;){var _,f,s=Ae[a+_|0];do{if(s<<24>>24==0)break r;if(s<<24>>24==37){var n=_+1|0,o=Ae[a+n|0]<<24>>24;if(115==(0|o)){var l=Se[e],b=l,k=l+4|0;Se[e]=k;var u=Se[b>>2];if(0==(0|u)){var c=f,h=n;break}var d=Ca(u),c=d+f|0,h=n;break}if(99==(0|o)){var w=Se[e]+4|0;Se[e]=w;var c=f+1|0,h=n;break}if(37==(0|o))var p=n;else var p=_;var p,c=f+1|0,h=p}else var c=f+1|0,h=_}while(0);var h,c,f=c,_=h+1|0}var E=Wr(r,f);if(0==(0|E))var A=0;else{Se[t>>2]=arguments[Dr.length];var g=E,y=0;r:for(;;){var y,g,m=Ae[a+y|0];do{if(m<<24>>24==0)break r;if(m<<24>>24==37){var S=y+1|0,M=Ae[a+S|0]<<24>>24;if(115==(0|M)){var C=Se[e],R=C,T=C+4|0;Se[e]=T;var O=Se[R>>2];if(0==(0|O)){var N=g,I=S;break}var P=Ca(O);Pa(g,O,P,1);var N=g+P|0,I=S;break}if(99==(0|M)){var D=Se[e],L=D,F=D+4|0;Se[e]=F,Ae[g]=255&Se[L>>2];var N=g+1|0,I=S;break}if(37==(0|M))var X=S;else var X=y;var X;Ae[g]=37;var N=g+1|0,I=X}else{Ae[g]=m;var N=g+1|0,I=y}}while(0);var I,N,g=N,y=I+1|0}Ae[g]=0;var A=E}var A;return Oe=i,A}function Lr(r){var a,a=(r+12|0)>>2,e=Se[a],i=Ae[e];if(i<<24>>24==63){var v=e+1|0;Se[a]=v;var t=1,f=v,_=Ae[v]}else var t=0,f=e,_=i;var _,f,t,s=(_-48&255&255)<9;do if(s){var n=Wr(r,3),o=0!=(0|t);o&&(Ae[n]=45);var l=Ae[Se[a]]+1&255;Ae[n+t|0]=l;var b=o?2:1;
Ae[n+b|0]=0;var k=Se[a]+1|0;Se[a]=k;var u=n}else if(_<<24>>24==57){var c=Wr(r,4),h=0!=(0|t);h&&(Ae[c]=45),Ae[c+t|0]=49;var d=h?2:1;Ae[c+d|0]=48;var w=h?3:2;Ae[c+w|0]=0;var p=Se[a]+1|0;Se[a]=p;var u=c}else{if((_-65&255&255)>=16){var u=0;break}for(var E=0,A=f;;){var A,E,g=A+1|0;Se[a]=g;var y=(Ae[A]<<24>>24)+((E<<4)-65)|0,m=ge[g];if((m-65&255&255)>=16)break;var E=y,A=g}if(m<<24>>24!=64){var u=0;break}var S=Wr(r,17),M=0!=(0|t)?0|He.__str119289:0|ii,C=(za(S,0|He.__str118288,(ne=Oe,Oe+=8,Se[ne>>2]=M,Se[ne+4>>2]=y,ne)),Se[a]+1|0);Se[a]=C;var u=S}while(0);var u;return u}function Fr(r,a,e,i){var v,t,f,_;0==(0|a)&&Xa(0|He.__str72242,212,0|He.___func___str_array_push,0|He.__str115285),0==(0|i)&&Xa(0|He.__str72242,213,0|He.___func___str_array_push,0|He.__str116286);var f=(i+12|0)>>2,s=Me[f],n=0==(0|s);do{if(n){Se[f]=32;var o=Wr(r,128);if(0==(0|o)){var l=0;_=17;break}Se[i+16>>2]=o,_=11;break}if(Me[i+8>>2]>>>0<s>>>0){_=11;break}var b=s<<3,k=Wr(r,b);if(0==(0|k)){var l=0;_=17;break}var u=k,c=i+16|0,h=Se[c>>2],d=Se[f]<<2;Pa(k,h,d,1);var w=Se[f]<<1;Se[f]=w,Se[c>>2]=u,_=11;break}while(0);do if(11==_){if((0|e)==-1)var p=Ca(a),E=p;else var E=e;var E,A=ja(a),g=E+1|0,y=Wr(r,g),t=(i+4|0)>>2,v=(i+16|0)>>2,m=(Se[t]<<2)+Se[v]|0;Se[m>>2]=y;var S=Se[Se[v]+(Se[t]<<2)>>2];if(0==(0|S)){Xa(0|He.__str72242,233,0|He.___func___str_array_push,0|He.__str117287);var M=Se[Se[v]+(Se[t]<<2)>>2]}else var M=S;var M;Pa(M,A,E,1),va(A),Ae[Se[Se[v]+(Se[t]<<2)>>2]+g|0]=0;var C=Se[t]+1|0;Se[t]=C;var R=i+8|0;if(C>>>0<Me[R>>2]>>>0){var l=1;break}Se[R>>2]=C;var l=1}while(0);var l;return l}function Xr(r,a,e,i,v){var t,f,_=Oe;Oe+=28;var s,n=_,o=_+8;Cr(o);var f=(r+12|0)>>2,l=0==(0|e),t=(0|n)>>2,b=n+4|0;r:do if(l)for(;;){var k=Se[f],u=Ae[k];if(u<<24>>24==0){s=12;break r}if(u<<24>>24==64){var c=k;s=7;break r}var h=Pr(r,n,a,1);if(0==(0|h)){var d=0;s=25;break r}var w=Se[t],p=Se[b>>2],E=Dr(r,0|He.__str170,(ne=Oe,Oe+=8,Se[ne>>2]=w,Se[ne+4>>2]=p,ne)),A=Fr(r,E,-1,o);if(0==(0|A)){var d=0;s=25;break r}var g=Se[t],y=Da(g,0|He.__str110280);if(0==(0|y)){s=12;break r}}else for(;;){var m=Se[f],S=Ae[m];if(S<<24>>24==0){s=12;break r}if(S<<24>>24==64){var c=m;s=7;break r}var M=Pr(r,n,a,1);if(0==(0|M)){var d=0;s=25;break r}var C=Se[t],R=Da(C,0|He.__str84254);if(0==(0|R)){s=13;break r}var T=Se[b>>2],O=Dr(r,0|He.__str170,(ne=Oe,Oe+=8,Se[ne>>2]=C,Se[ne+4>>2]=T,ne)),N=Fr(r,O,-1,o);if(0==(0|N)){var d=0;s=25;break r}var I=Se[t],P=Da(I,0|He.__str110280);if(0==(0|P)){s=12;break r}}while(0);do if(7==s){var c;Se[f]=c+1|0,s=12;break}while(0);do if(12==s){if(l){s=14;break}s=13;break}while(0);do if(13==s){var D=Se[f],L=D+1|0;if(Se[f]=L,Ae[D]<<24>>24==90){s=14;break}var d=0;s=25;break}while(0);r:do if(14==s){var F=o+4|0,X=Me[F>>2];do{if(0!=(0|X)){if(1==(0|X)){var j=o+16|0,U=Se[Se[j>>2]>>2],x=Da(U,0|He.__str84254);if(0==(0|x)){s=17;break}var z=j;s=20;break}var V=o+16|0;if(X>>>0<=1){var z=V;s=20;break}for(var B=0,H=1;;){var H,B,K=Se[Se[V>>2]+(H<<2)>>2],Y=Dr(r,0|He.__str112282,(ne=Oe,Oe+=8,Se[ne>>2]=B,Se[ne+4>>2]=K,ne)),G=H+1|0;if(G>>>0>=Me[F>>2]>>>0)break;var B=Y,H=G}if(0==(0|Y)){var z=V;s=20;break}var W=Y,Z=Y;s=21;break}s=17}while(0);if(17==s){var Q=i<<24>>24,q=v<<24>>24,$=Dr(r,0|He.__str111281,(ne=Oe,Oe+=8,Se[ne>>2]=Q,Se[ne+4>>2]=q,ne)),d=$;break}if(20==s)var z,W=Se[Se[z>>2]>>2],Z=0;var Z,W,J=v<<24>>24,rr=v<<24>>24==62;do if(rr){var ar=Ca(W);if(Ae[W+(ar-1)|0]<<24>>24!=62)break;var er=i<<24>>24,ir=Se[Se[o+16>>2]>>2],vr=Dr(r,0|He.__str113283,(ne=Oe,Oe+=16,Se[ne>>2]=er,Se[ne+4>>2]=ir,Se[ne+8>>2]=Z,Se[ne+12>>2]=J,ne)),d=vr;break r}while(0);var tr=i<<24>>24,fr=Se[Se[o+16>>2]>>2],_r=Dr(r,0|He.__str114284,(ne=Oe,Oe+=16,Se[ne>>2]=tr,Se[ne+4>>2]=fr,Se[ne+8>>2]=Z,Se[ne+12>>2]=J,ne)),d=_r}while(0);var d;return Oe=_,d}function jr(r){var a,e=Oe;Oe+=20;var i=e,v=r+24|0,t=Se[v>>2],a=(r+20|0)>>2,f=Se[a],_=r+44|0,s=Se[_>>2];Se[a]=t;var n=Kr(r);if(0==(0|n))var o=0;else{Cr(i);var l=Xr(r,i,0,60,62);if(0==(0|l))var b=n;else var k=Dr(r,0|He.__str170,(ne=Oe,Oe+=8,Se[ne>>2]=n,Se[ne+4>>2]=l,ne)),b=k;var b;Se[v>>2]=t,Se[a]=f,Se[_>>2]=s;var o=b}var o;return Oe=e,o}function Ur(r,a,e,i){var v,t=a>>2;Se[e>>2]=0,Se[t]=0;var f=0==(18&i|0);do{if(f){var _=r<<24>>24,s=1==((_-65)%2|0);if(0==(1&i|0)){if(s?Se[e>>2]=0|He.__str95265:v=14,65==(0|_)||66==(0|_)){Se[t]=0|He.__str96266,v=21;break}if(67==(0|_)||68==(0|_)){Se[t]=0|He.__str97267,v=21;break}if(69==(0|_)||70==(0|_)){Se[t]=0|He.__str98268,v=21;break}if(71==(0|_)||72==(0|_)){Se[t]=0|He.__str99269,v=21;break}if(73==(0|_)||74==(0|_)){Se[t]=0|He.__str100270,v=21;break}if(75==(0|_)||76==(0|_)){v=21;break}if(77==(0|_)){Se[t]=0|He.__str101271,v=21;break}var n=0;v=22;break}if(s?Se[e>>2]=0|He.__str88258:v=5,65==(0|_)||66==(0|_)){Se[t]=0|He.__str89259,v=21;break}if(67==(0|_)||68==(0|_)){Se[t]=0|He.__str90260,v=21;break}if(69==(0|_)||70==(0|_)){Se[t]=0|He.__str91261,v=21;break}if(71==(0|_)||72==(0|_)){Se[t]=0|He.__str92262,v=21;break}if(73==(0|_)||74==(0|_)){Se[t]=0|He.__str93263,v=21;break}if(75==(0|_)||76==(0|_)){v=21;break}if(77==(0|_)){Se[t]=0|He.__str94264,v=21;break}var n=0;v=22;break}v=21}while(0);if(21==v)var n=1;var n;return n}function xr(r,a,e){var i;Se[e>>2]=0;var i=(r+12|0)>>2,v=Se[i];if(Ae[v]<<24>>24==69){Se[e>>2]=0|He.__str102272;var t=Se[i]+1|0;Se[i]=t;var f=t}else var f=v;var f;Se[i]=f+1|0;var _=Ae[f]<<24>>24;if(65==(0|_)){Se[a>>2]=0;var s=1}else if(66==(0|_)){Se[a>>2]=0|He.__str103273;var s=1}else if(67==(0|_)){Se[a>>2]=0|He.__str104274;var s=1}else if(68==(0|_)){Se[a>>2]=0|He.__str105275;var s=1}else var s=0;var s;return s}function zr(r){var a,e,a=(r+12|0)>>2,i=r+40|0,v=r+20|0,t=0|i,f=r+44|0,_=r+48|0,s=r+52|0,n=r+56|0,o=r+20|0,l=r+24|0,b=r+16|0,k=0;r:for(;;){var k,u=Se[a],c=Ae[u];if(c<<24>>24==64){var h=u+1|0;Se[a]=h;var d=1;break}var w=c<<24>>24;do{if(0==(0|w)){var d=0;break r}if(48==(0|w)||49==(0|w)||50==(0|w)||51==(0|w)||52==(0|w)||53==(0|w)||54==(0|w)||55==(0|w)||56==(0|w)||57==(0|w)){var p=u+1|0;Se[a]=p;var E=(Ae[u]<<24>>24)-48|0,A=Yr(v,E),g=A;e=14;break}if(63==(0|w)){var y=u+1|0;Se[a]=y;var m=Ae[y]<<24>>24;if(36==(0|m)){var S=u+2|0;Se[a]=S;var M=jr(r);if(0==(0|M)){var d=0;break r}var C=Fr(r,M,-1,v);if(0==(0|C)){var d=0;break r}var R=M;e=15;break}if(63==(0|m)){var T=Se[t>>2],O=Se[f>>2],N=Se[_>>2],I=Se[s>>2],P=Se[n>>2],D=Se[o>>2],L=Se[l>>2];Cr(i);var F=Ir(r);if(0==(0|F))var X=k;else var j=Se[b>>2],U=Dr(r,0|He.__str109279,(ne=Oe,Oe+=4,Se[ne>>2]=j,ne)),X=U;var X;Se[o>>2]=D,Se[l>>2]=L,Se[t>>2]=T,Se[f>>2]=O,Se[_>>2]=N,Se[s>>2]=I,Se[n>>2]=P;var g=X;e=14;break}var x=Lr(r);if(0==(0|x)){var d=0;break r}var z=Dr(r,0|He.__str109279,(ne=Oe,Oe+=4,Se[ne>>2]=x,ne)),g=z;e=14;break}var V=Kr(r),g=V;e=14;break}while(0);if(14==e){var g;if(0==(0|g)){var d=0;break}var R=g}var R,B=Fr(r,R,-1,i);if(0==(0|B)){var d=0;break}var k=R}var d;return d}function Vr(r){var a,e,i,v=Oe;Oe+=36;var t,f=v,i=f>>2,_=v+4,s=v+8,e=s>>2,n=v+16;Se[i]=0;var o=0|r,l=Se[o>>2],b=0==(128&l|0),k=r+12|0;do if(b){var u=Ae[Se[k>>2]]<<24>>24;if(48==(0|u))var c=0|He.__str76246,h=k,a=h>>2;else if(49==(0|u))var c=0|He.__str77247,h=k,a=h>>2;else{if(50!=(0|u)){var c=0,h=k,a=h>>2;break}var c=0|He.__str78248,h=k,a=h>>2}}else var c=0,h=k,a=h>>2;while(0);var h,c,d=0==(512&l|0);do if(d){if((Ae[Se[a]]-48&255&255)>=3){var w=0;break}var w=0|He.__str79249}else var w=0;while(0);var w,p=Gr(r,0),E=Se[a],A=E+1|0;Se[a]=A;var g=Ae[E]<<24>>24;do{if(48==(0|g)||49==(0|g)||50==(0|g)||51==(0|g)||52==(0|g)||53==(0|g)){var y=r+44|0,m=Se[y>>2];Cr(n);var S=Pr(r,s,n,0);if(0==(0|S)){var M=0;t=28;break}var C=xr(r,f,_);if(0==(0|C)){var M=0;t=28;break}var R=Se[i],T=0==(0|R),O=Se[_>>2];do if(T)Se[i]=O;else{if(0==(0|O))break;var N=Dr(r,0|He.__str83253,(ne=Oe,Oe+=8,Se[ne>>2]=R,Se[ne+4>>2]=O,ne));Se[i]=N}while(0);Se[y>>2]=m,t=22;break}if(54==(0|g)||55==(0|g)){var I=s+4|0;Se[I>>2]=0,Se[e]=0;var P=xr(r,f,_);if(0==(0|P)){var M=0;t=28;break}if(Ae[Se[a]]<<24>>24==64){t=22;break}var D=qr(r);if(0==(0|D)){var M=0;t=28;break}var L=Dr(r,0|He.__str107277,(ne=Oe,Oe+=4,Se[ne>>2]=D,ne));Se[I>>2]=L,t=22;break}if(56==(0|g)||57==(0|g)){Se[e+1]=0,Se[e]=0,Se[i]=0,t=22;break}var M=0;t=28}while(0);if(22==t){var F=0==(4096&Se[o>>2]|0);do{if(F){var X=Se[e],j=Se[i];if(0==(0|j)){var U=X;t=26;break}var x=0!=(0|X)?0|He.__str87257:0,z=0|He.__str87257,V=j,B=x,H=X;t=27;break}Se[i]=0,Se[e+1]=0,Se[e]=0;var U=0;t=26;break}while(0);if(26==t)var U,K=0!=(0|U)?0|He.__str87257:0,z=K,V=0,B=0,H=U;var H,B,V,z,Y=Se[e+1],G=Dr(r,0|He.__str108278,(ne=Oe,Oe+=32,Se[ne>>2]=c,Se[ne+4>>2]=w,Se[ne+8>>2]=H,Se[ne+12>>2]=B,Se[ne+16>>2]=V,Se[ne+20>>2]=z,Se[ne+24>>2]=p,Se[ne+28>>2]=Y,ne));Se[r+16>>2]=G;var M=1}var M;return Oe=v,M}function Br(r,a){var e,i,v,t,f=Oe;Oe+=44;var _,s=f,t=s>>2,n=f+8,o=f+12,v=o>>2,l=f+16,b=f+20,k=f+40;Se[v]=0;var i=(r+12|0)>>2,u=Se[i],c=u+1|0;Se[i]=c;var h=ge[u],d=h<<24>>24,w=(h-65&255&255)>25;r:do if(w)var p=0;else{var e=(0|r)>>2,E=Me[e],A=0==(128&E|0),g=d-65|0;do if(A){var y=g/8|0;if(0==(0|y))var m=0|He.__str76246,S=g;else if(1==(0|y))var m=0|He.__str77247,S=g;else{if(2!=(0|y)){var m=0,S=g;break}var m=0|He.__str78248,S=g}}else var m=0,S=g;while(0);var S,m,M=0==(512&E|0)&h<<24>>24<89,C=(0|S)%8;do if(M)if(2==(0|C)||3==(0|C))var R=m,T=0|He.__str79249;else if(4==(0|C)||5==(0|C))var R=m,T=0|He.__str80250;else{if(6!=(0|C)&&7!=(0|C)){var R=m,T=0;break}var O=Dr(r,0|He.__str81251,(ne=Oe,Oe+=4,Se[ne>>2]=m,ne)),R=O,T=0|He.__str80250}else var R=m,T=0;while(0);var T,R,N=Gr(r,0),I=6==(0|C);do{if(!I){if(7==((d-56)%8|0)){_=14;break}var P=N;_=15;break}_=14}while(0);if(14==_)var D=Lr(r),L=Dr(r,0|He.__str82252,(ne=Oe,Oe+=8,Se[ne>>2]=N,Se[ne+4>>2]=D,ne)),P=L;var P,F=h<<24>>24>88;do if(F)var X=0;else{if((C-2|0)>>>0<2){var X=0;break}var j=xr(r,o,k);if(0==(0|j)){var p=0;break r}var U=Me[v],x=Se[k>>2];if(0==(0|U)&0==(0|x)){var X=0;break}var z=Dr(r,0|He.__str83253,(ne=Oe,Oe+=8,Se[ne>>2]=U,Se[ne+4>>2]=x,ne));Se[v]=z;var X=z}while(0);var X,V=Se[i],B=V+1|0;Se[i]=B;var H=Ae[V],K=Se[e],Y=Ur(H,n,l,K);if(0==(0|Y)){var p=0;break}Cr(b);var G=Se[i];if(Ae[G]<<24>>24==64){Se[t]=0|He.__str84254,Se[t+1]=0;var W=G+1|0;Se[i]=W}else{var Z=Pr(r,s,b,0);if(0==(0|Z)){var p=0;break}}if(0!=(4&Se[e]|0)&&(Se[t+1]=0,Se[t]=0),0==(0|a))var Q=P;else{var q=0|s,$=Se[q>>2],J=s+4|0,rr=Se[J>>2],ar=Dr(r,0|He.__str85255,(ne=Oe,Oe+=12,Se[ne>>2]=P,Se[ne+4>>2]=$,Se[ne+8>>2]=rr,ne));Se[J>>2]=0,Se[q>>2]=0;var Q=ar}var Q,er=r+44|0,ir=Se[er>>2],vr=Xr(r,b,1,40,41);if(0==(0|vr)){var p=0;break}if(0==(4096&Se[e]|0))var tr=vr,fr=X;else{Se[v]=0;var tr=0,fr=0}var fr,tr;Se[er>>2]=ir;var _r=Se[t],sr=Se[t+1];if(0==(0|_r))var nr=0;else var or=0!=(0|sr)?0:0|He.__str87257,nr=or;var nr,lr=Se[n>>2],br=0!=(0|lr)?0|He.__str87257:0,kr=Se[l>>2],ur=Dr(r,0|He.__str86256,(ne=Oe,Oe+=44,Se[ne>>2]=R,Se[ne+4>>2]=T,Se[ne+8>>2]=_r,Se[ne+12>>2]=nr,Se[ne+16>>2]=lr,Se[ne+20>>2]=br,Se[ne+24>>2]=kr,Se[ne+28>>2]=Q,Se[ne+32>>2]=tr,Se[ne+36>>2]=fr,Se[ne+40>>2]=sr,ne));Se[r+16>>2]=ur;var p=1}while(0);var p;return Oe=f,p}function Hr(r){var a,a=(r+12|0)>>2,e=Se[a];if(Ae[e]<<24>>24==36)var i=e;else{Xa(0|He.__str72242,1252,0|He.___func___handle_template,0|He.__str74244);var i=Se[a]}var i;Se[a]=i+1|0;var v=Kr(r),t=0==(0|v);do if(t)var f=0;else{var _=Xr(r,0,0,60,62);if(0==(0|_)){var f=0;break}var s=Dr(r,0|He.__str170,(ne=Oe,Oe+=8,Se[ne>>2]=v,Se[ne+4>>2]=_,ne));Se[r+16>>2]=s;var f=1}while(0);var f;return f}function Kr(r){for(var a,a=(r+12|0)>>2,e=Me[a],i=e,v=Ae[e];;){var v,i;if(!((v-65&255&255)<26|(v-97&255&255)<26|(v-48&255&255)<10)&&v<<24>>24!=95&&v<<24>>24!=36){var t=0;break}var f=i+1|0;Se[a]=f;var _=ge[f];if(_<<24>>24==64){Se[a]=i+2|0;var s=f-e|0,n=r+20|0,o=Fr(r,e,s,n);if(0==(0|o)){var t=0;break}var l=Se[r+24>>2]-1-Se[n>>2]|0,b=Yr(n,l),t=b;break}var i=f,v=_}var t;return t}function Yr(r,a){0==(0|r)&&Xa(0|He.__str72242,263,0|He.___func___str_array_get_ref,0|He.__str75245);var e=Se[r>>2]+a|0;if(e>>>0<Me[r+8>>2]>>>0)var i=Se[Se[r+16>>2]+(e<<2)>>2];else var i=0;var i;return i}function Gr(r,a){var e,e=(r+44|0)>>2,i=Me[e];if(i>>>0>a>>>0){for(var v=r+56|0,t=a,f=0,_=Se[v>>2],s=i;;){var s,_,f,t,n=Me[_+(t<<2)>>2];if(0==(0|n)){Xa(0|He.__str72242,680,0|He.___func___get_class_string,0|He.__str106276);var o=Se[v>>2],l=o,b=Se[o+(t<<2)>>2],k=Se[e]}else var l=_,b=n,k=s;var k,b,l,u=Ca(b),c=u+(f+2)|0,h=t+1|0;if(h>>>0>=k>>>0)break;var t=h,f=c,_=l,s=k}var d=c-1|0}else var d=-1;var d,w=Wr(r,d);if(0==(0|w))var p=0;else{var E=Se[e]-1|0,A=(0|E)<(0|a);r:do if(A)var g=0;else for(var y=r+56|0,m=0,S=E;;){var S,m,M=Se[Se[y>>2]+(S<<2)>>2],C=Ca(M),R=w+m|0;Pa(R,M,C,1);var T=C+m|0;if((0|S)>(0|a)){var O=T+1|0;Ae[w+T|0]=58;var N=T+2|0;Ae[w+O|0]=58;var I=N}else var I=T;var I,P=S-1|0;if((0|P)<(0|a)){var g=I;break r}var m=I,S=P}while(0);var g;Ae[w+g|0]=0;var p=w}var p;return p}function Wr(r,a){var e,i=a>>>0>1020;do if(i){var v=Se[r+4>>2],t=a+4|0,f=pe[v](t);if(0==(0|f)){var _=0;break}var s=r+60|0,n=Se[s>>2],o=f;Se[o>>2]=n,Se[s>>2]=f,Se[r+64>>2]=0;var _=f+4|0}else{var e=(r+64|0)>>2,l=Me[e];if(l>>>0<a>>>0){var b=Se[r+4>>2],k=pe[b](1024);if(0==(0|k)){var _=0;break}var u=r+60|0,c=Se[u>>2],h=k;Se[h>>2]=c,Se[u>>2]=k,Se[e]=1020;var d=1020,w=k}else var d=l,w=Se[r+60>>2];var w,d;Se[e]=d-a|0;var _=w+(1024-d)|0}while(0);var _;return _}function Zr(r){var a=r<<24>>24;if(68==(0|a))var e=0|He.__str157327;else if(69==(0|a))var e=0|He.__str158328;else if(70==(0|a))var e=0|He.__str159329;else if(71==(0|a))var e=0|He.__str160330;else if(72==(0|a))var e=0|He.__str161331;else if(73==(0|a))var e=0|He.__str162332;else if(74==(0|a))var e=0|He.__str163333;else if(75==(0|a))var e=0|He.__str164334;else if(76==(0|a))var e=0|He.__str165335;else if(77==(0|a))var e=0|He.__str166336;else if(78==(0|a))var e=0|He.__str167337;else if(87==(0|a))var e=0|He.__str168338;else var e=0;var e;return e}function Qr(r){var a=r<<24>>24;if(67==(0|a))var e=0|He.__str145315;else if(68==(0|a))var e=0|He.__str146316;else if(69==(0|a))var e=0|He.__str147317;else if(70==(0|a))var e=0|He.__str148318;else if(71==(0|a))var e=0|He.__str149319;else if(72==(0|a))var e=0|He.__str150320;else if(73==(0|a))var e=0|He.__str151321;else if(74==(0|a))var e=0|He.__str152322;else if(75==(0|a))var e=0|He.__str153323;else if(77==(0|a))var e=0|He.__str154324;else if(78==(0|a))var e=0|He.__str155325;else if(79==(0|a))var e=0|He.__str156326;else if(88==(0|a))var e=0|He.__str84254;else if(90==(0|a))var e=0|He.__str110280;else var e=0;var e;return e}function qr(r){var a=r+44|0,e=Se[a>>2],i=zr(r);if(0==(0|i))var v=0;else var t=Gr(r,e),v=t;var v;return Se[a>>2]=e,v}function $r(r,a,e,i,v){var t,f,_,s=Oe;Oe+=16;var n,o=s,_=o>>2,l=s+4,b=s+8,f=b>>2;Se[l>>2]=0|ii;var t=(a+12|0)>>2,k=Se[t];if(Ae[k]<<24>>24==69){Se[l>>2]=0|He.__str134304;var u=k+1|0;Se[t]=u;var c=0|He.__str134304}else var c=0|ii;var c,h=i<<24>>24;do{if(65==(0|h)){var d=Dr(a,0|He.__str135305,(ne=Oe,Oe+=4,Se[ne>>2]=c,ne)),w=d;n=10;break}if(66==(0|h)){var p=Dr(a,0|He.__str136306,(ne=Oe,Oe+=4,Se[ne>>2]=c,ne)),w=p;n=10;break}if(80==(0|h)){var E=Dr(a,0|He.__str137307,(ne=Oe,Oe+=4,Se[ne>>2]=c,ne)),w=E;n=10;break}if(81==(0|h)){var A=Dr(a,0|He.__str138308,(ne=Oe,Oe+=4,Se[ne>>2]=c,ne)),w=A;n=10;break}if(82==(0|h)){var g=Dr(a,0|He.__str139309,(ne=Oe,Oe+=4,Se[ne>>2]=c,ne)),w=g;n=10;break}if(83==(0|h)){var y=Dr(a,0|He.__str140310,(ne=Oe,Oe+=4,Se[ne>>2]=c,ne)),w=y;n=10;break}if(63==(0|h)){var w=0|ii;n=10}else n=31}while(0);r:do if(10==n){var w,m=xr(a,o,l);if(0==(0|m))break;var S=a+44|0,M=Se[S>>2],C=Se[t],R=Ae[C]<<24>>24==89;a:do if(R){var T=C+1|0;Se[t]=T;var O=Lr(a);if(0==(0|O))break r;var N=Ha(O),I=Ae[w]<<24>>24==32,P=Se[_],D=0==(0|P);do{if(I){if(!D){n=17;break}var L=w+1|0;n=18;break}if(D){var L=w;n=18;break}n=17;break}while(0);if(17==n){var F=Dr(a,0|He.__str141311,(ne=Oe,Oe+=8,Se[ne>>2]=P,Se[ne+4>>2]=w,ne));Se[_]=0;var X=F}else if(18==n)var L,j=Dr(a,0|He.__str142312,(ne=Oe,Oe+=4,Se[ne>>2]=L,ne)),X=j;var X;if(0==(0|N)){var U=X;break}for(var x=X,z=N;;){var z,x,V=z-1|0,B=Lr(a),H=Dr(a,0|He.__str143313,(ne=Oe,Oe+=8,Se[ne>>2]=x,Se[ne+4>>2]=B,ne));if(0==(0|V)){var U=H;break a}var x=H,z=V}}else var U=w;while(0);var U,K=Pr(a,b,e,0);if(0==(0|K))break;var Y=Se[_];if(0==(0|Y)){var G=0==(0|v);do if(G){if(Ae[U]<<24>>24==0){var W=U;break}var Z=U+1|0;if(Ae[Z]<<24>>24!=42){var W=U;break}var Q=Se[f],q=Ca(Q);if(Ae[Q+(q-1)|0]<<24>>24!=42){var W=U;break}var W=Z}else var W=U;while(0);var W,$=Se[f],J=Dr(a,0|He.__str170,(ne=Oe,Oe+=8,Se[ne>>2]=$,Se[ne+4>>2]=W,ne));Se[r>>2]=J}else{var rr=Se[f],ar=Dr(a,0|He.__str144314,(ne=Oe,Oe+=12,Se[ne>>2]=rr,Se[ne+4>>2]=Y,Se[ne+8>>2]=U,ne));Se[r>>2]=ar}var er=Se[f+1];Se[r+4>>2]=er,Se[S>>2]=M}while(0);Oe=s}function Jr(r){var a,e=r>>>0<245;do{if(e){if(r>>>0<11)var i=16;else var i=r+11&-8;var i,v=i>>>3,t=Me[vi>>2],f=t>>>(v>>>0);if(0!=(3&f|0)){var _=(1&f^1)+v|0,s=_<<1,n=(s<<2)+vi+40|0,o=(s+2<<2)+vi+40|0,l=Me[o>>2],b=l+8|0,k=Me[b>>2];if((0|n)==(0|k))Se[vi>>2]=t&(1<<_^-1);else{if(k>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[o>>2]=k,Se[k+12>>2]=n}var u=_<<3;Se[l+4>>2]=3|u;var c=l+(4|u)|0,h=1|Se[c>>2];Se[c>>2]=h;var d=b;a=38;break}if(i>>>0<=Me[vi+8>>2]>>>0){var w=i;a=30;break}if(0!=(0|f)){var p=2<<v,E=f<<v&(p|-p),A=(E&-E)-1|0,g=A>>>12&16,y=A>>>(g>>>0),m=y>>>5&8,S=y>>>(m>>>0),M=S>>>2&4,C=S>>>(M>>>0),R=C>>>1&2,T=C>>>(R>>>0),O=T>>>1&1,N=(m|g|M|R|O)+(T>>>(O>>>0))|0,I=N<<1,P=(I<<2)+vi+40|0,D=(I+2<<2)+vi+40|0,L=Me[D>>2],F=L+8|0,X=Me[F>>2];if((0|P)==(0|X))Se[vi>>2]=t&(1<<N^-1);else{if(X>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[D>>2]=X,Se[X+12>>2]=P}var j=N<<3,U=j-i|0;Se[L+4>>2]=3|i;var x=L,z=x+i|0;Se[x+(4|i)>>2]=1|U,Se[x+j>>2]=U;var V=Me[vi+8>>2];if(0!=(0|V)){var B=Se[vi+20>>2],H=V>>>2&1073741822,K=(H<<2)+vi+40|0,Y=Me[vi>>2],G=1<<(V>>>3),W=0==(Y&G|0);do{if(!W){var Z=(H+2<<2)+vi+40|0,Q=Me[Z>>2];if(Q>>>0>=Me[vi+16>>2]>>>0){var q=Q,$=Z;break}throw Ka(),"Reached an unreachable!"}Se[vi>>2]=Y|G;var q=K,$=(H+2<<2)+vi+40|0}while(0);var $,q;Se[$>>2]=B,Se[q+12>>2]=B;var J=B+8|0;Se[J>>2]=q;var rr=B+12|0;Se[rr>>2]=K}Se[vi+8>>2]=U,Se[vi+20>>2]=z;var d=F;a=38;break}if(0==(0|Se[vi+4>>2])){var w=i;a=30;break}var ar=ra(i);if(0==(0|ar)){var w=i;a=30;break}var d=ar;a=38;break}if(r>>>0>4294967231){var w=-1;a=30;break}var er=r+11&-8;if(0==(0|Se[vi+4>>2])){var w=er;a=30;break}var ir=ea(er);if(0==(0|ir)){var w=er;a=30;break}var d=ir;a=38;break}while(0);if(30==a){var w,vr=Me[vi+8>>2];if(w>>>0>vr>>>0){var tr=Me[vi+12>>2];if(w>>>0<tr>>>0){var fr=tr-w|0;Se[vi+12>>2]=fr;var _r=Me[vi+24>>2],sr=_r;Se[vi+24>>2]=sr+w|0,Se[w+(sr+4)>>2]=1|fr,Se[_r+4>>2]=3|w;var d=_r+8|0}else var nr=aa(w),d=nr}else{var or=vr-w|0,lr=Me[vi+20>>2];if(or>>>0>15){var br=lr;Se[vi+20>>2]=br+w|0,Se[vi+8>>2]=or,Se[w+(br+4)>>2]=1|or,Se[br+vr>>2]=or,Se[lr+4>>2]=3|w}else{Se[vi+8>>2]=0,Se[vi+20>>2]=0,Se[lr+4>>2]=3|vr;var kr=vr+(lr+4)|0,ur=1|Se[kr>>2];Se[kr>>2]=ur}var d=lr+8|0}}var d;return d}function ra(r){var a,e,i,v=Se[vi+4>>2],t=(v&-v)-1|0,f=t>>>12&16,_=t>>>(f>>>0),s=_>>>5&8,n=_>>>(s>>>0),o=n>>>2&4,l=n>>>(o>>>0),b=l>>>1&2,k=l>>>(b>>>0),u=k>>>1&1,c=Me[vi+((s|f|o|b|u)+(k>>>(u>>>0))<<2)+304>>2],h=c,e=h>>2,d=(Se[c+4>>2]&-8)-r|0;r:for(;;)for(var d,h,w=h;;){var w,p=Se[w+16>>2];if(0==(0|p)){var E=Se[w+20>>2];if(0==(0|E))break r;var A=E}else var A=p;var A,g=(Se[A+4>>2]&-8)-r|0;if(g>>>0<d>>>0){var h=A,e=h>>2,d=g;continue r}var w=A}var y=h,m=Me[vi+16>>2],S=y>>>0<m>>>0;do if(!S){var M=y+r|0,C=M;if(y>>>0>=M>>>0)break;var R=Me[e+6],T=Me[e+3],O=(0|T)==(0|h);do if(O){var N=h+20|0,I=Se[N>>2];if(0==(0|I)){var P=h+16|0,D=Se[P>>2];if(0==(0|D)){var L=0,a=L>>2;break}var F=P,X=D}else{var F=N,X=I;i=14}for(;;){var X,F,j=X+20|0,U=Se[j>>2];if(0==(0|U)){var x=X+16|0,z=Me[x>>2];if(0==(0|z))break;var F=x,X=z}else var F=j,X=U}if(F>>>0<m>>>0)throw Ka(),"Reached an unreachable!";Se[F>>2]=0;var L=X,a=L>>2}else{var V=Me[e+2];if(V>>>0<m>>>0)throw Ka(),"Reached an unreachable!";Se[V+12>>2]=T,Se[T+8>>2]=V;var L=T,a=L>>2}while(0);var L,B=0==(0|R);r:do if(!B){var H=h+28|0,K=(Se[H>>2]<<2)+vi+304|0,Y=(0|h)==(0|Se[K>>2]);do{if(Y){if(Se[K>>2]=L,0!=(0|L))break;var G=Se[vi+4>>2]&(1<<Se[H>>2]^-1);Se[vi+4>>2]=G;break r}if(R>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";var W=R+16|0;if((0|Se[W>>2])==(0|h)?Se[W>>2]=L:Se[R+20>>2]=L,0==(0|L))break r}while(0);if(L>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+6]=R;var Z=Me[e+4];if(0!=(0|Z)){if(Z>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+4]=Z,Se[Z+24>>2]=L}var Q=Me[e+5];if(0==(0|Q))break;if(Q>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+5]=Q,Se[Q+24>>2]=L}while(0);if(d>>>0<16){var q=d+r|0;Se[e+1]=3|q;var $=q+(y+4)|0,J=1|Se[$>>2];Se[$>>2]=J}else{Se[e+1]=3|r,Se[r+(y+4)>>2]=1|d,Se[y+d+r>>2]=d;var rr=Me[vi+8>>2];if(0!=(0|rr)){var ar=Me[vi+20>>2],er=rr>>>2&1073741822,ir=(er<<2)+vi+40|0,vr=Me[vi>>2],tr=1<<(rr>>>3),fr=0==(vr&tr|0);do{if(!fr){var _r=(er+2<<2)+vi+40|0,sr=Me[_r>>2];if(sr>>>0>=Me[vi+16>>2]>>>0){var nr=sr,or=_r;break}throw Ka(),"Reached an unreachable!"}Se[vi>>2]=vr|tr;var nr=ir,or=(er+2<<2)+vi+40|0}while(0);var or,nr;Se[or>>2]=ar,Se[nr+12>>2]=ar,Se[ar+8>>2]=nr,Se[ar+12>>2]=ir}Se[vi+8>>2]=d,Se[vi+20>>2]=C}return h+8|0}while(0);throw Ka(),"Reached an unreachable!"}function aa(r){var a,e;0==(0|Se[ti>>2])&&ba();var i=0==(4&Se[vi+440>>2]|0);do{if(i){var v=Se[vi+24>>2],t=0==(0|v);do{if(!t){var f=v,_=ua(f);if(0==(0|_)){e=6;break}var s=Se[ti+8>>2],n=r+47-Se[vi+12>>2]+s&-s;if(n>>>0>=2147483647){e=14;break}var o=re(n);if((0|o)==(Se[_>>2]+Se[_+4>>2]|0)){var l=o,b=n,k=o;e=13;break}var u=o,c=n;e=15;break}e=6}while(0);do if(6==e){var h=re(0);if((0|h)==-1){e=14;break}var d=Se[ti+8>>2],w=d+(r+47)&-d,p=h,E=Se[ti+4>>2],A=E-1|0;if(0==(A&p|0))var g=w;else var g=w-p+(A+p&-E)|0;var g;if(g>>>0>=2147483647){e=14;break}var y=re(g);if((0|y)==(0|h)){var l=h,b=g,k=y;e=13;break}var u=y,c=g;e=15;break}while(0);if(13==e){var k,b,l;if((0|l)!=-1){var m=b,S=l;e=26;break}var u=k,c=b}else if(14==e){var M=4|Se[vi+440>>2];Se[vi+440>>2]=M,e=23;break}var c,u,C=0|-c,R=(0|u)!=-1&c>>>0<2147483647;do{if(R){if(c>>>0>=(r+48|0)>>>0){var T=c;e=21;break}var O=Se[ti+8>>2],N=r+47-c+O&-O;if(N>>>0>=2147483647){var T=c;e=21;break}var I=re(N);if((0|I)==-1){re(C);e=22;break}var T=N+c|0;e=21;break}var T=c;e=21}while(0);if(21==e){var T;if((0|u)!=-1){var m=T,S=u;e=26;break}}var P=4|Se[vi+440>>2];Se[vi+440>>2]=P,e=23;break}e=23}while(0);do if(23==e){var D=Se[ti+8>>2],L=D+(r+47)&-D;if(L>>>0>=2147483647){e=49;break}var F=re(L),X=re(0);if(!((0|X)!=-1&(0|F)!=-1&F>>>0<X>>>0)){e=49;break}var j=X-F|0;if(j>>>0<=(r+40|0)>>>0|(0|F)==-1){e=49;break}var m=j,S=F;e=26;break}while(0);r:do if(26==e){var S,m,U=Se[vi+432>>2]+m|0;Se[vi+432>>2]=U,U>>>0>Me[vi+436>>2]>>>0&&(Se[vi+436>>2]=U);var x=Me[vi+24>>2],z=0==(0|x);a:do if(z){var V=Me[vi+16>>2];0==(0|V)|S>>>0<V>>>0&&(Se[vi+16>>2]=S),Se[vi+444>>2]=S,Se[vi+448>>2]=m,Se[vi+456>>2]=0;var B=Se[ti>>2];Se[vi+36>>2]=B,Se[vi+32>>2]=-1,ha(),ca(S,m-40|0)}else{for(var H=vi+444|0,a=H>>2;;){var H;if(0==(0|H))break;var K=Me[a],Y=H+4|0,G=Me[Y>>2],W=K+G|0;if((0|S)==(0|W)){if(0!=(8&Se[a+3]|0))break;var Z=x;if(!(Z>>>0>=K>>>0&Z>>>0<W>>>0))break;Se[Y>>2]=G+m|0;var Q=Se[vi+24>>2],q=Se[vi+12>>2]+m|0;ca(Q,q);break a}var H=Se[a+2],a=H>>2}S>>>0<Me[vi+16>>2]>>>0&&(Se[vi+16>>2]=S);for(var $=S+m|0,J=vi+444|0;;){var J;if(0==(0|J))break;var rr=0|J,ar=Me[rr>>2];if((0|ar)==(0|$)){if(0!=(8&Se[J+12>>2]|0))break;Se[rr>>2]=S;var er=J+4|0,ir=Se[er>>2]+m|0;Se[er>>2]=ir;var vr=da(S,ar,r),tr=vr;e=50;break r}var J=Se[J+8>>2]}Ma(S,m)}while(0);var fr=Me[vi+12>>2];if(fr>>>0<=r>>>0){e=49;break}var _r=fr-r|0;Se[vi+12>>2]=_r;var sr=Me[vi+24>>2],nr=sr;Se[vi+24>>2]=nr+r|0,Se[r+(nr+4)>>2]=1|_r,Se[sr+4>>2]=3|r;var tr=sr+8|0;e=50;break}while(0);if(49==e){var or=Je();Se[or>>2]=12;var tr=0}var tr;return tr}function ea(r){var a,e,i,v,t,f,_=r>>2,s=0|-r,n=r>>>8,o=0==(0|n);do if(o)var l=0;else{if(r>>>0>16777215){var l=31;break}var b=(n+1048320|0)>>>16&8,k=n<<b,u=(k+520192|0)>>>16&4,c=k<<u,h=(c+245760|0)>>>16&2,d=14-(u|b|h)+(c<<h>>>15)|0,l=r>>>((d+7|0)>>>0)&1|d<<1}while(0);var l,w=Me[vi+(l<<2)+304>>2],p=0==(0|w);r:do if(p)var E=0,A=s,g=0;else{if(31==(0|l))var y=0;else var y=25-(l>>>1)|0;for(var y,m=0,S=s,M=w,t=M>>2,C=r<<y,R=0;;){var R,C,M,S,m,T=Se[t+1]&-8,O=T-r|0;if(O>>>0<S>>>0){if((0|T)==(0|r)){var E=M,A=O,g=M;break r}var N=M,I=O}else var N=m,I=S;var I,N,P=Me[t+5],D=Me[((C>>>31<<2)+16>>2)+t],L=0==(0|P)|(0|P)==(0|D)?R:P;if(0==(0|D)){var E=N,A=I,g=L;break r}var m=N,S=I,M=D,t=M>>2,C=C<<1,R=L}}while(0);var g,A,E,F=0==(0|g)&0==(0|E);do if(F){var X=2<<l,j=Se[vi+4>>2]&(X|-X);if(0==(0|j)){var U=g;break}var x=(j&-j)-1|0,z=x>>>12&16,V=x>>>(z>>>0),B=V>>>5&8,H=V>>>(B>>>0),K=H>>>2&4,Y=H>>>(K>>>0),G=Y>>>1&2,W=Y>>>(G>>>0),Z=W>>>1&1,U=Se[vi+((B|z|K|G|Z)+(W>>>(Z>>>0))<<2)+304>>2]}else var U=g;while(0);var U,Q=0==(0|U);r:do if(Q)var q=A,$=E,v=$>>2;else for(var J=U,i=J>>2,rr=A,ar=E;;){var ar,rr,J,er=(Se[i+1]&-8)-r|0,ir=er>>>0<rr>>>0,vr=ir?er:rr,tr=ir?J:ar,fr=Me[i+4];if(0==(0|fr)){var _r=Me[i+5];if(0==(0|_r)){var q=vr,$=tr,v=$>>2;break r}var J=_r,i=J>>2,rr=vr,ar=tr}else var J=fr,i=J>>2,rr=vr,ar=tr}while(0);var $,q,sr=0==(0|$);r:do{if(!sr){if(q>>>0>=(Se[vi+8>>2]-r|0)>>>0){var nr=0;break}var or=$,e=or>>2,lr=Me[vi+16>>2],br=or>>>0<lr>>>0;do if(!br){var kr=or+r|0,ur=kr;if(or>>>0>=kr>>>0)break;var cr=Me[v+6],hr=Me[v+3],dr=(0|hr)==(0|$);do if(dr){var wr=$+20|0,pr=Se[wr>>2];if(0==(0|pr)){var Er=$+16|0,Ar=Se[Er>>2];if(0==(0|Ar)){var gr=0,a=gr>>2;break}var yr=Er,mr=Ar}else{var yr=wr,mr=pr;f=28}for(;;){var mr,yr,Sr=mr+20|0,Mr=Se[Sr>>2];if(0==(0|Mr)){var Cr=mr+16|0,Rr=Me[Cr>>2];if(0==(0|Rr))break;var yr=Cr,mr=Rr}else var yr=Sr,mr=Mr}if(yr>>>0<lr>>>0)throw Ka(),"Reached an unreachable!";Se[yr>>2]=0;var gr=mr,a=gr>>2}else{var Tr=Me[v+2];if(Tr>>>0<lr>>>0)throw Ka(),"Reached an unreachable!";Se[Tr+12>>2]=hr,Se[hr+8>>2]=Tr;var gr=hr,a=gr>>2}while(0);var gr,Or=0==(0|cr);a:do if(!Or){var Nr=$+28|0,Ir=(Se[Nr>>2]<<2)+vi+304|0,Pr=(0|$)==(0|Se[Ir>>2]);do{if(Pr){if(Se[Ir>>2]=gr,0!=(0|gr))break;var Dr=Se[vi+4>>2]&(1<<Se[Nr>>2]^-1);Se[vi+4>>2]=Dr;break a}if(cr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";var Lr=cr+16|0;if((0|Se[Lr>>2])==(0|$)?Se[Lr>>2]=gr:Se[cr+20>>2]=gr,0==(0|gr))break a}while(0);if(gr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+6]=cr;var Fr=Me[v+4];if(0!=(0|Fr)){if(Fr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+4]=Fr,Se[Fr+24>>2]=gr}var Xr=Me[v+5];if(0==(0|Xr))break;if(Xr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+5]=Xr,Se[Xr+24>>2]=gr}while(0);var jr=q>>>0<16;a:do if(jr){var Ur=q+r|0;Se[v+1]=3|Ur;var xr=Ur+(or+4)|0,zr=1|Se[xr>>2];Se[xr>>2]=zr}else if(Se[v+1]=3|r,Se[_+(e+1)]=1|q,Se[(q>>2)+e+_]=q,q>>>0<256){var Vr=q>>>2&1073741822,Br=(Vr<<2)+vi+40|0,Hr=Me[vi>>2],Kr=1<<(q>>>3),Yr=0==(Hr&Kr|0);do{if(!Yr){var Gr=(Vr+2<<2)+vi+40|0,Wr=Me[Gr>>2];if(Wr>>>0>=Me[vi+16>>2]>>>0){var Zr=Wr,Qr=Gr;break}throw Ka(),"Reached an unreachable!"}Se[vi>>2]=Hr|Kr;var Zr=Br,Qr=(Vr+2<<2)+vi+40|0}while(0);var Qr,Zr;Se[Qr>>2]=ur,Se[Zr+12>>2]=ur,Se[_+(e+2)]=Zr,Se[_+(e+3)]=Br}else{var qr=kr,$r=q>>>8,Jr=0==(0|$r);do if(Jr)var ra=0;else{if(q>>>0>16777215){var ra=31;break}var aa=($r+1048320|0)>>>16&8,ea=$r<<aa,ia=(ea+520192|0)>>>16&4,va=ea<<ia,ta=(va+245760|0)>>>16&2,fa=14-(ia|aa|ta)+(va<<ta>>>15)|0,ra=q>>>((fa+7|0)>>>0)&1|fa<<1}while(0);var ra,_a=(ra<<2)+vi+304|0;Se[_+(e+7)]=ra;var sa=r+(or+16)|0;Se[_+(e+5)]=0,Se[sa>>2]=0;var na=Se[vi+4>>2],oa=1<<ra;if(0==(na&oa|0)){var la=na|oa;Se[vi+4>>2]=la,Se[_a>>2]=qr,Se[_+(e+6)]=_a,Se[_+(e+3)]=qr,Se[_+(e+2)]=qr}else{if(31==(0|ra))var ba=0;else var ba=25-(ra>>>1)|0;for(var ba,ka=q<<ba,ua=Se[_a>>2];;){var ua,ka;if((Se[ua+4>>2]&-8|0)==(0|q)){var ca=ua+8|0,ha=Me[ca>>2],da=Me[vi+16>>2],wa=ua>>>0<da>>>0;do if(!wa){if(ha>>>0<da>>>0)break;Se[ha+12>>2]=qr,Se[ca>>2]=qr,Se[_+(e+2)]=ha,Se[_+(e+3)]=ua,Se[_+(e+6)]=0;break a}while(0);throw Ka(),"Reached an unreachable!"}var pa=(ka>>>31<<2)+ua+16|0,Ea=Me[pa>>2];if(0==(0|Ea)){if(pa>>>0>=Me[vi+16>>2]>>>0){Se[pa>>2]=qr,Se[_+(e+6)]=ua,Se[_+(e+3)]=qr,Se[_+(e+2)]=qr;break a}throw Ka(),"Reached an unreachable!"}var ka=ka<<1,ua=Ea}}}while(0);var nr=$+8|0;break r}while(0);throw Ka(),"Reached an unreachable!"}var nr=0}while(0);var nr;return nr}function ia(r){var a;0==(0|Se[ti>>2])&&ba();var e=r>>>0<4294967232;r:do if(e){var i=Me[vi+24>>2];if(0==(0|i)){var v=0;break}var t=Me[vi+12>>2],f=t>>>0>(r+40|0)>>>0;do if(f){var _=Me[ti+8>>2],s=-40-r-1+t+_|0,n=Math.floor((s>>>0)/(_>>>0)),o=(n-1)*_|0,l=i,b=ua(l);if(0!=(8&Se[b+12>>2]|0))break;var k=re(0),a=(b+4|0)>>2;if((0|k)!=(Se[b>>2]+Se[a]|0))break;var u=o>>>0>2147483646?-2147483648-_|0:o,c=0|-u,h=re(c),d=re(0);if(!((0|h)!=-1&d>>>0<k>>>0))break;var w=k-d|0;if((0|k)==(0|d))break;var p=Se[a]-w|0;Se[a]=p;var E=Se[vi+432>>2]-w|0;Se[vi+432>>2]=E;var A=Se[vi+24>>2],g=Se[vi+12>>2]-w|0;ca(A,g);var v=(0|k)!=(0|d);break r}while(0);if(Me[vi+12>>2]>>>0<=Me[vi+28>>2]>>>0){var v=0;break}Se[vi+28>>2]=-1;var v=0}else var v=0;while(0);var v;return 1&v}function va(r){var a,e,i,v,t,f,_,s=r>>2,n=0==(0|r);r:do if(!n){var o=r-8|0,l=o,b=Me[vi+16>>2],k=o>>>0<b>>>0;a:do if(!k){var u=Me[r-4>>2],c=3&u;if(1==(0|c))break;var h=u&-8,f=h>>2,d=r+(h-8)|0,w=d,p=0==(1&u|0);e:do if(p){var E=Me[o>>2];if(0==(0|c))break r;var A=-8-E|0,t=A>>2,g=r+A|0,y=g,m=E+h|0;if(g>>>0<b>>>0)break a;if((0|y)==(0|Se[vi+20>>2])){var v=(r+(h-4)|0)>>2;if(3!=(3&Se[v]|0)){var S=y,i=S>>2,M=m;break}Se[vi+8>>2]=m;var C=Se[v]&-2;Se[v]=C,Se[t+(s+1)]=1|m,Se[d>>2]=m;break r}if(E>>>0<256){var R=Me[t+(s+2)],T=Me[t+(s+3)];if((0|R)!=(0|T)){var O=((E>>>2&1073741822)<<2)+vi+40|0,N=(0|R)!=(0|O)&R>>>0<b>>>0;do if(!N){if(!((0|T)==(0|O)|T>>>0>=b>>>0))break;Se[R+12>>2]=T,Se[T+8>>2]=R;var S=y,i=S>>2,M=m;break e}while(0);throw Ka(),"Reached an unreachable!"}var I=Se[vi>>2]&(1<<(E>>>3)^-1);Se[vi>>2]=I;var S=y,i=S>>2,M=m}else{var P=g,D=Me[t+(s+6)],L=Me[t+(s+3)],F=(0|L)==(0|P);do if(F){var X=A+(r+20)|0,j=Se[X>>2];if(0==(0|j)){var U=A+(r+16)|0,x=Se[U>>2];if(0==(0|x)){var z=0,e=z>>2;break}var V=U,B=x}else{var V=X,B=j;_=21}for(;;){var B,V,H=B+20|0,K=Se[H>>2];if(0==(0|K)){var Y=B+16|0,G=Me[Y>>2];if(0==(0|G))break;var V=Y,B=G}else var V=H,B=K}if(V>>>0<b>>>0)throw Ka(),"Reached an unreachable!";Se[V>>2]=0;var z=B,e=z>>2}else{var W=Me[t+(s+2)];if(W>>>0<b>>>0)throw Ka(),"Reached an unreachable!";Se[W+12>>2]=L,Se[L+8>>2]=W;var z=L,e=z>>2}while(0);var z;if(0==(0|D)){var S=y,i=S>>2,M=m;break}var Z=A+(r+28)|0,Q=(Se[Z>>2]<<2)+vi+304|0,q=(0|P)==(0|Se[Q>>2]);do{if(q){if(Se[Q>>2]=z,0!=(0|z))break;var $=Se[vi+4>>2]&(1<<Se[Z>>2]^-1);Se[vi+4>>2]=$;var S=y,i=S>>2,M=m;break e}if(D>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";var J=D+16|0;if((0|Se[J>>2])==(0|P)?Se[J>>2]=z:Se[D+20>>2]=z,0==(0|z)){var S=y,i=S>>2,M=m;break e}}while(0);if(z>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[e+6]=D;var rr=Me[t+(s+4)];if(0!=(0|rr)){if(rr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[e+4]=rr,Se[rr+24>>2]=z}var ar=Me[t+(s+5)];if(0==(0|ar)){var S=y,i=S>>2,M=m;break}if(ar>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[e+5]=ar,Se[ar+24>>2]=z;var S=y,i=S>>2,M=m}}else var S=l,i=S>>2,M=h;while(0);var M,S,er=S;if(er>>>0>=d>>>0)break;var ir=r+(h-4)|0,vr=Me[ir>>2];if(0==(1&vr|0))break;var tr=0==(2&vr|0);do{if(tr){if((0|w)==(0|Se[vi+24>>2])){var fr=Se[vi+12>>2]+M|0;Se[vi+12>>2]=fr,Se[vi+24>>2]=S;var _r=1|fr;if(Se[i+1]=_r,(0|S)==(0|Se[vi+20>>2])&&(Se[vi+20>>2]=0,Se[vi+8>>2]=0),fr>>>0<=Me[vi+28>>2]>>>0)break r;ia(0);break r}if((0|w)==(0|Se[vi+20>>2])){var sr=Se[vi+8>>2]+M|0;Se[vi+8>>2]=sr,Se[vi+20>>2]=S;var nr=1|sr;Se[i+1]=nr;var or=er+sr|0;Se[or>>2]=sr;break r}var lr=(vr&-8)+M|0,br=vr>>>3,kr=vr>>>0<256;e:do if(kr){var ur=Me[s+f],cr=Me[((4|h)>>2)+s];if((0|ur)!=(0|cr)){var hr=((vr>>>2&1073741822)<<2)+vi+40|0,dr=(0|ur)==(0|hr);do{if(!dr){if(ur>>>0<Me[vi+16>>2]>>>0){_=66;break}_=63;break}_=63}while(0);do if(63==_){if((0|cr)!=(0|hr)&&cr>>>0<Me[vi+16>>2]>>>0)break;Se[ur+12>>2]=cr,Se[cr+8>>2]=ur;break e}while(0);throw Ka(),"Reached an unreachable!"}var wr=Se[vi>>2]&(1<<br^-1);Se[vi>>2]=wr}else{var pr=d,Er=Me[f+(s+4)],Ar=Me[((4|h)>>2)+s],gr=(0|Ar)==(0|pr);do if(gr){var yr=h+(r+12)|0,mr=Se[yr>>2];if(0==(0|mr)){var Sr=h+(r+8)|0,Mr=Se[Sr>>2];if(0==(0|Mr)){var Cr=0,a=Cr>>2;break}var Rr=Sr,Tr=Mr}else{var Rr=yr,Tr=mr;_=73}for(;;){var Tr,Rr,Or=Tr+20|0,Nr=Se[Or>>2];if(0==(0|Nr)){var Ir=Tr+16|0,Pr=Me[Ir>>2];if(0==(0|Pr))break;var Rr=Ir,Tr=Pr}else var Rr=Or,Tr=Nr}if(Rr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[Rr>>2]=0;var Cr=Tr,a=Cr>>2}else{var Dr=Me[s+f];if(Dr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[Dr+12>>2]=Ar,
Se[Ar+8>>2]=Dr;var Cr=Ar,a=Cr>>2}while(0);var Cr;if(0==(0|Er))break;var Lr=h+(r+20)|0,Fr=(Se[Lr>>2]<<2)+vi+304|0,Xr=(0|pr)==(0|Se[Fr>>2]);do{if(Xr){if(Se[Fr>>2]=Cr,0!=(0|Cr))break;var jr=Se[vi+4>>2]&(1<<Se[Lr>>2]^-1);Se[vi+4>>2]=jr;break e}if(Er>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";var Ur=Er+16|0;if((0|Se[Ur>>2])==(0|pr)?Se[Ur>>2]=Cr:Se[Er+20>>2]=Cr,0==(0|Cr))break e}while(0);if(Cr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+6]=Er;var xr=Me[f+(s+2)];if(0!=(0|xr)){if(xr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+4]=xr,Se[xr+24>>2]=Cr}var zr=Me[f+(s+3)];if(0==(0|zr))break;if(zr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+5]=zr,Se[zr+24>>2]=Cr}while(0);if(Se[i+1]=1|lr,Se[er+lr>>2]=lr,(0|S)!=(0|Se[vi+20>>2])){var Vr=lr;break}Se[vi+8>>2]=lr;break r}Se[ir>>2]=vr&-2,Se[i+1]=1|M,Se[er+M>>2]=M;var Vr=M}while(0);var Vr;if(Vr>>>0<256){var Br=Vr>>>2&1073741822,Hr=(Br<<2)+vi+40|0,Kr=Me[vi>>2],Yr=1<<(Vr>>>3),Gr=0==(Kr&Yr|0);do{if(!Gr){var Wr=(Br+2<<2)+vi+40|0,Zr=Me[Wr>>2];if(Zr>>>0>=Me[vi+16>>2]>>>0){var Qr=Zr,qr=Wr;break}throw Ka(),"Reached an unreachable!"}Se[vi>>2]=Kr|Yr;var Qr=Hr,qr=(Br+2<<2)+vi+40|0}while(0);var qr,Qr;Se[qr>>2]=S,Se[Qr+12>>2]=S,Se[i+2]=Qr,Se[i+3]=Hr;break r}var $r=S,Jr=Vr>>>8,ra=0==(0|Jr);do if(ra)var aa=0;else{if(Vr>>>0>16777215){var aa=31;break}var ea=(Jr+1048320|0)>>>16&8,va=Jr<<ea,fa=(va+520192|0)>>>16&4,_a=va<<fa,sa=(_a+245760|0)>>>16&2,na=14-(fa|ea|sa)+(_a<<sa>>>15)|0,aa=Vr>>>((na+7|0)>>>0)&1|na<<1}while(0);var aa,oa=(aa<<2)+vi+304|0;Se[i+7]=aa,Se[i+5]=0,Se[i+4]=0;var la=Se[vi+4>>2],ba=1<<aa,ka=0==(la&ba|0);e:do if(ka){var ua=la|ba;Se[vi+4>>2]=ua,Se[oa>>2]=$r,Se[i+6]=oa,Se[i+3]=S,Se[i+2]=S}else{if(31==(0|aa))var ca=0;else var ca=25-(aa>>>1)|0;for(var ca,ha=Vr<<ca,da=Se[oa>>2];;){var da,ha;if((Se[da+4>>2]&-8|0)==(0|Vr)){var wa=da+8|0,pa=Me[wa>>2],Ea=Me[vi+16>>2],Aa=da>>>0<Ea>>>0;do if(!Aa){if(pa>>>0<Ea>>>0)break;Se[pa+12>>2]=$r,Se[wa>>2]=$r,Se[i+2]=pa,Se[i+3]=da,Se[i+6]=0;break e}while(0);throw Ka(),"Reached an unreachable!"}var ga=(ha>>>31<<2)+da+16|0,ya=Me[ga>>2];if(0==(0|ya)){if(ga>>>0>=Me[vi+16>>2]>>>0){Se[ga>>2]=$r,Se[i+6]=da,Se[i+3]=S,Se[i+2]=S;break e}throw Ka(),"Reached an unreachable!"}var ha=ha<<1,da=ya}}while(0);var ma=Se[vi+32>>2]-1|0;if(Se[vi+32>>2]=ma,0!=(0|ma))break r;ta();break r}while(0);throw Ka(),"Reached an unreachable!"}while(0)}function ta(){var r=Se[vi+452>>2],a=0==(0|r);r:do if(!a)for(var e=r;;){var e,i=Se[e+8>>2];if(0==(0|i))break r;var e=i}while(0);Se[vi+32>>2]=-1}function fa(r,a){if(0==(0|r))var e=Jr(a),i=e;else var v=la(r,a),i=v;var i;return i}function _a(r,a){var e,i=r>>>0<9;do if(i)var v=Jr(a),t=v;else{var f=r>>>0<16?16:r,_=0==(f-1&f|0);r:do if(_)var s=f;else{if(f>>>0<=16){var s=16;break}for(var n=16;;){var n,o=n<<1;if(o>>>0>=f>>>0){var s=o;break r}var n=o}}while(0);var s;if((-64-s|0)>>>0>a>>>0){if(a>>>0<11)var l=16;else var l=a+11&-8;var l,b=Jr(l+(s+12)|0);if(0==(0|b)){var t=0;break}var k=b-8|0;if(0==((b>>>0)%(s>>>0)|0))var u=k,c=0;else{var h=b+(s-1)&-s,d=h-8|0,w=k;if((d-w|0)>>>0>15)var p=d;else var p=h+(s-8)|0;var p,E=p-w|0,e=(b-4|0)>>2,A=Se[e],g=(A&-8)-E|0;if(0==(3&A|0)){var y=Se[k>>2]+E|0;Se[p>>2]=y,Se[p+4>>2]=g;var u=p,c=0}else{var m=p+4|0,S=g|1&Se[m>>2]|2;Se[m>>2]=S;var M=g+(p+4)|0,C=1|Se[M>>2];Se[M>>2]=C;var R=E|1&Se[e]|2;Se[e]=R;var T=b+(E-4)|0,O=1|Se[T>>2];Se[T>>2]=O;var u=p,c=b}}var c,u,N=u+4|0,I=Me[N>>2],P=0==(3&I|0);do if(P)var D=0;else{var L=I&-8;if(L>>>0<=(l+16|0)>>>0){var D=0;break}var F=L-l|0;Se[N>>2]=l|1&I|2,Se[u+(4|l)>>2]=3|F;var X=u+(4|L)|0,j=1|Se[X>>2];Se[X>>2]=j;var D=l+(u+8)|0}while(0);var D;0!=(0|c)&&va(c),0!=(0|D)&&va(D);var t=u+8|0}else{var U=Je();Se[U>>2]=12;var t=0}}while(0);var t;return t}function sa(r,a,e,i){var v,t;0==(0|Se[ti>>2])&&ba();var f=0==(0|i),_=0==(0|r);do{if(f){if(_){var s=Jr(0),n=s;t=30;break}var o=r<<2;if(o>>>0<11){var l=0,b=16;t=9;break}var l=0,b=o+11&-8;t=9;break}if(_){var n=i;t=30;break}var l=i,b=0;t=9;break}while(0);do if(9==t){var b,l,k=0==(1&e|0);r:do if(k){if(_){var u=0,c=0;break}for(var h=0,d=0;;){var d,h,w=Me[a+(d<<2)>>2];if(w>>>0<11)var p=16;else var p=w+11&-8;var p,E=p+h|0,A=d+1|0;if((0|A)==(0|r)){var u=0,c=E;break r}var h=E,d=A}}else{var g=Me[a>>2];if(g>>>0<11)var y=16;else var y=g+11&-8;var y,u=y,c=y*r|0}while(0);var c,u,m=Jr(b-4+c|0);if(0==(0|m)){var n=0;break}var S=m-8|0,M=Se[m-4>>2]&-8;if(0!=(2&e|0)){var C=-4-b+M|0;Fa(m,0,C,1)}if(0==(0|l)){var R=m+c|0,T=M-c|3;Se[m+(c-4)>>2]=T;var O=R,v=O>>2,N=c}else var O=l,v=O>>2,N=M;var N,O;Se[v]=m;var I=r-1|0,P=0==(0|I);r:do if(P)var D=S,L=N;else if(0==(0|u))for(var F=S,X=N,j=0;;){var j,X,F,U=Me[a+(j<<2)>>2];if(U>>>0<11)var x=16;else var x=U+11&-8;var x,z=X-x|0;Se[F+4>>2]=3|x;var V=F+x|0,B=j+1|0;if(Se[(B<<2>>2)+v]=x+(F+8)|0,(0|B)==(0|I)){var D=V,L=z;break r}var F=V,X=z,j=B}else for(var H=3|u,K=u+8|0,Y=S,G=N,W=0;;){var W,G,Y,Z=G-u|0;Se[Y+4>>2]=H;var Q=Y+u|0,q=W+1|0;if(Se[(q<<2>>2)+v]=Y+K|0,(0|q)==(0|I)){var D=Q,L=Z;break r}var Y=Q,G=Z,W=q}while(0);var L,D;Se[D+4>>2]=3|L;var n=O}while(0);var n;return n}function na(r){var a=r>>2;0==(0|Se[ti>>2])&&ba();var e=Me[vi+24>>2];if(0==(0|e))var i=0,v=0,t=0,f=0,_=0,s=0,n=0;else{for(var o=Me[vi+12>>2],l=o+40|0,b=vi+444|0,k=l,u=l,c=1;;){var c,u,k,b,h=Me[b>>2],d=h+8|0;if(0==(7&d|0))var w=0;else var w=7&-d;for(var w,p=b+4|0,E=h+w|0,A=c,g=u,y=k;;){var y,g,A,E;if(E>>>0<h>>>0)break;if(E>>>0>=(h+Se[p>>2]|0)>>>0|(0|E)==(0|e))break;var m=Se[E+4>>2];if(7==(0|m))break;var S=m&-8,M=S+y|0;if(1==(3&m|0))var C=A+1|0,R=S+g|0;else var C=A,R=g;var R,C,E=E+S|0,A=C,g=R,y=M}var T=Me[b+8>>2];if(0==(0|T))break;var b=T,k=y,u=g,c=A}var O=Se[vi+432>>2],i=y,v=A,t=o,f=g,_=O-y|0,s=Se[vi+436>>2],n=O-g|0}var n,s,_,f,t,v,i;Se[a]=i,Se[a+1]=v,Se[a+2]=0,Se[a+3]=0,Se[a+4]=_,Se[a+5]=s,Se[a+6]=0,Se[a+7]=n,Se[a+8]=f,Se[a+9]=t}function oa(){0==(0|Se[ti>>2])&&ba();var r=Me[vi+24>>2],a=0==(0|r);r:do if(a)var e=0,i=0,v=0;else for(var t=Se[vi+436>>2],f=Me[vi+432>>2],_=vi+444|0,s=f-40-Se[vi+12>>2]|0;;){var s,_,n=Me[_>>2],o=n+8|0;if(0==(7&o|0))var l=0;else var l=7&-o;for(var l,b=_+4|0,k=n+l|0,u=s;;){var u,k;if(k>>>0<n>>>0)break;if(k>>>0>=(n+Se[b>>2]|0)>>>0|(0|k)==(0|r))break;var c=Se[k+4>>2];if(7==(0|c))break;var h=c&-8,d=1==(3&c|0)?h:0,w=u-d|0,k=k+h|0,u=w}var p=Me[_+8>>2];if(0==(0|p)){var e=t,i=f,v=u;break r}var _=p,s=u}while(0);var v,i,e,E=Se[Se[qe>>2]+12>>2],A=(Qa(E,0|He.__str339,(ne=Oe,Oe+=4,Se[ne>>2]=e,ne)),Se[Se[qe>>2]+12>>2]),g=(Qa(A,0|He.__str1340,(ne=Oe,Oe+=4,Se[ne>>2]=i,ne)),Se[Se[qe>>2]+12>>2]);Qa(g,0|He.__str2341,(ne=Oe,Oe+=4,Se[ne>>2]=v,ne))}function la(r,a){var e,i,v,t=a>>>0>4294967231;r:do{if(!t){var f=r-8|0,_=f,i=(r-4|0)>>2,s=Me[i],n=s&-8,o=n-8|0,l=r+o|0,b=f>>>0<Me[vi+16>>2]>>>0;do if(!b){var k=3&s;if(!(1!=(0|k)&(0|o)>-8))break;var e=(r+(n-4)|0)>>2;if(0==(1&Se[e]|0))break;if(a>>>0<11)var u=16;else var u=a+11&-8;var u,c=0==(0|k);do{if(c){var h=ka(_,u),d=0,w=h;v=17;break}if(n>>>0<u>>>0){if((0|l)!=(0|Se[vi+24>>2])){v=21;break}var p=Se[vi+12>>2]+n|0;if(p>>>0<=u>>>0){v=21;break}var E=p-u|0,A=r+(u-8)|0;Se[i]=u|1&s|2;var g=1|E;Se[r+(u-4)>>2]=g,Se[vi+24>>2]=A,Se[vi+12>>2]=E;var d=0,w=_;v=17;break}var y=n-u|0;if(y>>>0<=15){var d=0,w=_;v=17;break}Se[i]=u|1&s|2,Se[r+(u-4)>>2]=3|y;var m=1|Se[e];Se[e]=m;var d=r+u|0,w=_;v=17;break}while(0);do if(17==v){var w,d;if(0==(0|w))break;0!=(0|d)&&va(d);var S=w+8|0;break r}while(0);var M=Jr(a);if(0==(0|M)){var S=0;break r}var C=0==(3&Se[i]|0)?8:4,R=n-C|0,T=R>>>0<a>>>0?R:a;Pa(M,r,T,1),va(r);var S=M;break r}while(0);throw Ka(),"Reached an unreachable!"}var O=Je();Se[O>>2]=12;var S=0}while(0);var S;return S}function ba(){if(0==(0|Se[ti>>2])){var r=qa(8);if(0!=(r-1&r|0))throw Ka(),"Reached an unreachable!";Se[ti+8>>2]=r,Se[ti+4>>2]=r,Se[ti+12>>2]=-1,Se[ti+16>>2]=2097152,Se[ti+20>>2]=0,Se[vi+440>>2]=0;var a=$a(0);Se[ti>>2]=a&-16^1431655768}}function ka(r,a){var e=Se[r+4>>2]&-8,i=a>>>0<256;do if(i)var v=0;else{if(e>>>0>=(a+4|0)>>>0&&(e-a|0)>>>0<=Se[ti+8>>2]<<1>>>0){var v=r;break}var v=0}while(0);var v;return v}function ua(r){for(var a,e=vi+444|0,a=e>>2;;){var e,i=Me[a];if(i>>>0<=r>>>0&&(i+Se[a+1]|0)>>>0>r>>>0){var v=e;break}var t=Me[a+2];if(0==(0|t)){var v=0;break}var e=t,a=e>>2}var v;return v}function ca(r,a){var e=r,i=r+8|0;if(0==(7&i|0))var v=0;else var v=7&-i;var v,t=a-v|0;Se[vi+24>>2]=e+v|0,Se[vi+12>>2]=t,Se[v+(e+4)>>2]=1|t,Se[a+(e+4)>>2]=40;var f=Se[ti+16>>2];Se[vi+28>>2]=f}function ha(){for(var r=0;;){var r,a=r<<1,e=(a<<2)+vi+40|0;Se[vi+(a+3<<2)+40>>2]=e,Se[vi+(a+2<<2)+40>>2]=e;var i=r+1|0;if(32==(0|i))break;var r=i}}function da(r,a,e){var i,v,t,f,_=a>>2,s=r>>2,n=r+8|0;if(0==(7&n|0))var o=0;else var o=7&-n;var o,l=a+8|0;if(0==(7&l|0))var b=0,t=b>>2;else var b=7&-l,t=b>>2;var b,k=a+b|0,u=k,c=o+e|0,v=c>>2,h=r+c|0,d=h,w=k-(r+o)-e|0;Se[(o+4>>2)+s]=3|e;var p=(0|u)==(0|Se[vi+24>>2]);r:do if(p){var E=Se[vi+12>>2]+w|0;Se[vi+12>>2]=E,Se[vi+24>>2]=d;var A=1|E;Se[v+(s+1)]=A}else if((0|u)==(0|Se[vi+20>>2])){var g=Se[vi+8>>2]+w|0;Se[vi+8>>2]=g,Se[vi+20>>2]=d;var y=1|g;Se[v+(s+1)]=y;var m=r+g+c|0;Se[m>>2]=g}else{var S=Me[t+(_+1)];if(1==(3&S|0)){var M=S&-8,C=S>>>3,R=S>>>0<256;a:do if(R){var T=Me[((8|b)>>2)+_],O=Me[t+(_+3)];if((0|T)!=(0|O)){var N=((S>>>2&1073741822)<<2)+vi+40|0,I=(0|T)==(0|N);do{if(!I){if(T>>>0<Me[vi+16>>2]>>>0){f=18;break}f=15;break}f=15}while(0);do if(15==f){if((0|O)!=(0|N)&&O>>>0<Me[vi+16>>2]>>>0)break;Se[T+12>>2]=O,Se[O+8>>2]=T;break a}while(0);throw Ka(),"Reached an unreachable!"}var P=Se[vi>>2]&(1<<C^-1);Se[vi>>2]=P}else{var D=k,L=Me[((24|b)>>2)+_],F=Me[t+(_+3)],X=(0|F)==(0|D);do if(X){var j=16|b,U=j+(a+4)|0,x=Se[U>>2];if(0==(0|x)){var z=a+j|0,V=Se[z>>2];if(0==(0|V)){var B=0,i=B>>2;break}var H=z,K=V}else{var H=U,K=x;f=25}for(;;){var K,H,Y=K+20|0,G=Se[Y>>2];if(0==(0|G)){var W=K+16|0,Z=Me[W>>2];if(0==(0|Z))break;var H=W,K=Z}else var H=Y,K=G}if(H>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[H>>2]=0;var B=K,i=B>>2}else{var Q=Me[((8|b)>>2)+_];if(Q>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[Q+12>>2]=F,Se[F+8>>2]=Q;var B=F,i=B>>2}while(0);var B;if(0==(0|L))break;var q=b+(a+28)|0,$=(Se[q>>2]<<2)+vi+304|0,J=(0|D)==(0|Se[$>>2]);do{if(J){if(Se[$>>2]=B,0!=(0|B))break;var rr=Se[vi+4>>2]&(1<<Se[q>>2]^-1);Se[vi+4>>2]=rr;break a}if(L>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";var ar=L+16|0;if((0|Se[ar>>2])==(0|D)?Se[ar>>2]=B:Se[L+20>>2]=B,0==(0|B))break a}while(0);if(B>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[i+6]=L;var er=16|b,ir=Me[(er>>2)+_];if(0!=(0|ir)){if(ir>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[i+4]=ir,Se[ir+24>>2]=B}var vr=Me[(er+4>>2)+_];if(0==(0|vr))break;if(vr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[i+5]=vr,Se[vr+24>>2]=B}while(0);var tr=a+(M|b)|0,fr=M+w|0}else var tr=u,fr=w;var fr,tr,_r=tr+4|0,sr=Se[_r>>2]&-2;if(Se[_r>>2]=sr,Se[v+(s+1)]=1|fr,Se[(fr>>2)+s+v]=fr,fr>>>0<256){var nr=fr>>>2&1073741822,or=(nr<<2)+vi+40|0,lr=Me[vi>>2],br=1<<(fr>>>3),kr=0==(lr&br|0);do{if(!kr){var ur=(nr+2<<2)+vi+40|0,cr=Me[ur>>2];if(cr>>>0>=Me[vi+16>>2]>>>0){var hr=cr,dr=ur;break}throw Ka(),"Reached an unreachable!"}Se[vi>>2]=lr|br;var hr=or,dr=(nr+2<<2)+vi+40|0}while(0);var dr,hr;Se[dr>>2]=d,Se[hr+12>>2]=d,Se[v+(s+2)]=hr,Se[v+(s+3)]=or}else{var wr=h,pr=fr>>>8,Er=0==(0|pr);do if(Er)var Ar=0;else{if(fr>>>0>16777215){var Ar=31;break}var gr=(pr+1048320|0)>>>16&8,yr=pr<<gr,mr=(yr+520192|0)>>>16&4,Sr=yr<<mr,Mr=(Sr+245760|0)>>>16&2,Cr=14-(mr|gr|Mr)+(Sr<<Mr>>>15)|0,Ar=fr>>>((Cr+7|0)>>>0)&1|Cr<<1}while(0);var Ar,Rr=(Ar<<2)+vi+304|0;Se[v+(s+7)]=Ar;var Tr=c+(r+16)|0;Se[v+(s+5)]=0,Se[Tr>>2]=0;var Or=Se[vi+4>>2],Nr=1<<Ar;if(0==(Or&Nr|0)){var Ir=Or|Nr;Se[vi+4>>2]=Ir,Se[Rr>>2]=wr,Se[v+(s+6)]=Rr,Se[v+(s+3)]=wr,Se[v+(s+2)]=wr}else{if(31==(0|Ar))var Pr=0;else var Pr=25-(Ar>>>1)|0;for(var Pr,Dr=fr<<Pr,Lr=Se[Rr>>2];;){var Lr,Dr;if((Se[Lr+4>>2]&-8|0)==(0|fr)){var Fr=Lr+8|0,Xr=Me[Fr>>2],jr=Me[vi+16>>2],Ur=Lr>>>0<jr>>>0;do if(!Ur){if(Xr>>>0<jr>>>0)break;Se[Xr+12>>2]=wr,Se[Fr>>2]=wr,Se[v+(s+2)]=Xr,Se[v+(s+3)]=Lr,Se[v+(s+6)]=0;break r}while(0);throw Ka(),"Reached an unreachable!"}var xr=(Dr>>>31<<2)+Lr+16|0,zr=Me[xr>>2];if(0==(0|zr)){if(xr>>>0>=Me[vi+16>>2]>>>0){Se[xr>>2]=wr,Se[v+(s+6)]=Lr,Se[v+(s+3)]=wr,Se[v+(s+2)]=wr;break r}throw Ka(),"Reached an unreachable!"}var Dr=Dr<<1,Lr=zr}}}}while(0);return r+(8|o)|0}function wa(r){return 0|He.__str3342}function pa(r){return 0|He.__str14343}function Ea(r){Se[r>>2]=si+8|0}function Aa(r){0!=(0|r)&&va(r)}function ga(r){ya(r);var a=r;Aa(a)}function ya(r){var a=0|r;Ye(a)}function ma(r){var a=0|r;Ea(a),Se[r>>2]=ni+8|0}function Sa(r){var a=0|r;ya(a);var e=r;Aa(e)}function Ma(r,a){var e,i,v=Me[vi+24>>2],i=v>>2,t=v,f=ua(t),_=Se[f>>2],s=Se[f+4>>2],n=_+s|0,o=_+(s-39)|0;if(0==(7&o|0))var l=0;else var l=7&-o;var l,b=_+(s-47)+l|0,k=b>>>0<(v+16|0)>>>0?t:b,u=k+8|0,e=u>>2,c=u,h=r,d=a-40|0;ca(h,d);var w=k+4|0;Se[w>>2]=27,Se[e]=Se[vi+444>>2],Se[e+1]=Se[vi+448>>2],Se[e+2]=Se[vi+452>>2],Se[e+3]=Se[vi+456>>2],Se[vi+444>>2]=r,Se[vi+448>>2]=a,Se[vi+456>>2]=0,Se[vi+452>>2]=c;var p=k+28|0;Se[p>>2]=7;var E=(k+32|0)>>>0<n>>>0;r:do if(E)for(var A=p;;){var A,g=A+4|0;if(Se[g>>2]=7,(A+8|0)>>>0>=n>>>0)break r;var A=g}while(0);var y=(0|k)==(0|t);r:do if(!y){var m=k-v|0,S=t+m|0,M=m+(t+4)|0,C=Se[M>>2]&-2;Se[M>>2]=C;var R=1|m;Se[i+1]=R;var T=S;if(Se[T>>2]=m,m>>>0<256){var O=m>>>2&1073741822,N=(O<<2)+vi+40|0,I=Me[vi>>2],P=1<<(m>>>3),D=0==(I&P|0);do{if(!D){var L=(O+2<<2)+vi+40|0,F=Me[L>>2];if(F>>>0>=Me[vi+16>>2]>>>0){var X=F,j=L;break}throw Ka(),"Reached an unreachable!"}var U=I|P;Se[vi>>2]=U;var X=N,j=(O+2<<2)+vi+40|0}while(0);var j,X;Se[j>>2]=v,Se[X+12>>2]=v,Se[i+2]=X,Se[i+3]=N}else{var x=v,z=m>>>8,V=0==(0|z);do if(V)var B=0;else{if(m>>>0>16777215){var B=31;break}var H=(z+1048320|0)>>>16&8,K=z<<H,Y=(K+520192|0)>>>16&4,G=K<<Y,W=(G+245760|0)>>>16&2,Z=14-(Y|H|W)+(G<<W>>>15)|0,B=m>>>((Z+7|0)>>>0)&1|Z<<1}while(0);var B,Q=(B<<2)+vi+304|0;Se[i+7]=B,Se[i+5]=0,Se[i+4]=0;var q=Se[vi+4>>2],$=1<<B;if(0==(q&$|0)){var J=q|$;Se[vi+4>>2]=J,Se[Q>>2]=x,Se[i+6]=Q,Se[i+3]=v,Se[i+2]=v}else{if(31==(0|B))var rr=0;else var rr=25-(B>>>1)|0;for(var rr,ar=m<<rr,er=Se[Q>>2];;){var er,ar;if((Se[er+4>>2]&-8|0)==(0|m)){var ir=er+8|0,vr=Me[ir>>2],tr=Me[vi+16>>2],fr=er>>>0<tr>>>0;do if(!fr){if(vr>>>0<tr>>>0)break;Se[vr+12>>2]=x,Se[ir>>2]=x,Se[i+2]=vr,Se[i+3]=er,Se[i+6]=0;break r}while(0);throw Ka(),"Reached an unreachable!"}var _r=(ar>>>31<<2)+er+16|0,sr=Me[_r>>2];if(0==(0|sr)){if(_r>>>0>=Me[vi+16>>2]>>>0){Se[_r>>2]=x,Se[i+6]=er,Se[i+3]=v,Se[i+2]=v;break r}throw Ka(),"Reached an unreachable!"}var ar=ar<<1,er=sr}}}}while(0)}function Ca(r){return d(r)}function Ra(r,a){var e=0;do Ae[r+e]=Ae[a+e],e++;while(0!=Ae[a+e-1]);return r}function Ta(){var r=Ta;return r.LLVM_SAVEDSTACKS||(r.LLVM_SAVEDSTACKS=[]),r.LLVM_SAVEDSTACKS.push(le.stackSave()),r.LLVM_SAVEDSTACKS.length-1}function Oa(r){var a=Ta,e=a.LLVM_SAVEDSTACKS[r];a.LLVM_SAVEDSTACKS.splice(r,1),le.stackRestore(e)}function Na(r,a,e){for(var i=0;i<e;){var v=Ae[r+i],t=Ae[a+i];if(v==t&&0==v)return 0;if(0==v)return-1;if(0==t)return 1;if(v!=t)return v>t?1:-1;i++}return 0}function Ia(r,a){var e=Ca(r),i=0;do Ae[r+e+i]=Ae[a+i],i++;while(0!=Ae[a+i-1]);return r}function Pa(r,a,e,i){if(e>=20&&a%2==r%2)if(a%4==r%4){for(var v=a+e;a%4;)Ae[r++]=Ae[a++];for(var t=a>>2,f=r>>2,_=v>>2;t<_;)Se[f++]=Se[t++];for(a=t<<2,r=f<<2;a<v;)Ae[r++]=Ae[a++]}else{var v=a+e;a%2&&(Ae[r++]=Ae[a++]);for(var s=a>>1,n=r>>1,o=v>>1;s<o;)ye[n++]=ye[s++];a=s<<1,r=n<<1,a<v&&(Ae[r++]=Ae[a++])}else for(;e--;)Ae[r++]=Ae[a++]}function Da(r,a){return Na(r,a,Le)}function La(r,a,e){for(var i=0;i<e;i++){var v=Ae[r+i],t=Ae[a+i];if(v!=t)return v>t?1:-1}return 0}function Fa(r,a,e,i){if(e>=20){for(var v=r+e;r%4;)Ae[r++]=a;a<0&&(a+=256);for(var t=r>>2,f=v>>2,_=a|a<<8|a<<16|a<<24;t<f;)Se[t++]=_;for(r=t<<2;r<v;)Ae[r++]=a}else for(;e--;)Ae[r++]=a}function Xa(r,a,e,i){throw"Assertion failed: "+s(i)+", at: "+[s(r),a,s(e)]}function ja(r){var a=d(r),e=Jr(a+1);return Pa(e,r,a,1),Ae[e+a]=0,e}function Ua(r,a){function e(r){var e;return"double"===r?(xe[0]=Se[a+_>>2],xe[1]=Se[a+_+4>>2],e=ze[0]):"i64"==r?e=[Se[a+_>>2],Se[a+_+4>>2]]:(r="i32",e=Se[a+_>>2]),_+=le.getNativeFieldSize(r),e}for(var i,v,t,f=r,_=0,s=[];;){var n=f;if(i=Ae[f],0===i)break;if(v=Ae[f+1],i=="%".charCodeAt(0)){var o=!1,l=!1,b=!1,k=!1;r:for(;;){switch(v){case"+".charCodeAt(0):o=!0;break;case"-".charCodeAt(0):l=!0;break;case"#".charCodeAt(0):b=!0;break;case"0".charCodeAt(0):if(k)break r;k=!0;break;default:break r}f++,v=Ae[f+1]}var u=0;if(v=="*".charCodeAt(0))u=e("i32"),f++,v=Ae[f+1];else for(;v>="0".charCodeAt(0)&&v<="9".charCodeAt(0);)u=10*u+(v-"0".charCodeAt(0)),f++,v=Ae[f+1];var c=!1;if(v==".".charCodeAt(0)){var h=0;if(c=!0,f++,v=Ae[f+1],v=="*".charCodeAt(0))h=e("i32"),f++;else for(;;){var d=Ae[f+1];if(d<"0".charCodeAt(0)||d>"9".charCodeAt(0))break;h=10*h+(d-"0".charCodeAt(0)),f++}v=Ae[f+1]}else var h=6;var E;switch(String.fromCharCode(v)){case"h":var A=Ae[f+2];A=="h".charCodeAt(0)?(f++,E=1):E=2;break;case"l":var A=Ae[f+2];A=="l".charCodeAt(0)?(f++,E=8):E=4;break;case"L":case"q":case"j":E=8;break;case"z":case"t":case"I":E=4;break;default:E=null}if(E&&f++,v=Ae[f+1],["d","i","u","o","x","X","p"].indexOf(String.fromCharCode(v))!=-1){var m=v=="d".charCodeAt(0)||v=="i".charCodeAt(0);E=E||4;var t=e("i"+8*E);if(8==E&&(t=le.makeBigInt(t[0],t[1],v=="u".charCodeAt(0))),E<=4){var S=Math.pow(256,E)-1;t=(m?y:g)(t&S,8*E)}var M,C=Math.abs(t),R="";if(v=="d".charCodeAt(0)||v=="i".charCodeAt(0))M=y(t,8*E,1).toString(10);else if(v=="u".charCodeAt(0))M=g(t,8*E,1).toString(10),t=Math.abs(t);else if(v=="o".charCodeAt(0))M=(b?"0":"")+C.toString(8);else if(v=="x".charCodeAt(0)||v=="X".charCodeAt(0)){if(R=b?"0x":"",t<0){t=-t,M=(C-1).toString(16);for(var T=[],O=0;O<M.length;O++)T.push((15-parseInt(M[O],16)).toString(16));for(M=T.join("");M.length<2*E;)M="f"+M}else M=C.toString(16);v=="X".charCodeAt(0)&&(R=R.toUpperCase(),M=M.toUpperCase())}else v=="p".charCodeAt(0)&&(0===C?M="(nil)":(R="0x",M=C.toString(16)));if(c)for(;M.length<h;)M="0"+M;for(o&&(R=t<0?"-"+R:"+"+R);R.length+M.length<u;)l?M+=" ":k?M="0"+M:R=" "+R;M=R+M,M.split("").forEach(function(r){s.push(r.charCodeAt(0))})}else if(["f","F","e","E","g","G"].indexOf(String.fromCharCode(v))!=-1){var M,t=e("double");if(isNaN(t))M="nan",k=!1;else if(isFinite(t)){var N=!1,I=Math.min(h,20);if(v=="g".charCodeAt(0)||v=="G".charCodeAt(0)){N=!0,h=h||1;var P=parseInt(t.toExponential(I).split("e")[1],10);h>P&&P>=-4?(v=(v=="g".charCodeAt(0)?"f":"F").charCodeAt(0),h-=P+1):(v=(v=="g".charCodeAt(0)?"e":"E").charCodeAt(0),h--),I=Math.min(h,20)}v=="e".charCodeAt(0)||v=="E".charCodeAt(0)?(M=t.toExponential(I),/[eE][-+]\\d$/.test(M)&&(M=M.slice(0,-1)+"0"+M.slice(-1))):v!="f".charCodeAt(0)&&v!="F".charCodeAt(0)||(M=t.toFixed(I));var D=M.split("e");if(N&&!b)for(;D[0].length>1&&D[0].indexOf(".")!=-1&&("0"==D[0].slice(-1)||"."==D[0].slice(-1));)D[0]=D[0].slice(0,-1);else for(b&&M.indexOf(".")==-1&&(D[0]+=".");h>I++;)D[0]+="0";M=D[0]+(D.length>1?"e"+D[1]:""),v=="E".charCodeAt(0)&&(M=M.toUpperCase()),o&&t>=0&&(M="+"+M)}else M=(t<0?"-":"")+"inf",k=!1;for(;M.length<u;)l?M+=" ":M=!k||"-"!=M[0]&&"+"!=M[0]?(k?"0":" ")+M:M[0]+"0"+M.slice(1);v<"a".charCodeAt(0)&&(M=M.toUpperCase()),M.split("").forEach(function(r){s.push(r.charCodeAt(0))})}else if(v=="s".charCodeAt(0)){var L,F=e("i8*");if(F?(L=w(F),c&&L.length>h&&(L=L.slice(0,h))):L=p("(null)",!0),!l)for(;L.length<u--;)s.push(" ".charCodeAt(0));if(s=s.concat(L),l)for(;L.length<u--;)s.push(" ".charCodeAt(0))}else if(v=="c".charCodeAt(0)){for(l&&s.push(e("i8"));--u>0;)s.push(" ".charCodeAt(0));l||s.push(e("i8"))}else if(v=="n".charCodeAt(0)){var X=e("i32*");Se[X>>2]=s.length}else if(v=="%".charCodeAt(0))s.push(i);else for(var O=n;O<f+2;O++)s.push(Ae[O]);f+=2}else s.push(i),f+=1}return s}function xa(r,a,e,i){for(var v=Ua(e,i),t=void 0===a?v.length:Math.min(v.length,a-1),f=0;f<t;f++)Ae[r+f]=v[f];return Ae[r+f]=0,v.length}function za(r,a,e){return xa(r,void 0,a,e)}function Va(r){return r in{32:0,9:0,10:0,11:0,12:0,13:0}}function Ba(r){return r>="0".charCodeAt(0)&&r<="9".charCodeAt(0)}function Ha(r){for(var a;(a=Ae[r])&&Va(a);)r++;if(!a||!Ba(a))return 0;for(var e=r;(a=Ae[e])&&Ba(a);)e++;return Math.floor(Number(s(r).substr(0,e-r)))}function Ka(r){throw ke=!0,"ABORT: "+r+", at "+(new Error).stack}function Ya(r){return Ya.ret||(Ya.ret=_([0],"i32",we)),Se[Ya.ret>>2]=r,r}function Ga(r,a,e,i){var v=$e.streams[r];if(!v||v.object.isDevice)return Ya(Ge.EBADF),-1;if(v.isWrite){if(v.object.isFolder)return Ya(Ge.EISDIR),-1;if(e<0||i<0)return Ya(Ge.EINVAL),-1;for(var t=v.object.contents;t.length<i;)t.push(0);for(var f=0;f<e;f++)t[i+f]=ge[a+f];return v.object.timestamp=Date.now(),f}return Ya(Ge.EACCES),-1}function Wa(r,a,e){var i=$e.streams[r];if(i){if(i.isWrite){if(e<0)return Ya(Ge.EINVAL),-1;if(i.object.isDevice){if(i.object.output){for(var v=0;v<e;v++)try{i.object.output(Ae[a+v])}catch(r){return Ya(Ge.EIO),-1}return i.object.timestamp=Date.now(),v}return Ya(Ge.ENXIO),-1}var t=Ga(r,a,e,i.position);return t!=-1&&(i.position+=t),t}return Ya(Ge.EACCES),-1}return Ya(Ge.EBADF),-1}function Za(r,a,e,i){var v=e*a;if(0==v)return 0;var t=Wa(i,r,v);return t==-1?($e.streams[i]&&($e.streams[i].error=!0),-1):Math.floor(t/a)}function Qa(r,a,e){var i=Ua(a,e),v=le.stackSave(),t=Za(_(i,"i8",de),1,i.length,r);return le.stackRestore(v),t}function qa(r){switch(r){case 8:return Pe;case 54:case 56:case 21:case 61:case 63:case 22:case 67:case 23:case 24:case 25:case 26:case 27:case 69:case 28:case 101:case 70:case 71:case 29:case 30:case 199:case 75:case 76:case 32:case 43:case 44:case 80:case 46:case 47:case 45:case 48:case 49:case 42:case 82:case 33:case 7:case 108:case 109:case 107:case 112:case 119:case 121:return 200809;case 13:case 104:case 94:case 95:case 34:case 35:case 77:case 81:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 91:case 94:case 95:case 110:case 111:case 113:case 114:case 115:case 116:case 117:case 118:case 120:case 40:case 16:case 79:case 19:return-1;case 92:case 93:case 5:case 72:case 6:case 74:case 92:case 93:case 96:case 97:case 98:case 99:case 102:case 103:case 105:return 1;case 38:case 66:case 50:case 51:case 4:return 1024;case 15:case 64:case 41:return 32;case 55:case 37:case 17:return 2147483647;case 18:case 1:return 47839;case 59:case 57:return 99;case 68:case 58:return 2048;case 0:return 2097152;case 3:return 65536;case 14:return 32768;case 73:return 32767;case 39:return 16384;case 60:return 1e3;case 106:return 700;case 52:return 256;case 62:return 255;case 2:return 100;case 65:return 64;case 36:return 20;case 100:return 16;case 20:return 6;case 53:return 4}return Ya(Ge.EINVAL),-1}function $a(r){var a=Math.floor(Date.now()/1e3);return r&&(Se[r>>2]=a),a}function Ja(){return Ya.ret}function re(r){var a=re;a.called||(Ie=o(Ie),a.called=!0);var e=Ie;return 0!=r&&le.staticAlloc(r),e}function ae(){return Se[ae.buf>>2]}function ee(r){r=r||Module.arguments,k();var a=null;return Module._main&&(a=Module.callMain(r),Module.noExitRuntime||u()),a}var ie=[],ve=false,te="object"==typeof window,fe="function"==typeof importScripts,_e=!te&&!ve&&!fe;if(ve){print=function(r){process.stdout.write(r+"\\n")},printErr=function(r){process.stderr.write(r+"\\n")};var se=require("fs");read=function(r){var a=se.readFileSync(r).toString();return a||"/"==r[0]||(r=__dirname.split("/").slice(0,-1).join("/")+"/src/"+r,a=se.readFileSync(r).toString()),a},load=function(a){r(read(a))},ie=process.argv.slice(2)}else if(_e)this.read||(this.read=function(r){snarf(r)}),"undefined"!=typeof scriptArgs?ie=scriptArgs:"undefined"!=typeof arguments&&(ie=arguments);else if(te)this.print=printErr=function(r){console.log(r)},this.read=function(r){var a=new XMLHttpRequest;return a.open("GET",r,!1),a.send(null),a.responseText},this.arguments&&(ie=arguments);else{if(!fe)throw"Unknown runtime environment. Where are we?";this.load=importScripts}"undefined"==typeof load&&"undefined"!=typeof read&&(this.load=function(a){r(read(a))}),"undefined"==typeof printErr&&(this.printErr=function(){}),"undefined"==typeof print&&(this.print=printErr);try{this.Module=Module}catch(r){this.Module=Module={}}Module.arguments||(Module.arguments=ie),Module.print&&(print=Module.print);var ne,oe,le={stackSave:function(){return Oe},stackRestore:function(r){Oe=r},forceAlign:function(r,a){if(a=a||4,1==a)return r;if(isNumber(r)&&isNumber(a))return Math.ceil(r/a)*a;if(isNumber(a)&&isPowerOfTwo(a)){var e=log2(a);return"(((("+r+")+"+(a-1)+")>>"+e+")<<"+e+")"}return"Math.ceil(("+r+")/"+a+")*"+a},isNumberType:function(r){return r in le.INT_TYPES||r in le.FLOAT_TYPES},isPointerType:function(r){return"*"==r[r.length-1]},isStructType:function(r){return!isPointerType(r)&&(!!/^\\[\\d+\\ x\\ (.*)\\]/.test(r)||(!!/<?{ [^}]* }>?/.test(r)||"%"==r[0]))},INT_TYPES:{i1:0,i8:0,i16:0,i32:0,i64:0},FLOAT_TYPES:{float:0,double:0},bitshift64:function(r,e,i,v){var t=Math.pow(2,v)-1;if(v<32)switch(i){case"shl":return[r<<v,e<<v|(r&t<<32-v)>>>32-v];case"ashr":return[(r>>>v|(e&t)<<32-v)>>0>>>0,e>>v>>>0];case"lshr":return[(r>>>v|(e&t)<<32-v)>>>0,e>>>v]}else if(32==v)switch(i){case"shl":return[0,r];case"ashr":return[e,(0|e)<0?t:0];case"lshr":return[e,0]}else switch(i){case"shl":return[0,r<<v-32];case"ashr":return[e>>v-32>>>0,(0|e)<0?t:0];case"lshr":return[e>>>v-32,0]}a("unknown bitshift64 op: "+[value,i,v])},or64:function(r,a){var e=0|r|(0|a),i=4294967296*(Math.round(r/4294967296)|Math.round(a/4294967296));return e+i},and64:function(r,a){var e=(0|r)&(0|a),i=4294967296*(Math.round(r/4294967296)&Math.round(a/4294967296));return e+i},xor64:function(r,a){var e=(0|r)^(0|a),i=4294967296*(Math.round(r/4294967296)^Math.round(a/4294967296));return e+i},getNativeTypeSize:function(r,a){if(1==le.QUANTUM_SIZE)return 1;var i={"%i1":1,"%i8":1,"%i16":2,"%i32":4,"%i64":8,"%float":4,"%double":8}["%"+r];if(!i)if("*"==r[r.length-1])i=le.QUANTUM_SIZE;else if("i"==r[0]){var v=parseInt(r.substr(1));e(v%8==0),i=v/8}return i},getNativeFieldSize:function(r){return Math.max(le.getNativeTypeSize(r),le.QUANTUM_SIZE)},dedup:function(r,a){var e={};return a?r.filter(function(r){return!e[r[a]]&&(e[r[a]]=!0,!0)}):r.filter(function(r){return!e[r]&&(e[r]=!0,!0)})},set:function(){for(var r="object"==typeof arguments[0]?arguments[0]:arguments,a={},e=0;e<r.length;e++)a[r[e]]=0;return a},calculateStructAlignment:function(r){r.flatSize=0,r.alignSize=0;var a=[],e=-1;return r.flatIndexes=r.fields.map(function(i){var v,t;if(le.isNumberType(i)||le.isPointerType(i))v=le.getNativeTypeSize(i),t=v;else{if(!le.isStructType(i))throw"Unclear type in struct: "+i+", in "+r.name_+" :: "+dump(Types.types[r.name_]);v=Types.types[i].flatSize,t=Types.types[i].alignSize}t=r.packed?1:Math.min(t,le.QUANTUM_SIZE),r.alignSize=Math.max(r.alignSize,t);var f=le.alignMemory(r.flatSize,t);return r.flatSize=f+v,e>=0&&a.push(f-e),e=f,f}),r.flatSize=le.alignMemory(r.flatSize,r.alignSize),0==a.length?r.flatFactor=r.flatSize:1==le.dedup(a).length&&(r.flatFactor=a[0]),r.needsFlattening=1!=r.flatFactor,r.flatIndexes},generateStructInfo:function(r,a,i){var v,t;if(a){if(i=i||0,v=("undefined"==typeof Types?le.typeInfo:Types.types)[a],!v)return null;e(v.fields.length===r.length,"Number of named fields must match the type for "+a),t=v.flatIndexes}else{var v={fields:r.map(function(r){return r[0]})};t=le.calculateStructAlignment(v)}var f={__size__:v.flatSize};return a?r.forEach(function(r,a){if("string"==typeof r)f[r]=t[a]+i;else{var e;for(var _ in r)e=_;f[e]=le.generateStructInfo(r[e],v.fields[a],t[a])}}):r.forEach(function(r,a){f[r[1]]=t[a]}),f},stackAlloc:function(r){var a=Oe;return Oe+=r,Oe=Oe+3>>2<<2,a},staticAlloc:function(r){var a=Ie;return Ie+=r,Ie=Ie+3>>2<<2,Ie>=Le&&l(),a},alignMemory:function(r,a){var e=r=Math.ceil(r/(a?a:4))*(a?a:4);return e},makeBigInt:function(r,a,e){var i=e?(r>>>0)+4294967296*(a>>>0):(r>>>0)+4294967296*(0|a);return i},QUANTUM_SIZE:4,__dummy__:0},be={MAX_ALLOWED:0,corrections:0,sigs:{},note:function(r,e,i){e||(this.corrections++,this.corrections>=this.MAX_ALLOWED&&a("\\n\\nToo many corrections!"))},print:function(){}},ke=!1,ue=0,ce=this;Module.ccall=i,Module.setValue=t,Module.getValue=f;var he=0,de=1,we=2;Module.ALLOC_NORMAL=he,Module.ALLOC_STACK=de,Module.ALLOC_STATIC=we,Module.allocate=_,Module.Pointer_stringify=s,Module.Array_stringify=n;var pe,Ee,Ae,ge,ye,me,Se,Me,Ce,Re,Te,Oe,Ne,Ie,Pe=4096,De=Module.TOTAL_STACK||5242880,Le=Module.TOTAL_MEMORY||10485760;Module.FAST_MEMORY||2097152;e(!!(Int32Array&&Float64Array&&new Int32Array(1).subarray&&new Int32Array(1).set),"Cannot fallback to non-typed array case: Code is too specialized");var Fe=new ArrayBuffer(Le);Ae=new Int8Array(Fe),ye=new Int16Array(Fe),Se=new Int32Array(Fe),ge=new Uint8Array(Fe),me=new Uint16Array(Fe),Me=new Uint32Array(Fe),Ce=new Float32Array(Fe),Re=new Float64Array(Fe),Se[0]=255,e(255===ge[0]&&0===ge[3],"Typed arrays 2 must be run on a little-endian system");var Xe=p("(null)");Ie=Xe.length;for(var je=0;je<Xe.length;je++)Ae[je]=Xe[je];Module.HEAP=Ee,Module.HEAP8=Ae,Module.HEAP16=ye,Module.HEAP32=Se,Module.HEAPU8=ge,Module.HEAPU16=me,Module.HEAPU32=Me,Module.HEAPF32=Ce,Module.HEAPF64=Re,Te=Oe=le.alignMemory(Ie),Ne=Te+De;var Ue=le.alignMemory(Ne,8),xe=(Ae.subarray(Ue),Se.subarray(Ue>>2)),ze=(Ce.subarray(Ue>>2),Re.subarray(Ue>>3));Ne=Ue+8,Ie=o(Ne);var Ve=[],Be=[];Module.Array_copy=c,Module.TypedArray_copy=h,Module.String_len=d,Module.String_copy=w,Module.intArrayFromString=p,Module.intArrayToString=E,Module.writeStringToMemory=A;var He=[],Ke=0;O.X=1,N.X=1,V.X=1,H.X=1,G.X=1,W.X=1,q.X=1,$.X=1,rr.X=1,ar.X=1,er.X=1,vr.X=1,nr.X=1,or.X=1,kr.X=1,hr.X=1,Ar.X=1,Sr.X=1,Tr.X=1,Ir.X=1,Pr.X=1,Dr.X=1,Lr.X=1,Fr.X=1,Xr.X=1,zr.X=1,Vr.X=1,Br.X=1,Gr.X=1,$r.X=1,Module._malloc=Jr,Jr.X=1,ra.X=1,aa.X=1,ea.X=1,ia.X=1,Module._free=va,va.X=1,_a.X=1,sa.X=1,na.X=1,oa.X=1,la.X=1,da.X=1,Ma.X=1;var Ye,Ge={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18},We=0,Ze=0,Qe=0,qe=0,$e={currentPath:"/",nextInode:2,streams:[null],ignorePermissions:!0,absolutePath:function(r,a){if("string"!=typeof r)return null;void 0===a&&(a=$e.currentPath),r&&"/"==r[0]&&(a="");for(var e=a+"/"+r,i=e.split("/").reverse(),v=[""];i.length;){var t=i.pop();""==t||"."==t||(".."==t?v.length>1&&v.pop():v.push(t))}return 1==v.length?"/":v.join("/")},analyzePath:function(r,a,e){var i={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};if(r=$e.absolutePath(r),"/"==r)i.isRoot=!0,i.exists=i.parentExists=!0,i.name="/",i.path=i.parentPath="/",i.object=i.parentObject=$e.root;else if(null!==r){e=e||0,r=r.slice(1).split("/");for(var v=$e.root,t=[""];r.length;){1==r.length&&v.isFolder&&(i.parentExists=!0,i.parentPath=1==t.length?"/":t.join("/"),i.parentObject=v,i.name=r[0]);var f=r.shift();if(!v.isFolder){i.error=Ge.ENOTDIR;break}if(!v.read){i.error=Ge.EACCES;break}if(!v.contents.hasOwnProperty(f)){i.error=Ge.ENOENT;break}if(v=v.contents[f],v.link&&(!a||0!=r.length)){if(e>40){i.error=Ge.ELOOP;break}var _=$e.absolutePath(v.link,t.join("/"));return $e.analyzePath([_].concat(r).join("/"),a,e+1)}t.push(f),0==r.length&&(i.exists=!0,i.path=t.join("/"),i.object=v)}return i}return i},findObject:function(r,a){$e.ensureRoot();var e=$e.analyzePath(r,a);return e.exists?e.object:(Ya(e.error),null)},createObject:function(r,a,e,i,v){if(r||(r="/"),"string"==typeof r&&(r=$e.findObject(r)),!r)throw Ya(Ge.EACCES),new Error("Parent path must exist.");if(!r.isFolder)throw Ya(Ge.ENOTDIR),
new Error("Parent must be a folder.");if(!r.write&&!$e.ignorePermissions)throw Ya(Ge.EACCES),new Error("Parent folder must be writeable.");if(!a||"."==a||".."==a)throw Ya(Ge.ENOENT),new Error("Name must not be empty.");if(r.contents.hasOwnProperty(a))throw Ya(Ge.EEXIST),new Error("Can't overwrite object.");r.contents[a]={read:void 0===i||i,write:void 0!==v&&v,timestamp:Date.now(),inodeNumber:$e.nextInode++};for(var t in e)e.hasOwnProperty(t)&&(r.contents[a][t]=e[t]);return r.contents[a]},createFolder:function(r,a,e,i){var v={isFolder:!0,isDevice:!1,contents:{}};return $e.createObject(r,a,v,e,i)},createPath:function(r,a,e,i){var v=$e.findObject(r);if(null===v)throw new Error("Invalid parent.");for(a=a.split("/").reverse();a.length;){var t=a.pop();t&&(v.contents.hasOwnProperty(t)||$e.createFolder(v,t,e,i),v=v.contents[t])}return v},createFile:function(r,a,e,i,v){return e.isFolder=!1,$e.createObject(r,a,e,i,v)},createDataFile:function(r,a,e,i,v){if("string"==typeof e){for(var t=new Array(e.length),f=0,_=e.length;f<_;++f)t[f]=e.charCodeAt(f);e=t}var s={isDevice:!1,contents:e};return $e.createFile(r,a,s,i,v)},createLazyFile:function(r,a,e,i,v){var t={isDevice:!1,url:e};return $e.createFile(r,a,t,i,v)},createLink:function(r,a,e,i,v){var t={isDevice:!1,link:e};return $e.createFile(r,a,t,i,v)},createDevice:function(r,a,e,i){if(!e&&!i)throw new Error("A device must have at least one callback defined.");var v={isDevice:!0,input:e,output:i};return $e.createFile(r,a,v,Boolean(e),Boolean(i))},forceLoadFile:function(r){if(r.isDevice||r.isFolder||r.link||r.contents)return!0;var a=!0;if("undefined"!=typeof XMLHttpRequest)e("Cannot do synchronous binary XHRs in modern browsers. Use --embed-file or --preload-file in emcc");else{if("undefined"==typeof read)throw new Error("Cannot load without read() or XMLHttpRequest.");try{r.contents=p(read(r.url),!0)}catch(r){a=!1}}return a||Ya(Ge.EIO),a},ensureRoot:function(){$e.root||($e.root={read:!0,write:!0,isFolder:!0,isDevice:!1,timestamp:Date.now(),inodeNumber:1,contents:{}})},init:function(r,a,i){function v(r){null===r||r==="\\n".charCodeAt(0)?(a.printer(a.buffer.join("")),a.buffer=[]):a.buffer.push(String.fromCharCode(r))}e(!$e.init.initialized,"FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)"),$e.init.initialized=!0,$e.ensureRoot(),r=r||Module.stdin,a=a||Module.stdout,i=i||Module.stderr;var t=!0,f=!0,s=!0;r||(t=!1,r=function(){if(!r.cache||!r.cache.length){var a;"undefined"!=typeof window&&"function"==typeof window.prompt?a=window.prompt("Input: "):"function"==typeof readline&&(a=readline()),a||(a=""),r.cache=p(a+"\\n",!0)}return r.cache.shift()}),a||(f=!1,a=v),a.printer||(a.printer=print),a.buffer||(a.buffer=[]),i||(s=!1,i=v),i.printer||(i.printer=print),i.buffer||(i.buffer=[]),$e.createFolder("/","tmp",!0,!0);var n=$e.createFolder("/","dev",!0,!0),o=$e.createDevice(n,"stdin",r),l=$e.createDevice(n,"stdout",null,a),b=$e.createDevice(n,"stderr",null,i);$e.createDevice(n,"tty",r,a),$e.streams[1]={path:"/dev/stdin",object:o,position:0,isRead:!0,isWrite:!1,isAppend:!1,isTerminal:!t,error:!1,eof:!1,ungotten:[]},$e.streams[2]={path:"/dev/stdout",object:l,position:0,isRead:!1,isWrite:!0,isAppend:!1,isTerminal:!f,error:!1,eof:!1,ungotten:[]},$e.streams[3]={path:"/dev/stderr",object:b,position:0,isRead:!1,isWrite:!0,isAppend:!1,isTerminal:!s,error:!1,eof:!1,ungotten:[]},We=_([1],"void*",we),Ze=_([2],"void*",we),Qe=_([3],"void*",we),$e.createPath("/","dev/shm/tmp",!0,!0),$e.streams[We]=$e.streams[1],$e.streams[Ze]=$e.streams[2],$e.streams[Qe]=$e.streams[3],qe=_([_([0,0,0,0,We,0,0,0,Ze,0,0,0,Qe,0,0,0],"void*",we)],"void*",we)},quit:function(){$e.init.initialized&&($e.streams[2]&&$e.streams[2].object.output.buffer.length>0&&$e.streams[2].object.output("\\n".charCodeAt(0)),$e.streams[3]&&$e.streams[3].object.output.buffer.length>0&&$e.streams[3].object.output("\\n".charCodeAt(0)))}},Je=Ja;Ve.unshift({func:function(){$e.ignorePermissions=!1,$e.init.initialized||$e.init()}}),Be.push({func:function(){$e.quit()}}),Ya(0),ae.buf=_(12,"void*",we),Module.callMain=function(r){function a(){for(var r=0;r<3;r++)i.push(0)}var e=r.length+1,i=[_(p("/bin/this.program"),"i8",we)];a();for(var v=0;v<e-1;v+=1)i.push(_(p(r[v]),"i8",we)),a();return i.push(0),i=_(i,"i32",we),_main(e,i,0)};var ri,ai,ei,ii,vi,ti,qe,fi,_i,si,ni,oi,li,bi,ki,ui,ci,hi,di,wi;if(He.__str=_([97,78,0],"i8",we),He.__str1=_([38,61,0],"i8",we),He.__str2=_([97,83,0],"i8",we),He.__str3=_([61,0],"i8",we),He.__str4=_([97,97,0],"i8",we),He.__str5=_([38,38,0],"i8",we),He.__str6=_([97,100,0],"i8",we),He.__str7=_([38,0],"i8",we),He.__str8=_([97,110,0],"i8",we),He.__str9=_([99,108,0],"i8",we),He.__str10=_([40,41,0],"i8",we),He.__str11=_([99,109,0],"i8",we),He.__str12=_([44,0],"i8",we),He.__str13=_([99,111,0],"i8",we),He.__str14=_([126,0],"i8",we),He.__str15=_([100,86,0],"i8",we),He.__str16=_([47,61,0],"i8",we),He.__str17=_([100,97,0],"i8",we),He.__str18=_([100,101,108,101,116,101,91,93,0],"i8",we),He.__str19=_([100,101,0],"i8",we),He.__str20=_([42,0],"i8",we),He.__str21=_([100,108,0],"i8",we),He.__str22=_([100,101,108,101,116,101,0],"i8",we),He.__str23=_([100,118,0],"i8",we),He.__str24=_([47,0],"i8",we),He.__str25=_([101,79,0],"i8",we),He.__str26=_([94,61,0],"i8",we),He.__str27=_([101,111,0],"i8",we),He.__str28=_([94,0],"i8",we),He.__str29=_([101,113,0],"i8",we),He.__str30=_([61,61,0],"i8",we),He.__str31=_([103,101,0],"i8",we),He.__str32=_([62,61,0],"i8",we),He.__str33=_([103,116,0],"i8",we),He.__str34=_([62,0],"i8",we),He.__str35=_([105,120,0],"i8",we),He.__str36=_([91,93,0],"i8",we),He.__str37=_([108,83,0],"i8",we),He.__str38=_([60,60,61,0],"i8",we),He.__str39=_([108,101,0],"i8",we),He.__str40=_([60,61,0],"i8",we),He.__str41=_([108,115,0],"i8",we),He.__str42=_([60,60,0],"i8",we),He.__str43=_([108,116,0],"i8",we),He.__str44=_([60,0],"i8",we),He.__str45=_([109,73,0],"i8",we),He.__str46=_([45,61,0],"i8",we),He.__str47=_([109,76,0],"i8",we),He.__str48=_([42,61,0],"i8",we),He.__str49=_([109,105,0],"i8",we),He.__str51=_([109,108,0],"i8",we),He.__str52=_([109,109,0],"i8",we),He.__str53=_([45,45,0],"i8",we),He.__str54=_([110,97,0],"i8",we),He.__str55=_([110,101,119,91,93,0],"i8",we),He.__str56=_([110,101,0],"i8",we),He.__str57=_([33,61,0],"i8",we),He.__str58=_([110,103,0],"i8",we),He.__str59=_([110,116,0],"i8",we),He.__str60=_([33,0],"i8",we),He.__str61=_([110,119,0],"i8",we),He.__str62=_([110,101,119,0],"i8",we),He.__str63=_([111,82,0],"i8",we),He.__str64=_([124,61,0],"i8",we),He.__str65=_([111,111,0],"i8",we),He.__str66=_([124,124,0],"i8",we),He.__str67=_([111,114,0],"i8",we),He.__str68=_([124,0],"i8",we),He.__str69=_([112,76,0],"i8",we),He.__str70=_([43,61,0],"i8",we),He.__str71=_([112,108,0],"i8",we),He.__str72=_([43,0],"i8",we),He.__str73=_([112,109,0],"i8",we),He.__str74=_([45,62,42,0],"i8",we),He.__str75=_([112,112,0],"i8",we),He.__str76=_([43,43,0],"i8",we),He.__str77=_([112,115,0],"i8",we),He.__str78=_([112,116,0],"i8",we),He.__str79=_([45,62,0],"i8",we),He.__str80=_([113,117,0],"i8",we),He.__str81=_([63,0],"i8",we),He.__str82=_([114,77,0],"i8",we),He.__str83=_([37,61,0],"i8",we),He.__str84=_([114,83,0],"i8",we),He.__str85=_([62,62,61,0],"i8",we),He.__str86=_([114,109,0],"i8",we),He.__str87=_([37,0],"i8",we),He.__str88=_([114,115,0],"i8",we),He.__str89=_([62,62,0],"i8",we),He.__str90=_([115,116,0],"i8",we),He.__str91=_([115,105,122,101,111,102,32,0],"i8",we),He.__str92=_([115,122,0],"i8",we),ri=_([0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0],we),He.__str95=_([98,111,111,108,101,97,110,0],"i8",we),He.__str97=_([98,121,116,101,0],"i8",we),He.__str101=_([95,95,102,108,111,97,116,49,50,56,0],"i8",we),He.__str105=_([117,110,115,105,103,110,101,100,0],"i8",we),He.__str114=_([108,111,110,103,32,108,111,110,103,0],"i8",we),He.__str115=_([117,110,115,105,103,110,101,100,32,108,111,110,103,32,108,111,110,103,0],"i8",we),ai=_([0,0,0,0,11,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,8,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,11,0,0,0,8,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,8,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,10,0,0,0,8,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,13,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,9,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,6,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0],["*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0],we),He.__str117=_([95,71,76,79,66,65,76,95,0],"i8",we),He.__str118=_([103,108,111,98,97,108,32,99,111,110,115,116,114,117,99,116,111,114,115,32,107,101,121,101,100,32,116,111,32,0],"i8",we),He.__str119=_([103,108,111,98,97,108,32,100,101,115,116,114,117,99,116,111,114,115,32,107,101,121,101,100,32,116,111,32,0],"i8",we),He.__str120=_([58,58,0],"i8",we),He.__str121=_([118,116,97,98,108,101,32,102,111,114,32,0],"i8",we),He.__str122=_([86,84,84,32,102,111,114,32,0],"i8",we),He.__str123=_([99,111,110,115,116,114,117,99,116,105,111,110,32,118,116,97,98,108,101,32,102,111,114,32,0],"i8",we),He.__str124=_([45,105,110,45,0],"i8",we),He.__str125=_([116,121,112,101,105,110,102,111,32,102,111,114,32,0],"i8",we),He.__str126=_([116,121,112,101,105,110,102,111,32,110,97,109,101,32,102,111,114,32,0],"i8",we),He.__str127=_([116,121,112,101,105,110,102,111,32,102,110,32,102,111,114,32,0],"i8",we),He.__str128=_([110,111,110,45,118,105,114,116,117,97,108,32,116,104,117,110,107,32,116,111,32,0],"i8",we),He.__str129=_([118,105,114,116,117,97,108,32,116,104,117,110,107,32,116,111,32,0],"i8",we),He.__str130=_([99,111,118,97,114,105,97,110,116,32,114,101,116,117,114,110,32,116,104,117,110,107,32,116,111,32,0],"i8",we),He.__str131=_([106,97,118,97,32,67,108,97,115,115,32,102,111,114,32,0],"i8",we),He.__str132=_([103,117,97,114,100,32,118,97,114,105,97,98,108,101,32,102,111,114,32,0],"i8",we),He.__str133=_([114,101,102,101,114,101,110,99,101,32,116,101,109,112,111,114,97,114,121,32,102,111,114,32,0],"i8",we),He.__str134=_([104,105,100,100,101,110,32,97,108,105,97,115,32,102,111,114,32,0],"i8",we),He.__str135=_([58,58,42,0],"i8",we),He.__str136=_([44,32,0],"i8",we),He.__str137=_([111,112,101,114,97,116,111,114,0],"i8",we),He.__str139=_([41,32,0],"i8",we),He.__str140=_([32,40,0],"i8",we),He.__str141=_([41,32,58,32,40,0],"i8",we),He.__str142=_([117,108,0],"i8",we),He.__str143=_([108,108,0],"i8",we),He.__str144=_([117,108,108,0],"i8",we),He.__str145=_([102,97,108,115,101,0],"i8",we),He.__str146=_([116,114,117,101,0],"i8",we),He.__str147=_([32,114,101,115,116,114,105,99,116,0],"i8",we),He.__str148=_([32,118,111,108,97,116,105,108,101,0],"i8",we),He.__str149=_([32,99,111,110,115,116,0],"i8",we),He.__str150=_([99,111,109,112,108,101,120,32,0],"i8",we),He.__str151=_([105,109,97,103,105,110,97,114,121,32,0],"i8",we),ei=_([116,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,9,0,0,0,98,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,12,0,0,0,115,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,70,0,0,0,0,0,0,0,12,0,0,0,105,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,13,0,0,0,111,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,13,0,0,0,100,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,14,0,0,0],["i8",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i8",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i8",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i8",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i8",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i8",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i8",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0],we),He.__str152=_([115,116,100,0],"i8",we),He.__str153=_([115,116,100,58,58,97,108,108,111,99,97,116,111,114,0],"i8",we),He.__str154=_([97,108,108,111,99,97,116,111,114,0],"i8",we),He.__str155=_([115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,0],"i8",we),He.__str156=_([98,97,115,105,99,95,115,116,114,105,110,103,0],"i8",we),He.__str157=_([115,116,100,58,58,115,116,114,105,110,103,0],"i8",we),He.__str158=_([115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,44,32,115,116,100,58,58,97,108,108,111,99,97,116,111,114,60,99,104,97,114,62,32,62,0],"i8",we),He.__str159=_([115,116,100,58,58,105,115,116,114,101,97,109,0],"i8",we),He.__str160=_([115,116,100,58,58,98,97,115,105,99,95,105,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0],"i8",we),He.__str161=_([98,97,115,105,99,95,105,115,116,114,101,97,109,0],"i8",we),He.__str162=_([115,116,100,58,58,111,115,116,114,101,97,109,0],"i8",we),He.__str163=_([115,116,100,58,58,98,97,115,105,99,95,111,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0],"i8",we),He.__str164=_([98,97,115,105,99,95,111,115,116,114,101,97,109,0],"i8",we),He.__str165=_([115,116,100,58,58,105,111,115,116,114,101,97,109,0],"i8",we),He.__str166=_([115,116,100,58,58,98,97,115,105,99,95,105,111,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0],"i8",we),He.__str167=_([98,97,115,105,99,95,105,111,115,116,114,101,97,109,0],"i8",we),He.__str168=_([115,116,114,105,110,103,32,108,105,116,101,114,97,108,0],"i8",we),He.__str169=_([40,97,110,111,110,121,109,111,117,115,32,110,97,109,101,115,112,97,99,101,41,0],"i8",we),He._symbol_demangle_dashed_null=_([45,45,110,117,108,108,45,45,0],"i8",we),He.__str170=_([37,115,37,115,0],"i8",we),He.__str1171=_([111,112,101,114,97,116,111,114,32,110,101,119,0],"i8",we),He.__str2172=_([111,112,101,114,97,116,111,114,32,100,101,108,101,116,101,0],"i8",we),He.__str3173=_([111,112,101,114,97,116,111,114,61,0],"i8",we),He.__str4174=_([111,112,101,114,97,116,111,114,62,62,0],"i8",we),He.__str5175=_([111,112,101,114,97,116,111,114,60,60,0],"i8",we),He.__str6176=_([111,112,101,114,97,116,111,114,33,0],"i8",we),He.__str7177=_([111,112,101,114,97,116,111,114,61,61,0],"i8",we),He.__str8178=_([111,112,101,114,97,116,111,114,33,61,0],"i8",we),He.__str9179=_([111,112,101,114,97,116,111,114,91,93,0],"i8",we),He.__str10180=_([111,112,101,114,97,116,111,114,32,0],"i8",we),He.__str11181=_([111,112,101,114,97,116,111,114,45,62,0],"i8",we),He.__str12182=_([111,112,101,114,97,116,111,114,42,0],"i8",we),He.__str13183=_([111,112,101,114,97,116,111,114,43,43,0],"i8",we),He.__str14184=_([111,112,101,114,97,116,111,114,45,45,0],"i8",we),He.__str15185=_([111,112,101,114,97,116,111,114,45,0],"i8",we),He.__str16186=_([111,112,101,114,97,116,111,114,43,0],"i8",we),He.__str17187=_([111,112,101,114,97,116,111,114,38,0],"i8",we),He.__str18188=_([111,112,101,114,97,116,111,114,45,62,42,0],"i8",we),He.__str19189=_([111,112,101,114,97,116,111,114,47,0],"i8",we),He.__str20190=_([111,112,101,114,97,116,111,114,37,0],"i8",we),He.__str21191=_([111,112,101,114,97,116,111,114,60,0],"i8",we),He.__str22192=_([111,112,101,114,97,116,111,114,60,61,0],"i8",we),He.__str23193=_([111,112,101,114,97,116,111,114,62,0],"i8",we),He.__str24194=_([111,112,101,114,97,116,111,114,62,61,0],"i8",we),He.__str25195=_([111,112,101,114,97,116,111,114,44,0],"i8",we),He.__str26196=_([111,112,101,114,97,116,111,114,40,41,0],"i8",we),He.__str27197=_([111,112,101,114,97,116,111,114,126,0],"i8",we),He.__str28198=_([111,112,101,114,97,116,111,114,94,0],"i8",we),He.__str29199=_([111,112,101,114,97,116,111,114,124,0],"i8",we),He.__str30200=_([111,112,101,114,97,116,111,114,38,38,0],"i8",we),He.__str31201=_([111,112,101,114,97,116,111,114,124,124,0],"i8",we),He.__str32202=_([111,112,101,114,97,116,111,114,42,61,0],"i8",we),He.__str33203=_([111,112,101,114,97,116,111,114,43,61,0],"i8",we),He.__str34204=_([111,112,101,114,97,116,111,114,45,61,0],"i8",we),He.__str35205=_([111,112,101,114,97,116,111,114,47,61,0],"i8",we),He.__str36206=_([111,112,101,114,97,116,111,114,37,61,0],"i8",we),He.__str37207=_([111,112,101,114,97,116,111,114,62,62,61,0],"i8",we),He.__str38208=_([111,112,101,114,97,116,111,114,60,60,61,0],"i8",we),He.__str39209=_([111,112,101,114,97,116,111,114,38,61,0],"i8",we),He.__str40210=_([111,112,101,114,97,116,111,114,124,61,0],"i8",we),He.__str41211=_([111,112,101,114,97,116,111,114,94,61,0],"i8",we),He.__str42212=_([96,118,102,116,97,98,108,101,39,0],"i8",we),He.__str43213=_([96,118,98,116,97,98,108,101,39,0],"i8",we),He.__str44214=_([96,118,99,97,108,108,39,0],"i8",we),He.__str45215=_([96,116,121,112,101,111,102,39,0],"i8",we),He.__str46216=_([96,108,111,99,97,108,32,115,116,97,116,105,99,32,103,117,97,114,100,39,0],"i8",we),He.__str47217=_([96,115,116,114,105,110,103,39,0],"i8",we),He.__str48218=_([96,118,98,97,115,101,32,100,101,115,116,114,117,99,116,111,114,39,0],"i8",we),He.__str49219=_([96,118,101,99,116,111,114,32,100,101,108,101,116,105,110,103,32,100,101,115,116,114,117,99,116,111,114,39,0],"i8",we),He.__str50220=_([96,100,101,102,97,117,108,116,32,99,111,110,115,116,114,117,99,116,111,114,32,99,108,111,115,117,114,101,39,0],"i8",we),He.__str51221=_([96,115,99,97,108,97,114,32,100,101,108,101,116,105,110,103,32,100,101,115,116,114,117,99,116,111,114,39,0],"i8",we),He.__str52222=_([96,118,101,99,116,111,114,32,99,111,110,115,116,114,117,99,116,111,114,32,105,116,101,114,97,116,111,114,39,0],"i8",we),He.__str53223=_([96,118,101,99,116,111,114,32,100,101,115,116,114,117,99,116,111,114,32,105,116,101,114,97,116,111,114,39,0],"i8",we),He.__str54224=_([96,118,101,99,116,111,114,32,118,98,97,115,101,32,99,111,110,115,116,114,117,99,116,111,114,32,105,116,101,114,97,116,111,114,39,0],"i8",we),He.__str55225=_([96,118,105,114,116,117,97,108,32,100,105,115,112,108,97,99,101,109,101,110,116,32,109,97,112,39,0],"i8",we),He.__str56226=_([96,101,104,32,118,101,99,116,111,114,32,99,111,110,115,116,114,117,99,116,111,114,32,105,116,101,114,97,116,111,114,39,0],"i8",we),He.__str57227=_([96,101,104,32,118,101,99,116,111,114,32,100,101,115,116,114,117,99,116,111,114,32,105,116,101,114,97,116,111,114,39,0],"i8",we),He.__str58228=_([96,101,104,32,118,101,99,116,111,114,32,118,98,97,115,101,32,99,111,110,115,116,114,117,99,116,111,114,32,105,116,101,114,97,116,111,114,39,0],"i8",we),He.__str59229=_([96,99,111,112,121,32,99,111,110,115,116,114,117,99,116,111,114,32,99,108,111,115,117,114,101,39,0],"i8",we),He.__str60230=_([37,115,37,115,32,96,82,84,84,73,32,84,121,112,101,32,68,101,115,99,114,105,112,116,111,114,39,0],"i8",we),He.__str61231=_([96,82,84,84,73,32,66,97,115,101,32,67,108,97,115,115,32,68,101,115,99,114,105,112,116,111,114,32,97,116,32,40,37,115,44,37,115,44,37,115,44,37,115,41,39,0],"i8",we),He.__str62232=_([96,82,84,84,73,32,66,97,115,101,32,67,108,97,115,115,32,65,114,114,97,121,39,0],"i8",we),He.__str63233=_([96,82,84,84,73,32,67,108,97,115,115,32,72,105,101,114,97,114,99,104,121,32,68,101,115,99,114,105,112,116,111,114,39,0],"i8",we),He.__str64234=_([96,82,84,84,73,32,67,111,109,112,108,101,116,101,32,79,98,106,101,99,116,32,76,111,99,97,116,111,114,39,0],"i8",we),He.__str65235=_([96,108,111,99,97,108,32,118,102,116,97,98,108,101,39,0],"i8",we),He.__str66236=_([96,108,111,99,97,108,32,118,102,116,97,98,108,101,32,99,111,110,115,116,114,117,99,116,111,114,32,99,108,111,115,117,114,101,39,0],"i8",we),He.__str67237=_([111,112,101,114,97,116,111,114,32,110,101,119,91,93,0],"i8",we),He.__str68238=_([111,112,101,114,97,116,111,114,32,100,101,108,101,116,101,91,93,0],"i8",we),He.__str69239=_([96,112,108,97,99,101,109,101,110,116,32,100,101,108,101,116,101,32,99,108,111,115,117,114,101,39,0],"i8",we),He.__str70240=_([96,112,108,97,99,101,109,101,110,116,32,100,101,108,101,116,101,91,93,32,99,108,111,115,117,114,101,39,0],"i8",we),He.__str71241=_([126,37,115,0],"i8",we),He.__str72242=_([117,110,100,110,97,109,101,46,99,0],"i8",we),He.___func___symbol_demangle=_([115,121,109,98,111,108,95,100,101,109,97,110,103,108,101,0],"i8",we),He.__str73243=_([115,121,109,45,62,114,101,115,117,108,116,0],"i8",we),He.___func___handle_template=_([104,97,110,100,108,101,95,116,101,109,112,108,97,116,101,0],"i8",we),He.__str74244=_([42,115,121,109,45,62,99,117,114,114,101,110,116,32,61,61,32,39,36,39,0],"i8",we),He.___func___str_array_get_ref=_([115,116,114,95,97,114,114,97,121,95,103,101,116,95,114,101,102,0],"i8",we),He.__str75245=_([99,114,101,102,0],"i8",we),He.__str76246=_([112,114,105,118,97,116,101,58,32,0],"i8",we),He.__str77247=_([112,114,111,116,101,99,116,101,100,58,32,0],"i8",we),He.__str78248=_([112,117,98,108,105,99,58,32,0],"i8",we),He.__str79249=_([115,116,97,116,105,99,32,0],"i8",we),He.__str80250=_([118,105,114,116,117,97,108,32,0],"i8",we),He.__str81251=_([91,116,104,117,110,107,93,58,37,115,0],"i8",we),He.__str82252=_([37,115,96,97,100,106,117,115,116,111,114,123,37,115,125,39,32,0],"i8",we),He.__str83253=_([37,115,32,37,115,0],"i8",we),He.__str84254=_([118,111,105,100,0],"i8",we),He.__str85255=_([37,115,37,115,37,115,0],"i8",we),He.__str86256=_([37,115,37,115,37,115,37,115,37,115,37,115,37,115,37,115,37,115,37,115,37,115,0],"i8",we),He.__str87257=_([32,0],"i8",we),He.__str88258=_([100,108,108,95,101,120,112,111,114,116,32,0],"i8",we),He.__str89259=_([99,100,101,99,108,0],"i8",we),He.__str90260=_([112,97,115,99,97,108,0],"i8",we),He.__str91261=_([116,104,105,115,99,97,108,108,0],"i8",we),He.__str92262=_([115,116,100,99,97,108,108,0],"i8",we),He.__str93263=_([102,97,115,116,99,97,108,108,0],"i8",we),He.__str94264=_([99,108,114,99,97,108,108,0],"i8",we),He.__str95265=_([95,95,100,108,108,95,101,120,112,111,114,116,32,0],"i8",we),He.__str96266=_([95,95,99,100,101,99,108,0],"i8",we),He.__str97267=_([95,95,112,97,115,99,97,108,0],"i8",we),He.__str98268=_([95,95,116,104,105,115,99,97,108,108,0],"i8",we),He.__str99269=_([95,95,115,116,100,99,97,108,108,0],"i8",we),He.__str100270=_([95,95,102,97,115,116,99,97,108,108,0],"i8",we),He.__str101271=_([95,95,99,108,114,99,97,108,108,0],"i8",we),He.__str102272=_([95,95,112,116,114,54,52,0],"i8",we),He.__str103273=_([99,111,110,115,116,0],"i8",we),He.__str104274=_([118,111,108,97,116,105,108,101,0],"i8",we),He.__str105275=_([99,111,110,115,116,32,118,111,108,97,116,105,108,101,0],"i8",we),He.___func___get_class_string=_([103,101,116,95,99,108,97,115,115,95,115,116,114,105,110,103,0],"i8",we),He.__str106276=_([97,45,62,101,108,116,115,91,105,93,0],"i8",we),He.__str107277=_([123,102,111,114,32,96,37,115,39,125,0],"i8",we),He.__str108278=_([37,115,37,115,37,115,37,115,37,115,37,115,37,115,37,115,0],"i8",we),He.__str109279=_([96,37,115,39,0],"i8",we),He.__str110280=_([46,46,46,0],"i8",we),He.__str111281=_([37,99,118,111,105,100,37,99,0],"i8",we),He.__str112282=_([37,115,44,37,115,0],"i8",we),He.__str113283=_([37,99,37,115,37,115,32,37,99,0],"i8",we),He.__str114284=_([37,99,37,115,37,115,37,99,0],"i8",we),He.___func___str_array_push=_([115,116,114,95,97,114,114,97,121,95,112,117,115,104,0],"i8",we),He.__str115285=_([112,116,114,0],"i8",we),He.__str116286=_([97,0],"i8",we),He.__str117287=_([97,45,62,101,108,116,115,91,97,45,62,110,117,109,93,0],"i8",we),He.__str118288=_([37,115,37,100,0],"i8",we),He.__str119289=_([45,0],"i8",we),ii=_(1,"i8",we),He.___func___demangle_datatype=_([100,101,109,97,110,103,108,101,95,100,97,116,97,116,121,112,101,0],"i8",we),He.__str121291=_([99,116,0],"i8",we),He.__str122292=_([117,110,105,111,110,32,0],"i8",we),He.__str123293=_([115,116,114,117,99,116,32,0],"i8",we),He.__str124294=_([99,108,97,115,115,32,0],"i8",we),He.__str125295=_([99,111,105,110,116,101,114,102,97,99,101,32,0],"i8",we),He.__str126296=_([96,116,101,109,112,108,97,116,101,45,112,97,114,97,109,101,116,101,114,45,37,115,39,0],"i8",we),He.__str127297=_([37,115,37,115,32,40,37,115,42,0],"i8",we),He.__str128298=_([41,37,115,0],"i8",we),He.__str129299=_([101,110,117,109,32,37,115,0],"i8",we),He.__str130300=_([96,116,101,109,112,108,97,116,101,45,112,97,114,97,109,101,116,101,114,37,115,39,0],"i8",we),He.__str131301=_([123,37,115,44,37,115,125,0],"i8",we),He.__str132302=_([123,37,115,44,37,115,44,37,115,125,0],"i8",we),He.__str133303=_([96,110,111,110,45,116,121,112,101,45,116,101,109,112,108,97,116,101,45,112,97,114,97,109,101,116,101,114,37,115,39,0],"i8",we),He.__str134304=_([32,95,95,112,116,114,54,52,0],"i8",we),He.__str135305=_([32,38,37,115,0],"i8",we),He.__str136306=_([32,38,37,115,32,118,111,108,97,116,105,108,101,0],"i8",we),He.__str137307=_([32,42,37,115,0],"i8",we),He.__str138308=_([32,42,37,115,32,99,111,110,115,116,0],"i8",we),He.__str139309=_([32,42,37,115,32,118,111,108,97,116,105,108,101,0],"i8",we),He.__str140310=_([32,42,37,115,32,99,111,110,115,116,32,118,111,108,97,116,105,108,101,0],"i8",we),He.__str141311=_([32,40,37,115,37,115,41,0],"i8",we),He.__str142312=_([32,40,37,115,41,0],"i8",we),He.__str143313=_([37,115,91,37,115,93,0],"i8",we),He.__str144314=_([37,115,32,37,115,37,115,0],"i8",we),He.__str145315=_([115,105,103,110,101,100,32,99,104,97,114,0],"i8",we),He.__str146316=_([99,104,97,114,0],"i8",we),He.__str147317=_([117,110,115,105,103,110,101,100,32,99,104,97,114,0],"i8",we),He.__str148318=_([115,104,111,114,116,0],"i8",we),He.__str149319=_([117,110,115,105,103,110,101,100,32,115,104,111,114,116,0],"i8",we),He.__str150320=_([105,110,116,0],"i8",we),He.__str151321=_([117,110,115,105,103,110,101,100,32,105,110,116,0],"i8",we),He.__str152322=_([108,111,110,103,0],"i8",we),He.__str153323=_([117,110,115,105,103,110,101,100,32,108,111,110,103,0],"i8",we),He.__str154324=_([102,108,111,97,116,0],"i8",we),He.__str155325=_([100,111,117,98,108,101,0],"i8",we),He.__str156326=_([108,111,110,103,32,100,111,117,98,108,101,0],"i8",we),He.__str157327=_([95,95,105,110,116,56,0],"i8",we),He.__str158328=_([117,110,115,105,103,110,101,100,32,95,95,105,110,116,56,0],"i8",we),He.__str159329=_([95,95,105,110,116,49,54,0],"i8",we),He.__str160330=_([117,110,115,105,103,110,101,100,32,95,95,105,110,116,49,54,0],"i8",we),He.__str161331=_([95,95,105,110,116,51,50,0],"i8",we),He.__str162332=_([117,110,115,105,103,110,101,100,32,95,95,105,110,116,51,50,0],"i8",we),He.__str163333=_([95,95,105,110,116,54,52,0],"i8",we),He.__str164334=_([117,110,115,105,103,110,101,100,32,95,95,105,110,116,54,52,0],"i8",we),
He.__str165335=_([95,95,105,110,116,49,50,56,0],"i8",we),He.__str166336=_([117,110,115,105,103,110,101,100,32,95,95,105,110,116,49,50,56,0],"i8",we),He.__str167337=_([98,111,111,108,0],"i8",we),He.__str168338=_([119,99,104,97,114,95,116,0],"i8",we),vi=_(468,["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0],we),ti=_(24,"i32",we),He.__str339=_([109,97,120,32,115,121,115,116,101,109,32,98,121,116,101,115,32,61,32,37,49,48,108,117,10,0],"i8",we),He.__str1340=_([115,121,115,116,101,109,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0],"i8",we),He.__str2341=_([105,110,32,117,115,101,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0],"i8",we),fi=_([ue],"i8",we),_i=_(1,"void ()*",we),si=_([0,0,0,0,0,0,0,0,6,0,0,0,8,0,0,0,10,0,0,0],["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0],we),_(1,"void*",we),He.__str3342=_([115,116,100,58,58,98,97,100,95,97,108,108,111,99,0],"i8",we),ni=_([0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,14,0,0,0],["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0],we),_(1,"void*",we),He.__str14343=_([98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0],"i8",we),He.__ZTSSt9bad_alloc=_([83,116,57,98,97,100,95,97,108,108,111,99,0],"i8",we),bi=_(12,"*",we),He.__ZTSSt20bad_array_new_length=_([83,116,50,48,98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0],"i8",we),ki=_(12,"*",we),Se[ri>>2]=0|He.__str,Se[ri+4>>2]=0|He.__str1,Se[ri+16>>2]=0|He.__str2,Se[ri+20>>2]=0|He.__str3,Se[ri+32>>2]=0|He.__str4,Se[ri+36>>2]=0|He.__str5,Se[ri+48>>2]=0|He.__str6,Se[ri+52>>2]=0|He.__str7,Se[ri+64>>2]=0|He.__str8,Se[ri+68>>2]=0|He.__str7,Se[ri+80>>2]=0|He.__str9,Se[ri+84>>2]=0|He.__str10,Se[ri+96>>2]=0|He.__str11,Se[ri+100>>2]=0|He.__str12,Se[ri+112>>2]=0|He.__str13,Se[ri+116>>2]=0|He.__str14,Se[ri+128>>2]=0|He.__str15,Se[ri+132>>2]=0|He.__str16,Se[ri+144>>2]=0|He.__str17,Se[ri+148>>2]=0|He.__str18,Se[ri+160>>2]=0|He.__str19,Se[ri+164>>2]=0|He.__str20,Se[ri+176>>2]=0|He.__str21,Se[ri+180>>2]=0|He.__str22,Se[ri+192>>2]=0|He.__str23,Se[ri+196>>2]=0|He.__str24,Se[ri+208>>2]=0|He.__str25,Se[ri+212>>2]=0|He.__str26,Se[ri+224>>2]=0|He.__str27,Se[ri+228>>2]=0|He.__str28,Se[ri+240>>2]=0|He.__str29,Se[ri+244>>2]=0|He.__str30,Se[ri+256>>2]=0|He.__str31,Se[ri+260>>2]=0|He.__str32,Se[ri+272>>2]=0|He.__str33,Se[ri+276>>2]=0|He.__str34,Se[ri+288>>2]=0|He.__str35,Se[ri+292>>2]=0|He.__str36,Se[ri+304>>2]=0|He.__str37,Se[ri+308>>2]=0|He.__str38,Se[ri+320>>2]=0|He.__str39,Se[ri+324>>2]=0|He.__str40,Se[ri+336>>2]=0|He.__str41,Se[ri+340>>2]=0|He.__str42,Se[ri+352>>2]=0|He.__str43,Se[ri+356>>2]=0|He.__str44,Se[ri+368>>2]=0|He.__str45,Se[ri+372>>2]=0|He.__str46,Se[ri+384>>2]=0|He.__str47,Se[ri+388>>2]=0|He.__str48,Se[ri+400>>2]=0|He.__str49,Se[ri+404>>2]=0|He.__str119289,Se[ri+416>>2]=0|He.__str51,Se[ri+420>>2]=0|He.__str20,Se[ri+432>>2]=0|He.__str52,Se[ri+436>>2]=0|He.__str53,Se[ri+448>>2]=0|He.__str54,Se[ri+452>>2]=0|He.__str55,Se[ri+464>>2]=0|He.__str56,Se[ri+468>>2]=0|He.__str57,Se[ri+480>>2]=0|He.__str58,Se[ri+484>>2]=0|He.__str119289,Se[ri+496>>2]=0|He.__str59,Se[ri+500>>2]=0|He.__str60,Se[ri+512>>2]=0|He.__str61,Se[ri+516>>2]=0|He.__str62,Se[ri+528>>2]=0|He.__str63,Se[ri+532>>2]=0|He.__str64,Se[ri+544>>2]=0|He.__str65,Se[ri+548>>2]=0|He.__str66,Se[ri+560>>2]=0|He.__str67,Se[ri+564>>2]=0|He.__str68,Se[ri+576>>2]=0|He.__str69,Se[ri+580>>2]=0|He.__str70,Se[ri+592>>2]=0|He.__str71,Se[ri+596>>2]=0|He.__str72,Se[ri+608>>2]=0|He.__str73,Se[ri+612>>2]=0|He.__str74,Se[ri+624>>2]=0|He.__str75,Se[ri+628>>2]=0|He.__str76,Se[ri+640>>2]=0|He.__str77,Se[ri+644>>2]=0|He.__str72,Se[ri+656>>2]=0|He.__str78,Se[ri+660>>2]=0|He.__str79,Se[ri+672>>2]=0|He.__str80,Se[ri+676>>2]=0|He.__str81,Se[ri+688>>2]=0|He.__str82,Se[ri+692>>2]=0|He.__str83,Se[ri+704>>2]=0|He.__str84,Se[ri+708>>2]=0|He.__str85,Se[ri+720>>2]=0|He.__str86,Se[ri+724>>2]=0|He.__str87,Se[ri+736>>2]=0|He.__str88,Se[ri+740>>2]=0|He.__str89,Se[ri+752>>2]=0|He.__str90,Se[ri+756>>2]=0|He.__str91,Se[ri+768>>2]=0|He.__str92,Se[ri+772>>2]=0|He.__str91,Se[ai>>2]=0|He.__str145315,Se[ai+8>>2]=0|He.__str145315,Se[ai+20>>2]=0|He.__str167337,Se[ai+28>>2]=0|He.__str95,Se[ai+40>>2]=0|He.__str146316,Se[ai+48>>2]=0|He.__str97,Se[ai+60>>2]=0|He.__str155325,Se[ai+68>>2]=0|He.__str155325,Se[ai+80>>2]=0|He.__str156326,Se[ai+88>>2]=0|He.__str156326,Se[ai+100>>2]=0|He.__str154324,Se[ai+108>>2]=0|He.__str154324,Se[ai+120>>2]=0|He.__str101,Se[ai+128>>2]=0|He.__str101,Se[ai+140>>2]=0|He.__str147317,Se[ai+148>>2]=0|He.__str147317,Se[ai+160>>2]=0|He.__str150320,Se[ai+168>>2]=0|He.__str150320,Se[ai+180>>2]=0|He.__str151321,Se[ai+188>>2]=0|He.__str105,Se[ai+220>>2]=0|He.__str152322,Se[ai+228>>2]=0|He.__str152322,Se[ai+240>>2]=0|He.__str153323,Se[ai+248>>2]=0|He.__str153323,Se[ai+260>>2]=0|He.__str165335,Se[ai+268>>2]=0|He.__str165335,Se[ai+280>>2]=0|He.__str166336,Se[ai+288>>2]=0|He.__str166336,Se[ai+360>>2]=0|He.__str148318,Se[ai+368>>2]=0|He.__str148318,Se[ai+380>>2]=0|He.__str149319,Se[ai+388>>2]=0|He.__str149319,Se[ai+420>>2]=0|He.__str84254,Se[ai+428>>2]=0|He.__str84254,Se[ai+440>>2]=0|He.__str168338,Se[ai+448>>2]=0|He.__str146316,Se[ai+460>>2]=0|He.__str114,Se[ai+468>>2]=0|He.__str152322,Se[ai+480>>2]=0|He.__str115,Se[ai+488>>2]=0|He.__str115,Se[ai+500>>2]=0|He.__str110280,Se[ai+508>>2]=0|He.__str110280,Se[ei+4>>2]=0|He.__str152,Se[ei+12>>2]=0|He.__str152,Se[ei+32>>2]=0|He.__str153,Se[ei+40>>2]=0|He.__str153,Se[ei+48>>2]=0|He.__str154,Se[ei+60>>2]=0|He.__str155,Se[ei+68>>2]=0|He.__str155,Se[ei+76>>2]=0|He.__str156,Se[ei+88>>2]=0|He.__str157,Se[ei+96>>2]=0|He.__str158,Se[ei+104>>2]=0|He.__str156,Se[ei+116>>2]=0|He.__str159,Se[ei+124>>2]=0|He.__str160,Se[ei+132>>2]=0|He.__str161,Se[ei+144>>2]=0|He.__str162,Se[ei+152>>2]=0|He.__str163,Se[ei+160>>2]=0|He.__str164,Se[ei+172>>2]=0|He.__str165,Se[ei+180>>2]=0|He.__str166,Se[ei+188>>2]=0|He.__str167,Se[si+4>>2]=bi,Se[ni+4>>2]=ki,oi=_([2,0,0,0,0],["i8*",0,0,0,0],we),Se[bi>>2]=oi+8|0,Se[bi+4>>2]=0|He.__ZTSSt9bad_alloc,Se[bi+8>>2]=li,Se[ki>>2]=oi+8|0,Se[ki+4>>2]=0|He.__ZTSSt20bad_array_new_length,Se[ki+8>>2]=bi,ui=16,ci=6,hi=18,di=6,wi=6,pe=[0,0,Jr,0,va,0,ya,0,ga,0,wa,0,Sa,0,pa,0,Ea,0,ma,0],Module.FUNCTION_TABLE=pe,Module.run=ee,Module.preRun&&Module.preRun(),0==Ke){ee()}Module.postRun&&Module.postRun(),Module.___cxa_demangle=G;var pi=v("__cxa_demangle","string",["string","string","number","number"]);return function(r){return pi(r,"",1,0)}}();
`;
          }
        ),
        /***/
        6121: (
          /***/
          (__unused_webpack_module, exports2, __webpack_require__2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.Flamechart = void 0;
            const utils_1 = __webpack_require__2(7844);
            const math_1 = __webpack_require__2(5293);
            class Flamechart {
              constructor(source) {
                this.source = source;
                this.layers = [];
                this.totalWeight = 0;
                this.minFrameWidth = 1;
                const stack = [];
                const openFrame = (node, value) => {
                  const parent = utils_1.lastOf(stack);
                  const frame = {
                    node,
                    parent,
                    children: [],
                    start: value,
                    end: value
                  };
                  if (parent) {
                    parent.children.push(frame);
                  }
                  stack.push(frame);
                };
                this.minFrameWidth = Infinity;
                const closeFrame = (node, value) => {
                  console.assert(stack.length > 0);
                  const stackTop = stack.pop();
                  stackTop.end = value;
                  if (stackTop.end - stackTop.start === 0)
                    return;
                  const layerIndex = stack.length;
                  while (this.layers.length <= layerIndex)
                    this.layers.push([]);
                  this.layers[layerIndex].push(stackTop);
                  this.minFrameWidth = Math.min(this.minFrameWidth, stackTop.end - stackTop.start);
                };
                this.totalWeight = source.getTotalWeight();
                source.forEachCall(openFrame, closeFrame);
                if (!isFinite(this.minFrameWidth))
                  this.minFrameWidth = 1;
              }
              getTotalWeight() {
                return this.totalWeight;
              }
              getLayers() {
                return this.layers;
              }
              getColorBucketForFrame(frame) {
                return this.source.getColorBucketForFrame(frame);
              }
              getMinFrameWidth() {
                return this.minFrameWidth;
              }
              formatValue(v) {
                return this.source.formatValue(v);
              }
              getClampedViewportWidth(viewportWidth) {
                const maxWidth = this.getTotalWeight();
                const maxZoom = Math.pow(2, 40);
                const minWidth = math_1.clamp(3 * this.getMinFrameWidth(), maxWidth / maxZoom, maxWidth);
                return math_1.clamp(viewportWidth, minWidth, maxWidth);
              }
              // Given a desired config-space viewport rectangle, clamp the rectangle so
              // that it fits within the given flamechart. This prevents the viewport from
              // extending past the bounds of the flamechart or zooming in too far.
              getClampedConfigSpaceViewportRect({
                configSpaceViewportRect,
                renderInverted
              }) {
                const configSpaceSize = new math_1.Vec2(this.getTotalWeight(), this.getLayers().length);
                const width = this.getClampedViewportWidth(configSpaceViewportRect.size.x);
                const size = configSpaceViewportRect.size.withX(width);
                const origin = math_1.Vec2.clamp(configSpaceViewportRect.origin, new math_1.Vec2(0, renderInverted ? 0 : -1), math_1.Vec2.max(math_1.Vec2.zero, configSpaceSize.minus(size).plus(new math_1.Vec2(0, 1))));
                return new math_1.Rect(origin, configSpaceViewportRect.size.withX(width));
              }
            }
            exports2.Flamechart = Flamechart;
          }
        ),
        /***/
        5293: (
          /***/
          (__unused_webpack_module, exports2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.Rect = exports2.AffineTransform = exports2.Vec2 = exports2.clamp = void 0;
            function clamp(x, minVal, maxVal) {
              if (x < minVal)
                return minVal;
              if (x > maxVal)
                return maxVal;
              return x;
            }
            exports2.clamp = clamp;
            let Vec2 = (
              /** @class */
              (() => {
                class Vec22 {
                  constructor(x, y) {
                    this.x = x;
                    this.y = y;
                  }
                  withX(x) {
                    return new Vec22(x, this.y);
                  }
                  withY(y) {
                    return new Vec22(this.x, y);
                  }
                  plus(other) {
                    return new Vec22(this.x + other.x, this.y + other.y);
                  }
                  minus(other) {
                    return new Vec22(this.x - other.x, this.y - other.y);
                  }
                  times(scalar) {
                    return new Vec22(this.x * scalar, this.y * scalar);
                  }
                  timesPointwise(other) {
                    return new Vec22(this.x * other.x, this.y * other.y);
                  }
                  dividedByPointwise(other) {
                    return new Vec22(this.x / other.x, this.y / other.y);
                  }
                  dot(other) {
                    return this.x * other.x + this.y * other.y;
                  }
                  equals(other) {
                    return this.x === other.x && this.y === other.y;
                  }
                  approxEquals(other, epsilon = 1e-9) {
                    return Math.abs(this.x - other.x) < epsilon && Math.abs(this.y - other.y) < epsilon;
                  }
                  length2() {
                    return this.dot(this);
                  }
                  length() {
                    return Math.sqrt(this.length2());
                  }
                  abs() {
                    return new Vec22(Math.abs(this.x), Math.abs(this.y));
                  }
                  static min(a, b) {
                    return new Vec22(Math.min(a.x, b.x), Math.min(a.y, b.y));
                  }
                  static max(a, b) {
                    return new Vec22(Math.max(a.x, b.x), Math.max(a.y, b.y));
                  }
                  static clamp(v, min, max) {
                    return new Vec22(clamp(v.x, min.x, max.x), clamp(v.y, min.y, max.y));
                  }
                  flatten() {
                    return [this.x, this.y];
                  }
                }
                Vec22.zero = new Vec22(0, 0);
                Vec22.unit = new Vec22(1, 1);
                return Vec22;
              })()
            );
            exports2.Vec2 = Vec2;
            class AffineTransform {
              constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0) {
                this.m00 = m00;
                this.m01 = m01;
                this.m02 = m02;
                this.m10 = m10;
                this.m11 = m11;
                this.m12 = m12;
              }
              withScale(s) {
                let {
                  m00,
                  m01,
                  m02,
                  m10,
                  m11,
                  m12
                } = this;
                m00 = s.x;
                m11 = s.y;
                return new AffineTransform(m00, m01, m02, m10, m11, m12);
              }
              static withScale(s) {
                return new AffineTransform().withScale(s);
              }
              scaledBy(s) {
                return AffineTransform.withScale(s).times(this);
              }
              getScale() {
                return new Vec2(this.m00, this.m11);
              }
              withTranslation(t) {
                let {
                  m00,
                  m01,
                  m02,
                  m10,
                  m11,
                  m12
                } = this;
                m02 = t.x;
                m12 = t.y;
                return new AffineTransform(m00, m01, m02, m10, m11, m12);
              }
              static withTranslation(t) {
                return new AffineTransform().withTranslation(t);
              }
              getTranslation() {
                return new Vec2(this.m02, this.m12);
              }
              translatedBy(t) {
                return AffineTransform.withTranslation(t).times(this);
              }
              static betweenRects(from, to) {
                return AffineTransform.withTranslation(from.origin.times(-1)).scaledBy(new Vec2(to.size.x / from.size.x, to.size.y / from.size.y)).translatedBy(to.origin);
              }
              times(other) {
                const m00 = this.m00 * other.m00 + this.m01 * other.m10;
                const m01 = this.m00 * other.m01 + this.m01 * other.m11;
                const m02 = this.m00 * other.m02 + this.m01 * other.m12 + this.m02;
                const m10 = this.m10 * other.m00 + this.m11 * other.m10;
                const m11 = this.m10 * other.m01 + this.m11 * other.m11;
                const m12 = this.m10 * other.m02 + this.m11 * other.m12 + this.m12;
                return new AffineTransform(m00, m01, m02, m10, m11, m12);
              }
              equals(other) {
                return this.m00 == other.m00 && this.m01 == other.m01 && this.m02 == other.m02 && this.m10 == other.m10 && this.m11 == other.m11 && this.m12 == other.m12;
              }
              approxEquals(other, epsilon = 1e-9) {
                return Math.abs(this.m00 - other.m00) < epsilon && Math.abs(this.m01 - other.m01) < epsilon && Math.abs(this.m02 - other.m02) < epsilon && Math.abs(this.m10 - other.m10) < epsilon && Math.abs(this.m11 - other.m11) < epsilon && Math.abs(this.m12 - other.m12) < epsilon;
              }
              timesScalar(s) {
                const {
                  m00,
                  m01,
                  m02,
                  m10,
                  m11,
                  m12
                } = this;
                return new AffineTransform(s * m00, s * m01, s * m02, s * m10, s * m11, s * m12);
              }
              det() {
                const {
                  m00,
                  m01,
                  m02,
                  m10,
                  m11,
                  m12
                } = this;
                const m20 = 0;
                const m21 = 0;
                const m22 = 1;
                return m00 * (m11 * m22 - m12 * m21) - m01 * (m10 * m22 - m12 * m20) + m02 * (m10 * m21 - m11 * m20);
              }
              adj() {
                const {
                  m00,
                  m01,
                  m02,
                  m10,
                  m11,
                  m12
                } = this;
                const m20 = 0;
                const m21 = 0;
                const m22 = 1;
                const a00 = (
                  /* c00 = */
                  +(m11 * m22 - m12 * m21)
                );
                const a01 = (
                  /* c10 = */
                  -(m01 * m22 - m02 * m21)
                );
                const a02 = (
                  /* c20 = */
                  +(m01 * m12 - m02 * m11)
                );
                const a10 = (
                  /* c01 = */
                  -(m10 * m22 - m12 * m20)
                );
                const a11 = (
                  /* c11 = */
                  +(m00 * m22 - m02 * m20)
                );
                const a12 = (
                  /* c21 = */
                  -(m00 * m12 - m02 * m10)
                );
                return new AffineTransform(a00, a01, a02, a10, a11, a12);
              }
              inverted() {
                const det = this.det();
                if (det === 0)
                  return null;
                const adj = this.adj();
                return adj.timesScalar(1 / det);
              }
              transformVector(v) {
                return new Vec2(v.x * this.m00 + v.y * this.m01, v.x * this.m10 + v.y * this.m11);
              }
              inverseTransformVector(v) {
                const inv = this.inverted();
                if (!inv)
                  return null;
                return inv.transformVector(v);
              }
              transformPosition(v) {
                return new Vec2(v.x * this.m00 + v.y * this.m01 + this.m02, v.x * this.m10 + v.y * this.m11 + this.m12);
              }
              inverseTransformPosition(v) {
                const inv = this.inverted();
                if (!inv)
                  return null;
                return inv.transformPosition(v);
              }
              transformRect(r) {
                const size = this.transformVector(r.size);
                const origin = this.transformPosition(r.origin);
                if (size.x < 0 && size.y < 0) {
                  return new Rect(origin.plus(size), size.abs());
                } else if (size.x < 0) {
                  return new Rect(origin.withX(origin.x + size.x), size.abs());
                } else if (size.y < 0) {
                  return new Rect(origin.withY(origin.y + size.y), size.abs());
                }
                return new Rect(origin, size);
              }
              inverseTransformRect(r) {
                const inv = this.inverted();
                if (!inv)
                  return null;
                return inv.transformRect(r);
              }
              flatten() {
                return [this.m00, this.m10, 0, this.m01, this.m11, 0, this.m02, this.m12, 1];
              }
            }
            exports2.AffineTransform = AffineTransform;
            let Rect = (
              /** @class */
              (() => {
                class Rect2 {
                  constructor(origin, size) {
                    this.origin = origin;
                    this.size = size;
                  }
                  isEmpty() {
                    return this.width() == 0 || this.height() == 0;
                  }
                  width() {
                    return this.size.x;
                  }
                  height() {
                    return this.size.y;
                  }
                  left() {
                    return this.origin.x;
                  }
                  right() {
                    return this.left() + this.width();
                  }
                  top() {
                    return this.origin.y;
                  }
                  bottom() {
                    return this.top() + this.height();
                  }
                  topLeft() {
                    return this.origin;
                  }
                  topRight() {
                    return this.origin.plus(new Vec2(this.width(), 0));
                  }
                  bottomRight() {
                    return this.origin.plus(this.size);
                  }
                  bottomLeft() {
                    return this.origin.plus(new Vec2(0, this.height()));
                  }
                  withOrigin(origin) {
                    return new Rect2(origin, this.size);
                  }
                  withSize(size) {
                    return new Rect2(this.origin, size);
                  }
                  closestPointTo(p) {
                    return new Vec2(clamp(p.x, this.left(), this.right()), clamp(p.y, this.top(), this.bottom()));
                  }
                  distanceFrom(p) {
                    return p.minus(this.closestPointTo(p)).length();
                  }
                  contains(p) {
                    return this.distanceFrom(p) === 0;
                  }
                  hasIntersectionWith(other) {
                    const top = Math.max(this.top(), other.top());
                    const bottom = Math.max(top, Math.min(this.bottom(), other.bottom()));
                    if (bottom - top === 0)
                      return false;
                    const left = Math.max(this.left(), other.left());
                    const right = Math.max(left, Math.min(this.right(), other.right()));
                    if (right - left === 0)
                      return false;
                    return true;
                  }
                  intersectWith(other) {
                    const topLeft = Vec2.max(this.topLeft(), other.topLeft());
                    const bottomRight = Vec2.max(topLeft, Vec2.min(this.bottomRight(), other.bottomRight()));
                    return new Rect2(topLeft, bottomRight.minus(topLeft));
                  }
                  equals(other) {
                    return this.origin.equals(other.origin) && this.size.equals(other.size);
                  }
                  approxEquals(other) {
                    return this.origin.approxEquals(other.origin) && this.size.approxEquals(other.size);
                  }
                  area() {
                    return this.size.x * this.size.y;
                  }
                }
                Rect2.empty = new Rect2(Vec2.zero, Vec2.zero);
                Rect2.unit = new Rect2(Vec2.zero, Vec2.unit);
                Rect2.NDC = new Rect2(new Vec2(-1, -1), new Vec2(2, 2));
                return Rect2;
              })()
            );
            exports2.Rect = Rect;
          }
        ),
        /***/
        2211: (
          /***/
          function(__unused_webpack_module, exports2, __webpack_require__2) {
            "use strict";
            var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
              if (k2 === void 0)
                k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function() {
                  return m[k];
                }
              });
            } : function(o, m, k, k2) {
              if (k2 === void 0)
                k2 = k;
              o[k2] = m[k];
            });
            var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
              Object.defineProperty(o, "default", {
                enumerable: true,
                value: v
              });
            } : function(o, v) {
              o["default"] = v;
            });
            var __importStar = this && this.__importStar || function(mod) {
              if (mod && mod.__esModule)
                return mod;
              var result = {};
              if (mod != null) {
                for (var k in mod)
                  if (Object.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
              }
              __setModuleDefault(result, mod);
              return result;
            };
            var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
              function adopt(value) {
                return value instanceof P ? value : new P(function(resolve) {
                  resolve(value);
                });
              }
              return new (P || (P = Promise))(function(resolve, reject) {
                function fulfilled(value) {
                  try {
                    step(generator.next(value));
                  } catch (e) {
                    reject(e);
                  }
                }
                function rejected(value) {
                  try {
                    step(generator["throw"](value));
                  } catch (e) {
                    reject(e);
                  }
                }
                function step(result) {
                  result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
                }
                step((generator = generator.apply(thisArg, _arguments || [])).next());
              });
            };
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.CallTreeProfileBuilder = exports2.StackListProfileBuilder = exports2.Profile = exports2.CallTreeNode = exports2.Frame = exports2.HasWeights = void 0;
            const utils_1 = __webpack_require__2(7844);
            const value_formatters_1 = __webpack_require__2(8218);
            const demangleCppModule = Promise.resolve().then(() => __importStar(__webpack_require__2(765)));
            demangleCppModule.then(() => {
            });
            class HasWeights {
              constructor() {
                this.selfWeight = 0;
                this.totalWeight = 0;
              }
              getSelfWeight() {
                return this.selfWeight;
              }
              getTotalWeight() {
                return this.totalWeight;
              }
              addToTotalWeight(delta) {
                this.totalWeight += delta;
              }
              addToSelfWeight(delta) {
                this.selfWeight += delta;
              }
              overwriteWeightWith(other) {
                this.selfWeight = other.selfWeight;
                this.totalWeight = other.totalWeight;
              }
            }
            exports2.HasWeights = HasWeights;
            let Frame = (
              /** @class */
              (() => {
                class Frame2 extends HasWeights {
                  constructor(info) {
                    super();
                    this.key = info.key;
                    this.name = info.name;
                    this.file = info.file;
                    this.line = info.line;
                    this.col = info.col;
                  }
                  static getOrInsert(set, info) {
                    return set.getOrInsert(new Frame2(info));
                  }
                }
                Frame2.root = new Frame2({
                  key: "(speedscope root)",
                  name: "(speedscope root)"
                });
                return Frame2;
              })()
            );
            exports2.Frame = Frame;
            class CallTreeNode extends HasWeights {
              constructor(frame, parent) {
                super();
                this.frame = frame;
                this.parent = parent;
                this.children = [];
                this.frozen = false;
              }
              isRoot() {
                return this.frame === Frame.root;
              }
              isFrozen() {
                return this.frozen;
              }
              freeze() {
                this.frozen = true;
              }
            }
            exports2.CallTreeNode = CallTreeNode;
            class Profile {
              constructor(totalWeight = 0) {
                this.name = "";
                this.frames = new utils_1.KeyedSet();
                this.appendOrderCalltreeRoot = new CallTreeNode(Frame.root, null);
                this.groupedCalltreeRoot = new CallTreeNode(Frame.root, null);
                this.samples = [];
                this.weights = [];
                this.valueFormatter = new value_formatters_1.RawValueFormatter();
                this.totalNonIdleWeight = null;
                this.totalWeight = totalWeight;
              }
              getAppendOrderCalltreeRoot() {
                return this.appendOrderCalltreeRoot;
              }
              getGroupedCalltreeRoot() {
                return this.groupedCalltreeRoot;
              }
              formatValue(v) {
                return this.valueFormatter.format(v);
              }
              setValueFormatter(f) {
                this.valueFormatter = f;
              }
              getWeightUnit() {
                return this.valueFormatter.unit;
              }
              getName() {
                return this.name;
              }
              setName(name) {
                this.name = name;
              }
              getTotalWeight() {
                return this.totalWeight;
              }
              getTotalNonIdleWeight() {
                if (this.totalNonIdleWeight === null) {
                  this.totalNonIdleWeight = this.groupedCalltreeRoot.children.reduce((n, c) => n + c.getTotalWeight(), 0);
                }
                return this.totalNonIdleWeight;
              }
              // This is private because it should only be called in the ProfileBuilder
              // classes. Once a Profile instance has been constructed, it should be treated
              // as immutable.
              sortGroupedCallTree() {
                function visit(node) {
                  node.children.sort((a, b) => -(a.getTotalWeight() - b.getTotalWeight()));
                  node.children.forEach(visit);
                }
                visit(this.groupedCalltreeRoot);
              }
              forEachCallGrouped(openFrame, closeFrame) {
                function visit(node, start) {
                  if (node.frame !== Frame.root) {
                    openFrame(node, start);
                  }
                  let childTime = 0;
                  node.children.forEach(function(child) {
                    visit(child, start + childTime);
                    childTime += child.getTotalWeight();
                  });
                  if (node.frame !== Frame.root) {
                    closeFrame(node, start + node.getTotalWeight());
                  }
                }
                visit(this.groupedCalltreeRoot, 0);
              }
              forEachCall(openFrame, closeFrame) {
                let prevStack = [];
                let value = 0;
                let sampleIndex = 0;
                for (let stackTop of this.samples) {
                  let lca = null;
                  for (lca = stackTop; lca && lca.frame != Frame.root && prevStack.indexOf(lca) === -1; lca = lca.parent) {
                  }
                  while (prevStack.length > 0 && utils_1.lastOf(prevStack) != lca) {
                    const node = prevStack.pop();
                    closeFrame(node, value);
                  }
                  const toOpen = [];
                  for (let node = stackTop; node && node.frame != Frame.root && node != lca; node = node.parent) {
                    toOpen.push(node);
                  }
                  toOpen.reverse();
                  for (let node of toOpen) {
                    openFrame(node, value);
                  }
                  prevStack = prevStack.concat(toOpen);
                  value += this.weights[sampleIndex++];
                }
                for (let i = prevStack.length - 1; i >= 0; i--) {
                  closeFrame(prevStack[i], value);
                }
              }
              forEachFrame(fn) {
                this.frames.forEach(fn);
              }
              getProfileWithRecursionFlattened() {
                const builder = new CallTreeProfileBuilder();
                const stack = [];
                const framesInStack = /* @__PURE__ */ new Set();
                function openFrame(node, value) {
                  if (framesInStack.has(node.frame)) {
                    stack.push(null);
                  } else {
                    framesInStack.add(node.frame);
                    stack.push(node);
                    builder.enterFrame(node.frame, value);
                  }
                }
                function closeFrame(node, value) {
                  const stackTop = stack.pop();
                  if (stackTop) {
                    framesInStack.delete(stackTop.frame);
                    builder.leaveFrame(stackTop.frame, value);
                  }
                }
                this.forEachCall(openFrame, closeFrame);
                const flattenedProfile = builder.build();
                flattenedProfile.name = this.name;
                flattenedProfile.valueFormatter = this.valueFormatter;
                this.forEachFrame((f) => {
                  flattenedProfile.frames.getOrInsert(f).overwriteWeightWith(f);
                });
                return flattenedProfile;
              }
              getInvertedProfileForCallersOf(focalFrameInfo) {
                const focalFrame = Frame.getOrInsert(this.frames, focalFrameInfo);
                const builder = new StackListProfileBuilder();
                const nodes = [];
                function visit(node) {
                  if (node.frame === focalFrame) {
                    nodes.push(node);
                  } else {
                    for (let child of node.children) {
                      visit(child);
                    }
                  }
                }
                visit(this.appendOrderCalltreeRoot);
                for (let node of nodes) {
                  const stack = [];
                  for (let n = node; n != null && n.frame !== Frame.root; n = n.parent) {
                    stack.push(n.frame);
                  }
                  builder.appendSampleWithWeight(stack, node.getTotalWeight());
                }
                const ret = builder.build();
                ret.name = this.name;
                ret.valueFormatter = this.valueFormatter;
                return ret;
              }
              getProfileForCalleesOf(focalFrameInfo) {
                const focalFrame = Frame.getOrInsert(this.frames, focalFrameInfo);
                const builder = new StackListProfileBuilder();
                function recordSubtree(focalFrameNode) {
                  const stack = [];
                  function visit(node) {
                    stack.push(node.frame);
                    builder.appendSampleWithWeight(stack, node.getSelfWeight());
                    for (let child of node.children) {
                      visit(child);
                    }
                    stack.pop();
                  }
                  visit(focalFrameNode);
                }
                function findCalls(node) {
                  if (node.frame === focalFrame) {
                    recordSubtree(node);
                  } else {
                    for (let child of node.children) {
                      findCalls(child);
                    }
                  }
                }
                findCalls(this.appendOrderCalltreeRoot);
                const ret = builder.build();
                ret.name = this.name;
                ret.valueFormatter = this.valueFormatter;
                return ret;
              }
              // Demangle symbols for readability
              demangle() {
                return __awaiter(this, void 0, void 0, function* () {
                  let demangleCpp = null;
                  for (let frame of this.frames) {
                    if (frame.name.startsWith("__Z")) {
                      if (!demangleCpp) {
                        demangleCpp = (yield demangleCppModule).demangleCpp;
                      }
                      frame.name = demangleCpp(frame.name);
                    }
                  }
                });
              }
              remapNames(callback) {
                for (let frame of this.frames) {
                  frame.name = callback(frame.name);
                }
              }
            }
            exports2.Profile = Profile;
            class StackListProfileBuilder extends Profile {
              constructor() {
                super(...arguments);
                this.pendingSample = null;
              }
              _appendSample(stack, weight, useAppendOrder) {
                if (isNaN(weight))
                  throw new Error("invalid weight");
                let node = useAppendOrder ? this.appendOrderCalltreeRoot : this.groupedCalltreeRoot;
                let framesInStack = /* @__PURE__ */ new Set();
                for (let frameInfo of stack) {
                  const frame = Frame.getOrInsert(this.frames, frameInfo);
                  const last = useAppendOrder ? utils_1.lastOf(node.children) : node.children.find((c) => c.frame === frame);
                  if (last && !last.isFrozen() && last.frame == frame) {
                    node = last;
                  } else {
                    const parent = node;
                    node = new CallTreeNode(frame, node);
                    parent.children.push(node);
                  }
                  node.addToTotalWeight(weight);
                  framesInStack.add(node.frame);
                }
                node.addToSelfWeight(weight);
                if (useAppendOrder) {
                  for (let child of node.children) {
                    child.freeze();
                  }
                }
                if (useAppendOrder) {
                  node.frame.addToSelfWeight(weight);
                  for (let frame of framesInStack) {
                    frame.addToTotalWeight(weight);
                  }
                  if (node === utils_1.lastOf(this.samples)) {
                    this.weights[this.weights.length - 1] += weight;
                  } else {
                    this.samples.push(node);
                    this.weights.push(weight);
                  }
                }
              }
              appendSampleWithWeight(stack, weight) {
                if (weight === 0) {
                  return;
                }
                if (weight < 0) {
                  throw new Error("Samples must have positive weights");
                }
                this._appendSample(stack, weight, true);
                this._appendSample(stack, weight, false);
              }
              appendSampleWithTimestamp(stack, timestamp) {
                if (this.pendingSample) {
                  if (timestamp < this.pendingSample.centralTimestamp) {
                    throw new Error("Timestamps received out of order");
                  }
                  const endTimestamp = (timestamp + this.pendingSample.centralTimestamp) / 2;
                  this.appendSampleWithWeight(this.pendingSample.stack, endTimestamp - this.pendingSample.startTimestamp);
                  this.pendingSample = {
                    stack,
                    startTimestamp: endTimestamp,
                    centralTimestamp: timestamp
                  };
                } else {
                  this.pendingSample = {
                    stack,
                    startTimestamp: timestamp,
                    centralTimestamp: timestamp
                  };
                }
              }
              build() {
                if (this.pendingSample) {
                  if (this.samples.length > 0) {
                    this.appendSampleWithWeight(this.pendingSample.stack, this.pendingSample.centralTimestamp - this.pendingSample.startTimestamp);
                  } else {
                    this.appendSampleWithWeight(this.pendingSample.stack, 1);
                    this.setValueFormatter(new value_formatters_1.RawValueFormatter());
                  }
                }
                this.totalWeight = Math.max(this.totalWeight, this.weights.reduce((a, b) => a + b, 0));
                this.sortGroupedCallTree();
                return this;
              }
            }
            exports2.StackListProfileBuilder = StackListProfileBuilder;
            class CallTreeProfileBuilder extends Profile {
              constructor() {
                super(...arguments);
                this.appendOrderStack = [this.appendOrderCalltreeRoot];
                this.groupedOrderStack = [this.groupedCalltreeRoot];
                this.framesInStack = /* @__PURE__ */ new Map();
                this.stack = [];
                this.lastValue = 0;
              }
              addWeightsToFrames(value) {
                const delta = value - this.lastValue;
                for (let frame of this.framesInStack.keys()) {
                  frame.addToTotalWeight(delta);
                }
                const stackTop = utils_1.lastOf(this.stack);
                if (stackTop) {
                  stackTop.addToSelfWeight(delta);
                }
              }
              addWeightsToNodes(value, stack) {
                const delta = value - this.lastValue;
                for (let node of stack) {
                  node.addToTotalWeight(delta);
                }
                const stackTop = utils_1.lastOf(stack);
                if (stackTop) {
                  stackTop.addToSelfWeight(delta);
                }
              }
              _enterFrame(frame, value, useAppendOrder) {
                let stack = useAppendOrder ? this.appendOrderStack : this.groupedOrderStack;
                this.addWeightsToNodes(value, stack);
                let prevTop = utils_1.lastOf(stack);
                if (prevTop) {
                  if (useAppendOrder) {
                    const delta = value - this.lastValue;
                    if (delta > 0) {
                      this.samples.push(prevTop);
                      this.weights.push(value - this.lastValue);
                    } else if (delta < 0) {
                      throw new Error(`Samples must be provided in increasing order of cumulative value. Last sample was ${this.lastValue}, this sample was ${value}`);
                    }
                  }
                  const last = useAppendOrder ? utils_1.lastOf(prevTop.children) : prevTop.children.find((c) => c.frame === frame);
                  let node;
                  if (last && !last.isFrozen() && last.frame == frame) {
                    node = last;
                  } else {
                    node = new CallTreeNode(frame, prevTop);
                    prevTop.children.push(node);
                  }
                  stack.push(node);
                }
              }
              enterFrame(frameInfo, value) {
                const frame = Frame.getOrInsert(this.frames, frameInfo);
                this.addWeightsToFrames(value);
                this._enterFrame(frame, value, true);
                this._enterFrame(frame, value, false);
                this.stack.push(frame);
                const frameCount = this.framesInStack.get(frame) || 0;
                this.framesInStack.set(frame, frameCount + 1);
                this.lastValue = value;
              }
              _leaveFrame(frame, value, useAppendOrder) {
                let stack = useAppendOrder ? this.appendOrderStack : this.groupedOrderStack;
                this.addWeightsToNodes(value, stack);
                if (useAppendOrder) {
                  const leavingStackTop = this.appendOrderStack.pop();
                  if (leavingStackTop == null) {
                    throw new Error(`Trying to leave ${frame.key} when stack is empty`);
                  }
                  if (this.lastValue == null) {
                    throw new Error(`Trying to leave a ${frame.key} before any have been entered`);
                  }
                  leavingStackTop.freeze();
                  if (leavingStackTop.frame.key !== frame.key) {
                    throw new Error(`Tried to leave frame "${frame.name}" while frame "${leavingStackTop.frame.name}" was at the top at ${value}`);
                  }
                  const delta = value - this.lastValue;
                  if (delta > 0) {
                    this.samples.push(leavingStackTop);
                    this.weights.push(value - this.lastValue);
                  } else if (delta < 0) {
                    throw new Error(`Samples must be provided in increasing order of cumulative value. Last sample was ${this.lastValue}, this sample was ${value}`);
                  }
                } else {
                  this.groupedOrderStack.pop();
                }
              }
              leaveFrame(frameInfo, value) {
                const frame = Frame.getOrInsert(this.frames, frameInfo);
                this.addWeightsToFrames(value);
                this._leaveFrame(frame, value, true);
                this._leaveFrame(frame, value, false);
                this.stack.pop();
                const frameCount = this.framesInStack.get(frame);
                if (frameCount == null)
                  return;
                if (frameCount === 1) {
                  this.framesInStack.delete(frame);
                } else {
                  this.framesInStack.set(frame, frameCount - 1);
                }
                this.lastValue = value;
                this.totalWeight = Math.max(this.totalWeight, this.lastValue);
              }
              build() {
                if (this.appendOrderStack.length > 1 || this.groupedOrderStack.length > 1) {
                  throw new Error("Tried to complete profile construction with a non-empty stack");
                }
                this.sortGroupedCallTree();
                return this;
              }
            }
            exports2.CallTreeProfileBuilder = CallTreeProfileBuilder;
          }
        ),
        /***/
        7844: (
          /***/
          (__unused_webpack_module, exports2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.decodeBase64 = exports2.lazyStatic = exports2.memoizeByReference = exports2.memoizeByShallowEquality = exports2.objectsHaveShallowEquality = exports2.noop = exports2.binarySearch = exports2.triangle = exports2.fract = exports2.formatPercent = exports2.zeroPad = exports2.itReduce = exports2.itForEach = exports2.itMap = exports2.KeyedSet = exports2.getOrThrow = exports2.getOrElse = exports2.getOrInsert = exports2.sortBy = exports2.lastOf = void 0;
            function lastOf(ts) {
              return ts[ts.length - 1] || null;
            }
            exports2.lastOf = lastOf;
            function sortBy(ts, key) {
              function comparator(a, b) {
                const keyA = key(a);
                const keyB = key(b);
                return keyA < keyB ? -1 : keyA > keyB ? 1 : 0;
              }
              ts.sort(comparator);
            }
            exports2.sortBy = sortBy;
            function getOrInsert(map, k, fallback) {
              if (!map.has(k))
                map.set(k, fallback(k));
              return map.get(k);
            }
            exports2.getOrInsert = getOrInsert;
            function getOrElse(map, k, fallback) {
              if (!map.has(k))
                return fallback(k);
              return map.get(k);
            }
            exports2.getOrElse = getOrElse;
            function getOrThrow(map, k) {
              if (!map.has(k)) {
                throw new Error(`Expected key ${k}`);
              }
              return map.get(k);
            }
            exports2.getOrThrow = getOrThrow;
            class KeyedSet {
              constructor() {
                this.map = /* @__PURE__ */ new Map();
              }
              getOrInsert(t) {
                const key = t.key;
                const existing = this.map.get(key);
                if (existing)
                  return existing;
                this.map.set(key, t);
                return t;
              }
              forEach(fn) {
                this.map.forEach(fn);
              }
              [Symbol.iterator]() {
                return this.map.values();
              }
            }
            exports2.KeyedSet = KeyedSet;
            function* itMap(it, f) {
              for (let t of it) {
                yield f(t);
              }
            }
            exports2.itMap = itMap;
            function itForEach(it, f) {
              for (let t of it) {
                f(t);
              }
            }
            exports2.itForEach = itForEach;
            function itReduce(it, f, init) {
              let accum = init;
              for (let t of it) {
                accum = f(accum, t);
              }
              return accum;
            }
            exports2.itReduce = itReduce;
            function zeroPad(s, width) {
              return new Array(Math.max(width - s.length, 0) + 1).join("0") + s;
            }
            exports2.zeroPad = zeroPad;
            function formatPercent(percent) {
              let formattedPercent = `${percent.toFixed(0)}%`;
              if (percent === 100)
                formattedPercent = "100%";
              else if (percent > 99)
                formattedPercent = ">99%";
              else if (percent < 0.01)
                formattedPercent = "<0.01%";
              else if (percent < 1)
                formattedPercent = `${percent.toFixed(2)}%`;
              else if (percent < 10)
                formattedPercent = `${percent.toFixed(1)}%`;
              return formattedPercent;
            }
            exports2.formatPercent = formatPercent;
            function fract(x) {
              return x - Math.floor(x);
            }
            exports2.fract = fract;
            function triangle(x) {
              return 2 * Math.abs(fract(x) - 0.5) - 1;
            }
            exports2.triangle = triangle;
            function binarySearch(lo, hi, f, target, targetRangeSize = 1) {
              console.assert(!isNaN(targetRangeSize) && !isNaN(target));
              while (true) {
                if (hi - lo <= targetRangeSize)
                  return [lo, hi];
                const mid = (hi + lo) / 2;
                const val = f(mid);
                if (val < target)
                  lo = mid;
                else
                  hi = mid;
              }
            }
            exports2.binarySearch = binarySearch;
            function noop3(...args) {
            }
            exports2.noop = noop3;
            function objectsHaveShallowEquality(a, b) {
              for (let key in a) {
                if (a[key] !== b[key])
                  return false;
              }
              for (let key in b) {
                if (a[key] !== b[key])
                  return false;
              }
              return true;
            }
            exports2.objectsHaveShallowEquality = objectsHaveShallowEquality;
            function memoizeByShallowEquality(cb) {
              let last = null;
              return (args) => {
                let result;
                if (last == null) {
                  result = cb(args);
                  last = {
                    args,
                    result
                  };
                  return result;
                } else if (objectsHaveShallowEquality(last.args, args)) {
                  return last.result;
                } else {
                  last.args = args;
                  last.result = cb(args);
                  return last.result;
                }
              };
            }
            exports2.memoizeByShallowEquality = memoizeByShallowEquality;
            function memoizeByReference(cb) {
              let last = null;
              return (args) => {
                let result;
                if (last == null) {
                  result = cb(args);
                  last = {
                    args,
                    result
                  };
                  return result;
                } else if (last.args === args) {
                  return last.result;
                } else {
                  last.args = args;
                  last.result = cb(args);
                  return last.result;
                }
              };
            }
            exports2.memoizeByReference = memoizeByReference;
            function lazyStatic(cb) {
              let last = null;
              return () => {
                if (last == null) {
                  last = {
                    result: cb()
                  };
                }
                return last.result;
              };
            }
            exports2.lazyStatic = lazyStatic;
            const base64lookupTable = lazyStatic(() => {
              const alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
              const ret = /* @__PURE__ */ new Map();
              for (let i = 0; i < alphabet.length; i++) {
                ret.set(alphabet.charAt(i), i);
              }
              ret.set("=", -1);
              return ret;
            });
            function decodeBase64(encoded) {
              const lookupTable = base64lookupTable();
              if (encoded.length % 4 !== 0) {
                throw new Error(`Invalid length for base64 encoded string. Expected length % 4 = 0, got length = ${encoded.length}`);
              }
              const quartetCount = encoded.length / 4;
              let byteCount;
              if (encoded.length >= 4) {
                if (encoded.charAt(encoded.length - 1) === "=") {
                  if (encoded.charAt(encoded.length - 2) === "=") {
                    byteCount = quartetCount * 3 - 2;
                  } else {
                    byteCount = quartetCount * 3 - 1;
                  }
                } else {
                  byteCount = quartetCount * 3;
                }
              } else {
                byteCount = quartetCount * 3;
              }
              const bytes = new Uint8Array(byteCount);
              let offset = 0;
              for (let i = 0; i < quartetCount; i++) {
                const enc1 = encoded.charAt(i * 4 + 0);
                const enc2 = encoded.charAt(i * 4 + 1);
                const enc3 = encoded.charAt(i * 4 + 2);
                const enc4 = encoded.charAt(i * 4 + 3);
                const sextet1 = lookupTable.get(enc1);
                const sextet2 = lookupTable.get(enc2);
                const sextet3 = lookupTable.get(enc3);
                const sextet4 = lookupTable.get(enc4);
                if (sextet1 == null || sextet2 == null || sextet3 == null || sextet4 == null) {
                  throw new Error(`Invalid quartet at indices ${i * 4} .. ${i * 4 + 3}: ${encoded.substring(i * 4, i * 4 + 3)}`);
                }
                bytes[offset++] = sextet1 << 2 | sextet2 >> 4;
                if (enc3 !== "=") {
                  bytes[offset++] = (sextet2 & 15) << 4 | sextet3 >> 2;
                }
                if (enc4 !== "=") {
                  bytes[offset++] = (sextet3 & 7) << 6 | sextet4;
                }
              }
              if (offset !== byteCount) {
                throw new Error(`Expected to decode ${byteCount} bytes, but only decoded ${offset})`);
              }
              return bytes;
            }
            exports2.decodeBase64 = decodeBase64;
          }
        ),
        /***/
        8218: (
          /***/
          (__unused_webpack_module, exports2, __webpack_require__2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.ByteFormatter = exports2.TimeFormatter = exports2.RawValueFormatter = void 0;
            const utils_1 = __webpack_require__2(7844);
            class RawValueFormatter {
              constructor() {
                this.unit = "none";
              }
              format(v) {
                return v.toLocaleString();
              }
            }
            exports2.RawValueFormatter = RawValueFormatter;
            class TimeFormatter {
              constructor(unit) {
                this.unit = unit;
                if (unit === "nanoseconds")
                  this.multiplier = 1e-9;
                else if (unit === "microseconds")
                  this.multiplier = 1e-6;
                else if (unit === "milliseconds")
                  this.multiplier = 1e-3;
                else
                  this.multiplier = 1;
              }
              formatUnsigned(v) {
                const s = v * this.multiplier;
                if (s / 60 >= 1) {
                  const minutes = Math.floor(s / 60);
                  const seconds = Math.floor(s - minutes * 60).toString();
                  return `${minutes}:${utils_1.zeroPad(seconds, 2)}`;
                }
                if (s / 1 >= 1)
                  return `${s.toFixed(2)}s`;
                if (s / 1e-3 >= 1)
                  return `${(s / 1e-3).toFixed(2)}ms`;
                if (s / 1e-6 >= 1)
                  return `${(s / 1e-6).toFixed(2)}\xB5s`;
                else
                  return `${(s / 1e-9).toFixed(2)}ns`;
              }
              format(v) {
                return `${v < 0 ? "-" : ""}${this.formatUnsigned(Math.abs(v))}`;
              }
            }
            exports2.TimeFormatter = TimeFormatter;
            class ByteFormatter {
              constructor() {
                this.unit = "bytes";
              }
              format(v) {
                if (v < 1024)
                  return `${v.toFixed(0)} B`;
                v /= 1024;
                if (v < 1024)
                  return `${v.toFixed(2)} KB`;
                v /= 1024;
                if (v < 1024)
                  return `${v.toFixed(2)} MB`;
                v /= 1024;
                return `${v.toFixed(2)} GB`;
              }
            }
            exports2.ByteFormatter = ByteFormatter;
          }
        ),
        /***/
        5041: (
          /***/
          function(__unused_webpack_module, exports2, __webpack_require__2) {
            "use strict";
            var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
              if (k2 === void 0)
                k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function() {
                  return m[k];
                }
              });
            } : function(o, m, k, k2) {
              if (k2 === void 0)
                k2 = k;
              o[k2] = m[k];
            });
            var __exportStar = this && this.__exportStar || function(m, exports3) {
              for (var p in m)
                if (p !== "default" && !exports3.hasOwnProperty(p))
                  __createBinding(exports3, m, p);
            };
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            __exportStar(__webpack_require__2(3496), exports2);
            __exportStar(__webpack_require__2(6121), exports2);
          }
        ),
        /***/
        3537: (
          /***/
          (module2) => {
            (function(name, definition) {
              if (true) {
                module2.exports = definition();
              } else {
              }
            })("clipboard", function() {
              if (typeof document === "undefined" || !document.addEventListener) {
                return null;
              }
              var clipboard = {};
              clipboard.copy = function() {
                var _intercept = false;
                var _data = null;
                var _bogusSelection = false;
                function cleanup() {
                  _intercept = false;
                  _data = null;
                  if (_bogusSelection) {
                    window.getSelection().removeAllRanges();
                  }
                  _bogusSelection = false;
                }
                document.addEventListener("copy", function(e) {
                  if (_intercept) {
                    for (var key in _data) {
                      e.clipboardData.setData(key, _data[key]);
                    }
                    e.preventDefault();
                  }
                });
                function bogusSelect() {
                  var sel = document.getSelection();
                  if (!document.queryCommandEnabled("copy") && sel.isCollapsed) {
                    var range = document.createRange();
                    range.selectNodeContents(document.body);
                    sel.removeAllRanges();
                    sel.addRange(range);
                    _bogusSelection = true;
                  }
                }
                ;
                return function(data) {
                  return new Promise(function(resolve, reject) {
                    _intercept = true;
                    if (typeof data === "string") {
                      _data = {
                        "text/plain": data
                      };
                    } else if (data instanceof Node) {
                      _data = {
                        "text/html": new XMLSerializer().serializeToString(data)
                      };
                    } else if (data instanceof Object) {
                      _data = data;
                    } else {
                      reject("Invalid data type. Must be string, DOM node, or an object mapping MIME types to strings.");
                    }
                    function triggerCopy(tryBogusSelect) {
                      try {
                        if (document.execCommand("copy")) {
                          cleanup();
                          resolve();
                        } else {
                          if (!tryBogusSelect) {
                            bogusSelect();
                            triggerCopy(true);
                          } else {
                            cleanup();
                            throw new Error("Unable to copy. Perhaps it's not available in your browser?");
                          }
                        }
                      } catch (e) {
                        cleanup();
                        reject(e);
                      }
                    }
                    triggerCopy(false);
                  });
                };
              }();
              clipboard.paste = function() {
                var _intercept = false;
                var _resolve;
                var _dataType;
                document.addEventListener("paste", function(e) {
                  if (_intercept) {
                    _intercept = false;
                    e.preventDefault();
                    var resolve = _resolve;
                    _resolve = null;
                    resolve(e.clipboardData.getData(_dataType));
                  }
                });
                return function(dataType) {
                  return new Promise(function(resolve, reject) {
                    _intercept = true;
                    _resolve = resolve;
                    _dataType = dataType || "text/plain";
                    try {
                      if (!document.execCommand("paste")) {
                        _intercept = false;
                        reject(new Error("Unable to paste. Pasting only works in Internet Explorer at the moment."));
                      }
                    } catch (e) {
                      _intercept = false;
                      reject(new Error(e));
                    }
                  });
                };
              }();
              if (typeof ClipboardEvent === "undefined" && typeof window.clipboardData !== "undefined" && typeof window.clipboardData.setData !== "undefined") {
                (function(a) {
                  function b(a2, b2) {
                    return function() {
                      a2.apply(b2, arguments);
                    };
                  }
                  function c(a2) {
                    if ("object" != typeof this)
                      throw new TypeError("Promises must be constructed via new");
                    if ("function" != typeof a2)
                      throw new TypeError("not a function");
                    this._state = null, this._value = null, this._deferreds = [], i(a2, b(e, this), b(f, this));
                  }
                  function d(a2) {
                    var b2 = this;
                    return null === this._state ? void this._deferreds.push(a2) : void j(function() {
                      var c2 = b2._state ? a2.onFulfilled : a2.onRejected;
                      if (null === c2)
                        return void (b2._state ? a2.resolve : a2.reject)(b2._value);
                      var d2;
                      try {
                        d2 = c2(b2._value);
                      } catch (e2) {
                        return void a2.reject(e2);
                      }
                      a2.resolve(d2);
                    });
                  }
                  function e(a2) {
                    try {
                      if (a2 === this)
                        throw new TypeError("A promise cannot be resolved with itself.");
                      if (a2 && ("object" == typeof a2 || "function" == typeof a2)) {
                        var c2 = a2.then;
                        if ("function" == typeof c2)
                          return void i(b(c2, a2), b(e, this), b(f, this));
                      }
                      this._state = true, this._value = a2, g.call(this);
                    } catch (d2) {
                      f.call(this, d2);
                    }
                  }
                  function f(a2) {
                    this._state = false, this._value = a2, g.call(this);
                  }
                  function g() {
                    for (var a2 = 0, b2 = this._deferreds.length; b2 > a2; a2++)
                      d.call(this, this._deferreds[a2]);
                    this._deferreds = null;
                  }
                  function h(a2, b2, c2, d2) {
                    this.onFulfilled = "function" == typeof a2 ? a2 : null, this.onRejected = "function" == typeof b2 ? b2 : null, this.resolve = c2, this.reject = d2;
                  }
                  function i(a2, b2, c2) {
                    var d2 = false;
                    try {
                      a2(function(a3) {
                        d2 || (d2 = true, b2(a3));
                      }, function(a3) {
                        d2 || (d2 = true, c2(a3));
                      });
                    } catch (e2) {
                      if (d2)
                        return;
                      d2 = true, c2(e2);
                    }
                  }
                  var j = c.immediateFn || "function" == typeof setImmediate && setImmediate || function(a2) {
                    setTimeout(a2, 1);
                  }, k = Array.isArray || function(a2) {
                    return "[object Array]" === Object.prototype.toString.call(a2);
                  };
                  c.prototype["catch"] = function(a2) {
                    return this.then(null, a2);
                  }, c.prototype.then = function(a2, b2) {
                    var e2 = this;
                    return new c(function(c2, f2) {
                      d.call(e2, new h(a2, b2, c2, f2));
                    });
                  }, c.all = function() {
                    var a2 = Array.prototype.slice.call(1 === arguments.length && k(arguments[0]) ? arguments[0] : arguments);
                    return new c(function(b2, c2) {
                      function d2(f3, g2) {
                        try {
                          if (g2 && ("object" == typeof g2 || "function" == typeof g2)) {
                            var h2 = g2.then;
                            if ("function" == typeof h2)
                              return void h2.call(g2, function(a3) {
                                d2(f3, a3);
                              }, c2);
                          }
                          a2[f3] = g2, 0 === --e2 && b2(a2);
                        } catch (i2) {
                          c2(i2);
                        }
                      }
                      if (0 === a2.length)
                        return b2([]);
                      for (var e2 = a2.length, f2 = 0; f2 < a2.length; f2++)
                        d2(f2, a2[f2]);
                    });
                  }, c.resolve = function(a2) {
                    return a2 && "object" == typeof a2 && a2.constructor === c ? a2 : new c(function(b2) {
                      b2(a2);
                    });
                  }, c.reject = function(a2) {
                    return new c(function(b2, c2) {
                      c2(a2);
                    });
                  }, c.race = function(a2) {
                    return new c(function(b2, c2) {
                      for (var d2 = 0, e2 = a2.length; e2 > d2; d2++)
                        a2[d2].then(b2, c2);
                    });
                  }, module2.exports ? module2.exports = c : a.Promise || (a.Promise = c);
                })(this);
                clipboard.copy = function(data) {
                  return new Promise(function(resolve, reject) {
                    if (typeof data !== "string" && !("text/plain" in data)) {
                      throw new Error("You must provide a text/plain type.");
                    }
                    var strData = typeof data === "string" ? data : data["text/plain"];
                    var copySucceeded = window.clipboardData.setData("Text", strData);
                    if (copySucceeded) {
                      resolve();
                    } else {
                      reject(new Error("Copying was rejected."));
                    }
                  });
                };
                clipboard.paste = function() {
                  return new Promise(function(resolve, reject) {
                    var strData = window.clipboardData.getData("Text");
                    if (strData) {
                      resolve(strData);
                    } else {
                      reject(new Error("Pasting was rejected."));
                    }
                  });
                };
              }
              return clipboard;
            });
          }
        ),
        /***/
        5751: (
          /***/
          (module2) => {
            module2.exports = function(useSourceMap) {
              var list = [];
              list.toString = function toString() {
                return this.map(function(item) {
                  var content = cssWithMappingToString(item, useSourceMap);
                  if (item[2]) {
                    return "@media " + item[2] + "{" + content + "}";
                  } else {
                    return content;
                  }
                }).join("");
              };
              list.i = function(modules, mediaQuery) {
                if (typeof modules === "string")
                  modules = [[null, modules, ""]];
                var alreadyImportedModules = {};
                for (var i = 0; i < this.length; i++) {
                  var id = this[i][0];
                  if (typeof id === "number")
                    alreadyImportedModules[id] = true;
                }
                for (i = 0; i < modules.length; i++) {
                  var item = modules[i];
                  if (typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
                    if (mediaQuery && !item[2]) {
                      item[2] = mediaQuery;
                    } else if (mediaQuery) {
                      item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
                    }
                    list.push(item);
                  }
                }
              };
              return list;
            };
            function cssWithMappingToString(item, useSourceMap) {
              var content = item[1] || "";
              var cssMapping = item[3];
              if (!cssMapping) {
                return content;
              }
              if (useSourceMap && typeof btoa === "function") {
                var sourceMapping = toComment(cssMapping);
                var sourceURLs = cssMapping.sources.map(function(source) {
                  return "/*# sourceURL=" + cssMapping.sourceRoot + source + " */";
                });
                return [content].concat(sourceURLs).concat([sourceMapping]).join("\n");
              }
              return [content].join("\n");
            }
            function toComment(sourceMap) {
              var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
              var data = "sourceMappingURL=data:application/json;charset=utf-8;base64," + base64;
              return "/*# " + data + " */";
            }
          }
        ),
        /***/
        8715: (
          /***/
          function(module2, exports2, __webpack_require__2) {
            var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
            (function(root, factory) {
              "use strict";
              if (true) {
                !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__2(7356)], __WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function" ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports2, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== void 0 && (module2.exports = __WEBPACK_AMD_DEFINE_RESULT__));
              } else {
              }
            })(this, function ErrorStackParser(StackFrame) {
              "use strict";
              var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\S+:\d+/;
              var CHROME_IE_STACK_REGEXP = /^\s*at .*(\S+:\d+|\(native\))/m;
              var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\[native code])?$/;
              return {
                /**
                 * Given an Error object, extract the most information from it.
                 *
                 * @param {Error} error object
                 * @return {Array} of StackFrames
                 */
                parse: function ErrorStackParser$$parse(error) {
                  if (typeof error.stacktrace !== "undefined" || typeof error["opera#sourceloc"] !== "undefined") {
                    return this.parseOpera(error);
                  } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {
                    return this.parseV8OrIE(error);
                  } else if (error.stack) {
                    return this.parseFFOrSafari(error);
                  } else {
                    throw new Error("Cannot parse given Error object");
                  }
                },
                // Separate line and column numbers from a string of the form: (URI:Line:Column)
                extractLocation: function ErrorStackParser$$extractLocation(urlLike) {
                  if (urlLike.indexOf(":") === -1) {
                    return [urlLike];
                  }
                  var regExp = /(.+?)(?::(\d+))?(?::(\d+))?$/;
                  var parts = regExp.exec(urlLike.replace(/[()]/g, ""));
                  return [parts[1], parts[2] || void 0, parts[3] || void 0];
                },
                parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {
                  var filtered = error.stack.split("\n").filter(function(line) {
                    return !!line.match(CHROME_IE_STACK_REGEXP);
                  }, this);
                  return filtered.map(function(line) {
                    if (line.indexOf("(eval ") > -1) {
                      line = line.replace(/eval code/g, "eval").replace(/(\(eval at [^()]*)|(\),.*$)/g, "");
                    }
                    var sanitizedLine = line.replace(/^\s+/, "").replace(/\(eval code/g, "(");
                    var location = sanitizedLine.match(/ (\((.+):(\d+):(\d+)\)$)/);
                    sanitizedLine = location ? sanitizedLine.replace(location[0], "") : sanitizedLine;
                    var tokens = sanitizedLine.split(/\s+/).slice(1);
                    var locationParts = this.extractLocation(location ? location[1] : tokens.pop());
                    var functionName = tokens.join(" ") || void 0;
                    var fileName = ["eval", "<anonymous>"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];
                    return new StackFrame({
                      functionName,
                      fileName,
                      lineNumber: locationParts[1],
                      columnNumber: locationParts[2],
                      source: line
                    });
                  }, this);
                },
                parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {
                  var filtered = error.stack.split("\n").filter(function(line) {
                    return !line.match(SAFARI_NATIVE_CODE_REGEXP);
                  }, this);
                  return filtered.map(function(line) {
                    if (line.indexOf(" > eval") > -1) {
                      line = line.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g, ":$1");
                    }
                    if (line.indexOf("@") === -1 && line.indexOf(":") === -1) {
                      return new StackFrame({
                        functionName: line
                      });
                    } else {
                      var functionNameRegex = /((.*".+"[^@]*)?[^@]*)(?:@)/;
                      var matches = line.match(functionNameRegex);
                      var functionName = matches && matches[1] ? matches[1] : void 0;
                      var locationParts = this.extractLocation(line.replace(functionNameRegex, ""));
                      return new StackFrame({
                        functionName,
                        fileName: locationParts[0],
                        lineNumber: locationParts[1],
                        columnNumber: locationParts[2],
                        source: line
                      });
                    }
                  }, this);
                },
                parseOpera: function ErrorStackParser$$parseOpera(e) {
                  if (!e.stacktrace || e.message.indexOf("\n") > -1 && e.message.split("\n").length > e.stacktrace.split("\n").length) {
                    return this.parseOpera9(e);
                  } else if (!e.stack) {
                    return this.parseOpera10(e);
                  } else {
                    return this.parseOpera11(e);
                  }
                },
                parseOpera9: function ErrorStackParser$$parseOpera9(e) {
                  var lineRE = /Line (\d+).*script (?:in )?(\S+)/i;
                  var lines = e.message.split("\n");
                  var result = [];
                  for (var i = 2, len = lines.length; i < len; i += 2) {
                    var match = lineRE.exec(lines[i]);
                    if (match) {
                      result.push(new StackFrame({
                        fileName: match[2],
                        lineNumber: match[1],
                        source: lines[i]
                      }));
                    }
                  }
                  return result;
                },
                parseOpera10: function ErrorStackParser$$parseOpera10(e) {
                  var lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;
                  var lines = e.stacktrace.split("\n");
                  var result = [];
                  for (var i = 0, len = lines.length; i < len; i += 2) {
                    var match = lineRE.exec(lines[i]);
                    if (match) {
                      result.push(new StackFrame({
                        functionName: match[3] || void 0,
                        fileName: match[2],
                        lineNumber: match[1],
                        source: lines[i]
                      }));
                    }
                  }
                  return result;
                },
                // Opera 10.65+ Error.stack very similar to FF/Safari
                parseOpera11: function ErrorStackParser$$parseOpera11(error) {
                  var filtered = error.stack.split("\n").filter(function(line) {
                    return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);
                  }, this);
                  return filtered.map(function(line) {
                    var tokens = line.split("@");
                    var locationParts = this.extractLocation(tokens.pop());
                    var functionCall = tokens.shift() || "";
                    var functionName = functionCall.replace(/<anonymous function(: (\w+))?>/, "$2").replace(/\([^)]*\)/g, "") || void 0;
                    var argsRaw;
                    if (functionCall.match(/\(([^)]*)\)/)) {
                      argsRaw = functionCall.replace(/^[^(]+\(([^)]*)\)$/, "$1");
                    }
                    var args = argsRaw === void 0 || argsRaw === "[arguments not available]" ? void 0 : argsRaw.split(",");
                    return new StackFrame({
                      functionName,
                      args,
                      fileName: locationParts[0],
                      lineNumber: locationParts[1],
                      columnNumber: locationParts[2],
                      source: line
                    });
                  }, this);
                }
              };
            });
          }
        ),
        /***/
        1014: (
          /***/
          (module2) => {
            "use strict";
            var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
            module2.exports = function(str) {
              if (typeof str !== "string") {
                throw new TypeError("Expected a string");
              }
              return str.replace(matchOperatorsRe, "\\$&");
            };
          }
        ),
        /***/
        6486: (
          /***/
          (module2) => {
            const URI_REGEX = /^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;
            function _rfc3986Parse(url) {
              const match = url.match(URI_REGEX);
              if (match == null) {
                throw new Error("Unexpected error - failed to regex-match URL");
              }
              return {
                schemeAndAuthority: (match[1] || "") + (match[3] || ""),
                path: match[5] || "",
                hasQueryPart: match[6] != null,
                queryWithoutQuestionMark: match[7] || "",
                fragmentWithHash: match[8] || ""
              };
            }
            function isJscSafeUrl(url) {
              const parsedUrl = _rfc3986Parse(url);
              return !parsedUrl.hasQueryPart;
            }
            function toNormalUrl(urlToNormalize) {
              const parsedUrl = _rfc3986Parse(urlToNormalize);
              if (parsedUrl.path.indexOf("//&") === -1) {
                return urlToNormalize;
              }
              return parsedUrl.schemeAndAuthority + parsedUrl.path.replace("//&", "?") + // We don't expect JSC urls to also have query strings, but interpret
              // liberally and append them.
              (parsedUrl.queryWithoutQuestionMark.length > 0 ? "&" + parsedUrl.queryWithoutQuestionMark : "") + // Likewise, JSC URLs will usually have their fragments stripped, but
              // preserve if we find one.
              parsedUrl.fragmentWithHash;
            }
            function toJscSafeUrl(urlToConvert) {
              if (!_rfc3986Parse(urlToConvert).hasQueryPart) {
                return urlToConvert;
              }
              const parsedUrl = _rfc3986Parse(toNormalUrl(urlToConvert));
              if (parsedUrl.queryWithoutQuestionMark.length > 0 && (parsedUrl.path === "" || parsedUrl.path === "/")) {
                throw new Error(`The given URL "${urlToConvert}" has an empty path and cannot be converted to a JSC-safe format.`);
              }
              return parsedUrl.schemeAndAuthority + parsedUrl.path + (parsedUrl.queryWithoutQuestionMark.length > 0 ? "//&" + // Query strings may contain '?' (e.g. in key or value names) - these
              // must be percent-encoded to form a valid path, and not be stripped.
              parsedUrl.queryWithoutQuestionMark.replace(/\?/g, "%3F") : "") + // We expect JSC to strip this - we don't handle fragments for now.
              parsedUrl.fragmentWithHash;
            }
            module2.exports = {
              isJscSafeUrl,
              toNormalUrl,
              toJscSafeUrl
            };
          }
        ),
        /***/
        3804: (
          /***/
          function(module2) {
            (function(global2, factory) {
              true ? module2.exports = factory() : 0;
            })(this, function() {
              "use strict";
              function createCommonjsModule(fn, module3) {
                return module3 = {
                  exports: {}
                }, fn(module3, module3.exports), module3.exports;
              }
              var _global = createCommonjsModule(function(module3) {
                var global2 = module3.exports = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
                if (typeof __g == "number") {
                  __g = global2;
                }
              });
              var _core = createCommonjsModule(function(module3) {
                var core = module3.exports = {
                  version: "2.6.5"
                };
                if (typeof __e == "number") {
                  __e = core;
                }
              });
              var _core_1 = _core.version;
              var _isObject = function(it) {
                return typeof it === "object" ? it !== null : typeof it === "function";
              };
              var _anObject = function(it) {
                if (!_isObject(it)) {
                  throw TypeError(it + " is not an object!");
                }
                return it;
              };
              var _fails = function(exec) {
                try {
                  return !!exec();
                } catch (e) {
                  return true;
                }
              };
              var _descriptors = !_fails(function() {
                return Object.defineProperty({}, "a", {
                  get: function() {
                    return 7;
                  }
                }).a != 7;
              });
              var document2 = _global.document;
              var is = _isObject(document2) && _isObject(document2.createElement);
              var _domCreate = function(it) {
                return is ? document2.createElement(it) : {};
              };
              var _ie8DomDefine = !_descriptors && !_fails(function() {
                return Object.defineProperty(_domCreate("div"), "a", {
                  get: function() {
                    return 7;
                  }
                }).a != 7;
              });
              var _toPrimitive = function(it, S) {
                if (!_isObject(it)) {
                  return it;
                }
                var fn, val;
                if (S && typeof (fn = it.toString) == "function" && !_isObject(val = fn.call(it))) {
                  return val;
                }
                if (typeof (fn = it.valueOf) == "function" && !_isObject(val = fn.call(it))) {
                  return val;
                }
                if (!S && typeof (fn = it.toString) == "function" && !_isObject(val = fn.call(it))) {
                  return val;
                }
                throw TypeError("Can't convert object to primitive value");
              };
              var dP = Object.defineProperty;
              var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
                _anObject(O);
                P = _toPrimitive(P, true);
                _anObject(Attributes);
                if (_ie8DomDefine) {
                  try {
                    return dP(O, P, Attributes);
                  } catch (e) {
                  }
                }
                if ("get" in Attributes || "set" in Attributes) {
                  throw TypeError("Accessors not supported!");
                }
                if ("value" in Attributes) {
                  O[P] = Attributes.value;
                }
                return O;
              };
              var _objectDp = {
                f
              };
              var _propertyDesc = function(bitmap, value) {
                return {
                  enumerable: !(bitmap & 1),
                  configurable: !(bitmap & 2),
                  writable: !(bitmap & 4),
                  value
                };
              };
              var _hide = _descriptors ? function(object, key2, value) {
                return _objectDp.f(object, key2, _propertyDesc(1, value));
              } : function(object, key2, value) {
                object[key2] = value;
                return object;
              };
              var hasOwnProperty = {}.hasOwnProperty;
              var _has = function(it, key2) {
                return hasOwnProperty.call(it, key2);
              };
              var id = 0;
              var px = Math.random();
              var _uid = function(key2) {
                return "Symbol(".concat(key2 === void 0 ? "" : key2, ")_", (++id + px).toString(36));
              };
              var _library = false;
              var _shared = createCommonjsModule(function(module3) {
                var SHARED = "__core-js_shared__";
                var store = _global[SHARED] || (_global[SHARED] = {});
                (module3.exports = function(key2, value) {
                  return store[key2] || (store[key2] = value !== void 0 ? value : {});
                })("versions", []).push({
                  version: _core.version,
                  mode: _library ? "pure" : "global",
                  copyright: "\xA9 2019 Denis Pushkarev (zloirock.ru)"
                });
              });
              var _functionToString = _shared("native-function-to-string", Function.toString);
              var _redefine = createCommonjsModule(function(module3) {
                var SRC = _uid("src");
                var TO_STRING = "toString";
                var TPL = ("" + _functionToString).split(TO_STRING);
                _core.inspectSource = function(it) {
                  return _functionToString.call(it);
                };
                (module3.exports = function(O, key2, val, safe) {
                  var isFunction = typeof val == "function";
                  if (isFunction) {
                    _has(val, "name") || _hide(val, "name", key2);
                  }
                  if (O[key2] === val) {
                    return;
                  }
                  if (isFunction) {
                    _has(val, SRC) || _hide(val, SRC, O[key2] ? "" + O[key2] : TPL.join(String(key2)));
                  }
                  if (O === _global) {
                    O[key2] = val;
                  } else if (!safe) {
                    delete O[key2];
                    _hide(O, key2, val);
                  } else if (O[key2]) {
                    O[key2] = val;
                  } else {
                    _hide(O, key2, val);
                  }
                })(Function.prototype, TO_STRING, function toString() {
                  return typeof this == "function" && this[SRC] || _functionToString.call(this);
                });
              });
              var _aFunction = function(it) {
                if (typeof it != "function") {
                  throw TypeError(it + " is not a function!");
                }
                return it;
              };
              var _ctx = function(fn, that, length) {
                _aFunction(fn);
                if (that === void 0) {
                  return fn;
                }
                switch (length) {
                  case 1:
                    return function(a) {
                      return fn.call(that, a);
                    };
                  case 2:
                    return function(a, b) {
                      return fn.call(that, a, b);
                    };
                  case 3:
                    return function(a, b, c2) {
                      return fn.call(that, a, b, c2);
                    };
                }
                return function() {
                  return fn.apply(that, arguments);
                };
              };
              var PROTOTYPE = "prototype";
              var $export = function(type, name, source2) {
                var IS_FORCED = type & $export.F;
                var IS_GLOBAL = type & $export.G;
                var IS_STATIC = type & $export.S;
                var IS_PROTO = type & $export.P;
                var IS_BIND = type & $export.B;
                var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];
                var exports2 = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
                var expProto = exports2[PROTOTYPE] || (exports2[PROTOTYPE] = {});
                var key2, own, out, exp;
                if (IS_GLOBAL) {
                  source2 = name;
                }
                for (key2 in source2) {
                  own = !IS_FORCED && target && target[key2] !== void 0;
                  out = (own ? target : source2)[key2];
                  exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == "function" ? _ctx(Function.call, out) : out;
                  if (target) {
                    _redefine(target, key2, out, type & $export.U);
                  }
                  if (exports2[key2] != out) {
                    _hide(exports2, key2, exp);
                  }
                  if (IS_PROTO && expProto[key2] != out) {
                    expProto[key2] = out;
                  }
                }
              };
              _global.core = _core;
              $export.F = 1;
              $export.G = 2;
              $export.S = 4;
              $export.P = 8;
              $export.B = 16;
              $export.W = 32;
              $export.U = 64;
              $export.R = 128;
              var _export = $export;
              var ceil = Math.ceil;
              var floor = Math.floor;
              var _toInteger = function(it) {
                return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
              };
              var _defined = function(it) {
                if (it == void 0) {
                  throw TypeError("Can't call method on  " + it);
                }
                return it;
              };
              var _stringAt = function(TO_STRING) {
                return function(that, pos2) {
                  var s = String(_defined(that));
                  var i = _toInteger(pos2);
                  var l = s.length;
                  var a, b;
                  if (i < 0 || i >= l) {
                    return TO_STRING ? "" : void 0;
                  }
                  a = s.charCodeAt(i);
                  return a < 55296 || a > 56319 || i + 1 === l || (b = s.charCodeAt(i + 1)) < 56320 || b > 57343 ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 55296 << 10) + (b - 56320) + 65536;
                };
              };
              var $at = _stringAt(false);
              _export(_export.P, "String", {
                // 21.1.3.3 String.prototype.codePointAt(pos)
                codePointAt: function codePointAt2(pos2) {
                  return $at(this, pos2);
                }
              });
              var codePointAt = _core.String.codePointAt;
              var max = Math.max;
              var min = Math.min;
              var _toAbsoluteIndex = function(index, length) {
                index = _toInteger(index);
                return index < 0 ? max(index + length, 0) : min(index, length);
              };
              var fromCharCode = String.fromCharCode;
              var $fromCodePoint = String.fromCodePoint;
              _export(_export.S + _export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), "String", {
                // 21.1.2.2 String.fromCodePoint(...codePoints)
                fromCodePoint: function fromCodePoint2(x) {
                  var arguments$1 = arguments;
                  var res = [];
                  var aLen = arguments.length;
                  var i = 0;
                  var code;
                  while (aLen > i) {
                    code = +arguments$1[i++];
                    if (_toAbsoluteIndex(code, 1114111) !== code) {
                      throw RangeError(code + " is not a valid code point");
                    }
                    res.push(code < 65536 ? fromCharCode(code) : fromCharCode(((code -= 65536) >> 10) + 55296, code % 1024 + 56320));
                  }
                  return res.join("");
                }
              });
              var fromCodePoint = _core.String.fromCodePoint;
              var Space_Separator = /[\u1680\u2000-\u200A\u202F\u205F\u3000]/;
              var ID_Start = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/;
              var ID_Continue = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/;
              var unicode = {
                Space_Separator,
                ID_Start,
                ID_Continue
              };
              var util = {
                isSpaceSeparator: function isSpaceSeparator(c2) {
                  return typeof c2 === "string" && unicode.Space_Separator.test(c2);
                },
                isIdStartChar: function isIdStartChar(c2) {
                  return typeof c2 === "string" && (c2 >= "a" && c2 <= "z" || c2 >= "A" && c2 <= "Z" || c2 === "$" || c2 === "_" || unicode.ID_Start.test(c2));
                },
                isIdContinueChar: function isIdContinueChar(c2) {
                  return typeof c2 === "string" && (c2 >= "a" && c2 <= "z" || c2 >= "A" && c2 <= "Z" || c2 >= "0" && c2 <= "9" || c2 === "$" || c2 === "_" || c2 === "\u200C" || c2 === "\u200D" || unicode.ID_Continue.test(c2));
                },
                isDigit: function isDigit(c2) {
                  return typeof c2 === "string" && /[0-9]/.test(c2);
                },
                isHexDigit: function isHexDigit(c2) {
                  return typeof c2 === "string" && /[0-9A-Fa-f]/.test(c2);
                }
              };
              var source;
              var parseState;
              var stack;
              var pos;
              var line;
              var column;
              var token;
              var key;
              var root;
              var parse = function parse2(text, reviver) {
                source = String(text);
                parseState = "start";
                stack = [];
                pos = 0;
                line = 1;
                column = 0;
                token = void 0;
                key = void 0;
                root = void 0;
                do {
                  token = lex();
                  parseStates[parseState]();
                } while (token.type !== "eof");
                if (typeof reviver === "function") {
                  return internalize({
                    "": root
                  }, "", reviver);
                }
                return root;
              };
              function internalize(holder, name, reviver) {
                var value = holder[name];
                if (value != null && typeof value === "object") {
                  for (var key2 in value) {
                    var replacement = internalize(value, key2, reviver);
                    if (replacement === void 0) {
                      delete value[key2];
                    } else {
                      value[key2] = replacement;
                    }
                  }
                }
                return reviver.call(holder, name, value);
              }
              var lexState;
              var buffer;
              var doubleQuote;
              var sign;
              var c;
              function lex() {
                lexState = "default";
                buffer = "";
                doubleQuote = false;
                sign = 1;
                for (; ; ) {
                  c = peek();
                  var token2 = lexStates[lexState]();
                  if (token2) {
                    return token2;
                  }
                }
              }
              function peek() {
                if (source[pos]) {
                  return String.fromCodePoint(source.codePointAt(pos));
                }
              }
              function read() {
                var c2 = peek();
                if (c2 === "\n") {
                  line++;
                  column = 0;
                } else if (c2) {
                  column += c2.length;
                } else {
                  column++;
                }
                if (c2) {
                  pos += c2.length;
                }
                return c2;
              }
              var lexStates = {
                default: function default$1() {
                  switch (c) {
                    case "	":
                    case "\v":
                    case "\f":
                    case " ":
                    case "\xA0":
                    case "\uFEFF":
                    case "\n":
                    case "\r":
                    case "\u2028":
                    case "\u2029":
                      read();
                      return;
                    case "/":
                      read();
                      lexState = "comment";
                      return;
                    case void 0:
                      read();
                      return newToken("eof");
                  }
                  if (util.isSpaceSeparator(c)) {
                    read();
                    return;
                  }
                  return lexStates[parseState]();
                },
                comment: function comment() {
                  switch (c) {
                    case "*":
                      read();
                      lexState = "multiLineComment";
                      return;
                    case "/":
                      read();
                      lexState = "singleLineComment";
                      return;
                  }
                  throw invalidChar(read());
                },
                multiLineComment: function multiLineComment() {
                  switch (c) {
                    case "*":
                      read();
                      lexState = "multiLineCommentAsterisk";
                      return;
                    case void 0:
                      throw invalidChar(read());
                  }
                  read();
                },
                multiLineCommentAsterisk: function multiLineCommentAsterisk() {
                  switch (c) {
                    case "*":
                      read();
                      return;
                    case "/":
                      read();
                      lexState = "default";
                      return;
                    case void 0:
                      throw invalidChar(read());
                  }
                  read();
                  lexState = "multiLineComment";
                },
                singleLineComment: function singleLineComment() {
                  switch (c) {
                    case "\n":
                    case "\r":
                    case "\u2028":
                    case "\u2029":
                      read();
                      lexState = "default";
                      return;
                    case void 0:
                      read();
                      return newToken("eof");
                  }
                  read();
                },
                value: function value() {
                  switch (c) {
                    case "{":
                    case "[":
                      return newToken("punctuator", read());
                    case "n":
                      read();
                      literal("ull");
                      return newToken("null", null);
                    case "t":
                      read();
                      literal("rue");
                      return newToken("boolean", true);
                    case "f":
                      read();
                      literal("alse");
                      return newToken("boolean", false);
                    case "-":
                    case "+":
                      if (read() === "-") {
                        sign = -1;
                      }
                      lexState = "sign";
                      return;
                    case ".":
                      buffer = read();
                      lexState = "decimalPointLeading";
                      return;
                    case "0":
                      buffer = read();
                      lexState = "zero";
                      return;
                    case "1":
                    case "2":
                    case "3":
                    case "4":
                    case "5":
                    case "6":
                    case "7":
                    case "8":
                    case "9":
                      buffer = read();
                      lexState = "decimalInteger";
                      return;
                    case "I":
                      read();
                      literal("nfinity");
                      return newToken("numeric", Infinity);
                    case "N":
                      read();
                      literal("aN");
                      return newToken("numeric", NaN);
                    case '"':
                    case "'":
                      doubleQuote = read() === '"';
                      buffer = "";
                      lexState = "string";
                      return;
                  }
                  throw invalidChar(read());
                },
                identifierNameStartEscape: function identifierNameStartEscape() {
                  if (c !== "u") {
                    throw invalidChar(read());
                  }
                  read();
                  var u = unicodeEscape();
                  switch (u) {
                    case "$":
                    case "_":
                      break;
                    default:
                      if (!util.isIdStartChar(u)) {
                        throw invalidIdentifier();
                      }
                      break;
                  }
                  buffer += u;
                  lexState = "identifierName";
                },
                identifierName: function identifierName() {
                  switch (c) {
                    case "$":
                    case "_":
                    case "\u200C":
                    case "\u200D":
                      buffer += read();
                      return;
                    case "\\":
                      read();
                      lexState = "identifierNameEscape";
                      return;
                  }
                  if (util.isIdContinueChar(c)) {
                    buffer += read();
                    return;
                  }
                  return newToken("identifier", buffer);
                },
                identifierNameEscape: function identifierNameEscape() {
                  if (c !== "u") {
                    throw invalidChar(read());
                  }
                  read();
                  var u = unicodeEscape();
                  switch (u) {
                    case "$":
                    case "_":
                    case "\u200C":
                    case "\u200D":
                      break;
                    default:
                      if (!util.isIdContinueChar(u)) {
                        throw invalidIdentifier();
                      }
                      break;
                  }
                  buffer += u;
                  lexState = "identifierName";
                },
                sign: function sign$1() {
                  switch (c) {
                    case ".":
                      buffer = read();
                      lexState = "decimalPointLeading";
                      return;
                    case "0":
                      buffer = read();
                      lexState = "zero";
                      return;
                    case "1":
                    case "2":
                    case "3":
                    case "4":
                    case "5":
                    case "6":
                    case "7":
                    case "8":
                    case "9":
                      buffer = read();
                      lexState = "decimalInteger";
                      return;
                    case "I":
                      read();
                      literal("nfinity");
                      return newToken("numeric", sign * Infinity);
                    case "N":
                      read();
                      literal("aN");
                      return newToken("numeric", NaN);
                  }
                  throw invalidChar(read());
                },
                zero: function zero() {
                  switch (c) {
                    case ".":
                      buffer += read();
                      lexState = "decimalPoint";
                      return;
                    case "e":
                    case "E":
                      buffer += read();
                      lexState = "decimalExponent";
                      return;
                    case "x":
                    case "X":
                      buffer += read();
                      lexState = "hexadecimal";
                      return;
                  }
                  return newToken("numeric", sign * 0);
                },
                decimalInteger: function decimalInteger() {
                  switch (c) {
                    case ".":
                      buffer += read();
                      lexState = "decimalPoint";
                      return;
                    case "e":
                    case "E":
                      buffer += read();
                      lexState = "decimalExponent";
                      return;
                  }
                  if (util.isDigit(c)) {
                    buffer += read();
                    return;
                  }
                  return newToken("numeric", sign * Number(buffer));
                },
                decimalPointLeading: function decimalPointLeading() {
                  if (util.isDigit(c)) {
                    buffer += read();
                    lexState = "decimalFraction";
                    return;
                  }
                  throw invalidChar(read());
                },
                decimalPoint: function decimalPoint() {
                  switch (c) {
                    case "e":
                    case "E":
                      buffer += read();
                      lexState = "decimalExponent";
                      return;
                  }
                  if (util.isDigit(c)) {
                    buffer += read();
                    lexState = "decimalFraction";
                    return;
                  }
                  return newToken("numeric", sign * Number(buffer));
                },
                decimalFraction: function decimalFraction() {
                  switch (c) {
                    case "e":
                    case "E":
                      buffer += read();
                      lexState = "decimalExponent";
                      return;
                  }
                  if (util.isDigit(c)) {
                    buffer += read();
                    return;
                  }
                  return newToken("numeric", sign * Number(buffer));
                },
                decimalExponent: function decimalExponent() {
                  switch (c) {
                    case "+":
                    case "-":
                      buffer += read();
                      lexState = "decimalExponentSign";
                      return;
                  }
                  if (util.isDigit(c)) {
                    buffer += read();
                    lexState = "decimalExponentInteger";
                    return;
                  }
                  throw invalidChar(read());
                },
                decimalExponentSign: function decimalExponentSign() {
                  if (util.isDigit(c)) {
                    buffer += read();
                    lexState = "decimalExponentInteger";
                    return;
                  }
                  throw invalidChar(read());
                },
                decimalExponentInteger: function decimalExponentInteger() {
                  if (util.isDigit(c)) {
                    buffer += read();
                    return;
                  }
                  return newToken("numeric", sign * Number(buffer));
                },
                hexadecimal: function hexadecimal() {
                  if (util.isHexDigit(c)) {
                    buffer += read();
                    lexState = "hexadecimalInteger";
                    return;
                  }
                  throw invalidChar(read());
                },
                hexadecimalInteger: function hexadecimalInteger() {
                  if (util.isHexDigit(c)) {
                    buffer += read();
                    return;
                  }
                  return newToken("numeric", sign * Number(buffer));
                },
                string: function string() {
                  switch (c) {
                    case "\\":
                      read();
                      buffer += escape();
                      return;
                    case '"':
                      if (doubleQuote) {
                        read();
                        return newToken("string", buffer);
                      }
                      buffer += read();
                      return;
                    case "'":
                      if (!doubleQuote) {
                        read();
                        return newToken("string", buffer);
                      }
                      buffer += read();
                      return;
                    case "\n":
                    case "\r":
                      throw invalidChar(read());
                    case "\u2028":
                    case "\u2029":
                      separatorChar(c);
                      break;
                    case void 0:
                      throw invalidChar(read());
                  }
                  buffer += read();
                },
                start: function start() {
                  switch (c) {
                    case "{":
                    case "[":
                      return newToken("punctuator", read());
                  }
                  lexState = "value";
                },
                beforePropertyName: function beforePropertyName() {
                  switch (c) {
                    case "$":
                    case "_":
                      buffer = read();
                      lexState = "identifierName";
                      return;
                    case "\\":
                      read();
                      lexState = "identifierNameStartEscape";
                      return;
                    case "}":
                      return newToken("punctuator", read());
                    case '"':
                    case "'":
                      doubleQuote = read() === '"';
                      lexState = "string";
                      return;
                  }
                  if (util.isIdStartChar(c)) {
                    buffer += read();
                    lexState = "identifierName";
                    return;
                  }
                  throw invalidChar(read());
                },
                afterPropertyName: function afterPropertyName() {
                  if (c === ":") {
                    return newToken("punctuator", read());
                  }
                  throw invalidChar(read());
                },
                beforePropertyValue: function beforePropertyValue() {
                  lexState = "value";
                },
                afterPropertyValue: function afterPropertyValue() {
                  switch (c) {
                    case ",":
                    case "}":
                      return newToken("punctuator", read());
                  }
                  throw invalidChar(read());
                },
                beforeArrayValue: function beforeArrayValue() {
                  if (c === "]") {
                    return newToken("punctuator", read());
                  }
                  lexState = "value";
                },
                afterArrayValue: function afterArrayValue() {
                  switch (c) {
                    case ",":
                    case "]":
                      return newToken("punctuator", read());
                  }
                  throw invalidChar(read());
                },
                end: function end() {
                  throw invalidChar(read());
                }
              };
              function newToken(type, value) {
                return {
                  type,
                  value,
                  line,
                  column
                };
              }
              function literal(s) {
                for (var i = 0, list = s; i < list.length; i += 1) {
                  var c2 = list[i];
                  var p = peek();
                  if (p !== c2) {
                    throw invalidChar(read());
                  }
                  read();
                }
              }
              function escape() {
                var c2 = peek();
                switch (c2) {
                  case "b":
                    read();
                    return "\b";
                  case "f":
                    read();
                    return "\f";
                  case "n":
                    read();
                    return "\n";
                  case "r":
                    read();
                    return "\r";
                  case "t":
                    read();
                    return "	";
                  case "v":
                    read();
                    return "\v";
                  case "0":
                    read();
                    if (util.isDigit(peek())) {
                      throw invalidChar(read());
                    }
                    return "\0";
                  case "x":
                    read();
                    return hexEscape();
                  case "u":
                    read();
                    return unicodeEscape();
                  case "\n":
                  case "\u2028":
                  case "\u2029":
                    read();
                    return "";
                  case "\r":
                    read();
                    if (peek() === "\n") {
                      read();
                    }
                    return "";
                  case "1":
                  case "2":
                  case "3":
                  case "4":
                  case "5":
                  case "6":
                  case "7":
                  case "8":
                  case "9":
                    throw invalidChar(read());
                  case void 0:
                    throw invalidChar(read());
                }
                return read();
              }
              function hexEscape() {
                var buffer2 = "";
                var c2 = peek();
                if (!util.isHexDigit(c2)) {
                  throw invalidChar(read());
                }
                buffer2 += read();
                c2 = peek();
                if (!util.isHexDigit(c2)) {
                  throw invalidChar(read());
                }
                buffer2 += read();
                return String.fromCodePoint(parseInt(buffer2, 16));
              }
              function unicodeEscape() {
                var buffer2 = "";
                var count = 4;
                while (count-- > 0) {
                  var c2 = peek();
                  if (!util.isHexDigit(c2)) {
                    throw invalidChar(read());
                  }
                  buffer2 += read();
                }
                return String.fromCodePoint(parseInt(buffer2, 16));
              }
              var parseStates = {
                start: function start() {
                  if (token.type === "eof") {
                    throw invalidEOF();
                  }
                  push();
                },
                beforePropertyName: function beforePropertyName() {
                  switch (token.type) {
                    case "identifier":
                    case "string":
                      key = token.value;
                      parseState = "afterPropertyName";
                      return;
                    case "punctuator":
                      pop();
                      return;
                    case "eof":
                      throw invalidEOF();
                  }
                },
                afterPropertyName: function afterPropertyName() {
                  if (token.type === "eof") {
                    throw invalidEOF();
                  }
                  parseState = "beforePropertyValue";
                },
                beforePropertyValue: function beforePropertyValue() {
                  if (token.type === "eof") {
                    throw invalidEOF();
                  }
                  push();
                },
                beforeArrayValue: function beforeArrayValue() {
                  if (token.type === "eof") {
                    throw invalidEOF();
                  }
                  if (token.type === "punctuator" && token.value === "]") {
                    pop();
                    return;
                  }
                  push();
                },
                afterPropertyValue: function afterPropertyValue() {
                  if (token.type === "eof") {
                    throw invalidEOF();
                  }
                  switch (token.value) {
                    case ",":
                      parseState = "beforePropertyName";
                      return;
                    case "}":
                      pop();
                  }
                },
                afterArrayValue: function afterArrayValue() {
                  if (token.type === "eof") {
                    throw invalidEOF();
                  }
                  switch (token.value) {
                    case ",":
                      parseState = "beforeArrayValue";
                      return;
                    case "]":
                      pop();
                  }
                },
                end: function end() {
                }
              };
              function push() {
                var value;
                switch (token.type) {
                  case "punctuator":
                    switch (token.value) {
                      case "{":
                        value = {};
                        break;
                      case "[":
                        value = [];
                        break;
                    }
                    break;
                  case "null":
                  case "boolean":
                  case "numeric":
                  case "string":
                    value = token.value;
                    break;
                }
                if (root === void 0) {
                  root = value;
                } else {
                  var parent = stack[stack.length - 1];
                  if (Array.isArray(parent)) {
                    parent.push(value);
                  } else {
                    parent[key] = value;
                  }
                }
                if (value !== null && typeof value === "object") {
                  stack.push(value);
                  if (Array.isArray(value)) {
                    parseState = "beforeArrayValue";
                  } else {
                    parseState = "beforePropertyName";
                  }
                } else {
                  var current = stack[stack.length - 1];
                  if (current == null) {
                    parseState = "end";
                  } else if (Array.isArray(current)) {
                    parseState = "afterArrayValue";
                  } else {
                    parseState = "afterPropertyValue";
                  }
                }
              }
              function pop() {
                stack.pop();
                var current = stack[stack.length - 1];
                if (current == null) {
                  parseState = "end";
                } else if (Array.isArray(current)) {
                  parseState = "afterArrayValue";
                } else {
                  parseState = "afterPropertyValue";
                }
              }
              function invalidChar(c2) {
                if (c2 === void 0) {
                  return syntaxError("JSON5: invalid end of input at " + line + ":" + column);
                }
                return syntaxError("JSON5: invalid character '" + formatChar(c2) + "' at " + line + ":" + column);
              }
              function invalidEOF() {
                return syntaxError("JSON5: invalid end of input at " + line + ":" + column);
              }
              function invalidIdentifier() {
                column -= 5;
                return syntaxError("JSON5: invalid identifier character at " + line + ":" + column);
              }
              function separatorChar(c2) {
                console.warn("JSON5: '" + formatChar(c2) + "' in strings is not valid ECMAScript; consider escaping");
              }
              function formatChar(c2) {
                var replacements = {
                  "'": "\\'",
                  '"': '\\"',
                  "\\": "\\\\",
                  "\b": "\\b",
                  "\f": "\\f",
                  "\n": "\\n",
                  "\r": "\\r",
                  "	": "\\t",
                  "\v": "\\v",
                  "\0": "\\0",
                  "\u2028": "\\u2028",
                  "\u2029": "\\u2029"
                };
                if (replacements[c2]) {
                  return replacements[c2];
                }
                if (c2 < " ") {
                  var hexString = c2.charCodeAt(0).toString(16);
                  return "\\x" + ("00" + hexString).substring(hexString.length);
                }
                return c2;
              }
              function syntaxError(message) {
                var err = new SyntaxError(message);
                err.lineNumber = line;
                err.columnNumber = column;
                return err;
              }
              var stringify = function stringify2(value, replacer, space) {
                var stack2 = [];
                var indent = "";
                var propertyList;
                var replacerFunc;
                var gap = "";
                var quote;
                if (replacer != null && typeof replacer === "object" && !Array.isArray(replacer)) {
                  space = replacer.space;
                  quote = replacer.quote;
                  replacer = replacer.replacer;
                }
                if (typeof replacer === "function") {
                  replacerFunc = replacer;
                } else if (Array.isArray(replacer)) {
                  propertyList = [];
                  for (var i = 0, list = replacer; i < list.length; i += 1) {
                    var v = list[i];
                    var item = void 0;
                    if (typeof v === "string") {
                      item = v;
                    } else if (typeof v === "number" || v instanceof String || v instanceof Number) {
                      item = String(v);
                    }
                    if (item !== void 0 && propertyList.indexOf(item) < 0) {
                      propertyList.push(item);
                    }
                  }
                }
                if (space instanceof Number) {
                  space = Number(space);
                } else if (space instanceof String) {
                  space = String(space);
                }
                if (typeof space === "number") {
                  if (space > 0) {
                    space = Math.min(10, Math.floor(space));
                    gap = "          ".substr(0, space);
                  }
                } else if (typeof space === "string") {
                  gap = space.substr(0, 10);
                }
                return serializeProperty("", {
                  "": value
                });
                function serializeProperty(key2, holder) {
                  var value2 = holder[key2];
                  if (value2 != null) {
                    if (typeof value2.toJSON5 === "function") {
                      value2 = value2.toJSON5(key2);
                    } else if (typeof value2.toJSON === "function") {
                      value2 = value2.toJSON(key2);
                    }
                  }
                  if (replacerFunc) {
                    value2 = replacerFunc.call(holder, key2, value2);
                  }
                  if (value2 instanceof Number) {
                    value2 = Number(value2);
                  } else if (value2 instanceof String) {
                    value2 = String(value2);
                  } else if (value2 instanceof Boolean) {
                    value2 = value2.valueOf();
                  }
                  switch (value2) {
                    case null:
                      return "null";
                    case true:
                      return "true";
                    case false:
                      return "false";
                  }
                  if (typeof value2 === "string") {
                    return quoteString(value2, false);
                  }
                  if (typeof value2 === "number") {
                    return String(value2);
                  }
                  if (typeof value2 === "object") {
                    return Array.isArray(value2) ? serializeArray(value2) : serializeObject(value2);
                  }
                  return void 0;
                }
                function quoteString(value2) {
                  var quotes = {
                    "'": 0.1,
                    '"': 0.2
                  };
                  var replacements = {
                    "'": "\\'",
                    '"': '\\"',
                    "\\": "\\\\",
                    "\b": "\\b",
                    "\f": "\\f",
                    "\n": "\\n",
                    "\r": "\\r",
                    "	": "\\t",
                    "\v": "\\v",
                    "\0": "\\0",
                    "\u2028": "\\u2028",
                    "\u2029": "\\u2029"
                  };
                  var product = "";
                  for (var i2 = 0; i2 < value2.length; i2++) {
                    var c2 = value2[i2];
                    switch (c2) {
                      case "'":
                      case '"':
                        quotes[c2]++;
                        product += c2;
                        continue;
                      case "\0":
                        if (util.isDigit(value2[i2 + 1])) {
                          product += "\\x00";
                          continue;
                        }
                    }
                    if (replacements[c2]) {
                      product += replacements[c2];
                      continue;
                    }
                    if (c2 < " ") {
                      var hexString = c2.charCodeAt(0).toString(16);
                      product += "\\x" + ("00" + hexString).substring(hexString.length);
                      continue;
                    }
                    product += c2;
                  }
                  var quoteChar = quote || Object.keys(quotes).reduce(function(a, b) {
                    return quotes[a] < quotes[b] ? a : b;
                  });
                  product = product.replace(new RegExp(quoteChar, "g"), replacements[quoteChar]);
                  return quoteChar + product + quoteChar;
                }
                function serializeObject(value2) {
                  if (stack2.indexOf(value2) >= 0) {
                    throw TypeError("Converting circular structure to JSON5");
                  }
                  stack2.push(value2);
                  var stepback = indent;
                  indent = indent + gap;
                  var keys = propertyList || Object.keys(value2);
                  var partial = [];
                  for (var i2 = 0, list2 = keys; i2 < list2.length; i2 += 1) {
                    var key2 = list2[i2];
                    var propertyString = serializeProperty(key2, value2);
                    if (propertyString !== void 0) {
                      var member = serializeKey(key2) + ":";
                      if (gap !== "") {
                        member += " ";
                      }
                      member += propertyString;
                      partial.push(member);
                    }
                  }
                  var final;
                  if (partial.length === 0) {
                    final = "{}";
                  } else {
                    var properties;
                    if (gap === "") {
                      properties = partial.join(",");
                      final = "{" + properties + "}";
                    } else {
                      var separator = ",\n" + indent;
                      properties = partial.join(separator);
                      final = "{\n" + indent + properties + ",\n" + stepback + "}";
                    }
                  }
                  stack2.pop();
                  indent = stepback;
                  return final;
                }
                function serializeKey(key2) {
                  if (key2.length === 0) {
                    return quoteString(key2, true);
                  }
                  var firstChar = String.fromCodePoint(key2.codePointAt(0));
                  if (!util.isIdStartChar(firstChar)) {
                    return quoteString(key2, true);
                  }
                  for (var i2 = firstChar.length; i2 < key2.length; i2++) {
                    if (!util.isIdContinueChar(String.fromCodePoint(key2.codePointAt(i2)))) {
                      return quoteString(key2, true);
                    }
                  }
                  return key2;
                }
                function serializeArray(value2) {
                  if (stack2.indexOf(value2) >= 0) {
                    throw TypeError("Converting circular structure to JSON5");
                  }
                  stack2.push(value2);
                  var stepback = indent;
                  indent = indent + gap;
                  var partial = [];
                  for (var i2 = 0; i2 < value2.length; i2++) {
                    var propertyString = serializeProperty(String(i2), value2);
                    partial.push(propertyString !== void 0 ? propertyString : "null");
                  }
                  var final;
                  if (partial.length === 0) {
                    final = "[]";
                  } else {
                    if (gap === "") {
                      var properties = partial.join(",");
                      final = "[" + properties + "]";
                    } else {
                      var separator = ",\n" + indent;
                      var properties$1 = partial.join(separator);
                      final = "[\n" + indent + properties$1 + ",\n" + stepback + "]";
                    }
                  }
                  stack2.pop();
                  indent = stepback;
                  return final;
                }
              };
              var JSON5 = {
                parse,
                stringify
              };
              var lib = JSON5;
              var es5 = lib;
              return es5;
            });
          }
        ),
        /***/
        5677: (
          /***/
          (module2) => {
            var FUNC_ERROR_TEXT = "Expected a function";
            var NAN = 0 / 0;
            var symbolTag = "[object Symbol]";
            var reTrim = /^\s+|\s+$/g;
            var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
            var reIsBinary = /^0b[01]+$/i;
            var reIsOctal = /^0o[0-7]+$/i;
            var freeParseInt = parseInt;
            var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
            var freeSelf = typeof self == "object" && self && self.Object === Object && self;
            var root = freeGlobal || freeSelf || Function("return this")();
            var objectProto = Object.prototype;
            var objectToString = objectProto.toString;
            var nativeMax = Math.max, nativeMin = Math.min;
            var now = function() {
              return root.Date.now();
            };
            function debounce(func, wait, options) {
              var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              wait = toNumber(wait) || 0;
              if (isObject(options)) {
                leading = !!options.leading;
                maxing = "maxWait" in options;
                maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                trailing = "trailing" in options ? !!options.trailing : trailing;
              }
              function invokeFunc(time) {
                var args = lastArgs, thisArg = lastThis;
                lastArgs = lastThis = void 0;
                lastInvokeTime = time;
                result = func.apply(thisArg, args);
                return result;
              }
              function leadingEdge(time) {
                lastInvokeTime = time;
                timerId = setTimeout(timerExpired, wait);
                return leading ? invokeFunc(time) : result;
              }
              function remainingWait(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
                return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
              }
              function shouldInvoke(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
                return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
              }
              function timerExpired() {
                var time = now();
                if (shouldInvoke(time)) {
                  return trailingEdge(time);
                }
                timerId = setTimeout(timerExpired, remainingWait(time));
              }
              function trailingEdge(time) {
                timerId = void 0;
                if (trailing && lastArgs) {
                  return invokeFunc(time);
                }
                lastArgs = lastThis = void 0;
                return result;
              }
              function cancel() {
                if (timerId !== void 0) {
                  clearTimeout(timerId);
                }
                lastInvokeTime = 0;
                lastArgs = lastCallTime = lastThis = timerId = void 0;
              }
              function flush() {
                return timerId === void 0 ? result : trailingEdge(now());
              }
              function debounced() {
                var time = now(), isInvoking = shouldInvoke(time);
                lastArgs = arguments;
                lastThis = this;
                lastCallTime = time;
                if (isInvoking) {
                  if (timerId === void 0) {
                    return leadingEdge(lastCallTime);
                  }
                  if (maxing) {
                    timerId = setTimeout(timerExpired, wait);
                    return invokeFunc(lastCallTime);
                  }
                }
                if (timerId === void 0) {
                  timerId = setTimeout(timerExpired, wait);
                }
                return result;
              }
              debounced.cancel = cancel;
              debounced.flush = flush;
              return debounced;
            }
            function throttle(func, wait, options) {
              var leading = true, trailing = true;
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              if (isObject(options)) {
                leading = "leading" in options ? !!options.leading : leading;
                trailing = "trailing" in options ? !!options.trailing : trailing;
              }
              return debounce(func, wait, {
                "leading": leading,
                "maxWait": wait,
                "trailing": trailing
              });
            }
            function isObject(value) {
              var type = typeof value;
              return !!value && (type == "object" || type == "function");
            }
            function isObjectLike(value) {
              return !!value && typeof value == "object";
            }
            function isSymbol(value) {
              return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
            }
            function toNumber(value) {
              if (typeof value == "number") {
                return value;
              }
              if (isSymbol(value)) {
                return NAN;
              }
              if (isObject(value)) {
                var other = typeof value.valueOf == "function" ? value.valueOf() : value;
                value = isObject(other) ? other + "" : other;
              }
              if (typeof value != "string") {
                return value === 0 ? value : +value;
              }
              value = value.replace(reTrim, "");
              var isBinary = reIsBinary.test(value);
              return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
            }
            module2.exports = throttle;
          }
        ),
        /***/
        3018: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            "use strict";
            var process2 = __webpack_require__2(397);
            module2.exports = LRUCache;
            var Map2 = __webpack_require__2(7745);
            var util = __webpack_require__2(2599);
            var Yallist = __webpack_require__2(5986);
            var hasSymbol = typeof Symbol === "function" && process2.env._nodeLRUCacheForceNoSymbol !== "1";
            var makeSymbol;
            if (hasSymbol) {
              makeSymbol = function(key) {
                return Symbol(key);
              };
            } else {
              makeSymbol = function(key) {
                return "_" + key;
              };
            }
            var MAX = makeSymbol("max");
            var LENGTH = makeSymbol("length");
            var LENGTH_CALCULATOR = makeSymbol("lengthCalculator");
            var ALLOW_STALE = makeSymbol("allowStale");
            var MAX_AGE = makeSymbol("maxAge");
            var DISPOSE = makeSymbol("dispose");
            var NO_DISPOSE_ON_SET = makeSymbol("noDisposeOnSet");
            var LRU_LIST = makeSymbol("lruList");
            var CACHE = makeSymbol("cache");
            function naiveLength() {
              return 1;
            }
            function LRUCache(options) {
              if (!(this instanceof LRUCache)) {
                return new LRUCache(options);
              }
              if (typeof options === "number") {
                options = {
                  max: options
                };
              }
              if (!options) {
                options = {};
              }
              var max = this[MAX] = options.max;
              if (!max || !(typeof max === "number") || max <= 0) {
                this[MAX] = Infinity;
              }
              var lc = options.length || naiveLength;
              if (typeof lc !== "function") {
                lc = naiveLength;
              }
              this[LENGTH_CALCULATOR] = lc;
              this[ALLOW_STALE] = options.stale || false;
              this[MAX_AGE] = options.maxAge || 0;
              this[DISPOSE] = options.dispose;
              this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
              this.reset();
            }
            Object.defineProperty(LRUCache.prototype, "max", {
              set: function(mL) {
                if (!mL || !(typeof mL === "number") || mL <= 0) {
                  mL = Infinity;
                }
                this[MAX] = mL;
                trim(this);
              },
              get: function() {
                return this[MAX];
              },
              enumerable: true
            });
            Object.defineProperty(LRUCache.prototype, "allowStale", {
              set: function(allowStale) {
                this[ALLOW_STALE] = !!allowStale;
              },
              get: function() {
                return this[ALLOW_STALE];
              },
              enumerable: true
            });
            Object.defineProperty(LRUCache.prototype, "maxAge", {
              set: function(mA) {
                if (!mA || !(typeof mA === "number") || mA < 0) {
                  mA = 0;
                }
                this[MAX_AGE] = mA;
                trim(this);
              },
              get: function() {
                return this[MAX_AGE];
              },
              enumerable: true
            });
            Object.defineProperty(LRUCache.prototype, "lengthCalculator", {
              set: function(lC) {
                if (typeof lC !== "function") {
                  lC = naiveLength;
                }
                if (lC !== this[LENGTH_CALCULATOR]) {
                  this[LENGTH_CALCULATOR] = lC;
                  this[LENGTH] = 0;
                  this[LRU_LIST].forEach(function(hit) {
                    hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
                    this[LENGTH] += hit.length;
                  }, this);
                }
                trim(this);
              },
              get: function() {
                return this[LENGTH_CALCULATOR];
              },
              enumerable: true
            });
            Object.defineProperty(LRUCache.prototype, "length", {
              get: function() {
                return this[LENGTH];
              },
              enumerable: true
            });
            Object.defineProperty(LRUCache.prototype, "itemCount", {
              get: function() {
                return this[LRU_LIST].length;
              },
              enumerable: true
            });
            LRUCache.prototype.rforEach = function(fn, thisp) {
              thisp = thisp || this;
              for (var walker = this[LRU_LIST].tail; walker !== null; ) {
                var prev = walker.prev;
                forEachStep(this, fn, walker, thisp);
                walker = prev;
              }
            };
            function forEachStep(self2, fn, node, thisp) {
              var hit = node.value;
              if (isStale(self2, hit)) {
                del(self2, node);
                if (!self2[ALLOW_STALE]) {
                  hit = void 0;
                }
              }
              if (hit) {
                fn.call(thisp, hit.value, hit.key, self2);
              }
            }
            LRUCache.prototype.forEach = function(fn, thisp) {
              thisp = thisp || this;
              for (var walker = this[LRU_LIST].head; walker !== null; ) {
                var next = walker.next;
                forEachStep(this, fn, walker, thisp);
                walker = next;
              }
            };
            LRUCache.prototype.keys = function() {
              return this[LRU_LIST].toArray().map(function(k) {
                return k.key;
              }, this);
            };
            LRUCache.prototype.values = function() {
              return this[LRU_LIST].toArray().map(function(k) {
                return k.value;
              }, this);
            };
            LRUCache.prototype.reset = function() {
              if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
                this[LRU_LIST].forEach(function(hit) {
                  this[DISPOSE](hit.key, hit.value);
                }, this);
              }
              this[CACHE] = new Map2();
              this[LRU_LIST] = new Yallist();
              this[LENGTH] = 0;
            };
            LRUCache.prototype.dump = function() {
              return this[LRU_LIST].map(function(hit) {
                if (!isStale(this, hit)) {
                  return {
                    k: hit.key,
                    v: hit.value,
                    e: hit.now + (hit.maxAge || 0)
                  };
                }
              }, this).toArray().filter(function(h) {
                return h;
              });
            };
            LRUCache.prototype.dumpLru = function() {
              return this[LRU_LIST];
            };
            LRUCache.prototype.inspect = function(n, opts) {
              var str = "LRUCache {";
              var extras = false;
              var as = this[ALLOW_STALE];
              if (as) {
                str += "\n  allowStale: true";
                extras = true;
              }
              var max = this[MAX];
              if (max && max !== Infinity) {
                if (extras) {
                  str += ",";
                }
                str += "\n  max: " + util.inspect(max, opts);
                extras = true;
              }
              var maxAge = this[MAX_AGE];
              if (maxAge) {
                if (extras) {
                  str += ",";
                }
                str += "\n  maxAge: " + util.inspect(maxAge, opts);
                extras = true;
              }
              var lc = this[LENGTH_CALCULATOR];
              if (lc && lc !== naiveLength) {
                if (extras) {
                  str += ",";
                }
                str += "\n  length: " + util.inspect(this[LENGTH], opts);
                extras = true;
              }
              var didFirst = false;
              this[LRU_LIST].forEach(function(item) {
                if (didFirst) {
                  str += ",\n  ";
                } else {
                  if (extras) {
                    str += ",\n";
                  }
                  didFirst = true;
                  str += "\n  ";
                }
                var key = util.inspect(item.key).split("\n").join("\n  ");
                var val = {
                  value: item.value
                };
                if (item.maxAge !== maxAge) {
                  val.maxAge = item.maxAge;
                }
                if (lc !== naiveLength) {
                  val.length = item.length;
                }
                if (isStale(this, item)) {
                  val.stale = true;
                }
                val = util.inspect(val, opts).split("\n").join("\n  ");
                str += key + " => " + val;
              });
              if (didFirst || extras) {
                str += "\n";
              }
              str += "}";
              return str;
            };
            LRUCache.prototype.set = function(key, value, maxAge) {
              maxAge = maxAge || this[MAX_AGE];
              var now = maxAge ? Date.now() : 0;
              var len = this[LENGTH_CALCULATOR](value, key);
              if (this[CACHE].has(key)) {
                if (len > this[MAX]) {
                  del(this, this[CACHE].get(key));
                  return false;
                }
                var node = this[CACHE].get(key);
                var item = node.value;
                if (this[DISPOSE]) {
                  if (!this[NO_DISPOSE_ON_SET]) {
                    this[DISPOSE](key, item.value);
                  }
                }
                item.now = now;
                item.maxAge = maxAge;
                item.value = value;
                this[LENGTH] += len - item.length;
                item.length = len;
                this.get(key);
                trim(this);
                return true;
              }
              var hit = new Entry(key, value, len, now, maxAge);
              if (hit.length > this[MAX]) {
                if (this[DISPOSE]) {
                  this[DISPOSE](key, value);
                }
                return false;
              }
              this[LENGTH] += hit.length;
              this[LRU_LIST].unshift(hit);
              this[CACHE].set(key, this[LRU_LIST].head);
              trim(this);
              return true;
            };
            LRUCache.prototype.has = function(key) {
              if (!this[CACHE].has(key))
                return false;
              var hit = this[CACHE].get(key).value;
              if (isStale(this, hit)) {
                return false;
              }
              return true;
            };
            LRUCache.prototype.get = function(key) {
              return get(this, key, true);
            };
            LRUCache.prototype.peek = function(key) {
              return get(this, key, false);
            };
            LRUCache.prototype.pop = function() {
              var node = this[LRU_LIST].tail;
              if (!node)
                return null;
              del(this, node);
              return node.value;
            };
            LRUCache.prototype.del = function(key) {
              del(this, this[CACHE].get(key));
            };
            LRUCache.prototype.load = function(arr) {
              this.reset();
              var now = Date.now();
              for (var l = arr.length - 1; l >= 0; l--) {
                var hit = arr[l];
                var expiresAt = hit.e || 0;
                if (expiresAt === 0) {
                  this.set(hit.k, hit.v);
                } else {
                  var maxAge = expiresAt - now;
                  if (maxAge > 0) {
                    this.set(hit.k, hit.v, maxAge);
                  }
                }
              }
            };
            LRUCache.prototype.prune = function() {
              var self2 = this;
              this[CACHE].forEach(function(value, key) {
                get(self2, key, false);
              });
            };
            function get(self2, key, doUse) {
              var node = self2[CACHE].get(key);
              if (node) {
                var hit = node.value;
                if (isStale(self2, hit)) {
                  del(self2, node);
                  if (!self2[ALLOW_STALE])
                    hit = void 0;
                } else {
                  if (doUse) {
                    self2[LRU_LIST].unshiftNode(node);
                  }
                }
                if (hit)
                  hit = hit.value;
              }
              return hit;
            }
            function isStale(self2, hit) {
              if (!hit || !hit.maxAge && !self2[MAX_AGE]) {
                return false;
              }
              var stale = false;
              var diff = Date.now() - hit.now;
              if (hit.maxAge) {
                stale = diff > hit.maxAge;
              } else {
                stale = self2[MAX_AGE] && diff > self2[MAX_AGE];
              }
              return stale;
            }
            function trim(self2) {
              if (self2[LENGTH] > self2[MAX]) {
                for (var walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {
                  var prev = walker.prev;
                  del(self2, walker);
                  walker = prev;
                }
              }
            }
            function del(self2, node) {
              if (node) {
                var hit = node.value;
                if (self2[DISPOSE]) {
                  self2[DISPOSE](hit.key, hit.value);
                }
                self2[LENGTH] -= hit.length;
                self2[CACHE].delete(hit.key);
                self2[LRU_LIST].removeNode(node);
              }
            }
            function Entry(key, value, length, now, maxAge) {
              this.key = key;
              this.value = value;
              this.length = length;
              this.now = now;
              this.maxAge = maxAge || 0;
            }
          }
        ),
        /***/
        4069: (
          /***/
          (module2) => {
            "use strict";
            function nullthrows(x, message) {
              if (x != null) {
                return x;
              }
              var error = new Error(message !== void 0 ? message : "Got unexpected " + x);
              error.framesToPop = 1;
              throw error;
            }
            module2.exports = nullthrows;
            module2.exports["default"] = nullthrows;
            Object.defineProperty(module2.exports, "__esModule", {
              value: true
            });
          }
        ),
        /***/
        3014: (
          /***/
          (module2) => {
            "use strict";
            module2.exports = (milliseconds) => {
              if (typeof milliseconds !== "number") {
                throw new TypeError("Expected a number");
              }
              const roundTowardsZero = milliseconds > 0 ? Math.floor : Math.ceil;
              return {
                days: roundTowardsZero(milliseconds / 864e5),
                hours: roundTowardsZero(milliseconds / 36e5) % 24,
                minutes: roundTowardsZero(milliseconds / 6e4) % 60,
                seconds: roundTowardsZero(milliseconds / 1e3) % 60,
                milliseconds: roundTowardsZero(milliseconds) % 1e3,
                microseconds: roundTowardsZero(milliseconds * 1e3) % 1e3,
                nanoseconds: roundTowardsZero(milliseconds * 1e6) % 1e3
              };
            };
          }
        ),
        /***/
        894: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            "use strict";
            const parseMilliseconds = __webpack_require__2(3014);
            const pluralize = (word, count) => count === 1 ? word : `${word}s`;
            const SECOND_ROUNDING_EPSILON = 1e-7;
            module2.exports = (milliseconds, options = {}) => {
              if (!Number.isFinite(milliseconds)) {
                throw new TypeError("Expected a finite number");
              }
              if (options.colonNotation) {
                options.compact = false;
                options.formatSubMilliseconds = false;
                options.separateMilliseconds = false;
                options.verbose = false;
              }
              if (options.compact) {
                options.secondsDecimalDigits = 0;
                options.millisecondsDecimalDigits = 0;
              }
              const result = [];
              const floorDecimals = (value, decimalDigits) => {
                const flooredInterimValue = Math.floor(value * 10 ** decimalDigits + SECOND_ROUNDING_EPSILON);
                const flooredValue = Math.round(flooredInterimValue) / 10 ** decimalDigits;
                return flooredValue.toFixed(decimalDigits);
              };
              const add = (value, long, short, valueString) => {
                if ((result.length === 0 || !options.colonNotation) && value === 0 && !(options.colonNotation && short === "m")) {
                  return;
                }
                valueString = (valueString || value || "0").toString();
                let prefix;
                let suffix;
                if (options.colonNotation) {
                  prefix = result.length > 0 ? ":" : "";
                  suffix = "";
                  const wholeDigits = valueString.includes(".") ? valueString.split(".")[0].length : valueString.length;
                  const minLength = result.length > 0 ? 2 : 1;
                  valueString = "0".repeat(Math.max(0, minLength - wholeDigits)) + valueString;
                } else {
                  prefix = "";
                  suffix = options.verbose ? " " + pluralize(long, value) : short;
                }
                result.push(prefix + valueString + suffix);
              };
              const parsed = parseMilliseconds(milliseconds);
              add(Math.trunc(parsed.days / 365), "year", "y");
              add(parsed.days % 365, "day", "d");
              add(parsed.hours, "hour", "h");
              add(parsed.minutes, "minute", "m");
              if (options.separateMilliseconds || options.formatSubMilliseconds || milliseconds < 1e3) {
                add(parsed.seconds, "second", "s");
                if (options.formatSubMilliseconds) {
                  add(parsed.milliseconds, "millisecond", "ms");
                  add(parsed.microseconds, "microsecond", "\xB5s");
                  add(parsed.nanoseconds, "nanosecond", "ns");
                } else {
                  const millisecondsAndBelow = parsed.milliseconds + parsed.microseconds / 1e3 + parsed.nanoseconds / 1e6;
                  const millisecondsDecimalDigits = typeof options.millisecondsDecimalDigits === "number" ? options.millisecondsDecimalDigits : 0;
                  const roundedMiliseconds = millisecondsAndBelow >= 1 ? Math.round(millisecondsAndBelow) : Math.ceil(millisecondsAndBelow);
                  const millisecondsString = millisecondsDecimalDigits ? millisecondsAndBelow.toFixed(millisecondsDecimalDigits) : roundedMiliseconds;
                  add(Number.parseFloat(millisecondsString, 10), "millisecond", "ms", millisecondsString);
                }
              } else {
                const seconds = milliseconds / 1e3 % 60;
                const secondsDecimalDigits = typeof options.secondsDecimalDigits === "number" ? options.secondsDecimalDigits : 1;
                const secondsFixed = floorDecimals(seconds, secondsDecimalDigits);
                const secondsString = options.keepDecimalsOnWholeSeconds ? secondsFixed : secondsFixed.replace(/\.0+$/, "");
                add(Number.parseFloat(secondsString, 10), "second", "s", secondsString);
              }
              if (result.length === 0) {
                return "0" + (options.verbose ? " milliseconds" : "ms");
              }
              if (options.compact) {
                return result[0];
              }
              if (typeof options.unitCount === "number") {
                const separator = options.colonNotation ? "" : " ";
                return result.slice(0, Math.max(options.unitCount, 1)).join(separator);
              }
              return options.colonNotation ? result.join("") : result.join(" ");
            };
          }
        ),
        /***/
        397: (
          /***/
          (module2) => {
            var process2 = module2.exports = {};
            var cachedSetTimeout;
            var cachedClearTimeout;
            function defaultSetTimout() {
              throw new Error("setTimeout has not been defined");
            }
            function defaultClearTimeout() {
              throw new Error("clearTimeout has not been defined");
            }
            (function() {
              try {
                if (typeof setTimeout === "function") {
                  cachedSetTimeout = setTimeout;
                } else {
                  cachedSetTimeout = defaultSetTimout;
                }
              } catch (e) {
                cachedSetTimeout = defaultSetTimout;
              }
              try {
                if (typeof clearTimeout === "function") {
                  cachedClearTimeout = clearTimeout;
                } else {
                  cachedClearTimeout = defaultClearTimeout;
                }
              } catch (e) {
                cachedClearTimeout = defaultClearTimeout;
              }
            })();
            function runTimeout(fun) {
              if (cachedSetTimeout === setTimeout) {
                return setTimeout(fun, 0);
              }
              if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                cachedSetTimeout = setTimeout;
                return setTimeout(fun, 0);
              }
              try {
                return cachedSetTimeout(fun, 0);
              } catch (e) {
                try {
                  return cachedSetTimeout.call(null, fun, 0);
                } catch (e2) {
                  return cachedSetTimeout.call(this, fun, 0);
                }
              }
            }
            function runClearTimeout(marker) {
              if (cachedClearTimeout === clearTimeout) {
                return clearTimeout(marker);
              }
              if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                cachedClearTimeout = clearTimeout;
                return clearTimeout(marker);
              }
              try {
                return cachedClearTimeout(marker);
              } catch (e) {
                try {
                  return cachedClearTimeout.call(null, marker);
                } catch (e2) {
                  return cachedClearTimeout.call(this, marker);
                }
              }
            }
            var queue = [];
            var draining = false;
            var currentQueue;
            var queueIndex = -1;
            function cleanUpNextTick() {
              if (!draining || !currentQueue) {
                return;
              }
              draining = false;
              if (currentQueue.length) {
                queue = currentQueue.concat(queue);
              } else {
                queueIndex = -1;
              }
              if (queue.length) {
                drainQueue();
              }
            }
            function drainQueue() {
              if (draining) {
                return;
              }
              var timeout = runTimeout(cleanUpNextTick);
              draining = true;
              var len = queue.length;
              while (len) {
                currentQueue = queue;
                queue = [];
                while (++queueIndex < len) {
                  if (currentQueue) {
                    currentQueue[queueIndex].run();
                  }
                }
                queueIndex = -1;
                len = queue.length;
              }
              currentQueue = null;
              draining = false;
              runClearTimeout(timeout);
            }
            process2.nextTick = function(fun) {
              var args = new Array(arguments.length - 1);
              if (arguments.length > 1) {
                for (var i = 1; i < arguments.length; i++) {
                  args[i - 1] = arguments[i];
                }
              }
              queue.push(new Item(fun, args));
              if (queue.length === 1 && !draining) {
                runTimeout(drainQueue);
              }
            };
            function Item(fun, array) {
              this.fun = fun;
              this.array = array;
            }
            Item.prototype.run = function() {
              this.fun.apply(null, this.array);
            };
            process2.title = "browser";
            process2.browser = true;
            process2.env = {};
            process2.argv = [];
            process2.version = "";
            process2.versions = {};
            function noop3() {
            }
            process2.on = noop3;
            process2.addListener = noop3;
            process2.once = noop3;
            process2.off = noop3;
            process2.removeListener = noop3;
            process2.removeAllListeners = noop3;
            process2.emit = noop3;
            process2.prependListener = noop3;
            process2.prependOnceListener = noop3;
            process2.listeners = function(name) {
              return [];
            };
            process2.binding = function(name) {
              throw new Error("process.binding is not supported");
            };
            process2.cwd = function() {
              return "/";
            };
            process2.chdir = function(dir) {
              throw new Error("process.chdir is not supported");
            };
            process2.umask = function() {
              return 0;
            };
          }
        ),
        /***/
        4793: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            "use strict";
            var ReactPropTypesSecret = __webpack_require__2(5327);
            function emptyFunction() {
            }
            function emptyFunctionWithReset() {
            }
            emptyFunctionWithReset.resetWarningCache = emptyFunction;
            module2.exports = function() {
              function shim(props, propName, componentName, location, propFullName, secret) {
                if (secret === ReactPropTypesSecret) {
                  return;
                }
                var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
                err.name = "Invariant Violation";
                throw err;
              }
              ;
              shim.isRequired = shim;
              function getShim() {
                return shim;
              }
              ;
              var ReactPropTypes = {
                array: shim,
                bool: shim,
                func: shim,
                number: shim,
                object: shim,
                string: shim,
                symbol: shim,
                any: shim,
                arrayOf: getShim,
                element: shim,
                elementType: shim,
                instanceOf: getShim,
                node: shim,
                objectOf: getShim,
                oneOf: getShim,
                oneOfType: getShim,
                shape: getShim,
                exact: getShim,
                checkPropTypes: emptyFunctionWithReset,
                resetWarningCache: emptyFunction
              };
              ReactPropTypes.PropTypes = ReactPropTypes;
              return ReactPropTypes;
            };
          }
        ),
        /***/
        3352: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            if (false) {
              var throwOnDirectAccess, ReactIs;
            } else {
              module2.exports = __webpack_require__2(4793)();
            }
          }
        ),
        /***/
        5327: (
          /***/
          (module2) => {
            "use strict";
            var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
            module2.exports = ReactPropTypesSecret;
          }
        ),
        /***/
        7745: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var process2 = __webpack_require__2(397);
            if (process2.env.npm_package_name === "pseudomap" && process2.env.npm_lifecycle_script === "test")
              process2.env.TEST_PSEUDOMAP = "true";
            if (typeof Map === "function" && !process2.env.TEST_PSEUDOMAP) {
              module2.exports = Map;
            } else {
              module2.exports = __webpack_require__2(7503);
            }
          }
        ),
        /***/
        7503: (
          /***/
          (module2) => {
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            module2.exports = PseudoMap;
            function PseudoMap(set2) {
              if (!(this instanceof PseudoMap))
                throw new TypeError("Constructor PseudoMap requires 'new'");
              this.clear();
              if (set2) {
                if (set2 instanceof PseudoMap || typeof Map === "function" && set2 instanceof Map)
                  set2.forEach(function(value, key) {
                    this.set(key, value);
                  }, this);
                else if (Array.isArray(set2))
                  set2.forEach(function(kv) {
                    this.set(kv[0], kv[1]);
                  }, this);
                else
                  throw new TypeError("invalid argument");
              }
            }
            PseudoMap.prototype.forEach = function(fn, thisp) {
              thisp = thisp || this;
              Object.keys(this._data).forEach(function(k) {
                if (k !== "size")
                  fn.call(thisp, this._data[k].value, this._data[k].key);
              }, this);
            };
            PseudoMap.prototype.has = function(k) {
              return !!find(this._data, k);
            };
            PseudoMap.prototype.get = function(k) {
              var res = find(this._data, k);
              return res && res.value;
            };
            PseudoMap.prototype.set = function(k, v) {
              set(this._data, k, v);
            };
            PseudoMap.prototype.delete = function(k) {
              var res = find(this._data, k);
              if (res) {
                delete this._data[res._index];
                this._data.size--;
              }
            };
            PseudoMap.prototype.clear = function() {
              var data = /* @__PURE__ */ Object.create(null);
              data.size = 0;
              Object.defineProperty(this, "_data", {
                value: data,
                enumerable: false,
                configurable: true,
                writable: false
              });
            };
            Object.defineProperty(PseudoMap.prototype, "size", {
              get: function() {
                return this._data.size;
              },
              set: function(n) {
              },
              enumerable: true,
              configurable: true
            });
            PseudoMap.prototype.values = PseudoMap.prototype.keys = PseudoMap.prototype.entries = function() {
              throw new Error("iterators are not implemented in this version");
            };
            function same(a, b) {
              return a === b || a !== a && b !== b;
            }
            function Entry(k, v, i) {
              this.key = k;
              this.value = v;
              this._index = i;
            }
            function find(data, k) {
              for (var i = 0, s = "_" + k, key = s; hasOwnProperty.call(data, key); key = s + i++) {
                if (same(data[key].key, k))
                  return data[key];
              }
            }
            function set(data, k, v) {
              for (var i = 0, s = "_" + k, key = s; hasOwnProperty.call(data, key); key = s + i++) {
                if (same(data[key].key, k)) {
                  data[key].value = v;
                  return;
                }
              }
              data.size++;
              data[key] = new Entry(k, v, key);
            }
          }
        ),
        /***/
        7356: (
          /***/
          function(module2, exports2) {
            var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
            (function(root, factory) {
              "use strict";
              if (true) {
                !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function" ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports2, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== void 0 && (module2.exports = __WEBPACK_AMD_DEFINE_RESULT__));
              } else {
              }
            })(this, function() {
              "use strict";
              function _isNumber(n) {
                return !isNaN(parseFloat(n)) && isFinite(n);
              }
              function _capitalize(str) {
                return str.charAt(0).toUpperCase() + str.substring(1);
              }
              function _getter(p) {
                return function() {
                  return this[p];
                };
              }
              var booleanProps = ["isConstructor", "isEval", "isNative", "isToplevel"];
              var numericProps = ["columnNumber", "lineNumber"];
              var stringProps = ["fileName", "functionName", "source"];
              var arrayProps = ["args"];
              var props = booleanProps.concat(numericProps, stringProps, arrayProps);
              function StackFrame(obj) {
                if (!obj)
                  return;
                for (var i2 = 0; i2 < props.length; i2++) {
                  if (obj[props[i2]] !== void 0) {
                    this["set" + _capitalize(props[i2])](obj[props[i2]]);
                  }
                }
              }
              StackFrame.prototype = {
                getArgs: function() {
                  return this.args;
                },
                setArgs: function(v) {
                  if (Object.prototype.toString.call(v) !== "[object Array]") {
                    throw new TypeError("Args must be an Array");
                  }
                  this.args = v;
                },
                getEvalOrigin: function() {
                  return this.evalOrigin;
                },
                setEvalOrigin: function(v) {
                  if (v instanceof StackFrame) {
                    this.evalOrigin = v;
                  } else if (v instanceof Object) {
                    this.evalOrigin = new StackFrame(v);
                  } else {
                    throw new TypeError("Eval Origin must be an Object or StackFrame");
                  }
                },
                toString: function() {
                  var fileName = this.getFileName() || "";
                  var lineNumber = this.getLineNumber() || "";
                  var columnNumber = this.getColumnNumber() || "";
                  var functionName = this.getFunctionName() || "";
                  if (this.getIsEval()) {
                    if (fileName) {
                      return "[eval] (" + fileName + ":" + lineNumber + ":" + columnNumber + ")";
                    }
                    return "[eval]:" + lineNumber + ":" + columnNumber;
                  }
                  if (functionName) {
                    return functionName + " (" + fileName + ":" + lineNumber + ":" + columnNumber + ")";
                  }
                  return fileName + ":" + lineNumber + ":" + columnNumber;
                }
              };
              StackFrame.fromString = function StackFrame$$fromString(str) {
                var argsStartIndex = str.indexOf("(");
                var argsEndIndex = str.lastIndexOf(")");
                var functionName = str.substring(0, argsStartIndex);
                var args = str.substring(argsStartIndex + 1, argsEndIndex).split(",");
                var locationString = str.substring(argsEndIndex + 1);
                if (locationString.indexOf("@") === 0) {
                  var parts = /@(.+?)(?::(\d+))?(?::(\d+))?$/.exec(locationString, "");
                  var fileName = parts[1];
                  var lineNumber = parts[2];
                  var columnNumber = parts[3];
                }
                return new StackFrame({
                  functionName,
                  args: args || void 0,
                  fileName,
                  lineNumber: lineNumber || void 0,
                  columnNumber: columnNumber || void 0
                });
              };
              for (var i = 0; i < booleanProps.length; i++) {
                StackFrame.prototype["get" + _capitalize(booleanProps[i])] = _getter(booleanProps[i]);
                StackFrame.prototype["set" + _capitalize(booleanProps[i])] = /* @__PURE__ */ function(p) {
                  return function(v) {
                    this[p] = Boolean(v);
                  };
                }(booleanProps[i]);
              }
              for (var j = 0; j < numericProps.length; j++) {
                StackFrame.prototype["get" + _capitalize(numericProps[j])] = _getter(numericProps[j]);
                StackFrame.prototype["set" + _capitalize(numericProps[j])] = /* @__PURE__ */ function(p) {
                  return function(v) {
                    if (!_isNumber(v)) {
                      throw new TypeError(p + " must be a Number");
                    }
                    this[p] = Number(v);
                  };
                }(numericProps[j]);
              }
              for (var k = 0; k < stringProps.length; k++) {
                StackFrame.prototype["get" + _capitalize(stringProps[k])] = _getter(stringProps[k]);
                StackFrame.prototype["set" + _capitalize(stringProps[k])] = /* @__PURE__ */ function(p) {
                  return function(v) {
                    this[p] = String(v);
                  };
                }(stringProps[k]);
              }
              return StackFrame;
            });
          }
        ),
        /***/
        2275: (
          /***/
          (module2) => {
            module2.exports = function(css) {
              var location = typeof window !== "undefined" && window.location;
              if (!location) {
                throw new Error("fixUrls requires window.location");
              }
              if (!css || typeof css !== "string") {
                return css;
              }
              var baseUrl = location.protocol + "//" + location.host;
              var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");
              var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
                var unquotedOrigUrl = origUrl.trim().replace(/^"(.*)"$/, function(o, $1) {
                  return $1;
                }).replace(/^'(.*)'$/, function(o, $1) {
                  return $1;
                });
                if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
                  return fullMatch;
                }
                var newUrl;
                if (unquotedOrigUrl.indexOf("//") === 0) {
                  newUrl = unquotedOrigUrl;
                } else if (unquotedOrigUrl.indexOf("/") === 0) {
                  newUrl = baseUrl + unquotedOrigUrl;
                } else {
                  newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, "");
                }
                return "url(" + JSON.stringify(newUrl) + ")";
              });
              return fixedCss;
            };
          }
        ),
        /***/
        8029: (
          /***/
          (module2) => {
            var candidateSelectors = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'];
            var candidateSelector = candidateSelectors.join(",");
            var matches = typeof Element === "undefined" ? function() {
            } : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
            function tabbable(el, options) {
              options = options || {};
              var regularTabbables = [];
              var orderedTabbables = [];
              var candidates = el.querySelectorAll(candidateSelector);
              if (options.includeContainer) {
                if (matches.call(el, candidateSelector)) {
                  candidates = Array.prototype.slice.apply(candidates);
                  candidates.unshift(el);
                }
              }
              var i, candidate, candidateTabindex;
              for (i = 0; i < candidates.length; i++) {
                candidate = candidates[i];
                if (!isNodeMatchingSelectorTabbable(candidate))
                  continue;
                candidateTabindex = getTabindex(candidate);
                if (candidateTabindex === 0) {
                  regularTabbables.push(candidate);
                } else {
                  orderedTabbables.push({
                    documentOrder: i,
                    tabIndex: candidateTabindex,
                    node: candidate
                  });
                }
              }
              var tabbableNodes = orderedTabbables.sort(sortOrderedTabbables).map(function(a) {
                return a.node;
              }).concat(regularTabbables);
              return tabbableNodes;
            }
            tabbable.isTabbable = isTabbable;
            tabbable.isFocusable = isFocusable;
            function isNodeMatchingSelectorTabbable(node) {
              if (!isNodeMatchingSelectorFocusable(node) || isNonTabbableRadio(node) || getTabindex(node) < 0) {
                return false;
              }
              return true;
            }
            function isTabbable(node) {
              if (!node)
                throw new Error("No node provided");
              if (matches.call(node, candidateSelector) === false)
                return false;
              return isNodeMatchingSelectorTabbable(node);
            }
            function isNodeMatchingSelectorFocusable(node) {
              if (node.disabled || isHiddenInput(node) || isHidden(node)) {
                return false;
              }
              return true;
            }
            var focusableCandidateSelector = candidateSelectors.concat("iframe").join(",");
            function isFocusable(node) {
              if (!node)
                throw new Error("No node provided");
              if (matches.call(node, focusableCandidateSelector) === false)
                return false;
              return isNodeMatchingSelectorFocusable(node);
            }
            function getTabindex(node) {
              var tabindexAttr = parseInt(node.getAttribute("tabindex"), 10);
              if (!isNaN(tabindexAttr))
                return tabindexAttr;
              if (isContentEditable(node))
                return 0;
              return node.tabIndex;
            }
            function sortOrderedTabbables(a, b) {
              return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;
            }
            function isContentEditable(node) {
              return node.contentEditable === "true";
            }
            function isInput(node) {
              return node.tagName === "INPUT";
            }
            function isHiddenInput(node) {
              return isInput(node) && node.type === "hidden";
            }
            function isRadio(node) {
              return isInput(node) && node.type === "radio";
            }
            function isNonTabbableRadio(node) {
              return isRadio(node) && !isTabbableRadio(node);
            }
            function getCheckedRadio(nodes) {
              for (var i = 0; i < nodes.length; i++) {
                if (nodes[i].checked) {
                  return nodes[i];
                }
              }
            }
            function isTabbableRadio(node) {
              if (!node.name)
                return true;
              var radioSet = node.ownerDocument.querySelectorAll('input[type="radio"][name="' + node.name + '"]');
              var checked = getCheckedRadio(radioSet);
              return !checked || checked === node;
            }
            function isHidden(node) {
              return node.offsetParent === null || getComputedStyle(node).visibility === "hidden";
            }
            module2.exports = tabbable;
          }
        ),
        /***/
        7510: (
          /***/
          (module2) => {
            if (typeof Object.create === "function") {
              module2.exports = function inherits(ctor, superCtor) {
                ctor.super_ = superCtor;
                ctor.prototype = Object.create(superCtor.prototype, {
                  constructor: {
                    value: ctor,
                    enumerable: false,
                    writable: true,
                    configurable: true
                  }
                });
              };
            } else {
              module2.exports = function inherits(ctor, superCtor) {
                ctor.super_ = superCtor;
                var TempCtor = function() {
                };
                TempCtor.prototype = superCtor.prototype;
                ctor.prototype = new TempCtor();
                ctor.prototype.constructor = ctor;
              };
            }
          }
        ),
        /***/
        1772: (
          /***/
          (module2) => {
            module2.exports = function isBuffer(arg) {
              return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
            };
          }
        ),
        /***/
        2599: (
          /***/
          (__unused_webpack_module, exports2, __webpack_require__2) => {
            var process2 = __webpack_require__2(397);
            var formatRegExp = /%[sdj%]/g;
            exports2.format = function(f) {
              if (!isString(f)) {
                var objects = [];
                for (var i = 0; i < arguments.length; i++) {
                  objects.push(inspect(arguments[i]));
                }
                return objects.join(" ");
              }
              var i = 1;
              var args = arguments;
              var len = args.length;
              var str = String(f).replace(formatRegExp, function(x2) {
                if (x2 === "%%")
                  return "%";
                if (i >= len)
                  return x2;
                switch (x2) {
                  case "%s":
                    return String(args[i++]);
                  case "%d":
                    return Number(args[i++]);
                  case "%j":
                    try {
                      return JSON.stringify(args[i++]);
                    } catch (_) {
                      return "[Circular]";
                    }
                  default:
                    return x2;
                }
              });
              for (var x = args[i]; i < len; x = args[++i]) {
                if (isNull(x) || !isObject(x)) {
                  str += " " + x;
                } else {
                  str += " " + inspect(x);
                }
              }
              return str;
            };
            exports2.deprecate = function(fn, msg) {
              if (isUndefined(global.process)) {
                return function() {
                  return exports2.deprecate(fn, msg).apply(this, arguments);
                };
              }
              if (process2.noDeprecation === true) {
                return fn;
              }
              var warned = false;
              function deprecated() {
                if (!warned) {
                  if (process2.throwDeprecation) {
                    throw new Error(msg);
                  } else if (process2.traceDeprecation) {
                    console.trace(msg);
                  } else {
                    console.error(msg);
                  }
                  warned = true;
                }
                return fn.apply(this, arguments);
              }
              return deprecated;
            };
            var debugs = {};
            var debugEnviron;
            exports2.debuglog = function(set) {
              if (isUndefined(debugEnviron))
                debugEnviron = process2.env.NODE_DEBUG || "";
              set = set.toUpperCase();
              if (!debugs[set]) {
                if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
                  var pid = process2.pid;
                  debugs[set] = function() {
                    var msg = exports2.format.apply(exports2, arguments);
                    console.error("%s %d: %s", set, pid, msg);
                  };
                } else {
                  debugs[set] = function() {
                  };
                }
              }
              return debugs[set];
            };
            function inspect(obj, opts) {
              var ctx = {
                seen: [],
                stylize: stylizeNoColor
              };
              if (arguments.length >= 3)
                ctx.depth = arguments[2];
              if (arguments.length >= 4)
                ctx.colors = arguments[3];
              if (isBoolean(opts)) {
                ctx.showHidden = opts;
              } else if (opts) {
                exports2._extend(ctx, opts);
              }
              if (isUndefined(ctx.showHidden))
                ctx.showHidden = false;
              if (isUndefined(ctx.depth))
                ctx.depth = 2;
              if (isUndefined(ctx.colors))
                ctx.colors = false;
              if (isUndefined(ctx.customInspect))
                ctx.customInspect = true;
              if (ctx.colors)
                ctx.stylize = stylizeWithColor;
              return formatValue(ctx, obj, ctx.depth);
            }
            exports2.inspect = inspect;
            inspect.colors = {
              "bold": [1, 22],
              "italic": [3, 23],
              "underline": [4, 24],
              "inverse": [7, 27],
              "white": [37, 39],
              "grey": [90, 39],
              "black": [30, 39],
              "blue": [34, 39],
              "cyan": [36, 39],
              "green": [32, 39],
              "magenta": [35, 39],
              "red": [31, 39],
              "yellow": [33, 39]
            };
            inspect.styles = {
              "special": "cyan",
              "number": "yellow",
              "boolean": "yellow",
              "undefined": "grey",
              "null": "bold",
              "string": "green",
              "date": "magenta",
              // "name": intentionally not styling
              "regexp": "red"
            };
            function stylizeWithColor(str, styleType) {
              var style = inspect.styles[styleType];
              if (style) {
                return "\x1B[" + inspect.colors[style][0] + "m" + str + "\x1B[" + inspect.colors[style][1] + "m";
              } else {
                return str;
              }
            }
            function stylizeNoColor(str, styleType) {
              return str;
            }
            function arrayToHash(array) {
              var hash = {};
              array.forEach(function(val, idx) {
                hash[val] = true;
              });
              return hash;
            }
            function formatValue(ctx, value, recurseTimes) {
              if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
              value.inspect !== exports2.inspect && // Also filter out any prototype objects using the circular check.
              !(value.constructor && value.constructor.prototype === value)) {
                var ret = value.inspect(recurseTimes, ctx);
                if (!isString(ret)) {
                  ret = formatValue(ctx, ret, recurseTimes);
                }
                return ret;
              }
              var primitive = formatPrimitive(ctx, value);
              if (primitive) {
                return primitive;
              }
              var keys = Object.keys(value);
              var visibleKeys = arrayToHash(keys);
              if (ctx.showHidden) {
                keys = Object.getOwnPropertyNames(value);
              }
              if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
                return formatError(value);
              }
              if (keys.length === 0) {
                if (isFunction(value)) {
                  var name = value.name ? ": " + value.name : "";
                  return ctx.stylize("[Function" + name + "]", "special");
                }
                if (isRegExp(value)) {
                  return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
                }
                if (isDate(value)) {
                  return ctx.stylize(Date.prototype.toString.call(value), "date");
                }
                if (isError(value)) {
                  return formatError(value);
                }
              }
              var base = "", array = false, braces = ["{", "}"];
              if (isArray2(value)) {
                array = true;
                braces = ["[", "]"];
              }
              if (isFunction(value)) {
                var n = value.name ? ": " + value.name : "";
                base = " [Function" + n + "]";
              }
              if (isRegExp(value)) {
                base = " " + RegExp.prototype.toString.call(value);
              }
              if (isDate(value)) {
                base = " " + Date.prototype.toUTCString.call(value);
              }
              if (isError(value)) {
                base = " " + formatError(value);
              }
              if (keys.length === 0 && (!array || value.length == 0)) {
                return braces[0] + base + braces[1];
              }
              if (recurseTimes < 0) {
                if (isRegExp(value)) {
                  return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
                } else {
                  return ctx.stylize("[Object]", "special");
                }
              }
              ctx.seen.push(value);
              var output;
              if (array) {
                output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
              } else {
                output = keys.map(function(key) {
                  return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                });
              }
              ctx.seen.pop();
              return reduceToSingleString(output, base, braces);
            }
            function formatPrimitive(ctx, value) {
              if (isUndefined(value))
                return ctx.stylize("undefined", "undefined");
              if (isString(value)) {
                var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
                return ctx.stylize(simple, "string");
              }
              if (isNumber(value))
                return ctx.stylize("" + value, "number");
              if (isBoolean(value))
                return ctx.stylize("" + value, "boolean");
              if (isNull(value))
                return ctx.stylize("null", "null");
            }
            function formatError(value) {
              return "[" + Error.prototype.toString.call(value) + "]";
            }
            function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
              var output = [];
              for (var i = 0, l = value.length; i < l; ++i) {
                if (hasOwnProperty(value, String(i))) {
                  output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
                } else {
                  output.push("");
                }
              }
              keys.forEach(function(key) {
                if (!key.match(/^\d+$/)) {
                  output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
                }
              });
              return output;
            }
            function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
              var name, str, desc;
              desc = Object.getOwnPropertyDescriptor(value, key) || {
                value: value[key]
              };
              if (desc.get) {
                if (desc.set) {
                  str = ctx.stylize("[Getter/Setter]", "special");
                } else {
                  str = ctx.stylize("[Getter]", "special");
                }
              } else {
                if (desc.set) {
                  str = ctx.stylize("[Setter]", "special");
                }
              }
              if (!hasOwnProperty(visibleKeys, key)) {
                name = "[" + key + "]";
              }
              if (!str) {
                if (ctx.seen.indexOf(desc.value) < 0) {
                  if (isNull(recurseTimes)) {
                    str = formatValue(ctx, desc.value, null);
                  } else {
                    str = formatValue(ctx, desc.value, recurseTimes - 1);
                  }
                  if (str.indexOf("\n") > -1) {
                    if (array) {
                      str = str.split("\n").map(function(line) {
                        return "  " + line;
                      }).join("\n").substr(2);
                    } else {
                      str = "\n" + str.split("\n").map(function(line) {
                        return "   " + line;
                      }).join("\n");
                    }
                  }
                } else {
                  str = ctx.stylize("[Circular]", "special");
                }
              }
              if (isUndefined(name)) {
                if (array && key.match(/^\d+$/)) {
                  return str;
                }
                name = JSON.stringify("" + key);
                if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                  name = name.substr(1, name.length - 2);
                  name = ctx.stylize(name, "name");
                } else {
                  name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
                  name = ctx.stylize(name, "string");
                }
              }
              return name + ": " + str;
            }
            function reduceToSingleString(output, base, braces) {
              var numLinesEst = 0;
              var length = output.reduce(function(prev, cur) {
                numLinesEst++;
                if (cur.indexOf("\n") >= 0)
                  numLinesEst++;
                return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
              }, 0);
              if (length > 60) {
                return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
              }
              return braces[0] + base + " " + output.join(", ") + " " + braces[1];
            }
            function isArray2(ar) {
              return Array.isArray(ar);
            }
            exports2.isArray = isArray2;
            function isBoolean(arg) {
              return typeof arg === "boolean";
            }
            exports2.isBoolean = isBoolean;
            function isNull(arg) {
              return arg === null;
            }
            exports2.isNull = isNull;
            function isNullOrUndefined(arg) {
              return arg == null;
            }
            exports2.isNullOrUndefined = isNullOrUndefined;
            function isNumber(arg) {
              return typeof arg === "number";
            }
            exports2.isNumber = isNumber;
            function isString(arg) {
              return typeof arg === "string";
            }
            exports2.isString = isString;
            function isSymbol(arg) {
              return typeof arg === "symbol";
            }
            exports2.isSymbol = isSymbol;
            function isUndefined(arg) {
              return arg === void 0;
            }
            exports2.isUndefined = isUndefined;
            function isRegExp(re) {
              return isObject(re) && objectToString(re) === "[object RegExp]";
            }
            exports2.isRegExp = isRegExp;
            function isObject(arg) {
              return typeof arg === "object" && arg !== null;
            }
            exports2.isObject = isObject;
            function isDate(d) {
              return isObject(d) && objectToString(d) === "[object Date]";
            }
            exports2.isDate = isDate;
            function isError(e) {
              return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
            }
            exports2.isError = isError;
            function isFunction(arg) {
              return typeof arg === "function";
            }
            exports2.isFunction = isFunction;
            function isPrimitive(arg) {
              return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
              typeof arg === "undefined";
            }
            exports2.isPrimitive = isPrimitive;
            exports2.isBuffer = __webpack_require__2(1772);
            function objectToString(o) {
              return Object.prototype.toString.call(o);
            }
            function pad(n) {
              return n < 10 ? "0" + n.toString(10) : n.toString(10);
            }
            var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            function timestamp() {
              var d = /* @__PURE__ */ new Date();
              var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(":");
              return [d.getDate(), months[d.getMonth()], time].join(" ");
            }
            exports2.log = function() {
              console.log("%s - %s", timestamp(), exports2.format.apply(exports2, arguments));
            };
            exports2.inherits = __webpack_require__2(7510);
            exports2._extend = function(origin, add) {
              if (!add || !isObject(add))
                return origin;
              var keys = Object.keys(add);
              var i = keys.length;
              while (i--) {
                origin[keys[i]] = add[keys[i]];
              }
              return origin;
            };
            function hasOwnProperty(obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop);
            }
          }
        ),
        /***/
        6803: (
          /***/
          (module2) => {
            function addMethods(worker, methods) {
              var c = 0;
              var callbacks = {};
              worker.addEventListener("message", function(e) {
                var d = e.data;
                if (d.type !== "RPC")
                  return;
                if (d.id) {
                  var f = callbacks[d.id];
                  if (f) {
                    delete callbacks[d.id];
                    if (d.error) {
                      f[1](Object.assign(Error(d.error.message), d.error));
                    } else {
                      f[0](d.result);
                    }
                  }
                } else {
                  var evt = document.createEvent("Event");
                  evt.initEvent(d.method, false, false);
                  evt.data = d.params;
                  worker.dispatchEvent(evt);
                }
              });
              methods.forEach(function(method) {
                worker[method] = function() {
                  var _arguments = arguments;
                  return new Promise(function(a, b) {
                    var id = ++c;
                    callbacks[id] = [a, b];
                    worker.postMessage({
                      type: "RPC",
                      id,
                      method,
                      params: [].slice.call(_arguments)
                    });
                  });
                };
              });
            }
            module2.exports = addMethods;
          }
        ),
        /***/
        5986: (
          /***/
          (module2) => {
            module2.exports = Yallist;
            Yallist.Node = Node2;
            Yallist.create = Yallist;
            function Yallist(list) {
              var self2 = this;
              if (!(self2 instanceof Yallist)) {
                self2 = new Yallist();
              }
              self2.tail = null;
              self2.head = null;
              self2.length = 0;
              if (list && typeof list.forEach === "function") {
                list.forEach(function(item) {
                  self2.push(item);
                });
              } else if (arguments.length > 0) {
                for (var i = 0, l = arguments.length; i < l; i++) {
                  self2.push(arguments[i]);
                }
              }
              return self2;
            }
            Yallist.prototype.removeNode = function(node) {
              if (node.list !== this) {
                throw new Error("removing node which does not belong to this list");
              }
              var next = node.next;
              var prev = node.prev;
              if (next) {
                next.prev = prev;
              }
              if (prev) {
                prev.next = next;
              }
              if (node === this.head) {
                this.head = next;
              }
              if (node === this.tail) {
                this.tail = prev;
              }
              node.list.length--;
              node.next = null;
              node.prev = null;
              node.list = null;
            };
            Yallist.prototype.unshiftNode = function(node) {
              if (node === this.head) {
                return;
              }
              if (node.list) {
                node.list.removeNode(node);
              }
              var head = this.head;
              node.list = this;
              node.next = head;
              if (head) {
                head.prev = node;
              }
              this.head = node;
              if (!this.tail) {
                this.tail = node;
              }
              this.length++;
            };
            Yallist.prototype.pushNode = function(node) {
              if (node === this.tail) {
                return;
              }
              if (node.list) {
                node.list.removeNode(node);
              }
              var tail = this.tail;
              node.list = this;
              node.prev = tail;
              if (tail) {
                tail.next = node;
              }
              this.tail = node;
              if (!this.head) {
                this.head = node;
              }
              this.length++;
            };
            Yallist.prototype.push = function() {
              for (var i = 0, l = arguments.length; i < l; i++) {
                push(this, arguments[i]);
              }
              return this.length;
            };
            Yallist.prototype.unshift = function() {
              for (var i = 0, l = arguments.length; i < l; i++) {
                unshift(this, arguments[i]);
              }
              return this.length;
            };
            Yallist.prototype.pop = function() {
              if (!this.tail) {
                return void 0;
              }
              var res = this.tail.value;
              this.tail = this.tail.prev;
              if (this.tail) {
                this.tail.next = null;
              } else {
                this.head = null;
              }
              this.length--;
              return res;
            };
            Yallist.prototype.shift = function() {
              if (!this.head) {
                return void 0;
              }
              var res = this.head.value;
              this.head = this.head.next;
              if (this.head) {
                this.head.prev = null;
              } else {
                this.tail = null;
              }
              this.length--;
              return res;
            };
            Yallist.prototype.forEach = function(fn, thisp) {
              thisp = thisp || this;
              for (var walker = this.head, i = 0; walker !== null; i++) {
                fn.call(thisp, walker.value, i, this);
                walker = walker.next;
              }
            };
            Yallist.prototype.forEachReverse = function(fn, thisp) {
              thisp = thisp || this;
              for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
                fn.call(thisp, walker.value, i, this);
                walker = walker.prev;
              }
            };
            Yallist.prototype.get = function(n) {
              for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
                walker = walker.next;
              }
              if (i === n && walker !== null) {
                return walker.value;
              }
            };
            Yallist.prototype.getReverse = function(n) {
              for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
                walker = walker.prev;
              }
              if (i === n && walker !== null) {
                return walker.value;
              }
            };
            Yallist.prototype.map = function(fn, thisp) {
              thisp = thisp || this;
              var res = new Yallist();
              for (var walker = this.head; walker !== null; ) {
                res.push(fn.call(thisp, walker.value, this));
                walker = walker.next;
              }
              return res;
            };
            Yallist.prototype.mapReverse = function(fn, thisp) {
              thisp = thisp || this;
              var res = new Yallist();
              for (var walker = this.tail; walker !== null; ) {
                res.push(fn.call(thisp, walker.value, this));
                walker = walker.prev;
              }
              return res;
            };
            Yallist.prototype.reduce = function(fn, initial) {
              var acc;
              var walker = this.head;
              if (arguments.length > 1) {
                acc = initial;
              } else if (this.head) {
                walker = this.head.next;
                acc = this.head.value;
              } else {
                throw new TypeError("Reduce of empty list with no initial value");
              }
              for (var i = 0; walker !== null; i++) {
                acc = fn(acc, walker.value, i);
                walker = walker.next;
              }
              return acc;
            };
            Yallist.prototype.reduceReverse = function(fn, initial) {
              var acc;
              var walker = this.tail;
              if (arguments.length > 1) {
                acc = initial;
              } else if (this.tail) {
                walker = this.tail.prev;
                acc = this.tail.value;
              } else {
                throw new TypeError("Reduce of empty list with no initial value");
              }
              for (var i = this.length - 1; walker !== null; i--) {
                acc = fn(acc, walker.value, i);
                walker = walker.prev;
              }
              return acc;
            };
            Yallist.prototype.toArray = function() {
              var arr = new Array(this.length);
              for (var i = 0, walker = this.head; walker !== null; i++) {
                arr[i] = walker.value;
                walker = walker.next;
              }
              return arr;
            };
            Yallist.prototype.toArrayReverse = function() {
              var arr = new Array(this.length);
              for (var i = 0, walker = this.tail; walker !== null; i++) {
                arr[i] = walker.value;
                walker = walker.prev;
              }
              return arr;
            };
            Yallist.prototype.slice = function(from, to) {
              to = to || this.length;
              if (to < 0) {
                to += this.length;
              }
              from = from || 0;
              if (from < 0) {
                from += this.length;
              }
              var ret = new Yallist();
              if (to < from || to < 0) {
                return ret;
              }
              if (from < 0) {
                from = 0;
              }
              if (to > this.length) {
                to = this.length;
              }
              for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
                walker = walker.next;
              }
              for (; walker !== null && i < to; i++, walker = walker.next) {
                ret.push(walker.value);
              }
              return ret;
            };
            Yallist.prototype.sliceReverse = function(from, to) {
              to = to || this.length;
              if (to < 0) {
                to += this.length;
              }
              from = from || 0;
              if (from < 0) {
                from += this.length;
              }
              var ret = new Yallist();
              if (to < from || to < 0) {
                return ret;
              }
              if (from < 0) {
                from = 0;
              }
              if (to > this.length) {
                to = this.length;
              }
              for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
                walker = walker.prev;
              }
              for (; walker !== null && i > from; i--, walker = walker.prev) {
                ret.push(walker.value);
              }
              return ret;
            };
            Yallist.prototype.reverse = function() {
              var head = this.head;
              var tail = this.tail;
              for (var walker = head; walker !== null; walker = walker.prev) {
                var p = walker.prev;
                walker.prev = walker.next;
                walker.next = p;
              }
              this.head = tail;
              this.tail = head;
              return this;
            };
            function push(self2, item) {
              self2.tail = new Node2(item, self2.tail, null, self2);
              if (!self2.head) {
                self2.head = self2.tail;
              }
              self2.length++;
            }
            function unshift(self2, item) {
              self2.head = new Node2(item, null, self2.head, self2);
              if (!self2.tail) {
                self2.tail = self2.head;
              }
              self2.length++;
            }
            function Node2(value, prev, next, list) {
              if (!(this instanceof Node2)) {
                return new Node2(value, prev, next, list);
              }
              this.list = list;
              this.value = value;
              if (prev) {
                prev.next = this;
                this.prev = prev;
              } else {
                this.prev = null;
              }
              if (next) {
                next.prev = this;
                this.next = next;
              } else {
                this.next = null;
              }
            }
          }
        ),
        /***/
        2853: (
          /***/
          (module2) => {
            var runtime = function(exports2) {
              "use strict";
              var Op = Object.prototype;
              var hasOwn = Op.hasOwnProperty;
              var undefined2;
              var $Symbol = typeof Symbol === "function" ? Symbol : {};
              var iteratorSymbol = $Symbol.iterator || "@@iterator";
              var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
              var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
              function define(obj, key, value) {
                Object.defineProperty(obj, key, {
                  value,
                  enumerable: true,
                  configurable: true,
                  writable: true
                });
                return obj[key];
              }
              try {
                define({}, "");
              } catch (err) {
                define = function(obj, key, value) {
                  return obj[key] = value;
                };
              }
              function wrap(innerFn, outerFn, self2, tryLocsList) {
                var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                var generator = Object.create(protoGenerator.prototype);
                var context = new Context(tryLocsList || []);
                generator._invoke = makeInvokeMethod(innerFn, self2, context);
                return generator;
              }
              exports2.wrap = wrap;
              function tryCatch(fn, obj, arg) {
                try {
                  return {
                    type: "normal",
                    arg: fn.call(obj, arg)
                  };
                } catch (err) {
                  return {
                    type: "throw",
                    arg: err
                  };
                }
              }
              var GenStateSuspendedStart = "suspendedStart";
              var GenStateSuspendedYield = "suspendedYield";
              var GenStateExecuting = "executing";
              var GenStateCompleted = "completed";
              var ContinueSentinel = {};
              function Generator() {
              }
              function GeneratorFunction() {
              }
              function GeneratorFunctionPrototype() {
              }
              var IteratorPrototype = {};
              IteratorPrototype[iteratorSymbol] = function() {
                return this;
              };
              var getProto = Object.getPrototypeOf;
              var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
              if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
                IteratorPrototype = NativeIteratorPrototype;
              }
              var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
              GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
              GeneratorFunctionPrototype.constructor = GeneratorFunction;
              GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");
              function defineIteratorMethods(prototype) {
                ["next", "throw", "return"].forEach(function(method) {
                  define(prototype, method, function(arg) {
                    return this._invoke(method, arg);
                  });
                });
              }
              exports2.isGeneratorFunction = function(genFun) {
                var ctor = typeof genFun === "function" && genFun.constructor;
                return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
                // do is to check its .name property.
                (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
              };
              exports2.mark = function(genFun) {
                if (Object.setPrototypeOf) {
                  Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                } else {
                  genFun.__proto__ = GeneratorFunctionPrototype;
                  define(genFun, toStringTagSymbol, "GeneratorFunction");
                }
                genFun.prototype = Object.create(Gp);
                return genFun;
              };
              exports2.awrap = function(arg) {
                return {
                  __await: arg
                };
              };
              function AsyncIterator(generator, PromiseImpl) {
                function invoke(method, arg, resolve, reject) {
                  var record = tryCatch(generator[method], generator, arg);
                  if (record.type === "throw") {
                    reject(record.arg);
                  } else {
                    var result = record.arg;
                    var value = result.value;
                    if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
                      return PromiseImpl.resolve(value.__await).then(function(value2) {
                        invoke("next", value2, resolve, reject);
                      }, function(err) {
                        invoke("throw", err, resolve, reject);
                      });
                    }
                    return PromiseImpl.resolve(value).then(function(unwrapped) {
                      result.value = unwrapped;
                      resolve(result);
                    }, function(error) {
                      return invoke("throw", error, resolve, reject);
                    });
                  }
                }
                var previousPromise;
                function enqueue(method, arg) {
                  function callInvokeWithMethodAndArg() {
                    return new PromiseImpl(function(resolve, reject) {
                      invoke(method, arg, resolve, reject);
                    });
                  }
                  return previousPromise = // If enqueue has been called before, then we want to wait until
                  // all previous Promises have been resolved before calling invoke,
                  // so that results are always delivered in the correct order. If
                  // enqueue has not been called before, then it is important to
                  // call invoke immediately, without waiting on a callback to fire,
                  // so that the async generator function has the opportunity to do
                  // any necessary setup in a predictable way. This predictability
                  // is why the Promise constructor synchronously invokes its
                  // executor callback, and why async functions synchronously
                  // execute code before the first await. Since we implement simple
                  // async functions in terms of async generators, it is especially
                  // important to get this right, even though it requires care.
                  previousPromise ? previousPromise.then(
                    callInvokeWithMethodAndArg,
                    // Avoid propagating failures to Promises returned by later
                    // invocations of the iterator.
                    callInvokeWithMethodAndArg
                  ) : callInvokeWithMethodAndArg();
                }
                this._invoke = enqueue;
              }
              defineIteratorMethods(AsyncIterator.prototype);
              AsyncIterator.prototype[asyncIteratorSymbol] = function() {
                return this;
              };
              exports2.AsyncIterator = AsyncIterator;
              exports2.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
                if (PromiseImpl === void 0)
                  PromiseImpl = Promise;
                var iter = new AsyncIterator(wrap(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
                return exports2.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
                  return result.done ? result.value : iter.next();
                });
              };
              function makeInvokeMethod(innerFn, self2, context) {
                var state = GenStateSuspendedStart;
                return function invoke(method, arg) {
                  if (state === GenStateExecuting) {
                    throw new Error("Generator is already running");
                  }
                  if (state === GenStateCompleted) {
                    if (method === "throw") {
                      throw arg;
                    }
                    return doneResult();
                  }
                  context.method = method;
                  context.arg = arg;
                  while (true) {
                    var delegate = context.delegate;
                    if (delegate) {
                      var delegateResult = maybeInvokeDelegate(delegate, context);
                      if (delegateResult) {
                        if (delegateResult === ContinueSentinel)
                          continue;
                        return delegateResult;
                      }
                    }
                    if (context.method === "next") {
                      context.sent = context._sent = context.arg;
                    } else if (context.method === "throw") {
                      if (state === GenStateSuspendedStart) {
                        state = GenStateCompleted;
                        throw context.arg;
                      }
                      context.dispatchException(context.arg);
                    } else if (context.method === "return") {
                      context.abrupt("return", context.arg);
                    }
                    state = GenStateExecuting;
                    var record = tryCatch(innerFn, self2, context);
                    if (record.type === "normal") {
                      state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                      if (record.arg === ContinueSentinel) {
                        continue;
                      }
                      return {
                        value: record.arg,
                        done: context.done
                      };
                    } else if (record.type === "throw") {
                      state = GenStateCompleted;
                      context.method = "throw";
                      context.arg = record.arg;
                    }
                  }
                };
              }
              function maybeInvokeDelegate(delegate, context) {
                var method = delegate.iterator[context.method];
                if (method === undefined2) {
                  context.delegate = null;
                  if (context.method === "throw") {
                    if (delegate.iterator["return"]) {
                      context.method = "return";
                      context.arg = undefined2;
                      maybeInvokeDelegate(delegate, context);
                      if (context.method === "throw") {
                        return ContinueSentinel;
                      }
                    }
                    context.method = "throw";
                    context.arg = new TypeError("The iterator does not provide a 'throw' method");
                  }
                  return ContinueSentinel;
                }
                var record = tryCatch(method, delegate.iterator, context.arg);
                if (record.type === "throw") {
                  context.method = "throw";
                  context.arg = record.arg;
                  context.delegate = null;
                  return ContinueSentinel;
                }
                var info = record.arg;
                if (!info) {
                  context.method = "throw";
                  context.arg = new TypeError("iterator result is not an object");
                  context.delegate = null;
                  return ContinueSentinel;
                }
                if (info.done) {
                  context[delegate.resultName] = info.value;
                  context.next = delegate.nextLoc;
                  if (context.method !== "return") {
                    context.method = "next";
                    context.arg = undefined2;
                  }
                } else {
                  return info;
                }
                context.delegate = null;
                return ContinueSentinel;
              }
              defineIteratorMethods(Gp);
              define(Gp, toStringTagSymbol, "Generator");
              Gp[iteratorSymbol] = function() {
                return this;
              };
              Gp.toString = function() {
                return "[object Generator]";
              };
              function pushTryEntry(locs) {
                var entry = {
                  tryLoc: locs[0]
                };
                if (1 in locs) {
                  entry.catchLoc = locs[1];
                }
                if (2 in locs) {
                  entry.finallyLoc = locs[2];
                  entry.afterLoc = locs[3];
                }
                this.tryEntries.push(entry);
              }
              function resetTryEntry(entry) {
                var record = entry.completion || {};
                record.type = "normal";
                delete record.arg;
                entry.completion = record;
              }
              function Context(tryLocsList) {
                this.tryEntries = [{
                  tryLoc: "root"
                }];
                tryLocsList.forEach(pushTryEntry, this);
                this.reset(true);
              }
              exports2.keys = function(object) {
                var keys = [];
                for (var key in object) {
                  keys.push(key);
                }
                keys.reverse();
                return function next() {
                  while (keys.length) {
                    var key2 = keys.pop();
                    if (key2 in object) {
                      next.value = key2;
                      next.done = false;
                      return next;
                    }
                  }
                  next.done = true;
                  return next;
                };
              };
              function values(iterable) {
                if (iterable) {
                  var iteratorMethod = iterable[iteratorSymbol];
                  if (iteratorMethod) {
                    return iteratorMethod.call(iterable);
                  }
                  if (typeof iterable.next === "function") {
                    return iterable;
                  }
                  if (!isNaN(iterable.length)) {
                    var i = -1, next = function next2() {
                      while (++i < iterable.length) {
                        if (hasOwn.call(iterable, i)) {
                          next2.value = iterable[i];
                          next2.done = false;
                          return next2;
                        }
                      }
                      next2.value = undefined2;
                      next2.done = true;
                      return next2;
                    };
                    return next.next = next;
                  }
                }
                return {
                  next: doneResult
                };
              }
              exports2.values = values;
              function doneResult() {
                return {
                  value: undefined2,
                  done: true
                };
              }
              Context.prototype = {
                constructor: Context,
                reset: function(skipTempReset) {
                  this.prev = 0;
                  this.next = 0;
                  this.sent = this._sent = undefined2;
                  this.done = false;
                  this.delegate = null;
                  this.method = "next";
                  this.arg = undefined2;
                  this.tryEntries.forEach(resetTryEntry);
                  if (!skipTempReset) {
                    for (var name in this) {
                      if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                        this[name] = undefined2;
                      }
                    }
                  }
                },
                stop: function() {
                  this.done = true;
                  var rootEntry = this.tryEntries[0];
                  var rootRecord = rootEntry.completion;
                  if (rootRecord.type === "throw") {
                    throw rootRecord.arg;
                  }
                  return this.rval;
                },
                dispatchException: function(exception) {
                  if (this.done) {
                    throw exception;
                  }
                  var context = this;
                  function handle(loc, caught) {
                    record.type = "throw";
                    record.arg = exception;
                    context.next = loc;
                    if (caught) {
                      context.method = "next";
                      context.arg = undefined2;
                    }
                    return !!caught;
                  }
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var entry = this.tryEntries[i];
                    var record = entry.completion;
                    if (entry.tryLoc === "root") {
                      return handle("end");
                    }
                    if (entry.tryLoc <= this.prev) {
                      var hasCatch = hasOwn.call(entry, "catchLoc");
                      var hasFinally = hasOwn.call(entry, "finallyLoc");
                      if (hasCatch && hasFinally) {
                        if (this.prev < entry.catchLoc) {
                          return handle(entry.catchLoc, true);
                        } else if (this.prev < entry.finallyLoc) {
                          return handle(entry.finallyLoc);
                        }
                      } else if (hasCatch) {
                        if (this.prev < entry.catchLoc) {
                          return handle(entry.catchLoc, true);
                        }
                      } else if (hasFinally) {
                        if (this.prev < entry.finallyLoc) {
                          return handle(entry.finallyLoc);
                        }
                      } else {
                        throw new Error("try statement without catch or finally");
                      }
                    }
                  }
                },
                abrupt: function(type, arg) {
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var entry = this.tryEntries[i];
                    if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                      var finallyEntry = entry;
                      break;
                    }
                  }
                  if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
                    finallyEntry = null;
                  }
                  var record = finallyEntry ? finallyEntry.completion : {};
                  record.type = type;
                  record.arg = arg;
                  if (finallyEntry) {
                    this.method = "next";
                    this.next = finallyEntry.finallyLoc;
                    return ContinueSentinel;
                  }
                  return this.complete(record);
                },
                complete: function(record, afterLoc) {
                  if (record.type === "throw") {
                    throw record.arg;
                  }
                  if (record.type === "break" || record.type === "continue") {
                    this.next = record.arg;
                  } else if (record.type === "return") {
                    this.rval = this.arg = record.arg;
                    this.method = "return";
                    this.next = "end";
                  } else if (record.type === "normal" && afterLoc) {
                    this.next = afterLoc;
                  }
                  return ContinueSentinel;
                },
                finish: function(finallyLoc) {
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var entry = this.tryEntries[i];
                    if (entry.finallyLoc === finallyLoc) {
                      this.complete(entry.completion, entry.afterLoc);
                      resetTryEntry(entry);
                      return ContinueSentinel;
                    }
                  }
                },
                "catch": function(tryLoc) {
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var entry = this.tryEntries[i];
                    if (entry.tryLoc === tryLoc) {
                      var record = entry.completion;
                      if (record.type === "throw") {
                        var thrown = record.arg;
                        resetTryEntry(entry);
                      }
                      return thrown;
                    }
                  }
                  throw new Error("illegal catch attempt");
                },
                delegateYield: function(iterable, resultName, nextLoc) {
                  this.delegate = {
                    iterator: values(iterable),
                    resultName,
                    nextLoc
                  };
                  if (this.method === "next") {
                    this.arg = undefined2;
                  }
                  return ContinueSentinel;
                }
              };
              return exports2;
            }(
              // If this script is executing as a CommonJS module, use module.exports
              // as the regeneratorRuntime namespace. Otherwise create a new empty
              // object. Either way, the resulting object will be used to initialize
              // the regeneratorRuntime variable at the top of this file.
              true ? module2.exports : 0
            );
            try {
              regeneratorRuntime = runtime;
            } catch (accidentalStrictMode) {
              Function("r", "regeneratorRuntime = r")(runtime);
            }
          }
        ),
        /***/
        5322: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, "/* Used to detect in JavaScript if apps have loaded styles or not. */\n:root {\n  --reach-menu-button: 1;\n}\n\n[data-reach-menu] {\n  position: relative;\n}\n\n[data-reach-menu-popover] {\n  display: block;\n  position: absolute;\n}\n\n[data-reach-menu-popover][hidden] {\n  display: none;\n}\n\n[data-reach-menu-list],\n[data-reach-menu-items] {\n  display: block;\n  white-space: nowrap;\n  border: solid 1px hsla(0, 0%, 0%, 0.25);\n  background: hsla(0, 100%, 100%, 0.99);\n  outline: none;\n  padding: 1rem 0;\n  font-size: 85%;\n}\n\n[data-reach-menu-item] {\n  display: block;\n  user-select: none;\n}\n\n/*\n The dom structure of a MenuLink is reach-menu-item > a,\n so to target all items we can use `data-reach-menu-item`\n*/\n[data-reach-menu-item] {\n  /*\n    These are styled in one rule instead of something like a[data-reach-menu-item]\n    and li[data-reach-menu-item] so that apps don't have to fight specificity and\n    can style both li and a menu items with one rule,\n    ie: `[data-selected] { background: red; }`.\n    Otherwise they'd have to define two styles, one for a and one for li.\n  */\n\n  /* reach-menu-item */\n  cursor: pointer;\n\n  /* a */\n  display: block;\n  color: inherit;\n  font: inherit;\n  text-decoration: initial;\n\n  /* both */\n  padding: 5px 20px;\n}\n\n/* pseudo pseudo selector */\n[data-reach-menu-item][data-selected] {\n  background: hsl(211, 81%, 36%);\n  color: white;\n  outline: none;\n}\n\n[data-reach-menu-item][aria-disabled] {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n", ""]);
          }
        ),
        /***/
        7366: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ":root {\n  --reach-tooltip: 1;\n}\n\n[data-reach-tooltip] {\n  z-index: 1;\n  pointer-events: none;\n  position: absolute;\n  padding: 0.25em 0.5em;\n  box-shadow: 2px 2px 10px hsla(0, 0%, 0%, 0.1);\n  white-space: nowrap;\n  font-size: 85%;\n  background: #f0f0f0;\n  color: #444;\n  border: solid 1px #ccc;\n}\n", ""]);
          }
        ),
        /***/
        1716: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".ContextMenu___3Zn8W {\n  position: absolute;\n  background-color: var(--color-context-background);\n  box-shadow: 1px 1px 2px var(--color-shadow);\n  border-radius: 0.25rem;\n  overflow: hidden;\n  z-index: 10000002;\n  user-select: none;\n}\n", ""]);
            exports2.locals = {
              "ContextMenu": "ContextMenu___3Zn8W"
            };
          }
        ),
        /***/
        4556: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".ContextMenuItem___21C_r {\n  display: flex;\n  align-items: center;\n  color: var(--color-context-text);\n  padding: 0.5rem 0.75rem;\n  cursor: default;\n  border-top: 1px solid var(--color-context-border);\n  font-family: var(--font-family-sans);\n  font-size: var(--font-size-sans-normal);\n}\n\n.ContextMenuItem___21C_r:first-of-type {\n  border-top: none;\n}\n\n.ContextMenuItem___21C_r:hover,\n.ContextMenuItem___21C_r:focus {\n  outline: 0;\n  background-color: var(--color-context-background-hover);\n}\n\n.ContextMenuItem___21C_r:active {\n  background-color: var(--color-context-background-selected);\n  color: var(--color-context-text-selected);\n}\n", ""]);
            exports2.locals = {
              "ContextMenuItem": "ContextMenuItem___21C_r"
            };
          }
        ),
        /***/
        4262: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Button___1-PiG {\n  border: none;\n  background: var(--color-button-background);\n  color: var(--color-button);\n  padding: 0;\n  border-radius: 0.25rem;\n  flex: 0 0 auto;\n  cursor: pointer;\n}\n.ButtonContent___2mZ9q {\n  display: inline-flex;\n  align-items: center;\n  border-radius: 0.25rem;\n  padding: 0.25rem;\n}\n\n.Button___1-PiG:hover {\n  color: var(--color-button-hover);\n}\n.Button___1-PiG:active {\n  color: var(--color-button-focus);\n  outline: none;\n}\n.Button___1-PiG:focus,\n.ButtonContent___2mZ9q:focus {\n  outline: none;\n}\n\n.Button___1-PiG:focus > .ButtonContent___2mZ9q {\n  background: var(--color-button-background-focus);\n}\n\n.Button___1-PiG:disabled,\n.Button___1-PiG:disabled:active {\n  background: var(--color-button-background);\n  color: var(--color-button-disabled);\n  cursor: default;\n}\n", ""]);
            exports2.locals = {
              "Button": "Button___1-PiG",
              "ButtonContent": "ButtonContent___2mZ9q"
            };
          }
        ),
        /***/
        5945: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".ButtonIcon___1AgYV {\n  width: 1rem;\n  height: 1rem;\n  fill: currentColor;\n}\n", ""]);
            exports2.locals = {
              "ButtonIcon": "ButtonIcon___1AgYV"
            };
          }
        ),
        /***/
        2163: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Badge___1D92d {\n  display: inline-block;\n  background-color: var(--color-component-badge-background);\n  color: var(--color-text);\n  padding: 0.125rem 0.25rem;\n  line-height: normal;\n  border-radius: 0.125rem;\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-small);\n}\n", ""]);
            exports2.locals = {
              "Badge": "Badge___1D92d"
            };
          }
        ),
        /***/
        3516: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Components___MlQHS {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  background-color: var(--color-background);\n  color: var(--color-text);\n  font-family: var(--font-family-sans);\n}\n\n.Components___MlQHS, .Components___MlQHS * {\n  box-sizing: border-box;\n  -webkit-font-smoothing: var(--font-smoothing);\n}\n\n.TreeWrapper___2uPTC {\n  flex: 0 0 var(--horizontal-resize-percentage);\n  overflow: auto;\n}\n\n.InspectedElementWrapper___Ay-WL {\n  flex: 1 1 35%;\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n\n.ResizeBarWrapper___2jVIz {\n  flex: 0 0 0px;\n  position: relative;\n}\n\n.ResizeBar___1o6VK {\n  position: absolute;\n  left: -2px;\n  width: 5px;\n  height: 100%;\n  cursor: ew-resize;\n}\n\n@media screen and (max-width: 600px) {\n  .Components___MlQHS {\n    flex-direction: column;\n  }\n\n  .TreeWrapper___2uPTC {\n    flex: 0 0 var(--vertical-resize-percentage);\n  }\n\n  .InspectedElementWrapper___Ay-WL {\n    flex: 1 1 50%;\n  }\n\n  .ResizeBar___1o6VK {\n    top: -2px;\n    left: 0;\n    width: 100%;\n    height: 5px;\n    cursor: ns-resize;\n  }\n}\n\n.Loading___Slif- {\n  height: 100%;\n  padding-left: 0.5rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: var(--font-size-sans-large);\n  color: var(--color-dim);\n  border-left: 1px solid var(--color-border);\n}\n", ""]);
            exports2.locals = {
              "Components": "Components___MlQHS",
              "TreeWrapper": "TreeWrapper___2uPTC",
              "InspectedElementWrapper": "InspectedElementWrapper___Ay-WL",
              "ResizeBarWrapper": "ResizeBarWrapper___2jVIz",
              "ResizeBar": "ResizeBar___1o6VK",
              "Loading": "Loading___Slif-"
            };
          }
        ),
        /***/
        935: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Input___2v7pX {\n  flex: 0 1 auto;\n  box-shadow: 0px 1px 3px transparent;\n  color: var(--color-text);\n}\n.Input___2v7pX:focus {\n  color: var(--color-text);\n  box-shadow: 0px 1px 3px var(--color-shadow);\n}", ""]);
            exports2.locals = {
              "Input": "Input___2v7pX"
            };
          }
        ),
        /***/
        7379: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Checkbox___S8zDe {\n  flex: 0 0 auto;\n  align-self: center;\n  margin: 0 0.25rem;\n}\n\n.Input___54okB {\n  flex: 1 1;\n  background: none;\n  border: 1px solid transparent;\n  color: var(--color-attribute-editable-value);\n  border-radius: 0.125rem;\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-normal);\n}\n\n.Invalid___AR4Hd {\n  flex: 1 1;\n  background: none;\n  border: 1px solid transparent;\n  color: var(--color-attribute-editable-value);\n  border-radius: 0.125rem;\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-normal);\n  background-color: var(--color-background-invalid);\n  color: var(--color-text-invalid);\n\n  --color-border: var(--color-text-invalid);\n}\n\n.Input___54okB:focus,\n.Invalid___AR4Hd:focus {\n  background-color: var(--color-button-background-focus);\n  outline: none;\n}\n", ""]);
            exports2.locals = {
              "Checkbox": "Checkbox___S8zDe",
              "Input": "Input___54okB",
              "Invalid": "Invalid___AR4Hd"
            };
          }
        ),
        /***/
        4419: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Element___1PGUo,\n.InactiveSelectedElement___3H2V0,\n.SelectedElement___2BZuq,\n.HoveredElement___4tCuC {\n  color: var(--color-component-name);\n}\n.HoveredElement___4tCuC {\n  background-color: var(--color-background-hover);\n}\n.InactiveSelectedElement___3H2V0 {\n  background-color: var(--color-background-inactive);\n}\n\n.Wrapper___1kRcF {\n  padding: 0 0.25rem;\n  white-space: pre;\n  height: var(--line-height-data);\n  line-height: var(--line-height-data);\n  display: inline-flex;\n  align-items: center;\n  cursor: default;\n  user-select: none;\n}\n\n.SelectedElement___2BZuq {\n  background-color: var(--color-background-selected);\n  color: var(--color-text-selected);\n\n  /* Invert colors */\n  --color-component-name: var(--color-component-name-inverted);\n  --color-text: var(--color-text-selected);\n  --color-component-badge-background: var(\n    --color-component-badge-background-inverted\n  );\n  --color-forget-badge-background: var(--color-forget-badge-background-inverted);\n  --color-component-badge-count: var(--color-component-badge-count-inverted);\n  --color-attribute-name: var(--color-attribute-name-inverted);\n  --color-attribute-value: var(--color-attribute-value-inverted);\n  --color-expand-collapse-toggle: var(--color-component-name-inverted);\n}\n\n.KeyName___iOoVX {\n  color: var(--color-attribute-name);\n}\n\n.KeyValue___2hQzO {\n  color: var(--color-attribute-value);\n  user-select: text;\n  max-width: 100px;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n}\n\n.Highlight___OJ7Ox {\n  background-color: var(--color-search-match);\n}\n.CurrentHighlight___3RWa2 {\n  background-color: var(--color-search-match-current);\n}\n\n.ExpandCollapseToggle___3CxPD {\n  display: inline-flex;\n  width: 1rem;\n  height: 1rem;\n  flex: 0 0 1rem;\n  color: var(--color-expand-collapse-toggle);\n}\n\n.BadgesBlock___3slng {\n  margin-left: 0.25rem;\n}\n\n.ErrorIcon___2HE8O,\n.ErrorIconContrast___25w80,\n.StrictMode___3TX6u,\n.StrictModeContrast___f70us,\n.WarningIcon___3s2DR,\n.WarningIconContrast___12tJE {\n  height: 0.75rem !important;\n  width: 0.75rem !important;\n  margin-left: 0.25rem;\n}\n.ErrorIcon___2HE8O {\n  color: var(--color-console-error-icon);\n}\n.StrictMode___3TX6u {\n  color: var(--color-dimmer);\n}\n.WarningIcon___3s2DR {\n  color: var(--color-console-warning-icon);\n}\n.ErrorIconContrast___25w80, .WarningIconContrast___12tJE {\n  color: var(--color-component-name);\n}\n.StrictModeContrast___f70us {\n  color: var(--color-text);\n}\n", ""]);
            exports2.locals = {
              "Element": "Element___1PGUo",
              "InactiveSelectedElement": "InactiveSelectedElement___3H2V0",
              "SelectedElement": "SelectedElement___2BZuq",
              "HoveredElement": "HoveredElement___4tCuC",
              "Wrapper": "Wrapper___1kRcF",
              "KeyName": "KeyName___iOoVX",
              "KeyValue": "KeyValue___2hQzO",
              "Highlight": "Highlight___OJ7Ox",
              "CurrentHighlight": "CurrentHighlight___3RWa2",
              "ExpandCollapseToggle": "ExpandCollapseToggle___3CxPD",
              "BadgesBlock": "BadgesBlock___3slng",
              "ErrorIcon": "ErrorIcon___2HE8O",
              "ErrorIconContrast": "ErrorIconContrast___25w80",
              "StrictMode": "StrictMode___3TX6u",
              "StrictModeContrast": "StrictModeContrast___f70us",
              "WarningIcon": "WarningIcon___3s2DR",
              "WarningIconContrast": "WarningIconContrast___12tJE"
            };
          }
        ),
        /***/
        9670: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Root___1QJSV {\n  display: inline-flex;\n  align-items: center;\n}\n\n.Root___1QJSV *:not(:first-child) {\n  margin-left: 0.25rem;\n}\n\n.ExtraLabel___1iRgy {\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-small);\n  color: var(--color-component-badge-count);\n}\n", ""]);
            exports2.locals = {
              "Root": "Root___1QJSV",
              "ExtraLabel": "ExtraLabel___1iRgy"
            };
          }
        ),
        /***/
        5266: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".ExpandCollapseToggle___1eSq5 {\n  flex: 0 0 1rem;\n  width: 1rem;\n  height: 1rem;\n  padding: 0;\n  color: var(--color-expand-collapse-toggle);\n}\n", ""]);
            exports2.locals = {
              "ExpandCollapseToggle": "ExpandCollapseToggle___1eSq5"
            };
          }
        ),
        /***/
        3839: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Root___1SOz8 {\n  background-color: var(--color-forget-badge-background);\n  color: var(--color-forget-text);\n  padding-right: 1.75em;\n  position: relative;\n}\n\n.Root___1SOz8::after {\n  bottom: 0;\n  content: '\\2728';\n  position: absolute;\n  right: 0.25em;\n}\n\n.ForgetToggle___1uQnC {\n  display: flex;\n}\n\n.ForgetToggle___1uQnC > span { /* targets .ToggleContent */\n  padding: 0;\n}\n", ""]);
            exports2.locals = {
              "Root": "Root___1SOz8",
              "ForgetToggle": "ForgetToggle___1uQnC"
            };
          }
        ),
        /***/
        7577: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Root___3cj5Y {\n  display: inline-flex;\n  align-items: center;\n}\n\n.Root___3cj5Y *:not(:first-child) {\n  margin-left: 0.25rem;\n}\n\n.ExtraLabel___1PNYs {\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-small);\n  color: var(--color-component-badge-count);\n}\n", ""]);
            exports2.locals = {
              "Root": "Root___3cj5Y",
              "ExtraLabel": "ExtraLabel___1PNYs"
            };
          }
        ),
        /***/
        4282: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".InspectedElement___gy6ot {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n  border-left: 1px solid var(--color-border);\n  border-top: 1px solid var(--color-border);\n}\n\n.TitleRow___2UUrj {\n  flex: 0 0 42px;\n  display: flex;\n  align-items: center;\n  font-size: var(--font-size-monospace-large);\n  border-bottom: 1px solid var(--color-border);\n  padding: 0.5rem;\n}\n\n.Key___1eadz {\n  flex: 0 1 auto;\n  padding-left: 0.25rem;\n  padding-right: 0.125rem;\n  line-height: 1rem;\n  border-top-left-radius: 0.125rem;\n  border-bottom-left-radius: 0.125rem;\n  display: inline-block;\n  background-color: var(--color-component-badge-background);\n  color: var(--color-text);\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-small);\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 100%;\n}\n\n.KeyArrow___2TKpc {\n  height: 1rem;\n  width: 1rem;\n  margin-right: -0.25rem;\n  border: 0.5rem solid transparent;\n  border-left: 0.5rem solid var(--color-component-badge-background);\n}\n\n.SelectedComponentName___3ByrZ {\n  flex: 1 1 auto;\n  overflow: hidden;\n  display: flex;\n  padding: 0.25rem 0;\n  height: 100%;\n  align-items: flex-end;\n}\n\n.ComponentName___23q5J {\n  color: var(--color-component-name);\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-normal);\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 100%;\n}\n\n.StrictModeNonCompliantComponentName___2soUc {\n  color: var(--color-console-error-icon);\n}\n\n.Loading___1cYSg {\n  padding: 0.25rem;\n  color: var(--color-dimmer);\n  font-style: italic;\n  border-left: 1px solid var(--color-border);\n}\n\n.StrictModeNonCompliant___2P55H {\n  display: inline-flex;\n  padding: 0.25rem;\n  color: var(--color-console-error-icon);\n}\n", ""]);
            exports2.locals = {
              "InspectedElement": "InspectedElement___gy6ot",
              "TitleRow": "TitleRow___2UUrj",
              "Key": "Key___1eadz",
              "KeyArrow": "KeyArrow___2TKpc",
              "SelectedComponentName": "SelectedComponentName___3ByrZ",
              "ComponentName": "ComponentName___23q5J",
              "StrictModeNonCompliantComponentName": "StrictModeNonCompliantComponentName___2soUc",
              "Loading": "Loading___1cYSg",
              "StrictModeNonCompliant": "StrictModeNonCompliant___2P55H"
            };
          }
        ),
        /***/
        731: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Root___16YHd {\n  user-select: none;\n  display: inline-flex;\n}\n\n.Root___16YHd *:not(:first-child) {\n  margin-left: 0.25rem;\n}\n", ""]);
            exports2.locals = {
              "Root": "Root___16YHd"
            };
          }
        ),
        /***/
        3285: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Wrapper___15kcB {\n  height: 100%;\n}", ""]);
            exports2.locals = {
              "Wrapper": "Wrapper___15kcB"
            };
          }
        ),
        /***/
        434: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".ErrorTree___OauA_, .WarningTree___2O5xr {\n  padding: 0.25rem 0 0 0;\n}\n\n.HeaderRow___2Y3QM {\n  padding: 0 0.25rem;\n}\n\n.HeaderRow___2Y3QM {\n  padding: 0 0.25rem;\n}\n\n.Error___CORL1, .Warning___zqCFY {\n  padding: 0 0.5rem;\n  display: flex;\n  align-items: center;\n}\n\n.Error___CORL1 {\n  border-top: 1px solid var(--color-console-error-border);\n  background-color: var(--color-console-error-background);\n  color: var(--color-error-text);\n  padding: 0 0.5rem;\n}\n\n.Warning___zqCFY {\n  border-top: 1px solid var(--color-console-warning-border);\n  background-color: var(--color-console-warning-background);\n  color: var(--color-warning-text);\n  padding: 0 0.5rem;\n}\n\n.Message___Ky3Dl {\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.ErrorBadge___MKpI8,\n.WarningBadge___22U6H {\n  display: inline-block;\n  width: 0.75rem;\n  height: 0.75rem;\n  flex: 0 0 0.75rem;\n  line-height: 0.75rem;\n  text-align: center;\n  border-radius: 0.25rem;\n  margin-right: 0.25rem;\n  font-size: var(--font-size-monospace-small);\n}\n\n.ErrorBadge___MKpI8 {\n  background-color: var(--color-console-error-icon);\n  color: var(--color-console-error-badge-text);\n}\n\n.WarningBadge___22U6H {\n  background-color: var(--color-console-warning-icon);\n  color: var(--color-console-warning-badge-text);\n}\n", ""]);
            exports2.locals = {
              "ErrorTree": "ErrorTree___OauA_",
              "WarningTree": "WarningTree___2O5xr",
              "HeaderRow": "HeaderRow___2Y3QM",
              "Error": "Error___CORL1",
              "Warning": "Warning___zqCFY",
              "Message": "Message___Ky3Dl",
              "ErrorBadge": "ErrorBadge___MKpI8",
              "WarningBadge": "WarningBadge___22U6H"
            };
          }
        ),
        /***/
        8368: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".HooksTreeView___3YmZw {\n  padding: 0.25rem;\n  border-top: 1px solid var(--color-border);\n}\n\n.Hook___SbvM_ {\n}\n\n.Children___1f8xt {\n  padding-left: 1rem;\n}\n\n.HeaderRow___37mMe {\n  display: flex;\n  align-items: center;\n}\n\n.Header___9n-jL {\n  flex: 1 1;\n  font-family: var(--font-family-sans);\n}\n\n.NameValueRow___1dbuI {\n  display: flex;\n}\n\n.Name___3oYR1,\n.NameAnonymous___W-cy2 {\n  flex: 0 0 auto;\n  cursor: default;\n}\n.Name___3oYR1 {\n  color: var(--color-dim);\n}\n.NameAnonymous___W-cy2 {\n  color: var(--color-dimmer);\n}\n\n.EditableName___1m4Hy {\n  color: var(--color-attribute-name);\n  flex: 0 0 auto;\n  cursor: default;\n}\n.EditableName___1m4Hy:after,\n.Name___3oYR1:after {\n  color: var(--color-text);\n  content: ': ';\n  margin-right: 0.5rem;\n}\n\n.Value___3tDyC {\n  color: var(--color-attribute-value);\n  overflow: hidden;\n  text-overflow: ellipsis;\n  cursor: default;\n  white-space: nowrap;\n}\n\n.None___dHntG {\n  color: var(--color-dimmer);\n  font-style: italic;\n}\n\n.TruncationIndicator___fImBc {\n  color: var(--color-dimmer);\n}\n\n.ExpandCollapseToggleSpacer___2RAvX {\n  flex: 0 0 1rem;\n  width: 1rem;\n}\n\n.PrimitiveHookNumber___1ZHtG {\n  background-color: var(--color-primitive-hook-badge-background);\n  color: var(--color-primitive-hook-badge-text);\n  font-size: var(--font-size-monospace-small);\n  margin-right: 0.25rem;\n  border-radius: 0.125rem;\n  padding: 0.125rem 0.25rem;\n}\n\n.HookName___3Pr8I {\n  color: var(--color-component-name);\n}\n\n.ToggleError___2AMCP {\n  color: var(--color-error-text);\n}", ""]);
            exports2.locals = {
              "HooksTreeView": "HooksTreeView___3YmZw",
              "Hook": "Hook___SbvM_",
              "Children": "Children___1f8xt",
              "HeaderRow": "HeaderRow___37mMe",
              "Header": "Header___9n-jL",
              "NameValueRow": "NameValueRow___1dbuI",
              "Name": "Name___3oYR1",
              "NameAnonymous": "NameAnonymous___W-cy2",
              "EditableName": "EditableName___1m4Hy",
              "Value": "Value___3tDyC",
              "None": "None___dHntG",
              "TruncationIndicator": "TruncationIndicator___fImBc",
              "ExpandCollapseToggleSpacer": "ExpandCollapseToggleSpacer___2RAvX",
              "PrimitiveHookNumber": "PrimitiveHookNumber___1ZHtG",
              "HookName": "HookName___3Pr8I",
              "ToggleError": "ToggleError___2AMCP"
            };
          }
        ),
        /***/
        5855: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".InspectedElementTree___2_4hD {\n  padding: 0.25rem;\n}\n.InspectedElementTree___2_4hD:first-of-type {\n  border-top: none;\n}\n\n.HeaderRow___3I5kU {\n  display: flex;\n  align-items: center;\n}\n\n.Header___2LZLy {\n  display: flex;\n  align-items: center;\n  flex: 1 1;\n  font-family: var(--font-family-sans);\n}\n\n.Item___3t7sh {\n  display: flex;\n}\n\n.Name___6619F {\n  color: var(--color-attribute-name);\n  flex: 0 0 auto;\n}\n.Name___6619F:after {\n  content: ': ';\n  color: var(--color-text);\n  margin-right: 0.5rem;\n}\n\n.Value___na2y1 {\n  color: var(--color-attribute-value);\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.None___1ezJC {\n  color: var(--color-dimmer);\n  font-style: italic;\n}\n\n.Empty___2hAqe {\n  color: var(--color-dimmer);\n  font-style: italic;\n  padding-left: 0.75rem;\n}\n\n.ToggleSuspenseRow___3Abo4 {\n  padding-left: 1rem;\n  white-space: nowrap;\n  display: flex;\n  align-items: center;\n}\n\n.EditableValue___2B5lx {\n  min-width: 1rem;\n}\n", ""]);
            exports2.locals = {
              "InspectedElementTree": "InspectedElementTree___2_4hD",
              "HeaderRow": "HeaderRow___3I5kU",
              "Header": "Header___2LZLy",
              "Item": "Item___3t7sh",
              "Name": "Name___6619F",
              "Value": "Value___na2y1",
              "None": "None___1ezJC",
              "Empty": "Empty___2hAqe",
              "ToggleSuspenseRow": "ToggleSuspenseRow___3Abo4",
              "EditableValue": "EditableValue___2B5lx"
            };
          }
        ),
        /***/
        3375: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Source___J1262 {\n  padding: 0.25rem;\n  border-top: 1px solid var(--color-border);\n}\n\n.SourceHeaderRow___11O5s {\n  display: flex;\n  align-items: center;\n  min-height: 24px;\n}\n\n.SourceHeader___z9MSo {\n  flex: 1 1;\n  font-family: var(--font-family-sans);\n}\n\n.SourceOneLiner____wx6W {\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-normal);\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 100%;\n  margin-left: 1rem;\n}\n", ""]);
            exports2.locals = {
              "Source": "Source___J1262",
              "SourceHeaderRow": "SourceHeaderRow___11O5s",
              "SourceHeader": "SourceHeader___z9MSo",
              "SourceOneLiner": "SourceOneLiner____wx6W"
            };
          }
        ),
        /***/
        7591: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Source___DuiDm {\n  color: var(--color-dim);\n  margin-left: 1rem;\n  overflow: auto;\n  text-overflow: ellipsis;\n}", ""]);
            exports2.locals = {
              "Source": "Source___DuiDm"
            };
          }
        ),
        /***/
        9910: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Owners___13tPI {\n  padding: 0.25rem;\n  border-top: 1px solid var(--color-border);\n}\n\n.OwnersHeader___3Yv3d {\n  font-family: var(--font-family-sans);\n}\n\n.Owner___3pCT- {\n  color: var(--color-component-name);\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-normal);\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 100%;\n}\n\n.InspectedElement___AIaEa {\n  overflow-x: hidden;\n  overflow-y: auto;\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-normal);\n  line-height: var(--line-height-data);\n}\n\n.InspectedElementBadgesContainer___1AZ-2:not(:empty) {\n  padding: 0.25rem;\n  border-bottom: 1px solid var(--color-border);\n}\n\n.Owner___3pCT- {\n  border-radius: 0.25rem;\n  padding: 0.125rem 0.25rem;\n  background: none;\n  border: none;\n  display: block;\n}\n.Owner___3pCT-:focus {\n  outline: none;\n  background-color: var(--color-button-background-focus);\n}\n\n.NotInStore___1AhKj {\n  color: var(--color-dim);\n  cursor: default;\n}\n\n.OwnerButton___1ZvI9 {\n  cursor: pointer;\n  width: 100%;\n  padding: 0;\n}\n\n.OwnerContent___1S1aF {\n  display: flex;\n  align-items: center;\n  padding-left: 1rem;\n  width: 100%;\n  border-radius: 0.25rem;\n}\n\n.OwnerContent___1S1aF:hover {\n  background-color: var(--color-background-hover);\n}\n\n.OwnersMetaField___ot46- {\n  padding-left: 1.25rem;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n", ""]);
            exports2.locals = {
              "Owners": "Owners___13tPI",
              "OwnersHeader": "OwnersHeader___3Yv3d",
              "Owner": "Owner___3pCT-",
              "InspectedElement": "InspectedElement___AIaEa",
              "InspectedElementBadgesContainer": "InspectedElementBadgesContainer___1AZ-2",
              "NotInStore": "NotInStore___1AhKj",
              "OwnerButton": "OwnerButton___1ZvI9",
              "OwnerContent": "OwnerContent___1S1aF",
              "OwnersMetaField": "OwnersMetaField___ot46-"
            };
          }
        ),
        /***/
        8203: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Item___2n2qv:not([hidden]) {\n  display: flex;\n}\n\n.Name___3LSJX {\n  color: var(--color-attribute-name-not-editable);\n  flex: 0 0 auto;\n  cursor: default;\n}\n\n.EditableName___2TyRo {\n  color: var(--color-attribute-name);\n  flex: 0 0 auto;\n  cursor: default;\n}\n\n.AfterName___1HlGw {\n  color: var(--color-text);\n  margin-right: 0.5rem;\n}\n\n.Value___7p123 {\n  color: var(--color-attribute-value);\n  white-space: pre;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  cursor: default;\n  flex: 1;\n}\n\n.Link___35OsV {\n  color: var(--color-link);\n  white-space: pre;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  flex: 1;\n}\n\n.ExpandCollapseToggleSpacer___3KNWO {\n  flex: 0 0 1rem;\n  width: 1rem;\n}\n\n.DeleteArrayItemButton___1R-pd {\n  padding: 0;\n  margin-right: 0.125rem;\n}\n\n.HookName___1ZjVf {\n  color: var(--color-component-name);\n}", ""]);
            exports2.locals = {
              "Item": "Item___2n2qv",
              "Name": "Name___3LSJX",
              "EditableName": "EditableName___2TyRo",
              "AfterName": "AfterName___1HlGw",
              "Value": "Value___7p123",
              "Link": "Link___35OsV",
              "ExpandCollapseToggleSpacer": "ExpandCollapseToggleSpacer___3KNWO",
              "DeleteArrayItemButton": "DeleteArrayItemButton___1R-pd",
              "HookName": "HookName___1ZjVf"
            };
          }
        ),
        /***/
        5145: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".ContextMenuItemContent___2tDzo {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 0.5rem;\n}\n", ""]);
            exports2.locals = {
              "ContextMenuItemContent": "ContextMenuItemContent___2tDzo"
            };
          }
        ),
        /***/
        9436: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Icon___2CecY {\n  width: 1rem;\n  height: 1rem;\n  fill: currentColor;\n}\n", ""]);
            exports2.locals = {
              "Icon": "Icon___2CecY"
            };
          }
        ),
        /***/
        9553: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Input___2Lqoc {\n  min-width: 0.5rem;\n  flex: 1 1 auto;\n  border: none;\n  background: transparent;\n  outline: none;\n  padding: 0;\n  border: none;\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-normal);\n}\n\n.Input___2Lqoc:focus {\n  border-color: var(--color-border);\n}\n", ""]);
            exports2.locals = {
              "Input": "Input___2Lqoc"
            };
          }
        ),
        /***/
        921: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".LayoutViewer___215Ad {\n  padding: 0.25rem;\n  border-top: 1px solid var(--color-border);\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-small);\n}\n\n.Header___YXSRg {\n  font-family: var(--font-family-sans);\n}\n\n.DashedBox___i8dxS,\n.SolidBox___1W-UG {\n  flex: 1 1 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border-width: 1px;\n  border-color: var(--color-dim);\n  padding: 0.25rem;\n  margin: 0.25rem;\n}\n.DashedBox___i8dxS {\n  border-style: dashed;\n}\n.SolidBox___1W-UG {\n  border-style: solid;\n}\n\n.LabelRow___2SQOh {\n  width: 100%;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.Label___IskVY {\n  position: absolute;\n  left: 0.5rem;\n  flex: 1 0 100px;\n  color: var(--color-attribute-name);\n}\n\n.BoxRow___2_1as {\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n", ""]);
            exports2.locals = {
              "LayoutViewer": "LayoutViewer___215Ad",
              "Header": "Header___YXSRg",
              "DashedBox": "DashedBox___i8dxS",
              "SolidBox": "SolidBox___1W-UG",
              "LabelRow": "LabelRow___2SQOh",
              "Label": "Label___IskVY",
              "BoxRow": "BoxRow___2_1as"
            };
          }
        ),
        /***/
        3727: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".StyleEditor___1RvzE {\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-normal);\n  padding: 0.25rem;\n  border-top: 1px solid var(--color-border);\n}\n\n.HeaderRow___xyA6t {\n  display: flex;\n  align-items: center;\n}\n\n.Header___2SGfE {\n  flex: 1 1;\n}\n\n.Brackets___2zA4K {\n  font-family: var(--font-family-sans);\n  font-size: var(--font-size-sans-small);\n}\n\n.Row___3v8mp {\n  white-space: nowrap;\n  padding-left: 1rem;\n  display: flex;\n  align-items: center;\n}\n\n.Invalid___3ogBH {\n  background-color: var(--color-background-invalid);\n  color: var(--color-text-invalid);\n\n  --color-border: var(--color-text-invalid);\n}\n.Attribute___2yC0c {\n  color: var(--color-attribute-name);\n}\n\n.Value___1yJUg {\n  color: var(--color-attribute-value);\n}\n\n.Input___3Zdnf {\n  flex: 0 1 auto;\n  padding: 1px;\n  box-shadow: 0px 1px 3px transparent;\n}\n.Input___3Zdnf:focus {\n  color: var(--color-text);\n  box-shadow: 0px 1px 3px var(--color-shadow);\n}\n\n", ""]);
            exports2.locals = {
              "StyleEditor": "StyleEditor___1RvzE",
              "HeaderRow": "HeaderRow___xyA6t",
              "Header": "Header___2SGfE",
              "Brackets": "Brackets___2zA4K",
              "Row": "Row___3v8mp",
              "Invalid": "Invalid___3ogBH",
              "Attribute": "Attribute___2yC0c",
              "Value": "Value___1yJUg",
              "Input": "Input___3Zdnf"
            };
          }
        ),
        /***/
        6591: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".NewArrayValue___3rHoU {\n  white-space: nowrap;\n  display: flex;\n  align-items: center;\n}\n\n.EditableName___3OJ36 {\n  margin-left: 1rem;\n}\n\n.Invalid___1sVw9 {\n  background-color: var(--color-background-invalid);\n  color: var(--color-text-invalid) !important;\n}\n\n.Invalid___1sVw9:focus {\n  background-color: var(--color-button-background-focus);\n}", ""]);
            exports2.locals = {
              "NewArrayValue": "NewArrayValue___3rHoU",
              "EditableName": "EditableName___3OJ36",
              "Invalid": "Invalid___1sVw9"
            };
          }
        ),
        /***/
        7481: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".NewKeyValue___34r7B {\n  white-space: nowrap;\n  display: flex;\n  align-items: center;\n}\n\n.EditableName___2W--L {\n  margin-left: 1rem;\n}\n\n.EditableValue___16Q0K {\n  min-width: 1rem;\n}\n", ""]);
            exports2.locals = {
              "NewKeyValue": "NewKeyValue___34r7B",
              "EditableName": "EditableName___2W--L",
              "EditableValue": "EditableValue___16Q0K"
            };
          }
        ),
        /***/
        4721: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".OwnerStack___32qwj {\n  max-width: 100%;\n  overflow-x: auto;\n  flex: 1;\n  display: flex;\n  align-items: center;\n  position: relative;\n}\n\n.Component___3e3s7,\n.Component___3e3s7[data-reach-menu-item] {\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-normal);\n  user-select: none;\n  white-space: nowrap;\n  display: flex;\n  align-items: center;\n}\n\n.Component___3e3s7[data-reach-menu-item][data-selected],\n.Component___3e3s7[data-reach-menu-item][data-selected]:hover {\n  color: var(--color-text-selected);\n  background: var(--color-background-selected);\n}\n.Component___3e3s7[data-reach-menu-item][data-selected]:focus {\n  outline: none;\n}\n\n.Bar___3G3dX {\n  display: flex;\n  flex: 1 1 auto;\n  overflow-x: auto;\n}\n\n.VRule___IJYKJ {\n  flex: 0 0 auto;\n  height: 20px;\n  width: 1px;\n  background-color: var(--color-border);\n  margin: 0 0.5rem;\n}\n\n.MenuButton___3te3U {\n  border-radius: 0.25rem;\n  display: inline-flex;\n  align-items: center;\n  padding: 0;\n  flex: 0 0 auto;\n  border: none;\n  background: var(--color-button-background);\n  color: var(--color-button);\n}\n.MenuButtonContent___3VvHH {\n  display: inline-flex;\n  align-items: center;\n  border-radius: 0.25rem;\n  padding: 0.25rem;\n}\n.MenuButton___3te3U:hover {\n  color: var(--color-button-hover);\n}\n.MenuButton___3te3U[aria-expanded='true'],\n.MenuButton___3te3U[aria-expanded='true']:active {\n  color: var(--color-button-active);\n  outline: none;\n}\n\n.MenuButton___3te3U:focus,\n.MenuButtonContent___3VvHH:focus {\n  outline: none;\n}\n.MenuButton___3te3U:focus > .MenuButtonContent___3VvHH {\n  background: var(--color-button-background-focus);\n}\n\n.Modal___8b8bs[data-reach-menu-list] {\n  display: inline-flex;\n  flex-direction: column;\n  background-color: var(--color-background);\n  color: var(--color-button);\n  padding: 0.25rem 0;\n  padding-right: 0;\n  border: 1px solid var(--color-border);\n  border-radius: 0.25rem;\n  max-height: 10rem;\n  overflow: auto;\n\n  /* Make sure this is above the DevTools, which are above the Overlay */\n  z-index: 10000002;\n  position: relative;\n\n  /* Reach UI tries to set its own :( */\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-normal);\n}\n\n.NotInStore___3Y2P2,\n.NotInStore___3Y2P2:hover {\n  color: var(--color-dimmest);\n}\n\n.BadgesBlock___3JijI {\n  margin-left: 0.25rem;\n}\n", ""]);
            exports2.locals = {
              "OwnerStack": "OwnerStack___32qwj",
              "Component": "Component___3e3s7",
              "Bar": "Bar___3G3dX",
              "VRule": "VRule___IJYKJ",
              "MenuButton": "MenuButton___3te3U",
              "MenuButtonContent": "MenuButtonContent___3VvHH",
              "Modal": "Modal___8b8bs",
              "NotInStore": "NotInStore___3Y2P2",
              "BadgesBlock": "BadgesBlock___3JijI"
            };
          }
        ),
        /***/
        8291: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Active___3Y5D2,\n.Inactive___2Ddkx {\n  position: absolute;\n  left: 0;\n  width: 100%;\n  z-index: 0;\n  pointer-events: none;\n}\n\n.Active___3Y5D2 {\n  background-color: var(--color-selected-tree-highlight-active);\n}\n\n.Inactive___2Ddkx {\n  background-color: var(--color-selected-tree-highlight-inactive);\n}\n", ""]);
            exports2.locals = {
              "Active": "Active___3Y5D2",
              "Inactive": "Inactive___2Ddkx"
            };
          }
        ),
        /***/
        6376: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".root___2g2n_ {\n  border-radius: 0.25rem;\n  animation: pulse___20gcg 2s infinite;\n}\n\n@keyframes pulse___20gcg {\n  0%, 100% {\n    background-color: var(--color-dim);\n  }\n  50% {\n    background-color: var(--color-dimmest)\n  }\n}\n", ""]);
            exports2.locals = {
              "root": "root___2g2n_",
              "pulse": "pulse___20gcg"
            };
          }
        ),
        /***/
        1907: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Tree___3Pjje {\n  position: relative;\n  height: 100%;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  border-top: 1px solid var(--color-border);\n\n  /* Default size will be adjusted by Tree after scrolling */\n  --indentation-size: 12px;\n}\n\n.List___qlOJG {\n  overflow-x: hidden !important;\n}\n\n.InnerElementType___1csGF {\n  overflow-x: hidden;\n}\n\n.SearchInput___1Q2I_ {\n  flex: 0 0 42px;\n  display: flex;\n  align-items: center;\n  border-bottom: 1px solid var(--color-border);\n  padding: 0.5rem;\n}\n\n.AutoSizerWrapper___3IcMr {\n  width: 100%;\n  overflow: hidden;\n  flex: 1 0 auto;\n}\n.AutoSizerWrapper___3IcMr:focus {\n  outline: none;\n}\n\n.List___qlOJG {\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-normal);\n  line-height: var(--line-height-data);\n}\n\n.VRule___3yG5q {\n  height: 20px;\n  width: 1px;\n  flex: 0 0 1px;\n  margin: 0 0.5rem;\n  background-color: var(--color-border);\n}\n\n.Loading___TrqnR {\n  height: 100%;\n  padding-left: 0.5rem;\n  display: flex;\n  align-items: center;\n  flex: 1;\n  justify-content: flex-start;\n  font-size: var(--font-size-sans-large);\n  color: var(--color-dim);\n}\n\n.IconAndCount___1CZUm {\n  display: flex;\n  align-items: center;\n  font-size: var(--font-size-sans-normal);\n}\n\n.ErrorIcon___1SNsZ, .WarningIcon___23GHe {\n  width: 0.75rem;\n  height: 0.75rem;\n  margin-left: 0.25rem;\n  margin-right: 0.25rem;\n  flex: 0 0 auto;\n}\n.ErrorIcon___1SNsZ {\n  color: var(--color-console-error-icon);\n}\n.WarningIcon___23GHe {\n  color: var(--color-console-warning-icon);\n}\n\n.ZeroElementsNotice___1e7ln {\n  padding-left: 1em;\n  opacity: 0;\n  animation: fadeIn___3yIM4 0.5s forwards;\n  animation-delay: 2s;\n}\n@keyframes fadeIn___3yIM4 {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n.Link___wwMB5 {\n  color: var(--color-button-active);\n}", ""]);
            exports2.locals = {
              "Tree": "Tree___3Pjje",
              "List": "List___qlOJG",
              "InnerElementType": "InnerElementType___1csGF",
              "SearchInput": "SearchInput___1Q2I_",
              "AutoSizerWrapper": "AutoSizerWrapper___3IcMr",
              "VRule": "VRule___3yG5q",
              "Loading": "Loading___TrqnR",
              "IconAndCount": "IconAndCount___1CZUm",
              "ErrorIcon": "ErrorIcon___1SNsZ",
              "WarningIcon": "WarningIcon___23GHe",
              "ZeroElementsNotice": "ZeroElementsNotice___1e7ln",
              "fadeIn": "fadeIn___3yIM4",
              "Link": "Link___wwMB5"
            };
          }
        ),
        /***/
        7204: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Tooltip___2QcDY {\n  border: none;\n  border-radius: 0.25rem;\n  padding: 0.25rem 0.5rem;\n  font-family: var(--font-family-sans);\n  font-size: 12px;\n  background-color: var(--color-tooltip-background);\n  color: var(--color-tooltip-text);\n  box-shadow: 1px 1px 2px var(--color-shadow);\n\n  /* Make sure this is above the DevTools, which are above the Overlay */\n  z-index: 10000002;\n}\n", ""]);
            exports2.locals = {
              "Tooltip": "Tooltip___2QcDY"
            };
          }
        ),
        /***/
        4843: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".DevTools___NAxvy {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  background-color: var(--color-background);\n  color: var(--color-text);\n}\n\n.TabBar___2aDHU {\n  flex: 0 0 auto;\n  display: flex;\n  align-items: center;\n  padding: 0 0.5rem;\n  background-color: var(--color-background);\n  border-top: 1px solid var(--color-border);\n  font-family: var(--font-family-sans);\n  font-size: var(--font-size-sans-large);\n  user-select: none;\n\n  /* Electron drag area */\n  -webkit-app-region: drag;\n}\n\n.Spacer___1VPRF {\n  flex: 1;\n}\n\n.TabContent___27Qz1 {\n  flex: 1 1 100%;\n  overflow: auto;\n  -webkit-app-region: no-drag;\n}\n\n.DevToolsVersion___3_3UD {\n  font-size: var(--font-size-sans-normal);\n  margin-right: 0.5rem;\n}\n\n.DevToolsVersion___3_3UD:before {\n  font-size: var(--font-size-sans-large);\n  content: 'DevTools ';\n}\n\n@media screen and (max-width: 400px) {\n  .DevToolsVersion___3_3UD:before {\n    content: '';\n  }\n}\n\n@media screen and (max-width: 300px) {\n  .DevToolsVersion___3_3UD {\n    display: none;\n  }\n}\n\n.DevTools___NAxvy, .DevTools___NAxvy * {\n  box-sizing: border-box;\n  -webkit-font-smoothing: var(--font-smoothing);\n}\n", ""]);
            exports2.locals = {
              "DevTools": "DevTools___NAxvy",
              "TabBar": "TabBar___2aDHU",
              "Spacer": "Spacer___1VPRF",
              "TabContent": "TabContent___27Qz1",
              "DevToolsVersion": "DevToolsVersion___3_3UD"
            };
          }
        ),
        /***/
        5850: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".GitHubLinkRow___1Ubg1 {\n  flex: 0 0 auto;\n  display: flex;\n  align-items: center;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: auto;\n  padding: 0.25rem 0.5rem;\n  background: var(--color-console-warning-background);\n  color: var(--color-text);\n  border-bottom: 1px solid var(--color-console-warning-border);\n  border-top: 1px solid var(--color-console-warning-border);\n}\n\n.WorkplaceGroupRow___2bkPD {\n  flex: 0 0 auto;\n  display: flex;\n  align-items: center;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: auto;\n  padding: 0.25rem 0.5rem;\n  background: var(--color-background-hover);\n  border-bottom: 1px solid var(--color-border);\n}\n\n.ErrorBoundary___2iFtc {\n  height: 100%;\n  width: 100%;\n  background-color: var(--color-background);\n  display: flex;\n  flex-direction: column;\n  border: 1px solid var(--color-border);\n}\n\n.ErrorInfo___3rbAr {\n  padding: 0.5rem;\n  overflow: auto;\n}\n\n.HeaderRow___1yCa9 {\n  display: flex;\n  flex-direction: row;\n  font-size: var(--font-size-sans-large);\n  font-weight: bold;\n}\n\n.ErrorHeader___Ck9BV,\n.TimeoutHeader___2_O9L {\n  flex: 1 1 auto;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  min-width: 0;\n}\n\n.ErrorHeader___Ck9BV {\n  color: var(--color-error-text);\n}\n.TimeoutHeader___2_O9L {\n  color: var(--color-text);\n}\n\n.ErrorStack___xWW5M,\n.TimeoutStack___31pZb {\n  margin-top: 0.5rem;\n  white-space: pre-wrap;\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-normal);\n  -webkit-font-smoothing: initial;\n  border-radius: 0.25rem;\n  padding: 0.5rem;\n  overflow: auto;\n}\n\n.ErrorStack___xWW5M {\n  background-color: var(--color-error-background);\n  border: 1px solid var(--color-error-border);\n  color: var(--color-error-text);\n}\n\n.TimeoutStack___31pZb {\n  background-color: var(--color-console-warning-background);\n  color: var(--color-console-warning-text);\n  border: var(--color-console-warning-border)\n}\n\n.LoadingIcon___2Ox_q {\n  margin-right: 0.25rem;\n}\n\n.ReportIcon___163qD {\n  margin-right: 0.25rem;\n}\n\n.ReportLink___1RRG6 {\n  color: var(--color-link);\n}\n\n.FacebookOnly___1Q5yi {\n  margin-left: 0.25rem;\n}\n\n.ReproSteps___21X2x {\n  margin-left: 0.25rem;\n  color: var(--color-console-warning-text);\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  min-width: 0;\n}\n\n.UpdateExistingIssuePrompt___1AP89 {\n  margin-right: 0.25rem;\n  color: var(--color-console-warning-text);\n}\n\n.CloseButton___19JNk {\n  font-weight: bold;\n}\n\n.CloseButtonIcon___Fp6qN {\n  margin-left: 0.25rem;\n}\n\n.InfoBox___9MO75 {\n  margin-top: 0.5rem;\n  background: var(--color-console-warning-background);\n  border: 1px solid var(--color-console-warning-border);\n  padding: 0.25rem 0.5rem;\n  border-radius: 0.5rem;\n  color: var(--color-console-warning-text);\n}", ""]);
            exports2.locals = {
              "GitHubLinkRow": "GitHubLinkRow___1Ubg1",
              "WorkplaceGroupRow": "WorkplaceGroupRow___2bkPD",
              "ErrorBoundary": "ErrorBoundary___2iFtc",
              "ErrorInfo": "ErrorInfo___3rbAr",
              "HeaderRow": "HeaderRow___1yCa9",
              "ErrorHeader": "ErrorHeader___Ck9BV",
              "TimeoutHeader": "TimeoutHeader___2_O9L",
              "ErrorStack": "ErrorStack___xWW5M",
              "TimeoutStack": "TimeoutStack___31pZb",
              "LoadingIcon": "LoadingIcon___2Ox_q",
              "ReportIcon": "ReportIcon___163qD",
              "ReportLink": "ReportLink___1RRG6",
              "FacebookOnly": "FacebookOnly___1Q5yi",
              "ReproSteps": "ReproSteps___21X2x",
              "UpdateExistingIssuePrompt": "UpdateExistingIssuePrompt___1AP89",
              "CloseButton": "CloseButton___19JNk",
              "CloseButtonIcon": "CloseButtonIcon___Fp6qN",
              "InfoBox": "InfoBox___9MO75"
            };
          }
        ),
        /***/
        7649: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Icon___v5HwN {\n  width: 1rem;\n  height: 1rem;\n  fill: currentColor;\n}\n", ""]);
            exports2.locals = {
              "Icon": "Icon___v5HwN"
            };
          }
        ),
        /***/
        3036: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Background___39iOi {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  justify-content: center;\n  padding: 1rem;\n  background-color: var(--color-modal-background);\n  overflow: auto;\n}\n\n.Dialog___2XI77 {\n  position: relative;\n  z-index: 3;\n  margin: 0 0.25rem;\n  width: 25rem;\n  min-width: 20rem;\n  max-width: 100%;\n  display: inline-block;\n  background-color: var(--color-background);\n  box-shadow: 0 2px 4px var(--color-shadow);\n  padding: 0.5rem;\n  border: 1px solid var(--color-border);\n  border-radius: 0.25rem;\n  font-size: var(--font-size-sans-normal);\n}\n\n.Title___1FtK3 {\n  font-size: var(--font-size-sans-large);\n  margin-bottom: 0.5rem;\n}\n\n.Buttons___3N6w8 {\n  text-align: right;\n  margin-top: 0.5rem;\n}\n\n.Button___3JNc2 {\n  font-size: var(--font-size-sans-large);\n}\n", ""]);
            exports2.locals = {
              "Background": "Background___39iOi",
              "Dialog": "Dialog___2XI77",
              "Title": "Title___1FtK3",
              "Buttons": "Buttons___3N6w8",
              "Button": "Button___3JNc2"
            };
          }
        ),
        /***/
        796: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Group___2hArG {\n  transition: all ease-in-out 250ms;\n}\n\n.Rect___fBfs_ {\n  cursor: pointer;\n  stroke: var(--color-background);\n  transition: all ease-in-out 250ms;\n}\n\n.ForeignObject___2EdVc {\n  pointer-events: none;\n  transition: all ease-in-out 250ms;\n}\n\n.Div___1Pgrm {\n  pointer-events: none;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  font-family: var(--font-family-sans);\n  font-size: var(--font-size-sans-normal);\n  margin-left: 0.25rem;\n  margin-right: 0.25rem;\n  line-height: 1.5;\n  padding: 0 0 0;\n  font-weight: 400;\n  color: var(--color-commit-gradient-text);\n  text-align: left;\n  transition: all ease-in-out 250ms;\n}\n", ""]);
            exports2.locals = {
              "Group": "Group___2hArG",
              "Rect": "Rect___fBfs_",
              "ForeignObject": "ForeignObject___2EdVc",
              "Div": "Div___1Pgrm"
            };
          }
        ),
        /***/
        5758: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Container___WYOTp {\n  width: 100%;\n  flex: 1;\n  padding: 0.5rem;\n}\n\n.PatternPath___2kgd1 {\n  stroke: var(--color-commit-did-not-render-pattern);\n  stroke-width: 1;\n}\n", ""]);
            exports2.locals = {
              "Container": "Container___WYOTp",
              "PatternPath": "PatternPath___2kgd1"
            };
          }
        ),
        /***/
        2760: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Container___2D32U {\n  width: 100%;\n  flex: 1;\n  padding: 0.5rem;\n}\n", ""]);
            exports2.locals = {
              "Container": "Container___2D32U"
            };
          }
        ),
        /***/
        9723: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Toolbar___3u3I_ {\n  padding: 0.25rem 0;\n  flex: 0 0 auto;\n  display: flex;\n  flex-direction: column;\n  gap: 0.25rem;\n}\n\n.BadgesContainer___2NGL4 {\n  display: flex;\n  flex-direction: column;\n  gap: 0.25rem;\n}\n\n.BadgesContainer___2NGL4:not(:empty) {\n  padding-bottom: 0.25rem;\n  border-bottom: 1px solid var(--color-border);\n}\n\n.Content___3i3NJ {\n  user-select: none;\n  overflow-y: auto;\n}\n\n.Component___Y5kFG {\n  flex: 1;\n  font-weight: bold;\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-normal);\n  white-space: nowrap;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  padding-bottom: 0.25rem;\n  border-bottom: 1px solid var(--color-border);\n}\n\n.CurrentCommit___21fVV {\n  display: block;\n  width: 100%;\n  text-align: left;\n  background: none;\n  border: none;\n}\n", ""]);
            exports2.locals = {
              "Toolbar": "Toolbar___3u3I_",
              "BadgesContainer": "BadgesContainer___2NGL4",
              "Content": "Content___3i3NJ",
              "Component": "Component___Y5kFG",
              "CurrentCommit": "CurrentCommit___21fVV"
            };
          }
        ),
        /***/
        3206: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".NoCommitData___2oJ_z {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.Header___1oGeD {\n  font-size: var(--font-size-sans-large);\n  margin-bottom: 0.5rem;\n}\n\n.FilterMessage___1Yg5n {\n  display: flex;\n  align-items: center;\n}\n", ""]);
            exports2.locals = {
              "NoCommitData": "NoCommitData___2oJ_z",
              "Header": "Header___1oGeD",
              "FilterMessage": "FilterMessage___1Yg5n"
            };
          }
        ),
        /***/
        5885: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Profiler___20Ry4 {\n  width: 100%;\n  height: 100%;\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  align-items: stretch;\n  font-family: var(--font-family-sans);\n  font-size: var(--font-size-sans-normal);\n  background-color: var(--color-background);\n  color: var(--color-text);\n}\n\n.Profiler___20Ry4, .Profiler___20Ry4 * {\n  box-sizing: border-box;\n  -webkit-font-smoothing: var(--font-smoothing);\n}\n\n.LeftColumn___3I7-I {\n  display: flex;\n  flex-direction: column;\n  flex: 2 1 200px;\n  border-top: 1px solid var(--color-border);\n}\n\n.RightColumn___3smXD {\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 100px;\n  max-width: 300px;\n  overflow-x: hidden;\n  border-left: 1px solid var(--color-border);\n  border-top: 1px solid var(--color-border);\n}\n\n.Content___1LjDy {\n  position: relative;\n  flex: 1 1 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.Column___3WWtw {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 0 1rem;\n}\n\n.Paragraph___1HLty {\n  text-align: center;\n}\n\n.Row___1RpSu {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n}\n\n.LearnMoreRow___3lYIu {\n  margin-top: 1rem;\n  color: var(--color-dim);\n  font-size: var(--font-size-sans-small);\n}\n\n.Header___QyJw2 {\n  font-size: var(--font-size-sans-large);\n  margin-bottom: 0.5rem;\n}\n\n.Toolbar___30kHu {\n  height: 2.25rem;\n  padding: 0 0.25rem;\n  flex: 0 0 auto;\n  display: flex;\n  align-items: center;\n  border-bottom: 1px solid var(--color-border);\n}\n\n.VRule___2y9G3 {\n  height: 20px;\n  width: 1px;\n  border-left: 1px solid var(--color-border);\n  padding-left: 0.25rem;\n  margin-left: 0.25rem;\n}\n\n.Spacer___1sezP {\n  flex: 1;\n}\n\n.StopRecordingButton___1-ElU {\n  font-size: var(--font-size-sans-large);\n  padding: 0.5rem;\n}\n\n.ContentFallback___2Ata2 {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: var(--font-size-sans-large);\n  color: var(--color-dim);\n}\n\n.SnapshotSelectorFallback___3fsFv {\n  height: 100%;\n  padding-left: 0.5rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: var(--font-size-sans-large);\n  color: var(--color-dim);\n}\n\n.Link___mZ2LE {\n  color: var(--color-button);\n}\n\n.TimelineSearchInputContainer___33BJF {\n  flex: 1 1;\n  display: flex;\n  align-items: center;\n}\n\n.LearnMoreLink___7A9ws {\n  color: var(--color-link);\n  margin-left: 0.25rem;\n  margin-right: 0.25rem;\n}", ""]);
            exports2.locals = {
              "Profiler": "Profiler___20Ry4",
              "LeftColumn": "LeftColumn___3I7-I",
              "RightColumn": "RightColumn___3smXD",
              "Content": "Content___1LjDy",
              "Column": "Column___3WWtw",
              "Paragraph": "Paragraph___1HLty",
              "Row": "Row___1RpSu",
              "LearnMoreRow": "LearnMoreRow___3lYIu",
              "Header": "Header___QyJw2",
              "Toolbar": "Toolbar___30kHu",
              "VRule": "VRule___2y9G3",
              "Spacer": "Spacer___1sezP",
              "StopRecordingButton": "StopRecordingButton___1-ElU",
              "ContentFallback": "ContentFallback___2Ata2",
              "SnapshotSelectorFallback": "SnapshotSelectorFallback___3fsFv",
              "Link": "Link___mZ2LE",
              "TimelineSearchInputContainer": "TimelineSearchInputContainer___33BJF",
              "LearnMoreLink": "LearnMoreLink___7A9ws"
            };
          }
        ),
        /***/
        6057: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".VRule___2XiHw {\n  height: 20px;\n  width: 1px;\n  border-left: 1px solid var(--color-border);\n  padding-left: 0.25rem;\n  margin-left: 0.25rem;\n}\n\n/**\n * https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications\n */\n.Input___2GKA7 {\n  position: absolute !important;\n  height: 1px;\n  width: 1px;\n  overflow: hidden;\n  clip: rect(1px, 1px, 1px, 1px);\n}\n\n.ErrorMessage___3yR0b {\n  margin: 0.5rem 0;\n  color: var(--color-dim);\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-normal);\n}\n", ""]);
            exports2.locals = {
              "VRule": "VRule___2XiHw",
              "Input": "Input___2GKA7",
              "ErrorMessage": "ErrorMessage___3yR0b"
            };
          }
        ),
        /***/
        8868: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".ActiveRecordToggle___1Cpcb {\n  color: var(--color-record-active);\n}\n.ActiveRecordToggle___1Cpcb:hover {\n  color: var(--color-record-active);\n}\n.ActiveRecordToggle___1Cpcb:focus {\n  color: var(--color-record-active);\n}\n.ActiveRecordToggle___1Cpcb:active {\n  color: var(--color-record-hover);\n}\n\n.InactiveRecordToggle___2CUtF {\n  color: var(--color-record-inactive);\n}\n.InactiveRecordToggle___2CUtF:hover {\n  color: var(--color-record-hover);\n}\n.InactiveRecordToggle___2CUtF:focus {\n  color: var(--color-record-inactive);\n}\n.InactiveRecordToggle___2CUtF:active {\n  color: var(--color-record-hover);\n}\n\n.DisabledRecordToggle___gcsbF {\n  color: var(--color-button-disabled);\n}\n.DisabledRecordToggle___gcsbF:hover {\n  color: var(--color-button-disabled);\n}\n.DisabledRecordToggle___gcsbF:focus {\n  color: var(--color-button-disabled);\n}\n.DisabledRecordToggle___gcsbF:active {\n  color: var(--color-button-disabled);\n}\n", ""]);
            exports2.locals = {
              "ActiveRecordToggle": "ActiveRecordToggle___1Cpcb",
              "InactiveRecordToggle": "InactiveRecordToggle___2CUtF",
              "DisabledRecordToggle": "DisabledRecordToggle___gcsbF"
            };
          }
        ),
        /***/
        4290: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Spacer___1c3sH {\n  flex: 1;\n}\n", ""]);
            exports2.locals = {
              "Spacer": "Spacer___1c3sH"
            };
          }
        ),
        /***/
        3179: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Toolbar___CuJgF {\n  height: 2.25rem;\n  padding: 0 0.5rem;\n  flex: 0 0 auto;\n  display: flex;\n  align-items: center;\n  border-bottom: 1px solid var(--color-border);\n}\n\n.Content___2tGS0 {\n  padding: 0.5rem;\n  user-select: none;\n  overflow: auto;\n}\n\n.List___2AC9R {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n.ListItem___2wzT0 {\n  margin: 0 0 0.5rem;\n}\n\n.Label___3KINM {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-weight: bold;\n}\n\n.Value___3wrFP {\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-normal);\n}\n\n.NothingSelected___2Sj9L {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  color: var(--color-dim);\n}\n\n.DurationsList___19XUj {\n  list-style: none;\n  margin: 0.25rem 0 0 0;\n  padding: 0;\n  background: var(--color-background-inactive);\n  padding: 0.25rem 0.5rem;\n  border-radius: 0.25rem;\n}\n\n.DurationsListItem___2UKVV {\n  margin: 0.25rem 0 0 0;\n}\n.DurationsListItem___2UKVV:first-of-type {\n  margin: 0;\n}\n", ""]);
            exports2.locals = {
              "Toolbar": "Toolbar___CuJgF",
              "Content": "Content___2tGS0",
              "List": "List___2AC9R",
              "ListItem": "ListItem___2wzT0",
              "Label": "Label___3KINM",
              "Value": "Value___3wrFP",
              "NothingSelected": "NothingSelected___2Sj9L",
              "DurationsList": "DurationsList___19XUj",
              "DurationsListItem": "DurationsListItem___2UKVV"
            };
          }
        ),
        /***/
        2856: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Toolbar___1anMW {\n  height: 2.25rem;\n  padding: 0 0.5rem;\n  flex: 0 0 auto;\n  display: flex;\n  align-items: center;\n  border-bottom: 1px solid var(--color-border);\n}\n\n.Content___3KVRW {\n  padding: 0.5rem;\n  user-select: none;\n  overflow: auto;\n}\n\n.List___DLnbX {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n.ListItem___3Uw7N {\n  flex: 1 1;\n  margin: 0 0 0.5rem;\n}\n\n.Label___9ImgF {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-weight: bold;\n  flex: 1 1;\n}\n\n.Value___1E_uv {\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-normal);\n}\n\n.Row___327lN {  \n  display: flex;  \n  flex-direction: row;  \n  align-items: center;\n  border-top: 1px solid var(--color-border);\n} \n\n.UnclickableSource___3Kp1w,\n.ClickableSource___1ExdQ {\n  width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-family: var(--font-family-sans);\n  font-size: var(--font-size-sans-normal);\n}\n\n.UnclickableSource___3Kp1w {\n  color: var(--color-dim);\n}\n\n.ClickableSource___1ExdQ {\n  color: var(--color-text);\n}\n\n.ClickableSource___1ExdQ:focus,\n.ClickableSource___1ExdQ:hover {\n  background-color: var(--color-background-hover);\n}\n", ""]);
            exports2.locals = {
              "Toolbar": "Toolbar___1anMW",
              "Content": "Content___3KVRW",
              "List": "List___DLnbX",
              "ListItem": "ListItem___3Uw7N",
              "Label": "Label___9ImgF",
              "Value": "Value___1E_uv",
              "Row": "Row___327lN",
              "UnclickableSource": "UnclickableSource___3Kp1w",
              "ClickableSource": "ClickableSource___1ExdQ"
            };
          }
        ),
        /***/
        9074: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Toolbar___2uBS2 {\n  height: 2.25rem;\n  padding: 0 0.5rem;\n  flex: 0 0 auto;\n  display: flex;\n  align-items: center;\n  border-bottom: 1px solid var(--color-border);\n}\n\n.Content___1WAA9 {\n  padding: 0.5rem;\n  user-select: none;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.Component___1oc9o {\n  flex: 1;\n  color: var(--color-component-name);\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-normal);\n  white-space: nowrap;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n}\n\n.Label___buTyu {\n  font-weight: bold;\n  margin-bottom: 0.5rem;\n}\n\n.CurrentCommit___2ZAl5,\n.Commit___2PAr5 {\n  display: block;\n  width: 100%;\n  text-align: left;\n  background: none;\n  border: none;\n  padding: 0.25rem 0.5rem;\n  color: var(--color-text);\n}\n\n.Commit___2PAr5:focus,\n.Commit___2PAr5:hover {\n  outline: none;\n  background-color: var(--color-background-hover);\n}\n\n.CurrentCommit___2ZAl5 {\n  background-color: var(--color-background-selected);\n  color: var(--color-text-selected);\n}\n\n.CurrentCommit___2ZAl5:focus {\n  outline: none;\n}\n", ""]);
            exports2.locals = {
              "Toolbar": "Toolbar___2uBS2",
              "Content": "Content___1WAA9",
              "Component": "Component___1oc9o",
              "Label": "Label___buTyu",
              "CurrentCommit": "CurrentCommit___2ZAl5",
              "Commit": "Commit___2PAr5"
            };
          }
        ),
        /***/
        786: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".List___1_Mwa {\n  /**\n   * The decision to suppress the default (horizontal) scroll bars is intentional.\n   * The snapshot selector is small enough that the scrollbar renders it essentially useless.\n   * There are two alternative navigation mechanisms (arrow keys and arrow buttons).\n   * If necessary, we could also expand the click-and-drag mechanism to scroll.\n   */\n  overflow-x: hidden !important;\n}\n\n.Tooltip___2j_4b {\n  margin-top: 2.5rem;\n}\n\n.TooltipList___26ss7 {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.TooltipListItem___3xWli {\n  display: flex;\n}\n\n.TooltipLabel___2xbrN {\n  font-weight: bold;\n  margin-right: 0.25rem;\n}\n.TooltipLabel___2xbrN:after {\n  content: ':';\n}\n\n.TooltipValue___1nc1C {\n  flex-grow: 1;\n  text-align: end;\n}\n\n.DurationsWrapper___10A0R {\n  flex-grow: 1;\n}\n\n.DurationsList___NtAHH {\n  list-style: none;\n  margin: 0 0 0 1rem;\n  padding: 0;\n}\n\n.DurationsListItem___Q0jav {\n  display: flex;\n}\n\n.DurationsLabel___XxynS {\n  margin-right: 0.25rem;\n}\n.DurationsLabel___XxynS:after {\n  content: ':';\n}\n\n.DurationsValue___1FRM8 {\n  flex-grow: 1;\n  text-align: end;\n}", ""]);
            exports2.locals = {
              "List": "List___1_Mwa",
              "Tooltip": "Tooltip___2j_4b",
              "TooltipList": "TooltipList___26ss7",
              "TooltipListItem": "TooltipListItem___3xWli",
              "TooltipLabel": "TooltipLabel___2xbrN",
              "TooltipValue": "TooltipValue___1nc1C",
              "DurationsWrapper": "DurationsWrapper___10A0R",
              "DurationsList": "DurationsList___NtAHH",
              "DurationsListItem": "DurationsListItem___Q0jav",
              "DurationsLabel": "DurationsLabel___XxynS",
              "DurationsValue": "DurationsValue___1FRM8"
            };
          }
        ),
        /***/
        466: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Outer___2YMUU {\n  user-select: none;\n  cursor: pointer;\n  border-bottom: 3px solid transparent;\n  padding-top: 4px;\n  padding-bottom: 1px;\n  display: flex;\n  align-items: flex-end;\n}\n.Outer___2YMUU:hover {\n  background-color: var(--color-background);\n}\n\n.Inner___TFCLU,\n.InnerSelected___2Qf2T {\n  width: 100%;\n  min-height: 2px;\n  background-color: var(--color-commit-did-not-render-fill);\n  color: var(--color-commit-did-not-render-fill-text);\n}\n\n.InnerSelected___2Qf2T {\n  background-color: var(--color-button-active);\n}", ""]);
            exports2.locals = {
              "Outer": "Outer___2YMUU",
              "Inner": "Inner___TFCLU",
              "InnerSelected": "InnerSelected___2Qf2T"
            };
          }
        ),
        /***/
        3599: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Button___7tgtJ {\n  flex: 0 0 auto;\n  margin-left: 0.25rem;\n}\n\n.Commits___2KF5W {\n  height: 100%;\n  min-width: 30px;\n  margin-left: 0.25rem;\n  overflow: visible;\n}\n.Commits___2KF5W:focus {\n  outline: none;\n  background-color: var(--color-button-background-focus);\n}\n\n.IndexLabel___36CS7 {\n  flex: 0 0 auto;\n  white-space: nowrap;\n  font-family: var(--font-family-monospace);\n  margin-left: 0.25rem;\n}\n\n.NoCommits___3GzV1 {\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: var(--color-dim);\n}\n\n.Input___2QoRI {\n  background: none;\n  font-size: var(--font-size-sans-normal);\n  text-align: right;\n  font-family: var(--font-family-monospace);\n  border: 1px solid transparent;\n  border-radius: 0.125rem;\n  padding: 0.125rem;\n  color: var(--color-attribute-editable-value);\n}\n\n.Input___2QoRI:focus {\n  background-color: var(--color-button-background-focus);\n  outline: none;\n}\n", ""]);
            exports2.locals = {
              "Button": "Button___7tgtJ",
              "Commits": "Commits___2KF5W",
              "IndexLabel": "IndexLabel___36CS7",
              "NoCommits": "NoCommits___3GzV1",
              "Input": "Input___2QoRI"
            };
          }
        ),
        /***/
        6841: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Tooltip___NP68S {\n  position: absolute;\n  pointer-events: none;\n  border: none;\n  border-radius: 0.25rem;\n  padding: 0.25rem 0.5rem;\n  font-family: var(--font-family-sans);\n  font-size: 12px;\n  background-color: var(--color-tooltip-background);\n  color: var(--color-tooltip-text);\n  opacity: 1;\n  white-space: nowrap;\n  /* Make sure this is above the DevTools, which are above the Overlay */\n  z-index: 10000002;\n}\n\n.Tooltip___NP68S.hidden___3rGbV {\n  opacity: 0;\n}\n\n\n.Container___3aJAm {\n  width: -moz-max-content;\n  width: -webkit-max-content;\n}\n", ""]);
            exports2.locals = {
              "Tooltip": "Tooltip___NP68S",
              "hidden": "hidden___3rGbV",
              "Container": "Container___3aJAm"
            };
          }
        ),
        /***/
        1400: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Updaters___ykaBk {\n  margin: 0 0 0.5rem;\n}\n\n.NoUpdaters___2ZO7w,\n.Updater___f5nQz,\n.UnmountedUpdater___2Smse {\n  display: block;\n  width: 100%;\n  text-align: left;\n  background: none;\n  border: none;\n  padding: 0.25rem 0.5rem;\n  color: var(--color-text);\n}\n.Updater___f5nQz:focus,\n.Updater___f5nQz:hover {\n  outline: none;\n  background-color: var(--color-background-hover);\n}\n\n.NoUpdaters___2ZO7w,\n.UnmountedUpdater___2Smse {\n  color: var(--color-dim);\n}\n", ""]);
            exports2.locals = {
              "Updaters": "Updaters___ykaBk",
              "NoUpdaters": "NoUpdaters___2ZO7w",
              "Updater": "Updater___f5nQz",
              "UnmountedUpdater": "UnmountedUpdater___2Smse"
            };
          }
        ),
        /***/
        9061: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Item___2hxYk {\n  margin-top: 0.25rem;\n}\n\n.Key___1tUd1 {\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-small);\n  line-height: 1;\n}\n\n.Key___1tUd1:first-of-type::before {\n  content: ' (';\n}\n\n.Key___1tUd1::after {\n  content: ', ';\n}\n\n.Key___1tUd1:last-of-type::after {\n  content: ')';\n}\n\n.Label___2zyeV {\n  font-weight: bold;\n}\n", ""]);
            exports2.locals = {
              "Item": "Item___2hxYk",
              "Key": "Key___1tUd1",
              "Label": "Label___2zyeV"
            };
          }
        ),
        /***/
        5070: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".ReactLogo___O8zf5 {\n  width: 1.75rem;\n  height: 1.75rem;\n  margin: 0 0.75rem 0 0.25rem;\n  color: var(--color-button-active);\n}\n", ""]);
            exports2.locals = {
              "ReactLogo": "ReactLogo___O8zf5"
            };
          }
        ),
        /***/
        3609: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".SearchInput___5BLz9 {\n  flex: 1 1;\n  display: flex;\n  align-items: center;\n}\n\n.Input___15H-Z {\n  flex: 1 1 100px;\n  width: 100px;\n  font-size: var(--font-size-sans-large);\n  outline: none;\n  border: none;\n  background-color: var(--color-background);\n  color: var(--color-text);\n  padding-left: 1.5rem;\n  margin-left: -1rem;\n}\n\n.InputIcon___2jd-q {\n  pointer-events: none;\n  z-index: 2;\n  color: var(--color-dimmer);\n}\n\n.IndexLabel___98Dk_ {\n  color: var(--color-dim);\n  font-size: var(--font-size-sans-normal);\n  white-space: pre;\n}\n\n.LeftVRule___B5avU{\n  height: 20px;\n  width: 1px;\n  background-color: var(--color-border);\n}\n.LeftVRule___B5avU {\n  margin: 0 0.25rem 0 0.5rem;\n}\n", ""]);
            exports2.locals = {
              "SearchInput": "SearchInput___5BLz9",
              "Input": "Input___15H-Z",
              "InputIcon": "InputIcon___2jd-q",
              "IndexLabel": "IndexLabel___98Dk_",
              "LeftVRule": "LeftVRule___B5avU"
            };
          }
        ),
        /***/
        5240: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Background___3ncIs {\n  position: absolute;\n  z-index: 3;\n  width: 100%;\n  top: 0;\n  bottom: 0;\n  background-color: var(--color-modal-background);\n  display: flex;\n  align-items: flex-start;\n  justify-content: center;\n  font-size: var(--font-size-sans-normal);\n  padding: 1rem;\n}\n\n.Modal___rU10h {\n  display: flex;\n  flex-direction: column;\n  flex: 0 1 auto;\n  max-height: 100%;\n  background-color: var(--color-background);\n  border: 1px solid var(--color-border);\n  box-shadow: 0 2px 4px var(--color-shadow);\n  border-radius: 0.25rem;\n  overflow: auto;\n  width: 410px;\n  max-width: 100%;\n}\n\n.Spacer___3_C0y {\n  flex: 1;\n}\n\n.Tabs___3mQky {\n  display: flex;\n  flex-direction: row;\n  border-bottom: 1px solid var(--color-border);\n  padding-right: 0.25rem;\n  flex: 0 0 auto;\n}\n\n.Content___2YU9A {\n  padding: 0.5rem;\n  flex: 0 1 auto;\n  overflow: auto;\n}", ""]);
            exports2.locals = {
              "Background": "Background___3ncIs",
              "Modal": "Modal___rU10h",
              "Spacer": "Spacer___3_C0y",
              "Tabs": "Tabs___3mQky",
              "Content": "Content___2YU9A"
            };
          }
        ),
        /***/
        5489: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Settings___29B2k {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  font-family: var(--font-family-sans);\n  font-size: var(--font-size-sans-normal);\n}\n\n.Setting___1NJgU {\n  margin-bottom: 0.5rem;\n}\n.Setting___1NJgU:last-of-type {\n  margin-bottom: 0;\n}\n\n.OpenInURLSetting___2eTwK {\n  margin: 0.5rem 0;\n}\n\n.OptionGroup___2ZgHP {\n  display: inline-flex;\n  flex-direction: row;\n  align-items: center;\n  user-select: none;\n  margin: 0 1rem 0.5rem 0;\n}\n.OptionGroup___2ZgHP:last-of-type {\n  margin-right: 0;\n}\n\n.RadioLabel___1oyOB {\n  display: inline;\n  margin-right: 0.5rem;\n}\n\n.Spacer___1rTaV {\n  height: 0.5rem;\n}\n\n.CheckboxOption___2XWVZ {\n  display: block;\n  padding: 0 0 0.5rem;\n}\n\n.HRule___1h4ad {\n  height: 1px;\n  background-color: var(--color-border);\n  width: 100%;\n  border: none;\n  margin: 0.5rem 0;\n}\n\n.Header___NGIlt {\n  font-size: var(--font-size-sans-large);\n  margin-top: 0.5rem;\n}\n\n.ButtonIcon___3ZAjp {\n  margin-right: 0.25rem;\n}\n\n.NoFiltersCell___1WYR2 {\n  padding: 0.25rem 0;\n  color: var(--color-dim);\n}\n\n.Table___2srES {\n  min-width: 20rem;\n  margin-top: 0.5rem;\n  border-spacing: 0;\n}\n\n.TableRow___3kYuW {\n  padding-bottom: 0.5rem;\n}\n\n.TableCell___1yj52 {\n  padding: 0;\n  padding-right: 0.5rem;\n}\n.TableCell___1yj52:last-of-type {\n  text-align: right;\n  padding-right: 0;\n}\n\n.Input___I9AdA {\n  border: 1px solid var(--color-border);\n  border-radius: 0.125rem;\n  padding: 0.125rem;\n  margin-left: .5rem;\n}\n\n.InvalidRegExp___35lmE,\n.InvalidRegExp___35lmE:active,\n.InvalidRegExp___35lmE:focus,\n.InvalidRegExp___35lmE:hover {\n  color: var(--color-value-invalid);\n}\n\n.ToggleOffInvalid___2Rg2K,\n.ToggleOnInvalid___1Kamt,\n.ToggleOff___3cr6E,\n.ToggleOn___3KAVB {\n  border-radius: 0.75rem;\n  width: 1rem;\n  height: 0.625rem;\n  display: flex;\n  align-items: center;\n  padding: 0.125rem;\n}\n.ToggleOffInvalid___2Rg2K {\n  background-color: var(--color-toggle-background-invalid);\n  justify-content: flex-start;\n}\n.ToggleOnInvalid___1Kamt {\n  background-color: var(--color-toggle-background-invalid);\n  justify-content: flex-end;\n}\n.ToggleOff___3cr6E {\n  background-color: var(--color-toggle-background-off);\n  justify-content: flex-start;\n}\n.ToggleOn___3KAVB {\n  background-color: var(--color-toggle-background-on);\n  justify-content: flex-end;\n}\n\n.ToggleInsideOff___1pXcm,\n.ToggleInsideOn___3kEsU {\n  border-radius: 0.375rem;\n  width: 0.375rem;\n  height: 0.375rem;\n  background-color: var(--color-toggle-text);\n}\n\n.ReleaseNotes___q8NY1 {\n  width: 100%;\n  background-color: var(--color-background-hover);\n  padding: 0.25rem 0.5rem;\n  border-radius: 0.25rem;\n}\n\n.ReleaseNotesLink___2gjE8, .StrictModeLink___RM2Yt {\n  color: var(--color-button-active);\n}\n\n.Warning___3xUvj {\n  color: var(--color-error-text);\n}\n\n.VersionsList___35cmE {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n", ""]);
            exports2.locals = {
              "Settings": "Settings___29B2k",
              "Setting": "Setting___1NJgU",
              "OpenInURLSetting": "OpenInURLSetting___2eTwK",
              "OptionGroup": "OptionGroup___2ZgHP",
              "RadioLabel": "RadioLabel___1oyOB",
              "Spacer": "Spacer___1rTaV",
              "CheckboxOption": "CheckboxOption___2XWVZ",
              "HRule": "HRule___1h4ad",
              "Header": "Header___NGIlt",
              "ButtonIcon": "ButtonIcon___3ZAjp",
              "NoFiltersCell": "NoFiltersCell___1WYR2",
              "Table": "Table___2srES",
              "TableRow": "TableRow___3kYuW",
              "TableCell": "TableCell___1yj52",
              "Input": "Input___I9AdA",
              "InvalidRegExp": "InvalidRegExp___35lmE",
              "ToggleOffInvalid": "ToggleOffInvalid___2Rg2K",
              "ToggleOnInvalid": "ToggleOnInvalid___1Kamt",
              "ToggleOff": "ToggleOff___3cr6E",
              "ToggleOn": "ToggleOn___3KAVB",
              "ToggleInsideOff": "ToggleInsideOff___1pXcm",
              "ToggleInsideOn": "ToggleInsideOn___3kEsU",
              "ReleaseNotes": "ReleaseNotes___q8NY1",
              "ReleaseNotesLink": "ReleaseNotesLink___2gjE8",
              "StrictModeLink": "StrictModeLink___RM2Yt",
              "Warning": "Warning___3xUvj",
              "VersionsList": "VersionsList___35cmE"
            };
          }
        ),
        /***/
        5744: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Tab___20JoC,\n.TabCurrent___b4c3L,\n.TabDisabled___l1-ZF {\n  height: 100%;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  border-top: 3px solid transparent;\n  border-bottom: 3px solid transparent;\n  user-select: none;\n  color: var(--color-text);\n\n  /* Hide radio buttons for Firefox too */\n  position:  relative;\n\n  /* Electron drag area */\n  -webkit-app-region: no-drag;\n}\n.Tab___20JoC:hover,\n.TabCurrent___b4c3L:hover {\n  background-color: var(--color-background-hover);\n}\n.Tab___20JoC:focus-within,\n.TabCurrent___b4c3L:focus-within {\n  background-color: var(--color-background-hover);\n}\n\n.TabCurrent___b4c3L {\n  border-bottom: 3px solid var(--color-tab-selected-border);\n}\n\n.TabDisabled___l1-ZF {\n  color: var(--color-dim);\n  cursor: default;\n}\n\n.TabSizeNavigation___2GG1g {\n  font-size: var(--font-size-sans-large);\n  padding: 0.5rem 1rem;\n}\n.TabSizeProfiler___2wFBf {\n  font-size: var(--font-size-sans-normal);\n  padding: 0.25rem 0.5rem;\n}\n.TabSizeSettings___3V4f9 {\n  font-size: var(--font-size-sans-normal);\n  padding: 0.25rem 0.5rem;\n}\n\n.Input___2unCl {\n  width: 0;\n  margin: 0;\n  opacity: 0;\n\n  /* Hide radio buttons for Firefox too */\n  position:  absolute;\n}\n\n.IconSizeNavigation___mZIpl,\n.IconSizeProfiler___1jYXs,\n.IconSizeSettings___1HNRk {\n  margin-right: 0.5rem;\n  color: var(--color-button-active);\n}\n\n.IconDisabled___17Sd2 {\n  color: var(--color-dim);\n}\n\n.IconSizeNavigation___mZIpl {\n  width: 1.5rem;\n  height: 1.5rem;\n}\n.IconSizeProfiler___1jYXs {\n  width: 1rem;\n  height: 1rem;\n}\n.IconSizeSettings___1HNRk {\n  width: 1rem;\n  height: 1rem;\n}\n\n.TabLabelNavigation___2q3j3,\n.TabLabelProfiler___2QHeh,\n.TabLabelSettings___1pDKr {\n}\n\n.VRule___QpkmZ {\n  height: 20px;\n  width: 1px;\n  border-left: 1px solid var(--color-border);\n  padding-left: 0.25rem;\n  margin-left: 0.25rem;\n}\n\n@media screen and (max-width: 525px) {\n  .IconSizeNavigation___mZIpl {\n    margin-right: 0;\n  }\n\n  .TabLabelNavigation___2q3j3 {\n    display: none;\n  }\n}\n\n@media screen and (max-width: 900px) {\n  .TabLabelProfiler___2QHeh {\n    display: none;\n  }\n\n  .IconSizeProfiler___1jYXs {\n    margin-right: 0;\n  }\n}\n\n@media screen and (max-width: 400px) {\n  .TabLabelSettings___1pDKr {\n    display: none;\n  }\n\n  .IconSizeSettings___1HNRk {\n    margin-right: 0;\n  }\n}\n", ""]);
            exports2.locals = {
              "Tab": "Tab___20JoC",
              "TabCurrent": "TabCurrent___b4c3L",
              "TabDisabled": "TabDisabled___l1-ZF",
              "TabSizeNavigation": "TabSizeNavigation___2GG1g",
              "TabSizeProfiler": "TabSizeProfiler___2wFBf",
              "TabSizeSettings": "TabSizeSettings___3V4f9",
              "Input": "Input___2unCl",
              "IconSizeNavigation": "IconSizeNavigation___mZIpl",
              "IconSizeProfiler": "IconSizeProfiler___1jYXs",
              "IconSizeSettings": "IconSizeSettings___1HNRk",
              "IconDisabled": "IconDisabled___17Sd2",
              "TabLabelNavigation": "TabLabelNavigation___2q3j3",
              "TabLabelProfiler": "TabLabelProfiler___2QHeh",
              "TabLabelSettings": "TabLabelSettings___1pDKr",
              "VRule": "VRule___QpkmZ"
            };
          }
        ),
        /***/
        9741: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".ToggleDisabled___iQeZ3,\n.ToggleOn___3XJTo,\n.ToggleOff___142SC {\n  background: var(--color-button-background);\n  border: none;\n  border-radius: 0.25rem;\n  padding: 0;\n  flex: 0 0 auto;\n}\n\n.ToggleContent___1C-vg {\n  display: inline-flex;\n  align-items: center;\n  border-radius: 0.25rem;\n  padding: 0.25rem;\n}\n\n.ToggleOff___142SC {\n  border: none;\n  background: var(--color-button-background);\n  color: var(--color-button);\n}\n.ToggleOff___142SC:hover {\n  color: var(--color-button-hover);\n}\n\n.ToggleOn___3XJTo,\n.ToggleOn___3XJTo:active {\n  color: var(--color-button-active);\n  outline: none;\n}\n\n.ToggleOn___3XJTo:focus,\n.ToggleOff___142SC:focus,\n.ToggleContent___1C-vg:focus {\n  outline: none;\n}\n\n.ToggleOn___3XJTo:focus > .ToggleContent___1C-vg,\n.ToggleOff___142SC:focus > .ToggleContent___1C-vg {\n  background: var(--color-button-background-focus);\n}\n\n.ToggleDisabled___iQeZ3 {\n  background: var(--color-button-background);\n  color: var(--color-button-disabled);\n  cursor: default;\n}\n", ""]);
            exports2.locals = {
              "ToggleDisabled": "ToggleDisabled___iQeZ3",
              "ToggleOn": "ToggleOn___3XJTo",
              "ToggleOff": "ToggleOff___142SC",
              "ToggleContent": "ToggleContent___1C-vg"
            };
          }
        ),
        /***/
        8611: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Column___3s3y6 { \n  display: flex;  \n  flex-direction: column; \n} \n\n.Title___2c8MM {  \n  font-size: var(--font-size-sans-large); \n  margin-bottom: 0.5rem;  \n} \n\n.Version___34HO3 {\n  color: var(--color-bridge-version-number);\n  font-weight: bold;\n}\n\n.NpmCommand___2lHg1 {\n  display: flex;\n  justify-content: space-between;\n  padding: 0.25rem 0.25rem 0.25rem 0.5rem;\n  background-color: var(--color-bridge-version-npm-background);\n  color: var(--color-bridge-version-npm-text);\n  margin: 0;\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-large);\n}\n\n.Paragraph___3H72v {\n  margin: 0.5rem 0;\n}\n\n.Link___5TAEG {\n  color: var(--color-link);\n}", ""]);
            exports2.locals = {
              "Column": "Column___3s3y6",
              "Title": "Title___2c8MM",
              "Version": "Version___34HO3",
              "NpmCommand": "NpmCommand___2lHg1",
              "Paragraph": "Paragraph___3H72v",
              "Link": "Link___5TAEG"
            };
          }
        ),
        /***/
        250: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Row___3IwJ6 {  \n  display: flex;  \n  flex-direction: row;  \n  align-items: center;  \n} \n\n.Title___1PTyg {  \n  font-size: var(--font-size-sans-large); \n  margin-bottom: 0.5rem;  \n} \n\n.ReleaseNotesLink___2_Y38 { \n  color: var(--color-button-active);  \n}", ""]);
            exports2.locals = {
              "Row": "Row___3IwJ6",
              "Title": "Title___1PTyg",
              "ReleaseNotesLink": "ReleaseNotesLink___2_Y38"
            };
          }
        ),
        /***/
        4252: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Command___2iS3V {\n  background-color: var(--color-dimmest);\n  padding: 0.25rem 0.5rem;\n  display: block;\n  border-radius: 0.125rem;\n}\n", ""]);
            exports2.locals = {
              "Command": "Command___2iS3V"
            };
          }
        ),
        /***/
        7408: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ":root {\n  /* Font smoothing */\n  --font-smoothing: auto;\n\n  /* GitHub.com system fonts */\n  --font-family-monospace: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo,\n    Courier, monospace;\n  --font-family-sans: -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica,\n    Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol;\n}\n", ""]);
          }
        ),
        /***/
        1492: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".CanvasPage___1bMJ5 {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n", ""]);
            exports2.locals = {
              "CanvasPage": "CanvasPage___1bMJ5"
            };
          }
        ),
        /***/
        5404: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Tooltip___zx7EV {\n  position: fixed;\n}\n\n.TooltipSection___1ymuA,\n.TooltipWarningSection___3NM2z,\n.SingleLineTextSection___Xt1VX {\n  display: block;\n  border-radius: 0.125rem;\n  padding: 0.25rem;\n  user-select: none;\n  pointer-events: none;\n  background-color: var(--color-tooltip-background);\n  box-shadow: 1px 1px 2px var(--color-shadow);\n  color: var(--color-tooltip-text);\n  font-size: 11px;\n}\n.TooltipWarningSection___3NM2z {\n  margin-top: 0.25rem;\n  background-color: var(--color-warning-background);\n}\n.TooltipSection___1ymuA,\n.TooltipWarningSection___3NM2z {\n  max-width: 300px;\n}\n.SingleLineTextSection___Xt1VX {\n  white-space: nowrap;\n}\n\n.Divider___3WRJj {\n  height: 1px;\n  background-color: #aaa;\n  margin: 0.25rem 0;\n}\n\n.DetailsGrid___2geMz {\n  display: grid;\n  padding-top: 5px;\n  grid-gap: 2px 5px;\n  grid-template-columns: min-content auto;\n}\n\n.DetailsGridLabel___Vo1pu {\n  color: var(--color-dim);\n  text-align: right;\n  white-space: nowrap;\n}\n\n.DetailsGridLongValue___3vEFb {\n  word-break: break-all;\n  max-height: 50vh;\n  overflow: hidden;\n}\n\n.FlamechartStackFrameName___15Syk {\n  word-break: break-word;\n}\n\n.ComponentName___M_PGg {\n  font-weight: bold;\n  word-break: break-word;\n  margin-right: 0.25rem;\n}\n\n.ReactMeasureLabel___rpyRN {\n}\n\n.UserTimingLabel___1Fpxr {\n  word-break: break-word;\n}\n\n.NativeEventName___HXtAH {\n  font-weight: bold;\n  word-break: break-word;\n  margin-right: 0.25rem;\n}\n\n.WarningText___cf1lY {\n  color: var(--color-warning-text-color);\n}\n\n.Image___3nrFz {\n  border: 1px solid var(--color-border);\n}\n\n.DimText___asq74 {\n  color: var(--color-dim);\n}", ""]);
            exports2.locals = {
              "Tooltip": "Tooltip___zx7EV",
              "TooltipSection": "TooltipSection___1ymuA",
              "TooltipWarningSection": "TooltipWarningSection___3NM2z",
              "SingleLineTextSection": "SingleLineTextSection___Xt1VX",
              "Divider": "Divider___3WRJj",
              "DetailsGrid": "DetailsGrid___2geMz",
              "DetailsGridLabel": "DetailsGridLabel___Vo1pu",
              "DetailsGridLongValue": "DetailsGridLongValue___3vEFb",
              "FlamechartStackFrameName": "FlamechartStackFrameName___15Syk",
              "ComponentName": "ComponentName___M_PGg",
              "ReactMeasureLabel": "ReactMeasureLabel___rpyRN",
              "UserTimingLabel": "UserTimingLabel___1Fpxr",
              "NativeEventName": "NativeEventName___HXtAH",
              "WarningText": "WarningText___cf1lY",
              "Image": "Image___3nrFz",
              "DimText": "DimText___asq74"
            };
          }
        ),
        /***/
        6677: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Content___2QeJf {\n  width: 100%;\n  position: relative;\n  flex: 1 1 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n\n.ErrorMessage___1LWbq {\n  margin: 0.5rem 0;\n  color: var(--color-dim);\n  font-family: var(--font-family-monospace);\n  font-size: var(--font-size-monospace-normal);\n}\n\n.Row___1Veyi {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  flex-flow: wrap;\n}\n\n.EmptyStateContainer___2OQbO {\n  text-align: center;\n}\n\n.Header___2vzMq {\n  font-size: var(--font-size-sans-large);\n  margin-bottom: 0.5rem;\n}\n", ""]);
            exports2.locals = {
              "Content": "Content___2QeJf",
              "ErrorMessage": "ErrorMessage___1LWbq",
              "Row": "Row___1Veyi",
              "EmptyStateContainer": "EmptyStateContainer___2OQbO",
              "Header": "Header___2vzMq"
            };
          }
        ),
        /***/
        9490: (
          /***/
          (module2, exports2, __webpack_require__2) => {
            exports2 = module2.exports = __webpack_require__2(5751)(false);
            exports2.push([module2.id, ".Column___5Ol48 {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 0 1rem;\n}\n\n.Header___322Sm {\n  font-size: var(--font-size-sans-large);\n  margin-bottom: 0.5rem;\n}\n\n.Paragraph___22fN5 {\n  text-align: center;\n  margin: 0;\n}\n\n.Link___36nzP {\n  color: var(--color-link);\n}\n\n.LearnMoreRow___aWp1e {\n  margin-top: 1rem;\n  color: var(--color-dim);\n  font-size: var(--font-size-sans-small);\n}\n\n.Code___19uUo {\n  color: var(--color-bridge-version-number);\n}\n\n.MetaGKRow___1tKC1 {\n  background: var(--color-background-hover);\n  padding: 0.25rem 0.5rem;\n  border-radius: 0.25rem;\n  margin-top: 1rem;\n}", ""]);
            exports2.locals = {
              "Column": "Column___5Ol48",
              "Header": "Header___322Sm",
              "Paragraph": "Paragraph___22fN5",
              "Link": "Link___36nzP",
              "LearnMoreRow": "LearnMoreRow___aWp1e",
              "Code": "Code___19uUo",
              "MetaGKRow": "MetaGKRow___1tKC1"
            };
          }
        ),
        /***/
        7007: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(5322);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        707: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(7366);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        4850: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(1716);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        3072: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(4556);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        3683: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(4262);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        6628: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(5945);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        19: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(2163);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        407: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(3516);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        3004: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(935);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        8490: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(7379);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        5994: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(4419);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        8516: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(9670);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        1774: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(5266);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        3177: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(3839);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        5817: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(7577);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        7613: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(4282);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        4352: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(731);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        9548: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(3285);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        1443: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(434);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        8562: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(8368);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        7074: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(5855);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        8739: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(3375);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        3587: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(7591);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        69: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(9910);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        5458: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(8203);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        8289: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(5145);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        8818: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(9436);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        6747: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(9553);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        2279: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(921);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        7494: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(3727);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        6974: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(6591);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        8313: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(7481);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        9515: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(4721);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        7500: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(8291);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        2265: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(6376);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        8633: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(1907);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        1061: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(7204);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        7922: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(4843);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        5394: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(5850);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        3943: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(7649);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        7826: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(3036);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        886: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(796);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        2350: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(5758);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        5292: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(2760);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        6078: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(9723);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        4368: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(3206);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        6670: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(5885);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        8682: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(6057);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        1909: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(8868);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        4594: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(4290);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        6038: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(3179);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        5714: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(2856);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        1409: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(9074);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        5722: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(786);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        7102: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(466);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        1633: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(3599);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        1680: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(6841);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        8640: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(1400);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        3582: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(9061);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        9653: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(5070);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        9110: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(3609);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        476: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(5240);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        1426: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(5489);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        3617: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(5744);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        7167: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(9741);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        8178: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(8611);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        7304: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(250);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        7277: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(4252);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        2404: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(7408);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        9410: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(1492);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        3980: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(5404);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        7578: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(6677);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        8942: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var content = __webpack_require__2(9490);
            if (typeof content === "string")
              content = [[module2.id, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__2(2379)(content, options);
            if (content.locals)
              module2.exports = content.locals;
            if (false) {
            }
          }
        ),
        /***/
        2379: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var stylesInDom = {};
            var memoize = function(fn) {
              var memo;
              return function() {
                if (typeof memo === "undefined")
                  memo = fn.apply(this, arguments);
                return memo;
              };
            };
            var isOldIE = memoize(function() {
              return window && document && document.all && !window.atob;
            });
            var getTarget = function(target, parent) {
              if (parent) {
                return parent.querySelector(target);
              }
              return document.querySelector(target);
            };
            var getElement = /* @__PURE__ */ function(fn) {
              var memo = {};
              return function(target, parent) {
                if (typeof target === "function") {
                  return target();
                }
                if (typeof memo[target] === "undefined") {
                  var styleTarget = getTarget.call(this, target, parent);
                  if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
                    try {
                      styleTarget = styleTarget.contentDocument.head;
                    } catch (e) {
                      styleTarget = null;
                    }
                  }
                  memo[target] = styleTarget;
                }
                return memo[target];
              };
            }();
            var singleton = null;
            var singletonCounter = 0;
            var stylesInsertedAtTop = [];
            var fixUrls = __webpack_require__2(2275);
            module2.exports = function(list, options) {
              if (typeof DEBUG !== "undefined" && DEBUG) {
                if (typeof document !== "object")
                  throw new Error("The style-loader cannot be used in a non-browser environment");
              }
              options = options || {};
              options.attrs = typeof options.attrs === "object" ? options.attrs : {};
              if (!options.singleton && typeof options.singleton !== "boolean")
                options.singleton = isOldIE();
              if (!options.insertInto)
                options.insertInto = "head";
              if (!options.insertAt)
                options.insertAt = "bottom";
              var styles = listToStyles(list, options);
              addStylesToDom(styles, options);
              return function update(newList) {
                var mayRemove = [];
                for (var i = 0; i < styles.length; i++) {
                  var item = styles[i];
                  var domStyle = stylesInDom[item.id];
                  domStyle.refs--;
                  mayRemove.push(domStyle);
                }
                if (newList) {
                  var newStyles = listToStyles(newList, options);
                  addStylesToDom(newStyles, options);
                }
                for (var i = 0; i < mayRemove.length; i++) {
                  var domStyle = mayRemove[i];
                  if (domStyle.refs === 0) {
                    for (var j = 0; j < domStyle.parts.length; j++)
                      domStyle.parts[j]();
                    delete stylesInDom[domStyle.id];
                  }
                }
              };
            };
            function addStylesToDom(styles, options) {
              for (var i = 0; i < styles.length; i++) {
                var item = styles[i];
                var domStyle = stylesInDom[item.id];
                if (domStyle) {
                  domStyle.refs++;
                  for (var j = 0; j < domStyle.parts.length; j++) {
                    domStyle.parts[j](item.parts[j]);
                  }
                  for (; j < item.parts.length; j++) {
                    domStyle.parts.push(addStyle(item.parts[j], options));
                  }
                } else {
                  var parts = [];
                  for (var j = 0; j < item.parts.length; j++) {
                    parts.push(addStyle(item.parts[j], options));
                  }
                  stylesInDom[item.id] = { id: item.id, refs: 1, parts };
                }
              }
            }
            function listToStyles(list, options) {
              var styles = [];
              var newStyles = {};
              for (var i = 0; i < list.length; i++) {
                var item = list[i];
                var id = options.base ? item[0] + options.base : item[0];
                var css = item[1];
                var media = item[2];
                var sourceMap = item[3];
                var part = { css, media, sourceMap };
                if (!newStyles[id])
                  styles.push(newStyles[id] = { id, parts: [part] });
                else
                  newStyles[id].parts.push(part);
              }
              return styles;
            }
            function insertStyleElement(options, style) {
              var target = getElement(options.insertInto);
              if (!target) {
                throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
              }
              var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];
              if (options.insertAt === "top") {
                if (!lastStyleElementInsertedAtTop) {
                  target.insertBefore(style, target.firstChild);
                } else if (lastStyleElementInsertedAtTop.nextSibling) {
                  target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
                } else {
                  target.appendChild(style);
                }
                stylesInsertedAtTop.push(style);
              } else if (options.insertAt === "bottom") {
                target.appendChild(style);
              } else if (typeof options.insertAt === "object" && options.insertAt.before) {
                var nextSibling = getElement(options.insertAt.before, target);
                target.insertBefore(style, nextSibling);
              } else {
                throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
              }
            }
            function removeStyleElement(style) {
              if (style.parentNode === null)
                return false;
              style.parentNode.removeChild(style);
              var idx = stylesInsertedAtTop.indexOf(style);
              if (idx >= 0) {
                stylesInsertedAtTop.splice(idx, 1);
              }
            }
            function createStyleElement(options) {
              var style = document.createElement("style");
              if (options.attrs.type === void 0) {
                options.attrs.type = "text/css";
              }
              if (options.attrs.nonce === void 0) {
                var nonce = getNonce();
                if (nonce) {
                  options.attrs.nonce = nonce;
                }
              }
              addAttrs(style, options.attrs);
              insertStyleElement(options, style);
              return style;
            }
            function createLinkElement(options) {
              var link = document.createElement("link");
              if (options.attrs.type === void 0) {
                options.attrs.type = "text/css";
              }
              options.attrs.rel = "stylesheet";
              addAttrs(link, options.attrs);
              insertStyleElement(options, link);
              return link;
            }
            function addAttrs(el, attrs) {
              Object.keys(attrs).forEach(function(key) {
                el.setAttribute(key, attrs[key]);
              });
            }
            function getNonce() {
              if (false) {
              }
              return __webpack_require__2.nc;
            }
            function addStyle(obj, options) {
              var style, update, remove, result;
              if (options.transform && obj.css) {
                result = typeof options.transform === "function" ? options.transform(obj.css) : options.transform.default(obj.css);
                if (result) {
                  obj.css = result;
                } else {
                  return function() {
                  };
                }
              }
              if (options.singleton) {
                var styleIndex = singletonCounter++;
                style = singleton || (singleton = createStyleElement(options));
                update = applyToSingletonTag.bind(null, style, styleIndex, false);
                remove = applyToSingletonTag.bind(null, style, styleIndex, true);
              } else if (obj.sourceMap && typeof URL === "function" && typeof URL.createObjectURL === "function" && typeof URL.revokeObjectURL === "function" && typeof Blob === "function" && typeof btoa === "function") {
                style = createLinkElement(options);
                update = updateLink.bind(null, style, options);
                remove = function() {
                  removeStyleElement(style);
                  if (style.href)
                    URL.revokeObjectURL(style.href);
                };
              } else {
                style = createStyleElement(options);
                update = applyToTag.bind(null, style);
                remove = function() {
                  removeStyleElement(style);
                };
              }
              update(obj);
              return function updateStyle(newObj) {
                if (newObj) {
                  if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
                    return;
                  }
                  update(obj = newObj);
                } else {
                  remove();
                }
              };
            }
            var replaceText = /* @__PURE__ */ function() {
              var textStore = [];
              return function(index, replacement) {
                textStore[index] = replacement;
                return textStore.filter(Boolean).join("\n");
              };
            }();
            function applyToSingletonTag(style, index, remove, obj) {
              var css = remove ? "" : obj.css;
              if (style.styleSheet) {
                style.styleSheet.cssText = replaceText(index, css);
              } else {
                var cssNode = document.createTextNode(css);
                var childNodes = style.childNodes;
                if (childNodes[index])
                  style.removeChild(childNodes[index]);
                if (childNodes.length) {
                  style.insertBefore(cssNode, childNodes[index]);
                } else {
                  style.appendChild(cssNode);
                }
              }
            }
            function applyToTag(style, obj) {
              var css = obj.css;
              var media = obj.media;
              if (media) {
                style.setAttribute("media", media);
              }
              if (style.styleSheet) {
                style.styleSheet.cssText = css;
              } else {
                while (style.firstChild) {
                  style.removeChild(style.firstChild);
                }
                style.appendChild(document.createTextNode(css));
              }
            }
            function updateLink(link, options, obj) {
              var css = obj.css;
              var sourceMap = obj.sourceMap;
              var autoFixUrls = options.convertToAbsoluteUrls === void 0 && sourceMap;
              if (options.convertToAbsoluteUrls || autoFixUrls) {
                css = fixUrls(css);
              }
              if (sourceMap) {
                css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
              }
              var blob = new Blob([css], { type: "text/css" });
              var oldSrc = link.href;
              link.href = URL.createObjectURL(blob);
              if (oldSrc)
                URL.revokeObjectURL(oldSrc);
            }
          }
        ),
        /***/
        7282: (
          /***/
          (module2, __unused_webpack_exports, __webpack_require__2) => {
            var addMethods = __webpack_require__2(6803);
            var methods = ["importFile"];
            module2.exports = function() {
              var w = new Worker(URL.createObjectURL(new Blob([`/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 496:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.importFromOldV8CPUProfile = exports.importFromChromeCPUProfile = exports.importFromChromeTimeline = exports.isChromeTimeline = void 0;

const profile_1 = __webpack_require__(211);

const utils_1 = __webpack_require__(844);

const value_formatters_1 = __webpack_require__(218);

const v8cpuFormatter_1 = __webpack_require__(320);

function isChromeTimeline(rawProfile) {
  if (!Array.isArray(rawProfile)) return false;
  if (rawProfile.length < 1) return false;
  const first = rawProfile[0];
  if (!('pid' in first && 'tid' in first && 'ph' in first && 'cat' in first)) return false;
  if (!rawProfile.find(e => e.name === 'CpuProfile' || e.name === 'Profile' || e.name === 'ProfileChunk')) return false;
  return true;
}

exports.isChromeTimeline = isChromeTimeline;

function importFromChromeTimeline(events, fileName) {
  // It seems like sometimes Chrome timeline files contain multiple CpuProfiles?
  // For now, choose the first one in the list.
  const cpuProfileByID = new Map(); // Maps profile IDs (like "0x3") to pid/tid pairs formatted as \`\${pid}:\${tid}\`

  const pidTidById = new Map(); // Maps pid/tid pairs to thread names

  const threadNameByPidTid = new Map(); // The events aren't necessarily recorded in chronological order. Sort them so
  // that they are.

  utils_1.sortBy(events, e => e.ts);

  for (let event of events) {
    if (event.name === 'CpuProfile') {
      const pidTid = \`\${event.pid}:\${event.tid}\`;
      const id = event.id || pidTid;
      cpuProfileByID.set(id, event.args.data.cpuProfile);
      pidTidById.set(id, pidTid);
    }

    if (event.name === 'Profile') {
      const pidTid = \`\${event.pid}:\${event.tid}\`;
      cpuProfileByID.set(event.id || pidTid, Object.assign({
        startTime: 0,
        endTime: 0,
        nodes: [],
        samples: [],
        timeDeltas: []
      }, event.args.data));

      if (event.id) {
        pidTidById.set(event.id, \`\${event.pid}:\${event.tid}\`);
      }
    }

    if (event.name === 'thread_name') {
      threadNameByPidTid.set(\`\${event.pid}:\${event.tid}\`, event.args.name);
    }

    if (event.name === 'ProfileChunk') {
      const pidTid = \`\${event.pid}:\${event.tid}\`;
      const cpuProfile = cpuProfileByID.get(event.id || pidTid);

      if (cpuProfile) {
        const chunk = event.args.data;

        if (chunk.cpuProfile) {
          if (chunk.cpuProfile.nodes) {
            cpuProfile.nodes = cpuProfile.nodes.concat(chunk.cpuProfile.nodes);
          }

          if (chunk.cpuProfile.samples) {
            cpuProfile.samples = cpuProfile.samples.concat(chunk.cpuProfile.samples);
          }
        }

        if (chunk.timeDeltas) {
          cpuProfile.timeDeltas = cpuProfile.timeDeltas.concat(chunk.timeDeltas);
        }

        if (chunk.startTime != null) {
          cpuProfile.startTime = chunk.startTime;
        }

        if (chunk.endTime != null) {
          cpuProfile.endTime = chunk.endTime;
        }
      } else {
        console.warn(\`Ignoring ProfileChunk for undeclared Profile with id \${event.id || pidTid}\`);
      }
    }
  }

  if (cpuProfileByID.size > 0) {
    const profiles = [];
    let indexToView = 0;
    utils_1.itForEach(cpuProfileByID.keys(), profileId => {
      let threadName = null;
      let pidTid = pidTidById.get(profileId);

      if (pidTid) {
        threadName = threadNameByPidTid.get(pidTid) || null;

        if (threadName) {}
      }

      const profile = importFromChromeCPUProfile(cpuProfileByID.get(profileId));

      if (threadName && cpuProfileByID.size > 1) {
        profile.setName(\`\${fileName} - \${threadName}\`);

        if (threadName === 'CrRendererMain') {
          indexToView = profiles.length;
        }
      } else {
        profile.setName(\`\${fileName}\`);
      }

      profiles.push(profile);
    });
    return {
      name: fileName,
      indexToView,
      profiles
    };
  } else {
    throw new Error('Could not find CPU profile in Timeline');
  }
}

exports.importFromChromeTimeline = importFromChromeTimeline;
const callFrameToFrameInfo = new Map();

function frameInfoForCallFrame(callFrame) {
  return utils_1.getOrInsert(callFrameToFrameInfo, callFrame, callFrame => {
    const name = callFrame.functionName || '(anonymous)';
    const file = callFrame.url;
    const line = callFrame.lineNumber;
    const col = callFrame.columnNumber;
    return {
      key: \`\${name}:\${file}:\${line}:\${col}\`,
      name,
      file,
      line,
      col
    };
  });
}

function shouldIgnoreFunction(callFrame) {
  const {
    functionName,
    url
  } = callFrame;

  if (url === 'native dummy.js') {
    // I'm not really sure what this is about, but this seems to be used
    // as a way of avoiding edge cases in V8's implementation.
    // See: https://github.com/v8/v8/blob/b8626ca4/tools/js2c.py#L419-L424
    return true;
  }

  return functionName === '(root)' || functionName === '(idle)';
}

function shouldPlaceOnTopOfPreviousStack(functionName) {
  return functionName === '(garbage collector)' || functionName === '(program)';
}

function importFromChromeCPUProfile(chromeProfile) {
  const profile = new profile_1.CallTreeProfileBuilder(chromeProfile.endTime - chromeProfile.startTime);
  const nodeById = new Map();

  for (let node of chromeProfile.nodes) {
    nodeById.set(node.id, node);
  }

  for (let node of chromeProfile.nodes) {
    if (typeof node.parent === 'number') {
      node.parent = nodeById.get(node.parent);
    }

    if (!node.children) continue;

    for (let childId of node.children) {
      const child = nodeById.get(childId);
      if (!child) continue;
      child.parent = node;
    }
  }

  const samples = [];
  const sampleTimes = []; // The first delta is relative to the profile startTime.
  // Ref: https://github.com/v8/v8/blob/44bd8fd7/src/inspector/js_protocol.json#L1485

  let elapsed = chromeProfile.timeDeltas[0]; // Prevents negative time deltas from causing bad data. See
  // https://github.com/jlfwong/speedscope/pull/305 for details.

  let lastValidElapsed = elapsed;
  let lastNodeId = NaN; // The chrome CPU profile format doesn't collapse identical samples. We'll do that
  // here to save a ton of work later doing mergers.

  for (let i = 0; i < chromeProfile.samples.length; i++) {
    const nodeId = chromeProfile.samples[i];

    if (nodeId != lastNodeId) {
      samples.push(nodeId);

      if (elapsed < lastValidElapsed) {
        sampleTimes.push(lastValidElapsed);
      } else {
        sampleTimes.push(elapsed);
        lastValidElapsed = elapsed;
      }
    }

    if (i === chromeProfile.samples.length - 1) {
      if (!isNaN(lastNodeId)) {
        samples.push(lastNodeId);

        if (elapsed < lastValidElapsed) {
          sampleTimes.push(lastValidElapsed);
        } else {
          sampleTimes.push(elapsed);
          lastValidElapsed = elapsed;
        }
      }
    } else {
      const timeDelta = chromeProfile.timeDeltas[i + 1];
      elapsed += timeDelta;
      lastNodeId = nodeId;
    }
  }

  let prevStack = [];

  for (let i = 0; i < samples.length; i++) {
    const value = sampleTimes[i];
    const nodeId = samples[i];
    let stackTop = nodeById.get(nodeId);
    if (!stackTop) continue; // Find lowest common ancestor of the current stack and the previous one

    let lca = null; // This is O(n^2), but n should be relatively small here (stack height),
    // so hopefully this isn't much of a problem

    for (lca = stackTop; lca && prevStack.indexOf(lca) === -1; lca = shouldPlaceOnTopOfPreviousStack(lca.callFrame.functionName) ? utils_1.lastOf(prevStack) : lca.parent || null) {} // Close frames that are no longer open


    while (prevStack.length > 0 && utils_1.lastOf(prevStack) != lca) {
      const closingNode = prevStack.pop();
      const frame = frameInfoForCallFrame(closingNode.callFrame);
      profile.leaveFrame(frame, value);
    } // Open frames that are now becoming open


    const toOpen = [];

    for (let node = stackTop; node && node != lca && !shouldIgnoreFunction(node.callFrame); // Place Chrome internal functions on top of the previous call stack
    node = shouldPlaceOnTopOfPreviousStack(node.callFrame.functionName) ? utils_1.lastOf(prevStack) : node.parent || null) {
      toOpen.push(node);
    }

    toOpen.reverse();

    for (let node of toOpen) {
      profile.enterFrame(frameInfoForCallFrame(node.callFrame), value);
    }

    prevStack = prevStack.concat(toOpen);
  } // Close frames that are open at the end of the trace


  for (let i = prevStack.length - 1; i >= 0; i--) {
    profile.leaveFrame(frameInfoForCallFrame(prevStack[i].callFrame), utils_1.lastOf(sampleTimes));
  }

  profile.setValueFormatter(new value_formatters_1.TimeFormatter('microseconds'));
  return profile.build();
}

exports.importFromChromeCPUProfile = importFromChromeCPUProfile;

function importFromOldV8CPUProfile(content) {
  return importFromChromeCPUProfile(v8cpuFormatter_1.chromeTreeToNodes(content));
}

exports.importFromOldV8CPUProfile = importFromOldV8CPUProfile;

/***/ }),

/***/ 320:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.chromeTreeToNodes = void 0;

function treeToArray(root) {
  const nodes = [];

  function visit(node) {
    nodes.push({
      id: node.id,
      callFrame: {
        columnNumber: 0,
        functionName: node.functionName,
        lineNumber: node.lineNumber,
        scriptId: node.scriptId,
        url: node.url
      },
      hitCount: node.hitCount,
      children: node.children.map(child => child.id)
    });
    node.children.forEach(visit);
  }

  visit(root);
  return nodes;
}

function timestampsToDeltas(timestamps, startTime) {
  return timestamps.map((timestamp, index) => {
    const lastTimestamp = index === 0 ? startTime * 1000000 : timestamps[index - 1];
    return timestamp - lastTimestamp;
  });
}
/**
 * Convert the old tree-based format to the new flat-array based format
 */


function chromeTreeToNodes(content) {
  // Note that both startTime and endTime are now in microseconds
  return {
    samples: content.samples,
    startTime: content.startTime * 1000000,
    endTime: content.endTime * 1000000,
    nodes: treeToArray(content.head),
    timeDeltas: timestampsToDeltas(content.timestamps, content.startTime)
  };
}

exports.chromeTreeToNodes = chromeTreeToNodes;

/***/ }),

/***/ 765:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.demangleCpp = void 0;
let cppfilt;
const cache = new Map(); // This function converts a mangled C++ name such as "__ZNK7Support6ColorFeqERKS0_"
// into a human-readable symbol (in this case "Support::ColorF::==(Support::ColorF&)")

function demangleCpp(name) {
  if (name.startsWith('__Z')) {
    let result = cache.get(name);

    if (result !== undefined) {
      name = result;
    } else {
      if (!cppfilt) {
        cppfilt = new Function('exports', code)();
      }

      result = cppfilt(name.slice(1));
      result = result === '(null)' ? name : result;
      cache.set(name, result);
      name = result;
    }
  }

  return name;
}

exports.demangleCpp = demangleCpp; // This was taken from https://d.fuqu.jp/c++filtjs/

const code = \`
return function(){function r(r){eval.call(null,r)}function a(r){throw print(r+":\\\\n"+(new Error).stack),ke=!0,"Assertion: "+r}function e(r,e){r||a("Assertion failed: "+e)}function i(r,a,i,v){function t(r,a){if("string"==a){var e=Oe;return le.stackAlloc(r.length+1),A(r,e),e}return r}function f(r,a){return"string"==a?s(r):r}try{func=ce.Module["_"+r]}catch(r){}e(func,"Cannot call unknown function "+r+" (perhaps LLVM optimizations or closure removed it?)");var _=0,n=v?v.map(function(r){return t(r,i[_++])}):[];return f(func.apply(null,n),a)}function v(r,a,e){return function(){return i(r,a,e,Array.prototype.slice.call(arguments))}}function t(r,e,i,v){switch(i=i||"i8","*"===i[i.length-1]&&(i="i32"),i){case"i1":Ae[r]=e;break;case"i8":Ae[r]=e;break;case"i16":ye[r>>1]=e;break;case"i32":Se[r>>2]=e;break;case"i64":Se[r>>2]=e;break;case"float":Ce[r>>2]=e;break;case"double":ze[0]=e,Se[r>>2]=xe[0],Se[r+4>>2]=xe[1];break;default:a("invalid type for setValue: "+i)}}function f(r,e,i){switch(e=e||"i8","*"===e[e.length-1]&&(e="i32"),e){case"i1":return Ae[r];case"i8":return Ae[r];case"i16":return ye[r>>1];case"i32":return Se[r>>2];case"i64":return Se[r>>2];case"float":return Ce[r>>2];case"double":return xe[0]=Se[r>>2],xe[1]=Se[r+4>>2],ze[0];default:a("invalid type for setValue: "+e)}return null}function _(r,a,e){var i,v;"number"==typeof r?(i=!0,v=r):(i=!1,v=r.length);var f="string"==typeof a?a:null,_=[Jr,le.stackAlloc,le.staticAlloc][void 0===e?we:e](Math.max(v,f?1:a.length));if(i)return Fa(_,0,v),_;for(var s,n=0;n<v;){var o=r[n];"function"==typeof o&&(o=le.getFunctionIndex(o)),s=f||a[n],0!==s?("i64"==s&&(s="i32"),t(_+n,o,s),n+=le.getNativeTypeSize(s)):n++}return _}function s(r,a){for(var e,i="undefined"==typeof a,v="",t=0,f=String.fromCharCode(0);;){if(e=String.fromCharCode(ge[r+t]),i&&e==f)break;if(v+=e,t+=1,!i&&t==a)break}return v}function n(r){for(var a="",e=0;e<r.length;e++)a+=String.fromCharCode(r[e]);return a}function o(r){return r+4095>>12<<12}function l(){for(;Le<=Ie;)Le=o(2*Le);var r=Ae,a=new ArrayBuffer(Le);Ae=new Int8Array(a),ye=new Int16Array(a),Se=new Int32Array(a),ge=new Uint8Array(a),me=new Uint16Array(a),Me=new Uint32Array(a),Ce=new Float32Array(a),Re=new Float64Array(a),Ae.set(r)}function b(r){for(;r.length>0;){var a=r.shift(),e=a.func;"number"==typeof e&&(e=pe[e]),e(void 0===a.arg?null:a.arg)}}function k(){b(Ve)}function u(){b(Be),be.print()}function c(r,a){return Array.prototype.slice.call(Ae.subarray(r,r+a))}function h(r,a){for(var e=new Uint8Array(a),i=0;i<a;++i)e[i]=Ae[r+i];return e.buffer}function d(r){for(var a=0;Ae[r+a];)a++;return a}function w(r,a){var e=d(r);a&&e++;var i=c(r,e);return a&&(i[e-1]=0),i}function p(r,a){for(var e=[],i=0;i<r.length;){var v=r.charCodeAt(i);v>255&&(v&=255),e.push(v),i+=1}return a||e.push(0),e}function E(r){for(var a=[],e=0;e<r.length;e++){var i=r[e];i>255&&(i&=255),a.push(String.fromCharCode(i))}return a.join("")}function A(r,a,e){for(var i=0;i<r.length;){var v=r.charCodeAt(i);v>255&&(v&=255),Ae[a+i]=v,i+=1}e||(Ae[a+i]=0)}function g(r,a,e,i){return r>=0?r:a<=32?2*Math.abs(1<<a-1)+r:Math.pow(2,a)+r}function y(r,a,e,i){if(r<=0)return r;var v=a<=32?Math.abs(1<<a-1):Math.pow(2,a-1);return r>=v&&(a<=32||r>v)&&(r=-2*v+r),r}function m(r,a,e){if(0==(0|r)|0==(0|a)|0==(0|e))var i=0;else{Se[r>>2]=0,Se[r+4>>2]=a,Se[r+8>>2]=e;var i=1}var i;return i}function S(r,a,e){if(0==(0|r)|(0|a)<0|0==(0|e))var i=0;else{Se[r>>2]=41,Se[r+4>>2]=a,Se[r+8>>2]=e;var i=1}var i;return i}function M(r,a,e){if(0==(0|r)|0==(0|e))var i=0;else{Se[r>>2]=6,Se[r+4>>2]=a,Se[r+8>>2]=e;var i=1}var i;return i}function C(r,a,e){if(0==(0|r)|0==(0|e))var i=0;else{Se[r>>2]=7,Se[r+4>>2]=a,Se[r+8>>2]=e;var i=1}var i;return i}function R(r,a){var e,i=0==(0|a);do if(i)var v=0;else{var e=(r+32|0)>>2,t=Se[e];if((0|t)>=(0|Se[r+36>>2])){var v=0;break}var f=(t<<2)+Se[r+28>>2]|0;Se[f>>2]=a;var _=Se[e]+1|0;Se[e]=_;var v=1}while(0);var v;return v}function T(r,a){var e,e=(r+12|0)>>2,i=Se[e],v=i+1|0;Se[e]=v;var t=Ae[i]<<24>>24==95;do if(t){var f=i+2|0;if(Se[e]=f,Ae[v]<<24>>24!=90){var _=0;break}var s=O(r,a),_=s}else var _=0;while(0);var _;return _}function O(r,a){var e=r+12|0,i=Ae[Se[e>>2]];r:do if(i<<24>>24==71||i<<24>>24==84)var v=Tr(r),t=v;else{var f=Ar(r),_=0==(0|f)|0==(0|a);do if(!_){if(0!=(1&Se[r+8>>2]|0))break;var s=Me[f>>2],n=(s-25|0)>>>0<3;a:do if(n)for(var o=f;;){var o,l=Me[o+4>>2],b=Me[l>>2];if((b-25|0)>>>0>=3){var k=l,u=b;break a}var o=l}else var k=f,u=s;while(0);var u,k;if(2!=(0|u)){var t=k;break r}var c=k+8|0,h=Me[c>>2],d=(Se[h>>2]-25|0)>>>0<3;a:do if(d)for(var w=h;;){var w,p=Me[w+4>>2];if((Se[p>>2]-25|0)>>>0>=3){var E=p;break a}var w=p}else var E=h;while(0);var E;Se[c>>2]=E;var t=k;break r}while(0);var A=Ae[Se[e>>2]];if(A<<24>>24==0||A<<24>>24==69){var t=f;break}var g=Or(f),y=Sr(r,g),m=D(r,3,f,y),t=m}while(0);var t;return t}function N(r){var a,e,i=Oe;Oe+=4;var v=i,e=v>>2,a=(r+12|0)>>2,t=Me[a],f=Ae[t],_=f<<24>>24;r:do if(f<<24>>24==114||f<<24>>24==86||f<<24>>24==75){var s=I(r,v,0);if(0==(0|s)){var n=0;break}var o=N(r);Se[s>>2]=o;var l=Se[e],b=R(r,l);if(0==(0|b)){var n=0;break}var n=Se[e]}else{do{if(97==(0|_)||98==(0|_)||99==(0|_)||100==(0|_)||101==(0|_)||102==(0|_)||103==(0|_)||104==(0|_)||105==(0|_)||106==(0|_)||108==(0|_)||109==(0|_)||110==(0|_)||111==(0|_)||115==(0|_)||116==(0|_)||118==(0|_)||119==(0|_)||120==(0|_)||121==(0|_)||122==(0|_)){var k=ai+20*(_-97)|0,u=P(r,k);Se[e]=u;var c=r+48|0,h=Se[c>>2]+Se[Se[u+4>>2]+4>>2]|0;Se[c>>2]=h;var d=Se[a]+1|0;Se[a]=d;var n=u;break r}if(117==(0|_)){Se[a]=t+1|0;var w=L(r),p=D(r,34,w,0);Se[e]=p;var E=p}else if(70==(0|_)){var A=F(r);Se[e]=A;var E=A}else if(48==(0|_)||49==(0|_)||50==(0|_)||51==(0|_)||52==(0|_)||53==(0|_)||54==(0|_)||55==(0|_)||56==(0|_)||57==(0|_)||78==(0|_)||90==(0|_)){var g=X(r);Se[e]=g;var E=g}else if(65==(0|_)){var y=j(r);Se[e]=y;var E=y}else if(77==(0|_)){var m=U(r);Se[e]=m;var E=m}else if(84==(0|_)){var S=x(r);if(Se[e]=S,Ae[Se[a]]<<24>>24!=73){var E=S;break}var M=R(r,S);if(0==(0|M)){var n=0;break r}var C=Se[e],T=z(r),O=D(r,4,C,T);Se[e]=O;var E=O}else if(83==(0|_)){var B=ge[t+1|0];if((B-48&255&255)<10|B<<24>>24==95|(B-65&255&255)<26){var H=V(r,0);if(Se[e]=H,Ae[Se[a]]<<24>>24!=73){var n=H;break r}var K=z(r),Y=D(r,4,H,K);Se[e]=Y;var E=Y}else{var G=X(r);if(Se[e]=G,0==(0|G)){var E=0;break}if(21==(0|Se[G>>2])){var n=G;break r}var E=G}}else if(80==(0|_)){Se[a]=t+1|0;var W=N(r),Z=D(r,29,W,0);Se[e]=Z;var E=Z}else if(82==(0|_)){Se[a]=t+1|0;var Q=N(r),q=D(r,30,Q,0);Se[e]=q;var E=q}else if(67==(0|_)){Se[a]=t+1|0;var $=N(r),J=D(r,31,$,0);Se[e]=J;var E=J}else if(71==(0|_)){Se[a]=t+1|0;var rr=N(r),ar=D(r,32,rr,0);Se[e]=ar;var E=ar}else{if(85!=(0|_)){var n=0;break r}Se[a]=t+1|0;var er=L(r);Se[e]=er;var ir=N(r),vr=Se[e],tr=D(r,28,ir,vr);Se[e]=tr;var E=tr}}while(0);var E,fr=R(r,E);if(0==(0|fr)){var n=0;break}var n=Se[e]}while(0);var n;return Oe=i,n}function I(r,a,e){for(var i,v=r+12|0,t=0!=(0|e),f=t?25:22,i=(r+48|0)>>2,_=t?26:23,s=t?27:24,n=a;;){var n,o=Se[v>>2],l=Ae[o];if(l<<24>>24!=114&&l<<24>>24!=86&&l<<24>>24!=75){var b=n;break}var k=o+1|0;if(Se[v>>2]=k,l<<24>>24==114){var u=Se[i]+9|0;Se[i]=u;var c=f}else if(l<<24>>24==86){var h=Se[i]+9|0;Se[i]=h;var c=_}else{var d=Se[i]+6|0;Se[i]=d;var c=s}var c,w=D(r,c,0,0);if(Se[n>>2]=w,0==(0|w)){var b=0;break}var n=w+4|0}var b;return b}function P(r,a){var e=0==(0|a);do if(e)var i=0;else{var v=J(r);if(0==(0|v)){var i=0;break}Se[v>>2]=33,Se[v+4>>2]=a;var i=v}while(0);var i;return i}function D(r,a,e,i){var v,t;do{if(1==(0|a)||2==(0|a)||3==(0|a)||4==(0|a)||10==(0|a)||28==(0|a)||37==(0|a)||43==(0|a)||44==(0|a)||45==(0|a)||46==(0|a)||47==(0|a)||48==(0|a)||49==(0|a)||50==(0|a)){if(0==(0|e)|0==(0|i)){var f=0;t=7;break}t=5;break}if(8==(0|a)||9==(0|a)||11==(0|a)||12==(0|a)||13==(0|a)||14==(0|a)||15==(0|a)||16==(0|a)||17==(0|a)||18==(0|a)||19==(0|a)||20==(0|a)||29==(0|a)||30==(0|a)||31==(0|a)||32==(0|a)||34==(0|a)||38==(0|a)||39==(0|a)||42==(0|a)){if(0==(0|e)){var f=0;t=7;break}t=5;break}if(36==(0|a)){if(0==(0|i)){var f=0;t=7;break}t=5;break}if(35==(0|a)||22==(0|a)||23==(0|a)||24==(0|a)||25==(0|a)||26==(0|a)||27==(0|a))t=5;else{var f=0;t=7}}while(0);do if(5==t){var _=J(r),v=_>>2;if(0==(0|_)){var f=0;break}Se[v]=a,Se[v+1]=e,Se[v+2]=i;var f=_}while(0);var f;return f}function L(r){var a=sr(r);if((0|a)<1)var e=0;else{var i=Rr(r,a);Se[r+44>>2]=i;var e=i}var e;return e}function F(r){var a,a=(r+12|0)>>2,e=Se[a],i=e+1|0;if(Se[a]=i,Ae[e]<<24>>24==70){if(Ae[i]<<24>>24==89){var v=e+2|0;Se[a]=v}var t=Sr(r,1),f=Se[a],_=f+1|0;Se[a]=_;var s=Ae[f]<<24>>24==69?t:0,n=s}else var n=0;var n;return n}function X(r){var a=Ar(r);return a}function j(r){var a,a=(r+12|0)>>2,e=Se[a],i=e+1|0;Se[a]=i;var v=Ae[e]<<24>>24==65;do if(v){var t=Ae[i];if(t<<24>>24==95)var f=0;else if((t-48&255&255)<10){for(var _=i;;){var _,s=_+1|0;if(Se[a]=s,(Ae[s]-48&255&255)>=10)break;var _=s}var n=s-i|0,o=lr(r,i,n);if(0==(0|o)){var l=0;break}var f=o}else{var b=nr(r);if(0==(0|b)){var l=0;break}var f=b}var f,k=Se[a],u=k+1|0;if(Se[a]=u,Ae[k]<<24>>24!=95){var l=0;break}var c=N(r),h=D(r,36,f,c),l=h}else var l=0;while(0);var l;return l}function U(r){var a=Oe;Oe+=4;var e=a,i=r+12|0,v=Se[i>>2],t=v+1|0;Se[i>>2]=t;var f=Ae[v]<<24>>24==77;r:do if(f){var _=N(r),s=I(r,e,1);if(0==(0|s)){var n=0;break}var o=N(r);Se[s>>2]=o;var l=(0|s)==(0|e);do if(!l){if(35==(0|Se[o>>2]))break;var b=Se[e>>2],k=R(r,b);if(0==(0|k)){var n=0;break r}}while(0);var u=Se[e>>2],c=D(r,37,_,u),n=c}else var n=0;while(0);var n;return Oe=a,n}function x(r){var a,a=(r+12|0)>>2,e=Se[a],i=e+1|0;Se[a]=i;var v=Ae[e]<<24>>24==84;do if(v){if(Ae[i]<<24>>24==95)var t=0,f=i;else{var _=sr(r);if((0|_)<0){var s=0;break}var t=_+1|0,f=Se[a]}var f,t;if(Se[a]=f+1|0,Ae[f]<<24>>24!=95){var s=0;break}var n=r+40|0,o=Se[n>>2]+1|0;Se[n>>2]=o;var l=Er(r,t),s=l}else var s=0;while(0);var s;return s}function z(r){var a,e=Oe;Oe+=4;var i=e,v=r+44|0,t=Se[v>>2],a=(r+12|0)>>2,f=Se[a],_=f+1|0;Se[a]=_;var s=Ae[f]<<24>>24==73;r:do if(s){Se[i>>2]=0;for(var n=i;;){var n,o=_r(r);if(0==(0|o)){var l=0;break r}var b=D(r,39,o,0);if(Se[n>>2]=b,0==(0|b)){var l=0;break r}var k=Se[a];if(Ae[k]<<24>>24==69)break;var n=b+8|0}var u=k+1|0;Se[a]=u,Se[v>>2]=t;var l=Se[i>>2]}else var l=0;while(0);var l;return Oe=e,l}function V(r,a){var e,e=(r+12|0)>>2,i=Se[e],v=i+1|0;Se[e]=v;var t=Ae[i]<<24>>24==83;r:do if(t){var f=i+2|0;Se[e]=f;var _=ge[v];if(_<<24>>24==95)var s=0;else{if(!((_-48&255&255)<10|(_-65&255&255)<26)){var n=8&Se[r+8>>2],o=n>>>3,l=0!=(0|n)|0==(0|a);do if(l)var b=o;else{if((Ae[f]-67&255&255)>=2){var b=o;break}var b=1}while(0);for(var b,k=0|ei;;){var k;if(k>>>0>=(ei+196|0)>>>0){var u=0;break r}if(_<<24>>24==Ae[0|k]<<24>>24)break;var k=k+28|0}var c=Se[k+20>>2];if(0!=(0|c)){var h=Se[k+24>>2],d=fr(r,c,h);Se[r+44>>2]=d}if(0==(0|b))var w=k+8|0,p=k+4|0;else var w=k+16|0,p=k+12|0;var p,w,E=Se[w>>2],A=Se[p>>2],g=r+48|0,y=Se[g>>2]+E|0;Se[g>>2]=y;var m=fr(r,A,E),u=m;break}for(var S=_,M=0,C=f;;){var C,M,S;if((S-48&255&255)<10)var R=36*M-48|0;else{if((S-65&255&255)>=26){var u=0;break r}var R=36*M-55|0}var R,T=(S<<24>>24)+R|0;if((0|T)<0){var u=0;break r}var O=C+1|0;Se[e]=O;var N=ge[C];if(N<<24>>24==95)break;var S=N,M=T,C=O}var s=T+1|0}var s;if((0|s)>=(0|Se[r+32>>2])){var u=0;break}var I=r+40|0,P=Se[I>>2]+1|0;Se[I>>2]=P;var u=Se[Se[r+28>>2]+(s<<2)>>2]}else var u=0;while(0);var u;return u}function B(r,a,e,i){var v,t,f,_,s=Oe;Oe+=28;var n,o=s,_=o>>2;Se[_]=r;var l=e+1|0,f=(o+12|0)>>2;Se[f]=l;var b=Jr(l),t=(o+4|0)>>2;if(Se[t]=b,0==(0|b))var k=0,u=1;else{var v=(o+8|0)>>2;Se[v]=0,Se[_+4]=0,Se[_+5]=0;var c=o+24|0;Se[c>>2]=0,H(o,a);var h=Me[t],d=0==(0|h);do{if(!d){var w=Me[v];if(w>>>0>=Me[f]>>>0){n=5;break}Se[v]=w+1|0,Ae[h+w|0]=0,n=6;break}n=5}while(0);5==n&&Y(o,0);var p=Se[t],E=0==(0|p)?Se[c>>2]:Se[f],k=p,u=E}var u,k;return Se[i>>2]=u,Oe=s,k}function H(r,a){var e,i,v,t,f,_,s,n,o,l,b,k,u,c,h,d,w,p,E,A,g,y,m,S,M,C,R,T,O,N,I,P,D,L,F,X,j,U,x,z,V,B,K,G,W,J,vr,tr,fr,_r,sr,nr,or,lr,br,kr,ur,cr,hr,dr,wr,pr=a>>2,Er=r>>2,Ar=Oe;Oe+=184;var gr,yr=Ar,wr=yr>>2,mr=Ar+64,dr=mr>>2,Sr=Ar+72,Mr=Ar+88,Cr=Ar+104,hr=Cr>>2,Rr=Ar+168,Tr=0==(0|a);r:do if(Tr)Z(r);else{var cr=(r+4|0)>>2,Or=Me[cr];if(0==(0|Or))break;var Nr=0|a,Ir=Me[Nr>>2];a:do{if(0==(0|Ir)){if(0!=(4&Se[Er]|0)){var Pr=Se[pr+1],Dr=Se[pr+2];q(r,Pr,Dr);break r}var ur=(r+8|0)>>2,Lr=Me[ur],Fr=a+8|0,Xr=Me[Fr>>2];if((Xr+Lr|0)>>>0>Me[Er+3]>>>0){var jr=Se[pr+1];Q(r,jr,Xr);break r}var Ur=Or+Lr|0,xr=Se[pr+1];Pa(Ur,xr,Xr,1);var zr=Se[ur]+Se[Fr>>2]|0;Se[ur]=zr;break r}if(1==(0|Ir)||2==(0|Ir)){var Vr=Se[pr+1];H(r,Vr);var Br=0==(4&Se[Er]|0),Hr=Me[cr],Kr=0!=(0|Hr);e:do if(Br){do if(Kr){var kr=(r+8|0)>>2,Yr=Me[kr];if((Yr+2|0)>>>0>Me[Er+3]>>>0)break;var Gr=Hr+Yr|0;oe=14906,Ae[Gr]=255&oe,oe>>=8,Ae[Gr+1]=255&oe;var Wr=Se[kr]+2|0;Se[kr]=Wr;break e}while(0);Q(r,0|He.__str120,2)}else{do if(Kr){var Zr=r+8|0,Qr=Me[Zr>>2];if(Qr>>>0>=Me[Er+3]>>>0)break;Se[Zr>>2]=Qr+1|0,Ae[Hr+Qr|0]=46;break e}while(0);Y(r,46)}while(0);var qr=Se[pr+2];H(r,qr);break r}if(3==(0|Ir)){for(var br=(r+20|0)>>2,$r=Me[br],lr=(r+16|0)>>2,Jr=a,ra=0,aa=$r;;){var aa,ra,Jr,ea=Me[Jr+4>>2];if(0==(0|ea)){var ia=ra,va=0;gr=33;break}if(ra>>>0>3){Z(r);break r}var ta=(ra<<4)+yr|0;Se[ta>>2]=aa,Se[br]=ta,Se[((ra<<4)+4>>2)+wr]=ea,Se[((ra<<4)+8>>2)+wr]=0;var fa=Me[lr];Se[((ra<<4)+12>>2)+wr]=fa;var _a=ra+1|0,sa=0|ea,na=Me[sa>>2];if((na-25|0)>>>0>=3){gr=25;break}var Jr=ea,ra=_a,aa=ta}e:do if(25==gr){if(4==(0|na)){Se[dr]=fa,Se[lr]=mr,Se[dr+1]=ea;var oa=Se[sa>>2],la=mr}else var oa=na,la=fa;var la,oa;if(2!=(0|oa)){var ia=_a,va=sa;break}for(var ba=_a,ka=ea+8|0;;){var ka,ba,ua=Me[ka>>2];if((Se[ua>>2]-25|0)>>>0>=3){var ia=ba,va=sa;break e}if(ba>>>0>3)break;var ca=(ba<<4)+yr|0,ha=ba-1|0,da=(ha<<4)+yr|0,or=ca>>2,nr=da>>2;Se[or]=Se[nr],Se[or+1]=Se[nr+1],Se[or+2]=Se[nr+2],Se[or+3]=Se[nr+3],Se[ca>>2]=da,Se[br]=ca,Se[((ha<<4)+4>>2)+wr]=ua,Se[((ha<<4)+8>>2)+wr]=0,Se[((ha<<4)+12>>2)+wr]=la;var ba=ba+1|0,ka=ua+4|0}Z(r);break r}while(0);var va,ia,wa=Se[pr+2];if(H(r,wa),4==(0|Se[va>>2])){var pa=Se[dr];Se[lr]=pa}var Ea=0==(0|ia);e:do if(!Ea)for(var Aa=r+8|0,ga=r+12|0,ya=ia;;){var ya,ma=ya-1|0;if(0==(0|Se[((ma<<4)+8>>2)+wr])){var Sa=Me[cr],Ma=0==(0|Sa);do{if(!Ma){var Ca=Me[Aa>>2];if(Ca>>>0>=Me[ga>>2]>>>0){gr=41;break}Se[Aa>>2]=Ca+1|0,Ae[Sa+Ca|0]=32,gr=42;break}gr=41}while(0);41==gr&&Y(r,32);var Ra=Se[((ma<<4)+4>>2)+wr];$(r,Ra)}if(0==(0|ma))break e;var ya=ma}while(0);Se[br]=$r;break r}if(4==(0|Ir)){var sr=(r+20|0)>>2,Ta=Se[sr];Se[sr]=0;var Oa=Se[pr+1];H(r,Oa);var Na=Me[cr],Ia=0==(0|Na);do{if(!Ia){var _r=(r+8|0)>>2,Da=Me[_r],La=0==(0|Da);do if(!La){if(Ae[Na+(Da-1)|0]<<24>>24!=60)break;Da>>>0<Me[Er+3]>>>0?(Se[_r]=Da+1|0,Ae[Na+Da|0]=32):Y(r,32)}while(0);var Fa=Me[cr];if(0==(0|Fa)){gr=54;break}var Xa=Me[_r];if(Xa>>>0>=Me[Er+3]>>>0){gr=54;break}Se[_r]=Xa+1|0,Ae[Fa+Xa|0]=60,gr=55;break}gr=54}while(0);54==gr&&Y(r,60);var ja=Se[pr+2];H(r,ja);var Ua=Me[cr],xa=0==(0|Ua);do{if(!xa){var fr=(r+8|0)>>2,za=Me[fr],Va=0==(0|za);do if(!Va){if(Ae[Ua+(za-1)|0]<<24>>24!=62)break;za>>>0<Me[Er+3]>>>0?(Se[fr]=za+1|0,Ae[Ua+za|0]=32):Y(r,32)}while(0);var Ba=Me[cr];if(0==(0|Ba)){gr=64;break}var Ha=Me[fr];if(Ha>>>0>=Me[Er+3]>>>0){gr=64;break}Se[fr]=Ha+1|0,Ae[Ba+Ha|0]=62,gr=65;break}gr=64}while(0);64==gr&&Y(r,62),Se[sr]=Ta;break r}if(5==(0|Ir)){var tr=(r+16|0)>>2,Ka=Me[tr];if(0==(0|Ka)){Z(r);break r}for(var Ya=Se[pr+1],Ga=Se[Ka+4>>2];;){var Ga,Ya,Wa=Se[Ga+8>>2];if(0==(0|Wa))break;if(39!=(0|Se[Wa>>2])){Z(r);break r}if((0|Ya)<1){if(0!=(0|Ya))break;var Za=Se[Ka>>2];Se[tr]=Za;var Qa=Se[Wa+4>>2];H(r,Qa),Se[tr]=Ka;break r}var Ya=Ya-1|0,Ga=Wa}Z(r);break r}if(6==(0|Ir)){var qa=Se[pr+2];H(r,qa);break r}if(7==(0|Ir)){var $a=r+8|0,Ja=Me[$a>>2];Ja>>>0<Me[Er+3]>>>0?(Se[$a>>2]=Ja+1|0,Ae[Or+Ja|0]=126):Y(r,126);var re=Se[pr+2];H(r,re);break r}if(8==(0|Ir)){var vr=(r+8|0)>>2,ae=Me[vr];if((ae+11|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str121,11);else{for(var ee=Or+ae|0,ie=0|He.__str121,ve=ee,te=ie+11;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var fe=Se[vr]+11|0;Se[vr]=fe}var _e=Se[pr+1];H(r,_e);break r}if(9==(0|Ir)){var J=(r+8|0)>>2,se=Me[J];if((se+8|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str122,8);else{var ne=Or+se|0,le=0|ne;oe=542397526,Ae[le]=255&oe,oe>>=8,Ae[le+1]=255&oe,oe>>=8,Ae[le+2]=255&oe,oe>>=8,Ae[le+3]=255&oe;var be=ne+4|0;oe=544370534,Ae[be]=255&oe,oe>>=8,Ae[be+1]=255&oe,oe>>=8,Ae[be+2]=255&oe,oe>>=8,Ae[be+3]=255&oe;var ke=Se[J]+8|0;Se[J]=ke}var ue=Se[pr+1];H(r,ue);break r}if(10==(0|Ir)){var W=(r+8|0)>>2,ce=Me[W],he=r+12|0;if((ce+24|0)>>>0>Me[he>>2]>>>0)Q(r,0|He.__str123,24);else{var de=Or+ce|0;Pa(de,0|He.__str123,24,1);var we=Se[W]+24|0;Se[W]=we}var pe=Se[pr+1];H(r,pe);var Ee=Me[cr],ge=0==(0|Ee);do{if(!ge){var ye=Me[W];if((ye+4|0)>>>0>Me[he>>2]>>>0){gr=96;break}var me=Ee+ye|0;oe=762210605,Ae[me]=255&oe,oe>>=8,Ae[me+1]=255&oe,oe>>=8,Ae[me+2]=255&oe,oe>>=8,Ae[me+3]=255&oe;var Ce=Se[W]+4|0;Se[W]=Ce,gr=97;break}gr=96}while(0);96==gr&&Q(r,0|He.__str124,4);var Re=Se[pr+2];H(r,Re);break r}if(11==(0|Ir)){var G=(r+8|0)>>2,Te=Me[G];if((Te+13|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str125,13);else{for(var Ne=Or+Te|0,ie=0|He.__str125,ve=Ne,te=ie+13;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var Ie=Se[G]+13|0;Se[G]=Ie}var Pe=Se[pr+1];H(r,Pe);break r}if(12==(0|Ir)){var K=(r+8|0)>>2,De=Me[K];if((De+18|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str126,18);else{for(var Le=Or+De|0,ie=0|He.__str126,ve=Le,te=ie+18;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var Fe=Se[K]+18|0;Se[K]=Fe}var Xe=Se[pr+1];H(r,Xe);break r}if(13==(0|Ir)){var B=(r+8|0)>>2,je=Me[B];if((je+16|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str127,16);else{for(var Ue=Or+je|0,ie=0|He.__str127,ve=Ue,te=ie+16;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var xe=Se[B]+16|0;Se[B]=xe}var ze=Se[pr+1];H(r,ze);break r}if(14==(0|Ir)){var V=(r+8|0)>>2,Ve=Me[V];if((Ve+21|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str128,21);else{var Be=Or+Ve|0;Pa(Be,0|He.__str128,21,1);var Ke=Se[V]+21|0;Se[V]=Ke}var Ye=Se[pr+1];H(r,Ye);break r}if(15==(0|Ir)){var z=(r+8|0)>>2,Ge=Me[z];if((Ge+17|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str129,17);else{for(var We=Or+Ge|0,ie=0|He.__str129,ve=We,te=ie+17;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var Ze=Se[z]+17|0;Se[z]=Ze}var Qe=Se[pr+1];H(r,Qe);break r}if(16==(0|Ir)){var x=(r+8|0)>>2,qe=Me[x];if((qe+26|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str130,26);else{var $e=Or+qe|0;Pa($e,0|He.__str130,26,1);var Je=Se[x]+26|0;Se[x]=Je}var ri=Se[pr+1];H(r,ri);break r}if(17==(0|Ir)){var U=(r+8|0)>>2,ai=Me[U];if((ai+15|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str131,15);else{for(var ei=Or+ai|0,ie=0|He.__str131,ve=ei,te=ie+15;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var ii=Se[U]+15|0;Se[U]=ii}var vi=Se[pr+1];H(r,vi);break r}if(18==(0|Ir)){var j=(r+8|0)>>2,ti=Me[j];if((ti+19|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str132,19);else{for(var fi=Or+ti|0,ie=0|He.__str132,ve=fi,te=ie+19;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var _i=Se[j]+19|0;Se[j]=_i}var si=Se[pr+1];H(r,si);break r}if(19==(0|Ir)){var X=(r+8|0)>>2,ni=Me[X];if((ni+24|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str133,24);else{var oi=Or+ni|0;Pa(oi,0|He.__str133,24,1);var li=Se[X]+24|0;Se[X]=li}var bi=Se[pr+1];H(r,bi);break r}if(20==(0|Ir)){var F=(r+8|0)>>2,ki=Me[F];if((ki+17|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str134,17);else{for(var ui=Or+ki|0,ie=0|He.__str134,ve=ui,te=ie+17;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var ci=Se[F]+17|0;Se[F]=ci}var hi=Se[pr+1];H(r,hi);break r}if(21==(0|Ir)){var L=(r+8|0)>>2,di=Me[L],wi=a+8|0,pi=Me[wi>>2];if((pi+di|0)>>>0>Me[Er+3]>>>0){var Ei=Se[pr+1];Q(r,Ei,pi);break r}var Ai=Or+di|0,gi=Se[pr+1];Pa(Ai,gi,pi,1);var yi=Se[L]+Se[wi>>2]|0;Se[L]=yi;break r}if(22==(0|Ir)||23==(0|Ir)||24==(0|Ir)){for(var mi=r+20|0;;){var mi,Si=Me[mi>>2];if(0==(0|Si))break a;if(0==(0|Se[Si+8>>2])){var Mi=Me[Se[Si+4>>2]>>2];if((Mi-22|0)>>>0>=3)break a;if((0|Mi)==(0|Ir))break}var mi=0|Si}var Ci=Se[pr+1];H(r,Ci);break r}if(25!=(0|Ir)&&26!=(0|Ir)&&27!=(0|Ir)&&28!=(0|Ir)&&29!=(0|Ir)&&30!=(0|Ir)&&31!=(0|Ir)&&32!=(0|Ir)){if(33==(0|Ir)){var D=(r+8|0)>>2,Ri=Me[D],P=(a+4|0)>>2,I=Me[P]>>2;if(0==(4&Se[Er]|0)){var Ti=Me[I+1];if((Ti+Ri|0)>>>0>Me[Er+3]>>>0){var Oi=Se[I];Q(r,Oi,Ti);break r}var Ni=Or+Ri|0,Ii=Se[I];Pa(Ni,Ii,Ti,1);var Pi=Se[D]+Se[Se[P]+4>>2]|0;Se[D]=Pi;break r}var Di=Me[I+3];if((Di+Ri|0)>>>0>Me[Er+3]>>>0){var Li=Se[I+2];Q(r,Li,Di);break r}var Fi=Or+Ri|0,Xi=Se[I+2];Pa(Fi,Xi,Di,1);var ji=Se[D]+Se[Se[P]+12>>2]|0;Se[D]=ji;break r}if(34==(0|Ir)){var Ui=Se[pr+1];H(r,Ui);break r}if(35==(0|Ir)){var N=(0|r)>>2;if(0!=(32&Se[N]|0)){var xi=Se[Er+5];rr(r,a,xi)}var zi=a+4|0,Vi=0==(0|Se[zi>>2]);e:do if(!Vi){var O=(r+20|0)>>2,Bi=Se[O],Hi=0|Mr;Se[Hi>>2]=Bi,Se[O]=Mr,Se[Mr+4>>2]=a;var Ki=Mr+8|0;Se[Ki>>2]=0;var Yi=Se[Er+4];Se[Mr+12>>2]=Yi;var Gi=Se[zi>>2];H(r,Gi);var Wi=Se[Hi>>2];if(Se[O]=Wi,0!=(0|Se[Ki>>2]))break r;if(0!=(32&Se[N]|0))break;var Zi=Me[cr],Qi=0==(0|Zi);do if(!Qi){var qi=r+8|0,$i=Me[qi>>2];if($i>>>0>=Me[Er+3]>>>0)break;Se[qi>>2]=$i+1|0,Ae[Zi+$i|0]=32;break e}while(0);Y(r,32)}while(0);if(0!=(32&Se[N]|0))break r;var Ji=Se[Er+5];rr(r,a,Ji);break r}if(36==(0|Ir)){var T=(r+20|0)>>2,rv=Me[T],av=0|Cr;Se[hr]=rv,Se[T]=av,Se[hr+1]=a;var ev=Cr+8|0;Se[ev>>2]=0;var iv=Se[Er+4];Se[hr+3]=iv;for(var vv=rv,tv=1;;){var tv,vv;if(0==(0|vv))break;if((Se[Se[vv+4>>2]>>2]-22|0)>>>0>=3)break;var fv=vv+8|0;if(0==(0|Se[fv>>2])){if(tv>>>0>3){Z(r);break r}var _v=(tv<<4)+Cr|0,R=_v>>2,C=vv>>2;Se[R]=Se[C],Se[R+1]=Se[C+1],Se[R+2]=Se[C+2],Se[R+3]=Se[C+3];var sv=Se[T];Se[_v>>2]=sv,Se[T]=_v,Se[fv>>2]=1;var nv=tv+1|0}else var nv=tv;var nv,vv=Se[vv>>2],tv=nv}var ov=Se[pr+2];if(H(r,ov),Se[T]=rv,0!=(0|Se[ev>>2]))break r;if(tv>>>0>1){for(var lv=tv;;){var lv,bv=lv-1|0,kv=Se[((bv<<4)+4>>2)+hr];if($(r,kv),bv>>>0<=1)break;var lv=bv}var uv=Se[T]}else var uv=rv;var uv;ar(r,a,uv);break r}if(37==(0|Ir)){var M=(r+20|0)>>2,cv=Se[M],hv=0|Rr;Se[hv>>2]=cv,Se[M]=Rr,Se[Rr+4>>2]=a;var dv=Rr+8|0;Se[dv>>2]=0;var wv=Se[Er+4];Se[Rr+12>>2]=wv;var pv=a+4|0,Ev=Se[pr+2];H(r,Ev);var Av=0==(0|Se[dv>>2]);e:do if(Av){var gv=Me[cr],yv=0==(0|gv);do{if(!yv){var mv=r+8|0,Sv=Me[mv>>2];if(Sv>>>0>=Me[Er+3]>>>0){gr=187;break}Se[mv>>2]=Sv+1|0,Ae[gv+Sv|0]=32,gr=188;break}gr=187}while(0);187==gr&&Y(r,32);var Mv=Se[pv>>2];H(r,Mv);var Cv=Me[cr],Rv=0==(0|Cv);do if(!Rv){var S=(r+8|0)>>2,Tv=Me[S];if((Tv+3|0)>>>0>Me[Er+3]>>>0)break;var Ov=Cv+Tv|0;Ae[Ov]=Ae[0|He.__str135],Ae[Ov+1]=Ae[(0|He.__str135)+1],Ae[Ov+2]=Ae[(0|He.__str135)+2];var Nv=Se[S]+3|0;Se[S]=Nv;break e}while(0);Q(r,0|He.__str135,3)}while(0);var Iv=Se[hv>>2];Se[M]=Iv;break r}if(38==(0|Ir)||39==(0|Ir)){var Pv=Se[pr+1];H(r,Pv);var Dv=a+8|0;if(0==(0|Se[Dv>>2]))break r;var Lv=Me[cr],Fv=0==(0|Lv);do{if(!Fv){var m=(r+8|0)>>2,Xv=Me[m];if((Xv+2|0)>>>0>Me[Er+3]>>>0){gr=197;break}var jv=Lv+Xv|0;oe=8236,Ae[jv]=255&oe,oe>>=8,Ae[jv+1]=255&oe;var Uv=Se[m]+2|0;Se[m]=Uv,gr=198;break}gr=197}while(0);197==gr&&Q(r,0|He.__str136,2);var xv=Se[Dv>>2];H(r,xv);break r}if(40==(0|Ir)){var y=(r+8|0)>>2,zv=Me[y],g=(r+12|0)>>2;if((zv+8|0)>>>0>Me[g]>>>0)Q(r,0|He.__str137,8);else{var Vv=Or+zv|0,le=0|Vv;oe=1919250543,Ae[le]=255&oe,oe>>=8,Ae[le+1]=255&oe,oe>>=8,Ae[le+2]=255&oe,oe>>=8,Ae[le+3]=255&oe;var be=Vv+4|0;oe=1919906913,Ae[be]=255&oe,oe>>=8,Ae[be+1]=255&oe,oe>>=8,Ae[be+2]=255&oe,oe>>=8,Ae[be+3]=255&oe;var Bv=Se[y]+8|0;Se[y]=Bv}var A=(a+4|0)>>2,Hv=(Ae[Se[Se[A]+4>>2]]-97&255&255)<26;e:do if(Hv){var Kv=Me[cr],Yv=0==(0|Kv);do if(!Yv){var Gv=Me[y];if(Gv>>>0>=Me[g]>>>0)break;Se[y]=Gv+1|0,Ae[Kv+Gv|0]=32;break e}while(0);Y(r,32)}while(0);var Wv=Me[cr],Zv=0==(0|Wv);do{if(!Zv){var Qv=Me[y],qv=Me[A],$v=Me[qv+8>>2];if(($v+Qv|0)>>>0>Me[g]>>>0){var Jv=qv,rt=$v;break}var at=Wv+Qv|0,et=Se[qv+4>>2];Pa(at,et,$v,1);var it=Se[y]+Se[Se[A]+8>>2]|0;Se[y]=it;break r}var vt=Me[A],Jv=vt,rt=Se[vt+8>>2]}while(0);var rt,Jv,tt=Se[Jv+4>>2];Q(r,tt,rt);break r}if(41==(0|Ir)){var E=(r+8|0)>>2,ft=Me[E];if((ft+9|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str10180,9);else{for(var _t=Or+ft|0,ie=0|He.__str10180,ve=_t,te=ie+9;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var st=Se[E]+9|0;Se[E]=st}var nt=Se[pr+2];H(r,nt);break r}if(42==(0|Ir)){var p=(r+8|0)>>2,ot=Me[p];if((ot+9|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str10180,9);else{for(var lt=Or+ot|0,ie=0|He.__str10180,ve=lt,te=ie+9;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var bt=Se[p]+9|0;Se[p]=bt}er(r,a);break r}if(43==(0|Ir)){var kt=a+4|0,ut=Se[kt>>2],ct=42==(0|Se[ut>>2]);e:do if(ct){var w=(r+8|0)>>2,ht=Me[w],dt=r+12|0;ht>>>0<Me[dt>>2]>>>0?(Se[w]=ht+1|0,Ae[Or+ht|0]=40):Y(r,40);var wt=Se[kt>>2];er(r,wt);var pt=Me[cr],Et=0==(0|pt);do if(!Et){var At=Me[w];if(At>>>0>=Me[dt>>2]>>>0)break;Se[w]=At+1|0,Ae[pt+At|0]=41;break e}while(0);Y(r,41)}else ir(r,ut);while(0);var gt=Me[cr],yt=0==(0|gt);do{if(!yt){var mt=r+8|0,St=Me[mt>>2];if(St>>>0>=Me[Er+3]>>>0){gr=232;break}Se[mt>>2]=St+1|0,Ae[gt+St|0]=40,gr=233;break}gr=232}while(0);232==gr&&Y(r,40);var Mt=Se[pr+2];H(r,Mt);var Ct=Me[cr],Rt=0==(0|Ct);do if(!Rt){var Tt=r+8|0,Ot=Me[Tt>>2];if(Ot>>>0>=Me[Er+3]>>>0)break;Se[Tt>>2]=Ot+1|0,Ae[Ct+Ot|0]=41;break r}while(0);Y(r,41);break r}if(44==(0|Ir)){var d=(a+8|0)>>2;if(45==(0|Se[Se[d]>>2])){var h=(a+4|0)>>2,Nt=Se[h],It=40==(0|Se[Nt>>2]);do if(It){var Pt=Se[Nt+4>>2];if(1!=(0|Se[Pt+8>>2]))break;if(Ae[Se[Pt+4>>2]]<<24>>24!=62)break;var Dt=r+8|0,Lt=Me[Dt>>2];Lt>>>0<Me[Er+3]>>>0?(Se[Dt>>2]=Lt+1|0,Ae[Or+Lt|0]=40):Y(r,40)}while(0);var Ft=Me[cr],Xt=0==(0|Ft);do{if(!Xt){var jt=r+8|0,Ut=Me[jt>>2];if(Ut>>>0>=Me[Er+3]>>>0){gr=248;break}Se[jt>>2]=Ut+1|0,Ae[Ft+Ut|0]=40,gr=249;break}gr=248}while(0);248==gr&&Y(r,40);var xt=Se[Se[d]+4>>2];H(r,xt);var zt=Me[cr],Vt=0==(0|zt);do{if(!Vt){var c=(r+8|0)>>2,Bt=Me[c];if((Bt+2|0)>>>0>Me[Er+3]>>>0){gr=252;break}var Ht=zt+Bt|0;oe=8233,Ae[Ht]=255&oe,oe>>=8,Ae[Ht+1]=255&oe;var Kt=Se[c]+2|0;Se[c]=Kt,gr=253;break}gr=252}while(0);252==gr&&Q(r,0|He.__str139,2);var Yt=Se[h];ir(r,Yt);var Gt=Me[cr],Wt=0==(0|Gt);do{if(!Wt){var u=(r+8|0)>>2,Zt=Me[u];if((Zt+2|0)>>>0>Me[Er+3]>>>0){gr=256;break}var Qt=Gt+Zt|0;oe=10272,Ae[Qt]=255&oe,oe>>=8,Ae[Qt+1]=255&oe;var qt=Se[u]+2|0;Se[u]=qt,gr=257;break}gr=256}while(0);256==gr&&Q(r,0|He.__str140,2);var $t=Se[Se[d]+8>>2];H(r,$t);var Jt=Me[cr],rf=0==(0|Jt);do{if(!rf){var af=r+8|0,ef=Me[af>>2];if(ef>>>0>=Me[Er+3]>>>0){gr=260;break}Se[af>>2]=ef+1|0,Ae[Jt+ef|0]=41,gr=261;break}gr=260}while(0);260==gr&&Y(r,41);var vf=Se[h];if(40!=(0|Se[vf>>2]))break r;var tf=Se[vf+4>>2];if(1!=(0|Se[tf+8>>2]))break r;if(Ae[Se[tf+4>>2]]<<24>>24!=62)break r;var ff=Me[cr],_f=0==(0|ff);do if(!_f){var sf=r+8|0,nf=Me[sf>>2];if(nf>>>0>=Me[Er+3]>>>0)break;Se[sf>>2]=nf+1|0,Ae[ff+nf|0]=41;break r}while(0);Y(r,41);break r}Z(r);break r}if(45==(0|Ir)){Z(r);break r}if(46==(0|Ir)){var of=a+4|0,k=(a+8|0)>>2,lf=Se[k],bf=47==(0|Se[lf>>2]);do if(bf){if(48!=(0|Se[Se[lf+8>>2]>>2]))break;var b=(r+8|0)>>2,kf=Me[b],l=(r+12|0)>>2;kf>>>0<Me[l]>>>0?(Se[b]=kf+1|0,Ae[Or+kf|0]=40):Y(r,40);var uf=Se[Se[k]+4>>2];H(r,uf);var cf=Me[cr],hf=0==(0|cf);do{if(!hf){var df=Me[b];if((df+2|0)>>>0>Me[l]>>>0){gr=278;break}var wf=cf+df|0;oe=8233,Ae[wf]=255&oe,oe>>=8,Ae[wf+1]=255&oe;var pf=Se[b]+2|0;Se[b]=pf,gr=279;break}gr=278}while(0);278==gr&&Q(r,0|He.__str139,2);var Ef=Se[of>>2];ir(r,Ef);var Af=Me[cr],gf=0==(0|Af);do{if(!gf){var yf=Me[b];if((yf+2|0)>>>0>Me[l]>>>0){gr=282;break}var mf=Af+yf|0;oe=10272,Ae[mf]=255&oe,oe>>=8,Ae[mf+1]=255&oe;var Sf=Se[b]+2|0;Se[b]=Sf,gr=283;break}gr=282}while(0);282==gr&&Q(r,0|He.__str140,2);var Mf=Se[Se[Se[k]+8>>2]+4>>2];H(r,Mf);var Cf=Me[cr],Rf=0==(0|Cf);do{if(!Rf){var Tf=Me[b];if((Tf+5|0)>>>0>Me[l]>>>0){gr=286;break}var Of=Cf+Tf|0;Ae[Of]=Ae[0|He.__str141],Ae[Of+1]=Ae[(0|He.__str141)+1],Ae[Of+2]=Ae[(0|He.__str141)+2],Ae[Of+3]=Ae[(0|He.__str141)+3],Ae[Of+4]=Ae[(0|He.__str141)+4];var Nf=Se[b]+5|0;Se[b]=Nf,gr=287;break}gr=286}while(0);286==gr&&Q(r,0|He.__str141,5);var If=Se[Se[Se[k]+8>>2]+8>>2];H(r,If);var Pf=Me[cr],Df=0==(0|Pf);do if(!Df){var Lf=Me[b];if(Lf>>>0>=Me[l]>>>0)break;Se[b]=Lf+1|0,Ae[Pf+Lf|0]=41;break r}while(0);Y(r,41);break r}while(0);Z(r);break r}if(47==(0|Ir)||48==(0|Ir)){Z(r);break r}if(49==(0|Ir)||50==(0|Ir)){var Ff=a+4|0,Xf=Se[Ff>>2],jf=33==(0|Se[Xf>>2]);do{if(jf){var Uf=Me[Se[Xf+4>>2]+16>>2];if(1==(0|Uf)||2==(0|Uf)||3==(0|Uf)||4==(0|Uf)||5==(0|Uf)||6==(0|Uf)){var xf=a+8|0;if(0!=(0|Se[Se[xf>>2]>>2])){var zf=Uf;break}if(50==(0|Ir)){var Vf=r+8|0,Bf=Me[Vf>>2];Bf>>>0<Me[Er+3]>>>0?(Se[Vf>>2]=Bf+1|0,Ae[Or+Bf|0]=45):Y(r,45)}var Hf=Se[xf>>2];if(H(r,Hf),2==(0|Uf)){var Kf=Me[cr],Yf=0==(0|Kf);do if(!Yf){var Gf=r+8|0,Wf=Me[Gf>>2];if(Wf>>>0>=Me[Er+3]>>>0)break;Se[Gf>>2]=Wf+1|0,Ae[Kf+Wf|0]=117;break r}while(0);Y(r,117);break r}if(3==(0|Uf)){var Zf=Me[cr],Qf=0==(0|Zf);do if(!Qf){var qf=r+8|0,$f=Me[qf>>2];if($f>>>0>=Me[Er+3]>>>0)break;Se[qf>>2]=$f+1|0,Ae[Zf+$f|0]=108;break r}while(0);Y(r,108);break r}if(4==(0|Uf)){var Jf=Me[cr],r_=0==(0|Jf);do if(!r_){var o=(r+8|0)>>2,a_=Me[o];if((a_+2|0)>>>0>Me[Er+3]>>>0)break;var e_=Jf+a_|0;oe=27765,Ae[e_]=255&oe,oe>>=8,Ae[e_+1]=255&oe;var i_=Se[o]+2|0;Se[o]=i_;break r}while(0);Q(r,0|He.__str142,2);break r}if(5==(0|Uf)){var v_=Me[cr],t_=0==(0|v_);do if(!t_){var n=(r+8|0)>>2,f_=Me[n];if((f_+2|0)>>>0>Me[Er+3]>>>0)break;var __=v_+f_|0;oe=27756,Ae[__]=255&oe,oe>>=8,Ae[__+1]=255&oe;var s_=Se[n]+2|0;Se[n]=s_;break r}while(0);Q(r,0|He.__str143,2);break r}if(6==(0|Uf)){var n_=Me[cr],o_=0==(0|n_);do if(!o_){var s=(r+8|0)>>2,l_=Me[s];if((l_+3|0)>>>0>Me[Er+3]>>>0)break;var b_=n_+l_|0;Ae[b_]=Ae[0|He.__str144],Ae[b_+1]=Ae[(0|He.__str144)+1],Ae[b_+2]=Ae[(0|He.__str144)+2];var k_=Se[s]+3|0;Se[s]=k_;break r}while(0);Q(r,0|He.__str144,3);break r}break r}if(7==(0|Uf)){var _=Se[pr+2]>>2;if(0!=(0|Se[_])){var zf=7;break}if(!(1==(0|Se[_+2])&49==(0|Ir))){var zf=Uf;break}var u_=Ae[Se[_+1]]<<24>>24;if(48==(0|u_)){var f=(r+8|0)>>2,c_=Me[f];if((c_+5|0)>>>0>Me[Er+3]>>>0){Q(r,0|He.__str145,5);break r}var h_=Or+c_|0;Ae[h_]=Ae[0|He.__str145],Ae[h_+1]=Ae[(0|He.__str145)+1],Ae[h_+2]=Ae[(0|He.__str145)+2],Ae[h_+3]=Ae[(0|He.__str145)+3],Ae[h_+4]=Ae[(0|He.__str145)+4];var d_=Se[f]+5|0;Se[f]=d_;break r}if(49==(0|u_)){var t=(r+8|0)>>2,w_=Me[t];if((w_+4|0)>>>0>Me[Er+3]>>>0){Q(r,0|He.__str146,4);break r}var p_=Or+w_|0;oe=1702195828,Ae[p_]=255&oe,oe>>=8,Ae[p_+1]=255&oe,oe>>=8,Ae[p_+2]=255&oe,oe>>=8,Ae[p_+3]=255&oe;var E_=Se[t]+4|0;Se[t]=E_;break r}var zf=Uf;break}var zf=Uf;break}var zf=0}while(0);var zf,v=(r+8|0)>>2,A_=Me[v],i=(r+12|0)>>2;A_>>>0<Me[i]>>>0?(Se[v]=A_+1|0,Ae[Or+A_|0]=40):Y(r,40);var g_=Se[Ff>>2];H(r,g_);var y_=Me[cr],m_=0==(0|y_);do{if(!m_){var S_=Me[v];if(S_>>>0>=Me[i]>>>0){gr=335;break}Se[v]=S_+1|0,Ae[y_+S_|0]=41,gr=336;break}gr=335}while(0);335==gr&&Y(r,41);var M_=50==(0|Se[Nr>>2]);e:do if(M_){var C_=Me[cr],R_=0==(0|C_);do if(!R_){var T_=Me[v];if(T_>>>0>=Me[i]>>>0)break;Se[v]=T_+1|0,Ae[C_+T_|0]=45;break e}while(0);Y(r,45)}while(0);if(8==(0|zf)){var O_=Me[cr],N_=0==(0|O_);do{if(!N_){var I_=Me[v];if(I_>>>0>=Me[i]>>>0){gr=345;break}Se[v]=I_+1|0,Ae[O_+I_|0]=91,gr=346;break}gr=345}while(0);345==gr&&Y(r,91);var P_=Se[pr+2];H(r,P_);var D_=Me[cr],L_=0==(0|D_);do if(!L_){var F_=Me[v];if(F_>>>0>=Me[i]>>>0)break;Se[v]=F_+1|0,Ae[D_+F_|0]=93;break r}while(0);Y(r,93);break r}var X_=Se[pr+2];H(r,X_);break r}Z(r);break r}}while(0);var e=(r+20|0)>>2,j_=Se[e],U_=0|Sr;Se[U_>>2]=j_,Se[e]=Sr,Se[Sr+4>>2]=a;var x_=Sr+8|0;Se[x_>>2]=0;var z_=Se[Er+4];Se[Sr+12>>2]=z_;var V_=Se[pr+1];H(r,V_),0==(0|Se[x_>>2])&&$(r,a);var B_=Se[U_>>2];Se[e]=B_}while(0);Oe=Ar}function K(r,a,e,i){var v=i>>2;Se[v]=r,Se[v+1]=r+e|0,Se[v+2]=a,Se[v+3]=r,Se[v+6]=e<<1,Se[v+5]=0,Se[v+9]=e,Se[v+8]=0,Se[v+10]=0,Se[v+11]=0,Se[v+12]=0}function Y(r,a){var e,i=r+4|0,v=Me[i>>2],t=0==(0|v);do if(!t){var e=(r+8|0)>>2,f=Me[e];if(f>>>0<Me[r+12>>2]>>>0)var _=v,s=f;else{tr(r,1);var n=Me[i>>2];if(0==(0|n))break;var _=n,s=Se[e]}var s,_;Ae[_+s|0]=255&a;var o=Se[e]+1|0;Se[e]=o}while(0)}function G(r,a,e,i){var v,t=i>>2,f=Oe;Oe+=4;var _=f,v=_>>2,s=0==(0|r);do if(s){if(0==(0|i)){var n=0;break}Se[t]=-3;var n=0}else{var o=0==(0|e);if(0!=(0|a)&o){if(0==(0|i)){var n=0;break}Se[t]=-3;var n=0}else{var l=W(r,_);if(0==(0|l)){if(0==(0|i)){var n=0;break}if(1==(0|Se[v])){Se[t]=-1;var n=0}else{Se[t]=-2;var n=0}}else{var b=0==(0|a);do if(b){if(o){var k=l;break}var u=Se[v];Se[e>>2]=u;var k=l}else{var c=Ca(l);if(c>>>0<Me[e>>2]>>>0){Ra(a,l);va(l);var k=a}else{va(a);var h=Se[v];Se[e>>2]=h;var k=l}}while(0);var k;if(0==(0|i)){var n=k;break}Se[t]=0;var n=k}}}while(0);var n;return Oe=f,n}function W(r,a){var e,i=Oe;Oe+=52;var v,t=i,e=t>>2;Se[a>>2]=0;var f=Ca(r),_=Ae[r]<<24>>24==95;do{if(_){if(Ae[r+1|0]<<24>>24==90){var s=0;v=13;break}v=3;break}v=3}while(0);do if(3==v){var n=Na(r,0|He.__str117,8);if(0!=(0|n)){var s=1;v=13;break}var o=Ae[r+8|0];if(o<<24>>24!=46&&o<<24>>24!=95&&o<<24>>24!=36){var s=1;v=13;break}var l=r+9|0,b=Ae[l];if(b<<24>>24!=68&&b<<24>>24!=73){
var s=1;v=13;break}if(Ae[r+10|0]<<24>>24!=95){var s=1;v=13;break}var k=f+29|0,u=Jr(k);if(0==(0|u)){Se[a>>2]=1;var c=0;v=19;break}Ae[l]<<24>>24==73?Pa(u,0|He.__str118,30,1):Pa(u,0|He.__str119,29,1);var h=r+11|0,c=(Ia(u,h),u);v=19;break}while(0);if(13==v){var s;K(r,17,f,t);var d=Se[e+6],w=Ta(),p=Oe;Oe+=12*d,Oe=Oe+3>>2<<2;var E=Oe;if(Oe+=4*Se[e+9],Oe=Oe+3>>2<<2,Se[e+4]=p,Se[e+7]=E,s)var A=N(t),g=A;else var y=T(t,1),g=y;var g,m=Ae[Se[e+3]]<<24>>24==0?g:0,S=Se[e+12]+f+10*Se[e+10]|0;if(0==(0|m))var M=0;else var C=S/8+S|0,R=B(17,m,C,a),M=R;var M;Oa(w);var c=M}var c;return Oe=i,c}function Z(r){var a=r+4|0,e=Se[a>>2];va(e),Se[a>>2]=0}function Q(r,a,e){var i,v=r+4|0,t=Me[v>>2],f=0==(0|t);do if(!f){var i=(r+8|0)>>2,_=Me[i];if((_+e|0)>>>0>Me[r+12>>2]>>>0){tr(r,e);var s=Me[v>>2];if(0==(0|s))break;var n=s,o=Se[i]}else var n=t,o=_;var o,n;Pa(n+o|0,a,e,1);var l=Se[i]+e|0;Se[i]=l}while(0)}function q(r,a,e){var i,v,t=a+e|0,f=(0|e)>0;r:do if(f)for(var _=t,s=r+4|0,i=(r+8|0)>>2,n=r+12|0,o=a;;){var o,l=(_-o|0)>3;a:do{if(l){if(Ae[o]<<24>>24!=95){v=21;break}if(Ae[o+1|0]<<24>>24!=95){v=21;break}if(Ae[o+2|0]<<24>>24!=85){v=21;break}for(var b=o+3|0,k=0;;){var k,b;if(b>>>0>=t>>>0){v=21;break a}var u=ge[b],c=u<<24>>24;if((u-48&255&255)<10)var h=c-48|0;else if((u-65&255&255)<6)var h=c-55|0;else{if((u-97&255&255)>=6)break;var h=c-87|0}var h,b=b+1|0,k=(k<<4)+h|0}if(!(u<<24>>24==95&k>>>0<256)){v=21;break}var d=Me[s>>2],w=0==(0|d);do if(!w){var p=Me[i];if(p>>>0>=Me[n>>2]>>>0)break;Se[i]=p+1|0,Ae[d+p|0]=255&k;var E=b;v=25;break a}while(0);Y(r,k);var E=b;v=25;break}v=21}while(0);a:do if(21==v){var A=Me[s>>2],g=0==(0|A);do if(!g){var y=Me[i];if(y>>>0>=Me[n>>2]>>>0)break;var m=Ae[o];Se[i]=y+1|0,Ae[A+y|0]=m;var E=o;break a}while(0);var S=Ae[o]<<24>>24;Y(r,S);var E=o}while(0);var E,M=E+1|0;if(M>>>0>=t>>>0)break r;var o=M}while(0)}function $(r,a){var e,i,v,t,f,_,s,n=r>>2,o=Se[a>>2];r:do if(22==(0|o)||25==(0|o)){var l=Me[n+1],b=0==(0|l);do if(!b){var _=(r+8|0)>>2,k=Me[_];if((k+9|0)>>>0>Me[n+3]>>>0)break;for(var u=l+k|0,c=0|He.__str147,h=u,d=c+9;c<d;c++,h++)Ae[h]=Ae[c];var w=Se[_]+9|0;Se[_]=w;break r}while(0);Q(r,0|He.__str147,9)}else if(23==(0|o)||26==(0|o)){var p=Me[n+1],E=0==(0|p);do if(!E){var f=(r+8|0)>>2,A=Me[f];if((A+9|0)>>>0>Me[n+3]>>>0)break;for(var g=p+A|0,c=0|He.__str148,h=g,d=c+9;c<d;c++,h++)Ae[h]=Ae[c];var y=Se[f]+9|0;Se[f]=y;break r}while(0);Q(r,0|He.__str148,9)}else if(24==(0|o)||27==(0|o)){var m=Me[n+1],S=0==(0|m);do if(!S){var t=(r+8|0)>>2,M=Me[t];if((M+6|0)>>>0>Me[n+3]>>>0)break;var C=m+M|0;Ae[C]=Ae[0|He.__str149],Ae[C+1]=Ae[(0|He.__str149)+1],Ae[C+2]=Ae[(0|He.__str149)+2],Ae[C+3]=Ae[(0|He.__str149)+3],Ae[C+4]=Ae[(0|He.__str149)+4],Ae[C+5]=Ae[(0|He.__str149)+5];var R=Se[t]+6|0;Se[t]=R;break r}while(0);Q(r,0|He.__str149,6)}else if(28==(0|o)){var T=Me[n+1],O=0==(0|T);do{if(!O){var N=r+8|0,I=Me[N>>2];if(I>>>0>=Me[n+3]>>>0){s=17;break}Se[N>>2]=I+1|0,Ae[T+I|0]=32,s=18;break}s=17}while(0);17==s&&Y(r,32);var P=Se[a+8>>2];H(r,P)}else if(29==(0|o)){if(0!=(4&Se[n]|0))break;var D=Me[n+1],L=0==(0|D);do if(!L){var F=r+8|0,X=Me[F>>2];if(X>>>0>=Me[n+3]>>>0)break;Se[F>>2]=X+1|0,Ae[D+X|0]=42;break r}while(0);Y(r,42)}else if(30==(0|o)){var j=Me[n+1],U=0==(0|j);do if(!U){var x=r+8|0,z=Me[x>>2];if(z>>>0>=Me[n+3]>>>0)break;Se[x>>2]=z+1|0,Ae[j+z|0]=38;break r}while(0);Y(r,38)}else if(31==(0|o)){var V=Me[n+1],B=0==(0|V);do if(!B){var v=(r+8|0)>>2,K=Me[v];if((K+8|0)>>>0>Me[n+3]>>>0)break;var G=V+K|0,W=0|G;oe=1886220131,Ae[W]=255&oe,oe>>=8,Ae[W+1]=255&oe,oe>>=8,Ae[W+2]=255&oe,oe>>=8,Ae[W+3]=255&oe;var Z=G+4|0;oe=544761196,Ae[Z]=255&oe,oe>>=8,Ae[Z+1]=255&oe,oe>>=8,Ae[Z+2]=255&oe,oe>>=8,Ae[Z+3]=255&oe;var q=Se[v]+8|0;Se[v]=q;break r}while(0);Q(r,0|He.__str150,8)}else if(32==(0|o)){var $=Me[n+1],J=0==(0|$);do if(!J){var i=(r+8|0)>>2,rr=Me[i];if((rr+10|0)>>>0>Me[n+3]>>>0)break;for(var ar=$+rr|0,c=0|He.__str151,h=ar,d=c+10;c<d;c++,h++)Ae[h]=Ae[c];var er=Se[i]+10|0;Se[i]=er;break r}while(0);Q(r,0|He.__str151,10)}else if(37==(0|o)){var ir=r+4|0,vr=Me[ir>>2],tr=0==(0|vr);do{if(!tr){var fr=r+8|0,_r=Me[fr>>2];if(0!=(0|_r)&&Ae[vr+(_r-1)|0]<<24>>24==40){s=42;break}if(_r>>>0>=Me[n+3]>>>0){s=41;break}Se[fr>>2]=_r+1|0,Ae[vr+_r|0]=32,s=42;break}s=41}while(0);41==s&&Y(r,32);var sr=Se[a+4>>2];H(r,sr);var nr=Me[ir>>2],or=0==(0|nr);do if(!or){var e=(r+8|0)>>2,lr=Me[e];if((lr+3|0)>>>0>Me[n+3]>>>0)break;var br=nr+lr|0;Ae[br]=Ae[0|He.__str135],Ae[br+1]=Ae[(0|He.__str135)+1],Ae[br+2]=Ae[(0|He.__str135)+2];var kr=Se[e]+3|0;Se[e]=kr;break r}while(0);Q(r,0|He.__str135,3)}else if(3==(0|o)){var ur=Se[a+4>>2];H(r,ur)}else H(r,a);while(0)}function J(r){var a=r+20|0,e=Se[a>>2];if((0|e)<(0|Se[r+24>>2])){var i=Se[r+16>>2]+12*e|0,v=e+1|0;Se[a>>2]=v;var t=i}else var t=0;var t;return t}function rr(r,a,e){var i,v,t,f,_=r>>2,s=e,t=s>>2,n=0;r:for(;;){var n,s,o=0==(0|s);do if(!o){if(0!=(0|Se[t+2]))break;var l=Se[Se[t+1]>>2];if(29==(0|l)||30==(0|l)){f=9;break r}if(22==(0|l)||23==(0|l)||24==(0|l)||28==(0|l)||31==(0|l)||32==(0|l)||37==(0|l)){var b=Se[_+1];f=12;break r}var s=Se[t],t=s>>2,n=1;continue r}while(0);if(0!=(0|Se[a+4>>2])&0==(0|n)){f=9;break}var k=0,u=r+4|0,v=u>>2;f=22;break}do if(9==f){var c=Se[_+1];if(0==(0|c)){f=17;break}var h=Se[_+2];if(0==(0|h)){var d=c;f=13;break}var w=Ae[c+(h-1)|0];if(w<<24>>24==40||w<<24>>24==42){f=18;break}var b=c;f=12;break}while(0);do if(12==f){var b;if(0==(0|b)){f=17;break}var d=b;f=13;break}while(0);do if(13==f){var d,p=r+8|0,E=Me[p>>2];if(0!=(0|E)&&Ae[d+(E-1)|0]<<24>>24==32){f=18;break}if(E>>>0>=Me[_+3]>>>0){f=17;break}Se[p>>2]=E+1|0,Ae[d+E|0]=32,f=18;break}while(0);do if(17==f){Y(r,32),f=18;break}while(0);r:do if(18==f){var A=r+4|0,g=Me[A>>2],y=0==(0|g);do if(!y){var m=r+8|0,S=Me[m>>2];if(S>>>0>=Me[_+3]>>>0)break;Se[m>>2]=S+1|0,Ae[g+S|0]=40;var k=1,u=A,v=u>>2;break r}while(0);Y(r,40);var k=1,u=A,v=u>>2}while(0);var u,k,i=(r+20|0)>>2,M=Se[i];Se[i]=0,vr(r,e,0);r:do if(k){var C=Me[v],R=0==(0|C);do if(!R){var T=r+8|0,O=Me[T>>2];if(O>>>0>=Me[_+3]>>>0)break;Se[T>>2]=O+1|0,Ae[C+O|0]=41;break r}while(0);Y(r,41)}while(0);var N=Me[v],I=0==(0|N);do{if(!I){var P=r+8|0,D=Me[P>>2];if(D>>>0>=Me[_+3]>>>0){f=30;break}Se[P>>2]=D+1|0,Ae[N+D|0]=40,f=31;break}f=30}while(0);30==f&&Y(r,40);var L=Se[a+8>>2];0!=(0|L)&&H(r,L);var F=Me[v],X=0==(0|F);do{if(!X){var j=r+8|0,U=Me[j>>2];if(U>>>0>=Me[_+3]>>>0){f=36;break}Se[j>>2]=U+1|0,Ae[F+U|0]=41,f=37;break}f=36}while(0);36==f&&Y(r,41),vr(r,e,1),Se[i]=M}function ar(r,a,e){var i,v,t,f=r>>2,_=0==(0|e);do{if(!_){var s=e,v=s>>2;r:for(;;){var s;if(0==(0|s)){var n=1;t=14;break}if(0==(0|Se[v+2])){var o=36==(0|Se[Se[v+1]>>2]),l=1&o^1;if(o){var n=l;t=14;break}var b=r+4|0,k=Me[b>>2],u=0==(0|k);do{if(!u){var i=(r+8|0)>>2,c=Me[i];if((c+2|0)>>>0>Me[f+3]>>>0){t=9;break}var h=k+c|0;oe=10272,Ae[h]=255&oe,oe>>=8,Ae[h+1]=255&oe;var d=Se[i]+2|0;Se[i]=d,vr(r,e,0),t=10;break}t=9}while(0);9==t&&(Q(r,0|He.__str140,2),vr(r,e,0));var w=Me[b>>2],p=0==(0|w);do if(!p){var E=r+8|0,A=Me[E>>2];if(A>>>0>=Me[f+3]>>>0)break;Se[E>>2]=A+1|0,Ae[w+A|0]=41;var g=l;t=15;break r}while(0);Y(r,41);var g=l;t=15;break}var s=Se[v],v=s>>2}if(14==t){var n;vr(r,e,0);var g=n}var g;if(0!=(0|g)){t=17;break}var y=r+4|0;t=21;break}t=17}while(0);r:do if(17==t){var m=r+4|0,S=Me[m>>2],M=0==(0|S);do if(!M){var C=r+8|0,R=Me[C>>2];if(R>>>0>=Me[f+3]>>>0)break;Se[C>>2]=R+1|0,Ae[S+R|0]=32;var y=m;break r}while(0);Y(r,32);var y=m}while(0);var y,T=Me[y>>2],O=0==(0|T);do{if(!O){var N=r+8|0,I=Me[N>>2];if(I>>>0>=Me[f+3]>>>0){t=24;break}Se[N>>2]=I+1|0,Ae[T+I|0]=91,t=25;break}t=24}while(0);24==t&&Y(r,91);var P=Se[a+4>>2];0!=(0|P)&&H(r,P);var D=Me[y>>2],L=0==(0|D);do{if(!L){var F=r+8|0,X=Me[F>>2];if(X>>>0>=Me[f+3]>>>0){t=30;break}Se[F>>2]=X+1|0,Ae[D+X|0]=93,t=31;break}t=30}while(0);30==t&&Y(r,93)}function er(r,a){var e,i,v,t,f,_,s=Oe;Oe+=8;var n,o=s,_=(a+4|0)>>2,l=Se[_];if(4==(0|Se[l>>2])){var f=(r+20|0)>>2,b=Se[f];Se[f]=0;var t=(r+16|0)>>2,k=Se[t],u=0|o;Se[u>>2]=k,Se[t]=o;var c=Se[_];Se[o+4>>2]=c;var h=Se[c+4>>2];H(r,h);var d=Se[u>>2];Se[t]=d;var v=(r+4|0)>>2,w=Me[v],p=0==(0|w);do{if(!p){var i=(r+8|0)>>2,E=Me[i],A=0==(0|E);do if(!A){if(Ae[w+(E-1)|0]<<24>>24!=60)break;E>>>0<Me[r+12>>2]>>>0?(Se[i]=E+1|0,Ae[w+E|0]=32):Y(r,32)}while(0);var g=Me[v];if(0==(0|g)){n=12;break}var y=Me[i];if(y>>>0>=Me[r+12>>2]>>>0){n=12;break}Se[i]=y+1|0,Ae[g+y|0]=60,n=13;break}n=12}while(0);12==n&&Y(r,60);var m=Se[Se[_]+8>>2];H(r,m);var S=Me[v],M=0==(0|S);do{if(!M){var e=(r+8|0)>>2,C=Me[e],R=0==(0|C);do if(!R){if(Ae[S+(C-1)|0]<<24>>24!=62)break;C>>>0<Me[r+12>>2]>>>0?(Se[e]=C+1|0,Ae[S+C|0]=32):Y(r,32)}while(0);var T=Me[v];if(0==(0|T)){n=22;break}var O=Me[e];if(O>>>0>=Me[r+12>>2]>>>0){n=22;break}Se[e]=O+1|0,Ae[T+O|0]=62,n=23;break}n=22}while(0);22==n&&Y(r,62),Se[f]=b}else H(r,l);Oe=s}function ir(r,a){var e,i=40==(0|Se[a>>2]);r:do if(i){var v=Me[r+4>>2],t=0==(0|v);do{if(!t){var e=(r+8|0)>>2,f=Me[e],_=a+4|0,s=Me[_>>2],n=Me[s+8>>2];if((n+f|0)>>>0>Me[r+12>>2]>>>0){var o=s,l=n;break}var b=v+f|0,k=Se[s+4>>2];Pa(b,k,n,1);var u=Se[e]+Se[Se[_>>2]+8>>2]|0;Se[e]=u;break r}var c=Me[a+4>>2],o=c,l=Se[c+8>>2]}while(0);var l,o,h=Se[o+4>>2];Q(r,h,l)}else H(r,a);while(0)}function vr(r,a,e){var i,v,t,f,_,f=(r+4|0)>>2,s=0==(0|e),t=(r+16|0)>>2;r:do if(s)for(var n=a;;){var n;if(0==(0|n)){_=29;break r}if(0==(0|Se[f])){_=29;break r}var o=n+8|0,l=0==(0|Se[o>>2]);do if(l){var b=n+4|0;if((Se[Se[b>>2]>>2]-25|0)>>>0<3)break;Se[o>>2]=1;var k=Me[t],u=Se[n+12>>2];Se[t]=u;var c=Me[b>>2],h=Se[c>>2];if(35==(0|h)){var d=n,w=k,p=c;_=14;break r}if(36==(0|h)){var E=n,A=k,g=c;_=15;break r}if(2==(0|h)){var y=k,m=b;_=16;break r}$(r,c),Se[t]=k}while(0);var n=Se[n>>2]}else for(var S=a;;){var S;if(0==(0|S)){_=29;break r}if(0==(0|Se[f])){_=29;break r}var M=S+8|0;if(0==(0|Se[M>>2])){Se[M>>2]=1;var C=Me[t],R=Se[S+12>>2];Se[t]=R;var T=S+4|0,O=Me[T>>2],N=Se[O>>2];if(35==(0|N)){var d=S,w=C,p=O;_=14;break r}if(36==(0|N)){var E=S,A=C,g=O;_=15;break r}if(2==(0|N)){var y=C,m=T;_=16;break r}$(r,O),Se[t]=C}var S=Se[S>>2]}while(0);if(14==_){var p,w,d,I=Se[d>>2];rr(r,p,I),Se[t]=w}else if(15==_){var g,A,E,P=Se[E>>2];ar(r,g,P),Se[t]=A}else if(16==_){var m,y,v=(r+20|0)>>2,D=Se[v];Se[v]=0;var L=Se[Se[m>>2]+4>>2];H(r,L),Se[v]=D;var F=0==(4&Se[r>>2]|0),X=Me[f],j=0!=(0|X);r:do if(F){do if(j){var i=(r+8|0)>>2,U=Me[i];if((U+2|0)>>>0>Me[r+12>>2]>>>0)break;var x=X+U|0;oe=14906,Ae[x]=255&oe,oe>>=8,Ae[x+1]=255&oe;var z=Se[i]+2|0;Se[i]=z;break r}while(0);Q(r,0|He.__str120,2)}else{do if(j){var V=r+8|0,B=Me[V>>2];if(B>>>0>=Me[r+12>>2]>>>0)break;Se[V>>2]=B+1|0,Ae[X+B|0]=46;break r}while(0);Y(r,46)}while(0);var K=Me[Se[m>>2]+8>>2],G=(Se[K>>2]-25|0)>>>0<3;r:do if(G)for(var W=K;;){var W,Z=Me[W+4>>2];if((Se[Z>>2]-25|0)>>>0>=3){var q=Z;break r}var W=Z}else var q=K;while(0);var q;H(r,q),Se[t]=y}}function tr(r,a){var e,e=(r+4|0)>>2,i=Se[e],v=0==(0|i);r:do if(!v){for(var t=Se[r+8>>2]+a|0,f=r+12|0,_=Se[f>>2],s=i;;){var s,_;if(t>>>0<=_>>>0)break r;var n=_<<1,o=fa(s,n);if(0==(0|o))break;Se[e]=o,Se[f>>2]=n;var _=n,s=o}var l=Se[e];va(l),Se[e]=0,Se[r+24>>2]=1}while(0)}function fr(r,a,e){var i,v=J(r),i=v>>2;return 0!=(0|v)&&(Se[i]=21,Se[i+1]=a,Se[i+2]=e),v}function _r(r){var a,a=(r+12|0)>>2,e=Se[a],i=Ae[e]<<24>>24;if(88==(0|i)){var v=e+1|0;Se[a]=v;var t=nr(r),f=Se[a],_=f+1|0;Se[a]=_;var s=Ae[f]<<24>>24==69?t:0,n=s}else if(76==(0|i))var o=or(r),n=o;else var l=N(r),n=l;var n;return n}function sr(r){var a,a=(r+12|0)>>2,e=Se[a],i=Ae[e];if(i<<24>>24==110){var v=e+1|0;Se[a]=v;var t=1,f=Ae[v],_=v}else var t=0,f=i,_=e;var _,f,t,s=(f-48&255&255)<10;r:do if(s)for(var n=f,o=0,l=_;;){var l,o,n,b=(n<<24>>24)-48+10*o|0,k=l+1|0;Se[a]=k;var u=ge[k];if((u-48&255&255)>=10){var c=b;break r}var n=u,o=b,l=k}else var c=0;while(0);var c,h=0==(0|t)?c:0|-c;return h}function nr(r){var a,e,a=(r+12|0)>>2,i=Se[a],v=Ae[i];do{if(v<<24>>24==76){var t=or(r),f=t;e=21;break}if(v<<24>>24==84){var _=x(r),f=_;e=21;break}if(v<<24>>24==115){if(Ae[i+1|0]<<24>>24!=114){e=8;break}var s=i+2|0;Se[a]=s;var n=N(r),o=br(r);if(Ae[Se[a]]<<24>>24==73){var l=z(r),b=D(r,4,o,l),k=D(r,1,n,b),f=k;e=21;break}var u=D(r,1,n,o),f=u;e=21;break}e=8}while(0);r:do if(8==e){var c=kr(r);if(0==(0|c)){var f=0;break}var h=0|c,d=Se[h>>2],w=40==(0|d);do{if(w){var p=c+4|0,E=r+48|0,A=Se[Se[p>>2]+8>>2]-2+Se[E>>2]|0;Se[E>>2]=A;var g=Se[h>>2];if(40!=(0|g)){var y=g;e=13;break}var m=Se[p>>2],S=Se[m>>2],M=Da(S,0|He.__str90);if(0!=(0|M)){var C=m;e=15;break}var R=N(r),T=D(r,43,c,R),f=T;break r}var y=d;e=13}while(0);do if(13==e){var y;if(40==(0|y)){var C=Se[c+4>>2];e=15;break}if(41==(0|y)){var O=c+4|0;e=17;break}if(42==(0|y)){e=18;break}var f=0;break r}while(0);do if(15==e){var C,O=C+12|0;e=17;break}while(0);do if(17==e){var O,I=Se[O>>2];if(1==(0|I))break;if(2==(0|I)){var P=nr(r),L=nr(r),F=D(r,45,P,L),X=D(r,44,c,F);return X}if(3==(0|I)){var j=nr(r),U=nr(r),V=nr(r),B=D(r,48,U,V),H=D(r,47,j,B),K=D(r,46,c,H);return K}var f=0;break r}while(0);var Y=nr(r),G=D(r,43,c,Y);return G}while(0);var f;return f}function or(r){var a,a=(r+12|0)>>2,e=Se[a],i=e+1|0;Se[a]=i;var v=Ae[e]<<24>>24==76;r:do if(v){if(Ae[i]<<24>>24==95)var t=T(r,0),f=t;else{var _=N(r);if(0==(0|_)){var s=0;break}var n=33==(0|Se[_>>2]);do if(n){var o=Se[_+4>>2];if(0==(0|Se[o+16>>2]))break;var l=r+48|0,b=Se[l>>2]-Se[o+4>>2]|0;Se[l>>2]=b}while(0);var k=Se[a];if(Ae[k]<<24>>24==110){var u=k+1|0;Se[a]=u;var c=50,h=u}else var c=49,h=k;for(var h,c,d=h;;){var d,w=Ae[d];if(w<<24>>24==69)break;if(w<<24>>24==0){var s=0;break r}var p=d+1|0;Se[a]=p;var d=p}var E=lr(r,h,d-h|0),A=D(r,c,_,E),f=A}var f,g=Se[a],y=g+1|0;Se[a]=y;var m=Ae[g]<<24>>24==69?f:0,s=m}else var s=0;while(0);var s;return s}function lr(r,a,e){var i=J(r),v=m(i,a,e),t=0==(0|v)?0:i;return t}function br(r){var a=r+12|0,e=Me[a>>2],i=ge[e],v=(i-48&255&255)<10;do if(v)var t=L(r),f=t;else if((i-97&255&255)<26){var _=kr(r);if(0==(0|_)){var f=0;break}if(40!=(0|Se[_>>2])){var f=_;break}var s=r+48|0,n=Se[Se[_+4>>2]+8>>2]+Se[s>>2]+7|0;Se[s>>2]=n;var f=_}else if(i<<24>>24==67||i<<24>>24==68)var o=hr(r),f=o;else{if(i<<24>>24!=76){var f=0;break}Se[a>>2]=e+1|0;var l=L(r);if(0==(0|l)){var f=0;break}var b=dr(r),k=0==(0|b)?0:l,f=k}while(0);var f;return f}function kr(r){var a,e,a=(r+12|0)>>2,i=Se[a],v=i+1|0;Se[a]=v;var t=ge[i],f=i+2|0;Se[a]=f;var _=ge[v];do{if(t<<24>>24==118){if((_-48&255&255)>=10){var s=49,n=0;e=6;break}var o=(_<<24>>24)-48|0,l=L(r),b=ur(r,o,l),k=b;e=14;break}if(t<<24>>24==99){if(_<<24>>24!=118){var s=49,n=0;e=6;break}var u=N(r),c=D(r,42,u,0),k=c;e=14;break}var s=49,n=0;e=6}while(0);r:do if(6==e){for(;;){var n,s,h=(s-n)/2+n|0,d=(h<<4)+ri|0,w=Se[d>>2],p=Ae[w],E=t<<24>>24==p<<24>>24;if(E&&_<<24>>24==Ae[w+1|0]<<24>>24)break;var A=t<<24>>24<p<<24>>24;do if(A)var g=h,y=n;else{if(E&&_<<24>>24<Ae[w+1|0]<<24>>24){var g=h,y=n;break}var g=s,y=h+1|0}while(0);var y,g;if((0|y)==(0|g)){var k=0;break r}var s=g,n=y}var m=cr(r,d),k=m}while(0);var k;return k}function ur(r,a,e){var i=J(r),v=S(i,a,e),t=0==(0|v)?0:i;return t}function cr(r,a){var e=J(r);return 0!=(0|e)&&(Se[e>>2]=40,Se[e+4>>2]=a),e}function hr(r){var a,e,i=Se[r+44>>2],e=i>>2,v=0==(0|i);do if(!v){var t=Se[e];if(0==(0|t)){var f=r+48|0,_=Se[f>>2]+Se[e+2]|0;Se[f>>2]=_}else{if(21!=(0|t))break;var s=r+48|0,n=Se[s>>2]+Se[e+2]|0;Se[s>>2]=n}}while(0);var a=(r+12|0)>>2,o=Se[a],l=o+1|0;Se[a]=l;var b=Ae[o]<<24>>24;do if(67==(0|b)){var k=o+2|0;Se[a]=k;var u=Ae[l]<<24>>24;if(49==(0|u))var c=1;else if(50==(0|u))var c=2;else{if(51!=(0|u)){var h=0;break}var c=3}var c,d=wr(r,c,i),h=d}else if(68==(0|b)){var w=o+2|0;Se[a]=w;var p=Ae[l]<<24>>24;if(48==(0|p))var E=1;else if(49==(0|p))var E=2;else{if(50!=(0|p)){var h=0;break}var E=3}var E,A=pr(r,E,i),h=A}else var h=0;while(0);var h;return h}function dr(r){var a=r+12|0,e=Se[a>>2];if(Ae[e]<<24>>24==95){var i=e+1|0;Se[a>>2]=i;var v=sr(r),t=v>>>31^1}else var t=1;var t;return t}function wr(r,a,e){var i=J(r),v=M(i,a,e),t=0==(0|v)?0:i;return t}function pr(r,a,e){var i=J(r),v=C(i,a,e),t=0==(0|v)?0:i;return t}function Er(r,a){var e=J(r);return 0!=(0|e)&&(Se[e>>2]=5,Se[e+4>>2]=a),e}function Ar(r){var a,a=(r+12|0)>>2,e=Se[a],i=Ae[e]<<24>>24;do if(78==(0|i))var v=gr(r),t=v;else if(90==(0|i))var f=yr(r),t=f;else if(76==(0|i))var _=br(r),t=_;else if(83==(0|i)){if(Ae[e+1|0]<<24>>24==116){var s=e+2|0;Se[a]=s;var n=lr(r,0|He.__str152,3),o=br(r),l=D(r,1,n,o),b=r+48|0,k=Se[b>>2]+3|0;Se[b>>2]=k;var u=0,c=l}else var h=V(r,0),u=1,c=h;var c,u;if(Ae[Se[a]]<<24>>24!=73){var t=c;break}if(0==(0|u)){var d=R(r,c);if(0==(0|d)){var t=0;break}}var w=z(r),p=D(r,4,c,w),t=p}else{var E=br(r);if(Ae[Se[a]]<<24>>24!=73){var t=E;break}var A=R(r,E);if(0==(0|A)){var t=0;break}var g=z(r),y=D(r,4,E,g),t=y}while(0);var t;return t}function gr(r){var a,e=Oe;Oe+=4;var i=e,a=(r+12|0)>>2,v=Se[a],t=v+1|0;Se[a]=t;var f=Ae[v]<<24>>24==78;do if(f){var _=I(r,i,1);if(0==(0|_)){var s=0;break}var n=mr(r);if(Se[_>>2]=n,0==(0|n)){var s=0;break}var o=Se[a],l=o+1|0;if(Se[a]=l,Ae[o]<<24>>24!=69){var s=0;break}var s=Se[i>>2]}else var s=0;while(0);var s;return Oe=e,s}function yr(r){var a,a=(r+12|0)>>2,e=Se[a],i=e+1|0;Se[a]=i;var v=Ae[e]<<24>>24==90;do if(v){var t=O(r,0),f=Se[a],_=f+1|0;if(Se[a]=_,Ae[f]<<24>>24!=69){var s=0;break}if(Ae[_]<<24>>24==115){var n=f+2|0;Se[a]=n;var o=dr(r);if(0==(0|o)){var s=0;break}var l=lr(r,0|He.__str168,14),b=D(r,2,t,l),s=b}else{var k=Ar(r),u=dr(r);if(0==(0|u)){var s=0;break}var c=D(r,2,t,k),s=c}}else var s=0;while(0);var s;return s}function mr(r){var a,e=r+12|0,i=0;r:for(;;){var i,v=ge[Se[e>>2]];if(v<<24>>24==0){var t=0;break}var f=(v-48&255&255)<10|(v-97&255&255)<26;do{if(!f){if(v<<24>>24==76||v<<24>>24==68||v<<24>>24==67){a=5;break}if(v<<24>>24==83){var _=V(r,1),s=_;a=10;break}if(v<<24>>24==73){if(0==(0|i)){var t=0;break r}var n=z(r),o=4,l=n;a=11;break}if(v<<24>>24==84){var b=x(r),s=b;a=10;break}if(v<<24>>24==69){var t=i;break r}var t=0;break r}a=5}while(0);do if(5==a){var k=br(r),s=k;a=10;break}while(0);do if(10==a){var s;if(0==(0|i)){var u=s;a=12;break}var o=1,l=s;a=11;break}while(0);if(11==a)var l,o,c=D(r,o,i,l),u=c;var u;if(v<<24>>24!=83)if(Ae[Se[e>>2]]<<24>>24!=69){var h=R(r,u);if(0==(0|h)){var t=0;break}var i=u}else var i=u;else var i=u}var t;return t}function Sr(r,a){var e,i,v=Oe;Oe+=4;var t=v,i=t>>2,e=(r+12|0)>>2,f=Se[e];if(Ae[f]<<24>>24==74){var _=f+1|0;Se[e]=_;var s=1}else var s=a;var s;Se[i]=0;var n=s,o=0,l=t;r:for(;;)for(var l,o,n,b=n,k=o;;){var k,b,u=Ae[Se[e]];if(u<<24>>24==0||u<<24>>24==69){var c=Se[i];if(0==(0|c)){var h=0;break r}var d=0==(0|Se[c+8>>2]);do if(d){var w=Se[c+4>>2];if(33!=(0|Se[w>>2])){var p=c;break}var E=Se[w+4>>2];if(9!=(0|Se[E+16>>2])){var p=c;break}var A=r+48|0,g=Se[A>>2]-Se[E+4>>2]|0;Se[A>>2]=g,Se[i]=0;var p=0}else var p=c;while(0);var p,y=D(r,35,k,p),h=y;break r}var m=N(r);if(0==(0|m)){var h=0;break r}if(0==(0|b)){var S=D(r,38,m,0);if(Se[l>>2]=S,0==(0|S)){var h=0;break r}var n=0,o=k,l=S+8|0;continue r}var b=0,k=m}var h;return Oe=v,h}function Mr(r){for(var a=r;;){var a;if(0==(0|a)){var e=0;break}var i=Se[a>>2];if(1!=(0|i)&&2!=(0|i)){if(6==(0|i)||7==(0|i)||42==(0|i)){var e=1;break}var e=0;break}var a=Se[a+8>>2]}var e;return e}function Cr(r){var a=r>>2;Se[a+3]=0,Se[a+2]=0,Se[a+1]=0,Se[a]=0,Se[a+4]=0}function Rr(r,a){var e,e=(r+12|0)>>2,i=Se[e],v=(Se[r+4>>2]-i|0)<(0|a);r:do if(v)var t=0;else{var f=i+a|0;Se[e]=f;var _=0==(4&Se[r+8>>2]|0);do if(!_){if(Ae[f]<<24>>24!=36)break;var s=a+(i+1)|0;Se[e]=s}while(0);var n=(0|a)>9;do if(n){var o=La(i,0|He.__str117,8);if(0!=(0|o))break;var l=Ae[i+8|0];if(l<<24>>24!=46&&l<<24>>24!=95&&l<<24>>24!=36)break;if(Ae[i+9|0]<<24>>24!=78)break;var b=r+48|0,k=22-a+Se[b>>2]|0;Se[b>>2]=k;var u=lr(r,0|He.__str169,21),t=u;break r}while(0);var c=lr(r,i,a),t=c}while(0);var t;return t}function Tr(r){var a,e,e=(r+48|0)>>2,i=Se[e],v=i+20|0;Se[e]=v;var a=(r+12|0)>>2,t=Se[a],f=t+1|0;Se[a]=f;var _=Ae[t];do if(_<<24>>24==84){var s=t+2|0;Se[a]=s;var n=Ae[f]<<24>>24;if(86==(0|n)){var o=i+15|0;Se[e]=o;var l=N(r),b=D(r,8,l,0),k=b}else if(84==(0|n)){var u=i+10|0;Se[e]=u;var c=N(r),h=D(r,9,c,0),k=h}else if(73==(0|n))var d=N(r),w=D(r,11,d,0),k=w;else if(83==(0|n))var p=N(r),E=D(r,12,p,0),k=E;else if(104==(0|n)){var A=Nr(r,104);if(0==(0|A)){var k=0;break}var g=O(r,0),y=D(r,14,g,0),k=y}else if(118==(0|n)){var m=Nr(r,118);if(0==(0|m)){var k=0;break}var S=O(r,0),M=D(r,15,S,0),k=M}else if(99==(0|n)){var C=Nr(r,0);if(0==(0|C)){var k=0;break}var R=Nr(r,0);if(0==(0|R)){var k=0;break}var T=O(r,0),I=D(r,16,T,0),k=I}else if(67==(0|n)){var P=N(r),L=sr(r);if((0|L)<0){var k=0;break}var F=Se[a],X=F+1|0;if(Se[a]=X,Ae[F]<<24>>24!=95){var k=0;break}var j=N(r),U=Se[e]+5|0;Se[e]=U;var x=D(r,10,j,P),k=x}else if(70==(0|n))var z=N(r),V=D(r,13,z,0),k=V;else{if(74!=(0|n)){var k=0;break}var B=N(r),H=D(r,17,B,0),k=H}}else if(_<<24>>24==71){var K=t+2|0;Se[a]=K;var Y=Ae[f]<<24>>24;if(86==(0|Y))var G=Ar(r),W=D(r,18,G,0),k=W;else if(82==(0|Y))var Z=Ar(r),Q=D(r,19,Z,0),k=Q;else{if(65!=(0|Y)){var k=0;break}var q=O(r,0),$=D(r,20,q,0),k=$}}else var k=0;while(0);var k;return k}function Or(r){for(var a,e=r,a=e>>2;;){var e;if(0==(0|e)){var i=0;break}var v=Se[a];if(4==(0|v)){var t=Se[a+1],f=Mr(t),i=0==(0|f)&1;break}if(25!=(0|v)&&26!=(0|v)&&27!=(0|v)){var i=0;break}var e=Se[a+1],a=e>>2}var i;return i}function Nr(r,a){var e;if(0==(0|a)){var i=r+12|0,v=Se[i>>2],t=v+1|0;Se[i>>2]=t;var f=Ae[v]<<24>>24}else var f=a;var f;do{if(104==(0|f)){var _=(sr(r),r+12|0);e=7;break}if(118==(0|f)){var s=(sr(r),r+12|0),n=Se[s>>2],o=n+1|0;if(Se[s>>2]=o,Ae[n]<<24>>24!=95){var l=0;e=8;break}var _=(sr(r),s);e=7;break}var l=0;e=8}while(0);if(7==e){var _,b=Se[_>>2],k=b+1|0;Se[_>>2]=k;var l=Ae[b]<<24>>24==95&1}var l;return l}function Ir(r){var a,e,i=r>>2,v=Oe;Oe+=56;var t,f=v,_=v+8,s=v+16,n=v+36,e=(0|r)>>2,o=Se[e],l=0==(8192&o|0);r:do{if(l){var a=(r+12|0)>>2,b=Se[a];if(Ae[b]<<24>>24!=63){var k=0;t=111;break}var u=b+1|0;Se[a]=u;var c=Ae[u];do if(c<<24>>24==63){if(Ae[b+2|0]<<24>>24==36){var h=b+3|0;if(Ae[h]<<24>>24!=63){var d=5;t=90;break}Se[a]=h;var w=6,p=h}else var w=0,p=u;var p,w,E=p+1|0;Se[a]=E;var A=Ae[E]<<24>>24;do if(48==(0|A)){var g=1;t=81}else{if(49==(0|A)){var g=2;t=81;break}if(50!=(0|A)){if(51==(0|A)){var y=0|He.__str2172,m=E;t=82;break}if(52==(0|A)){var y=0|He.__str3173,m=E;t=82;break}if(53==(0|A)){var y=0|He.__str4174,m=E;t=82;break}if(54==(0|A)){var y=0|He.__str5175,m=E;t=82;break}if(55==(0|A)){var y=0|He.__str6176,m=E;t=82;break}if(56==(0|A)){var y=0|He.__str7177,m=E;t=82;break}if(57==(0|A)){var y=0|He.__str8178,m=E;t=82;break}if(65==(0|A)){var y=0|He.__str9179,m=E;t=82;break}if(66==(0|A)){Se[a]=p+2|0;var S=0|He.__str10180,M=3;t=88;break}if(67==(0|A)){var y=0|He.__str11181,m=E;t=82;break}if(68==(0|A)){var y=0|He.__str12182,m=E;t=82;break}if(69==(0|A)){var y=0|He.__str13183,m=E;t=82;break}if(70==(0|A)){var y=0|He.__str14184,m=E;t=82;break}if(71==(0|A)){var y=0|He.__str15185,m=E;t=82;break}if(72==(0|A)){var y=0|He.__str16186,m=E;t=82;break}if(73==(0|A)){var y=0|He.__str17187,m=E;t=82;break}if(74==(0|A)){var y=0|He.__str18188,m=E;t=82;break}if(75==(0|A)){var y=0|He.__str19189,m=E;t=82;break}if(76==(0|A)){var y=0|He.__str20190,m=E;t=82;break}if(77==(0|A)){var y=0|He.__str21191,m=E;t=82;break}if(78==(0|A)){var y=0|He.__str22192,m=E;t=82;break}if(79==(0|A)){var y=0|He.__str23193,m=E;t=82;break}if(80==(0|A)){var y=0|He.__str24194,m=E;t=82;break}if(81==(0|A)){var y=0|He.__str25195,m=E;t=82;break}if(82==(0|A)){var y=0|He.__str26196,m=E;t=82;break}if(83==(0|A)){var y=0|He.__str27197,m=E;t=82;break}if(84==(0|A)){var y=0|He.__str28198,m=E;t=82;break}if(85==(0|A)){var y=0|He.__str29199,m=E;t=82;break}if(86==(0|A)){var y=0|He.__str30200,m=E;t=82;break}if(87==(0|A)){var y=0|He.__str31201,m=E;t=82;break}if(88==(0|A)){var y=0|He.__str32202,m=E;t=82;break}if(89==(0|A)){var y=0|He.__str33203,m=E;t=82;break}if(90==(0|A)){var y=0|He.__str34204,m=E;t=82;break}if(95==(0|A)){var C=p+2|0;Se[a]=C;var R=Ae[C]<<24>>24;if(48==(0|R)){var y=0|He.__str35205,m=C;t=82;break}if(49==(0|R)){var y=0|He.__str36206,m=C;t=82;break}if(50==(0|R)){var y=0|He.__str37207,m=C;t=82;break}if(51==(0|R)){var y=0|He.__str38208,m=C;t=82;break}if(52==(0|R)){var y=0|He.__str39209,m=C;t=82;break}if(53==(0|R)){var y=0|He.__str40210,m=C;t=82;break}if(54==(0|R)){var y=0|He.__str41211,m=C;t=82;break}if(55==(0|R)){var y=0|He.__str42212,m=C;t=82;break}if(56==(0|R)){var y=0|He.__str43213,m=C;t=82;break}if(57==(0|R)){var y=0|He.__str44214,m=C;t=82;break}if(65==(0|R)){var y=0|He.__str45215,m=C;t=82;break}if(66==(0|R)){var y=0|He.__str46216,m=C;t=82;break}if(67==(0|R)){Se[a]=p+3|0;var T=0|He.__str47217;t=84;break}if(68==(0|R)){var y=0|He.__str48218,m=C;t=82;break}if(69==(0|R)){var y=0|He.__str49219,m=C;t=82;break}if(70==(0|R)){var y=0|He.__str50220,m=C;t=82;break}if(71==(0|R)){var y=0|He.__str51221,m=C;t=82;break}if(72==(0|R)){var y=0|He.__str52222,m=C;t=82;break}if(73==(0|R)){var y=0|He.__str53223,m=C;t=82;break}if(74==(0|R)){var y=0|He.__str54224,m=C;t=82;break}if(75==(0|R)){var y=0|He.__str55225,m=C;t=82;break}if(76==(0|R)){var y=0|He.__str56226,m=C;t=82;break}if(77==(0|R)){var y=0|He.__str57227,m=C;t=82;break}if(78==(0|R)){var y=0|He.__str58228,m=C;t=82;break}if(79==(0|R)){var y=0|He.__str59229,m=C;t=82;break}if(82==(0|R)){var O=4|o;Se[e]=O;var N=p+3|0;Se[a]=N;var I=Ae[N]<<24>>24;if(48==(0|I)){Se[a]=p+4|0,Cr(s);var P=(Pr(r,_,s,0),Se[_>>2]),D=Se[_+4>>2],L=Dr(r,0|He.__str60230,(ne=Oe,Oe+=8,Se[ne>>2]=P,Se[ne+4>>2]=D,ne)),F=Se[a]-1|0;Se[a]=F;var y=L,m=F;t=82;break}if(49==(0|I)){Se[a]=p+4|0;var X=Lr(r),j=Lr(r),U=Lr(r),x=Lr(r),z=Se[a]-1|0;Se[a]=z;var V=Dr(r,0|He.__str61231,(ne=Oe,Oe+=16,Se[ne>>2]=X,Se[ne+4>>2]=j,Se[ne+8>>2]=U,Se[ne+12>>2]=x,ne)),y=V,m=Se[a];t=82;break}if(50==(0|I)){var y=0|He.__str62232,m=N;t=82;break}if(51==(0|I)){var y=0|He.__str63233,m=N;t=82;break}if(52==(0|I)){var y=0|He.__str64234,m=N;t=82;break}var y=0,m=N;t=82;break}if(83==(0|R)){var y=0|He.__str65235,m=C;t=82;break}if(84==(0|R)){var y=0|He.__str66236,m=C;t=82;break}if(85==(0|R)){var y=0|He.__str67237,m=C;t=82;break}if(86==(0|R)){var y=0|He.__str68238,m=C;t=82;break}if(88==(0|R)){var y=0|He.__str69239,m=C;t=82;break}if(89==(0|R)){var y=0|He.__str70240,m=C;t=82;break}var k=0;t=111;break r}var k=0;t=111;break r}var y=0|He.__str1171,m=E;t=82}while(0);do{if(81==t){var g;Se[a]=p+2|0;var B=g;t=83;break}if(82==t){var m,y;if(Se[a]=m+1|0,1==(0|w)||2==(0|w)){var B=w;t=83;break}if(4==(0|w)){var T=y;t=84;break}if(6!=(0|w)){var S=y,M=w;t=88;break}Cr(n);var H=Xr(r,n,0,60,62);if(0==(0|H))var K=y;else var Y=Dr(r,0|He.__str170,(ne=Oe,Oe+=8,Se[ne>>2]=y,Se[ne+4>>2]=H,ne)),K=Y;var K;Se[i+6]=0;var S=K,M=w;t=88;break}}while(0);if(83==t){var B,G=r+40|0,W=Fr(r,0|He._symbol_demangle_dashed_null,-1,G);if(0==(0|W)){var k=0;t=111;break r}var d=B;t=90;break}if(84==t){var T;Se[i+4]=T;var Z=1,Q=T;t=109;break r}if(88==t){var M,S,q=r+40|0,$=Fr(r,S,-1,q);if(0==(0|$)){var k=0;t=111;break r}var d=M;t=90;break}}else{if(c<<24>>24==36){var J=b+2|0;Se[a]=J;var rr=jr(r);Se[i+4]=rr;var ar=0!=(0|rr)&1;t=107;break}var d=0;t=90}while(0);if(90==t){var d,er=Me[a],ir=Ae[er]<<24>>24;if(64==(0|ir))Se[a]=er+1|0;else if(36==(0|ir))t=93;else{var vr=zr(r);if(0==(0|vr)){var k=-1;t=111;break}}if(5==(0|d)){var tr=r+20|0,fr=Se[tr>>2]+1|0;Se[tr>>2]=fr}else if(1==(0|d)||2==(0|d)){if(Me[i+11]>>>0<2){var k=-1;t=111;break}var _r=r+56|0,sr=Me[_r>>2],nr=Se[sr+4>>2];if(1==(0|d))Se[sr>>2]=nr;else{var or=Dr(r,0|He.__str71241,(ne=Oe,Oe+=4,Se[ne>>2]=nr,ne)),lr=Se[_r>>2];Se[lr>>2]=or}var br=4|Se[e];Se[e]=br}else if(3==(0|d)){var kr=Se[e]&-5;Se[e]=kr}var ur=ge[Se[a]];if((ur-48&255&255)<10)var cr=Vr(r),ar=cr;else if((ur-65&255&255)<26)var hr=Br(r,3==(0|d)&1),ar=hr;else{if(ur<<24>>24!=36){var k=-1;t=111;break}var dr=Hr(r),ar=dr}}var ar;if(0==(0|ar)){var k=-1;t=111;break}var Z=ar,Q=Se[i+4];t=109;break}var wr=Pr(r,f,0,0);if(0==(0|wr)){var k=-1;t=111;break}var pr=Se[f>>2],Er=Se[f+4>>2],Ar=Dr(r,0|He.__str170,(ne=Oe,Oe+=8,Se[ne>>2]=pr,Se[ne+4>>2]=Er,ne));Se[i+4]=Ar;var Z=1,Q=Ar;t=109;break}while(0);do if(109==t){var Q,Z;if(0!=(0|Q)){var k=Z;break}Xa(0|He.__str72242,1499,0|He.___func___symbol_demangle,0|He.__str73243);var k=Z}while(0);var k;return Oe=v,k}function Pr(r,a,e,i){var v,t,f,_=Oe;Oe+=24;var s=_,n=_+4,o=_+8,l=_+16,b=_+20;0==(0|a)&&Xa(0|He.__str72242,829,0|He.___func___demangle_datatype,0|He.__str121291);var f=(a+4|0)>>2;Se[f]=0;var t=(0|a)>>2;Se[t]=0;var v=(r+12|0)>>2,k=Me[v],u=k+1|0;Se[v]=u;var c=Ae[k],h=c<<24>>24;do if(95==(0|h)){Se[v]=k+2|0;var d=Ae[u],w=Zr(d);Se[t]=w}else if(67==(0|h)||68==(0|h)||69==(0|h)||70==(0|h)||71==(0|h)||72==(0|h)||73==(0|h)||74==(0|h)||75==(0|h)||77==(0|h)||78==(0|h)||79==(0|h)||88==(0|h)||90==(0|h)){var p=Qr(c);Se[t]=p}else if(84==(0|h)||85==(0|h)||86==(0|h)||89==(0|h)){var E=qr(r);if(0==(0|E))break;var A=0==(32768&Se[r>>2]|0);do if(A)if(84==(0|h))var g=0|He.__str122292;else if(85==(0|h))var g=0|He.__str123293;else if(86==(0|h))var g=0|He.__str124294;else{if(89!=(0|h)){var g=0;break}var g=0|He.__str125295}else var g=0;while(0);var g,y=Dr(r,0|He.__str170,(ne=Oe,Oe+=8,Se[ne>>2]=g,Se[ne+4>>2]=E,ne));Se[t]=y}else if(63==(0|h))if(0==(0|i))$r(a,r,e,63,0);else{var m=Lr(r);if(0==(0|m))break;var S=Dr(r,0|He.__str126296,(ne=Oe,Oe+=4,Se[ne>>2]=m,ne));Se[t]=S}else if(65==(0|h)||66==(0|h))$r(a,r,e,c,i);else if(81==(0|h)||82==(0|h)||83==(0|h)){var M=0==(0|i)?80:c;$r(a,r,e,M,i)}else if(80==(0|h))if(((Ae[u]<<24>>24)-48|0)>>>0<10){var C=k+2|0;if(Se[v]=C,Ae[u]<<24>>24!=54)break;var R=r+44|0,T=Se[R>>2];Se[v]=k+3|0;var O=Ae[C],N=Se[r>>2]&-17,I=Ur(O,s,n,N);if(0==(0|I))break;var P=Pr(r,o,e,0);if(0==(0|P))break;var D=Xr(r,e,1,40,41);if(0==(0|D))break;Se[R>>2]=T;var L=Se[o>>2],F=Se[o+4>>2],X=Se[s>>2],j=Dr(r,0|He.__str127297,(ne=Oe,Oe+=12,Se[ne>>2]=L,Se[ne+4>>2]=F,Se[ne+8>>2]=X,ne));Se[t]=j;var U=Dr(r,0|He.__str128298,(ne=Oe,Oe+=4,Se[ne>>2]=D,ne));Se[f]=U}else $r(a,r,e,80,i);else if(87==(0|h)){if(Ae[u]<<24>>24!=52)break;Se[v]=k+2|0;var x=qr(r);if(0==(0|x))break;if(0==(32768&Se[r>>2]|0)){var z=Dr(r,0|He.__str129299,(ne=Oe,Oe+=4,Se[ne>>2]=x,ne));Se[t]=z}else Se[t]=x}else if(48==(0|h)||49==(0|h)||50==(0|h)||51==(0|h)||52==(0|h)||53==(0|h)||54==(0|h)||55==(0|h)||56==(0|h)||57==(0|h)){var V=h<<1,B=V-96|0,H=Yr(e,B);Se[t]=H;var K=V-95|0,Y=Yr(e,K);Se[f]=Y}else if(36==(0|h)){var G=k+2|0;Se[v]=G;var W=Ae[u]<<24>>24;if(48==(0|W)){var Z=Lr(r);Se[t]=Z}else if(68==(0|W)){var Q=Lr(r);if(0==(0|Q))break;var q=Dr(r,0|He.__str130300,(ne=Oe,Oe+=4,Se[ne>>2]=Q,ne));Se[t]=q}else if(70==(0|W)){var $=Lr(r);if(0==(0|$))break;var J=Lr(r);if(0==(0|J))break;var rr=Dr(r,0|He.__str131301,(ne=Oe,Oe+=8,Se[ne>>2]=$,Se[ne+4>>2]=J,ne));Se[t]=rr}else if(71==(0|W)){var ar=Lr(r);if(0==(0|ar))break;var er=Lr(r);if(0==(0|er))break;var ir=Lr(r);if(0==(0|ir))break;var vr=Dr(r,0|He.__str132302,(ne=Oe,Oe+=12,Se[ne>>2]=ar,Se[ne+4>>2]=er,Se[ne+8>>2]=ir,ne));Se[t]=vr}else if(81==(0|W)){var tr=Lr(r);if(0==(0|tr))break;var fr=Dr(r,0|He.__str133303,(ne=Oe,Oe+=4,Se[ne>>2]=tr,ne));Se[t]=fr}else{if(36!=(0|W))break;if(Ae[G]<<24>>24!=67)break;Se[v]=k+3|0;var _r=xr(r,l,b);if(0==(0|_r))break;var sr=Pr(r,a,e,i);if(0==(0|sr))break;var nr=Se[t],or=Se[l>>2],lr=Dr(r,0|He.__str83253,(ne=Oe,Oe+=8,Se[ne>>2]=nr,Se[ne+4>>2]=or,ne));Se[t]=lr}}while(0);var br=0!=(0|Se[t])&1;return Oe=_,br}function Dr(r,a){var e,i=Oe;Oe+=4;var v=i,e=v>>2,t=v;Se[t>>2]=arguments[Dr.length];var f=1,_=0;r:for(;;){var _,f,s=Ae[a+_|0];do{if(s<<24>>24==0)break r;if(s<<24>>24==37){var n=_+1|0,o=Ae[a+n|0]<<24>>24;if(115==(0|o)){var l=Se[e],b=l,k=l+4|0;Se[e]=k;var u=Se[b>>2];if(0==(0|u)){var c=f,h=n;break}var d=Ca(u),c=d+f|0,h=n;break}if(99==(0|o)){var w=Se[e]+4|0;Se[e]=w;var c=f+1|0,h=n;break}if(37==(0|o))var p=n;else var p=_;var p,c=f+1|0,h=p}else var c=f+1|0,h=_}while(0);var h,c,f=c,_=h+1|0}var E=Wr(r,f);if(0==(0|E))var A=0;else{Se[t>>2]=arguments[Dr.length];var g=E,y=0;r:for(;;){var y,g,m=Ae[a+y|0];do{if(m<<24>>24==0)break r;if(m<<24>>24==37){var S=y+1|0,M=Ae[a+S|0]<<24>>24;if(115==(0|M)){var C=Se[e],R=C,T=C+4|0;Se[e]=T;var O=Se[R>>2];if(0==(0|O)){var N=g,I=S;break}var P=Ca(O);Pa(g,O,P,1);var N=g+P|0,I=S;break}if(99==(0|M)){var D=Se[e],L=D,F=D+4|0;Se[e]=F,Ae[g]=255&Se[L>>2];var N=g+1|0,I=S;break}if(37==(0|M))var X=S;else var X=y;var X;Ae[g]=37;var N=g+1|0,I=X}else{Ae[g]=m;var N=g+1|0,I=y}}while(0);var I,N,g=N,y=I+1|0}Ae[g]=0;var A=E}var A;return Oe=i,A}function Lr(r){var a,a=(r+12|0)>>2,e=Se[a],i=Ae[e];if(i<<24>>24==63){var v=e+1|0;Se[a]=v;var t=1,f=v,_=Ae[v]}else var t=0,f=e,_=i;var _,f,t,s=(_-48&255&255)<9;do if(s){var n=Wr(r,3),o=0!=(0|t);o&&(Ae[n]=45);var l=Ae[Se[a]]+1&255;Ae[n+t|0]=l;var b=o?2:1;
Ae[n+b|0]=0;var k=Se[a]+1|0;Se[a]=k;var u=n}else if(_<<24>>24==57){var c=Wr(r,4),h=0!=(0|t);h&&(Ae[c]=45),Ae[c+t|0]=49;var d=h?2:1;Ae[c+d|0]=48;var w=h?3:2;Ae[c+w|0]=0;var p=Se[a]+1|0;Se[a]=p;var u=c}else{if((_-65&255&255)>=16){var u=0;break}for(var E=0,A=f;;){var A,E,g=A+1|0;Se[a]=g;var y=(Ae[A]<<24>>24)+((E<<4)-65)|0,m=ge[g];if((m-65&255&255)>=16)break;var E=y,A=g}if(m<<24>>24!=64){var u=0;break}var S=Wr(r,17),M=0!=(0|t)?0|He.__str119289:0|ii,C=(za(S,0|He.__str118288,(ne=Oe,Oe+=8,Se[ne>>2]=M,Se[ne+4>>2]=y,ne)),Se[a]+1|0);Se[a]=C;var u=S}while(0);var u;return u}function Fr(r,a,e,i){var v,t,f,_;0==(0|a)&&Xa(0|He.__str72242,212,0|He.___func___str_array_push,0|He.__str115285),0==(0|i)&&Xa(0|He.__str72242,213,0|He.___func___str_array_push,0|He.__str116286);var f=(i+12|0)>>2,s=Me[f],n=0==(0|s);do{if(n){Se[f]=32;var o=Wr(r,128);if(0==(0|o)){var l=0;_=17;break}Se[i+16>>2]=o,_=11;break}if(Me[i+8>>2]>>>0<s>>>0){_=11;break}var b=s<<3,k=Wr(r,b);if(0==(0|k)){var l=0;_=17;break}var u=k,c=i+16|0,h=Se[c>>2],d=Se[f]<<2;Pa(k,h,d,1);var w=Se[f]<<1;Se[f]=w,Se[c>>2]=u,_=11;break}while(0);do if(11==_){if((0|e)==-1)var p=Ca(a),E=p;else var E=e;var E,A=ja(a),g=E+1|0,y=Wr(r,g),t=(i+4|0)>>2,v=(i+16|0)>>2,m=(Se[t]<<2)+Se[v]|0;Se[m>>2]=y;var S=Se[Se[v]+(Se[t]<<2)>>2];if(0==(0|S)){Xa(0|He.__str72242,233,0|He.___func___str_array_push,0|He.__str117287);var M=Se[Se[v]+(Se[t]<<2)>>2]}else var M=S;var M;Pa(M,A,E,1),va(A),Ae[Se[Se[v]+(Se[t]<<2)>>2]+g|0]=0;var C=Se[t]+1|0;Se[t]=C;var R=i+8|0;if(C>>>0<Me[R>>2]>>>0){var l=1;break}Se[R>>2]=C;var l=1}while(0);var l;return l}function Xr(r,a,e,i,v){var t,f,_=Oe;Oe+=28;var s,n=_,o=_+8;Cr(o);var f=(r+12|0)>>2,l=0==(0|e),t=(0|n)>>2,b=n+4|0;r:do if(l)for(;;){var k=Se[f],u=Ae[k];if(u<<24>>24==0){s=12;break r}if(u<<24>>24==64){var c=k;s=7;break r}var h=Pr(r,n,a,1);if(0==(0|h)){var d=0;s=25;break r}var w=Se[t],p=Se[b>>2],E=Dr(r,0|He.__str170,(ne=Oe,Oe+=8,Se[ne>>2]=w,Se[ne+4>>2]=p,ne)),A=Fr(r,E,-1,o);if(0==(0|A)){var d=0;s=25;break r}var g=Se[t],y=Da(g,0|He.__str110280);if(0==(0|y)){s=12;break r}}else for(;;){var m=Se[f],S=Ae[m];if(S<<24>>24==0){s=12;break r}if(S<<24>>24==64){var c=m;s=7;break r}var M=Pr(r,n,a,1);if(0==(0|M)){var d=0;s=25;break r}var C=Se[t],R=Da(C,0|He.__str84254);if(0==(0|R)){s=13;break r}var T=Se[b>>2],O=Dr(r,0|He.__str170,(ne=Oe,Oe+=8,Se[ne>>2]=C,Se[ne+4>>2]=T,ne)),N=Fr(r,O,-1,o);if(0==(0|N)){var d=0;s=25;break r}var I=Se[t],P=Da(I,0|He.__str110280);if(0==(0|P)){s=12;break r}}while(0);do if(7==s){var c;Se[f]=c+1|0,s=12;break}while(0);do if(12==s){if(l){s=14;break}s=13;break}while(0);do if(13==s){var D=Se[f],L=D+1|0;if(Se[f]=L,Ae[D]<<24>>24==90){s=14;break}var d=0;s=25;break}while(0);r:do if(14==s){var F=o+4|0,X=Me[F>>2];do{if(0!=(0|X)){if(1==(0|X)){var j=o+16|0,U=Se[Se[j>>2]>>2],x=Da(U,0|He.__str84254);if(0==(0|x)){s=17;break}var z=j;s=20;break}var V=o+16|0;if(X>>>0<=1){var z=V;s=20;break}for(var B=0,H=1;;){var H,B,K=Se[Se[V>>2]+(H<<2)>>2],Y=Dr(r,0|He.__str112282,(ne=Oe,Oe+=8,Se[ne>>2]=B,Se[ne+4>>2]=K,ne)),G=H+1|0;if(G>>>0>=Me[F>>2]>>>0)break;var B=Y,H=G}if(0==(0|Y)){var z=V;s=20;break}var W=Y,Z=Y;s=21;break}s=17}while(0);if(17==s){var Q=i<<24>>24,q=v<<24>>24,$=Dr(r,0|He.__str111281,(ne=Oe,Oe+=8,Se[ne>>2]=Q,Se[ne+4>>2]=q,ne)),d=$;break}if(20==s)var z,W=Se[Se[z>>2]>>2],Z=0;var Z,W,J=v<<24>>24,rr=v<<24>>24==62;do if(rr){var ar=Ca(W);if(Ae[W+(ar-1)|0]<<24>>24!=62)break;var er=i<<24>>24,ir=Se[Se[o+16>>2]>>2],vr=Dr(r,0|He.__str113283,(ne=Oe,Oe+=16,Se[ne>>2]=er,Se[ne+4>>2]=ir,Se[ne+8>>2]=Z,Se[ne+12>>2]=J,ne)),d=vr;break r}while(0);var tr=i<<24>>24,fr=Se[Se[o+16>>2]>>2],_r=Dr(r,0|He.__str114284,(ne=Oe,Oe+=16,Se[ne>>2]=tr,Se[ne+4>>2]=fr,Se[ne+8>>2]=Z,Se[ne+12>>2]=J,ne)),d=_r}while(0);var d;return Oe=_,d}function jr(r){var a,e=Oe;Oe+=20;var i=e,v=r+24|0,t=Se[v>>2],a=(r+20|0)>>2,f=Se[a],_=r+44|0,s=Se[_>>2];Se[a]=t;var n=Kr(r);if(0==(0|n))var o=0;else{Cr(i);var l=Xr(r,i,0,60,62);if(0==(0|l))var b=n;else var k=Dr(r,0|He.__str170,(ne=Oe,Oe+=8,Se[ne>>2]=n,Se[ne+4>>2]=l,ne)),b=k;var b;Se[v>>2]=t,Se[a]=f,Se[_>>2]=s;var o=b}var o;return Oe=e,o}function Ur(r,a,e,i){var v,t=a>>2;Se[e>>2]=0,Se[t]=0;var f=0==(18&i|0);do{if(f){var _=r<<24>>24,s=1==((_-65)%2|0);if(0==(1&i|0)){if(s?Se[e>>2]=0|He.__str95265:v=14,65==(0|_)||66==(0|_)){Se[t]=0|He.__str96266,v=21;break}if(67==(0|_)||68==(0|_)){Se[t]=0|He.__str97267,v=21;break}if(69==(0|_)||70==(0|_)){Se[t]=0|He.__str98268,v=21;break}if(71==(0|_)||72==(0|_)){Se[t]=0|He.__str99269,v=21;break}if(73==(0|_)||74==(0|_)){Se[t]=0|He.__str100270,v=21;break}if(75==(0|_)||76==(0|_)){v=21;break}if(77==(0|_)){Se[t]=0|He.__str101271,v=21;break}var n=0;v=22;break}if(s?Se[e>>2]=0|He.__str88258:v=5,65==(0|_)||66==(0|_)){Se[t]=0|He.__str89259,v=21;break}if(67==(0|_)||68==(0|_)){Se[t]=0|He.__str90260,v=21;break}if(69==(0|_)||70==(0|_)){Se[t]=0|He.__str91261,v=21;break}if(71==(0|_)||72==(0|_)){Se[t]=0|He.__str92262,v=21;break}if(73==(0|_)||74==(0|_)){Se[t]=0|He.__str93263,v=21;break}if(75==(0|_)||76==(0|_)){v=21;break}if(77==(0|_)){Se[t]=0|He.__str94264,v=21;break}var n=0;v=22;break}v=21}while(0);if(21==v)var n=1;var n;return n}function xr(r,a,e){var i;Se[e>>2]=0;var i=(r+12|0)>>2,v=Se[i];if(Ae[v]<<24>>24==69){Se[e>>2]=0|He.__str102272;var t=Se[i]+1|0;Se[i]=t;var f=t}else var f=v;var f;Se[i]=f+1|0;var _=Ae[f]<<24>>24;if(65==(0|_)){Se[a>>2]=0;var s=1}else if(66==(0|_)){Se[a>>2]=0|He.__str103273;var s=1}else if(67==(0|_)){Se[a>>2]=0|He.__str104274;var s=1}else if(68==(0|_)){Se[a>>2]=0|He.__str105275;var s=1}else var s=0;var s;return s}function zr(r){var a,e,a=(r+12|0)>>2,i=r+40|0,v=r+20|0,t=0|i,f=r+44|0,_=r+48|0,s=r+52|0,n=r+56|0,o=r+20|0,l=r+24|0,b=r+16|0,k=0;r:for(;;){var k,u=Se[a],c=Ae[u];if(c<<24>>24==64){var h=u+1|0;Se[a]=h;var d=1;break}var w=c<<24>>24;do{if(0==(0|w)){var d=0;break r}if(48==(0|w)||49==(0|w)||50==(0|w)||51==(0|w)||52==(0|w)||53==(0|w)||54==(0|w)||55==(0|w)||56==(0|w)||57==(0|w)){var p=u+1|0;Se[a]=p;var E=(Ae[u]<<24>>24)-48|0,A=Yr(v,E),g=A;e=14;break}if(63==(0|w)){var y=u+1|0;Se[a]=y;var m=Ae[y]<<24>>24;if(36==(0|m)){var S=u+2|0;Se[a]=S;var M=jr(r);if(0==(0|M)){var d=0;break r}var C=Fr(r,M,-1,v);if(0==(0|C)){var d=0;break r}var R=M;e=15;break}if(63==(0|m)){var T=Se[t>>2],O=Se[f>>2],N=Se[_>>2],I=Se[s>>2],P=Se[n>>2],D=Se[o>>2],L=Se[l>>2];Cr(i);var F=Ir(r);if(0==(0|F))var X=k;else var j=Se[b>>2],U=Dr(r,0|He.__str109279,(ne=Oe,Oe+=4,Se[ne>>2]=j,ne)),X=U;var X;Se[o>>2]=D,Se[l>>2]=L,Se[t>>2]=T,Se[f>>2]=O,Se[_>>2]=N,Se[s>>2]=I,Se[n>>2]=P;var g=X;e=14;break}var x=Lr(r);if(0==(0|x)){var d=0;break r}var z=Dr(r,0|He.__str109279,(ne=Oe,Oe+=4,Se[ne>>2]=x,ne)),g=z;e=14;break}var V=Kr(r),g=V;e=14;break}while(0);if(14==e){var g;if(0==(0|g)){var d=0;break}var R=g}var R,B=Fr(r,R,-1,i);if(0==(0|B)){var d=0;break}var k=R}var d;return d}function Vr(r){var a,e,i,v=Oe;Oe+=36;var t,f=v,i=f>>2,_=v+4,s=v+8,e=s>>2,n=v+16;Se[i]=0;var o=0|r,l=Se[o>>2],b=0==(128&l|0),k=r+12|0;do if(b){var u=Ae[Se[k>>2]]<<24>>24;if(48==(0|u))var c=0|He.__str76246,h=k,a=h>>2;else if(49==(0|u))var c=0|He.__str77247,h=k,a=h>>2;else{if(50!=(0|u)){var c=0,h=k,a=h>>2;break}var c=0|He.__str78248,h=k,a=h>>2}}else var c=0,h=k,a=h>>2;while(0);var h,c,d=0==(512&l|0);do if(d){if((Ae[Se[a]]-48&255&255)>=3){var w=0;break}var w=0|He.__str79249}else var w=0;while(0);var w,p=Gr(r,0),E=Se[a],A=E+1|0;Se[a]=A;var g=Ae[E]<<24>>24;do{if(48==(0|g)||49==(0|g)||50==(0|g)||51==(0|g)||52==(0|g)||53==(0|g)){var y=r+44|0,m=Se[y>>2];Cr(n);var S=Pr(r,s,n,0);if(0==(0|S)){var M=0;t=28;break}var C=xr(r,f,_);if(0==(0|C)){var M=0;t=28;break}var R=Se[i],T=0==(0|R),O=Se[_>>2];do if(T)Se[i]=O;else{if(0==(0|O))break;var N=Dr(r,0|He.__str83253,(ne=Oe,Oe+=8,Se[ne>>2]=R,Se[ne+4>>2]=O,ne));Se[i]=N}while(0);Se[y>>2]=m,t=22;break}if(54==(0|g)||55==(0|g)){var I=s+4|0;Se[I>>2]=0,Se[e]=0;var P=xr(r,f,_);if(0==(0|P)){var M=0;t=28;break}if(Ae[Se[a]]<<24>>24==64){t=22;break}var D=qr(r);if(0==(0|D)){var M=0;t=28;break}var L=Dr(r,0|He.__str107277,(ne=Oe,Oe+=4,Se[ne>>2]=D,ne));Se[I>>2]=L,t=22;break}if(56==(0|g)||57==(0|g)){Se[e+1]=0,Se[e]=0,Se[i]=0,t=22;break}var M=0;t=28}while(0);if(22==t){var F=0==(4096&Se[o>>2]|0);do{if(F){var X=Se[e],j=Se[i];if(0==(0|j)){var U=X;t=26;break}var x=0!=(0|X)?0|He.__str87257:0,z=0|He.__str87257,V=j,B=x,H=X;t=27;break}Se[i]=0,Se[e+1]=0,Se[e]=0;var U=0;t=26;break}while(0);if(26==t)var U,K=0!=(0|U)?0|He.__str87257:0,z=K,V=0,B=0,H=U;var H,B,V,z,Y=Se[e+1],G=Dr(r,0|He.__str108278,(ne=Oe,Oe+=32,Se[ne>>2]=c,Se[ne+4>>2]=w,Se[ne+8>>2]=H,Se[ne+12>>2]=B,Se[ne+16>>2]=V,Se[ne+20>>2]=z,Se[ne+24>>2]=p,Se[ne+28>>2]=Y,ne));Se[r+16>>2]=G;var M=1}var M;return Oe=v,M}function Br(r,a){var e,i,v,t,f=Oe;Oe+=44;var _,s=f,t=s>>2,n=f+8,o=f+12,v=o>>2,l=f+16,b=f+20,k=f+40;Se[v]=0;var i=(r+12|0)>>2,u=Se[i],c=u+1|0;Se[i]=c;var h=ge[u],d=h<<24>>24,w=(h-65&255&255)>25;r:do if(w)var p=0;else{var e=(0|r)>>2,E=Me[e],A=0==(128&E|0),g=d-65|0;do if(A){var y=g/8|0;if(0==(0|y))var m=0|He.__str76246,S=g;else if(1==(0|y))var m=0|He.__str77247,S=g;else{if(2!=(0|y)){var m=0,S=g;break}var m=0|He.__str78248,S=g}}else var m=0,S=g;while(0);var S,m,M=0==(512&E|0)&h<<24>>24<89,C=(0|S)%8;do if(M)if(2==(0|C)||3==(0|C))var R=m,T=0|He.__str79249;else if(4==(0|C)||5==(0|C))var R=m,T=0|He.__str80250;else{if(6!=(0|C)&&7!=(0|C)){var R=m,T=0;break}var O=Dr(r,0|He.__str81251,(ne=Oe,Oe+=4,Se[ne>>2]=m,ne)),R=O,T=0|He.__str80250}else var R=m,T=0;while(0);var T,R,N=Gr(r,0),I=6==(0|C);do{if(!I){if(7==((d-56)%8|0)){_=14;break}var P=N;_=15;break}_=14}while(0);if(14==_)var D=Lr(r),L=Dr(r,0|He.__str82252,(ne=Oe,Oe+=8,Se[ne>>2]=N,Se[ne+4>>2]=D,ne)),P=L;var P,F=h<<24>>24>88;do if(F)var X=0;else{if((C-2|0)>>>0<2){var X=0;break}var j=xr(r,o,k);if(0==(0|j)){var p=0;break r}var U=Me[v],x=Se[k>>2];if(0==(0|U)&0==(0|x)){var X=0;break}var z=Dr(r,0|He.__str83253,(ne=Oe,Oe+=8,Se[ne>>2]=U,Se[ne+4>>2]=x,ne));Se[v]=z;var X=z}while(0);var X,V=Se[i],B=V+1|0;Se[i]=B;var H=Ae[V],K=Se[e],Y=Ur(H,n,l,K);if(0==(0|Y)){var p=0;break}Cr(b);var G=Se[i];if(Ae[G]<<24>>24==64){Se[t]=0|He.__str84254,Se[t+1]=0;var W=G+1|0;Se[i]=W}else{var Z=Pr(r,s,b,0);if(0==(0|Z)){var p=0;break}}if(0!=(4&Se[e]|0)&&(Se[t+1]=0,Se[t]=0),0==(0|a))var Q=P;else{var q=0|s,$=Se[q>>2],J=s+4|0,rr=Se[J>>2],ar=Dr(r,0|He.__str85255,(ne=Oe,Oe+=12,Se[ne>>2]=P,Se[ne+4>>2]=$,Se[ne+8>>2]=rr,ne));Se[J>>2]=0,Se[q>>2]=0;var Q=ar}var Q,er=r+44|0,ir=Se[er>>2],vr=Xr(r,b,1,40,41);if(0==(0|vr)){var p=0;break}if(0==(4096&Se[e]|0))var tr=vr,fr=X;else{Se[v]=0;var tr=0,fr=0}var fr,tr;Se[er>>2]=ir;var _r=Se[t],sr=Se[t+1];if(0==(0|_r))var nr=0;else var or=0!=(0|sr)?0:0|He.__str87257,nr=or;var nr,lr=Se[n>>2],br=0!=(0|lr)?0|He.__str87257:0,kr=Se[l>>2],ur=Dr(r,0|He.__str86256,(ne=Oe,Oe+=44,Se[ne>>2]=R,Se[ne+4>>2]=T,Se[ne+8>>2]=_r,Se[ne+12>>2]=nr,Se[ne+16>>2]=lr,Se[ne+20>>2]=br,Se[ne+24>>2]=kr,Se[ne+28>>2]=Q,Se[ne+32>>2]=tr,Se[ne+36>>2]=fr,Se[ne+40>>2]=sr,ne));Se[r+16>>2]=ur;var p=1}while(0);var p;return Oe=f,p}function Hr(r){var a,a=(r+12|0)>>2,e=Se[a];if(Ae[e]<<24>>24==36)var i=e;else{Xa(0|He.__str72242,1252,0|He.___func___handle_template,0|He.__str74244);var i=Se[a]}var i;Se[a]=i+1|0;var v=Kr(r),t=0==(0|v);do if(t)var f=0;else{var _=Xr(r,0,0,60,62);if(0==(0|_)){var f=0;break}var s=Dr(r,0|He.__str170,(ne=Oe,Oe+=8,Se[ne>>2]=v,Se[ne+4>>2]=_,ne));Se[r+16>>2]=s;var f=1}while(0);var f;return f}function Kr(r){for(var a,a=(r+12|0)>>2,e=Me[a],i=e,v=Ae[e];;){var v,i;if(!((v-65&255&255)<26|(v-97&255&255)<26|(v-48&255&255)<10)&&v<<24>>24!=95&&v<<24>>24!=36){var t=0;break}var f=i+1|0;Se[a]=f;var _=ge[f];if(_<<24>>24==64){Se[a]=i+2|0;var s=f-e|0,n=r+20|0,o=Fr(r,e,s,n);if(0==(0|o)){var t=0;break}var l=Se[r+24>>2]-1-Se[n>>2]|0,b=Yr(n,l),t=b;break}var i=f,v=_}var t;return t}function Yr(r,a){0==(0|r)&&Xa(0|He.__str72242,263,0|He.___func___str_array_get_ref,0|He.__str75245);var e=Se[r>>2]+a|0;if(e>>>0<Me[r+8>>2]>>>0)var i=Se[Se[r+16>>2]+(e<<2)>>2];else var i=0;var i;return i}function Gr(r,a){var e,e=(r+44|0)>>2,i=Me[e];if(i>>>0>a>>>0){for(var v=r+56|0,t=a,f=0,_=Se[v>>2],s=i;;){var s,_,f,t,n=Me[_+(t<<2)>>2];if(0==(0|n)){Xa(0|He.__str72242,680,0|He.___func___get_class_string,0|He.__str106276);var o=Se[v>>2],l=o,b=Se[o+(t<<2)>>2],k=Se[e]}else var l=_,b=n,k=s;var k,b,l,u=Ca(b),c=u+(f+2)|0,h=t+1|0;if(h>>>0>=k>>>0)break;var t=h,f=c,_=l,s=k}var d=c-1|0}else var d=-1;var d,w=Wr(r,d);if(0==(0|w))var p=0;else{var E=Se[e]-1|0,A=(0|E)<(0|a);r:do if(A)var g=0;else for(var y=r+56|0,m=0,S=E;;){var S,m,M=Se[Se[y>>2]+(S<<2)>>2],C=Ca(M),R=w+m|0;Pa(R,M,C,1);var T=C+m|0;if((0|S)>(0|a)){var O=T+1|0;Ae[w+T|0]=58;var N=T+2|0;Ae[w+O|0]=58;var I=N}else var I=T;var I,P=S-1|0;if((0|P)<(0|a)){var g=I;break r}var m=I,S=P}while(0);var g;Ae[w+g|0]=0;var p=w}var p;return p}function Wr(r,a){var e,i=a>>>0>1020;do if(i){var v=Se[r+4>>2],t=a+4|0,f=pe[v](t);if(0==(0|f)){var _=0;break}var s=r+60|0,n=Se[s>>2],o=f;Se[o>>2]=n,Se[s>>2]=f,Se[r+64>>2]=0;var _=f+4|0}else{var e=(r+64|0)>>2,l=Me[e];if(l>>>0<a>>>0){var b=Se[r+4>>2],k=pe[b](1024);if(0==(0|k)){var _=0;break}var u=r+60|0,c=Se[u>>2],h=k;Se[h>>2]=c,Se[u>>2]=k,Se[e]=1020;var d=1020,w=k}else var d=l,w=Se[r+60>>2];var w,d;Se[e]=d-a|0;var _=w+(1024-d)|0}while(0);var _;return _}function Zr(r){var a=r<<24>>24;if(68==(0|a))var e=0|He.__str157327;else if(69==(0|a))var e=0|He.__str158328;else if(70==(0|a))var e=0|He.__str159329;else if(71==(0|a))var e=0|He.__str160330;else if(72==(0|a))var e=0|He.__str161331;else if(73==(0|a))var e=0|He.__str162332;else if(74==(0|a))var e=0|He.__str163333;else if(75==(0|a))var e=0|He.__str164334;else if(76==(0|a))var e=0|He.__str165335;else if(77==(0|a))var e=0|He.__str166336;else if(78==(0|a))var e=0|He.__str167337;else if(87==(0|a))var e=0|He.__str168338;else var e=0;var e;return e}function Qr(r){var a=r<<24>>24;if(67==(0|a))var e=0|He.__str145315;else if(68==(0|a))var e=0|He.__str146316;else if(69==(0|a))var e=0|He.__str147317;else if(70==(0|a))var e=0|He.__str148318;else if(71==(0|a))var e=0|He.__str149319;else if(72==(0|a))var e=0|He.__str150320;else if(73==(0|a))var e=0|He.__str151321;else if(74==(0|a))var e=0|He.__str152322;else if(75==(0|a))var e=0|He.__str153323;else if(77==(0|a))var e=0|He.__str154324;else if(78==(0|a))var e=0|He.__str155325;else if(79==(0|a))var e=0|He.__str156326;else if(88==(0|a))var e=0|He.__str84254;else if(90==(0|a))var e=0|He.__str110280;else var e=0;var e;return e}function qr(r){var a=r+44|0,e=Se[a>>2],i=zr(r);if(0==(0|i))var v=0;else var t=Gr(r,e),v=t;var v;return Se[a>>2]=e,v}function $r(r,a,e,i,v){var t,f,_,s=Oe;Oe+=16;var n,o=s,_=o>>2,l=s+4,b=s+8,f=b>>2;Se[l>>2]=0|ii;var t=(a+12|0)>>2,k=Se[t];if(Ae[k]<<24>>24==69){Se[l>>2]=0|He.__str134304;var u=k+1|0;Se[t]=u;var c=0|He.__str134304}else var c=0|ii;var c,h=i<<24>>24;do{if(65==(0|h)){var d=Dr(a,0|He.__str135305,(ne=Oe,Oe+=4,Se[ne>>2]=c,ne)),w=d;n=10;break}if(66==(0|h)){var p=Dr(a,0|He.__str136306,(ne=Oe,Oe+=4,Se[ne>>2]=c,ne)),w=p;n=10;break}if(80==(0|h)){var E=Dr(a,0|He.__str137307,(ne=Oe,Oe+=4,Se[ne>>2]=c,ne)),w=E;n=10;break}if(81==(0|h)){var A=Dr(a,0|He.__str138308,(ne=Oe,Oe+=4,Se[ne>>2]=c,ne)),w=A;n=10;break}if(82==(0|h)){var g=Dr(a,0|He.__str139309,(ne=Oe,Oe+=4,Se[ne>>2]=c,ne)),w=g;n=10;break}if(83==(0|h)){var y=Dr(a,0|He.__str140310,(ne=Oe,Oe+=4,Se[ne>>2]=c,ne)),w=y;n=10;break}if(63==(0|h)){var w=0|ii;n=10}else n=31}while(0);r:do if(10==n){var w,m=xr(a,o,l);if(0==(0|m))break;var S=a+44|0,M=Se[S>>2],C=Se[t],R=Ae[C]<<24>>24==89;a:do if(R){var T=C+1|0;Se[t]=T;var O=Lr(a);if(0==(0|O))break r;var N=Ha(O),I=Ae[w]<<24>>24==32,P=Se[_],D=0==(0|P);do{if(I){if(!D){n=17;break}var L=w+1|0;n=18;break}if(D){var L=w;n=18;break}n=17;break}while(0);if(17==n){var F=Dr(a,0|He.__str141311,(ne=Oe,Oe+=8,Se[ne>>2]=P,Se[ne+4>>2]=w,ne));Se[_]=0;var X=F}else if(18==n)var L,j=Dr(a,0|He.__str142312,(ne=Oe,Oe+=4,Se[ne>>2]=L,ne)),X=j;var X;if(0==(0|N)){var U=X;break}for(var x=X,z=N;;){var z,x,V=z-1|0,B=Lr(a),H=Dr(a,0|He.__str143313,(ne=Oe,Oe+=8,Se[ne>>2]=x,Se[ne+4>>2]=B,ne));if(0==(0|V)){var U=H;break a}var x=H,z=V}}else var U=w;while(0);var U,K=Pr(a,b,e,0);if(0==(0|K))break;var Y=Se[_];if(0==(0|Y)){var G=0==(0|v);do if(G){if(Ae[U]<<24>>24==0){var W=U;break}var Z=U+1|0;if(Ae[Z]<<24>>24!=42){var W=U;break}var Q=Se[f],q=Ca(Q);if(Ae[Q+(q-1)|0]<<24>>24!=42){var W=U;break}var W=Z}else var W=U;while(0);var W,$=Se[f],J=Dr(a,0|He.__str170,(ne=Oe,Oe+=8,Se[ne>>2]=$,Se[ne+4>>2]=W,ne));Se[r>>2]=J}else{var rr=Se[f],ar=Dr(a,0|He.__str144314,(ne=Oe,Oe+=12,Se[ne>>2]=rr,Se[ne+4>>2]=Y,Se[ne+8>>2]=U,ne));Se[r>>2]=ar}var er=Se[f+1];Se[r+4>>2]=er,Se[S>>2]=M}while(0);Oe=s}function Jr(r){var a,e=r>>>0<245;do{if(e){if(r>>>0<11)var i=16;else var i=r+11&-8;var i,v=i>>>3,t=Me[vi>>2],f=t>>>(v>>>0);if(0!=(3&f|0)){var _=(1&f^1)+v|0,s=_<<1,n=(s<<2)+vi+40|0,o=(s+2<<2)+vi+40|0,l=Me[o>>2],b=l+8|0,k=Me[b>>2];if((0|n)==(0|k))Se[vi>>2]=t&(1<<_^-1);else{if(k>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[o>>2]=k,Se[k+12>>2]=n}var u=_<<3;Se[l+4>>2]=3|u;var c=l+(4|u)|0,h=1|Se[c>>2];Se[c>>2]=h;var d=b;a=38;break}if(i>>>0<=Me[vi+8>>2]>>>0){var w=i;a=30;break}if(0!=(0|f)){var p=2<<v,E=f<<v&(p|-p),A=(E&-E)-1|0,g=A>>>12&16,y=A>>>(g>>>0),m=y>>>5&8,S=y>>>(m>>>0),M=S>>>2&4,C=S>>>(M>>>0),R=C>>>1&2,T=C>>>(R>>>0),O=T>>>1&1,N=(m|g|M|R|O)+(T>>>(O>>>0))|0,I=N<<1,P=(I<<2)+vi+40|0,D=(I+2<<2)+vi+40|0,L=Me[D>>2],F=L+8|0,X=Me[F>>2];if((0|P)==(0|X))Se[vi>>2]=t&(1<<N^-1);else{if(X>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[D>>2]=X,Se[X+12>>2]=P}var j=N<<3,U=j-i|0;Se[L+4>>2]=3|i;var x=L,z=x+i|0;Se[x+(4|i)>>2]=1|U,Se[x+j>>2]=U;var V=Me[vi+8>>2];if(0!=(0|V)){var B=Se[vi+20>>2],H=V>>>2&1073741822,K=(H<<2)+vi+40|0,Y=Me[vi>>2],G=1<<(V>>>3),W=0==(Y&G|0);do{if(!W){var Z=(H+2<<2)+vi+40|0,Q=Me[Z>>2];if(Q>>>0>=Me[vi+16>>2]>>>0){var q=Q,$=Z;break}throw Ka(),"Reached an unreachable!"}Se[vi>>2]=Y|G;var q=K,$=(H+2<<2)+vi+40|0}while(0);var $,q;Se[$>>2]=B,Se[q+12>>2]=B;var J=B+8|0;Se[J>>2]=q;var rr=B+12|0;Se[rr>>2]=K}Se[vi+8>>2]=U,Se[vi+20>>2]=z;var d=F;a=38;break}if(0==(0|Se[vi+4>>2])){var w=i;a=30;break}var ar=ra(i);if(0==(0|ar)){var w=i;a=30;break}var d=ar;a=38;break}if(r>>>0>4294967231){var w=-1;a=30;break}var er=r+11&-8;if(0==(0|Se[vi+4>>2])){var w=er;a=30;break}var ir=ea(er);if(0==(0|ir)){var w=er;a=30;break}var d=ir;a=38;break}while(0);if(30==a){var w,vr=Me[vi+8>>2];if(w>>>0>vr>>>0){var tr=Me[vi+12>>2];if(w>>>0<tr>>>0){var fr=tr-w|0;Se[vi+12>>2]=fr;var _r=Me[vi+24>>2],sr=_r;Se[vi+24>>2]=sr+w|0,Se[w+(sr+4)>>2]=1|fr,Se[_r+4>>2]=3|w;var d=_r+8|0}else var nr=aa(w),d=nr}else{var or=vr-w|0,lr=Me[vi+20>>2];if(or>>>0>15){var br=lr;Se[vi+20>>2]=br+w|0,Se[vi+8>>2]=or,Se[w+(br+4)>>2]=1|or,Se[br+vr>>2]=or,Se[lr+4>>2]=3|w}else{Se[vi+8>>2]=0,Se[vi+20>>2]=0,Se[lr+4>>2]=3|vr;var kr=vr+(lr+4)|0,ur=1|Se[kr>>2];Se[kr>>2]=ur}var d=lr+8|0}}var d;return d}function ra(r){var a,e,i,v=Se[vi+4>>2],t=(v&-v)-1|0,f=t>>>12&16,_=t>>>(f>>>0),s=_>>>5&8,n=_>>>(s>>>0),o=n>>>2&4,l=n>>>(o>>>0),b=l>>>1&2,k=l>>>(b>>>0),u=k>>>1&1,c=Me[vi+((s|f|o|b|u)+(k>>>(u>>>0))<<2)+304>>2],h=c,e=h>>2,d=(Se[c+4>>2]&-8)-r|0;r:for(;;)for(var d,h,w=h;;){var w,p=Se[w+16>>2];if(0==(0|p)){var E=Se[w+20>>2];if(0==(0|E))break r;var A=E}else var A=p;var A,g=(Se[A+4>>2]&-8)-r|0;if(g>>>0<d>>>0){var h=A,e=h>>2,d=g;continue r}var w=A}var y=h,m=Me[vi+16>>2],S=y>>>0<m>>>0;do if(!S){var M=y+r|0,C=M;if(y>>>0>=M>>>0)break;var R=Me[e+6],T=Me[e+3],O=(0|T)==(0|h);do if(O){var N=h+20|0,I=Se[N>>2];if(0==(0|I)){var P=h+16|0,D=Se[P>>2];if(0==(0|D)){var L=0,a=L>>2;break}var F=P,X=D}else{var F=N,X=I;i=14}for(;;){var X,F,j=X+20|0,U=Se[j>>2];if(0==(0|U)){var x=X+16|0,z=Me[x>>2];if(0==(0|z))break;var F=x,X=z}else var F=j,X=U}if(F>>>0<m>>>0)throw Ka(),"Reached an unreachable!";Se[F>>2]=0;var L=X,a=L>>2}else{var V=Me[e+2];if(V>>>0<m>>>0)throw Ka(),"Reached an unreachable!";Se[V+12>>2]=T,Se[T+8>>2]=V;var L=T,a=L>>2}while(0);var L,B=0==(0|R);r:do if(!B){var H=h+28|0,K=(Se[H>>2]<<2)+vi+304|0,Y=(0|h)==(0|Se[K>>2]);do{if(Y){if(Se[K>>2]=L,0!=(0|L))break;var G=Se[vi+4>>2]&(1<<Se[H>>2]^-1);Se[vi+4>>2]=G;break r}if(R>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";var W=R+16|0;if((0|Se[W>>2])==(0|h)?Se[W>>2]=L:Se[R+20>>2]=L,0==(0|L))break r}while(0);if(L>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+6]=R;var Z=Me[e+4];if(0!=(0|Z)){if(Z>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+4]=Z,Se[Z+24>>2]=L}var Q=Me[e+5];if(0==(0|Q))break;if(Q>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+5]=Q,Se[Q+24>>2]=L}while(0);if(d>>>0<16){var q=d+r|0;Se[e+1]=3|q;var $=q+(y+4)|0,J=1|Se[$>>2];Se[$>>2]=J}else{Se[e+1]=3|r,Se[r+(y+4)>>2]=1|d,Se[y+d+r>>2]=d;var rr=Me[vi+8>>2];if(0!=(0|rr)){var ar=Me[vi+20>>2],er=rr>>>2&1073741822,ir=(er<<2)+vi+40|0,vr=Me[vi>>2],tr=1<<(rr>>>3),fr=0==(vr&tr|0);do{if(!fr){var _r=(er+2<<2)+vi+40|0,sr=Me[_r>>2];if(sr>>>0>=Me[vi+16>>2]>>>0){var nr=sr,or=_r;break}throw Ka(),"Reached an unreachable!"}Se[vi>>2]=vr|tr;var nr=ir,or=(er+2<<2)+vi+40|0}while(0);var or,nr;Se[or>>2]=ar,Se[nr+12>>2]=ar,Se[ar+8>>2]=nr,Se[ar+12>>2]=ir}Se[vi+8>>2]=d,Se[vi+20>>2]=C}return h+8|0}while(0);throw Ka(),"Reached an unreachable!"}function aa(r){var a,e;0==(0|Se[ti>>2])&&ba();var i=0==(4&Se[vi+440>>2]|0);do{if(i){var v=Se[vi+24>>2],t=0==(0|v);do{if(!t){var f=v,_=ua(f);if(0==(0|_)){e=6;break}var s=Se[ti+8>>2],n=r+47-Se[vi+12>>2]+s&-s;if(n>>>0>=2147483647){e=14;break}var o=re(n);if((0|o)==(Se[_>>2]+Se[_+4>>2]|0)){var l=o,b=n,k=o;e=13;break}var u=o,c=n;e=15;break}e=6}while(0);do if(6==e){var h=re(0);if((0|h)==-1){e=14;break}var d=Se[ti+8>>2],w=d+(r+47)&-d,p=h,E=Se[ti+4>>2],A=E-1|0;if(0==(A&p|0))var g=w;else var g=w-p+(A+p&-E)|0;var g;if(g>>>0>=2147483647){e=14;break}var y=re(g);if((0|y)==(0|h)){var l=h,b=g,k=y;e=13;break}var u=y,c=g;e=15;break}while(0);if(13==e){var k,b,l;if((0|l)!=-1){var m=b,S=l;e=26;break}var u=k,c=b}else if(14==e){var M=4|Se[vi+440>>2];Se[vi+440>>2]=M,e=23;break}var c,u,C=0|-c,R=(0|u)!=-1&c>>>0<2147483647;do{if(R){if(c>>>0>=(r+48|0)>>>0){var T=c;e=21;break}var O=Se[ti+8>>2],N=r+47-c+O&-O;if(N>>>0>=2147483647){var T=c;e=21;break}var I=re(N);if((0|I)==-1){re(C);e=22;break}var T=N+c|0;e=21;break}var T=c;e=21}while(0);if(21==e){var T;if((0|u)!=-1){var m=T,S=u;e=26;break}}var P=4|Se[vi+440>>2];Se[vi+440>>2]=P,e=23;break}e=23}while(0);do if(23==e){var D=Se[ti+8>>2],L=D+(r+47)&-D;if(L>>>0>=2147483647){e=49;break}var F=re(L),X=re(0);if(!((0|X)!=-1&(0|F)!=-1&F>>>0<X>>>0)){e=49;break}var j=X-F|0;if(j>>>0<=(r+40|0)>>>0|(0|F)==-1){e=49;break}var m=j,S=F;e=26;break}while(0);r:do if(26==e){var S,m,U=Se[vi+432>>2]+m|0;Se[vi+432>>2]=U,U>>>0>Me[vi+436>>2]>>>0&&(Se[vi+436>>2]=U);var x=Me[vi+24>>2],z=0==(0|x);a:do if(z){var V=Me[vi+16>>2];0==(0|V)|S>>>0<V>>>0&&(Se[vi+16>>2]=S),Se[vi+444>>2]=S,Se[vi+448>>2]=m,Se[vi+456>>2]=0;var B=Se[ti>>2];Se[vi+36>>2]=B,Se[vi+32>>2]=-1,ha(),ca(S,m-40|0)}else{for(var H=vi+444|0,a=H>>2;;){var H;if(0==(0|H))break;var K=Me[a],Y=H+4|0,G=Me[Y>>2],W=K+G|0;if((0|S)==(0|W)){if(0!=(8&Se[a+3]|0))break;var Z=x;if(!(Z>>>0>=K>>>0&Z>>>0<W>>>0))break;Se[Y>>2]=G+m|0;var Q=Se[vi+24>>2],q=Se[vi+12>>2]+m|0;ca(Q,q);break a}var H=Se[a+2],a=H>>2}S>>>0<Me[vi+16>>2]>>>0&&(Se[vi+16>>2]=S);for(var $=S+m|0,J=vi+444|0;;){var J;if(0==(0|J))break;var rr=0|J,ar=Me[rr>>2];if((0|ar)==(0|$)){if(0!=(8&Se[J+12>>2]|0))break;Se[rr>>2]=S;var er=J+4|0,ir=Se[er>>2]+m|0;Se[er>>2]=ir;var vr=da(S,ar,r),tr=vr;e=50;break r}var J=Se[J+8>>2]}Ma(S,m)}while(0);var fr=Me[vi+12>>2];if(fr>>>0<=r>>>0){e=49;break}var _r=fr-r|0;Se[vi+12>>2]=_r;var sr=Me[vi+24>>2],nr=sr;Se[vi+24>>2]=nr+r|0,Se[r+(nr+4)>>2]=1|_r,Se[sr+4>>2]=3|r;var tr=sr+8|0;e=50;break}while(0);if(49==e){var or=Je();Se[or>>2]=12;var tr=0}var tr;return tr}function ea(r){var a,e,i,v,t,f,_=r>>2,s=0|-r,n=r>>>8,o=0==(0|n);do if(o)var l=0;else{if(r>>>0>16777215){var l=31;break}var b=(n+1048320|0)>>>16&8,k=n<<b,u=(k+520192|0)>>>16&4,c=k<<u,h=(c+245760|0)>>>16&2,d=14-(u|b|h)+(c<<h>>>15)|0,l=r>>>((d+7|0)>>>0)&1|d<<1}while(0);var l,w=Me[vi+(l<<2)+304>>2],p=0==(0|w);r:do if(p)var E=0,A=s,g=0;else{if(31==(0|l))var y=0;else var y=25-(l>>>1)|0;for(var y,m=0,S=s,M=w,t=M>>2,C=r<<y,R=0;;){var R,C,M,S,m,T=Se[t+1]&-8,O=T-r|0;if(O>>>0<S>>>0){if((0|T)==(0|r)){var E=M,A=O,g=M;break r}var N=M,I=O}else var N=m,I=S;var I,N,P=Me[t+5],D=Me[((C>>>31<<2)+16>>2)+t],L=0==(0|P)|(0|P)==(0|D)?R:P;if(0==(0|D)){var E=N,A=I,g=L;break r}var m=N,S=I,M=D,t=M>>2,C=C<<1,R=L}}while(0);var g,A,E,F=0==(0|g)&0==(0|E);do if(F){var X=2<<l,j=Se[vi+4>>2]&(X|-X);if(0==(0|j)){var U=g;break}var x=(j&-j)-1|0,z=x>>>12&16,V=x>>>(z>>>0),B=V>>>5&8,H=V>>>(B>>>0),K=H>>>2&4,Y=H>>>(K>>>0),G=Y>>>1&2,W=Y>>>(G>>>0),Z=W>>>1&1,U=Se[vi+((B|z|K|G|Z)+(W>>>(Z>>>0))<<2)+304>>2]}else var U=g;while(0);var U,Q=0==(0|U);r:do if(Q)var q=A,$=E,v=$>>2;else for(var J=U,i=J>>2,rr=A,ar=E;;){var ar,rr,J,er=(Se[i+1]&-8)-r|0,ir=er>>>0<rr>>>0,vr=ir?er:rr,tr=ir?J:ar,fr=Me[i+4];if(0==(0|fr)){var _r=Me[i+5];if(0==(0|_r)){var q=vr,$=tr,v=$>>2;break r}var J=_r,i=J>>2,rr=vr,ar=tr}else var J=fr,i=J>>2,rr=vr,ar=tr}while(0);var $,q,sr=0==(0|$);r:do{if(!sr){if(q>>>0>=(Se[vi+8>>2]-r|0)>>>0){var nr=0;break}var or=$,e=or>>2,lr=Me[vi+16>>2],br=or>>>0<lr>>>0;do if(!br){var kr=or+r|0,ur=kr;if(or>>>0>=kr>>>0)break;var cr=Me[v+6],hr=Me[v+3],dr=(0|hr)==(0|$);do if(dr){var wr=$+20|0,pr=Se[wr>>2];if(0==(0|pr)){var Er=$+16|0,Ar=Se[Er>>2];if(0==(0|Ar)){var gr=0,a=gr>>2;break}var yr=Er,mr=Ar}else{var yr=wr,mr=pr;f=28}for(;;){var mr,yr,Sr=mr+20|0,Mr=Se[Sr>>2];if(0==(0|Mr)){var Cr=mr+16|0,Rr=Me[Cr>>2];if(0==(0|Rr))break;var yr=Cr,mr=Rr}else var yr=Sr,mr=Mr}if(yr>>>0<lr>>>0)throw Ka(),"Reached an unreachable!";Se[yr>>2]=0;var gr=mr,a=gr>>2}else{var Tr=Me[v+2];if(Tr>>>0<lr>>>0)throw Ka(),"Reached an unreachable!";Se[Tr+12>>2]=hr,Se[hr+8>>2]=Tr;var gr=hr,a=gr>>2}while(0);var gr,Or=0==(0|cr);a:do if(!Or){var Nr=$+28|0,Ir=(Se[Nr>>2]<<2)+vi+304|0,Pr=(0|$)==(0|Se[Ir>>2]);do{if(Pr){if(Se[Ir>>2]=gr,0!=(0|gr))break;var Dr=Se[vi+4>>2]&(1<<Se[Nr>>2]^-1);Se[vi+4>>2]=Dr;break a}if(cr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";var Lr=cr+16|0;if((0|Se[Lr>>2])==(0|$)?Se[Lr>>2]=gr:Se[cr+20>>2]=gr,0==(0|gr))break a}while(0);if(gr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+6]=cr;var Fr=Me[v+4];if(0!=(0|Fr)){if(Fr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+4]=Fr,Se[Fr+24>>2]=gr}var Xr=Me[v+5];if(0==(0|Xr))break;if(Xr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+5]=Xr,Se[Xr+24>>2]=gr}while(0);var jr=q>>>0<16;a:do if(jr){var Ur=q+r|0;Se[v+1]=3|Ur;var xr=Ur+(or+4)|0,zr=1|Se[xr>>2];Se[xr>>2]=zr}else if(Se[v+1]=3|r,Se[_+(e+1)]=1|q,Se[(q>>2)+e+_]=q,q>>>0<256){var Vr=q>>>2&1073741822,Br=(Vr<<2)+vi+40|0,Hr=Me[vi>>2],Kr=1<<(q>>>3),Yr=0==(Hr&Kr|0);do{if(!Yr){var Gr=(Vr+2<<2)+vi+40|0,Wr=Me[Gr>>2];if(Wr>>>0>=Me[vi+16>>2]>>>0){var Zr=Wr,Qr=Gr;break}throw Ka(),"Reached an unreachable!"}Se[vi>>2]=Hr|Kr;var Zr=Br,Qr=(Vr+2<<2)+vi+40|0}while(0);var Qr,Zr;Se[Qr>>2]=ur,Se[Zr+12>>2]=ur,Se[_+(e+2)]=Zr,Se[_+(e+3)]=Br}else{var qr=kr,$r=q>>>8,Jr=0==(0|$r);do if(Jr)var ra=0;else{if(q>>>0>16777215){var ra=31;break}var aa=($r+1048320|0)>>>16&8,ea=$r<<aa,ia=(ea+520192|0)>>>16&4,va=ea<<ia,ta=(va+245760|0)>>>16&2,fa=14-(ia|aa|ta)+(va<<ta>>>15)|0,ra=q>>>((fa+7|0)>>>0)&1|fa<<1}while(0);var ra,_a=(ra<<2)+vi+304|0;Se[_+(e+7)]=ra;var sa=r+(or+16)|0;Se[_+(e+5)]=0,Se[sa>>2]=0;var na=Se[vi+4>>2],oa=1<<ra;if(0==(na&oa|0)){var la=na|oa;Se[vi+4>>2]=la,Se[_a>>2]=qr,Se[_+(e+6)]=_a,Se[_+(e+3)]=qr,Se[_+(e+2)]=qr}else{if(31==(0|ra))var ba=0;else var ba=25-(ra>>>1)|0;for(var ba,ka=q<<ba,ua=Se[_a>>2];;){var ua,ka;if((Se[ua+4>>2]&-8|0)==(0|q)){var ca=ua+8|0,ha=Me[ca>>2],da=Me[vi+16>>2],wa=ua>>>0<da>>>0;do if(!wa){if(ha>>>0<da>>>0)break;Se[ha+12>>2]=qr,Se[ca>>2]=qr,Se[_+(e+2)]=ha,Se[_+(e+3)]=ua,Se[_+(e+6)]=0;break a}while(0);throw Ka(),"Reached an unreachable!"}var pa=(ka>>>31<<2)+ua+16|0,Ea=Me[pa>>2];if(0==(0|Ea)){if(pa>>>0>=Me[vi+16>>2]>>>0){Se[pa>>2]=qr,Se[_+(e+6)]=ua,Se[_+(e+3)]=qr,Se[_+(e+2)]=qr;break a}throw Ka(),"Reached an unreachable!"}var ka=ka<<1,ua=Ea}}}while(0);var nr=$+8|0;break r}while(0);throw Ka(),"Reached an unreachable!"}var nr=0}while(0);var nr;return nr}function ia(r){var a;0==(0|Se[ti>>2])&&ba();var e=r>>>0<4294967232;r:do if(e){var i=Me[vi+24>>2];if(0==(0|i)){var v=0;break}var t=Me[vi+12>>2],f=t>>>0>(r+40|0)>>>0;do if(f){var _=Me[ti+8>>2],s=-40-r-1+t+_|0,n=Math.floor((s>>>0)/(_>>>0)),o=(n-1)*_|0,l=i,b=ua(l);if(0!=(8&Se[b+12>>2]|0))break;var k=re(0),a=(b+4|0)>>2;if((0|k)!=(Se[b>>2]+Se[a]|0))break;var u=o>>>0>2147483646?-2147483648-_|0:o,c=0|-u,h=re(c),d=re(0);if(!((0|h)!=-1&d>>>0<k>>>0))break;var w=k-d|0;if((0|k)==(0|d))break;var p=Se[a]-w|0;Se[a]=p;var E=Se[vi+432>>2]-w|0;Se[vi+432>>2]=E;var A=Se[vi+24>>2],g=Se[vi+12>>2]-w|0;ca(A,g);var v=(0|k)!=(0|d);break r}while(0);if(Me[vi+12>>2]>>>0<=Me[vi+28>>2]>>>0){var v=0;break}Se[vi+28>>2]=-1;var v=0}else var v=0;while(0);var v;return 1&v}function va(r){var a,e,i,v,t,f,_,s=r>>2,n=0==(0|r);r:do if(!n){var o=r-8|0,l=o,b=Me[vi+16>>2],k=o>>>0<b>>>0;a:do if(!k){var u=Me[r-4>>2],c=3&u;if(1==(0|c))break;var h=u&-8,f=h>>2,d=r+(h-8)|0,w=d,p=0==(1&u|0);e:do if(p){var E=Me[o>>2];if(0==(0|c))break r;var A=-8-E|0,t=A>>2,g=r+A|0,y=g,m=E+h|0;if(g>>>0<b>>>0)break a;if((0|y)==(0|Se[vi+20>>2])){var v=(r+(h-4)|0)>>2;if(3!=(3&Se[v]|0)){var S=y,i=S>>2,M=m;break}Se[vi+8>>2]=m;var C=Se[v]&-2;Se[v]=C,Se[t+(s+1)]=1|m,Se[d>>2]=m;break r}if(E>>>0<256){var R=Me[t+(s+2)],T=Me[t+(s+3)];if((0|R)!=(0|T)){var O=((E>>>2&1073741822)<<2)+vi+40|0,N=(0|R)!=(0|O)&R>>>0<b>>>0;do if(!N){if(!((0|T)==(0|O)|T>>>0>=b>>>0))break;Se[R+12>>2]=T,Se[T+8>>2]=R;var S=y,i=S>>2,M=m;break e}while(0);throw Ka(),"Reached an unreachable!"}var I=Se[vi>>2]&(1<<(E>>>3)^-1);Se[vi>>2]=I;var S=y,i=S>>2,M=m}else{var P=g,D=Me[t+(s+6)],L=Me[t+(s+3)],F=(0|L)==(0|P);do if(F){var X=A+(r+20)|0,j=Se[X>>2];if(0==(0|j)){var U=A+(r+16)|0,x=Se[U>>2];if(0==(0|x)){var z=0,e=z>>2;break}var V=U,B=x}else{var V=X,B=j;_=21}for(;;){var B,V,H=B+20|0,K=Se[H>>2];if(0==(0|K)){var Y=B+16|0,G=Me[Y>>2];if(0==(0|G))break;var V=Y,B=G}else var V=H,B=K}if(V>>>0<b>>>0)throw Ka(),"Reached an unreachable!";Se[V>>2]=0;var z=B,e=z>>2}else{var W=Me[t+(s+2)];if(W>>>0<b>>>0)throw Ka(),"Reached an unreachable!";Se[W+12>>2]=L,Se[L+8>>2]=W;var z=L,e=z>>2}while(0);var z;if(0==(0|D)){var S=y,i=S>>2,M=m;break}var Z=A+(r+28)|0,Q=(Se[Z>>2]<<2)+vi+304|0,q=(0|P)==(0|Se[Q>>2]);do{if(q){if(Se[Q>>2]=z,0!=(0|z))break;var $=Se[vi+4>>2]&(1<<Se[Z>>2]^-1);Se[vi+4>>2]=$;var S=y,i=S>>2,M=m;break e}if(D>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";var J=D+16|0;if((0|Se[J>>2])==(0|P)?Se[J>>2]=z:Se[D+20>>2]=z,0==(0|z)){var S=y,i=S>>2,M=m;break e}}while(0);if(z>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[e+6]=D;var rr=Me[t+(s+4)];if(0!=(0|rr)){if(rr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[e+4]=rr,Se[rr+24>>2]=z}var ar=Me[t+(s+5)];if(0==(0|ar)){var S=y,i=S>>2,M=m;break}if(ar>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[e+5]=ar,Se[ar+24>>2]=z;var S=y,i=S>>2,M=m}}else var S=l,i=S>>2,M=h;while(0);var M,S,er=S;if(er>>>0>=d>>>0)break;var ir=r+(h-4)|0,vr=Me[ir>>2];if(0==(1&vr|0))break;var tr=0==(2&vr|0);do{if(tr){if((0|w)==(0|Se[vi+24>>2])){var fr=Se[vi+12>>2]+M|0;Se[vi+12>>2]=fr,Se[vi+24>>2]=S;var _r=1|fr;if(Se[i+1]=_r,(0|S)==(0|Se[vi+20>>2])&&(Se[vi+20>>2]=0,Se[vi+8>>2]=0),fr>>>0<=Me[vi+28>>2]>>>0)break r;ia(0);break r}if((0|w)==(0|Se[vi+20>>2])){var sr=Se[vi+8>>2]+M|0;Se[vi+8>>2]=sr,Se[vi+20>>2]=S;var nr=1|sr;Se[i+1]=nr;var or=er+sr|0;Se[or>>2]=sr;break r}var lr=(vr&-8)+M|0,br=vr>>>3,kr=vr>>>0<256;e:do if(kr){var ur=Me[s+f],cr=Me[((4|h)>>2)+s];if((0|ur)!=(0|cr)){var hr=((vr>>>2&1073741822)<<2)+vi+40|0,dr=(0|ur)==(0|hr);do{if(!dr){if(ur>>>0<Me[vi+16>>2]>>>0){_=66;break}_=63;break}_=63}while(0);do if(63==_){if((0|cr)!=(0|hr)&&cr>>>0<Me[vi+16>>2]>>>0)break;Se[ur+12>>2]=cr,Se[cr+8>>2]=ur;break e}while(0);throw Ka(),"Reached an unreachable!"}var wr=Se[vi>>2]&(1<<br^-1);Se[vi>>2]=wr}else{var pr=d,Er=Me[f+(s+4)],Ar=Me[((4|h)>>2)+s],gr=(0|Ar)==(0|pr);do if(gr){var yr=h+(r+12)|0,mr=Se[yr>>2];if(0==(0|mr)){var Sr=h+(r+8)|0,Mr=Se[Sr>>2];if(0==(0|Mr)){var Cr=0,a=Cr>>2;break}var Rr=Sr,Tr=Mr}else{var Rr=yr,Tr=mr;_=73}for(;;){var Tr,Rr,Or=Tr+20|0,Nr=Se[Or>>2];if(0==(0|Nr)){var Ir=Tr+16|0,Pr=Me[Ir>>2];if(0==(0|Pr))break;var Rr=Ir,Tr=Pr}else var Rr=Or,Tr=Nr}if(Rr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[Rr>>2]=0;var Cr=Tr,a=Cr>>2}else{var Dr=Me[s+f];if(Dr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[Dr+12>>2]=Ar,
Se[Ar+8>>2]=Dr;var Cr=Ar,a=Cr>>2}while(0);var Cr;if(0==(0|Er))break;var Lr=h+(r+20)|0,Fr=(Se[Lr>>2]<<2)+vi+304|0,Xr=(0|pr)==(0|Se[Fr>>2]);do{if(Xr){if(Se[Fr>>2]=Cr,0!=(0|Cr))break;var jr=Se[vi+4>>2]&(1<<Se[Lr>>2]^-1);Se[vi+4>>2]=jr;break e}if(Er>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";var Ur=Er+16|0;if((0|Se[Ur>>2])==(0|pr)?Se[Ur>>2]=Cr:Se[Er+20>>2]=Cr,0==(0|Cr))break e}while(0);if(Cr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+6]=Er;var xr=Me[f+(s+2)];if(0!=(0|xr)){if(xr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+4]=xr,Se[xr+24>>2]=Cr}var zr=Me[f+(s+3)];if(0==(0|zr))break;if(zr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+5]=zr,Se[zr+24>>2]=Cr}while(0);if(Se[i+1]=1|lr,Se[er+lr>>2]=lr,(0|S)!=(0|Se[vi+20>>2])){var Vr=lr;break}Se[vi+8>>2]=lr;break r}Se[ir>>2]=vr&-2,Se[i+1]=1|M,Se[er+M>>2]=M;var Vr=M}while(0);var Vr;if(Vr>>>0<256){var Br=Vr>>>2&1073741822,Hr=(Br<<2)+vi+40|0,Kr=Me[vi>>2],Yr=1<<(Vr>>>3),Gr=0==(Kr&Yr|0);do{if(!Gr){var Wr=(Br+2<<2)+vi+40|0,Zr=Me[Wr>>2];if(Zr>>>0>=Me[vi+16>>2]>>>0){var Qr=Zr,qr=Wr;break}throw Ka(),"Reached an unreachable!"}Se[vi>>2]=Kr|Yr;var Qr=Hr,qr=(Br+2<<2)+vi+40|0}while(0);var qr,Qr;Se[qr>>2]=S,Se[Qr+12>>2]=S,Se[i+2]=Qr,Se[i+3]=Hr;break r}var $r=S,Jr=Vr>>>8,ra=0==(0|Jr);do if(ra)var aa=0;else{if(Vr>>>0>16777215){var aa=31;break}var ea=(Jr+1048320|0)>>>16&8,va=Jr<<ea,fa=(va+520192|0)>>>16&4,_a=va<<fa,sa=(_a+245760|0)>>>16&2,na=14-(fa|ea|sa)+(_a<<sa>>>15)|0,aa=Vr>>>((na+7|0)>>>0)&1|na<<1}while(0);var aa,oa=(aa<<2)+vi+304|0;Se[i+7]=aa,Se[i+5]=0,Se[i+4]=0;var la=Se[vi+4>>2],ba=1<<aa,ka=0==(la&ba|0);e:do if(ka){var ua=la|ba;Se[vi+4>>2]=ua,Se[oa>>2]=$r,Se[i+6]=oa,Se[i+3]=S,Se[i+2]=S}else{if(31==(0|aa))var ca=0;else var ca=25-(aa>>>1)|0;for(var ca,ha=Vr<<ca,da=Se[oa>>2];;){var da,ha;if((Se[da+4>>2]&-8|0)==(0|Vr)){var wa=da+8|0,pa=Me[wa>>2],Ea=Me[vi+16>>2],Aa=da>>>0<Ea>>>0;do if(!Aa){if(pa>>>0<Ea>>>0)break;Se[pa+12>>2]=$r,Se[wa>>2]=$r,Se[i+2]=pa,Se[i+3]=da,Se[i+6]=0;break e}while(0);throw Ka(),"Reached an unreachable!"}var ga=(ha>>>31<<2)+da+16|0,ya=Me[ga>>2];if(0==(0|ya)){if(ga>>>0>=Me[vi+16>>2]>>>0){Se[ga>>2]=$r,Se[i+6]=da,Se[i+3]=S,Se[i+2]=S;break e}throw Ka(),"Reached an unreachable!"}var ha=ha<<1,da=ya}}while(0);var ma=Se[vi+32>>2]-1|0;if(Se[vi+32>>2]=ma,0!=(0|ma))break r;ta();break r}while(0);throw Ka(),"Reached an unreachable!"}while(0)}function ta(){var r=Se[vi+452>>2],a=0==(0|r);r:do if(!a)for(var e=r;;){var e,i=Se[e+8>>2];if(0==(0|i))break r;var e=i}while(0);Se[vi+32>>2]=-1}function fa(r,a){if(0==(0|r))var e=Jr(a),i=e;else var v=la(r,a),i=v;var i;return i}function _a(r,a){var e,i=r>>>0<9;do if(i)var v=Jr(a),t=v;else{var f=r>>>0<16?16:r,_=0==(f-1&f|0);r:do if(_)var s=f;else{if(f>>>0<=16){var s=16;break}for(var n=16;;){var n,o=n<<1;if(o>>>0>=f>>>0){var s=o;break r}var n=o}}while(0);var s;if((-64-s|0)>>>0>a>>>0){if(a>>>0<11)var l=16;else var l=a+11&-8;var l,b=Jr(l+(s+12)|0);if(0==(0|b)){var t=0;break}var k=b-8|0;if(0==((b>>>0)%(s>>>0)|0))var u=k,c=0;else{var h=b+(s-1)&-s,d=h-8|0,w=k;if((d-w|0)>>>0>15)var p=d;else var p=h+(s-8)|0;var p,E=p-w|0,e=(b-4|0)>>2,A=Se[e],g=(A&-8)-E|0;if(0==(3&A|0)){var y=Se[k>>2]+E|0;Se[p>>2]=y,Se[p+4>>2]=g;var u=p,c=0}else{var m=p+4|0,S=g|1&Se[m>>2]|2;Se[m>>2]=S;var M=g+(p+4)|0,C=1|Se[M>>2];Se[M>>2]=C;var R=E|1&Se[e]|2;Se[e]=R;var T=b+(E-4)|0,O=1|Se[T>>2];Se[T>>2]=O;var u=p,c=b}}var c,u,N=u+4|0,I=Me[N>>2],P=0==(3&I|0);do if(P)var D=0;else{var L=I&-8;if(L>>>0<=(l+16|0)>>>0){var D=0;break}var F=L-l|0;Se[N>>2]=l|1&I|2,Se[u+(4|l)>>2]=3|F;var X=u+(4|L)|0,j=1|Se[X>>2];Se[X>>2]=j;var D=l+(u+8)|0}while(0);var D;0!=(0|c)&&va(c),0!=(0|D)&&va(D);var t=u+8|0}else{var U=Je();Se[U>>2]=12;var t=0}}while(0);var t;return t}function sa(r,a,e,i){var v,t;0==(0|Se[ti>>2])&&ba();var f=0==(0|i),_=0==(0|r);do{if(f){if(_){var s=Jr(0),n=s;t=30;break}var o=r<<2;if(o>>>0<11){var l=0,b=16;t=9;break}var l=0,b=o+11&-8;t=9;break}if(_){var n=i;t=30;break}var l=i,b=0;t=9;break}while(0);do if(9==t){var b,l,k=0==(1&e|0);r:do if(k){if(_){var u=0,c=0;break}for(var h=0,d=0;;){var d,h,w=Me[a+(d<<2)>>2];if(w>>>0<11)var p=16;else var p=w+11&-8;var p,E=p+h|0,A=d+1|0;if((0|A)==(0|r)){var u=0,c=E;break r}var h=E,d=A}}else{var g=Me[a>>2];if(g>>>0<11)var y=16;else var y=g+11&-8;var y,u=y,c=y*r|0}while(0);var c,u,m=Jr(b-4+c|0);if(0==(0|m)){var n=0;break}var S=m-8|0,M=Se[m-4>>2]&-8;if(0!=(2&e|0)){var C=-4-b+M|0;Fa(m,0,C,1)}if(0==(0|l)){var R=m+c|0,T=M-c|3;Se[m+(c-4)>>2]=T;var O=R,v=O>>2,N=c}else var O=l,v=O>>2,N=M;var N,O;Se[v]=m;var I=r-1|0,P=0==(0|I);r:do if(P)var D=S,L=N;else if(0==(0|u))for(var F=S,X=N,j=0;;){var j,X,F,U=Me[a+(j<<2)>>2];if(U>>>0<11)var x=16;else var x=U+11&-8;var x,z=X-x|0;Se[F+4>>2]=3|x;var V=F+x|0,B=j+1|0;if(Se[(B<<2>>2)+v]=x+(F+8)|0,(0|B)==(0|I)){var D=V,L=z;break r}var F=V,X=z,j=B}else for(var H=3|u,K=u+8|0,Y=S,G=N,W=0;;){var W,G,Y,Z=G-u|0;Se[Y+4>>2]=H;var Q=Y+u|0,q=W+1|0;if(Se[(q<<2>>2)+v]=Y+K|0,(0|q)==(0|I)){var D=Q,L=Z;break r}var Y=Q,G=Z,W=q}while(0);var L,D;Se[D+4>>2]=3|L;var n=O}while(0);var n;return n}function na(r){var a=r>>2;0==(0|Se[ti>>2])&&ba();var e=Me[vi+24>>2];if(0==(0|e))var i=0,v=0,t=0,f=0,_=0,s=0,n=0;else{for(var o=Me[vi+12>>2],l=o+40|0,b=vi+444|0,k=l,u=l,c=1;;){var c,u,k,b,h=Me[b>>2],d=h+8|0;if(0==(7&d|0))var w=0;else var w=7&-d;for(var w,p=b+4|0,E=h+w|0,A=c,g=u,y=k;;){var y,g,A,E;if(E>>>0<h>>>0)break;if(E>>>0>=(h+Se[p>>2]|0)>>>0|(0|E)==(0|e))break;var m=Se[E+4>>2];if(7==(0|m))break;var S=m&-8,M=S+y|0;if(1==(3&m|0))var C=A+1|0,R=S+g|0;else var C=A,R=g;var R,C,E=E+S|0,A=C,g=R,y=M}var T=Me[b+8>>2];if(0==(0|T))break;var b=T,k=y,u=g,c=A}var O=Se[vi+432>>2],i=y,v=A,t=o,f=g,_=O-y|0,s=Se[vi+436>>2],n=O-g|0}var n,s,_,f,t,v,i;Se[a]=i,Se[a+1]=v,Se[a+2]=0,Se[a+3]=0,Se[a+4]=_,Se[a+5]=s,Se[a+6]=0,Se[a+7]=n,Se[a+8]=f,Se[a+9]=t}function oa(){0==(0|Se[ti>>2])&&ba();var r=Me[vi+24>>2],a=0==(0|r);r:do if(a)var e=0,i=0,v=0;else for(var t=Se[vi+436>>2],f=Me[vi+432>>2],_=vi+444|0,s=f-40-Se[vi+12>>2]|0;;){var s,_,n=Me[_>>2],o=n+8|0;if(0==(7&o|0))var l=0;else var l=7&-o;for(var l,b=_+4|0,k=n+l|0,u=s;;){var u,k;if(k>>>0<n>>>0)break;if(k>>>0>=(n+Se[b>>2]|0)>>>0|(0|k)==(0|r))break;var c=Se[k+4>>2];if(7==(0|c))break;var h=c&-8,d=1==(3&c|0)?h:0,w=u-d|0,k=k+h|0,u=w}var p=Me[_+8>>2];if(0==(0|p)){var e=t,i=f,v=u;break r}var _=p,s=u}while(0);var v,i,e,E=Se[Se[qe>>2]+12>>2],A=(Qa(E,0|He.__str339,(ne=Oe,Oe+=4,Se[ne>>2]=e,ne)),Se[Se[qe>>2]+12>>2]),g=(Qa(A,0|He.__str1340,(ne=Oe,Oe+=4,Se[ne>>2]=i,ne)),Se[Se[qe>>2]+12>>2]);Qa(g,0|He.__str2341,(ne=Oe,Oe+=4,Se[ne>>2]=v,ne))}function la(r,a){var e,i,v,t=a>>>0>4294967231;r:do{if(!t){var f=r-8|0,_=f,i=(r-4|0)>>2,s=Me[i],n=s&-8,o=n-8|0,l=r+o|0,b=f>>>0<Me[vi+16>>2]>>>0;do if(!b){var k=3&s;if(!(1!=(0|k)&(0|o)>-8))break;var e=(r+(n-4)|0)>>2;if(0==(1&Se[e]|0))break;if(a>>>0<11)var u=16;else var u=a+11&-8;var u,c=0==(0|k);do{if(c){var h=ka(_,u),d=0,w=h;v=17;break}if(n>>>0<u>>>0){if((0|l)!=(0|Se[vi+24>>2])){v=21;break}var p=Se[vi+12>>2]+n|0;if(p>>>0<=u>>>0){v=21;break}var E=p-u|0,A=r+(u-8)|0;Se[i]=u|1&s|2;var g=1|E;Se[r+(u-4)>>2]=g,Se[vi+24>>2]=A,Se[vi+12>>2]=E;var d=0,w=_;v=17;break}var y=n-u|0;if(y>>>0<=15){var d=0,w=_;v=17;break}Se[i]=u|1&s|2,Se[r+(u-4)>>2]=3|y;var m=1|Se[e];Se[e]=m;var d=r+u|0,w=_;v=17;break}while(0);do if(17==v){var w,d;if(0==(0|w))break;0!=(0|d)&&va(d);var S=w+8|0;break r}while(0);var M=Jr(a);if(0==(0|M)){var S=0;break r}var C=0==(3&Se[i]|0)?8:4,R=n-C|0,T=R>>>0<a>>>0?R:a;Pa(M,r,T,1),va(r);var S=M;break r}while(0);throw Ka(),"Reached an unreachable!"}var O=Je();Se[O>>2]=12;var S=0}while(0);var S;return S}function ba(){if(0==(0|Se[ti>>2])){var r=qa(8);if(0!=(r-1&r|0))throw Ka(),"Reached an unreachable!";Se[ti+8>>2]=r,Se[ti+4>>2]=r,Se[ti+12>>2]=-1,Se[ti+16>>2]=2097152,Se[ti+20>>2]=0,Se[vi+440>>2]=0;var a=$a(0);Se[ti>>2]=a&-16^1431655768}}function ka(r,a){var e=Se[r+4>>2]&-8,i=a>>>0<256;do if(i)var v=0;else{if(e>>>0>=(a+4|0)>>>0&&(e-a|0)>>>0<=Se[ti+8>>2]<<1>>>0){var v=r;break}var v=0}while(0);var v;return v}function ua(r){for(var a,e=vi+444|0,a=e>>2;;){var e,i=Me[a];if(i>>>0<=r>>>0&&(i+Se[a+1]|0)>>>0>r>>>0){var v=e;break}var t=Me[a+2];if(0==(0|t)){var v=0;break}var e=t,a=e>>2}var v;return v}function ca(r,a){var e=r,i=r+8|0;if(0==(7&i|0))var v=0;else var v=7&-i;var v,t=a-v|0;Se[vi+24>>2]=e+v|0,Se[vi+12>>2]=t,Se[v+(e+4)>>2]=1|t,Se[a+(e+4)>>2]=40;var f=Se[ti+16>>2];Se[vi+28>>2]=f}function ha(){for(var r=0;;){var r,a=r<<1,e=(a<<2)+vi+40|0;Se[vi+(a+3<<2)+40>>2]=e,Se[vi+(a+2<<2)+40>>2]=e;var i=r+1|0;if(32==(0|i))break;var r=i}}function da(r,a,e){var i,v,t,f,_=a>>2,s=r>>2,n=r+8|0;if(0==(7&n|0))var o=0;else var o=7&-n;var o,l=a+8|0;if(0==(7&l|0))var b=0,t=b>>2;else var b=7&-l,t=b>>2;var b,k=a+b|0,u=k,c=o+e|0,v=c>>2,h=r+c|0,d=h,w=k-(r+o)-e|0;Se[(o+4>>2)+s]=3|e;var p=(0|u)==(0|Se[vi+24>>2]);r:do if(p){var E=Se[vi+12>>2]+w|0;Se[vi+12>>2]=E,Se[vi+24>>2]=d;var A=1|E;Se[v+(s+1)]=A}else if((0|u)==(0|Se[vi+20>>2])){var g=Se[vi+8>>2]+w|0;Se[vi+8>>2]=g,Se[vi+20>>2]=d;var y=1|g;Se[v+(s+1)]=y;var m=r+g+c|0;Se[m>>2]=g}else{var S=Me[t+(_+1)];if(1==(3&S|0)){var M=S&-8,C=S>>>3,R=S>>>0<256;a:do if(R){var T=Me[((8|b)>>2)+_],O=Me[t+(_+3)];if((0|T)!=(0|O)){var N=((S>>>2&1073741822)<<2)+vi+40|0,I=(0|T)==(0|N);do{if(!I){if(T>>>0<Me[vi+16>>2]>>>0){f=18;break}f=15;break}f=15}while(0);do if(15==f){if((0|O)!=(0|N)&&O>>>0<Me[vi+16>>2]>>>0)break;Se[T+12>>2]=O,Se[O+8>>2]=T;break a}while(0);throw Ka(),"Reached an unreachable!"}var P=Se[vi>>2]&(1<<C^-1);Se[vi>>2]=P}else{var D=k,L=Me[((24|b)>>2)+_],F=Me[t+(_+3)],X=(0|F)==(0|D);do if(X){var j=16|b,U=j+(a+4)|0,x=Se[U>>2];if(0==(0|x)){var z=a+j|0,V=Se[z>>2];if(0==(0|V)){var B=0,i=B>>2;break}var H=z,K=V}else{var H=U,K=x;f=25}for(;;){var K,H,Y=K+20|0,G=Se[Y>>2];if(0==(0|G)){var W=K+16|0,Z=Me[W>>2];if(0==(0|Z))break;var H=W,K=Z}else var H=Y,K=G}if(H>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[H>>2]=0;var B=K,i=B>>2}else{var Q=Me[((8|b)>>2)+_];if(Q>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[Q+12>>2]=F,Se[F+8>>2]=Q;var B=F,i=B>>2}while(0);var B;if(0==(0|L))break;var q=b+(a+28)|0,$=(Se[q>>2]<<2)+vi+304|0,J=(0|D)==(0|Se[$>>2]);do{if(J){if(Se[$>>2]=B,0!=(0|B))break;var rr=Se[vi+4>>2]&(1<<Se[q>>2]^-1);Se[vi+4>>2]=rr;break a}if(L>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";var ar=L+16|0;if((0|Se[ar>>2])==(0|D)?Se[ar>>2]=B:Se[L+20>>2]=B,0==(0|B))break a}while(0);if(B>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[i+6]=L;var er=16|b,ir=Me[(er>>2)+_];if(0!=(0|ir)){if(ir>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[i+4]=ir,Se[ir+24>>2]=B}var vr=Me[(er+4>>2)+_];if(0==(0|vr))break;if(vr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[i+5]=vr,Se[vr+24>>2]=B}while(0);var tr=a+(M|b)|0,fr=M+w|0}else var tr=u,fr=w;var fr,tr,_r=tr+4|0,sr=Se[_r>>2]&-2;if(Se[_r>>2]=sr,Se[v+(s+1)]=1|fr,Se[(fr>>2)+s+v]=fr,fr>>>0<256){var nr=fr>>>2&1073741822,or=(nr<<2)+vi+40|0,lr=Me[vi>>2],br=1<<(fr>>>3),kr=0==(lr&br|0);do{if(!kr){var ur=(nr+2<<2)+vi+40|0,cr=Me[ur>>2];if(cr>>>0>=Me[vi+16>>2]>>>0){var hr=cr,dr=ur;break}throw Ka(),"Reached an unreachable!"}Se[vi>>2]=lr|br;var hr=or,dr=(nr+2<<2)+vi+40|0}while(0);var dr,hr;Se[dr>>2]=d,Se[hr+12>>2]=d,Se[v+(s+2)]=hr,Se[v+(s+3)]=or}else{var wr=h,pr=fr>>>8,Er=0==(0|pr);do if(Er)var Ar=0;else{if(fr>>>0>16777215){var Ar=31;break}var gr=(pr+1048320|0)>>>16&8,yr=pr<<gr,mr=(yr+520192|0)>>>16&4,Sr=yr<<mr,Mr=(Sr+245760|0)>>>16&2,Cr=14-(mr|gr|Mr)+(Sr<<Mr>>>15)|0,Ar=fr>>>((Cr+7|0)>>>0)&1|Cr<<1}while(0);var Ar,Rr=(Ar<<2)+vi+304|0;Se[v+(s+7)]=Ar;var Tr=c+(r+16)|0;Se[v+(s+5)]=0,Se[Tr>>2]=0;var Or=Se[vi+4>>2],Nr=1<<Ar;if(0==(Or&Nr|0)){var Ir=Or|Nr;Se[vi+4>>2]=Ir,Se[Rr>>2]=wr,Se[v+(s+6)]=Rr,Se[v+(s+3)]=wr,Se[v+(s+2)]=wr}else{if(31==(0|Ar))var Pr=0;else var Pr=25-(Ar>>>1)|0;for(var Pr,Dr=fr<<Pr,Lr=Se[Rr>>2];;){var Lr,Dr;if((Se[Lr+4>>2]&-8|0)==(0|fr)){var Fr=Lr+8|0,Xr=Me[Fr>>2],jr=Me[vi+16>>2],Ur=Lr>>>0<jr>>>0;do if(!Ur){if(Xr>>>0<jr>>>0)break;Se[Xr+12>>2]=wr,Se[Fr>>2]=wr,Se[v+(s+2)]=Xr,Se[v+(s+3)]=Lr,Se[v+(s+6)]=0;break r}while(0);throw Ka(),"Reached an unreachable!"}var xr=(Dr>>>31<<2)+Lr+16|0,zr=Me[xr>>2];if(0==(0|zr)){if(xr>>>0>=Me[vi+16>>2]>>>0){Se[xr>>2]=wr,Se[v+(s+6)]=Lr,Se[v+(s+3)]=wr,Se[v+(s+2)]=wr;break r}throw Ka(),"Reached an unreachable!"}var Dr=Dr<<1,Lr=zr}}}}while(0);return r+(8|o)|0}function wa(r){return 0|He.__str3342}function pa(r){return 0|He.__str14343}function Ea(r){Se[r>>2]=si+8|0}function Aa(r){0!=(0|r)&&va(r)}function ga(r){ya(r);var a=r;Aa(a)}function ya(r){var a=0|r;Ye(a)}function ma(r){var a=0|r;Ea(a),Se[r>>2]=ni+8|0}function Sa(r){var a=0|r;ya(a);var e=r;Aa(e)}function Ma(r,a){var e,i,v=Me[vi+24>>2],i=v>>2,t=v,f=ua(t),_=Se[f>>2],s=Se[f+4>>2],n=_+s|0,o=_+(s-39)|0;if(0==(7&o|0))var l=0;else var l=7&-o;var l,b=_+(s-47)+l|0,k=b>>>0<(v+16|0)>>>0?t:b,u=k+8|0,e=u>>2,c=u,h=r,d=a-40|0;ca(h,d);var w=k+4|0;Se[w>>2]=27,Se[e]=Se[vi+444>>2],Se[e+1]=Se[vi+448>>2],Se[e+2]=Se[vi+452>>2],Se[e+3]=Se[vi+456>>2],Se[vi+444>>2]=r,Se[vi+448>>2]=a,Se[vi+456>>2]=0,Se[vi+452>>2]=c;var p=k+28|0;Se[p>>2]=7;var E=(k+32|0)>>>0<n>>>0;r:do if(E)for(var A=p;;){var A,g=A+4|0;if(Se[g>>2]=7,(A+8|0)>>>0>=n>>>0)break r;var A=g}while(0);var y=(0|k)==(0|t);r:do if(!y){var m=k-v|0,S=t+m|0,M=m+(t+4)|0,C=Se[M>>2]&-2;Se[M>>2]=C;var R=1|m;Se[i+1]=R;var T=S;if(Se[T>>2]=m,m>>>0<256){var O=m>>>2&1073741822,N=(O<<2)+vi+40|0,I=Me[vi>>2],P=1<<(m>>>3),D=0==(I&P|0);do{if(!D){var L=(O+2<<2)+vi+40|0,F=Me[L>>2];if(F>>>0>=Me[vi+16>>2]>>>0){var X=F,j=L;break}throw Ka(),"Reached an unreachable!"}var U=I|P;Se[vi>>2]=U;var X=N,j=(O+2<<2)+vi+40|0}while(0);var j,X;Se[j>>2]=v,Se[X+12>>2]=v,Se[i+2]=X,Se[i+3]=N}else{var x=v,z=m>>>8,V=0==(0|z);do if(V)var B=0;else{if(m>>>0>16777215){var B=31;break}var H=(z+1048320|0)>>>16&8,K=z<<H,Y=(K+520192|0)>>>16&4,G=K<<Y,W=(G+245760|0)>>>16&2,Z=14-(Y|H|W)+(G<<W>>>15)|0,B=m>>>((Z+7|0)>>>0)&1|Z<<1}while(0);var B,Q=(B<<2)+vi+304|0;Se[i+7]=B,Se[i+5]=0,Se[i+4]=0;var q=Se[vi+4>>2],$=1<<B;if(0==(q&$|0)){var J=q|$;Se[vi+4>>2]=J,Se[Q>>2]=x,Se[i+6]=Q,Se[i+3]=v,Se[i+2]=v}else{if(31==(0|B))var rr=0;else var rr=25-(B>>>1)|0;for(var rr,ar=m<<rr,er=Se[Q>>2];;){var er,ar;if((Se[er+4>>2]&-8|0)==(0|m)){var ir=er+8|0,vr=Me[ir>>2],tr=Me[vi+16>>2],fr=er>>>0<tr>>>0;do if(!fr){if(vr>>>0<tr>>>0)break;Se[vr+12>>2]=x,Se[ir>>2]=x,Se[i+2]=vr,Se[i+3]=er,Se[i+6]=0;break r}while(0);throw Ka(),"Reached an unreachable!"}var _r=(ar>>>31<<2)+er+16|0,sr=Me[_r>>2];if(0==(0|sr)){if(_r>>>0>=Me[vi+16>>2]>>>0){Se[_r>>2]=x,Se[i+6]=er,Se[i+3]=v,Se[i+2]=v;break r}throw Ka(),"Reached an unreachable!"}var ar=ar<<1,er=sr}}}}while(0)}function Ca(r){return d(r)}function Ra(r,a){var e=0;do Ae[r+e]=Ae[a+e],e++;while(0!=Ae[a+e-1]);return r}function Ta(){var r=Ta;return r.LLVM_SAVEDSTACKS||(r.LLVM_SAVEDSTACKS=[]),r.LLVM_SAVEDSTACKS.push(le.stackSave()),r.LLVM_SAVEDSTACKS.length-1}function Oa(r){var a=Ta,e=a.LLVM_SAVEDSTACKS[r];a.LLVM_SAVEDSTACKS.splice(r,1),le.stackRestore(e)}function Na(r,a,e){for(var i=0;i<e;){var v=Ae[r+i],t=Ae[a+i];if(v==t&&0==v)return 0;if(0==v)return-1;if(0==t)return 1;if(v!=t)return v>t?1:-1;i++}return 0}function Ia(r,a){var e=Ca(r),i=0;do Ae[r+e+i]=Ae[a+i],i++;while(0!=Ae[a+i-1]);return r}function Pa(r,a,e,i){if(e>=20&&a%2==r%2)if(a%4==r%4){for(var v=a+e;a%4;)Ae[r++]=Ae[a++];for(var t=a>>2,f=r>>2,_=v>>2;t<_;)Se[f++]=Se[t++];for(a=t<<2,r=f<<2;a<v;)Ae[r++]=Ae[a++]}else{var v=a+e;a%2&&(Ae[r++]=Ae[a++]);for(var s=a>>1,n=r>>1,o=v>>1;s<o;)ye[n++]=ye[s++];a=s<<1,r=n<<1,a<v&&(Ae[r++]=Ae[a++])}else for(;e--;)Ae[r++]=Ae[a++]}function Da(r,a){return Na(r,a,Le)}function La(r,a,e){for(var i=0;i<e;i++){var v=Ae[r+i],t=Ae[a+i];if(v!=t)return v>t?1:-1}return 0}function Fa(r,a,e,i){if(e>=20){for(var v=r+e;r%4;)Ae[r++]=a;a<0&&(a+=256);for(var t=r>>2,f=v>>2,_=a|a<<8|a<<16|a<<24;t<f;)Se[t++]=_;for(r=t<<2;r<v;)Ae[r++]=a}else for(;e--;)Ae[r++]=a}function Xa(r,a,e,i){throw"Assertion failed: "+s(i)+", at: "+[s(r),a,s(e)]}function ja(r){var a=d(r),e=Jr(a+1);return Pa(e,r,a,1),Ae[e+a]=0,e}function Ua(r,a){function e(r){var e;return"double"===r?(xe[0]=Se[a+_>>2],xe[1]=Se[a+_+4>>2],e=ze[0]):"i64"==r?e=[Se[a+_>>2],Se[a+_+4>>2]]:(r="i32",e=Se[a+_>>2]),_+=le.getNativeFieldSize(r),e}for(var i,v,t,f=r,_=0,s=[];;){var n=f;if(i=Ae[f],0===i)break;if(v=Ae[f+1],i=="%".charCodeAt(0)){var o=!1,l=!1,b=!1,k=!1;r:for(;;){switch(v){case"+".charCodeAt(0):o=!0;break;case"-".charCodeAt(0):l=!0;break;case"#".charCodeAt(0):b=!0;break;case"0".charCodeAt(0):if(k)break r;k=!0;break;default:break r}f++,v=Ae[f+1]}var u=0;if(v=="*".charCodeAt(0))u=e("i32"),f++,v=Ae[f+1];else for(;v>="0".charCodeAt(0)&&v<="9".charCodeAt(0);)u=10*u+(v-"0".charCodeAt(0)),f++,v=Ae[f+1];var c=!1;if(v==".".charCodeAt(0)){var h=0;if(c=!0,f++,v=Ae[f+1],v=="*".charCodeAt(0))h=e("i32"),f++;else for(;;){var d=Ae[f+1];if(d<"0".charCodeAt(0)||d>"9".charCodeAt(0))break;h=10*h+(d-"0".charCodeAt(0)),f++}v=Ae[f+1]}else var h=6;var E;switch(String.fromCharCode(v)){case"h":var A=Ae[f+2];A=="h".charCodeAt(0)?(f++,E=1):E=2;break;case"l":var A=Ae[f+2];A=="l".charCodeAt(0)?(f++,E=8):E=4;break;case"L":case"q":case"j":E=8;break;case"z":case"t":case"I":E=4;break;default:E=null}if(E&&f++,v=Ae[f+1],["d","i","u","o","x","X","p"].indexOf(String.fromCharCode(v))!=-1){var m=v=="d".charCodeAt(0)||v=="i".charCodeAt(0);E=E||4;var t=e("i"+8*E);if(8==E&&(t=le.makeBigInt(t[0],t[1],v=="u".charCodeAt(0))),E<=4){var S=Math.pow(256,E)-1;t=(m?y:g)(t&S,8*E)}var M,C=Math.abs(t),R="";if(v=="d".charCodeAt(0)||v=="i".charCodeAt(0))M=y(t,8*E,1).toString(10);else if(v=="u".charCodeAt(0))M=g(t,8*E,1).toString(10),t=Math.abs(t);else if(v=="o".charCodeAt(0))M=(b?"0":"")+C.toString(8);else if(v=="x".charCodeAt(0)||v=="X".charCodeAt(0)){if(R=b?"0x":"",t<0){t=-t,M=(C-1).toString(16);for(var T=[],O=0;O<M.length;O++)T.push((15-parseInt(M[O],16)).toString(16));for(M=T.join("");M.length<2*E;)M="f"+M}else M=C.toString(16);v=="X".charCodeAt(0)&&(R=R.toUpperCase(),M=M.toUpperCase())}else v=="p".charCodeAt(0)&&(0===C?M="(nil)":(R="0x",M=C.toString(16)));if(c)for(;M.length<h;)M="0"+M;for(o&&(R=t<0?"-"+R:"+"+R);R.length+M.length<u;)l?M+=" ":k?M="0"+M:R=" "+R;M=R+M,M.split("").forEach(function(r){s.push(r.charCodeAt(0))})}else if(["f","F","e","E","g","G"].indexOf(String.fromCharCode(v))!=-1){var M,t=e("double");if(isNaN(t))M="nan",k=!1;else if(isFinite(t)){var N=!1,I=Math.min(h,20);if(v=="g".charCodeAt(0)||v=="G".charCodeAt(0)){N=!0,h=h||1;var P=parseInt(t.toExponential(I).split("e")[1],10);h>P&&P>=-4?(v=(v=="g".charCodeAt(0)?"f":"F").charCodeAt(0),h-=P+1):(v=(v=="g".charCodeAt(0)?"e":"E").charCodeAt(0),h--),I=Math.min(h,20)}v=="e".charCodeAt(0)||v=="E".charCodeAt(0)?(M=t.toExponential(I),/[eE][-+]\\\\d$/.test(M)&&(M=M.slice(0,-1)+"0"+M.slice(-1))):v!="f".charCodeAt(0)&&v!="F".charCodeAt(0)||(M=t.toFixed(I));var D=M.split("e");if(N&&!b)for(;D[0].length>1&&D[0].indexOf(".")!=-1&&("0"==D[0].slice(-1)||"."==D[0].slice(-1));)D[0]=D[0].slice(0,-1);else for(b&&M.indexOf(".")==-1&&(D[0]+=".");h>I++;)D[0]+="0";M=D[0]+(D.length>1?"e"+D[1]:""),v=="E".charCodeAt(0)&&(M=M.toUpperCase()),o&&t>=0&&(M="+"+M)}else M=(t<0?"-":"")+"inf",k=!1;for(;M.length<u;)l?M+=" ":M=!k||"-"!=M[0]&&"+"!=M[0]?(k?"0":" ")+M:M[0]+"0"+M.slice(1);v<"a".charCodeAt(0)&&(M=M.toUpperCase()),M.split("").forEach(function(r){s.push(r.charCodeAt(0))})}else if(v=="s".charCodeAt(0)){var L,F=e("i8*");if(F?(L=w(F),c&&L.length>h&&(L=L.slice(0,h))):L=p("(null)",!0),!l)for(;L.length<u--;)s.push(" ".charCodeAt(0));if(s=s.concat(L),l)for(;L.length<u--;)s.push(" ".charCodeAt(0))}else if(v=="c".charCodeAt(0)){for(l&&s.push(e("i8"));--u>0;)s.push(" ".charCodeAt(0));l||s.push(e("i8"))}else if(v=="n".charCodeAt(0)){var X=e("i32*");Se[X>>2]=s.length}else if(v=="%".charCodeAt(0))s.push(i);else for(var O=n;O<f+2;O++)s.push(Ae[O]);f+=2}else s.push(i),f+=1}return s}function xa(r,a,e,i){for(var v=Ua(e,i),t=void 0===a?v.length:Math.min(v.length,a-1),f=0;f<t;f++)Ae[r+f]=v[f];return Ae[r+f]=0,v.length}function za(r,a,e){return xa(r,void 0,a,e)}function Va(r){return r in{32:0,9:0,10:0,11:0,12:0,13:0}}function Ba(r){return r>="0".charCodeAt(0)&&r<="9".charCodeAt(0)}function Ha(r){for(var a;(a=Ae[r])&&Va(a);)r++;if(!a||!Ba(a))return 0;for(var e=r;(a=Ae[e])&&Ba(a);)e++;return Math.floor(Number(s(r).substr(0,e-r)))}function Ka(r){throw ke=!0,"ABORT: "+r+", at "+(new Error).stack}function Ya(r){return Ya.ret||(Ya.ret=_([0],"i32",we)),Se[Ya.ret>>2]=r,r}function Ga(r,a,e,i){var v=$e.streams[r];if(!v||v.object.isDevice)return Ya(Ge.EBADF),-1;if(v.isWrite){if(v.object.isFolder)return Ya(Ge.EISDIR),-1;if(e<0||i<0)return Ya(Ge.EINVAL),-1;for(var t=v.object.contents;t.length<i;)t.push(0);for(var f=0;f<e;f++)t[i+f]=ge[a+f];return v.object.timestamp=Date.now(),f}return Ya(Ge.EACCES),-1}function Wa(r,a,e){var i=$e.streams[r];if(i){if(i.isWrite){if(e<0)return Ya(Ge.EINVAL),-1;if(i.object.isDevice){if(i.object.output){for(var v=0;v<e;v++)try{i.object.output(Ae[a+v])}catch(r){return Ya(Ge.EIO),-1}return i.object.timestamp=Date.now(),v}return Ya(Ge.ENXIO),-1}var t=Ga(r,a,e,i.position);return t!=-1&&(i.position+=t),t}return Ya(Ge.EACCES),-1}return Ya(Ge.EBADF),-1}function Za(r,a,e,i){var v=e*a;if(0==v)return 0;var t=Wa(i,r,v);return t==-1?($e.streams[i]&&($e.streams[i].error=!0),-1):Math.floor(t/a)}function Qa(r,a,e){var i=Ua(a,e),v=le.stackSave(),t=Za(_(i,"i8",de),1,i.length,r);return le.stackRestore(v),t}function qa(r){switch(r){case 8:return Pe;case 54:case 56:case 21:case 61:case 63:case 22:case 67:case 23:case 24:case 25:case 26:case 27:case 69:case 28:case 101:case 70:case 71:case 29:case 30:case 199:case 75:case 76:case 32:case 43:case 44:case 80:case 46:case 47:case 45:case 48:case 49:case 42:case 82:case 33:case 7:case 108:case 109:case 107:case 112:case 119:case 121:return 200809;case 13:case 104:case 94:case 95:case 34:case 35:case 77:case 81:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 91:case 94:case 95:case 110:case 111:case 113:case 114:case 115:case 116:case 117:case 118:case 120:case 40:case 16:case 79:case 19:return-1;case 92:case 93:case 5:case 72:case 6:case 74:case 92:case 93:case 96:case 97:case 98:case 99:case 102:case 103:case 105:return 1;case 38:case 66:case 50:case 51:case 4:return 1024;case 15:case 64:case 41:return 32;case 55:case 37:case 17:return 2147483647;case 18:case 1:return 47839;case 59:case 57:return 99;case 68:case 58:return 2048;case 0:return 2097152;case 3:return 65536;case 14:return 32768;case 73:return 32767;case 39:return 16384;case 60:return 1e3;case 106:return 700;case 52:return 256;case 62:return 255;case 2:return 100;case 65:return 64;case 36:return 20;case 100:return 16;case 20:return 6;case 53:return 4}return Ya(Ge.EINVAL),-1}function $a(r){var a=Math.floor(Date.now()/1e3);return r&&(Se[r>>2]=a),a}function Ja(){return Ya.ret}function re(r){var a=re;a.called||(Ie=o(Ie),a.called=!0);var e=Ie;return 0!=r&&le.staticAlloc(r),e}function ae(){return Se[ae.buf>>2]}function ee(r){r=r||Module.arguments,k();var a=null;return Module._main&&(a=Module.callMain(r),Module.noExitRuntime||u()),a}var ie=[],ve=false,te="object"==typeof window,fe="function"==typeof importScripts,_e=!te&&!ve&&!fe;if(ve){print=function(r){process.stdout.write(r+"\\\\n")},printErr=function(r){process.stderr.write(r+"\\\\n")};var se=require("fs");read=function(r){var a=se.readFileSync(r).toString();return a||"/"==r[0]||(r=__dirname.split("/").slice(0,-1).join("/")+"/src/"+r,a=se.readFileSync(r).toString()),a},load=function(a){r(read(a))},ie=process.argv.slice(2)}else if(_e)this.read||(this.read=function(r){snarf(r)}),"undefined"!=typeof scriptArgs?ie=scriptArgs:"undefined"!=typeof arguments&&(ie=arguments);else if(te)this.print=printErr=function(r){console.log(r)},this.read=function(r){var a=new XMLHttpRequest;return a.open("GET",r,!1),a.send(null),a.responseText},this.arguments&&(ie=arguments);else{if(!fe)throw"Unknown runtime environment. Where are we?";this.load=importScripts}"undefined"==typeof load&&"undefined"!=typeof read&&(this.load=function(a){r(read(a))}),"undefined"==typeof printErr&&(this.printErr=function(){}),"undefined"==typeof print&&(this.print=printErr);try{this.Module=Module}catch(r){this.Module=Module={}}Module.arguments||(Module.arguments=ie),Module.print&&(print=Module.print);var ne,oe,le={stackSave:function(){return Oe},stackRestore:function(r){Oe=r},forceAlign:function(r,a){if(a=a||4,1==a)return r;if(isNumber(r)&&isNumber(a))return Math.ceil(r/a)*a;if(isNumber(a)&&isPowerOfTwo(a)){var e=log2(a);return"(((("+r+")+"+(a-1)+")>>"+e+")<<"+e+")"}return"Math.ceil(("+r+")/"+a+")*"+a},isNumberType:function(r){return r in le.INT_TYPES||r in le.FLOAT_TYPES},isPointerType:function(r){return"*"==r[r.length-1]},isStructType:function(r){return!isPointerType(r)&&(!!/^\\\\[\\\\d+\\\\ x\\\\ (.*)\\\\]/.test(r)||(!!/<?{ [^}]* }>?/.test(r)||"%"==r[0]))},INT_TYPES:{i1:0,i8:0,i16:0,i32:0,i64:0},FLOAT_TYPES:{float:0,double:0},bitshift64:function(r,e,i,v){var t=Math.pow(2,v)-1;if(v<32)switch(i){case"shl":return[r<<v,e<<v|(r&t<<32-v)>>>32-v];case"ashr":return[(r>>>v|(e&t)<<32-v)>>0>>>0,e>>v>>>0];case"lshr":return[(r>>>v|(e&t)<<32-v)>>>0,e>>>v]}else if(32==v)switch(i){case"shl":return[0,r];case"ashr":return[e,(0|e)<0?t:0];case"lshr":return[e,0]}else switch(i){case"shl":return[0,r<<v-32];case"ashr":return[e>>v-32>>>0,(0|e)<0?t:0];case"lshr":return[e>>>v-32,0]}a("unknown bitshift64 op: "+[value,i,v])},or64:function(r,a){var e=0|r|(0|a),i=4294967296*(Math.round(r/4294967296)|Math.round(a/4294967296));return e+i},and64:function(r,a){var e=(0|r)&(0|a),i=4294967296*(Math.round(r/4294967296)&Math.round(a/4294967296));return e+i},xor64:function(r,a){var e=(0|r)^(0|a),i=4294967296*(Math.round(r/4294967296)^Math.round(a/4294967296));return e+i},getNativeTypeSize:function(r,a){if(1==le.QUANTUM_SIZE)return 1;var i={"%i1":1,"%i8":1,"%i16":2,"%i32":4,"%i64":8,"%float":4,"%double":8}["%"+r];if(!i)if("*"==r[r.length-1])i=le.QUANTUM_SIZE;else if("i"==r[0]){var v=parseInt(r.substr(1));e(v%8==0),i=v/8}return i},getNativeFieldSize:function(r){return Math.max(le.getNativeTypeSize(r),le.QUANTUM_SIZE)},dedup:function(r,a){var e={};return a?r.filter(function(r){return!e[r[a]]&&(e[r[a]]=!0,!0)}):r.filter(function(r){return!e[r]&&(e[r]=!0,!0)})},set:function(){for(var r="object"==typeof arguments[0]?arguments[0]:arguments,a={},e=0;e<r.length;e++)a[r[e]]=0;return a},calculateStructAlignment:function(r){r.flatSize=0,r.alignSize=0;var a=[],e=-1;return r.flatIndexes=r.fields.map(function(i){var v,t;if(le.isNumberType(i)||le.isPointerType(i))v=le.getNativeTypeSize(i),t=v;else{if(!le.isStructType(i))throw"Unclear type in struct: "+i+", in "+r.name_+" :: "+dump(Types.types[r.name_]);v=Types.types[i].flatSize,t=Types.types[i].alignSize}t=r.packed?1:Math.min(t,le.QUANTUM_SIZE),r.alignSize=Math.max(r.alignSize,t);var f=le.alignMemory(r.flatSize,t);return r.flatSize=f+v,e>=0&&a.push(f-e),e=f,f}),r.flatSize=le.alignMemory(r.flatSize,r.alignSize),0==a.length?r.flatFactor=r.flatSize:1==le.dedup(a).length&&(r.flatFactor=a[0]),r.needsFlattening=1!=r.flatFactor,r.flatIndexes},generateStructInfo:function(r,a,i){var v,t;if(a){if(i=i||0,v=("undefined"==typeof Types?le.typeInfo:Types.types)[a],!v)return null;e(v.fields.length===r.length,"Number of named fields must match the type for "+a),t=v.flatIndexes}else{var v={fields:r.map(function(r){return r[0]})};t=le.calculateStructAlignment(v)}var f={__size__:v.flatSize};return a?r.forEach(function(r,a){if("string"==typeof r)f[r]=t[a]+i;else{var e;for(var _ in r)e=_;f[e]=le.generateStructInfo(r[e],v.fields[a],t[a])}}):r.forEach(function(r,a){f[r[1]]=t[a]}),f},stackAlloc:function(r){var a=Oe;return Oe+=r,Oe=Oe+3>>2<<2,a},staticAlloc:function(r){var a=Ie;return Ie+=r,Ie=Ie+3>>2<<2,Ie>=Le&&l(),a},alignMemory:function(r,a){var e=r=Math.ceil(r/(a?a:4))*(a?a:4);return e},makeBigInt:function(r,a,e){var i=e?(r>>>0)+4294967296*(a>>>0):(r>>>0)+4294967296*(0|a);return i},QUANTUM_SIZE:4,__dummy__:0},be={MAX_ALLOWED:0,corrections:0,sigs:{},note:function(r,e,i){e||(this.corrections++,this.corrections>=this.MAX_ALLOWED&&a("\\\\n\\\\nToo many corrections!"))},print:function(){}},ke=!1,ue=0,ce=this;Module.ccall=i,Module.setValue=t,Module.getValue=f;var he=0,de=1,we=2;Module.ALLOC_NORMAL=he,Module.ALLOC_STACK=de,Module.ALLOC_STATIC=we,Module.allocate=_,Module.Pointer_stringify=s,Module.Array_stringify=n;var pe,Ee,Ae,ge,ye,me,Se,Me,Ce,Re,Te,Oe,Ne,Ie,Pe=4096,De=Module.TOTAL_STACK||5242880,Le=Module.TOTAL_MEMORY||10485760;Module.FAST_MEMORY||2097152;e(!!(Int32Array&&Float64Array&&new Int32Array(1).subarray&&new Int32Array(1).set),"Cannot fallback to non-typed array case: Code is too specialized");var Fe=new ArrayBuffer(Le);Ae=new Int8Array(Fe),ye=new Int16Array(Fe),Se=new Int32Array(Fe),ge=new Uint8Array(Fe),me=new Uint16Array(Fe),Me=new Uint32Array(Fe),Ce=new Float32Array(Fe),Re=new Float64Array(Fe),Se[0]=255,e(255===ge[0]&&0===ge[3],"Typed arrays 2 must be run on a little-endian system");var Xe=p("(null)");Ie=Xe.length;for(var je=0;je<Xe.length;je++)Ae[je]=Xe[je];Module.HEAP=Ee,Module.HEAP8=Ae,Module.HEAP16=ye,Module.HEAP32=Se,Module.HEAPU8=ge,Module.HEAPU16=me,Module.HEAPU32=Me,Module.HEAPF32=Ce,Module.HEAPF64=Re,Te=Oe=le.alignMemory(Ie),Ne=Te+De;var Ue=le.alignMemory(Ne,8),xe=(Ae.subarray(Ue),Se.subarray(Ue>>2)),ze=(Ce.subarray(Ue>>2),Re.subarray(Ue>>3));Ne=Ue+8,Ie=o(Ne);var Ve=[],Be=[];Module.Array_copy=c,Module.TypedArray_copy=h,Module.String_len=d,Module.String_copy=w,Module.intArrayFromString=p,Module.intArrayToString=E,Module.writeStringToMemory=A;var He=[],Ke=0;O.X=1,N.X=1,V.X=1,H.X=1,G.X=1,W.X=1,q.X=1,$.X=1,rr.X=1,ar.X=1,er.X=1,vr.X=1,nr.X=1,or.X=1,kr.X=1,hr.X=1,Ar.X=1,Sr.X=1,Tr.X=1,Ir.X=1,Pr.X=1,Dr.X=1,Lr.X=1,Fr.X=1,Xr.X=1,zr.X=1,Vr.X=1,Br.X=1,Gr.X=1,$r.X=1,Module._malloc=Jr,Jr.X=1,ra.X=1,aa.X=1,ea.X=1,ia.X=1,Module._free=va,va.X=1,_a.X=1,sa.X=1,na.X=1,oa.X=1,la.X=1,da.X=1,Ma.X=1;var Ye,Ge={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18},We=0,Ze=0,Qe=0,qe=0,$e={currentPath:"/",nextInode:2,streams:[null],ignorePermissions:!0,absolutePath:function(r,a){if("string"!=typeof r)return null;void 0===a&&(a=$e.currentPath),r&&"/"==r[0]&&(a="");for(var e=a+"/"+r,i=e.split("/").reverse(),v=[""];i.length;){var t=i.pop();""==t||"."==t||(".."==t?v.length>1&&v.pop():v.push(t))}return 1==v.length?"/":v.join("/")},analyzePath:function(r,a,e){var i={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};if(r=$e.absolutePath(r),"/"==r)i.isRoot=!0,i.exists=i.parentExists=!0,i.name="/",i.path=i.parentPath="/",i.object=i.parentObject=$e.root;else if(null!==r){e=e||0,r=r.slice(1).split("/");for(var v=$e.root,t=[""];r.length;){1==r.length&&v.isFolder&&(i.parentExists=!0,i.parentPath=1==t.length?"/":t.join("/"),i.parentObject=v,i.name=r[0]);var f=r.shift();if(!v.isFolder){i.error=Ge.ENOTDIR;break}if(!v.read){i.error=Ge.EACCES;break}if(!v.contents.hasOwnProperty(f)){i.error=Ge.ENOENT;break}if(v=v.contents[f],v.link&&(!a||0!=r.length)){if(e>40){i.error=Ge.ELOOP;break}var _=$e.absolutePath(v.link,t.join("/"));return $e.analyzePath([_].concat(r).join("/"),a,e+1)}t.push(f),0==r.length&&(i.exists=!0,i.path=t.join("/"),i.object=v)}return i}return i},findObject:function(r,a){$e.ensureRoot();var e=$e.analyzePath(r,a);return e.exists?e.object:(Ya(e.error),null)},createObject:function(r,a,e,i,v){if(r||(r="/"),"string"==typeof r&&(r=$e.findObject(r)),!r)throw Ya(Ge.EACCES),new Error("Parent path must exist.");if(!r.isFolder)throw Ya(Ge.ENOTDIR),
new Error("Parent must be a folder.");if(!r.write&&!$e.ignorePermissions)throw Ya(Ge.EACCES),new Error("Parent folder must be writeable.");if(!a||"."==a||".."==a)throw Ya(Ge.ENOENT),new Error("Name must not be empty.");if(r.contents.hasOwnProperty(a))throw Ya(Ge.EEXIST),new Error("Can't overwrite object.");r.contents[a]={read:void 0===i||i,write:void 0!==v&&v,timestamp:Date.now(),inodeNumber:$e.nextInode++};for(var t in e)e.hasOwnProperty(t)&&(r.contents[a][t]=e[t]);return r.contents[a]},createFolder:function(r,a,e,i){var v={isFolder:!0,isDevice:!1,contents:{}};return $e.createObject(r,a,v,e,i)},createPath:function(r,a,e,i){var v=$e.findObject(r);if(null===v)throw new Error("Invalid parent.");for(a=a.split("/").reverse();a.length;){var t=a.pop();t&&(v.contents.hasOwnProperty(t)||$e.createFolder(v,t,e,i),v=v.contents[t])}return v},createFile:function(r,a,e,i,v){return e.isFolder=!1,$e.createObject(r,a,e,i,v)},createDataFile:function(r,a,e,i,v){if("string"==typeof e){for(var t=new Array(e.length),f=0,_=e.length;f<_;++f)t[f]=e.charCodeAt(f);e=t}var s={isDevice:!1,contents:e};return $e.createFile(r,a,s,i,v)},createLazyFile:function(r,a,e,i,v){var t={isDevice:!1,url:e};return $e.createFile(r,a,t,i,v)},createLink:function(r,a,e,i,v){var t={isDevice:!1,link:e};return $e.createFile(r,a,t,i,v)},createDevice:function(r,a,e,i){if(!e&&!i)throw new Error("A device must have at least one callback defined.");var v={isDevice:!0,input:e,output:i};return $e.createFile(r,a,v,Boolean(e),Boolean(i))},forceLoadFile:function(r){if(r.isDevice||r.isFolder||r.link||r.contents)return!0;var a=!0;if("undefined"!=typeof XMLHttpRequest)e("Cannot do synchronous binary XHRs in modern browsers. Use --embed-file or --preload-file in emcc");else{if("undefined"==typeof read)throw new Error("Cannot load without read() or XMLHttpRequest.");try{r.contents=p(read(r.url),!0)}catch(r){a=!1}}return a||Ya(Ge.EIO),a},ensureRoot:function(){$e.root||($e.root={read:!0,write:!0,isFolder:!0,isDevice:!1,timestamp:Date.now(),inodeNumber:1,contents:{}})},init:function(r,a,i){function v(r){null===r||r==="\\\\n".charCodeAt(0)?(a.printer(a.buffer.join("")),a.buffer=[]):a.buffer.push(String.fromCharCode(r))}e(!$e.init.initialized,"FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)"),$e.init.initialized=!0,$e.ensureRoot(),r=r||Module.stdin,a=a||Module.stdout,i=i||Module.stderr;var t=!0,f=!0,s=!0;r||(t=!1,r=function(){if(!r.cache||!r.cache.length){var a;"undefined"!=typeof window&&"function"==typeof window.prompt?a=window.prompt("Input: "):"function"==typeof readline&&(a=readline()),a||(a=""),r.cache=p(a+"\\\\n",!0)}return r.cache.shift()}),a||(f=!1,a=v),a.printer||(a.printer=print),a.buffer||(a.buffer=[]),i||(s=!1,i=v),i.printer||(i.printer=print),i.buffer||(i.buffer=[]),$e.createFolder("/","tmp",!0,!0);var n=$e.createFolder("/","dev",!0,!0),o=$e.createDevice(n,"stdin",r),l=$e.createDevice(n,"stdout",null,a),b=$e.createDevice(n,"stderr",null,i);$e.createDevice(n,"tty",r,a),$e.streams[1]={path:"/dev/stdin",object:o,position:0,isRead:!0,isWrite:!1,isAppend:!1,isTerminal:!t,error:!1,eof:!1,ungotten:[]},$e.streams[2]={path:"/dev/stdout",object:l,position:0,isRead:!1,isWrite:!0,isAppend:!1,isTerminal:!f,error:!1,eof:!1,ungotten:[]},$e.streams[3]={path:"/dev/stderr",object:b,position:0,isRead:!1,isWrite:!0,isAppend:!1,isTerminal:!s,error:!1,eof:!1,ungotten:[]},We=_([1],"void*",we),Ze=_([2],"void*",we),Qe=_([3],"void*",we),$e.createPath("/","dev/shm/tmp",!0,!0),$e.streams[We]=$e.streams[1],$e.streams[Ze]=$e.streams[2],$e.streams[Qe]=$e.streams[3],qe=_([_([0,0,0,0,We,0,0,0,Ze,0,0,0,Qe,0,0,0],"void*",we)],"void*",we)},quit:function(){$e.init.initialized&&($e.streams[2]&&$e.streams[2].object.output.buffer.length>0&&$e.streams[2].object.output("\\\\n".charCodeAt(0)),$e.streams[3]&&$e.streams[3].object.output.buffer.length>0&&$e.streams[3].object.output("\\\\n".charCodeAt(0)))}},Je=Ja;Ve.unshift({func:function(){$e.ignorePermissions=!1,$e.init.initialized||$e.init()}}),Be.push({func:function(){$e.quit()}}),Ya(0),ae.buf=_(12,"void*",we),Module.callMain=function(r){function a(){for(var r=0;r<3;r++)i.push(0)}var e=r.length+1,i=[_(p("/bin/this.program"),"i8",we)];a();for(var v=0;v<e-1;v+=1)i.push(_(p(r[v]),"i8",we)),a();return i.push(0),i=_(i,"i32",we),_main(e,i,0)};var ri,ai,ei,ii,vi,ti,qe,fi,_i,si,ni,oi,li,bi,ki,ui,ci,hi,di,wi;if(He.__str=_([97,78,0],"i8",we),He.__str1=_([38,61,0],"i8",we),He.__str2=_([97,83,0],"i8",we),He.__str3=_([61,0],"i8",we),He.__str4=_([97,97,0],"i8",we),He.__str5=_([38,38,0],"i8",we),He.__str6=_([97,100,0],"i8",we),He.__str7=_([38,0],"i8",we),He.__str8=_([97,110,0],"i8",we),He.__str9=_([99,108,0],"i8",we),He.__str10=_([40,41,0],"i8",we),He.__str11=_([99,109,0],"i8",we),He.__str12=_([44,0],"i8",we),He.__str13=_([99,111,0],"i8",we),He.__str14=_([126,0],"i8",we),He.__str15=_([100,86,0],"i8",we),He.__str16=_([47,61,0],"i8",we),He.__str17=_([100,97,0],"i8",we),He.__str18=_([100,101,108,101,116,101,91,93,0],"i8",we),He.__str19=_([100,101,0],"i8",we),He.__str20=_([42,0],"i8",we),He.__str21=_([100,108,0],"i8",we),He.__str22=_([100,101,108,101,116,101,0],"i8",we),He.__str23=_([100,118,0],"i8",we),He.__str24=_([47,0],"i8",we),He.__str25=_([101,79,0],"i8",we),He.__str26=_([94,61,0],"i8",we),He.__str27=_([101,111,0],"i8",we),He.__str28=_([94,0],"i8",we),He.__str29=_([101,113,0],"i8",we),He.__str30=_([61,61,0],"i8",we),He.__str31=_([103,101,0],"i8",we),He.__str32=_([62,61,0],"i8",we),He.__str33=_([103,116,0],"i8",we),He.__str34=_([62,0],"i8",we),He.__str35=_([105,120,0],"i8",we),He.__str36=_([91,93,0],"i8",we),He.__str37=_([108,83,0],"i8",we),He.__str38=_([60,60,61,0],"i8",we),He.__str39=_([108,101,0],"i8",we),He.__str40=_([60,61,0],"i8",we),He.__str41=_([108,115,0],"i8",we),He.__str42=_([60,60,0],"i8",we),He.__str43=_([108,116,0],"i8",we),He.__str44=_([60,0],"i8",we),He.__str45=_([109,73,0],"i8",we),He.__str46=_([45,61,0],"i8",we),He.__str47=_([109,76,0],"i8",we),He.__str48=_([42,61,0],"i8",we),He.__str49=_([109,105,0],"i8",we),He.__str51=_([109,108,0],"i8",we),He.__str52=_([109,109,0],"i8",we),He.__str53=_([45,45,0],"i8",we),He.__str54=_([110,97,0],"i8",we),He.__str55=_([110,101,119,91,93,0],"i8",we),He.__str56=_([110,101,0],"i8",we),He.__str57=_([33,61,0],"i8",we),He.__str58=_([110,103,0],"i8",we),He.__str59=_([110,116,0],"i8",we),He.__str60=_([33,0],"i8",we),He.__str61=_([110,119,0],"i8",we),He.__str62=_([110,101,119,0],"i8",we),He.__str63=_([111,82,0],"i8",we),He.__str64=_([124,61,0],"i8",we),He.__str65=_([111,111,0],"i8",we),He.__str66=_([124,124,0],"i8",we),He.__str67=_([111,114,0],"i8",we),He.__str68=_([124,0],"i8",we),He.__str69=_([112,76,0],"i8",we),He.__str70=_([43,61,0],"i8",we),He.__str71=_([112,108,0],"i8",we),He.__str72=_([43,0],"i8",we),He.__str73=_([112,109,0],"i8",we),He.__str74=_([45,62,42,0],"i8",we),He.__str75=_([112,112,0],"i8",we),He.__str76=_([43,43,0],"i8",we),He.__str77=_([112,115,0],"i8",we),He.__str78=_([112,116,0],"i8",we),He.__str79=_([45,62,0],"i8",we),He.__str80=_([113,117,0],"i8",we),He.__str81=_([63,0],"i8",we),He.__str82=_([114,77,0],"i8",we),He.__str83=_([37,61,0],"i8",we),He.__str84=_([114,83,0],"i8",we),He.__str85=_([62,62,61,0],"i8",we),He.__str86=_([114,109,0],"i8",we),He.__str87=_([37,0],"i8",we),He.__str88=_([114,115,0],"i8",we),He.__str89=_([62,62,0],"i8",we),He.__str90=_([115,116,0],"i8",we),He.__str91=_([115,105,122,101,111,102,32,0],"i8",we),He.__str92=_([115,122,0],"i8",we),ri=_([0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0],we),He.__str95=_([98,111,111,108,101,97,110,0],"i8",we),He.__str97=_([98,121,116,101,0],"i8",we),He.__str101=_([95,95,102,108,111,97,116,49,50,56,0],"i8",we),He.__str105=_([117,110,115,105,103,110,101,100,0],"i8",we),He.__str114=_([108,111,110,103,32,108,111,110,103,0],"i8",we),He.__str115=_([117,110,115,105,103,110,101,100,32,108,111,110,103,32,108,111,110,103,0],"i8",we),ai=_([0,0,0,0,11,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,8,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,11,0,0,0,8,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,8,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,10,0,0,0,8,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,13,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,9,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,6,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0],["*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0],we),He.__str117=_([95,71,76,79,66,65,76,95,0],"i8",we),He.__str118=_([103,108,111,98,97,108,32,99,111,110,115,116,114,117,99,116,111,114,115,32,107,101,121,101,100,32,116,111,32,0],"i8",we),He.__str119=_([103,108,111,98,97,108,32,100,101,115,116,114,117,99,116,111,114,115,32,107,101,121,101,100,32,116,111,32,0],"i8",we),He.__str120=_([58,58,0],"i8",we),He.__str121=_([118,116,97,98,108,101,32,102,111,114,32,0],"i8",we),He.__str122=_([86,84,84,32,102,111,114,32,0],"i8",we),He.__str123=_([99,111,110,115,116,114,117,99,116,105,111,110,32,118,116,97,98,108,101,32,102,111,114,32,0],"i8",we),He.__str124=_([45,105,110,45,0],"i8",we),He.__str125=_([116,121,112,101,105,110,102,111,32,102,111,114,32,0],"i8",we),He.__str126=_([116,121,112,101,105,110,102,111,32,110,97,109,101,32,102,111,114,32,0],"i8",we),He.__str127=_([116,121,112,101,105,110,102,111,32,102,110,32,102,111,114,32,0],"i8",we),He.__str128=_([110,111,110,45,118,105,114,116,117,97,108,32,116,104,117,110,107,32,116,111,32,0],"i8",we),He.__str129=_([118,105,114,116,117,97,108,32,116,104,117,110,107,32,116,111,32,0],"i8",we),He.__str130=_([99,111,118,97,114,105,97,110,116,32,114,101,116,117,114,110,32,116,104,117,110,107,32,116,111,32,0],"i8",we),He.__str131=_([106,97,118,97,32,67,108,97,115,115,32,102,111,114,32,0],"i8",we),He.__str132=_([103,117,97,114,100,32,118,97,114,105,97,98,108,101,32,102,111,114,32,0],"i8",we),He.__str133=_([114,101,102,101,114,101,110,99,101,32,116,101,109,112,111,114,97,114,121,32,102,111,114,32,0],"i8",we),He.__str134=_([104,105,100,100,101,110,32,97,108,105,97,115,32,102,111,114,32,0],"i8",we),He.__str135=_([58,58,42,0],"i8",we),He.__str136=_([44,32,0],"i8",we),He.__str137=_([111,112,101,114,97,116,111,114,0],"i8",we),He.__str139=_([41,32,0],"i8",we),He.__str140=_([32,40,0],"i8",we),He.__str141=_([41,32,58,32,40,0],"i8",we),He.__str142=_([117,108,0],"i8",we),He.__str143=_([108,108,0],"i8",we),He.__str144=_([117,108,108,0],"i8",we),He.__str145=_([102,97,108,115,101,0],"i8",we),He.__str146=_([116,114,117,101,0],"i8",we),He.__str147=_([32,114,101,115,116,114,105,99,116,0],"i8",we),He.__str148=_([32,118,111,108,97,116,105,108,101,0],"i8",we),He.__str149=_([32,99,111,110,115,116,0],"i8",we),He.__str150=_([99,111,109,112,108,101,120,32,0],"i8",we),He.__str151=_([105,109,97,103,105,110,97,114,121,32,0],"i8",we),ei=_([116,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,9,0,0,0,98,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,12,0,0,0,115,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,70,0,0,0,0,0,0,0,12,0,0,0,105,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,13,0,0,0,111,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,13,0,0,0,100,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,14,0,0,0],["i8",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i8",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i8",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i8",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i8",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i8",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i8",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0],we),He.__str152=_([115,116,100,0],"i8",we),He.__str153=_([115,116,100,58,58,97,108,108,111,99,97,116,111,114,0],"i8",we),He.__str154=_([97,108,108,111,99,97,116,111,114,0],"i8",we),He.__str155=_([115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,0],"i8",we),He.__str156=_([98,97,115,105,99,95,115,116,114,105,110,103,0],"i8",we),He.__str157=_([115,116,100,58,58,115,116,114,105,110,103,0],"i8",we),He.__str158=_([115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,44,32,115,116,100,58,58,97,108,108,111,99,97,116,111,114,60,99,104,97,114,62,32,62,0],"i8",we),He.__str159=_([115,116,100,58,58,105,115,116,114,101,97,109,0],"i8",we),He.__str160=_([115,116,100,58,58,98,97,115,105,99,95,105,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0],"i8",we),He.__str161=_([98,97,115,105,99,95,105,115,116,114,101,97,109,0],"i8",we),He.__str162=_([115,116,100,58,58,111,115,116,114,101,97,109,0],"i8",we),He.__str163=_([115,116,100,58,58,98,97,115,105,99,95,111,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0],"i8",we),He.__str164=_([98,97,115,105,99,95,111,115,116,114,101,97,109,0],"i8",we),He.__str165=_([115,116,100,58,58,105,111,115,116,114,101,97,109,0],"i8",we),He.__str166=_([115,116,100,58,58,98,97,115,105,99,95,105,111,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0],"i8",we),He.__str167=_([98,97,115,105,99,95,105,111,115,116,114,101,97,109,0],"i8",we),He.__str168=_([115,116,114,105,110,103,32,108,105,116,101,114,97,108,0],"i8",we),He.__str169=_([40,97,110,111,110,121,109,111,117,115,32,110,97,109,101,115,112,97,99,101,41,0],"i8",we),He._symbol_demangle_dashed_null=_([45,45,110,117,108,108,45,45,0],"i8",we),He.__str170=_([37,115,37,115,0],"i8",we),He.__str1171=_([111,112,101,114,97,116,111,114,32,110,101,119,0],"i8",we),He.__str2172=_([111,112,101,114,97,116,111,114,32,100,101,108,101,116,101,0],"i8",we),He.__str3173=_([111,112,101,114,97,116,111,114,61,0],"i8",we),He.__str4174=_([111,112,101,114,97,116,111,114,62,62,0],"i8",we),He.__str5175=_([111,112,101,114,97,116,111,114,60,60,0],"i8",we),He.__str6176=_([111,112,101,114,97,116,111,114,33,0],"i8",we),He.__str7177=_([111,112,101,114,97,116,111,114,61,61,0],"i8",we),He.__str8178=_([111,112,101,114,97,116,111,114,33,61,0],"i8",we),He.__str9179=_([111,112,101,114,97,116,111,114,91,93,0],"i8",we),He.__str10180=_([111,112,101,114,97,116,111,114,32,0],"i8",we),He.__str11181=_([111,112,101,114,97,116,111,114,45,62,0],"i8",we),He.__str12182=_([111,112,101,114,97,116,111,114,42,0],"i8",we),He.__str13183=_([111,112,101,114,97,116,111,114,43,43,0],"i8",we),He.__str14184=_([111,112,101,114,97,116,111,114,45,45,0],"i8",we),He.__str15185=_([111,112,101,114,97,116,111,114,45,0],"i8",we),He.__str16186=_([111,112,101,114,97,116,111,114,43,0],"i8",we),He.__str17187=_([111,112,101,114,97,116,111,114,38,0],"i8",we),He.__str18188=_([111,112,101,114,97,116,111,114,45,62,42,0],"i8",we),He.__str19189=_([111,112,101,114,97,116,111,114,47,0],"i8",we),He.__str20190=_([111,112,101,114,97,116,111,114,37,0],"i8",we),He.__str21191=_([111,112,101,114,97,116,111,114,60,0],"i8",we),He.__str22192=_([111,112,101,114,97,116,111,114,60,61,0],"i8",we),He.__str23193=_([111,112,101,114,97,116,111,114,62,0],"i8",we),He.__str24194=_([111,112,101,114,97,116,111,114,62,61,0],"i8",we),He.__str25195=_([111,112,101,114,97,116,111,114,44,0],"i8",we),He.__str26196=_([111,112,101,114,97,116,111,114,40,41,0],"i8",we),He.__str27197=_([111,112,101,114,97,116,111,114,126,0],"i8",we),He.__str28198=_([111,112,101,114,97,116,111,114,94,0],"i8",we),He.__str29199=_([111,112,101,114,97,116,111,114,124,0],"i8",we),He.__str30200=_([111,112,101,114,97,116,111,114,38,38,0],"i8",we),He.__str31201=_([111,112,101,114,97,116,111,114,124,124,0],"i8",we),He.__str32202=_([111,112,101,114,97,116,111,114,42,61,0],"i8",we),He.__str33203=_([111,112,101,114,97,116,111,114,43,61,0],"i8",we),He.__str34204=_([111,112,101,114,97,116,111,114,45,61,0],"i8",we),He.__str35205=_([111,112,101,114,97,116,111,114,47,61,0],"i8",we),He.__str36206=_([111,112,101,114,97,116,111,114,37,61,0],"i8",we),He.__str37207=_([111,112,101,114,97,116,111,114,62,62,61,0],"i8",we),He.__str38208=_([111,112,101,114,97,116,111,114,60,60,61,0],"i8",we),He.__str39209=_([111,112,101,114,97,116,111,114,38,61,0],"i8",we),He.__str40210=_([111,112,101,114,97,116,111,114,124,61,0],"i8",we),He.__str41211=_([111,112,101,114,97,116,111,114,94,61,0],"i8",we),He.__str42212=_([96,118,102,116,97,98,108,101,39,0],"i8",we),He.__str43213=_([96,118,98,116,97,98,108,101,39,0],"i8",we),He.__str44214=_([96,118,99,97,108,108,39,0],"i8",we),He.__str45215=_([96,116,121,112,101,111,102,39,0],"i8",we),He.__str46216=_([96,108,111,99,97,108,32,115,116,97,116,105,99,32,103,117,97,114,100,39,0],"i8",we),He.__str47217=_([96,115,116,114,105,110,103,39,0],"i8",we),He.__str48218=_([96,118,98,97,115,101,32,100,101,115,116,114,117,99,116,111,114,39,0],"i8",we),He.__str49219=_([96,118,101,99,116,111,114,32,100,101,108,101,116,105,110,103,32,100,101,115,116,114,117,99,116,111,114,39,0],"i8",we),He.__str50220=_([96,100,101,102,97,117,108,116,32,99,111,110,115,116,114,117,99,116,111,114,32,99,108,111,115,117,114,101,39,0],"i8",we),He.__str51221=_([96,115,99,97,108,97,114,32,100,101,108,101,116,105,110,103,32,100,101,115,116,114,117,99,116,111,114,39,0],"i8",we),He.__str52222=_([96,118,101,99,116,111,114,32,99,111,110,115,116,114,117,99,116,111,114,32,105,116,101,114,97,116,111,114,39,0],"i8",we),He.__str53223=_([96,118,101,99,116,111,114,32,100,101,115,116,114,117,99,116,111,114,32,105,116,101,114,97,116,111,114,39,0],"i8",we),He.__str54224=_([96,118,101,99,116,111,114,32,118,98,97,115,101,32,99,111,110,115,116,114,117,99,116,111,114,32,105,116,101,114,97,116,111,114,39,0],"i8",we),He.__str55225=_([96,118,105,114,116,117,97,108,32,100,105,115,112,108,97,99,101,109,101,110,116,32,109,97,112,39,0],"i8",we),He.__str56226=_([96,101,104,32,118,101,99,116,111,114,32,99,111,110,115,116,114,117,99,116,111,114,32,105,116,101,114,97,116,111,114,39,0],"i8",we),He.__str57227=_([96,101,104,32,118,101,99,116,111,114,32,100,101,115,116,114,117,99,116,111,114,32,105,116,101,114,97,116,111,114,39,0],"i8",we),He.__str58228=_([96,101,104,32,118,101,99,116,111,114,32,118,98,97,115,101,32,99,111,110,115,116,114,117,99,116,111,114,32,105,116,101,114,97,116,111,114,39,0],"i8",we),He.__str59229=_([96,99,111,112,121,32,99,111,110,115,116,114,117,99,116,111,114,32,99,108,111,115,117,114,101,39,0],"i8",we),He.__str60230=_([37,115,37,115,32,96,82,84,84,73,32,84,121,112,101,32,68,101,115,99,114,105,112,116,111,114,39,0],"i8",we),He.__str61231=_([96,82,84,84,73,32,66,97,115,101,32,67,108,97,115,115,32,68,101,115,99,114,105,112,116,111,114,32,97,116,32,40,37,115,44,37,115,44,37,115,44,37,115,41,39,0],"i8",we),He.__str62232=_([96,82,84,84,73,32,66,97,115,101,32,67,108,97,115,115,32,65,114,114,97,121,39,0],"i8",we),He.__str63233=_([96,82,84,84,73,32,67,108,97,115,115,32,72,105,101,114,97,114,99,104,121,32,68,101,115,99,114,105,112,116,111,114,39,0],"i8",we),He.__str64234=_([96,82,84,84,73,32,67,111,109,112,108,101,116,101,32,79,98,106,101,99,116,32,76,111,99,97,116,111,114,39,0],"i8",we),He.__str65235=_([96,108,111,99,97,108,32,118,102,116,97,98,108,101,39,0],"i8",we),He.__str66236=_([96,108,111,99,97,108,32,118,102,116,97,98,108,101,32,99,111,110,115,116,114,117,99,116,111,114,32,99,108,111,115,117,114,101,39,0],"i8",we),He.__str67237=_([111,112,101,114,97,116,111,114,32,110,101,119,91,93,0],"i8",we),He.__str68238=_([111,112,101,114,97,116,111,114,32,100,101,108,101,116,101,91,93,0],"i8",we),He.__str69239=_([96,112,108,97,99,101,109,101,110,116,32,100,101,108,101,116,101,32,99,108,111,115,117,114,101,39,0],"i8",we),He.__str70240=_([96,112,108,97,99,101,109,101,110,116,32,100,101,108,101,116,101,91,93,32,99,108,111,115,117,114,101,39,0],"i8",we),He.__str71241=_([126,37,115,0],"i8",we),He.__str72242=_([117,110,100,110,97,109,101,46,99,0],"i8",we),He.___func___symbol_demangle=_([115,121,109,98,111,108,95,100,101,109,97,110,103,108,101,0],"i8",we),He.__str73243=_([115,121,109,45,62,114,101,115,117,108,116,0],"i8",we),He.___func___handle_template=_([104,97,110,100,108,101,95,116,101,109,112,108,97,116,101,0],"i8",we),He.__str74244=_([42,115,121,109,45,62,99,117,114,114,101,110,116,32,61,61,32,39,36,39,0],"i8",we),He.___func___str_array_get_ref=_([115,116,114,95,97,114,114,97,121,95,103,101,116,95,114,101,102,0],"i8",we),He.__str75245=_([99,114,101,102,0],"i8",we),He.__str76246=_([112,114,105,118,97,116,101,58,32,0],"i8",we),He.__str77247=_([112,114,111,116,101,99,116,101,100,58,32,0],"i8",we),He.__str78248=_([112,117,98,108,105,99,58,32,0],"i8",we),He.__str79249=_([115,116,97,116,105,99,32,0],"i8",we),He.__str80250=_([118,105,114,116,117,97,108,32,0],"i8",we),He.__str81251=_([91,116,104,117,110,107,93,58,37,115,0],"i8",we),He.__str82252=_([37,115,96,97,100,106,117,115,116,111,114,123,37,115,125,39,32,0],"i8",we),He.__str83253=_([37,115,32,37,115,0],"i8",we),He.__str84254=_([118,111,105,100,0],"i8",we),He.__str85255=_([37,115,37,115,37,115,0],"i8",we),He.__str86256=_([37,115,37,115,37,115,37,115,37,115,37,115,37,115,37,115,37,115,37,115,37,115,0],"i8",we),He.__str87257=_([32,0],"i8",we),He.__str88258=_([100,108,108,95,101,120,112,111,114,116,32,0],"i8",we),He.__str89259=_([99,100,101,99,108,0],"i8",we),He.__str90260=_([112,97,115,99,97,108,0],"i8",we),He.__str91261=_([116,104,105,115,99,97,108,108,0],"i8",we),He.__str92262=_([115,116,100,99,97,108,108,0],"i8",we),He.__str93263=_([102,97,115,116,99,97,108,108,0],"i8",we),He.__str94264=_([99,108,114,99,97,108,108,0],"i8",we),He.__str95265=_([95,95,100,108,108,95,101,120,112,111,114,116,32,0],"i8",we),He.__str96266=_([95,95,99,100,101,99,108,0],"i8",we),He.__str97267=_([95,95,112,97,115,99,97,108,0],"i8",we),He.__str98268=_([95,95,116,104,105,115,99,97,108,108,0],"i8",we),He.__str99269=_([95,95,115,116,100,99,97,108,108,0],"i8",we),He.__str100270=_([95,95,102,97,115,116,99,97,108,108,0],"i8",we),He.__str101271=_([95,95,99,108,114,99,97,108,108,0],"i8",we),He.__str102272=_([95,95,112,116,114,54,52,0],"i8",we),He.__str103273=_([99,111,110,115,116,0],"i8",we),He.__str104274=_([118,111,108,97,116,105,108,101,0],"i8",we),He.__str105275=_([99,111,110,115,116,32,118,111,108,97,116,105,108,101,0],"i8",we),He.___func___get_class_string=_([103,101,116,95,99,108,97,115,115,95,115,116,114,105,110,103,0],"i8",we),He.__str106276=_([97,45,62,101,108,116,115,91,105,93,0],"i8",we),He.__str107277=_([123,102,111,114,32,96,37,115,39,125,0],"i8",we),He.__str108278=_([37,115,37,115,37,115,37,115,37,115,37,115,37,115,37,115,0],"i8",we),He.__str109279=_([96,37,115,39,0],"i8",we),He.__str110280=_([46,46,46,0],"i8",we),He.__str111281=_([37,99,118,111,105,100,37,99,0],"i8",we),He.__str112282=_([37,115,44,37,115,0],"i8",we),He.__str113283=_([37,99,37,115,37,115,32,37,99,0],"i8",we),He.__str114284=_([37,99,37,115,37,115,37,99,0],"i8",we),He.___func___str_array_push=_([115,116,114,95,97,114,114,97,121,95,112,117,115,104,0],"i8",we),He.__str115285=_([112,116,114,0],"i8",we),He.__str116286=_([97,0],"i8",we),He.__str117287=_([97,45,62,101,108,116,115,91,97,45,62,110,117,109,93,0],"i8",we),He.__str118288=_([37,115,37,100,0],"i8",we),He.__str119289=_([45,0],"i8",we),ii=_(1,"i8",we),He.___func___demangle_datatype=_([100,101,109,97,110,103,108,101,95,100,97,116,97,116,121,112,101,0],"i8",we),He.__str121291=_([99,116,0],"i8",we),He.__str122292=_([117,110,105,111,110,32,0],"i8",we),He.__str123293=_([115,116,114,117,99,116,32,0],"i8",we),He.__str124294=_([99,108,97,115,115,32,0],"i8",we),He.__str125295=_([99,111,105,110,116,101,114,102,97,99,101,32,0],"i8",we),He.__str126296=_([96,116,101,109,112,108,97,116,101,45,112,97,114,97,109,101,116,101,114,45,37,115,39,0],"i8",we),He.__str127297=_([37,115,37,115,32,40,37,115,42,0],"i8",we),He.__str128298=_([41,37,115,0],"i8",we),He.__str129299=_([101,110,117,109,32,37,115,0],"i8",we),He.__str130300=_([96,116,101,109,112,108,97,116,101,45,112,97,114,97,109,101,116,101,114,37,115,39,0],"i8",we),He.__str131301=_([123,37,115,44,37,115,125,0],"i8",we),He.__str132302=_([123,37,115,44,37,115,44,37,115,125,0],"i8",we),He.__str133303=_([96,110,111,110,45,116,121,112,101,45,116,101,109,112,108,97,116,101,45,112,97,114,97,109,101,116,101,114,37,115,39,0],"i8",we),He.__str134304=_([32,95,95,112,116,114,54,52,0],"i8",we),He.__str135305=_([32,38,37,115,0],"i8",we),He.__str136306=_([32,38,37,115,32,118,111,108,97,116,105,108,101,0],"i8",we),He.__str137307=_([32,42,37,115,0],"i8",we),He.__str138308=_([32,42,37,115,32,99,111,110,115,116,0],"i8",we),He.__str139309=_([32,42,37,115,32,118,111,108,97,116,105,108,101,0],"i8",we),He.__str140310=_([32,42,37,115,32,99,111,110,115,116,32,118,111,108,97,116,105,108,101,0],"i8",we),He.__str141311=_([32,40,37,115,37,115,41,0],"i8",we),He.__str142312=_([32,40,37,115,41,0],"i8",we),He.__str143313=_([37,115,91,37,115,93,0],"i8",we),He.__str144314=_([37,115,32,37,115,37,115,0],"i8",we),He.__str145315=_([115,105,103,110,101,100,32,99,104,97,114,0],"i8",we),He.__str146316=_([99,104,97,114,0],"i8",we),He.__str147317=_([117,110,115,105,103,110,101,100,32,99,104,97,114,0],"i8",we),He.__str148318=_([115,104,111,114,116,0],"i8",we),He.__str149319=_([117,110,115,105,103,110,101,100,32,115,104,111,114,116,0],"i8",we),He.__str150320=_([105,110,116,0],"i8",we),He.__str151321=_([117,110,115,105,103,110,101,100,32,105,110,116,0],"i8",we),He.__str152322=_([108,111,110,103,0],"i8",we),He.__str153323=_([117,110,115,105,103,110,101,100,32,108,111,110,103,0],"i8",we),He.__str154324=_([102,108,111,97,116,0],"i8",we),He.__str155325=_([100,111,117,98,108,101,0],"i8",we),He.__str156326=_([108,111,110,103,32,100,111,117,98,108,101,0],"i8",we),He.__str157327=_([95,95,105,110,116,56,0],"i8",we),He.__str158328=_([117,110,115,105,103,110,101,100,32,95,95,105,110,116,56,0],"i8",we),He.__str159329=_([95,95,105,110,116,49,54,0],"i8",we),He.__str160330=_([117,110,115,105,103,110,101,100,32,95,95,105,110,116,49,54,0],"i8",we),He.__str161331=_([95,95,105,110,116,51,50,0],"i8",we),He.__str162332=_([117,110,115,105,103,110,101,100,32,95,95,105,110,116,51,50,0],"i8",we),He.__str163333=_([95,95,105,110,116,54,52,0],"i8",we),He.__str164334=_([117,110,115,105,103,110,101,100,32,95,95,105,110,116,54,52,0],"i8",we),
He.__str165335=_([95,95,105,110,116,49,50,56,0],"i8",we),He.__str166336=_([117,110,115,105,103,110,101,100,32,95,95,105,110,116,49,50,56,0],"i8",we),He.__str167337=_([98,111,111,108,0],"i8",we),He.__str168338=_([119,99,104,97,114,95,116,0],"i8",we),vi=_(468,["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0],we),ti=_(24,"i32",we),He.__str339=_([109,97,120,32,115,121,115,116,101,109,32,98,121,116,101,115,32,61,32,37,49,48,108,117,10,0],"i8",we),He.__str1340=_([115,121,115,116,101,109,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0],"i8",we),He.__str2341=_([105,110,32,117,115,101,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0],"i8",we),fi=_([ue],"i8",we),_i=_(1,"void ()*",we),si=_([0,0,0,0,0,0,0,0,6,0,0,0,8,0,0,0,10,0,0,0],["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0],we),_(1,"void*",we),He.__str3342=_([115,116,100,58,58,98,97,100,95,97,108,108,111,99,0],"i8",we),ni=_([0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,14,0,0,0],["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0],we),_(1,"void*",we),He.__str14343=_([98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0],"i8",we),He.__ZTSSt9bad_alloc=_([83,116,57,98,97,100,95,97,108,108,111,99,0],"i8",we),bi=_(12,"*",we),He.__ZTSSt20bad_array_new_length=_([83,116,50,48,98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0],"i8",we),ki=_(12,"*",we),Se[ri>>2]=0|He.__str,Se[ri+4>>2]=0|He.__str1,Se[ri+16>>2]=0|He.__str2,Se[ri+20>>2]=0|He.__str3,Se[ri+32>>2]=0|He.__str4,Se[ri+36>>2]=0|He.__str5,Se[ri+48>>2]=0|He.__str6,Se[ri+52>>2]=0|He.__str7,Se[ri+64>>2]=0|He.__str8,Se[ri+68>>2]=0|He.__str7,Se[ri+80>>2]=0|He.__str9,Se[ri+84>>2]=0|He.__str10,Se[ri+96>>2]=0|He.__str11,Se[ri+100>>2]=0|He.__str12,Se[ri+112>>2]=0|He.__str13,Se[ri+116>>2]=0|He.__str14,Se[ri+128>>2]=0|He.__str15,Se[ri+132>>2]=0|He.__str16,Se[ri+144>>2]=0|He.__str17,Se[ri+148>>2]=0|He.__str18,Se[ri+160>>2]=0|He.__str19,Se[ri+164>>2]=0|He.__str20,Se[ri+176>>2]=0|He.__str21,Se[ri+180>>2]=0|He.__str22,Se[ri+192>>2]=0|He.__str23,Se[ri+196>>2]=0|He.__str24,Se[ri+208>>2]=0|He.__str25,Se[ri+212>>2]=0|He.__str26,Se[ri+224>>2]=0|He.__str27,Se[ri+228>>2]=0|He.__str28,Se[ri+240>>2]=0|He.__str29,Se[ri+244>>2]=0|He.__str30,Se[ri+256>>2]=0|He.__str31,Se[ri+260>>2]=0|He.__str32,Se[ri+272>>2]=0|He.__str33,Se[ri+276>>2]=0|He.__str34,Se[ri+288>>2]=0|He.__str35,Se[ri+292>>2]=0|He.__str36,Se[ri+304>>2]=0|He.__str37,Se[ri+308>>2]=0|He.__str38,Se[ri+320>>2]=0|He.__str39,Se[ri+324>>2]=0|He.__str40,Se[ri+336>>2]=0|He.__str41,Se[ri+340>>2]=0|He.__str42,Se[ri+352>>2]=0|He.__str43,Se[ri+356>>2]=0|He.__str44,Se[ri+368>>2]=0|He.__str45,Se[ri+372>>2]=0|He.__str46,Se[ri+384>>2]=0|He.__str47,Se[ri+388>>2]=0|He.__str48,Se[ri+400>>2]=0|He.__str49,Se[ri+404>>2]=0|He.__str119289,Se[ri+416>>2]=0|He.__str51,Se[ri+420>>2]=0|He.__str20,Se[ri+432>>2]=0|He.__str52,Se[ri+436>>2]=0|He.__str53,Se[ri+448>>2]=0|He.__str54,Se[ri+452>>2]=0|He.__str55,Se[ri+464>>2]=0|He.__str56,Se[ri+468>>2]=0|He.__str57,Se[ri+480>>2]=0|He.__str58,Se[ri+484>>2]=0|He.__str119289,Se[ri+496>>2]=0|He.__str59,Se[ri+500>>2]=0|He.__str60,Se[ri+512>>2]=0|He.__str61,Se[ri+516>>2]=0|He.__str62,Se[ri+528>>2]=0|He.__str63,Se[ri+532>>2]=0|He.__str64,Se[ri+544>>2]=0|He.__str65,Se[ri+548>>2]=0|He.__str66,Se[ri+560>>2]=0|He.__str67,Se[ri+564>>2]=0|He.__str68,Se[ri+576>>2]=0|He.__str69,Se[ri+580>>2]=0|He.__str70,Se[ri+592>>2]=0|He.__str71,Se[ri+596>>2]=0|He.__str72,Se[ri+608>>2]=0|He.__str73,Se[ri+612>>2]=0|He.__str74,Se[ri+624>>2]=0|He.__str75,Se[ri+628>>2]=0|He.__str76,Se[ri+640>>2]=0|He.__str77,Se[ri+644>>2]=0|He.__str72,Se[ri+656>>2]=0|He.__str78,Se[ri+660>>2]=0|He.__str79,Se[ri+672>>2]=0|He.__str80,Se[ri+676>>2]=0|He.__str81,Se[ri+688>>2]=0|He.__str82,Se[ri+692>>2]=0|He.__str83,Se[ri+704>>2]=0|He.__str84,Se[ri+708>>2]=0|He.__str85,Se[ri+720>>2]=0|He.__str86,Se[ri+724>>2]=0|He.__str87,Se[ri+736>>2]=0|He.__str88,Se[ri+740>>2]=0|He.__str89,Se[ri+752>>2]=0|He.__str90,Se[ri+756>>2]=0|He.__str91,Se[ri+768>>2]=0|He.__str92,Se[ri+772>>2]=0|He.__str91,Se[ai>>2]=0|He.__str145315,Se[ai+8>>2]=0|He.__str145315,Se[ai+20>>2]=0|He.__str167337,Se[ai+28>>2]=0|He.__str95,Se[ai+40>>2]=0|He.__str146316,Se[ai+48>>2]=0|He.__str97,Se[ai+60>>2]=0|He.__str155325,Se[ai+68>>2]=0|He.__str155325,Se[ai+80>>2]=0|He.__str156326,Se[ai+88>>2]=0|He.__str156326,Se[ai+100>>2]=0|He.__str154324,Se[ai+108>>2]=0|He.__str154324,Se[ai+120>>2]=0|He.__str101,Se[ai+128>>2]=0|He.__str101,Se[ai+140>>2]=0|He.__str147317,Se[ai+148>>2]=0|He.__str147317,Se[ai+160>>2]=0|He.__str150320,Se[ai+168>>2]=0|He.__str150320,Se[ai+180>>2]=0|He.__str151321,Se[ai+188>>2]=0|He.__str105,Se[ai+220>>2]=0|He.__str152322,Se[ai+228>>2]=0|He.__str152322,Se[ai+240>>2]=0|He.__str153323,Se[ai+248>>2]=0|He.__str153323,Se[ai+260>>2]=0|He.__str165335,Se[ai+268>>2]=0|He.__str165335,Se[ai+280>>2]=0|He.__str166336,Se[ai+288>>2]=0|He.__str166336,Se[ai+360>>2]=0|He.__str148318,Se[ai+368>>2]=0|He.__str148318,Se[ai+380>>2]=0|He.__str149319,Se[ai+388>>2]=0|He.__str149319,Se[ai+420>>2]=0|He.__str84254,Se[ai+428>>2]=0|He.__str84254,Se[ai+440>>2]=0|He.__str168338,Se[ai+448>>2]=0|He.__str146316,Se[ai+460>>2]=0|He.__str114,Se[ai+468>>2]=0|He.__str152322,Se[ai+480>>2]=0|He.__str115,Se[ai+488>>2]=0|He.__str115,Se[ai+500>>2]=0|He.__str110280,Se[ai+508>>2]=0|He.__str110280,Se[ei+4>>2]=0|He.__str152,Se[ei+12>>2]=0|He.__str152,Se[ei+32>>2]=0|He.__str153,Se[ei+40>>2]=0|He.__str153,Se[ei+48>>2]=0|He.__str154,Se[ei+60>>2]=0|He.__str155,Se[ei+68>>2]=0|He.__str155,Se[ei+76>>2]=0|He.__str156,Se[ei+88>>2]=0|He.__str157,Se[ei+96>>2]=0|He.__str158,Se[ei+104>>2]=0|He.__str156,Se[ei+116>>2]=0|He.__str159,Se[ei+124>>2]=0|He.__str160,Se[ei+132>>2]=0|He.__str161,Se[ei+144>>2]=0|He.__str162,Se[ei+152>>2]=0|He.__str163,Se[ei+160>>2]=0|He.__str164,Se[ei+172>>2]=0|He.__str165,Se[ei+180>>2]=0|He.__str166,Se[ei+188>>2]=0|He.__str167,Se[si+4>>2]=bi,Se[ni+4>>2]=ki,oi=_([2,0,0,0,0],["i8*",0,0,0,0],we),Se[bi>>2]=oi+8|0,Se[bi+4>>2]=0|He.__ZTSSt9bad_alloc,Se[bi+8>>2]=li,Se[ki>>2]=oi+8|0,Se[ki+4>>2]=0|He.__ZTSSt20bad_array_new_length,Se[ki+8>>2]=bi,ui=16,ci=6,hi=18,di=6,wi=6,pe=[0,0,Jr,0,va,0,ya,0,ga,0,wa,0,Sa,0,pa,0,Ea,0,ma,0],Module.FUNCTION_TABLE=pe,Module.run=ee,Module.preRun&&Module.preRun(),0==Ke){ee()}Module.postRun&&Module.postRun(),Module.___cxa_demangle=G;var pi=v("__cxa_demangle","string",["string","string","number","number"]);return function(r){return pi(r,"",1,0)}}();
\`;

/***/ }),

/***/ 121:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Flamechart = void 0;

const utils_1 = __webpack_require__(844);

const math_1 = __webpack_require__(293);

class Flamechart {
  constructor(source) {
    this.source = source; // Bottom to top

    this.layers = [];
    this.totalWeight = 0;
    this.minFrameWidth = 1;
    const stack = [];

    const openFrame = (node, value) => {
      const parent = utils_1.lastOf(stack);
      const frame = {
        node,
        parent,
        children: [],
        start: value,
        end: value
      };

      if (parent) {
        parent.children.push(frame);
      }

      stack.push(frame);
    };

    this.minFrameWidth = Infinity;

    const closeFrame = (node, value) => {
      console.assert(stack.length > 0);
      const stackTop = stack.pop();
      stackTop.end = value;
      if (stackTop.end - stackTop.start === 0) return;
      const layerIndex = stack.length;

      while (this.layers.length <= layerIndex) this.layers.push([]);

      this.layers[layerIndex].push(stackTop);
      this.minFrameWidth = Math.min(this.minFrameWidth, stackTop.end - stackTop.start);
    };

    this.totalWeight = source.getTotalWeight();
    source.forEachCall(openFrame, closeFrame);
    if (!isFinite(this.minFrameWidth)) this.minFrameWidth = 1;
  }

  getTotalWeight() {
    return this.totalWeight;
  }

  getLayers() {
    return this.layers;
  }

  getColorBucketForFrame(frame) {
    return this.source.getColorBucketForFrame(frame);
  }

  getMinFrameWidth() {
    return this.minFrameWidth;
  }

  formatValue(v) {
    return this.source.formatValue(v);
  }

  getClampedViewportWidth(viewportWidth) {
    const maxWidth = this.getTotalWeight(); // In order to avoid floating point error, we cap the maximum zoom. In
    // particular, it's important that at the maximum zoom level, the total
    // trace size + a viewport width is not equal to the trace size due to
    // floating point rounding.
    //
    // For instance, if the profile's total weight is 2^60, and the viewport
    // size is 1, trying to move one viewport width right will result in no
    // change because 2^60 + 1 = 2^60 in floating point arithmetic. JavaScript
    // numbers are 64 bit floats, and therefore have 53 mantissa bits. You can
    // see this for yourself in the console. Try:
    //
    //   > Math.pow(2, 60) + 1 === Math.pow(2, 60)
    //   true
    //   > Math.pow(2, 53) + 1 === Math.pow(2, 53)
    //   true
    //   > Math.pow(2, 52) + 1 === Math.pow(2, 52)
    //   false
    //
    // We use 2^40 as a cap instead, since we want to be able to make small
    // adjustments within a viewport width.
    //
    // For reference, this will still allow you to zoom until 1 nanosecond fills
    // the screen in a profile with a duration of over 18 minutes.
    //
    //   > Math.pow(2, 40) / (60 * Math.pow(10, 9))
    //   18.325193796266667
    //

    const maxZoom = Math.pow(2, 40); // In addition to capping zoom to avoid floating point error, we further cap
    // zoom to avoid letting you zoom in so that the smallest element more than
    // fills the screen, since that probably isn't useful. The final zoom cap is
    // determined by the minimum zoom of either 2^40x zoom or the necessary zoom
    // for the smallest frame to fill the screen three times.

    const minWidth = math_1.clamp(3 * this.getMinFrameWidth(), maxWidth / maxZoom, maxWidth);
    return math_1.clamp(viewportWidth, minWidth, maxWidth);
  } // Given a desired config-space viewport rectangle, clamp the rectangle so
  // that it fits within the given flamechart. This prevents the viewport from
  // extending past the bounds of the flamechart or zooming in too far.


  getClampedConfigSpaceViewportRect({
    configSpaceViewportRect,
    renderInverted
  }) {
    const configSpaceSize = new math_1.Vec2(this.getTotalWeight(), this.getLayers().length);
    const width = this.getClampedViewportWidth(configSpaceViewportRect.size.x);
    const size = configSpaceViewportRect.size.withX(width);
    const origin = math_1.Vec2.clamp(configSpaceViewportRect.origin, new math_1.Vec2(0, renderInverted ? 0 : -1), math_1.Vec2.max(math_1.Vec2.zero, configSpaceSize.minus(size).plus(new math_1.Vec2(0, 1))));
    return new math_1.Rect(origin, configSpaceViewportRect.size.withX(width));
  }

}

exports.Flamechart = Flamechart;

/***/ }),

/***/ 293:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Rect = exports.AffineTransform = exports.Vec2 = exports.clamp = void 0;

function clamp(x, minVal, maxVal) {
  if (x < minVal) return minVal;
  if (x > maxVal) return maxVal;
  return x;
}

exports.clamp = clamp;

let Vec2 =
/** @class */
(() => {
  class Vec2 {
    constructor(x, y) {
      this.x = x;
      this.y = y;
    }

    withX(x) {
      return new Vec2(x, this.y);
    }

    withY(y) {
      return new Vec2(this.x, y);
    }

    plus(other) {
      return new Vec2(this.x + other.x, this.y + other.y);
    }

    minus(other) {
      return new Vec2(this.x - other.x, this.y - other.y);
    }

    times(scalar) {
      return new Vec2(this.x * scalar, this.y * scalar);
    }

    timesPointwise(other) {
      return new Vec2(this.x * other.x, this.y * other.y);
    }

    dividedByPointwise(other) {
      return new Vec2(this.x / other.x, this.y / other.y);
    }

    dot(other) {
      return this.x * other.x + this.y * other.y;
    }

    equals(other) {
      return this.x === other.x && this.y === other.y;
    }

    approxEquals(other, epsilon = 1e-9) {
      return Math.abs(this.x - other.x) < epsilon && Math.abs(this.y - other.y) < epsilon;
    }

    length2() {
      return this.dot(this);
    }

    length() {
      return Math.sqrt(this.length2());
    }

    abs() {
      return new Vec2(Math.abs(this.x), Math.abs(this.y));
    }

    static min(a, b) {
      return new Vec2(Math.min(a.x, b.x), Math.min(a.y, b.y));
    }

    static max(a, b) {
      return new Vec2(Math.max(a.x, b.x), Math.max(a.y, b.y));
    }

    static clamp(v, min, max) {
      return new Vec2(clamp(v.x, min.x, max.x), clamp(v.y, min.y, max.y));
    }

    flatten() {
      return [this.x, this.y];
    }

  }

  Vec2.zero = new Vec2(0, 0);
  Vec2.unit = new Vec2(1, 1);
  return Vec2;
})();

exports.Vec2 = Vec2;

class AffineTransform {
  constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0) {
    this.m00 = m00;
    this.m01 = m01;
    this.m02 = m02;
    this.m10 = m10;
    this.m11 = m11;
    this.m12 = m12;
  }

  withScale(s) {
    let {
      m00,
      m01,
      m02,
      m10,
      m11,
      m12
    } = this;
    m00 = s.x;
    m11 = s.y;
    return new AffineTransform(m00, m01, m02, m10, m11, m12);
  }

  static withScale(s) {
    return new AffineTransform().withScale(s);
  }

  scaledBy(s) {
    return AffineTransform.withScale(s).times(this);
  }

  getScale() {
    return new Vec2(this.m00, this.m11);
  }

  withTranslation(t) {
    let {
      m00,
      m01,
      m02,
      m10,
      m11,
      m12
    } = this;
    m02 = t.x;
    m12 = t.y;
    return new AffineTransform(m00, m01, m02, m10, m11, m12);
  }

  static withTranslation(t) {
    return new AffineTransform().withTranslation(t);
  }

  getTranslation() {
    return new Vec2(this.m02, this.m12);
  }

  translatedBy(t) {
    return AffineTransform.withTranslation(t).times(this);
  }

  static betweenRects(from, to) {
    return AffineTransform.withTranslation(from.origin.times(-1)).scaledBy(new Vec2(to.size.x / from.size.x, to.size.y / from.size.y)).translatedBy(to.origin);
  }

  times(other) {
    const m00 = this.m00 * other.m00 + this.m01 * other.m10;
    const m01 = this.m00 * other.m01 + this.m01 * other.m11;
    const m02 = this.m00 * other.m02 + this.m01 * other.m12 + this.m02;
    const m10 = this.m10 * other.m00 + this.m11 * other.m10;
    const m11 = this.m10 * other.m01 + this.m11 * other.m11;
    const m12 = this.m10 * other.m02 + this.m11 * other.m12 + this.m12;
    return new AffineTransform(m00, m01, m02, m10, m11, m12);
  }

  equals(other) {
    return this.m00 == other.m00 && this.m01 == other.m01 && this.m02 == other.m02 && this.m10 == other.m10 && this.m11 == other.m11 && this.m12 == other.m12;
  }

  approxEquals(other, epsilon = 1e-9) {
    return Math.abs(this.m00 - other.m00) < epsilon && Math.abs(this.m01 - other.m01) < epsilon && Math.abs(this.m02 - other.m02) < epsilon && Math.abs(this.m10 - other.m10) < epsilon && Math.abs(this.m11 - other.m11) < epsilon && Math.abs(this.m12 - other.m12) < epsilon;
  }

  timesScalar(s) {
    const {
      m00,
      m01,
      m02,
      m10,
      m11,
      m12
    } = this;
    return new AffineTransform(s * m00, s * m01, s * m02, s * m10, s * m11, s * m12);
  }

  det() {
    const {
      m00,
      m01,
      m02,
      m10,
      m11,
      m12
    } = this;
    const m20 = 0;
    const m21 = 0;
    const m22 = 1;
    return m00 * (m11 * m22 - m12 * m21) - m01 * (m10 * m22 - m12 * m20) + m02 * (m10 * m21 - m11 * m20);
  }

  adj() {
    const {
      m00,
      m01,
      m02,
      m10,
      m11,
      m12
    } = this;
    const m20 = 0;
    const m21 = 0;
    const m22 = 1; // Adjugate matrix (a) is the transpose of the
    // cofactor matrix (c).
    //
    // 00 01 02
    // 10 11 12
    // 20 21 22

    const a00 =
    /* c00 = */
    +(m11 * m22 - m12 * m21);
    const a01 =
    /* c10 = */
    -(m01 * m22 - m02 * m21);
    const a02 =
    /* c20 = */
    +(m01 * m12 - m02 * m11);
    const a10 =
    /* c01 = */
    -(m10 * m22 - m12 * m20);
    const a11 =
    /* c11 = */
    +(m00 * m22 - m02 * m20);
    const a12 =
    /* c21 = */
    -(m00 * m12 - m02 * m10);
    return new AffineTransform(a00, a01, a02, a10, a11, a12);
  }

  inverted() {
    const det = this.det();
    if (det === 0) return null;
    const adj = this.adj();
    return adj.timesScalar(1 / det);
  }

  transformVector(v) {
    return new Vec2(v.x * this.m00 + v.y * this.m01, v.x * this.m10 + v.y * this.m11);
  }

  inverseTransformVector(v) {
    const inv = this.inverted();
    if (!inv) return null;
    return inv.transformVector(v);
  }

  transformPosition(v) {
    return new Vec2(v.x * this.m00 + v.y * this.m01 + this.m02, v.x * this.m10 + v.y * this.m11 + this.m12);
  }

  inverseTransformPosition(v) {
    const inv = this.inverted();
    if (!inv) return null;
    return inv.transformPosition(v);
  }

  transformRect(r) {
    const size = this.transformVector(r.size);
    const origin = this.transformPosition(r.origin);

    if (size.x < 0 && size.y < 0) {
      return new Rect(origin.plus(size), size.abs());
    } else if (size.x < 0) {
      return new Rect(origin.withX(origin.x + size.x), size.abs());
    } else if (size.y < 0) {
      return new Rect(origin.withY(origin.y + size.y), size.abs());
    }

    return new Rect(origin, size);
  }

  inverseTransformRect(r) {
    const inv = this.inverted();
    if (!inv) return null;
    return inv.transformRect(r);
  }

  flatten() {
    // Flatten into GLSL format
    // prettier-ignore
    return [this.m00, this.m10, 0, this.m01, this.m11, 0, this.m02, this.m12, 1];
  }

}

exports.AffineTransform = AffineTransform;

let Rect =
/** @class */
(() => {
  class Rect {
    constructor(origin, size) {
      this.origin = origin;
      this.size = size;
    }

    isEmpty() {
      return this.width() == 0 || this.height() == 0;
    }

    width() {
      return this.size.x;
    }

    height() {
      return this.size.y;
    }

    left() {
      return this.origin.x;
    }

    right() {
      return this.left() + this.width();
    }

    top() {
      return this.origin.y;
    }

    bottom() {
      return this.top() + this.height();
    }

    topLeft() {
      return this.origin;
    }

    topRight() {
      return this.origin.plus(new Vec2(this.width(), 0));
    }

    bottomRight() {
      return this.origin.plus(this.size);
    }

    bottomLeft() {
      return this.origin.plus(new Vec2(0, this.height()));
    }

    withOrigin(origin) {
      return new Rect(origin, this.size);
    }

    withSize(size) {
      return new Rect(this.origin, size);
    }

    closestPointTo(p) {
      return new Vec2(clamp(p.x, this.left(), this.right()), clamp(p.y, this.top(), this.bottom()));
    }

    distanceFrom(p) {
      return p.minus(this.closestPointTo(p)).length();
    }

    contains(p) {
      return this.distanceFrom(p) === 0;
    }

    hasIntersectionWith(other) {
      const top = Math.max(this.top(), other.top());
      const bottom = Math.max(top, Math.min(this.bottom(), other.bottom()));
      if (bottom - top === 0) return false;
      const left = Math.max(this.left(), other.left());
      const right = Math.max(left, Math.min(this.right(), other.right()));
      if (right - left === 0) return false;
      return true;
    }

    intersectWith(other) {
      const topLeft = Vec2.max(this.topLeft(), other.topLeft());
      const bottomRight = Vec2.max(topLeft, Vec2.min(this.bottomRight(), other.bottomRight()));
      return new Rect(topLeft, bottomRight.minus(topLeft));
    }

    equals(other) {
      return this.origin.equals(other.origin) && this.size.equals(other.size);
    }

    approxEquals(other) {
      return this.origin.approxEquals(other.origin) && this.size.approxEquals(other.size);
    }

    area() {
      return this.size.x * this.size.y;
    }

  }

  Rect.empty = new Rect(Vec2.zero, Vec2.zero);
  Rect.unit = new Rect(Vec2.zero, Vec2.unit);
  Rect.NDC = new Rect(new Vec2(-1, -1), new Vec2(2, 2));
  return Rect;
})();

exports.Rect = Rect;

/***/ }),

/***/ 211:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function () {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);

  __setModuleDefault(result, mod);

  return result;
};

var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CallTreeProfileBuilder = exports.StackListProfileBuilder = exports.Profile = exports.CallTreeNode = exports.Frame = exports.HasWeights = void 0;

const utils_1 = __webpack_require__(844);

const value_formatters_1 = __webpack_require__(218);

const demangleCppModule = Promise.resolve().then(() => __importStar(__webpack_require__(765))); // Force eager loading of the module

demangleCppModule.then(() => {});

class HasWeights {
  constructor() {
    this.selfWeight = 0;
    this.totalWeight = 0;
  }

  getSelfWeight() {
    return this.selfWeight;
  }

  getTotalWeight() {
    return this.totalWeight;
  }

  addToTotalWeight(delta) {
    this.totalWeight += delta;
  }

  addToSelfWeight(delta) {
    this.selfWeight += delta;
  }

  overwriteWeightWith(other) {
    this.selfWeight = other.selfWeight;
    this.totalWeight = other.totalWeight;
  }

}

exports.HasWeights = HasWeights;

let Frame =
/** @class */
(() => {
  class Frame extends HasWeights {
    constructor(info) {
      super();
      this.key = info.key;
      this.name = info.name;
      this.file = info.file;
      this.line = info.line;
      this.col = info.col;
    }

    static getOrInsert(set, info) {
      return set.getOrInsert(new Frame(info));
    }

  }

  Frame.root = new Frame({
    key: '(speedscope root)',
    name: '(speedscope root)'
  });
  return Frame;
})();

exports.Frame = Frame;

class CallTreeNode extends HasWeights {
  constructor(frame, parent) {
    super();
    this.frame = frame;
    this.parent = parent;
    this.children = []; // If a node is "frozen", it means it should no longer be mutated.

    this.frozen = false;
  }

  isRoot() {
    return this.frame === Frame.root;
  }

  isFrozen() {
    return this.frozen;
  }

  freeze() {
    this.frozen = true;
  }

}

exports.CallTreeNode = CallTreeNode;

class Profile {
  constructor(totalWeight = 0) {
    this.name = '';
    this.frames = new utils_1.KeyedSet(); // Profiles store two call-trees.
    //
    // The "append order" call tree is the one in which nodes are ordered in
    // whatever order they were appended to their parent.
    //
    // The "grouped" call tree is one in which each node has at most one child per
    // frame. Nodes are ordered in decreasing order of weight

    this.appendOrderCalltreeRoot = new CallTreeNode(Frame.root, null);
    this.groupedCalltreeRoot = new CallTreeNode(Frame.root, null); // List of references to CallTreeNodes at the top of the
    // stack at the time of the sample.

    this.samples = [];
    this.weights = [];
    this.valueFormatter = new value_formatters_1.RawValueFormatter();
    this.totalNonIdleWeight = null;
    this.totalWeight = totalWeight;
  }

  getAppendOrderCalltreeRoot() {
    return this.appendOrderCalltreeRoot;
  }

  getGroupedCalltreeRoot() {
    return this.groupedCalltreeRoot;
  }

  formatValue(v) {
    return this.valueFormatter.format(v);
  }

  setValueFormatter(f) {
    this.valueFormatter = f;
  }

  getWeightUnit() {
    return this.valueFormatter.unit;
  }

  getName() {
    return this.name;
  }

  setName(name) {
    this.name = name;
  }

  getTotalWeight() {
    return this.totalWeight;
  }

  getTotalNonIdleWeight() {
    if (this.totalNonIdleWeight === null) {
      this.totalNonIdleWeight = this.groupedCalltreeRoot.children.reduce((n, c) => n + c.getTotalWeight(), 0);
    }

    return this.totalNonIdleWeight;
  } // This is private because it should only be called in the ProfileBuilder
  // classes. Once a Profile instance has been constructed, it should be treated
  // as immutable.


  sortGroupedCallTree() {
    function visit(node) {
      node.children.sort((a, b) => -(a.getTotalWeight() - b.getTotalWeight()));
      node.children.forEach(visit);
    }

    visit(this.groupedCalltreeRoot);
  }

  forEachCallGrouped(openFrame, closeFrame) {
    function visit(node, start) {
      if (node.frame !== Frame.root) {
        openFrame(node, start);
      }

      let childTime = 0;
      node.children.forEach(function (child) {
        visit(child, start + childTime);
        childTime += child.getTotalWeight();
      });

      if (node.frame !== Frame.root) {
        closeFrame(node, start + node.getTotalWeight());
      }
    }

    visit(this.groupedCalltreeRoot, 0);
  }

  forEachCall(openFrame, closeFrame) {
    let prevStack = [];
    let value = 0;
    let sampleIndex = 0;

    for (let stackTop of this.samples) {
      // Find lowest common ancestor of the current stack and the previous one
      let lca = null; // This is O(n^2), but n should be relatively small here (stack height),
      // so hopefully this isn't much of a problem

      for (lca = stackTop; lca && lca.frame != Frame.root && prevStack.indexOf(lca) === -1; lca = lca.parent) {} // Close frames that are no longer open


      while (prevStack.length > 0 && utils_1.lastOf(prevStack) != lca) {
        const node = prevStack.pop();
        closeFrame(node, value);
      } // Open frames that are now becoming open


      const toOpen = [];

      for (let node = stackTop; node && node.frame != Frame.root && node != lca; node = node.parent) {
        toOpen.push(node);
      }

      toOpen.reverse();

      for (let node of toOpen) {
        openFrame(node, value);
      }

      prevStack = prevStack.concat(toOpen);
      value += this.weights[sampleIndex++];
    } // Close frames that are open at the end of the trace


    for (let i = prevStack.length - 1; i >= 0; i--) {
      closeFrame(prevStack[i], value);
    }
  }

  forEachFrame(fn) {
    this.frames.forEach(fn);
  }

  getProfileWithRecursionFlattened() {
    const builder = new CallTreeProfileBuilder();
    const stack = [];
    const framesInStack = new Set();

    function openFrame(node, value) {
      if (framesInStack.has(node.frame)) {
        stack.push(null);
      } else {
        framesInStack.add(node.frame);
        stack.push(node);
        builder.enterFrame(node.frame, value);
      }
    }

    function closeFrame(node, value) {
      const stackTop = stack.pop();

      if (stackTop) {
        framesInStack.delete(stackTop.frame);
        builder.leaveFrame(stackTop.frame, value);
      }
    }

    this.forEachCall(openFrame, closeFrame);
    const flattenedProfile = builder.build();
    flattenedProfile.name = this.name;
    flattenedProfile.valueFormatter = this.valueFormatter; // When constructing a profile with recursion flattened,
    // counter-intuitive things can happen to "self time" measurements
    // for functions.
    // For example, given the following list of stacks w/ weights:
    //
    // a 1
    // a;b;a 1
    // a;b;a;b;a 1
    // a;b;a 1
    //
    // The resulting profile with recursion flattened out will look like this:
    //
    // a 1
    // a;b 3
    //
    // Which is useful to view, but it's counter-intuitive to move self-time
    // for frames around, since analyzing the self-time of functions is an important
    // thing to be able to do accurately, and we don't want this to change when recursion
    // is flattened. To work around that, we'll just copy the weights directly from the
    // un-flattened profile.

    this.forEachFrame(f => {
      flattenedProfile.frames.getOrInsert(f).overwriteWeightWith(f);
    });
    return flattenedProfile;
  }

  getInvertedProfileForCallersOf(focalFrameInfo) {
    const focalFrame = Frame.getOrInsert(this.frames, focalFrameInfo);
    const builder = new StackListProfileBuilder(); // TODO(jlfwong): Could construct this at profile
    // construction time rather than on demand.

    const nodes = [];

    function visit(node) {
      if (node.frame === focalFrame) {
        nodes.push(node);
      } else {
        for (let child of node.children) {
          visit(child);
        }
      }
    }

    visit(this.appendOrderCalltreeRoot);

    for (let node of nodes) {
      const stack = [];

      for (let n = node; n != null && n.frame !== Frame.root; n = n.parent) {
        stack.push(n.frame);
      }

      builder.appendSampleWithWeight(stack, node.getTotalWeight());
    }

    const ret = builder.build();
    ret.name = this.name;
    ret.valueFormatter = this.valueFormatter;
    return ret;
  }

  getProfileForCalleesOf(focalFrameInfo) {
    const focalFrame = Frame.getOrInsert(this.frames, focalFrameInfo);
    const builder = new StackListProfileBuilder();

    function recordSubtree(focalFrameNode) {
      const stack = [];

      function visit(node) {
        stack.push(node.frame);
        builder.appendSampleWithWeight(stack, node.getSelfWeight());

        for (let child of node.children) {
          visit(child);
        }

        stack.pop();
      }

      visit(focalFrameNode);
    }

    function findCalls(node) {
      if (node.frame === focalFrame) {
        recordSubtree(node);
      } else {
        for (let child of node.children) {
          findCalls(child);
        }
      }
    }

    findCalls(this.appendOrderCalltreeRoot);
    const ret = builder.build();
    ret.name = this.name;
    ret.valueFormatter = this.valueFormatter;
    return ret;
  } // Demangle symbols for readability


  demangle() {
    return __awaiter(this, void 0, void 0, function* () {
      let demangleCpp = null;

      for (let frame of this.frames) {
        // This function converts a mangled C++ name such as "__ZNK7Support6ColorFeqERKS0_"
        // into a human-readable symbol (in this case "Support::ColorF::==(Support::ColorF&)")
        if (frame.name.startsWith('__Z')) {
          if (!demangleCpp) {
            demangleCpp = (yield demangleCppModule).demangleCpp;
          }

          frame.name = demangleCpp(frame.name);
        }
      }
    });
  }

  remapNames(callback) {
    for (let frame of this.frames) {
      frame.name = callback(frame.name);
    }
  }

}

exports.Profile = Profile;

class StackListProfileBuilder extends Profile {
  constructor() {
    super(...arguments);
    this.pendingSample = null;
  }

  _appendSample(stack, weight, useAppendOrder) {
    if (isNaN(weight)) throw new Error('invalid weight');
    let node = useAppendOrder ? this.appendOrderCalltreeRoot : this.groupedCalltreeRoot;
    let framesInStack = new Set();

    for (let frameInfo of stack) {
      const frame = Frame.getOrInsert(this.frames, frameInfo);
      const last = useAppendOrder ? utils_1.lastOf(node.children) : node.children.find(c => c.frame === frame);

      if (last && !last.isFrozen() && last.frame == frame) {
        node = last;
      } else {
        const parent = node;
        node = new CallTreeNode(frame, node);
        parent.children.push(node);
      }

      node.addToTotalWeight(weight); // It's possible for the same frame to occur multiple
      // times in the same call stack due to either direct
      // or indirect recursion. We want to avoid counting that
      // frame multiple times for a single sample, we so just
      // track all of the unique frames that participated in
      // this call stack, then add to their weight at the end.

      framesInStack.add(node.frame);
    }

    node.addToSelfWeight(weight);

    if (useAppendOrder) {
      for (let child of node.children) {
        child.freeze();
      }
    }

    if (useAppendOrder) {
      node.frame.addToSelfWeight(weight);

      for (let frame of framesInStack) {
        frame.addToTotalWeight(weight);
      }

      if (node === utils_1.lastOf(this.samples)) {
        this.weights[this.weights.length - 1] += weight;
      } else {
        this.samples.push(node);
        this.weights.push(weight);
      }
    }
  }

  appendSampleWithWeight(stack, weight) {
    if (weight === 0) {
      // Samples with zero weight have no effect, so let's ignore them
      return;
    }

    if (weight < 0) {
      throw new Error('Samples must have positive weights');
    }

    this._appendSample(stack, weight, true);

    this._appendSample(stack, weight, false);
  }

  appendSampleWithTimestamp(stack, timestamp) {
    if (this.pendingSample) {
      if (timestamp < this.pendingSample.centralTimestamp) {
        throw new Error('Timestamps received out of order');
      }

      const endTimestamp = (timestamp + this.pendingSample.centralTimestamp) / 2;
      this.appendSampleWithWeight(this.pendingSample.stack, endTimestamp - this.pendingSample.startTimestamp);
      this.pendingSample = {
        stack,
        startTimestamp: endTimestamp,
        centralTimestamp: timestamp
      };
    } else {
      this.pendingSample = {
        stack,
        startTimestamp: timestamp,
        centralTimestamp: timestamp
      };
    }
  }

  build() {
    if (this.pendingSample) {
      if (this.samples.length > 0) {
        this.appendSampleWithWeight(this.pendingSample.stack, this.pendingSample.centralTimestamp - this.pendingSample.startTimestamp);
      } else {
        // There is only a single sample. In this case, units will be meaningless,
        // so we'll append with a weight of 1 and also clear any value formatter
        this.appendSampleWithWeight(this.pendingSample.stack, 1);
        this.setValueFormatter(new value_formatters_1.RawValueFormatter());
      }
    }

    this.totalWeight = Math.max(this.totalWeight, this.weights.reduce((a, b) => a + b, 0));
    this.sortGroupedCallTree();
    return this;
  }

}

exports.StackListProfileBuilder = StackListProfileBuilder; // As an alternative API for importing profiles more efficiently, provide a
// way to open & close frames directly without needing to construct tons of
// arrays as intermediaries.

class CallTreeProfileBuilder extends Profile {
  constructor() {
    super(...arguments);
    this.appendOrderStack = [this.appendOrderCalltreeRoot];
    this.groupedOrderStack = [this.groupedCalltreeRoot];
    this.framesInStack = new Map();
    this.stack = [];
    this.lastValue = 0;
  }

  addWeightsToFrames(value) {
    const delta = value - this.lastValue;

    for (let frame of this.framesInStack.keys()) {
      frame.addToTotalWeight(delta);
    }

    const stackTop = utils_1.lastOf(this.stack);

    if (stackTop) {
      stackTop.addToSelfWeight(delta);
    }
  }

  addWeightsToNodes(value, stack) {
    const delta = value - this.lastValue;

    for (let node of stack) {
      node.addToTotalWeight(delta);
    }

    const stackTop = utils_1.lastOf(stack);

    if (stackTop) {
      stackTop.addToSelfWeight(delta);
    }
  }

  _enterFrame(frame, value, useAppendOrder) {
    let stack = useAppendOrder ? this.appendOrderStack : this.groupedOrderStack;
    this.addWeightsToNodes(value, stack);
    let prevTop = utils_1.lastOf(stack);

    if (prevTop) {
      if (useAppendOrder) {
        const delta = value - this.lastValue;

        if (delta > 0) {
          this.samples.push(prevTop);
          this.weights.push(value - this.lastValue);
        } else if (delta < 0) {
          throw new Error(\`Samples must be provided in increasing order of cumulative value. Last sample was \${this.lastValue}, this sample was \${value}\`);
        }
      }

      const last = useAppendOrder ? utils_1.lastOf(prevTop.children) : prevTop.children.find(c => c.frame === frame);
      let node;

      if (last && !last.isFrozen() && last.frame == frame) {
        node = last;
      } else {
        node = new CallTreeNode(frame, prevTop);
        prevTop.children.push(node);
      }

      stack.push(node);
    }
  }

  enterFrame(frameInfo, value) {
    const frame = Frame.getOrInsert(this.frames, frameInfo);
    this.addWeightsToFrames(value);

    this._enterFrame(frame, value, true);

    this._enterFrame(frame, value, false);

    this.stack.push(frame);
    const frameCount = this.framesInStack.get(frame) || 0;
    this.framesInStack.set(frame, frameCount + 1);
    this.lastValue = value;
  }

  _leaveFrame(frame, value, useAppendOrder) {
    let stack = useAppendOrder ? this.appendOrderStack : this.groupedOrderStack;
    this.addWeightsToNodes(value, stack);

    if (useAppendOrder) {
      const leavingStackTop = this.appendOrderStack.pop();

      if (leavingStackTop == null) {
        throw new Error(\`Trying to leave \${frame.key} when stack is empty\`);
      }

      if (this.lastValue == null) {
        throw new Error(\`Trying to leave a \${frame.key} before any have been entered\`);
      }

      leavingStackTop.freeze();

      if (leavingStackTop.frame.key !== frame.key) {
        throw new Error(\`Tried to leave frame "\${frame.name}" while frame "\${leavingStackTop.frame.name}" was at the top at \${value}\`);
      }

      const delta = value - this.lastValue;

      if (delta > 0) {
        this.samples.push(leavingStackTop);
        this.weights.push(value - this.lastValue);
      } else if (delta < 0) {
        throw new Error(\`Samples must be provided in increasing order of cumulative value. Last sample was \${this.lastValue}, this sample was \${value}\`);
      }
    } else {
      this.groupedOrderStack.pop();
    }
  }

  leaveFrame(frameInfo, value) {
    const frame = Frame.getOrInsert(this.frames, frameInfo);
    this.addWeightsToFrames(value);

    this._leaveFrame(frame, value, true);

    this._leaveFrame(frame, value, false);

    this.stack.pop();
    const frameCount = this.framesInStack.get(frame);
    if (frameCount == null) return;

    if (frameCount === 1) {
      this.framesInStack.delete(frame);
    } else {
      this.framesInStack.set(frame, frameCount - 1);
    }

    this.lastValue = value;
    this.totalWeight = Math.max(this.totalWeight, this.lastValue);
  }

  build() {
    // Each stack is expected to contain a single node which we initialize to be
    // the root node.
    if (this.appendOrderStack.length > 1 || this.groupedOrderStack.length > 1) {
      throw new Error('Tried to complete profile construction with a non-empty stack');
    }

    this.sortGroupedCallTree();
    return this;
  }

}

exports.CallTreeProfileBuilder = CallTreeProfileBuilder;

/***/ }),

/***/ 844:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.decodeBase64 = exports.lazyStatic = exports.memoizeByReference = exports.memoizeByShallowEquality = exports.objectsHaveShallowEquality = exports.noop = exports.binarySearch = exports.triangle = exports.fract = exports.formatPercent = exports.zeroPad = exports.itReduce = exports.itForEach = exports.itMap = exports.KeyedSet = exports.getOrThrow = exports.getOrElse = exports.getOrInsert = exports.sortBy = exports.lastOf = void 0;

function lastOf(ts) {
  return ts[ts.length - 1] || null;
}

exports.lastOf = lastOf;

function sortBy(ts, key) {
  function comparator(a, b) {
    const keyA = key(a);
    const keyB = key(b);
    return keyA < keyB ? -1 : keyA > keyB ? 1 : 0;
  }

  ts.sort(comparator);
}

exports.sortBy = sortBy;

function getOrInsert(map, k, fallback) {
  if (!map.has(k)) map.set(k, fallback(k));
  return map.get(k);
}

exports.getOrInsert = getOrInsert;

function getOrElse(map, k, fallback) {
  if (!map.has(k)) return fallback(k);
  return map.get(k);
}

exports.getOrElse = getOrElse;

function getOrThrow(map, k) {
  if (!map.has(k)) {
    throw new Error(\`Expected key \${k}\`);
  }

  return map.get(k);
}

exports.getOrThrow = getOrThrow;

class KeyedSet {
  constructor() {
    this.map = new Map();
  }

  getOrInsert(t) {
    const key = t.key;
    const existing = this.map.get(key);
    if (existing) return existing;
    this.map.set(key, t);
    return t;
  }

  forEach(fn) {
    this.map.forEach(fn);
  }

  [Symbol.iterator]() {
    return this.map.values();
  }

}

exports.KeyedSet = KeyedSet;

function* itMap(it, f) {
  for (let t of it) {
    yield f(t);
  }
}

exports.itMap = itMap;

function itForEach(it, f) {
  for (let t of it) {
    f(t);
  }
}

exports.itForEach = itForEach;

function itReduce(it, f, init) {
  let accum = init;

  for (let t of it) {
    accum = f(accum, t);
  }

  return accum;
}

exports.itReduce = itReduce;

function zeroPad(s, width) {
  return new Array(Math.max(width - s.length, 0) + 1).join('0') + s;
}

exports.zeroPad = zeroPad;

function formatPercent(percent) {
  let formattedPercent = \`\${percent.toFixed(0)}%\`;
  if (percent === 100) formattedPercent = '100%';else if (percent > 99) formattedPercent = '>99%';else if (percent < 0.01) formattedPercent = '<0.01%';else if (percent < 1) formattedPercent = \`\${percent.toFixed(2)}%\`;else if (percent < 10) formattedPercent = \`\${percent.toFixed(1)}%\`;
  return formattedPercent;
}

exports.formatPercent = formatPercent;

function fract(x) {
  return x - Math.floor(x);
}

exports.fract = fract;

function triangle(x) {
  return 2.0 * Math.abs(fract(x) - 0.5) - 1.0;
}

exports.triangle = triangle;

function binarySearch(lo, hi, f, target, targetRangeSize = 1) {
  console.assert(!isNaN(targetRangeSize) && !isNaN(target));

  while (true) {
    if (hi - lo <= targetRangeSize) return [lo, hi];
    const mid = (hi + lo) / 2;
    const val = f(mid);
    if (val < target) lo = mid;else hi = mid;
  }
}

exports.binarySearch = binarySearch;

function noop(...args) {}

exports.noop = noop;

function objectsHaveShallowEquality(a, b) {
  for (let key in a) {
    if (a[key] !== b[key]) return false;
  }

  for (let key in b) {
    if (a[key] !== b[key]) return false;
  }

  return true;
}

exports.objectsHaveShallowEquality = objectsHaveShallowEquality;

function memoizeByShallowEquality(cb) {
  let last = null;
  return args => {
    let result;

    if (last == null) {
      result = cb(args);
      last = {
        args,
        result
      };
      return result;
    } else if (objectsHaveShallowEquality(last.args, args)) {
      return last.result;
    } else {
      last.args = args;
      last.result = cb(args);
      return last.result;
    }
  };
}

exports.memoizeByShallowEquality = memoizeByShallowEquality;

function memoizeByReference(cb) {
  let last = null;
  return args => {
    let result;

    if (last == null) {
      result = cb(args);
      last = {
        args,
        result
      };
      return result;
    } else if (last.args === args) {
      return last.result;
    } else {
      last.args = args;
      last.result = cb(args);
      return last.result;
    }
  };
}

exports.memoizeByReference = memoizeByReference;

function lazyStatic(cb) {
  let last = null;
  return () => {
    if (last == null) {
      last = {
        result: cb()
      };
    }

    return last.result;
  };
}

exports.lazyStatic = lazyStatic;
const base64lookupTable = lazyStatic(() => {
  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  const ret = new Map();

  for (let i = 0; i < alphabet.length; i++) {
    ret.set(alphabet.charAt(i), i);
  }

  ret.set('=', -1);
  return ret;
}); // NOTE: There are probably simpler solutions to this problem, but I have this written already, so
// until we run into problems with this, let's just use this.
//
// See: https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem#The_Unicode_Problem

function decodeBase64(encoded) {
  // Reference: https://www.rfc-editor.org/rfc/rfc4648.txt
  const lookupTable = base64lookupTable(); // 3 byte groups are represented as sequneces of 4 characters.
  //
  // "The encoding process represents 24-bit groups of input bits as output
  //  strings of 4 encoded characters."
  //
  // "Special processing is performed if fewer than 24 bits are available
  //  at the end of the data being encoded.  A full encoding quantum is
  //  always completed at the end of a quantity.  When fewer than 24 input
  //  bits are available in an input group bits with value zero are added
  //  (on the right) to form an integral number of 6-bit groups."

  if (encoded.length % 4 !== 0) {
    throw new Error(\`Invalid length for base64 encoded string. Expected length % 4 = 0, got length = \${encoded.length}\`);
  }

  const quartetCount = encoded.length / 4;
  let byteCount; // Special processing is performed if fewer than 24 bits are available
  // at the end of the data being encoded.  A full encoding quantum is
  // always completed at the end of a quantity.  When fewer than 24 input
  // bits are available in an input group, bits with value zero are added
  // (on the right) to form an integral number of 6-bit groups.  Padding
  // at the end of the data is performed using the '=' character.  Since
  // all base 64 input is an integral number of octets, only the following
  // cases can arise:
  //
  // (1) The final quantum of encoding input is an integral multiple of 24
  //     bits; here, the final unit of encoded output will be an integral
  //     multiple of 4 characters with no "=" padding.
  //
  // (2) The final quantum of encoding input is exactly 8 bits; here, the
  //     final unit of encoded output will be two characters followed by
  //     two "=" padding characters.
  //
  // (3) The final quantum of encoding input is exactly 16 bits; here, the
  //     final unit of encoded output will be three characters followed by
  //     one "=" padding character.

  if (encoded.length >= 4) {
    if (encoded.charAt(encoded.length - 1) === '=') {
      if (encoded.charAt(encoded.length - 2) === '=') {
        // Case (2)
        byteCount = quartetCount * 3 - 2;
      } else {
        // Case (3)
        byteCount = quartetCount * 3 - 1;
      }
    } else {
      // Case (1)
      byteCount = quartetCount * 3;
    }
  } else {
    // Case (1)
    byteCount = quartetCount * 3;
  }

  const bytes = new Uint8Array(byteCount);
  let offset = 0;

  for (let i = 0; i < quartetCount; i++) {
    const enc1 = encoded.charAt(i * 4 + 0);
    const enc2 = encoded.charAt(i * 4 + 1);
    const enc3 = encoded.charAt(i * 4 + 2);
    const enc4 = encoded.charAt(i * 4 + 3);
    const sextet1 = lookupTable.get(enc1);
    const sextet2 = lookupTable.get(enc2);
    const sextet3 = lookupTable.get(enc3);
    const sextet4 = lookupTable.get(enc4);

    if (sextet1 == null || sextet2 == null || sextet3 == null || sextet4 == null) {
      throw new Error(\`Invalid quartet at indices \${i * 4} .. \${i * 4 + 3}: \${encoded.substring(i * 4, i * 4 + 3)}\`);
    }

    bytes[offset++] = sextet1 << 2 | sextet2 >> 4;

    if (enc3 !== '=') {
      bytes[offset++] = (sextet2 & 15) << 4 | sextet3 >> 2;
    }

    if (enc4 !== '=') {
      bytes[offset++] = (sextet3 & 7) << 6 | sextet4;
    }
  }

  if (offset !== byteCount) {
    throw new Error(\`Expected to decode \${byteCount} bytes, but only decoded \${offset})\`);
  }

  return bytes;
}

exports.decodeBase64 = decodeBase64;

/***/ }),

/***/ 218:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ByteFormatter = exports.TimeFormatter = exports.RawValueFormatter = void 0;

const utils_1 = __webpack_require__(844);

class RawValueFormatter {
  constructor() {
    this.unit = 'none';
  }

  format(v) {
    return v.toLocaleString();
  }

}

exports.RawValueFormatter = RawValueFormatter;

class TimeFormatter {
  constructor(unit) {
    this.unit = unit;
    if (unit === 'nanoseconds') this.multiplier = 1e-9;else if (unit === 'microseconds') this.multiplier = 1e-6;else if (unit === 'milliseconds') this.multiplier = 1e-3;else this.multiplier = 1;
  }

  formatUnsigned(v) {
    const s = v * this.multiplier;

    if (s / 60 >= 1) {
      const minutes = Math.floor(s / 60);
      const seconds = Math.floor(s - minutes * 60).toString();
      return \`\${minutes}:\${utils_1.zeroPad(seconds, 2)}\`;
    }

    if (s / 1 >= 1) return \`\${s.toFixed(2)}s\`;
    if (s / 1e-3 >= 1) return \`\${(s / 1e-3).toFixed(2)}ms\`;
    if (s / 1e-6 >= 1) return \`\${(s / 1e-6).toFixed(2)}\xB5s\`;else return \`\${(s / 1e-9).toFixed(2)}ns\`;
  }

  format(v) {
    return \`\${v < 0 ? '-' : ''}\${this.formatUnsigned(Math.abs(v))}\`;
  }

}

exports.TimeFormatter = TimeFormatter;

class ByteFormatter {
  constructor() {
    this.unit = 'bytes';
  }

  format(v) {
    if (v < 1024) return \`\${v.toFixed(0)} B\`;
    v /= 1024;
    if (v < 1024) return \`\${v.toFixed(2)} KB\`;
    v /= 1024;
    if (v < 1024) return \`\${v.toFixed(2)} MB\`;
    v /= 1024;
    return \`\${v.toFixed(2)} GB\`;
  }

}

exports.ByteFormatter = ByteFormatter;

/***/ }),

/***/ 41:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function () {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __exportStar = this && this.__exportStar || function (m, exports) {
  for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

__exportStar(__webpack_require__(496), exports);

__exportStar(__webpack_require__(121), exports);

/***/ }),

/***/ 715:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  'use strict'; // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

  /* istanbul ignore next */

  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(356)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this, function ErrorStackParser(StackFrame) {
  'use strict';

  var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;
  var CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;
  var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;
  return {
    /**
     * Given an Error object, extract the most information from it.
     *
     * @param {Error} error object
     * @return {Array} of StackFrames
     */
    parse: function ErrorStackParser$$parse(error) {
      if (typeof error.stacktrace !== 'undefined' || typeof error['opera#sourceloc'] !== 'undefined') {
        return this.parseOpera(error);
      } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {
        return this.parseV8OrIE(error);
      } else if (error.stack) {
        return this.parseFFOrSafari(error);
      } else {
        throw new Error('Cannot parse given Error object');
      }
    },
    // Separate line and column numbers from a string of the form: (URI:Line:Column)
    extractLocation: function ErrorStackParser$$extractLocation(urlLike) {
      // Fail-fast but return locations like "(native)"
      if (urlLike.indexOf(':') === -1) {
        return [urlLike];
      }

      var regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;
      var parts = regExp.exec(urlLike.replace(/[()]/g, ''));
      return [parts[1], parts[2] || undefined, parts[3] || undefined];
    },
    parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {
      var filtered = error.stack.split('\\n').filter(function (line) {
        return !!line.match(CHROME_IE_STACK_REGEXP);
      }, this);
      return filtered.map(function (line) {
        if (line.indexOf('(eval ') > -1) {
          // Throw away eval information until we implement stacktrace.js/stackframe#8
          line = line.replace(/eval code/g, 'eval').replace(/(\\(eval at [^()]*)|(\\),.*$)/g, '');
        }

        var sanitizedLine = line.replace(/^\\s+/, '').replace(/\\(eval code/g, '('); // capture and preseve the parenthesized location "(/foo/my bar.js:12:87)" in
        // case it has spaces in it, as the string is split on \\s+ later on

        var location = sanitizedLine.match(/ (\\((.+):(\\d+):(\\d+)\\)$)/); // remove the parenthesized location from the line, if it was matched

        sanitizedLine = location ? sanitizedLine.replace(location[0], '') : sanitizedLine;
        var tokens = sanitizedLine.split(/\\s+/).slice(1); // if a location was matched, pass it to extractLocation() otherwise pop the last token

        var locationParts = this.extractLocation(location ? location[1] : tokens.pop());
        var functionName = tokens.join(' ') || undefined;
        var fileName = ['eval', '<anonymous>'].indexOf(locationParts[0]) > -1 ? undefined : locationParts[0];
        return new StackFrame({
          functionName: functionName,
          fileName: fileName,
          lineNumber: locationParts[1],
          columnNumber: locationParts[2],
          source: line
        });
      }, this);
    },
    parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {
      var filtered = error.stack.split('\\n').filter(function (line) {
        return !line.match(SAFARI_NATIVE_CODE_REGEXP);
      }, this);
      return filtered.map(function (line) {
        // Throw away eval information until we implement stacktrace.js/stackframe#8
        if (line.indexOf(' > eval') > -1) {
          line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, ':$1');
        }

        if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {
          // Safari eval frames only have function names and nothing else
          return new StackFrame({
            functionName: line
          });
        } else {
          var functionNameRegex = /((.*".+"[^@]*)?[^@]*)(?:@)/;
          var matches = line.match(functionNameRegex);
          var functionName = matches && matches[1] ? matches[1] : undefined;
          var locationParts = this.extractLocation(line.replace(functionNameRegex, ''));
          return new StackFrame({
            functionName: functionName,
            fileName: locationParts[0],
            lineNumber: locationParts[1],
            columnNumber: locationParts[2],
            source: line
          });
        }
      }, this);
    },
    parseOpera: function ErrorStackParser$$parseOpera(e) {
      if (!e.stacktrace || e.message.indexOf('\\n') > -1 && e.message.split('\\n').length > e.stacktrace.split('\\n').length) {
        return this.parseOpera9(e);
      } else if (!e.stack) {
        return this.parseOpera10(e);
      } else {
        return this.parseOpera11(e);
      }
    },
    parseOpera9: function ErrorStackParser$$parseOpera9(e) {
      var lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;
      var lines = e.message.split('\\n');
      var result = [];

      for (var i = 2, len = lines.length; i < len; i += 2) {
        var match = lineRE.exec(lines[i]);

        if (match) {
          result.push(new StackFrame({
            fileName: match[2],
            lineNumber: match[1],
            source: lines[i]
          }));
        }
      }

      return result;
    },
    parseOpera10: function ErrorStackParser$$parseOpera10(e) {
      var lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;
      var lines = e.stacktrace.split('\\n');
      var result = [];

      for (var i = 0, len = lines.length; i < len; i += 2) {
        var match = lineRE.exec(lines[i]);

        if (match) {
          result.push(new StackFrame({
            functionName: match[3] || undefined,
            fileName: match[2],
            lineNumber: match[1],
            source: lines[i]
          }));
        }
      }

      return result;
    },
    // Opera 10.65+ Error.stack very similar to FF/Safari
    parseOpera11: function ErrorStackParser$$parseOpera11(error) {
      var filtered = error.stack.split('\\n').filter(function (line) {
        return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);
      }, this);
      return filtered.map(function (line) {
        var tokens = line.split('@');
        var locationParts = this.extractLocation(tokens.pop());
        var functionCall = tokens.shift() || '';
        var functionName = functionCall.replace(/<anonymous function(: (\\w+))?>/, '$2').replace(/\\([^)]*\\)/g, '') || undefined;
        var argsRaw;

        if (functionCall.match(/\\(([^)]*)\\)/)) {
          argsRaw = functionCall.replace(/^[^(]+\\(([^)]*)\\)$/, '$1');
        }

        var args = argsRaw === undefined || argsRaw === '[arguments not available]' ? undefined : argsRaw.split(',');
        return new StackFrame({
          functionName: functionName,
          args: args,
          fileName: locationParts[0],
          lineNumber: locationParts[1],
          columnNumber: locationParts[2],
          source: line
        });
      }, this);
    }
  };
});

/***/ }),

/***/ 69:
/***/ ((module) => {

"use strict";


function nullthrows(x, message) {
  if (x != null) {
    return x;
  }

  var error = new Error(message !== undefined ? message : 'Got unexpected ' + x);
  error.framesToPop = 1; // Skip nullthrows's own stack frame.

  throw error;
}

module.exports = nullthrows;
module.exports["default"] = nullthrows;
Object.defineProperty(module.exports, "__esModule", ({
  value: true
}));

/***/ }),

/***/ 356:
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  'use strict'; // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

  /* istanbul ignore next */

  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this, function () {
  'use strict';

  function _isNumber(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  }

  function _capitalize(str) {
    return str.charAt(0).toUpperCase() + str.substring(1);
  }

  function _getter(p) {
    return function () {
      return this[p];
    };
  }

  var booleanProps = ['isConstructor', 'isEval', 'isNative', 'isToplevel'];
  var numericProps = ['columnNumber', 'lineNumber'];
  var stringProps = ['fileName', 'functionName', 'source'];
  var arrayProps = ['args'];
  var props = booleanProps.concat(numericProps, stringProps, arrayProps);

  function StackFrame(obj) {
    if (!obj) return;

    for (var i = 0; i < props.length; i++) {
      if (obj[props[i]] !== undefined) {
        this['set' + _capitalize(props[i])](obj[props[i]]);
      }
    }
  }

  StackFrame.prototype = {
    getArgs: function () {
      return this.args;
    },
    setArgs: function (v) {
      if (Object.prototype.toString.call(v) !== '[object Array]') {
        throw new TypeError('Args must be an Array');
      }

      this.args = v;
    },
    getEvalOrigin: function () {
      return this.evalOrigin;
    },
    setEvalOrigin: function (v) {
      if (v instanceof StackFrame) {
        this.evalOrigin = v;
      } else if (v instanceof Object) {
        this.evalOrigin = new StackFrame(v);
      } else {
        throw new TypeError('Eval Origin must be an Object or StackFrame');
      }
    },
    toString: function () {
      var fileName = this.getFileName() || '';
      var lineNumber = this.getLineNumber() || '';
      var columnNumber = this.getColumnNumber() || '';
      var functionName = this.getFunctionName() || '';

      if (this.getIsEval()) {
        if (fileName) {
          return '[eval] (' + fileName + ':' + lineNumber + ':' + columnNumber + ')';
        }

        return '[eval]:' + lineNumber + ':' + columnNumber;
      }

      if (functionName) {
        return functionName + ' (' + fileName + ':' + lineNumber + ':' + columnNumber + ')';
      }

      return fileName + ':' + lineNumber + ':' + columnNumber;
    }
  };

  StackFrame.fromString = function StackFrame$$fromString(str) {
    var argsStartIndex = str.indexOf('(');
    var argsEndIndex = str.lastIndexOf(')');
    var functionName = str.substring(0, argsStartIndex);
    var args = str.substring(argsStartIndex + 1, argsEndIndex).split(',');
    var locationString = str.substring(argsEndIndex + 1);

    if (locationString.indexOf('@') === 0) {
      var parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString, '');
      var fileName = parts[1];
      var lineNumber = parts[2];
      var columnNumber = parts[3];
    }

    return new StackFrame({
      functionName: functionName,
      args: args || undefined,
      fileName: fileName,
      lineNumber: lineNumber || undefined,
      columnNumber: columnNumber || undefined
    });
  };

  for (var i = 0; i < booleanProps.length; i++) {
    StackFrame.prototype['get' + _capitalize(booleanProps[i])] = _getter(booleanProps[i]);

    StackFrame.prototype['set' + _capitalize(booleanProps[i])] = function (p) {
      return function (v) {
        this[p] = Boolean(v);
      };
    }(booleanProps[i]);
  }

  for (var j = 0; j < numericProps.length; j++) {
    StackFrame.prototype['get' + _capitalize(numericProps[j])] = _getter(numericProps[j]);

    StackFrame.prototype['set' + _capitalize(numericProps[j])] = function (p) {
      return function (v) {
        if (!_isNumber(v)) {
          throw new TypeError(p + ' must be a Number');
        }

        this[p] = Number(v);
      };
    }(numericProps[j]);
  }

  for (var k = 0; k < stringProps.length; k++) {
    StackFrame.prototype['get' + _capitalize(stringProps[k])] = _getter(stringProps[k]);

    StackFrame.prototype['set' + _capitalize(stringProps[k])] = function (p) {
      return function (v) {
        this[p] = String(v);
      };
    }(stringProps[k]);
  }

  return StackFrame;
});

/***/ }),

/***/ 853:
/***/ ((module) => {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var runtime = function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.

  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }

  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.

    generator._invoke = makeInvokeMethod(innerFn, self, context);
    return generator;
  }

  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.

  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.


  var IteratorPrototype = {};

  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
    // do is to check its .name property.
    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  exports.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }

    genFun.prototype = Object.create(Gp);
    return genFun;
  }; // Within the body of any async function, \`await x\` is transformed to
  // \`yield regeneratorRuntime.awrap(x)\`, so that the runtime can test
  // \`hasOwn.call(value, "__await")\` to determine if the yielded value is
  // meant to be awaited.


  exports.awrap = function (arg) {
    return {
      __await: arg
    };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;

        if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function (unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function (error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = // If enqueue has been called before, then we want to wait until
      // all previous Promises have been resolved before calling invoke,
      // so that results are always delivered in the correct order. If
      // enqueue has not been called before, then it is important to
      // call invoke immediately, without waiting on a callback to fire,
      // so that the async generator function has the opportunity to do
      // any necessary setup in a predictable way. This predictability
      // is why the Promise constructor synchronously invokes its
      // executor callback, and why async functions synchronously
      // execute code before the first await. Since we implement simple
      // async functions in terms of async generators, it is especially
      // important to get this right, even though it requires care.
      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
      // invocations of the iterator.
      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    } // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).


    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };

  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.

  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
    : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;
    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        } // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;

        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);

          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;
        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);
        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;
        var record = tryCatch(innerFn, self, context);

        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };
        } else if (record.type === "throw") {
          state = GenStateCompleted; // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.

          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  } // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.


  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (!info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

      context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.

      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }
    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    } // The delegate iterator is finished, so forget it and continue with
    // the outer generator.


    context.delegate = null;
    return ContinueSentinel;
  } // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.


  defineIteratorMethods(Gp);
  define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.

  Gp[iteratorSymbol] = function () {
    return this;
  };

  Gp.toString = function () {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{
      tryLoc: "root"
    }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    keys.reverse(); // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.

    return function next() {
      while (keys.length) {
        var key = keys.pop();

        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      } // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.


      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];

      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;
          return next;
        };

        return next.next = next;
      }
    } // Return an iterator with no values.


    return {
      next: doneResult
    };
  }

  exports.values = values;

  function doneResult() {
    return {
      value: undefined,
      done: true
    };
  }

  Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      this.prev = 0;
      this.next = 0; // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.

      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;
      this.method = "next";
      this.arg = undefined;
      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },
    stop: function () {
      this.done = true;
      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;

      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;

      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },
    complete: function (record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },
    "catch": function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      } // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.


      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  }; // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by \`bin/regenerator --include-runtime script.js\`.

  return exports;
}( // If this script is executing as a CommonJS module, use module.exports
// as the regeneratorRuntime namespace. Otherwise create a new empty
// object. Either way, the resulting object will be used to initialize
// the regeneratorRuntime variable at the top of this file.
 true ? module.exports : 0);

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "importFile": () => (/* binding */ importFile_worker_importFile)
});

// EXTERNAL MODULE: ../react-devtools-timeline/node_modules/regenerator-runtime/runtime.js
var runtime = __webpack_require__(853);
// EXTERNAL MODULE: ../../node_modules/@elg/speedscope/dist/library/library.js
var library = __webpack_require__(41);
;// CONCATENATED MODULE: ../react-devtools-shared/src/devtools/constants.js
const CHANGE_LOG_URL = 'https://github.com/facebook/react/blob/main/packages/react-devtools/CHANGELOG.md';
const UNSUPPORTED_VERSION_URL = 'https://reactjs.org/blog/2019/08/15/new-react-devtools.html#how-do-i-get-the-old-version-back';
const REACT_DEVTOOLS_WORKPLACE_URL = 'https://fburl.com/react-devtools-workplace-group';
const THEME_STYLES = {
  light: {
    '--color-attribute-name': '#ef6632',
    '--color-attribute-name-not-editable': '#23272f',
    '--color-attribute-name-inverted': 'rgba(255, 255, 255, 0.7)',
    '--color-attribute-value': '#1a1aa6',
    '--color-attribute-value-inverted': '#ffffff',
    '--color-attribute-editable-value': '#1a1aa6',
    '--color-background': '#ffffff',
    '--color-background-hover': 'rgba(0, 136, 250, 0.1)',
    '--color-background-inactive': '#e5e5e5',
    '--color-background-invalid': '#fff0f0',
    '--color-background-selected': '#0088fa',
    '--color-button-background': '#ffffff',
    '--color-button-background-focus': '#ededed',
    '--color-button': '#5f6673',
    '--color-button-disabled': '#cfd1d5',
    '--color-button-active': '#0088fa',
    '--color-button-focus': '#23272f',
    '--color-button-hover': '#23272f',
    '--color-border': '#eeeeee',
    '--color-commit-did-not-render-fill': '#cfd1d5',
    '--color-commit-did-not-render-fill-text': '#000000',
    '--color-commit-did-not-render-pattern': '#cfd1d5',
    '--color-commit-did-not-render-pattern-text': '#333333',
    '--color-commit-gradient-0': '#37afa9',
    '--color-commit-gradient-1': '#63b19e',
    '--color-commit-gradient-2': '#80b393',
    '--color-commit-gradient-3': '#97b488',
    '--color-commit-gradient-4': '#abb67d',
    '--color-commit-gradient-5': '#beb771',
    '--color-commit-gradient-6': '#cfb965',
    '--color-commit-gradient-7': '#dfba57',
    '--color-commit-gradient-8': '#efbb49',
    '--color-commit-gradient-9': '#febc38',
    '--color-commit-gradient-text': '#000000',
    '--color-component-name': '#6a51b2',
    '--color-component-name-inverted': '#ffffff',
    '--color-component-badge-background': '#e6e6e6',
    '--color-component-badge-background-inverted': 'rgba(255, 255, 255, 0.25)',
    '--color-component-badge-count': '#777d88',
    '--color-component-badge-count-inverted': 'rgba(255, 255, 255, 0.7)',
    '--color-console-error-badge-text': '#ffffff',
    '--color-console-error-background': '#fff0f0',
    '--color-console-error-border': '#ffd6d6',
    '--color-console-error-icon': '#eb3941',
    '--color-console-error-text': '#fe2e31',
    '--color-console-warning-badge-text': '#000000',
    '--color-console-warning-background': '#fffbe5',
    '--color-console-warning-border': '#fff5c1',
    '--color-console-warning-icon': '#f4bd00',
    '--color-console-warning-text': '#64460c',
    '--color-context-background': 'rgba(0,0,0,.9)',
    '--color-context-background-hover': 'rgba(255, 255, 255, 0.1)',
    '--color-context-background-selected': '#178fb9',
    '--color-context-border': '#3d424a',
    '--color-context-text': '#ffffff',
    '--color-context-text-selected': '#ffffff',
    '--color-dim': '#777d88',
    '--color-dimmer': '#cfd1d5',
    '--color-dimmest': '#eff0f1',
    '--color-error-background': 'hsl(0, 100%, 97%)',
    '--color-error-border': 'hsl(0, 100%, 92%)',
    '--color-error-text': '#ff0000',
    '--color-expand-collapse-toggle': '#777d88',
    '--color-forget-badge-background': '#2683e2',
    '--color-forget-badge-background-inverted': '#1a6bbc',
    '--color-forget-text': '#fff',
    '--color-link': '#0000ff',
    '--color-modal-background': 'rgba(255, 255, 255, 0.75)',
    '--color-bridge-version-npm-background': '#eff0f1',
    '--color-bridge-version-npm-text': '#000000',
    '--color-bridge-version-number': '#0088fa',
    '--color-primitive-hook-badge-background': '#e5e5e5',
    '--color-primitive-hook-badge-text': '#5f6673',
    '--color-record-active': '#fc3a4b',
    '--color-record-hover': '#3578e5',
    '--color-record-inactive': '#0088fa',
    '--color-resize-bar': '#eeeeee',
    '--color-resize-bar-active': '#dcdcdc',
    '--color-resize-bar-border': '#d1d1d1',
    '--color-resize-bar-dot': '#333333',
    '--color-timeline-internal-module': '#d1d1d1',
    '--color-timeline-internal-module-hover': '#c9c9c9',
    '--color-timeline-internal-module-text': '#444',
    '--color-timeline-native-event': '#ccc',
    '--color-timeline-native-event-hover': '#aaa',
    '--color-timeline-network-primary': '#fcf3dc',
    '--color-timeline-network-primary-hover': '#f0e7d1',
    '--color-timeline-network-secondary': '#efc457',
    '--color-timeline-network-secondary-hover': '#e3ba52',
    '--color-timeline-priority-background': '#f6f6f6',
    '--color-timeline-priority-border': '#eeeeee',
    '--color-timeline-user-timing': '#c9cacd',
    '--color-timeline-user-timing-hover': '#93959a',
    '--color-timeline-react-idle': '#d3e5f6',
    '--color-timeline-react-idle-hover': '#c3d9ef',
    '--color-timeline-react-render': '#9fc3f3',
    '--color-timeline-react-render-hover': '#83afe9',
    '--color-timeline-react-render-text': '#11365e',
    '--color-timeline-react-commit': '#c88ff0',
    '--color-timeline-react-commit-hover': '#b281d6',
    '--color-timeline-react-commit-text': '#3e2c4a',
    '--color-timeline-react-layout-effects': '#b281d6',
    '--color-timeline-react-layout-effects-hover': '#9d71bd',
    '--color-timeline-react-layout-effects-text': '#3e2c4a',
    '--color-timeline-react-passive-effects': '#b281d6',
    '--color-timeline-react-passive-effects-hover': '#9d71bd',
    '--color-timeline-react-passive-effects-text': '#3e2c4a',
    '--color-timeline-react-schedule': '#9fc3f3',
    '--color-timeline-react-schedule-hover': '#2683E2',
    '--color-timeline-react-suspense-rejected': '#f1cc14',
    '--color-timeline-react-suspense-rejected-hover': '#ffdf37',
    '--color-timeline-react-suspense-resolved': '#a6e59f',
    '--color-timeline-react-suspense-resolved-hover': '#89d281',
    '--color-timeline-react-suspense-unresolved': '#c9cacd',
    '--color-timeline-react-suspense-unresolved-hover': '#93959a',
    '--color-timeline-thrown-error': '#ee1638',
    '--color-timeline-thrown-error-hover': '#da1030',
    '--color-timeline-text-color': '#000000',
    '--color-timeline-text-dim-color': '#ccc',
    '--color-timeline-react-work-border': '#eeeeee',
    '--color-search-match': 'yellow',
    '--color-search-match-current': '#f7923b',
    '--color-selected-tree-highlight-active': 'rgba(0, 136, 250, 0.1)',
    '--color-selected-tree-highlight-inactive': 'rgba(0, 0, 0, 0.05)',
    '--color-scroll-caret': 'rgba(150, 150, 150, 0.5)',
    '--color-tab-selected-border': '#0088fa',
    '--color-text': '#000000',
    '--color-text-invalid': '#ff0000',
    '--color-text-selected': '#ffffff',
    '--color-toggle-background-invalid': '#fc3a4b',
    '--color-toggle-background-on': '#0088fa',
    '--color-toggle-background-off': '#cfd1d5',
    '--color-toggle-text': '#ffffff',
    '--color-warning-background': '#fb3655',
    '--color-warning-background-hover': '#f82042',
    '--color-warning-text-color': '#ffffff',
    '--color-warning-text-color-inverted': '#fd4d69',
    // The styles below should be kept in sync with 'root.css'
    // They are repeated there because they're used by e.g. tooltips or context menus
    // which get rendered outside of the DOM subtree (where normal theme/styles are written).
    '--color-scroll-thumb': '#c2c2c2',
    '--color-scroll-track': '#fafafa',
    '--color-tooltip-background': 'rgba(0, 0, 0, 0.9)',
    '--color-tooltip-text': '#ffffff'
  },
  dark: {
    '--color-attribute-name': '#9d87d2',
    '--color-attribute-name-not-editable': '#ededed',
    '--color-attribute-name-inverted': '#282828',
    '--color-attribute-value': '#cedae0',
    '--color-attribute-value-inverted': '#ffffff',
    '--color-attribute-editable-value': 'yellow',
    '--color-background': '#282c34',
    '--color-background-hover': 'rgba(255, 255, 255, 0.1)',
    '--color-background-inactive': '#3d424a',
    '--color-background-invalid': '#5c0000',
    '--color-background-selected': '#178fb9',
    '--color-button-background': '#282c34',
    '--color-button-background-focus': '#3d424a',
    '--color-button': '#afb3b9',
    '--color-button-active': '#61dafb',
    '--color-button-disabled': '#4f5766',
    '--color-button-focus': '#a2e9fc',
    '--color-button-hover': '#ededed',
    '--color-border': '#3d424a',
    '--color-commit-did-not-render-fill': '#777d88',
    '--color-commit-did-not-render-fill-text': '#000000',
    '--color-commit-did-not-render-pattern': '#666c77',
    '--color-commit-did-not-render-pattern-text': '#ffffff',
    '--color-commit-gradient-0': '#37afa9',
    '--color-commit-gradient-1': '#63b19e',
    '--color-commit-gradient-2': '#80b393',
    '--color-commit-gradient-3': '#97b488',
    '--color-commit-gradient-4': '#abb67d',
    '--color-commit-gradient-5': '#beb771',
    '--color-commit-gradient-6': '#cfb965',
    '--color-commit-gradient-7': '#dfba57',
    '--color-commit-gradient-8': '#efbb49',
    '--color-commit-gradient-9': '#febc38',
    '--color-commit-gradient-text': '#000000',
    '--color-component-name': '#61dafb',
    '--color-component-name-inverted': '#282828',
    '--color-component-badge-background': '#5e6167',
    '--color-component-badge-background-inverted': '#46494e',
    '--color-component-badge-count': '#8f949d',
    '--color-component-badge-count-inverted': 'rgba(255, 255, 255, 0.85)',
    '--color-console-error-badge-text': '#000000',
    '--color-console-error-background': '#290000',
    '--color-console-error-border': '#5c0000',
    '--color-console-error-icon': '#eb3941',
    '--color-console-error-text': '#fc7f7f',
    '--color-console-warning-badge-text': '#000000',
    '--color-console-warning-background': '#332b00',
    '--color-console-warning-border': '#665500',
    '--color-console-warning-icon': '#f4bd00',
    '--color-console-warning-text': '#f5f2ed',
    '--color-context-background': 'rgba(255,255,255,.95)',
    '--color-context-background-hover': 'rgba(0, 136, 250, 0.1)',
    '--color-context-background-selected': '#0088fa',
    '--color-context-border': '#eeeeee',
    '--color-context-text': '#000000',
    '--color-context-text-selected': '#ffffff',
    '--color-dim': '#8f949d',
    '--color-dimmer': '#777d88',
    '--color-dimmest': '#4f5766',
    '--color-error-background': '#200',
    '--color-error-border': '#900',
    '--color-error-text': '#f55',
    '--color-expand-collapse-toggle': '#8f949d',
    '--color-forget-badge-background': '#2683e2',
    '--color-forget-badge-background-inverted': '#1a6bbc',
    '--color-forget-text': '#fff',
    '--color-link': '#61dafb',
    '--color-modal-background': 'rgba(0, 0, 0, 0.75)',
    '--color-bridge-version-npm-background': 'rgba(0, 0, 0, 0.25)',
    '--color-bridge-version-npm-text': '#ffffff',
    '--color-bridge-version-number': 'yellow',
    '--color-primitive-hook-badge-background': 'rgba(0, 0, 0, 0.25)',
    '--color-primitive-hook-badge-text': 'rgba(255, 255, 255, 0.7)',
    '--color-record-active': '#fc3a4b',
    '--color-record-hover': '#a2e9fc',
    '--color-record-inactive': '#61dafb',
    '--color-resize-bar': '#282c34',
    '--color-resize-bar-active': '#31363f',
    '--color-resize-bar-border': '#3d424a',
    '--color-resize-bar-dot': '#cfd1d5',
    '--color-timeline-internal-module': '#303542',
    '--color-timeline-internal-module-hover': '#363b4a',
    '--color-timeline-internal-module-text': '#7f8899',
    '--color-timeline-native-event': '#b2b2b2',
    '--color-timeline-native-event-hover': '#949494',
    '--color-timeline-network-primary': '#fcf3dc',
    '--color-timeline-network-primary-hover': '#e3dbc5',
    '--color-timeline-network-secondary': '#efc457',
    '--color-timeline-network-secondary-hover': '#d6af4d',
    '--color-timeline-priority-background': '#1d2129',
    '--color-timeline-priority-border': '#282c34',
    '--color-timeline-user-timing': '#c9cacd',
    '--color-timeline-user-timing-hover': '#93959a',
    '--color-timeline-react-idle': '#3d485b',
    '--color-timeline-react-idle-hover': '#465269',
    '--color-timeline-react-render': '#2683E2',
    '--color-timeline-react-render-hover': '#1a76d4',
    '--color-timeline-react-render-text': '#11365e',
    '--color-timeline-react-commit': '#731fad',
    '--color-timeline-react-commit-hover': '#611b94',
    '--color-timeline-react-commit-text': '#e5c1ff',
    '--color-timeline-react-layout-effects': '#611b94',
    '--color-timeline-react-layout-effects-hover': '#51167a',
    '--color-timeline-react-layout-effects-text': '#e5c1ff',
    '--color-timeline-react-passive-effects': '#611b94',
    '--color-timeline-react-passive-effects-hover': '#51167a',
    '--color-timeline-react-passive-effects-text': '#e5c1ff',
    '--color-timeline-react-schedule': '#2683E2',
    '--color-timeline-react-schedule-hover': '#1a76d4',
    '--color-timeline-react-suspense-rejected': '#f1cc14',
    '--color-timeline-react-suspense-rejected-hover': '#e4c00f',
    '--color-timeline-react-suspense-resolved': '#a6e59f',
    '--color-timeline-react-suspense-resolved-hover': '#89d281',
    '--color-timeline-react-suspense-unresolved': '#c9cacd',
    '--color-timeline-react-suspense-unresolved-hover': '#93959a',
    '--color-timeline-thrown-error': '#fb3655',
    '--color-timeline-thrown-error-hover': '#f82042',
    '--color-timeline-text-color': '#282c34',
    '--color-timeline-text-dim-color': '#555b66',
    '--color-timeline-react-work-border': '#3d424a',
    '--color-search-match': 'yellow',
    '--color-search-match-current': '#f7923b',
    '--color-selected-tree-highlight-active': 'rgba(23, 143, 185, 0.15)',
    '--color-selected-tree-highlight-inactive': 'rgba(255, 255, 255, 0.05)',
    '--color-scroll-caret': '#4f5766',
    '--color-shadow': 'rgba(0, 0, 0, 0.5)',
    '--color-tab-selected-border': '#178fb9',
    '--color-text': '#ffffff',
    '--color-text-invalid': '#ff8080',
    '--color-text-selected': '#ffffff',
    '--color-toggle-background-invalid': '#fc3a4b',
    '--color-toggle-background-on': '#178fb9',
    '--color-toggle-background-off': '#777d88',
    '--color-toggle-text': '#ffffff',
    '--color-warning-background': '#ee1638',
    '--color-warning-background-hover': '#da1030',
    '--color-warning-text-color': '#ffffff',
    '--color-warning-text-color-inverted': '#ee1638',
    // The styles below should be kept in sync with 'root.css'
    // They are repeated there because they're used by e.g. tooltips or context menus
    // which get rendered outside of the DOM subtree (where normal theme/styles are written).
    '--color-scroll-thumb': '#afb3b9',
    '--color-scroll-track': '#313640',
    '--color-tooltip-background': 'rgba(255, 255, 255, 0.95)',
    '--color-tooltip-text': '#000000'
  },
  compact: {
    '--font-size-monospace-small': '9px',
    '--font-size-monospace-normal': '11px',
    '--font-size-monospace-large': '15px',
    '--font-size-sans-small': '10px',
    '--font-size-sans-normal': '12px',
    '--font-size-sans-large': '14px',
    '--line-height-data': '18px'
  },
  comfortable: {
    '--font-size-monospace-small': '10px',
    '--font-size-monospace-normal': '13px',
    '--font-size-monospace-large': '17px',
    '--font-size-sans-small': '12px',
    '--font-size-sans-normal': '14px',
    '--font-size-sans-large': '16px',
    '--line-height-data': '22px'
  }
}; // HACK
//
// Sometimes the inline target is rendered before root styles are applied,
// which would result in e.g. NaN itemSize being passed to react-window list.

const COMFORTABLE_LINE_HEIGHT = parseInt(THEME_STYLES.comfortable['--line-height-data'], 10);
const COMPACT_LINE_HEIGHT = parseInt(THEME_STYLES.compact['--line-height-data'], 10);

;// CONCATENATED MODULE: ../react-devtools-timeline/src/constants.js
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

const REACT_TOTAL_NUM_LANES = 31; // Increment this number any time a backwards breaking change is made to the profiler metadata.

const SCHEDULING_PROFILER_VERSION = 1;
const SNAPSHOT_MAX_HEIGHT = 60;
;// CONCATENATED MODULE: ../react-devtools-timeline/src/import-worker/InvalidProfileError.js
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

/**
 * An error thrown when an invalid profile could not be processed.
 */
class InvalidProfileError extends Error {}
;// CONCATENATED MODULE: ../react-devtools-timeline/node_modules/memoize-one/dist/memoize-one.esm.js
function areInputsEqual(newInputs, lastInputs) {
  if (newInputs.length !== lastInputs.length) {
    return false;
  }

  for (var i = 0; i < newInputs.length; i++) {
    if (newInputs[i] !== lastInputs[i]) {
      return false;
    }
  }

  return true;
}

function memoizeOne(resultFn, isEqual) {
  if (isEqual === void 0) {
    isEqual = areInputsEqual;
  }

  var lastThis;
  var lastArgs = [];
  var lastResult;
  var calledOnce = false;

  function memoized() {
    var newArgs = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      newArgs[_i] = arguments[_i];
    }

    if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {
      return lastResult;
    }

    lastResult = resultFn.apply(this, newArgs);
    calledOnce = true;
    lastThis = this;
    lastArgs = newArgs;
    return lastResult;
  }

  return memoized;
}

/* harmony default export */ const memoize_one_esm = (memoizeOne);
;// CONCATENATED MODULE: ../react-devtools-timeline/src/utils/getBatchRange.js
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */


function unmemoizedGetBatchRange(batchUID, data, minStartTime = 0) {
  const measures = data.batchUIDToMeasuresMap.get(batchUID);

  if (measures == null || measures.length === 0) {
    throw Error(\`Could not find measures with batch UID "\${batchUID}"\`);
  }

  const lastMeasure = measures[measures.length - 1];
  const stopTime = lastMeasure.timestamp + lastMeasure.duration;

  if (stopTime < minStartTime) {
    return [0, 0];
  }

  let startTime = minStartTime;

  for (let index = 0; index < measures.length; index++) {
    const measure = measures[index];

    if (measure.timestamp >= minStartTime) {
      startTime = measure.timestamp;
      break;
    }
  }

  return [startTime, stopTime];
}

const getBatchRange = memoize_one_esm(unmemoizedGetBatchRange);
// EXTERNAL MODULE: ../../node_modules/error-stack-parser/error-stack-parser.js
var error_stack_parser = __webpack_require__(715);
var error_stack_parser_default = /*#__PURE__*/__webpack_require__.n(error_stack_parser);
;// CONCATENATED MODULE: ../react-devtools-timeline/src/import-worker/preprocessData.js
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */





const NATIVE_EVENT_DURATION_THRESHOLD = 20;
const NESTED_UPDATE_DURATION_THRESHOLD = 20;
const WARNING_STRINGS = {
  LONG_EVENT_HANDLER: 'An event handler scheduled a big update with React. Consider using the Transition API to defer some of this work.',
  NESTED_UPDATE: 'A big nested update was scheduled during layout. ' + 'Nested updates require React to re-render synchronously before the browser can paint. ' + 'Consider delaying this update by moving it to a passive effect (useEffect).',
  SUSPEND_DURING_UPDATE: 'A component suspended during an update which caused a fallback to be shown. ' + "Consider using the Transition API to avoid hiding components after they've been mounted."
}; // Exported for tests

function getLanesFromTransportDecimalBitmask(laneBitmaskString) {
  const laneBitmask = parseInt(laneBitmaskString, 10); // As negative numbers are stored in two's complement format, our bitmask
  // checks will be thrown off by them.

  if (laneBitmask < 0) {
    return [];
  }

  const lanes = [];
  let powersOfTwo = 0;

  while (powersOfTwo <= REACT_TOTAL_NUM_LANES) {
    if (1 << powersOfTwo & laneBitmask) {
      lanes.push(powersOfTwo);
    }

    powersOfTwo++;
  }

  return lanes;
}

function updateLaneToLabelMap(profilerData, laneLabelTuplesString) {
  // These marks appear multiple times in the data;
  // We only need to extact them once.
  if (profilerData.laneToLabelMap.size === 0) {
    const laneLabelTuples = laneLabelTuplesString.split(',');

    for (let laneIndex = 0; laneIndex < laneLabelTuples.length; laneIndex++) {
      // The numeric lane value (e.g. 64) isn't important.
      // The profiler parses and stores the lane's position within the bitmap,
      // (e.g. lane 1 is index 0, lane 16 is index 4).
      profilerData.laneToLabelMap.set(laneIndex, laneLabelTuples[laneIndex]);
    }
  }
}

let profilerVersion = null;

function getLastType(stack) {
  if (stack.length > 0) {
    const {
      type
    } = stack[stack.length - 1];
    return type;
  }

  return null;
}

function getDepth(stack) {
  if (stack.length > 0) {
    const {
      depth,
      type
    } = stack[stack.length - 1];
    return type === 'render-idle' ? depth : depth + 1;
  }

  return 0;
}

function markWorkStarted(type, startTime, lanes, currentProfilerData, state) {
  const {
    batchUID,
    measureStack
  } = state;
  const depth = getDepth(measureStack);
  const measure = {
    type,
    batchUID,
    depth,
    lanes,
    timestamp: startTime,
    duration: 0
  };
  state.measureStack.push({
    depth,
    measure,
    startTime,
    type
  }); // This array is pre-initialized when the batchUID is generated.

  const measures = currentProfilerData.batchUIDToMeasuresMap.get(batchUID);

  if (measures != null) {
    measures.push(measure);
  } else {
    currentProfilerData.batchUIDToMeasuresMap.set(state.batchUID, [measure]);
  } // This array is pre-initialized before processing starts.


  lanes.forEach(lane => {
    currentProfilerData.laneToReactMeasureMap.get(lane).push(measure);
  });
}

function markWorkCompleted(type, stopTime, currentProfilerData, stack) {
  if (stack.length === 0) {
    console.error('Unexpected type "%s" completed at %sms while stack is empty.', type, stopTime); // Ignore work "completion" user timing mark that doesn't complete anything

    return;
  }

  const last = stack[stack.length - 1];

  if (last.type !== type) {
    console.error('Unexpected type "%s" completed at %sms before "%s" completed.', type, stopTime, last.type);
  }

  const {
    measure,
    startTime
  } = stack.pop();

  if (!measure) {
    console.error('Could not find matching measure for type "%s".', type);
  } // $FlowFixMe[cannot-write] This property should not be writable outside of this function.


  measure.duration = stopTime - startTime;
}

function throwIfIncomplete(type, stack) {
  const lastIndex = stack.length - 1;

  if (lastIndex >= 0) {
    const last = stack[lastIndex];

    if (last.stopTime === undefined && last.type === type) {
      throw new InvalidProfileError(\`Unexpected type "\${type}" started before "\${last.type}" completed.\`);
    }
  }
}

function processEventDispatch(event, timestamp, profilerData, state) {
  const data = event.args.data;
  const type = data.type;

  if (type.startsWith('react-')) {
    const stackTrace = data.stackTrace;

    if (stackTrace) {
      const topFrame = stackTrace[stackTrace.length - 1];

      if (topFrame.url.includes('/react-dom.')) {
        // Filter out fake React events dispatched by invokeGuardedCallbackDev.
        return;
      }
    }
  } // Reduce noise from events like DOMActivate, load/unload, etc. which are usually not relevant


  if (type === 'blur' || type === 'click' || type === 'input' || type.startsWith('focus') || type.startsWith('key') || type.startsWith('mouse') || type.startsWith('pointer')) {
    const duration = event.dur / 1000;
    let depth = 0;

    while (state.nativeEventStack.length > 0) {
      const prevNativeEvent = state.nativeEventStack[state.nativeEventStack.length - 1];
      const prevStopTime = prevNativeEvent.timestamp + prevNativeEvent.duration;

      if (timestamp < prevStopTime) {
        depth = prevNativeEvent.depth + 1;
        break;
      } else {
        state.nativeEventStack.pop();
      }
    }

    const nativeEvent = {
      depth,
      duration,
      timestamp,
      type,
      warning: null
    };
    profilerData.nativeEvents.push(nativeEvent); // Keep track of curent event in case future ones overlap.
    // We separate them into different vertical lanes in this case.

    state.nativeEventStack.push(nativeEvent);
  }
}

function processResourceFinish(event, timestamp, profilerData, state) {
  const requestId = event.args.data.requestId;
  const networkMeasure = state.requestIdToNetworkMeasureMap.get(requestId);

  if (networkMeasure != null) {
    networkMeasure.finishTimestamp = timestamp;

    if (networkMeasure.firstReceivedDataTimestamp === 0) {
      networkMeasure.firstReceivedDataTimestamp = timestamp;
    }

    if (networkMeasure.lastReceivedDataTimestamp === 0) {
      networkMeasure.lastReceivedDataTimestamp = timestamp;
    } // Clean up now that the resource is done.


    state.requestIdToNetworkMeasureMap.delete(event.args.data.requestId);
  }
}

function processResourceReceivedData(event, timestamp, profilerData, state) {
  const requestId = event.args.data.requestId;
  const networkMeasure = state.requestIdToNetworkMeasureMap.get(requestId);

  if (networkMeasure != null) {
    if (networkMeasure.firstReceivedDataTimestamp === 0) {
      networkMeasure.firstReceivedDataTimestamp = timestamp;
    }

    networkMeasure.lastReceivedDataTimestamp = timestamp;
    networkMeasure.finishTimestamp = timestamp;
  }
}

function processResourceReceiveResponse(event, timestamp, profilerData, state) {
  const requestId = event.args.data.requestId;
  const networkMeasure = state.requestIdToNetworkMeasureMap.get(requestId);

  if (networkMeasure != null) {
    networkMeasure.receiveResponseTimestamp = timestamp;
  }
}

function processScreenshot(event, timestamp, profilerData, state) {
  const encodedSnapshot = event.args.snapshot; // Base 64 encoded

  const snapshot = {
    height: 0,
    image: null,
    imageSource: \`data:image/png;base64,\${encodedSnapshot}\`,
    timestamp,
    width: 0
  }; // Delay processing until we've extracted snapshot dimensions.

  let resolveFn = null;
  state.asyncProcessingPromises.push(new Promise(resolve => {
    resolveFn = resolve;
  })); // Parse the Base64 image data to determine native size.
  // This will be used later to scale for display within the thumbnail strip.

  fetch(snapshot.imageSource).then(response => response.blob()).then(blob => {
    // $FlowFixMe[cannot-resolve-name] createImageBitmap
    createImageBitmap(blob).then(bitmap => {
      snapshot.height = bitmap.height;
      snapshot.width = bitmap.width;
      resolveFn();
    });
  });
  profilerData.snapshots.push(snapshot);
}

function processResourceSendRequest(event, timestamp, profilerData, state) {
  const data = event.args.data;
  const requestId = data.requestId;
  const availableDepths = new Array(state.requestIdToNetworkMeasureMap.size + 1).fill(true);
  state.requestIdToNetworkMeasureMap.forEach(({
    depth
  }) => {
    availableDepths[depth] = false;
  });
  let depth = 0;

  for (let i = 0; i < availableDepths.length; i++) {
    if (availableDepths[i]) {
      depth = i;
      break;
    }
  }

  const networkMeasure = {
    depth,
    finishTimestamp: 0,
    firstReceivedDataTimestamp: 0,
    lastReceivedDataTimestamp: 0,
    requestId,
    requestMethod: data.requestMethod,
    priority: data.priority,
    sendRequestTimestamp: timestamp,
    receiveResponseTimestamp: 0,
    url: data.url
  };
  state.requestIdToNetworkMeasureMap.set(requestId, networkMeasure);
  profilerData.networkMeasures.push(networkMeasure);
  networkMeasure.sendRequestTimestamp = timestamp;
}

function processTimelineEvent(event,
/** Finalized profiler data up to \`event\`. May be mutated. */
currentProfilerData,
/** Intermediate processor state. May be mutated. */
state) {
  const {
    cat,
    name,
    ts,
    ph
  } = event;
  const startTime = (ts - currentProfilerData.startTime) / 1000;

  switch (cat) {
    case 'disabled-by-default-devtools.screenshot':
      processScreenshot(event, startTime, currentProfilerData, state);
      break;

    case 'devtools.timeline':
      switch (name) {
        case 'EventDispatch':
          processEventDispatch(event, startTime, currentProfilerData, state);
          break;

        case 'ResourceFinish':
          processResourceFinish(event, startTime, currentProfilerData, state);
          break;

        case 'ResourceReceivedData':
          processResourceReceivedData(event, startTime, currentProfilerData, state);
          break;

        case 'ResourceReceiveResponse':
          processResourceReceiveResponse(event, startTime, currentProfilerData, state);
          break;

        case 'ResourceSendRequest':
          processResourceSendRequest(event, startTime, currentProfilerData, state);
          break;
      }

      break;

    case 'blink.user_timing':
      if (name.startsWith('--react-version-')) {
        const [reactVersion] = name.slice(16).split('-');
        currentProfilerData.reactVersion = reactVersion;
      } else if (name.startsWith('--profiler-version-')) {
        const [versionString] = name.slice(19).split('-');
        profilerVersion = parseInt(versionString, 10);

        if (profilerVersion !== SCHEDULING_PROFILER_VERSION) {
          throw new InvalidProfileError(\`This version of profiling data (\${versionString}) is not supported by the current profiler.\`);
        }
      } else if (name.startsWith('--react-lane-labels-')) {
        const [laneLabelTuplesString] = name.slice(20).split('-');
        updateLaneToLabelMap(currentProfilerData, laneLabelTuplesString);
      } else if (name.startsWith('--component-')) {
        processReactComponentMeasure(name, startTime, currentProfilerData, state);
      } else if (name.startsWith('--schedule-render-')) {
        const [laneBitmaskString] = name.slice(18).split('-');
        currentProfilerData.schedulingEvents.push({
          type: 'schedule-render',
          lanes: getLanesFromTransportDecimalBitmask(laneBitmaskString),
          timestamp: startTime,
          warning: null
        });
      } else if (name.startsWith('--schedule-forced-update-')) {
        const [laneBitmaskString, componentName] = name.slice(25).split('-');
        const forceUpdateEvent = {
          type: 'schedule-force-update',
          lanes: getLanesFromTransportDecimalBitmask(laneBitmaskString),
          componentName,
          timestamp: startTime,
          warning: null
        }; // If this is a nested update, make a note of it.
        // Once we're done processing events, we'll check to see if it was a long update and warn about it.

        if (state.measureStack.find(({
          type
        }) => type === 'commit')) {
          state.potentialLongNestedUpdate = forceUpdateEvent;
        }

        currentProfilerData.schedulingEvents.push(forceUpdateEvent);
      } else if (name.startsWith('--schedule-state-update-')) {
        const [laneBitmaskString, componentName] = name.slice(24).split('-');
        const stateUpdateEvent = {
          type: 'schedule-state-update',
          lanes: getLanesFromTransportDecimalBitmask(laneBitmaskString),
          componentName,
          timestamp: startTime,
          warning: null
        }; // If this is a nested update, make a note of it.
        // Once we're done processing events, we'll check to see if it was a long update and warn about it.

        if (state.measureStack.find(({
          type
        }) => type === 'commit')) {
          state.potentialLongNestedUpdate = stateUpdateEvent;
        }

        currentProfilerData.schedulingEvents.push(stateUpdateEvent);
      } else if (name.startsWith('--error-')) {
        const [componentName, phase, message] = name.slice(8).split('-');
        currentProfilerData.thrownErrors.push({
          componentName,
          message,
          phase: phase,
          timestamp: startTime,
          type: 'thrown-error'
        });
      } else if (name.startsWith('--suspense-suspend-')) {
        const [id, componentName, phase, laneBitmaskString, promiseName] = name.slice(19).split('-');
        const lanes = getLanesFromTransportDecimalBitmask(laneBitmaskString);
        const availableDepths = new Array(state.unresolvedSuspenseEvents.size + 1).fill(true);
        state.unresolvedSuspenseEvents.forEach(({
          depth
        }) => {
          availableDepths[depth] = false;
        });
        let depth = 0;

        for (let i = 0; i < availableDepths.length; i++) {
          if (availableDepths[i]) {
            depth = i;
            break;
          }
        } // TODO (timeline) Maybe we should calculate depth in post,
        // so unresolved Suspense requests don't take up space.
        // We can't know if they'll be resolved or not at this point.
        // We'll just give them a default (fake) duration width.


        const suspenseEvent = {
          componentName,
          depth,
          duration: null,
          id,
          phase: phase,
          promiseName: promiseName || null,
          resolution: 'unresolved',
          timestamp: startTime,
          type: 'suspense',
          warning: null
        };

        if (phase === 'update') {
          // If a component suspended during an update, we should verify that it was during a transition.
          // We need the lane metadata to verify this though.
          // Since that data is only logged during commit, we may not have it yet.
          // Store these events for post-processing then.
          state.potentialSuspenseEventsOutsideOfTransition.push([suspenseEvent, lanes]);
        }

        currentProfilerData.suspenseEvents.push(suspenseEvent);
        state.unresolvedSuspenseEvents.set(id, suspenseEvent);
      } else if (name.startsWith('--suspense-resolved-')) {
        const [id] = name.slice(20).split('-');
        const suspenseEvent = state.unresolvedSuspenseEvents.get(id);

        if (suspenseEvent != null) {
          state.unresolvedSuspenseEvents.delete(id);
          suspenseEvent.duration = startTime - suspenseEvent.timestamp;
          suspenseEvent.resolution = 'resolved';
        }
      } else if (name.startsWith('--suspense-rejected-')) {
        const [id] = name.slice(20).split('-');
        const suspenseEvent = state.unresolvedSuspenseEvents.get(id);

        if (suspenseEvent != null) {
          state.unresolvedSuspenseEvents.delete(id);
          suspenseEvent.duration = startTime - suspenseEvent.timestamp;
          suspenseEvent.resolution = 'rejected';
        }
      } else if (name.startsWith('--render-start-')) {
        if (state.nextRenderShouldGenerateNewBatchID) {
          state.nextRenderShouldGenerateNewBatchID = false;
          state.batchUID = state.uidCounter++;
        } // If this render is the result of a nested update, make a note of it.
        // Once we're done processing events, we'll check to see if it was a long update and warn about it.


        if (state.potentialLongNestedUpdate !== null) {
          state.potentialLongNestedUpdates.push([state.potentialLongNestedUpdate, state.batchUID]);
          state.potentialLongNestedUpdate = null;
        }

        const [laneBitmaskString] = name.slice(15).split('-');
        throwIfIncomplete('render', state.measureStack);

        if (getLastType(state.measureStack) !== 'render-idle') {
          markWorkStarted('render-idle', startTime, getLanesFromTransportDecimalBitmask(laneBitmaskString), currentProfilerData, state);
        }

        markWorkStarted('render', startTime, getLanesFromTransportDecimalBitmask(laneBitmaskString), currentProfilerData, state);

        for (let i = 0; i < state.nativeEventStack.length; i++) {
          const nativeEvent = state.nativeEventStack[i];
          const stopTime = nativeEvent.timestamp + nativeEvent.duration; // If React work was scheduled during an event handler, and the event had a long duration,
          // it might be because the React render was long and stretched the event.
          // It might also be that the React work was short and that something else stretched the event.
          // Make a note of this event for now and we'll examine the batch of React render work later.
          // (We can't know until we're done processing the React update anyway.)

          if (stopTime > startTime) {
            state.potentialLongEvents.push([nativeEvent, state.batchUID]);
          }
        }
      } else if (name.startsWith('--render-stop') || name.startsWith('--render-yield')) {
        markWorkCompleted('render', startTime, currentProfilerData, state.measureStack);
      } else if (name.startsWith('--commit-start-')) {
        state.nextRenderShouldGenerateNewBatchID = true;
        const [laneBitmaskString] = name.slice(15).split('-');
        markWorkStarted('commit', startTime, getLanesFromTransportDecimalBitmask(laneBitmaskString), currentProfilerData, state);
      } else if (name.startsWith('--commit-stop')) {
        markWorkCompleted('commit', startTime, currentProfilerData, state.measureStack);
        markWorkCompleted('render-idle', startTime, currentProfilerData, state.measureStack);
      } else if (name.startsWith('--layout-effects-start-')) {
        const [laneBitmaskString] = name.slice(23).split('-');
        markWorkStarted('layout-effects', startTime, getLanesFromTransportDecimalBitmask(laneBitmaskString), currentProfilerData, state);
      } else if (name.startsWith('--layout-effects-stop')) {
        markWorkCompleted('layout-effects', startTime, currentProfilerData, state.measureStack);
      } else if (name.startsWith('--passive-effects-start-')) {
        const [laneBitmaskString] = name.slice(24).split('-');
        markWorkStarted('passive-effects', startTime, getLanesFromTransportDecimalBitmask(laneBitmaskString), currentProfilerData, state);
      } else if (name.startsWith('--passive-effects-stop')) {
        markWorkCompleted('passive-effects', startTime, currentProfilerData, state.measureStack);
      } else if (name.startsWith('--react-internal-module-start-')) {
        const stackFrameStart = name.slice(30);

        if (!state.internalModuleStackStringSet.has(stackFrameStart)) {
          state.internalModuleStackStringSet.add(stackFrameStart);
          const parsedStackFrameStart = parseStackFrame(stackFrameStart);
          state.internalModuleCurrentStackFrame = parsedStackFrameStart;
        }
      } else if (name.startsWith('--react-internal-module-stop-')) {
        const stackFrameStop = name.slice(29);

        if (!state.internalModuleStackStringSet.has(stackFrameStop)) {
          state.internalModuleStackStringSet.add(stackFrameStop);
          const parsedStackFrameStop = parseStackFrame(stackFrameStop);

          if (parsedStackFrameStop !== null && state.internalModuleCurrentStackFrame !== null) {
            const parsedStackFrameStart = state.internalModuleCurrentStackFrame;
            state.internalModuleCurrentStackFrame = null;
            const range = [parsedStackFrameStart, parsedStackFrameStop];
            const ranges = currentProfilerData.internalModuleSourceToRanges.get(parsedStackFrameStart.fileName);

            if (ranges == null) {
              currentProfilerData.internalModuleSourceToRanges.set(parsedStackFrameStart.fileName, [range]);
            } else {
              ranges.push(range);
            }
          }
        }
      } else if (ph === 'R' || ph === 'n') {
        // User Timing mark
        currentProfilerData.otherUserTimingMarks.push({
          name,
          timestamp: startTime
        });
      } else if (ph === 'b') {// TODO: Begin user timing measure
      } else if (ph === 'e') {// TODO: End user timing measure
      } else if (ph === 'i' || ph === 'I') {// Instant events.
        // Note that the capital "I" is a deprecated value that exists in Chrome Canary traces.
      } else {
        throw new InvalidProfileError(\`Unrecognized event \${JSON.stringify(event)}! This is likely a bug in this profiler tool.\`);
      }

      break;
  }
}

function assertNoOverlappingComponentMeasure(state) {
  if (state.currentReactComponentMeasure !== null) {
    console.error('Component measure started while another measure in progress:', state.currentReactComponentMeasure);
  }
}

function assertCurrentComponentMeasureType(state, type) {
  if (state.currentReactComponentMeasure === null) {
    console.error(\`Component measure type "\${type}" stopped while no measure was in progress\`);
  } else if (state.currentReactComponentMeasure.type !== type) {
    console.error(\`Component measure type "\${type}" stopped while type \${state.currentReactComponentMeasure.type} in progress\`);
  }
}

function processReactComponentMeasure(name, startTime, currentProfilerData, state) {
  if (name.startsWith('--component-render-start-')) {
    const [componentName] = name.slice(25).split('-');
    assertNoOverlappingComponentMeasure(state);
    state.currentReactComponentMeasure = {
      componentName,
      timestamp: startTime,
      duration: 0,
      type: 'render',
      warning: null
    };
  } else if (name === '--component-render-stop') {
    assertCurrentComponentMeasureType(state, 'render');

    if (state.currentReactComponentMeasure !== null) {
      const componentMeasure = state.currentReactComponentMeasure;
      componentMeasure.duration = startTime - componentMeasure.timestamp;
      state.currentReactComponentMeasure = null;
      currentProfilerData.componentMeasures.push(componentMeasure);
    }
  } else if (name.startsWith('--component-layout-effect-mount-start-')) {
    const [componentName] = name.slice(38).split('-');
    assertNoOverlappingComponentMeasure(state);
    state.currentReactComponentMeasure = {
      componentName,
      timestamp: startTime,
      duration: 0,
      type: 'layout-effect-mount',
      warning: null
    };
  } else if (name === '--component-layout-effect-mount-stop') {
    assertCurrentComponentMeasureType(state, 'layout-effect-mount');

    if (state.currentReactComponentMeasure !== null) {
      const componentMeasure = state.currentReactComponentMeasure;
      componentMeasure.duration = startTime - componentMeasure.timestamp;
      state.currentReactComponentMeasure = null;
      currentProfilerData.componentMeasures.push(componentMeasure);
    }
  } else if (name.startsWith('--component-layout-effect-unmount-start-')) {
    const [componentName] = name.slice(40).split('-');
    assertNoOverlappingComponentMeasure(state);
    state.currentReactComponentMeasure = {
      componentName,
      timestamp: startTime,
      duration: 0,
      type: 'layout-effect-unmount',
      warning: null
    };
  } else if (name === '--component-layout-effect-unmount-stop') {
    assertCurrentComponentMeasureType(state, 'layout-effect-unmount');

    if (state.currentReactComponentMeasure !== null) {
      const componentMeasure = state.currentReactComponentMeasure;
      componentMeasure.duration = startTime - componentMeasure.timestamp;
      state.currentReactComponentMeasure = null;
      currentProfilerData.componentMeasures.push(componentMeasure);
    }
  } else if (name.startsWith('--component-passive-effect-mount-start-')) {
    const [componentName] = name.slice(39).split('-');
    assertNoOverlappingComponentMeasure(state);
    state.currentReactComponentMeasure = {
      componentName,
      timestamp: startTime,
      duration: 0,
      type: 'passive-effect-mount',
      warning: null
    };
  } else if (name === '--component-passive-effect-mount-stop') {
    assertCurrentComponentMeasureType(state, 'passive-effect-mount');

    if (state.currentReactComponentMeasure !== null) {
      const componentMeasure = state.currentReactComponentMeasure;
      componentMeasure.duration = startTime - componentMeasure.timestamp;
      state.currentReactComponentMeasure = null;
      currentProfilerData.componentMeasures.push(componentMeasure);
    }
  } else if (name.startsWith('--component-passive-effect-unmount-start-')) {
    const [componentName] = name.slice(41).split('-');
    assertNoOverlappingComponentMeasure(state);
    state.currentReactComponentMeasure = {
      componentName,
      timestamp: startTime,
      duration: 0,
      type: 'passive-effect-unmount',
      warning: null
    };
  } else if (name === '--component-passive-effect-unmount-stop') {
    assertCurrentComponentMeasureType(state, 'passive-effect-unmount');

    if (state.currentReactComponentMeasure !== null) {
      const componentMeasure = state.currentReactComponentMeasure;
      componentMeasure.duration = startTime - componentMeasure.timestamp;
      state.currentReactComponentMeasure = null;
      currentProfilerData.componentMeasures.push(componentMeasure);
    }
  }
}

function preprocessFlamechart(rawData) {
  let parsedData;

  try {
    parsedData = (0,library.importFromChromeTimeline)(rawData, 'react-devtools');
  } catch (error) {
    // Assume any Speedscope errors are caused by bad profiles
    const errorToRethrow = new InvalidProfileError(error.message);
    errorToRethrow.stack = error.stack;
    throw errorToRethrow;
  }

  const profile = parsedData.profiles[0]; // TODO: Choose the main CPU thread only

  const speedscopeFlamechart = new library.Flamechart({
    // $FlowFixMe[method-unbinding]
    getTotalWeight: profile.getTotalWeight.bind(profile),
    // $FlowFixMe[method-unbinding]
    forEachCall: profile.forEachCall.bind(profile),
    // $FlowFixMe[method-unbinding]
    formatValue: profile.formatValue.bind(profile),
    getColorBucketForFrame: () => 0
  });
  const flamechart = speedscopeFlamechart.getLayers().map(layer => layer.map(({
    start,
    end,
    node: {
      frame: {
        name,
        file,
        line,
        col
      }
    }
  }) => ({
    name,
    timestamp: start / 1000,
    duration: (end - start) / 1000,
    scriptUrl: file,
    locationLine: line,
    locationColumn: col
  })));
  return flamechart;
}

function parseStackFrame(stackFrame) {
  const error = new Error();
  error.stack = stackFrame;
  const frames = error_stack_parser_default().parse(error);
  return frames.length === 1 ? frames[0] : null;
}

async function preprocessData(timeline) {
  const flamechart = preprocessFlamechart(timeline);
  const laneToReactMeasureMap = new Map();

  for (let lane = 0; lane < REACT_TOTAL_NUM_LANES; lane++) {
    laneToReactMeasureMap.set(lane, []);
  }

  const profilerData = {
    batchUIDToMeasuresMap: new Map(),
    componentMeasures: [],
    duration: 0,
    flamechart,
    internalModuleSourceToRanges: new Map(),
    laneToLabelMap: new Map(),
    laneToReactMeasureMap,
    nativeEvents: [],
    networkMeasures: [],
    otherUserTimingMarks: [],
    reactVersion: null,
    schedulingEvents: [],
    snapshots: [],
    snapshotHeight: 0,
    startTime: 0,
    suspenseEvents: [],
    thrownErrors: []
  }; // Sort \`timeline\`. JSON Array Format trace events need not be ordered. See:
  // https://docs.google.com/document/d/1CvAClvFfyA5R-PhYUmn5OOQtYMH4h6I0nSsKchNAySU/preview#heading=h.f2f0yd51wi15

  timeline = timeline.filter(Boolean).sort((a, b) => a.ts > b.ts ? 1 : -1); // Events displayed in flamechart have timestamps relative to the profile
  // event's startTime. Source: https://github.com/v8/v8/blob/44bd8fd7/src/inspector/js_protocol.json#L1486
  //
  // We'll thus expect there to be a 'Profile' event; if there is not one, we
  // can deduce that there are no flame chart events. As we expect React
  // scheduling profiling user timing marks to be recorded together with browser
  // flame chart events, we can futher deduce that the data is invalid and we
  // don't bother finding React events.

  const indexOfProfileEvent = timeline.findIndex(event => event.name === 'Profile');

  if (indexOfProfileEvent === -1) {
    return profilerData;
  } // Use Profile event's \`startTime\` as the start time to align with flame chart.
  // TODO: Remove assumption that there'll only be 1 'Profile' event. If this
  // assumption does not hold, the chart may start at the wrong time.


  profilerData.startTime = timeline[indexOfProfileEvent].args.data.startTime;
  profilerData.duration = (timeline[timeline.length - 1].ts - profilerData.startTime) / 1000;
  const state = {
    asyncProcessingPromises: [],
    batchUID: 0,
    currentReactComponentMeasure: null,
    internalModuleCurrentStackFrame: null,
    internalModuleStackStringSet: new Set(),
    measureStack: [],
    nativeEventStack: [],
    nextRenderShouldGenerateNewBatchID: true,
    potentialLongEvents: [],
    potentialLongNestedUpdate: null,
    potentialLongNestedUpdates: [],
    potentialSuspenseEventsOutsideOfTransition: [],
    requestIdToNetworkMeasureMap: new Map(),
    uidCounter: 0,
    unresolvedSuspenseEvents: new Map()
  };
  timeline.forEach(event => processTimelineEvent(event, profilerData, state));

  if (profilerVersion === null) {
    if (profilerData.schedulingEvents.length === 0 && profilerData.batchUIDToMeasuresMap.size === 0) {
      // No profiler version could indicate data was logged using an older build of React,
      // before an explicitly profiler version was included in the logging data.
      // But it could also indicate that the website was either not using React, or using a production build.
      // The easiest way to check for this case is to see if the data contains any scheduled updates or render work.
      throw new InvalidProfileError('No React marks were found in the provided profile.' + ' Please provide profiling data from an React application running in development or profiling mode.');
    }

    throw new InvalidProfileError(\`This version of profiling data is not supported by the current profiler.\`);
  } // Validate that all events and measures are complete


  const {
    measureStack
  } = state;

  if (measureStack.length > 0) {
    console.error('Incomplete events or measures', measureStack);
  } // Check for warnings.


  state.potentialLongEvents.forEach(([nativeEvent, batchUID]) => {
    // See how long the subsequent batch of React work was.
    // Ignore any work that was already started.
    const [startTime, stopTime] = getBatchRange(batchUID, profilerData, nativeEvent.timestamp);

    if (stopTime - startTime > NATIVE_EVENT_DURATION_THRESHOLD) {
      nativeEvent.warning = WARNING_STRINGS.LONG_EVENT_HANDLER;
    }
  });
  state.potentialLongNestedUpdates.forEach(([schedulingEvent, batchUID]) => {
    // See how long the subsequent batch of React work was.
    const [startTime, stopTime] = getBatchRange(batchUID, profilerData);

    if (stopTime - startTime > NESTED_UPDATE_DURATION_THRESHOLD) {
      // Don't warn about transition updates scheduled during the commit phase.
      // e.g. useTransition, useDeferredValue
      // These are allowed to be long-running.
      if (!schedulingEvent.lanes.some(lane => profilerData.laneToLabelMap.get(lane) === 'Transition')) {// FIXME: This warning doesn't account for "nested updates" that are
        // spawned by useDeferredValue. Disabling temporarily until we figure
        // out the right way to handle this.
        // schedulingEvent.warning = WARNING_STRINGS.NESTED_UPDATE;
      }
    }
  });
  state.potentialSuspenseEventsOutsideOfTransition.forEach(([suspenseEvent, lanes]) => {
    // HACK This is a bit gross but the numeric lane value might change between render versions.
    if (!lanes.some(lane => profilerData.laneToLabelMap.get(lane) === 'Transition')) {
      suspenseEvent.warning = WARNING_STRINGS.SUSPEND_DURING_UPDATE;
    }
  }); // Wait for any async processing to complete before returning.
  // Since processing is done in a worker, async work must complete before data is serialized and returned.

  await Promise.all(state.asyncProcessingPromises); // Now that all images have been loaded, let's figure out the display size we're going to use for our thumbnails:
  // both the ones rendered to the canvas and the ones shown on hover.

  if (profilerData.snapshots.length > 0) {
    // NOTE We assume a static window size here, which is not necessarily true but should be for most cases.
    // Regardless, Chrome also sets a single size/ratio and stick with it- so we'll do the same.
    const snapshot = profilerData.snapshots[0];
    profilerData.snapshotHeight = Math.min(snapshot.height, SNAPSHOT_MAX_HEIGHT);
  }

  return profilerData;
}
// EXTERNAL MODULE: ../../node_modules/nullthrows/nullthrows.js
var nullthrows = __webpack_require__(69);
var nullthrows_default = /*#__PURE__*/__webpack_require__.n(nullthrows);
;// CONCATENATED MODULE: ../react-devtools-timeline/src/import-worker/readInputData.js
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */


const readInputData = file => {
  if (!file.name.endsWith('.json')) {
    throw new InvalidProfileError('Invalid file type. Only JSON performance profiles are supported');
  }

  const fileReader = new FileReader();
  return new Promise((resolve, reject) => {
    fileReader.onload = () => {
      const result = nullthrows_default()(fileReader.result);

      if (typeof result === 'string') {
        resolve(result);
      }

      reject(new InvalidProfileError('Input file was not read as a string'));
    };

    fileReader.onerror = () => reject(fileReader.error);

    fileReader.readAsText(file);
  });
};
;// CONCATENATED MODULE: ../react-devtools-timeline/src/import-worker/importFile.js
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */




async function importFile(file) {
  try {
    const readFile = await readInputData(file);
    const events = JSON.parse(readFile);

    if (events.length === 0) {
      throw new InvalidProfileError('No profiling data found in file.');
    }

    const processedData = await preprocessData(events);
    return {
      status: 'SUCCESS',
      processedData
    };
  } catch (error) {
    if (error instanceof InvalidProfileError) {
      return {
        status: 'INVALID_PROFILE_ERROR',
        error
      };
    } else {
      return {
        status: 'UNEXPECTED_ERROR',
        error
      };
    }
  }
}
;// CONCATENATED MODULE: ../../node_modules/workerize-loader/dist/rpc-worker-loader.js!../../node_modules/babel-loader/lib/index.js??ruleSet[1].rules[0].use[1]!../../node_modules/babel-loader/lib/index.js??ruleSet[1].rules[1]!../react-devtools-timeline/src/import-worker/importFile.worker.js
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

const importFile_worker_importFile = importFile;
addEventListener('message', function (e) {var _e$data = e.data,type = _e$data.type,method = _e$data.method,id = _e$data.id,params = _e$data.params,f,p;if (type === 'RPC' && method) {if (f = __webpack_exports__[method]) {p = Promise.resolve().then(function () {return f.apply(__webpack_exports__, params);});} else {p = Promise.reject('No such method');}p.then(function (result) {postMessage({type: 'RPC',id: id,result: result});}).catch(function (e) {var error = {message: e};if (e.stack) {error.message = e.message;error.stack = e.stack;error.name = e.name;}postMessage({type: 'RPC',id: id,error: error});});}});postMessage({type: 'RPC',method: 'ready'});
})();

/******/ })()
;
//# sourceMappingURL=importFile.worker.worker.js.map`])), { name: "[name].worker.js" });
              URL.revokeObjectURL(URL.createObjectURL(new Blob([`/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 496:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.importFromOldV8CPUProfile = exports.importFromChromeCPUProfile = exports.importFromChromeTimeline = exports.isChromeTimeline = void 0;

const profile_1 = __webpack_require__(211);

const utils_1 = __webpack_require__(844);

const value_formatters_1 = __webpack_require__(218);

const v8cpuFormatter_1 = __webpack_require__(320);

function isChromeTimeline(rawProfile) {
  if (!Array.isArray(rawProfile)) return false;
  if (rawProfile.length < 1) return false;
  const first = rawProfile[0];
  if (!('pid' in first && 'tid' in first && 'ph' in first && 'cat' in first)) return false;
  if (!rawProfile.find(e => e.name === 'CpuProfile' || e.name === 'Profile' || e.name === 'ProfileChunk')) return false;
  return true;
}

exports.isChromeTimeline = isChromeTimeline;

function importFromChromeTimeline(events, fileName) {
  // It seems like sometimes Chrome timeline files contain multiple CpuProfiles?
  // For now, choose the first one in the list.
  const cpuProfileByID = new Map(); // Maps profile IDs (like "0x3") to pid/tid pairs formatted as \`\${pid}:\${tid}\`

  const pidTidById = new Map(); // Maps pid/tid pairs to thread names

  const threadNameByPidTid = new Map(); // The events aren't necessarily recorded in chronological order. Sort them so
  // that they are.

  utils_1.sortBy(events, e => e.ts);

  for (let event of events) {
    if (event.name === 'CpuProfile') {
      const pidTid = \`\${event.pid}:\${event.tid}\`;
      const id = event.id || pidTid;
      cpuProfileByID.set(id, event.args.data.cpuProfile);
      pidTidById.set(id, pidTid);
    }

    if (event.name === 'Profile') {
      const pidTid = \`\${event.pid}:\${event.tid}\`;
      cpuProfileByID.set(event.id || pidTid, Object.assign({
        startTime: 0,
        endTime: 0,
        nodes: [],
        samples: [],
        timeDeltas: []
      }, event.args.data));

      if (event.id) {
        pidTidById.set(event.id, \`\${event.pid}:\${event.tid}\`);
      }
    }

    if (event.name === 'thread_name') {
      threadNameByPidTid.set(\`\${event.pid}:\${event.tid}\`, event.args.name);
    }

    if (event.name === 'ProfileChunk') {
      const pidTid = \`\${event.pid}:\${event.tid}\`;
      const cpuProfile = cpuProfileByID.get(event.id || pidTid);

      if (cpuProfile) {
        const chunk = event.args.data;

        if (chunk.cpuProfile) {
          if (chunk.cpuProfile.nodes) {
            cpuProfile.nodes = cpuProfile.nodes.concat(chunk.cpuProfile.nodes);
          }

          if (chunk.cpuProfile.samples) {
            cpuProfile.samples = cpuProfile.samples.concat(chunk.cpuProfile.samples);
          }
        }

        if (chunk.timeDeltas) {
          cpuProfile.timeDeltas = cpuProfile.timeDeltas.concat(chunk.timeDeltas);
        }

        if (chunk.startTime != null) {
          cpuProfile.startTime = chunk.startTime;
        }

        if (chunk.endTime != null) {
          cpuProfile.endTime = chunk.endTime;
        }
      } else {
        console.warn(\`Ignoring ProfileChunk for undeclared Profile with id \${event.id || pidTid}\`);
      }
    }
  }

  if (cpuProfileByID.size > 0) {
    const profiles = [];
    let indexToView = 0;
    utils_1.itForEach(cpuProfileByID.keys(), profileId => {
      let threadName = null;
      let pidTid = pidTidById.get(profileId);

      if (pidTid) {
        threadName = threadNameByPidTid.get(pidTid) || null;

        if (threadName) {}
      }

      const profile = importFromChromeCPUProfile(cpuProfileByID.get(profileId));

      if (threadName && cpuProfileByID.size > 1) {
        profile.setName(\`\${fileName} - \${threadName}\`);

        if (threadName === 'CrRendererMain') {
          indexToView = profiles.length;
        }
      } else {
        profile.setName(\`\${fileName}\`);
      }

      profiles.push(profile);
    });
    return {
      name: fileName,
      indexToView,
      profiles
    };
  } else {
    throw new Error('Could not find CPU profile in Timeline');
  }
}

exports.importFromChromeTimeline = importFromChromeTimeline;
const callFrameToFrameInfo = new Map();

function frameInfoForCallFrame(callFrame) {
  return utils_1.getOrInsert(callFrameToFrameInfo, callFrame, callFrame => {
    const name = callFrame.functionName || '(anonymous)';
    const file = callFrame.url;
    const line = callFrame.lineNumber;
    const col = callFrame.columnNumber;
    return {
      key: \`\${name}:\${file}:\${line}:\${col}\`,
      name,
      file,
      line,
      col
    };
  });
}

function shouldIgnoreFunction(callFrame) {
  const {
    functionName,
    url
  } = callFrame;

  if (url === 'native dummy.js') {
    // I'm not really sure what this is about, but this seems to be used
    // as a way of avoiding edge cases in V8's implementation.
    // See: https://github.com/v8/v8/blob/b8626ca4/tools/js2c.py#L419-L424
    return true;
  }

  return functionName === '(root)' || functionName === '(idle)';
}

function shouldPlaceOnTopOfPreviousStack(functionName) {
  return functionName === '(garbage collector)' || functionName === '(program)';
}

function importFromChromeCPUProfile(chromeProfile) {
  const profile = new profile_1.CallTreeProfileBuilder(chromeProfile.endTime - chromeProfile.startTime);
  const nodeById = new Map();

  for (let node of chromeProfile.nodes) {
    nodeById.set(node.id, node);
  }

  for (let node of chromeProfile.nodes) {
    if (typeof node.parent === 'number') {
      node.parent = nodeById.get(node.parent);
    }

    if (!node.children) continue;

    for (let childId of node.children) {
      const child = nodeById.get(childId);
      if (!child) continue;
      child.parent = node;
    }
  }

  const samples = [];
  const sampleTimes = []; // The first delta is relative to the profile startTime.
  // Ref: https://github.com/v8/v8/blob/44bd8fd7/src/inspector/js_protocol.json#L1485

  let elapsed = chromeProfile.timeDeltas[0]; // Prevents negative time deltas from causing bad data. See
  // https://github.com/jlfwong/speedscope/pull/305 for details.

  let lastValidElapsed = elapsed;
  let lastNodeId = NaN; // The chrome CPU profile format doesn't collapse identical samples. We'll do that
  // here to save a ton of work later doing mergers.

  for (let i = 0; i < chromeProfile.samples.length; i++) {
    const nodeId = chromeProfile.samples[i];

    if (nodeId != lastNodeId) {
      samples.push(nodeId);

      if (elapsed < lastValidElapsed) {
        sampleTimes.push(lastValidElapsed);
      } else {
        sampleTimes.push(elapsed);
        lastValidElapsed = elapsed;
      }
    }

    if (i === chromeProfile.samples.length - 1) {
      if (!isNaN(lastNodeId)) {
        samples.push(lastNodeId);

        if (elapsed < lastValidElapsed) {
          sampleTimes.push(lastValidElapsed);
        } else {
          sampleTimes.push(elapsed);
          lastValidElapsed = elapsed;
        }
      }
    } else {
      const timeDelta = chromeProfile.timeDeltas[i + 1];
      elapsed += timeDelta;
      lastNodeId = nodeId;
    }
  }

  let prevStack = [];

  for (let i = 0; i < samples.length; i++) {
    const value = sampleTimes[i];
    const nodeId = samples[i];
    let stackTop = nodeById.get(nodeId);
    if (!stackTop) continue; // Find lowest common ancestor of the current stack and the previous one

    let lca = null; // This is O(n^2), but n should be relatively small here (stack height),
    // so hopefully this isn't much of a problem

    for (lca = stackTop; lca && prevStack.indexOf(lca) === -1; lca = shouldPlaceOnTopOfPreviousStack(lca.callFrame.functionName) ? utils_1.lastOf(prevStack) : lca.parent || null) {} // Close frames that are no longer open


    while (prevStack.length > 0 && utils_1.lastOf(prevStack) != lca) {
      const closingNode = prevStack.pop();
      const frame = frameInfoForCallFrame(closingNode.callFrame);
      profile.leaveFrame(frame, value);
    } // Open frames that are now becoming open


    const toOpen = [];

    for (let node = stackTop; node && node != lca && !shouldIgnoreFunction(node.callFrame); // Place Chrome internal functions on top of the previous call stack
    node = shouldPlaceOnTopOfPreviousStack(node.callFrame.functionName) ? utils_1.lastOf(prevStack) : node.parent || null) {
      toOpen.push(node);
    }

    toOpen.reverse();

    for (let node of toOpen) {
      profile.enterFrame(frameInfoForCallFrame(node.callFrame), value);
    }

    prevStack = prevStack.concat(toOpen);
  } // Close frames that are open at the end of the trace


  for (let i = prevStack.length - 1; i >= 0; i--) {
    profile.leaveFrame(frameInfoForCallFrame(prevStack[i].callFrame), utils_1.lastOf(sampleTimes));
  }

  profile.setValueFormatter(new value_formatters_1.TimeFormatter('microseconds'));
  return profile.build();
}

exports.importFromChromeCPUProfile = importFromChromeCPUProfile;

function importFromOldV8CPUProfile(content) {
  return importFromChromeCPUProfile(v8cpuFormatter_1.chromeTreeToNodes(content));
}

exports.importFromOldV8CPUProfile = importFromOldV8CPUProfile;

/***/ }),

/***/ 320:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.chromeTreeToNodes = void 0;

function treeToArray(root) {
  const nodes = [];

  function visit(node) {
    nodes.push({
      id: node.id,
      callFrame: {
        columnNumber: 0,
        functionName: node.functionName,
        lineNumber: node.lineNumber,
        scriptId: node.scriptId,
        url: node.url
      },
      hitCount: node.hitCount,
      children: node.children.map(child => child.id)
    });
    node.children.forEach(visit);
  }

  visit(root);
  return nodes;
}

function timestampsToDeltas(timestamps, startTime) {
  return timestamps.map((timestamp, index) => {
    const lastTimestamp = index === 0 ? startTime * 1000000 : timestamps[index - 1];
    return timestamp - lastTimestamp;
  });
}
/**
 * Convert the old tree-based format to the new flat-array based format
 */


function chromeTreeToNodes(content) {
  // Note that both startTime and endTime are now in microseconds
  return {
    samples: content.samples,
    startTime: content.startTime * 1000000,
    endTime: content.endTime * 1000000,
    nodes: treeToArray(content.head),
    timeDeltas: timestampsToDeltas(content.timestamps, content.startTime)
  };
}

exports.chromeTreeToNodes = chromeTreeToNodes;

/***/ }),

/***/ 765:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.demangleCpp = void 0;
let cppfilt;
const cache = new Map(); // This function converts a mangled C++ name such as "__ZNK7Support6ColorFeqERKS0_"
// into a human-readable symbol (in this case "Support::ColorF::==(Support::ColorF&)")

function demangleCpp(name) {
  if (name.startsWith('__Z')) {
    let result = cache.get(name);

    if (result !== undefined) {
      name = result;
    } else {
      if (!cppfilt) {
        cppfilt = new Function('exports', code)();
      }

      result = cppfilt(name.slice(1));
      result = result === '(null)' ? name : result;
      cache.set(name, result);
      name = result;
    }
  }

  return name;
}

exports.demangleCpp = demangleCpp; // This was taken from https://d.fuqu.jp/c++filtjs/

const code = \`
return function(){function r(r){eval.call(null,r)}function a(r){throw print(r+":\\\\n"+(new Error).stack),ke=!0,"Assertion: "+r}function e(r,e){r||a("Assertion failed: "+e)}function i(r,a,i,v){function t(r,a){if("string"==a){var e=Oe;return le.stackAlloc(r.length+1),A(r,e),e}return r}function f(r,a){return"string"==a?s(r):r}try{func=ce.Module["_"+r]}catch(r){}e(func,"Cannot call unknown function "+r+" (perhaps LLVM optimizations or closure removed it?)");var _=0,n=v?v.map(function(r){return t(r,i[_++])}):[];return f(func.apply(null,n),a)}function v(r,a,e){return function(){return i(r,a,e,Array.prototype.slice.call(arguments))}}function t(r,e,i,v){switch(i=i||"i8","*"===i[i.length-1]&&(i="i32"),i){case"i1":Ae[r]=e;break;case"i8":Ae[r]=e;break;case"i16":ye[r>>1]=e;break;case"i32":Se[r>>2]=e;break;case"i64":Se[r>>2]=e;break;case"float":Ce[r>>2]=e;break;case"double":ze[0]=e,Se[r>>2]=xe[0],Se[r+4>>2]=xe[1];break;default:a("invalid type for setValue: "+i)}}function f(r,e,i){switch(e=e||"i8","*"===e[e.length-1]&&(e="i32"),e){case"i1":return Ae[r];case"i8":return Ae[r];case"i16":return ye[r>>1];case"i32":return Se[r>>2];case"i64":return Se[r>>2];case"float":return Ce[r>>2];case"double":return xe[0]=Se[r>>2],xe[1]=Se[r+4>>2],ze[0];default:a("invalid type for setValue: "+e)}return null}function _(r,a,e){var i,v;"number"==typeof r?(i=!0,v=r):(i=!1,v=r.length);var f="string"==typeof a?a:null,_=[Jr,le.stackAlloc,le.staticAlloc][void 0===e?we:e](Math.max(v,f?1:a.length));if(i)return Fa(_,0,v),_;for(var s,n=0;n<v;){var o=r[n];"function"==typeof o&&(o=le.getFunctionIndex(o)),s=f||a[n],0!==s?("i64"==s&&(s="i32"),t(_+n,o,s),n+=le.getNativeTypeSize(s)):n++}return _}function s(r,a){for(var e,i="undefined"==typeof a,v="",t=0,f=String.fromCharCode(0);;){if(e=String.fromCharCode(ge[r+t]),i&&e==f)break;if(v+=e,t+=1,!i&&t==a)break}return v}function n(r){for(var a="",e=0;e<r.length;e++)a+=String.fromCharCode(r[e]);return a}function o(r){return r+4095>>12<<12}function l(){for(;Le<=Ie;)Le=o(2*Le);var r=Ae,a=new ArrayBuffer(Le);Ae=new Int8Array(a),ye=new Int16Array(a),Se=new Int32Array(a),ge=new Uint8Array(a),me=new Uint16Array(a),Me=new Uint32Array(a),Ce=new Float32Array(a),Re=new Float64Array(a),Ae.set(r)}function b(r){for(;r.length>0;){var a=r.shift(),e=a.func;"number"==typeof e&&(e=pe[e]),e(void 0===a.arg?null:a.arg)}}function k(){b(Ve)}function u(){b(Be),be.print()}function c(r,a){return Array.prototype.slice.call(Ae.subarray(r,r+a))}function h(r,a){for(var e=new Uint8Array(a),i=0;i<a;++i)e[i]=Ae[r+i];return e.buffer}function d(r){for(var a=0;Ae[r+a];)a++;return a}function w(r,a){var e=d(r);a&&e++;var i=c(r,e);return a&&(i[e-1]=0),i}function p(r,a){for(var e=[],i=0;i<r.length;){var v=r.charCodeAt(i);v>255&&(v&=255),e.push(v),i+=1}return a||e.push(0),e}function E(r){for(var a=[],e=0;e<r.length;e++){var i=r[e];i>255&&(i&=255),a.push(String.fromCharCode(i))}return a.join("")}function A(r,a,e){for(var i=0;i<r.length;){var v=r.charCodeAt(i);v>255&&(v&=255),Ae[a+i]=v,i+=1}e||(Ae[a+i]=0)}function g(r,a,e,i){return r>=0?r:a<=32?2*Math.abs(1<<a-1)+r:Math.pow(2,a)+r}function y(r,a,e,i){if(r<=0)return r;var v=a<=32?Math.abs(1<<a-1):Math.pow(2,a-1);return r>=v&&(a<=32||r>v)&&(r=-2*v+r),r}function m(r,a,e){if(0==(0|r)|0==(0|a)|0==(0|e))var i=0;else{Se[r>>2]=0,Se[r+4>>2]=a,Se[r+8>>2]=e;var i=1}var i;return i}function S(r,a,e){if(0==(0|r)|(0|a)<0|0==(0|e))var i=0;else{Se[r>>2]=41,Se[r+4>>2]=a,Se[r+8>>2]=e;var i=1}var i;return i}function M(r,a,e){if(0==(0|r)|0==(0|e))var i=0;else{Se[r>>2]=6,Se[r+4>>2]=a,Se[r+8>>2]=e;var i=1}var i;return i}function C(r,a,e){if(0==(0|r)|0==(0|e))var i=0;else{Se[r>>2]=7,Se[r+4>>2]=a,Se[r+8>>2]=e;var i=1}var i;return i}function R(r,a){var e,i=0==(0|a);do if(i)var v=0;else{var e=(r+32|0)>>2,t=Se[e];if((0|t)>=(0|Se[r+36>>2])){var v=0;break}var f=(t<<2)+Se[r+28>>2]|0;Se[f>>2]=a;var _=Se[e]+1|0;Se[e]=_;var v=1}while(0);var v;return v}function T(r,a){var e,e=(r+12|0)>>2,i=Se[e],v=i+1|0;Se[e]=v;var t=Ae[i]<<24>>24==95;do if(t){var f=i+2|0;if(Se[e]=f,Ae[v]<<24>>24!=90){var _=0;break}var s=O(r,a),_=s}else var _=0;while(0);var _;return _}function O(r,a){var e=r+12|0,i=Ae[Se[e>>2]];r:do if(i<<24>>24==71||i<<24>>24==84)var v=Tr(r),t=v;else{var f=Ar(r),_=0==(0|f)|0==(0|a);do if(!_){if(0!=(1&Se[r+8>>2]|0))break;var s=Me[f>>2],n=(s-25|0)>>>0<3;a:do if(n)for(var o=f;;){var o,l=Me[o+4>>2],b=Me[l>>2];if((b-25|0)>>>0>=3){var k=l,u=b;break a}var o=l}else var k=f,u=s;while(0);var u,k;if(2!=(0|u)){var t=k;break r}var c=k+8|0,h=Me[c>>2],d=(Se[h>>2]-25|0)>>>0<3;a:do if(d)for(var w=h;;){var w,p=Me[w+4>>2];if((Se[p>>2]-25|0)>>>0>=3){var E=p;break a}var w=p}else var E=h;while(0);var E;Se[c>>2]=E;var t=k;break r}while(0);var A=Ae[Se[e>>2]];if(A<<24>>24==0||A<<24>>24==69){var t=f;break}var g=Or(f),y=Sr(r,g),m=D(r,3,f,y),t=m}while(0);var t;return t}function N(r){var a,e,i=Oe;Oe+=4;var v=i,e=v>>2,a=(r+12|0)>>2,t=Me[a],f=Ae[t],_=f<<24>>24;r:do if(f<<24>>24==114||f<<24>>24==86||f<<24>>24==75){var s=I(r,v,0);if(0==(0|s)){var n=0;break}var o=N(r);Se[s>>2]=o;var l=Se[e],b=R(r,l);if(0==(0|b)){var n=0;break}var n=Se[e]}else{do{if(97==(0|_)||98==(0|_)||99==(0|_)||100==(0|_)||101==(0|_)||102==(0|_)||103==(0|_)||104==(0|_)||105==(0|_)||106==(0|_)||108==(0|_)||109==(0|_)||110==(0|_)||111==(0|_)||115==(0|_)||116==(0|_)||118==(0|_)||119==(0|_)||120==(0|_)||121==(0|_)||122==(0|_)){var k=ai+20*(_-97)|0,u=P(r,k);Se[e]=u;var c=r+48|0,h=Se[c>>2]+Se[Se[u+4>>2]+4>>2]|0;Se[c>>2]=h;var d=Se[a]+1|0;Se[a]=d;var n=u;break r}if(117==(0|_)){Se[a]=t+1|0;var w=L(r),p=D(r,34,w,0);Se[e]=p;var E=p}else if(70==(0|_)){var A=F(r);Se[e]=A;var E=A}else if(48==(0|_)||49==(0|_)||50==(0|_)||51==(0|_)||52==(0|_)||53==(0|_)||54==(0|_)||55==(0|_)||56==(0|_)||57==(0|_)||78==(0|_)||90==(0|_)){var g=X(r);Se[e]=g;var E=g}else if(65==(0|_)){var y=j(r);Se[e]=y;var E=y}else if(77==(0|_)){var m=U(r);Se[e]=m;var E=m}else if(84==(0|_)){var S=x(r);if(Se[e]=S,Ae[Se[a]]<<24>>24!=73){var E=S;break}var M=R(r,S);if(0==(0|M)){var n=0;break r}var C=Se[e],T=z(r),O=D(r,4,C,T);Se[e]=O;var E=O}else if(83==(0|_)){var B=ge[t+1|0];if((B-48&255&255)<10|B<<24>>24==95|(B-65&255&255)<26){var H=V(r,0);if(Se[e]=H,Ae[Se[a]]<<24>>24!=73){var n=H;break r}var K=z(r),Y=D(r,4,H,K);Se[e]=Y;var E=Y}else{var G=X(r);if(Se[e]=G,0==(0|G)){var E=0;break}if(21==(0|Se[G>>2])){var n=G;break r}var E=G}}else if(80==(0|_)){Se[a]=t+1|0;var W=N(r),Z=D(r,29,W,0);Se[e]=Z;var E=Z}else if(82==(0|_)){Se[a]=t+1|0;var Q=N(r),q=D(r,30,Q,0);Se[e]=q;var E=q}else if(67==(0|_)){Se[a]=t+1|0;var $=N(r),J=D(r,31,$,0);Se[e]=J;var E=J}else if(71==(0|_)){Se[a]=t+1|0;var rr=N(r),ar=D(r,32,rr,0);Se[e]=ar;var E=ar}else{if(85!=(0|_)){var n=0;break r}Se[a]=t+1|0;var er=L(r);Se[e]=er;var ir=N(r),vr=Se[e],tr=D(r,28,ir,vr);Se[e]=tr;var E=tr}}while(0);var E,fr=R(r,E);if(0==(0|fr)){var n=0;break}var n=Se[e]}while(0);var n;return Oe=i,n}function I(r,a,e){for(var i,v=r+12|0,t=0!=(0|e),f=t?25:22,i=(r+48|0)>>2,_=t?26:23,s=t?27:24,n=a;;){var n,o=Se[v>>2],l=Ae[o];if(l<<24>>24!=114&&l<<24>>24!=86&&l<<24>>24!=75){var b=n;break}var k=o+1|0;if(Se[v>>2]=k,l<<24>>24==114){var u=Se[i]+9|0;Se[i]=u;var c=f}else if(l<<24>>24==86){var h=Se[i]+9|0;Se[i]=h;var c=_}else{var d=Se[i]+6|0;Se[i]=d;var c=s}var c,w=D(r,c,0,0);if(Se[n>>2]=w,0==(0|w)){var b=0;break}var n=w+4|0}var b;return b}function P(r,a){var e=0==(0|a);do if(e)var i=0;else{var v=J(r);if(0==(0|v)){var i=0;break}Se[v>>2]=33,Se[v+4>>2]=a;var i=v}while(0);var i;return i}function D(r,a,e,i){var v,t;do{if(1==(0|a)||2==(0|a)||3==(0|a)||4==(0|a)||10==(0|a)||28==(0|a)||37==(0|a)||43==(0|a)||44==(0|a)||45==(0|a)||46==(0|a)||47==(0|a)||48==(0|a)||49==(0|a)||50==(0|a)){if(0==(0|e)|0==(0|i)){var f=0;t=7;break}t=5;break}if(8==(0|a)||9==(0|a)||11==(0|a)||12==(0|a)||13==(0|a)||14==(0|a)||15==(0|a)||16==(0|a)||17==(0|a)||18==(0|a)||19==(0|a)||20==(0|a)||29==(0|a)||30==(0|a)||31==(0|a)||32==(0|a)||34==(0|a)||38==(0|a)||39==(0|a)||42==(0|a)){if(0==(0|e)){var f=0;t=7;break}t=5;break}if(36==(0|a)){if(0==(0|i)){var f=0;t=7;break}t=5;break}if(35==(0|a)||22==(0|a)||23==(0|a)||24==(0|a)||25==(0|a)||26==(0|a)||27==(0|a))t=5;else{var f=0;t=7}}while(0);do if(5==t){var _=J(r),v=_>>2;if(0==(0|_)){var f=0;break}Se[v]=a,Se[v+1]=e,Se[v+2]=i;var f=_}while(0);var f;return f}function L(r){var a=sr(r);if((0|a)<1)var e=0;else{var i=Rr(r,a);Se[r+44>>2]=i;var e=i}var e;return e}function F(r){var a,a=(r+12|0)>>2,e=Se[a],i=e+1|0;if(Se[a]=i,Ae[e]<<24>>24==70){if(Ae[i]<<24>>24==89){var v=e+2|0;Se[a]=v}var t=Sr(r,1),f=Se[a],_=f+1|0;Se[a]=_;var s=Ae[f]<<24>>24==69?t:0,n=s}else var n=0;var n;return n}function X(r){var a=Ar(r);return a}function j(r){var a,a=(r+12|0)>>2,e=Se[a],i=e+1|0;Se[a]=i;var v=Ae[e]<<24>>24==65;do if(v){var t=Ae[i];if(t<<24>>24==95)var f=0;else if((t-48&255&255)<10){for(var _=i;;){var _,s=_+1|0;if(Se[a]=s,(Ae[s]-48&255&255)>=10)break;var _=s}var n=s-i|0,o=lr(r,i,n);if(0==(0|o)){var l=0;break}var f=o}else{var b=nr(r);if(0==(0|b)){var l=0;break}var f=b}var f,k=Se[a],u=k+1|0;if(Se[a]=u,Ae[k]<<24>>24!=95){var l=0;break}var c=N(r),h=D(r,36,f,c),l=h}else var l=0;while(0);var l;return l}function U(r){var a=Oe;Oe+=4;var e=a,i=r+12|0,v=Se[i>>2],t=v+1|0;Se[i>>2]=t;var f=Ae[v]<<24>>24==77;r:do if(f){var _=N(r),s=I(r,e,1);if(0==(0|s)){var n=0;break}var o=N(r);Se[s>>2]=o;var l=(0|s)==(0|e);do if(!l){if(35==(0|Se[o>>2]))break;var b=Se[e>>2],k=R(r,b);if(0==(0|k)){var n=0;break r}}while(0);var u=Se[e>>2],c=D(r,37,_,u),n=c}else var n=0;while(0);var n;return Oe=a,n}function x(r){var a,a=(r+12|0)>>2,e=Se[a],i=e+1|0;Se[a]=i;var v=Ae[e]<<24>>24==84;do if(v){if(Ae[i]<<24>>24==95)var t=0,f=i;else{var _=sr(r);if((0|_)<0){var s=0;break}var t=_+1|0,f=Se[a]}var f,t;if(Se[a]=f+1|0,Ae[f]<<24>>24!=95){var s=0;break}var n=r+40|0,o=Se[n>>2]+1|0;Se[n>>2]=o;var l=Er(r,t),s=l}else var s=0;while(0);var s;return s}function z(r){var a,e=Oe;Oe+=4;var i=e,v=r+44|0,t=Se[v>>2],a=(r+12|0)>>2,f=Se[a],_=f+1|0;Se[a]=_;var s=Ae[f]<<24>>24==73;r:do if(s){Se[i>>2]=0;for(var n=i;;){var n,o=_r(r);if(0==(0|o)){var l=0;break r}var b=D(r,39,o,0);if(Se[n>>2]=b,0==(0|b)){var l=0;break r}var k=Se[a];if(Ae[k]<<24>>24==69)break;var n=b+8|0}var u=k+1|0;Se[a]=u,Se[v>>2]=t;var l=Se[i>>2]}else var l=0;while(0);var l;return Oe=e,l}function V(r,a){var e,e=(r+12|0)>>2,i=Se[e],v=i+1|0;Se[e]=v;var t=Ae[i]<<24>>24==83;r:do if(t){var f=i+2|0;Se[e]=f;var _=ge[v];if(_<<24>>24==95)var s=0;else{if(!((_-48&255&255)<10|(_-65&255&255)<26)){var n=8&Se[r+8>>2],o=n>>>3,l=0!=(0|n)|0==(0|a);do if(l)var b=o;else{if((Ae[f]-67&255&255)>=2){var b=o;break}var b=1}while(0);for(var b,k=0|ei;;){var k;if(k>>>0>=(ei+196|0)>>>0){var u=0;break r}if(_<<24>>24==Ae[0|k]<<24>>24)break;var k=k+28|0}var c=Se[k+20>>2];if(0!=(0|c)){var h=Se[k+24>>2],d=fr(r,c,h);Se[r+44>>2]=d}if(0==(0|b))var w=k+8|0,p=k+4|0;else var w=k+16|0,p=k+12|0;var p,w,E=Se[w>>2],A=Se[p>>2],g=r+48|0,y=Se[g>>2]+E|0;Se[g>>2]=y;var m=fr(r,A,E),u=m;break}for(var S=_,M=0,C=f;;){var C,M,S;if((S-48&255&255)<10)var R=36*M-48|0;else{if((S-65&255&255)>=26){var u=0;break r}var R=36*M-55|0}var R,T=(S<<24>>24)+R|0;if((0|T)<0){var u=0;break r}var O=C+1|0;Se[e]=O;var N=ge[C];if(N<<24>>24==95)break;var S=N,M=T,C=O}var s=T+1|0}var s;if((0|s)>=(0|Se[r+32>>2])){var u=0;break}var I=r+40|0,P=Se[I>>2]+1|0;Se[I>>2]=P;var u=Se[Se[r+28>>2]+(s<<2)>>2]}else var u=0;while(0);var u;return u}function B(r,a,e,i){var v,t,f,_,s=Oe;Oe+=28;var n,o=s,_=o>>2;Se[_]=r;var l=e+1|0,f=(o+12|0)>>2;Se[f]=l;var b=Jr(l),t=(o+4|0)>>2;if(Se[t]=b,0==(0|b))var k=0,u=1;else{var v=(o+8|0)>>2;Se[v]=0,Se[_+4]=0,Se[_+5]=0;var c=o+24|0;Se[c>>2]=0,H(o,a);var h=Me[t],d=0==(0|h);do{if(!d){var w=Me[v];if(w>>>0>=Me[f]>>>0){n=5;break}Se[v]=w+1|0,Ae[h+w|0]=0,n=6;break}n=5}while(0);5==n&&Y(o,0);var p=Se[t],E=0==(0|p)?Se[c>>2]:Se[f],k=p,u=E}var u,k;return Se[i>>2]=u,Oe=s,k}function H(r,a){var e,i,v,t,f,_,s,n,o,l,b,k,u,c,h,d,w,p,E,A,g,y,m,S,M,C,R,T,O,N,I,P,D,L,F,X,j,U,x,z,V,B,K,G,W,J,vr,tr,fr,_r,sr,nr,or,lr,br,kr,ur,cr,hr,dr,wr,pr=a>>2,Er=r>>2,Ar=Oe;Oe+=184;var gr,yr=Ar,wr=yr>>2,mr=Ar+64,dr=mr>>2,Sr=Ar+72,Mr=Ar+88,Cr=Ar+104,hr=Cr>>2,Rr=Ar+168,Tr=0==(0|a);r:do if(Tr)Z(r);else{var cr=(r+4|0)>>2,Or=Me[cr];if(0==(0|Or))break;var Nr=0|a,Ir=Me[Nr>>2];a:do{if(0==(0|Ir)){if(0!=(4&Se[Er]|0)){var Pr=Se[pr+1],Dr=Se[pr+2];q(r,Pr,Dr);break r}var ur=(r+8|0)>>2,Lr=Me[ur],Fr=a+8|0,Xr=Me[Fr>>2];if((Xr+Lr|0)>>>0>Me[Er+3]>>>0){var jr=Se[pr+1];Q(r,jr,Xr);break r}var Ur=Or+Lr|0,xr=Se[pr+1];Pa(Ur,xr,Xr,1);var zr=Se[ur]+Se[Fr>>2]|0;Se[ur]=zr;break r}if(1==(0|Ir)||2==(0|Ir)){var Vr=Se[pr+1];H(r,Vr);var Br=0==(4&Se[Er]|0),Hr=Me[cr],Kr=0!=(0|Hr);e:do if(Br){do if(Kr){var kr=(r+8|0)>>2,Yr=Me[kr];if((Yr+2|0)>>>0>Me[Er+3]>>>0)break;var Gr=Hr+Yr|0;oe=14906,Ae[Gr]=255&oe,oe>>=8,Ae[Gr+1]=255&oe;var Wr=Se[kr]+2|0;Se[kr]=Wr;break e}while(0);Q(r,0|He.__str120,2)}else{do if(Kr){var Zr=r+8|0,Qr=Me[Zr>>2];if(Qr>>>0>=Me[Er+3]>>>0)break;Se[Zr>>2]=Qr+1|0,Ae[Hr+Qr|0]=46;break e}while(0);Y(r,46)}while(0);var qr=Se[pr+2];H(r,qr);break r}if(3==(0|Ir)){for(var br=(r+20|0)>>2,$r=Me[br],lr=(r+16|0)>>2,Jr=a,ra=0,aa=$r;;){var aa,ra,Jr,ea=Me[Jr+4>>2];if(0==(0|ea)){var ia=ra,va=0;gr=33;break}if(ra>>>0>3){Z(r);break r}var ta=(ra<<4)+yr|0;Se[ta>>2]=aa,Se[br]=ta,Se[((ra<<4)+4>>2)+wr]=ea,Se[((ra<<4)+8>>2)+wr]=0;var fa=Me[lr];Se[((ra<<4)+12>>2)+wr]=fa;var _a=ra+1|0,sa=0|ea,na=Me[sa>>2];if((na-25|0)>>>0>=3){gr=25;break}var Jr=ea,ra=_a,aa=ta}e:do if(25==gr){if(4==(0|na)){Se[dr]=fa,Se[lr]=mr,Se[dr+1]=ea;var oa=Se[sa>>2],la=mr}else var oa=na,la=fa;var la,oa;if(2!=(0|oa)){var ia=_a,va=sa;break}for(var ba=_a,ka=ea+8|0;;){var ka,ba,ua=Me[ka>>2];if((Se[ua>>2]-25|0)>>>0>=3){var ia=ba,va=sa;break e}if(ba>>>0>3)break;var ca=(ba<<4)+yr|0,ha=ba-1|0,da=(ha<<4)+yr|0,or=ca>>2,nr=da>>2;Se[or]=Se[nr],Se[or+1]=Se[nr+1],Se[or+2]=Se[nr+2],Se[or+3]=Se[nr+3],Se[ca>>2]=da,Se[br]=ca,Se[((ha<<4)+4>>2)+wr]=ua,Se[((ha<<4)+8>>2)+wr]=0,Se[((ha<<4)+12>>2)+wr]=la;var ba=ba+1|0,ka=ua+4|0}Z(r);break r}while(0);var va,ia,wa=Se[pr+2];if(H(r,wa),4==(0|Se[va>>2])){var pa=Se[dr];Se[lr]=pa}var Ea=0==(0|ia);e:do if(!Ea)for(var Aa=r+8|0,ga=r+12|0,ya=ia;;){var ya,ma=ya-1|0;if(0==(0|Se[((ma<<4)+8>>2)+wr])){var Sa=Me[cr],Ma=0==(0|Sa);do{if(!Ma){var Ca=Me[Aa>>2];if(Ca>>>0>=Me[ga>>2]>>>0){gr=41;break}Se[Aa>>2]=Ca+1|0,Ae[Sa+Ca|0]=32,gr=42;break}gr=41}while(0);41==gr&&Y(r,32);var Ra=Se[((ma<<4)+4>>2)+wr];$(r,Ra)}if(0==(0|ma))break e;var ya=ma}while(0);Se[br]=$r;break r}if(4==(0|Ir)){var sr=(r+20|0)>>2,Ta=Se[sr];Se[sr]=0;var Oa=Se[pr+1];H(r,Oa);var Na=Me[cr],Ia=0==(0|Na);do{if(!Ia){var _r=(r+8|0)>>2,Da=Me[_r],La=0==(0|Da);do if(!La){if(Ae[Na+(Da-1)|0]<<24>>24!=60)break;Da>>>0<Me[Er+3]>>>0?(Se[_r]=Da+1|0,Ae[Na+Da|0]=32):Y(r,32)}while(0);var Fa=Me[cr];if(0==(0|Fa)){gr=54;break}var Xa=Me[_r];if(Xa>>>0>=Me[Er+3]>>>0){gr=54;break}Se[_r]=Xa+1|0,Ae[Fa+Xa|0]=60,gr=55;break}gr=54}while(0);54==gr&&Y(r,60);var ja=Se[pr+2];H(r,ja);var Ua=Me[cr],xa=0==(0|Ua);do{if(!xa){var fr=(r+8|0)>>2,za=Me[fr],Va=0==(0|za);do if(!Va){if(Ae[Ua+(za-1)|0]<<24>>24!=62)break;za>>>0<Me[Er+3]>>>0?(Se[fr]=za+1|0,Ae[Ua+za|0]=32):Y(r,32)}while(0);var Ba=Me[cr];if(0==(0|Ba)){gr=64;break}var Ha=Me[fr];if(Ha>>>0>=Me[Er+3]>>>0){gr=64;break}Se[fr]=Ha+1|0,Ae[Ba+Ha|0]=62,gr=65;break}gr=64}while(0);64==gr&&Y(r,62),Se[sr]=Ta;break r}if(5==(0|Ir)){var tr=(r+16|0)>>2,Ka=Me[tr];if(0==(0|Ka)){Z(r);break r}for(var Ya=Se[pr+1],Ga=Se[Ka+4>>2];;){var Ga,Ya,Wa=Se[Ga+8>>2];if(0==(0|Wa))break;if(39!=(0|Se[Wa>>2])){Z(r);break r}if((0|Ya)<1){if(0!=(0|Ya))break;var Za=Se[Ka>>2];Se[tr]=Za;var Qa=Se[Wa+4>>2];H(r,Qa),Se[tr]=Ka;break r}var Ya=Ya-1|0,Ga=Wa}Z(r);break r}if(6==(0|Ir)){var qa=Se[pr+2];H(r,qa);break r}if(7==(0|Ir)){var $a=r+8|0,Ja=Me[$a>>2];Ja>>>0<Me[Er+3]>>>0?(Se[$a>>2]=Ja+1|0,Ae[Or+Ja|0]=126):Y(r,126);var re=Se[pr+2];H(r,re);break r}if(8==(0|Ir)){var vr=(r+8|0)>>2,ae=Me[vr];if((ae+11|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str121,11);else{for(var ee=Or+ae|0,ie=0|He.__str121,ve=ee,te=ie+11;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var fe=Se[vr]+11|0;Se[vr]=fe}var _e=Se[pr+1];H(r,_e);break r}if(9==(0|Ir)){var J=(r+8|0)>>2,se=Me[J];if((se+8|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str122,8);else{var ne=Or+se|0,le=0|ne;oe=542397526,Ae[le]=255&oe,oe>>=8,Ae[le+1]=255&oe,oe>>=8,Ae[le+2]=255&oe,oe>>=8,Ae[le+3]=255&oe;var be=ne+4|0;oe=544370534,Ae[be]=255&oe,oe>>=8,Ae[be+1]=255&oe,oe>>=8,Ae[be+2]=255&oe,oe>>=8,Ae[be+3]=255&oe;var ke=Se[J]+8|0;Se[J]=ke}var ue=Se[pr+1];H(r,ue);break r}if(10==(0|Ir)){var W=(r+8|0)>>2,ce=Me[W],he=r+12|0;if((ce+24|0)>>>0>Me[he>>2]>>>0)Q(r,0|He.__str123,24);else{var de=Or+ce|0;Pa(de,0|He.__str123,24,1);var we=Se[W]+24|0;Se[W]=we}var pe=Se[pr+1];H(r,pe);var Ee=Me[cr],ge=0==(0|Ee);do{if(!ge){var ye=Me[W];if((ye+4|0)>>>0>Me[he>>2]>>>0){gr=96;break}var me=Ee+ye|0;oe=762210605,Ae[me]=255&oe,oe>>=8,Ae[me+1]=255&oe,oe>>=8,Ae[me+2]=255&oe,oe>>=8,Ae[me+3]=255&oe;var Ce=Se[W]+4|0;Se[W]=Ce,gr=97;break}gr=96}while(0);96==gr&&Q(r,0|He.__str124,4);var Re=Se[pr+2];H(r,Re);break r}if(11==(0|Ir)){var G=(r+8|0)>>2,Te=Me[G];if((Te+13|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str125,13);else{for(var Ne=Or+Te|0,ie=0|He.__str125,ve=Ne,te=ie+13;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var Ie=Se[G]+13|0;Se[G]=Ie}var Pe=Se[pr+1];H(r,Pe);break r}if(12==(0|Ir)){var K=(r+8|0)>>2,De=Me[K];if((De+18|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str126,18);else{for(var Le=Or+De|0,ie=0|He.__str126,ve=Le,te=ie+18;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var Fe=Se[K]+18|0;Se[K]=Fe}var Xe=Se[pr+1];H(r,Xe);break r}if(13==(0|Ir)){var B=(r+8|0)>>2,je=Me[B];if((je+16|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str127,16);else{for(var Ue=Or+je|0,ie=0|He.__str127,ve=Ue,te=ie+16;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var xe=Se[B]+16|0;Se[B]=xe}var ze=Se[pr+1];H(r,ze);break r}if(14==(0|Ir)){var V=(r+8|0)>>2,Ve=Me[V];if((Ve+21|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str128,21);else{var Be=Or+Ve|0;Pa(Be,0|He.__str128,21,1);var Ke=Se[V]+21|0;Se[V]=Ke}var Ye=Se[pr+1];H(r,Ye);break r}if(15==(0|Ir)){var z=(r+8|0)>>2,Ge=Me[z];if((Ge+17|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str129,17);else{for(var We=Or+Ge|0,ie=0|He.__str129,ve=We,te=ie+17;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var Ze=Se[z]+17|0;Se[z]=Ze}var Qe=Se[pr+1];H(r,Qe);break r}if(16==(0|Ir)){var x=(r+8|0)>>2,qe=Me[x];if((qe+26|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str130,26);else{var $e=Or+qe|0;Pa($e,0|He.__str130,26,1);var Je=Se[x]+26|0;Se[x]=Je}var ri=Se[pr+1];H(r,ri);break r}if(17==(0|Ir)){var U=(r+8|0)>>2,ai=Me[U];if((ai+15|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str131,15);else{for(var ei=Or+ai|0,ie=0|He.__str131,ve=ei,te=ie+15;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var ii=Se[U]+15|0;Se[U]=ii}var vi=Se[pr+1];H(r,vi);break r}if(18==(0|Ir)){var j=(r+8|0)>>2,ti=Me[j];if((ti+19|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str132,19);else{for(var fi=Or+ti|0,ie=0|He.__str132,ve=fi,te=ie+19;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var _i=Se[j]+19|0;Se[j]=_i}var si=Se[pr+1];H(r,si);break r}if(19==(0|Ir)){var X=(r+8|0)>>2,ni=Me[X];if((ni+24|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str133,24);else{var oi=Or+ni|0;Pa(oi,0|He.__str133,24,1);var li=Se[X]+24|0;Se[X]=li}var bi=Se[pr+1];H(r,bi);break r}if(20==(0|Ir)){var F=(r+8|0)>>2,ki=Me[F];if((ki+17|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str134,17);else{for(var ui=Or+ki|0,ie=0|He.__str134,ve=ui,te=ie+17;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var ci=Se[F]+17|0;Se[F]=ci}var hi=Se[pr+1];H(r,hi);break r}if(21==(0|Ir)){var L=(r+8|0)>>2,di=Me[L],wi=a+8|0,pi=Me[wi>>2];if((pi+di|0)>>>0>Me[Er+3]>>>0){var Ei=Se[pr+1];Q(r,Ei,pi);break r}var Ai=Or+di|0,gi=Se[pr+1];Pa(Ai,gi,pi,1);var yi=Se[L]+Se[wi>>2]|0;Se[L]=yi;break r}if(22==(0|Ir)||23==(0|Ir)||24==(0|Ir)){for(var mi=r+20|0;;){var mi,Si=Me[mi>>2];if(0==(0|Si))break a;if(0==(0|Se[Si+8>>2])){var Mi=Me[Se[Si+4>>2]>>2];if((Mi-22|0)>>>0>=3)break a;if((0|Mi)==(0|Ir))break}var mi=0|Si}var Ci=Se[pr+1];H(r,Ci);break r}if(25!=(0|Ir)&&26!=(0|Ir)&&27!=(0|Ir)&&28!=(0|Ir)&&29!=(0|Ir)&&30!=(0|Ir)&&31!=(0|Ir)&&32!=(0|Ir)){if(33==(0|Ir)){var D=(r+8|0)>>2,Ri=Me[D],P=(a+4|0)>>2,I=Me[P]>>2;if(0==(4&Se[Er]|0)){var Ti=Me[I+1];if((Ti+Ri|0)>>>0>Me[Er+3]>>>0){var Oi=Se[I];Q(r,Oi,Ti);break r}var Ni=Or+Ri|0,Ii=Se[I];Pa(Ni,Ii,Ti,1);var Pi=Se[D]+Se[Se[P]+4>>2]|0;Se[D]=Pi;break r}var Di=Me[I+3];if((Di+Ri|0)>>>0>Me[Er+3]>>>0){var Li=Se[I+2];Q(r,Li,Di);break r}var Fi=Or+Ri|0,Xi=Se[I+2];Pa(Fi,Xi,Di,1);var ji=Se[D]+Se[Se[P]+12>>2]|0;Se[D]=ji;break r}if(34==(0|Ir)){var Ui=Se[pr+1];H(r,Ui);break r}if(35==(0|Ir)){var N=(0|r)>>2;if(0!=(32&Se[N]|0)){var xi=Se[Er+5];rr(r,a,xi)}var zi=a+4|0,Vi=0==(0|Se[zi>>2]);e:do if(!Vi){var O=(r+20|0)>>2,Bi=Se[O],Hi=0|Mr;Se[Hi>>2]=Bi,Se[O]=Mr,Se[Mr+4>>2]=a;var Ki=Mr+8|0;Se[Ki>>2]=0;var Yi=Se[Er+4];Se[Mr+12>>2]=Yi;var Gi=Se[zi>>2];H(r,Gi);var Wi=Se[Hi>>2];if(Se[O]=Wi,0!=(0|Se[Ki>>2]))break r;if(0!=(32&Se[N]|0))break;var Zi=Me[cr],Qi=0==(0|Zi);do if(!Qi){var qi=r+8|0,$i=Me[qi>>2];if($i>>>0>=Me[Er+3]>>>0)break;Se[qi>>2]=$i+1|0,Ae[Zi+$i|0]=32;break e}while(0);Y(r,32)}while(0);if(0!=(32&Se[N]|0))break r;var Ji=Se[Er+5];rr(r,a,Ji);break r}if(36==(0|Ir)){var T=(r+20|0)>>2,rv=Me[T],av=0|Cr;Se[hr]=rv,Se[T]=av,Se[hr+1]=a;var ev=Cr+8|0;Se[ev>>2]=0;var iv=Se[Er+4];Se[hr+3]=iv;for(var vv=rv,tv=1;;){var tv,vv;if(0==(0|vv))break;if((Se[Se[vv+4>>2]>>2]-22|0)>>>0>=3)break;var fv=vv+8|0;if(0==(0|Se[fv>>2])){if(tv>>>0>3){Z(r);break r}var _v=(tv<<4)+Cr|0,R=_v>>2,C=vv>>2;Se[R]=Se[C],Se[R+1]=Se[C+1],Se[R+2]=Se[C+2],Se[R+3]=Se[C+3];var sv=Se[T];Se[_v>>2]=sv,Se[T]=_v,Se[fv>>2]=1;var nv=tv+1|0}else var nv=tv;var nv,vv=Se[vv>>2],tv=nv}var ov=Se[pr+2];if(H(r,ov),Se[T]=rv,0!=(0|Se[ev>>2]))break r;if(tv>>>0>1){for(var lv=tv;;){var lv,bv=lv-1|0,kv=Se[((bv<<4)+4>>2)+hr];if($(r,kv),bv>>>0<=1)break;var lv=bv}var uv=Se[T]}else var uv=rv;var uv;ar(r,a,uv);break r}if(37==(0|Ir)){var M=(r+20|0)>>2,cv=Se[M],hv=0|Rr;Se[hv>>2]=cv,Se[M]=Rr,Se[Rr+4>>2]=a;var dv=Rr+8|0;Se[dv>>2]=0;var wv=Se[Er+4];Se[Rr+12>>2]=wv;var pv=a+4|0,Ev=Se[pr+2];H(r,Ev);var Av=0==(0|Se[dv>>2]);e:do if(Av){var gv=Me[cr],yv=0==(0|gv);do{if(!yv){var mv=r+8|0,Sv=Me[mv>>2];if(Sv>>>0>=Me[Er+3]>>>0){gr=187;break}Se[mv>>2]=Sv+1|0,Ae[gv+Sv|0]=32,gr=188;break}gr=187}while(0);187==gr&&Y(r,32);var Mv=Se[pv>>2];H(r,Mv);var Cv=Me[cr],Rv=0==(0|Cv);do if(!Rv){var S=(r+8|0)>>2,Tv=Me[S];if((Tv+3|0)>>>0>Me[Er+3]>>>0)break;var Ov=Cv+Tv|0;Ae[Ov]=Ae[0|He.__str135],Ae[Ov+1]=Ae[(0|He.__str135)+1],Ae[Ov+2]=Ae[(0|He.__str135)+2];var Nv=Se[S]+3|0;Se[S]=Nv;break e}while(0);Q(r,0|He.__str135,3)}while(0);var Iv=Se[hv>>2];Se[M]=Iv;break r}if(38==(0|Ir)||39==(0|Ir)){var Pv=Se[pr+1];H(r,Pv);var Dv=a+8|0;if(0==(0|Se[Dv>>2]))break r;var Lv=Me[cr],Fv=0==(0|Lv);do{if(!Fv){var m=(r+8|0)>>2,Xv=Me[m];if((Xv+2|0)>>>0>Me[Er+3]>>>0){gr=197;break}var jv=Lv+Xv|0;oe=8236,Ae[jv]=255&oe,oe>>=8,Ae[jv+1]=255&oe;var Uv=Se[m]+2|0;Se[m]=Uv,gr=198;break}gr=197}while(0);197==gr&&Q(r,0|He.__str136,2);var xv=Se[Dv>>2];H(r,xv);break r}if(40==(0|Ir)){var y=(r+8|0)>>2,zv=Me[y],g=(r+12|0)>>2;if((zv+8|0)>>>0>Me[g]>>>0)Q(r,0|He.__str137,8);else{var Vv=Or+zv|0,le=0|Vv;oe=1919250543,Ae[le]=255&oe,oe>>=8,Ae[le+1]=255&oe,oe>>=8,Ae[le+2]=255&oe,oe>>=8,Ae[le+3]=255&oe;var be=Vv+4|0;oe=1919906913,Ae[be]=255&oe,oe>>=8,Ae[be+1]=255&oe,oe>>=8,Ae[be+2]=255&oe,oe>>=8,Ae[be+3]=255&oe;var Bv=Se[y]+8|0;Se[y]=Bv}var A=(a+4|0)>>2,Hv=(Ae[Se[Se[A]+4>>2]]-97&255&255)<26;e:do if(Hv){var Kv=Me[cr],Yv=0==(0|Kv);do if(!Yv){var Gv=Me[y];if(Gv>>>0>=Me[g]>>>0)break;Se[y]=Gv+1|0,Ae[Kv+Gv|0]=32;break e}while(0);Y(r,32)}while(0);var Wv=Me[cr],Zv=0==(0|Wv);do{if(!Zv){var Qv=Me[y],qv=Me[A],$v=Me[qv+8>>2];if(($v+Qv|0)>>>0>Me[g]>>>0){var Jv=qv,rt=$v;break}var at=Wv+Qv|0,et=Se[qv+4>>2];Pa(at,et,$v,1);var it=Se[y]+Se[Se[A]+8>>2]|0;Se[y]=it;break r}var vt=Me[A],Jv=vt,rt=Se[vt+8>>2]}while(0);var rt,Jv,tt=Se[Jv+4>>2];Q(r,tt,rt);break r}if(41==(0|Ir)){var E=(r+8|0)>>2,ft=Me[E];if((ft+9|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str10180,9);else{for(var _t=Or+ft|0,ie=0|He.__str10180,ve=_t,te=ie+9;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var st=Se[E]+9|0;Se[E]=st}var nt=Se[pr+2];H(r,nt);break r}if(42==(0|Ir)){var p=(r+8|0)>>2,ot=Me[p];if((ot+9|0)>>>0>Me[Er+3]>>>0)Q(r,0|He.__str10180,9);else{for(var lt=Or+ot|0,ie=0|He.__str10180,ve=lt,te=ie+9;ie<te;ie++,ve++)Ae[ve]=Ae[ie];var bt=Se[p]+9|0;Se[p]=bt}er(r,a);break r}if(43==(0|Ir)){var kt=a+4|0,ut=Se[kt>>2],ct=42==(0|Se[ut>>2]);e:do if(ct){var w=(r+8|0)>>2,ht=Me[w],dt=r+12|0;ht>>>0<Me[dt>>2]>>>0?(Se[w]=ht+1|0,Ae[Or+ht|0]=40):Y(r,40);var wt=Se[kt>>2];er(r,wt);var pt=Me[cr],Et=0==(0|pt);do if(!Et){var At=Me[w];if(At>>>0>=Me[dt>>2]>>>0)break;Se[w]=At+1|0,Ae[pt+At|0]=41;break e}while(0);Y(r,41)}else ir(r,ut);while(0);var gt=Me[cr],yt=0==(0|gt);do{if(!yt){var mt=r+8|0,St=Me[mt>>2];if(St>>>0>=Me[Er+3]>>>0){gr=232;break}Se[mt>>2]=St+1|0,Ae[gt+St|0]=40,gr=233;break}gr=232}while(0);232==gr&&Y(r,40);var Mt=Se[pr+2];H(r,Mt);var Ct=Me[cr],Rt=0==(0|Ct);do if(!Rt){var Tt=r+8|0,Ot=Me[Tt>>2];if(Ot>>>0>=Me[Er+3]>>>0)break;Se[Tt>>2]=Ot+1|0,Ae[Ct+Ot|0]=41;break r}while(0);Y(r,41);break r}if(44==(0|Ir)){var d=(a+8|0)>>2;if(45==(0|Se[Se[d]>>2])){var h=(a+4|0)>>2,Nt=Se[h],It=40==(0|Se[Nt>>2]);do if(It){var Pt=Se[Nt+4>>2];if(1!=(0|Se[Pt+8>>2]))break;if(Ae[Se[Pt+4>>2]]<<24>>24!=62)break;var Dt=r+8|0,Lt=Me[Dt>>2];Lt>>>0<Me[Er+3]>>>0?(Se[Dt>>2]=Lt+1|0,Ae[Or+Lt|0]=40):Y(r,40)}while(0);var Ft=Me[cr],Xt=0==(0|Ft);do{if(!Xt){var jt=r+8|0,Ut=Me[jt>>2];if(Ut>>>0>=Me[Er+3]>>>0){gr=248;break}Se[jt>>2]=Ut+1|0,Ae[Ft+Ut|0]=40,gr=249;break}gr=248}while(0);248==gr&&Y(r,40);var xt=Se[Se[d]+4>>2];H(r,xt);var zt=Me[cr],Vt=0==(0|zt);do{if(!Vt){var c=(r+8|0)>>2,Bt=Me[c];if((Bt+2|0)>>>0>Me[Er+3]>>>0){gr=252;break}var Ht=zt+Bt|0;oe=8233,Ae[Ht]=255&oe,oe>>=8,Ae[Ht+1]=255&oe;var Kt=Se[c]+2|0;Se[c]=Kt,gr=253;break}gr=252}while(0);252==gr&&Q(r,0|He.__str139,2);var Yt=Se[h];ir(r,Yt);var Gt=Me[cr],Wt=0==(0|Gt);do{if(!Wt){var u=(r+8|0)>>2,Zt=Me[u];if((Zt+2|0)>>>0>Me[Er+3]>>>0){gr=256;break}var Qt=Gt+Zt|0;oe=10272,Ae[Qt]=255&oe,oe>>=8,Ae[Qt+1]=255&oe;var qt=Se[u]+2|0;Se[u]=qt,gr=257;break}gr=256}while(0);256==gr&&Q(r,0|He.__str140,2);var $t=Se[Se[d]+8>>2];H(r,$t);var Jt=Me[cr],rf=0==(0|Jt);do{if(!rf){var af=r+8|0,ef=Me[af>>2];if(ef>>>0>=Me[Er+3]>>>0){gr=260;break}Se[af>>2]=ef+1|0,Ae[Jt+ef|0]=41,gr=261;break}gr=260}while(0);260==gr&&Y(r,41);var vf=Se[h];if(40!=(0|Se[vf>>2]))break r;var tf=Se[vf+4>>2];if(1!=(0|Se[tf+8>>2]))break r;if(Ae[Se[tf+4>>2]]<<24>>24!=62)break r;var ff=Me[cr],_f=0==(0|ff);do if(!_f){var sf=r+8|0,nf=Me[sf>>2];if(nf>>>0>=Me[Er+3]>>>0)break;Se[sf>>2]=nf+1|0,Ae[ff+nf|0]=41;break r}while(0);Y(r,41);break r}Z(r);break r}if(45==(0|Ir)){Z(r);break r}if(46==(0|Ir)){var of=a+4|0,k=(a+8|0)>>2,lf=Se[k],bf=47==(0|Se[lf>>2]);do if(bf){if(48!=(0|Se[Se[lf+8>>2]>>2]))break;var b=(r+8|0)>>2,kf=Me[b],l=(r+12|0)>>2;kf>>>0<Me[l]>>>0?(Se[b]=kf+1|0,Ae[Or+kf|0]=40):Y(r,40);var uf=Se[Se[k]+4>>2];H(r,uf);var cf=Me[cr],hf=0==(0|cf);do{if(!hf){var df=Me[b];if((df+2|0)>>>0>Me[l]>>>0){gr=278;break}var wf=cf+df|0;oe=8233,Ae[wf]=255&oe,oe>>=8,Ae[wf+1]=255&oe;var pf=Se[b]+2|0;Se[b]=pf,gr=279;break}gr=278}while(0);278==gr&&Q(r,0|He.__str139,2);var Ef=Se[of>>2];ir(r,Ef);var Af=Me[cr],gf=0==(0|Af);do{if(!gf){var yf=Me[b];if((yf+2|0)>>>0>Me[l]>>>0){gr=282;break}var mf=Af+yf|0;oe=10272,Ae[mf]=255&oe,oe>>=8,Ae[mf+1]=255&oe;var Sf=Se[b]+2|0;Se[b]=Sf,gr=283;break}gr=282}while(0);282==gr&&Q(r,0|He.__str140,2);var Mf=Se[Se[Se[k]+8>>2]+4>>2];H(r,Mf);var Cf=Me[cr],Rf=0==(0|Cf);do{if(!Rf){var Tf=Me[b];if((Tf+5|0)>>>0>Me[l]>>>0){gr=286;break}var Of=Cf+Tf|0;Ae[Of]=Ae[0|He.__str141],Ae[Of+1]=Ae[(0|He.__str141)+1],Ae[Of+2]=Ae[(0|He.__str141)+2],Ae[Of+3]=Ae[(0|He.__str141)+3],Ae[Of+4]=Ae[(0|He.__str141)+4];var Nf=Se[b]+5|0;Se[b]=Nf,gr=287;break}gr=286}while(0);286==gr&&Q(r,0|He.__str141,5);var If=Se[Se[Se[k]+8>>2]+8>>2];H(r,If);var Pf=Me[cr],Df=0==(0|Pf);do if(!Df){var Lf=Me[b];if(Lf>>>0>=Me[l]>>>0)break;Se[b]=Lf+1|0,Ae[Pf+Lf|0]=41;break r}while(0);Y(r,41);break r}while(0);Z(r);break r}if(47==(0|Ir)||48==(0|Ir)){Z(r);break r}if(49==(0|Ir)||50==(0|Ir)){var Ff=a+4|0,Xf=Se[Ff>>2],jf=33==(0|Se[Xf>>2]);do{if(jf){var Uf=Me[Se[Xf+4>>2]+16>>2];if(1==(0|Uf)||2==(0|Uf)||3==(0|Uf)||4==(0|Uf)||5==(0|Uf)||6==(0|Uf)){var xf=a+8|0;if(0!=(0|Se[Se[xf>>2]>>2])){var zf=Uf;break}if(50==(0|Ir)){var Vf=r+8|0,Bf=Me[Vf>>2];Bf>>>0<Me[Er+3]>>>0?(Se[Vf>>2]=Bf+1|0,Ae[Or+Bf|0]=45):Y(r,45)}var Hf=Se[xf>>2];if(H(r,Hf),2==(0|Uf)){var Kf=Me[cr],Yf=0==(0|Kf);do if(!Yf){var Gf=r+8|0,Wf=Me[Gf>>2];if(Wf>>>0>=Me[Er+3]>>>0)break;Se[Gf>>2]=Wf+1|0,Ae[Kf+Wf|0]=117;break r}while(0);Y(r,117);break r}if(3==(0|Uf)){var Zf=Me[cr],Qf=0==(0|Zf);do if(!Qf){var qf=r+8|0,$f=Me[qf>>2];if($f>>>0>=Me[Er+3]>>>0)break;Se[qf>>2]=$f+1|0,Ae[Zf+$f|0]=108;break r}while(0);Y(r,108);break r}if(4==(0|Uf)){var Jf=Me[cr],r_=0==(0|Jf);do if(!r_){var o=(r+8|0)>>2,a_=Me[o];if((a_+2|0)>>>0>Me[Er+3]>>>0)break;var e_=Jf+a_|0;oe=27765,Ae[e_]=255&oe,oe>>=8,Ae[e_+1]=255&oe;var i_=Se[o]+2|0;Se[o]=i_;break r}while(0);Q(r,0|He.__str142,2);break r}if(5==(0|Uf)){var v_=Me[cr],t_=0==(0|v_);do if(!t_){var n=(r+8|0)>>2,f_=Me[n];if((f_+2|0)>>>0>Me[Er+3]>>>0)break;var __=v_+f_|0;oe=27756,Ae[__]=255&oe,oe>>=8,Ae[__+1]=255&oe;var s_=Se[n]+2|0;Se[n]=s_;break r}while(0);Q(r,0|He.__str143,2);break r}if(6==(0|Uf)){var n_=Me[cr],o_=0==(0|n_);do if(!o_){var s=(r+8|0)>>2,l_=Me[s];if((l_+3|0)>>>0>Me[Er+3]>>>0)break;var b_=n_+l_|0;Ae[b_]=Ae[0|He.__str144],Ae[b_+1]=Ae[(0|He.__str144)+1],Ae[b_+2]=Ae[(0|He.__str144)+2];var k_=Se[s]+3|0;Se[s]=k_;break r}while(0);Q(r,0|He.__str144,3);break r}break r}if(7==(0|Uf)){var _=Se[pr+2]>>2;if(0!=(0|Se[_])){var zf=7;break}if(!(1==(0|Se[_+2])&49==(0|Ir))){var zf=Uf;break}var u_=Ae[Se[_+1]]<<24>>24;if(48==(0|u_)){var f=(r+8|0)>>2,c_=Me[f];if((c_+5|0)>>>0>Me[Er+3]>>>0){Q(r,0|He.__str145,5);break r}var h_=Or+c_|0;Ae[h_]=Ae[0|He.__str145],Ae[h_+1]=Ae[(0|He.__str145)+1],Ae[h_+2]=Ae[(0|He.__str145)+2],Ae[h_+3]=Ae[(0|He.__str145)+3],Ae[h_+4]=Ae[(0|He.__str145)+4];var d_=Se[f]+5|0;Se[f]=d_;break r}if(49==(0|u_)){var t=(r+8|0)>>2,w_=Me[t];if((w_+4|0)>>>0>Me[Er+3]>>>0){Q(r,0|He.__str146,4);break r}var p_=Or+w_|0;oe=1702195828,Ae[p_]=255&oe,oe>>=8,Ae[p_+1]=255&oe,oe>>=8,Ae[p_+2]=255&oe,oe>>=8,Ae[p_+3]=255&oe;var E_=Se[t]+4|0;Se[t]=E_;break r}var zf=Uf;break}var zf=Uf;break}var zf=0}while(0);var zf,v=(r+8|0)>>2,A_=Me[v],i=(r+12|0)>>2;A_>>>0<Me[i]>>>0?(Se[v]=A_+1|0,Ae[Or+A_|0]=40):Y(r,40);var g_=Se[Ff>>2];H(r,g_);var y_=Me[cr],m_=0==(0|y_);do{if(!m_){var S_=Me[v];if(S_>>>0>=Me[i]>>>0){gr=335;break}Se[v]=S_+1|0,Ae[y_+S_|0]=41,gr=336;break}gr=335}while(0);335==gr&&Y(r,41);var M_=50==(0|Se[Nr>>2]);e:do if(M_){var C_=Me[cr],R_=0==(0|C_);do if(!R_){var T_=Me[v];if(T_>>>0>=Me[i]>>>0)break;Se[v]=T_+1|0,Ae[C_+T_|0]=45;break e}while(0);Y(r,45)}while(0);if(8==(0|zf)){var O_=Me[cr],N_=0==(0|O_);do{if(!N_){var I_=Me[v];if(I_>>>0>=Me[i]>>>0){gr=345;break}Se[v]=I_+1|0,Ae[O_+I_|0]=91,gr=346;break}gr=345}while(0);345==gr&&Y(r,91);var P_=Se[pr+2];H(r,P_);var D_=Me[cr],L_=0==(0|D_);do if(!L_){var F_=Me[v];if(F_>>>0>=Me[i]>>>0)break;Se[v]=F_+1|0,Ae[D_+F_|0]=93;break r}while(0);Y(r,93);break r}var X_=Se[pr+2];H(r,X_);break r}Z(r);break r}}while(0);var e=(r+20|0)>>2,j_=Se[e],U_=0|Sr;Se[U_>>2]=j_,Se[e]=Sr,Se[Sr+4>>2]=a;var x_=Sr+8|0;Se[x_>>2]=0;var z_=Se[Er+4];Se[Sr+12>>2]=z_;var V_=Se[pr+1];H(r,V_),0==(0|Se[x_>>2])&&$(r,a);var B_=Se[U_>>2];Se[e]=B_}while(0);Oe=Ar}function K(r,a,e,i){var v=i>>2;Se[v]=r,Se[v+1]=r+e|0,Se[v+2]=a,Se[v+3]=r,Se[v+6]=e<<1,Se[v+5]=0,Se[v+9]=e,Se[v+8]=0,Se[v+10]=0,Se[v+11]=0,Se[v+12]=0}function Y(r,a){var e,i=r+4|0,v=Me[i>>2],t=0==(0|v);do if(!t){var e=(r+8|0)>>2,f=Me[e];if(f>>>0<Me[r+12>>2]>>>0)var _=v,s=f;else{tr(r,1);var n=Me[i>>2];if(0==(0|n))break;var _=n,s=Se[e]}var s,_;Ae[_+s|0]=255&a;var o=Se[e]+1|0;Se[e]=o}while(0)}function G(r,a,e,i){var v,t=i>>2,f=Oe;Oe+=4;var _=f,v=_>>2,s=0==(0|r);do if(s){if(0==(0|i)){var n=0;break}Se[t]=-3;var n=0}else{var o=0==(0|e);if(0!=(0|a)&o){if(0==(0|i)){var n=0;break}Se[t]=-3;var n=0}else{var l=W(r,_);if(0==(0|l)){if(0==(0|i)){var n=0;break}if(1==(0|Se[v])){Se[t]=-1;var n=0}else{Se[t]=-2;var n=0}}else{var b=0==(0|a);do if(b){if(o){var k=l;break}var u=Se[v];Se[e>>2]=u;var k=l}else{var c=Ca(l);if(c>>>0<Me[e>>2]>>>0){Ra(a,l);va(l);var k=a}else{va(a);var h=Se[v];Se[e>>2]=h;var k=l}}while(0);var k;if(0==(0|i)){var n=k;break}Se[t]=0;var n=k}}}while(0);var n;return Oe=f,n}function W(r,a){var e,i=Oe;Oe+=52;var v,t=i,e=t>>2;Se[a>>2]=0;var f=Ca(r),_=Ae[r]<<24>>24==95;do{if(_){if(Ae[r+1|0]<<24>>24==90){var s=0;v=13;break}v=3;break}v=3}while(0);do if(3==v){var n=Na(r,0|He.__str117,8);if(0!=(0|n)){var s=1;v=13;break}var o=Ae[r+8|0];if(o<<24>>24!=46&&o<<24>>24!=95&&o<<24>>24!=36){var s=1;v=13;break}var l=r+9|0,b=Ae[l];if(b<<24>>24!=68&&b<<24>>24!=73){
var s=1;v=13;break}if(Ae[r+10|0]<<24>>24!=95){var s=1;v=13;break}var k=f+29|0,u=Jr(k);if(0==(0|u)){Se[a>>2]=1;var c=0;v=19;break}Ae[l]<<24>>24==73?Pa(u,0|He.__str118,30,1):Pa(u,0|He.__str119,29,1);var h=r+11|0,c=(Ia(u,h),u);v=19;break}while(0);if(13==v){var s;K(r,17,f,t);var d=Se[e+6],w=Ta(),p=Oe;Oe+=12*d,Oe=Oe+3>>2<<2;var E=Oe;if(Oe+=4*Se[e+9],Oe=Oe+3>>2<<2,Se[e+4]=p,Se[e+7]=E,s)var A=N(t),g=A;else var y=T(t,1),g=y;var g,m=Ae[Se[e+3]]<<24>>24==0?g:0,S=Se[e+12]+f+10*Se[e+10]|0;if(0==(0|m))var M=0;else var C=S/8+S|0,R=B(17,m,C,a),M=R;var M;Oa(w);var c=M}var c;return Oe=i,c}function Z(r){var a=r+4|0,e=Se[a>>2];va(e),Se[a>>2]=0}function Q(r,a,e){var i,v=r+4|0,t=Me[v>>2],f=0==(0|t);do if(!f){var i=(r+8|0)>>2,_=Me[i];if((_+e|0)>>>0>Me[r+12>>2]>>>0){tr(r,e);var s=Me[v>>2];if(0==(0|s))break;var n=s,o=Se[i]}else var n=t,o=_;var o,n;Pa(n+o|0,a,e,1);var l=Se[i]+e|0;Se[i]=l}while(0)}function q(r,a,e){var i,v,t=a+e|0,f=(0|e)>0;r:do if(f)for(var _=t,s=r+4|0,i=(r+8|0)>>2,n=r+12|0,o=a;;){var o,l=(_-o|0)>3;a:do{if(l){if(Ae[o]<<24>>24!=95){v=21;break}if(Ae[o+1|0]<<24>>24!=95){v=21;break}if(Ae[o+2|0]<<24>>24!=85){v=21;break}for(var b=o+3|0,k=0;;){var k,b;if(b>>>0>=t>>>0){v=21;break a}var u=ge[b],c=u<<24>>24;if((u-48&255&255)<10)var h=c-48|0;else if((u-65&255&255)<6)var h=c-55|0;else{if((u-97&255&255)>=6)break;var h=c-87|0}var h,b=b+1|0,k=(k<<4)+h|0}if(!(u<<24>>24==95&k>>>0<256)){v=21;break}var d=Me[s>>2],w=0==(0|d);do if(!w){var p=Me[i];if(p>>>0>=Me[n>>2]>>>0)break;Se[i]=p+1|0,Ae[d+p|0]=255&k;var E=b;v=25;break a}while(0);Y(r,k);var E=b;v=25;break}v=21}while(0);a:do if(21==v){var A=Me[s>>2],g=0==(0|A);do if(!g){var y=Me[i];if(y>>>0>=Me[n>>2]>>>0)break;var m=Ae[o];Se[i]=y+1|0,Ae[A+y|0]=m;var E=o;break a}while(0);var S=Ae[o]<<24>>24;Y(r,S);var E=o}while(0);var E,M=E+1|0;if(M>>>0>=t>>>0)break r;var o=M}while(0)}function $(r,a){var e,i,v,t,f,_,s,n=r>>2,o=Se[a>>2];r:do if(22==(0|o)||25==(0|o)){var l=Me[n+1],b=0==(0|l);do if(!b){var _=(r+8|0)>>2,k=Me[_];if((k+9|0)>>>0>Me[n+3]>>>0)break;for(var u=l+k|0,c=0|He.__str147,h=u,d=c+9;c<d;c++,h++)Ae[h]=Ae[c];var w=Se[_]+9|0;Se[_]=w;break r}while(0);Q(r,0|He.__str147,9)}else if(23==(0|o)||26==(0|o)){var p=Me[n+1],E=0==(0|p);do if(!E){var f=(r+8|0)>>2,A=Me[f];if((A+9|0)>>>0>Me[n+3]>>>0)break;for(var g=p+A|0,c=0|He.__str148,h=g,d=c+9;c<d;c++,h++)Ae[h]=Ae[c];var y=Se[f]+9|0;Se[f]=y;break r}while(0);Q(r,0|He.__str148,9)}else if(24==(0|o)||27==(0|o)){var m=Me[n+1],S=0==(0|m);do if(!S){var t=(r+8|0)>>2,M=Me[t];if((M+6|0)>>>0>Me[n+3]>>>0)break;var C=m+M|0;Ae[C]=Ae[0|He.__str149],Ae[C+1]=Ae[(0|He.__str149)+1],Ae[C+2]=Ae[(0|He.__str149)+2],Ae[C+3]=Ae[(0|He.__str149)+3],Ae[C+4]=Ae[(0|He.__str149)+4],Ae[C+5]=Ae[(0|He.__str149)+5];var R=Se[t]+6|0;Se[t]=R;break r}while(0);Q(r,0|He.__str149,6)}else if(28==(0|o)){var T=Me[n+1],O=0==(0|T);do{if(!O){var N=r+8|0,I=Me[N>>2];if(I>>>0>=Me[n+3]>>>0){s=17;break}Se[N>>2]=I+1|0,Ae[T+I|0]=32,s=18;break}s=17}while(0);17==s&&Y(r,32);var P=Se[a+8>>2];H(r,P)}else if(29==(0|o)){if(0!=(4&Se[n]|0))break;var D=Me[n+1],L=0==(0|D);do if(!L){var F=r+8|0,X=Me[F>>2];if(X>>>0>=Me[n+3]>>>0)break;Se[F>>2]=X+1|0,Ae[D+X|0]=42;break r}while(0);Y(r,42)}else if(30==(0|o)){var j=Me[n+1],U=0==(0|j);do if(!U){var x=r+8|0,z=Me[x>>2];if(z>>>0>=Me[n+3]>>>0)break;Se[x>>2]=z+1|0,Ae[j+z|0]=38;break r}while(0);Y(r,38)}else if(31==(0|o)){var V=Me[n+1],B=0==(0|V);do if(!B){var v=(r+8|0)>>2,K=Me[v];if((K+8|0)>>>0>Me[n+3]>>>0)break;var G=V+K|0,W=0|G;oe=1886220131,Ae[W]=255&oe,oe>>=8,Ae[W+1]=255&oe,oe>>=8,Ae[W+2]=255&oe,oe>>=8,Ae[W+3]=255&oe;var Z=G+4|0;oe=544761196,Ae[Z]=255&oe,oe>>=8,Ae[Z+1]=255&oe,oe>>=8,Ae[Z+2]=255&oe,oe>>=8,Ae[Z+3]=255&oe;var q=Se[v]+8|0;Se[v]=q;break r}while(0);Q(r,0|He.__str150,8)}else if(32==(0|o)){var $=Me[n+1],J=0==(0|$);do if(!J){var i=(r+8|0)>>2,rr=Me[i];if((rr+10|0)>>>0>Me[n+3]>>>0)break;for(var ar=$+rr|0,c=0|He.__str151,h=ar,d=c+10;c<d;c++,h++)Ae[h]=Ae[c];var er=Se[i]+10|0;Se[i]=er;break r}while(0);Q(r,0|He.__str151,10)}else if(37==(0|o)){var ir=r+4|0,vr=Me[ir>>2],tr=0==(0|vr);do{if(!tr){var fr=r+8|0,_r=Me[fr>>2];if(0!=(0|_r)&&Ae[vr+(_r-1)|0]<<24>>24==40){s=42;break}if(_r>>>0>=Me[n+3]>>>0){s=41;break}Se[fr>>2]=_r+1|0,Ae[vr+_r|0]=32,s=42;break}s=41}while(0);41==s&&Y(r,32);var sr=Se[a+4>>2];H(r,sr);var nr=Me[ir>>2],or=0==(0|nr);do if(!or){var e=(r+8|0)>>2,lr=Me[e];if((lr+3|0)>>>0>Me[n+3]>>>0)break;var br=nr+lr|0;Ae[br]=Ae[0|He.__str135],Ae[br+1]=Ae[(0|He.__str135)+1],Ae[br+2]=Ae[(0|He.__str135)+2];var kr=Se[e]+3|0;Se[e]=kr;break r}while(0);Q(r,0|He.__str135,3)}else if(3==(0|o)){var ur=Se[a+4>>2];H(r,ur)}else H(r,a);while(0)}function J(r){var a=r+20|0,e=Se[a>>2];if((0|e)<(0|Se[r+24>>2])){var i=Se[r+16>>2]+12*e|0,v=e+1|0;Se[a>>2]=v;var t=i}else var t=0;var t;return t}function rr(r,a,e){var i,v,t,f,_=r>>2,s=e,t=s>>2,n=0;r:for(;;){var n,s,o=0==(0|s);do if(!o){if(0!=(0|Se[t+2]))break;var l=Se[Se[t+1]>>2];if(29==(0|l)||30==(0|l)){f=9;break r}if(22==(0|l)||23==(0|l)||24==(0|l)||28==(0|l)||31==(0|l)||32==(0|l)||37==(0|l)){var b=Se[_+1];f=12;break r}var s=Se[t],t=s>>2,n=1;continue r}while(0);if(0!=(0|Se[a+4>>2])&0==(0|n)){f=9;break}var k=0,u=r+4|0,v=u>>2;f=22;break}do if(9==f){var c=Se[_+1];if(0==(0|c)){f=17;break}var h=Se[_+2];if(0==(0|h)){var d=c;f=13;break}var w=Ae[c+(h-1)|0];if(w<<24>>24==40||w<<24>>24==42){f=18;break}var b=c;f=12;break}while(0);do if(12==f){var b;if(0==(0|b)){f=17;break}var d=b;f=13;break}while(0);do if(13==f){var d,p=r+8|0,E=Me[p>>2];if(0!=(0|E)&&Ae[d+(E-1)|0]<<24>>24==32){f=18;break}if(E>>>0>=Me[_+3]>>>0){f=17;break}Se[p>>2]=E+1|0,Ae[d+E|0]=32,f=18;break}while(0);do if(17==f){Y(r,32),f=18;break}while(0);r:do if(18==f){var A=r+4|0,g=Me[A>>2],y=0==(0|g);do if(!y){var m=r+8|0,S=Me[m>>2];if(S>>>0>=Me[_+3]>>>0)break;Se[m>>2]=S+1|0,Ae[g+S|0]=40;var k=1,u=A,v=u>>2;break r}while(0);Y(r,40);var k=1,u=A,v=u>>2}while(0);var u,k,i=(r+20|0)>>2,M=Se[i];Se[i]=0,vr(r,e,0);r:do if(k){var C=Me[v],R=0==(0|C);do if(!R){var T=r+8|0,O=Me[T>>2];if(O>>>0>=Me[_+3]>>>0)break;Se[T>>2]=O+1|0,Ae[C+O|0]=41;break r}while(0);Y(r,41)}while(0);var N=Me[v],I=0==(0|N);do{if(!I){var P=r+8|0,D=Me[P>>2];if(D>>>0>=Me[_+3]>>>0){f=30;break}Se[P>>2]=D+1|0,Ae[N+D|0]=40,f=31;break}f=30}while(0);30==f&&Y(r,40);var L=Se[a+8>>2];0!=(0|L)&&H(r,L);var F=Me[v],X=0==(0|F);do{if(!X){var j=r+8|0,U=Me[j>>2];if(U>>>0>=Me[_+3]>>>0){f=36;break}Se[j>>2]=U+1|0,Ae[F+U|0]=41,f=37;break}f=36}while(0);36==f&&Y(r,41),vr(r,e,1),Se[i]=M}function ar(r,a,e){var i,v,t,f=r>>2,_=0==(0|e);do{if(!_){var s=e,v=s>>2;r:for(;;){var s;if(0==(0|s)){var n=1;t=14;break}if(0==(0|Se[v+2])){var o=36==(0|Se[Se[v+1]>>2]),l=1&o^1;if(o){var n=l;t=14;break}var b=r+4|0,k=Me[b>>2],u=0==(0|k);do{if(!u){var i=(r+8|0)>>2,c=Me[i];if((c+2|0)>>>0>Me[f+3]>>>0){t=9;break}var h=k+c|0;oe=10272,Ae[h]=255&oe,oe>>=8,Ae[h+1]=255&oe;var d=Se[i]+2|0;Se[i]=d,vr(r,e,0),t=10;break}t=9}while(0);9==t&&(Q(r,0|He.__str140,2),vr(r,e,0));var w=Me[b>>2],p=0==(0|w);do if(!p){var E=r+8|0,A=Me[E>>2];if(A>>>0>=Me[f+3]>>>0)break;Se[E>>2]=A+1|0,Ae[w+A|0]=41;var g=l;t=15;break r}while(0);Y(r,41);var g=l;t=15;break}var s=Se[v],v=s>>2}if(14==t){var n;vr(r,e,0);var g=n}var g;if(0!=(0|g)){t=17;break}var y=r+4|0;t=21;break}t=17}while(0);r:do if(17==t){var m=r+4|0,S=Me[m>>2],M=0==(0|S);do if(!M){var C=r+8|0,R=Me[C>>2];if(R>>>0>=Me[f+3]>>>0)break;Se[C>>2]=R+1|0,Ae[S+R|0]=32;var y=m;break r}while(0);Y(r,32);var y=m}while(0);var y,T=Me[y>>2],O=0==(0|T);do{if(!O){var N=r+8|0,I=Me[N>>2];if(I>>>0>=Me[f+3]>>>0){t=24;break}Se[N>>2]=I+1|0,Ae[T+I|0]=91,t=25;break}t=24}while(0);24==t&&Y(r,91);var P=Se[a+4>>2];0!=(0|P)&&H(r,P);var D=Me[y>>2],L=0==(0|D);do{if(!L){var F=r+8|0,X=Me[F>>2];if(X>>>0>=Me[f+3]>>>0){t=30;break}Se[F>>2]=X+1|0,Ae[D+X|0]=93,t=31;break}t=30}while(0);30==t&&Y(r,93)}function er(r,a){var e,i,v,t,f,_,s=Oe;Oe+=8;var n,o=s,_=(a+4|0)>>2,l=Se[_];if(4==(0|Se[l>>2])){var f=(r+20|0)>>2,b=Se[f];Se[f]=0;var t=(r+16|0)>>2,k=Se[t],u=0|o;Se[u>>2]=k,Se[t]=o;var c=Se[_];Se[o+4>>2]=c;var h=Se[c+4>>2];H(r,h);var d=Se[u>>2];Se[t]=d;var v=(r+4|0)>>2,w=Me[v],p=0==(0|w);do{if(!p){var i=(r+8|0)>>2,E=Me[i],A=0==(0|E);do if(!A){if(Ae[w+(E-1)|0]<<24>>24!=60)break;E>>>0<Me[r+12>>2]>>>0?(Se[i]=E+1|0,Ae[w+E|0]=32):Y(r,32)}while(0);var g=Me[v];if(0==(0|g)){n=12;break}var y=Me[i];if(y>>>0>=Me[r+12>>2]>>>0){n=12;break}Se[i]=y+1|0,Ae[g+y|0]=60,n=13;break}n=12}while(0);12==n&&Y(r,60);var m=Se[Se[_]+8>>2];H(r,m);var S=Me[v],M=0==(0|S);do{if(!M){var e=(r+8|0)>>2,C=Me[e],R=0==(0|C);do if(!R){if(Ae[S+(C-1)|0]<<24>>24!=62)break;C>>>0<Me[r+12>>2]>>>0?(Se[e]=C+1|0,Ae[S+C|0]=32):Y(r,32)}while(0);var T=Me[v];if(0==(0|T)){n=22;break}var O=Me[e];if(O>>>0>=Me[r+12>>2]>>>0){n=22;break}Se[e]=O+1|0,Ae[T+O|0]=62,n=23;break}n=22}while(0);22==n&&Y(r,62),Se[f]=b}else H(r,l);Oe=s}function ir(r,a){var e,i=40==(0|Se[a>>2]);r:do if(i){var v=Me[r+4>>2],t=0==(0|v);do{if(!t){var e=(r+8|0)>>2,f=Me[e],_=a+4|0,s=Me[_>>2],n=Me[s+8>>2];if((n+f|0)>>>0>Me[r+12>>2]>>>0){var o=s,l=n;break}var b=v+f|0,k=Se[s+4>>2];Pa(b,k,n,1);var u=Se[e]+Se[Se[_>>2]+8>>2]|0;Se[e]=u;break r}var c=Me[a+4>>2],o=c,l=Se[c+8>>2]}while(0);var l,o,h=Se[o+4>>2];Q(r,h,l)}else H(r,a);while(0)}function vr(r,a,e){var i,v,t,f,_,f=(r+4|0)>>2,s=0==(0|e),t=(r+16|0)>>2;r:do if(s)for(var n=a;;){var n;if(0==(0|n)){_=29;break r}if(0==(0|Se[f])){_=29;break r}var o=n+8|0,l=0==(0|Se[o>>2]);do if(l){var b=n+4|0;if((Se[Se[b>>2]>>2]-25|0)>>>0<3)break;Se[o>>2]=1;var k=Me[t],u=Se[n+12>>2];Se[t]=u;var c=Me[b>>2],h=Se[c>>2];if(35==(0|h)){var d=n,w=k,p=c;_=14;break r}if(36==(0|h)){var E=n,A=k,g=c;_=15;break r}if(2==(0|h)){var y=k,m=b;_=16;break r}$(r,c),Se[t]=k}while(0);var n=Se[n>>2]}else for(var S=a;;){var S;if(0==(0|S)){_=29;break r}if(0==(0|Se[f])){_=29;break r}var M=S+8|0;if(0==(0|Se[M>>2])){Se[M>>2]=1;var C=Me[t],R=Se[S+12>>2];Se[t]=R;var T=S+4|0,O=Me[T>>2],N=Se[O>>2];if(35==(0|N)){var d=S,w=C,p=O;_=14;break r}if(36==(0|N)){var E=S,A=C,g=O;_=15;break r}if(2==(0|N)){var y=C,m=T;_=16;break r}$(r,O),Se[t]=C}var S=Se[S>>2]}while(0);if(14==_){var p,w,d,I=Se[d>>2];rr(r,p,I),Se[t]=w}else if(15==_){var g,A,E,P=Se[E>>2];ar(r,g,P),Se[t]=A}else if(16==_){var m,y,v=(r+20|0)>>2,D=Se[v];Se[v]=0;var L=Se[Se[m>>2]+4>>2];H(r,L),Se[v]=D;var F=0==(4&Se[r>>2]|0),X=Me[f],j=0!=(0|X);r:do if(F){do if(j){var i=(r+8|0)>>2,U=Me[i];if((U+2|0)>>>0>Me[r+12>>2]>>>0)break;var x=X+U|0;oe=14906,Ae[x]=255&oe,oe>>=8,Ae[x+1]=255&oe;var z=Se[i]+2|0;Se[i]=z;break r}while(0);Q(r,0|He.__str120,2)}else{do if(j){var V=r+8|0,B=Me[V>>2];if(B>>>0>=Me[r+12>>2]>>>0)break;Se[V>>2]=B+1|0,Ae[X+B|0]=46;break r}while(0);Y(r,46)}while(0);var K=Me[Se[m>>2]+8>>2],G=(Se[K>>2]-25|0)>>>0<3;r:do if(G)for(var W=K;;){var W,Z=Me[W+4>>2];if((Se[Z>>2]-25|0)>>>0>=3){var q=Z;break r}var W=Z}else var q=K;while(0);var q;H(r,q),Se[t]=y}}function tr(r,a){var e,e=(r+4|0)>>2,i=Se[e],v=0==(0|i);r:do if(!v){for(var t=Se[r+8>>2]+a|0,f=r+12|0,_=Se[f>>2],s=i;;){var s,_;if(t>>>0<=_>>>0)break r;var n=_<<1,o=fa(s,n);if(0==(0|o))break;Se[e]=o,Se[f>>2]=n;var _=n,s=o}var l=Se[e];va(l),Se[e]=0,Se[r+24>>2]=1}while(0)}function fr(r,a,e){var i,v=J(r),i=v>>2;return 0!=(0|v)&&(Se[i]=21,Se[i+1]=a,Se[i+2]=e),v}function _r(r){var a,a=(r+12|0)>>2,e=Se[a],i=Ae[e]<<24>>24;if(88==(0|i)){var v=e+1|0;Se[a]=v;var t=nr(r),f=Se[a],_=f+1|0;Se[a]=_;var s=Ae[f]<<24>>24==69?t:0,n=s}else if(76==(0|i))var o=or(r),n=o;else var l=N(r),n=l;var n;return n}function sr(r){var a,a=(r+12|0)>>2,e=Se[a],i=Ae[e];if(i<<24>>24==110){var v=e+1|0;Se[a]=v;var t=1,f=Ae[v],_=v}else var t=0,f=i,_=e;var _,f,t,s=(f-48&255&255)<10;r:do if(s)for(var n=f,o=0,l=_;;){var l,o,n,b=(n<<24>>24)-48+10*o|0,k=l+1|0;Se[a]=k;var u=ge[k];if((u-48&255&255)>=10){var c=b;break r}var n=u,o=b,l=k}else var c=0;while(0);var c,h=0==(0|t)?c:0|-c;return h}function nr(r){var a,e,a=(r+12|0)>>2,i=Se[a],v=Ae[i];do{if(v<<24>>24==76){var t=or(r),f=t;e=21;break}if(v<<24>>24==84){var _=x(r),f=_;e=21;break}if(v<<24>>24==115){if(Ae[i+1|0]<<24>>24!=114){e=8;break}var s=i+2|0;Se[a]=s;var n=N(r),o=br(r);if(Ae[Se[a]]<<24>>24==73){var l=z(r),b=D(r,4,o,l),k=D(r,1,n,b),f=k;e=21;break}var u=D(r,1,n,o),f=u;e=21;break}e=8}while(0);r:do if(8==e){var c=kr(r);if(0==(0|c)){var f=0;break}var h=0|c,d=Se[h>>2],w=40==(0|d);do{if(w){var p=c+4|0,E=r+48|0,A=Se[Se[p>>2]+8>>2]-2+Se[E>>2]|0;Se[E>>2]=A;var g=Se[h>>2];if(40!=(0|g)){var y=g;e=13;break}var m=Se[p>>2],S=Se[m>>2],M=Da(S,0|He.__str90);if(0!=(0|M)){var C=m;e=15;break}var R=N(r),T=D(r,43,c,R),f=T;break r}var y=d;e=13}while(0);do if(13==e){var y;if(40==(0|y)){var C=Se[c+4>>2];e=15;break}if(41==(0|y)){var O=c+4|0;e=17;break}if(42==(0|y)){e=18;break}var f=0;break r}while(0);do if(15==e){var C,O=C+12|0;e=17;break}while(0);do if(17==e){var O,I=Se[O>>2];if(1==(0|I))break;if(2==(0|I)){var P=nr(r),L=nr(r),F=D(r,45,P,L),X=D(r,44,c,F);return X}if(3==(0|I)){var j=nr(r),U=nr(r),V=nr(r),B=D(r,48,U,V),H=D(r,47,j,B),K=D(r,46,c,H);return K}var f=0;break r}while(0);var Y=nr(r),G=D(r,43,c,Y);return G}while(0);var f;return f}function or(r){var a,a=(r+12|0)>>2,e=Se[a],i=e+1|0;Se[a]=i;var v=Ae[e]<<24>>24==76;r:do if(v){if(Ae[i]<<24>>24==95)var t=T(r,0),f=t;else{var _=N(r);if(0==(0|_)){var s=0;break}var n=33==(0|Se[_>>2]);do if(n){var o=Se[_+4>>2];if(0==(0|Se[o+16>>2]))break;var l=r+48|0,b=Se[l>>2]-Se[o+4>>2]|0;Se[l>>2]=b}while(0);var k=Se[a];if(Ae[k]<<24>>24==110){var u=k+1|0;Se[a]=u;var c=50,h=u}else var c=49,h=k;for(var h,c,d=h;;){var d,w=Ae[d];if(w<<24>>24==69)break;if(w<<24>>24==0){var s=0;break r}var p=d+1|0;Se[a]=p;var d=p}var E=lr(r,h,d-h|0),A=D(r,c,_,E),f=A}var f,g=Se[a],y=g+1|0;Se[a]=y;var m=Ae[g]<<24>>24==69?f:0,s=m}else var s=0;while(0);var s;return s}function lr(r,a,e){var i=J(r),v=m(i,a,e),t=0==(0|v)?0:i;return t}function br(r){var a=r+12|0,e=Me[a>>2],i=ge[e],v=(i-48&255&255)<10;do if(v)var t=L(r),f=t;else if((i-97&255&255)<26){var _=kr(r);if(0==(0|_)){var f=0;break}if(40!=(0|Se[_>>2])){var f=_;break}var s=r+48|0,n=Se[Se[_+4>>2]+8>>2]+Se[s>>2]+7|0;Se[s>>2]=n;var f=_}else if(i<<24>>24==67||i<<24>>24==68)var o=hr(r),f=o;else{if(i<<24>>24!=76){var f=0;break}Se[a>>2]=e+1|0;var l=L(r);if(0==(0|l)){var f=0;break}var b=dr(r),k=0==(0|b)?0:l,f=k}while(0);var f;return f}function kr(r){var a,e,a=(r+12|0)>>2,i=Se[a],v=i+1|0;Se[a]=v;var t=ge[i],f=i+2|0;Se[a]=f;var _=ge[v];do{if(t<<24>>24==118){if((_-48&255&255)>=10){var s=49,n=0;e=6;break}var o=(_<<24>>24)-48|0,l=L(r),b=ur(r,o,l),k=b;e=14;break}if(t<<24>>24==99){if(_<<24>>24!=118){var s=49,n=0;e=6;break}var u=N(r),c=D(r,42,u,0),k=c;e=14;break}var s=49,n=0;e=6}while(0);r:do if(6==e){for(;;){var n,s,h=(s-n)/2+n|0,d=(h<<4)+ri|0,w=Se[d>>2],p=Ae[w],E=t<<24>>24==p<<24>>24;if(E&&_<<24>>24==Ae[w+1|0]<<24>>24)break;var A=t<<24>>24<p<<24>>24;do if(A)var g=h,y=n;else{if(E&&_<<24>>24<Ae[w+1|0]<<24>>24){var g=h,y=n;break}var g=s,y=h+1|0}while(0);var y,g;if((0|y)==(0|g)){var k=0;break r}var s=g,n=y}var m=cr(r,d),k=m}while(0);var k;return k}function ur(r,a,e){var i=J(r),v=S(i,a,e),t=0==(0|v)?0:i;return t}function cr(r,a){var e=J(r);return 0!=(0|e)&&(Se[e>>2]=40,Se[e+4>>2]=a),e}function hr(r){var a,e,i=Se[r+44>>2],e=i>>2,v=0==(0|i);do if(!v){var t=Se[e];if(0==(0|t)){var f=r+48|0,_=Se[f>>2]+Se[e+2]|0;Se[f>>2]=_}else{if(21!=(0|t))break;var s=r+48|0,n=Se[s>>2]+Se[e+2]|0;Se[s>>2]=n}}while(0);var a=(r+12|0)>>2,o=Se[a],l=o+1|0;Se[a]=l;var b=Ae[o]<<24>>24;do if(67==(0|b)){var k=o+2|0;Se[a]=k;var u=Ae[l]<<24>>24;if(49==(0|u))var c=1;else if(50==(0|u))var c=2;else{if(51!=(0|u)){var h=0;break}var c=3}var c,d=wr(r,c,i),h=d}else if(68==(0|b)){var w=o+2|0;Se[a]=w;var p=Ae[l]<<24>>24;if(48==(0|p))var E=1;else if(49==(0|p))var E=2;else{if(50!=(0|p)){var h=0;break}var E=3}var E,A=pr(r,E,i),h=A}else var h=0;while(0);var h;return h}function dr(r){var a=r+12|0,e=Se[a>>2];if(Ae[e]<<24>>24==95){var i=e+1|0;Se[a>>2]=i;var v=sr(r),t=v>>>31^1}else var t=1;var t;return t}function wr(r,a,e){var i=J(r),v=M(i,a,e),t=0==(0|v)?0:i;return t}function pr(r,a,e){var i=J(r),v=C(i,a,e),t=0==(0|v)?0:i;return t}function Er(r,a){var e=J(r);return 0!=(0|e)&&(Se[e>>2]=5,Se[e+4>>2]=a),e}function Ar(r){var a,a=(r+12|0)>>2,e=Se[a],i=Ae[e]<<24>>24;do if(78==(0|i))var v=gr(r),t=v;else if(90==(0|i))var f=yr(r),t=f;else if(76==(0|i))var _=br(r),t=_;else if(83==(0|i)){if(Ae[e+1|0]<<24>>24==116){var s=e+2|0;Se[a]=s;var n=lr(r,0|He.__str152,3),o=br(r),l=D(r,1,n,o),b=r+48|0,k=Se[b>>2]+3|0;Se[b>>2]=k;var u=0,c=l}else var h=V(r,0),u=1,c=h;var c,u;if(Ae[Se[a]]<<24>>24!=73){var t=c;break}if(0==(0|u)){var d=R(r,c);if(0==(0|d)){var t=0;break}}var w=z(r),p=D(r,4,c,w),t=p}else{var E=br(r);if(Ae[Se[a]]<<24>>24!=73){var t=E;break}var A=R(r,E);if(0==(0|A)){var t=0;break}var g=z(r),y=D(r,4,E,g),t=y}while(0);var t;return t}function gr(r){var a,e=Oe;Oe+=4;var i=e,a=(r+12|0)>>2,v=Se[a],t=v+1|0;Se[a]=t;var f=Ae[v]<<24>>24==78;do if(f){var _=I(r,i,1);if(0==(0|_)){var s=0;break}var n=mr(r);if(Se[_>>2]=n,0==(0|n)){var s=0;break}var o=Se[a],l=o+1|0;if(Se[a]=l,Ae[o]<<24>>24!=69){var s=0;break}var s=Se[i>>2]}else var s=0;while(0);var s;return Oe=e,s}function yr(r){var a,a=(r+12|0)>>2,e=Se[a],i=e+1|0;Se[a]=i;var v=Ae[e]<<24>>24==90;do if(v){var t=O(r,0),f=Se[a],_=f+1|0;if(Se[a]=_,Ae[f]<<24>>24!=69){var s=0;break}if(Ae[_]<<24>>24==115){var n=f+2|0;Se[a]=n;var o=dr(r);if(0==(0|o)){var s=0;break}var l=lr(r,0|He.__str168,14),b=D(r,2,t,l),s=b}else{var k=Ar(r),u=dr(r);if(0==(0|u)){var s=0;break}var c=D(r,2,t,k),s=c}}else var s=0;while(0);var s;return s}function mr(r){var a,e=r+12|0,i=0;r:for(;;){var i,v=ge[Se[e>>2]];if(v<<24>>24==0){var t=0;break}var f=(v-48&255&255)<10|(v-97&255&255)<26;do{if(!f){if(v<<24>>24==76||v<<24>>24==68||v<<24>>24==67){a=5;break}if(v<<24>>24==83){var _=V(r,1),s=_;a=10;break}if(v<<24>>24==73){if(0==(0|i)){var t=0;break r}var n=z(r),o=4,l=n;a=11;break}if(v<<24>>24==84){var b=x(r),s=b;a=10;break}if(v<<24>>24==69){var t=i;break r}var t=0;break r}a=5}while(0);do if(5==a){var k=br(r),s=k;a=10;break}while(0);do if(10==a){var s;if(0==(0|i)){var u=s;a=12;break}var o=1,l=s;a=11;break}while(0);if(11==a)var l,o,c=D(r,o,i,l),u=c;var u;if(v<<24>>24!=83)if(Ae[Se[e>>2]]<<24>>24!=69){var h=R(r,u);if(0==(0|h)){var t=0;break}var i=u}else var i=u;else var i=u}var t;return t}function Sr(r,a){var e,i,v=Oe;Oe+=4;var t=v,i=t>>2,e=(r+12|0)>>2,f=Se[e];if(Ae[f]<<24>>24==74){var _=f+1|0;Se[e]=_;var s=1}else var s=a;var s;Se[i]=0;var n=s,o=0,l=t;r:for(;;)for(var l,o,n,b=n,k=o;;){var k,b,u=Ae[Se[e]];if(u<<24>>24==0||u<<24>>24==69){var c=Se[i];if(0==(0|c)){var h=0;break r}var d=0==(0|Se[c+8>>2]);do if(d){var w=Se[c+4>>2];if(33!=(0|Se[w>>2])){var p=c;break}var E=Se[w+4>>2];if(9!=(0|Se[E+16>>2])){var p=c;break}var A=r+48|0,g=Se[A>>2]-Se[E+4>>2]|0;Se[A>>2]=g,Se[i]=0;var p=0}else var p=c;while(0);var p,y=D(r,35,k,p),h=y;break r}var m=N(r);if(0==(0|m)){var h=0;break r}if(0==(0|b)){var S=D(r,38,m,0);if(Se[l>>2]=S,0==(0|S)){var h=0;break r}var n=0,o=k,l=S+8|0;continue r}var b=0,k=m}var h;return Oe=v,h}function Mr(r){for(var a=r;;){var a;if(0==(0|a)){var e=0;break}var i=Se[a>>2];if(1!=(0|i)&&2!=(0|i)){if(6==(0|i)||7==(0|i)||42==(0|i)){var e=1;break}var e=0;break}var a=Se[a+8>>2]}var e;return e}function Cr(r){var a=r>>2;Se[a+3]=0,Se[a+2]=0,Se[a+1]=0,Se[a]=0,Se[a+4]=0}function Rr(r,a){var e,e=(r+12|0)>>2,i=Se[e],v=(Se[r+4>>2]-i|0)<(0|a);r:do if(v)var t=0;else{var f=i+a|0;Se[e]=f;var _=0==(4&Se[r+8>>2]|0);do if(!_){if(Ae[f]<<24>>24!=36)break;var s=a+(i+1)|0;Se[e]=s}while(0);var n=(0|a)>9;do if(n){var o=La(i,0|He.__str117,8);if(0!=(0|o))break;var l=Ae[i+8|0];if(l<<24>>24!=46&&l<<24>>24!=95&&l<<24>>24!=36)break;if(Ae[i+9|0]<<24>>24!=78)break;var b=r+48|0,k=22-a+Se[b>>2]|0;Se[b>>2]=k;var u=lr(r,0|He.__str169,21),t=u;break r}while(0);var c=lr(r,i,a),t=c}while(0);var t;return t}function Tr(r){var a,e,e=(r+48|0)>>2,i=Se[e],v=i+20|0;Se[e]=v;var a=(r+12|0)>>2,t=Se[a],f=t+1|0;Se[a]=f;var _=Ae[t];do if(_<<24>>24==84){var s=t+2|0;Se[a]=s;var n=Ae[f]<<24>>24;if(86==(0|n)){var o=i+15|0;Se[e]=o;var l=N(r),b=D(r,8,l,0),k=b}else if(84==(0|n)){var u=i+10|0;Se[e]=u;var c=N(r),h=D(r,9,c,0),k=h}else if(73==(0|n))var d=N(r),w=D(r,11,d,0),k=w;else if(83==(0|n))var p=N(r),E=D(r,12,p,0),k=E;else if(104==(0|n)){var A=Nr(r,104);if(0==(0|A)){var k=0;break}var g=O(r,0),y=D(r,14,g,0),k=y}else if(118==(0|n)){var m=Nr(r,118);if(0==(0|m)){var k=0;break}var S=O(r,0),M=D(r,15,S,0),k=M}else if(99==(0|n)){var C=Nr(r,0);if(0==(0|C)){var k=0;break}var R=Nr(r,0);if(0==(0|R)){var k=0;break}var T=O(r,0),I=D(r,16,T,0),k=I}else if(67==(0|n)){var P=N(r),L=sr(r);if((0|L)<0){var k=0;break}var F=Se[a],X=F+1|0;if(Se[a]=X,Ae[F]<<24>>24!=95){var k=0;break}var j=N(r),U=Se[e]+5|0;Se[e]=U;var x=D(r,10,j,P),k=x}else if(70==(0|n))var z=N(r),V=D(r,13,z,0),k=V;else{if(74!=(0|n)){var k=0;break}var B=N(r),H=D(r,17,B,0),k=H}}else if(_<<24>>24==71){var K=t+2|0;Se[a]=K;var Y=Ae[f]<<24>>24;if(86==(0|Y))var G=Ar(r),W=D(r,18,G,0),k=W;else if(82==(0|Y))var Z=Ar(r),Q=D(r,19,Z,0),k=Q;else{if(65!=(0|Y)){var k=0;break}var q=O(r,0),$=D(r,20,q,0),k=$}}else var k=0;while(0);var k;return k}function Or(r){for(var a,e=r,a=e>>2;;){var e;if(0==(0|e)){var i=0;break}var v=Se[a];if(4==(0|v)){var t=Se[a+1],f=Mr(t),i=0==(0|f)&1;break}if(25!=(0|v)&&26!=(0|v)&&27!=(0|v)){var i=0;break}var e=Se[a+1],a=e>>2}var i;return i}function Nr(r,a){var e;if(0==(0|a)){var i=r+12|0,v=Se[i>>2],t=v+1|0;Se[i>>2]=t;var f=Ae[v]<<24>>24}else var f=a;var f;do{if(104==(0|f)){var _=(sr(r),r+12|0);e=7;break}if(118==(0|f)){var s=(sr(r),r+12|0),n=Se[s>>2],o=n+1|0;if(Se[s>>2]=o,Ae[n]<<24>>24!=95){var l=0;e=8;break}var _=(sr(r),s);e=7;break}var l=0;e=8}while(0);if(7==e){var _,b=Se[_>>2],k=b+1|0;Se[_>>2]=k;var l=Ae[b]<<24>>24==95&1}var l;return l}function Ir(r){var a,e,i=r>>2,v=Oe;Oe+=56;var t,f=v,_=v+8,s=v+16,n=v+36,e=(0|r)>>2,o=Se[e],l=0==(8192&o|0);r:do{if(l){var a=(r+12|0)>>2,b=Se[a];if(Ae[b]<<24>>24!=63){var k=0;t=111;break}var u=b+1|0;Se[a]=u;var c=Ae[u];do if(c<<24>>24==63){if(Ae[b+2|0]<<24>>24==36){var h=b+3|0;if(Ae[h]<<24>>24!=63){var d=5;t=90;break}Se[a]=h;var w=6,p=h}else var w=0,p=u;var p,w,E=p+1|0;Se[a]=E;var A=Ae[E]<<24>>24;do if(48==(0|A)){var g=1;t=81}else{if(49==(0|A)){var g=2;t=81;break}if(50!=(0|A)){if(51==(0|A)){var y=0|He.__str2172,m=E;t=82;break}if(52==(0|A)){var y=0|He.__str3173,m=E;t=82;break}if(53==(0|A)){var y=0|He.__str4174,m=E;t=82;break}if(54==(0|A)){var y=0|He.__str5175,m=E;t=82;break}if(55==(0|A)){var y=0|He.__str6176,m=E;t=82;break}if(56==(0|A)){var y=0|He.__str7177,m=E;t=82;break}if(57==(0|A)){var y=0|He.__str8178,m=E;t=82;break}if(65==(0|A)){var y=0|He.__str9179,m=E;t=82;break}if(66==(0|A)){Se[a]=p+2|0;var S=0|He.__str10180,M=3;t=88;break}if(67==(0|A)){var y=0|He.__str11181,m=E;t=82;break}if(68==(0|A)){var y=0|He.__str12182,m=E;t=82;break}if(69==(0|A)){var y=0|He.__str13183,m=E;t=82;break}if(70==(0|A)){var y=0|He.__str14184,m=E;t=82;break}if(71==(0|A)){var y=0|He.__str15185,m=E;t=82;break}if(72==(0|A)){var y=0|He.__str16186,m=E;t=82;break}if(73==(0|A)){var y=0|He.__str17187,m=E;t=82;break}if(74==(0|A)){var y=0|He.__str18188,m=E;t=82;break}if(75==(0|A)){var y=0|He.__str19189,m=E;t=82;break}if(76==(0|A)){var y=0|He.__str20190,m=E;t=82;break}if(77==(0|A)){var y=0|He.__str21191,m=E;t=82;break}if(78==(0|A)){var y=0|He.__str22192,m=E;t=82;break}if(79==(0|A)){var y=0|He.__str23193,m=E;t=82;break}if(80==(0|A)){var y=0|He.__str24194,m=E;t=82;break}if(81==(0|A)){var y=0|He.__str25195,m=E;t=82;break}if(82==(0|A)){var y=0|He.__str26196,m=E;t=82;break}if(83==(0|A)){var y=0|He.__str27197,m=E;t=82;break}if(84==(0|A)){var y=0|He.__str28198,m=E;t=82;break}if(85==(0|A)){var y=0|He.__str29199,m=E;t=82;break}if(86==(0|A)){var y=0|He.__str30200,m=E;t=82;break}if(87==(0|A)){var y=0|He.__str31201,m=E;t=82;break}if(88==(0|A)){var y=0|He.__str32202,m=E;t=82;break}if(89==(0|A)){var y=0|He.__str33203,m=E;t=82;break}if(90==(0|A)){var y=0|He.__str34204,m=E;t=82;break}if(95==(0|A)){var C=p+2|0;Se[a]=C;var R=Ae[C]<<24>>24;if(48==(0|R)){var y=0|He.__str35205,m=C;t=82;break}if(49==(0|R)){var y=0|He.__str36206,m=C;t=82;break}if(50==(0|R)){var y=0|He.__str37207,m=C;t=82;break}if(51==(0|R)){var y=0|He.__str38208,m=C;t=82;break}if(52==(0|R)){var y=0|He.__str39209,m=C;t=82;break}if(53==(0|R)){var y=0|He.__str40210,m=C;t=82;break}if(54==(0|R)){var y=0|He.__str41211,m=C;t=82;break}if(55==(0|R)){var y=0|He.__str42212,m=C;t=82;break}if(56==(0|R)){var y=0|He.__str43213,m=C;t=82;break}if(57==(0|R)){var y=0|He.__str44214,m=C;t=82;break}if(65==(0|R)){var y=0|He.__str45215,m=C;t=82;break}if(66==(0|R)){var y=0|He.__str46216,m=C;t=82;break}if(67==(0|R)){Se[a]=p+3|0;var T=0|He.__str47217;t=84;break}if(68==(0|R)){var y=0|He.__str48218,m=C;t=82;break}if(69==(0|R)){var y=0|He.__str49219,m=C;t=82;break}if(70==(0|R)){var y=0|He.__str50220,m=C;t=82;break}if(71==(0|R)){var y=0|He.__str51221,m=C;t=82;break}if(72==(0|R)){var y=0|He.__str52222,m=C;t=82;break}if(73==(0|R)){var y=0|He.__str53223,m=C;t=82;break}if(74==(0|R)){var y=0|He.__str54224,m=C;t=82;break}if(75==(0|R)){var y=0|He.__str55225,m=C;t=82;break}if(76==(0|R)){var y=0|He.__str56226,m=C;t=82;break}if(77==(0|R)){var y=0|He.__str57227,m=C;t=82;break}if(78==(0|R)){var y=0|He.__str58228,m=C;t=82;break}if(79==(0|R)){var y=0|He.__str59229,m=C;t=82;break}if(82==(0|R)){var O=4|o;Se[e]=O;var N=p+3|0;Se[a]=N;var I=Ae[N]<<24>>24;if(48==(0|I)){Se[a]=p+4|0,Cr(s);var P=(Pr(r,_,s,0),Se[_>>2]),D=Se[_+4>>2],L=Dr(r,0|He.__str60230,(ne=Oe,Oe+=8,Se[ne>>2]=P,Se[ne+4>>2]=D,ne)),F=Se[a]-1|0;Se[a]=F;var y=L,m=F;t=82;break}if(49==(0|I)){Se[a]=p+4|0;var X=Lr(r),j=Lr(r),U=Lr(r),x=Lr(r),z=Se[a]-1|0;Se[a]=z;var V=Dr(r,0|He.__str61231,(ne=Oe,Oe+=16,Se[ne>>2]=X,Se[ne+4>>2]=j,Se[ne+8>>2]=U,Se[ne+12>>2]=x,ne)),y=V,m=Se[a];t=82;break}if(50==(0|I)){var y=0|He.__str62232,m=N;t=82;break}if(51==(0|I)){var y=0|He.__str63233,m=N;t=82;break}if(52==(0|I)){var y=0|He.__str64234,m=N;t=82;break}var y=0,m=N;t=82;break}if(83==(0|R)){var y=0|He.__str65235,m=C;t=82;break}if(84==(0|R)){var y=0|He.__str66236,m=C;t=82;break}if(85==(0|R)){var y=0|He.__str67237,m=C;t=82;break}if(86==(0|R)){var y=0|He.__str68238,m=C;t=82;break}if(88==(0|R)){var y=0|He.__str69239,m=C;t=82;break}if(89==(0|R)){var y=0|He.__str70240,m=C;t=82;break}var k=0;t=111;break r}var k=0;t=111;break r}var y=0|He.__str1171,m=E;t=82}while(0);do{if(81==t){var g;Se[a]=p+2|0;var B=g;t=83;break}if(82==t){var m,y;if(Se[a]=m+1|0,1==(0|w)||2==(0|w)){var B=w;t=83;break}if(4==(0|w)){var T=y;t=84;break}if(6!=(0|w)){var S=y,M=w;t=88;break}Cr(n);var H=Xr(r,n,0,60,62);if(0==(0|H))var K=y;else var Y=Dr(r,0|He.__str170,(ne=Oe,Oe+=8,Se[ne>>2]=y,Se[ne+4>>2]=H,ne)),K=Y;var K;Se[i+6]=0;var S=K,M=w;t=88;break}}while(0);if(83==t){var B,G=r+40|0,W=Fr(r,0|He._symbol_demangle_dashed_null,-1,G);if(0==(0|W)){var k=0;t=111;break r}var d=B;t=90;break}if(84==t){var T;Se[i+4]=T;var Z=1,Q=T;t=109;break r}if(88==t){var M,S,q=r+40|0,$=Fr(r,S,-1,q);if(0==(0|$)){var k=0;t=111;break r}var d=M;t=90;break}}else{if(c<<24>>24==36){var J=b+2|0;Se[a]=J;var rr=jr(r);Se[i+4]=rr;var ar=0!=(0|rr)&1;t=107;break}var d=0;t=90}while(0);if(90==t){var d,er=Me[a],ir=Ae[er]<<24>>24;if(64==(0|ir))Se[a]=er+1|0;else if(36==(0|ir))t=93;else{var vr=zr(r);if(0==(0|vr)){var k=-1;t=111;break}}if(5==(0|d)){var tr=r+20|0,fr=Se[tr>>2]+1|0;Se[tr>>2]=fr}else if(1==(0|d)||2==(0|d)){if(Me[i+11]>>>0<2){var k=-1;t=111;break}var _r=r+56|0,sr=Me[_r>>2],nr=Se[sr+4>>2];if(1==(0|d))Se[sr>>2]=nr;else{var or=Dr(r,0|He.__str71241,(ne=Oe,Oe+=4,Se[ne>>2]=nr,ne)),lr=Se[_r>>2];Se[lr>>2]=or}var br=4|Se[e];Se[e]=br}else if(3==(0|d)){var kr=Se[e]&-5;Se[e]=kr}var ur=ge[Se[a]];if((ur-48&255&255)<10)var cr=Vr(r),ar=cr;else if((ur-65&255&255)<26)var hr=Br(r,3==(0|d)&1),ar=hr;else{if(ur<<24>>24!=36){var k=-1;t=111;break}var dr=Hr(r),ar=dr}}var ar;if(0==(0|ar)){var k=-1;t=111;break}var Z=ar,Q=Se[i+4];t=109;break}var wr=Pr(r,f,0,0);if(0==(0|wr)){var k=-1;t=111;break}var pr=Se[f>>2],Er=Se[f+4>>2],Ar=Dr(r,0|He.__str170,(ne=Oe,Oe+=8,Se[ne>>2]=pr,Se[ne+4>>2]=Er,ne));Se[i+4]=Ar;var Z=1,Q=Ar;t=109;break}while(0);do if(109==t){var Q,Z;if(0!=(0|Q)){var k=Z;break}Xa(0|He.__str72242,1499,0|He.___func___symbol_demangle,0|He.__str73243);var k=Z}while(0);var k;return Oe=v,k}function Pr(r,a,e,i){var v,t,f,_=Oe;Oe+=24;var s=_,n=_+4,o=_+8,l=_+16,b=_+20;0==(0|a)&&Xa(0|He.__str72242,829,0|He.___func___demangle_datatype,0|He.__str121291);var f=(a+4|0)>>2;Se[f]=0;var t=(0|a)>>2;Se[t]=0;var v=(r+12|0)>>2,k=Me[v],u=k+1|0;Se[v]=u;var c=Ae[k],h=c<<24>>24;do if(95==(0|h)){Se[v]=k+2|0;var d=Ae[u],w=Zr(d);Se[t]=w}else if(67==(0|h)||68==(0|h)||69==(0|h)||70==(0|h)||71==(0|h)||72==(0|h)||73==(0|h)||74==(0|h)||75==(0|h)||77==(0|h)||78==(0|h)||79==(0|h)||88==(0|h)||90==(0|h)){var p=Qr(c);Se[t]=p}else if(84==(0|h)||85==(0|h)||86==(0|h)||89==(0|h)){var E=qr(r);if(0==(0|E))break;var A=0==(32768&Se[r>>2]|0);do if(A)if(84==(0|h))var g=0|He.__str122292;else if(85==(0|h))var g=0|He.__str123293;else if(86==(0|h))var g=0|He.__str124294;else{if(89!=(0|h)){var g=0;break}var g=0|He.__str125295}else var g=0;while(0);var g,y=Dr(r,0|He.__str170,(ne=Oe,Oe+=8,Se[ne>>2]=g,Se[ne+4>>2]=E,ne));Se[t]=y}else if(63==(0|h))if(0==(0|i))$r(a,r,e,63,0);else{var m=Lr(r);if(0==(0|m))break;var S=Dr(r,0|He.__str126296,(ne=Oe,Oe+=4,Se[ne>>2]=m,ne));Se[t]=S}else if(65==(0|h)||66==(0|h))$r(a,r,e,c,i);else if(81==(0|h)||82==(0|h)||83==(0|h)){var M=0==(0|i)?80:c;$r(a,r,e,M,i)}else if(80==(0|h))if(((Ae[u]<<24>>24)-48|0)>>>0<10){var C=k+2|0;if(Se[v]=C,Ae[u]<<24>>24!=54)break;var R=r+44|0,T=Se[R>>2];Se[v]=k+3|0;var O=Ae[C],N=Se[r>>2]&-17,I=Ur(O,s,n,N);if(0==(0|I))break;var P=Pr(r,o,e,0);if(0==(0|P))break;var D=Xr(r,e,1,40,41);if(0==(0|D))break;Se[R>>2]=T;var L=Se[o>>2],F=Se[o+4>>2],X=Se[s>>2],j=Dr(r,0|He.__str127297,(ne=Oe,Oe+=12,Se[ne>>2]=L,Se[ne+4>>2]=F,Se[ne+8>>2]=X,ne));Se[t]=j;var U=Dr(r,0|He.__str128298,(ne=Oe,Oe+=4,Se[ne>>2]=D,ne));Se[f]=U}else $r(a,r,e,80,i);else if(87==(0|h)){if(Ae[u]<<24>>24!=52)break;Se[v]=k+2|0;var x=qr(r);if(0==(0|x))break;if(0==(32768&Se[r>>2]|0)){var z=Dr(r,0|He.__str129299,(ne=Oe,Oe+=4,Se[ne>>2]=x,ne));Se[t]=z}else Se[t]=x}else if(48==(0|h)||49==(0|h)||50==(0|h)||51==(0|h)||52==(0|h)||53==(0|h)||54==(0|h)||55==(0|h)||56==(0|h)||57==(0|h)){var V=h<<1,B=V-96|0,H=Yr(e,B);Se[t]=H;var K=V-95|0,Y=Yr(e,K);Se[f]=Y}else if(36==(0|h)){var G=k+2|0;Se[v]=G;var W=Ae[u]<<24>>24;if(48==(0|W)){var Z=Lr(r);Se[t]=Z}else if(68==(0|W)){var Q=Lr(r);if(0==(0|Q))break;var q=Dr(r,0|He.__str130300,(ne=Oe,Oe+=4,Se[ne>>2]=Q,ne));Se[t]=q}else if(70==(0|W)){var $=Lr(r);if(0==(0|$))break;var J=Lr(r);if(0==(0|J))break;var rr=Dr(r,0|He.__str131301,(ne=Oe,Oe+=8,Se[ne>>2]=$,Se[ne+4>>2]=J,ne));Se[t]=rr}else if(71==(0|W)){var ar=Lr(r);if(0==(0|ar))break;var er=Lr(r);if(0==(0|er))break;var ir=Lr(r);if(0==(0|ir))break;var vr=Dr(r,0|He.__str132302,(ne=Oe,Oe+=12,Se[ne>>2]=ar,Se[ne+4>>2]=er,Se[ne+8>>2]=ir,ne));Se[t]=vr}else if(81==(0|W)){var tr=Lr(r);if(0==(0|tr))break;var fr=Dr(r,0|He.__str133303,(ne=Oe,Oe+=4,Se[ne>>2]=tr,ne));Se[t]=fr}else{if(36!=(0|W))break;if(Ae[G]<<24>>24!=67)break;Se[v]=k+3|0;var _r=xr(r,l,b);if(0==(0|_r))break;var sr=Pr(r,a,e,i);if(0==(0|sr))break;var nr=Se[t],or=Se[l>>2],lr=Dr(r,0|He.__str83253,(ne=Oe,Oe+=8,Se[ne>>2]=nr,Se[ne+4>>2]=or,ne));Se[t]=lr}}while(0);var br=0!=(0|Se[t])&1;return Oe=_,br}function Dr(r,a){var e,i=Oe;Oe+=4;var v=i,e=v>>2,t=v;Se[t>>2]=arguments[Dr.length];var f=1,_=0;r:for(;;){var _,f,s=Ae[a+_|0];do{if(s<<24>>24==0)break r;if(s<<24>>24==37){var n=_+1|0,o=Ae[a+n|0]<<24>>24;if(115==(0|o)){var l=Se[e],b=l,k=l+4|0;Se[e]=k;var u=Se[b>>2];if(0==(0|u)){var c=f,h=n;break}var d=Ca(u),c=d+f|0,h=n;break}if(99==(0|o)){var w=Se[e]+4|0;Se[e]=w;var c=f+1|0,h=n;break}if(37==(0|o))var p=n;else var p=_;var p,c=f+1|0,h=p}else var c=f+1|0,h=_}while(0);var h,c,f=c,_=h+1|0}var E=Wr(r,f);if(0==(0|E))var A=0;else{Se[t>>2]=arguments[Dr.length];var g=E,y=0;r:for(;;){var y,g,m=Ae[a+y|0];do{if(m<<24>>24==0)break r;if(m<<24>>24==37){var S=y+1|0,M=Ae[a+S|0]<<24>>24;if(115==(0|M)){var C=Se[e],R=C,T=C+4|0;Se[e]=T;var O=Se[R>>2];if(0==(0|O)){var N=g,I=S;break}var P=Ca(O);Pa(g,O,P,1);var N=g+P|0,I=S;break}if(99==(0|M)){var D=Se[e],L=D,F=D+4|0;Se[e]=F,Ae[g]=255&Se[L>>2];var N=g+1|0,I=S;break}if(37==(0|M))var X=S;else var X=y;var X;Ae[g]=37;var N=g+1|0,I=X}else{Ae[g]=m;var N=g+1|0,I=y}}while(0);var I,N,g=N,y=I+1|0}Ae[g]=0;var A=E}var A;return Oe=i,A}function Lr(r){var a,a=(r+12|0)>>2,e=Se[a],i=Ae[e];if(i<<24>>24==63){var v=e+1|0;Se[a]=v;var t=1,f=v,_=Ae[v]}else var t=0,f=e,_=i;var _,f,t,s=(_-48&255&255)<9;do if(s){var n=Wr(r,3),o=0!=(0|t);o&&(Ae[n]=45);var l=Ae[Se[a]]+1&255;Ae[n+t|0]=l;var b=o?2:1;
Ae[n+b|0]=0;var k=Se[a]+1|0;Se[a]=k;var u=n}else if(_<<24>>24==57){var c=Wr(r,4),h=0!=(0|t);h&&(Ae[c]=45),Ae[c+t|0]=49;var d=h?2:1;Ae[c+d|0]=48;var w=h?3:2;Ae[c+w|0]=0;var p=Se[a]+1|0;Se[a]=p;var u=c}else{if((_-65&255&255)>=16){var u=0;break}for(var E=0,A=f;;){var A,E,g=A+1|0;Se[a]=g;var y=(Ae[A]<<24>>24)+((E<<4)-65)|0,m=ge[g];if((m-65&255&255)>=16)break;var E=y,A=g}if(m<<24>>24!=64){var u=0;break}var S=Wr(r,17),M=0!=(0|t)?0|He.__str119289:0|ii,C=(za(S,0|He.__str118288,(ne=Oe,Oe+=8,Se[ne>>2]=M,Se[ne+4>>2]=y,ne)),Se[a]+1|0);Se[a]=C;var u=S}while(0);var u;return u}function Fr(r,a,e,i){var v,t,f,_;0==(0|a)&&Xa(0|He.__str72242,212,0|He.___func___str_array_push,0|He.__str115285),0==(0|i)&&Xa(0|He.__str72242,213,0|He.___func___str_array_push,0|He.__str116286);var f=(i+12|0)>>2,s=Me[f],n=0==(0|s);do{if(n){Se[f]=32;var o=Wr(r,128);if(0==(0|o)){var l=0;_=17;break}Se[i+16>>2]=o,_=11;break}if(Me[i+8>>2]>>>0<s>>>0){_=11;break}var b=s<<3,k=Wr(r,b);if(0==(0|k)){var l=0;_=17;break}var u=k,c=i+16|0,h=Se[c>>2],d=Se[f]<<2;Pa(k,h,d,1);var w=Se[f]<<1;Se[f]=w,Se[c>>2]=u,_=11;break}while(0);do if(11==_){if((0|e)==-1)var p=Ca(a),E=p;else var E=e;var E,A=ja(a),g=E+1|0,y=Wr(r,g),t=(i+4|0)>>2,v=(i+16|0)>>2,m=(Se[t]<<2)+Se[v]|0;Se[m>>2]=y;var S=Se[Se[v]+(Se[t]<<2)>>2];if(0==(0|S)){Xa(0|He.__str72242,233,0|He.___func___str_array_push,0|He.__str117287);var M=Se[Se[v]+(Se[t]<<2)>>2]}else var M=S;var M;Pa(M,A,E,1),va(A),Ae[Se[Se[v]+(Se[t]<<2)>>2]+g|0]=0;var C=Se[t]+1|0;Se[t]=C;var R=i+8|0;if(C>>>0<Me[R>>2]>>>0){var l=1;break}Se[R>>2]=C;var l=1}while(0);var l;return l}function Xr(r,a,e,i,v){var t,f,_=Oe;Oe+=28;var s,n=_,o=_+8;Cr(o);var f=(r+12|0)>>2,l=0==(0|e),t=(0|n)>>2,b=n+4|0;r:do if(l)for(;;){var k=Se[f],u=Ae[k];if(u<<24>>24==0){s=12;break r}if(u<<24>>24==64){var c=k;s=7;break r}var h=Pr(r,n,a,1);if(0==(0|h)){var d=0;s=25;break r}var w=Se[t],p=Se[b>>2],E=Dr(r,0|He.__str170,(ne=Oe,Oe+=8,Se[ne>>2]=w,Se[ne+4>>2]=p,ne)),A=Fr(r,E,-1,o);if(0==(0|A)){var d=0;s=25;break r}var g=Se[t],y=Da(g,0|He.__str110280);if(0==(0|y)){s=12;break r}}else for(;;){var m=Se[f],S=Ae[m];if(S<<24>>24==0){s=12;break r}if(S<<24>>24==64){var c=m;s=7;break r}var M=Pr(r,n,a,1);if(0==(0|M)){var d=0;s=25;break r}var C=Se[t],R=Da(C,0|He.__str84254);if(0==(0|R)){s=13;break r}var T=Se[b>>2],O=Dr(r,0|He.__str170,(ne=Oe,Oe+=8,Se[ne>>2]=C,Se[ne+4>>2]=T,ne)),N=Fr(r,O,-1,o);if(0==(0|N)){var d=0;s=25;break r}var I=Se[t],P=Da(I,0|He.__str110280);if(0==(0|P)){s=12;break r}}while(0);do if(7==s){var c;Se[f]=c+1|0,s=12;break}while(0);do if(12==s){if(l){s=14;break}s=13;break}while(0);do if(13==s){var D=Se[f],L=D+1|0;if(Se[f]=L,Ae[D]<<24>>24==90){s=14;break}var d=0;s=25;break}while(0);r:do if(14==s){var F=o+4|0,X=Me[F>>2];do{if(0!=(0|X)){if(1==(0|X)){var j=o+16|0,U=Se[Se[j>>2]>>2],x=Da(U,0|He.__str84254);if(0==(0|x)){s=17;break}var z=j;s=20;break}var V=o+16|0;if(X>>>0<=1){var z=V;s=20;break}for(var B=0,H=1;;){var H,B,K=Se[Se[V>>2]+(H<<2)>>2],Y=Dr(r,0|He.__str112282,(ne=Oe,Oe+=8,Se[ne>>2]=B,Se[ne+4>>2]=K,ne)),G=H+1|0;if(G>>>0>=Me[F>>2]>>>0)break;var B=Y,H=G}if(0==(0|Y)){var z=V;s=20;break}var W=Y,Z=Y;s=21;break}s=17}while(0);if(17==s){var Q=i<<24>>24,q=v<<24>>24,$=Dr(r,0|He.__str111281,(ne=Oe,Oe+=8,Se[ne>>2]=Q,Se[ne+4>>2]=q,ne)),d=$;break}if(20==s)var z,W=Se[Se[z>>2]>>2],Z=0;var Z,W,J=v<<24>>24,rr=v<<24>>24==62;do if(rr){var ar=Ca(W);if(Ae[W+(ar-1)|0]<<24>>24!=62)break;var er=i<<24>>24,ir=Se[Se[o+16>>2]>>2],vr=Dr(r,0|He.__str113283,(ne=Oe,Oe+=16,Se[ne>>2]=er,Se[ne+4>>2]=ir,Se[ne+8>>2]=Z,Se[ne+12>>2]=J,ne)),d=vr;break r}while(0);var tr=i<<24>>24,fr=Se[Se[o+16>>2]>>2],_r=Dr(r,0|He.__str114284,(ne=Oe,Oe+=16,Se[ne>>2]=tr,Se[ne+4>>2]=fr,Se[ne+8>>2]=Z,Se[ne+12>>2]=J,ne)),d=_r}while(0);var d;return Oe=_,d}function jr(r){var a,e=Oe;Oe+=20;var i=e,v=r+24|0,t=Se[v>>2],a=(r+20|0)>>2,f=Se[a],_=r+44|0,s=Se[_>>2];Se[a]=t;var n=Kr(r);if(0==(0|n))var o=0;else{Cr(i);var l=Xr(r,i,0,60,62);if(0==(0|l))var b=n;else var k=Dr(r,0|He.__str170,(ne=Oe,Oe+=8,Se[ne>>2]=n,Se[ne+4>>2]=l,ne)),b=k;var b;Se[v>>2]=t,Se[a]=f,Se[_>>2]=s;var o=b}var o;return Oe=e,o}function Ur(r,a,e,i){var v,t=a>>2;Se[e>>2]=0,Se[t]=0;var f=0==(18&i|0);do{if(f){var _=r<<24>>24,s=1==((_-65)%2|0);if(0==(1&i|0)){if(s?Se[e>>2]=0|He.__str95265:v=14,65==(0|_)||66==(0|_)){Se[t]=0|He.__str96266,v=21;break}if(67==(0|_)||68==(0|_)){Se[t]=0|He.__str97267,v=21;break}if(69==(0|_)||70==(0|_)){Se[t]=0|He.__str98268,v=21;break}if(71==(0|_)||72==(0|_)){Se[t]=0|He.__str99269,v=21;break}if(73==(0|_)||74==(0|_)){Se[t]=0|He.__str100270,v=21;break}if(75==(0|_)||76==(0|_)){v=21;break}if(77==(0|_)){Se[t]=0|He.__str101271,v=21;break}var n=0;v=22;break}if(s?Se[e>>2]=0|He.__str88258:v=5,65==(0|_)||66==(0|_)){Se[t]=0|He.__str89259,v=21;break}if(67==(0|_)||68==(0|_)){Se[t]=0|He.__str90260,v=21;break}if(69==(0|_)||70==(0|_)){Se[t]=0|He.__str91261,v=21;break}if(71==(0|_)||72==(0|_)){Se[t]=0|He.__str92262,v=21;break}if(73==(0|_)||74==(0|_)){Se[t]=0|He.__str93263,v=21;break}if(75==(0|_)||76==(0|_)){v=21;break}if(77==(0|_)){Se[t]=0|He.__str94264,v=21;break}var n=0;v=22;break}v=21}while(0);if(21==v)var n=1;var n;return n}function xr(r,a,e){var i;Se[e>>2]=0;var i=(r+12|0)>>2,v=Se[i];if(Ae[v]<<24>>24==69){Se[e>>2]=0|He.__str102272;var t=Se[i]+1|0;Se[i]=t;var f=t}else var f=v;var f;Se[i]=f+1|0;var _=Ae[f]<<24>>24;if(65==(0|_)){Se[a>>2]=0;var s=1}else if(66==(0|_)){Se[a>>2]=0|He.__str103273;var s=1}else if(67==(0|_)){Se[a>>2]=0|He.__str104274;var s=1}else if(68==(0|_)){Se[a>>2]=0|He.__str105275;var s=1}else var s=0;var s;return s}function zr(r){var a,e,a=(r+12|0)>>2,i=r+40|0,v=r+20|0,t=0|i,f=r+44|0,_=r+48|0,s=r+52|0,n=r+56|0,o=r+20|0,l=r+24|0,b=r+16|0,k=0;r:for(;;){var k,u=Se[a],c=Ae[u];if(c<<24>>24==64){var h=u+1|0;Se[a]=h;var d=1;break}var w=c<<24>>24;do{if(0==(0|w)){var d=0;break r}if(48==(0|w)||49==(0|w)||50==(0|w)||51==(0|w)||52==(0|w)||53==(0|w)||54==(0|w)||55==(0|w)||56==(0|w)||57==(0|w)){var p=u+1|0;Se[a]=p;var E=(Ae[u]<<24>>24)-48|0,A=Yr(v,E),g=A;e=14;break}if(63==(0|w)){var y=u+1|0;Se[a]=y;var m=Ae[y]<<24>>24;if(36==(0|m)){var S=u+2|0;Se[a]=S;var M=jr(r);if(0==(0|M)){var d=0;break r}var C=Fr(r,M,-1,v);if(0==(0|C)){var d=0;break r}var R=M;e=15;break}if(63==(0|m)){var T=Se[t>>2],O=Se[f>>2],N=Se[_>>2],I=Se[s>>2],P=Se[n>>2],D=Se[o>>2],L=Se[l>>2];Cr(i);var F=Ir(r);if(0==(0|F))var X=k;else var j=Se[b>>2],U=Dr(r,0|He.__str109279,(ne=Oe,Oe+=4,Se[ne>>2]=j,ne)),X=U;var X;Se[o>>2]=D,Se[l>>2]=L,Se[t>>2]=T,Se[f>>2]=O,Se[_>>2]=N,Se[s>>2]=I,Se[n>>2]=P;var g=X;e=14;break}var x=Lr(r);if(0==(0|x)){var d=0;break r}var z=Dr(r,0|He.__str109279,(ne=Oe,Oe+=4,Se[ne>>2]=x,ne)),g=z;e=14;break}var V=Kr(r),g=V;e=14;break}while(0);if(14==e){var g;if(0==(0|g)){var d=0;break}var R=g}var R,B=Fr(r,R,-1,i);if(0==(0|B)){var d=0;break}var k=R}var d;return d}function Vr(r){var a,e,i,v=Oe;Oe+=36;var t,f=v,i=f>>2,_=v+4,s=v+8,e=s>>2,n=v+16;Se[i]=0;var o=0|r,l=Se[o>>2],b=0==(128&l|0),k=r+12|0;do if(b){var u=Ae[Se[k>>2]]<<24>>24;if(48==(0|u))var c=0|He.__str76246,h=k,a=h>>2;else if(49==(0|u))var c=0|He.__str77247,h=k,a=h>>2;else{if(50!=(0|u)){var c=0,h=k,a=h>>2;break}var c=0|He.__str78248,h=k,a=h>>2}}else var c=0,h=k,a=h>>2;while(0);var h,c,d=0==(512&l|0);do if(d){if((Ae[Se[a]]-48&255&255)>=3){var w=0;break}var w=0|He.__str79249}else var w=0;while(0);var w,p=Gr(r,0),E=Se[a],A=E+1|0;Se[a]=A;var g=Ae[E]<<24>>24;do{if(48==(0|g)||49==(0|g)||50==(0|g)||51==(0|g)||52==(0|g)||53==(0|g)){var y=r+44|0,m=Se[y>>2];Cr(n);var S=Pr(r,s,n,0);if(0==(0|S)){var M=0;t=28;break}var C=xr(r,f,_);if(0==(0|C)){var M=0;t=28;break}var R=Se[i],T=0==(0|R),O=Se[_>>2];do if(T)Se[i]=O;else{if(0==(0|O))break;var N=Dr(r,0|He.__str83253,(ne=Oe,Oe+=8,Se[ne>>2]=R,Se[ne+4>>2]=O,ne));Se[i]=N}while(0);Se[y>>2]=m,t=22;break}if(54==(0|g)||55==(0|g)){var I=s+4|0;Se[I>>2]=0,Se[e]=0;var P=xr(r,f,_);if(0==(0|P)){var M=0;t=28;break}if(Ae[Se[a]]<<24>>24==64){t=22;break}var D=qr(r);if(0==(0|D)){var M=0;t=28;break}var L=Dr(r,0|He.__str107277,(ne=Oe,Oe+=4,Se[ne>>2]=D,ne));Se[I>>2]=L,t=22;break}if(56==(0|g)||57==(0|g)){Se[e+1]=0,Se[e]=0,Se[i]=0,t=22;break}var M=0;t=28}while(0);if(22==t){var F=0==(4096&Se[o>>2]|0);do{if(F){var X=Se[e],j=Se[i];if(0==(0|j)){var U=X;t=26;break}var x=0!=(0|X)?0|He.__str87257:0,z=0|He.__str87257,V=j,B=x,H=X;t=27;break}Se[i]=0,Se[e+1]=0,Se[e]=0;var U=0;t=26;break}while(0);if(26==t)var U,K=0!=(0|U)?0|He.__str87257:0,z=K,V=0,B=0,H=U;var H,B,V,z,Y=Se[e+1],G=Dr(r,0|He.__str108278,(ne=Oe,Oe+=32,Se[ne>>2]=c,Se[ne+4>>2]=w,Se[ne+8>>2]=H,Se[ne+12>>2]=B,Se[ne+16>>2]=V,Se[ne+20>>2]=z,Se[ne+24>>2]=p,Se[ne+28>>2]=Y,ne));Se[r+16>>2]=G;var M=1}var M;return Oe=v,M}function Br(r,a){var e,i,v,t,f=Oe;Oe+=44;var _,s=f,t=s>>2,n=f+8,o=f+12,v=o>>2,l=f+16,b=f+20,k=f+40;Se[v]=0;var i=(r+12|0)>>2,u=Se[i],c=u+1|0;Se[i]=c;var h=ge[u],d=h<<24>>24,w=(h-65&255&255)>25;r:do if(w)var p=0;else{var e=(0|r)>>2,E=Me[e],A=0==(128&E|0),g=d-65|0;do if(A){var y=g/8|0;if(0==(0|y))var m=0|He.__str76246,S=g;else if(1==(0|y))var m=0|He.__str77247,S=g;else{if(2!=(0|y)){var m=0,S=g;break}var m=0|He.__str78248,S=g}}else var m=0,S=g;while(0);var S,m,M=0==(512&E|0)&h<<24>>24<89,C=(0|S)%8;do if(M)if(2==(0|C)||3==(0|C))var R=m,T=0|He.__str79249;else if(4==(0|C)||5==(0|C))var R=m,T=0|He.__str80250;else{if(6!=(0|C)&&7!=(0|C)){var R=m,T=0;break}var O=Dr(r,0|He.__str81251,(ne=Oe,Oe+=4,Se[ne>>2]=m,ne)),R=O,T=0|He.__str80250}else var R=m,T=0;while(0);var T,R,N=Gr(r,0),I=6==(0|C);do{if(!I){if(7==((d-56)%8|0)){_=14;break}var P=N;_=15;break}_=14}while(0);if(14==_)var D=Lr(r),L=Dr(r,0|He.__str82252,(ne=Oe,Oe+=8,Se[ne>>2]=N,Se[ne+4>>2]=D,ne)),P=L;var P,F=h<<24>>24>88;do if(F)var X=0;else{if((C-2|0)>>>0<2){var X=0;break}var j=xr(r,o,k);if(0==(0|j)){var p=0;break r}var U=Me[v],x=Se[k>>2];if(0==(0|U)&0==(0|x)){var X=0;break}var z=Dr(r,0|He.__str83253,(ne=Oe,Oe+=8,Se[ne>>2]=U,Se[ne+4>>2]=x,ne));Se[v]=z;var X=z}while(0);var X,V=Se[i],B=V+1|0;Se[i]=B;var H=Ae[V],K=Se[e],Y=Ur(H,n,l,K);if(0==(0|Y)){var p=0;break}Cr(b);var G=Se[i];if(Ae[G]<<24>>24==64){Se[t]=0|He.__str84254,Se[t+1]=0;var W=G+1|0;Se[i]=W}else{var Z=Pr(r,s,b,0);if(0==(0|Z)){var p=0;break}}if(0!=(4&Se[e]|0)&&(Se[t+1]=0,Se[t]=0),0==(0|a))var Q=P;else{var q=0|s,$=Se[q>>2],J=s+4|0,rr=Se[J>>2],ar=Dr(r,0|He.__str85255,(ne=Oe,Oe+=12,Se[ne>>2]=P,Se[ne+4>>2]=$,Se[ne+8>>2]=rr,ne));Se[J>>2]=0,Se[q>>2]=0;var Q=ar}var Q,er=r+44|0,ir=Se[er>>2],vr=Xr(r,b,1,40,41);if(0==(0|vr)){var p=0;break}if(0==(4096&Se[e]|0))var tr=vr,fr=X;else{Se[v]=0;var tr=0,fr=0}var fr,tr;Se[er>>2]=ir;var _r=Se[t],sr=Se[t+1];if(0==(0|_r))var nr=0;else var or=0!=(0|sr)?0:0|He.__str87257,nr=or;var nr,lr=Se[n>>2],br=0!=(0|lr)?0|He.__str87257:0,kr=Se[l>>2],ur=Dr(r,0|He.__str86256,(ne=Oe,Oe+=44,Se[ne>>2]=R,Se[ne+4>>2]=T,Se[ne+8>>2]=_r,Se[ne+12>>2]=nr,Se[ne+16>>2]=lr,Se[ne+20>>2]=br,Se[ne+24>>2]=kr,Se[ne+28>>2]=Q,Se[ne+32>>2]=tr,Se[ne+36>>2]=fr,Se[ne+40>>2]=sr,ne));Se[r+16>>2]=ur;var p=1}while(0);var p;return Oe=f,p}function Hr(r){var a,a=(r+12|0)>>2,e=Se[a];if(Ae[e]<<24>>24==36)var i=e;else{Xa(0|He.__str72242,1252,0|He.___func___handle_template,0|He.__str74244);var i=Se[a]}var i;Se[a]=i+1|0;var v=Kr(r),t=0==(0|v);do if(t)var f=0;else{var _=Xr(r,0,0,60,62);if(0==(0|_)){var f=0;break}var s=Dr(r,0|He.__str170,(ne=Oe,Oe+=8,Se[ne>>2]=v,Se[ne+4>>2]=_,ne));Se[r+16>>2]=s;var f=1}while(0);var f;return f}function Kr(r){for(var a,a=(r+12|0)>>2,e=Me[a],i=e,v=Ae[e];;){var v,i;if(!((v-65&255&255)<26|(v-97&255&255)<26|(v-48&255&255)<10)&&v<<24>>24!=95&&v<<24>>24!=36){var t=0;break}var f=i+1|0;Se[a]=f;var _=ge[f];if(_<<24>>24==64){Se[a]=i+2|0;var s=f-e|0,n=r+20|0,o=Fr(r,e,s,n);if(0==(0|o)){var t=0;break}var l=Se[r+24>>2]-1-Se[n>>2]|0,b=Yr(n,l),t=b;break}var i=f,v=_}var t;return t}function Yr(r,a){0==(0|r)&&Xa(0|He.__str72242,263,0|He.___func___str_array_get_ref,0|He.__str75245);var e=Se[r>>2]+a|0;if(e>>>0<Me[r+8>>2]>>>0)var i=Se[Se[r+16>>2]+(e<<2)>>2];else var i=0;var i;return i}function Gr(r,a){var e,e=(r+44|0)>>2,i=Me[e];if(i>>>0>a>>>0){for(var v=r+56|0,t=a,f=0,_=Se[v>>2],s=i;;){var s,_,f,t,n=Me[_+(t<<2)>>2];if(0==(0|n)){Xa(0|He.__str72242,680,0|He.___func___get_class_string,0|He.__str106276);var o=Se[v>>2],l=o,b=Se[o+(t<<2)>>2],k=Se[e]}else var l=_,b=n,k=s;var k,b,l,u=Ca(b),c=u+(f+2)|0,h=t+1|0;if(h>>>0>=k>>>0)break;var t=h,f=c,_=l,s=k}var d=c-1|0}else var d=-1;var d,w=Wr(r,d);if(0==(0|w))var p=0;else{var E=Se[e]-1|0,A=(0|E)<(0|a);r:do if(A)var g=0;else for(var y=r+56|0,m=0,S=E;;){var S,m,M=Se[Se[y>>2]+(S<<2)>>2],C=Ca(M),R=w+m|0;Pa(R,M,C,1);var T=C+m|0;if((0|S)>(0|a)){var O=T+1|0;Ae[w+T|0]=58;var N=T+2|0;Ae[w+O|0]=58;var I=N}else var I=T;var I,P=S-1|0;if((0|P)<(0|a)){var g=I;break r}var m=I,S=P}while(0);var g;Ae[w+g|0]=0;var p=w}var p;return p}function Wr(r,a){var e,i=a>>>0>1020;do if(i){var v=Se[r+4>>2],t=a+4|0,f=pe[v](t);if(0==(0|f)){var _=0;break}var s=r+60|0,n=Se[s>>2],o=f;Se[o>>2]=n,Se[s>>2]=f,Se[r+64>>2]=0;var _=f+4|0}else{var e=(r+64|0)>>2,l=Me[e];if(l>>>0<a>>>0){var b=Se[r+4>>2],k=pe[b](1024);if(0==(0|k)){var _=0;break}var u=r+60|0,c=Se[u>>2],h=k;Se[h>>2]=c,Se[u>>2]=k,Se[e]=1020;var d=1020,w=k}else var d=l,w=Se[r+60>>2];var w,d;Se[e]=d-a|0;var _=w+(1024-d)|0}while(0);var _;return _}function Zr(r){var a=r<<24>>24;if(68==(0|a))var e=0|He.__str157327;else if(69==(0|a))var e=0|He.__str158328;else if(70==(0|a))var e=0|He.__str159329;else if(71==(0|a))var e=0|He.__str160330;else if(72==(0|a))var e=0|He.__str161331;else if(73==(0|a))var e=0|He.__str162332;else if(74==(0|a))var e=0|He.__str163333;else if(75==(0|a))var e=0|He.__str164334;else if(76==(0|a))var e=0|He.__str165335;else if(77==(0|a))var e=0|He.__str166336;else if(78==(0|a))var e=0|He.__str167337;else if(87==(0|a))var e=0|He.__str168338;else var e=0;var e;return e}function Qr(r){var a=r<<24>>24;if(67==(0|a))var e=0|He.__str145315;else if(68==(0|a))var e=0|He.__str146316;else if(69==(0|a))var e=0|He.__str147317;else if(70==(0|a))var e=0|He.__str148318;else if(71==(0|a))var e=0|He.__str149319;else if(72==(0|a))var e=0|He.__str150320;else if(73==(0|a))var e=0|He.__str151321;else if(74==(0|a))var e=0|He.__str152322;else if(75==(0|a))var e=0|He.__str153323;else if(77==(0|a))var e=0|He.__str154324;else if(78==(0|a))var e=0|He.__str155325;else if(79==(0|a))var e=0|He.__str156326;else if(88==(0|a))var e=0|He.__str84254;else if(90==(0|a))var e=0|He.__str110280;else var e=0;var e;return e}function qr(r){var a=r+44|0,e=Se[a>>2],i=zr(r);if(0==(0|i))var v=0;else var t=Gr(r,e),v=t;var v;return Se[a>>2]=e,v}function $r(r,a,e,i,v){var t,f,_,s=Oe;Oe+=16;var n,o=s,_=o>>2,l=s+4,b=s+8,f=b>>2;Se[l>>2]=0|ii;var t=(a+12|0)>>2,k=Se[t];if(Ae[k]<<24>>24==69){Se[l>>2]=0|He.__str134304;var u=k+1|0;Se[t]=u;var c=0|He.__str134304}else var c=0|ii;var c,h=i<<24>>24;do{if(65==(0|h)){var d=Dr(a,0|He.__str135305,(ne=Oe,Oe+=4,Se[ne>>2]=c,ne)),w=d;n=10;break}if(66==(0|h)){var p=Dr(a,0|He.__str136306,(ne=Oe,Oe+=4,Se[ne>>2]=c,ne)),w=p;n=10;break}if(80==(0|h)){var E=Dr(a,0|He.__str137307,(ne=Oe,Oe+=4,Se[ne>>2]=c,ne)),w=E;n=10;break}if(81==(0|h)){var A=Dr(a,0|He.__str138308,(ne=Oe,Oe+=4,Se[ne>>2]=c,ne)),w=A;n=10;break}if(82==(0|h)){var g=Dr(a,0|He.__str139309,(ne=Oe,Oe+=4,Se[ne>>2]=c,ne)),w=g;n=10;break}if(83==(0|h)){var y=Dr(a,0|He.__str140310,(ne=Oe,Oe+=4,Se[ne>>2]=c,ne)),w=y;n=10;break}if(63==(0|h)){var w=0|ii;n=10}else n=31}while(0);r:do if(10==n){var w,m=xr(a,o,l);if(0==(0|m))break;var S=a+44|0,M=Se[S>>2],C=Se[t],R=Ae[C]<<24>>24==89;a:do if(R){var T=C+1|0;Se[t]=T;var O=Lr(a);if(0==(0|O))break r;var N=Ha(O),I=Ae[w]<<24>>24==32,P=Se[_],D=0==(0|P);do{if(I){if(!D){n=17;break}var L=w+1|0;n=18;break}if(D){var L=w;n=18;break}n=17;break}while(0);if(17==n){var F=Dr(a,0|He.__str141311,(ne=Oe,Oe+=8,Se[ne>>2]=P,Se[ne+4>>2]=w,ne));Se[_]=0;var X=F}else if(18==n)var L,j=Dr(a,0|He.__str142312,(ne=Oe,Oe+=4,Se[ne>>2]=L,ne)),X=j;var X;if(0==(0|N)){var U=X;break}for(var x=X,z=N;;){var z,x,V=z-1|0,B=Lr(a),H=Dr(a,0|He.__str143313,(ne=Oe,Oe+=8,Se[ne>>2]=x,Se[ne+4>>2]=B,ne));if(0==(0|V)){var U=H;break a}var x=H,z=V}}else var U=w;while(0);var U,K=Pr(a,b,e,0);if(0==(0|K))break;var Y=Se[_];if(0==(0|Y)){var G=0==(0|v);do if(G){if(Ae[U]<<24>>24==0){var W=U;break}var Z=U+1|0;if(Ae[Z]<<24>>24!=42){var W=U;break}var Q=Se[f],q=Ca(Q);if(Ae[Q+(q-1)|0]<<24>>24!=42){var W=U;break}var W=Z}else var W=U;while(0);var W,$=Se[f],J=Dr(a,0|He.__str170,(ne=Oe,Oe+=8,Se[ne>>2]=$,Se[ne+4>>2]=W,ne));Se[r>>2]=J}else{var rr=Se[f],ar=Dr(a,0|He.__str144314,(ne=Oe,Oe+=12,Se[ne>>2]=rr,Se[ne+4>>2]=Y,Se[ne+8>>2]=U,ne));Se[r>>2]=ar}var er=Se[f+1];Se[r+4>>2]=er,Se[S>>2]=M}while(0);Oe=s}function Jr(r){var a,e=r>>>0<245;do{if(e){if(r>>>0<11)var i=16;else var i=r+11&-8;var i,v=i>>>3,t=Me[vi>>2],f=t>>>(v>>>0);if(0!=(3&f|0)){var _=(1&f^1)+v|0,s=_<<1,n=(s<<2)+vi+40|0,o=(s+2<<2)+vi+40|0,l=Me[o>>2],b=l+8|0,k=Me[b>>2];if((0|n)==(0|k))Se[vi>>2]=t&(1<<_^-1);else{if(k>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[o>>2]=k,Se[k+12>>2]=n}var u=_<<3;Se[l+4>>2]=3|u;var c=l+(4|u)|0,h=1|Se[c>>2];Se[c>>2]=h;var d=b;a=38;break}if(i>>>0<=Me[vi+8>>2]>>>0){var w=i;a=30;break}if(0!=(0|f)){var p=2<<v,E=f<<v&(p|-p),A=(E&-E)-1|0,g=A>>>12&16,y=A>>>(g>>>0),m=y>>>5&8,S=y>>>(m>>>0),M=S>>>2&4,C=S>>>(M>>>0),R=C>>>1&2,T=C>>>(R>>>0),O=T>>>1&1,N=(m|g|M|R|O)+(T>>>(O>>>0))|0,I=N<<1,P=(I<<2)+vi+40|0,D=(I+2<<2)+vi+40|0,L=Me[D>>2],F=L+8|0,X=Me[F>>2];if((0|P)==(0|X))Se[vi>>2]=t&(1<<N^-1);else{if(X>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[D>>2]=X,Se[X+12>>2]=P}var j=N<<3,U=j-i|0;Se[L+4>>2]=3|i;var x=L,z=x+i|0;Se[x+(4|i)>>2]=1|U,Se[x+j>>2]=U;var V=Me[vi+8>>2];if(0!=(0|V)){var B=Se[vi+20>>2],H=V>>>2&1073741822,K=(H<<2)+vi+40|0,Y=Me[vi>>2],G=1<<(V>>>3),W=0==(Y&G|0);do{if(!W){var Z=(H+2<<2)+vi+40|0,Q=Me[Z>>2];if(Q>>>0>=Me[vi+16>>2]>>>0){var q=Q,$=Z;break}throw Ka(),"Reached an unreachable!"}Se[vi>>2]=Y|G;var q=K,$=(H+2<<2)+vi+40|0}while(0);var $,q;Se[$>>2]=B,Se[q+12>>2]=B;var J=B+8|0;Se[J>>2]=q;var rr=B+12|0;Se[rr>>2]=K}Se[vi+8>>2]=U,Se[vi+20>>2]=z;var d=F;a=38;break}if(0==(0|Se[vi+4>>2])){var w=i;a=30;break}var ar=ra(i);if(0==(0|ar)){var w=i;a=30;break}var d=ar;a=38;break}if(r>>>0>4294967231){var w=-1;a=30;break}var er=r+11&-8;if(0==(0|Se[vi+4>>2])){var w=er;a=30;break}var ir=ea(er);if(0==(0|ir)){var w=er;a=30;break}var d=ir;a=38;break}while(0);if(30==a){var w,vr=Me[vi+8>>2];if(w>>>0>vr>>>0){var tr=Me[vi+12>>2];if(w>>>0<tr>>>0){var fr=tr-w|0;Se[vi+12>>2]=fr;var _r=Me[vi+24>>2],sr=_r;Se[vi+24>>2]=sr+w|0,Se[w+(sr+4)>>2]=1|fr,Se[_r+4>>2]=3|w;var d=_r+8|0}else var nr=aa(w),d=nr}else{var or=vr-w|0,lr=Me[vi+20>>2];if(or>>>0>15){var br=lr;Se[vi+20>>2]=br+w|0,Se[vi+8>>2]=or,Se[w+(br+4)>>2]=1|or,Se[br+vr>>2]=or,Se[lr+4>>2]=3|w}else{Se[vi+8>>2]=0,Se[vi+20>>2]=0,Se[lr+4>>2]=3|vr;var kr=vr+(lr+4)|0,ur=1|Se[kr>>2];Se[kr>>2]=ur}var d=lr+8|0}}var d;return d}function ra(r){var a,e,i,v=Se[vi+4>>2],t=(v&-v)-1|0,f=t>>>12&16,_=t>>>(f>>>0),s=_>>>5&8,n=_>>>(s>>>0),o=n>>>2&4,l=n>>>(o>>>0),b=l>>>1&2,k=l>>>(b>>>0),u=k>>>1&1,c=Me[vi+((s|f|o|b|u)+(k>>>(u>>>0))<<2)+304>>2],h=c,e=h>>2,d=(Se[c+4>>2]&-8)-r|0;r:for(;;)for(var d,h,w=h;;){var w,p=Se[w+16>>2];if(0==(0|p)){var E=Se[w+20>>2];if(0==(0|E))break r;var A=E}else var A=p;var A,g=(Se[A+4>>2]&-8)-r|0;if(g>>>0<d>>>0){var h=A,e=h>>2,d=g;continue r}var w=A}var y=h,m=Me[vi+16>>2],S=y>>>0<m>>>0;do if(!S){var M=y+r|0,C=M;if(y>>>0>=M>>>0)break;var R=Me[e+6],T=Me[e+3],O=(0|T)==(0|h);do if(O){var N=h+20|0,I=Se[N>>2];if(0==(0|I)){var P=h+16|0,D=Se[P>>2];if(0==(0|D)){var L=0,a=L>>2;break}var F=P,X=D}else{var F=N,X=I;i=14}for(;;){var X,F,j=X+20|0,U=Se[j>>2];if(0==(0|U)){var x=X+16|0,z=Me[x>>2];if(0==(0|z))break;var F=x,X=z}else var F=j,X=U}if(F>>>0<m>>>0)throw Ka(),"Reached an unreachable!";Se[F>>2]=0;var L=X,a=L>>2}else{var V=Me[e+2];if(V>>>0<m>>>0)throw Ka(),"Reached an unreachable!";Se[V+12>>2]=T,Se[T+8>>2]=V;var L=T,a=L>>2}while(0);var L,B=0==(0|R);r:do if(!B){var H=h+28|0,K=(Se[H>>2]<<2)+vi+304|0,Y=(0|h)==(0|Se[K>>2]);do{if(Y){if(Se[K>>2]=L,0!=(0|L))break;var G=Se[vi+4>>2]&(1<<Se[H>>2]^-1);Se[vi+4>>2]=G;break r}if(R>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";var W=R+16|0;if((0|Se[W>>2])==(0|h)?Se[W>>2]=L:Se[R+20>>2]=L,0==(0|L))break r}while(0);if(L>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+6]=R;var Z=Me[e+4];if(0!=(0|Z)){if(Z>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+4]=Z,Se[Z+24>>2]=L}var Q=Me[e+5];if(0==(0|Q))break;if(Q>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+5]=Q,Se[Q+24>>2]=L}while(0);if(d>>>0<16){var q=d+r|0;Se[e+1]=3|q;var $=q+(y+4)|0,J=1|Se[$>>2];Se[$>>2]=J}else{Se[e+1]=3|r,Se[r+(y+4)>>2]=1|d,Se[y+d+r>>2]=d;var rr=Me[vi+8>>2];if(0!=(0|rr)){var ar=Me[vi+20>>2],er=rr>>>2&1073741822,ir=(er<<2)+vi+40|0,vr=Me[vi>>2],tr=1<<(rr>>>3),fr=0==(vr&tr|0);do{if(!fr){var _r=(er+2<<2)+vi+40|0,sr=Me[_r>>2];if(sr>>>0>=Me[vi+16>>2]>>>0){var nr=sr,or=_r;break}throw Ka(),"Reached an unreachable!"}Se[vi>>2]=vr|tr;var nr=ir,or=(er+2<<2)+vi+40|0}while(0);var or,nr;Se[or>>2]=ar,Se[nr+12>>2]=ar,Se[ar+8>>2]=nr,Se[ar+12>>2]=ir}Se[vi+8>>2]=d,Se[vi+20>>2]=C}return h+8|0}while(0);throw Ka(),"Reached an unreachable!"}function aa(r){var a,e;0==(0|Se[ti>>2])&&ba();var i=0==(4&Se[vi+440>>2]|0);do{if(i){var v=Se[vi+24>>2],t=0==(0|v);do{if(!t){var f=v,_=ua(f);if(0==(0|_)){e=6;break}var s=Se[ti+8>>2],n=r+47-Se[vi+12>>2]+s&-s;if(n>>>0>=2147483647){e=14;break}var o=re(n);if((0|o)==(Se[_>>2]+Se[_+4>>2]|0)){var l=o,b=n,k=o;e=13;break}var u=o,c=n;e=15;break}e=6}while(0);do if(6==e){var h=re(0);if((0|h)==-1){e=14;break}var d=Se[ti+8>>2],w=d+(r+47)&-d,p=h,E=Se[ti+4>>2],A=E-1|0;if(0==(A&p|0))var g=w;else var g=w-p+(A+p&-E)|0;var g;if(g>>>0>=2147483647){e=14;break}var y=re(g);if((0|y)==(0|h)){var l=h,b=g,k=y;e=13;break}var u=y,c=g;e=15;break}while(0);if(13==e){var k,b,l;if((0|l)!=-1){var m=b,S=l;e=26;break}var u=k,c=b}else if(14==e){var M=4|Se[vi+440>>2];Se[vi+440>>2]=M,e=23;break}var c,u,C=0|-c,R=(0|u)!=-1&c>>>0<2147483647;do{if(R){if(c>>>0>=(r+48|0)>>>0){var T=c;e=21;break}var O=Se[ti+8>>2],N=r+47-c+O&-O;if(N>>>0>=2147483647){var T=c;e=21;break}var I=re(N);if((0|I)==-1){re(C);e=22;break}var T=N+c|0;e=21;break}var T=c;e=21}while(0);if(21==e){var T;if((0|u)!=-1){var m=T,S=u;e=26;break}}var P=4|Se[vi+440>>2];Se[vi+440>>2]=P,e=23;break}e=23}while(0);do if(23==e){var D=Se[ti+8>>2],L=D+(r+47)&-D;if(L>>>0>=2147483647){e=49;break}var F=re(L),X=re(0);if(!((0|X)!=-1&(0|F)!=-1&F>>>0<X>>>0)){e=49;break}var j=X-F|0;if(j>>>0<=(r+40|0)>>>0|(0|F)==-1){e=49;break}var m=j,S=F;e=26;break}while(0);r:do if(26==e){var S,m,U=Se[vi+432>>2]+m|0;Se[vi+432>>2]=U,U>>>0>Me[vi+436>>2]>>>0&&(Se[vi+436>>2]=U);var x=Me[vi+24>>2],z=0==(0|x);a:do if(z){var V=Me[vi+16>>2];0==(0|V)|S>>>0<V>>>0&&(Se[vi+16>>2]=S),Se[vi+444>>2]=S,Se[vi+448>>2]=m,Se[vi+456>>2]=0;var B=Se[ti>>2];Se[vi+36>>2]=B,Se[vi+32>>2]=-1,ha(),ca(S,m-40|0)}else{for(var H=vi+444|0,a=H>>2;;){var H;if(0==(0|H))break;var K=Me[a],Y=H+4|0,G=Me[Y>>2],W=K+G|0;if((0|S)==(0|W)){if(0!=(8&Se[a+3]|0))break;var Z=x;if(!(Z>>>0>=K>>>0&Z>>>0<W>>>0))break;Se[Y>>2]=G+m|0;var Q=Se[vi+24>>2],q=Se[vi+12>>2]+m|0;ca(Q,q);break a}var H=Se[a+2],a=H>>2}S>>>0<Me[vi+16>>2]>>>0&&(Se[vi+16>>2]=S);for(var $=S+m|0,J=vi+444|0;;){var J;if(0==(0|J))break;var rr=0|J,ar=Me[rr>>2];if((0|ar)==(0|$)){if(0!=(8&Se[J+12>>2]|0))break;Se[rr>>2]=S;var er=J+4|0,ir=Se[er>>2]+m|0;Se[er>>2]=ir;var vr=da(S,ar,r),tr=vr;e=50;break r}var J=Se[J+8>>2]}Ma(S,m)}while(0);var fr=Me[vi+12>>2];if(fr>>>0<=r>>>0){e=49;break}var _r=fr-r|0;Se[vi+12>>2]=_r;var sr=Me[vi+24>>2],nr=sr;Se[vi+24>>2]=nr+r|0,Se[r+(nr+4)>>2]=1|_r,Se[sr+4>>2]=3|r;var tr=sr+8|0;e=50;break}while(0);if(49==e){var or=Je();Se[or>>2]=12;var tr=0}var tr;return tr}function ea(r){var a,e,i,v,t,f,_=r>>2,s=0|-r,n=r>>>8,o=0==(0|n);do if(o)var l=0;else{if(r>>>0>16777215){var l=31;break}var b=(n+1048320|0)>>>16&8,k=n<<b,u=(k+520192|0)>>>16&4,c=k<<u,h=(c+245760|0)>>>16&2,d=14-(u|b|h)+(c<<h>>>15)|0,l=r>>>((d+7|0)>>>0)&1|d<<1}while(0);var l,w=Me[vi+(l<<2)+304>>2],p=0==(0|w);r:do if(p)var E=0,A=s,g=0;else{if(31==(0|l))var y=0;else var y=25-(l>>>1)|0;for(var y,m=0,S=s,M=w,t=M>>2,C=r<<y,R=0;;){var R,C,M,S,m,T=Se[t+1]&-8,O=T-r|0;if(O>>>0<S>>>0){if((0|T)==(0|r)){var E=M,A=O,g=M;break r}var N=M,I=O}else var N=m,I=S;var I,N,P=Me[t+5],D=Me[((C>>>31<<2)+16>>2)+t],L=0==(0|P)|(0|P)==(0|D)?R:P;if(0==(0|D)){var E=N,A=I,g=L;break r}var m=N,S=I,M=D,t=M>>2,C=C<<1,R=L}}while(0);var g,A,E,F=0==(0|g)&0==(0|E);do if(F){var X=2<<l,j=Se[vi+4>>2]&(X|-X);if(0==(0|j)){var U=g;break}var x=(j&-j)-1|0,z=x>>>12&16,V=x>>>(z>>>0),B=V>>>5&8,H=V>>>(B>>>0),K=H>>>2&4,Y=H>>>(K>>>0),G=Y>>>1&2,W=Y>>>(G>>>0),Z=W>>>1&1,U=Se[vi+((B|z|K|G|Z)+(W>>>(Z>>>0))<<2)+304>>2]}else var U=g;while(0);var U,Q=0==(0|U);r:do if(Q)var q=A,$=E,v=$>>2;else for(var J=U,i=J>>2,rr=A,ar=E;;){var ar,rr,J,er=(Se[i+1]&-8)-r|0,ir=er>>>0<rr>>>0,vr=ir?er:rr,tr=ir?J:ar,fr=Me[i+4];if(0==(0|fr)){var _r=Me[i+5];if(0==(0|_r)){var q=vr,$=tr,v=$>>2;break r}var J=_r,i=J>>2,rr=vr,ar=tr}else var J=fr,i=J>>2,rr=vr,ar=tr}while(0);var $,q,sr=0==(0|$);r:do{if(!sr){if(q>>>0>=(Se[vi+8>>2]-r|0)>>>0){var nr=0;break}var or=$,e=or>>2,lr=Me[vi+16>>2],br=or>>>0<lr>>>0;do if(!br){var kr=or+r|0,ur=kr;if(or>>>0>=kr>>>0)break;var cr=Me[v+6],hr=Me[v+3],dr=(0|hr)==(0|$);do if(dr){var wr=$+20|0,pr=Se[wr>>2];if(0==(0|pr)){var Er=$+16|0,Ar=Se[Er>>2];if(0==(0|Ar)){var gr=0,a=gr>>2;break}var yr=Er,mr=Ar}else{var yr=wr,mr=pr;f=28}for(;;){var mr,yr,Sr=mr+20|0,Mr=Se[Sr>>2];if(0==(0|Mr)){var Cr=mr+16|0,Rr=Me[Cr>>2];if(0==(0|Rr))break;var yr=Cr,mr=Rr}else var yr=Sr,mr=Mr}if(yr>>>0<lr>>>0)throw Ka(),"Reached an unreachable!";Se[yr>>2]=0;var gr=mr,a=gr>>2}else{var Tr=Me[v+2];if(Tr>>>0<lr>>>0)throw Ka(),"Reached an unreachable!";Se[Tr+12>>2]=hr,Se[hr+8>>2]=Tr;var gr=hr,a=gr>>2}while(0);var gr,Or=0==(0|cr);a:do if(!Or){var Nr=$+28|0,Ir=(Se[Nr>>2]<<2)+vi+304|0,Pr=(0|$)==(0|Se[Ir>>2]);do{if(Pr){if(Se[Ir>>2]=gr,0!=(0|gr))break;var Dr=Se[vi+4>>2]&(1<<Se[Nr>>2]^-1);Se[vi+4>>2]=Dr;break a}if(cr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";var Lr=cr+16|0;if((0|Se[Lr>>2])==(0|$)?Se[Lr>>2]=gr:Se[cr+20>>2]=gr,0==(0|gr))break a}while(0);if(gr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+6]=cr;var Fr=Me[v+4];if(0!=(0|Fr)){if(Fr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+4]=Fr,Se[Fr+24>>2]=gr}var Xr=Me[v+5];if(0==(0|Xr))break;if(Xr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+5]=Xr,Se[Xr+24>>2]=gr}while(0);var jr=q>>>0<16;a:do if(jr){var Ur=q+r|0;Se[v+1]=3|Ur;var xr=Ur+(or+4)|0,zr=1|Se[xr>>2];Se[xr>>2]=zr}else if(Se[v+1]=3|r,Se[_+(e+1)]=1|q,Se[(q>>2)+e+_]=q,q>>>0<256){var Vr=q>>>2&1073741822,Br=(Vr<<2)+vi+40|0,Hr=Me[vi>>2],Kr=1<<(q>>>3),Yr=0==(Hr&Kr|0);do{if(!Yr){var Gr=(Vr+2<<2)+vi+40|0,Wr=Me[Gr>>2];if(Wr>>>0>=Me[vi+16>>2]>>>0){var Zr=Wr,Qr=Gr;break}throw Ka(),"Reached an unreachable!"}Se[vi>>2]=Hr|Kr;var Zr=Br,Qr=(Vr+2<<2)+vi+40|0}while(0);var Qr,Zr;Se[Qr>>2]=ur,Se[Zr+12>>2]=ur,Se[_+(e+2)]=Zr,Se[_+(e+3)]=Br}else{var qr=kr,$r=q>>>8,Jr=0==(0|$r);do if(Jr)var ra=0;else{if(q>>>0>16777215){var ra=31;break}var aa=($r+1048320|0)>>>16&8,ea=$r<<aa,ia=(ea+520192|0)>>>16&4,va=ea<<ia,ta=(va+245760|0)>>>16&2,fa=14-(ia|aa|ta)+(va<<ta>>>15)|0,ra=q>>>((fa+7|0)>>>0)&1|fa<<1}while(0);var ra,_a=(ra<<2)+vi+304|0;Se[_+(e+7)]=ra;var sa=r+(or+16)|0;Se[_+(e+5)]=0,Se[sa>>2]=0;var na=Se[vi+4>>2],oa=1<<ra;if(0==(na&oa|0)){var la=na|oa;Se[vi+4>>2]=la,Se[_a>>2]=qr,Se[_+(e+6)]=_a,Se[_+(e+3)]=qr,Se[_+(e+2)]=qr}else{if(31==(0|ra))var ba=0;else var ba=25-(ra>>>1)|0;for(var ba,ka=q<<ba,ua=Se[_a>>2];;){var ua,ka;if((Se[ua+4>>2]&-8|0)==(0|q)){var ca=ua+8|0,ha=Me[ca>>2],da=Me[vi+16>>2],wa=ua>>>0<da>>>0;do if(!wa){if(ha>>>0<da>>>0)break;Se[ha+12>>2]=qr,Se[ca>>2]=qr,Se[_+(e+2)]=ha,Se[_+(e+3)]=ua,Se[_+(e+6)]=0;break a}while(0);throw Ka(),"Reached an unreachable!"}var pa=(ka>>>31<<2)+ua+16|0,Ea=Me[pa>>2];if(0==(0|Ea)){if(pa>>>0>=Me[vi+16>>2]>>>0){Se[pa>>2]=qr,Se[_+(e+6)]=ua,Se[_+(e+3)]=qr,Se[_+(e+2)]=qr;break a}throw Ka(),"Reached an unreachable!"}var ka=ka<<1,ua=Ea}}}while(0);var nr=$+8|0;break r}while(0);throw Ka(),"Reached an unreachable!"}var nr=0}while(0);var nr;return nr}function ia(r){var a;0==(0|Se[ti>>2])&&ba();var e=r>>>0<4294967232;r:do if(e){var i=Me[vi+24>>2];if(0==(0|i)){var v=0;break}var t=Me[vi+12>>2],f=t>>>0>(r+40|0)>>>0;do if(f){var _=Me[ti+8>>2],s=-40-r-1+t+_|0,n=Math.floor((s>>>0)/(_>>>0)),o=(n-1)*_|0,l=i,b=ua(l);if(0!=(8&Se[b+12>>2]|0))break;var k=re(0),a=(b+4|0)>>2;if((0|k)!=(Se[b>>2]+Se[a]|0))break;var u=o>>>0>2147483646?-2147483648-_|0:o,c=0|-u,h=re(c),d=re(0);if(!((0|h)!=-1&d>>>0<k>>>0))break;var w=k-d|0;if((0|k)==(0|d))break;var p=Se[a]-w|0;Se[a]=p;var E=Se[vi+432>>2]-w|0;Se[vi+432>>2]=E;var A=Se[vi+24>>2],g=Se[vi+12>>2]-w|0;ca(A,g);var v=(0|k)!=(0|d);break r}while(0);if(Me[vi+12>>2]>>>0<=Me[vi+28>>2]>>>0){var v=0;break}Se[vi+28>>2]=-1;var v=0}else var v=0;while(0);var v;return 1&v}function va(r){var a,e,i,v,t,f,_,s=r>>2,n=0==(0|r);r:do if(!n){var o=r-8|0,l=o,b=Me[vi+16>>2],k=o>>>0<b>>>0;a:do if(!k){var u=Me[r-4>>2],c=3&u;if(1==(0|c))break;var h=u&-8,f=h>>2,d=r+(h-8)|0,w=d,p=0==(1&u|0);e:do if(p){var E=Me[o>>2];if(0==(0|c))break r;var A=-8-E|0,t=A>>2,g=r+A|0,y=g,m=E+h|0;if(g>>>0<b>>>0)break a;if((0|y)==(0|Se[vi+20>>2])){var v=(r+(h-4)|0)>>2;if(3!=(3&Se[v]|0)){var S=y,i=S>>2,M=m;break}Se[vi+8>>2]=m;var C=Se[v]&-2;Se[v]=C,Se[t+(s+1)]=1|m,Se[d>>2]=m;break r}if(E>>>0<256){var R=Me[t+(s+2)],T=Me[t+(s+3)];if((0|R)!=(0|T)){var O=((E>>>2&1073741822)<<2)+vi+40|0,N=(0|R)!=(0|O)&R>>>0<b>>>0;do if(!N){if(!((0|T)==(0|O)|T>>>0>=b>>>0))break;Se[R+12>>2]=T,Se[T+8>>2]=R;var S=y,i=S>>2,M=m;break e}while(0);throw Ka(),"Reached an unreachable!"}var I=Se[vi>>2]&(1<<(E>>>3)^-1);Se[vi>>2]=I;var S=y,i=S>>2,M=m}else{var P=g,D=Me[t+(s+6)],L=Me[t+(s+3)],F=(0|L)==(0|P);do if(F){var X=A+(r+20)|0,j=Se[X>>2];if(0==(0|j)){var U=A+(r+16)|0,x=Se[U>>2];if(0==(0|x)){var z=0,e=z>>2;break}var V=U,B=x}else{var V=X,B=j;_=21}for(;;){var B,V,H=B+20|0,K=Se[H>>2];if(0==(0|K)){var Y=B+16|0,G=Me[Y>>2];if(0==(0|G))break;var V=Y,B=G}else var V=H,B=K}if(V>>>0<b>>>0)throw Ka(),"Reached an unreachable!";Se[V>>2]=0;var z=B,e=z>>2}else{var W=Me[t+(s+2)];if(W>>>0<b>>>0)throw Ka(),"Reached an unreachable!";Se[W+12>>2]=L,Se[L+8>>2]=W;var z=L,e=z>>2}while(0);var z;if(0==(0|D)){var S=y,i=S>>2,M=m;break}var Z=A+(r+28)|0,Q=(Se[Z>>2]<<2)+vi+304|0,q=(0|P)==(0|Se[Q>>2]);do{if(q){if(Se[Q>>2]=z,0!=(0|z))break;var $=Se[vi+4>>2]&(1<<Se[Z>>2]^-1);Se[vi+4>>2]=$;var S=y,i=S>>2,M=m;break e}if(D>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";var J=D+16|0;if((0|Se[J>>2])==(0|P)?Se[J>>2]=z:Se[D+20>>2]=z,0==(0|z)){var S=y,i=S>>2,M=m;break e}}while(0);if(z>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[e+6]=D;var rr=Me[t+(s+4)];if(0!=(0|rr)){if(rr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[e+4]=rr,Se[rr+24>>2]=z}var ar=Me[t+(s+5)];if(0==(0|ar)){var S=y,i=S>>2,M=m;break}if(ar>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[e+5]=ar,Se[ar+24>>2]=z;var S=y,i=S>>2,M=m}}else var S=l,i=S>>2,M=h;while(0);var M,S,er=S;if(er>>>0>=d>>>0)break;var ir=r+(h-4)|0,vr=Me[ir>>2];if(0==(1&vr|0))break;var tr=0==(2&vr|0);do{if(tr){if((0|w)==(0|Se[vi+24>>2])){var fr=Se[vi+12>>2]+M|0;Se[vi+12>>2]=fr,Se[vi+24>>2]=S;var _r=1|fr;if(Se[i+1]=_r,(0|S)==(0|Se[vi+20>>2])&&(Se[vi+20>>2]=0,Se[vi+8>>2]=0),fr>>>0<=Me[vi+28>>2]>>>0)break r;ia(0);break r}if((0|w)==(0|Se[vi+20>>2])){var sr=Se[vi+8>>2]+M|0;Se[vi+8>>2]=sr,Se[vi+20>>2]=S;var nr=1|sr;Se[i+1]=nr;var or=er+sr|0;Se[or>>2]=sr;break r}var lr=(vr&-8)+M|0,br=vr>>>3,kr=vr>>>0<256;e:do if(kr){var ur=Me[s+f],cr=Me[((4|h)>>2)+s];if((0|ur)!=(0|cr)){var hr=((vr>>>2&1073741822)<<2)+vi+40|0,dr=(0|ur)==(0|hr);do{if(!dr){if(ur>>>0<Me[vi+16>>2]>>>0){_=66;break}_=63;break}_=63}while(0);do if(63==_){if((0|cr)!=(0|hr)&&cr>>>0<Me[vi+16>>2]>>>0)break;Se[ur+12>>2]=cr,Se[cr+8>>2]=ur;break e}while(0);throw Ka(),"Reached an unreachable!"}var wr=Se[vi>>2]&(1<<br^-1);Se[vi>>2]=wr}else{var pr=d,Er=Me[f+(s+4)],Ar=Me[((4|h)>>2)+s],gr=(0|Ar)==(0|pr);do if(gr){var yr=h+(r+12)|0,mr=Se[yr>>2];if(0==(0|mr)){var Sr=h+(r+8)|0,Mr=Se[Sr>>2];if(0==(0|Mr)){var Cr=0,a=Cr>>2;break}var Rr=Sr,Tr=Mr}else{var Rr=yr,Tr=mr;_=73}for(;;){var Tr,Rr,Or=Tr+20|0,Nr=Se[Or>>2];if(0==(0|Nr)){var Ir=Tr+16|0,Pr=Me[Ir>>2];if(0==(0|Pr))break;var Rr=Ir,Tr=Pr}else var Rr=Or,Tr=Nr}if(Rr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[Rr>>2]=0;var Cr=Tr,a=Cr>>2}else{var Dr=Me[s+f];if(Dr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[Dr+12>>2]=Ar,
Se[Ar+8>>2]=Dr;var Cr=Ar,a=Cr>>2}while(0);var Cr;if(0==(0|Er))break;var Lr=h+(r+20)|0,Fr=(Se[Lr>>2]<<2)+vi+304|0,Xr=(0|pr)==(0|Se[Fr>>2]);do{if(Xr){if(Se[Fr>>2]=Cr,0!=(0|Cr))break;var jr=Se[vi+4>>2]&(1<<Se[Lr>>2]^-1);Se[vi+4>>2]=jr;break e}if(Er>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";var Ur=Er+16|0;if((0|Se[Ur>>2])==(0|pr)?Se[Ur>>2]=Cr:Se[Er+20>>2]=Cr,0==(0|Cr))break e}while(0);if(Cr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+6]=Er;var xr=Me[f+(s+2)];if(0!=(0|xr)){if(xr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+4]=xr,Se[xr+24>>2]=Cr}var zr=Me[f+(s+3)];if(0==(0|zr))break;if(zr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[a+5]=zr,Se[zr+24>>2]=Cr}while(0);if(Se[i+1]=1|lr,Se[er+lr>>2]=lr,(0|S)!=(0|Se[vi+20>>2])){var Vr=lr;break}Se[vi+8>>2]=lr;break r}Se[ir>>2]=vr&-2,Se[i+1]=1|M,Se[er+M>>2]=M;var Vr=M}while(0);var Vr;if(Vr>>>0<256){var Br=Vr>>>2&1073741822,Hr=(Br<<2)+vi+40|0,Kr=Me[vi>>2],Yr=1<<(Vr>>>3),Gr=0==(Kr&Yr|0);do{if(!Gr){var Wr=(Br+2<<2)+vi+40|0,Zr=Me[Wr>>2];if(Zr>>>0>=Me[vi+16>>2]>>>0){var Qr=Zr,qr=Wr;break}throw Ka(),"Reached an unreachable!"}Se[vi>>2]=Kr|Yr;var Qr=Hr,qr=(Br+2<<2)+vi+40|0}while(0);var qr,Qr;Se[qr>>2]=S,Se[Qr+12>>2]=S,Se[i+2]=Qr,Se[i+3]=Hr;break r}var $r=S,Jr=Vr>>>8,ra=0==(0|Jr);do if(ra)var aa=0;else{if(Vr>>>0>16777215){var aa=31;break}var ea=(Jr+1048320|0)>>>16&8,va=Jr<<ea,fa=(va+520192|0)>>>16&4,_a=va<<fa,sa=(_a+245760|0)>>>16&2,na=14-(fa|ea|sa)+(_a<<sa>>>15)|0,aa=Vr>>>((na+7|0)>>>0)&1|na<<1}while(0);var aa,oa=(aa<<2)+vi+304|0;Se[i+7]=aa,Se[i+5]=0,Se[i+4]=0;var la=Se[vi+4>>2],ba=1<<aa,ka=0==(la&ba|0);e:do if(ka){var ua=la|ba;Se[vi+4>>2]=ua,Se[oa>>2]=$r,Se[i+6]=oa,Se[i+3]=S,Se[i+2]=S}else{if(31==(0|aa))var ca=0;else var ca=25-(aa>>>1)|0;for(var ca,ha=Vr<<ca,da=Se[oa>>2];;){var da,ha;if((Se[da+4>>2]&-8|0)==(0|Vr)){var wa=da+8|0,pa=Me[wa>>2],Ea=Me[vi+16>>2],Aa=da>>>0<Ea>>>0;do if(!Aa){if(pa>>>0<Ea>>>0)break;Se[pa+12>>2]=$r,Se[wa>>2]=$r,Se[i+2]=pa,Se[i+3]=da,Se[i+6]=0;break e}while(0);throw Ka(),"Reached an unreachable!"}var ga=(ha>>>31<<2)+da+16|0,ya=Me[ga>>2];if(0==(0|ya)){if(ga>>>0>=Me[vi+16>>2]>>>0){Se[ga>>2]=$r,Se[i+6]=da,Se[i+3]=S,Se[i+2]=S;break e}throw Ka(),"Reached an unreachable!"}var ha=ha<<1,da=ya}}while(0);var ma=Se[vi+32>>2]-1|0;if(Se[vi+32>>2]=ma,0!=(0|ma))break r;ta();break r}while(0);throw Ka(),"Reached an unreachable!"}while(0)}function ta(){var r=Se[vi+452>>2],a=0==(0|r);r:do if(!a)for(var e=r;;){var e,i=Se[e+8>>2];if(0==(0|i))break r;var e=i}while(0);Se[vi+32>>2]=-1}function fa(r,a){if(0==(0|r))var e=Jr(a),i=e;else var v=la(r,a),i=v;var i;return i}function _a(r,a){var e,i=r>>>0<9;do if(i)var v=Jr(a),t=v;else{var f=r>>>0<16?16:r,_=0==(f-1&f|0);r:do if(_)var s=f;else{if(f>>>0<=16){var s=16;break}for(var n=16;;){var n,o=n<<1;if(o>>>0>=f>>>0){var s=o;break r}var n=o}}while(0);var s;if((-64-s|0)>>>0>a>>>0){if(a>>>0<11)var l=16;else var l=a+11&-8;var l,b=Jr(l+(s+12)|0);if(0==(0|b)){var t=0;break}var k=b-8|0;if(0==((b>>>0)%(s>>>0)|0))var u=k,c=0;else{var h=b+(s-1)&-s,d=h-8|0,w=k;if((d-w|0)>>>0>15)var p=d;else var p=h+(s-8)|0;var p,E=p-w|0,e=(b-4|0)>>2,A=Se[e],g=(A&-8)-E|0;if(0==(3&A|0)){var y=Se[k>>2]+E|0;Se[p>>2]=y,Se[p+4>>2]=g;var u=p,c=0}else{var m=p+4|0,S=g|1&Se[m>>2]|2;Se[m>>2]=S;var M=g+(p+4)|0,C=1|Se[M>>2];Se[M>>2]=C;var R=E|1&Se[e]|2;Se[e]=R;var T=b+(E-4)|0,O=1|Se[T>>2];Se[T>>2]=O;var u=p,c=b}}var c,u,N=u+4|0,I=Me[N>>2],P=0==(3&I|0);do if(P)var D=0;else{var L=I&-8;if(L>>>0<=(l+16|0)>>>0){var D=0;break}var F=L-l|0;Se[N>>2]=l|1&I|2,Se[u+(4|l)>>2]=3|F;var X=u+(4|L)|0,j=1|Se[X>>2];Se[X>>2]=j;var D=l+(u+8)|0}while(0);var D;0!=(0|c)&&va(c),0!=(0|D)&&va(D);var t=u+8|0}else{var U=Je();Se[U>>2]=12;var t=0}}while(0);var t;return t}function sa(r,a,e,i){var v,t;0==(0|Se[ti>>2])&&ba();var f=0==(0|i),_=0==(0|r);do{if(f){if(_){var s=Jr(0),n=s;t=30;break}var o=r<<2;if(o>>>0<11){var l=0,b=16;t=9;break}var l=0,b=o+11&-8;t=9;break}if(_){var n=i;t=30;break}var l=i,b=0;t=9;break}while(0);do if(9==t){var b,l,k=0==(1&e|0);r:do if(k){if(_){var u=0,c=0;break}for(var h=0,d=0;;){var d,h,w=Me[a+(d<<2)>>2];if(w>>>0<11)var p=16;else var p=w+11&-8;var p,E=p+h|0,A=d+1|0;if((0|A)==(0|r)){var u=0,c=E;break r}var h=E,d=A}}else{var g=Me[a>>2];if(g>>>0<11)var y=16;else var y=g+11&-8;var y,u=y,c=y*r|0}while(0);var c,u,m=Jr(b-4+c|0);if(0==(0|m)){var n=0;break}var S=m-8|0,M=Se[m-4>>2]&-8;if(0!=(2&e|0)){var C=-4-b+M|0;Fa(m,0,C,1)}if(0==(0|l)){var R=m+c|0,T=M-c|3;Se[m+(c-4)>>2]=T;var O=R,v=O>>2,N=c}else var O=l,v=O>>2,N=M;var N,O;Se[v]=m;var I=r-1|0,P=0==(0|I);r:do if(P)var D=S,L=N;else if(0==(0|u))for(var F=S,X=N,j=0;;){var j,X,F,U=Me[a+(j<<2)>>2];if(U>>>0<11)var x=16;else var x=U+11&-8;var x,z=X-x|0;Se[F+4>>2]=3|x;var V=F+x|0,B=j+1|0;if(Se[(B<<2>>2)+v]=x+(F+8)|0,(0|B)==(0|I)){var D=V,L=z;break r}var F=V,X=z,j=B}else for(var H=3|u,K=u+8|0,Y=S,G=N,W=0;;){var W,G,Y,Z=G-u|0;Se[Y+4>>2]=H;var Q=Y+u|0,q=W+1|0;if(Se[(q<<2>>2)+v]=Y+K|0,(0|q)==(0|I)){var D=Q,L=Z;break r}var Y=Q,G=Z,W=q}while(0);var L,D;Se[D+4>>2]=3|L;var n=O}while(0);var n;return n}function na(r){var a=r>>2;0==(0|Se[ti>>2])&&ba();var e=Me[vi+24>>2];if(0==(0|e))var i=0,v=0,t=0,f=0,_=0,s=0,n=0;else{for(var o=Me[vi+12>>2],l=o+40|0,b=vi+444|0,k=l,u=l,c=1;;){var c,u,k,b,h=Me[b>>2],d=h+8|0;if(0==(7&d|0))var w=0;else var w=7&-d;for(var w,p=b+4|0,E=h+w|0,A=c,g=u,y=k;;){var y,g,A,E;if(E>>>0<h>>>0)break;if(E>>>0>=(h+Se[p>>2]|0)>>>0|(0|E)==(0|e))break;var m=Se[E+4>>2];if(7==(0|m))break;var S=m&-8,M=S+y|0;if(1==(3&m|0))var C=A+1|0,R=S+g|0;else var C=A,R=g;var R,C,E=E+S|0,A=C,g=R,y=M}var T=Me[b+8>>2];if(0==(0|T))break;var b=T,k=y,u=g,c=A}var O=Se[vi+432>>2],i=y,v=A,t=o,f=g,_=O-y|0,s=Se[vi+436>>2],n=O-g|0}var n,s,_,f,t,v,i;Se[a]=i,Se[a+1]=v,Se[a+2]=0,Se[a+3]=0,Se[a+4]=_,Se[a+5]=s,Se[a+6]=0,Se[a+7]=n,Se[a+8]=f,Se[a+9]=t}function oa(){0==(0|Se[ti>>2])&&ba();var r=Me[vi+24>>2],a=0==(0|r);r:do if(a)var e=0,i=0,v=0;else for(var t=Se[vi+436>>2],f=Me[vi+432>>2],_=vi+444|0,s=f-40-Se[vi+12>>2]|0;;){var s,_,n=Me[_>>2],o=n+8|0;if(0==(7&o|0))var l=0;else var l=7&-o;for(var l,b=_+4|0,k=n+l|0,u=s;;){var u,k;if(k>>>0<n>>>0)break;if(k>>>0>=(n+Se[b>>2]|0)>>>0|(0|k)==(0|r))break;var c=Se[k+4>>2];if(7==(0|c))break;var h=c&-8,d=1==(3&c|0)?h:0,w=u-d|0,k=k+h|0,u=w}var p=Me[_+8>>2];if(0==(0|p)){var e=t,i=f,v=u;break r}var _=p,s=u}while(0);var v,i,e,E=Se[Se[qe>>2]+12>>2],A=(Qa(E,0|He.__str339,(ne=Oe,Oe+=4,Se[ne>>2]=e,ne)),Se[Se[qe>>2]+12>>2]),g=(Qa(A,0|He.__str1340,(ne=Oe,Oe+=4,Se[ne>>2]=i,ne)),Se[Se[qe>>2]+12>>2]);Qa(g,0|He.__str2341,(ne=Oe,Oe+=4,Se[ne>>2]=v,ne))}function la(r,a){var e,i,v,t=a>>>0>4294967231;r:do{if(!t){var f=r-8|0,_=f,i=(r-4|0)>>2,s=Me[i],n=s&-8,o=n-8|0,l=r+o|0,b=f>>>0<Me[vi+16>>2]>>>0;do if(!b){var k=3&s;if(!(1!=(0|k)&(0|o)>-8))break;var e=(r+(n-4)|0)>>2;if(0==(1&Se[e]|0))break;if(a>>>0<11)var u=16;else var u=a+11&-8;var u,c=0==(0|k);do{if(c){var h=ka(_,u),d=0,w=h;v=17;break}if(n>>>0<u>>>0){if((0|l)!=(0|Se[vi+24>>2])){v=21;break}var p=Se[vi+12>>2]+n|0;if(p>>>0<=u>>>0){v=21;break}var E=p-u|0,A=r+(u-8)|0;Se[i]=u|1&s|2;var g=1|E;Se[r+(u-4)>>2]=g,Se[vi+24>>2]=A,Se[vi+12>>2]=E;var d=0,w=_;v=17;break}var y=n-u|0;if(y>>>0<=15){var d=0,w=_;v=17;break}Se[i]=u|1&s|2,Se[r+(u-4)>>2]=3|y;var m=1|Se[e];Se[e]=m;var d=r+u|0,w=_;v=17;break}while(0);do if(17==v){var w,d;if(0==(0|w))break;0!=(0|d)&&va(d);var S=w+8|0;break r}while(0);var M=Jr(a);if(0==(0|M)){var S=0;break r}var C=0==(3&Se[i]|0)?8:4,R=n-C|0,T=R>>>0<a>>>0?R:a;Pa(M,r,T,1),va(r);var S=M;break r}while(0);throw Ka(),"Reached an unreachable!"}var O=Je();Se[O>>2]=12;var S=0}while(0);var S;return S}function ba(){if(0==(0|Se[ti>>2])){var r=qa(8);if(0!=(r-1&r|0))throw Ka(),"Reached an unreachable!";Se[ti+8>>2]=r,Se[ti+4>>2]=r,Se[ti+12>>2]=-1,Se[ti+16>>2]=2097152,Se[ti+20>>2]=0,Se[vi+440>>2]=0;var a=$a(0);Se[ti>>2]=a&-16^1431655768}}function ka(r,a){var e=Se[r+4>>2]&-8,i=a>>>0<256;do if(i)var v=0;else{if(e>>>0>=(a+4|0)>>>0&&(e-a|0)>>>0<=Se[ti+8>>2]<<1>>>0){var v=r;break}var v=0}while(0);var v;return v}function ua(r){for(var a,e=vi+444|0,a=e>>2;;){var e,i=Me[a];if(i>>>0<=r>>>0&&(i+Se[a+1]|0)>>>0>r>>>0){var v=e;break}var t=Me[a+2];if(0==(0|t)){var v=0;break}var e=t,a=e>>2}var v;return v}function ca(r,a){var e=r,i=r+8|0;if(0==(7&i|0))var v=0;else var v=7&-i;var v,t=a-v|0;Se[vi+24>>2]=e+v|0,Se[vi+12>>2]=t,Se[v+(e+4)>>2]=1|t,Se[a+(e+4)>>2]=40;var f=Se[ti+16>>2];Se[vi+28>>2]=f}function ha(){for(var r=0;;){var r,a=r<<1,e=(a<<2)+vi+40|0;Se[vi+(a+3<<2)+40>>2]=e,Se[vi+(a+2<<2)+40>>2]=e;var i=r+1|0;if(32==(0|i))break;var r=i}}function da(r,a,e){var i,v,t,f,_=a>>2,s=r>>2,n=r+8|0;if(0==(7&n|0))var o=0;else var o=7&-n;var o,l=a+8|0;if(0==(7&l|0))var b=0,t=b>>2;else var b=7&-l,t=b>>2;var b,k=a+b|0,u=k,c=o+e|0,v=c>>2,h=r+c|0,d=h,w=k-(r+o)-e|0;Se[(o+4>>2)+s]=3|e;var p=(0|u)==(0|Se[vi+24>>2]);r:do if(p){var E=Se[vi+12>>2]+w|0;Se[vi+12>>2]=E,Se[vi+24>>2]=d;var A=1|E;Se[v+(s+1)]=A}else if((0|u)==(0|Se[vi+20>>2])){var g=Se[vi+8>>2]+w|0;Se[vi+8>>2]=g,Se[vi+20>>2]=d;var y=1|g;Se[v+(s+1)]=y;var m=r+g+c|0;Se[m>>2]=g}else{var S=Me[t+(_+1)];if(1==(3&S|0)){var M=S&-8,C=S>>>3,R=S>>>0<256;a:do if(R){var T=Me[((8|b)>>2)+_],O=Me[t+(_+3)];if((0|T)!=(0|O)){var N=((S>>>2&1073741822)<<2)+vi+40|0,I=(0|T)==(0|N);do{if(!I){if(T>>>0<Me[vi+16>>2]>>>0){f=18;break}f=15;break}f=15}while(0);do if(15==f){if((0|O)!=(0|N)&&O>>>0<Me[vi+16>>2]>>>0)break;Se[T+12>>2]=O,Se[O+8>>2]=T;break a}while(0);throw Ka(),"Reached an unreachable!"}var P=Se[vi>>2]&(1<<C^-1);Se[vi>>2]=P}else{var D=k,L=Me[((24|b)>>2)+_],F=Me[t+(_+3)],X=(0|F)==(0|D);do if(X){var j=16|b,U=j+(a+4)|0,x=Se[U>>2];if(0==(0|x)){var z=a+j|0,V=Se[z>>2];if(0==(0|V)){var B=0,i=B>>2;break}var H=z,K=V}else{var H=U,K=x;f=25}for(;;){var K,H,Y=K+20|0,G=Se[Y>>2];if(0==(0|G)){var W=K+16|0,Z=Me[W>>2];if(0==(0|Z))break;var H=W,K=Z}else var H=Y,K=G}if(H>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[H>>2]=0;var B=K,i=B>>2}else{var Q=Me[((8|b)>>2)+_];if(Q>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[Q+12>>2]=F,Se[F+8>>2]=Q;var B=F,i=B>>2}while(0);var B;if(0==(0|L))break;var q=b+(a+28)|0,$=(Se[q>>2]<<2)+vi+304|0,J=(0|D)==(0|Se[$>>2]);do{if(J){if(Se[$>>2]=B,0!=(0|B))break;var rr=Se[vi+4>>2]&(1<<Se[q>>2]^-1);Se[vi+4>>2]=rr;break a}if(L>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";var ar=L+16|0;if((0|Se[ar>>2])==(0|D)?Se[ar>>2]=B:Se[L+20>>2]=B,0==(0|B))break a}while(0);if(B>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[i+6]=L;var er=16|b,ir=Me[(er>>2)+_];if(0!=(0|ir)){if(ir>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[i+4]=ir,Se[ir+24>>2]=B}var vr=Me[(er+4>>2)+_];if(0==(0|vr))break;if(vr>>>0<Me[vi+16>>2]>>>0)throw Ka(),"Reached an unreachable!";Se[i+5]=vr,Se[vr+24>>2]=B}while(0);var tr=a+(M|b)|0,fr=M+w|0}else var tr=u,fr=w;var fr,tr,_r=tr+4|0,sr=Se[_r>>2]&-2;if(Se[_r>>2]=sr,Se[v+(s+1)]=1|fr,Se[(fr>>2)+s+v]=fr,fr>>>0<256){var nr=fr>>>2&1073741822,or=(nr<<2)+vi+40|0,lr=Me[vi>>2],br=1<<(fr>>>3),kr=0==(lr&br|0);do{if(!kr){var ur=(nr+2<<2)+vi+40|0,cr=Me[ur>>2];if(cr>>>0>=Me[vi+16>>2]>>>0){var hr=cr,dr=ur;break}throw Ka(),"Reached an unreachable!"}Se[vi>>2]=lr|br;var hr=or,dr=(nr+2<<2)+vi+40|0}while(0);var dr,hr;Se[dr>>2]=d,Se[hr+12>>2]=d,Se[v+(s+2)]=hr,Se[v+(s+3)]=or}else{var wr=h,pr=fr>>>8,Er=0==(0|pr);do if(Er)var Ar=0;else{if(fr>>>0>16777215){var Ar=31;break}var gr=(pr+1048320|0)>>>16&8,yr=pr<<gr,mr=(yr+520192|0)>>>16&4,Sr=yr<<mr,Mr=(Sr+245760|0)>>>16&2,Cr=14-(mr|gr|Mr)+(Sr<<Mr>>>15)|0,Ar=fr>>>((Cr+7|0)>>>0)&1|Cr<<1}while(0);var Ar,Rr=(Ar<<2)+vi+304|0;Se[v+(s+7)]=Ar;var Tr=c+(r+16)|0;Se[v+(s+5)]=0,Se[Tr>>2]=0;var Or=Se[vi+4>>2],Nr=1<<Ar;if(0==(Or&Nr|0)){var Ir=Or|Nr;Se[vi+4>>2]=Ir,Se[Rr>>2]=wr,Se[v+(s+6)]=Rr,Se[v+(s+3)]=wr,Se[v+(s+2)]=wr}else{if(31==(0|Ar))var Pr=0;else var Pr=25-(Ar>>>1)|0;for(var Pr,Dr=fr<<Pr,Lr=Se[Rr>>2];;){var Lr,Dr;if((Se[Lr+4>>2]&-8|0)==(0|fr)){var Fr=Lr+8|0,Xr=Me[Fr>>2],jr=Me[vi+16>>2],Ur=Lr>>>0<jr>>>0;do if(!Ur){if(Xr>>>0<jr>>>0)break;Se[Xr+12>>2]=wr,Se[Fr>>2]=wr,Se[v+(s+2)]=Xr,Se[v+(s+3)]=Lr,Se[v+(s+6)]=0;break r}while(0);throw Ka(),"Reached an unreachable!"}var xr=(Dr>>>31<<2)+Lr+16|0,zr=Me[xr>>2];if(0==(0|zr)){if(xr>>>0>=Me[vi+16>>2]>>>0){Se[xr>>2]=wr,Se[v+(s+6)]=Lr,Se[v+(s+3)]=wr,Se[v+(s+2)]=wr;break r}throw Ka(),"Reached an unreachable!"}var Dr=Dr<<1,Lr=zr}}}}while(0);return r+(8|o)|0}function wa(r){return 0|He.__str3342}function pa(r){return 0|He.__str14343}function Ea(r){Se[r>>2]=si+8|0}function Aa(r){0!=(0|r)&&va(r)}function ga(r){ya(r);var a=r;Aa(a)}function ya(r){var a=0|r;Ye(a)}function ma(r){var a=0|r;Ea(a),Se[r>>2]=ni+8|0}function Sa(r){var a=0|r;ya(a);var e=r;Aa(e)}function Ma(r,a){var e,i,v=Me[vi+24>>2],i=v>>2,t=v,f=ua(t),_=Se[f>>2],s=Se[f+4>>2],n=_+s|0,o=_+(s-39)|0;if(0==(7&o|0))var l=0;else var l=7&-o;var l,b=_+(s-47)+l|0,k=b>>>0<(v+16|0)>>>0?t:b,u=k+8|0,e=u>>2,c=u,h=r,d=a-40|0;ca(h,d);var w=k+4|0;Se[w>>2]=27,Se[e]=Se[vi+444>>2],Se[e+1]=Se[vi+448>>2],Se[e+2]=Se[vi+452>>2],Se[e+3]=Se[vi+456>>2],Se[vi+444>>2]=r,Se[vi+448>>2]=a,Se[vi+456>>2]=0,Se[vi+452>>2]=c;var p=k+28|0;Se[p>>2]=7;var E=(k+32|0)>>>0<n>>>0;r:do if(E)for(var A=p;;){var A,g=A+4|0;if(Se[g>>2]=7,(A+8|0)>>>0>=n>>>0)break r;var A=g}while(0);var y=(0|k)==(0|t);r:do if(!y){var m=k-v|0,S=t+m|0,M=m+(t+4)|0,C=Se[M>>2]&-2;Se[M>>2]=C;var R=1|m;Se[i+1]=R;var T=S;if(Se[T>>2]=m,m>>>0<256){var O=m>>>2&1073741822,N=(O<<2)+vi+40|0,I=Me[vi>>2],P=1<<(m>>>3),D=0==(I&P|0);do{if(!D){var L=(O+2<<2)+vi+40|0,F=Me[L>>2];if(F>>>0>=Me[vi+16>>2]>>>0){var X=F,j=L;break}throw Ka(),"Reached an unreachable!"}var U=I|P;Se[vi>>2]=U;var X=N,j=(O+2<<2)+vi+40|0}while(0);var j,X;Se[j>>2]=v,Se[X+12>>2]=v,Se[i+2]=X,Se[i+3]=N}else{var x=v,z=m>>>8,V=0==(0|z);do if(V)var B=0;else{if(m>>>0>16777215){var B=31;break}var H=(z+1048320|0)>>>16&8,K=z<<H,Y=(K+520192|0)>>>16&4,G=K<<Y,W=(G+245760|0)>>>16&2,Z=14-(Y|H|W)+(G<<W>>>15)|0,B=m>>>((Z+7|0)>>>0)&1|Z<<1}while(0);var B,Q=(B<<2)+vi+304|0;Se[i+7]=B,Se[i+5]=0,Se[i+4]=0;var q=Se[vi+4>>2],$=1<<B;if(0==(q&$|0)){var J=q|$;Se[vi+4>>2]=J,Se[Q>>2]=x,Se[i+6]=Q,Se[i+3]=v,Se[i+2]=v}else{if(31==(0|B))var rr=0;else var rr=25-(B>>>1)|0;for(var rr,ar=m<<rr,er=Se[Q>>2];;){var er,ar;if((Se[er+4>>2]&-8|0)==(0|m)){var ir=er+8|0,vr=Me[ir>>2],tr=Me[vi+16>>2],fr=er>>>0<tr>>>0;do if(!fr){if(vr>>>0<tr>>>0)break;Se[vr+12>>2]=x,Se[ir>>2]=x,Se[i+2]=vr,Se[i+3]=er,Se[i+6]=0;break r}while(0);throw Ka(),"Reached an unreachable!"}var _r=(ar>>>31<<2)+er+16|0,sr=Me[_r>>2];if(0==(0|sr)){if(_r>>>0>=Me[vi+16>>2]>>>0){Se[_r>>2]=x,Se[i+6]=er,Se[i+3]=v,Se[i+2]=v;break r}throw Ka(),"Reached an unreachable!"}var ar=ar<<1,er=sr}}}}while(0)}function Ca(r){return d(r)}function Ra(r,a){var e=0;do Ae[r+e]=Ae[a+e],e++;while(0!=Ae[a+e-1]);return r}function Ta(){var r=Ta;return r.LLVM_SAVEDSTACKS||(r.LLVM_SAVEDSTACKS=[]),r.LLVM_SAVEDSTACKS.push(le.stackSave()),r.LLVM_SAVEDSTACKS.length-1}function Oa(r){var a=Ta,e=a.LLVM_SAVEDSTACKS[r];a.LLVM_SAVEDSTACKS.splice(r,1),le.stackRestore(e)}function Na(r,a,e){for(var i=0;i<e;){var v=Ae[r+i],t=Ae[a+i];if(v==t&&0==v)return 0;if(0==v)return-1;if(0==t)return 1;if(v!=t)return v>t?1:-1;i++}return 0}function Ia(r,a){var e=Ca(r),i=0;do Ae[r+e+i]=Ae[a+i],i++;while(0!=Ae[a+i-1]);return r}function Pa(r,a,e,i){if(e>=20&&a%2==r%2)if(a%4==r%4){for(var v=a+e;a%4;)Ae[r++]=Ae[a++];for(var t=a>>2,f=r>>2,_=v>>2;t<_;)Se[f++]=Se[t++];for(a=t<<2,r=f<<2;a<v;)Ae[r++]=Ae[a++]}else{var v=a+e;a%2&&(Ae[r++]=Ae[a++]);for(var s=a>>1,n=r>>1,o=v>>1;s<o;)ye[n++]=ye[s++];a=s<<1,r=n<<1,a<v&&(Ae[r++]=Ae[a++])}else for(;e--;)Ae[r++]=Ae[a++]}function Da(r,a){return Na(r,a,Le)}function La(r,a,e){for(var i=0;i<e;i++){var v=Ae[r+i],t=Ae[a+i];if(v!=t)return v>t?1:-1}return 0}function Fa(r,a,e,i){if(e>=20){for(var v=r+e;r%4;)Ae[r++]=a;a<0&&(a+=256);for(var t=r>>2,f=v>>2,_=a|a<<8|a<<16|a<<24;t<f;)Se[t++]=_;for(r=t<<2;r<v;)Ae[r++]=a}else for(;e--;)Ae[r++]=a}function Xa(r,a,e,i){throw"Assertion failed: "+s(i)+", at: "+[s(r),a,s(e)]}function ja(r){var a=d(r),e=Jr(a+1);return Pa(e,r,a,1),Ae[e+a]=0,e}function Ua(r,a){function e(r){var e;return"double"===r?(xe[0]=Se[a+_>>2],xe[1]=Se[a+_+4>>2],e=ze[0]):"i64"==r?e=[Se[a+_>>2],Se[a+_+4>>2]]:(r="i32",e=Se[a+_>>2]),_+=le.getNativeFieldSize(r),e}for(var i,v,t,f=r,_=0,s=[];;){var n=f;if(i=Ae[f],0===i)break;if(v=Ae[f+1],i=="%".charCodeAt(0)){var o=!1,l=!1,b=!1,k=!1;r:for(;;){switch(v){case"+".charCodeAt(0):o=!0;break;case"-".charCodeAt(0):l=!0;break;case"#".charCodeAt(0):b=!0;break;case"0".charCodeAt(0):if(k)break r;k=!0;break;default:break r}f++,v=Ae[f+1]}var u=0;if(v=="*".charCodeAt(0))u=e("i32"),f++,v=Ae[f+1];else for(;v>="0".charCodeAt(0)&&v<="9".charCodeAt(0);)u=10*u+(v-"0".charCodeAt(0)),f++,v=Ae[f+1];var c=!1;if(v==".".charCodeAt(0)){var h=0;if(c=!0,f++,v=Ae[f+1],v=="*".charCodeAt(0))h=e("i32"),f++;else for(;;){var d=Ae[f+1];if(d<"0".charCodeAt(0)||d>"9".charCodeAt(0))break;h=10*h+(d-"0".charCodeAt(0)),f++}v=Ae[f+1]}else var h=6;var E;switch(String.fromCharCode(v)){case"h":var A=Ae[f+2];A=="h".charCodeAt(0)?(f++,E=1):E=2;break;case"l":var A=Ae[f+2];A=="l".charCodeAt(0)?(f++,E=8):E=4;break;case"L":case"q":case"j":E=8;break;case"z":case"t":case"I":E=4;break;default:E=null}if(E&&f++,v=Ae[f+1],["d","i","u","o","x","X","p"].indexOf(String.fromCharCode(v))!=-1){var m=v=="d".charCodeAt(0)||v=="i".charCodeAt(0);E=E||4;var t=e("i"+8*E);if(8==E&&(t=le.makeBigInt(t[0],t[1],v=="u".charCodeAt(0))),E<=4){var S=Math.pow(256,E)-1;t=(m?y:g)(t&S,8*E)}var M,C=Math.abs(t),R="";if(v=="d".charCodeAt(0)||v=="i".charCodeAt(0))M=y(t,8*E,1).toString(10);else if(v=="u".charCodeAt(0))M=g(t,8*E,1).toString(10),t=Math.abs(t);else if(v=="o".charCodeAt(0))M=(b?"0":"")+C.toString(8);else if(v=="x".charCodeAt(0)||v=="X".charCodeAt(0)){if(R=b?"0x":"",t<0){t=-t,M=(C-1).toString(16);for(var T=[],O=0;O<M.length;O++)T.push((15-parseInt(M[O],16)).toString(16));for(M=T.join("");M.length<2*E;)M="f"+M}else M=C.toString(16);v=="X".charCodeAt(0)&&(R=R.toUpperCase(),M=M.toUpperCase())}else v=="p".charCodeAt(0)&&(0===C?M="(nil)":(R="0x",M=C.toString(16)));if(c)for(;M.length<h;)M="0"+M;for(o&&(R=t<0?"-"+R:"+"+R);R.length+M.length<u;)l?M+=" ":k?M="0"+M:R=" "+R;M=R+M,M.split("").forEach(function(r){s.push(r.charCodeAt(0))})}else if(["f","F","e","E","g","G"].indexOf(String.fromCharCode(v))!=-1){var M,t=e("double");if(isNaN(t))M="nan",k=!1;else if(isFinite(t)){var N=!1,I=Math.min(h,20);if(v=="g".charCodeAt(0)||v=="G".charCodeAt(0)){N=!0,h=h||1;var P=parseInt(t.toExponential(I).split("e")[1],10);h>P&&P>=-4?(v=(v=="g".charCodeAt(0)?"f":"F").charCodeAt(0),h-=P+1):(v=(v=="g".charCodeAt(0)?"e":"E").charCodeAt(0),h--),I=Math.min(h,20)}v=="e".charCodeAt(0)||v=="E".charCodeAt(0)?(M=t.toExponential(I),/[eE][-+]\\\\d$/.test(M)&&(M=M.slice(0,-1)+"0"+M.slice(-1))):v!="f".charCodeAt(0)&&v!="F".charCodeAt(0)||(M=t.toFixed(I));var D=M.split("e");if(N&&!b)for(;D[0].length>1&&D[0].indexOf(".")!=-1&&("0"==D[0].slice(-1)||"."==D[0].slice(-1));)D[0]=D[0].slice(0,-1);else for(b&&M.indexOf(".")==-1&&(D[0]+=".");h>I++;)D[0]+="0";M=D[0]+(D.length>1?"e"+D[1]:""),v=="E".charCodeAt(0)&&(M=M.toUpperCase()),o&&t>=0&&(M="+"+M)}else M=(t<0?"-":"")+"inf",k=!1;for(;M.length<u;)l?M+=" ":M=!k||"-"!=M[0]&&"+"!=M[0]?(k?"0":" ")+M:M[0]+"0"+M.slice(1);v<"a".charCodeAt(0)&&(M=M.toUpperCase()),M.split("").forEach(function(r){s.push(r.charCodeAt(0))})}else if(v=="s".charCodeAt(0)){var L,F=e("i8*");if(F?(L=w(F),c&&L.length>h&&(L=L.slice(0,h))):L=p("(null)",!0),!l)for(;L.length<u--;)s.push(" ".charCodeAt(0));if(s=s.concat(L),l)for(;L.length<u--;)s.push(" ".charCodeAt(0))}else if(v=="c".charCodeAt(0)){for(l&&s.push(e("i8"));--u>0;)s.push(" ".charCodeAt(0));l||s.push(e("i8"))}else if(v=="n".charCodeAt(0)){var X=e("i32*");Se[X>>2]=s.length}else if(v=="%".charCodeAt(0))s.push(i);else for(var O=n;O<f+2;O++)s.push(Ae[O]);f+=2}else s.push(i),f+=1}return s}function xa(r,a,e,i){for(var v=Ua(e,i),t=void 0===a?v.length:Math.min(v.length,a-1),f=0;f<t;f++)Ae[r+f]=v[f];return Ae[r+f]=0,v.length}function za(r,a,e){return xa(r,void 0,a,e)}function Va(r){return r in{32:0,9:0,10:0,11:0,12:0,13:0}}function Ba(r){return r>="0".charCodeAt(0)&&r<="9".charCodeAt(0)}function Ha(r){for(var a;(a=Ae[r])&&Va(a);)r++;if(!a||!Ba(a))return 0;for(var e=r;(a=Ae[e])&&Ba(a);)e++;return Math.floor(Number(s(r).substr(0,e-r)))}function Ka(r){throw ke=!0,"ABORT: "+r+", at "+(new Error).stack}function Ya(r){return Ya.ret||(Ya.ret=_([0],"i32",we)),Se[Ya.ret>>2]=r,r}function Ga(r,a,e,i){var v=$e.streams[r];if(!v||v.object.isDevice)return Ya(Ge.EBADF),-1;if(v.isWrite){if(v.object.isFolder)return Ya(Ge.EISDIR),-1;if(e<0||i<0)return Ya(Ge.EINVAL),-1;for(var t=v.object.contents;t.length<i;)t.push(0);for(var f=0;f<e;f++)t[i+f]=ge[a+f];return v.object.timestamp=Date.now(),f}return Ya(Ge.EACCES),-1}function Wa(r,a,e){var i=$e.streams[r];if(i){if(i.isWrite){if(e<0)return Ya(Ge.EINVAL),-1;if(i.object.isDevice){if(i.object.output){for(var v=0;v<e;v++)try{i.object.output(Ae[a+v])}catch(r){return Ya(Ge.EIO),-1}return i.object.timestamp=Date.now(),v}return Ya(Ge.ENXIO),-1}var t=Ga(r,a,e,i.position);return t!=-1&&(i.position+=t),t}return Ya(Ge.EACCES),-1}return Ya(Ge.EBADF),-1}function Za(r,a,e,i){var v=e*a;if(0==v)return 0;var t=Wa(i,r,v);return t==-1?($e.streams[i]&&($e.streams[i].error=!0),-1):Math.floor(t/a)}function Qa(r,a,e){var i=Ua(a,e),v=le.stackSave(),t=Za(_(i,"i8",de),1,i.length,r);return le.stackRestore(v),t}function qa(r){switch(r){case 8:return Pe;case 54:case 56:case 21:case 61:case 63:case 22:case 67:case 23:case 24:case 25:case 26:case 27:case 69:case 28:case 101:case 70:case 71:case 29:case 30:case 199:case 75:case 76:case 32:case 43:case 44:case 80:case 46:case 47:case 45:case 48:case 49:case 42:case 82:case 33:case 7:case 108:case 109:case 107:case 112:case 119:case 121:return 200809;case 13:case 104:case 94:case 95:case 34:case 35:case 77:case 81:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 91:case 94:case 95:case 110:case 111:case 113:case 114:case 115:case 116:case 117:case 118:case 120:case 40:case 16:case 79:case 19:return-1;case 92:case 93:case 5:case 72:case 6:case 74:case 92:case 93:case 96:case 97:case 98:case 99:case 102:case 103:case 105:return 1;case 38:case 66:case 50:case 51:case 4:return 1024;case 15:case 64:case 41:return 32;case 55:case 37:case 17:return 2147483647;case 18:case 1:return 47839;case 59:case 57:return 99;case 68:case 58:return 2048;case 0:return 2097152;case 3:return 65536;case 14:return 32768;case 73:return 32767;case 39:return 16384;case 60:return 1e3;case 106:return 700;case 52:return 256;case 62:return 255;case 2:return 100;case 65:return 64;case 36:return 20;case 100:return 16;case 20:return 6;case 53:return 4}return Ya(Ge.EINVAL),-1}function $a(r){var a=Math.floor(Date.now()/1e3);return r&&(Se[r>>2]=a),a}function Ja(){return Ya.ret}function re(r){var a=re;a.called||(Ie=o(Ie),a.called=!0);var e=Ie;return 0!=r&&le.staticAlloc(r),e}function ae(){return Se[ae.buf>>2]}function ee(r){r=r||Module.arguments,k();var a=null;return Module._main&&(a=Module.callMain(r),Module.noExitRuntime||u()),a}var ie=[],ve=false,te="object"==typeof window,fe="function"==typeof importScripts,_e=!te&&!ve&&!fe;if(ve){print=function(r){process.stdout.write(r+"\\\\n")},printErr=function(r){process.stderr.write(r+"\\\\n")};var se=require("fs");read=function(r){var a=se.readFileSync(r).toString();return a||"/"==r[0]||(r=__dirname.split("/").slice(0,-1).join("/")+"/src/"+r,a=se.readFileSync(r).toString()),a},load=function(a){r(read(a))},ie=process.argv.slice(2)}else if(_e)this.read||(this.read=function(r){snarf(r)}),"undefined"!=typeof scriptArgs?ie=scriptArgs:"undefined"!=typeof arguments&&(ie=arguments);else if(te)this.print=printErr=function(r){console.log(r)},this.read=function(r){var a=new XMLHttpRequest;return a.open("GET",r,!1),a.send(null),a.responseText},this.arguments&&(ie=arguments);else{if(!fe)throw"Unknown runtime environment. Where are we?";this.load=importScripts}"undefined"==typeof load&&"undefined"!=typeof read&&(this.load=function(a){r(read(a))}),"undefined"==typeof printErr&&(this.printErr=function(){}),"undefined"==typeof print&&(this.print=printErr);try{this.Module=Module}catch(r){this.Module=Module={}}Module.arguments||(Module.arguments=ie),Module.print&&(print=Module.print);var ne,oe,le={stackSave:function(){return Oe},stackRestore:function(r){Oe=r},forceAlign:function(r,a){if(a=a||4,1==a)return r;if(isNumber(r)&&isNumber(a))return Math.ceil(r/a)*a;if(isNumber(a)&&isPowerOfTwo(a)){var e=log2(a);return"(((("+r+")+"+(a-1)+")>>"+e+")<<"+e+")"}return"Math.ceil(("+r+")/"+a+")*"+a},isNumberType:function(r){return r in le.INT_TYPES||r in le.FLOAT_TYPES},isPointerType:function(r){return"*"==r[r.length-1]},isStructType:function(r){return!isPointerType(r)&&(!!/^\\\\[\\\\d+\\\\ x\\\\ (.*)\\\\]/.test(r)||(!!/<?{ [^}]* }>?/.test(r)||"%"==r[0]))},INT_TYPES:{i1:0,i8:0,i16:0,i32:0,i64:0},FLOAT_TYPES:{float:0,double:0},bitshift64:function(r,e,i,v){var t=Math.pow(2,v)-1;if(v<32)switch(i){case"shl":return[r<<v,e<<v|(r&t<<32-v)>>>32-v];case"ashr":return[(r>>>v|(e&t)<<32-v)>>0>>>0,e>>v>>>0];case"lshr":return[(r>>>v|(e&t)<<32-v)>>>0,e>>>v]}else if(32==v)switch(i){case"shl":return[0,r];case"ashr":return[e,(0|e)<0?t:0];case"lshr":return[e,0]}else switch(i){case"shl":return[0,r<<v-32];case"ashr":return[e>>v-32>>>0,(0|e)<0?t:0];case"lshr":return[e>>>v-32,0]}a("unknown bitshift64 op: "+[value,i,v])},or64:function(r,a){var e=0|r|(0|a),i=4294967296*(Math.round(r/4294967296)|Math.round(a/4294967296));return e+i},and64:function(r,a){var e=(0|r)&(0|a),i=4294967296*(Math.round(r/4294967296)&Math.round(a/4294967296));return e+i},xor64:function(r,a){var e=(0|r)^(0|a),i=4294967296*(Math.round(r/4294967296)^Math.round(a/4294967296));return e+i},getNativeTypeSize:function(r,a){if(1==le.QUANTUM_SIZE)return 1;var i={"%i1":1,"%i8":1,"%i16":2,"%i32":4,"%i64":8,"%float":4,"%double":8}["%"+r];if(!i)if("*"==r[r.length-1])i=le.QUANTUM_SIZE;else if("i"==r[0]){var v=parseInt(r.substr(1));e(v%8==0),i=v/8}return i},getNativeFieldSize:function(r){return Math.max(le.getNativeTypeSize(r),le.QUANTUM_SIZE)},dedup:function(r,a){var e={};return a?r.filter(function(r){return!e[r[a]]&&(e[r[a]]=!0,!0)}):r.filter(function(r){return!e[r]&&(e[r]=!0,!0)})},set:function(){for(var r="object"==typeof arguments[0]?arguments[0]:arguments,a={},e=0;e<r.length;e++)a[r[e]]=0;return a},calculateStructAlignment:function(r){r.flatSize=0,r.alignSize=0;var a=[],e=-1;return r.flatIndexes=r.fields.map(function(i){var v,t;if(le.isNumberType(i)||le.isPointerType(i))v=le.getNativeTypeSize(i),t=v;else{if(!le.isStructType(i))throw"Unclear type in struct: "+i+", in "+r.name_+" :: "+dump(Types.types[r.name_]);v=Types.types[i].flatSize,t=Types.types[i].alignSize}t=r.packed?1:Math.min(t,le.QUANTUM_SIZE),r.alignSize=Math.max(r.alignSize,t);var f=le.alignMemory(r.flatSize,t);return r.flatSize=f+v,e>=0&&a.push(f-e),e=f,f}),r.flatSize=le.alignMemory(r.flatSize,r.alignSize),0==a.length?r.flatFactor=r.flatSize:1==le.dedup(a).length&&(r.flatFactor=a[0]),r.needsFlattening=1!=r.flatFactor,r.flatIndexes},generateStructInfo:function(r,a,i){var v,t;if(a){if(i=i||0,v=("undefined"==typeof Types?le.typeInfo:Types.types)[a],!v)return null;e(v.fields.length===r.length,"Number of named fields must match the type for "+a),t=v.flatIndexes}else{var v={fields:r.map(function(r){return r[0]})};t=le.calculateStructAlignment(v)}var f={__size__:v.flatSize};return a?r.forEach(function(r,a){if("string"==typeof r)f[r]=t[a]+i;else{var e;for(var _ in r)e=_;f[e]=le.generateStructInfo(r[e],v.fields[a],t[a])}}):r.forEach(function(r,a){f[r[1]]=t[a]}),f},stackAlloc:function(r){var a=Oe;return Oe+=r,Oe=Oe+3>>2<<2,a},staticAlloc:function(r){var a=Ie;return Ie+=r,Ie=Ie+3>>2<<2,Ie>=Le&&l(),a},alignMemory:function(r,a){var e=r=Math.ceil(r/(a?a:4))*(a?a:4);return e},makeBigInt:function(r,a,e){var i=e?(r>>>0)+4294967296*(a>>>0):(r>>>0)+4294967296*(0|a);return i},QUANTUM_SIZE:4,__dummy__:0},be={MAX_ALLOWED:0,corrections:0,sigs:{},note:function(r,e,i){e||(this.corrections++,this.corrections>=this.MAX_ALLOWED&&a("\\\\n\\\\nToo many corrections!"))},print:function(){}},ke=!1,ue=0,ce=this;Module.ccall=i,Module.setValue=t,Module.getValue=f;var he=0,de=1,we=2;Module.ALLOC_NORMAL=he,Module.ALLOC_STACK=de,Module.ALLOC_STATIC=we,Module.allocate=_,Module.Pointer_stringify=s,Module.Array_stringify=n;var pe,Ee,Ae,ge,ye,me,Se,Me,Ce,Re,Te,Oe,Ne,Ie,Pe=4096,De=Module.TOTAL_STACK||5242880,Le=Module.TOTAL_MEMORY||10485760;Module.FAST_MEMORY||2097152;e(!!(Int32Array&&Float64Array&&new Int32Array(1).subarray&&new Int32Array(1).set),"Cannot fallback to non-typed array case: Code is too specialized");var Fe=new ArrayBuffer(Le);Ae=new Int8Array(Fe),ye=new Int16Array(Fe),Se=new Int32Array(Fe),ge=new Uint8Array(Fe),me=new Uint16Array(Fe),Me=new Uint32Array(Fe),Ce=new Float32Array(Fe),Re=new Float64Array(Fe),Se[0]=255,e(255===ge[0]&&0===ge[3],"Typed arrays 2 must be run on a little-endian system");var Xe=p("(null)");Ie=Xe.length;for(var je=0;je<Xe.length;je++)Ae[je]=Xe[je];Module.HEAP=Ee,Module.HEAP8=Ae,Module.HEAP16=ye,Module.HEAP32=Se,Module.HEAPU8=ge,Module.HEAPU16=me,Module.HEAPU32=Me,Module.HEAPF32=Ce,Module.HEAPF64=Re,Te=Oe=le.alignMemory(Ie),Ne=Te+De;var Ue=le.alignMemory(Ne,8),xe=(Ae.subarray(Ue),Se.subarray(Ue>>2)),ze=(Ce.subarray(Ue>>2),Re.subarray(Ue>>3));Ne=Ue+8,Ie=o(Ne);var Ve=[],Be=[];Module.Array_copy=c,Module.TypedArray_copy=h,Module.String_len=d,Module.String_copy=w,Module.intArrayFromString=p,Module.intArrayToString=E,Module.writeStringToMemory=A;var He=[],Ke=0;O.X=1,N.X=1,V.X=1,H.X=1,G.X=1,W.X=1,q.X=1,$.X=1,rr.X=1,ar.X=1,er.X=1,vr.X=1,nr.X=1,or.X=1,kr.X=1,hr.X=1,Ar.X=1,Sr.X=1,Tr.X=1,Ir.X=1,Pr.X=1,Dr.X=1,Lr.X=1,Fr.X=1,Xr.X=1,zr.X=1,Vr.X=1,Br.X=1,Gr.X=1,$r.X=1,Module._malloc=Jr,Jr.X=1,ra.X=1,aa.X=1,ea.X=1,ia.X=1,Module._free=va,va.X=1,_a.X=1,sa.X=1,na.X=1,oa.X=1,la.X=1,da.X=1,Ma.X=1;var Ye,Ge={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18},We=0,Ze=0,Qe=0,qe=0,$e={currentPath:"/",nextInode:2,streams:[null],ignorePermissions:!0,absolutePath:function(r,a){if("string"!=typeof r)return null;void 0===a&&(a=$e.currentPath),r&&"/"==r[0]&&(a="");for(var e=a+"/"+r,i=e.split("/").reverse(),v=[""];i.length;){var t=i.pop();""==t||"."==t||(".."==t?v.length>1&&v.pop():v.push(t))}return 1==v.length?"/":v.join("/")},analyzePath:function(r,a,e){var i={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};if(r=$e.absolutePath(r),"/"==r)i.isRoot=!0,i.exists=i.parentExists=!0,i.name="/",i.path=i.parentPath="/",i.object=i.parentObject=$e.root;else if(null!==r){e=e||0,r=r.slice(1).split("/");for(var v=$e.root,t=[""];r.length;){1==r.length&&v.isFolder&&(i.parentExists=!0,i.parentPath=1==t.length?"/":t.join("/"),i.parentObject=v,i.name=r[0]);var f=r.shift();if(!v.isFolder){i.error=Ge.ENOTDIR;break}if(!v.read){i.error=Ge.EACCES;break}if(!v.contents.hasOwnProperty(f)){i.error=Ge.ENOENT;break}if(v=v.contents[f],v.link&&(!a||0!=r.length)){if(e>40){i.error=Ge.ELOOP;break}var _=$e.absolutePath(v.link,t.join("/"));return $e.analyzePath([_].concat(r).join("/"),a,e+1)}t.push(f),0==r.length&&(i.exists=!0,i.path=t.join("/"),i.object=v)}return i}return i},findObject:function(r,a){$e.ensureRoot();var e=$e.analyzePath(r,a);return e.exists?e.object:(Ya(e.error),null)},createObject:function(r,a,e,i,v){if(r||(r="/"),"string"==typeof r&&(r=$e.findObject(r)),!r)throw Ya(Ge.EACCES),new Error("Parent path must exist.");if(!r.isFolder)throw Ya(Ge.ENOTDIR),
new Error("Parent must be a folder.");if(!r.write&&!$e.ignorePermissions)throw Ya(Ge.EACCES),new Error("Parent folder must be writeable.");if(!a||"."==a||".."==a)throw Ya(Ge.ENOENT),new Error("Name must not be empty.");if(r.contents.hasOwnProperty(a))throw Ya(Ge.EEXIST),new Error("Can't overwrite object.");r.contents[a]={read:void 0===i||i,write:void 0!==v&&v,timestamp:Date.now(),inodeNumber:$e.nextInode++};for(var t in e)e.hasOwnProperty(t)&&(r.contents[a][t]=e[t]);return r.contents[a]},createFolder:function(r,a,e,i){var v={isFolder:!0,isDevice:!1,contents:{}};return $e.createObject(r,a,v,e,i)},createPath:function(r,a,e,i){var v=$e.findObject(r);if(null===v)throw new Error("Invalid parent.");for(a=a.split("/").reverse();a.length;){var t=a.pop();t&&(v.contents.hasOwnProperty(t)||$e.createFolder(v,t,e,i),v=v.contents[t])}return v},createFile:function(r,a,e,i,v){return e.isFolder=!1,$e.createObject(r,a,e,i,v)},createDataFile:function(r,a,e,i,v){if("string"==typeof e){for(var t=new Array(e.length),f=0,_=e.length;f<_;++f)t[f]=e.charCodeAt(f);e=t}var s={isDevice:!1,contents:e};return $e.createFile(r,a,s,i,v)},createLazyFile:function(r,a,e,i,v){var t={isDevice:!1,url:e};return $e.createFile(r,a,t,i,v)},createLink:function(r,a,e,i,v){var t={isDevice:!1,link:e};return $e.createFile(r,a,t,i,v)},createDevice:function(r,a,e,i){if(!e&&!i)throw new Error("A device must have at least one callback defined.");var v={isDevice:!0,input:e,output:i};return $e.createFile(r,a,v,Boolean(e),Boolean(i))},forceLoadFile:function(r){if(r.isDevice||r.isFolder||r.link||r.contents)return!0;var a=!0;if("undefined"!=typeof XMLHttpRequest)e("Cannot do synchronous binary XHRs in modern browsers. Use --embed-file or --preload-file in emcc");else{if("undefined"==typeof read)throw new Error("Cannot load without read() or XMLHttpRequest.");try{r.contents=p(read(r.url),!0)}catch(r){a=!1}}return a||Ya(Ge.EIO),a},ensureRoot:function(){$e.root||($e.root={read:!0,write:!0,isFolder:!0,isDevice:!1,timestamp:Date.now(),inodeNumber:1,contents:{}})},init:function(r,a,i){function v(r){null===r||r==="\\\\n".charCodeAt(0)?(a.printer(a.buffer.join("")),a.buffer=[]):a.buffer.push(String.fromCharCode(r))}e(!$e.init.initialized,"FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)"),$e.init.initialized=!0,$e.ensureRoot(),r=r||Module.stdin,a=a||Module.stdout,i=i||Module.stderr;var t=!0,f=!0,s=!0;r||(t=!1,r=function(){if(!r.cache||!r.cache.length){var a;"undefined"!=typeof window&&"function"==typeof window.prompt?a=window.prompt("Input: "):"function"==typeof readline&&(a=readline()),a||(a=""),r.cache=p(a+"\\\\n",!0)}return r.cache.shift()}),a||(f=!1,a=v),a.printer||(a.printer=print),a.buffer||(a.buffer=[]),i||(s=!1,i=v),i.printer||(i.printer=print),i.buffer||(i.buffer=[]),$e.createFolder("/","tmp",!0,!0);var n=$e.createFolder("/","dev",!0,!0),o=$e.createDevice(n,"stdin",r),l=$e.createDevice(n,"stdout",null,a),b=$e.createDevice(n,"stderr",null,i);$e.createDevice(n,"tty",r,a),$e.streams[1]={path:"/dev/stdin",object:o,position:0,isRead:!0,isWrite:!1,isAppend:!1,isTerminal:!t,error:!1,eof:!1,ungotten:[]},$e.streams[2]={path:"/dev/stdout",object:l,position:0,isRead:!1,isWrite:!0,isAppend:!1,isTerminal:!f,error:!1,eof:!1,ungotten:[]},$e.streams[3]={path:"/dev/stderr",object:b,position:0,isRead:!1,isWrite:!0,isAppend:!1,isTerminal:!s,error:!1,eof:!1,ungotten:[]},We=_([1],"void*",we),Ze=_([2],"void*",we),Qe=_([3],"void*",we),$e.createPath("/","dev/shm/tmp",!0,!0),$e.streams[We]=$e.streams[1],$e.streams[Ze]=$e.streams[2],$e.streams[Qe]=$e.streams[3],qe=_([_([0,0,0,0,We,0,0,0,Ze,0,0,0,Qe,0,0,0],"void*",we)],"void*",we)},quit:function(){$e.init.initialized&&($e.streams[2]&&$e.streams[2].object.output.buffer.length>0&&$e.streams[2].object.output("\\\\n".charCodeAt(0)),$e.streams[3]&&$e.streams[3].object.output.buffer.length>0&&$e.streams[3].object.output("\\\\n".charCodeAt(0)))}},Je=Ja;Ve.unshift({func:function(){$e.ignorePermissions=!1,$e.init.initialized||$e.init()}}),Be.push({func:function(){$e.quit()}}),Ya(0),ae.buf=_(12,"void*",we),Module.callMain=function(r){function a(){for(var r=0;r<3;r++)i.push(0)}var e=r.length+1,i=[_(p("/bin/this.program"),"i8",we)];a();for(var v=0;v<e-1;v+=1)i.push(_(p(r[v]),"i8",we)),a();return i.push(0),i=_(i,"i32",we),_main(e,i,0)};var ri,ai,ei,ii,vi,ti,qe,fi,_i,si,ni,oi,li,bi,ki,ui,ci,hi,di,wi;if(He.__str=_([97,78,0],"i8",we),He.__str1=_([38,61,0],"i8",we),He.__str2=_([97,83,0],"i8",we),He.__str3=_([61,0],"i8",we),He.__str4=_([97,97,0],"i8",we),He.__str5=_([38,38,0],"i8",we),He.__str6=_([97,100,0],"i8",we),He.__str7=_([38,0],"i8",we),He.__str8=_([97,110,0],"i8",we),He.__str9=_([99,108,0],"i8",we),He.__str10=_([40,41,0],"i8",we),He.__str11=_([99,109,0],"i8",we),He.__str12=_([44,0],"i8",we),He.__str13=_([99,111,0],"i8",we),He.__str14=_([126,0],"i8",we),He.__str15=_([100,86,0],"i8",we),He.__str16=_([47,61,0],"i8",we),He.__str17=_([100,97,0],"i8",we),He.__str18=_([100,101,108,101,116,101,91,93,0],"i8",we),He.__str19=_([100,101,0],"i8",we),He.__str20=_([42,0],"i8",we),He.__str21=_([100,108,0],"i8",we),He.__str22=_([100,101,108,101,116,101,0],"i8",we),He.__str23=_([100,118,0],"i8",we),He.__str24=_([47,0],"i8",we),He.__str25=_([101,79,0],"i8",we),He.__str26=_([94,61,0],"i8",we),He.__str27=_([101,111,0],"i8",we),He.__str28=_([94,0],"i8",we),He.__str29=_([101,113,0],"i8",we),He.__str30=_([61,61,0],"i8",we),He.__str31=_([103,101,0],"i8",we),He.__str32=_([62,61,0],"i8",we),He.__str33=_([103,116,0],"i8",we),He.__str34=_([62,0],"i8",we),He.__str35=_([105,120,0],"i8",we),He.__str36=_([91,93,0],"i8",we),He.__str37=_([108,83,0],"i8",we),He.__str38=_([60,60,61,0],"i8",we),He.__str39=_([108,101,0],"i8",we),He.__str40=_([60,61,0],"i8",we),He.__str41=_([108,115,0],"i8",we),He.__str42=_([60,60,0],"i8",we),He.__str43=_([108,116,0],"i8",we),He.__str44=_([60,0],"i8",we),He.__str45=_([109,73,0],"i8",we),He.__str46=_([45,61,0],"i8",we),He.__str47=_([109,76,0],"i8",we),He.__str48=_([42,61,0],"i8",we),He.__str49=_([109,105,0],"i8",we),He.__str51=_([109,108,0],"i8",we),He.__str52=_([109,109,0],"i8",we),He.__str53=_([45,45,0],"i8",we),He.__str54=_([110,97,0],"i8",we),He.__str55=_([110,101,119,91,93,0],"i8",we),He.__str56=_([110,101,0],"i8",we),He.__str57=_([33,61,0],"i8",we),He.__str58=_([110,103,0],"i8",we),He.__str59=_([110,116,0],"i8",we),He.__str60=_([33,0],"i8",we),He.__str61=_([110,119,0],"i8",we),He.__str62=_([110,101,119,0],"i8",we),He.__str63=_([111,82,0],"i8",we),He.__str64=_([124,61,0],"i8",we),He.__str65=_([111,111,0],"i8",we),He.__str66=_([124,124,0],"i8",we),He.__str67=_([111,114,0],"i8",we),He.__str68=_([124,0],"i8",we),He.__str69=_([112,76,0],"i8",we),He.__str70=_([43,61,0],"i8",we),He.__str71=_([112,108,0],"i8",we),He.__str72=_([43,0],"i8",we),He.__str73=_([112,109,0],"i8",we),He.__str74=_([45,62,42,0],"i8",we),He.__str75=_([112,112,0],"i8",we),He.__str76=_([43,43,0],"i8",we),He.__str77=_([112,115,0],"i8",we),He.__str78=_([112,116,0],"i8",we),He.__str79=_([45,62,0],"i8",we),He.__str80=_([113,117,0],"i8",we),He.__str81=_([63,0],"i8",we),He.__str82=_([114,77,0],"i8",we),He.__str83=_([37,61,0],"i8",we),He.__str84=_([114,83,0],"i8",we),He.__str85=_([62,62,61,0],"i8",we),He.__str86=_([114,109,0],"i8",we),He.__str87=_([37,0],"i8",we),He.__str88=_([114,115,0],"i8",we),He.__str89=_([62,62,0],"i8",we),He.__str90=_([115,116,0],"i8",we),He.__str91=_([115,105,122,101,111,102,32,0],"i8",we),He.__str92=_([115,122,0],"i8",we),ri=_([0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0],we),He.__str95=_([98,111,111,108,101,97,110,0],"i8",we),He.__str97=_([98,121,116,101,0],"i8",we),He.__str101=_([95,95,102,108,111,97,116,49,50,56,0],"i8",we),He.__str105=_([117,110,115,105,103,110,101,100,0],"i8",we),He.__str114=_([108,111,110,103,32,108,111,110,103,0],"i8",we),He.__str115=_([117,110,115,105,103,110,101,100,32,108,111,110,103,32,108,111,110,103,0],"i8",we),ai=_([0,0,0,0,11,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,8,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,11,0,0,0,8,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,8,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,10,0,0,0,8,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,13,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,9,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,6,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0],["*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0],we),He.__str117=_([95,71,76,79,66,65,76,95,0],"i8",we),He.__str118=_([103,108,111,98,97,108,32,99,111,110,115,116,114,117,99,116,111,114,115,32,107,101,121,101,100,32,116,111,32,0],"i8",we),He.__str119=_([103,108,111,98,97,108,32,100,101,115,116,114,117,99,116,111,114,115,32,107,101,121,101,100,32,116,111,32,0],"i8",we),He.__str120=_([58,58,0],"i8",we),He.__str121=_([118,116,97,98,108,101,32,102,111,114,32,0],"i8",we),He.__str122=_([86,84,84,32,102,111,114,32,0],"i8",we),He.__str123=_([99,111,110,115,116,114,117,99,116,105,111,110,32,118,116,97,98,108,101,32,102,111,114,32,0],"i8",we),He.__str124=_([45,105,110,45,0],"i8",we),He.__str125=_([116,121,112,101,105,110,102,111,32,102,111,114,32,0],"i8",we),He.__str126=_([116,121,112,101,105,110,102,111,32,110,97,109,101,32,102,111,114,32,0],"i8",we),He.__str127=_([116,121,112,101,105,110,102,111,32,102,110,32,102,111,114,32,0],"i8",we),He.__str128=_([110,111,110,45,118,105,114,116,117,97,108,32,116,104,117,110,107,32,116,111,32,0],"i8",we),He.__str129=_([118,105,114,116,117,97,108,32,116,104,117,110,107,32,116,111,32,0],"i8",we),He.__str130=_([99,111,118,97,114,105,97,110,116,32,114,101,116,117,114,110,32,116,104,117,110,107,32,116,111,32,0],"i8",we),He.__str131=_([106,97,118,97,32,67,108,97,115,115,32,102,111,114,32,0],"i8",we),He.__str132=_([103,117,97,114,100,32,118,97,114,105,97,98,108,101,32,102,111,114,32,0],"i8",we),He.__str133=_([114,101,102,101,114,101,110,99,101,32,116,101,109,112,111,114,97,114,121,32,102,111,114,32,0],"i8",we),He.__str134=_([104,105,100,100,101,110,32,97,108,105,97,115,32,102,111,114,32,0],"i8",we),He.__str135=_([58,58,42,0],"i8",we),He.__str136=_([44,32,0],"i8",we),He.__str137=_([111,112,101,114,97,116,111,114,0],"i8",we),He.__str139=_([41,32,0],"i8",we),He.__str140=_([32,40,0],"i8",we),He.__str141=_([41,32,58,32,40,0],"i8",we),He.__str142=_([117,108,0],"i8",we),He.__str143=_([108,108,0],"i8",we),He.__str144=_([117,108,108,0],"i8",we),He.__str145=_([102,97,108,115,101,0],"i8",we),He.__str146=_([116,114,117,101,0],"i8",we),He.__str147=_([32,114,101,115,116,114,105,99,116,0],"i8",we),He.__str148=_([32,118,111,108,97,116,105,108,101,0],"i8",we),He.__str149=_([32,99,111,110,115,116,0],"i8",we),He.__str150=_([99,111,109,112,108,101,120,32,0],"i8",we),He.__str151=_([105,109,97,103,105,110,97,114,121,32,0],"i8",we),ei=_([116,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,9,0,0,0,98,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,12,0,0,0,115,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,70,0,0,0,0,0,0,0,12,0,0,0,105,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,13,0,0,0,111,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,13,0,0,0,100,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,14,0,0,0],["i8",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i8",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i8",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i8",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i8",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i8",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i8",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0],we),He.__str152=_([115,116,100,0],"i8",we),He.__str153=_([115,116,100,58,58,97,108,108,111,99,97,116,111,114,0],"i8",we),He.__str154=_([97,108,108,111,99,97,116,111,114,0],"i8",we),He.__str155=_([115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,0],"i8",we),He.__str156=_([98,97,115,105,99,95,115,116,114,105,110,103,0],"i8",we),He.__str157=_([115,116,100,58,58,115,116,114,105,110,103,0],"i8",we),He.__str158=_([115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,44,32,115,116,100,58,58,97,108,108,111,99,97,116,111,114,60,99,104,97,114,62,32,62,0],"i8",we),He.__str159=_([115,116,100,58,58,105,115,116,114,101,97,109,0],"i8",we),He.__str160=_([115,116,100,58,58,98,97,115,105,99,95,105,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0],"i8",we),He.__str161=_([98,97,115,105,99,95,105,115,116,114,101,97,109,0],"i8",we),He.__str162=_([115,116,100,58,58,111,115,116,114,101,97,109,0],"i8",we),He.__str163=_([115,116,100,58,58,98,97,115,105,99,95,111,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0],"i8",we),He.__str164=_([98,97,115,105,99,95,111,115,116,114,101,97,109,0],"i8",we),He.__str165=_([115,116,100,58,58,105,111,115,116,114,101,97,109,0],"i8",we),He.__str166=_([115,116,100,58,58,98,97,115,105,99,95,105,111,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0],"i8",we),He.__str167=_([98,97,115,105,99,95,105,111,115,116,114,101,97,109,0],"i8",we),He.__str168=_([115,116,114,105,110,103,32,108,105,116,101,114,97,108,0],"i8",we),He.__str169=_([40,97,110,111,110,121,109,111,117,115,32,110,97,109,101,115,112,97,99,101,41,0],"i8",we),He._symbol_demangle_dashed_null=_([45,45,110,117,108,108,45,45,0],"i8",we),He.__str170=_([37,115,37,115,0],"i8",we),He.__str1171=_([111,112,101,114,97,116,111,114,32,110,101,119,0],"i8",we),He.__str2172=_([111,112,101,114,97,116,111,114,32,100,101,108,101,116,101,0],"i8",we),He.__str3173=_([111,112,101,114,97,116,111,114,61,0],"i8",we),He.__str4174=_([111,112,101,114,97,116,111,114,62,62,0],"i8",we),He.__str5175=_([111,112,101,114,97,116,111,114,60,60,0],"i8",we),He.__str6176=_([111,112,101,114,97,116,111,114,33,0],"i8",we),He.__str7177=_([111,112,101,114,97,116,111,114,61,61,0],"i8",we),He.__str8178=_([111,112,101,114,97,116,111,114,33,61,0],"i8",we),He.__str9179=_([111,112,101,114,97,116,111,114,91,93,0],"i8",we),He.__str10180=_([111,112,101,114,97,116,111,114,32,0],"i8",we),He.__str11181=_([111,112,101,114,97,116,111,114,45,62,0],"i8",we),He.__str12182=_([111,112,101,114,97,116,111,114,42,0],"i8",we),He.__str13183=_([111,112,101,114,97,116,111,114,43,43,0],"i8",we),He.__str14184=_([111,112,101,114,97,116,111,114,45,45,0],"i8",we),He.__str15185=_([111,112,101,114,97,116,111,114,45,0],"i8",we),He.__str16186=_([111,112,101,114,97,116,111,114,43,0],"i8",we),He.__str17187=_([111,112,101,114,97,116,111,114,38,0],"i8",we),He.__str18188=_([111,112,101,114,97,116,111,114,45,62,42,0],"i8",we),He.__str19189=_([111,112,101,114,97,116,111,114,47,0],"i8",we),He.__str20190=_([111,112,101,114,97,116,111,114,37,0],"i8",we),He.__str21191=_([111,112,101,114,97,116,111,114,60,0],"i8",we),He.__str22192=_([111,112,101,114,97,116,111,114,60,61,0],"i8",we),He.__str23193=_([111,112,101,114,97,116,111,114,62,0],"i8",we),He.__str24194=_([111,112,101,114,97,116,111,114,62,61,0],"i8",we),He.__str25195=_([111,112,101,114,97,116,111,114,44,0],"i8",we),He.__str26196=_([111,112,101,114,97,116,111,114,40,41,0],"i8",we),He.__str27197=_([111,112,101,114,97,116,111,114,126,0],"i8",we),He.__str28198=_([111,112,101,114,97,116,111,114,94,0],"i8",we),He.__str29199=_([111,112,101,114,97,116,111,114,124,0],"i8",we),He.__str30200=_([111,112,101,114,97,116,111,114,38,38,0],"i8",we),He.__str31201=_([111,112,101,114,97,116,111,114,124,124,0],"i8",we),He.__str32202=_([111,112,101,114,97,116,111,114,42,61,0],"i8",we),He.__str33203=_([111,112,101,114,97,116,111,114,43,61,0],"i8",we),He.__str34204=_([111,112,101,114,97,116,111,114,45,61,0],"i8",we),He.__str35205=_([111,112,101,114,97,116,111,114,47,61,0],"i8",we),He.__str36206=_([111,112,101,114,97,116,111,114,37,61,0],"i8",we),He.__str37207=_([111,112,101,114,97,116,111,114,62,62,61,0],"i8",we),He.__str38208=_([111,112,101,114,97,116,111,114,60,60,61,0],"i8",we),He.__str39209=_([111,112,101,114,97,116,111,114,38,61,0],"i8",we),He.__str40210=_([111,112,101,114,97,116,111,114,124,61,0],"i8",we),He.__str41211=_([111,112,101,114,97,116,111,114,94,61,0],"i8",we),He.__str42212=_([96,118,102,116,97,98,108,101,39,0],"i8",we),He.__str43213=_([96,118,98,116,97,98,108,101,39,0],"i8",we),He.__str44214=_([96,118,99,97,108,108,39,0],"i8",we),He.__str45215=_([96,116,121,112,101,111,102,39,0],"i8",we),He.__str46216=_([96,108,111,99,97,108,32,115,116,97,116,105,99,32,103,117,97,114,100,39,0],"i8",we),He.__str47217=_([96,115,116,114,105,110,103,39,0],"i8",we),He.__str48218=_([96,118,98,97,115,101,32,100,101,115,116,114,117,99,116,111,114,39,0],"i8",we),He.__str49219=_([96,118,101,99,116,111,114,32,100,101,108,101,116,105,110,103,32,100,101,115,116,114,117,99,116,111,114,39,0],"i8",we),He.__str50220=_([96,100,101,102,97,117,108,116,32,99,111,110,115,116,114,117,99,116,111,114,32,99,108,111,115,117,114,101,39,0],"i8",we),He.__str51221=_([96,115,99,97,108,97,114,32,100,101,108,101,116,105,110,103,32,100,101,115,116,114,117,99,116,111,114,39,0],"i8",we),He.__str52222=_([96,118,101,99,116,111,114,32,99,111,110,115,116,114,117,99,116,111,114,32,105,116,101,114,97,116,111,114,39,0],"i8",we),He.__str53223=_([96,118,101,99,116,111,114,32,100,101,115,116,114,117,99,116,111,114,32,105,116,101,114,97,116,111,114,39,0],"i8",we),He.__str54224=_([96,118,101,99,116,111,114,32,118,98,97,115,101,32,99,111,110,115,116,114,117,99,116,111,114,32,105,116,101,114,97,116,111,114,39,0],"i8",we),He.__str55225=_([96,118,105,114,116,117,97,108,32,100,105,115,112,108,97,99,101,109,101,110,116,32,109,97,112,39,0],"i8",we),He.__str56226=_([96,101,104,32,118,101,99,116,111,114,32,99,111,110,115,116,114,117,99,116,111,114,32,105,116,101,114,97,116,111,114,39,0],"i8",we),He.__str57227=_([96,101,104,32,118,101,99,116,111,114,32,100,101,115,116,114,117,99,116,111,114,32,105,116,101,114,97,116,111,114,39,0],"i8",we),He.__str58228=_([96,101,104,32,118,101,99,116,111,114,32,118,98,97,115,101,32,99,111,110,115,116,114,117,99,116,111,114,32,105,116,101,114,97,116,111,114,39,0],"i8",we),He.__str59229=_([96,99,111,112,121,32,99,111,110,115,116,114,117,99,116,111,114,32,99,108,111,115,117,114,101,39,0],"i8",we),He.__str60230=_([37,115,37,115,32,96,82,84,84,73,32,84,121,112,101,32,68,101,115,99,114,105,112,116,111,114,39,0],"i8",we),He.__str61231=_([96,82,84,84,73,32,66,97,115,101,32,67,108,97,115,115,32,68,101,115,99,114,105,112,116,111,114,32,97,116,32,40,37,115,44,37,115,44,37,115,44,37,115,41,39,0],"i8",we),He.__str62232=_([96,82,84,84,73,32,66,97,115,101,32,67,108,97,115,115,32,65,114,114,97,121,39,0],"i8",we),He.__str63233=_([96,82,84,84,73,32,67,108,97,115,115,32,72,105,101,114,97,114,99,104,121,32,68,101,115,99,114,105,112,116,111,114,39,0],"i8",we),He.__str64234=_([96,82,84,84,73,32,67,111,109,112,108,101,116,101,32,79,98,106,101,99,116,32,76,111,99,97,116,111,114,39,0],"i8",we),He.__str65235=_([96,108,111,99,97,108,32,118,102,116,97,98,108,101,39,0],"i8",we),He.__str66236=_([96,108,111,99,97,108,32,118,102,116,97,98,108,101,32,99,111,110,115,116,114,117,99,116,111,114,32,99,108,111,115,117,114,101,39,0],"i8",we),He.__str67237=_([111,112,101,114,97,116,111,114,32,110,101,119,91,93,0],"i8",we),He.__str68238=_([111,112,101,114,97,116,111,114,32,100,101,108,101,116,101,91,93,0],"i8",we),He.__str69239=_([96,112,108,97,99,101,109,101,110,116,32,100,101,108,101,116,101,32,99,108,111,115,117,114,101,39,0],"i8",we),He.__str70240=_([96,112,108,97,99,101,109,101,110,116,32,100,101,108,101,116,101,91,93,32,99,108,111,115,117,114,101,39,0],"i8",we),He.__str71241=_([126,37,115,0],"i8",we),He.__str72242=_([117,110,100,110,97,109,101,46,99,0],"i8",we),He.___func___symbol_demangle=_([115,121,109,98,111,108,95,100,101,109,97,110,103,108,101,0],"i8",we),He.__str73243=_([115,121,109,45,62,114,101,115,117,108,116,0],"i8",we),He.___func___handle_template=_([104,97,110,100,108,101,95,116,101,109,112,108,97,116,101,0],"i8",we),He.__str74244=_([42,115,121,109,45,62,99,117,114,114,101,110,116,32,61,61,32,39,36,39,0],"i8",we),He.___func___str_array_get_ref=_([115,116,114,95,97,114,114,97,121,95,103,101,116,95,114,101,102,0],"i8",we),He.__str75245=_([99,114,101,102,0],"i8",we),He.__str76246=_([112,114,105,118,97,116,101,58,32,0],"i8",we),He.__str77247=_([112,114,111,116,101,99,116,101,100,58,32,0],"i8",we),He.__str78248=_([112,117,98,108,105,99,58,32,0],"i8",we),He.__str79249=_([115,116,97,116,105,99,32,0],"i8",we),He.__str80250=_([118,105,114,116,117,97,108,32,0],"i8",we),He.__str81251=_([91,116,104,117,110,107,93,58,37,115,0],"i8",we),He.__str82252=_([37,115,96,97,100,106,117,115,116,111,114,123,37,115,125,39,32,0],"i8",we),He.__str83253=_([37,115,32,37,115,0],"i8",we),He.__str84254=_([118,111,105,100,0],"i8",we),He.__str85255=_([37,115,37,115,37,115,0],"i8",we),He.__str86256=_([37,115,37,115,37,115,37,115,37,115,37,115,37,115,37,115,37,115,37,115,37,115,0],"i8",we),He.__str87257=_([32,0],"i8",we),He.__str88258=_([100,108,108,95,101,120,112,111,114,116,32,0],"i8",we),He.__str89259=_([99,100,101,99,108,0],"i8",we),He.__str90260=_([112,97,115,99,97,108,0],"i8",we),He.__str91261=_([116,104,105,115,99,97,108,108,0],"i8",we),He.__str92262=_([115,116,100,99,97,108,108,0],"i8",we),He.__str93263=_([102,97,115,116,99,97,108,108,0],"i8",we),He.__str94264=_([99,108,114,99,97,108,108,0],"i8",we),He.__str95265=_([95,95,100,108,108,95,101,120,112,111,114,116,32,0],"i8",we),He.__str96266=_([95,95,99,100,101,99,108,0],"i8",we),He.__str97267=_([95,95,112,97,115,99,97,108,0],"i8",we),He.__str98268=_([95,95,116,104,105,115,99,97,108,108,0],"i8",we),He.__str99269=_([95,95,115,116,100,99,97,108,108,0],"i8",we),He.__str100270=_([95,95,102,97,115,116,99,97,108,108,0],"i8",we),He.__str101271=_([95,95,99,108,114,99,97,108,108,0],"i8",we),He.__str102272=_([95,95,112,116,114,54,52,0],"i8",we),He.__str103273=_([99,111,110,115,116,0],"i8",we),He.__str104274=_([118,111,108,97,116,105,108,101,0],"i8",we),He.__str105275=_([99,111,110,115,116,32,118,111,108,97,116,105,108,101,0],"i8",we),He.___func___get_class_string=_([103,101,116,95,99,108,97,115,115,95,115,116,114,105,110,103,0],"i8",we),He.__str106276=_([97,45,62,101,108,116,115,91,105,93,0],"i8",we),He.__str107277=_([123,102,111,114,32,96,37,115,39,125,0],"i8",we),He.__str108278=_([37,115,37,115,37,115,37,115,37,115,37,115,37,115,37,115,0],"i8",we),He.__str109279=_([96,37,115,39,0],"i8",we),He.__str110280=_([46,46,46,0],"i8",we),He.__str111281=_([37,99,118,111,105,100,37,99,0],"i8",we),He.__str112282=_([37,115,44,37,115,0],"i8",we),He.__str113283=_([37,99,37,115,37,115,32,37,99,0],"i8",we),He.__str114284=_([37,99,37,115,37,115,37,99,0],"i8",we),He.___func___str_array_push=_([115,116,114,95,97,114,114,97,121,95,112,117,115,104,0],"i8",we),He.__str115285=_([112,116,114,0],"i8",we),He.__str116286=_([97,0],"i8",we),He.__str117287=_([97,45,62,101,108,116,115,91,97,45,62,110,117,109,93,0],"i8",we),He.__str118288=_([37,115,37,100,0],"i8",we),He.__str119289=_([45,0],"i8",we),ii=_(1,"i8",we),He.___func___demangle_datatype=_([100,101,109,97,110,103,108,101,95,100,97,116,97,116,121,112,101,0],"i8",we),He.__str121291=_([99,116,0],"i8",we),He.__str122292=_([117,110,105,111,110,32,0],"i8",we),He.__str123293=_([115,116,114,117,99,116,32,0],"i8",we),He.__str124294=_([99,108,97,115,115,32,0],"i8",we),He.__str125295=_([99,111,105,110,116,101,114,102,97,99,101,32,0],"i8",we),He.__str126296=_([96,116,101,109,112,108,97,116,101,45,112,97,114,97,109,101,116,101,114,45,37,115,39,0],"i8",we),He.__str127297=_([37,115,37,115,32,40,37,115,42,0],"i8",we),He.__str128298=_([41,37,115,0],"i8",we),He.__str129299=_([101,110,117,109,32,37,115,0],"i8",we),He.__str130300=_([96,116,101,109,112,108,97,116,101,45,112,97,114,97,109,101,116,101,114,37,115,39,0],"i8",we),He.__str131301=_([123,37,115,44,37,115,125,0],"i8",we),He.__str132302=_([123,37,115,44,37,115,44,37,115,125,0],"i8",we),He.__str133303=_([96,110,111,110,45,116,121,112,101,45,116,101,109,112,108,97,116,101,45,112,97,114,97,109,101,116,101,114,37,115,39,0],"i8",we),He.__str134304=_([32,95,95,112,116,114,54,52,0],"i8",we),He.__str135305=_([32,38,37,115,0],"i8",we),He.__str136306=_([32,38,37,115,32,118,111,108,97,116,105,108,101,0],"i8",we),He.__str137307=_([32,42,37,115,0],"i8",we),He.__str138308=_([32,42,37,115,32,99,111,110,115,116,0],"i8",we),He.__str139309=_([32,42,37,115,32,118,111,108,97,116,105,108,101,0],"i8",we),He.__str140310=_([32,42,37,115,32,99,111,110,115,116,32,118,111,108,97,116,105,108,101,0],"i8",we),He.__str141311=_([32,40,37,115,37,115,41,0],"i8",we),He.__str142312=_([32,40,37,115,41,0],"i8",we),He.__str143313=_([37,115,91,37,115,93,0],"i8",we),He.__str144314=_([37,115,32,37,115,37,115,0],"i8",we),He.__str145315=_([115,105,103,110,101,100,32,99,104,97,114,0],"i8",we),He.__str146316=_([99,104,97,114,0],"i8",we),He.__str147317=_([117,110,115,105,103,110,101,100,32,99,104,97,114,0],"i8",we),He.__str148318=_([115,104,111,114,116,0],"i8",we),He.__str149319=_([117,110,115,105,103,110,101,100,32,115,104,111,114,116,0],"i8",we),He.__str150320=_([105,110,116,0],"i8",we),He.__str151321=_([117,110,115,105,103,110,101,100,32,105,110,116,0],"i8",we),He.__str152322=_([108,111,110,103,0],"i8",we),He.__str153323=_([117,110,115,105,103,110,101,100,32,108,111,110,103,0],"i8",we),He.__str154324=_([102,108,111,97,116,0],"i8",we),He.__str155325=_([100,111,117,98,108,101,0],"i8",we),He.__str156326=_([108,111,110,103,32,100,111,117,98,108,101,0],"i8",we),He.__str157327=_([95,95,105,110,116,56,0],"i8",we),He.__str158328=_([117,110,115,105,103,110,101,100,32,95,95,105,110,116,56,0],"i8",we),He.__str159329=_([95,95,105,110,116,49,54,0],"i8",we),He.__str160330=_([117,110,115,105,103,110,101,100,32,95,95,105,110,116,49,54,0],"i8",we),He.__str161331=_([95,95,105,110,116,51,50,0],"i8",we),He.__str162332=_([117,110,115,105,103,110,101,100,32,95,95,105,110,116,51,50,0],"i8",we),He.__str163333=_([95,95,105,110,116,54,52,0],"i8",we),He.__str164334=_([117,110,115,105,103,110,101,100,32,95,95,105,110,116,54,52,0],"i8",we),
He.__str165335=_([95,95,105,110,116,49,50,56,0],"i8",we),He.__str166336=_([117,110,115,105,103,110,101,100,32,95,95,105,110,116,49,50,56,0],"i8",we),He.__str167337=_([98,111,111,108,0],"i8",we),He.__str168338=_([119,99,104,97,114,95,116,0],"i8",we),vi=_(468,["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0],we),ti=_(24,"i32",we),He.__str339=_([109,97,120,32,115,121,115,116,101,109,32,98,121,116,101,115,32,61,32,37,49,48,108,117,10,0],"i8",we),He.__str1340=_([115,121,115,116,101,109,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0],"i8",we),He.__str2341=_([105,110,32,117,115,101,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0],"i8",we),fi=_([ue],"i8",we),_i=_(1,"void ()*",we),si=_([0,0,0,0,0,0,0,0,6,0,0,0,8,0,0,0,10,0,0,0],["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0],we),_(1,"void*",we),He.__str3342=_([115,116,100,58,58,98,97,100,95,97,108,108,111,99,0],"i8",we),ni=_([0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,14,0,0,0],["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0],we),_(1,"void*",we),He.__str14343=_([98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0],"i8",we),He.__ZTSSt9bad_alloc=_([83,116,57,98,97,100,95,97,108,108,111,99,0],"i8",we),bi=_(12,"*",we),He.__ZTSSt20bad_array_new_length=_([83,116,50,48,98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0],"i8",we),ki=_(12,"*",we),Se[ri>>2]=0|He.__str,Se[ri+4>>2]=0|He.__str1,Se[ri+16>>2]=0|He.__str2,Se[ri+20>>2]=0|He.__str3,Se[ri+32>>2]=0|He.__str4,Se[ri+36>>2]=0|He.__str5,Se[ri+48>>2]=0|He.__str6,Se[ri+52>>2]=0|He.__str7,Se[ri+64>>2]=0|He.__str8,Se[ri+68>>2]=0|He.__str7,Se[ri+80>>2]=0|He.__str9,Se[ri+84>>2]=0|He.__str10,Se[ri+96>>2]=0|He.__str11,Se[ri+100>>2]=0|He.__str12,Se[ri+112>>2]=0|He.__str13,Se[ri+116>>2]=0|He.__str14,Se[ri+128>>2]=0|He.__str15,Se[ri+132>>2]=0|He.__str16,Se[ri+144>>2]=0|He.__str17,Se[ri+148>>2]=0|He.__str18,Se[ri+160>>2]=0|He.__str19,Se[ri+164>>2]=0|He.__str20,Se[ri+176>>2]=0|He.__str21,Se[ri+180>>2]=0|He.__str22,Se[ri+192>>2]=0|He.__str23,Se[ri+196>>2]=0|He.__str24,Se[ri+208>>2]=0|He.__str25,Se[ri+212>>2]=0|He.__str26,Se[ri+224>>2]=0|He.__str27,Se[ri+228>>2]=0|He.__str28,Se[ri+240>>2]=0|He.__str29,Se[ri+244>>2]=0|He.__str30,Se[ri+256>>2]=0|He.__str31,Se[ri+260>>2]=0|He.__str32,Se[ri+272>>2]=0|He.__str33,Se[ri+276>>2]=0|He.__str34,Se[ri+288>>2]=0|He.__str35,Se[ri+292>>2]=0|He.__str36,Se[ri+304>>2]=0|He.__str37,Se[ri+308>>2]=0|He.__str38,Se[ri+320>>2]=0|He.__str39,Se[ri+324>>2]=0|He.__str40,Se[ri+336>>2]=0|He.__str41,Se[ri+340>>2]=0|He.__str42,Se[ri+352>>2]=0|He.__str43,Se[ri+356>>2]=0|He.__str44,Se[ri+368>>2]=0|He.__str45,Se[ri+372>>2]=0|He.__str46,Se[ri+384>>2]=0|He.__str47,Se[ri+388>>2]=0|He.__str48,Se[ri+400>>2]=0|He.__str49,Se[ri+404>>2]=0|He.__str119289,Se[ri+416>>2]=0|He.__str51,Se[ri+420>>2]=0|He.__str20,Se[ri+432>>2]=0|He.__str52,Se[ri+436>>2]=0|He.__str53,Se[ri+448>>2]=0|He.__str54,Se[ri+452>>2]=0|He.__str55,Se[ri+464>>2]=0|He.__str56,Se[ri+468>>2]=0|He.__str57,Se[ri+480>>2]=0|He.__str58,Se[ri+484>>2]=0|He.__str119289,Se[ri+496>>2]=0|He.__str59,Se[ri+500>>2]=0|He.__str60,Se[ri+512>>2]=0|He.__str61,Se[ri+516>>2]=0|He.__str62,Se[ri+528>>2]=0|He.__str63,Se[ri+532>>2]=0|He.__str64,Se[ri+544>>2]=0|He.__str65,Se[ri+548>>2]=0|He.__str66,Se[ri+560>>2]=0|He.__str67,Se[ri+564>>2]=0|He.__str68,Se[ri+576>>2]=0|He.__str69,Se[ri+580>>2]=0|He.__str70,Se[ri+592>>2]=0|He.__str71,Se[ri+596>>2]=0|He.__str72,Se[ri+608>>2]=0|He.__str73,Se[ri+612>>2]=0|He.__str74,Se[ri+624>>2]=0|He.__str75,Se[ri+628>>2]=0|He.__str76,Se[ri+640>>2]=0|He.__str77,Se[ri+644>>2]=0|He.__str72,Se[ri+656>>2]=0|He.__str78,Se[ri+660>>2]=0|He.__str79,Se[ri+672>>2]=0|He.__str80,Se[ri+676>>2]=0|He.__str81,Se[ri+688>>2]=0|He.__str82,Se[ri+692>>2]=0|He.__str83,Se[ri+704>>2]=0|He.__str84,Se[ri+708>>2]=0|He.__str85,Se[ri+720>>2]=0|He.__str86,Se[ri+724>>2]=0|He.__str87,Se[ri+736>>2]=0|He.__str88,Se[ri+740>>2]=0|He.__str89,Se[ri+752>>2]=0|He.__str90,Se[ri+756>>2]=0|He.__str91,Se[ri+768>>2]=0|He.__str92,Se[ri+772>>2]=0|He.__str91,Se[ai>>2]=0|He.__str145315,Se[ai+8>>2]=0|He.__str145315,Se[ai+20>>2]=0|He.__str167337,Se[ai+28>>2]=0|He.__str95,Se[ai+40>>2]=0|He.__str146316,Se[ai+48>>2]=0|He.__str97,Se[ai+60>>2]=0|He.__str155325,Se[ai+68>>2]=0|He.__str155325,Se[ai+80>>2]=0|He.__str156326,Se[ai+88>>2]=0|He.__str156326,Se[ai+100>>2]=0|He.__str154324,Se[ai+108>>2]=0|He.__str154324,Se[ai+120>>2]=0|He.__str101,Se[ai+128>>2]=0|He.__str101,Se[ai+140>>2]=0|He.__str147317,Se[ai+148>>2]=0|He.__str147317,Se[ai+160>>2]=0|He.__str150320,Se[ai+168>>2]=0|He.__str150320,Se[ai+180>>2]=0|He.__str151321,Se[ai+188>>2]=0|He.__str105,Se[ai+220>>2]=0|He.__str152322,Se[ai+228>>2]=0|He.__str152322,Se[ai+240>>2]=0|He.__str153323,Se[ai+248>>2]=0|He.__str153323,Se[ai+260>>2]=0|He.__str165335,Se[ai+268>>2]=0|He.__str165335,Se[ai+280>>2]=0|He.__str166336,Se[ai+288>>2]=0|He.__str166336,Se[ai+360>>2]=0|He.__str148318,Se[ai+368>>2]=0|He.__str148318,Se[ai+380>>2]=0|He.__str149319,Se[ai+388>>2]=0|He.__str149319,Se[ai+420>>2]=0|He.__str84254,Se[ai+428>>2]=0|He.__str84254,Se[ai+440>>2]=0|He.__str168338,Se[ai+448>>2]=0|He.__str146316,Se[ai+460>>2]=0|He.__str114,Se[ai+468>>2]=0|He.__str152322,Se[ai+480>>2]=0|He.__str115,Se[ai+488>>2]=0|He.__str115,Se[ai+500>>2]=0|He.__str110280,Se[ai+508>>2]=0|He.__str110280,Se[ei+4>>2]=0|He.__str152,Se[ei+12>>2]=0|He.__str152,Se[ei+32>>2]=0|He.__str153,Se[ei+40>>2]=0|He.__str153,Se[ei+48>>2]=0|He.__str154,Se[ei+60>>2]=0|He.__str155,Se[ei+68>>2]=0|He.__str155,Se[ei+76>>2]=0|He.__str156,Se[ei+88>>2]=0|He.__str157,Se[ei+96>>2]=0|He.__str158,Se[ei+104>>2]=0|He.__str156,Se[ei+116>>2]=0|He.__str159,Se[ei+124>>2]=0|He.__str160,Se[ei+132>>2]=0|He.__str161,Se[ei+144>>2]=0|He.__str162,Se[ei+152>>2]=0|He.__str163,Se[ei+160>>2]=0|He.__str164,Se[ei+172>>2]=0|He.__str165,Se[ei+180>>2]=0|He.__str166,Se[ei+188>>2]=0|He.__str167,Se[si+4>>2]=bi,Se[ni+4>>2]=ki,oi=_([2,0,0,0,0],["i8*",0,0,0,0],we),Se[bi>>2]=oi+8|0,Se[bi+4>>2]=0|He.__ZTSSt9bad_alloc,Se[bi+8>>2]=li,Se[ki>>2]=oi+8|0,Se[ki+4>>2]=0|He.__ZTSSt20bad_array_new_length,Se[ki+8>>2]=bi,ui=16,ci=6,hi=18,di=6,wi=6,pe=[0,0,Jr,0,va,0,ya,0,ga,0,wa,0,Sa,0,pa,0,Ea,0,ma,0],Module.FUNCTION_TABLE=pe,Module.run=ee,Module.preRun&&Module.preRun(),0==Ke){ee()}Module.postRun&&Module.postRun(),Module.___cxa_demangle=G;var pi=v("__cxa_demangle","string",["string","string","number","number"]);return function(r){return pi(r,"",1,0)}}();
\`;

/***/ }),

/***/ 121:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Flamechart = void 0;

const utils_1 = __webpack_require__(844);

const math_1 = __webpack_require__(293);

class Flamechart {
  constructor(source) {
    this.source = source; // Bottom to top

    this.layers = [];
    this.totalWeight = 0;
    this.minFrameWidth = 1;
    const stack = [];

    const openFrame = (node, value) => {
      const parent = utils_1.lastOf(stack);
      const frame = {
        node,
        parent,
        children: [],
        start: value,
        end: value
      };

      if (parent) {
        parent.children.push(frame);
      }

      stack.push(frame);
    };

    this.minFrameWidth = Infinity;

    const closeFrame = (node, value) => {
      console.assert(stack.length > 0);
      const stackTop = stack.pop();
      stackTop.end = value;
      if (stackTop.end - stackTop.start === 0) return;
      const layerIndex = stack.length;

      while (this.layers.length <= layerIndex) this.layers.push([]);

      this.layers[layerIndex].push(stackTop);
      this.minFrameWidth = Math.min(this.minFrameWidth, stackTop.end - stackTop.start);
    };

    this.totalWeight = source.getTotalWeight();
    source.forEachCall(openFrame, closeFrame);
    if (!isFinite(this.minFrameWidth)) this.minFrameWidth = 1;
  }

  getTotalWeight() {
    return this.totalWeight;
  }

  getLayers() {
    return this.layers;
  }

  getColorBucketForFrame(frame) {
    return this.source.getColorBucketForFrame(frame);
  }

  getMinFrameWidth() {
    return this.minFrameWidth;
  }

  formatValue(v) {
    return this.source.formatValue(v);
  }

  getClampedViewportWidth(viewportWidth) {
    const maxWidth = this.getTotalWeight(); // In order to avoid floating point error, we cap the maximum zoom. In
    // particular, it's important that at the maximum zoom level, the total
    // trace size + a viewport width is not equal to the trace size due to
    // floating point rounding.
    //
    // For instance, if the profile's total weight is 2^60, and the viewport
    // size is 1, trying to move one viewport width right will result in no
    // change because 2^60 + 1 = 2^60 in floating point arithmetic. JavaScript
    // numbers are 64 bit floats, and therefore have 53 mantissa bits. You can
    // see this for yourself in the console. Try:
    //
    //   > Math.pow(2, 60) + 1 === Math.pow(2, 60)
    //   true
    //   > Math.pow(2, 53) + 1 === Math.pow(2, 53)
    //   true
    //   > Math.pow(2, 52) + 1 === Math.pow(2, 52)
    //   false
    //
    // We use 2^40 as a cap instead, since we want to be able to make small
    // adjustments within a viewport width.
    //
    // For reference, this will still allow you to zoom until 1 nanosecond fills
    // the screen in a profile with a duration of over 18 minutes.
    //
    //   > Math.pow(2, 40) / (60 * Math.pow(10, 9))
    //   18.325193796266667
    //

    const maxZoom = Math.pow(2, 40); // In addition to capping zoom to avoid floating point error, we further cap
    // zoom to avoid letting you zoom in so that the smallest element more than
    // fills the screen, since that probably isn't useful. The final zoom cap is
    // determined by the minimum zoom of either 2^40x zoom or the necessary zoom
    // for the smallest frame to fill the screen three times.

    const minWidth = math_1.clamp(3 * this.getMinFrameWidth(), maxWidth / maxZoom, maxWidth);
    return math_1.clamp(viewportWidth, minWidth, maxWidth);
  } // Given a desired config-space viewport rectangle, clamp the rectangle so
  // that it fits within the given flamechart. This prevents the viewport from
  // extending past the bounds of the flamechart or zooming in too far.


  getClampedConfigSpaceViewportRect({
    configSpaceViewportRect,
    renderInverted
  }) {
    const configSpaceSize = new math_1.Vec2(this.getTotalWeight(), this.getLayers().length);
    const width = this.getClampedViewportWidth(configSpaceViewportRect.size.x);
    const size = configSpaceViewportRect.size.withX(width);
    const origin = math_1.Vec2.clamp(configSpaceViewportRect.origin, new math_1.Vec2(0, renderInverted ? 0 : -1), math_1.Vec2.max(math_1.Vec2.zero, configSpaceSize.minus(size).plus(new math_1.Vec2(0, 1))));
    return new math_1.Rect(origin, configSpaceViewportRect.size.withX(width));
  }

}

exports.Flamechart = Flamechart;

/***/ }),

/***/ 293:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Rect = exports.AffineTransform = exports.Vec2 = exports.clamp = void 0;

function clamp(x, minVal, maxVal) {
  if (x < minVal) return minVal;
  if (x > maxVal) return maxVal;
  return x;
}

exports.clamp = clamp;

let Vec2 =
/** @class */
(() => {
  class Vec2 {
    constructor(x, y) {
      this.x = x;
      this.y = y;
    }

    withX(x) {
      return new Vec2(x, this.y);
    }

    withY(y) {
      return new Vec2(this.x, y);
    }

    plus(other) {
      return new Vec2(this.x + other.x, this.y + other.y);
    }

    minus(other) {
      return new Vec2(this.x - other.x, this.y - other.y);
    }

    times(scalar) {
      return new Vec2(this.x * scalar, this.y * scalar);
    }

    timesPointwise(other) {
      return new Vec2(this.x * other.x, this.y * other.y);
    }

    dividedByPointwise(other) {
      return new Vec2(this.x / other.x, this.y / other.y);
    }

    dot(other) {
      return this.x * other.x + this.y * other.y;
    }

    equals(other) {
      return this.x === other.x && this.y === other.y;
    }

    approxEquals(other, epsilon = 1e-9) {
      return Math.abs(this.x - other.x) < epsilon && Math.abs(this.y - other.y) < epsilon;
    }

    length2() {
      return this.dot(this);
    }

    length() {
      return Math.sqrt(this.length2());
    }

    abs() {
      return new Vec2(Math.abs(this.x), Math.abs(this.y));
    }

    static min(a, b) {
      return new Vec2(Math.min(a.x, b.x), Math.min(a.y, b.y));
    }

    static max(a, b) {
      return new Vec2(Math.max(a.x, b.x), Math.max(a.y, b.y));
    }

    static clamp(v, min, max) {
      return new Vec2(clamp(v.x, min.x, max.x), clamp(v.y, min.y, max.y));
    }

    flatten() {
      return [this.x, this.y];
    }

  }

  Vec2.zero = new Vec2(0, 0);
  Vec2.unit = new Vec2(1, 1);
  return Vec2;
})();

exports.Vec2 = Vec2;

class AffineTransform {
  constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0) {
    this.m00 = m00;
    this.m01 = m01;
    this.m02 = m02;
    this.m10 = m10;
    this.m11 = m11;
    this.m12 = m12;
  }

  withScale(s) {
    let {
      m00,
      m01,
      m02,
      m10,
      m11,
      m12
    } = this;
    m00 = s.x;
    m11 = s.y;
    return new AffineTransform(m00, m01, m02, m10, m11, m12);
  }

  static withScale(s) {
    return new AffineTransform().withScale(s);
  }

  scaledBy(s) {
    return AffineTransform.withScale(s).times(this);
  }

  getScale() {
    return new Vec2(this.m00, this.m11);
  }

  withTranslation(t) {
    let {
      m00,
      m01,
      m02,
      m10,
      m11,
      m12
    } = this;
    m02 = t.x;
    m12 = t.y;
    return new AffineTransform(m00, m01, m02, m10, m11, m12);
  }

  static withTranslation(t) {
    return new AffineTransform().withTranslation(t);
  }

  getTranslation() {
    return new Vec2(this.m02, this.m12);
  }

  translatedBy(t) {
    return AffineTransform.withTranslation(t).times(this);
  }

  static betweenRects(from, to) {
    return AffineTransform.withTranslation(from.origin.times(-1)).scaledBy(new Vec2(to.size.x / from.size.x, to.size.y / from.size.y)).translatedBy(to.origin);
  }

  times(other) {
    const m00 = this.m00 * other.m00 + this.m01 * other.m10;
    const m01 = this.m00 * other.m01 + this.m01 * other.m11;
    const m02 = this.m00 * other.m02 + this.m01 * other.m12 + this.m02;
    const m10 = this.m10 * other.m00 + this.m11 * other.m10;
    const m11 = this.m10 * other.m01 + this.m11 * other.m11;
    const m12 = this.m10 * other.m02 + this.m11 * other.m12 + this.m12;
    return new AffineTransform(m00, m01, m02, m10, m11, m12);
  }

  equals(other) {
    return this.m00 == other.m00 && this.m01 == other.m01 && this.m02 == other.m02 && this.m10 == other.m10 && this.m11 == other.m11 && this.m12 == other.m12;
  }

  approxEquals(other, epsilon = 1e-9) {
    return Math.abs(this.m00 - other.m00) < epsilon && Math.abs(this.m01 - other.m01) < epsilon && Math.abs(this.m02 - other.m02) < epsilon && Math.abs(this.m10 - other.m10) < epsilon && Math.abs(this.m11 - other.m11) < epsilon && Math.abs(this.m12 - other.m12) < epsilon;
  }

  timesScalar(s) {
    const {
      m00,
      m01,
      m02,
      m10,
      m11,
      m12
    } = this;
    return new AffineTransform(s * m00, s * m01, s * m02, s * m10, s * m11, s * m12);
  }

  det() {
    const {
      m00,
      m01,
      m02,
      m10,
      m11,
      m12
    } = this;
    const m20 = 0;
    const m21 = 0;
    const m22 = 1;
    return m00 * (m11 * m22 - m12 * m21) - m01 * (m10 * m22 - m12 * m20) + m02 * (m10 * m21 - m11 * m20);
  }

  adj() {
    const {
      m00,
      m01,
      m02,
      m10,
      m11,
      m12
    } = this;
    const m20 = 0;
    const m21 = 0;
    const m22 = 1; // Adjugate matrix (a) is the transpose of the
    // cofactor matrix (c).
    //
    // 00 01 02
    // 10 11 12
    // 20 21 22

    const a00 =
    /* c00 = */
    +(m11 * m22 - m12 * m21);
    const a01 =
    /* c10 = */
    -(m01 * m22 - m02 * m21);
    const a02 =
    /* c20 = */
    +(m01 * m12 - m02 * m11);
    const a10 =
    /* c01 = */
    -(m10 * m22 - m12 * m20);
    const a11 =
    /* c11 = */
    +(m00 * m22 - m02 * m20);
    const a12 =
    /* c21 = */
    -(m00 * m12 - m02 * m10);
    return new AffineTransform(a00, a01, a02, a10, a11, a12);
  }

  inverted() {
    const det = this.det();
    if (det === 0) return null;
    const adj = this.adj();
    return adj.timesScalar(1 / det);
  }

  transformVector(v) {
    return new Vec2(v.x * this.m00 + v.y * this.m01, v.x * this.m10 + v.y * this.m11);
  }

  inverseTransformVector(v) {
    const inv = this.inverted();
    if (!inv) return null;
    return inv.transformVector(v);
  }

  transformPosition(v) {
    return new Vec2(v.x * this.m00 + v.y * this.m01 + this.m02, v.x * this.m10 + v.y * this.m11 + this.m12);
  }

  inverseTransformPosition(v) {
    const inv = this.inverted();
    if (!inv) return null;
    return inv.transformPosition(v);
  }

  transformRect(r) {
    const size = this.transformVector(r.size);
    const origin = this.transformPosition(r.origin);

    if (size.x < 0 && size.y < 0) {
      return new Rect(origin.plus(size), size.abs());
    } else if (size.x < 0) {
      return new Rect(origin.withX(origin.x + size.x), size.abs());
    } else if (size.y < 0) {
      return new Rect(origin.withY(origin.y + size.y), size.abs());
    }

    return new Rect(origin, size);
  }

  inverseTransformRect(r) {
    const inv = this.inverted();
    if (!inv) return null;
    return inv.transformRect(r);
  }

  flatten() {
    // Flatten into GLSL format
    // prettier-ignore
    return [this.m00, this.m10, 0, this.m01, this.m11, 0, this.m02, this.m12, 1];
  }

}

exports.AffineTransform = AffineTransform;

let Rect =
/** @class */
(() => {
  class Rect {
    constructor(origin, size) {
      this.origin = origin;
      this.size = size;
    }

    isEmpty() {
      return this.width() == 0 || this.height() == 0;
    }

    width() {
      return this.size.x;
    }

    height() {
      return this.size.y;
    }

    left() {
      return this.origin.x;
    }

    right() {
      return this.left() + this.width();
    }

    top() {
      return this.origin.y;
    }

    bottom() {
      return this.top() + this.height();
    }

    topLeft() {
      return this.origin;
    }

    topRight() {
      return this.origin.plus(new Vec2(this.width(), 0));
    }

    bottomRight() {
      return this.origin.plus(this.size);
    }

    bottomLeft() {
      return this.origin.plus(new Vec2(0, this.height()));
    }

    withOrigin(origin) {
      return new Rect(origin, this.size);
    }

    withSize(size) {
      return new Rect(this.origin, size);
    }

    closestPointTo(p) {
      return new Vec2(clamp(p.x, this.left(), this.right()), clamp(p.y, this.top(), this.bottom()));
    }

    distanceFrom(p) {
      return p.minus(this.closestPointTo(p)).length();
    }

    contains(p) {
      return this.distanceFrom(p) === 0;
    }

    hasIntersectionWith(other) {
      const top = Math.max(this.top(), other.top());
      const bottom = Math.max(top, Math.min(this.bottom(), other.bottom()));
      if (bottom - top === 0) return false;
      const left = Math.max(this.left(), other.left());
      const right = Math.max(left, Math.min(this.right(), other.right()));
      if (right - left === 0) return false;
      return true;
    }

    intersectWith(other) {
      const topLeft = Vec2.max(this.topLeft(), other.topLeft());
      const bottomRight = Vec2.max(topLeft, Vec2.min(this.bottomRight(), other.bottomRight()));
      return new Rect(topLeft, bottomRight.minus(topLeft));
    }

    equals(other) {
      return this.origin.equals(other.origin) && this.size.equals(other.size);
    }

    approxEquals(other) {
      return this.origin.approxEquals(other.origin) && this.size.approxEquals(other.size);
    }

    area() {
      return this.size.x * this.size.y;
    }

  }

  Rect.empty = new Rect(Vec2.zero, Vec2.zero);
  Rect.unit = new Rect(Vec2.zero, Vec2.unit);
  Rect.NDC = new Rect(new Vec2(-1, -1), new Vec2(2, 2));
  return Rect;
})();

exports.Rect = Rect;

/***/ }),

/***/ 211:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function () {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);

  __setModuleDefault(result, mod);

  return result;
};

var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CallTreeProfileBuilder = exports.StackListProfileBuilder = exports.Profile = exports.CallTreeNode = exports.Frame = exports.HasWeights = void 0;

const utils_1 = __webpack_require__(844);

const value_formatters_1 = __webpack_require__(218);

const demangleCppModule = Promise.resolve().then(() => __importStar(__webpack_require__(765))); // Force eager loading of the module

demangleCppModule.then(() => {});

class HasWeights {
  constructor() {
    this.selfWeight = 0;
    this.totalWeight = 0;
  }

  getSelfWeight() {
    return this.selfWeight;
  }

  getTotalWeight() {
    return this.totalWeight;
  }

  addToTotalWeight(delta) {
    this.totalWeight += delta;
  }

  addToSelfWeight(delta) {
    this.selfWeight += delta;
  }

  overwriteWeightWith(other) {
    this.selfWeight = other.selfWeight;
    this.totalWeight = other.totalWeight;
  }

}

exports.HasWeights = HasWeights;

let Frame =
/** @class */
(() => {
  class Frame extends HasWeights {
    constructor(info) {
      super();
      this.key = info.key;
      this.name = info.name;
      this.file = info.file;
      this.line = info.line;
      this.col = info.col;
    }

    static getOrInsert(set, info) {
      return set.getOrInsert(new Frame(info));
    }

  }

  Frame.root = new Frame({
    key: '(speedscope root)',
    name: '(speedscope root)'
  });
  return Frame;
})();

exports.Frame = Frame;

class CallTreeNode extends HasWeights {
  constructor(frame, parent) {
    super();
    this.frame = frame;
    this.parent = parent;
    this.children = []; // If a node is "frozen", it means it should no longer be mutated.

    this.frozen = false;
  }

  isRoot() {
    return this.frame === Frame.root;
  }

  isFrozen() {
    return this.frozen;
  }

  freeze() {
    this.frozen = true;
  }

}

exports.CallTreeNode = CallTreeNode;

class Profile {
  constructor(totalWeight = 0) {
    this.name = '';
    this.frames = new utils_1.KeyedSet(); // Profiles store two call-trees.
    //
    // The "append order" call tree is the one in which nodes are ordered in
    // whatever order they were appended to their parent.
    //
    // The "grouped" call tree is one in which each node has at most one child per
    // frame. Nodes are ordered in decreasing order of weight

    this.appendOrderCalltreeRoot = new CallTreeNode(Frame.root, null);
    this.groupedCalltreeRoot = new CallTreeNode(Frame.root, null); // List of references to CallTreeNodes at the top of the
    // stack at the time of the sample.

    this.samples = [];
    this.weights = [];
    this.valueFormatter = new value_formatters_1.RawValueFormatter();
    this.totalNonIdleWeight = null;
    this.totalWeight = totalWeight;
  }

  getAppendOrderCalltreeRoot() {
    return this.appendOrderCalltreeRoot;
  }

  getGroupedCalltreeRoot() {
    return this.groupedCalltreeRoot;
  }

  formatValue(v) {
    return this.valueFormatter.format(v);
  }

  setValueFormatter(f) {
    this.valueFormatter = f;
  }

  getWeightUnit() {
    return this.valueFormatter.unit;
  }

  getName() {
    return this.name;
  }

  setName(name) {
    this.name = name;
  }

  getTotalWeight() {
    return this.totalWeight;
  }

  getTotalNonIdleWeight() {
    if (this.totalNonIdleWeight === null) {
      this.totalNonIdleWeight = this.groupedCalltreeRoot.children.reduce((n, c) => n + c.getTotalWeight(), 0);
    }

    return this.totalNonIdleWeight;
  } // This is private because it should only be called in the ProfileBuilder
  // classes. Once a Profile instance has been constructed, it should be treated
  // as immutable.


  sortGroupedCallTree() {
    function visit(node) {
      node.children.sort((a, b) => -(a.getTotalWeight() - b.getTotalWeight()));
      node.children.forEach(visit);
    }

    visit(this.groupedCalltreeRoot);
  }

  forEachCallGrouped(openFrame, closeFrame) {
    function visit(node, start) {
      if (node.frame !== Frame.root) {
        openFrame(node, start);
      }

      let childTime = 0;
      node.children.forEach(function (child) {
        visit(child, start + childTime);
        childTime += child.getTotalWeight();
      });

      if (node.frame !== Frame.root) {
        closeFrame(node, start + node.getTotalWeight());
      }
    }

    visit(this.groupedCalltreeRoot, 0);
  }

  forEachCall(openFrame, closeFrame) {
    let prevStack = [];
    let value = 0;
    let sampleIndex = 0;

    for (let stackTop of this.samples) {
      // Find lowest common ancestor of the current stack and the previous one
      let lca = null; // This is O(n^2), but n should be relatively small here (stack height),
      // so hopefully this isn't much of a problem

      for (lca = stackTop; lca && lca.frame != Frame.root && prevStack.indexOf(lca) === -1; lca = lca.parent) {} // Close frames that are no longer open


      while (prevStack.length > 0 && utils_1.lastOf(prevStack) != lca) {
        const node = prevStack.pop();
        closeFrame(node, value);
      } // Open frames that are now becoming open


      const toOpen = [];

      for (let node = stackTop; node && node.frame != Frame.root && node != lca; node = node.parent) {
        toOpen.push(node);
      }

      toOpen.reverse();

      for (let node of toOpen) {
        openFrame(node, value);
      }

      prevStack = prevStack.concat(toOpen);
      value += this.weights[sampleIndex++];
    } // Close frames that are open at the end of the trace


    for (let i = prevStack.length - 1; i >= 0; i--) {
      closeFrame(prevStack[i], value);
    }
  }

  forEachFrame(fn) {
    this.frames.forEach(fn);
  }

  getProfileWithRecursionFlattened() {
    const builder = new CallTreeProfileBuilder();
    const stack = [];
    const framesInStack = new Set();

    function openFrame(node, value) {
      if (framesInStack.has(node.frame)) {
        stack.push(null);
      } else {
        framesInStack.add(node.frame);
        stack.push(node);
        builder.enterFrame(node.frame, value);
      }
    }

    function closeFrame(node, value) {
      const stackTop = stack.pop();

      if (stackTop) {
        framesInStack.delete(stackTop.frame);
        builder.leaveFrame(stackTop.frame, value);
      }
    }

    this.forEachCall(openFrame, closeFrame);
    const flattenedProfile = builder.build();
    flattenedProfile.name = this.name;
    flattenedProfile.valueFormatter = this.valueFormatter; // When constructing a profile with recursion flattened,
    // counter-intuitive things can happen to "self time" measurements
    // for functions.
    // For example, given the following list of stacks w/ weights:
    //
    // a 1
    // a;b;a 1
    // a;b;a;b;a 1
    // a;b;a 1
    //
    // The resulting profile with recursion flattened out will look like this:
    //
    // a 1
    // a;b 3
    //
    // Which is useful to view, but it's counter-intuitive to move self-time
    // for frames around, since analyzing the self-time of functions is an important
    // thing to be able to do accurately, and we don't want this to change when recursion
    // is flattened. To work around that, we'll just copy the weights directly from the
    // un-flattened profile.

    this.forEachFrame(f => {
      flattenedProfile.frames.getOrInsert(f).overwriteWeightWith(f);
    });
    return flattenedProfile;
  }

  getInvertedProfileForCallersOf(focalFrameInfo) {
    const focalFrame = Frame.getOrInsert(this.frames, focalFrameInfo);
    const builder = new StackListProfileBuilder(); // TODO(jlfwong): Could construct this at profile
    // construction time rather than on demand.

    const nodes = [];

    function visit(node) {
      if (node.frame === focalFrame) {
        nodes.push(node);
      } else {
        for (let child of node.children) {
          visit(child);
        }
      }
    }

    visit(this.appendOrderCalltreeRoot);

    for (let node of nodes) {
      const stack = [];

      for (let n = node; n != null && n.frame !== Frame.root; n = n.parent) {
        stack.push(n.frame);
      }

      builder.appendSampleWithWeight(stack, node.getTotalWeight());
    }

    const ret = builder.build();
    ret.name = this.name;
    ret.valueFormatter = this.valueFormatter;
    return ret;
  }

  getProfileForCalleesOf(focalFrameInfo) {
    const focalFrame = Frame.getOrInsert(this.frames, focalFrameInfo);
    const builder = new StackListProfileBuilder();

    function recordSubtree(focalFrameNode) {
      const stack = [];

      function visit(node) {
        stack.push(node.frame);
        builder.appendSampleWithWeight(stack, node.getSelfWeight());

        for (let child of node.children) {
          visit(child);
        }

        stack.pop();
      }

      visit(focalFrameNode);
    }

    function findCalls(node) {
      if (node.frame === focalFrame) {
        recordSubtree(node);
      } else {
        for (let child of node.children) {
          findCalls(child);
        }
      }
    }

    findCalls(this.appendOrderCalltreeRoot);
    const ret = builder.build();
    ret.name = this.name;
    ret.valueFormatter = this.valueFormatter;
    return ret;
  } // Demangle symbols for readability


  demangle() {
    return __awaiter(this, void 0, void 0, function* () {
      let demangleCpp = null;

      for (let frame of this.frames) {
        // This function converts a mangled C++ name such as "__ZNK7Support6ColorFeqERKS0_"
        // into a human-readable symbol (in this case "Support::ColorF::==(Support::ColorF&)")
        if (frame.name.startsWith('__Z')) {
          if (!demangleCpp) {
            demangleCpp = (yield demangleCppModule).demangleCpp;
          }

          frame.name = demangleCpp(frame.name);
        }
      }
    });
  }

  remapNames(callback) {
    for (let frame of this.frames) {
      frame.name = callback(frame.name);
    }
  }

}

exports.Profile = Profile;

class StackListProfileBuilder extends Profile {
  constructor() {
    super(...arguments);
    this.pendingSample = null;
  }

  _appendSample(stack, weight, useAppendOrder) {
    if (isNaN(weight)) throw new Error('invalid weight');
    let node = useAppendOrder ? this.appendOrderCalltreeRoot : this.groupedCalltreeRoot;
    let framesInStack = new Set();

    for (let frameInfo of stack) {
      const frame = Frame.getOrInsert(this.frames, frameInfo);
      const last = useAppendOrder ? utils_1.lastOf(node.children) : node.children.find(c => c.frame === frame);

      if (last && !last.isFrozen() && last.frame == frame) {
        node = last;
      } else {
        const parent = node;
        node = new CallTreeNode(frame, node);
        parent.children.push(node);
      }

      node.addToTotalWeight(weight); // It's possible for the same frame to occur multiple
      // times in the same call stack due to either direct
      // or indirect recursion. We want to avoid counting that
      // frame multiple times for a single sample, we so just
      // track all of the unique frames that participated in
      // this call stack, then add to their weight at the end.

      framesInStack.add(node.frame);
    }

    node.addToSelfWeight(weight);

    if (useAppendOrder) {
      for (let child of node.children) {
        child.freeze();
      }
    }

    if (useAppendOrder) {
      node.frame.addToSelfWeight(weight);

      for (let frame of framesInStack) {
        frame.addToTotalWeight(weight);
      }

      if (node === utils_1.lastOf(this.samples)) {
        this.weights[this.weights.length - 1] += weight;
      } else {
        this.samples.push(node);
        this.weights.push(weight);
      }
    }
  }

  appendSampleWithWeight(stack, weight) {
    if (weight === 0) {
      // Samples with zero weight have no effect, so let's ignore them
      return;
    }

    if (weight < 0) {
      throw new Error('Samples must have positive weights');
    }

    this._appendSample(stack, weight, true);

    this._appendSample(stack, weight, false);
  }

  appendSampleWithTimestamp(stack, timestamp) {
    if (this.pendingSample) {
      if (timestamp < this.pendingSample.centralTimestamp) {
        throw new Error('Timestamps received out of order');
      }

      const endTimestamp = (timestamp + this.pendingSample.centralTimestamp) / 2;
      this.appendSampleWithWeight(this.pendingSample.stack, endTimestamp - this.pendingSample.startTimestamp);
      this.pendingSample = {
        stack,
        startTimestamp: endTimestamp,
        centralTimestamp: timestamp
      };
    } else {
      this.pendingSample = {
        stack,
        startTimestamp: timestamp,
        centralTimestamp: timestamp
      };
    }
  }

  build() {
    if (this.pendingSample) {
      if (this.samples.length > 0) {
        this.appendSampleWithWeight(this.pendingSample.stack, this.pendingSample.centralTimestamp - this.pendingSample.startTimestamp);
      } else {
        // There is only a single sample. In this case, units will be meaningless,
        // so we'll append with a weight of 1 and also clear any value formatter
        this.appendSampleWithWeight(this.pendingSample.stack, 1);
        this.setValueFormatter(new value_formatters_1.RawValueFormatter());
      }
    }

    this.totalWeight = Math.max(this.totalWeight, this.weights.reduce((a, b) => a + b, 0));
    this.sortGroupedCallTree();
    return this;
  }

}

exports.StackListProfileBuilder = StackListProfileBuilder; // As an alternative API for importing profiles more efficiently, provide a
// way to open & close frames directly without needing to construct tons of
// arrays as intermediaries.

class CallTreeProfileBuilder extends Profile {
  constructor() {
    super(...arguments);
    this.appendOrderStack = [this.appendOrderCalltreeRoot];
    this.groupedOrderStack = [this.groupedCalltreeRoot];
    this.framesInStack = new Map();
    this.stack = [];
    this.lastValue = 0;
  }

  addWeightsToFrames(value) {
    const delta = value - this.lastValue;

    for (let frame of this.framesInStack.keys()) {
      frame.addToTotalWeight(delta);
    }

    const stackTop = utils_1.lastOf(this.stack);

    if (stackTop) {
      stackTop.addToSelfWeight(delta);
    }
  }

  addWeightsToNodes(value, stack) {
    const delta = value - this.lastValue;

    for (let node of stack) {
      node.addToTotalWeight(delta);
    }

    const stackTop = utils_1.lastOf(stack);

    if (stackTop) {
      stackTop.addToSelfWeight(delta);
    }
  }

  _enterFrame(frame, value, useAppendOrder) {
    let stack = useAppendOrder ? this.appendOrderStack : this.groupedOrderStack;
    this.addWeightsToNodes(value, stack);
    let prevTop = utils_1.lastOf(stack);

    if (prevTop) {
      if (useAppendOrder) {
        const delta = value - this.lastValue;

        if (delta > 0) {
          this.samples.push(prevTop);
          this.weights.push(value - this.lastValue);
        } else if (delta < 0) {
          throw new Error(\`Samples must be provided in increasing order of cumulative value. Last sample was \${this.lastValue}, this sample was \${value}\`);
        }
      }

      const last = useAppendOrder ? utils_1.lastOf(prevTop.children) : prevTop.children.find(c => c.frame === frame);
      let node;

      if (last && !last.isFrozen() && last.frame == frame) {
        node = last;
      } else {
        node = new CallTreeNode(frame, prevTop);
        prevTop.children.push(node);
      }

      stack.push(node);
    }
  }

  enterFrame(frameInfo, value) {
    const frame = Frame.getOrInsert(this.frames, frameInfo);
    this.addWeightsToFrames(value);

    this._enterFrame(frame, value, true);

    this._enterFrame(frame, value, false);

    this.stack.push(frame);
    const frameCount = this.framesInStack.get(frame) || 0;
    this.framesInStack.set(frame, frameCount + 1);
    this.lastValue = value;
  }

  _leaveFrame(frame, value, useAppendOrder) {
    let stack = useAppendOrder ? this.appendOrderStack : this.groupedOrderStack;
    this.addWeightsToNodes(value, stack);

    if (useAppendOrder) {
      const leavingStackTop = this.appendOrderStack.pop();

      if (leavingStackTop == null) {
        throw new Error(\`Trying to leave \${frame.key} when stack is empty\`);
      }

      if (this.lastValue == null) {
        throw new Error(\`Trying to leave a \${frame.key} before any have been entered\`);
      }

      leavingStackTop.freeze();

      if (leavingStackTop.frame.key !== frame.key) {
        throw new Error(\`Tried to leave frame "\${frame.name}" while frame "\${leavingStackTop.frame.name}" was at the top at \${value}\`);
      }

      const delta = value - this.lastValue;

      if (delta > 0) {
        this.samples.push(leavingStackTop);
        this.weights.push(value - this.lastValue);
      } else if (delta < 0) {
        throw new Error(\`Samples must be provided in increasing order of cumulative value. Last sample was \${this.lastValue}, this sample was \${value}\`);
      }
    } else {
      this.groupedOrderStack.pop();
    }
  }

  leaveFrame(frameInfo, value) {
    const frame = Frame.getOrInsert(this.frames, frameInfo);
    this.addWeightsToFrames(value);

    this._leaveFrame(frame, value, true);

    this._leaveFrame(frame, value, false);

    this.stack.pop();
    const frameCount = this.framesInStack.get(frame);
    if (frameCount == null) return;

    if (frameCount === 1) {
      this.framesInStack.delete(frame);
    } else {
      this.framesInStack.set(frame, frameCount - 1);
    }

    this.lastValue = value;
    this.totalWeight = Math.max(this.totalWeight, this.lastValue);
  }

  build() {
    // Each stack is expected to contain a single node which we initialize to be
    // the root node.
    if (this.appendOrderStack.length > 1 || this.groupedOrderStack.length > 1) {
      throw new Error('Tried to complete profile construction with a non-empty stack');
    }

    this.sortGroupedCallTree();
    return this;
  }

}

exports.CallTreeProfileBuilder = CallTreeProfileBuilder;

/***/ }),

/***/ 844:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.decodeBase64 = exports.lazyStatic = exports.memoizeByReference = exports.memoizeByShallowEquality = exports.objectsHaveShallowEquality = exports.noop = exports.binarySearch = exports.triangle = exports.fract = exports.formatPercent = exports.zeroPad = exports.itReduce = exports.itForEach = exports.itMap = exports.KeyedSet = exports.getOrThrow = exports.getOrElse = exports.getOrInsert = exports.sortBy = exports.lastOf = void 0;

function lastOf(ts) {
  return ts[ts.length - 1] || null;
}

exports.lastOf = lastOf;

function sortBy(ts, key) {
  function comparator(a, b) {
    const keyA = key(a);
    const keyB = key(b);
    return keyA < keyB ? -1 : keyA > keyB ? 1 : 0;
  }

  ts.sort(comparator);
}

exports.sortBy = sortBy;

function getOrInsert(map, k, fallback) {
  if (!map.has(k)) map.set(k, fallback(k));
  return map.get(k);
}

exports.getOrInsert = getOrInsert;

function getOrElse(map, k, fallback) {
  if (!map.has(k)) return fallback(k);
  return map.get(k);
}

exports.getOrElse = getOrElse;

function getOrThrow(map, k) {
  if (!map.has(k)) {
    throw new Error(\`Expected key \${k}\`);
  }

  return map.get(k);
}

exports.getOrThrow = getOrThrow;

class KeyedSet {
  constructor() {
    this.map = new Map();
  }

  getOrInsert(t) {
    const key = t.key;
    const existing = this.map.get(key);
    if (existing) return existing;
    this.map.set(key, t);
    return t;
  }

  forEach(fn) {
    this.map.forEach(fn);
  }

  [Symbol.iterator]() {
    return this.map.values();
  }

}

exports.KeyedSet = KeyedSet;

function* itMap(it, f) {
  for (let t of it) {
    yield f(t);
  }
}

exports.itMap = itMap;

function itForEach(it, f) {
  for (let t of it) {
    f(t);
  }
}

exports.itForEach = itForEach;

function itReduce(it, f, init) {
  let accum = init;

  for (let t of it) {
    accum = f(accum, t);
  }

  return accum;
}

exports.itReduce = itReduce;

function zeroPad(s, width) {
  return new Array(Math.max(width - s.length, 0) + 1).join('0') + s;
}

exports.zeroPad = zeroPad;

function formatPercent(percent) {
  let formattedPercent = \`\${percent.toFixed(0)}%\`;
  if (percent === 100) formattedPercent = '100%';else if (percent > 99) formattedPercent = '>99%';else if (percent < 0.01) formattedPercent = '<0.01%';else if (percent < 1) formattedPercent = \`\${percent.toFixed(2)}%\`;else if (percent < 10) formattedPercent = \`\${percent.toFixed(1)}%\`;
  return formattedPercent;
}

exports.formatPercent = formatPercent;

function fract(x) {
  return x - Math.floor(x);
}

exports.fract = fract;

function triangle(x) {
  return 2.0 * Math.abs(fract(x) - 0.5) - 1.0;
}

exports.triangle = triangle;

function binarySearch(lo, hi, f, target, targetRangeSize = 1) {
  console.assert(!isNaN(targetRangeSize) && !isNaN(target));

  while (true) {
    if (hi - lo <= targetRangeSize) return [lo, hi];
    const mid = (hi + lo) / 2;
    const val = f(mid);
    if (val < target) lo = mid;else hi = mid;
  }
}

exports.binarySearch = binarySearch;

function noop(...args) {}

exports.noop = noop;

function objectsHaveShallowEquality(a, b) {
  for (let key in a) {
    if (a[key] !== b[key]) return false;
  }

  for (let key in b) {
    if (a[key] !== b[key]) return false;
  }

  return true;
}

exports.objectsHaveShallowEquality = objectsHaveShallowEquality;

function memoizeByShallowEquality(cb) {
  let last = null;
  return args => {
    let result;

    if (last == null) {
      result = cb(args);
      last = {
        args,
        result
      };
      return result;
    } else if (objectsHaveShallowEquality(last.args, args)) {
      return last.result;
    } else {
      last.args = args;
      last.result = cb(args);
      return last.result;
    }
  };
}

exports.memoizeByShallowEquality = memoizeByShallowEquality;

function memoizeByReference(cb) {
  let last = null;
  return args => {
    let result;

    if (last == null) {
      result = cb(args);
      last = {
        args,
        result
      };
      return result;
    } else if (last.args === args) {
      return last.result;
    } else {
      last.args = args;
      last.result = cb(args);
      return last.result;
    }
  };
}

exports.memoizeByReference = memoizeByReference;

function lazyStatic(cb) {
  let last = null;
  return () => {
    if (last == null) {
      last = {
        result: cb()
      };
    }

    return last.result;
  };
}

exports.lazyStatic = lazyStatic;
const base64lookupTable = lazyStatic(() => {
  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  const ret = new Map();

  for (let i = 0; i < alphabet.length; i++) {
    ret.set(alphabet.charAt(i), i);
  }

  ret.set('=', -1);
  return ret;
}); // NOTE: There are probably simpler solutions to this problem, but I have this written already, so
// until we run into problems with this, let's just use this.
//
// See: https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem#The_Unicode_Problem

function decodeBase64(encoded) {
  // Reference: https://www.rfc-editor.org/rfc/rfc4648.txt
  const lookupTable = base64lookupTable(); // 3 byte groups are represented as sequneces of 4 characters.
  //
  // "The encoding process represents 24-bit groups of input bits as output
  //  strings of 4 encoded characters."
  //
  // "Special processing is performed if fewer than 24 bits are available
  //  at the end of the data being encoded.  A full encoding quantum is
  //  always completed at the end of a quantity.  When fewer than 24 input
  //  bits are available in an input group bits with value zero are added
  //  (on the right) to form an integral number of 6-bit groups."

  if (encoded.length % 4 !== 0) {
    throw new Error(\`Invalid length for base64 encoded string. Expected length % 4 = 0, got length = \${encoded.length}\`);
  }

  const quartetCount = encoded.length / 4;
  let byteCount; // Special processing is performed if fewer than 24 bits are available
  // at the end of the data being encoded.  A full encoding quantum is
  // always completed at the end of a quantity.  When fewer than 24 input
  // bits are available in an input group, bits with value zero are added
  // (on the right) to form an integral number of 6-bit groups.  Padding
  // at the end of the data is performed using the '=' character.  Since
  // all base 64 input is an integral number of octets, only the following
  // cases can arise:
  //
  // (1) The final quantum of encoding input is an integral multiple of 24
  //     bits; here, the final unit of encoded output will be an integral
  //     multiple of 4 characters with no "=" padding.
  //
  // (2) The final quantum of encoding input is exactly 8 bits; here, the
  //     final unit of encoded output will be two characters followed by
  //     two "=" padding characters.
  //
  // (3) The final quantum of encoding input is exactly 16 bits; here, the
  //     final unit of encoded output will be three characters followed by
  //     one "=" padding character.

  if (encoded.length >= 4) {
    if (encoded.charAt(encoded.length - 1) === '=') {
      if (encoded.charAt(encoded.length - 2) === '=') {
        // Case (2)
        byteCount = quartetCount * 3 - 2;
      } else {
        // Case (3)
        byteCount = quartetCount * 3 - 1;
      }
    } else {
      // Case (1)
      byteCount = quartetCount * 3;
    }
  } else {
    // Case (1)
    byteCount = quartetCount * 3;
  }

  const bytes = new Uint8Array(byteCount);
  let offset = 0;

  for (let i = 0; i < quartetCount; i++) {
    const enc1 = encoded.charAt(i * 4 + 0);
    const enc2 = encoded.charAt(i * 4 + 1);
    const enc3 = encoded.charAt(i * 4 + 2);
    const enc4 = encoded.charAt(i * 4 + 3);
    const sextet1 = lookupTable.get(enc1);
    const sextet2 = lookupTable.get(enc2);
    const sextet3 = lookupTable.get(enc3);
    const sextet4 = lookupTable.get(enc4);

    if (sextet1 == null || sextet2 == null || sextet3 == null || sextet4 == null) {
      throw new Error(\`Invalid quartet at indices \${i * 4} .. \${i * 4 + 3}: \${encoded.substring(i * 4, i * 4 + 3)}\`);
    }

    bytes[offset++] = sextet1 << 2 | sextet2 >> 4;

    if (enc3 !== '=') {
      bytes[offset++] = (sextet2 & 15) << 4 | sextet3 >> 2;
    }

    if (enc4 !== '=') {
      bytes[offset++] = (sextet3 & 7) << 6 | sextet4;
    }
  }

  if (offset !== byteCount) {
    throw new Error(\`Expected to decode \${byteCount} bytes, but only decoded \${offset})\`);
  }

  return bytes;
}

exports.decodeBase64 = decodeBase64;

/***/ }),

/***/ 218:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ByteFormatter = exports.TimeFormatter = exports.RawValueFormatter = void 0;

const utils_1 = __webpack_require__(844);

class RawValueFormatter {
  constructor() {
    this.unit = 'none';
  }

  format(v) {
    return v.toLocaleString();
  }

}

exports.RawValueFormatter = RawValueFormatter;

class TimeFormatter {
  constructor(unit) {
    this.unit = unit;
    if (unit === 'nanoseconds') this.multiplier = 1e-9;else if (unit === 'microseconds') this.multiplier = 1e-6;else if (unit === 'milliseconds') this.multiplier = 1e-3;else this.multiplier = 1;
  }

  formatUnsigned(v) {
    const s = v * this.multiplier;

    if (s / 60 >= 1) {
      const minutes = Math.floor(s / 60);
      const seconds = Math.floor(s - minutes * 60).toString();
      return \`\${minutes}:\${utils_1.zeroPad(seconds, 2)}\`;
    }

    if (s / 1 >= 1) return \`\${s.toFixed(2)}s\`;
    if (s / 1e-3 >= 1) return \`\${(s / 1e-3).toFixed(2)}ms\`;
    if (s / 1e-6 >= 1) return \`\${(s / 1e-6).toFixed(2)}\xB5s\`;else return \`\${(s / 1e-9).toFixed(2)}ns\`;
  }

  format(v) {
    return \`\${v < 0 ? '-' : ''}\${this.formatUnsigned(Math.abs(v))}\`;
  }

}

exports.TimeFormatter = TimeFormatter;

class ByteFormatter {
  constructor() {
    this.unit = 'bytes';
  }

  format(v) {
    if (v < 1024) return \`\${v.toFixed(0)} B\`;
    v /= 1024;
    if (v < 1024) return \`\${v.toFixed(2)} KB\`;
    v /= 1024;
    if (v < 1024) return \`\${v.toFixed(2)} MB\`;
    v /= 1024;
    return \`\${v.toFixed(2)} GB\`;
  }

}

exports.ByteFormatter = ByteFormatter;

/***/ }),

/***/ 41:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function () {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __exportStar = this && this.__exportStar || function (m, exports) {
  for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

__exportStar(__webpack_require__(496), exports);

__exportStar(__webpack_require__(121), exports);

/***/ }),

/***/ 715:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  'use strict'; // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

  /* istanbul ignore next */

  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(356)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this, function ErrorStackParser(StackFrame) {
  'use strict';

  var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;
  var CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;
  var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;
  return {
    /**
     * Given an Error object, extract the most information from it.
     *
     * @param {Error} error object
     * @return {Array} of StackFrames
     */
    parse: function ErrorStackParser$$parse(error) {
      if (typeof error.stacktrace !== 'undefined' || typeof error['opera#sourceloc'] !== 'undefined') {
        return this.parseOpera(error);
      } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {
        return this.parseV8OrIE(error);
      } else if (error.stack) {
        return this.parseFFOrSafari(error);
      } else {
        throw new Error('Cannot parse given Error object');
      }
    },
    // Separate line and column numbers from a string of the form: (URI:Line:Column)
    extractLocation: function ErrorStackParser$$extractLocation(urlLike) {
      // Fail-fast but return locations like "(native)"
      if (urlLike.indexOf(':') === -1) {
        return [urlLike];
      }

      var regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;
      var parts = regExp.exec(urlLike.replace(/[()]/g, ''));
      return [parts[1], parts[2] || undefined, parts[3] || undefined];
    },
    parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {
      var filtered = error.stack.split('\\n').filter(function (line) {
        return !!line.match(CHROME_IE_STACK_REGEXP);
      }, this);
      return filtered.map(function (line) {
        if (line.indexOf('(eval ') > -1) {
          // Throw away eval information until we implement stacktrace.js/stackframe#8
          line = line.replace(/eval code/g, 'eval').replace(/(\\(eval at [^()]*)|(\\),.*$)/g, '');
        }

        var sanitizedLine = line.replace(/^\\s+/, '').replace(/\\(eval code/g, '('); // capture and preseve the parenthesized location "(/foo/my bar.js:12:87)" in
        // case it has spaces in it, as the string is split on \\s+ later on

        var location = sanitizedLine.match(/ (\\((.+):(\\d+):(\\d+)\\)$)/); // remove the parenthesized location from the line, if it was matched

        sanitizedLine = location ? sanitizedLine.replace(location[0], '') : sanitizedLine;
        var tokens = sanitizedLine.split(/\\s+/).slice(1); // if a location was matched, pass it to extractLocation() otherwise pop the last token

        var locationParts = this.extractLocation(location ? location[1] : tokens.pop());
        var functionName = tokens.join(' ') || undefined;
        var fileName = ['eval', '<anonymous>'].indexOf(locationParts[0]) > -1 ? undefined : locationParts[0];
        return new StackFrame({
          functionName: functionName,
          fileName: fileName,
          lineNumber: locationParts[1],
          columnNumber: locationParts[2],
          source: line
        });
      }, this);
    },
    parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {
      var filtered = error.stack.split('\\n').filter(function (line) {
        return !line.match(SAFARI_NATIVE_CODE_REGEXP);
      }, this);
      return filtered.map(function (line) {
        // Throw away eval information until we implement stacktrace.js/stackframe#8
        if (line.indexOf(' > eval') > -1) {
          line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, ':$1');
        }

        if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {
          // Safari eval frames only have function names and nothing else
          return new StackFrame({
            functionName: line
          });
        } else {
          var functionNameRegex = /((.*".+"[^@]*)?[^@]*)(?:@)/;
          var matches = line.match(functionNameRegex);
          var functionName = matches && matches[1] ? matches[1] : undefined;
          var locationParts = this.extractLocation(line.replace(functionNameRegex, ''));
          return new StackFrame({
            functionName: functionName,
            fileName: locationParts[0],
            lineNumber: locationParts[1],
            columnNumber: locationParts[2],
            source: line
          });
        }
      }, this);
    },
    parseOpera: function ErrorStackParser$$parseOpera(e) {
      if (!e.stacktrace || e.message.indexOf('\\n') > -1 && e.message.split('\\n').length > e.stacktrace.split('\\n').length) {
        return this.parseOpera9(e);
      } else if (!e.stack) {
        return this.parseOpera10(e);
      } else {
        return this.parseOpera11(e);
      }
    },
    parseOpera9: function ErrorStackParser$$parseOpera9(e) {
      var lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;
      var lines = e.message.split('\\n');
      var result = [];

      for (var i = 2, len = lines.length; i < len; i += 2) {
        var match = lineRE.exec(lines[i]);

        if (match) {
          result.push(new StackFrame({
            fileName: match[2],
            lineNumber: match[1],
            source: lines[i]
          }));
        }
      }

      return result;
    },
    parseOpera10: function ErrorStackParser$$parseOpera10(e) {
      var lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;
      var lines = e.stacktrace.split('\\n');
      var result = [];

      for (var i = 0, len = lines.length; i < len; i += 2) {
        var match = lineRE.exec(lines[i]);

        if (match) {
          result.push(new StackFrame({
            functionName: match[3] || undefined,
            fileName: match[2],
            lineNumber: match[1],
            source: lines[i]
          }));
        }
      }

      return result;
    },
    // Opera 10.65+ Error.stack very similar to FF/Safari
    parseOpera11: function ErrorStackParser$$parseOpera11(error) {
      var filtered = error.stack.split('\\n').filter(function (line) {
        return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);
      }, this);
      return filtered.map(function (line) {
        var tokens = line.split('@');
        var locationParts = this.extractLocation(tokens.pop());
        var functionCall = tokens.shift() || '';
        var functionName = functionCall.replace(/<anonymous function(: (\\w+))?>/, '$2').replace(/\\([^)]*\\)/g, '') || undefined;
        var argsRaw;

        if (functionCall.match(/\\(([^)]*)\\)/)) {
          argsRaw = functionCall.replace(/^[^(]+\\(([^)]*)\\)$/, '$1');
        }

        var args = argsRaw === undefined || argsRaw === '[arguments not available]' ? undefined : argsRaw.split(',');
        return new StackFrame({
          functionName: functionName,
          args: args,
          fileName: locationParts[0],
          lineNumber: locationParts[1],
          columnNumber: locationParts[2],
          source: line
        });
      }, this);
    }
  };
});

/***/ }),

/***/ 69:
/***/ ((module) => {

"use strict";


function nullthrows(x, message) {
  if (x != null) {
    return x;
  }

  var error = new Error(message !== undefined ? message : 'Got unexpected ' + x);
  error.framesToPop = 1; // Skip nullthrows's own stack frame.

  throw error;
}

module.exports = nullthrows;
module.exports["default"] = nullthrows;
Object.defineProperty(module.exports, "__esModule", ({
  value: true
}));

/***/ }),

/***/ 356:
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  'use strict'; // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

  /* istanbul ignore next */

  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this, function () {
  'use strict';

  function _isNumber(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  }

  function _capitalize(str) {
    return str.charAt(0).toUpperCase() + str.substring(1);
  }

  function _getter(p) {
    return function () {
      return this[p];
    };
  }

  var booleanProps = ['isConstructor', 'isEval', 'isNative', 'isToplevel'];
  var numericProps = ['columnNumber', 'lineNumber'];
  var stringProps = ['fileName', 'functionName', 'source'];
  var arrayProps = ['args'];
  var props = booleanProps.concat(numericProps, stringProps, arrayProps);

  function StackFrame(obj) {
    if (!obj) return;

    for (var i = 0; i < props.length; i++) {
      if (obj[props[i]] !== undefined) {
        this['set' + _capitalize(props[i])](obj[props[i]]);
      }
    }
  }

  StackFrame.prototype = {
    getArgs: function () {
      return this.args;
    },
    setArgs: function (v) {
      if (Object.prototype.toString.call(v) !== '[object Array]') {
        throw new TypeError('Args must be an Array');
      }

      this.args = v;
    },
    getEvalOrigin: function () {
      return this.evalOrigin;
    },
    setEvalOrigin: function (v) {
      if (v instanceof StackFrame) {
        this.evalOrigin = v;
      } else if (v instanceof Object) {
        this.evalOrigin = new StackFrame(v);
      } else {
        throw new TypeError('Eval Origin must be an Object or StackFrame');
      }
    },
    toString: function () {
      var fileName = this.getFileName() || '';
      var lineNumber = this.getLineNumber() || '';
      var columnNumber = this.getColumnNumber() || '';
      var functionName = this.getFunctionName() || '';

      if (this.getIsEval()) {
        if (fileName) {
          return '[eval] (' + fileName + ':' + lineNumber + ':' + columnNumber + ')';
        }

        return '[eval]:' + lineNumber + ':' + columnNumber;
      }

      if (functionName) {
        return functionName + ' (' + fileName + ':' + lineNumber + ':' + columnNumber + ')';
      }

      return fileName + ':' + lineNumber + ':' + columnNumber;
    }
  };

  StackFrame.fromString = function StackFrame$$fromString(str) {
    var argsStartIndex = str.indexOf('(');
    var argsEndIndex = str.lastIndexOf(')');
    var functionName = str.substring(0, argsStartIndex);
    var args = str.substring(argsStartIndex + 1, argsEndIndex).split(',');
    var locationString = str.substring(argsEndIndex + 1);

    if (locationString.indexOf('@') === 0) {
      var parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString, '');
      var fileName = parts[1];
      var lineNumber = parts[2];
      var columnNumber = parts[3];
    }

    return new StackFrame({
      functionName: functionName,
      args: args || undefined,
      fileName: fileName,
      lineNumber: lineNumber || undefined,
      columnNumber: columnNumber || undefined
    });
  };

  for (var i = 0; i < booleanProps.length; i++) {
    StackFrame.prototype['get' + _capitalize(booleanProps[i])] = _getter(booleanProps[i]);

    StackFrame.prototype['set' + _capitalize(booleanProps[i])] = function (p) {
      return function (v) {
        this[p] = Boolean(v);
      };
    }(booleanProps[i]);
  }

  for (var j = 0; j < numericProps.length; j++) {
    StackFrame.prototype['get' + _capitalize(numericProps[j])] = _getter(numericProps[j]);

    StackFrame.prototype['set' + _capitalize(numericProps[j])] = function (p) {
      return function (v) {
        if (!_isNumber(v)) {
          throw new TypeError(p + ' must be a Number');
        }

        this[p] = Number(v);
      };
    }(numericProps[j]);
  }

  for (var k = 0; k < stringProps.length; k++) {
    StackFrame.prototype['get' + _capitalize(stringProps[k])] = _getter(stringProps[k]);

    StackFrame.prototype['set' + _capitalize(stringProps[k])] = function (p) {
      return function (v) {
        this[p] = String(v);
      };
    }(stringProps[k]);
  }

  return StackFrame;
});

/***/ }),

/***/ 853:
/***/ ((module) => {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var runtime = function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.

  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }

  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.

    generator._invoke = makeInvokeMethod(innerFn, self, context);
    return generator;
  }

  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.

  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.


  var IteratorPrototype = {};

  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
    // do is to check its .name property.
    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  exports.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }

    genFun.prototype = Object.create(Gp);
    return genFun;
  }; // Within the body of any async function, \`await x\` is transformed to
  // \`yield regeneratorRuntime.awrap(x)\`, so that the runtime can test
  // \`hasOwn.call(value, "__await")\` to determine if the yielded value is
  // meant to be awaited.


  exports.awrap = function (arg) {
    return {
      __await: arg
    };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;

        if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function (unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function (error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = // If enqueue has been called before, then we want to wait until
      // all previous Promises have been resolved before calling invoke,
      // so that results are always delivered in the correct order. If
      // enqueue has not been called before, then it is important to
      // call invoke immediately, without waiting on a callback to fire,
      // so that the async generator function has the opportunity to do
      // any necessary setup in a predictable way. This predictability
      // is why the Promise constructor synchronously invokes its
      // executor callback, and why async functions synchronously
      // execute code before the first await. Since we implement simple
      // async functions in terms of async generators, it is especially
      // important to get this right, even though it requires care.
      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
      // invocations of the iterator.
      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    } // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).


    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };

  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.

  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
    : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;
    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        } // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;

        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);

          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;
        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);
        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;
        var record = tryCatch(innerFn, self, context);

        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };
        } else if (record.type === "throw") {
          state = GenStateCompleted; // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.

          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  } // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.


  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (!info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

      context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.

      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }
    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    } // The delegate iterator is finished, so forget it and continue with
    // the outer generator.


    context.delegate = null;
    return ContinueSentinel;
  } // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.


  defineIteratorMethods(Gp);
  define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.

  Gp[iteratorSymbol] = function () {
    return this;
  };

  Gp.toString = function () {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{
      tryLoc: "root"
    }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    keys.reverse(); // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.

    return function next() {
      while (keys.length) {
        var key = keys.pop();

        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      } // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.


      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];

      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;
          return next;
        };

        return next.next = next;
      }
    } // Return an iterator with no values.


    return {
      next: doneResult
    };
  }

  exports.values = values;

  function doneResult() {
    return {
      value: undefined,
      done: true
    };
  }

  Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      this.prev = 0;
      this.next = 0; // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.

      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;
      this.method = "next";
      this.arg = undefined;
      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },
    stop: function () {
      this.done = true;
      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;

      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;

      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },
    complete: function (record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },
    "catch": function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      } // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.


      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  }; // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by \`bin/regenerator --include-runtime script.js\`.

  return exports;
}( // If this script is executing as a CommonJS module, use module.exports
// as the regeneratorRuntime namespace. Otherwise create a new empty
// object. Either way, the resulting object will be used to initialize
// the regeneratorRuntime variable at the top of this file.
 true ? module.exports : 0);

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "importFile": () => (/* binding */ importFile_worker_importFile)
});

// EXTERNAL MODULE: ../react-devtools-timeline/node_modules/regenerator-runtime/runtime.js
var runtime = __webpack_require__(853);
// EXTERNAL MODULE: ../../node_modules/@elg/speedscope/dist/library/library.js
var library = __webpack_require__(41);
;// CONCATENATED MODULE: ../react-devtools-shared/src/devtools/constants.js
const CHANGE_LOG_URL = 'https://github.com/facebook/react/blob/main/packages/react-devtools/CHANGELOG.md';
const UNSUPPORTED_VERSION_URL = 'https://reactjs.org/blog/2019/08/15/new-react-devtools.html#how-do-i-get-the-old-version-back';
const REACT_DEVTOOLS_WORKPLACE_URL = 'https://fburl.com/react-devtools-workplace-group';
const THEME_STYLES = {
  light: {
    '--color-attribute-name': '#ef6632',
    '--color-attribute-name-not-editable': '#23272f',
    '--color-attribute-name-inverted': 'rgba(255, 255, 255, 0.7)',
    '--color-attribute-value': '#1a1aa6',
    '--color-attribute-value-inverted': '#ffffff',
    '--color-attribute-editable-value': '#1a1aa6',
    '--color-background': '#ffffff',
    '--color-background-hover': 'rgba(0, 136, 250, 0.1)',
    '--color-background-inactive': '#e5e5e5',
    '--color-background-invalid': '#fff0f0',
    '--color-background-selected': '#0088fa',
    '--color-button-background': '#ffffff',
    '--color-button-background-focus': '#ededed',
    '--color-button': '#5f6673',
    '--color-button-disabled': '#cfd1d5',
    '--color-button-active': '#0088fa',
    '--color-button-focus': '#23272f',
    '--color-button-hover': '#23272f',
    '--color-border': '#eeeeee',
    '--color-commit-did-not-render-fill': '#cfd1d5',
    '--color-commit-did-not-render-fill-text': '#000000',
    '--color-commit-did-not-render-pattern': '#cfd1d5',
    '--color-commit-did-not-render-pattern-text': '#333333',
    '--color-commit-gradient-0': '#37afa9',
    '--color-commit-gradient-1': '#63b19e',
    '--color-commit-gradient-2': '#80b393',
    '--color-commit-gradient-3': '#97b488',
    '--color-commit-gradient-4': '#abb67d',
    '--color-commit-gradient-5': '#beb771',
    '--color-commit-gradient-6': '#cfb965',
    '--color-commit-gradient-7': '#dfba57',
    '--color-commit-gradient-8': '#efbb49',
    '--color-commit-gradient-9': '#febc38',
    '--color-commit-gradient-text': '#000000',
    '--color-component-name': '#6a51b2',
    '--color-component-name-inverted': '#ffffff',
    '--color-component-badge-background': '#e6e6e6',
    '--color-component-badge-background-inverted': 'rgba(255, 255, 255, 0.25)',
    '--color-component-badge-count': '#777d88',
    '--color-component-badge-count-inverted': 'rgba(255, 255, 255, 0.7)',
    '--color-console-error-badge-text': '#ffffff',
    '--color-console-error-background': '#fff0f0',
    '--color-console-error-border': '#ffd6d6',
    '--color-console-error-icon': '#eb3941',
    '--color-console-error-text': '#fe2e31',
    '--color-console-warning-badge-text': '#000000',
    '--color-console-warning-background': '#fffbe5',
    '--color-console-warning-border': '#fff5c1',
    '--color-console-warning-icon': '#f4bd00',
    '--color-console-warning-text': '#64460c',
    '--color-context-background': 'rgba(0,0,0,.9)',
    '--color-context-background-hover': 'rgba(255, 255, 255, 0.1)',
    '--color-context-background-selected': '#178fb9',
    '--color-context-border': '#3d424a',
    '--color-context-text': '#ffffff',
    '--color-context-text-selected': '#ffffff',
    '--color-dim': '#777d88',
    '--color-dimmer': '#cfd1d5',
    '--color-dimmest': '#eff0f1',
    '--color-error-background': 'hsl(0, 100%, 97%)',
    '--color-error-border': 'hsl(0, 100%, 92%)',
    '--color-error-text': '#ff0000',
    '--color-expand-collapse-toggle': '#777d88',
    '--color-forget-badge-background': '#2683e2',
    '--color-forget-badge-background-inverted': '#1a6bbc',
    '--color-forget-text': '#fff',
    '--color-link': '#0000ff',
    '--color-modal-background': 'rgba(255, 255, 255, 0.75)',
    '--color-bridge-version-npm-background': '#eff0f1',
    '--color-bridge-version-npm-text': '#000000',
    '--color-bridge-version-number': '#0088fa',
    '--color-primitive-hook-badge-background': '#e5e5e5',
    '--color-primitive-hook-badge-text': '#5f6673',
    '--color-record-active': '#fc3a4b',
    '--color-record-hover': '#3578e5',
    '--color-record-inactive': '#0088fa',
    '--color-resize-bar': '#eeeeee',
    '--color-resize-bar-active': '#dcdcdc',
    '--color-resize-bar-border': '#d1d1d1',
    '--color-resize-bar-dot': '#333333',
    '--color-timeline-internal-module': '#d1d1d1',
    '--color-timeline-internal-module-hover': '#c9c9c9',
    '--color-timeline-internal-module-text': '#444',
    '--color-timeline-native-event': '#ccc',
    '--color-timeline-native-event-hover': '#aaa',
    '--color-timeline-network-primary': '#fcf3dc',
    '--color-timeline-network-primary-hover': '#f0e7d1',
    '--color-timeline-network-secondary': '#efc457',
    '--color-timeline-network-secondary-hover': '#e3ba52',
    '--color-timeline-priority-background': '#f6f6f6',
    '--color-timeline-priority-border': '#eeeeee',
    '--color-timeline-user-timing': '#c9cacd',
    '--color-timeline-user-timing-hover': '#93959a',
    '--color-timeline-react-idle': '#d3e5f6',
    '--color-timeline-react-idle-hover': '#c3d9ef',
    '--color-timeline-react-render': '#9fc3f3',
    '--color-timeline-react-render-hover': '#83afe9',
    '--color-timeline-react-render-text': '#11365e',
    '--color-timeline-react-commit': '#c88ff0',
    '--color-timeline-react-commit-hover': '#b281d6',
    '--color-timeline-react-commit-text': '#3e2c4a',
    '--color-timeline-react-layout-effects': '#b281d6',
    '--color-timeline-react-layout-effects-hover': '#9d71bd',
    '--color-timeline-react-layout-effects-text': '#3e2c4a',
    '--color-timeline-react-passive-effects': '#b281d6',
    '--color-timeline-react-passive-effects-hover': '#9d71bd',
    '--color-timeline-react-passive-effects-text': '#3e2c4a',
    '--color-timeline-react-schedule': '#9fc3f3',
    '--color-timeline-react-schedule-hover': '#2683E2',
    '--color-timeline-react-suspense-rejected': '#f1cc14',
    '--color-timeline-react-suspense-rejected-hover': '#ffdf37',
    '--color-timeline-react-suspense-resolved': '#a6e59f',
    '--color-timeline-react-suspense-resolved-hover': '#89d281',
    '--color-timeline-react-suspense-unresolved': '#c9cacd',
    '--color-timeline-react-suspense-unresolved-hover': '#93959a',
    '--color-timeline-thrown-error': '#ee1638',
    '--color-timeline-thrown-error-hover': '#da1030',
    '--color-timeline-text-color': '#000000',
    '--color-timeline-text-dim-color': '#ccc',
    '--color-timeline-react-work-border': '#eeeeee',
    '--color-search-match': 'yellow',
    '--color-search-match-current': '#f7923b',
    '--color-selected-tree-highlight-active': 'rgba(0, 136, 250, 0.1)',
    '--color-selected-tree-highlight-inactive': 'rgba(0, 0, 0, 0.05)',
    '--color-scroll-caret': 'rgba(150, 150, 150, 0.5)',
    '--color-tab-selected-border': '#0088fa',
    '--color-text': '#000000',
    '--color-text-invalid': '#ff0000',
    '--color-text-selected': '#ffffff',
    '--color-toggle-background-invalid': '#fc3a4b',
    '--color-toggle-background-on': '#0088fa',
    '--color-toggle-background-off': '#cfd1d5',
    '--color-toggle-text': '#ffffff',
    '--color-warning-background': '#fb3655',
    '--color-warning-background-hover': '#f82042',
    '--color-warning-text-color': '#ffffff',
    '--color-warning-text-color-inverted': '#fd4d69',
    // The styles below should be kept in sync with 'root.css'
    // They are repeated there because they're used by e.g. tooltips or context menus
    // which get rendered outside of the DOM subtree (where normal theme/styles are written).
    '--color-scroll-thumb': '#c2c2c2',
    '--color-scroll-track': '#fafafa',
    '--color-tooltip-background': 'rgba(0, 0, 0, 0.9)',
    '--color-tooltip-text': '#ffffff'
  },
  dark: {
    '--color-attribute-name': '#9d87d2',
    '--color-attribute-name-not-editable': '#ededed',
    '--color-attribute-name-inverted': '#282828',
    '--color-attribute-value': '#cedae0',
    '--color-attribute-value-inverted': '#ffffff',
    '--color-attribute-editable-value': 'yellow',
    '--color-background': '#282c34',
    '--color-background-hover': 'rgba(255, 255, 255, 0.1)',
    '--color-background-inactive': '#3d424a',
    '--color-background-invalid': '#5c0000',
    '--color-background-selected': '#178fb9',
    '--color-button-background': '#282c34',
    '--color-button-background-focus': '#3d424a',
    '--color-button': '#afb3b9',
    '--color-button-active': '#61dafb',
    '--color-button-disabled': '#4f5766',
    '--color-button-focus': '#a2e9fc',
    '--color-button-hover': '#ededed',
    '--color-border': '#3d424a',
    '--color-commit-did-not-render-fill': '#777d88',
    '--color-commit-did-not-render-fill-text': '#000000',
    '--color-commit-did-not-render-pattern': '#666c77',
    '--color-commit-did-not-render-pattern-text': '#ffffff',
    '--color-commit-gradient-0': '#37afa9',
    '--color-commit-gradient-1': '#63b19e',
    '--color-commit-gradient-2': '#80b393',
    '--color-commit-gradient-3': '#97b488',
    '--color-commit-gradient-4': '#abb67d',
    '--color-commit-gradient-5': '#beb771',
    '--color-commit-gradient-6': '#cfb965',
    '--color-commit-gradient-7': '#dfba57',
    '--color-commit-gradient-8': '#efbb49',
    '--color-commit-gradient-9': '#febc38',
    '--color-commit-gradient-text': '#000000',
    '--color-component-name': '#61dafb',
    '--color-component-name-inverted': '#282828',
    '--color-component-badge-background': '#5e6167',
    '--color-component-badge-background-inverted': '#46494e',
    '--color-component-badge-count': '#8f949d',
    '--color-component-badge-count-inverted': 'rgba(255, 255, 255, 0.85)',
    '--color-console-error-badge-text': '#000000',
    '--color-console-error-background': '#290000',
    '--color-console-error-border': '#5c0000',
    '--color-console-error-icon': '#eb3941',
    '--color-console-error-text': '#fc7f7f',
    '--color-console-warning-badge-text': '#000000',
    '--color-console-warning-background': '#332b00',
    '--color-console-warning-border': '#665500',
    '--color-console-warning-icon': '#f4bd00',
    '--color-console-warning-text': '#f5f2ed',
    '--color-context-background': 'rgba(255,255,255,.95)',
    '--color-context-background-hover': 'rgba(0, 136, 250, 0.1)',
    '--color-context-background-selected': '#0088fa',
    '--color-context-border': '#eeeeee',
    '--color-context-text': '#000000',
    '--color-context-text-selected': '#ffffff',
    '--color-dim': '#8f949d',
    '--color-dimmer': '#777d88',
    '--color-dimmest': '#4f5766',
    '--color-error-background': '#200',
    '--color-error-border': '#900',
    '--color-error-text': '#f55',
    '--color-expand-collapse-toggle': '#8f949d',
    '--color-forget-badge-background': '#2683e2',
    '--color-forget-badge-background-inverted': '#1a6bbc',
    '--color-forget-text': '#fff',
    '--color-link': '#61dafb',
    '--color-modal-background': 'rgba(0, 0, 0, 0.75)',
    '--color-bridge-version-npm-background': 'rgba(0, 0, 0, 0.25)',
    '--color-bridge-version-npm-text': '#ffffff',
    '--color-bridge-version-number': 'yellow',
    '--color-primitive-hook-badge-background': 'rgba(0, 0, 0, 0.25)',
    '--color-primitive-hook-badge-text': 'rgba(255, 255, 255, 0.7)',
    '--color-record-active': '#fc3a4b',
    '--color-record-hover': '#a2e9fc',
    '--color-record-inactive': '#61dafb',
    '--color-resize-bar': '#282c34',
    '--color-resize-bar-active': '#31363f',
    '--color-resize-bar-border': '#3d424a',
    '--color-resize-bar-dot': '#cfd1d5',
    '--color-timeline-internal-module': '#303542',
    '--color-timeline-internal-module-hover': '#363b4a',
    '--color-timeline-internal-module-text': '#7f8899',
    '--color-timeline-native-event': '#b2b2b2',
    '--color-timeline-native-event-hover': '#949494',
    '--color-timeline-network-primary': '#fcf3dc',
    '--color-timeline-network-primary-hover': '#e3dbc5',
    '--color-timeline-network-secondary': '#efc457',
    '--color-timeline-network-secondary-hover': '#d6af4d',
    '--color-timeline-priority-background': '#1d2129',
    '--color-timeline-priority-border': '#282c34',
    '--color-timeline-user-timing': '#c9cacd',
    '--color-timeline-user-timing-hover': '#93959a',
    '--color-timeline-react-idle': '#3d485b',
    '--color-timeline-react-idle-hover': '#465269',
    '--color-timeline-react-render': '#2683E2',
    '--color-timeline-react-render-hover': '#1a76d4',
    '--color-timeline-react-render-text': '#11365e',
    '--color-timeline-react-commit': '#731fad',
    '--color-timeline-react-commit-hover': '#611b94',
    '--color-timeline-react-commit-text': '#e5c1ff',
    '--color-timeline-react-layout-effects': '#611b94',
    '--color-timeline-react-layout-effects-hover': '#51167a',
    '--color-timeline-react-layout-effects-text': '#e5c1ff',
    '--color-timeline-react-passive-effects': '#611b94',
    '--color-timeline-react-passive-effects-hover': '#51167a',
    '--color-timeline-react-passive-effects-text': '#e5c1ff',
    '--color-timeline-react-schedule': '#2683E2',
    '--color-timeline-react-schedule-hover': '#1a76d4',
    '--color-timeline-react-suspense-rejected': '#f1cc14',
    '--color-timeline-react-suspense-rejected-hover': '#e4c00f',
    '--color-timeline-react-suspense-resolved': '#a6e59f',
    '--color-timeline-react-suspense-resolved-hover': '#89d281',
    '--color-timeline-react-suspense-unresolved': '#c9cacd',
    '--color-timeline-react-suspense-unresolved-hover': '#93959a',
    '--color-timeline-thrown-error': '#fb3655',
    '--color-timeline-thrown-error-hover': '#f82042',
    '--color-timeline-text-color': '#282c34',
    '--color-timeline-text-dim-color': '#555b66',
    '--color-timeline-react-work-border': '#3d424a',
    '--color-search-match': 'yellow',
    '--color-search-match-current': '#f7923b',
    '--color-selected-tree-highlight-active': 'rgba(23, 143, 185, 0.15)',
    '--color-selected-tree-highlight-inactive': 'rgba(255, 255, 255, 0.05)',
    '--color-scroll-caret': '#4f5766',
    '--color-shadow': 'rgba(0, 0, 0, 0.5)',
    '--color-tab-selected-border': '#178fb9',
    '--color-text': '#ffffff',
    '--color-text-invalid': '#ff8080',
    '--color-text-selected': '#ffffff',
    '--color-toggle-background-invalid': '#fc3a4b',
    '--color-toggle-background-on': '#178fb9',
    '--color-toggle-background-off': '#777d88',
    '--color-toggle-text': '#ffffff',
    '--color-warning-background': '#ee1638',
    '--color-warning-background-hover': '#da1030',
    '--color-warning-text-color': '#ffffff',
    '--color-warning-text-color-inverted': '#ee1638',
    // The styles below should be kept in sync with 'root.css'
    // They are repeated there because they're used by e.g. tooltips or context menus
    // which get rendered outside of the DOM subtree (where normal theme/styles are written).
    '--color-scroll-thumb': '#afb3b9',
    '--color-scroll-track': '#313640',
    '--color-tooltip-background': 'rgba(255, 255, 255, 0.95)',
    '--color-tooltip-text': '#000000'
  },
  compact: {
    '--font-size-monospace-small': '9px',
    '--font-size-monospace-normal': '11px',
    '--font-size-monospace-large': '15px',
    '--font-size-sans-small': '10px',
    '--font-size-sans-normal': '12px',
    '--font-size-sans-large': '14px',
    '--line-height-data': '18px'
  },
  comfortable: {
    '--font-size-monospace-small': '10px',
    '--font-size-monospace-normal': '13px',
    '--font-size-monospace-large': '17px',
    '--font-size-sans-small': '12px',
    '--font-size-sans-normal': '14px',
    '--font-size-sans-large': '16px',
    '--line-height-data': '22px'
  }
}; // HACK
//
// Sometimes the inline target is rendered before root styles are applied,
// which would result in e.g. NaN itemSize being passed to react-window list.

const COMFORTABLE_LINE_HEIGHT = parseInt(THEME_STYLES.comfortable['--line-height-data'], 10);
const COMPACT_LINE_HEIGHT = parseInt(THEME_STYLES.compact['--line-height-data'], 10);

;// CONCATENATED MODULE: ../react-devtools-timeline/src/constants.js
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

const REACT_TOTAL_NUM_LANES = 31; // Increment this number any time a backwards breaking change is made to the profiler metadata.

const SCHEDULING_PROFILER_VERSION = 1;
const SNAPSHOT_MAX_HEIGHT = 60;
;// CONCATENATED MODULE: ../react-devtools-timeline/src/import-worker/InvalidProfileError.js
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

/**
 * An error thrown when an invalid profile could not be processed.
 */
class InvalidProfileError extends Error {}
;// CONCATENATED MODULE: ../react-devtools-timeline/node_modules/memoize-one/dist/memoize-one.esm.js
function areInputsEqual(newInputs, lastInputs) {
  if (newInputs.length !== lastInputs.length) {
    return false;
  }

  for (var i = 0; i < newInputs.length; i++) {
    if (newInputs[i] !== lastInputs[i]) {
      return false;
    }
  }

  return true;
}

function memoizeOne(resultFn, isEqual) {
  if (isEqual === void 0) {
    isEqual = areInputsEqual;
  }

  var lastThis;
  var lastArgs = [];
  var lastResult;
  var calledOnce = false;

  function memoized() {
    var newArgs = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      newArgs[_i] = arguments[_i];
    }

    if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {
      return lastResult;
    }

    lastResult = resultFn.apply(this, newArgs);
    calledOnce = true;
    lastThis = this;
    lastArgs = newArgs;
    return lastResult;
  }

  return memoized;
}

/* harmony default export */ const memoize_one_esm = (memoizeOne);
;// CONCATENATED MODULE: ../react-devtools-timeline/src/utils/getBatchRange.js
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */


function unmemoizedGetBatchRange(batchUID, data, minStartTime = 0) {
  const measures = data.batchUIDToMeasuresMap.get(batchUID);

  if (measures == null || measures.length === 0) {
    throw Error(\`Could not find measures with batch UID "\${batchUID}"\`);
  }

  const lastMeasure = measures[measures.length - 1];
  const stopTime = lastMeasure.timestamp + lastMeasure.duration;

  if (stopTime < minStartTime) {
    return [0, 0];
  }

  let startTime = minStartTime;

  for (let index = 0; index < measures.length; index++) {
    const measure = measures[index];

    if (measure.timestamp >= minStartTime) {
      startTime = measure.timestamp;
      break;
    }
  }

  return [startTime, stopTime];
}

const getBatchRange = memoize_one_esm(unmemoizedGetBatchRange);
// EXTERNAL MODULE: ../../node_modules/error-stack-parser/error-stack-parser.js
var error_stack_parser = __webpack_require__(715);
var error_stack_parser_default = /*#__PURE__*/__webpack_require__.n(error_stack_parser);
;// CONCATENATED MODULE: ../react-devtools-timeline/src/import-worker/preprocessData.js
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */





const NATIVE_EVENT_DURATION_THRESHOLD = 20;
const NESTED_UPDATE_DURATION_THRESHOLD = 20;
const WARNING_STRINGS = {
  LONG_EVENT_HANDLER: 'An event handler scheduled a big update with React. Consider using the Transition API to defer some of this work.',
  NESTED_UPDATE: 'A big nested update was scheduled during layout. ' + 'Nested updates require React to re-render synchronously before the browser can paint. ' + 'Consider delaying this update by moving it to a passive effect (useEffect).',
  SUSPEND_DURING_UPDATE: 'A component suspended during an update which caused a fallback to be shown. ' + "Consider using the Transition API to avoid hiding components after they've been mounted."
}; // Exported for tests

function getLanesFromTransportDecimalBitmask(laneBitmaskString) {
  const laneBitmask = parseInt(laneBitmaskString, 10); // As negative numbers are stored in two's complement format, our bitmask
  // checks will be thrown off by them.

  if (laneBitmask < 0) {
    return [];
  }

  const lanes = [];
  let powersOfTwo = 0;

  while (powersOfTwo <= REACT_TOTAL_NUM_LANES) {
    if (1 << powersOfTwo & laneBitmask) {
      lanes.push(powersOfTwo);
    }

    powersOfTwo++;
  }

  return lanes;
}

function updateLaneToLabelMap(profilerData, laneLabelTuplesString) {
  // These marks appear multiple times in the data;
  // We only need to extact them once.
  if (profilerData.laneToLabelMap.size === 0) {
    const laneLabelTuples = laneLabelTuplesString.split(',');

    for (let laneIndex = 0; laneIndex < laneLabelTuples.length; laneIndex++) {
      // The numeric lane value (e.g. 64) isn't important.
      // The profiler parses and stores the lane's position within the bitmap,
      // (e.g. lane 1 is index 0, lane 16 is index 4).
      profilerData.laneToLabelMap.set(laneIndex, laneLabelTuples[laneIndex]);
    }
  }
}

let profilerVersion = null;

function getLastType(stack) {
  if (stack.length > 0) {
    const {
      type
    } = stack[stack.length - 1];
    return type;
  }

  return null;
}

function getDepth(stack) {
  if (stack.length > 0) {
    const {
      depth,
      type
    } = stack[stack.length - 1];
    return type === 'render-idle' ? depth : depth + 1;
  }

  return 0;
}

function markWorkStarted(type, startTime, lanes, currentProfilerData, state) {
  const {
    batchUID,
    measureStack
  } = state;
  const depth = getDepth(measureStack);
  const measure = {
    type,
    batchUID,
    depth,
    lanes,
    timestamp: startTime,
    duration: 0
  };
  state.measureStack.push({
    depth,
    measure,
    startTime,
    type
  }); // This array is pre-initialized when the batchUID is generated.

  const measures = currentProfilerData.batchUIDToMeasuresMap.get(batchUID);

  if (measures != null) {
    measures.push(measure);
  } else {
    currentProfilerData.batchUIDToMeasuresMap.set(state.batchUID, [measure]);
  } // This array is pre-initialized before processing starts.


  lanes.forEach(lane => {
    currentProfilerData.laneToReactMeasureMap.get(lane).push(measure);
  });
}

function markWorkCompleted(type, stopTime, currentProfilerData, stack) {
  if (stack.length === 0) {
    console.error('Unexpected type "%s" completed at %sms while stack is empty.', type, stopTime); // Ignore work "completion" user timing mark that doesn't complete anything

    return;
  }

  const last = stack[stack.length - 1];

  if (last.type !== type) {
    console.error('Unexpected type "%s" completed at %sms before "%s" completed.', type, stopTime, last.type);
  }

  const {
    measure,
    startTime
  } = stack.pop();

  if (!measure) {
    console.error('Could not find matching measure for type "%s".', type);
  } // $FlowFixMe[cannot-write] This property should not be writable outside of this function.


  measure.duration = stopTime - startTime;
}

function throwIfIncomplete(type, stack) {
  const lastIndex = stack.length - 1;

  if (lastIndex >= 0) {
    const last = stack[lastIndex];

    if (last.stopTime === undefined && last.type === type) {
      throw new InvalidProfileError(\`Unexpected type "\${type}" started before "\${last.type}" completed.\`);
    }
  }
}

function processEventDispatch(event, timestamp, profilerData, state) {
  const data = event.args.data;
  const type = data.type;

  if (type.startsWith('react-')) {
    const stackTrace = data.stackTrace;

    if (stackTrace) {
      const topFrame = stackTrace[stackTrace.length - 1];

      if (topFrame.url.includes('/react-dom.')) {
        // Filter out fake React events dispatched by invokeGuardedCallbackDev.
        return;
      }
    }
  } // Reduce noise from events like DOMActivate, load/unload, etc. which are usually not relevant


  if (type === 'blur' || type === 'click' || type === 'input' || type.startsWith('focus') || type.startsWith('key') || type.startsWith('mouse') || type.startsWith('pointer')) {
    const duration = event.dur / 1000;
    let depth = 0;

    while (state.nativeEventStack.length > 0) {
      const prevNativeEvent = state.nativeEventStack[state.nativeEventStack.length - 1];
      const prevStopTime = prevNativeEvent.timestamp + prevNativeEvent.duration;

      if (timestamp < prevStopTime) {
        depth = prevNativeEvent.depth + 1;
        break;
      } else {
        state.nativeEventStack.pop();
      }
    }

    const nativeEvent = {
      depth,
      duration,
      timestamp,
      type,
      warning: null
    };
    profilerData.nativeEvents.push(nativeEvent); // Keep track of curent event in case future ones overlap.
    // We separate them into different vertical lanes in this case.

    state.nativeEventStack.push(nativeEvent);
  }
}

function processResourceFinish(event, timestamp, profilerData, state) {
  const requestId = event.args.data.requestId;
  const networkMeasure = state.requestIdToNetworkMeasureMap.get(requestId);

  if (networkMeasure != null) {
    networkMeasure.finishTimestamp = timestamp;

    if (networkMeasure.firstReceivedDataTimestamp === 0) {
      networkMeasure.firstReceivedDataTimestamp = timestamp;
    }

    if (networkMeasure.lastReceivedDataTimestamp === 0) {
      networkMeasure.lastReceivedDataTimestamp = timestamp;
    } // Clean up now that the resource is done.


    state.requestIdToNetworkMeasureMap.delete(event.args.data.requestId);
  }
}

function processResourceReceivedData(event, timestamp, profilerData, state) {
  const requestId = event.args.data.requestId;
  const networkMeasure = state.requestIdToNetworkMeasureMap.get(requestId);

  if (networkMeasure != null) {
    if (networkMeasure.firstReceivedDataTimestamp === 0) {
      networkMeasure.firstReceivedDataTimestamp = timestamp;
    }

    networkMeasure.lastReceivedDataTimestamp = timestamp;
    networkMeasure.finishTimestamp = timestamp;
  }
}

function processResourceReceiveResponse(event, timestamp, profilerData, state) {
  const requestId = event.args.data.requestId;
  const networkMeasure = state.requestIdToNetworkMeasureMap.get(requestId);

  if (networkMeasure != null) {
    networkMeasure.receiveResponseTimestamp = timestamp;
  }
}

function processScreenshot(event, timestamp, profilerData, state) {
  const encodedSnapshot = event.args.snapshot; // Base 64 encoded

  const snapshot = {
    height: 0,
    image: null,
    imageSource: \`data:image/png;base64,\${encodedSnapshot}\`,
    timestamp,
    width: 0
  }; // Delay processing until we've extracted snapshot dimensions.

  let resolveFn = null;
  state.asyncProcessingPromises.push(new Promise(resolve => {
    resolveFn = resolve;
  })); // Parse the Base64 image data to determine native size.
  // This will be used later to scale for display within the thumbnail strip.

  fetch(snapshot.imageSource).then(response => response.blob()).then(blob => {
    // $FlowFixMe[cannot-resolve-name] createImageBitmap
    createImageBitmap(blob).then(bitmap => {
      snapshot.height = bitmap.height;
      snapshot.width = bitmap.width;
      resolveFn();
    });
  });
  profilerData.snapshots.push(snapshot);
}

function processResourceSendRequest(event, timestamp, profilerData, state) {
  const data = event.args.data;
  const requestId = data.requestId;
  const availableDepths = new Array(state.requestIdToNetworkMeasureMap.size + 1).fill(true);
  state.requestIdToNetworkMeasureMap.forEach(({
    depth
  }) => {
    availableDepths[depth] = false;
  });
  let depth = 0;

  for (let i = 0; i < availableDepths.length; i++) {
    if (availableDepths[i]) {
      depth = i;
      break;
    }
  }

  const networkMeasure = {
    depth,
    finishTimestamp: 0,
    firstReceivedDataTimestamp: 0,
    lastReceivedDataTimestamp: 0,
    requestId,
    requestMethod: data.requestMethod,
    priority: data.priority,
    sendRequestTimestamp: timestamp,
    receiveResponseTimestamp: 0,
    url: data.url
  };
  state.requestIdToNetworkMeasureMap.set(requestId, networkMeasure);
  profilerData.networkMeasures.push(networkMeasure);
  networkMeasure.sendRequestTimestamp = timestamp;
}

function processTimelineEvent(event,
/** Finalized profiler data up to \`event\`. May be mutated. */
currentProfilerData,
/** Intermediate processor state. May be mutated. */
state) {
  const {
    cat,
    name,
    ts,
    ph
  } = event;
  const startTime = (ts - currentProfilerData.startTime) / 1000;

  switch (cat) {
    case 'disabled-by-default-devtools.screenshot':
      processScreenshot(event, startTime, currentProfilerData, state);
      break;

    case 'devtools.timeline':
      switch (name) {
        case 'EventDispatch':
          processEventDispatch(event, startTime, currentProfilerData, state);
          break;

        case 'ResourceFinish':
          processResourceFinish(event, startTime, currentProfilerData, state);
          break;

        case 'ResourceReceivedData':
          processResourceReceivedData(event, startTime, currentProfilerData, state);
          break;

        case 'ResourceReceiveResponse':
          processResourceReceiveResponse(event, startTime, currentProfilerData, state);
          break;

        case 'ResourceSendRequest':
          processResourceSendRequest(event, startTime, currentProfilerData, state);
          break;
      }

      break;

    case 'blink.user_timing':
      if (name.startsWith('--react-version-')) {
        const [reactVersion] = name.slice(16).split('-');
        currentProfilerData.reactVersion = reactVersion;
      } else if (name.startsWith('--profiler-version-')) {
        const [versionString] = name.slice(19).split('-');
        profilerVersion = parseInt(versionString, 10);

        if (profilerVersion !== SCHEDULING_PROFILER_VERSION) {
          throw new InvalidProfileError(\`This version of profiling data (\${versionString}) is not supported by the current profiler.\`);
        }
      } else if (name.startsWith('--react-lane-labels-')) {
        const [laneLabelTuplesString] = name.slice(20).split('-');
        updateLaneToLabelMap(currentProfilerData, laneLabelTuplesString);
      } else if (name.startsWith('--component-')) {
        processReactComponentMeasure(name, startTime, currentProfilerData, state);
      } else if (name.startsWith('--schedule-render-')) {
        const [laneBitmaskString] = name.slice(18).split('-');
        currentProfilerData.schedulingEvents.push({
          type: 'schedule-render',
          lanes: getLanesFromTransportDecimalBitmask(laneBitmaskString),
          timestamp: startTime,
          warning: null
        });
      } else if (name.startsWith('--schedule-forced-update-')) {
        const [laneBitmaskString, componentName] = name.slice(25).split('-');
        const forceUpdateEvent = {
          type: 'schedule-force-update',
          lanes: getLanesFromTransportDecimalBitmask(laneBitmaskString),
          componentName,
          timestamp: startTime,
          warning: null
        }; // If this is a nested update, make a note of it.
        // Once we're done processing events, we'll check to see if it was a long update and warn about it.

        if (state.measureStack.find(({
          type
        }) => type === 'commit')) {
          state.potentialLongNestedUpdate = forceUpdateEvent;
        }

        currentProfilerData.schedulingEvents.push(forceUpdateEvent);
      } else if (name.startsWith('--schedule-state-update-')) {
        const [laneBitmaskString, componentName] = name.slice(24).split('-');
        const stateUpdateEvent = {
          type: 'schedule-state-update',
          lanes: getLanesFromTransportDecimalBitmask(laneBitmaskString),
          componentName,
          timestamp: startTime,
          warning: null
        }; // If this is a nested update, make a note of it.
        // Once we're done processing events, we'll check to see if it was a long update and warn about it.

        if (state.measureStack.find(({
          type
        }) => type === 'commit')) {
          state.potentialLongNestedUpdate = stateUpdateEvent;
        }

        currentProfilerData.schedulingEvents.push(stateUpdateEvent);
      } else if (name.startsWith('--error-')) {
        const [componentName, phase, message] = name.slice(8).split('-');
        currentProfilerData.thrownErrors.push({
          componentName,
          message,
          phase: phase,
          timestamp: startTime,
          type: 'thrown-error'
        });
      } else if (name.startsWith('--suspense-suspend-')) {
        const [id, componentName, phase, laneBitmaskString, promiseName] = name.slice(19).split('-');
        const lanes = getLanesFromTransportDecimalBitmask(laneBitmaskString);
        const availableDepths = new Array(state.unresolvedSuspenseEvents.size + 1).fill(true);
        state.unresolvedSuspenseEvents.forEach(({
          depth
        }) => {
          availableDepths[depth] = false;
        });
        let depth = 0;

        for (let i = 0; i < availableDepths.length; i++) {
          if (availableDepths[i]) {
            depth = i;
            break;
          }
        } // TODO (timeline) Maybe we should calculate depth in post,
        // so unresolved Suspense requests don't take up space.
        // We can't know if they'll be resolved or not at this point.
        // We'll just give them a default (fake) duration width.


        const suspenseEvent = {
          componentName,
          depth,
          duration: null,
          id,
          phase: phase,
          promiseName: promiseName || null,
          resolution: 'unresolved',
          timestamp: startTime,
          type: 'suspense',
          warning: null
        };

        if (phase === 'update') {
          // If a component suspended during an update, we should verify that it was during a transition.
          // We need the lane metadata to verify this though.
          // Since that data is only logged during commit, we may not have it yet.
          // Store these events for post-processing then.
          state.potentialSuspenseEventsOutsideOfTransition.push([suspenseEvent, lanes]);
        }

        currentProfilerData.suspenseEvents.push(suspenseEvent);
        state.unresolvedSuspenseEvents.set(id, suspenseEvent);
      } else if (name.startsWith('--suspense-resolved-')) {
        const [id] = name.slice(20).split('-');
        const suspenseEvent = state.unresolvedSuspenseEvents.get(id);

        if (suspenseEvent != null) {
          state.unresolvedSuspenseEvents.delete(id);
          suspenseEvent.duration = startTime - suspenseEvent.timestamp;
          suspenseEvent.resolution = 'resolved';
        }
      } else if (name.startsWith('--suspense-rejected-')) {
        const [id] = name.slice(20).split('-');
        const suspenseEvent = state.unresolvedSuspenseEvents.get(id);

        if (suspenseEvent != null) {
          state.unresolvedSuspenseEvents.delete(id);
          suspenseEvent.duration = startTime - suspenseEvent.timestamp;
          suspenseEvent.resolution = 'rejected';
        }
      } else if (name.startsWith('--render-start-')) {
        if (state.nextRenderShouldGenerateNewBatchID) {
          state.nextRenderShouldGenerateNewBatchID = false;
          state.batchUID = state.uidCounter++;
        } // If this render is the result of a nested update, make a note of it.
        // Once we're done processing events, we'll check to see if it was a long update and warn about it.


        if (state.potentialLongNestedUpdate !== null) {
          state.potentialLongNestedUpdates.push([state.potentialLongNestedUpdate, state.batchUID]);
          state.potentialLongNestedUpdate = null;
        }

        const [laneBitmaskString] = name.slice(15).split('-');
        throwIfIncomplete('render', state.measureStack);

        if (getLastType(state.measureStack) !== 'render-idle') {
          markWorkStarted('render-idle', startTime, getLanesFromTransportDecimalBitmask(laneBitmaskString), currentProfilerData, state);
        }

        markWorkStarted('render', startTime, getLanesFromTransportDecimalBitmask(laneBitmaskString), currentProfilerData, state);

        for (let i = 0; i < state.nativeEventStack.length; i++) {
          const nativeEvent = state.nativeEventStack[i];
          const stopTime = nativeEvent.timestamp + nativeEvent.duration; // If React work was scheduled during an event handler, and the event had a long duration,
          // it might be because the React render was long and stretched the event.
          // It might also be that the React work was short and that something else stretched the event.
          // Make a note of this event for now and we'll examine the batch of React render work later.
          // (We can't know until we're done processing the React update anyway.)

          if (stopTime > startTime) {
            state.potentialLongEvents.push([nativeEvent, state.batchUID]);
          }
        }
      } else if (name.startsWith('--render-stop') || name.startsWith('--render-yield')) {
        markWorkCompleted('render', startTime, currentProfilerData, state.measureStack);
      } else if (name.startsWith('--commit-start-')) {
        state.nextRenderShouldGenerateNewBatchID = true;
        const [laneBitmaskString] = name.slice(15).split('-');
        markWorkStarted('commit', startTime, getLanesFromTransportDecimalBitmask(laneBitmaskString), currentProfilerData, state);
      } else if (name.startsWith('--commit-stop')) {
        markWorkCompleted('commit', startTime, currentProfilerData, state.measureStack);
        markWorkCompleted('render-idle', startTime, currentProfilerData, state.measureStack);
      } else if (name.startsWith('--layout-effects-start-')) {
        const [laneBitmaskString] = name.slice(23).split('-');
        markWorkStarted('layout-effects', startTime, getLanesFromTransportDecimalBitmask(laneBitmaskString), currentProfilerData, state);
      } else if (name.startsWith('--layout-effects-stop')) {
        markWorkCompleted('layout-effects', startTime, currentProfilerData, state.measureStack);
      } else if (name.startsWith('--passive-effects-start-')) {
        const [laneBitmaskString] = name.slice(24).split('-');
        markWorkStarted('passive-effects', startTime, getLanesFromTransportDecimalBitmask(laneBitmaskString), currentProfilerData, state);
      } else if (name.startsWith('--passive-effects-stop')) {
        markWorkCompleted('passive-effects', startTime, currentProfilerData, state.measureStack);
      } else if (name.startsWith('--react-internal-module-start-')) {
        const stackFrameStart = name.slice(30);

        if (!state.internalModuleStackStringSet.has(stackFrameStart)) {
          state.internalModuleStackStringSet.add(stackFrameStart);
          const parsedStackFrameStart = parseStackFrame(stackFrameStart);
          state.internalModuleCurrentStackFrame = parsedStackFrameStart;
        }
      } else if (name.startsWith('--react-internal-module-stop-')) {
        const stackFrameStop = name.slice(29);

        if (!state.internalModuleStackStringSet.has(stackFrameStop)) {
          state.internalModuleStackStringSet.add(stackFrameStop);
          const parsedStackFrameStop = parseStackFrame(stackFrameStop);

          if (parsedStackFrameStop !== null && state.internalModuleCurrentStackFrame !== null) {
            const parsedStackFrameStart = state.internalModuleCurrentStackFrame;
            state.internalModuleCurrentStackFrame = null;
            const range = [parsedStackFrameStart, parsedStackFrameStop];
            const ranges = currentProfilerData.internalModuleSourceToRanges.get(parsedStackFrameStart.fileName);

            if (ranges == null) {
              currentProfilerData.internalModuleSourceToRanges.set(parsedStackFrameStart.fileName, [range]);
            } else {
              ranges.push(range);
            }
          }
        }
      } else if (ph === 'R' || ph === 'n') {
        // User Timing mark
        currentProfilerData.otherUserTimingMarks.push({
          name,
          timestamp: startTime
        });
      } else if (ph === 'b') {// TODO: Begin user timing measure
      } else if (ph === 'e') {// TODO: End user timing measure
      } else if (ph === 'i' || ph === 'I') {// Instant events.
        // Note that the capital "I" is a deprecated value that exists in Chrome Canary traces.
      } else {
        throw new InvalidProfileError(\`Unrecognized event \${JSON.stringify(event)}! This is likely a bug in this profiler tool.\`);
      }

      break;
  }
}

function assertNoOverlappingComponentMeasure(state) {
  if (state.currentReactComponentMeasure !== null) {
    console.error('Component measure started while another measure in progress:', state.currentReactComponentMeasure);
  }
}

function assertCurrentComponentMeasureType(state, type) {
  if (state.currentReactComponentMeasure === null) {
    console.error(\`Component measure type "\${type}" stopped while no measure was in progress\`);
  } else if (state.currentReactComponentMeasure.type !== type) {
    console.error(\`Component measure type "\${type}" stopped while type \${state.currentReactComponentMeasure.type} in progress\`);
  }
}

function processReactComponentMeasure(name, startTime, currentProfilerData, state) {
  if (name.startsWith('--component-render-start-')) {
    const [componentName] = name.slice(25).split('-');
    assertNoOverlappingComponentMeasure(state);
    state.currentReactComponentMeasure = {
      componentName,
      timestamp: startTime,
      duration: 0,
      type: 'render',
      warning: null
    };
  } else if (name === '--component-render-stop') {
    assertCurrentComponentMeasureType(state, 'render');

    if (state.currentReactComponentMeasure !== null) {
      const componentMeasure = state.currentReactComponentMeasure;
      componentMeasure.duration = startTime - componentMeasure.timestamp;
      state.currentReactComponentMeasure = null;
      currentProfilerData.componentMeasures.push(componentMeasure);
    }
  } else if (name.startsWith('--component-layout-effect-mount-start-')) {
    const [componentName] = name.slice(38).split('-');
    assertNoOverlappingComponentMeasure(state);
    state.currentReactComponentMeasure = {
      componentName,
      timestamp: startTime,
      duration: 0,
      type: 'layout-effect-mount',
      warning: null
    };
  } else if (name === '--component-layout-effect-mount-stop') {
    assertCurrentComponentMeasureType(state, 'layout-effect-mount');

    if (state.currentReactComponentMeasure !== null) {
      const componentMeasure = state.currentReactComponentMeasure;
      componentMeasure.duration = startTime - componentMeasure.timestamp;
      state.currentReactComponentMeasure = null;
      currentProfilerData.componentMeasures.push(componentMeasure);
    }
  } else if (name.startsWith('--component-layout-effect-unmount-start-')) {
    const [componentName] = name.slice(40).split('-');
    assertNoOverlappingComponentMeasure(state);
    state.currentReactComponentMeasure = {
      componentName,
      timestamp: startTime,
      duration: 0,
      type: 'layout-effect-unmount',
      warning: null
    };
  } else if (name === '--component-layout-effect-unmount-stop') {
    assertCurrentComponentMeasureType(state, 'layout-effect-unmount');

    if (state.currentReactComponentMeasure !== null) {
      const componentMeasure = state.currentReactComponentMeasure;
      componentMeasure.duration = startTime - componentMeasure.timestamp;
      state.currentReactComponentMeasure = null;
      currentProfilerData.componentMeasures.push(componentMeasure);
    }
  } else if (name.startsWith('--component-passive-effect-mount-start-')) {
    const [componentName] = name.slice(39).split('-');
    assertNoOverlappingComponentMeasure(state);
    state.currentReactComponentMeasure = {
      componentName,
      timestamp: startTime,
      duration: 0,
      type: 'passive-effect-mount',
      warning: null
    };
  } else if (name === '--component-passive-effect-mount-stop') {
    assertCurrentComponentMeasureType(state, 'passive-effect-mount');

    if (state.currentReactComponentMeasure !== null) {
      const componentMeasure = state.currentReactComponentMeasure;
      componentMeasure.duration = startTime - componentMeasure.timestamp;
      state.currentReactComponentMeasure = null;
      currentProfilerData.componentMeasures.push(componentMeasure);
    }
  } else if (name.startsWith('--component-passive-effect-unmount-start-')) {
    const [componentName] = name.slice(41).split('-');
    assertNoOverlappingComponentMeasure(state);
    state.currentReactComponentMeasure = {
      componentName,
      timestamp: startTime,
      duration: 0,
      type: 'passive-effect-unmount',
      warning: null
    };
  } else if (name === '--component-passive-effect-unmount-stop') {
    assertCurrentComponentMeasureType(state, 'passive-effect-unmount');

    if (state.currentReactComponentMeasure !== null) {
      const componentMeasure = state.currentReactComponentMeasure;
      componentMeasure.duration = startTime - componentMeasure.timestamp;
      state.currentReactComponentMeasure = null;
      currentProfilerData.componentMeasures.push(componentMeasure);
    }
  }
}

function preprocessFlamechart(rawData) {
  let parsedData;

  try {
    parsedData = (0,library.importFromChromeTimeline)(rawData, 'react-devtools');
  } catch (error) {
    // Assume any Speedscope errors are caused by bad profiles
    const errorToRethrow = new InvalidProfileError(error.message);
    errorToRethrow.stack = error.stack;
    throw errorToRethrow;
  }

  const profile = parsedData.profiles[0]; // TODO: Choose the main CPU thread only

  const speedscopeFlamechart = new library.Flamechart({
    // $FlowFixMe[method-unbinding]
    getTotalWeight: profile.getTotalWeight.bind(profile),
    // $FlowFixMe[method-unbinding]
    forEachCall: profile.forEachCall.bind(profile),
    // $FlowFixMe[method-unbinding]
    formatValue: profile.formatValue.bind(profile),
    getColorBucketForFrame: () => 0
  });
  const flamechart = speedscopeFlamechart.getLayers().map(layer => layer.map(({
    start,
    end,
    node: {
      frame: {
        name,
        file,
        line,
        col
      }
    }
  }) => ({
    name,
    timestamp: start / 1000,
    duration: (end - start) / 1000,
    scriptUrl: file,
    locationLine: line,
    locationColumn: col
  })));
  return flamechart;
}

function parseStackFrame(stackFrame) {
  const error = new Error();
  error.stack = stackFrame;
  const frames = error_stack_parser_default().parse(error);
  return frames.length === 1 ? frames[0] : null;
}

async function preprocessData(timeline) {
  const flamechart = preprocessFlamechart(timeline);
  const laneToReactMeasureMap = new Map();

  for (let lane = 0; lane < REACT_TOTAL_NUM_LANES; lane++) {
    laneToReactMeasureMap.set(lane, []);
  }

  const profilerData = {
    batchUIDToMeasuresMap: new Map(),
    componentMeasures: [],
    duration: 0,
    flamechart,
    internalModuleSourceToRanges: new Map(),
    laneToLabelMap: new Map(),
    laneToReactMeasureMap,
    nativeEvents: [],
    networkMeasures: [],
    otherUserTimingMarks: [],
    reactVersion: null,
    schedulingEvents: [],
    snapshots: [],
    snapshotHeight: 0,
    startTime: 0,
    suspenseEvents: [],
    thrownErrors: []
  }; // Sort \`timeline\`. JSON Array Format trace events need not be ordered. See:
  // https://docs.google.com/document/d/1CvAClvFfyA5R-PhYUmn5OOQtYMH4h6I0nSsKchNAySU/preview#heading=h.f2f0yd51wi15

  timeline = timeline.filter(Boolean).sort((a, b) => a.ts > b.ts ? 1 : -1); // Events displayed in flamechart have timestamps relative to the profile
  // event's startTime. Source: https://github.com/v8/v8/blob/44bd8fd7/src/inspector/js_protocol.json#L1486
  //
  // We'll thus expect there to be a 'Profile' event; if there is not one, we
  // can deduce that there are no flame chart events. As we expect React
  // scheduling profiling user timing marks to be recorded together with browser
  // flame chart events, we can futher deduce that the data is invalid and we
  // don't bother finding React events.

  const indexOfProfileEvent = timeline.findIndex(event => event.name === 'Profile');

  if (indexOfProfileEvent === -1) {
    return profilerData;
  } // Use Profile event's \`startTime\` as the start time to align with flame chart.
  // TODO: Remove assumption that there'll only be 1 'Profile' event. If this
  // assumption does not hold, the chart may start at the wrong time.


  profilerData.startTime = timeline[indexOfProfileEvent].args.data.startTime;
  profilerData.duration = (timeline[timeline.length - 1].ts - profilerData.startTime) / 1000;
  const state = {
    asyncProcessingPromises: [],
    batchUID: 0,
    currentReactComponentMeasure: null,
    internalModuleCurrentStackFrame: null,
    internalModuleStackStringSet: new Set(),
    measureStack: [],
    nativeEventStack: [],
    nextRenderShouldGenerateNewBatchID: true,
    potentialLongEvents: [],
    potentialLongNestedUpdate: null,
    potentialLongNestedUpdates: [],
    potentialSuspenseEventsOutsideOfTransition: [],
    requestIdToNetworkMeasureMap: new Map(),
    uidCounter: 0,
    unresolvedSuspenseEvents: new Map()
  };
  timeline.forEach(event => processTimelineEvent(event, profilerData, state));

  if (profilerVersion === null) {
    if (profilerData.schedulingEvents.length === 0 && profilerData.batchUIDToMeasuresMap.size === 0) {
      // No profiler version could indicate data was logged using an older build of React,
      // before an explicitly profiler version was included in the logging data.
      // But it could also indicate that the website was either not using React, or using a production build.
      // The easiest way to check for this case is to see if the data contains any scheduled updates or render work.
      throw new InvalidProfileError('No React marks were found in the provided profile.' + ' Please provide profiling data from an React application running in development or profiling mode.');
    }

    throw new InvalidProfileError(\`This version of profiling data is not supported by the current profiler.\`);
  } // Validate that all events and measures are complete


  const {
    measureStack
  } = state;

  if (measureStack.length > 0) {
    console.error('Incomplete events or measures', measureStack);
  } // Check for warnings.


  state.potentialLongEvents.forEach(([nativeEvent, batchUID]) => {
    // See how long the subsequent batch of React work was.
    // Ignore any work that was already started.
    const [startTime, stopTime] = getBatchRange(batchUID, profilerData, nativeEvent.timestamp);

    if (stopTime - startTime > NATIVE_EVENT_DURATION_THRESHOLD) {
      nativeEvent.warning = WARNING_STRINGS.LONG_EVENT_HANDLER;
    }
  });
  state.potentialLongNestedUpdates.forEach(([schedulingEvent, batchUID]) => {
    // See how long the subsequent batch of React work was.
    const [startTime, stopTime] = getBatchRange(batchUID, profilerData);

    if (stopTime - startTime > NESTED_UPDATE_DURATION_THRESHOLD) {
      // Don't warn about transition updates scheduled during the commit phase.
      // e.g. useTransition, useDeferredValue
      // These are allowed to be long-running.
      if (!schedulingEvent.lanes.some(lane => profilerData.laneToLabelMap.get(lane) === 'Transition')) {// FIXME: This warning doesn't account for "nested updates" that are
        // spawned by useDeferredValue. Disabling temporarily until we figure
        // out the right way to handle this.
        // schedulingEvent.warning = WARNING_STRINGS.NESTED_UPDATE;
      }
    }
  });
  state.potentialSuspenseEventsOutsideOfTransition.forEach(([suspenseEvent, lanes]) => {
    // HACK This is a bit gross but the numeric lane value might change between render versions.
    if (!lanes.some(lane => profilerData.laneToLabelMap.get(lane) === 'Transition')) {
      suspenseEvent.warning = WARNING_STRINGS.SUSPEND_DURING_UPDATE;
    }
  }); // Wait for any async processing to complete before returning.
  // Since processing is done in a worker, async work must complete before data is serialized and returned.

  await Promise.all(state.asyncProcessingPromises); // Now that all images have been loaded, let's figure out the display size we're going to use for our thumbnails:
  // both the ones rendered to the canvas and the ones shown on hover.

  if (profilerData.snapshots.length > 0) {
    // NOTE We assume a static window size here, which is not necessarily true but should be for most cases.
    // Regardless, Chrome also sets a single size/ratio and stick with it- so we'll do the same.
    const snapshot = profilerData.snapshots[0];
    profilerData.snapshotHeight = Math.min(snapshot.height, SNAPSHOT_MAX_HEIGHT);
  }

  return profilerData;
}
// EXTERNAL MODULE: ../../node_modules/nullthrows/nullthrows.js
var nullthrows = __webpack_require__(69);
var nullthrows_default = /*#__PURE__*/__webpack_require__.n(nullthrows);
;// CONCATENATED MODULE: ../react-devtools-timeline/src/import-worker/readInputData.js
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */


const readInputData = file => {
  if (!file.name.endsWith('.json')) {
    throw new InvalidProfileError('Invalid file type. Only JSON performance profiles are supported');
  }

  const fileReader = new FileReader();
  return new Promise((resolve, reject) => {
    fileReader.onload = () => {
      const result = nullthrows_default()(fileReader.result);

      if (typeof result === 'string') {
        resolve(result);
      }

      reject(new InvalidProfileError('Input file was not read as a string'));
    };

    fileReader.onerror = () => reject(fileReader.error);

    fileReader.readAsText(file);
  });
};
;// CONCATENATED MODULE: ../react-devtools-timeline/src/import-worker/importFile.js
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */




async function importFile(file) {
  try {
    const readFile = await readInputData(file);
    const events = JSON.parse(readFile);

    if (events.length === 0) {
      throw new InvalidProfileError('No profiling data found in file.');
    }

    const processedData = await preprocessData(events);
    return {
      status: 'SUCCESS',
      processedData
    };
  } catch (error) {
    if (error instanceof InvalidProfileError) {
      return {
        status: 'INVALID_PROFILE_ERROR',
        error
      };
    } else {
      return {
        status: 'UNEXPECTED_ERROR',
        error
      };
    }
  }
}
;// CONCATENATED MODULE: ../../node_modules/workerize-loader/dist/rpc-worker-loader.js!../../node_modules/babel-loader/lib/index.js??ruleSet[1].rules[0].use[1]!../../node_modules/babel-loader/lib/index.js??ruleSet[1].rules[1]!../react-devtools-timeline/src/import-worker/importFile.worker.js
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

const importFile_worker_importFile = importFile;
addEventListener('message', function (e) {var _e$data = e.data,type = _e$data.type,method = _e$data.method,id = _e$data.id,params = _e$data.params,f,p;if (type === 'RPC' && method) {if (f = __webpack_exports__[method]) {p = Promise.resolve().then(function () {return f.apply(__webpack_exports__, params);});} else {p = Promise.reject('No such method');}p.then(function (result) {postMessage({type: 'RPC',id: id,result: result});}).catch(function (e) {var error = {message: e};if (e.stack) {error.message = e.message;error.stack = e.stack;error.name = e.name;}postMessage({type: 'RPC',id: id,error: error});});}});postMessage({type: 'RPC',method: 'ready'});
})();

/******/ })()
;
//# sourceMappingURL=importFile.worker.worker.js.map`])));
              addMethods(w, methods);
              return w;
            };
          }
        )
        /******/
      };
      var __webpack_module_cache__ = {};
      function __webpack_require__(moduleId) {
        var cachedModule = __webpack_module_cache__[moduleId];
        if (cachedModule !== void 0) {
          return cachedModule.exports;
        }
        var module2 = __webpack_module_cache__[moduleId] = {
          /******/
          id: moduleId,
          /******/
          // no module.loaded needed
          /******/
          exports: {}
          /******/
        };
        __webpack_modules__[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
        return module2.exports;
      }
      (() => {
        __webpack_require__.n = (module2) => {
          var getter = module2 && module2.__esModule ? (
            /******/
            () => module2["default"]
          ) : (
            /******/
            () => module2
          );
          __webpack_require__.d(getter, { a: getter });
          return getter;
        };
      })();
      (() => {
        __webpack_require__.d = (exports2, definition) => {
          for (var key in definition) {
            if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports2, key)) {
              Object.defineProperty(exports2, key, { enumerable: true, get: definition[key] });
            }
          }
        };
      })();
      (() => {
        __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
      })();
      (() => {
        __webpack_require__.r = (exports2) => {
          if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
            Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
          }
          Object.defineProperty(exports2, "__esModule", { value: true });
        };
      })();
      (() => {
        __webpack_require__.nc = void 0;
      })();
      var __webpack_exports__ = {};
      (() => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        __webpack_require__.d(__webpack_exports__, {
          "createBridge": () => (
            /* binding */
            createBridge2
          ),
          "createStore": () => (
            /* binding */
            createStore2
          ),
          "initialize": () => (
            /* binding */
            initialize
          )
        });
        var importFile_namespaceObject = {};
        __webpack_require__.r(importFile_namespaceObject);
        __webpack_require__.d(importFile_namespaceObject, {
          "importFile": () => importFile
        });
        ;
        const external_react_namespaceObject = require_react();
        ;
        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        class EventEmitter {
          constructor() {
            _defineProperty(this, "listenersMap", /* @__PURE__ */ new Map());
          }
          addListener(event, listener) {
            const listeners = this.listenersMap.get(event);
            if (listeners === void 0) {
              this.listenersMap.set(event, [listener]);
            } else {
              const index = listeners.indexOf(listener);
              if (index < 0) {
                listeners.push(listener);
              }
            }
          }
          emit(event, ...args) {
            const listeners = this.listenersMap.get(event);
            if (listeners !== void 0) {
              if (listeners.length === 1) {
                const listener = listeners[0];
                listener.apply(null, args);
              } else {
                let didThrow = false;
                let caughtError = null;
                const clonedListeners = Array.from(listeners);
                for (let i2 = 0; i2 < clonedListeners.length; i2++) {
                  const listener = clonedListeners[i2];
                  try {
                    listener.apply(null, args);
                  } catch (error) {
                    if (caughtError === null) {
                      didThrow = true;
                      caughtError = error;
                    }
                  }
                }
                if (didThrow) {
                  throw caughtError;
                }
              }
            }
          }
          removeAllListeners() {
            this.listenersMap.clear();
          }
          removeListener(event, listener) {
            const listeners = this.listenersMap.get(event);
            if (listeners !== void 0) {
              const index = listeners.indexOf(listener);
              if (index >= 0) {
                listeners.splice(index, 1);
              }
            }
          }
        }
        ;
        function bridge_defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        const BATCH_DURATION = 100;
        const BRIDGE_PROTOCOL = [
          // This version technically never existed,
          // but a backwards breaking change was added in 4.11,
          // so the safest guess to downgrade the frontend would be to version 4.10.
          {
            version: 0,
            minNpmVersion: '"<4.11.0"',
            maxNpmVersion: '"<4.11.0"'
          },
          // Versions 4.11.x – 4.12.x contained the backwards breaking change,
          // but we didn't add the "fix" of checking the protocol version until 4.13,
          // so we don't recommend downgrading to 4.11 or 4.12.
          {
            version: 1,
            minNpmVersion: "4.13.0",
            maxNpmVersion: "4.21.0"
          },
          // Version 2 adds a StrictMode-enabled and supports-StrictMode bits to add-root operation.
          {
            version: 2,
            minNpmVersion: "4.22.0",
            maxNpmVersion: null
          }
        ];
        const currentBridgeProtocol = BRIDGE_PROTOCOL[BRIDGE_PROTOCOL.length - 1];
        class Bridge extends EventEmitter {
          constructor(wall) {
            super();
            bridge_defineProperty(this, "_isShutdown", false);
            bridge_defineProperty(this, "_messageQueue", []);
            bridge_defineProperty(this, "_timeoutID", null);
            bridge_defineProperty(this, "_wallUnlisten", null);
            bridge_defineProperty(this, "_flush", () => {
              if (this._timeoutID !== null) {
                clearTimeout(this._timeoutID);
                this._timeoutID = null;
              }
              if (this._messageQueue.length) {
                for (let i2 = 0; i2 < this._messageQueue.length; i2 += 2) {
                  this._wall.send(this._messageQueue[i2], ...this._messageQueue[i2 + 1]);
                }
                this._messageQueue.length = 0;
                this._timeoutID = setTimeout(this._flush, BATCH_DURATION);
              }
            });
            bridge_defineProperty(this, "overrideValueAtPath", ({
              id: id2,
              path,
              rendererID,
              type,
              value
            }) => {
              switch (type) {
                case "context":
                  this.send("overrideContext", {
                    id: id2,
                    path,
                    rendererID,
                    wasForwarded: true,
                    value
                  });
                  break;
                case "hooks":
                  this.send("overrideHookState", {
                    id: id2,
                    path,
                    rendererID,
                    wasForwarded: true,
                    value
                  });
                  break;
                case "props":
                  this.send("overrideProps", {
                    id: id2,
                    path,
                    rendererID,
                    wasForwarded: true,
                    value
                  });
                  break;
                case "state":
                  this.send("overrideState", {
                    id: id2,
                    path,
                    rendererID,
                    wasForwarded: true,
                    value
                  });
                  break;
              }
            });
            this._wall = wall;
            this._wallUnlisten = wall.listen((message) => {
              if (message && message.event) {
                this.emit(message.event, message.payload);
              }
            }) || null;
            this.addListener("overrideValueAtPath", this.overrideValueAtPath);
          }
          // Listening directly to the wall isn't advised.
          // It can be used to listen for legacy (v3) messages (since they use a different format).
          get wall() {
            return this._wall;
          }
          send(event, ...payload) {
            if (this._isShutdown) {
              console.warn(`Cannot send message "${event}" through a Bridge that has been shutdown.`);
              return;
            }
            this._messageQueue.push(event, payload);
            if (!this._timeoutID) {
              this._timeoutID = setTimeout(this._flush, 0);
            }
          }
          shutdown() {
            if (this._isShutdown) {
              console.warn("Bridge was already shutdown.");
              return;
            }
            this.emit("shutdown");
            this.send("shutdown");
            this._isShutdown = true;
            this.addListener = function() {
            };
            this.emit = function() {
            };
            this.removeAllListeners();
            const wallUnlisten = this._wallUnlisten;
            if (wallUnlisten) {
              wallUnlisten();
            }
            do {
              this._flush();
            } while (this._messageQueue.length);
            if (this._timeoutID !== null) {
              clearTimeout(this._timeoutID);
              this._timeoutID = null;
            }
          }
        }
        const bridge = Bridge;
        var clipboard = __webpack_require__(3537);
        var util = __webpack_require__(2599);
        ;
        const CHROME_WEBSTORE_EXTENSION_ID = "fmkadmapgofadopljbjfkapdkoienihi";
        const INTERNAL_EXTENSION_ID = "dnjnjgbfilfphmojnmhliehogmojhclc";
        const LOCAL_EXTENSION_ID = "ikiahnapldjmdmpkmfhjdjilojjhgcbf";
        const __DEBUG__ = false;
        const constants_PERFORMANCE_PROFILE_ = false;
        const constants_TREE_OPERATION_ADD = 1;
        const constants_TREE_OPERATION_REMOVE = 2;
        const constants_TREE_OPERATION_REORDER_CHILDREN = 3;
        const constants_TREE_OPERATION_UPDATE_TREE_BASE_DURATION = 4;
        const constants_TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS = 5;
        const constants_TREE_OPERATION_REMOVE_ROOT = 6;
        const constants_TREE_OPERATION_SET_SUBTREE_MODE = 7;
        const PROFILING_FLAG_BASIC_SUPPORT = 1;
        const PROFILING_FLAG_TIMELINE_SUPPORT = 2;
        const LOCAL_STORAGE_DEFAULT_TAB_KEY = "React::DevTools::defaultTab";
        const LOCAL_STORAGE_COMPONENT_FILTER_PREFERENCES_KEY = "React::DevTools::componentFilters";
        const SESSION_STORAGE_LAST_SELECTION_KEY = "React::DevTools::lastSelection";
        const LOCAL_STORAGE_OPEN_IN_EDITOR_URL = "React::DevTools::openInEditorUrl";
        const LOCAL_STORAGE_OPEN_IN_EDITOR_URL_PRESET = "React::DevTools::openInEditorUrlPreset";
        const LOCAL_STORAGE_PARSE_HOOK_NAMES_KEY = "React::DevTools::parseHookNames";
        const SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY = "React::DevTools::recordChangeDescriptions";
        const SESSION_STORAGE_RELOAD_AND_PROFILE_KEY = "React::DevTools::reloadAndProfile";
        const LOCAL_STORAGE_SHOULD_BREAK_ON_CONSOLE_ERRORS = "React::DevTools::breakOnConsoleErrors";
        const LOCAL_STORAGE_BROWSER_THEME = "React::DevTools::theme";
        const LOCAL_STORAGE_SHOULD_APPEND_COMPONENT_STACK_KEY = "React::DevTools::appendComponentStack";
        const LOCAL_STORAGE_SHOW_INLINE_WARNINGS_AND_ERRORS_KEY = "React::DevTools::showInlineWarningsAndErrors";
        const LOCAL_STORAGE_TRACE_UPDATES_ENABLED_KEY = "React::DevTools::traceUpdatesEnabled";
        const LOCAL_STORAGE_HIDE_CONSOLE_LOGS_IN_STRICT_MODE = "React::DevTools::hideConsoleLogsInStrictMode";
        const LOCAL_STORAGE_SUPPORTS_PROFILING_KEY = "React::DevTools::supportsProfiling";
        const PROFILER_EXPORT_VERSION = 5;
        const FIREFOX_CONSOLE_DIMMING_COLOR = "color: rgba(124, 124, 124, 0.75)";
        const ANSI_STYLE_DIMMING_TEMPLATE = "\x1B[2;38;2;124;124;124m%s\x1B[0m";
        const ANSI_STYLE_DIMMING_TEMPLATE_WITH_COMPONENT_STACK = "\x1B[2;38;2;124;124;124m%s %s\x1B[0m";
        ;
        const ElementTypeClass = 1;
        const ElementTypeContext = 2;
        const ElementTypeFunction = 5;
        const ElementTypeForwardRef = 6;
        const ElementTypeHostComponent = 7;
        const ElementTypeMemo = 8;
        const ElementTypeOtherOrUnknown = 9;
        const ElementTypeProfiler = 10;
        const types_ElementTypeRoot = 11;
        const ElementTypeSuspense = 12;
        const ElementTypeSuspenseList = 13;
        const ElementTypeTracingMarker = 14;
        const ComponentFilterElementType = 1;
        const ComponentFilterDisplayName = 2;
        const ComponentFilterLocation = 3;
        const ComponentFilterHOC = 4;
        const StrictMode = 1;
        var lru_cache = __webpack_require__(3018);
        var lru_cache_default = /* @__PURE__ */ __webpack_require__.n(lru_cache);
        ;
        const external_react_is_namespaceObject = require_react_is();
        ;
        const enableComponentStackLocations = true;
        const favorSafetyOverHydrationPerf = true;
        const enableAsyncActions = true;
        const disableSchedulerTimeoutInWorkLoop = false;
        const enableDeferRootSchedulingToMicrotask = true;
        const disableDefaultPropsExceptForClasses = true;
        const enableSuspenseCallback = false;
        const enableScopeAPI = false;
        const enableCreateEventHandleAPI = false;
        const enableLegacyFBSupport = false;
        const enableCache = true;
        const enableLegacyCache = (
          /* unused pure expression or super */
          null
        );
        const enableBinaryFlight = true;
        const enableFlightReadableStream = true;
        const enableAsyncIterableChildren = (
          /* unused pure expression or super */
          null
        );
        const enableTaint = (
          /* unused pure expression or super */
          null
        );
        const enablePostpone = (
          /* unused pure expression or super */
          null
        );
        const enableTransitionTracing = false;
        const enableLazyContextPropagation = false;
        const enableLegacyHidden = false;
        const enableSuspenseAvoidThisFallback = false;
        const enableSuspenseAvoidThisFallbackFizz = false;
        const enableCPUSuspense = (
          /* unused pure expression or super */
          null
        );
        const enableUseMemoCacheHook = true;
        const enableNoCloningMemoCache = false;
        const enableUseEffectEventHook = (
          /* unused pure expression or super */
          null
        );
        const enableFizzExternalRuntime = (
          /* unused pure expression or super */
          null
        );
        const alwaysThrottleRetries = true;
        const passChildrenWhenCloningPersistedNodes = false;
        const enableServerComponentLogs = (
          /* unused pure expression or super */
          null
        );
        const enableAddPropertiesFastPath = false;
        const enableOwnerStacks = (
          /* unused pure expression or super */
          null
        );
        const enableShallowPropDiffing = false;
        const enableRetryLaneExpiration = false;
        const retryLaneExpirationMs = 5e3;
        const syncLaneExpirationMs = 250;
        const transitionLaneExpirationMs = 5e3;
        const renameElementSymbol = true;
        const disableLegacyContext = true;
        const useModernStrictMode = true;
        const disableIEWorkarounds = true;
        const enableFilterEmptyStringAttributesDOM = true;
        const disableClientCache = true;
        const enableInfiniteRenderLoopDetection = true;
        const enableRefAsProp = true;
        const disableStringRefs = true;
        const enableFastJSX = true;
        const enableReactTestRendererWarning = true;
        const disableLegacyMode = true;
        const enableRenderableContext = true;
        const enableUseDeferredValueInitialArg = true;
        const forceConcurrentByDefaultForTesting = false;
        const allowConcurrentByDefault = false;
        const disableCommentsAsDOMContainers = true;
        const enableTrustedTypesIntegration = false;
        const disableInputAttributeSyncing = false;
        const disableTextareaChildren = false;
        const enableSchedulingProfiler = (
          /* unused pure expression or super */
          null
        );
        const debugRenderPhaseSideEffectsForStrictMode = (
          /* unused pure expression or super */
          null
        );
        const enableProfilerTimer = (
          /* unused pure expression or super */
          null
        );
        const enableProfilerCommitHooks = (
          /* unused pure expression or super */
          null
        );
        const enableProfilerNestedUpdatePhase = (
          /* unused pure expression or super */
          null
        );
        const enableDebugTracing = false;
        const enableAsyncDebugInfo = (
          /* unused pure expression or super */
          null
        );
        const enableUpdaterTracking = (
          /* unused pure expression or super */
          null
        );
        const enableGetInspectorDataForInstanceInProduction = false;
        const consoleManagedByDevToolsDuringStrictMode = true;
        const enableDO_NOT_USE_disableStrictPassiveEffect = false;
        ;
        const REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element");
        const REACT_ELEMENT_TYPE = renameElementSymbol ? Symbol.for("react.transitional.element") : REACT_LEGACY_ELEMENT_TYPE;
        const REACT_PORTAL_TYPE = Symbol.for("react.portal");
        const REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        const REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        const REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        const REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        const REACT_CONSUMER_TYPE = Symbol.for("react.consumer");
        const REACT_CONTEXT_TYPE = Symbol.for("react.context");
        const REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        const REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        const REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        const REACT_MEMO_TYPE = Symbol.for("react.memo");
        const REACT_LAZY_TYPE = Symbol.for("react.lazy");
        const REACT_SCOPE_TYPE = Symbol.for("react.scope");
        const REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        const REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        const REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        const REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
        const REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel");
        const REACT_POSTPONE_TYPE = Symbol.for("react.postpone");
        const MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        const FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          const maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        const ASYNC_ITERATOR = Symbol.asyncIterator;
        ;
        function localStorageGetItem(key) {
          try {
            return localStorage.getItem(key);
          } catch (error) {
            return null;
          }
        }
        function localStorageRemoveItem(key) {
          try {
            localStorage.removeItem(key);
          } catch (error) {
          }
        }
        function localStorageSetItem(key, value) {
          try {
            return localStorage.setItem(key, value);
          } catch (error) {
          }
        }
        function sessionStorageGetItem(key) {
          try {
            return sessionStorage.getItem(key);
          } catch (error) {
            return null;
          }
        }
        function sessionStorageRemoveItem(key) {
          try {
            sessionStorage.removeItem(key);
          } catch (error) {
          }
        }
        function sessionStorageSetItem(key, value) {
          try {
            return sessionStorage.setItem(key, value);
          } catch (error) {
          }
        }
        ;
        const meta = {
          inspectable: Symbol("inspectable"),
          inspected: Symbol("inspected"),
          name: Symbol("name"),
          preview_long: Symbol("preview_long"),
          preview_short: Symbol("preview_short"),
          readonly: Symbol("readonly"),
          size: Symbol("size"),
          type: Symbol("type"),
          unserializable: Symbol("unserializable")
        };
        const LEVEL_THRESHOLD = 2;
        function createDehydrated(type, inspectable, data, cleaned, path) {
          cleaned.push(path);
          const dehydrated = {
            inspectable,
            type,
            preview_long: formatDataForPreview(data, true),
            preview_short: formatDataForPreview(data, false),
            name: typeof data.constructor !== "function" || typeof data.constructor.name !== "string" || data.constructor.name === "Object" ? "" : data.constructor.name
          };
          if (type === "array" || type === "typed_array") {
            dehydrated.size = data.length;
          } else if (type === "object") {
            dehydrated.size = Object.keys(data).length;
          }
          if (type === "iterator" || type === "typed_array") {
            dehydrated.readonly = true;
          }
          return dehydrated;
        }
        function dehydrate(data, cleaned, unserializable, path, isPathAllowed, level = 0) {
          const type = getDataType(data);
          let isPathAllowedCheck;
          switch (type) {
            case "html_element":
              cleaned.push(path);
              return {
                inspectable: false,
                preview_short: formatDataForPreview(data, false),
                preview_long: formatDataForPreview(data, true),
                name: data.tagName,
                type
              };
            case "function":
              cleaned.push(path);
              return {
                inspectable: false,
                preview_short: formatDataForPreview(data, false),
                preview_long: formatDataForPreview(data, true),
                name: typeof data.name === "function" || !data.name ? "function" : data.name,
                type
              };
            case "string":
              isPathAllowedCheck = isPathAllowed(path);
              if (isPathAllowedCheck) {
                return data;
              } else {
                return data.length <= 500 ? data : data.slice(0, 500) + "...";
              }
            case "bigint":
              cleaned.push(path);
              return {
                inspectable: false,
                preview_short: formatDataForPreview(data, false),
                preview_long: formatDataForPreview(data, true),
                name: data.toString(),
                type
              };
            case "symbol":
              cleaned.push(path);
              return {
                inspectable: false,
                preview_short: formatDataForPreview(data, false),
                preview_long: formatDataForPreview(data, true),
                name: data.toString(),
                type
              };
            case "react_element":
              cleaned.push(path);
              return {
                inspectable: false,
                preview_short: formatDataForPreview(data, false),
                preview_long: formatDataForPreview(data, true),
                name: getDisplayNameForReactElement(data) || "Unknown",
                type
              };
            case "array_buffer":
            case "data_view":
              cleaned.push(path);
              return {
                inspectable: false,
                preview_short: formatDataForPreview(data, false),
                preview_long: formatDataForPreview(data, true),
                name: type === "data_view" ? "DataView" : "ArrayBuffer",
                size: data.byteLength,
                type
              };
            case "array":
              isPathAllowedCheck = isPathAllowed(path);
              if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {
                return createDehydrated(type, true, data, cleaned, path);
              }
              return data.map((item, i2) => dehydrate(item, cleaned, unserializable, path.concat([i2]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1));
            case "html_all_collection":
            case "typed_array":
            case "iterator":
              isPathAllowedCheck = isPathAllowed(path);
              if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {
                return createDehydrated(type, true, data, cleaned, path);
              } else {
                const unserializableValue = {
                  unserializable: true,
                  type,
                  readonly: true,
                  size: type === "typed_array" ? data.length : void 0,
                  preview_short: formatDataForPreview(data, false),
                  preview_long: formatDataForPreview(data, true),
                  name: typeof data.constructor !== "function" || typeof data.constructor.name !== "string" || data.constructor.name === "Object" ? "" : data.constructor.name
                };
                Array.from(data).forEach((item, i2) => unserializableValue[i2] = dehydrate(item, cleaned, unserializable, path.concat([i2]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1));
                unserializable.push(path);
                return unserializableValue;
              }
            case "opaque_iterator":
              cleaned.push(path);
              return {
                inspectable: false,
                preview_short: formatDataForPreview(data, false),
                preview_long: formatDataForPreview(data, true),
                name: data[Symbol.toStringTag],
                type
              };
            case "date":
              cleaned.push(path);
              return {
                inspectable: false,
                preview_short: formatDataForPreview(data, false),
                preview_long: formatDataForPreview(data, true),
                name: data.toString(),
                type
              };
            case "regexp":
              cleaned.push(path);
              return {
                inspectable: false,
                preview_short: formatDataForPreview(data, false),
                preview_long: formatDataForPreview(data, true),
                name: data.toString(),
                type
              };
            case "object":
              isPathAllowedCheck = isPathAllowed(path);
              if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {
                return createDehydrated(type, true, data, cleaned, path);
              } else {
                const object = {};
                getAllEnumerableKeys(data).forEach((key) => {
                  const name = key.toString();
                  object[name] = dehydrate(data[key], cleaned, unserializable, path.concat([name]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1);
                });
                return object;
              }
            case "class_instance":
              isPathAllowedCheck = isPathAllowed(path);
              if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {
                return createDehydrated(type, true, data, cleaned, path);
              }
              const value = {
                unserializable: true,
                type,
                readonly: true,
                preview_short: formatDataForPreview(data, false),
                preview_long: formatDataForPreview(data, true),
                name: typeof data.constructor !== "function" || typeof data.constructor.name !== "string" ? "" : data.constructor.name
              };
              getAllEnumerableKeys(data).forEach((key) => {
                const keyAsString = key.toString();
                value[keyAsString] = dehydrate(data[key], cleaned, unserializable, path.concat([keyAsString]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1);
              });
              unserializable.push(path);
              return value;
            case "infinity":
            case "nan":
            case "undefined":
              cleaned.push(path);
              return {
                type
              };
            default:
              return data;
          }
        }
        function hydration_fillInPath(object, data, path, value) {
          const target = getInObject(object, path);
          if (target != null) {
            if (!target[meta.unserializable]) {
              delete target[meta.inspectable];
              delete target[meta.inspected];
              delete target[meta.name];
              delete target[meta.preview_long];
              delete target[meta.preview_short];
              delete target[meta.readonly];
              delete target[meta.size];
              delete target[meta.type];
            }
          }
          if (value !== null && data.unserializable.length > 0) {
            const unserializablePath = data.unserializable[0];
            let isMatch = unserializablePath.length === path.length;
            for (let i2 = 0; i2 < path.length; i2++) {
              if (path[i2] !== unserializablePath[i2]) {
                isMatch = false;
                break;
              }
            }
            if (isMatch) {
              upgradeUnserializable(value, value);
            }
          }
          setInObject(object, path, value);
        }
        function hydrate(object, cleaned, unserializable) {
          cleaned.forEach((path) => {
            const length = path.length;
            const last = path[length - 1];
            const parent = getInObject(object, path.slice(0, length - 1));
            if (!parent || !parent.hasOwnProperty(last)) {
              return;
            }
            const value = parent[last];
            if (!value) {
              return;
            } else if (value.type === "infinity") {
              parent[last] = Infinity;
            } else if (value.type === "nan") {
              parent[last] = NaN;
            } else if (value.type === "undefined") {
              parent[last] = void 0;
            } else {
              const replaced = {};
              replaced[meta.inspectable] = !!value.inspectable;
              replaced[meta.inspected] = false;
              replaced[meta.name] = value.name;
              replaced[meta.preview_long] = value.preview_long;
              replaced[meta.preview_short] = value.preview_short;
              replaced[meta.size] = value.size;
              replaced[meta.readonly] = !!value.readonly;
              replaced[meta.type] = value.type;
              parent[last] = replaced;
            }
          });
          unserializable.forEach((path) => {
            const length = path.length;
            const last = path[length - 1];
            const parent = getInObject(object, path.slice(0, length - 1));
            if (!parent || !parent.hasOwnProperty(last)) {
              return;
            }
            const node = parent[last];
            const replacement = {
              ...node
            };
            upgradeUnserializable(replacement, node);
            parent[last] = replacement;
          });
          return object;
        }
        function upgradeUnserializable(destination, source) {
          Object.defineProperties(destination, {
            // $FlowFixMe[invalid-computed-prop]
            [meta.inspected]: {
              configurable: true,
              enumerable: false,
              value: !!source.inspected
            },
            // $FlowFixMe[invalid-computed-prop]
            [meta.name]: {
              configurable: true,
              enumerable: false,
              value: source.name
            },
            // $FlowFixMe[invalid-computed-prop]
            [meta.preview_long]: {
              configurable: true,
              enumerable: false,
              value: source.preview_long
            },
            // $FlowFixMe[invalid-computed-prop]
            [meta.preview_short]: {
              configurable: true,
              enumerable: false,
              value: source.preview_short
            },
            // $FlowFixMe[invalid-computed-prop]
            [meta.size]: {
              configurable: true,
              enumerable: false,
              value: source.size
            },
            // $FlowFixMe[invalid-computed-prop]
            [meta.readonly]: {
              configurable: true,
              enumerable: false,
              value: !!source.readonly
            },
            // $FlowFixMe[invalid-computed-prop]
            [meta.type]: {
              configurable: true,
              enumerable: false,
              value: source.type
            },
            // $FlowFixMe[invalid-computed-prop]
            [meta.unserializable]: {
              configurable: true,
              enumerable: false,
              value: !!source.unserializable
            }
          });
          delete destination.inspected;
          delete destination.name;
          delete destination.preview_long;
          delete destination.preview_short;
          delete destination.size;
          delete destination.readonly;
          delete destination.type;
          delete destination.unserializable;
        }
        ;
        const isArray_isArray = Array.isArray;
        const src_isArray = isArray_isArray;
        ;
        const utils_hasOwnProperty = Object.prototype.hasOwnProperty;
        const cachedDisplayNames = /* @__PURE__ */ new WeakMap();
        const encodedStringCache = new (lru_cache_default())({
          max: 1e3
        });
        function alphaSortKeys(a, b) {
          if (a.toString() > b.toString()) {
            return 1;
          } else if (b.toString() > a.toString()) {
            return -1;
          } else {
            return 0;
          }
        }
        function utils_getAllEnumerableKeys(obj) {
          const keys = /* @__PURE__ */ new Set();
          let current = obj;
          while (current != null) {
            const currentKeys = [...Object.keys(current), ...Object.getOwnPropertySymbols(current)];
            const descriptors = Object.getOwnPropertyDescriptors(current);
            currentKeys.forEach((key) => {
              if (descriptors[key].enumerable) {
                keys.add(key);
              }
            });
            current = Object.getPrototypeOf(current);
          }
          return keys;
        }
        function getWrappedDisplayName(outerType, innerType, wrapperName, fallbackName) {
          const displayName = outerType?.displayName;
          return displayName || `${wrapperName}(${getDisplayName(innerType, fallbackName)})`;
        }
        function getDisplayName(type, fallbackName = "Anonymous") {
          const nameFromCache = cachedDisplayNames.get(type);
          if (nameFromCache != null) {
            return nameFromCache;
          }
          let displayName = fallbackName;
          if (typeof type.displayName === "string") {
            displayName = type.displayName;
          } else if (typeof type.name === "string" && type.name !== "") {
            displayName = type.name;
          }
          cachedDisplayNames.set(type, displayName);
          return displayName;
        }
        let uidCounter = 0;
        function getUID() {
          return ++uidCounter;
        }
        function utfDecodeStringWithRanges(array, left, right) {
          let string = "";
          for (let i2 = left; i2 <= right; i2++) {
            string += String.fromCodePoint(array[i2]);
          }
          return string;
        }
        function surrogatePairToCodePoint(charCode1, charCode2) {
          return ((charCode1 & 1023) << 10) + (charCode2 & 1023) + 65536;
        }
        function utfEncodeString(string) {
          const cached = encodedStringCache.get(string);
          if (cached !== void 0) {
            return cached;
          }
          const encoded = [];
          let i2 = 0;
          let charCode;
          while (i2 < string.length) {
            charCode = string.charCodeAt(i2);
            if ((charCode & 63488) === 55296) {
              encoded.push(surrogatePairToCodePoint(charCode, string.charCodeAt(++i2)));
            } else {
              encoded.push(charCode);
            }
            ++i2;
          }
          encodedStringCache.set(string, encoded);
          return encoded;
        }
        function printOperationsArray(operations) {
          const rendererID = operations[0];
          const rootID = operations[1];
          const logs = [`operations for renderer:${rendererID} and root:${rootID}`];
          let i2 = 2;
          const stringTable = [
            null
            // ID = 0 corresponds to the null string.
          ];
          const stringTableSize = operations[i2++];
          const stringTableEnd = i2 + stringTableSize;
          while (i2 < stringTableEnd) {
            const nextLength = operations[i2++];
            const nextString = utfDecodeStringWithRanges(operations, i2, i2 + nextLength - 1);
            stringTable.push(nextString);
            i2 += nextLength;
          }
          while (i2 < operations.length) {
            const operation = operations[i2];
            switch (operation) {
              case TREE_OPERATION_ADD: {
                const id3 = operations[i2 + 1];
                const type = operations[i2 + 2];
                i2 += 3;
                if (type === ElementTypeRoot) {
                  logs.push(`Add new root node ${id3}`);
                  i2++;
                  i2++;
                  i2++;
                  i2++;
                } else {
                  const parentID = operations[i2];
                  i2++;
                  i2++;
                  const displayNameStringID = operations[i2];
                  const displayName = stringTable[displayNameStringID];
                  i2++;
                  i2++;
                  logs.push(`Add node ${id3} (${displayName || "null"}) as child of ${parentID}`);
                }
                break;
              }
              case TREE_OPERATION_REMOVE: {
                const removeLength = operations[i2 + 1];
                i2 += 2;
                for (let removeIndex = 0; removeIndex < removeLength; removeIndex++) {
                  const id3 = operations[i2];
                  i2 += 1;
                  logs.push(`Remove node ${id3}`);
                }
                break;
              }
              case TREE_OPERATION_REMOVE_ROOT: {
                i2 += 1;
                logs.push(`Remove root ${rootID}`);
                break;
              }
              case TREE_OPERATION_SET_SUBTREE_MODE: {
                const id3 = operations[i2 + 1];
                const mode = operations[i2 + 1];
                i2 += 3;
                logs.push(`Mode ${mode} set for subtree with root ${id3}`);
                break;
              }
              case TREE_OPERATION_REORDER_CHILDREN: {
                const id3 = operations[i2 + 1];
                const numChildren = operations[i2 + 2];
                i2 += 3;
                const children = operations.slice(i2, i2 + numChildren);
                i2 += numChildren;
                logs.push(`Re-order node ${id3} children ${children.join(",")}`);
                break;
              }
              case TREE_OPERATION_UPDATE_TREE_BASE_DURATION:
                i2 += 3;
                break;
              case TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS:
                const id2 = operations[i2 + 1];
                const numErrors = operations[i2 + 2];
                const numWarnings = operations[i2 + 3];
                i2 += 4;
                logs.push(`Node ${id2} has ${numErrors} errors and ${numWarnings} warnings`);
                break;
              default:
                throw Error(`Unsupported Bridge operation "${operation}"`);
            }
          }
          console.log(logs.join("\n  "));
        }
        function getDefaultComponentFilters() {
          return [{
            type: ComponentFilterElementType,
            value: ElementTypeHostComponent,
            isEnabled: true
          }];
        }
        function getSavedComponentFilters() {
          try {
            const raw = localStorageGetItem(LOCAL_STORAGE_COMPONENT_FILTER_PREFERENCES_KEY);
            if (raw != null) {
              const parsedFilters = JSON.parse(raw);
              return filterOutLocationComponentFilters(parsedFilters);
            }
          } catch (error) {
          }
          return getDefaultComponentFilters();
        }
        function setSavedComponentFilters(componentFilters) {
          localStorageSetItem(LOCAL_STORAGE_COMPONENT_FILTER_PREFERENCES_KEY, JSON.stringify(filterOutLocationComponentFilters(componentFilters)));
        }
        function filterOutLocationComponentFilters(componentFilters) {
          if (!Array.isArray(componentFilters)) {
            return componentFilters;
          }
          return componentFilters.filter((f) => f.type !== ComponentFilterLocation);
        }
        function parseBool(s) {
          if (s === "true") {
            return true;
          }
          if (s === "false") {
            return false;
          }
        }
        function castBool(v) {
          if (v === true || v === false) {
            return v;
          }
        }
        function castBrowserTheme(v) {
          if (v === "light" || v === "dark" || v === "auto") {
            return v;
          }
        }
        function getAppendComponentStack() {
          const raw = localStorageGetItem(LOCAL_STORAGE_SHOULD_APPEND_COMPONENT_STACK_KEY);
          return parseBool(raw) ?? true;
        }
        function getBreakOnConsoleErrors() {
          const raw = localStorageGetItem(LOCAL_STORAGE_SHOULD_BREAK_ON_CONSOLE_ERRORS);
          return parseBool(raw) ?? false;
        }
        function getHideConsoleLogsInStrictMode() {
          const raw = localStorageGetItem(LOCAL_STORAGE_HIDE_CONSOLE_LOGS_IN_STRICT_MODE);
          return parseBool(raw) ?? false;
        }
        function getShowInlineWarningsAndErrors() {
          const raw = localStorageGetItem(LOCAL_STORAGE_SHOW_INLINE_WARNINGS_AND_ERRORS_KEY);
          return parseBool(raw) ?? true;
        }
        function getDefaultOpenInEditorURL() {
          return false ? 0 : "";
        }
        function getOpenInEditorURL() {
          try {
            const raw = localStorageGetItem(LOCAL_STORAGE_OPEN_IN_EDITOR_URL);
            if (raw != null) {
              return JSON.parse(raw);
            }
          } catch (error) {
          }
          return getDefaultOpenInEditorURL();
        }
        function parseElementDisplayNameFromBackend(displayName, type) {
          if (displayName === null) {
            return {
              formattedDisplayName: null,
              hocDisplayNames: null,
              compiledWithForget: false
            };
          }
          if (displayName.startsWith("Forget(")) {
            const displayNameWithoutForgetWrapper = displayName.slice(7, displayName.length - 1);
            const {
              formattedDisplayName,
              hocDisplayNames: hocDisplayNames2
            } = parseElementDisplayNameFromBackend(displayNameWithoutForgetWrapper, type);
            return {
              formattedDisplayName,
              hocDisplayNames: hocDisplayNames2,
              compiledWithForget: true
            };
          }
          let hocDisplayNames = null;
          switch (type) {
            case ElementTypeClass:
            case ElementTypeForwardRef:
            case ElementTypeFunction:
            case ElementTypeMemo:
              if (displayName.indexOf("(") >= 0) {
                const matches = displayName.match(/[^()]+/g);
                if (matches != null) {
                  displayName = matches.pop();
                  hocDisplayNames = matches;
                }
              }
              break;
            default:
              break;
          }
          return {
            formattedDisplayName: displayName,
            hocDisplayNames,
            compiledWithForget: false
          };
        }
        function shallowDiffers(prev, next) {
          for (const attribute in prev) {
            if (!(attribute in next)) {
              return true;
            }
          }
          for (const attribute in next) {
            if (prev[attribute] !== next[attribute]) {
              return true;
            }
          }
          return false;
        }
        function getInObject(object, path) {
          return path.reduce((reduced, attr) => {
            if (reduced) {
              if (utils_hasOwnProperty.call(reduced, attr)) {
                return reduced[attr];
              }
              if (typeof reduced[Symbol.iterator] === "function") {
                return Array.from(reduced)[attr];
              }
            }
            return null;
          }, object);
        }
        function deletePathInObject(object, path) {
          const length = path.length;
          const last = path[length - 1];
          if (object != null) {
            const parent = getInObject(object, path.slice(0, length - 1));
            if (parent) {
              if (isArray(parent)) {
                parent.splice(last, 1);
              } else {
                delete parent[last];
              }
            }
          }
        }
        function renamePathInObject(object, oldPath, newPath) {
          const length = oldPath.length;
          if (object != null) {
            const parent = getInObject(object, oldPath.slice(0, length - 1));
            if (parent) {
              const lastOld = oldPath[length - 1];
              const lastNew = newPath[length - 1];
              parent[lastNew] = parent[lastOld];
              if (isArray(parent)) {
                parent.splice(lastOld, 1);
              } else {
                delete parent[lastOld];
              }
            }
          }
        }
        function setInObject(object, path, value) {
          const length = path.length;
          const last = path[length - 1];
          if (object != null) {
            const parent = getInObject(object, path.slice(0, length - 1));
            if (parent) {
              parent[last] = value;
            }
          }
        }
        function utils_getDataType(data) {
          if (data === null) {
            return "null";
          } else if (data === void 0) {
            return "undefined";
          }
          if ((0, external_react_is_namespaceObject.isElement)(data)) {
            return "react_element";
          }
          if (typeof HTMLElement !== "undefined" && data instanceof HTMLElement) {
            return "html_element";
          }
          const type = typeof data;
          switch (type) {
            case "bigint":
              return "bigint";
            case "boolean":
              return "boolean";
            case "function":
              return "function";
            case "number":
              if (Number.isNaN(data)) {
                return "nan";
              } else if (!Number.isFinite(data)) {
                return "infinity";
              } else {
                return "number";
              }
            case "object":
              if (src_isArray(data)) {
                return "array";
              } else if (ArrayBuffer.isView(data)) {
                return utils_hasOwnProperty.call(data.constructor, "BYTES_PER_ELEMENT") ? "typed_array" : "data_view";
              } else if (data.constructor && data.constructor.name === "ArrayBuffer") {
                return "array_buffer";
              } else if (typeof data[Symbol.iterator] === "function") {
                const iterator = data[Symbol.iterator]();
                if (!iterator) {
                } else {
                  return iterator === data ? "opaque_iterator" : "iterator";
                }
              } else if (data.constructor && data.constructor.name === "RegExp") {
                return "regexp";
              } else {
                const toStringValue = Object.prototype.toString.call(data);
                if (toStringValue === "[object Date]") {
                  return "date";
                } else if (toStringValue === "[object HTMLAllCollection]") {
                  return "html_all_collection";
                }
              }
              if (!isPlainObject(data)) {
                return "class_instance";
              }
              return "object";
            case "string":
              return "string";
            case "symbol":
              return "symbol";
            case "undefined":
              if (
                // $FlowFixMe[method-unbinding]
                Object.prototype.toString.call(data) === "[object HTMLAllCollection]"
              ) {
                return "html_all_collection";
              }
              return "undefined";
            default:
              return "unknown";
          }
        }
        function typeOfWithLegacyElementSymbol(object) {
          if (typeof object === "object" && object !== null) {
            const $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_LEGACY_ELEMENT_TYPE:
                const type = object.type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return type;
                  default:
                    const $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                        return $$typeofType;
                      case REACT_CONSUMER_TYPE:
                        if (enableRenderableContext) {
                          return $$typeofType;
                        }
                      case REACT_PROVIDER_TYPE:
                        if (!enableRenderableContext) {
                          return $$typeofType;
                        }
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        function utils_getDisplayNameForReactElement(element) {
          const elementType = (0, external_react_is_namespaceObject.typeOf)(element) || typeOfWithLegacyElementSymbol(element);
          switch (elementType) {
            case external_react_is_namespaceObject.ContextConsumer:
              return "ContextConsumer";
            case external_react_is_namespaceObject.ContextProvider:
              return "ContextProvider";
            case external_react_is_namespaceObject.ForwardRef:
              return "ForwardRef";
            case external_react_is_namespaceObject.Fragment:
              return "Fragment";
            case external_react_is_namespaceObject.Lazy:
              return "Lazy";
            case external_react_is_namespaceObject.Memo:
              return "Memo";
            case external_react_is_namespaceObject.Portal:
              return "Portal";
            case external_react_is_namespaceObject.Profiler:
              return "Profiler";
            case external_react_is_namespaceObject.StrictMode:
              return "StrictMode";
            case external_react_is_namespaceObject.Suspense:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
            case REACT_TRACING_MARKER_TYPE:
              return "TracingMarker";
            default:
              const {
                type
              } = element;
              if (typeof type === "string") {
                return type;
              } else if (typeof type === "function") {
                return getDisplayName(type, "Anonymous");
              } else if (type != null) {
                return "NotImplementedInDevtools";
              } else {
                return "Element";
              }
          }
        }
        const MAX_PREVIEW_STRING_LENGTH = 50;
        function truncateForDisplay(string, length = MAX_PREVIEW_STRING_LENGTH) {
          if (string.length > length) {
            return string.slice(0, length) + "\u2026";
          } else {
            return string;
          }
        }
        function utils_formatDataForPreview(data, showFormattedValue) {
          if (data != null && utils_hasOwnProperty.call(data, meta.type)) {
            return showFormattedValue ? data[meta.preview_long] : data[meta.preview_short];
          }
          const type = utils_getDataType(data);
          switch (type) {
            case "html_element":
              return `<${truncateForDisplay(data.tagName.toLowerCase())} />`;
            case "function":
              return truncateForDisplay(`\u0192 ${typeof data.name === "function" ? "" : data.name}() {}`);
            case "string":
              return `"${data}"`;
            case "bigint":
              return truncateForDisplay(data.toString() + "n");
            case "regexp":
              return truncateForDisplay(data.toString());
            case "symbol":
              return truncateForDisplay(data.toString());
            case "react_element":
              return `<${truncateForDisplay(utils_getDisplayNameForReactElement(data) || "Unknown")} />`;
            case "array_buffer":
              return `ArrayBuffer(${data.byteLength})`;
            case "data_view":
              return `DataView(${data.buffer.byteLength})`;
            case "array":
              if (showFormattedValue) {
                let formatted = "";
                for (let i2 = 0; i2 < data.length; i2++) {
                  if (i2 > 0) {
                    formatted += ", ";
                  }
                  formatted += utils_formatDataForPreview(data[i2], false);
                  if (formatted.length > MAX_PREVIEW_STRING_LENGTH) {
                    break;
                  }
                }
                return `[${truncateForDisplay(formatted)}]`;
              } else {
                const length = utils_hasOwnProperty.call(data, meta.size) ? data[meta.size] : data.length;
                return `Array(${length})`;
              }
            case "typed_array":
              const shortName = `${data.constructor.name}(${data.length})`;
              if (showFormattedValue) {
                let formatted = "";
                for (let i2 = 0; i2 < data.length; i2++) {
                  if (i2 > 0) {
                    formatted += ", ";
                  }
                  formatted += data[i2];
                  if (formatted.length > MAX_PREVIEW_STRING_LENGTH) {
                    break;
                  }
                }
                return `${shortName} [${truncateForDisplay(formatted)}]`;
              } else {
                return shortName;
              }
            case "iterator":
              const name = data.constructor.name;
              if (showFormattedValue) {
                const array = Array.from(data);
                let formatted = "";
                for (let i2 = 0; i2 < array.length; i2++) {
                  const entryOrEntries = array[i2];
                  if (i2 > 0) {
                    formatted += ", ";
                  }
                  if (src_isArray(entryOrEntries)) {
                    const key = utils_formatDataForPreview(entryOrEntries[0], true);
                    const value = utils_formatDataForPreview(entryOrEntries[1], false);
                    formatted += `${key} => ${value}`;
                  } else {
                    formatted += utils_formatDataForPreview(entryOrEntries, false);
                  }
                  if (formatted.length > MAX_PREVIEW_STRING_LENGTH) {
                    break;
                  }
                }
                return `${name}(${data.size}) {${truncateForDisplay(formatted)}}`;
              } else {
                return `${name}(${data.size})`;
              }
            case "opaque_iterator": {
              return data[Symbol.toStringTag];
            }
            case "date":
              return data.toString();
            case "class_instance":
              return data.constructor.name;
            case "object":
              if (showFormattedValue) {
                const keys = Array.from(utils_getAllEnumerableKeys(data)).sort(alphaSortKeys);
                let formatted = "";
                for (let i2 = 0; i2 < keys.length; i2++) {
                  const key = keys[i2];
                  if (i2 > 0) {
                    formatted += ", ";
                  }
                  formatted += `${key.toString()}: ${utils_formatDataForPreview(data[key], false)}`;
                  if (formatted.length > MAX_PREVIEW_STRING_LENGTH) {
                    break;
                  }
                }
                return `{${truncateForDisplay(formatted)}}`;
              } else {
                return "{\u2026}";
              }
            case "boolean":
            case "number":
            case "infinity":
            case "nan":
            case "null":
            case "undefined":
              return data;
            default:
              try {
                return truncateForDisplay(String(data));
              } catch (error) {
                return "unserializable";
              }
          }
        }
        const isPlainObject = (object) => {
          const objectPrototype = Object.getPrototypeOf(object);
          if (!objectPrototype)
            return true;
          const objectParentPrototype = Object.getPrototypeOf(objectPrototype);
          return !objectParentPrototype;
        };
        function backendToFrontendSerializedElementMapper(element) {
          const {
            formattedDisplayName,
            hocDisplayNames,
            compiledWithForget
          } = parseElementDisplayNameFromBackend(element.displayName, element.type);
          return {
            ...element,
            displayName: formattedDisplayName,
            hocDisplayNames,
            compiledWithForget
          };
        }
        function normalizeUrl(url) {
          return url.replace("/./", "/");
        }
        var dist = __webpack_require__(3804);
        var dist_default = /* @__PURE__ */ __webpack_require__.n(dist);
        ;
        function printElement(element, includeWeight = false) {
          let prefix = " ";
          if (element.children.length > 0) {
            prefix = element.isCollapsed ? "\u25B8" : "\u25BE";
          }
          let key = "";
          if (element.key !== null) {
            key = ` key="${element.key}"`;
          }
          let hocDisplayNames = null;
          if (element.hocDisplayNames !== null) {
            hocDisplayNames = [...element.hocDisplayNames];
          }
          const hocs = hocDisplayNames === null ? "" : ` [${hocDisplayNames.join("][")}]`;
          let suffix = "";
          if (includeWeight) {
            suffix = ` (${element.isCollapsed ? 1 : element.weight})`;
          }
          return `${"  ".repeat(element.depth + 1)}${prefix} <${element.displayName || "null"}${key}>${hocs}${suffix}`;
        }
        function printOwnersList(elements, includeWeight = false) {
          return elements.map((element) => printElement(element, includeWeight)).join("\n");
        }
        function printStore(store, includeWeight = false, state2 = null) {
          const snapshotLines = [];
          let rootWeight = 0;
          function printSelectedMarker(index) {
            if (state2 === null) {
              return "";
            }
            return state2.selectedElementIndex === index ? `\u2192` : " ";
          }
          function printErrorsAndWarnings(element) {
            const {
              errorCount,
              warningCount
            } = store.getErrorAndWarningCountForElementID(element.id);
            if (errorCount === 0 && warningCount === 0) {
              return "";
            }
            return ` ${errorCount > 0 ? "\u2715" : ""}${warningCount > 0 ? "\u26A0" : ""}`;
          }
          const ownerFlatTree = state2 !== null ? state2.ownerFlatTree : null;
          if (ownerFlatTree !== null) {
            snapshotLines.push("[owners]" + (includeWeight ? ` (${ownerFlatTree.length})` : ""));
            ownerFlatTree.forEach((element, index) => {
              const printedSelectedMarker = printSelectedMarker(index);
              const printedElement = printElement(element, false);
              const printedErrorsAndWarnings = printErrorsAndWarnings(element);
              snapshotLines.push(`${printedSelectedMarker}${printedElement}${printedErrorsAndWarnings}`);
            });
          } else {
            const errorsAndWarnings = store._errorsAndWarnings;
            if (errorsAndWarnings.size > 0) {
              let errorCount = 0;
              let warningCount = 0;
              errorsAndWarnings.forEach((entry) => {
                errorCount += entry.errorCount;
                warningCount += entry.warningCount;
              });
              snapshotLines.push(`\u2715 ${errorCount}, \u26A0 ${warningCount}`);
            }
            store.roots.forEach((rootID) => {
              const {
                weight
              } = store.getElementByID(rootID);
              const maybeWeightLabel = includeWeight ? ` (${weight})` : "";
              snapshotLines.push(`[root]${maybeWeightLabel}`);
              for (let i2 = rootWeight; i2 < rootWeight + weight; i2++) {
                const element = store.getElementAtIndex(i2);
                if (element == null) {
                  throw Error(`Could not find element at index "${i2}"`);
                }
                const printedSelectedMarker = printSelectedMarker(i2);
                const printedElement = printElement(element, includeWeight);
                const printedErrorsAndWarnings = printErrorsAndWarnings(element);
                snapshotLines.push(`${printedSelectedMarker}${printedElement}${printedErrorsAndWarnings}`);
              }
              rootWeight += weight;
            });
            if (rootWeight !== store.numElements) {
              throw Error(`Inconsistent Store state. Individual root weights ("${rootWeight}") do not match total weight ("${store.numElements}")`);
            }
            store.assertExpectedRootMapSizes();
          }
          return snapshotLines.join("\n");
        }
        function sanitizeForParse(value) {
          if (typeof value === "string") {
            if (value.length >= 2 && value.charAt(0) === "'" && value.charAt(value.length - 1) === "'") {
              return '"' + value.slice(1, value.length - 1) + '"';
            }
          }
          return value;
        }
        function smartParse(value) {
          switch (value) {
            case "Infinity":
              return Infinity;
            case "NaN":
              return NaN;
            case "undefined":
              return void 0;
            default:
              return dist_default().parse(sanitizeForParse(value));
          }
        }
        function smartStringify(value) {
          if (typeof value === "number") {
            if (Number.isNaN(value)) {
              return "NaN";
            } else if (!Number.isFinite(value)) {
              return "Infinity";
            }
          } else if (value === void 0) {
            return "undefined";
          }
          return JSON.stringify(value);
        }
        const STACK_DELIMETER = /\n\s+at /;
        const STACK_SOURCE_LOCATION = /([^\s]+) \((.+):(.+):(.+)\)/;
        function stackToComponentSources(stack) {
          const out = [];
          stack.split(STACK_DELIMETER).slice(1).forEach((entry) => {
            const match = STACK_SOURCE_LOCATION.exec(entry);
            if (match) {
              const [, component, url, row, column] = match;
              out.push([component, [url, parseInt(row, 10), parseInt(column, 10)]]);
            } else {
              out.push([entry, null]);
            }
          });
          return out;
        }
        ;
        const commitGradient = ["var(--color-commit-gradient-0)", "var(--color-commit-gradient-1)", "var(--color-commit-gradient-2)", "var(--color-commit-gradient-3)", "var(--color-commit-gradient-4)", "var(--color-commit-gradient-5)", "var(--color-commit-gradient-6)", "var(--color-commit-gradient-7)", "var(--color-commit-gradient-8)", "var(--color-commit-gradient-9)"];
        function prepareProfilingDataFrontendFromBackendAndStore(dataBackends, operationsByRootID, snapshotsByRootID) {
          const dataForRoots = /* @__PURE__ */ new Map();
          const timelineDataArray = [];
          dataBackends.forEach((dataBackend) => {
            const {
              timelineData
            } = dataBackend;
            if (timelineData != null) {
              const {
                batchUIDToMeasuresKeyValueArray,
                internalModuleSourceToRanges,
                laneToLabelKeyValueArray,
                laneToReactMeasureKeyValueArray,
                ...rest
              } = timelineData;
              timelineDataArray.push({
                ...rest,
                // Most of the data is safe to parse as-is,
                // but we need to convert the nested Arrays back to Maps.
                batchUIDToMeasuresMap: new Map(batchUIDToMeasuresKeyValueArray),
                internalModuleSourceToRanges: new Map(internalModuleSourceToRanges),
                laneToLabelMap: new Map(laneToLabelKeyValueArray),
                laneToReactMeasureMap: new Map(laneToReactMeasureKeyValueArray)
              });
            }
            dataBackend.dataForRoots.forEach(({
              commitData,
              displayName,
              initialTreeBaseDurations,
              rootID
            }) => {
              const operations = operationsByRootID.get(rootID);
              if (operations == null) {
                throw Error(`Could not find profiling operations for root "${rootID}"`);
              }
              const snapshots = snapshotsByRootID.get(rootID);
              if (snapshots == null) {
                throw Error(`Could not find profiling snapshots for root "${rootID}"`);
              }
              const convertedCommitData = commitData.map((commitDataBackend, commitIndex) => ({
                changeDescriptions: commitDataBackend.changeDescriptions != null ? new Map(commitDataBackend.changeDescriptions) : null,
                duration: commitDataBackend.duration,
                effectDuration: commitDataBackend.effectDuration,
                fiberActualDurations: new Map(commitDataBackend.fiberActualDurations),
                fiberSelfDurations: new Map(commitDataBackend.fiberSelfDurations),
                passiveEffectDuration: commitDataBackend.passiveEffectDuration,
                priorityLevel: commitDataBackend.priorityLevel,
                timestamp: commitDataBackend.timestamp,
                updaters: commitDataBackend.updaters !== null ? commitDataBackend.updaters.map(backendToFrontendSerializedElementMapper) : null
              }));
              dataForRoots.set(rootID, {
                commitData: convertedCommitData,
                displayName,
                initialTreeBaseDurations: new Map(initialTreeBaseDurations),
                operations,
                rootID,
                snapshots
              });
            });
          });
          return {
            dataForRoots,
            imported: false,
            timelineData: timelineDataArray
          };
        }
        function prepareProfilingDataFrontendFromExport(profilingDataExport) {
          const {
            version
          } = profilingDataExport;
          if (version !== PROFILER_EXPORT_VERSION) {
            throw Error(`Unsupported profile export version "${version}". Supported version is "${PROFILER_EXPORT_VERSION}".`);
          }
          const timelineData = profilingDataExport.timelineData ? profilingDataExport.timelineData.map(({
            batchUIDToMeasuresKeyValueArray,
            componentMeasures,
            duration,
            flamechart,
            internalModuleSourceToRanges,
            laneToLabelKeyValueArray,
            laneToReactMeasureKeyValueArray,
            nativeEvents,
            networkMeasures,
            otherUserTimingMarks,
            reactVersion,
            schedulingEvents,
            snapshots,
            snapshotHeight,
            startTime,
            suspenseEvents,
            thrownErrors
          }) => ({
            // Most of the data is safe to parse as-is,
            // but we need to convert the nested Arrays back to Maps.
            batchUIDToMeasuresMap: new Map(batchUIDToMeasuresKeyValueArray),
            componentMeasures,
            duration,
            flamechart,
            internalModuleSourceToRanges: new Map(internalModuleSourceToRanges),
            laneToLabelMap: new Map(laneToLabelKeyValueArray),
            laneToReactMeasureMap: new Map(laneToReactMeasureKeyValueArray),
            nativeEvents,
            networkMeasures,
            otherUserTimingMarks,
            reactVersion,
            schedulingEvents,
            snapshots,
            snapshotHeight,
            startTime,
            suspenseEvents,
            thrownErrors
          })) : [];
          const dataForRoots = /* @__PURE__ */ new Map();
          profilingDataExport.dataForRoots.forEach(({
            commitData,
            displayName,
            initialTreeBaseDurations,
            operations,
            rootID,
            snapshots
          }) => {
            dataForRoots.set(rootID, {
              commitData: commitData.map(({
                changeDescriptions,
                duration,
                effectDuration,
                fiberActualDurations,
                fiberSelfDurations,
                passiveEffectDuration,
                priorityLevel,
                timestamp,
                updaters
              }) => ({
                changeDescriptions: changeDescriptions != null ? new Map(changeDescriptions) : null,
                duration,
                effectDuration,
                fiberActualDurations: new Map(fiberActualDurations),
                fiberSelfDurations: new Map(fiberSelfDurations),
                passiveEffectDuration,
                priorityLevel,
                timestamp,
                updaters
              })),
              displayName,
              initialTreeBaseDurations: new Map(initialTreeBaseDurations),
              operations,
              rootID,
              snapshots: new Map(snapshots)
            });
          });
          return {
            dataForRoots,
            imported: true,
            timelineData
          };
        }
        function prepareProfilingDataExport(profilingDataFrontend) {
          const timelineData = profilingDataFrontend.timelineData.map(({
            batchUIDToMeasuresMap,
            componentMeasures,
            duration,
            flamechart,
            internalModuleSourceToRanges,
            laneToLabelMap,
            laneToReactMeasureMap,
            nativeEvents,
            networkMeasures,
            otherUserTimingMarks,
            reactVersion,
            schedulingEvents,
            snapshots,
            snapshotHeight,
            startTime,
            suspenseEvents,
            thrownErrors
          }) => ({
            // Most of the data is safe to serialize as-is,
            // but we need to convert the Maps to nested Arrays.
            batchUIDToMeasuresKeyValueArray: Array.from(batchUIDToMeasuresMap.entries()),
            componentMeasures,
            duration,
            flamechart,
            internalModuleSourceToRanges: Array.from(internalModuleSourceToRanges.entries()),
            laneToLabelKeyValueArray: Array.from(laneToLabelMap.entries()),
            laneToReactMeasureKeyValueArray: Array.from(laneToReactMeasureMap.entries()),
            nativeEvents,
            networkMeasures,
            otherUserTimingMarks,
            reactVersion,
            schedulingEvents,
            snapshots,
            snapshotHeight,
            startTime,
            suspenseEvents,
            thrownErrors
          }));
          const dataForRoots = [];
          profilingDataFrontend.dataForRoots.forEach(({
            commitData,
            displayName,
            initialTreeBaseDurations,
            operations,
            rootID,
            snapshots
          }) => {
            dataForRoots.push({
              commitData: commitData.map(({
                changeDescriptions,
                duration,
                effectDuration,
                fiberActualDurations,
                fiberSelfDurations,
                passiveEffectDuration,
                priorityLevel,
                timestamp,
                updaters
              }) => ({
                changeDescriptions: changeDescriptions != null ? Array.from(changeDescriptions.entries()) : null,
                duration,
                effectDuration,
                fiberActualDurations: Array.from(fiberActualDurations.entries()),
                fiberSelfDurations: Array.from(fiberSelfDurations.entries()),
                passiveEffectDuration,
                priorityLevel,
                timestamp,
                updaters
              })),
              displayName,
              initialTreeBaseDurations: Array.from(initialTreeBaseDurations.entries()),
              operations,
              rootID,
              snapshots: Array.from(snapshots.entries())
            });
          });
          return {
            version: PROFILER_EXPORT_VERSION,
            dataForRoots,
            timelineData
          };
        }
        const getGradientColor = (value) => {
          const maxIndex = commitGradient.length - 1;
          let index;
          if (Number.isNaN(value)) {
            index = 0;
          } else if (!Number.isFinite(value)) {
            index = maxIndex;
          } else {
            index = Math.max(0, Math.min(maxIndex, value)) * maxIndex;
          }
          return commitGradient[Math.round(index)];
        };
        const formatDuration = (duration) => Math.round(duration * 10) / 10 || "<0.1";
        const formatPercentage = (percentage) => Math.round(percentage * 100);
        const formatTime = (timestamp) => Math.round(Math.round(timestamp) / 100) / 10;
        const scale = (minValue, maxValue, minRange, maxRange) => (value, fallbackValue) => maxValue - minValue === 0 ? fallbackValue : (value - minValue) / (maxValue - minValue) * (maxRange - minRange);
        ;
        const debug = (methodName, ...args) => {
          if (__DEBUG__) {
            console.log(`%cCommitTreeBuilder %c${methodName}`, "color: pink; font-weight: bold;", "font-weight: bold;", ...args);
          }
        };
        const rootToCommitTreeMap = /* @__PURE__ */ new Map();
        function getCommitTree({
          commitIndex,
          profilerStore,
          rootID
        }) {
          if (!rootToCommitTreeMap.has(rootID)) {
            rootToCommitTreeMap.set(rootID, []);
          }
          const commitTrees = rootToCommitTreeMap.get(rootID);
          if (commitIndex < commitTrees.length) {
            return commitTrees[commitIndex];
          }
          const {
            profilingData
          } = profilerStore;
          if (profilingData === null) {
            throw Error(`No profiling data available`);
          }
          const dataForRoot = profilingData.dataForRoots.get(rootID);
          if (dataForRoot == null) {
            throw Error(`Could not find profiling data for root "${rootID}"`);
          }
          const {
            operations
          } = dataForRoot;
          if (operations.length <= commitIndex) {
            throw Error(`getCommitTree(): Invalid commit "${commitIndex}" for root "${rootID}". There are only "${operations.length}" commits.`);
          }
          let commitTree = null;
          for (let index = commitTrees.length; index <= commitIndex; index++) {
            if (index === 0) {
              const nodes = /* @__PURE__ */ new Map();
              recursivelyInitializeTree(rootID, 0, nodes, dataForRoot);
              if (operations != null && index < operations.length) {
                commitTree = updateTree({
                  nodes,
                  rootID
                }, operations[index]);
                if (__DEBUG__) {
                  __printTree(commitTree);
                }
                commitTrees.push(commitTree);
              }
            } else {
              const previousCommitTree = commitTrees[index - 1];
              commitTree = updateTree(previousCommitTree, operations[index]);
              if (__DEBUG__) {
                __printTree(commitTree);
              }
              commitTrees.push(commitTree);
            }
          }
          return commitTree;
        }
        function recursivelyInitializeTree(id2, parentID, nodes, dataForRoot) {
          const node = dataForRoot.snapshots.get(id2);
          if (node != null) {
            nodes.set(id2, {
              id: id2,
              children: node.children,
              displayName: node.displayName,
              hocDisplayNames: node.hocDisplayNames,
              key: node.key,
              parentID,
              treeBaseDuration: dataForRoot.initialTreeBaseDurations.get(id2),
              type: node.type,
              compiledWithForget: node.compiledWithForget
            });
            node.children.forEach((childID) => recursivelyInitializeTree(childID, id2, nodes, dataForRoot));
          }
        }
        function updateTree(commitTree, operations) {
          const nodes = new Map(commitTree.nodes);
          const getClonedNode = (id3) => {
            const clonedNode = Object.assign({}, nodes.get(id3));
            nodes.set(id3, clonedNode);
            return clonedNode;
          };
          let i2 = 2;
          let id2 = null;
          const stringTable = [
            null
            // ID = 0 corresponds to the null string.
          ];
          const stringTableSize = operations[i2++];
          const stringTableEnd = i2 + stringTableSize;
          while (i2 < stringTableEnd) {
            const nextLength = operations[i2++];
            const nextString = utfDecodeStringWithRanges(operations, i2, i2 + nextLength - 1);
            stringTable.push(nextString);
            i2 += nextLength;
          }
          while (i2 < operations.length) {
            const operation = operations[i2];
            switch (operation) {
              case constants_TREE_OPERATION_ADD: {
                id2 = operations[i2 + 1];
                const type = operations[i2 + 2];
                i2 += 3;
                if (nodes.has(id2)) {
                  throw new Error(`Commit tree already contains fiber "${id2}". This is a bug in React DevTools.`);
                }
                if (type === types_ElementTypeRoot) {
                  i2++;
                  i2++;
                  i2++;
                  i2++;
                  if (__DEBUG__) {
                    debug("Add", `new root fiber ${id2}`);
                  }
                  const node = {
                    children: [],
                    displayName: null,
                    hocDisplayNames: null,
                    id: id2,
                    key: null,
                    parentID: 0,
                    treeBaseDuration: 0,
                    // This will be updated by a subsequent operation
                    type,
                    compiledWithForget: false
                  };
                  nodes.set(id2, node);
                } else {
                  const parentID = operations[i2];
                  i2++;
                  i2++;
                  const displayNameStringID = operations[i2];
                  const displayName = stringTable[displayNameStringID];
                  i2++;
                  const keyStringID = operations[i2];
                  const key = stringTable[keyStringID];
                  i2++;
                  if (__DEBUG__) {
                    debug("Add", `fiber ${id2} (${displayName || "null"}) as child of ${parentID}`);
                  }
                  const parentNode = getClonedNode(parentID);
                  parentNode.children = parentNode.children.concat(id2);
                  const {
                    formattedDisplayName,
                    hocDisplayNames,
                    compiledWithForget
                  } = parseElementDisplayNameFromBackend(displayName, type);
                  const node = {
                    children: [],
                    displayName: formattedDisplayName,
                    hocDisplayNames,
                    id: id2,
                    key,
                    parentID,
                    treeBaseDuration: 0,
                    // This will be updated by a subsequent operation
                    type,
                    compiledWithForget
                  };
                  nodes.set(id2, node);
                }
                break;
              }
              case constants_TREE_OPERATION_REMOVE: {
                const removeLength = operations[i2 + 1];
                i2 += 2;
                for (let removeIndex = 0; removeIndex < removeLength; removeIndex++) {
                  id2 = operations[i2];
                  i2++;
                  if (!nodes.has(id2)) {
                    throw new Error(`Commit tree does not contain fiber "${id2}". This is a bug in React DevTools.`);
                  }
                  const node = getClonedNode(id2);
                  const parentID = node.parentID;
                  nodes.delete(id2);
                  if (!nodes.has(parentID)) {
                  } else {
                    const parentNode = getClonedNode(parentID);
                    if (__DEBUG__) {
                      debug("Remove", `fiber ${id2} from parent ${parentID}`);
                    }
                    parentNode.children = parentNode.children.filter((childID) => childID !== id2);
                  }
                }
                break;
              }
              case constants_TREE_OPERATION_REMOVE_ROOT: {
                throw Error("Operation REMOVE_ROOT is not supported while profiling.");
              }
              case constants_TREE_OPERATION_REORDER_CHILDREN: {
                id2 = operations[i2 + 1];
                const numChildren = operations[i2 + 2];
                const children = operations.slice(i2 + 3, i2 + 3 + numChildren);
                i2 = i2 + 3 + numChildren;
                if (__DEBUG__) {
                  debug("Re-order", `fiber ${id2} children ${children.join(",")}`);
                }
                const node = getClonedNode(id2);
                node.children = Array.from(children);
                break;
              }
              case constants_TREE_OPERATION_SET_SUBTREE_MODE: {
                id2 = operations[i2 + 1];
                const mode = operations[i2 + 1];
                i2 += 3;
                if (__DEBUG__) {
                  debug("Subtree mode", `Subtree with root ${id2} set to mode ${mode}`);
                }
                break;
              }
              case constants_TREE_OPERATION_UPDATE_TREE_BASE_DURATION: {
                id2 = operations[i2 + 1];
                const node = getClonedNode(id2);
                node.treeBaseDuration = operations[i2 + 2] / 1e3;
                if (__DEBUG__) {
                  debug("Update", `fiber ${id2} treeBaseDuration to ${node.treeBaseDuration}`);
                }
                i2 += 3;
                break;
              }
              case constants_TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS: {
                id2 = operations[i2 + 1];
                const numErrors = operations[i2 + 2];
                const numWarnings = operations[i2 + 3];
                i2 += 4;
                if (__DEBUG__) {
                  debug("Warnings and Errors update", `fiber ${id2} has ${numErrors} errors and ${numWarnings} warnings`);
                }
                break;
              }
              default:
                throw Error(`Unsupported Bridge operation "${operation}"`);
            }
          }
          return {
            nodes,
            rootID: commitTree.rootID
          };
        }
        function invalidateCommitTrees() {
          rootToCommitTreeMap.clear();
        }
        const __printTree = (commitTree) => {
          if (__DEBUG__) {
            const {
              nodes,
              rootID
            } = commitTree;
            console.group("__printTree()");
            const queue = [rootID, 0];
            while (queue.length > 0) {
              const id2 = queue.shift();
              const depth = queue.shift();
              const node = nodes.get(id2);
              if (node == null) {
                throw Error(`Could not find node with id "${id2}" in commit tree`);
              }
              console.log(`${"\u2022".repeat(depth)}${node.id}:${node.displayName || ""} ${node.key ? `key:"${node.key}"` : ""} (${node.treeBaseDuration})`);
              node.children.forEach((childID) => {
                queue.push(childID, depth + 1);
              });
            }
            console.groupEnd();
          }
        };
        ;
        const cachedChartData = /* @__PURE__ */ new Map();
        function getChartData({
          commitIndex,
          commitTree,
          profilerStore,
          rootID
        }) {
          const commitDatum = profilerStore.getCommitData(rootID, commitIndex);
          const {
            fiberActualDurations,
            fiberSelfDurations
          } = commitDatum;
          const {
            nodes
          } = commitTree;
          const chartDataKey = `${rootID}-${commitIndex}`;
          if (cachedChartData.has(chartDataKey)) {
            return cachedChartData.get(chartDataKey);
          }
          const idToDepthMap = /* @__PURE__ */ new Map();
          const renderPathNodes = /* @__PURE__ */ new Set();
          const rows = [];
          let maxDepth = 0;
          let maxSelfDuration = 0;
          const walkTree = (id2, rightOffset, currentDepth) => {
            idToDepthMap.set(id2, currentDepth);
            const node = nodes.get(id2);
            if (node == null) {
              throw Error(`Could not find node with id "${id2}" in commit tree`);
            }
            const {
              children,
              displayName,
              hocDisplayNames,
              key,
              treeBaseDuration,
              compiledWithForget
            } = node;
            const actualDuration = fiberActualDurations.get(id2) || 0;
            const selfDuration = fiberSelfDurations.get(id2) || 0;
            const didRender = fiberActualDurations.has(id2);
            const name = displayName || "Anonymous";
            const maybeKey = key !== null ? ` key="${key}"` : "";
            let maybeBadge = "";
            const maybeForgetBadge = compiledWithForget ? "\u2728 " : "";
            if (hocDisplayNames !== null && hocDisplayNames.length > 0) {
              maybeBadge = ` (${hocDisplayNames[0]})`;
            }
            let label = `${maybeForgetBadge}${name}${maybeBadge}${maybeKey}`;
            if (didRender) {
              label += ` (${formatDuration(selfDuration)}ms of ${formatDuration(actualDuration)}ms)`;
            }
            maxDepth = Math.max(maxDepth, currentDepth);
            maxSelfDuration = Math.max(maxSelfDuration, selfDuration);
            const chartNode = {
              actualDuration,
              didRender,
              id: id2,
              label,
              name,
              offset: rightOffset - treeBaseDuration,
              selfDuration,
              treeBaseDuration
            };
            if (currentDepth > rows.length) {
              rows.push([chartNode]);
            } else {
              rows[currentDepth - 1].push(chartNode);
            }
            for (let i2 = children.length - 1; i2 >= 0; i2--) {
              const childID = children[i2];
              const childChartNode = walkTree(childID, rightOffset, currentDepth + 1);
              rightOffset -= childChartNode.treeBaseDuration;
            }
            return chartNode;
          };
          let baseDuration = 0;
          if (nodes.size > 0) {
            const root2 = nodes.get(rootID);
            if (root2 == null) {
              throw Error(`Could not find root node with id "${rootID}" in commit tree`);
            }
            for (let i2 = root2.children.length - 1; i2 >= 0; i2--) {
              const id2 = root2.children[i2];
              const node = nodes.get(id2);
              if (node == null) {
                throw Error(`Could not find node with id "${id2}" in commit tree`);
              }
              baseDuration += node.treeBaseDuration;
              walkTree(id2, baseDuration, 1);
            }
            fiberActualDurations.forEach((duration, id2) => {
              let node = nodes.get(id2);
              if (node != null) {
                let currentID = node.parentID;
                while (currentID !== 0) {
                  if (renderPathNodes.has(currentID)) {
                    break;
                  } else {
                    renderPathNodes.add(currentID);
                  }
                  node = nodes.get(currentID);
                  currentID = node != null ? node.parentID : 0;
                }
              }
            });
          }
          const chartData = {
            baseDuration,
            depth: maxDepth,
            idToDepthMap,
            maxSelfDuration,
            renderPathNodes,
            rows
          };
          cachedChartData.set(chartDataKey, chartData);
          return chartData;
        }
        function invalidateChartData() {
          cachedChartData.clear();
        }
        ;
        const RankedChartBuilder_cachedChartData = /* @__PURE__ */ new Map();
        function RankedChartBuilder_getChartData({
          commitIndex,
          commitTree,
          profilerStore,
          rootID
        }) {
          const commitDatum = profilerStore.getCommitData(rootID, commitIndex);
          const {
            fiberActualDurations,
            fiberSelfDurations
          } = commitDatum;
          const {
            nodes
          } = commitTree;
          const chartDataKey = `${rootID}-${commitIndex}`;
          if (RankedChartBuilder_cachedChartData.has(chartDataKey)) {
            return RankedChartBuilder_cachedChartData.get(chartDataKey);
          }
          let maxSelfDuration = 0;
          const chartNodes = [];
          fiberActualDurations.forEach((actualDuration, id2) => {
            const node = nodes.get(id2);
            if (node == null) {
              throw Error(`Could not find node with id "${id2}" in commit tree`);
            }
            const {
              displayName,
              key,
              parentID,
              type,
              compiledWithForget
            } = node;
            if (parentID === 0) {
              return;
            }
            const selfDuration = fiberSelfDurations.get(id2) || 0;
            maxSelfDuration = Math.max(maxSelfDuration, selfDuration);
            const name = displayName || "Anonymous";
            const maybeKey = key !== null ? ` key="${key}"` : "";
            const maybeForgetBadge = compiledWithForget ? "\u2728 " : "";
            let maybeBadge = "";
            if (type === ElementTypeForwardRef) {
              maybeBadge = " (ForwardRef)";
            } else if (type === ElementTypeMemo) {
              maybeBadge = " (Memo)";
            }
            const label = `${maybeForgetBadge}${name}${maybeBadge}${maybeKey} (${formatDuration(selfDuration)}ms)`;
            chartNodes.push({
              id: id2,
              label,
              name,
              value: selfDuration
            });
          });
          const chartData = {
            maxValue: maxSelfDuration,
            nodes: chartNodes.sort((a, b) => b.value - a.value)
          };
          RankedChartBuilder_cachedChartData.set(chartDataKey, chartData);
          return chartData;
        }
        function RankedChartBuilder_invalidateChartData() {
          RankedChartBuilder_cachedChartData.clear();
        }
        ;
        function ProfilingCache_defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        class ProfilingCache {
          constructor(profilerStore) {
            ProfilingCache_defineProperty(this, "_fiberCommits", /* @__PURE__ */ new Map());
            ProfilingCache_defineProperty(this, "getCommitTree", ({
              commitIndex,
              rootID
            }) => getCommitTree({
              commitIndex,
              profilerStore: this._profilerStore,
              rootID
            }));
            ProfilingCache_defineProperty(this, "getFiberCommits", ({
              fiberID,
              rootID
            }) => {
              const cachedFiberCommits = this._fiberCommits.get(fiberID);
              if (cachedFiberCommits != null) {
                return cachedFiberCommits;
              }
              const fiberCommits = [];
              const dataForRoot = this._profilerStore.getDataForRoot(rootID);
              dataForRoot.commitData.forEach((commitDatum, commitIndex) => {
                if (commitDatum.fiberActualDurations.has(fiberID)) {
                  fiberCommits.push(commitIndex);
                }
              });
              this._fiberCommits.set(fiberID, fiberCommits);
              return fiberCommits;
            });
            ProfilingCache_defineProperty(this, "getFlamegraphChartData", ({
              commitIndex,
              commitTree,
              rootID
            }) => getChartData({
              commitIndex,
              commitTree,
              profilerStore: this._profilerStore,
              rootID
            }));
            ProfilingCache_defineProperty(this, "getRankedChartData", ({
              commitIndex,
              commitTree,
              rootID
            }) => RankedChartBuilder_getChartData({
              commitIndex,
              commitTree,
              profilerStore: this._profilerStore,
              rootID
            }));
            this._profilerStore = profilerStore;
          }
          invalidate() {
            this._fiberCommits.clear();
            invalidateCommitTrees();
            invalidateChartData();
            RankedChartBuilder_invalidateChartData();
          }
        }
        ;
        function ProfilerStore_defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        class ProfilerStore extends EventEmitter {
          // Suspense cache for lazily calculating derived profiling data.
          // Temporary store of profiling data from the backend renderer(s).
          // This data will be converted to the ProfilingDataFrontend format after being collected from all renderers.
          // Data from the most recently completed profiling session,
          // or data that has been imported from a previously exported session.
          // This object contains all necessary data to drive the Profiler UI interface,
          // even though some of it is lazily parsed/derived via the ProfilingCache.
          // Snapshot of all attached renderer IDs.
          // Once profiling is finished, this snapshot will be used to query renderers for profiling data.
          //
          // This map is initialized when profiling starts and updated when a new root is added while profiling;
          // Upon completion, it is converted into the exportable ProfilingDataFrontend format.
          // Snapshot of the state of the main Store (including all roots) when profiling started.
          // Once profiling is finished, this snapshot can be used along with "operations" messages emitted during profiling,
          // to reconstruct the state of each root for each commit.
          // It's okay to use a single root to store this information because node IDs are unique across all roots.
          //
          // This map is initialized when profiling starts and updated when a new root is added while profiling;
          // Upon completion, it is converted into the exportable ProfilingDataFrontend format.
          // Map of root (id) to a list of tree mutation that occur during profiling.
          // Once profiling is finished, these mutations can be used, along with the initial tree snapshots,
          // to reconstruct the state of each root for each commit.
          //
          // This map is only updated while profiling is in progress;
          // Upon completion, it is converted into the exportable ProfilingDataFrontend format.
          // The backend is currently profiling.
          // When profiling is in progress, operations are stored so that we can later reconstruct past commit trees.
          // Tracks whether a specific renderer logged any profiling data during the most recent session.
          // After profiling, data is requested from each attached renderer using this queue.
          // So long as this queue is not empty, the store is retrieving and processing profiling data from the backend.
          constructor(bridge2, store, defaultIsProfiling) {
            super();
            ProfilerStore_defineProperty(this, "_dataBackends", []);
            ProfilerStore_defineProperty(this, "_dataFrontend", null);
            ProfilerStore_defineProperty(this, "_initialRendererIDs", /* @__PURE__ */ new Set());
            ProfilerStore_defineProperty(this, "_initialSnapshotsByRootID", /* @__PURE__ */ new Map());
            ProfilerStore_defineProperty(this, "_inProgressOperationsByRootID", /* @__PURE__ */ new Map());
            ProfilerStore_defineProperty(this, "_isProfiling", false);
            ProfilerStore_defineProperty(this, "_rendererIDsThatReportedProfilingData", /* @__PURE__ */ new Set());
            ProfilerStore_defineProperty(this, "_rendererQueue", /* @__PURE__ */ new Set());
            ProfilerStore_defineProperty(this, "_takeProfilingSnapshotRecursive", (elementID, profilingSnapshots) => {
              const element = this._store.getElementByID(elementID);
              if (element !== null) {
                const snapshotNode = {
                  id: elementID,
                  children: element.children.slice(0),
                  displayName: element.displayName,
                  hocDisplayNames: element.hocDisplayNames,
                  key: element.key,
                  type: element.type,
                  compiledWithForget: element.compiledWithForget
                };
                profilingSnapshots.set(elementID, snapshotNode);
                element.children.forEach((childID) => this._takeProfilingSnapshotRecursive(childID, profilingSnapshots));
              }
            });
            ProfilerStore_defineProperty(this, "onBridgeOperations", (operations) => {
              const rendererID = operations[0];
              const rootID = operations[1];
              if (this._isProfiling) {
                let profilingOperations = this._inProgressOperationsByRootID.get(rootID);
                if (profilingOperations == null) {
                  profilingOperations = [operations];
                  this._inProgressOperationsByRootID.set(rootID, profilingOperations);
                } else {
                  profilingOperations.push(operations);
                }
                if (!this._initialRendererIDs.has(rendererID)) {
                  this._initialRendererIDs.add(rendererID);
                }
                if (!this._initialSnapshotsByRootID.has(rootID)) {
                  this._initialSnapshotsByRootID.set(rootID, /* @__PURE__ */ new Map());
                }
                this._rendererIDsThatReportedProfilingData.add(rendererID);
              }
            });
            ProfilerStore_defineProperty(this, "onBridgeProfilingData", (dataBackend) => {
              if (this._isProfiling) {
                return;
              }
              const {
                rendererID
              } = dataBackend;
              if (!this._rendererQueue.has(rendererID)) {
                throw Error(`Unexpected profiling data update from renderer "${rendererID}"`);
              }
              this._dataBackends.push(dataBackend);
              this._rendererQueue.delete(rendererID);
              if (this._rendererQueue.size === 0) {
                this._dataFrontend = prepareProfilingDataFrontendFromBackendAndStore(this._dataBackends, this._inProgressOperationsByRootID, this._initialSnapshotsByRootID);
                this._dataBackends.splice(0);
                this.emit("isProcessingData");
              }
            });
            ProfilerStore_defineProperty(this, "onBridgeShutdown", () => {
              this._bridge.removeListener("operations", this.onBridgeOperations);
              this._bridge.removeListener("profilingData", this.onBridgeProfilingData);
              this._bridge.removeListener("profilingStatus", this.onProfilingStatus);
              this._bridge.removeListener("shutdown", this.onBridgeShutdown);
            });
            ProfilerStore_defineProperty(this, "onProfilingStatus", (isProfiling) => {
              if (isProfiling) {
                this._dataBackends.splice(0);
                this._dataFrontend = null;
                this._initialRendererIDs.clear();
                this._initialSnapshotsByRootID.clear();
                this._inProgressOperationsByRootID.clear();
                this._rendererIDsThatReportedProfilingData.clear();
                this._rendererQueue.clear();
                for (const rendererID of this._store.rootIDToRendererID.values()) {
                  if (!this._initialRendererIDs.has(rendererID)) {
                    this._initialRendererIDs.add(rendererID);
                  }
                }
                this._store.roots.forEach((rootID) => {
                  const profilingSnapshots = /* @__PURE__ */ new Map();
                  this._initialSnapshotsByRootID.set(rootID, profilingSnapshots);
                  this._takeProfilingSnapshotRecursive(rootID, profilingSnapshots);
                });
              }
              if (this._isProfiling !== isProfiling) {
                this._isProfiling = isProfiling;
                this._cache.invalidate();
                this.emit("isProfiling");
                if (!isProfiling) {
                  this._dataBackends.splice(0);
                  this._rendererQueue.clear();
                  this._rendererIDsThatReportedProfilingData.forEach((rendererID) => {
                    if (!this._rendererQueue.has(rendererID)) {
                      this._rendererQueue.add(rendererID);
                      this._bridge.send("getProfilingData", {
                        rendererID
                      });
                    }
                  });
                  this.emit("isProcessingData");
                }
              }
            });
            this._bridge = bridge2;
            this._isProfiling = defaultIsProfiling;
            this._store = store;
            bridge2.addListener("operations", this.onBridgeOperations);
            bridge2.addListener("profilingData", this.onBridgeProfilingData);
            bridge2.addListener("profilingStatus", this.onProfilingStatus);
            bridge2.addListener("shutdown", this.onBridgeShutdown);
            bridge2.send("getProfilingStatus");
            this._cache = new ProfilingCache(this);
          }
          getCommitData(rootID, commitIndex) {
            if (this._dataFrontend !== null) {
              const dataForRoot = this._dataFrontend.dataForRoots.get(rootID);
              if (dataForRoot != null) {
                const commitDatum = dataForRoot.commitData[commitIndex];
                if (commitDatum != null) {
                  return commitDatum;
                }
              }
            }
            throw Error(`Could not find commit data for root "${rootID}" and commit "${commitIndex}"`);
          }
          getDataForRoot(rootID) {
            if (this._dataFrontend !== null) {
              const dataForRoot = this._dataFrontend.dataForRoots.get(rootID);
              if (dataForRoot != null) {
                return dataForRoot;
              }
            }
            throw Error(`Could not find commit data for root "${rootID}"`);
          }
          // Profiling data has been recorded for at least one root.
          get didRecordCommits() {
            return this._dataFrontend !== null && this._dataFrontend.dataForRoots.size > 0;
          }
          get isProcessingData() {
            return this._rendererQueue.size > 0 || this._dataBackends.length > 0;
          }
          get isProfiling() {
            return this._isProfiling;
          }
          get profilingCache() {
            return this._cache;
          }
          get profilingData() {
            return this._dataFrontend;
          }
          set profilingData(value) {
            if (this._isProfiling) {
              console.warn("Profiling data cannot be updated while profiling is in progress.");
              return;
            }
            this._dataBackends.splice(0);
            this._dataFrontend = value;
            this._initialRendererIDs.clear();
            this._initialSnapshotsByRootID.clear();
            this._inProgressOperationsByRootID.clear();
            this._cache.invalidate();
            this.emit("profilingData");
          }
          clear() {
            this._dataBackends.splice(0);
            this._dataFrontend = null;
            this._initialRendererIDs.clear();
            this._initialSnapshotsByRootID.clear();
            this._inProgressOperationsByRootID.clear();
            this._rendererQueue.clear();
            this._cache.invalidate();
            this.emit("profilingData");
          }
          startProfiling() {
            this._bridge.send("startProfiling", this._store.recordChangeDescriptions);
          }
          stopProfiling() {
            this._bridge.send("stopProfiling");
          }
        }
        ;
        class UnsupportedBridgeOperationError extends Error {
          constructor(message) {
            super(message);
            if (Error.captureStackTrace) {
              Error.captureStackTrace(this, UnsupportedBridgeOperationError);
            }
            this.name = "UnsupportedBridgeOperationError";
          }
        }
        ;
        function store_defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        const store_debug = (methodName, ...args) => {
          if (__DEBUG__) {
            console.log(`%cStore %c${methodName}`, "color: green; font-weight: bold;", "font-weight: bold;", ...args);
          }
        };
        const LOCAL_STORAGE_COLLAPSE_ROOTS_BY_DEFAULT_KEY = "React::DevTools::collapseNodesByDefault";
        const LOCAL_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY = "React::DevTools::recordChangeDescriptions";
        class Store extends EventEmitter {
          // If the backend version is new enough to report its (NPM) version, this is it.
          // This version may be displayed by the frontend for debugging purposes.
          // Computed whenever _errorsAndWarnings Map changes.
          // Should new nodes be collapsed by default when added to the tree?
          // Map of ID to number of recorded error and warning message IDs.
          // At least one of the injected renderers contains (DEV only) owner metadata.
          // Map of ID to (mutable) Element.
          // Elements are mutated to avoid excessive cloning during tree updates.
          // The InspectedElement Suspense cache also relies on this mutability for its WeakMap usage.
          // Should the React Native style editor panel be shown?
          // Can the backend use the Storage API (e.g. localStorage)?
          // If not, features like reload-and-profile will not work correctly and must be disabled.
          // Can DevTools use sync XHR requests?
          // If not, features like reload-and-profile will not work correctly and must be disabled.
          // This current limitation applies only to web extension builds
          // and will need to be reconsidered in the future if we add support for reload to React Native.
          // Older backends don't support an explicit bridge protocol,
          // so we should timeout eventually and show a downgrade message.
          // Map of element (id) to the set of elements (ids) it owns.
          // This map enables getOwnersListForElement() to avoid traversing the entire tree.
          // Incremented each time the store is mutated.
          // This enables a passive effect to detect a mutation between render and commit phase.
          // This Array must be treated as immutable!
          // Passive effects will check it for changes between render and mount.
          // Renderer ID is needed to support inspection fiber props, state, and hooks.
          // These options may be initially set by a configuration option when constructing the Store.
          // These options default to false but may be updated as roots are added and removed.
          // Total number of visible elements (within all roots).
          // Used for windowing purposes.
          constructor(_bridge, config) {
            super();
            store_defineProperty(this, "_backendVersion", null);
            store_defineProperty(this, "_cachedErrorCount", 0);
            store_defineProperty(this, "_cachedWarningCount", 0);
            store_defineProperty(this, "_cachedErrorAndWarningTuples", null);
            store_defineProperty(this, "_collapseNodesByDefault", true);
            store_defineProperty(this, "_errorsAndWarnings", /* @__PURE__ */ new Map());
            store_defineProperty(this, "_hasOwnerMetadata", false);
            store_defineProperty(this, "_idToElement", /* @__PURE__ */ new Map());
            store_defineProperty(this, "_isNativeStyleEditorSupported", false);
            store_defineProperty(this, "_isBackendStorageAPISupported", false);
            store_defineProperty(this, "_isSynchronousXHRSupported", false);
            store_defineProperty(this, "_nativeStyleEditorValidAttributes", null);
            store_defineProperty(this, "_onBridgeProtocolTimeoutID", null);
            store_defineProperty(this, "_ownersMap", /* @__PURE__ */ new Map());
            store_defineProperty(this, "_recordChangeDescriptions", false);
            store_defineProperty(this, "_revision", 0);
            store_defineProperty(this, "_roots", []);
            store_defineProperty(this, "_rootIDToCapabilities", /* @__PURE__ */ new Map());
            store_defineProperty(this, "_rootIDToRendererID", /* @__PURE__ */ new Map());
            store_defineProperty(this, "_supportsInspectMatchingDOMElement", false);
            store_defineProperty(this, "_supportsClickToInspect", false);
            store_defineProperty(this, "_supportsReloadAndProfile", false);
            store_defineProperty(this, "_supportsTimeline", false);
            store_defineProperty(this, "_supportsTraceUpdates", false);
            store_defineProperty(this, "_rootSupportsBasicProfiling", false);
            store_defineProperty(this, "_rootSupportsTimelineProfiling", false);
            store_defineProperty(this, "_bridgeProtocol", null);
            store_defineProperty(this, "_unsupportedBridgeProtocolDetected", false);
            store_defineProperty(this, "_unsupportedRendererVersionDetected", false);
            store_defineProperty(this, "_weightAcrossRoots", 0);
            store_defineProperty(this, "_adjustParentTreeWeight", (parentElement, weightDelta) => {
              let isInsideCollapsedSubTree = false;
              while (parentElement != null) {
                parentElement.weight += weightDelta;
                if (parentElement.isCollapsed) {
                  isInsideCollapsedSubTree = true;
                  break;
                }
                parentElement = this._idToElement.get(parentElement.parentID);
              }
              if (!isInsideCollapsedSubTree) {
                this._weightAcrossRoots += weightDelta;
              }
            });
            store_defineProperty(this, "onBridgeNativeStyleEditorSupported", ({
              isSupported,
              validAttributes
            }) => {
              this._isNativeStyleEditorSupported = isSupported;
              this._nativeStyleEditorValidAttributes = validAttributes || null;
              this.emit("supportsNativeStyleEditor");
            });
            store_defineProperty(this, "onBridgeOperations", (operations) => {
              if (__DEBUG__) {
                console.groupCollapsed("onBridgeOperations");
                store_debug("onBridgeOperations", operations.join(","));
              }
              let haveRootsChanged = false;
              let haveErrorsOrWarningsChanged = false;
              const rendererID = operations[0];
              const addedElementIDs = [];
              const removedElementIDs = /* @__PURE__ */ new Map();
              let i2 = 2;
              const stringTable = [
                null
                // ID = 0 corresponds to the null string.
              ];
              const stringTableSize = operations[i2];
              i2++;
              const stringTableEnd = i2 + stringTableSize;
              while (i2 < stringTableEnd) {
                const nextLength = operations[i2];
                i2++;
                const nextString = utfDecodeStringWithRanges(operations, i2, i2 + nextLength - 1);
                stringTable.push(nextString);
                i2 += nextLength;
              }
              while (i2 < operations.length) {
                const operation = operations[i2];
                switch (operation) {
                  case constants_TREE_OPERATION_ADD: {
                    const id3 = operations[i2 + 1];
                    const type = operations[i2 + 2];
                    i2 += 3;
                    if (this._idToElement.has(id3)) {
                      this._throwAndEmitError(Error(`Cannot add node "${id3}" because a node with that id is already in the Store.`));
                    }
                    if (type === types_ElementTypeRoot) {
                      if (__DEBUG__) {
                        store_debug("Add", `new root node ${id3}`);
                      }
                      const isStrictModeCompliant = operations[i2] > 0;
                      i2++;
                      const supportsBasicProfiling = (operations[i2] & PROFILING_FLAG_BASIC_SUPPORT) !== 0;
                      const supportsTimeline = (operations[i2] & PROFILING_FLAG_TIMELINE_SUPPORT) !== 0;
                      i2++;
                      let supportsStrictMode = false;
                      let hasOwnerMetadata = false;
                      if (this._bridgeProtocol === null || this._bridgeProtocol.version >= 2) {
                        supportsStrictMode = operations[i2] > 0;
                        i2++;
                        hasOwnerMetadata = operations[i2] > 0;
                        i2++;
                      }
                      this._roots = this._roots.concat(id3);
                      this._rootIDToRendererID.set(id3, rendererID);
                      this._rootIDToCapabilities.set(id3, {
                        supportsBasicProfiling,
                        hasOwnerMetadata,
                        supportsStrictMode,
                        supportsTimeline
                      });
                      const isStrictModeNonCompliant = !isStrictModeCompliant && supportsStrictMode;
                      this._idToElement.set(id3, {
                        children: [],
                        depth: -1,
                        displayName: null,
                        hocDisplayNames: null,
                        id: id3,
                        isCollapsed: false,
                        // Never collapse roots; it would hide the entire tree.
                        isStrictModeNonCompliant,
                        key: null,
                        ownerID: 0,
                        parentID: 0,
                        type,
                        weight: 0,
                        compiledWithForget: false
                      });
                      haveRootsChanged = true;
                    } else {
                      const parentID = operations[i2];
                      i2++;
                      const ownerID = operations[i2];
                      i2++;
                      const displayNameStringID = operations[i2];
                      const displayName = stringTable[displayNameStringID];
                      i2++;
                      const keyStringID = operations[i2];
                      const key = stringTable[keyStringID];
                      i2++;
                      if (__DEBUG__) {
                        store_debug("Add", `node ${id3} (${displayName || "null"}) as child of ${parentID}`);
                      }
                      const parentElement = this._idToElement.get(parentID);
                      if (parentElement === void 0) {
                        this._throwAndEmitError(Error(`Cannot add child "${id3}" to parent "${parentID}" because parent node was not found in the Store.`));
                        break;
                      }
                      parentElement.children.push(id3);
                      const {
                        formattedDisplayName: displayNameWithoutHOCs,
                        hocDisplayNames,
                        compiledWithForget
                      } = parseElementDisplayNameFromBackend(displayName, type);
                      const element = {
                        children: [],
                        depth: parentElement.depth + 1,
                        displayName: displayNameWithoutHOCs,
                        hocDisplayNames,
                        id: id3,
                        isCollapsed: this._collapseNodesByDefault,
                        isStrictModeNonCompliant: parentElement.isStrictModeNonCompliant,
                        key,
                        ownerID,
                        parentID,
                        type,
                        weight: 1,
                        compiledWithForget
                      };
                      this._idToElement.set(id3, element);
                      addedElementIDs.push(id3);
                      this._adjustParentTreeWeight(parentElement, 1);
                      if (ownerID > 0) {
                        let set = this._ownersMap.get(ownerID);
                        if (set === void 0) {
                          set = /* @__PURE__ */ new Set();
                          this._ownersMap.set(ownerID, set);
                        }
                        set.add(id3);
                      }
                    }
                    break;
                  }
                  case constants_TREE_OPERATION_REMOVE: {
                    const removeLength = operations[i2 + 1];
                    i2 += 2;
                    for (let removeIndex = 0; removeIndex < removeLength; removeIndex++) {
                      const id3 = operations[i2];
                      const element = this._idToElement.get(id3);
                      if (element === void 0) {
                        this._throwAndEmitError(Error(`Cannot remove node "${id3}" because no matching node was found in the Store.`));
                        break;
                      }
                      i2 += 1;
                      const {
                        children,
                        ownerID,
                        parentID,
                        weight
                      } = element;
                      if (children.length > 0) {
                        this._throwAndEmitError(Error(`Node "${id3}" was removed before its children.`));
                      }
                      this._idToElement.delete(id3);
                      let parentElement = null;
                      if (parentID === 0) {
                        if (__DEBUG__) {
                          store_debug("Remove", `node ${id3} root`);
                        }
                        this._roots = this._roots.filter((rootID) => rootID !== id3);
                        this._rootIDToRendererID.delete(id3);
                        this._rootIDToCapabilities.delete(id3);
                        haveRootsChanged = true;
                      } else {
                        if (__DEBUG__) {
                          store_debug("Remove", `node ${id3} from parent ${parentID}`);
                        }
                        parentElement = this._idToElement.get(parentID);
                        if (parentElement === void 0) {
                          this._throwAndEmitError(Error(`Cannot remove node "${id3}" from parent "${parentID}" because no matching node was found in the Store.`));
                          break;
                        }
                        const index = parentElement.children.indexOf(id3);
                        parentElement.children.splice(index, 1);
                      }
                      this._adjustParentTreeWeight(parentElement, -weight);
                      removedElementIDs.set(id3, parentID);
                      this._ownersMap.delete(id3);
                      if (ownerID > 0) {
                        const set = this._ownersMap.get(ownerID);
                        if (set !== void 0) {
                          set.delete(id3);
                        }
                      }
                      if (this._errorsAndWarnings.has(id3)) {
                        this._errorsAndWarnings.delete(id3);
                        haveErrorsOrWarningsChanged = true;
                      }
                    }
                    break;
                  }
                  case constants_TREE_OPERATION_REMOVE_ROOT: {
                    i2 += 1;
                    const id3 = operations[1];
                    if (__DEBUG__) {
                      store_debug(`Remove root ${id3}`);
                    }
                    const recursivelyDeleteElements = (elementID) => {
                      const element = this._idToElement.get(elementID);
                      this._idToElement.delete(elementID);
                      if (element) {
                        for (let index = 0; index < element.children.length; index++) {
                          recursivelyDeleteElements(element.children[index]);
                        }
                      }
                    };
                    const root2 = this._idToElement.get(id3);
                    if (root2 === void 0) {
                      this._throwAndEmitError(Error(`Cannot remove root "${id3}": no matching node was found in the Store.`));
                      break;
                    }
                    recursivelyDeleteElements(id3);
                    this._rootIDToCapabilities.delete(id3);
                    this._rootIDToRendererID.delete(id3);
                    this._roots = this._roots.filter((rootID) => rootID !== id3);
                    this._weightAcrossRoots -= root2.weight;
                    break;
                  }
                  case constants_TREE_OPERATION_REORDER_CHILDREN: {
                    const id3 = operations[i2 + 1];
                    const numChildren = operations[i2 + 2];
                    i2 += 3;
                    const element = this._idToElement.get(id3);
                    if (element === void 0) {
                      this._throwAndEmitError(Error(`Cannot reorder children for node "${id3}" because no matching node was found in the Store.`));
                      break;
                    }
                    const children = element.children;
                    if (children.length !== numChildren) {
                      this._throwAndEmitError(Error(`Children cannot be added or removed during a reorder operation.`));
                    }
                    for (let j = 0; j < numChildren; j++) {
                      const childID = operations[i2 + j];
                      children[j] = childID;
                      if (false) {
                      }
                    }
                    i2 += numChildren;
                    if (__DEBUG__) {
                      store_debug("Re-order", `Node ${id3} children ${children.join(",")}`);
                    }
                    break;
                  }
                  case constants_TREE_OPERATION_SET_SUBTREE_MODE: {
                    const id3 = operations[i2 + 1];
                    const mode = operations[i2 + 2];
                    i2 += 3;
                    if (mode === StrictMode) {
                      this._recursivelyUpdateSubtree(id3, (element) => {
                        element.isStrictModeNonCompliant = false;
                      });
                    }
                    if (__DEBUG__) {
                      store_debug("Subtree mode", `Subtree with root ${id3} set to mode ${mode}`);
                    }
                    break;
                  }
                  case constants_TREE_OPERATION_UPDATE_TREE_BASE_DURATION:
                    i2 += 3;
                    break;
                  case constants_TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS:
                    const id2 = operations[i2 + 1];
                    const errorCount = operations[i2 + 2];
                    const warningCount = operations[i2 + 3];
                    i2 += 4;
                    if (errorCount > 0 || warningCount > 0) {
                      this._errorsAndWarnings.set(id2, {
                        errorCount,
                        warningCount
                      });
                    } else if (this._errorsAndWarnings.has(id2)) {
                      this._errorsAndWarnings.delete(id2);
                    }
                    haveErrorsOrWarningsChanged = true;
                    break;
                  default:
                    this._throwAndEmitError(new UnsupportedBridgeOperationError(`Unsupported Bridge operation "${operation}"`));
                }
              }
              this._revision++;
              this._cachedErrorAndWarningTuples = null;
              if (haveErrorsOrWarningsChanged) {
                let errorCount = 0;
                let warningCount = 0;
                this._errorsAndWarnings.forEach((entry) => {
                  errorCount += entry.errorCount;
                  warningCount += entry.warningCount;
                });
                this._cachedErrorCount = errorCount;
                this._cachedWarningCount = warningCount;
              }
              if (haveRootsChanged) {
                const prevRootSupportsProfiling = this._rootSupportsBasicProfiling;
                const prevRootSupportsTimelineProfiling = this._rootSupportsTimelineProfiling;
                this._hasOwnerMetadata = false;
                this._rootSupportsBasicProfiling = false;
                this._rootSupportsTimelineProfiling = false;
                this._rootIDToCapabilities.forEach(({
                  supportsBasicProfiling,
                  hasOwnerMetadata,
                  supportsTimeline
                }) => {
                  if (supportsBasicProfiling) {
                    this._rootSupportsBasicProfiling = true;
                  }
                  if (hasOwnerMetadata) {
                    this._hasOwnerMetadata = true;
                  }
                  if (supportsTimeline) {
                    this._rootSupportsTimelineProfiling = true;
                  }
                });
                this.emit("roots");
                if (this._rootSupportsBasicProfiling !== prevRootSupportsProfiling) {
                  this.emit("rootSupportsBasicProfiling");
                }
                if (this._rootSupportsTimelineProfiling !== prevRootSupportsTimelineProfiling) {
                  this.emit("rootSupportsTimelineProfiling");
                }
              }
              if (__DEBUG__) {
                console.log(printStore(this, true));
                console.groupEnd();
              }
              this.emit("mutated", [addedElementIDs, removedElementIDs]);
            });
            store_defineProperty(this, "onBridgeOverrideComponentFilters", (componentFilters) => {
              this._componentFilters = componentFilters;
              setSavedComponentFilters(componentFilters);
            });
            store_defineProperty(this, "onBridgeShutdown", () => {
              if (__DEBUG__) {
                store_debug("onBridgeShutdown", "unsubscribing from Bridge");
              }
              const bridge2 = this._bridge;
              bridge2.removeListener("operations", this.onBridgeOperations);
              bridge2.removeListener("overrideComponentFilters", this.onBridgeOverrideComponentFilters);
              bridge2.removeListener("shutdown", this.onBridgeShutdown);
              bridge2.removeListener("isBackendStorageAPISupported", this.onBackendStorageAPISupported);
              bridge2.removeListener("isNativeStyleEditorSupported", this.onBridgeNativeStyleEditorSupported);
              bridge2.removeListener("isSynchronousXHRSupported", this.onBridgeSynchronousXHRSupported);
              bridge2.removeListener("unsupportedRendererVersion", this.onBridgeUnsupportedRendererVersion);
              bridge2.removeListener("backendVersion", this.onBridgeBackendVersion);
              bridge2.removeListener("bridgeProtocol", this.onBridgeProtocol);
              bridge2.removeListener("saveToClipboard", this.onSaveToClipboard);
              if (this._onBridgeProtocolTimeoutID !== null) {
                clearTimeout(this._onBridgeProtocolTimeoutID);
                this._onBridgeProtocolTimeoutID = null;
              }
            });
            store_defineProperty(this, "onBackendStorageAPISupported", (isBackendStorageAPISupported) => {
              this._isBackendStorageAPISupported = isBackendStorageAPISupported;
              this.emit("supportsReloadAndProfile");
            });
            store_defineProperty(this, "onBridgeSynchronousXHRSupported", (isSynchronousXHRSupported) => {
              this._isSynchronousXHRSupported = isSynchronousXHRSupported;
              this.emit("supportsReloadAndProfile");
            });
            store_defineProperty(this, "onBridgeUnsupportedRendererVersion", () => {
              this._unsupportedRendererVersionDetected = true;
              this.emit("unsupportedRendererVersionDetected");
            });
            store_defineProperty(this, "onBridgeBackendVersion", (backendVersion) => {
              this._backendVersion = backendVersion;
              this.emit("backendVersion");
            });
            store_defineProperty(this, "onBridgeProtocol", (bridgeProtocol) => {
              if (this._onBridgeProtocolTimeoutID !== null) {
                clearTimeout(this._onBridgeProtocolTimeoutID);
                this._onBridgeProtocolTimeoutID = null;
              }
              this._bridgeProtocol = bridgeProtocol;
              if (bridgeProtocol.version !== currentBridgeProtocol.version) {
              }
            });
            store_defineProperty(this, "onBridgeProtocolTimeout", () => {
              this._onBridgeProtocolTimeoutID = null;
              this._bridgeProtocol = BRIDGE_PROTOCOL[0];
              this.emit("unsupportedBridgeProtocolDetected");
            });
            store_defineProperty(this, "onSaveToClipboard", (text) => {
              (0, clipboard.copy)(text);
            });
            if (__DEBUG__) {
              store_debug("constructor", "subscribing to Bridge");
            }
            this._collapseNodesByDefault = localStorageGetItem(LOCAL_STORAGE_COLLAPSE_ROOTS_BY_DEFAULT_KEY) === "true";
            this._recordChangeDescriptions = localStorageGetItem(LOCAL_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY) === "true";
            this._componentFilters = getSavedComponentFilters();
            let isProfiling = false;
            if (config != null) {
              isProfiling = config.isProfiling === true;
              const {
                supportsInspectMatchingDOMElement,
                supportsClickToInspect,
                supportsReloadAndProfile,
                supportsTimeline,
                supportsTraceUpdates
              } = config;
              if (supportsInspectMatchingDOMElement) {
                this._supportsInspectMatchingDOMElement = true;
              }
              if (supportsClickToInspect) {
                this._supportsClickToInspect = true;
              }
              if (supportsReloadAndProfile) {
                this._supportsReloadAndProfile = true;
              }
              if (supportsTimeline) {
                this._supportsTimeline = true;
              }
              if (supportsTraceUpdates) {
                this._supportsTraceUpdates = true;
              }
            }
            this._bridge = _bridge;
            _bridge.addListener("operations", this.onBridgeOperations);
            _bridge.addListener("overrideComponentFilters", this.onBridgeOverrideComponentFilters);
            _bridge.addListener("shutdown", this.onBridgeShutdown);
            _bridge.addListener("isBackendStorageAPISupported", this.onBackendStorageAPISupported);
            _bridge.addListener("isNativeStyleEditorSupported", this.onBridgeNativeStyleEditorSupported);
            _bridge.addListener("isSynchronousXHRSupported", this.onBridgeSynchronousXHRSupported);
            _bridge.addListener("unsupportedRendererVersion", this.onBridgeUnsupportedRendererVersion);
            this._profilerStore = new ProfilerStore(_bridge, this, isProfiling);
            if (config != null && config.checkBridgeProtocolCompatibility) {
              this._onBridgeProtocolTimeoutID = setTimeout(this.onBridgeProtocolTimeout, 1e4);
              _bridge.addListener("bridgeProtocol", this.onBridgeProtocol);
              _bridge.send("getBridgeProtocol");
            }
            _bridge.addListener("backendVersion", this.onBridgeBackendVersion);
            _bridge.send("getBackendVersion");
            _bridge.addListener("saveToClipboard", this.onSaveToClipboard);
          }
          // This is only used in tests to avoid memory leaks.
          assertExpectedRootMapSizes() {
            if (this.roots.length === 0) {
              this.assertMapSizeMatchesRootCount(this._idToElement, "_idToElement");
              this.assertMapSizeMatchesRootCount(this._ownersMap, "_ownersMap");
            }
            this.assertMapSizeMatchesRootCount(this._rootIDToCapabilities, "_rootIDToCapabilities");
            this.assertMapSizeMatchesRootCount(this._rootIDToRendererID, "_rootIDToRendererID");
          }
          // This is only used in tests to avoid memory leaks.
          assertMapSizeMatchesRootCount(map2, mapName) {
            const expectedSize = this.roots.length;
            if (map2.size !== expectedSize) {
              this._throwAndEmitError(Error(`Expected ${mapName} to contain ${expectedSize} items, but it contains ${map2.size} items

${(0, util.inspect)(map2, {
                depth: 20
              })}`));
            }
          }
          get backendVersion() {
            return this._backendVersion;
          }
          get collapseNodesByDefault() {
            return this._collapseNodesByDefault;
          }
          set collapseNodesByDefault(value) {
            this._collapseNodesByDefault = value;
            localStorageSetItem(LOCAL_STORAGE_COLLAPSE_ROOTS_BY_DEFAULT_KEY, value ? "true" : "false");
            this.emit("collapseNodesByDefault");
          }
          get componentFilters() {
            return this._componentFilters;
          }
          set componentFilters(value) {
            if (this._profilerStore.isProfiling) {
              this._throwAndEmitError(Error("Cannot modify filter preferences while profiling"));
            }
            const prevEnabledComponentFilters = this._componentFilters.filter((filter) => filter.isEnabled);
            const nextEnabledComponentFilters = value.filter((filter) => filter.isEnabled);
            let haveEnabledFiltersChanged = prevEnabledComponentFilters.length !== nextEnabledComponentFilters.length;
            if (!haveEnabledFiltersChanged) {
              for (let i2 = 0; i2 < nextEnabledComponentFilters.length; i2++) {
                const prevFilter = prevEnabledComponentFilters[i2];
                const nextFilter = nextEnabledComponentFilters[i2];
                if (shallowDiffers(prevFilter, nextFilter)) {
                  haveEnabledFiltersChanged = true;
                  break;
                }
              }
            }
            this._componentFilters = value;
            setSavedComponentFilters(value);
            if (haveEnabledFiltersChanged) {
              this._bridge.send("updateComponentFilters", value);
            }
            this.emit("componentFilters");
          }
          get bridgeProtocol() {
            return this._bridgeProtocol;
          }
          get errorCount() {
            return this._cachedErrorCount;
          }
          get hasOwnerMetadata() {
            return this._hasOwnerMetadata;
          }
          get nativeStyleEditorValidAttributes() {
            return this._nativeStyleEditorValidAttributes;
          }
          get numElements() {
            return this._weightAcrossRoots;
          }
          get profilerStore() {
            return this._profilerStore;
          }
          get recordChangeDescriptions() {
            return this._recordChangeDescriptions;
          }
          set recordChangeDescriptions(value) {
            this._recordChangeDescriptions = value;
            localStorageSetItem(LOCAL_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY, value ? "true" : "false");
            this.emit("recordChangeDescriptions");
          }
          get revision() {
            return this._revision;
          }
          get rootIDToRendererID() {
            return this._rootIDToRendererID;
          }
          get roots() {
            return this._roots;
          }
          // At least one of the currently mounted roots support the Legacy profiler.
          get rootSupportsBasicProfiling() {
            return this._rootSupportsBasicProfiling;
          }
          // At least one of the currently mounted roots support the Timeline profiler.
          get rootSupportsTimelineProfiling() {
            return this._rootSupportsTimelineProfiling;
          }
          get supportsInspectMatchingDOMElement() {
            return this._supportsInspectMatchingDOMElement;
          }
          get supportsClickToInspect() {
            return this._supportsClickToInspect;
          }
          get supportsNativeStyleEditor() {
            return this._isNativeStyleEditorSupported;
          }
          get supportsReloadAndProfile() {
            return this._supportsReloadAndProfile && this._isBackendStorageAPISupported && this._isSynchronousXHRSupported;
          }
          // This build of DevTools supports the Timeline profiler.
          // This is a static flag, controlled by the Store config.
          get supportsTimeline() {
            return this._supportsTimeline;
          }
          get supportsTraceUpdates() {
            return this._supportsTraceUpdates;
          }
          get unsupportedBridgeProtocolDetected() {
            return this._unsupportedBridgeProtocolDetected;
          }
          get unsupportedRendererVersionDetected() {
            return this._unsupportedRendererVersionDetected;
          }
          get warningCount() {
            return this._cachedWarningCount;
          }
          containsElement(id2) {
            return this._idToElement.has(id2);
          }
          getElementAtIndex(index) {
            if (index < 0 || index >= this.numElements) {
              console.warn(`Invalid index ${index} specified; store contains ${this.numElements} items.`);
              return null;
            }
            let root2;
            let rootWeight = 0;
            for (let i2 = 0; i2 < this._roots.length; i2++) {
              const rootID = this._roots[i2];
              root2 = this._idToElement.get(rootID);
              if (root2 === void 0) {
                this._throwAndEmitError(Error(`Couldn't find root with id "${rootID}": no matching node was found in the Store.`));
                return null;
              }
              if (root2.children.length === 0) {
                continue;
              }
              if (rootWeight + root2.weight > index) {
                break;
              } else {
                rootWeight += root2.weight;
              }
            }
            if (root2 === void 0) {
              return null;
            }
            let currentElement = root2;
            let currentWeight = rootWeight - 1;
            while (index !== currentWeight) {
              const numChildren = currentElement.children.length;
              for (let i2 = 0; i2 < numChildren; i2++) {
                const childID = currentElement.children[i2];
                const child = this._idToElement.get(childID);
                if (child === void 0) {
                  this._throwAndEmitError(Error(`Couldn't child element with id "${childID}": no matching node was found in the Store.`));
                  return null;
                }
                const childWeight = child.isCollapsed ? 1 : child.weight;
                if (index <= currentWeight + childWeight) {
                  currentWeight++;
                  currentElement = child;
                  break;
                } else {
                  currentWeight += childWeight;
                }
              }
            }
            return currentElement || null;
          }
          getElementIDAtIndex(index) {
            const element = this.getElementAtIndex(index);
            return element === null ? null : element.id;
          }
          getElementByID(id2) {
            const element = this._idToElement.get(id2);
            if (element === void 0) {
              console.warn(`No element found with id "${id2}"`);
              return null;
            }
            return element;
          }
          // Returns a tuple of [id, index]
          getElementsWithErrorsAndWarnings() {
            if (this._cachedErrorAndWarningTuples !== null) {
              return this._cachedErrorAndWarningTuples;
            }
            const errorAndWarningTuples = [];
            this._errorsAndWarnings.forEach((_, id2) => {
              const index = this.getIndexOfElementID(id2);
              if (index !== null) {
                let low = 0;
                let high = errorAndWarningTuples.length;
                while (low < high) {
                  const mid = low + high >> 1;
                  if (errorAndWarningTuples[mid].index > index) {
                    high = mid;
                  } else {
                    low = mid + 1;
                  }
                }
                errorAndWarningTuples.splice(low, 0, {
                  id: id2,
                  index
                });
              }
            });
            this._cachedErrorAndWarningTuples = errorAndWarningTuples;
            return errorAndWarningTuples;
          }
          getErrorAndWarningCountForElementID(id2) {
            return this._errorsAndWarnings.get(id2) || {
              errorCount: 0,
              warningCount: 0
            };
          }
          getIndexOfElementID(id2) {
            const element = this.getElementByID(id2);
            if (element === null || element.parentID === 0) {
              return null;
            }
            let previousID = id2;
            let currentID = element.parentID;
            let index = 0;
            while (true) {
              const current = this._idToElement.get(currentID);
              if (current === void 0) {
                return null;
              }
              const {
                children
              } = current;
              for (let i2 = 0; i2 < children.length; i2++) {
                const childID = children[i2];
                if (childID === previousID) {
                  break;
                }
                const child = this._idToElement.get(childID);
                if (child === void 0) {
                  return null;
                }
                index += child.isCollapsed ? 1 : child.weight;
              }
              if (current.parentID === 0) {
                break;
              }
              index++;
              previousID = current.id;
              currentID = current.parentID;
            }
            for (let i2 = 0; i2 < this._roots.length; i2++) {
              const rootID = this._roots[i2];
              if (rootID === currentID) {
                break;
              }
              const root2 = this._idToElement.get(rootID);
              if (root2 === void 0) {
                return null;
              }
              index += root2.weight;
            }
            return index;
          }
          getOwnersListForElement(ownerID) {
            const list = [];
            const element = this._idToElement.get(ownerID);
            if (element !== void 0) {
              list.push({
                ...element,
                depth: 0
              });
              const unsortedIDs = this._ownersMap.get(ownerID);
              if (unsortedIDs !== void 0) {
                const depthMap = /* @__PURE__ */ new Map([[ownerID, 0]]);
                const sortedIDs = Array.from(unsortedIDs).sort((idA, idB) => (this.getIndexOfElementID(idA) || 0) - (this.getIndexOfElementID(idB) || 0));
                sortedIDs.forEach((id2) => {
                  const innerElement = this._idToElement.get(id2);
                  if (innerElement !== void 0) {
                    let parentID = innerElement.parentID;
                    let depth = 0;
                    while (parentID > 0) {
                      if (parentID === ownerID || unsortedIDs.has(parentID)) {
                        depth = depthMap.get(parentID) + 1;
                        depthMap.set(id2, depth);
                        break;
                      }
                      const parent = this._idToElement.get(parentID);
                      if (parent === void 0) {
                        break;
                      }
                      parentID = parent.parentID;
                    }
                    if (depth === 0) {
                      this._throwAndEmitError(Error("Invalid owners list"));
                    }
                    list.push({
                      ...innerElement,
                      depth
                    });
                  }
                });
              }
            }
            return list;
          }
          getRendererIDForElement(id2) {
            let current = this._idToElement.get(id2);
            while (current !== void 0) {
              if (current.parentID === 0) {
                const rendererID = this._rootIDToRendererID.get(current.id);
                return rendererID == null ? null : rendererID;
              } else {
                current = this._idToElement.get(current.parentID);
              }
            }
            return null;
          }
          getRootIDForElement(id2) {
            let current = this._idToElement.get(id2);
            while (current !== void 0) {
              if (current.parentID === 0) {
                return current.id;
              } else {
                current = this._idToElement.get(current.parentID);
              }
            }
            return null;
          }
          isInsideCollapsedSubTree(id2) {
            let current = this._idToElement.get(id2);
            while (current != null) {
              if (current.parentID === 0) {
                return false;
              } else {
                current = this._idToElement.get(current.parentID);
                if (current != null && current.isCollapsed) {
                  return true;
                }
              }
            }
            return false;
          }
          // TODO Maybe split this into two methods: expand() and collapse()
          toggleIsCollapsed(id2, isCollapsed) {
            let didMutate = false;
            const element = this.getElementByID(id2);
            if (element !== null) {
              if (isCollapsed) {
                if (element.type === types_ElementTypeRoot) {
                  this._throwAndEmitError(Error("Root nodes cannot be collapsed"));
                }
                if (!element.isCollapsed) {
                  didMutate = true;
                  element.isCollapsed = true;
                  const weightDelta = 1 - element.weight;
                  let parentElement = this._idToElement.get(element.parentID);
                  while (parentElement !== void 0) {
                    parentElement.weight += weightDelta;
                    parentElement = this._idToElement.get(parentElement.parentID);
                  }
                }
              } else {
                let currentElement = element;
                while (currentElement != null) {
                  const oldWeight = currentElement.isCollapsed ? 1 : currentElement.weight;
                  if (currentElement.isCollapsed) {
                    didMutate = true;
                    currentElement.isCollapsed = false;
                    const newWeight = currentElement.isCollapsed ? 1 : currentElement.weight;
                    const weightDelta = newWeight - oldWeight;
                    let parentElement = this._idToElement.get(currentElement.parentID);
                    while (parentElement !== void 0) {
                      parentElement.weight += weightDelta;
                      if (parentElement.isCollapsed) {
                        break;
                      }
                      parentElement = this._idToElement.get(parentElement.parentID);
                    }
                  }
                  currentElement = currentElement.parentID !== 0 ? this.getElementByID(currentElement.parentID) : null;
                }
              }
              if (didMutate) {
                let weightAcrossRoots = 0;
                this._roots.forEach((rootID) => {
                  const {
                    weight
                  } = this.getElementByID(rootID);
                  weightAcrossRoots += weight;
                });
                this._weightAcrossRoots = weightAcrossRoots;
                this.emit("mutated", [[], /* @__PURE__ */ new Map()]);
              }
            }
          }
          _recursivelyUpdateSubtree(id2, callback) {
            const element = this._idToElement.get(id2);
            if (element) {
              callback(element);
              element.children.forEach((child) => this._recursivelyUpdateSubtree(child, callback));
            }
          }
          // The Store should never throw an Error without also emitting an event.
          // Otherwise Store errors will be invisible to users,
          // but the downstream errors they cause will be reported as bugs.
          // For example, https://github.com/facebook/react/issues/21402
          // Emitting an error event allows the ErrorBoundary to show the original error.
          _throwAndEmitError(error) {
            this.emit("error", error);
            throw error;
          }
        }
        var styles = __webpack_require__(7007);
        var tooltip_styles = __webpack_require__(707);
        ;
        const BridgeContext = /* @__PURE__ */ (0, external_react_namespaceObject.createContext)(null);
        BridgeContext.displayName = "BridgeContext";
        const StoreContext = /* @__PURE__ */ (0, external_react_namespaceObject.createContext)(null);
        StoreContext.displayName = "StoreContext";
        const ContextMenuContext = /* @__PURE__ */ (0, external_react_namespaceObject.createContext)({
          isEnabledForInspectedElement: false,
          viewAttributeSourceFunction: null
        });
        ContextMenuContext.displayName = "ContextMenuContext";
        const OptionsContext = /* @__PURE__ */ (0, external_react_namespaceObject.createContext)({
          readOnly: false,
          hideSettings: false,
          hideToggleErrorAction: false,
          hideToggleSuspenseAction: false,
          hideLogAction: false,
          hideViewSourceAction: false
        });
        ;
        let windowObject;
        if (typeof window !== "undefined") {
          windowObject = window;
        } else if (typeof self !== "undefined") {
          windowObject = self;
        } else {
          windowObject = global;
        }
        let cancelFrame = null;
        let requestFrame = null;
        const TIMEOUT_DURATION = 20;
        const clearTimeoutFn = windowObject.clearTimeout;
        const setTimeoutFn = windowObject.setTimeout;
        const cancelAnimationFrameFn = windowObject.cancelAnimationFrame || windowObject.mozCancelAnimationFrame || windowObject.webkitCancelAnimationFrame;
        const requestAnimationFrameFn = windowObject.requestAnimationFrame || windowObject.mozRequestAnimationFrame || windowObject.webkitRequestAnimationFrame;
        if (cancelAnimationFrameFn == null || requestAnimationFrameFn == null) {
          cancelFrame = clearTimeoutFn;
          requestFrame = function requestAnimationFrameViaSetTimeout(callback) {
            return setTimeoutFn(callback, TIMEOUT_DURATION);
          };
        } else {
          cancelFrame = function cancelFrame2([animationFrameID, timeoutID]) {
            cancelAnimationFrameFn(animationFrameID);
            clearTimeoutFn(timeoutID);
          };
          requestFrame = function requestAnimationFrameWithSetTimeoutFallback(callback) {
            const animationFrameID = requestAnimationFrameFn(function animationFrameCallback() {
              clearTimeoutFn(timeoutID);
              callback();
            });
            const timeoutID = setTimeoutFn(function timeoutCallback() {
              cancelAnimationFrameFn(animationFrameID);
              callback();
            }, TIMEOUT_DURATION);
            return [animationFrameID, timeoutID];
          };
        }
        function createDetectElementResize(nonce) {
          let animationKeyframes;
          let animationName;
          let animationStartEvent;
          let animationStyle;
          let checkTriggers;
          let resetTriggers;
          let scrollListener;
          const attachEvent = typeof document !== "undefined" && document.attachEvent;
          if (!attachEvent) {
            resetTriggers = function(element) {
              const triggers = element.__resizeTriggers__, expand = triggers.firstElementChild, contract = triggers.lastElementChild, expandChild = expand.firstElementChild;
              contract.scrollLeft = contract.scrollWidth;
              contract.scrollTop = contract.scrollHeight;
              expandChild.style.width = expand.offsetWidth + 1 + "px";
              expandChild.style.height = expand.offsetHeight + 1 + "px";
              expand.scrollLeft = expand.scrollWidth;
              expand.scrollTop = expand.scrollHeight;
            };
            checkTriggers = function(element) {
              return element.offsetWidth !== element.__resizeLast__.width || element.offsetHeight !== element.__resizeLast__.height;
            };
            scrollListener = function(e) {
              if (e.target.className && typeof e.target.className.indexOf === "function" && e.target.className.indexOf("contract-trigger") < 0 && e.target.className.indexOf("expand-trigger") < 0) {
                return;
              }
              const element = this;
              resetTriggers(this);
              if (this.__resizeRAF__) {
                cancelFrame(this.__resizeRAF__);
              }
              this.__resizeRAF__ = requestFrame(function animationFrame() {
                if (checkTriggers(element)) {
                  element.__resizeLast__.width = element.offsetWidth;
                  element.__resizeLast__.height = element.offsetHeight;
                  element.__resizeListeners__.forEach(function forEachResizeListener(fn) {
                    fn.call(element, e);
                  });
                }
              });
            };
            let animation = false;
            let keyframeprefix = "";
            animationStartEvent = "animationstart";
            const domPrefixes = "Webkit Moz O ms".split(" ");
            let startEvents = "webkitAnimationStart animationstart oAnimationStart MSAnimationStart".split(" ");
            let pfx = "";
            {
              const elm = document.createElement("fakeelement");
              if (elm.style.animationName !== void 0) {
                animation = true;
              }
              if (animation === false) {
                for (let i2 = 0; i2 < domPrefixes.length; i2++) {
                  if (elm.style[domPrefixes[i2] + "AnimationName"] !== void 0) {
                    pfx = domPrefixes[i2];
                    keyframeprefix = "-" + pfx.toLowerCase() + "-";
                    animationStartEvent = startEvents[i2];
                    animation = true;
                    break;
                  }
                }
              }
            }
            animationName = "resizeanim";
            animationKeyframes = "@" + keyframeprefix + "keyframes " + animationName + " { from { opacity: 0; } to { opacity: 0; } } ";
            animationStyle = keyframeprefix + "animation: 1ms " + animationName + "; ";
          }
          const createStyles = function(doc) {
            if (!doc.getElementById("detectElementResize")) {
              const css = (animationKeyframes ? animationKeyframes : "") + ".resize-triggers { " + (animationStyle ? animationStyle : "") + 'visibility: hidden; opacity: 0; } .resize-triggers, .resize-triggers > div, .contract-trigger:before { content: " "; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; z-index: -1; } .resize-triggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }', head = doc.head || doc.getElementsByTagName("head")[0], style = doc.createElement("style");
              style.id = "detectElementResize";
              style.type = "text/css";
              if (nonce != null) {
                style.setAttribute("nonce", nonce);
              }
              if (style.styleSheet) {
                style.styleSheet.cssText = css;
              } else {
                style.appendChild(doc.createTextNode(css));
              }
              head.appendChild(style);
            }
          };
          const addResizeListener = function(element, fn) {
            if (attachEvent) {
              element.attachEvent("onresize", fn);
            } else {
              if (!element.__resizeTriggers__) {
                const doc = element.ownerDocument;
                const elementStyle = windowObject.getComputedStyle(element);
                if (elementStyle && elementStyle.position === "static") {
                  element.style.position = "relative";
                }
                createStyles(doc);
                element.__resizeLast__ = {};
                element.__resizeListeners__ = [];
                (element.__resizeTriggers__ = doc.createElement("div")).className = "resize-triggers";
                const expandTrigger = doc.createElement("div");
                expandTrigger.className = "expand-trigger";
                expandTrigger.appendChild(doc.createElement("div"));
                const contractTrigger = doc.createElement("div");
                contractTrigger.className = "contract-trigger";
                element.__resizeTriggers__.appendChild(expandTrigger);
                element.__resizeTriggers__.appendChild(contractTrigger);
                element.appendChild(element.__resizeTriggers__);
                resetTriggers(element);
                element.addEventListener("scroll", scrollListener, true);
                if (animationStartEvent) {
                  element.__resizeTriggers__.__animationListener__ = function animationListener(e) {
                    if (e.animationName === animationName) {
                      resetTriggers(element);
                    }
                  };
                  element.__resizeTriggers__.addEventListener(animationStartEvent, element.__resizeTriggers__.__animationListener__);
                }
              }
              element.__resizeListeners__.push(fn);
            }
          };
          const removeResizeListener = function(element, fn) {
            if (attachEvent) {
              element.detachEvent("onresize", fn);
            } else {
              element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);
              if (!element.__resizeListeners__.length) {
                element.removeEventListener("scroll", scrollListener, true);
                if (element.__resizeTriggers__.__animationListener__) {
                  element.__resizeTriggers__.removeEventListener(animationStartEvent, element.__resizeTriggers__.__animationListener__);
                  element.__resizeTriggers__.__animationListener__ = null;
                }
                try {
                  element.__resizeTriggers__ = !element.removeChild(element.__resizeTriggers__);
                } catch (e) {
                }
              }
            }
          };
          return {
            addResizeListener,
            removeResizeListener
          };
        }
        class AutoSizer extends external_react_namespaceObject.Component {
          constructor(...args) {
            super(...args);
            this.state = {
              height: this.props.defaultHeight || 0,
              scaledHeight: this.props.defaultHeight || 0,
              scaledWidth: this.props.defaultWidth || 0,
              width: this.props.defaultWidth || 0
            };
            this._autoSizer = null;
            this._detectElementResize = null;
            this._parentNode = null;
            this._resizeObserver = null;
            this._timeoutId = null;
            this._onResize = () => {
              this._timeoutId = null;
              const {
                disableHeight,
                disableWidth,
                onResize
              } = this.props;
              if (this._parentNode) {
                const style = window.getComputedStyle(this._parentNode) || {};
                const paddingLeft = parseFloat(style.paddingLeft || "0");
                const paddingRight = parseFloat(style.paddingRight || "0");
                const paddingTop = parseFloat(style.paddingTop || "0");
                const paddingBottom = parseFloat(style.paddingBottom || "0");
                const rect = this._parentNode.getBoundingClientRect();
                const scaledHeight = rect.height - paddingTop - paddingBottom;
                const scaledWidth = rect.width - paddingLeft - paddingRight;
                const height = this._parentNode.offsetHeight - paddingTop - paddingBottom;
                const width = this._parentNode.offsetWidth - paddingLeft - paddingRight;
                if (!disableHeight && (this.state.height !== height || this.state.scaledHeight !== scaledHeight) || !disableWidth && (this.state.width !== width || this.state.scaledWidth !== scaledWidth)) {
                  this.setState({
                    height,
                    width,
                    scaledHeight,
                    scaledWidth
                  });
                  if (typeof onResize === "function") {
                    onResize({
                      height,
                      scaledHeight,
                      scaledWidth,
                      width
                    });
                  }
                }
              }
            };
            this._setRef = (autoSizer) => {
              this._autoSizer = autoSizer;
            };
          }
          componentDidMount() {
            const {
              nonce
            } = this.props;
            const parentNode = this._autoSizer ? this._autoSizer.parentNode : null;
            if (parentNode != null && parentNode.ownerDocument && parentNode.ownerDocument.defaultView && parentNode instanceof parentNode.ownerDocument.defaultView.HTMLElement) {
              this._parentNode = parentNode;
              const ResizeObserverInstance = parentNode.ownerDocument.defaultView.ResizeObserver;
              if (ResizeObserverInstance != null) {
                this._resizeObserver = new ResizeObserverInstance(() => {
                  this._timeoutId = setTimeout(this._onResize, 0);
                });
                this._resizeObserver.observe(parentNode);
              } else {
                this._detectElementResize = createDetectElementResize(nonce);
                this._detectElementResize.addResizeListener(parentNode, this._onResize);
              }
              this._onResize();
            }
          }
          componentWillUnmount() {
            if (this._parentNode) {
              if (this._detectElementResize) {
                this._detectElementResize.removeResizeListener(this._parentNode, this._onResize);
              }
              if (this._timeoutId !== null) {
                clearTimeout(this._timeoutId);
              }
              if (this._resizeObserver) {
                this._resizeObserver.disconnect();
              }
            }
          }
          render() {
            const {
              children,
              defaultHeight,
              defaultWidth,
              disableHeight = false,
              disableWidth = false,
              nonce,
              onResize,
              style = {},
              tagName = "div",
              ...rest
            } = this.props;
            const {
              height,
              scaledHeight,
              scaledWidth,
              width
            } = this.state;
            const outerStyle = {
              overflow: "visible"
            };
            const childParams = {};
            let bailoutOnChildren = false;
            if (!disableHeight) {
              if (height === 0) {
                bailoutOnChildren = true;
              }
              outerStyle.height = 0;
              childParams.height = height;
              childParams.scaledHeight = scaledHeight;
            }
            if (!disableWidth) {
              if (width === 0) {
                bailoutOnChildren = true;
              }
              outerStyle.width = 0;
              childParams.width = width;
              childParams.scaledWidth = scaledWidth;
            }
            return /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(tagName, {
              ref: this._setRef,
              style: {
                ...outerStyle,
                ...style
              },
              ...rest
            }, !bailoutOnChildren && children(childParams));
          }
        }
        function isHeightAndWidthProps(props2) {
          return props2 && props2.disableHeight !== true && props2.disableWidth !== true;
        }
        function isHeightOnlyProps(props2) {
          return props2 && props2.disableHeight !== true && props2.disableWidth === true;
        }
        function isWidthOnlyProps(props2) {
          return props2 && props2.disableHeight === true && props2.disableWidth !== true;
        }
        ;
        function _extends() {
          _extends = Object.assign ? Object.assign.bind() : function(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return _extends.apply(this, arguments);
        }
        ;
        function _assertThisInitialized(self2) {
          if (self2 === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return self2;
        }
        ;
        function _setPrototypeOf(o, p) {
          _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
            o2.__proto__ = p2;
            return o2;
          };
          return _setPrototypeOf(o, p);
        }
        ;
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          _setPrototypeOf(subClass, superClass);
        }
        ;
        var safeIsNaN = Number.isNaN || function ponyfill(value) {
          return typeof value === "number" && value !== value;
        };
        function isEqual(first, second) {
          if (first === second) {
            return true;
          }
          if (safeIsNaN(first) && safeIsNaN(second)) {
            return true;
          }
          return false;
        }
        function areInputsEqual(newInputs, lastInputs) {
          if (newInputs.length !== lastInputs.length) {
            return false;
          }
          for (var i2 = 0; i2 < newInputs.length; i2++) {
            if (!isEqual(newInputs[i2], lastInputs[i2])) {
              return false;
            }
          }
          return true;
        }
        function memoizeOne(resultFn, isEqual2) {
          if (isEqual2 === void 0) {
            isEqual2 = areInputsEqual;
          }
          var lastThis;
          var lastArgs = [];
          var lastResult;
          var calledOnce = false;
          function memoized() {
            var newArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              newArgs[_i] = arguments[_i];
            }
            if (calledOnce && lastThis === this && isEqual2(newArgs, lastArgs)) {
              return lastResult;
            }
            lastResult = resultFn.apply(this, newArgs);
            calledOnce = true;
            lastThis = this;
            lastArgs = newArgs;
            return lastResult;
          }
          return memoized;
        }
        const memoize_one_esm = memoizeOne;
        ;
        function _objectWithoutPropertiesLoose(source, excluded) {
          if (source == null)
            return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i2;
          for (i2 = 0; i2 < sourceKeys.length; i2++) {
            key = sourceKeys[i2];
            if (excluded.indexOf(key) >= 0)
              continue;
            target[key] = source[key];
          }
          return target;
        }
        ;
        var hasNativePerformanceNow = typeof performance === "object" && typeof performance.now === "function";
        var now = hasNativePerformanceNow ? function() {
          return performance.now();
        } : function() {
          return Date.now();
        };
        function cancelTimeout(timeoutID) {
          cancelAnimationFrame(timeoutID.id);
        }
        function requestTimeout(callback, delay) {
          var start = now();
          function tick() {
            if (now() - start >= delay) {
              callback.call(null);
            } else {
              timeoutID.id = requestAnimationFrame(tick);
            }
          }
          var timeoutID = {
            id: requestAnimationFrame(tick)
          };
          return timeoutID;
        }
        var size = -1;
        function getScrollbarSize(recalculate) {
          if (recalculate === void 0) {
            recalculate = false;
          }
          if (size === -1 || recalculate) {
            var div = document.createElement("div");
            var style = div.style;
            style.width = "50px";
            style.height = "50px";
            style.overflow = "scroll";
            document.body.appendChild(div);
            size = div.offsetWidth - div.clientWidth;
            document.body.removeChild(div);
          }
          return size;
        }
        var cachedRTLResult = null;
        function getRTLOffsetType(recalculate) {
          if (recalculate === void 0) {
            recalculate = false;
          }
          if (cachedRTLResult === null || recalculate) {
            var outerDiv = document.createElement("div");
            var outerStyle = outerDiv.style;
            outerStyle.width = "50px";
            outerStyle.height = "50px";
            outerStyle.overflow = "scroll";
            outerStyle.direction = "rtl";
            var innerDiv = document.createElement("div");
            var innerStyle = innerDiv.style;
            innerStyle.width = "100px";
            innerStyle.height = "100px";
            outerDiv.appendChild(innerDiv);
            document.body.appendChild(outerDiv);
            if (outerDiv.scrollLeft > 0) {
              cachedRTLResult = "positive-descending";
            } else {
              outerDiv.scrollLeft = 1;
              if (outerDiv.scrollLeft === 0) {
                cachedRTLResult = "negative";
              } else {
                cachedRTLResult = "positive-ascending";
              }
            }
            document.body.removeChild(outerDiv);
            return cachedRTLResult;
          }
          return cachedRTLResult;
        }
        var IS_SCROLLING_DEBOUNCE_INTERVAL = 150;
        var defaultItemKey = function defaultItemKey2(_ref) {
          var columnIndex = _ref.columnIndex, data = _ref.data, rowIndex = _ref.rowIndex;
          return rowIndex + ":" + columnIndex;
        };
        var devWarningsOverscanCount = null;
        var devWarningsOverscanRowsColumnsCount = null;
        var devWarningsTagName = null;
        if (false) {
        }
        function createGridComponent(_ref2) {
          var _class;
          var getColumnOffset = _ref2.getColumnOffset, getColumnStartIndexForOffset = _ref2.getColumnStartIndexForOffset, getColumnStopIndexForStartIndex = _ref2.getColumnStopIndexForStartIndex, getColumnWidth = _ref2.getColumnWidth, getEstimatedTotalHeight2 = _ref2.getEstimatedTotalHeight, getEstimatedTotalWidth2 = _ref2.getEstimatedTotalWidth, getOffsetForColumnAndAlignment = _ref2.getOffsetForColumnAndAlignment, getOffsetForRowAndAlignment = _ref2.getOffsetForRowAndAlignment, getRowHeight = _ref2.getRowHeight, getRowOffset = _ref2.getRowOffset, getRowStartIndexForOffset = _ref2.getRowStartIndexForOffset, getRowStopIndexForStartIndex = _ref2.getRowStopIndexForStartIndex, initInstanceProps = _ref2.initInstanceProps, shouldResetStyleCacheOnItemSizeChange = _ref2.shouldResetStyleCacheOnItemSizeChange, validateProps = _ref2.validateProps;
          return _class = /* @__PURE__ */ function(_PureComponent) {
            _inheritsLoose(Grid, _PureComponent);
            function Grid(props2) {
              var _this;
              _this = _PureComponent.call(this, props2) || this;
              _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_this));
              _this._resetIsScrollingTimeoutId = null;
              _this._outerRef = void 0;
              _this.state = {
                instance: _assertThisInitialized(_this),
                isScrolling: false,
                horizontalScrollDirection: "forward",
                scrollLeft: typeof _this.props.initialScrollLeft === "number" ? _this.props.initialScrollLeft : 0,
                scrollTop: typeof _this.props.initialScrollTop === "number" ? _this.props.initialScrollTop : 0,
                scrollUpdateWasRequested: false,
                verticalScrollDirection: "forward"
              };
              _this._callOnItemsRendered = void 0;
              _this._callOnItemsRendered = memoize_one_esm(function(overscanColumnStartIndex, overscanColumnStopIndex, overscanRowStartIndex, overscanRowStopIndex, visibleColumnStartIndex, visibleColumnStopIndex, visibleRowStartIndex, visibleRowStopIndex) {
                return _this.props.onItemsRendered({
                  overscanColumnStartIndex,
                  overscanColumnStopIndex,
                  overscanRowStartIndex,
                  overscanRowStopIndex,
                  visibleColumnStartIndex,
                  visibleColumnStopIndex,
                  visibleRowStartIndex,
                  visibleRowStopIndex
                });
              });
              _this._callOnScroll = void 0;
              _this._callOnScroll = memoize_one_esm(function(scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested) {
                return _this.props.onScroll({
                  horizontalScrollDirection,
                  scrollLeft,
                  scrollTop,
                  verticalScrollDirection,
                  scrollUpdateWasRequested
                });
              });
              _this._getItemStyle = void 0;
              _this._getItemStyle = function(rowIndex, columnIndex) {
                var _this$props = _this.props, columnWidth = _this$props.columnWidth, direction = _this$props.direction, rowHeight = _this$props.rowHeight;
                var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && columnWidth, shouldResetStyleCacheOnItemSizeChange && direction, shouldResetStyleCacheOnItemSizeChange && rowHeight);
                var key = rowIndex + ":" + columnIndex;
                var style;
                if (itemStyleCache.hasOwnProperty(key)) {
                  style = itemStyleCache[key];
                } else {
                  var _offset = getColumnOffset(_this.props, columnIndex, _this._instanceProps);
                  var isRtl = direction === "rtl";
                  itemStyleCache[key] = style = {
                    position: "absolute",
                    left: isRtl ? void 0 : _offset,
                    right: isRtl ? _offset : void 0,
                    top: getRowOffset(_this.props, rowIndex, _this._instanceProps),
                    height: getRowHeight(_this.props, rowIndex, _this._instanceProps),
                    width: getColumnWidth(_this.props, columnIndex, _this._instanceProps)
                  };
                }
                return style;
              };
              _this._getItemStyleCache = void 0;
              _this._getItemStyleCache = memoize_one_esm(function(_, __, ___) {
                return {};
              });
              _this._onScroll = function(event) {
                var _event$currentTarget = event.currentTarget, clientHeight = _event$currentTarget.clientHeight, clientWidth = _event$currentTarget.clientWidth, scrollLeft = _event$currentTarget.scrollLeft, scrollTop = _event$currentTarget.scrollTop, scrollHeight = _event$currentTarget.scrollHeight, scrollWidth = _event$currentTarget.scrollWidth;
                _this.setState(function(prevState) {
                  if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {
                    return null;
                  }
                  var direction = _this.props.direction;
                  var calculatedScrollLeft = scrollLeft;
                  if (direction === "rtl") {
                    switch (getRTLOffsetType()) {
                      case "negative":
                        calculatedScrollLeft = -scrollLeft;
                        break;
                      case "positive-descending":
                        calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;
                        break;
                    }
                  }
                  calculatedScrollLeft = Math.max(0, Math.min(calculatedScrollLeft, scrollWidth - clientWidth));
                  var calculatedScrollTop = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));
                  return {
                    isScrolling: true,
                    horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? "forward" : "backward",
                    scrollLeft: calculatedScrollLeft,
                    scrollTop: calculatedScrollTop,
                    verticalScrollDirection: prevState.scrollTop < scrollTop ? "forward" : "backward",
                    scrollUpdateWasRequested: false
                  };
                }, _this._resetIsScrollingDebounced);
              };
              _this._outerRefSetter = function(ref) {
                var outerRef = _this.props.outerRef;
                _this._outerRef = ref;
                if (typeof outerRef === "function") {
                  outerRef(ref);
                } else if (outerRef != null && typeof outerRef === "object" && outerRef.hasOwnProperty("current")) {
                  outerRef.current = ref;
                }
              };
              _this._resetIsScrollingDebounced = function() {
                if (_this._resetIsScrollingTimeoutId !== null) {
                  cancelTimeout(_this._resetIsScrollingTimeoutId);
                }
                _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL);
              };
              _this._resetIsScrolling = function() {
                _this._resetIsScrollingTimeoutId = null;
                _this.setState({
                  isScrolling: false
                }, function() {
                  _this._getItemStyleCache(-1);
                });
              };
              return _this;
            }
            Grid.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
              validateSharedProps(nextProps, prevState);
              validateProps(nextProps);
              return null;
            };
            var _proto = Grid.prototype;
            _proto.scrollTo = function scrollTo(_ref3) {
              var scrollLeft = _ref3.scrollLeft, scrollTop = _ref3.scrollTop;
              if (scrollLeft !== void 0) {
                scrollLeft = Math.max(0, scrollLeft);
              }
              if (scrollTop !== void 0) {
                scrollTop = Math.max(0, scrollTop);
              }
              this.setState(function(prevState) {
                if (scrollLeft === void 0) {
                  scrollLeft = prevState.scrollLeft;
                }
                if (scrollTop === void 0) {
                  scrollTop = prevState.scrollTop;
                }
                if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {
                  return null;
                }
                return {
                  horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? "forward" : "backward",
                  scrollLeft,
                  scrollTop,
                  scrollUpdateWasRequested: true,
                  verticalScrollDirection: prevState.scrollTop < scrollTop ? "forward" : "backward"
                };
              }, this._resetIsScrollingDebounced);
            };
            _proto.scrollToItem = function scrollToItem(_ref4) {
              var _ref4$align = _ref4.align, align = _ref4$align === void 0 ? "auto" : _ref4$align, columnIndex = _ref4.columnIndex, rowIndex = _ref4.rowIndex;
              var _this$props2 = this.props, columnCount = _this$props2.columnCount, height = _this$props2.height, rowCount = _this$props2.rowCount, width = _this$props2.width;
              var _this$state = this.state, scrollLeft = _this$state.scrollLeft, scrollTop = _this$state.scrollTop;
              var scrollbarSize = getScrollbarSize();
              if (columnIndex !== void 0) {
                columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));
              }
              if (rowIndex !== void 0) {
                rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));
              }
              var estimatedTotalHeight = getEstimatedTotalHeight2(this.props, this._instanceProps);
              var estimatedTotalWidth = getEstimatedTotalWidth2(this.props, this._instanceProps);
              var horizontalScrollbarSize = estimatedTotalWidth > width ? scrollbarSize : 0;
              var verticalScrollbarSize = estimatedTotalHeight > height ? scrollbarSize : 0;
              this.scrollTo({
                scrollLeft: columnIndex !== void 0 ? getOffsetForColumnAndAlignment(this.props, columnIndex, align, scrollLeft, this._instanceProps, verticalScrollbarSize) : scrollLeft,
                scrollTop: rowIndex !== void 0 ? getOffsetForRowAndAlignment(this.props, rowIndex, align, scrollTop, this._instanceProps, horizontalScrollbarSize) : scrollTop
              });
            };
            _proto.componentDidMount = function componentDidMount() {
              var _this$props3 = this.props, initialScrollLeft = _this$props3.initialScrollLeft, initialScrollTop = _this$props3.initialScrollTop;
              if (this._outerRef != null) {
                var outerRef = this._outerRef;
                if (typeof initialScrollLeft === "number") {
                  outerRef.scrollLeft = initialScrollLeft;
                }
                if (typeof initialScrollTop === "number") {
                  outerRef.scrollTop = initialScrollTop;
                }
              }
              this._callPropsCallbacks();
            };
            _proto.componentDidUpdate = function componentDidUpdate() {
              var direction = this.props.direction;
              var _this$state2 = this.state, scrollLeft = _this$state2.scrollLeft, scrollTop = _this$state2.scrollTop, scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;
              if (scrollUpdateWasRequested && this._outerRef != null) {
                var outerRef = this._outerRef;
                if (direction === "rtl") {
                  switch (getRTLOffsetType()) {
                    case "negative":
                      outerRef.scrollLeft = -scrollLeft;
                      break;
                    case "positive-ascending":
                      outerRef.scrollLeft = scrollLeft;
                      break;
                    default:
                      var clientWidth = outerRef.clientWidth, scrollWidth = outerRef.scrollWidth;
                      outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;
                      break;
                  }
                } else {
                  outerRef.scrollLeft = Math.max(0, scrollLeft);
                }
                outerRef.scrollTop = Math.max(0, scrollTop);
              }
              this._callPropsCallbacks();
            };
            _proto.componentWillUnmount = function componentWillUnmount() {
              if (this._resetIsScrollingTimeoutId !== null) {
                cancelTimeout(this._resetIsScrollingTimeoutId);
              }
            };
            _proto.render = function render() {
              var _this$props4 = this.props, children = _this$props4.children, className = _this$props4.className, columnCount = _this$props4.columnCount, direction = _this$props4.direction, height = _this$props4.height, innerRef = _this$props4.innerRef, innerElementType = _this$props4.innerElementType, innerTagName = _this$props4.innerTagName, itemData = _this$props4.itemData, _this$props4$itemKey = _this$props4.itemKey, itemKey = _this$props4$itemKey === void 0 ? defaultItemKey : _this$props4$itemKey, outerElementType = _this$props4.outerElementType, outerTagName = _this$props4.outerTagName, rowCount = _this$props4.rowCount, style = _this$props4.style, useIsScrolling = _this$props4.useIsScrolling, width = _this$props4.width;
              var isScrolling = this.state.isScrolling;
              var _this$_getHorizontalR = this._getHorizontalRangeToRender(), columnStartIndex = _this$_getHorizontalR[0], columnStopIndex = _this$_getHorizontalR[1];
              var _this$_getVerticalRan = this._getVerticalRangeToRender(), rowStartIndex = _this$_getVerticalRan[0], rowStopIndex = _this$_getVerticalRan[1];
              var items = [];
              if (columnCount > 0 && rowCount) {
                for (var _rowIndex = rowStartIndex; _rowIndex <= rowStopIndex; _rowIndex++) {
                  for (var _columnIndex = columnStartIndex; _columnIndex <= columnStopIndex; _columnIndex++) {
                    items.push(/* @__PURE__ */ (0, external_react_namespaceObject.createElement)(children, {
                      columnIndex: _columnIndex,
                      data: itemData,
                      isScrolling: useIsScrolling ? isScrolling : void 0,
                      key: itemKey({
                        columnIndex: _columnIndex,
                        data: itemData,
                        rowIndex: _rowIndex
                      }),
                      rowIndex: _rowIndex,
                      style: this._getItemStyle(_rowIndex, _columnIndex)
                    }));
                  }
                }
              }
              var estimatedTotalHeight = getEstimatedTotalHeight2(this.props, this._instanceProps);
              var estimatedTotalWidth = getEstimatedTotalWidth2(this.props, this._instanceProps);
              return /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(outerElementType || outerTagName || "div", {
                className,
                onScroll: this._onScroll,
                ref: this._outerRefSetter,
                style: _extends({
                  position: "relative",
                  height,
                  width,
                  overflow: "auto",
                  WebkitOverflowScrolling: "touch",
                  willChange: "transform",
                  direction
                }, style)
              }, /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(innerElementType || innerTagName || "div", {
                children: items,
                ref: innerRef,
                style: {
                  height: estimatedTotalHeight,
                  pointerEvents: isScrolling ? "none" : void 0,
                  width: estimatedTotalWidth
                }
              }));
            };
            _proto._callPropsCallbacks = function _callPropsCallbacks() {
              var _this$props5 = this.props, columnCount = _this$props5.columnCount, onItemsRendered = _this$props5.onItemsRendered, onScroll = _this$props5.onScroll, rowCount = _this$props5.rowCount;
              if (typeof onItemsRendered === "function") {
                if (columnCount > 0 && rowCount > 0) {
                  var _this$_getHorizontalR2 = this._getHorizontalRangeToRender(), _overscanColumnStartIndex = _this$_getHorizontalR2[0], _overscanColumnStopIndex = _this$_getHorizontalR2[1], _visibleColumnStartIndex = _this$_getHorizontalR2[2], _visibleColumnStopIndex = _this$_getHorizontalR2[3];
                  var _this$_getVerticalRan2 = this._getVerticalRangeToRender(), _overscanRowStartIndex = _this$_getVerticalRan2[0], _overscanRowStopIndex = _this$_getVerticalRan2[1], _visibleRowStartIndex = _this$_getVerticalRan2[2], _visibleRowStopIndex = _this$_getVerticalRan2[3];
                  this._callOnItemsRendered(_overscanColumnStartIndex, _overscanColumnStopIndex, _overscanRowStartIndex, _overscanRowStopIndex, _visibleColumnStartIndex, _visibleColumnStopIndex, _visibleRowStartIndex, _visibleRowStopIndex);
                }
              }
              if (typeof onScroll === "function") {
                var _this$state3 = this.state, _horizontalScrollDirection = _this$state3.horizontalScrollDirection, _scrollLeft = _this$state3.scrollLeft, _scrollTop = _this$state3.scrollTop, _scrollUpdateWasRequested = _this$state3.scrollUpdateWasRequested, _verticalScrollDirection = _this$state3.verticalScrollDirection;
                this._callOnScroll(_scrollLeft, _scrollTop, _horizontalScrollDirection, _verticalScrollDirection, _scrollUpdateWasRequested);
              }
            };
            _proto._getHorizontalRangeToRender = function _getHorizontalRangeToRender() {
              var _this$props6 = this.props, columnCount = _this$props6.columnCount, overscanColumnCount = _this$props6.overscanColumnCount, overscanColumnsCount = _this$props6.overscanColumnsCount, overscanCount = _this$props6.overscanCount, rowCount = _this$props6.rowCount;
              var _this$state4 = this.state, horizontalScrollDirection = _this$state4.horizontalScrollDirection, isScrolling = _this$state4.isScrolling, scrollLeft = _this$state4.scrollLeft;
              var overscanCountResolved = overscanColumnCount || overscanColumnsCount || overscanCount || 1;
              if (columnCount === 0 || rowCount === 0) {
                return [0, 0, 0, 0];
              }
              var startIndex = getColumnStartIndexForOffset(this.props, scrollLeft, this._instanceProps);
              var stopIndex = getColumnStopIndexForStartIndex(this.props, startIndex, scrollLeft, this._instanceProps);
              var overscanBackward = !isScrolling || horizontalScrollDirection === "backward" ? Math.max(1, overscanCountResolved) : 1;
              var overscanForward = !isScrolling || horizontalScrollDirection === "forward" ? Math.max(1, overscanCountResolved) : 1;
              return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];
            };
            _proto._getVerticalRangeToRender = function _getVerticalRangeToRender() {
              var _this$props7 = this.props, columnCount = _this$props7.columnCount, overscanCount = _this$props7.overscanCount, overscanRowCount = _this$props7.overscanRowCount, overscanRowsCount = _this$props7.overscanRowsCount, rowCount = _this$props7.rowCount;
              var _this$state5 = this.state, isScrolling = _this$state5.isScrolling, verticalScrollDirection = _this$state5.verticalScrollDirection, scrollTop = _this$state5.scrollTop;
              var overscanCountResolved = overscanRowCount || overscanRowsCount || overscanCount || 1;
              if (columnCount === 0 || rowCount === 0) {
                return [0, 0, 0, 0];
              }
              var startIndex = getRowStartIndexForOffset(this.props, scrollTop, this._instanceProps);
              var stopIndex = getRowStopIndexForStartIndex(this.props, startIndex, scrollTop, this._instanceProps);
              var overscanBackward = !isScrolling || verticalScrollDirection === "backward" ? Math.max(1, overscanCountResolved) : 1;
              var overscanForward = !isScrolling || verticalScrollDirection === "forward" ? Math.max(1, overscanCountResolved) : 1;
              return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];
            };
            return Grid;
          }(external_react_namespaceObject.PureComponent), _class.defaultProps = {
            direction: "ltr",
            itemData: void 0,
            useIsScrolling: false
          }, _class;
        }
        var validateSharedProps = function validateSharedProps2(_ref5, _ref6) {
          var children = _ref5.children, direction = _ref5.direction, height = _ref5.height, innerTagName = _ref5.innerTagName, outerTagName = _ref5.outerTagName, overscanColumnsCount = _ref5.overscanColumnsCount, overscanCount = _ref5.overscanCount, overscanRowsCount = _ref5.overscanRowsCount, width = _ref5.width;
          var instance = _ref6.instance;
          if (false) {
          }
        };
        var DEFAULT_ESTIMATED_ITEM_SIZE = 50;
        var getEstimatedTotalHeight = function getEstimatedTotalHeight2(_ref, _ref2) {
          var rowCount = _ref.rowCount;
          var rowMetadataMap = _ref2.rowMetadataMap, estimatedRowHeight = _ref2.estimatedRowHeight, lastMeasuredRowIndex = _ref2.lastMeasuredRowIndex;
          var totalSizeOfMeasuredRows = 0;
          if (lastMeasuredRowIndex >= rowCount) {
            lastMeasuredRowIndex = rowCount - 1;
          }
          if (lastMeasuredRowIndex >= 0) {
            var itemMetadata = rowMetadataMap[lastMeasuredRowIndex];
            totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;
          }
          var numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;
          var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;
          return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;
        };
        var getEstimatedTotalWidth = function getEstimatedTotalWidth2(_ref3, _ref4) {
          var columnCount = _ref3.columnCount;
          var columnMetadataMap = _ref4.columnMetadataMap, estimatedColumnWidth = _ref4.estimatedColumnWidth, lastMeasuredColumnIndex = _ref4.lastMeasuredColumnIndex;
          var totalSizeOfMeasuredRows = 0;
          if (lastMeasuredColumnIndex >= columnCount) {
            lastMeasuredColumnIndex = columnCount - 1;
          }
          if (lastMeasuredColumnIndex >= 0) {
            var itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];
            totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;
          }
          var numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;
          var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;
          return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;
        };
        var getItemMetadata = function getItemMetadata2(itemType, props2, index, instanceProps) {
          var itemMetadataMap, itemSize, lastMeasuredIndex;
          if (itemType === "column") {
            itemMetadataMap = instanceProps.columnMetadataMap;
            itemSize = props2.columnWidth;
            lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;
          } else {
            itemMetadataMap = instanceProps.rowMetadataMap;
            itemSize = props2.rowHeight;
            lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;
          }
          if (index > lastMeasuredIndex) {
            var offset = 0;
            if (lastMeasuredIndex >= 0) {
              var itemMetadata = itemMetadataMap[lastMeasuredIndex];
              offset = itemMetadata.offset + itemMetadata.size;
            }
            for (var i2 = lastMeasuredIndex + 1; i2 <= index; i2++) {
              var size2 = itemSize(i2);
              itemMetadataMap[i2] = {
                offset,
                size: size2
              };
              offset += size2;
            }
            if (itemType === "column") {
              instanceProps.lastMeasuredColumnIndex = index;
            } else {
              instanceProps.lastMeasuredRowIndex = index;
            }
          }
          return itemMetadataMap[index];
        };
        var findNearestItem = function findNearestItem2(itemType, props2, instanceProps, offset) {
          var itemMetadataMap, lastMeasuredIndex;
          if (itemType === "column") {
            itemMetadataMap = instanceProps.columnMetadataMap;
            lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;
          } else {
            itemMetadataMap = instanceProps.rowMetadataMap;
            lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;
          }
          var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;
          if (lastMeasuredItemOffset >= offset) {
            return findNearestItemBinarySearch(itemType, props2, instanceProps, lastMeasuredIndex, 0, offset);
          } else {
            return findNearestItemExponentialSearch(itemType, props2, instanceProps, Math.max(0, lastMeasuredIndex), offset);
          }
        };
        var findNearestItemBinarySearch = function findNearestItemBinarySearch2(itemType, props2, instanceProps, high, low, offset) {
          while (low <= high) {
            var middle = low + Math.floor((high - low) / 2);
            var currentOffset = getItemMetadata(itemType, props2, middle, instanceProps).offset;
            if (currentOffset === offset) {
              return middle;
            } else if (currentOffset < offset) {
              low = middle + 1;
            } else if (currentOffset > offset) {
              high = middle - 1;
            }
          }
          if (low > 0) {
            return low - 1;
          } else {
            return 0;
          }
        };
        var findNearestItemExponentialSearch = function findNearestItemExponentialSearch2(itemType, props2, instanceProps, index, offset) {
          var itemCount = itemType === "column" ? props2.columnCount : props2.rowCount;
          var interval = 1;
          while (index < itemCount && getItemMetadata(itemType, props2, index, instanceProps).offset < offset) {
            index += interval;
            interval *= 2;
          }
          return findNearestItemBinarySearch(itemType, props2, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);
        };
        var getOffsetForIndexAndAlignment = function getOffsetForIndexAndAlignment2(itemType, props2, index, align, scrollOffset, instanceProps, scrollbarSize) {
          var size2 = itemType === "column" ? props2.width : props2.height;
          var itemMetadata = getItemMetadata(itemType, props2, index, instanceProps);
          var estimatedTotalSize = itemType === "column" ? getEstimatedTotalWidth(props2, instanceProps) : getEstimatedTotalHeight(props2, instanceProps);
          var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size2, itemMetadata.offset));
          var minOffset = Math.max(0, itemMetadata.offset - size2 + scrollbarSize + itemMetadata.size);
          if (align === "smart") {
            if (scrollOffset >= minOffset - size2 && scrollOffset <= maxOffset + size2) {
              align = "auto";
            } else {
              align = "center";
            }
          }
          switch (align) {
            case "start":
              return maxOffset;
            case "end":
              return minOffset;
            case "center":
              return Math.round(minOffset + (maxOffset - minOffset) / 2);
            case "auto":
            default:
              if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
                return scrollOffset;
              } else if (minOffset > maxOffset) {
                return minOffset;
              } else if (scrollOffset < minOffset) {
                return minOffset;
              } else {
                return maxOffset;
              }
          }
        };
        var VariableSizeGrid = /* @__PURE__ */ createGridComponent({
          getColumnOffset: function getColumnOffset(props2, index, instanceProps) {
            return getItemMetadata("column", props2, index, instanceProps).offset;
          },
          getColumnStartIndexForOffset: function getColumnStartIndexForOffset(props2, scrollLeft, instanceProps) {
            return findNearestItem("column", props2, instanceProps, scrollLeft);
          },
          getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(props2, startIndex, scrollLeft, instanceProps) {
            var columnCount = props2.columnCount, width = props2.width;
            var itemMetadata = getItemMetadata("column", props2, startIndex, instanceProps);
            var maxOffset = scrollLeft + width;
            var offset = itemMetadata.offset + itemMetadata.size;
            var stopIndex = startIndex;
            while (stopIndex < columnCount - 1 && offset < maxOffset) {
              stopIndex++;
              offset += getItemMetadata("column", props2, stopIndex, instanceProps).size;
            }
            return stopIndex;
          },
          getColumnWidth: function getColumnWidth(props2, index, instanceProps) {
            return instanceProps.columnMetadataMap[index].size;
          },
          getEstimatedTotalHeight,
          getEstimatedTotalWidth,
          getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(props2, index, align, scrollOffset, instanceProps, scrollbarSize) {
            return getOffsetForIndexAndAlignment("column", props2, index, align, scrollOffset, instanceProps, scrollbarSize);
          },
          getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(props2, index, align, scrollOffset, instanceProps, scrollbarSize) {
            return getOffsetForIndexAndAlignment("row", props2, index, align, scrollOffset, instanceProps, scrollbarSize);
          },
          getRowOffset: function getRowOffset(props2, index, instanceProps) {
            return getItemMetadata("row", props2, index, instanceProps).offset;
          },
          getRowHeight: function getRowHeight(props2, index, instanceProps) {
            return instanceProps.rowMetadataMap[index].size;
          },
          getRowStartIndexForOffset: function getRowStartIndexForOffset(props2, scrollTop, instanceProps) {
            return findNearestItem("row", props2, instanceProps, scrollTop);
          },
          getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(props2, startIndex, scrollTop, instanceProps) {
            var rowCount = props2.rowCount, height = props2.height;
            var itemMetadata = getItemMetadata("row", props2, startIndex, instanceProps);
            var maxOffset = scrollTop + height;
            var offset = itemMetadata.offset + itemMetadata.size;
            var stopIndex = startIndex;
            while (stopIndex < rowCount - 1 && offset < maxOffset) {
              stopIndex++;
              offset += getItemMetadata("row", props2, stopIndex, instanceProps).size;
            }
            return stopIndex;
          },
          initInstanceProps: function initInstanceProps(props2, instance) {
            var _ref5 = props2, estimatedColumnWidth = _ref5.estimatedColumnWidth, estimatedRowHeight = _ref5.estimatedRowHeight;
            var instanceProps = {
              columnMetadataMap: {},
              estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,
              estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,
              lastMeasuredColumnIndex: -1,
              lastMeasuredRowIndex: -1,
              rowMetadataMap: {}
            };
            instance.resetAfterColumnIndex = function(columnIndex, shouldForceUpdate) {
              if (shouldForceUpdate === void 0) {
                shouldForceUpdate = true;
              }
              instance.resetAfterIndices({
                columnIndex,
                shouldForceUpdate
              });
            };
            instance.resetAfterRowIndex = function(rowIndex, shouldForceUpdate) {
              if (shouldForceUpdate === void 0) {
                shouldForceUpdate = true;
              }
              instance.resetAfterIndices({
                rowIndex,
                shouldForceUpdate
              });
            };
            instance.resetAfterIndices = function(_ref6) {
              var columnIndex = _ref6.columnIndex, rowIndex = _ref6.rowIndex, _ref6$shouldForceUpda = _ref6.shouldForceUpdate, shouldForceUpdate = _ref6$shouldForceUpda === void 0 ? true : _ref6$shouldForceUpda;
              if (typeof columnIndex === "number") {
                instanceProps.lastMeasuredColumnIndex = Math.min(instanceProps.lastMeasuredColumnIndex, columnIndex - 1);
              }
              if (typeof rowIndex === "number") {
                instanceProps.lastMeasuredRowIndex = Math.min(instanceProps.lastMeasuredRowIndex, rowIndex - 1);
              }
              instance._getItemStyleCache(-1);
              if (shouldForceUpdate) {
                instance.forceUpdate();
              }
            };
            return instanceProps;
          },
          shouldResetStyleCacheOnItemSizeChange: false,
          validateProps: function validateProps(_ref7) {
            var columnWidth = _ref7.columnWidth, rowHeight = _ref7.rowHeight;
            if (false) {
            }
          }
        });
        var IS_SCROLLING_DEBOUNCE_INTERVAL$1 = 150;
        var defaultItemKey$1 = function defaultItemKey2(index, data) {
          return index;
        };
        var devWarningsDirection = null;
        var devWarningsTagName$1 = null;
        if (false) {
        }
        function createListComponent(_ref) {
          var _class;
          var getItemOffset = _ref.getItemOffset, getEstimatedTotalSize2 = _ref.getEstimatedTotalSize, getItemSize = _ref.getItemSize, getOffsetForIndexAndAlignment2 = _ref.getOffsetForIndexAndAlignment, getStartIndexForOffset = _ref.getStartIndexForOffset, getStopIndexForStartIndex = _ref.getStopIndexForStartIndex, initInstanceProps = _ref.initInstanceProps, shouldResetStyleCacheOnItemSizeChange = _ref.shouldResetStyleCacheOnItemSizeChange, validateProps = _ref.validateProps;
          return _class = /* @__PURE__ */ function(_PureComponent) {
            _inheritsLoose(List2, _PureComponent);
            function List2(props2) {
              var _this;
              _this = _PureComponent.call(this, props2) || this;
              _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_this));
              _this._outerRef = void 0;
              _this._resetIsScrollingTimeoutId = null;
              _this.state = {
                instance: _assertThisInitialized(_this),
                isScrolling: false,
                scrollDirection: "forward",
                scrollOffset: typeof _this.props.initialScrollOffset === "number" ? _this.props.initialScrollOffset : 0,
                scrollUpdateWasRequested: false
              };
              _this._callOnItemsRendered = void 0;
              _this._callOnItemsRendered = memoize_one_esm(function(overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex) {
                return _this.props.onItemsRendered({
                  overscanStartIndex,
                  overscanStopIndex,
                  visibleStartIndex,
                  visibleStopIndex
                });
              });
              _this._callOnScroll = void 0;
              _this._callOnScroll = memoize_one_esm(function(scrollDirection, scrollOffset, scrollUpdateWasRequested) {
                return _this.props.onScroll({
                  scrollDirection,
                  scrollOffset,
                  scrollUpdateWasRequested
                });
              });
              _this._getItemStyle = void 0;
              _this._getItemStyle = function(index) {
                var _this$props = _this.props, direction = _this$props.direction, itemSize = _this$props.itemSize, layout = _this$props.layout;
                var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && itemSize, shouldResetStyleCacheOnItemSizeChange && layout, shouldResetStyleCacheOnItemSizeChange && direction);
                var style;
                if (itemStyleCache.hasOwnProperty(index)) {
                  style = itemStyleCache[index];
                } else {
                  var _offset = getItemOffset(_this.props, index, _this._instanceProps);
                  var size2 = getItemSize(_this.props, index, _this._instanceProps);
                  var isHorizontal = direction === "horizontal" || layout === "horizontal";
                  var isRtl = direction === "rtl";
                  var offsetHorizontal = isHorizontal ? _offset : 0;
                  itemStyleCache[index] = style = {
                    position: "absolute",
                    left: isRtl ? void 0 : offsetHorizontal,
                    right: isRtl ? offsetHorizontal : void 0,
                    top: !isHorizontal ? _offset : 0,
                    height: !isHorizontal ? size2 : "100%",
                    width: isHorizontal ? size2 : "100%"
                  };
                }
                return style;
              };
              _this._getItemStyleCache = void 0;
              _this._getItemStyleCache = memoize_one_esm(function(_, __, ___) {
                return {};
              });
              _this._onScrollHorizontal = function(event) {
                var _event$currentTarget = event.currentTarget, clientWidth = _event$currentTarget.clientWidth, scrollLeft = _event$currentTarget.scrollLeft, scrollWidth = _event$currentTarget.scrollWidth;
                _this.setState(function(prevState) {
                  if (prevState.scrollOffset === scrollLeft) {
                    return null;
                  }
                  var direction = _this.props.direction;
                  var scrollOffset = scrollLeft;
                  if (direction === "rtl") {
                    switch (getRTLOffsetType()) {
                      case "negative":
                        scrollOffset = -scrollLeft;
                        break;
                      case "positive-descending":
                        scrollOffset = scrollWidth - clientWidth - scrollLeft;
                        break;
                    }
                  }
                  scrollOffset = Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));
                  return {
                    isScrolling: true,
                    scrollDirection: prevState.scrollOffset < scrollOffset ? "forward" : "backward",
                    scrollOffset,
                    scrollUpdateWasRequested: false
                  };
                }, _this._resetIsScrollingDebounced);
              };
              _this._onScrollVertical = function(event) {
                var _event$currentTarget2 = event.currentTarget, clientHeight = _event$currentTarget2.clientHeight, scrollHeight = _event$currentTarget2.scrollHeight, scrollTop = _event$currentTarget2.scrollTop;
                _this.setState(function(prevState) {
                  if (prevState.scrollOffset === scrollTop) {
                    return null;
                  }
                  var scrollOffset = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));
                  return {
                    isScrolling: true,
                    scrollDirection: prevState.scrollOffset < scrollOffset ? "forward" : "backward",
                    scrollOffset,
                    scrollUpdateWasRequested: false
                  };
                }, _this._resetIsScrollingDebounced);
              };
              _this._outerRefSetter = function(ref) {
                var outerRef = _this.props.outerRef;
                _this._outerRef = ref;
                if (typeof outerRef === "function") {
                  outerRef(ref);
                } else if (outerRef != null && typeof outerRef === "object" && outerRef.hasOwnProperty("current")) {
                  outerRef.current = ref;
                }
              };
              _this._resetIsScrollingDebounced = function() {
                if (_this._resetIsScrollingTimeoutId !== null) {
                  cancelTimeout(_this._resetIsScrollingTimeoutId);
                }
                _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL$1);
              };
              _this._resetIsScrolling = function() {
                _this._resetIsScrollingTimeoutId = null;
                _this.setState({
                  isScrolling: false
                }, function() {
                  _this._getItemStyleCache(-1, null);
                });
              };
              return _this;
            }
            List2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
              validateSharedProps$1(nextProps, prevState);
              validateProps(nextProps);
              return null;
            };
            var _proto = List2.prototype;
            _proto.scrollTo = function scrollTo(scrollOffset) {
              scrollOffset = Math.max(0, scrollOffset);
              this.setState(function(prevState) {
                if (prevState.scrollOffset === scrollOffset) {
                  return null;
                }
                return {
                  scrollDirection: prevState.scrollOffset < scrollOffset ? "forward" : "backward",
                  scrollOffset,
                  scrollUpdateWasRequested: true
                };
              }, this._resetIsScrollingDebounced);
            };
            _proto.scrollToItem = function scrollToItem(index, align) {
              if (align === void 0) {
                align = "auto";
              }
              var _this$props2 = this.props, itemCount = _this$props2.itemCount, layout = _this$props2.layout;
              var scrollOffset = this.state.scrollOffset;
              index = Math.max(0, Math.min(index, itemCount - 1));
              var scrollbarSize = 0;
              if (this._outerRef) {
                var outerRef = this._outerRef;
                if (layout === "vertical") {
                  scrollbarSize = outerRef.scrollWidth > outerRef.clientWidth ? getScrollbarSize() : 0;
                } else {
                  scrollbarSize = outerRef.scrollHeight > outerRef.clientHeight ? getScrollbarSize() : 0;
                }
              }
              this.scrollTo(getOffsetForIndexAndAlignment2(this.props, index, align, scrollOffset, this._instanceProps, scrollbarSize));
            };
            _proto.componentDidMount = function componentDidMount() {
              var _this$props3 = this.props, direction = _this$props3.direction, initialScrollOffset = _this$props3.initialScrollOffset, layout = _this$props3.layout;
              if (typeof initialScrollOffset === "number" && this._outerRef != null) {
                var outerRef = this._outerRef;
                if (direction === "horizontal" || layout === "horizontal") {
                  outerRef.scrollLeft = initialScrollOffset;
                } else {
                  outerRef.scrollTop = initialScrollOffset;
                }
              }
              this._callPropsCallbacks();
            };
            _proto.componentDidUpdate = function componentDidUpdate() {
              var _this$props4 = this.props, direction = _this$props4.direction, layout = _this$props4.layout;
              var _this$state = this.state, scrollOffset = _this$state.scrollOffset, scrollUpdateWasRequested = _this$state.scrollUpdateWasRequested;
              if (scrollUpdateWasRequested && this._outerRef != null) {
                var outerRef = this._outerRef;
                if (direction === "horizontal" || layout === "horizontal") {
                  if (direction === "rtl") {
                    switch (getRTLOffsetType()) {
                      case "negative":
                        outerRef.scrollLeft = -scrollOffset;
                        break;
                      case "positive-ascending":
                        outerRef.scrollLeft = scrollOffset;
                        break;
                      default:
                        var clientWidth = outerRef.clientWidth, scrollWidth = outerRef.scrollWidth;
                        outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;
                        break;
                    }
                  } else {
                    outerRef.scrollLeft = scrollOffset;
                  }
                } else {
                  outerRef.scrollTop = scrollOffset;
                }
              }
              this._callPropsCallbacks();
            };
            _proto.componentWillUnmount = function componentWillUnmount() {
              if (this._resetIsScrollingTimeoutId !== null) {
                cancelTimeout(this._resetIsScrollingTimeoutId);
              }
            };
            _proto.render = function render() {
              var _this$props5 = this.props, children = _this$props5.children, className = _this$props5.className, direction = _this$props5.direction, height = _this$props5.height, innerRef = _this$props5.innerRef, innerElementType = _this$props5.innerElementType, innerTagName = _this$props5.innerTagName, itemCount = _this$props5.itemCount, itemData = _this$props5.itemData, _this$props5$itemKey = _this$props5.itemKey, itemKey = _this$props5$itemKey === void 0 ? defaultItemKey$1 : _this$props5$itemKey, layout = _this$props5.layout, outerElementType = _this$props5.outerElementType, outerTagName = _this$props5.outerTagName, style = _this$props5.style, useIsScrolling = _this$props5.useIsScrolling, width = _this$props5.width;
              var isScrolling = this.state.isScrolling;
              var isHorizontal = direction === "horizontal" || layout === "horizontal";
              var onScroll = isHorizontal ? this._onScrollHorizontal : this._onScrollVertical;
              var _this$_getRangeToRend = this._getRangeToRender(), startIndex = _this$_getRangeToRend[0], stopIndex = _this$_getRangeToRend[1];
              var items = [];
              if (itemCount > 0) {
                for (var _index = startIndex; _index <= stopIndex; _index++) {
                  items.push(/* @__PURE__ */ (0, external_react_namespaceObject.createElement)(children, {
                    data: itemData,
                    key: itemKey(_index, itemData),
                    index: _index,
                    isScrolling: useIsScrolling ? isScrolling : void 0,
                    style: this._getItemStyle(_index)
                  }));
                }
              }
              var estimatedTotalSize = getEstimatedTotalSize2(this.props, this._instanceProps);
              return /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(outerElementType || outerTagName || "div", {
                className,
                onScroll,
                ref: this._outerRefSetter,
                style: _extends({
                  position: "relative",
                  height,
                  width,
                  overflow: "auto",
                  WebkitOverflowScrolling: "touch",
                  willChange: "transform",
                  direction
                }, style)
              }, /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(innerElementType || innerTagName || "div", {
                children: items,
                ref: innerRef,
                style: {
                  height: isHorizontal ? "100%" : estimatedTotalSize,
                  pointerEvents: isScrolling ? "none" : void 0,
                  width: isHorizontal ? estimatedTotalSize : "100%"
                }
              }));
            };
            _proto._callPropsCallbacks = function _callPropsCallbacks() {
              if (typeof this.props.onItemsRendered === "function") {
                var itemCount = this.props.itemCount;
                if (itemCount > 0) {
                  var _this$_getRangeToRend2 = this._getRangeToRender(), _overscanStartIndex = _this$_getRangeToRend2[0], _overscanStopIndex = _this$_getRangeToRend2[1], _visibleStartIndex = _this$_getRangeToRend2[2], _visibleStopIndex = _this$_getRangeToRend2[3];
                  this._callOnItemsRendered(_overscanStartIndex, _overscanStopIndex, _visibleStartIndex, _visibleStopIndex);
                }
              }
              if (typeof this.props.onScroll === "function") {
                var _this$state2 = this.state, _scrollDirection = _this$state2.scrollDirection, _scrollOffset = _this$state2.scrollOffset, _scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;
                this._callOnScroll(_scrollDirection, _scrollOffset, _scrollUpdateWasRequested);
              }
            };
            _proto._getRangeToRender = function _getRangeToRender() {
              var _this$props6 = this.props, itemCount = _this$props6.itemCount, overscanCount = _this$props6.overscanCount;
              var _this$state3 = this.state, isScrolling = _this$state3.isScrolling, scrollDirection = _this$state3.scrollDirection, scrollOffset = _this$state3.scrollOffset;
              if (itemCount === 0) {
                return [0, 0, 0, 0];
              }
              var startIndex = getStartIndexForOffset(this.props, scrollOffset, this._instanceProps);
              var stopIndex = getStopIndexForStartIndex(this.props, startIndex, scrollOffset, this._instanceProps);
              var overscanBackward = !isScrolling || scrollDirection === "backward" ? Math.max(1, overscanCount) : 1;
              var overscanForward = !isScrolling || scrollDirection === "forward" ? Math.max(1, overscanCount) : 1;
              return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];
            };
            return List2;
          }(external_react_namespaceObject.PureComponent), _class.defaultProps = {
            direction: "ltr",
            itemData: void 0,
            layout: "vertical",
            overscanCount: 2,
            useIsScrolling: false
          }, _class;
        }
        var validateSharedProps$1 = function validateSharedProps2(_ref2, _ref3) {
          var children = _ref2.children, direction = _ref2.direction, height = _ref2.height, layout = _ref2.layout, innerTagName = _ref2.innerTagName, outerTagName = _ref2.outerTagName, width = _ref2.width;
          var instance = _ref3.instance;
          if (false) {
            var isHorizontal;
          }
        };
        var DEFAULT_ESTIMATED_ITEM_SIZE$1 = 50;
        var getItemMetadata$1 = function getItemMetadata2(props2, index, instanceProps) {
          var _ref = props2, itemSize = _ref.itemSize;
          var itemMetadataMap = instanceProps.itemMetadataMap, lastMeasuredIndex = instanceProps.lastMeasuredIndex;
          if (index > lastMeasuredIndex) {
            var offset = 0;
            if (lastMeasuredIndex >= 0) {
              var itemMetadata = itemMetadataMap[lastMeasuredIndex];
              offset = itemMetadata.offset + itemMetadata.size;
            }
            for (var i2 = lastMeasuredIndex + 1; i2 <= index; i2++) {
              var size2 = itemSize(i2);
              itemMetadataMap[i2] = {
                offset,
                size: size2
              };
              offset += size2;
            }
            instanceProps.lastMeasuredIndex = index;
          }
          return itemMetadataMap[index];
        };
        var findNearestItem$1 = function findNearestItem2(props2, instanceProps, offset) {
          var itemMetadataMap = instanceProps.itemMetadataMap, lastMeasuredIndex = instanceProps.lastMeasuredIndex;
          var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;
          if (lastMeasuredItemOffset >= offset) {
            return findNearestItemBinarySearch$1(props2, instanceProps, lastMeasuredIndex, 0, offset);
          } else {
            return findNearestItemExponentialSearch$1(props2, instanceProps, Math.max(0, lastMeasuredIndex), offset);
          }
        };
        var findNearestItemBinarySearch$1 = function findNearestItemBinarySearch2(props2, instanceProps, high, low, offset) {
          while (low <= high) {
            var middle = low + Math.floor((high - low) / 2);
            var currentOffset = getItemMetadata$1(props2, middle, instanceProps).offset;
            if (currentOffset === offset) {
              return middle;
            } else if (currentOffset < offset) {
              low = middle + 1;
            } else if (currentOffset > offset) {
              high = middle - 1;
            }
          }
          if (low > 0) {
            return low - 1;
          } else {
            return 0;
          }
        };
        var findNearestItemExponentialSearch$1 = function findNearestItemExponentialSearch2(props2, instanceProps, index, offset) {
          var itemCount = props2.itemCount;
          var interval = 1;
          while (index < itemCount && getItemMetadata$1(props2, index, instanceProps).offset < offset) {
            index += interval;
            interval *= 2;
          }
          return findNearestItemBinarySearch$1(props2, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);
        };
        var getEstimatedTotalSize = function getEstimatedTotalSize2(_ref2, _ref3) {
          var itemCount = _ref2.itemCount;
          var itemMetadataMap = _ref3.itemMetadataMap, estimatedItemSize = _ref3.estimatedItemSize, lastMeasuredIndex = _ref3.lastMeasuredIndex;
          var totalSizeOfMeasuredItems = 0;
          if (lastMeasuredIndex >= itemCount) {
            lastMeasuredIndex = itemCount - 1;
          }
          if (lastMeasuredIndex >= 0) {
            var itemMetadata = itemMetadataMap[lastMeasuredIndex];
            totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;
          }
          var numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;
          var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;
          return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;
        };
        var VariableSizeList = /* @__PURE__ */ createListComponent({
          getItemOffset: function getItemOffset(props2, index, instanceProps) {
            return getItemMetadata$1(props2, index, instanceProps).offset;
          },
          getItemSize: function getItemSize(props2, index, instanceProps) {
            return instanceProps.itemMetadataMap[index].size;
          },
          getEstimatedTotalSize,
          getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment2(props2, index, align, scrollOffset, instanceProps, scrollbarSize) {
            var direction = props2.direction, height = props2.height, layout = props2.layout, width = props2.width;
            var isHorizontal = direction === "horizontal" || layout === "horizontal";
            var size2 = isHorizontal ? width : height;
            var itemMetadata = getItemMetadata$1(props2, index, instanceProps);
            var estimatedTotalSize = getEstimatedTotalSize(props2, instanceProps);
            var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size2, itemMetadata.offset));
            var minOffset = Math.max(0, itemMetadata.offset - size2 + itemMetadata.size + scrollbarSize);
            if (align === "smart") {
              if (scrollOffset >= minOffset - size2 && scrollOffset <= maxOffset + size2) {
                align = "auto";
              } else {
                align = "center";
              }
            }
            switch (align) {
              case "start":
                return maxOffset;
              case "end":
                return minOffset;
              case "center":
                return Math.round(minOffset + (maxOffset - minOffset) / 2);
              case "auto":
              default:
                if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
                  return scrollOffset;
                } else if (scrollOffset < minOffset) {
                  return minOffset;
                } else {
                  return maxOffset;
                }
            }
          },
          getStartIndexForOffset: function getStartIndexForOffset(props2, offset, instanceProps) {
            return findNearestItem$1(props2, instanceProps, offset);
          },
          getStopIndexForStartIndex: function getStopIndexForStartIndex(props2, startIndex, scrollOffset, instanceProps) {
            var direction = props2.direction, height = props2.height, itemCount = props2.itemCount, layout = props2.layout, width = props2.width;
            var isHorizontal = direction === "horizontal" || layout === "horizontal";
            var size2 = isHorizontal ? width : height;
            var itemMetadata = getItemMetadata$1(props2, startIndex, instanceProps);
            var maxOffset = scrollOffset + size2;
            var offset = itemMetadata.offset + itemMetadata.size;
            var stopIndex = startIndex;
            while (stopIndex < itemCount - 1 && offset < maxOffset) {
              stopIndex++;
              offset += getItemMetadata$1(props2, stopIndex, instanceProps).size;
            }
            return stopIndex;
          },
          initInstanceProps: function initInstanceProps(props2, instance) {
            var _ref4 = props2, estimatedItemSize = _ref4.estimatedItemSize;
            var instanceProps = {
              itemMetadataMap: {},
              estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE$1,
              lastMeasuredIndex: -1
            };
            instance.resetAfterIndex = function(index, shouldForceUpdate) {
              if (shouldForceUpdate === void 0) {
                shouldForceUpdate = true;
              }
              instanceProps.lastMeasuredIndex = Math.min(instanceProps.lastMeasuredIndex, index - 1);
              instance._getItemStyleCache(-1);
              if (shouldForceUpdate) {
                instance.forceUpdate();
              }
            };
            return instanceProps;
          },
          shouldResetStyleCacheOnItemSizeChange: false,
          validateProps: function validateProps(_ref5) {
            var itemSize = _ref5.itemSize;
            if (false) {
            }
          }
        });
        var FixedSizeGrid = /* @__PURE__ */ createGridComponent({
          getColumnOffset: function getColumnOffset(_ref, index) {
            var columnWidth = _ref.columnWidth;
            return index * columnWidth;
          },
          getColumnWidth: function getColumnWidth(_ref2, index) {
            var columnWidth = _ref2.columnWidth;
            return columnWidth;
          },
          getRowOffset: function getRowOffset(_ref3, index) {
            var rowHeight = _ref3.rowHeight;
            return index * rowHeight;
          },
          getRowHeight: function getRowHeight(_ref4, index) {
            var rowHeight = _ref4.rowHeight;
            return rowHeight;
          },
          getEstimatedTotalHeight: function getEstimatedTotalHeight2(_ref5) {
            var rowCount = _ref5.rowCount, rowHeight = _ref5.rowHeight;
            return rowHeight * rowCount;
          },
          getEstimatedTotalWidth: function getEstimatedTotalWidth2(_ref6) {
            var columnCount = _ref6.columnCount, columnWidth = _ref6.columnWidth;
            return columnWidth * columnCount;
          },
          getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(_ref7, columnIndex, align, scrollLeft, instanceProps, scrollbarSize) {
            var columnCount = _ref7.columnCount, columnWidth = _ref7.columnWidth, width = _ref7.width;
            var lastColumnOffset = Math.max(0, columnCount * columnWidth - width);
            var maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);
            var minOffset = Math.max(0, columnIndex * columnWidth - width + scrollbarSize + columnWidth);
            if (align === "smart") {
              if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {
                align = "auto";
              } else {
                align = "center";
              }
            }
            switch (align) {
              case "start":
                return maxOffset;
              case "end":
                return minOffset;
              case "center":
                var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
                if (middleOffset < Math.ceil(width / 2)) {
                  return 0;
                } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {
                  return lastColumnOffset;
                } else {
                  return middleOffset;
                }
              case "auto":
              default:
                if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {
                  return scrollLeft;
                } else if (minOffset > maxOffset) {
                  return minOffset;
                } else if (scrollLeft < minOffset) {
                  return minOffset;
                } else {
                  return maxOffset;
                }
            }
          },
          getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(_ref8, rowIndex, align, scrollTop, instanceProps, scrollbarSize) {
            var rowHeight = _ref8.rowHeight, height = _ref8.height, rowCount = _ref8.rowCount;
            var lastRowOffset = Math.max(0, rowCount * rowHeight - height);
            var maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);
            var minOffset = Math.max(0, rowIndex * rowHeight - height + scrollbarSize + rowHeight);
            if (align === "smart") {
              if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {
                align = "auto";
              } else {
                align = "center";
              }
            }
            switch (align) {
              case "start":
                return maxOffset;
              case "end":
                return minOffset;
              case "center":
                var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
                if (middleOffset < Math.ceil(height / 2)) {
                  return 0;
                } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {
                  return lastRowOffset;
                } else {
                  return middleOffset;
                }
              case "auto":
              default:
                if (scrollTop >= minOffset && scrollTop <= maxOffset) {
                  return scrollTop;
                } else if (minOffset > maxOffset) {
                  return minOffset;
                } else if (scrollTop < minOffset) {
                  return minOffset;
                } else {
                  return maxOffset;
                }
            }
          },
          getColumnStartIndexForOffset: function getColumnStartIndexForOffset(_ref9, scrollLeft) {
            var columnWidth = _ref9.columnWidth, columnCount = _ref9.columnCount;
            return Math.max(0, Math.min(columnCount - 1, Math.floor(scrollLeft / columnWidth)));
          },
          getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(_ref10, startIndex, scrollLeft) {
            var columnWidth = _ref10.columnWidth, columnCount = _ref10.columnCount, width = _ref10.width;
            var left = startIndex * columnWidth;
            var numVisibleColumns = Math.ceil((width + scrollLeft - left) / columnWidth);
            return Math.max(0, Math.min(
              columnCount - 1,
              startIndex + numVisibleColumns - 1
              // -1 is because stop index is inclusive
            ));
          },
          getRowStartIndexForOffset: function getRowStartIndexForOffset(_ref11, scrollTop) {
            var rowHeight = _ref11.rowHeight, rowCount = _ref11.rowCount;
            return Math.max(0, Math.min(rowCount - 1, Math.floor(scrollTop / rowHeight)));
          },
          getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(_ref12, startIndex, scrollTop) {
            var rowHeight = _ref12.rowHeight, rowCount = _ref12.rowCount, height = _ref12.height;
            var top = startIndex * rowHeight;
            var numVisibleRows = Math.ceil((height + scrollTop - top) / rowHeight);
            return Math.max(0, Math.min(
              rowCount - 1,
              startIndex + numVisibleRows - 1
              // -1 is because stop index is inclusive
            ));
          },
          initInstanceProps: function initInstanceProps(props2) {
          },
          shouldResetStyleCacheOnItemSizeChange: true,
          validateProps: function validateProps(_ref13) {
            var columnWidth = _ref13.columnWidth, rowHeight = _ref13.rowHeight;
            if (false) {
            }
          }
        });
        var FixedSizeList = /* @__PURE__ */ createListComponent({
          getItemOffset: function getItemOffset(_ref, index) {
            var itemSize = _ref.itemSize;
            return index * itemSize;
          },
          getItemSize: function getItemSize(_ref2, index) {
            var itemSize = _ref2.itemSize;
            return itemSize;
          },
          getEstimatedTotalSize: function getEstimatedTotalSize2(_ref3) {
            var itemCount = _ref3.itemCount, itemSize = _ref3.itemSize;
            return itemSize * itemCount;
          },
          getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment2(_ref4, index, align, scrollOffset, instanceProps, scrollbarSize) {
            var direction = _ref4.direction, height = _ref4.height, itemCount = _ref4.itemCount, itemSize = _ref4.itemSize, layout = _ref4.layout, width = _ref4.width;
            var isHorizontal = direction === "horizontal" || layout === "horizontal";
            var size2 = isHorizontal ? width : height;
            var lastItemOffset = Math.max(0, itemCount * itemSize - size2);
            var maxOffset = Math.min(lastItemOffset, index * itemSize);
            var minOffset = Math.max(0, index * itemSize - size2 + itemSize + scrollbarSize);
            if (align === "smart") {
              if (scrollOffset >= minOffset - size2 && scrollOffset <= maxOffset + size2) {
                align = "auto";
              } else {
                align = "center";
              }
            }
            switch (align) {
              case "start":
                return maxOffset;
              case "end":
                return minOffset;
              case "center": {
                var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
                if (middleOffset < Math.ceil(size2 / 2)) {
                  return 0;
                } else if (middleOffset > lastItemOffset + Math.floor(size2 / 2)) {
                  return lastItemOffset;
                } else {
                  return middleOffset;
                }
              }
              case "auto":
              default:
                if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
                  return scrollOffset;
                } else if (scrollOffset < minOffset) {
                  return minOffset;
                } else {
                  return maxOffset;
                }
            }
          },
          getStartIndexForOffset: function getStartIndexForOffset(_ref5, offset) {
            var itemCount = _ref5.itemCount, itemSize = _ref5.itemSize;
            return Math.max(0, Math.min(itemCount - 1, Math.floor(offset / itemSize)));
          },
          getStopIndexForStartIndex: function getStopIndexForStartIndex(_ref6, startIndex, scrollOffset) {
            var direction = _ref6.direction, height = _ref6.height, itemCount = _ref6.itemCount, itemSize = _ref6.itemSize, layout = _ref6.layout, width = _ref6.width;
            var isHorizontal = direction === "horizontal" || layout === "horizontal";
            var offset = startIndex * itemSize;
            var size2 = isHorizontal ? width : height;
            var numVisibleItems = Math.ceil((size2 + scrollOffset - offset) / itemSize);
            return Math.max(0, Math.min(
              itemCount - 1,
              startIndex + numVisibleItems - 1
              // -1 is because stop index is inclusive
            ));
          },
          initInstanceProps: function initInstanceProps(props2) {
          },
          shouldResetStyleCacheOnItemSizeChange: true,
          validateProps: function validateProps(_ref7) {
            var itemSize = _ref7.itemSize;
            if (false) {
            }
          }
        });
        function index_esm_shallowDiffers(prev, next) {
          for (var attribute in prev) {
            if (!(attribute in next)) {
              return true;
            }
          }
          for (var _attribute in next) {
            if (prev[_attribute] !== next[_attribute]) {
              return true;
            }
          }
          return false;
        }
        var _excluded = ["style"], _excluded2 = ["style"];
        function areEqual(prevProps, nextProps) {
          var prevStyle = prevProps.style, prevRest = _objectWithoutPropertiesLoose(prevProps, _excluded);
          var nextStyle = nextProps.style, nextRest = _objectWithoutPropertiesLoose(nextProps, _excluded2);
          return !index_esm_shallowDiffers(prevStyle, nextStyle) && !index_esm_shallowDiffers(prevRest, nextRest);
        }
        function shouldComponentUpdate(nextProps, nextState) {
          return !areEqual(this.props, nextProps) || index_esm_shallowDiffers(this.state, nextState);
        }
        var escape_string_regexp = __webpack_require__(1014);
        var escape_string_regexp_default = /* @__PURE__ */ __webpack_require__.n(escape_string_regexp);
        ;
        const views_utils_hasOwnProperty = Object.prototype.hasOwnProperty;
        function alphaSortEntries(entryA, entryB) {
          const a = entryA[0];
          const b = entryB[0];
          if (String(+a) === a) {
            if (String(+b) !== b) {
              return -1;
            }
            return +a < +b ? -1 : 1;
          }
          return a < b ? -1 : 1;
        }
        function createRegExp(string) {
          if (string[0] === "/") {
            string = string.slice(1);
            if (string[string.length - 1] === "/") {
              string = string.slice(0, string.length - 1);
            }
            try {
              return new RegExp(string, "i");
            } catch (err) {
              return new RegExp(".^");
            }
          }
          function isLetter(char) {
            return char.toLowerCase() !== char.toUpperCase();
          }
          function matchAnyCase(char) {
            if (!isLetter(char)) {
              return char;
            }
            return "[" + char.toLowerCase() + char.toUpperCase() + "]";
          }
          const escaped = escape_string_regexp_default()(string);
          const firstChar = escaped[0];
          let restRegex = "";
          for (let i2 = 1; i2 < escaped.length; i2++) {
            restRegex += matchAnyCase(escaped[i2]);
          }
          if (!isLetter(firstChar)) {
            return new RegExp(firstChar + restRegex);
          }
          return new RegExp(
            // For example:
            // (^[iI]|I)[tT][eE][mM]
            // Matches:
            // 'Item'
            // 'ListItem'
            // but not 'InviteMom'
            "(^" + matchAnyCase(firstChar) + "|" + firstChar.toUpperCase() + ")" + restRegex
          );
        }
        function getMetaValueLabel(data) {
          if (views_utils_hasOwnProperty.call(data, meta.preview_long)) {
            return data[meta.preview_long];
          } else {
            return utils_formatDataForPreview(data, true);
          }
        }
        function sanitize(data) {
          for (const key in data) {
            const value = data[key];
            if (value && value[meta.type]) {
              data[key] = getMetaValueLabel(value);
            } else if (value != null) {
              if (src_isArray(value)) {
                sanitize(value);
              } else if (typeof value === "object") {
                sanitize(value);
              }
            }
          }
        }
        function serializeDataForCopy(props2) {
          const cloned = Object.assign({}, props2);
          sanitize(cloned);
          try {
            return JSON.stringify(cloned, null, 2);
          } catch (error) {
            return "";
          }
        }
        function serializeHooksForCopy(hooks) {
          const cloned = Object.assign([], hooks);
          const queue = [...cloned];
          while (queue.length > 0) {
            const current = queue.pop();
            delete current.id;
            delete current.isStateEditable;
            if (current.subHooks.length > 0) {
              queue.push(...current.subHooks);
            }
          }
          sanitize(cloned);
          try {
            return JSON.stringify(cloned, null, 2);
          } catch (error) {
            return "";
          }
        }
        let downloadUrl = null;
        function downloadFile(element, filename, text) {
          const blob = new Blob([text], {
            type: "text/plain;charset=utf-8"
          });
          if (downloadUrl !== null) {
            URL.revokeObjectURL(downloadUrl);
          }
          downloadUrl = URL.createObjectURL(blob);
          element.setAttribute("href", downloadUrl);
          element.setAttribute("download", filename);
          element.click();
        }
        function truncateText(text, maxLength) {
          const {
            length
          } = text;
          if (length > maxLength) {
            return text.slice(0, Math.floor(maxLength / 2)) + "\u2026" + text.slice(length - Math.ceil(maxLength / 2) - 1);
          } else {
            return text;
          }
        }
        ;
        const TreeStateContext = /* @__PURE__ */ (0, external_react_namespaceObject.createContext)(null);
        TreeStateContext.displayName = "TreeStateContext";
        const TreeDispatcherContext = /* @__PURE__ */ (0, external_react_namespaceObject.createContext)(null);
        TreeDispatcherContext.displayName = "TreeDispatcherContext";
        function reduceTreeState(store, state2, action) {
          let {
            numElements,
            ownerSubtreeLeafElementID,
            selectedElementIndex,
            selectedElementID
          } = state2;
          const ownerID = state2.ownerID;
          let lookupIDForIndex = true;
          if (ownerID === null) {
            switch (action.type) {
              case "HANDLE_STORE_MUTATION":
                numElements = store.numElements;
                const removedIDs = action.payload[1];
                while (selectedElementID !== null && removedIDs.has(selectedElementID)) {
                  selectedElementID = removedIDs.get(selectedElementID);
                }
                if (selectedElementID === 0) {
                  selectedElementIndex = null;
                }
                break;
              case "SELECT_CHILD_ELEMENT_IN_TREE":
                ownerSubtreeLeafElementID = null;
                if (selectedElementIndex !== null) {
                  const selectedElement = store.getElementAtIndex(selectedElementIndex);
                  if (selectedElement !== null && selectedElement.children.length > 0 && !selectedElement.isCollapsed) {
                    const firstChildID = selectedElement.children[0];
                    const firstChildIndex = store.getIndexOfElementID(firstChildID);
                    if (firstChildIndex !== null) {
                      selectedElementIndex = firstChildIndex;
                    }
                  }
                }
                break;
              case "SELECT_ELEMENT_AT_INDEX":
                ownerSubtreeLeafElementID = null;
                selectedElementIndex = action.payload;
                break;
              case "SELECT_ELEMENT_BY_ID":
                ownerSubtreeLeafElementID = null;
                lookupIDForIndex = false;
                selectedElementID = action.payload;
                selectedElementIndex = selectedElementID === null ? null : store.getIndexOfElementID(selectedElementID);
                break;
              case "SELECT_NEXT_ELEMENT_IN_TREE":
                ownerSubtreeLeafElementID = null;
                if (selectedElementIndex === null || selectedElementIndex + 1 >= numElements) {
                  selectedElementIndex = 0;
                } else {
                  selectedElementIndex++;
                }
                break;
              case "SELECT_NEXT_SIBLING_IN_TREE":
                ownerSubtreeLeafElementID = null;
                if (selectedElementIndex !== null) {
                  const selectedElement = store.getElementAtIndex(selectedElementIndex);
                  if (selectedElement !== null && selectedElement.parentID !== 0) {
                    const parent = store.getElementByID(selectedElement.parentID);
                    if (parent !== null) {
                      const {
                        children
                      } = parent;
                      const selectedChildIndex = children.indexOf(selectedElement.id);
                      const nextChildID = selectedChildIndex < children.length - 1 ? children[selectedChildIndex + 1] : children[0];
                      selectedElementIndex = store.getIndexOfElementID(nextChildID);
                    }
                  }
                }
                break;
              case "SELECT_OWNER_LIST_NEXT_ELEMENT_IN_TREE":
                if (selectedElementIndex !== null) {
                  if (ownerSubtreeLeafElementID !== null && ownerSubtreeLeafElementID !== selectedElementID) {
                    const leafElement = store.getElementByID(ownerSubtreeLeafElementID);
                    if (leafElement !== null) {
                      let currentElement = leafElement;
                      while (currentElement !== null) {
                        if (currentElement.ownerID === selectedElementID) {
                          selectedElementIndex = store.getIndexOfElementID(currentElement.id);
                          break;
                        } else if (currentElement.ownerID !== 0) {
                          currentElement = store.getElementByID(currentElement.ownerID);
                        }
                      }
                    }
                  }
                }
                break;
              case "SELECT_OWNER_LIST_PREVIOUS_ELEMENT_IN_TREE":
                if (selectedElementIndex !== null) {
                  if (ownerSubtreeLeafElementID === null) {
                    ownerSubtreeLeafElementID = selectedElementID;
                  }
                  const selectedElement = store.getElementAtIndex(selectedElementIndex);
                  if (selectedElement !== null && selectedElement.ownerID !== 0) {
                    const ownerIndex = store.getIndexOfElementID(selectedElement.ownerID);
                    if (ownerIndex !== null) {
                      selectedElementIndex = ownerIndex;
                    }
                  }
                }
                break;
              case "SELECT_PARENT_ELEMENT_IN_TREE":
                ownerSubtreeLeafElementID = null;
                if (selectedElementIndex !== null) {
                  const selectedElement = store.getElementAtIndex(selectedElementIndex);
                  if (selectedElement !== null && selectedElement.parentID !== 0) {
                    const parentIndex = store.getIndexOfElementID(selectedElement.parentID);
                    if (parentIndex !== null) {
                      selectedElementIndex = parentIndex;
                    }
                  }
                }
                break;
              case "SELECT_PREVIOUS_ELEMENT_IN_TREE":
                ownerSubtreeLeafElementID = null;
                if (selectedElementIndex === null || selectedElementIndex === 0) {
                  selectedElementIndex = numElements - 1;
                } else {
                  selectedElementIndex--;
                }
                break;
              case "SELECT_PREVIOUS_SIBLING_IN_TREE":
                ownerSubtreeLeafElementID = null;
                if (selectedElementIndex !== null) {
                  const selectedElement = store.getElementAtIndex(selectedElementIndex);
                  if (selectedElement !== null && selectedElement.parentID !== 0) {
                    const parent = store.getElementByID(selectedElement.parentID);
                    if (parent !== null) {
                      const {
                        children
                      } = parent;
                      const selectedChildIndex = children.indexOf(selectedElement.id);
                      const nextChildID = selectedChildIndex > 0 ? children[selectedChildIndex - 1] : children[children.length - 1];
                      selectedElementIndex = store.getIndexOfElementID(nextChildID);
                    }
                  }
                }
                break;
              case "SELECT_PREVIOUS_ELEMENT_WITH_ERROR_OR_WARNING_IN_TREE": {
                const elementIndicesWithErrorsOrWarnings = store.getElementsWithErrorsAndWarnings();
                if (elementIndicesWithErrorsOrWarnings.length === 0) {
                  return state2;
                }
                let flatIndex = 0;
                if (selectedElementIndex !== null) {
                  for (let i2 = elementIndicesWithErrorsOrWarnings.length - 1; i2 >= 0; i2--) {
                    const {
                      index
                    } = elementIndicesWithErrorsOrWarnings[i2];
                    if (index >= selectedElementIndex) {
                      flatIndex = i2;
                    } else {
                      break;
                    }
                  }
                }
                let prevEntry;
                if (flatIndex === 0) {
                  prevEntry = elementIndicesWithErrorsOrWarnings[elementIndicesWithErrorsOrWarnings.length - 1];
                  selectedElementID = prevEntry.id;
                  selectedElementIndex = prevEntry.index;
                } else {
                  prevEntry = elementIndicesWithErrorsOrWarnings[flatIndex - 1];
                  selectedElementID = prevEntry.id;
                  selectedElementIndex = prevEntry.index;
                }
                lookupIDForIndex = false;
                break;
              }
              case "SELECT_NEXT_ELEMENT_WITH_ERROR_OR_WARNING_IN_TREE": {
                const elementIndicesWithErrorsOrWarnings = store.getElementsWithErrorsAndWarnings();
                if (elementIndicesWithErrorsOrWarnings.length === 0) {
                  return state2;
                }
                let flatIndex = -1;
                if (selectedElementIndex !== null) {
                  for (let i2 = 0; i2 < elementIndicesWithErrorsOrWarnings.length; i2++) {
                    const {
                      index
                    } = elementIndicesWithErrorsOrWarnings[i2];
                    if (index <= selectedElementIndex) {
                      flatIndex = i2;
                    } else {
                      break;
                    }
                  }
                }
                let nextEntry;
                if (flatIndex >= elementIndicesWithErrorsOrWarnings.length - 1) {
                  nextEntry = elementIndicesWithErrorsOrWarnings[0];
                  selectedElementID = nextEntry.id;
                  selectedElementIndex = nextEntry.index;
                } else {
                  nextEntry = elementIndicesWithErrorsOrWarnings[flatIndex + 1];
                  selectedElementID = nextEntry.id;
                  selectedElementIndex = nextEntry.index;
                }
                lookupIDForIndex = false;
                break;
              }
              default:
                return state2;
            }
          }
          if (lookupIDForIndex && selectedElementIndex !== state2.selectedElementIndex) {
            if (selectedElementIndex === null) {
              selectedElementID = null;
            } else {
              selectedElementID = store.getElementIDAtIndex(selectedElementIndex);
            }
          }
          return {
            ...state2,
            numElements,
            ownerSubtreeLeafElementID,
            selectedElementIndex,
            selectedElementID
          };
        }
        function reduceSearchState(store, state2, action) {
          let {
            searchIndex,
            searchResults,
            searchText,
            selectedElementID,
            selectedElementIndex
          } = state2;
          const ownerID = state2.ownerID;
          const prevSearchIndex = searchIndex;
          const prevSearchText = searchText;
          const numPrevSearchResults = searchResults.length;
          let didRequestSearch = false;
          if (ownerID === null) {
            switch (action.type) {
              case "GO_TO_NEXT_SEARCH_RESULT":
                if (numPrevSearchResults > 0) {
                  didRequestSearch = true;
                  searchIndex = // $FlowFixMe[unsafe-addition] addition with possible null/undefined value
                  searchIndex + 1 < numPrevSearchResults ? searchIndex + 1 : 0;
                }
                break;
              case "GO_TO_PREVIOUS_SEARCH_RESULT":
                if (numPrevSearchResults > 0) {
                  didRequestSearch = true;
                  searchIndex = searchIndex > 0 ? searchIndex - 1 : numPrevSearchResults - 1;
                }
                break;
              case "HANDLE_STORE_MUTATION":
                if (searchText !== "") {
                  const [addedElementIDs, removedElementIDs] = action.payload;
                  removedElementIDs.forEach((parentID, id2) => {
                    const index = searchResults.indexOf(id2);
                    if (index >= 0) {
                      searchResults = searchResults.slice(0, index).concat(searchResults.slice(index + 1));
                      if (searchResults.length === 0) {
                        searchIndex = null;
                      } else if (searchIndex >= searchResults.length) {
                        searchIndex = searchResults.length - 1;
                      }
                    }
                  });
                  addedElementIDs.forEach((id2) => {
                    const element = store.getElementByID(id2);
                    if (element !== null) {
                      const {
                        displayName
                      } = element;
                      const regExp = createRegExp(searchText);
                      if (displayName !== null && regExp.test(displayName)) {
                        const newElementIndex = store.getIndexOfElementID(id2);
                        let foundMatch = false;
                        for (let index = 0; index < searchResults.length; index++) {
                          const resultID = searchResults[index];
                          if (newElementIndex < store.getIndexOfElementID(resultID)) {
                            foundMatch = true;
                            searchResults = searchResults.slice(0, index).concat(resultID).concat(searchResults.slice(index));
                            break;
                          }
                        }
                        if (!foundMatch) {
                          searchResults = searchResults.concat(id2);
                        }
                        searchIndex = searchIndex === null ? 0 : searchIndex;
                      }
                    }
                  });
                }
                break;
              case "SET_SEARCH_TEXT":
                searchIndex = null;
                searchResults = [];
                searchText = action.payload;
                if (searchText !== "") {
                  const regExp = createRegExp(searchText);
                  store.roots.forEach((rootID) => {
                    recursivelySearchTree(store, rootID, regExp, searchResults);
                  });
                  if (searchResults.length > 0) {
                    if (prevSearchIndex === null) {
                      if (selectedElementIndex !== null) {
                        searchIndex = getNearestResultIndex(store, searchResults, selectedElementIndex);
                      } else {
                        searchIndex = 0;
                      }
                    } else {
                      searchIndex = Math.min(prevSearchIndex, searchResults.length - 1);
                    }
                  }
                }
                break;
              default:
                return state2;
            }
          }
          if (searchText !== prevSearchText) {
            const newSearchIndex = searchResults.indexOf(selectedElementID);
            if (newSearchIndex === -1) {
              didRequestSearch = true;
            } else {
              searchIndex = newSearchIndex;
            }
          }
          if (didRequestSearch && searchIndex !== null) {
            selectedElementID = searchResults[searchIndex];
            selectedElementIndex = store.getIndexOfElementID(selectedElementID);
          }
          return {
            ...state2,
            selectedElementID,
            selectedElementIndex,
            searchIndex,
            searchResults,
            searchText
          };
        }
        function reduceOwnersState(store, state2, action) {
          let {
            numElements,
            selectedElementID,
            selectedElementIndex,
            ownerID,
            ownerFlatTree
          } = state2;
          const {
            searchIndex,
            searchResults,
            searchText
          } = state2;
          let prevSelectedElementIndex = selectedElementIndex;
          switch (action.type) {
            case "HANDLE_STORE_MUTATION":
              if (ownerID !== null) {
                if (!store.containsElement(ownerID)) {
                  ownerID = null;
                  ownerFlatTree = null;
                  selectedElementID = null;
                } else {
                  ownerFlatTree = store.getOwnersListForElement(ownerID);
                  if (selectedElementID !== null) {
                    selectedElementIndex = ownerFlatTree.findIndex((element) => element.id === selectedElementID);
                  }
                }
              } else {
                if (selectedElementID !== null) {
                  selectedElementIndex = store.getIndexOfElementID(selectedElementID);
                }
              }
              if (selectedElementIndex === -1) {
                selectedElementIndex = null;
                selectedElementID = null;
              }
              break;
            case "RESET_OWNER_STACK":
              ownerID = null;
              ownerFlatTree = null;
              selectedElementIndex = selectedElementID !== null ? store.getIndexOfElementID(selectedElementID) : null;
              break;
            case "SELECT_ELEMENT_AT_INDEX":
              if (ownerFlatTree !== null) {
                selectedElementIndex = action.payload;
              }
              break;
            case "SELECT_ELEMENT_BY_ID":
              if (ownerFlatTree !== null) {
                const payload = action.payload;
                if (payload === null) {
                  selectedElementIndex = null;
                } else {
                  selectedElementIndex = ownerFlatTree.findIndex((element) => element.id === payload);
                  if (selectedElementIndex !== null && selectedElementIndex < 0) {
                    ownerID = null;
                    ownerFlatTree = null;
                    selectedElementIndex = store.getIndexOfElementID(payload);
                  }
                }
              }
              break;
            case "SELECT_NEXT_ELEMENT_IN_TREE":
              if (ownerFlatTree !== null && ownerFlatTree.length > 0) {
                if (selectedElementIndex === null) {
                  selectedElementIndex = 0;
                } else if (selectedElementIndex + 1 < ownerFlatTree.length) {
                  selectedElementIndex++;
                }
              }
              break;
            case "SELECT_PREVIOUS_ELEMENT_IN_TREE":
              if (ownerFlatTree !== null && ownerFlatTree.length > 0) {
                if (selectedElementIndex !== null && selectedElementIndex > 0) {
                  selectedElementIndex--;
                }
              }
              break;
            case "SELECT_OWNER":
              if (store.hasOwnerMetadata) {
                ownerID = action.payload;
                ownerFlatTree = store.getOwnersListForElement(ownerID);
                selectedElementIndex = 0;
                prevSelectedElementIndex = null;
              }
              break;
            default:
              return state2;
          }
          if (ownerFlatTree !== state2.ownerFlatTree || action.type === "HANDLE_STORE_MUTATION") {
            if (ownerFlatTree === null) {
              numElements = store.numElements;
            } else {
              numElements = ownerFlatTree.length;
            }
          }
          if (selectedElementIndex !== prevSelectedElementIndex) {
            if (selectedElementIndex === null) {
              selectedElementID = null;
            } else {
              if (ownerFlatTree !== null) {
                selectedElementID = ownerFlatTree[selectedElementIndex].id;
              }
            }
          }
          return {
            ...state2,
            numElements,
            selectedElementID,
            selectedElementIndex,
            searchIndex,
            searchResults,
            searchText,
            ownerID,
            ownerFlatTree
          };
        }
        function reduceSuspenseState(store, state2, action) {
          const {
            type
          } = action;
          switch (type) {
            case "UPDATE_INSPECTED_ELEMENT_ID":
              if (state2.inspectedElementID !== state2.selectedElementID) {
                return {
                  ...state2,
                  inspectedElementID: state2.selectedElementID
                };
              }
              break;
            default:
              break;
          }
          return state2;
        }
        function TreeContextController({
          children,
          defaultInspectedElementID,
          defaultOwnerID,
          defaultSelectedElementID,
          defaultSelectedElementIndex
        }) {
          const bridge2 = (0, external_react_namespaceObject.useContext)(BridgeContext);
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const initialRevision = (0, external_react_namespaceObject.useMemo)(() => store.revision, [store]);
          const reducer2 = (0, external_react_namespaceObject.useMemo)(() => (state3, action) => {
            const {
              type
            } = action;
            switch (type) {
              case "GO_TO_NEXT_SEARCH_RESULT":
              case "GO_TO_PREVIOUS_SEARCH_RESULT":
              case "HANDLE_STORE_MUTATION":
              case "RESET_OWNER_STACK":
              case "SELECT_ELEMENT_AT_INDEX":
              case "SELECT_ELEMENT_BY_ID":
              case "SELECT_CHILD_ELEMENT_IN_TREE":
              case "SELECT_NEXT_ELEMENT_IN_TREE":
              case "SELECT_NEXT_ELEMENT_WITH_ERROR_OR_WARNING_IN_TREE":
              case "SELECT_NEXT_SIBLING_IN_TREE":
              case "SELECT_OWNER_LIST_NEXT_ELEMENT_IN_TREE":
              case "SELECT_OWNER_LIST_PREVIOUS_ELEMENT_IN_TREE":
              case "SELECT_PARENT_ELEMENT_IN_TREE":
              case "SELECT_PREVIOUS_ELEMENT_IN_TREE":
              case "SELECT_PREVIOUS_ELEMENT_WITH_ERROR_OR_WARNING_IN_TREE":
              case "SELECT_PREVIOUS_SIBLING_IN_TREE":
              case "SELECT_OWNER":
              case "UPDATE_INSPECTED_ELEMENT_ID":
              case "SET_SEARCH_TEXT":
                state3 = reduceTreeState(store, state3, action);
                state3 = reduceSearchState(store, state3, action);
                state3 = reduceOwnersState(store, state3, action);
                state3 = reduceSuspenseState(store, state3, action);
                if (state3.selectedElementID !== null && store.isInsideCollapsedSubTree(state3.selectedElementID)) {
                  return {
                    ...state3,
                    selectedElementIndex: null
                  };
                }
                return state3;
              default:
                throw new Error(`Unrecognized action "${type}"`);
            }
          }, [store]);
          const [state2, dispatch] = (0, external_react_namespaceObject.useReducer)(reducer2, {
            // Tree
            numElements: store.numElements,
            ownerSubtreeLeafElementID: null,
            selectedElementID: defaultSelectedElementID == null ? null : defaultSelectedElementID,
            selectedElementIndex: defaultSelectedElementIndex == null ? null : defaultSelectedElementIndex,
            // Search
            searchIndex: null,
            searchResults: [],
            searchText: "",
            // Owners
            ownerID: defaultOwnerID == null ? null : defaultOwnerID,
            ownerFlatTree: null,
            // Inspection element panel
            inspectedElementID: defaultInspectedElementID == null ? null : defaultInspectedElementID
          });
          const dispatchWrapper = (0, external_react_namespaceObject.useCallback)((action) => {
            dispatch(action);
            (0, external_react_namespaceObject.startTransition)(() => {
              dispatch({
                type: "UPDATE_INSPECTED_ELEMENT_ID"
              });
            });
          }, [dispatch]);
          (0, external_react_namespaceObject.useEffect)(() => {
            const handleSelectFiber = (id2) => dispatchWrapper({
              type: "SELECT_ELEMENT_BY_ID",
              payload: id2
            });
            bridge2.addListener("selectFiber", handleSelectFiber);
            return () => bridge2.removeListener("selectFiber", handleSelectFiber);
          }, [bridge2, dispatchWrapper]);
          const prevSelectedElementID = (0, external_react_namespaceObject.useRef)(null);
          (0, external_react_namespaceObject.useLayoutEffect)(() => {
            if (state2.selectedElementID !== prevSelectedElementID.current) {
              prevSelectedElementID.current = state2.selectedElementID;
              if (state2.selectedElementID !== null) {
                const element = store.getElementByID(state2.selectedElementID);
                if (element !== null && element.parentID > 0) {
                  store.toggleIsCollapsed(element.parentID, false);
                }
              }
            }
          }, [state2.selectedElementID, store]);
          (0, external_react_namespaceObject.useEffect)(() => {
            const handleStoreMutated = ([addedElementIDs, removedElementIDs]) => {
              dispatchWrapper({
                type: "HANDLE_STORE_MUTATION",
                payload: [addedElementIDs, removedElementIDs]
              });
            };
            if (store.revision !== initialRevision) {
              dispatchWrapper({
                type: "HANDLE_STORE_MUTATION",
                payload: [[], /* @__PURE__ */ new Map()]
              });
            }
            store.addListener("mutated", handleStoreMutated);
            return () => store.removeListener("mutated", handleStoreMutated);
          }, [dispatchWrapper, initialRevision, store]);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(TreeStateContext.Provider, {
            value: state2
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(TreeDispatcherContext.Provider, {
            value: dispatchWrapper
          }, children));
        }
        function recursivelySearchTree(store, elementID, regExp, searchResults) {
          const element = store.getElementByID(elementID);
          if (element == null) {
            return;
          }
          const {
            children,
            displayName,
            hocDisplayNames,
            compiledWithForget
          } = element;
          if (displayName != null && regExp.test(displayName) === true) {
            searchResults.push(elementID);
          } else if (hocDisplayNames != null && hocDisplayNames.length > 0 && hocDisplayNames.some((name) => regExp.test(name)) === true) {
            searchResults.push(elementID);
          } else if (compiledWithForget && regExp.test("Forget")) {
            searchResults.push(elementID);
          }
          children.forEach((childID) => recursivelySearchTree(store, childID, regExp, searchResults));
        }
        function getNearestResultIndex(store, searchResults, selectedElementIndex) {
          const index = searchResults.findIndex((id2) => {
            const innerIndex = store.getIndexOfElementID(id2);
            return innerIndex !== null && innerIndex >= selectedElementIndex;
          });
          return index === -1 ? 0 : index;
        }
        var Icon = __webpack_require__(3943);
        var Icon_default = /* @__PURE__ */ __webpack_require__.n(Icon);
        ;
        function Icon_Icon({
          className = "",
          title = "",
          type
        }) {
          let pathData = null;
          switch (type) {
            case "arrow":
              pathData = PATH_ARROW;
              break;
            case "bug":
              pathData = PATH_BUG;
              break;
            case "code":
              pathData = PATH_CODE;
              break;
            case "components":
              pathData = PATH_COMPONENTS;
              break;
            case "copy":
              pathData = PATH_COPY;
              break;
            case "error":
              pathData = PATH_ERROR;
              break;
            case "facebook":
              pathData = PATH_FACEBOOK;
              break;
            case "flame-chart":
              pathData = PATH_FLAME_CHART;
              break;
            case "profiler":
              pathData = PATH_PROFILER;
              break;
            case "ranked-chart":
              pathData = PATH_RANKED_CHART;
              break;
            case "timeline":
              pathData = PATH_SCHEDULING_PROFILER;
              break;
            case "search":
              pathData = PATH_SEARCH;
              break;
            case "settings":
              pathData = PATH_SETTINGS;
              break;
            case "store-as-global-variable":
              pathData = PATH_STORE_AS_GLOBAL_VARIABLE;
              break;
            case "strict-mode-non-compliant":
              pathData = PATH_STRICT_MODE_NON_COMPLIANT;
              break;
            case "warning":
              pathData = PATH_WARNING;
              break;
            default:
              console.warn(`Unsupported type "${type}" specified for Icon`);
              break;
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            className: `${Icon_default().Icon} ${className}`,
            width: "24",
            height: "24",
            viewBox: "0 0 24 24"
          }, title && /* @__PURE__ */ external_react_namespaceObject.createElement("title", null, title), /* @__PURE__ */ external_react_namespaceObject.createElement("path", {
            d: "M0 0h24v24H0z",
            fill: "none"
          }), /* @__PURE__ */ external_react_namespaceObject.createElement("path", {
            fill: "currentColor",
            d: pathData
          }));
        }
        const PATH_ARROW = "M8 5v14l11-7z";
        const PATH_BUG = `
  M20 8h-2.81c-.45-.78-1.07-1.45-1.82-1.96L17 4.41 15.59 3l-2.17 2.17C12.96 5.06 12.49 5 12 5c-.49
  0-.96.06-1.41.17L8.41 3 7 4.41l1.62 1.63C7.88 6.55 7.26 7.22 6.81 8H4v2h2.09c-.05.33-.09.66-.09
  1v1H4v2h2v1c0 .34.04.67.09 1H4v2h2.81c1.04 1.79 2.97 3 5.19 3s4.15-1.21
  5.19-3H20v-2h-2.09c.05-.33.09-.66.09-1v-1h2v-2h-2v-1c0-.34-.04-.67-.09-1H20V8zm-6 8h-4v-2h4v2zm0-4h-4v-2h4v2z
`;
        const PATH_CODE = `
  M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z
  `;
        const PATH_COMPONENTS = "M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z";
        const PATH_COPY = `
  M3 13h2v-2H3v2zm0 4h2v-2H3v2zm2 4v-2H3a2 2 0 0 0 2 2zM3 9h2V7H3v2zm12 12h2v-2h-2v2zm4-18H9a2 2 0 0 0-2
  2v10a2 2 0 0 0 2 2h10c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 12H9V5h10v10zm-8 6h2v-2h-2v2zm-4 0h2v-2H7v2z
`;
        const PATH_ERROR = `M16.971 0h-9.942l-7.029 7.029v9.941l7.029 7.03h9.941l7.03-7.029v-9.942l-7.029-7.029zm-1.402 16.945l-3.554-3.521-3.518 3.568-1.418-1.418 3.507-3.566-3.586-3.472 1.418-1.417 3.581 3.458 3.539-3.583 1.431 1.431-3.535 3.568 3.566 3.522-1.431 1.43z`;
        const PATH_FACEBOOK = `
  M22,12c0-5.52-4.48-10-10-10S2,6.48,2,12c0,4.84,3.44,8.87,8,9.8V15H8v-3h2V9.5C10,7.57,11.57,6,13.5,6H16v3h-2 c-0.55,0-1,0.45-1,1v2h3v3h-3v6.95C18.05,21.45,22,17.19,22,12z
`;
        const PATH_FLAME_CHART = `
  M10.0650893,21.5040462 C7.14020814,20.6850349 5,18.0558698 5,14.9390244 C5,14.017627
  5,9.81707317 7.83333333,7.37804878 C7.83333333,7.37804878 7.58333333,11.199187 10,
  10.6300813 C11.125,10.326087 13.0062497,7.63043487 8.91666667,2.5 C14.1666667,3.06910569
  19,9.32926829 19,14.9390244 C19,18.0558698 16.8597919,20.6850349 13.9349107,21.5040462
  C14.454014,21.0118505 14.7765152,20.3233394 14.7765152,19.5613412 C14.7765152,17.2826087
  12,15.0875871 12,15.0875871 C12,15.0875871 9.22348485,17.2826087 9.22348485,19.5613412
  C9.22348485,20.3233394 9.54598603,21.0118505 10.0650893,21.5040462 Z M12.0833333,20.6514763
  C11.3814715,20.6514763 10.8125,20.1226027 10.8125,19.4702042 C10.8125,18.6069669
  12.0833333,16.9347829 12.0833333,16.9347829 C12.0833333,16.9347829 13.3541667,18.6069669
  13.3541667,19.4702042 C13.3541667,20.1226027 12.7851952,20.6514763 12.0833333,20.6514763 Z
`;
        const PATH_PROFILER = "M5 9.2h3V19H5zM10.6 5h2.8v14h-2.8zm5.6 8H19v6h-2.8z";
        const PATH_SCHEDULING_PROFILER = `
  M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0
  16H5V9h14v10zm0-12H5V5h14v2zM7 11h5v5H7z
`;
        const PATH_SEARCH = `
  M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91
  16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99
  5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z
`;
        const PATH_RANKED_CHART = "M3 5h18v3H3zM3 10.5h13v3H3zM3 16h8v3H3z";
        const PATH_SETTINGS = `
  M19.43 12.98c.04-.32.07-.64.07-.98s-.03-.66-.07-.98l2.11-1.65c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.3-.61-.22l-2.49
  1c-.52-.4-1.08-.73-1.69-.98l-.38-2.65C14.46 2.18 14.25 2 14 2h-4c-.25 0-.46.18-.49.42l-.38
  2.65c-.61.25-1.17.59-1.69.98l-2.49-1c-.23-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64l2.11
  1.65c-.04.32-.07.65-.07.98s.03.66.07.98l-2.11 1.65c-.19.15-.24.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1c.52.4
  1.08.73 1.69.98l.38 2.65c.03.24.24.42.49.42h4c.25 0 .46-.18.49-.42l.38-2.65c.61-.25 1.17-.59 1.69-.98l2.49
  1c.23.09.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.65zM12 15.5c-1.93 0-3.5-1.57-3.5-3.5s1.57-3.5
  3.5-3.5 3.5 1.57 3.5 3.5-1.57 3.5-3.5 3.5z
`;
        const PATH_STORE_AS_GLOBAL_VARIABLE = `
  M20 8h-2.81c-.45-.78-1.07-1.45-1.82-1.96L17 4.41 15.59 3l-2.17 2.17C12.96 5.06 12.49 5 12 5c-.49 0-.96.06-1.41.17L8.41
  3 7 4.41l1.62 1.63C7.88 6.55 7.26 7.22 6.81 8H4v2h2.09c-.05.33-.09.66-.09 1v1H4v2h2v1c0 .34.04.67.09 1H4v2h2.81c1.04
  1.79 2.97 3 5.19 3s4.15-1.21 5.19-3H20v-2h-2.09c.05-.33.09-.66.09-1v-1h2v-2h-2v-1c0-.34-.04-.67-.09-1H20V8zm-6
  8h-4v-2h4v2zm0-4h-4v-2h4v2z
`;
        const PATH_STRICT_MODE_NON_COMPLIANT = `
  M4.47 21h15.06c1.54 0 2.5-1.67 1.73-3L13.73 4.99c-.77-1.33-2.69-1.33-3.46 0L2.74 18c-.77 1.33.19 3 1.73 3zM12
  14c-.55 0-1-.45-1-1v-2c0-.55.45-1 1-1s1 .45 1 1v2c0 .55-.45 1-1 1zm1 4h-2v-2h2v2z
`;
        const PATH_WARNING = `M12 1l-12 22h24l-12-22zm-1 8h2v7h-2v-7zm1 11.25c-.69 0-1.25-.56-1.25-1.25s.56-1.25 1.25-1.25 1.25.56 1.25 1.25-.56 1.25-1.25 1.25z`;
        ;
        const CHANGE_LOG_URL = "https://github.com/facebook/react/blob/main/packages/react-devtools/CHANGELOG.md";
        const UNSUPPORTED_VERSION_URL = "https://reactjs.org/blog/2019/08/15/new-react-devtools.html#how-do-i-get-the-old-version-back";
        const REACT_DEVTOOLS_WORKPLACE_URL = "https://fburl.com/react-devtools-workplace-group";
        const THEME_STYLES = {
          light: {
            "--color-attribute-name": "#ef6632",
            "--color-attribute-name-not-editable": "#23272f",
            "--color-attribute-name-inverted": "rgba(255, 255, 255, 0.7)",
            "--color-attribute-value": "#1a1aa6",
            "--color-attribute-value-inverted": "#ffffff",
            "--color-attribute-editable-value": "#1a1aa6",
            "--color-background": "#ffffff",
            "--color-background-hover": "rgba(0, 136, 250, 0.1)",
            "--color-background-inactive": "#e5e5e5",
            "--color-background-invalid": "#fff0f0",
            "--color-background-selected": "#0088fa",
            "--color-button-background": "#ffffff",
            "--color-button-background-focus": "#ededed",
            "--color-button": "#5f6673",
            "--color-button-disabled": "#cfd1d5",
            "--color-button-active": "#0088fa",
            "--color-button-focus": "#23272f",
            "--color-button-hover": "#23272f",
            "--color-border": "#eeeeee",
            "--color-commit-did-not-render-fill": "#cfd1d5",
            "--color-commit-did-not-render-fill-text": "#000000",
            "--color-commit-did-not-render-pattern": "#cfd1d5",
            "--color-commit-did-not-render-pattern-text": "#333333",
            "--color-commit-gradient-0": "#37afa9",
            "--color-commit-gradient-1": "#63b19e",
            "--color-commit-gradient-2": "#80b393",
            "--color-commit-gradient-3": "#97b488",
            "--color-commit-gradient-4": "#abb67d",
            "--color-commit-gradient-5": "#beb771",
            "--color-commit-gradient-6": "#cfb965",
            "--color-commit-gradient-7": "#dfba57",
            "--color-commit-gradient-8": "#efbb49",
            "--color-commit-gradient-9": "#febc38",
            "--color-commit-gradient-text": "#000000",
            "--color-component-name": "#6a51b2",
            "--color-component-name-inverted": "#ffffff",
            "--color-component-badge-background": "#e6e6e6",
            "--color-component-badge-background-inverted": "rgba(255, 255, 255, 0.25)",
            "--color-component-badge-count": "#777d88",
            "--color-component-badge-count-inverted": "rgba(255, 255, 255, 0.7)",
            "--color-console-error-badge-text": "#ffffff",
            "--color-console-error-background": "#fff0f0",
            "--color-console-error-border": "#ffd6d6",
            "--color-console-error-icon": "#eb3941",
            "--color-console-error-text": "#fe2e31",
            "--color-console-warning-badge-text": "#000000",
            "--color-console-warning-background": "#fffbe5",
            "--color-console-warning-border": "#fff5c1",
            "--color-console-warning-icon": "#f4bd00",
            "--color-console-warning-text": "#64460c",
            "--color-context-background": "rgba(0,0,0,.9)",
            "--color-context-background-hover": "rgba(255, 255, 255, 0.1)",
            "--color-context-background-selected": "#178fb9",
            "--color-context-border": "#3d424a",
            "--color-context-text": "#ffffff",
            "--color-context-text-selected": "#ffffff",
            "--color-dim": "#777d88",
            "--color-dimmer": "#cfd1d5",
            "--color-dimmest": "#eff0f1",
            "--color-error-background": "hsl(0, 100%, 97%)",
            "--color-error-border": "hsl(0, 100%, 92%)",
            "--color-error-text": "#ff0000",
            "--color-expand-collapse-toggle": "#777d88",
            "--color-forget-badge-background": "#2683e2",
            "--color-forget-badge-background-inverted": "#1a6bbc",
            "--color-forget-text": "#fff",
            "--color-link": "#0000ff",
            "--color-modal-background": "rgba(255, 255, 255, 0.75)",
            "--color-bridge-version-npm-background": "#eff0f1",
            "--color-bridge-version-npm-text": "#000000",
            "--color-bridge-version-number": "#0088fa",
            "--color-primitive-hook-badge-background": "#e5e5e5",
            "--color-primitive-hook-badge-text": "#5f6673",
            "--color-record-active": "#fc3a4b",
            "--color-record-hover": "#3578e5",
            "--color-record-inactive": "#0088fa",
            "--color-resize-bar": "#eeeeee",
            "--color-resize-bar-active": "#dcdcdc",
            "--color-resize-bar-border": "#d1d1d1",
            "--color-resize-bar-dot": "#333333",
            "--color-timeline-internal-module": "#d1d1d1",
            "--color-timeline-internal-module-hover": "#c9c9c9",
            "--color-timeline-internal-module-text": "#444",
            "--color-timeline-native-event": "#ccc",
            "--color-timeline-native-event-hover": "#aaa",
            "--color-timeline-network-primary": "#fcf3dc",
            "--color-timeline-network-primary-hover": "#f0e7d1",
            "--color-timeline-network-secondary": "#efc457",
            "--color-timeline-network-secondary-hover": "#e3ba52",
            "--color-timeline-priority-background": "#f6f6f6",
            "--color-timeline-priority-border": "#eeeeee",
            "--color-timeline-user-timing": "#c9cacd",
            "--color-timeline-user-timing-hover": "#93959a",
            "--color-timeline-react-idle": "#d3e5f6",
            "--color-timeline-react-idle-hover": "#c3d9ef",
            "--color-timeline-react-render": "#9fc3f3",
            "--color-timeline-react-render-hover": "#83afe9",
            "--color-timeline-react-render-text": "#11365e",
            "--color-timeline-react-commit": "#c88ff0",
            "--color-timeline-react-commit-hover": "#b281d6",
            "--color-timeline-react-commit-text": "#3e2c4a",
            "--color-timeline-react-layout-effects": "#b281d6",
            "--color-timeline-react-layout-effects-hover": "#9d71bd",
            "--color-timeline-react-layout-effects-text": "#3e2c4a",
            "--color-timeline-react-passive-effects": "#b281d6",
            "--color-timeline-react-passive-effects-hover": "#9d71bd",
            "--color-timeline-react-passive-effects-text": "#3e2c4a",
            "--color-timeline-react-schedule": "#9fc3f3",
            "--color-timeline-react-schedule-hover": "#2683E2",
            "--color-timeline-react-suspense-rejected": "#f1cc14",
            "--color-timeline-react-suspense-rejected-hover": "#ffdf37",
            "--color-timeline-react-suspense-resolved": "#a6e59f",
            "--color-timeline-react-suspense-resolved-hover": "#89d281",
            "--color-timeline-react-suspense-unresolved": "#c9cacd",
            "--color-timeline-react-suspense-unresolved-hover": "#93959a",
            "--color-timeline-thrown-error": "#ee1638",
            "--color-timeline-thrown-error-hover": "#da1030",
            "--color-timeline-text-color": "#000000",
            "--color-timeline-text-dim-color": "#ccc",
            "--color-timeline-react-work-border": "#eeeeee",
            "--color-search-match": "yellow",
            "--color-search-match-current": "#f7923b",
            "--color-selected-tree-highlight-active": "rgba(0, 136, 250, 0.1)",
            "--color-selected-tree-highlight-inactive": "rgba(0, 0, 0, 0.05)",
            "--color-scroll-caret": "rgba(150, 150, 150, 0.5)",
            "--color-tab-selected-border": "#0088fa",
            "--color-text": "#000000",
            "--color-text-invalid": "#ff0000",
            "--color-text-selected": "#ffffff",
            "--color-toggle-background-invalid": "#fc3a4b",
            "--color-toggle-background-on": "#0088fa",
            "--color-toggle-background-off": "#cfd1d5",
            "--color-toggle-text": "#ffffff",
            "--color-warning-background": "#fb3655",
            "--color-warning-background-hover": "#f82042",
            "--color-warning-text-color": "#ffffff",
            "--color-warning-text-color-inverted": "#fd4d69",
            // The styles below should be kept in sync with 'root.css'
            // They are repeated there because they're used by e.g. tooltips or context menus
            // which get rendered outside of the DOM subtree (where normal theme/styles are written).
            "--color-scroll-thumb": "#c2c2c2",
            "--color-scroll-track": "#fafafa",
            "--color-tooltip-background": "rgba(0, 0, 0, 0.9)",
            "--color-tooltip-text": "#ffffff"
          },
          dark: {
            "--color-attribute-name": "#9d87d2",
            "--color-attribute-name-not-editable": "#ededed",
            "--color-attribute-name-inverted": "#282828",
            "--color-attribute-value": "#cedae0",
            "--color-attribute-value-inverted": "#ffffff",
            "--color-attribute-editable-value": "yellow",
            "--color-background": "#282c34",
            "--color-background-hover": "rgba(255, 255, 255, 0.1)",
            "--color-background-inactive": "#3d424a",
            "--color-background-invalid": "#5c0000",
            "--color-background-selected": "#178fb9",
            "--color-button-background": "#282c34",
            "--color-button-background-focus": "#3d424a",
            "--color-button": "#afb3b9",
            "--color-button-active": "#61dafb",
            "--color-button-disabled": "#4f5766",
            "--color-button-focus": "#a2e9fc",
            "--color-button-hover": "#ededed",
            "--color-border": "#3d424a",
            "--color-commit-did-not-render-fill": "#777d88",
            "--color-commit-did-not-render-fill-text": "#000000",
            "--color-commit-did-not-render-pattern": "#666c77",
            "--color-commit-did-not-render-pattern-text": "#ffffff",
            "--color-commit-gradient-0": "#37afa9",
            "--color-commit-gradient-1": "#63b19e",
            "--color-commit-gradient-2": "#80b393",
            "--color-commit-gradient-3": "#97b488",
            "--color-commit-gradient-4": "#abb67d",
            "--color-commit-gradient-5": "#beb771",
            "--color-commit-gradient-6": "#cfb965",
            "--color-commit-gradient-7": "#dfba57",
            "--color-commit-gradient-8": "#efbb49",
            "--color-commit-gradient-9": "#febc38",
            "--color-commit-gradient-text": "#000000",
            "--color-component-name": "#61dafb",
            "--color-component-name-inverted": "#282828",
            "--color-component-badge-background": "#5e6167",
            "--color-component-badge-background-inverted": "#46494e",
            "--color-component-badge-count": "#8f949d",
            "--color-component-badge-count-inverted": "rgba(255, 255, 255, 0.85)",
            "--color-console-error-badge-text": "#000000",
            "--color-console-error-background": "#290000",
            "--color-console-error-border": "#5c0000",
            "--color-console-error-icon": "#eb3941",
            "--color-console-error-text": "#fc7f7f",
            "--color-console-warning-badge-text": "#000000",
            "--color-console-warning-background": "#332b00",
            "--color-console-warning-border": "#665500",
            "--color-console-warning-icon": "#f4bd00",
            "--color-console-warning-text": "#f5f2ed",
            "--color-context-background": "rgba(255,255,255,.95)",
            "--color-context-background-hover": "rgba(0, 136, 250, 0.1)",
            "--color-context-background-selected": "#0088fa",
            "--color-context-border": "#eeeeee",
            "--color-context-text": "#000000",
            "--color-context-text-selected": "#ffffff",
            "--color-dim": "#8f949d",
            "--color-dimmer": "#777d88",
            "--color-dimmest": "#4f5766",
            "--color-error-background": "#200",
            "--color-error-border": "#900",
            "--color-error-text": "#f55",
            "--color-expand-collapse-toggle": "#8f949d",
            "--color-forget-badge-background": "#2683e2",
            "--color-forget-badge-background-inverted": "#1a6bbc",
            "--color-forget-text": "#fff",
            "--color-link": "#61dafb",
            "--color-modal-background": "rgba(0, 0, 0, 0.75)",
            "--color-bridge-version-npm-background": "rgba(0, 0, 0, 0.25)",
            "--color-bridge-version-npm-text": "#ffffff",
            "--color-bridge-version-number": "yellow",
            "--color-primitive-hook-badge-background": "rgba(0, 0, 0, 0.25)",
            "--color-primitive-hook-badge-text": "rgba(255, 255, 255, 0.7)",
            "--color-record-active": "#fc3a4b",
            "--color-record-hover": "#a2e9fc",
            "--color-record-inactive": "#61dafb",
            "--color-resize-bar": "#282c34",
            "--color-resize-bar-active": "#31363f",
            "--color-resize-bar-border": "#3d424a",
            "--color-resize-bar-dot": "#cfd1d5",
            "--color-timeline-internal-module": "#303542",
            "--color-timeline-internal-module-hover": "#363b4a",
            "--color-timeline-internal-module-text": "#7f8899",
            "--color-timeline-native-event": "#b2b2b2",
            "--color-timeline-native-event-hover": "#949494",
            "--color-timeline-network-primary": "#fcf3dc",
            "--color-timeline-network-primary-hover": "#e3dbc5",
            "--color-timeline-network-secondary": "#efc457",
            "--color-timeline-network-secondary-hover": "#d6af4d",
            "--color-timeline-priority-background": "#1d2129",
            "--color-timeline-priority-border": "#282c34",
            "--color-timeline-user-timing": "#c9cacd",
            "--color-timeline-user-timing-hover": "#93959a",
            "--color-timeline-react-idle": "#3d485b",
            "--color-timeline-react-idle-hover": "#465269",
            "--color-timeline-react-render": "#2683E2",
            "--color-timeline-react-render-hover": "#1a76d4",
            "--color-timeline-react-render-text": "#11365e",
            "--color-timeline-react-commit": "#731fad",
            "--color-timeline-react-commit-hover": "#611b94",
            "--color-timeline-react-commit-text": "#e5c1ff",
            "--color-timeline-react-layout-effects": "#611b94",
            "--color-timeline-react-layout-effects-hover": "#51167a",
            "--color-timeline-react-layout-effects-text": "#e5c1ff",
            "--color-timeline-react-passive-effects": "#611b94",
            "--color-timeline-react-passive-effects-hover": "#51167a",
            "--color-timeline-react-passive-effects-text": "#e5c1ff",
            "--color-timeline-react-schedule": "#2683E2",
            "--color-timeline-react-schedule-hover": "#1a76d4",
            "--color-timeline-react-suspense-rejected": "#f1cc14",
            "--color-timeline-react-suspense-rejected-hover": "#e4c00f",
            "--color-timeline-react-suspense-resolved": "#a6e59f",
            "--color-timeline-react-suspense-resolved-hover": "#89d281",
            "--color-timeline-react-suspense-unresolved": "#c9cacd",
            "--color-timeline-react-suspense-unresolved-hover": "#93959a",
            "--color-timeline-thrown-error": "#fb3655",
            "--color-timeline-thrown-error-hover": "#f82042",
            "--color-timeline-text-color": "#282c34",
            "--color-timeline-text-dim-color": "#555b66",
            "--color-timeline-react-work-border": "#3d424a",
            "--color-search-match": "yellow",
            "--color-search-match-current": "#f7923b",
            "--color-selected-tree-highlight-active": "rgba(23, 143, 185, 0.15)",
            "--color-selected-tree-highlight-inactive": "rgba(255, 255, 255, 0.05)",
            "--color-scroll-caret": "#4f5766",
            "--color-shadow": "rgba(0, 0, 0, 0.5)",
            "--color-tab-selected-border": "#178fb9",
            "--color-text": "#ffffff",
            "--color-text-invalid": "#ff8080",
            "--color-text-selected": "#ffffff",
            "--color-toggle-background-invalid": "#fc3a4b",
            "--color-toggle-background-on": "#178fb9",
            "--color-toggle-background-off": "#777d88",
            "--color-toggle-text": "#ffffff",
            "--color-warning-background": "#ee1638",
            "--color-warning-background-hover": "#da1030",
            "--color-warning-text-color": "#ffffff",
            "--color-warning-text-color-inverted": "#ee1638",
            // The styles below should be kept in sync with 'root.css'
            // They are repeated there because they're used by e.g. tooltips or context menus
            // which get rendered outside of the DOM subtree (where normal theme/styles are written).
            "--color-scroll-thumb": "#afb3b9",
            "--color-scroll-track": "#313640",
            "--color-tooltip-background": "rgba(255, 255, 255, 0.95)",
            "--color-tooltip-text": "#000000"
          },
          compact: {
            "--font-size-monospace-small": "9px",
            "--font-size-monospace-normal": "11px",
            "--font-size-monospace-large": "15px",
            "--font-size-sans-small": "10px",
            "--font-size-sans-normal": "12px",
            "--font-size-sans-large": "14px",
            "--line-height-data": "18px"
          },
          comfortable: {
            "--font-size-monospace-small": "10px",
            "--font-size-monospace-normal": "13px",
            "--font-size-monospace-large": "17px",
            "--font-size-sans-small": "12px",
            "--font-size-sans-normal": "14px",
            "--font-size-sans-large": "16px",
            "--line-height-data": "22px"
          }
        };
        const COMFORTABLE_LINE_HEIGHT = parseInt(THEME_STYLES.comfortable["--line-height-data"], 10);
        const COMPACT_LINE_HEIGHT = parseInt(THEME_STYLES.compact["--line-height-data"], 10);
        var lodash_throttle = __webpack_require__(5677);
        var lodash_throttle_default = /* @__PURE__ */ __webpack_require__.n(lodash_throttle);
        ;
        function useEditableValueReducer(state2, action) {
          switch (action.type) {
            case "RESET":
              return {
                ...state2,
                editableValue: smartStringify(action.externalValue),
                externalValue: action.externalValue,
                hasPendingChanges: false,
                isValid: true,
                parsedValue: action.externalValue
              };
            case "UPDATE":
              let isNewValueValid = false;
              let newParsedValue;
              try {
                newParsedValue = smartParse(action.editableValue);
                isNewValueValid = true;
              } catch (error) {
              }
              return {
                ...state2,
                editableValue: sanitizeForParse(action.editableValue),
                externalValue: action.externalValue,
                hasPendingChanges: smartStringify(action.externalValue) !== action.editableValue,
                isValid: isNewValueValid,
                parsedValue: isNewValueValid ? newParsedValue : state2.parsedValue
              };
            default:
              throw new Error(`Invalid action "${action.type}"`);
          }
        }
        function useEditableValue(externalValue) {
          const [state2, dispatch] = (0, external_react_namespaceObject.useReducer)(useEditableValueReducer, {
            editableValue: smartStringify(externalValue),
            externalValue,
            hasPendingChanges: false,
            isValid: true,
            parsedValue: externalValue
          });
          if (!Object.is(state2.externalValue, externalValue)) {
            if (!state2.hasPendingChanges) {
              dispatch({
                type: "RESET",
                externalValue
              });
            } else {
              dispatch({
                type: "UPDATE",
                editableValue: state2.editableValue,
                externalValue
              });
            }
          }
          return [state2, dispatch];
        }
        function useIsOverflowing(containerRef, totalChildWidth) {
          const [isOverflowing, setIsOverflowing] = (0, external_react_namespaceObject.useState)(false);
          (0, external_react_namespaceObject.useLayoutEffect)(() => {
            if (containerRef.current === null) {
              return () => {
              };
            }
            const container = containerRef.current;
            const handleResize = lodash_throttle_default()(() => setIsOverflowing(container.clientWidth <= totalChildWidth), 100);
            handleResize();
            const ownerWindow = container.ownerDocument.defaultView;
            ownerWindow.addEventListener("resize", handleResize);
            return () => ownerWindow.removeEventListener("resize", handleResize);
          }, [containerRef, totalChildWidth]);
          return isOverflowing;
        }
        function useLocalStorage(key, initialValue, onValueSet) {
          const getValueFromLocalStorage = (0, external_react_namespaceObject.useCallback)(() => {
            try {
              const item = localStorageGetItem(key);
              if (item != null) {
                return JSON.parse(item);
              }
            } catch (error) {
              console.log(error);
            }
            if (typeof initialValue === "function") {
              return initialValue();
            } else {
              return initialValue;
            }
          }, [initialValue, key]);
          const [storedValue, setStoredValue] = (0, external_react_namespaceObject.useState)(getValueFromLocalStorage);
          const setValue = (0, external_react_namespaceObject.useCallback)((value) => {
            try {
              const valueToStore = value instanceof Function ? value(storedValue) : value;
              setStoredValue(valueToStore);
              localStorageSetItem(key, JSON.stringify(valueToStore));
              window.dispatchEvent(new Event(key));
              if (onValueSet != null) {
                onValueSet(valueToStore, key);
              }
            } catch (error) {
              console.log(error);
            }
          }, [key, storedValue]);
          (0, external_react_namespaceObject.useLayoutEffect)(() => {
            const onStorage = (event) => {
              const newValue = getValueFromLocalStorage();
              if (key === event.key && storedValue !== newValue) {
                setValue(newValue);
              }
            };
            window.addEventListener("storage", onStorage);
            return () => {
              window.removeEventListener("storage", onStorage);
            };
          }, [getValueFromLocalStorage, key, storedValue, setValue]);
          return [storedValue, setValue];
        }
        function useModalDismissSignal(modalRef, dismissCallback, dismissOnClickOutside = true) {
          (0, external_react_namespaceObject.useEffect)(() => {
            if (modalRef.current === null) {
              return () => {
              };
            }
            const handleRootNodeKeyDown = (event) => {
              if (event.key === "Escape") {
                dismissCallback();
              }
            };
            const handleRootNodeClick = (event) => {
              if (modalRef.current !== null && /* $FlowExpectedError[incompatible-call] Instead of dealing with possibly multiple realms
               and multiple Node references to comply with Flow (e.g. checking with `event.target instanceof Node`)
               just delegate it to contains call */
              !modalRef.current.contains(event.target)) {
                event.stopPropagation();
                event.preventDefault();
                dismissCallback();
              }
            };
            let modalRootNode = null;
            let timeoutID = setTimeout(() => {
              timeoutID = null;
              const modalDOMElement = modalRef.current;
              if (modalDOMElement != null) {
                modalRootNode = modalDOMElement.getRootNode();
                modalRootNode.addEventListener("keydown", handleRootNodeKeyDown);
                if (dismissOnClickOutside) {
                  modalRootNode.addEventListener("click", handleRootNodeClick, true);
                }
              }
            }, 0);
            return () => {
              if (timeoutID !== null) {
                clearTimeout(timeoutID);
              }
              if (modalRootNode !== null) {
                modalRootNode.removeEventListener("keydown", handleRootNodeKeyDown);
                modalRootNode.removeEventListener("click", handleRootNodeClick, true);
              }
            };
          }, [modalRef, dismissCallback, dismissOnClickOutside]);
        }
        function useSubscription({
          getCurrentValue,
          subscribe: subscribe2
        }) {
          const [state2, setState] = (0, external_react_namespaceObject.useState)(() => ({
            getCurrentValue,
            subscribe: subscribe2,
            value: getCurrentValue()
          }));
          if (state2.getCurrentValue !== getCurrentValue || state2.subscribe !== subscribe2) {
            setState({
              getCurrentValue,
              subscribe: subscribe2,
              value: getCurrentValue()
            });
          }
          (0, external_react_namespaceObject.useEffect)(() => {
            let didUnsubscribe = false;
            const checkForUpdates = () => {
              if (didUnsubscribe) {
                return;
              }
              setState((prevState) => {
                if (prevState.getCurrentValue !== getCurrentValue || prevState.subscribe !== subscribe2) {
                  return prevState;
                }
                const value = getCurrentValue();
                if (prevState.value === value) {
                  return prevState;
                }
                return {
                  ...prevState,
                  value
                };
              });
            };
            const unsubscribe = subscribe2(checkForUpdates);
            checkForUpdates();
            return () => {
              didUnsubscribe = true;
              unsubscribe();
            };
          }, [getCurrentValue, subscribe2]);
          return state2.value;
        }
        function useHighlightNativeElement() {
          const bridge2 = (0, external_react_namespaceObject.useContext)(BridgeContext);
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const highlightNativeElement = (0, external_react_namespaceObject.useCallback)((id2) => {
            const element = store.getElementByID(id2);
            const rendererID = store.getRendererIDForElement(id2);
            if (element !== null && rendererID !== null) {
              bridge2.send("highlightNativeElement", {
                displayName: element.displayName,
                hideAfterTimeout: false,
                id: id2,
                openNativeElementsPanel: false,
                rendererID,
                scrollIntoView: false
              });
            }
          }, [store, bridge2]);
          const clearHighlightNativeElement = (0, external_react_namespaceObject.useCallback)(() => {
            bridge2.send("clearNativeElementHighlight");
          }, [bridge2]);
          return {
            highlightNativeElement,
            clearHighlightNativeElement
          };
        }
        ;
        const enableLogger = false;
        const enableStyleXFeatures = false;
        const isInternalFacebookBuild = false;
        ;
        let logFunctions = [];
        const logEvent = enableLogger === true ? function logEvent2(event) {
          logFunctions.forEach((log) => {
            log(event);
          });
        } : function logEvent2() {
        };
        const registerEventLogger = enableLogger === true ? function registerEventLogger2(logFunction) {
          if (enableLogger) {
            logFunctions.push(logFunction);
            return function unregisterEventLogger() {
              logFunctions = logFunctions.filter((log) => log !== logFunction);
            };
          }
          return () => {
          };
        } : function registerEventLogger2(logFunction) {
          return () => {
          };
        };
        ;
        const SettingsContext = /* @__PURE__ */ (0, external_react_namespaceObject.createContext)(null);
        SettingsContext.displayName = "SettingsContext";
        function useLocalStorageWithLog(key, initialValue) {
          return useLocalStorage(key, initialValue, (v, k) => {
            logEvent({
              event_name: "settings-changed",
              metadata: {
                source: "localStorage setter",
                key: k,
                value: v
              }
            });
          });
        }
        function SettingsContextController({
          browserTheme,
          children,
          componentsPortalContainer,
          profilerPortalContainer
        }) {
          const bridge2 = (0, external_react_namespaceObject.useContext)(BridgeContext);
          const [displayDensity, setDisplayDensity] = useLocalStorageWithLog("React::DevTools::displayDensity", "compact");
          const [theme, setTheme] = useLocalStorageWithLog(LOCAL_STORAGE_BROWSER_THEME, "auto");
          const [appendComponentStack, setAppendComponentStack] = useLocalStorageWithLog(LOCAL_STORAGE_SHOULD_APPEND_COMPONENT_STACK_KEY, true);
          const [breakOnConsoleErrors, setBreakOnConsoleErrors] = useLocalStorageWithLog(LOCAL_STORAGE_SHOULD_BREAK_ON_CONSOLE_ERRORS, false);
          const [parseHookNames, setParseHookNames] = useLocalStorageWithLog(LOCAL_STORAGE_PARSE_HOOK_NAMES_KEY, false);
          const [hideConsoleLogsInStrictMode, setHideConsoleLogsInStrictMode] = useLocalStorageWithLog(LOCAL_STORAGE_HIDE_CONSOLE_LOGS_IN_STRICT_MODE, false);
          const [showInlineWarningsAndErrors, setShowInlineWarningsAndErrors] = useLocalStorageWithLog(LOCAL_STORAGE_SHOW_INLINE_WARNINGS_AND_ERRORS_KEY, true);
          const [traceUpdatesEnabled, setTraceUpdatesEnabled] = useLocalStorageWithLog(LOCAL_STORAGE_TRACE_UPDATES_ENABLED_KEY, false);
          const documentElements = (0, external_react_namespaceObject.useMemo)(() => {
            const array = [document.documentElement];
            if (componentsPortalContainer != null) {
              array.push(componentsPortalContainer.ownerDocument.documentElement);
            }
            if (profilerPortalContainer != null) {
              array.push(profilerPortalContainer.ownerDocument.documentElement);
            }
            return array;
          }, [componentsPortalContainer, profilerPortalContainer]);
          (0, external_react_namespaceObject.useLayoutEffect)(() => {
            switch (displayDensity) {
              case "comfortable":
                updateDisplayDensity("comfortable", documentElements);
                break;
              case "compact":
                updateDisplayDensity("compact", documentElements);
                break;
              default:
                throw Error(`Unsupported displayDensity value "${displayDensity}"`);
            }
          }, [displayDensity, documentElements]);
          (0, external_react_namespaceObject.useLayoutEffect)(() => {
            switch (theme) {
              case "light":
                updateThemeVariables("light", documentElements);
                break;
              case "dark":
                updateThemeVariables("dark", documentElements);
                break;
              case "auto":
                updateThemeVariables(browserTheme, documentElements);
                break;
              default:
                throw Error(`Unsupported theme value "${theme}"`);
            }
          }, [browserTheme, theme, documentElements]);
          (0, external_react_namespaceObject.useEffect)(() => {
            bridge2.send("updateConsolePatchSettings", {
              appendComponentStack,
              breakOnConsoleErrors,
              showInlineWarningsAndErrors,
              hideConsoleLogsInStrictMode,
              browserTheme
            });
          }, [bridge2, appendComponentStack, breakOnConsoleErrors, showInlineWarningsAndErrors, hideConsoleLogsInStrictMode, browserTheme]);
          (0, external_react_namespaceObject.useEffect)(() => {
            bridge2.send("setTraceUpdatesEnabled", traceUpdatesEnabled);
          }, [bridge2, traceUpdatesEnabled]);
          const value = (0, external_react_namespaceObject.useMemo)(() => ({
            appendComponentStack,
            breakOnConsoleErrors,
            displayDensity,
            lineHeight: displayDensity === "compact" ? COMPACT_LINE_HEIGHT : COMFORTABLE_LINE_HEIGHT,
            parseHookNames,
            setAppendComponentStack,
            setBreakOnConsoleErrors,
            setDisplayDensity,
            setParseHookNames,
            setTheme,
            setTraceUpdatesEnabled,
            setShowInlineWarningsAndErrors,
            showInlineWarningsAndErrors,
            setHideConsoleLogsInStrictMode,
            hideConsoleLogsInStrictMode,
            theme,
            browserTheme,
            traceUpdatesEnabled
          }), [appendComponentStack, breakOnConsoleErrors, displayDensity, parseHookNames, setAppendComponentStack, setBreakOnConsoleErrors, setDisplayDensity, setParseHookNames, setTheme, setTraceUpdatesEnabled, setShowInlineWarningsAndErrors, showInlineWarningsAndErrors, setHideConsoleLogsInStrictMode, hideConsoleLogsInStrictMode, theme, browserTheme, traceUpdatesEnabled]);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(SettingsContext.Provider, {
            value
          }, children);
        }
        function updateDisplayDensity(displayDensity, documentElements) {
          const computedStyle = getComputedStyle(document.body);
          const fontSize = computedStyle.getPropertyValue(`--${displayDensity}-root-font-size`);
          const root2 = document.querySelector(":root");
          root2.style.fontSize = fontSize;
        }
        function updateThemeVariables(theme, documentElements) {
          documentElements.forEach((documentElement) => {
            documentElement.style.scrollbarColor = `var(${`--${theme}-color-scroll-thumb`}) var(${`--${theme}-color-scroll-track`})`;
          });
        }
        var ButtonIcon = __webpack_require__(6628);
        var ButtonIcon_default = /* @__PURE__ */ __webpack_require__.n(ButtonIcon);
        ;
        function ButtonIcon_ButtonIcon({
          className = "",
          type
        }) {
          let pathData = null;
          switch (type) {
            case "add":
              pathData = PATH_ADD;
              break;
            case "cancel":
              pathData = PATH_CANCEL;
              break;
            case "clear":
              pathData = PATH_CLEAR;
              break;
            case "close":
              pathData = PATH_CLOSE;
              break;
            case "collapsed":
              pathData = PATH_COLLAPSED;
              break;
            case "copy":
              pathData = ButtonIcon_PATH_COPY;
              break;
            case "delete":
              pathData = PATH_DELETE;
              break;
            case "down":
              pathData = PATH_DOWN;
              break;
            case "editor":
              pathData = PATH_EDITOR;
              break;
            case "expanded":
              pathData = PATH_EXPANDED;
              break;
            case "export":
              pathData = PATH_EXPORT;
              break;
            case "filter":
              pathData = PATH_FILTER;
              break;
            case "import":
              pathData = PATH_IMPORT;
              break;
            case "log-data":
              pathData = PATH_LOG_DATA;
              break;
            case "more":
              pathData = PATH_MORE;
              break;
            case "next":
              pathData = PATH_NEXT;
              break;
            case "parse-hook-names":
              pathData = PATH_PARSE_HOOK_NAMES;
              break;
            case "previous":
              pathData = PATH_PREVIOUS;
              break;
            case "record":
              pathData = PATH_RECORD;
              break;
            case "reload":
              pathData = PATH_RELOAD;
              break;
            case "save":
              pathData = PATH_SAVE;
              break;
            case "search":
              pathData = ButtonIcon_PATH_SEARCH;
              break;
            case "settings":
              pathData = ButtonIcon_PATH_SETTINGS;
              break;
            case "error":
              pathData = ButtonIcon_PATH_ERROR;
              break;
            case "suspend":
              pathData = PATH_SUSPEND;
              break;
            case "undo":
              pathData = PATH_UNDO;
              break;
            case "up":
              pathData = PATH_UP;
              break;
            case "view-dom":
              pathData = PATH_VIEW_DOM;
              break;
            case "view-source":
              pathData = PATH_VIEW_SOURCE;
              break;
            default:
              console.warn(`Unsupported type "${type}" specified for ButtonIcon`);
              break;
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            className: `${ButtonIcon_default().ButtonIcon} ${className}`,
            width: "24",
            height: "24",
            viewBox: "0 0 24 24"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("path", {
            d: "M0 0h24v24H0z",
            fill: "none"
          }), typeof pathData === "string" ? /* @__PURE__ */ external_react_namespaceObject.createElement("path", {
            fill: "currentColor",
            d: pathData
          }) : pathData);
        }
        const PATH_ADD = "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z";
        const PATH_CANCEL = `
  M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z
`;
        const PATH_CLEAR = `
  M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM4 12c0-4.42 3.58-8 8-8 1.85 0 3.55.63 4.9 1.69L5.69
  16.9C4.63 15.55 4 13.85 4 12zm8 8c-1.85 0-3.55-.63-4.9-1.69L18.31 7.1C19.37 8.45 20 10.15 20 12c0 4.42-3.58 8-8 8z
`;
        const PATH_CLOSE = "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z";
        const PATH_COLLAPSED = "M10 17l5-5-5-5v10z";
        const ButtonIcon_PATH_COPY = `
  M3 13h2v-2H3v2zm0 4h2v-2H3v2zm2 4v-2H3a2 2 0 0 0 2 2zM3 9h2V7H3v2zm12 12h2v-2h-2v2zm4-18H9a2 2 0 0 0-2
  2v10a2 2 0 0 0 2 2h10c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 12H9V5h10v10zm-8 6h2v-2h-2v2zm-4 0h2v-2H7v2z
`;
        const PATH_DELETE = `
  M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12
  13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z
`;
        const PATH_DOWN = "M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z";
        const PATH_EXPANDED = "M7 10l5 5 5-5z";
        const PATH_EXPORT = "M15.82,2.14v7H21l-9,9L3,9.18H8.18v-7ZM3,20.13H21v1.73H3Z";
        const PATH_FILTER = "M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z";
        const PATH_IMPORT = "M8.18,18.13v-7H3l9-8.95,9,9H15.82v7ZM3,20.13H21v1.73H3Z";
        const PATH_LOG_DATA = `
  M20 8h-2.81c-.45-.78-1.07-1.45-1.82-1.96L17 4.41 15.59 3l-2.17 2.17C12.96 5.06 12.49 5 12 5c-.49 0-.96.06-1.41.17L8.41
  3 7 4.41l1.62 1.63C7.88 6.55 7.26 7.22 6.81 8H4v2h2.09c-.05.33-.09.66-.09 1v1H4v2h2v1c0 .34.04.67.09 1H4v2h2.81c1.04
  1.79 2.97 3 5.19 3s4.15-1.21 5.19-3H20v-2h-2.09c.05-.33.09-.66.09-1v-1h2v-2h-2v-1c0-.34-.04-.67-.09-1H20V8zm-6
  8h-4v-2h4v2zm0-4h-4v-2h4v2z
`;
        const PATH_MORE = `
  M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9
  2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z
`;
        const PATH_NEXT = "M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z";
        const PATH_PARSE_HOOK_NAMES = /* @__PURE__ */ external_react_namespaceObject.createElement("g", null, /* @__PURE__ */ external_react_namespaceObject.createElement("polygon", {
          points: "20,7 20.94,4.94 23,4 20.94,3.06 20,1 19.06,3.06 17,4 19.06,4.94"
        }), /* @__PURE__ */ external_react_namespaceObject.createElement("polygon", {
          points: "8.5,7 9.44,4.94 11.5,4 9.44,3.06 8.5,1 7.56,3.06 5.5,4 7.56,4.94"
        }), /* @__PURE__ */ external_react_namespaceObject.createElement("polygon", {
          points: "20,12.5 19.06,14.56 17,15.5 19.06,16.44 20,18.5 20.94,16.44 23,15.5 20.94,14.56"
        }), /* @__PURE__ */ external_react_namespaceObject.createElement("path", {
          d: "M17.71,9.12l-2.83-2.83C14.68,6.1,14.43,6,14.17,6c-0.26,0-0.51,0.1-0.71,0.29L2.29,17.46c-0.39,0.39-0.39,1.02,0,1.41 l2.83,2.83C5.32,21.9,5.57,22,5.83,22s0.51-0.1,0.71-0.29l11.17-11.17C18.1,10.15,18.1,9.51,17.71,9.12z M14.17,8.42l1.41,1.41 L14.41,11L13,9.59L14.17,8.42z M5.83,19.59l-1.41-1.41L11.59,11L13,12.41L5.83,19.59z"
        }));
        const PATH_PREVIOUS = "M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z";
        const PATH_RECORD = "M4,12a8,8 0 1,0 16,0a8,8 0 1,0 -16,0";
        const PATH_RELOAD = `
  M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0
  6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0
  3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z
`;
        const PATH_SAVE = `
  M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z
`;
        const ButtonIcon_PATH_SEARCH = `
  M8.5,22H3.7l-1.4-1.5V3.8l1.3-1.5h17.2l1,1.5v4.9h-1.3V4.3l-0.4-0.6H4.2L3.6,4.3V20l0.7,0.7h4.2V22z
  M23,13.9l-4.6,3.6l4.6,4.6l-1.1,1.1l-4.7-4.4l-3.3,4.4l-3.2-12.3L23,13.9z
`;
        const ButtonIcon_PATH_SETTINGS = `
  M19.43 12.98c.04-.32.07-.64.07-.98s-.03-.66-.07-.98l2.11-1.65c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.3-.61-.22l-2.49
  1c-.52-.4-1.08-.73-1.69-.98l-.38-2.65C14.46 2.18 14.25 2 14 2h-4c-.25 0-.46.18-.49.42l-.38
  2.65c-.61.25-1.17.59-1.69.98l-2.49-1c-.23-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64l2.11
  1.65c-.04.32-.07.65-.07.98s.03.66.07.98l-2.11 1.65c-.19.15-.24.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1c.52.4
  1.08.73 1.69.98l.38 2.65c.03.24.24.42.49.42h4c.25 0 .46-.18.49-.42l.38-2.65c.61-.25 1.17-.59 1.69-.98l2.49
  1c.23.09.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.65zM12 15.5c-1.93 0-3.5-1.57-3.5-3.5s1.57-3.5
  3.5-3.5 3.5 1.57 3.5 3.5-1.57 3.5-3.5 3.5z
`;
        const ButtonIcon_PATH_ERROR = "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z";
        const PATH_SUSPEND = `
  M15 1H9v2h6V1zm-4 13h2V8h-2v6zm8.03-6.61l1.42-1.42c-.43-.51-.9-.99-1.41-1.41l-1.42 1.42C16.07 4.74 14.12 4 12 4c-4.97
  0-9 4.03-9 9s4.02 9 9 9 9-4.03 9-9c0-2.12-.74-4.07-1.97-5.61zM12 20c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z
`;
        const PATH_UNDO = `
  M12.5 8c-2.65 0-5.05.99-6.9 2.6L2 7v9h9l-3.62-3.62c1.39-1.16 3.16-1.88 5.12-1.88
  3.54 0 6.55 2.31 7.6 5.5l2.37-.78C21.08 11.03 17.15 8 12.5 8z
`;
        const PATH_UP = "M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z";
        const PATH_VIEW_DOM = `
  M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12
  17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3
  3-1.34 3-3-1.34-3-3-3z
`;
        const PATH_VIEW_SOURCE = `
  M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z
  `;
        const PATH_EDITOR = `
  M7 5h10v2h2V3c0-1.1-.9-1.99-2-1.99L7 1c-1.1 0-2 .9-2 2v4h2V5zm8.41 11.59L20 12l-4.59-4.59L14 8.83 17.17 12 14 15.17l1.41 1.42zM10 15.17L6.83 12 10 8.83 8.59 7.41 4 12l4.59 4.59L10 15.17zM17 19H7v-2H5v4c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2v-4h-2v2z
`;
        var Badge = __webpack_require__(19);
        var Badge_default = /* @__PURE__ */ __webpack_require__.n(Badge);
        ;
        function Badge_Badge({
          className = "",
          children
        }) {
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: `${Badge_default().Badge} ${className}`
          }, children);
        }
        var Components_Element = __webpack_require__(5994);
        var Element_default = /* @__PURE__ */ __webpack_require__.n(Components_Element);
        ;
        const {
          useMemo: IndexableDisplayName_useMemo,
          useContext
        } = external_react_namespaceObject;
        function IndexableDisplayName({
          displayName,
          id: id2
        }) {
          const {
            searchIndex,
            searchResults,
            searchText
          } = useContext(TreeStateContext);
          const isSearchResult = IndexableDisplayName_useMemo(() => {
            return searchResults.includes(id2);
          }, [id2, searchResults]);
          const isCurrentResult = searchIndex !== null && id2 === searchResults[searchIndex];
          if (!isSearchResult || displayName === null) {
            return displayName;
          }
          const match = createRegExp(searchText).exec(displayName);
          if (match === null) {
            return displayName;
          }
          const startIndex = match.index;
          const stopIndex = startIndex + match[0].length;
          const children = [];
          if (startIndex > 0) {
            children.push(/* @__PURE__ */ external_react_namespaceObject.createElement("span", {
              key: "begin"
            }, displayName.slice(0, startIndex)));
          }
          children.push(/* @__PURE__ */ external_react_namespaceObject.createElement("mark", {
            key: "middle",
            className: isCurrentResult ? Element_default().CurrentHighlight : Element_default().Highlight
          }, displayName.slice(startIndex, stopIndex)));
          if (stopIndex < displayName.length) {
            children.push(/* @__PURE__ */ external_react_namespaceObject.createElement("span", {
              key: "end"
            }, displayName.slice(stopIndex)));
          }
          return children;
        }
        const Components_IndexableDisplayName = IndexableDisplayName;
        var Toggle = __webpack_require__(7167);
        var Toggle_default = /* @__PURE__ */ __webpack_require__.n(Toggle);
        ;
        function canUseDOM() {
          return !!(typeof window !== "undefined" && window.document && window.document.createElement);
        }
        ;
        var useIsomorphicLayoutEffect = /* @__PURE__ */ canUseDOM() ? external_react_namespaceObject.useLayoutEffect : external_react_namespaceObject.useEffect;
        ;
        var serverHandoffComplete = false;
        var id = 0;
        var genId = function genId2() {
          return ++id;
        };
        function useId(idFromProps) {
          var initialId = idFromProps || (serverHandoffComplete ? genId() : null);
          var _React$useState = (0, external_react_namespaceObject.useState)(initialId), id2 = _React$useState[0], setId = _React$useState[1];
          useIsomorphicLayoutEffect(function() {
            if (id2 === null) {
              setId(genId());
            }
          }, []);
          (0, external_react_namespaceObject.useEffect)(function() {
            if (serverHandoffComplete === false) {
              serverHandoffComplete = true;
            }
          }, []);
          return id2 != null ? String(id2) : void 0;
        }
        ;
        function getOwnerDocument(element) {
          return canUseDOM() ? element ? element.ownerDocument : document : null;
        }
        function getOwnerWindow(element) {
          var ownerDocument = getOwnerDocument(element);
          return ownerDocument ? ownerDocument.defaultView || window : null;
        }
        ;
        function getDocumentDimensions(element) {
          var _ownerDocument$docume, _ownerDocument$docume2;
          var ownerDocument = getOwnerDocument(element);
          var ownerWindow = ownerDocument.defaultView || window;
          if (!ownerDocument) {
            return {
              width: 0,
              height: 0
            };
          }
          return {
            width: (_ownerDocument$docume = ownerDocument.documentElement.clientWidth) != null ? _ownerDocument$docume : ownerWindow.innerWidth,
            height: (_ownerDocument$docume2 = ownerDocument.documentElement.clientHeight) != null ? _ownerDocument$docume2 : ownerWindow.innerHeight
          };
        }
        ;
        function makeId() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return args.filter(function(val) {
            return val != null;
          }).join("--");
        }
        ;
        var checkedPkgs = {};
        function useStateLogger(state2, DEBUG2) {
          if (DEBUG2 === void 0) {
            DEBUG2 = false;
          }
          if (false) {
            var debugRef;
          }
        }
        function checkStyles(packageName) {
          if (false) {
            var _ref, environment;
          }
        }
        function useCheckStyles(packageName) {
          if (false) {
            var name;
          }
        }
        function useControlledSwitchWarning(controlledValue, controlledPropName, componentName) {
          if (false) {
            var nameCache, controlledRef;
          }
        }
        ;
        function isBoolean(value) {
          return typeof value === "boolean";
        }
        function isFunction(value) {
          return !!(value && {}.toString.call(value) == "[object Function]");
        }
        function isNumber(value) {
          return typeof value === "number" && !isNaN(value);
        }
        function isString(value) {
          return typeof value === "string";
        }
        ;
        function _arrayLikeToArray(arr, len) {
          if (len == null || len > arr.length)
            len = arr.length;
          for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
            arr2[i2] = arr[i2];
          return arr2;
        }
        function _unsupportedIterableToArray(o, minLen) {
          if (!o)
            return;
          if (typeof o === "string")
            return _arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor)
            n = o.constructor.name;
          if (n === "Map" || n === "Set")
            return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
            return _arrayLikeToArray(o, minLen);
        }
        function _createForOfIteratorHelperLoose(o, allowArrayLike) {
          var it;
          if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
            if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
              if (it)
                o = it;
              var i2 = 0;
              return function() {
                if (i2 >= o.length)
                  return {
                    done: true
                  };
                return {
                  done: false,
                  value: o[i2++]
                };
              };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          it = o[Symbol.iterator]();
          return it.next.bind(it);
        }
        function assignRef(ref, value) {
          if (ref == null)
            return;
          if (isFunction(ref)) {
            ref(value);
          } else {
            try {
              ref.current = value;
            } catch (error) {
              throw new Error('Cannot assign value "' + value + '" to ref "' + ref + '"');
            }
          }
        }
        function useComposedRefs() {
          for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
            refs[_key] = arguments[_key];
          }
          return (0, external_react_namespaceObject.useCallback)(function(node) {
            for (var _iterator = _createForOfIteratorHelperLoose(refs), _step; !(_step = _iterator()).done; ) {
              var ref = _step.value;
              assignRef(ref, node);
            }
          }, refs);
        }
        ;
        function composeEventHandlers(theirHandler, ourHandler) {
          return function(event) {
            theirHandler && theirHandler(event);
            if (!event.defaultPrevented) {
              return ourHandler(event);
            }
          };
        }
        ;
        function useForceUpdate() {
          var _useState = (0, external_react_namespaceObject.useState)(/* @__PURE__ */ Object.create(null)), dispatch = _useState[1];
          return (0, external_react_namespaceObject.useCallback)(function() {
            dispatch(/* @__PURE__ */ Object.create(null));
          }, []);
        }
        ;
        const external_react_dom_namespaceObject = require_react_dom();
        ;
        var Portal = function Portal2(_ref) {
          var children = _ref.children, _ref$type = _ref.type, type = _ref$type === void 0 ? "reach-portal" : _ref$type;
          var mountNode = (0, external_react_namespaceObject.useRef)(null);
          var portalNode = (0, external_react_namespaceObject.useRef)(null);
          var forceUpdate = useForceUpdate();
          useIsomorphicLayoutEffect(function() {
            if (!mountNode.current)
              return;
            var ownerDocument = mountNode.current.ownerDocument;
            portalNode.current = ownerDocument == null ? void 0 : ownerDocument.createElement(type);
            ownerDocument.body.appendChild(portalNode.current);
            forceUpdate();
            return function() {
              if (portalNode.current && portalNode.current.ownerDocument) {
                portalNode.current.ownerDocument.body.removeChild(portalNode.current);
              }
            };
          }, [type, forceUpdate]);
          return portalNode.current ? /* @__PURE__ */ (0, external_react_dom_namespaceObject.createPortal)(children, portalNode.current) : /* @__PURE__ */ (0, external_react_namespaceObject.createElement)("span", {
            ref: mountNode
          });
        };
        if (false) {
        }
        const reach_portal_esm = (
          /* unused pure expression or super */
          null
        );
        var prop_types = __webpack_require__(3352);
        ;
        function reach_visually_hidden_esm_extends() {
          reach_visually_hidden_esm_extends = Object.assign || function(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return reach_visually_hidden_esm_extends.apply(this, arguments);
        }
        function reach_visually_hidden_esm_objectWithoutPropertiesLoose(source, excluded) {
          if (source == null)
            return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i2;
          for (i2 = 0; i2 < sourceKeys.length; i2++) {
            key = sourceKeys[i2];
            if (excluded.indexOf(key) >= 0)
              continue;
            target[key] = source[key];
          }
          return target;
        }
        var reach_visually_hidden_esm_excluded = ["as", "style"];
        var VisuallyHidden = /* @__PURE__ */ (0, external_react_namespaceObject.forwardRef)(function VisuallyHidden2(_ref, ref) {
          var _ref$as = _ref.as, Comp = _ref$as === void 0 ? "span" : _ref$as, _ref$style = _ref.style, style = _ref$style === void 0 ? {} : _ref$style, props2 = reach_visually_hidden_esm_objectWithoutPropertiesLoose(_ref, reach_visually_hidden_esm_excluded);
          return /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(Comp, reach_visually_hidden_esm_extends({
            ref,
            style: reach_visually_hidden_esm_extends({
              border: 0,
              clip: "rect(0 0 0 0)",
              height: "1px",
              margin: "-1px",
              overflow: "hidden",
              padding: 0,
              position: "absolute",
              width: "1px",
              // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe
              whiteSpace: "nowrap",
              wordWrap: "normal"
            }, style)
          }, props2));
        });
        if (false) {
        }
        const reach_visually_hidden_esm = (
          /* unused pure expression or super */
          null
        );
        ;
        var props = ["bottom", "height", "left", "right", "top", "width"];
        var rectChanged = function rectChanged2(a, b) {
          if (a === void 0) {
            a = {};
          }
          if (b === void 0) {
            b = {};
          }
          return props.some(function(prop) {
            return a[prop] !== b[prop];
          });
        };
        var observedNodes = /* @__PURE__ */ new Map();
        var rafId;
        var run = function run2() {
          var changedStates = [];
          observedNodes.forEach(function(state2, node) {
            var newRect = node.getBoundingClientRect();
            if (rectChanged(newRect, state2.rect)) {
              state2.rect = newRect;
              changedStates.push(state2);
            }
          });
          changedStates.forEach(function(state2) {
            state2.callbacks.forEach(function(cb) {
              return cb(state2.rect);
            });
          });
          rafId = window.requestAnimationFrame(run2);
        };
        function observeRect(node, cb) {
          return {
            observe: function observe() {
              var wasEmpty = observedNodes.size === 0;
              if (observedNodes.has(node)) {
                observedNodes.get(node).callbacks.push(cb);
              } else {
                observedNodes.set(node, {
                  rect: void 0,
                  hasRectChanged: false,
                  callbacks: [cb]
                });
              }
              if (wasEmpty)
                run();
            },
            unobserve: function unobserve() {
              var state2 = observedNodes.get(node);
              if (state2) {
                var index = state2.callbacks.indexOf(cb);
                if (index >= 0)
                  state2.callbacks.splice(index, 1);
                if (!state2.callbacks.length)
                  observedNodes["delete"](node);
                if (!observedNodes.size)
                  cancelAnimationFrame(rafId);
              }
            }
          };
        }
        const observe_rect_esm = observeRect;
        ;
        var Rect = function Rect2(_ref) {
          var onChange = _ref.onChange, _ref$observe = _ref.observe, observe = _ref$observe === void 0 ? true : _ref$observe, children = _ref.children;
          var ref = useRef(null);
          var rect = useRect(ref, {
            observe,
            onChange
          });
          return children({
            ref,
            rect
          });
        };
        if (false) {
        }
        function useRect(nodeRef, observeOrOptions, deprecated_onChange) {
          var observe;
          var onChange;
          if (isBoolean(observeOrOptions)) {
            observe = observeOrOptions;
          } else {
            var _observeOrOptions$obs;
            observe = (_observeOrOptions$obs = observeOrOptions == null ? void 0 : observeOrOptions.observe) != null ? _observeOrOptions$obs : true;
            onChange = observeOrOptions == null ? void 0 : observeOrOptions.onChange;
          }
          if (isFunction(deprecated_onChange)) {
            onChange = deprecated_onChange;
          }
          if (false) {
          }
          var _React$useState = (0, external_react_namespaceObject.useState)(nodeRef.current), element = _React$useState[0], setElement = _React$useState[1];
          var initialRectIsSet = (0, external_react_namespaceObject.useRef)(false);
          var initialRefIsSet = (0, external_react_namespaceObject.useRef)(false);
          var _React$useState2 = (0, external_react_namespaceObject.useState)(null), rect = _React$useState2[0], setRect = _React$useState2[1];
          var onChangeRef = (0, external_react_namespaceObject.useRef)(onChange);
          useIsomorphicLayoutEffect(function() {
            onChangeRef.current = onChange;
            if (nodeRef.current !== element) {
              setElement(nodeRef.current);
            }
          });
          useIsomorphicLayoutEffect(function() {
            if (element && !initialRectIsSet.current) {
              initialRectIsSet.current = true;
              setRect(element.getBoundingClientRect());
            }
          }, [element]);
          useIsomorphicLayoutEffect(function() {
            if (!observe) {
              return;
            }
            var elem = element;
            if (!initialRefIsSet.current) {
              initialRefIsSet.current = true;
              elem = nodeRef.current;
            }
            if (!elem) {
              if (false) {
              }
              return;
            }
            var observer = observe_rect_esm(elem, function(rect2) {
              onChangeRef.current == null ? void 0 : onChangeRef.current(rect2);
              setRect(rect2);
            });
            observer.observe();
            return function() {
              observer.unobserve();
            };
          }, [observe, element, nodeRef]);
          return rect;
        }
        const reach_rect_esm = (
          /* unused pure expression or super */
          null
        );
        ;
        function reach_tooltip_esm_extends() {
          reach_tooltip_esm_extends = Object.assign || function(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return reach_tooltip_esm_extends.apply(this, arguments);
        }
        function reach_tooltip_esm_objectWithoutPropertiesLoose(source, excluded) {
          if (source == null)
            return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i2;
          for (i2 = 0; i2 < sourceKeys.length; i2++) {
            key = sourceKeys[i2];
            if (excluded.indexOf(key) >= 0)
              continue;
            target[key] = source[key];
          }
          return target;
        }
        var reach_tooltip_esm_excluded = ["children", "label", "ariaLabel", "id", "DEBUG_STYLE"], reach_tooltip_esm_excluded2 = ["label", "ariaLabel", "isVisible", "id"], _excluded3 = ["ariaLabel", "aria-label", "as", "id", "isVisible", "label", "position", "style", "triggerRect"], _excluded4 = ["type"];
        var _on, _on2, _on3, _on4, _on5, _states;
        var MOUSE_REST_TIMEOUT = 100;
        var LEAVE_TIMEOUT = 500;
        var TooltipStates;
        (function(TooltipStates2) {
          TooltipStates2["Idle"] = "IDLE";
          TooltipStates2["Focused"] = "FOCUSED";
          TooltipStates2["Visible"] = "VISIBLE";
          TooltipStates2["LeavingVisible"] = "LEAVING_VISIBLE";
          TooltipStates2["Dismissed"] = "DISMISSED";
        })(TooltipStates || (TooltipStates = {}));
        var TooltipEvents;
        (function(TooltipEvents2) {
          TooltipEvents2["Blur"] = "BLUR";
          TooltipEvents2["Focus"] = "FOCUS";
          TooltipEvents2["GlobalMouseMove"] = "GLOBAL_MOUSE_MOVE";
          TooltipEvents2["MouseDown"] = "MOUSE_DOWN";
          TooltipEvents2["MouseEnter"] = "MOUSE_ENTER";
          TooltipEvents2["MouseLeave"] = "MOUSE_LEAVE";
          TooltipEvents2["MouseMove"] = "MOUSE_MOVE";
          TooltipEvents2["Rest"] = "REST";
          TooltipEvents2["SelectWithKeyboard"] = "SELECT_WITH_KEYBOARD";
          TooltipEvents2["TimeComplete"] = "TIME_COMPLETE";
        })(TooltipEvents || (TooltipEvents = {}));
        var chart = {
          initial: TooltipStates.Idle,
          states: (_states = {}, _states[TooltipStates.Idle] = {
            enter: clearContextId,
            on: (_on = {}, _on[TooltipEvents.MouseEnter] = TooltipStates.Focused, _on[TooltipEvents.Focus] = TooltipStates.Visible, _on)
          }, _states[TooltipStates.Focused] = {
            enter: startRestTimer,
            leave: clearRestTimer,
            on: (_on2 = {}, _on2[TooltipEvents.MouseMove] = TooltipStates.Focused, _on2[TooltipEvents.MouseLeave] = TooltipStates.Idle, _on2[TooltipEvents.MouseDown] = TooltipStates.Dismissed, _on2[TooltipEvents.Blur] = TooltipStates.Idle, _on2[TooltipEvents.Rest] = TooltipStates.Visible, _on2)
          }, _states[TooltipStates.Visible] = {
            on: (_on3 = {}, _on3[TooltipEvents.Focus] = TooltipStates.Focused, _on3[TooltipEvents.MouseEnter] = TooltipStates.Focused, _on3[TooltipEvents.MouseLeave] = TooltipStates.LeavingVisible, _on3[TooltipEvents.Blur] = TooltipStates.LeavingVisible, _on3[TooltipEvents.MouseDown] = TooltipStates.Dismissed, _on3[TooltipEvents.SelectWithKeyboard] = TooltipStates.Dismissed, _on3[TooltipEvents.GlobalMouseMove] = TooltipStates.LeavingVisible, _on3)
          }, _states[TooltipStates.LeavingVisible] = {
            enter: startLeavingVisibleTimer,
            leave: function leave() {
              clearLeavingVisibleTimer();
              clearContextId();
            },
            on: (_on4 = {}, _on4[TooltipEvents.MouseEnter] = TooltipStates.Visible, _on4[TooltipEvents.Focus] = TooltipStates.Visible, _on4[TooltipEvents.TimeComplete] = TooltipStates.Idle, _on4)
          }, _states[TooltipStates.Dismissed] = {
            leave: function leave() {
              clearContextId();
            },
            on: (_on5 = {}, _on5[TooltipEvents.MouseLeave] = TooltipStates.Idle, _on5[TooltipEvents.Blur] = TooltipStates.Idle, _on5)
          }, _states)
        };
        var state = {
          value: chart.initial,
          context: {
            id: null
          }
        };
        var subscriptions = [];
        function subscribe(fn) {
          subscriptions.push(fn);
          return function() {
            subscriptions.splice(subscriptions.indexOf(fn), 1);
          };
        }
        function notify() {
          subscriptions.forEach(function(fn) {
            return fn(state);
          });
        }
        var restTimeout;
        function startRestTimer() {
          window.clearTimeout(restTimeout);
          restTimeout = window.setTimeout(function() {
            send({
              type: TooltipEvents.Rest
            });
          }, MOUSE_REST_TIMEOUT);
        }
        function clearRestTimer() {
          window.clearTimeout(restTimeout);
        }
        var leavingVisibleTimer;
        function startLeavingVisibleTimer() {
          window.clearTimeout(leavingVisibleTimer);
          leavingVisibleTimer = window.setTimeout(function() {
            return send({
              type: TooltipEvents.TimeComplete
            });
          }, LEAVE_TIMEOUT);
        }
        function clearLeavingVisibleTimer() {
          window.clearTimeout(leavingVisibleTimer);
        }
        function clearContextId() {
          state.context.id = null;
        }
        function useTooltip(_temp) {
          var _ref = _temp === void 0 ? {} : _temp, idProp = _ref.id, onPointerEnter = _ref.onPointerEnter, onPointerMove = _ref.onPointerMove, onPointerLeave = _ref.onPointerLeave, onPointerDown = _ref.onPointerDown, onMouseEnter = _ref.onMouseEnter, onMouseMove = _ref.onMouseMove, onMouseLeave = _ref.onMouseLeave, onMouseDown = _ref.onMouseDown, onFocus = _ref.onFocus, onBlur = _ref.onBlur, onKeyDown = _ref.onKeyDown, disabled = _ref.disabled, forwardedRef = _ref.ref, DEBUG_STYLE = _ref.DEBUG_STYLE;
          var id2 = String(useId(idProp));
          var _React$useState = (0, external_react_namespaceObject.useState)(DEBUG_STYLE ? true : isTooltipVisible(id2, true)), isVisible = _React$useState[0], setIsVisible = _React$useState[1];
          var ownRef = (0, external_react_namespaceObject.useRef)(null);
          var ref = useComposedRefs(forwardedRef, ownRef);
          var triggerRect = useRect(ownRef, {
            observe: isVisible
          });
          (0, external_react_namespaceObject.useEffect)(function() {
            return subscribe(function() {
              setIsVisible(isTooltipVisible(id2));
            });
          }, [id2]);
          useCheckStyles("tooltip");
          (0, external_react_namespaceObject.useEffect)(function() {
            var ownerDocument = getOwnerDocument(ownRef.current);
            function listener(event) {
              if ((event.key === "Escape" || event.key === "Esc") && state.value === TooltipStates.Visible) {
                send({
                  type: TooltipEvents.SelectWithKeyboard
                });
              }
            }
            ownerDocument.addEventListener("keydown", listener);
            return function() {
              return ownerDocument.removeEventListener("keydown", listener);
            };
          }, []);
          useDisabledTriggerOnSafari({
            disabled,
            isVisible,
            ref: ownRef
          });
          function wrapMouseEvent(theirHandler, ourHandler) {
            if (typeof window !== "undefined" && "PointerEvent" in window) {
              return theirHandler;
            }
            return composeEventHandlers(theirHandler, ourHandler);
          }
          function wrapPointerEventHandler(handler) {
            return function onPointerEvent(event) {
              if (event.pointerType !== "mouse") {
                return;
              }
              handler(event);
            };
          }
          function handleMouseEnter() {
            send({
              type: TooltipEvents.MouseEnter,
              id: id2
            });
          }
          function handleMouseMove() {
            send({
              type: TooltipEvents.MouseMove,
              id: id2
            });
          }
          function handleMouseLeave() {
            send({
              type: TooltipEvents.MouseLeave
            });
          }
          function handleMouseDown() {
            if (state.context.id === id2) {
              send({
                type: TooltipEvents.MouseDown
              });
            }
          }
          function handleFocus() {
            if (window.__REACH_DISABLE_TOOLTIPS) {
              return;
            }
            send({
              type: TooltipEvents.Focus,
              id: id2
            });
          }
          function handleBlur() {
            if (state.context.id === id2) {
              send({
                type: TooltipEvents.Blur
              });
            }
          }
          function handleKeyDown(event) {
            if (event.key === "Enter" || event.key === " ") {
              send({
                type: TooltipEvents.SelectWithKeyboard
              });
            }
          }
          var trigger = {
            // The element that triggers the tooltip references the tooltip element with
            // `aria-describedby`.
            // https://www.w3.org/TR/wai-aria-practices-1.2/#tooltip
            "aria-describedby": isVisible ? makeId("tooltip", id2) : void 0,
            "data-state": isVisible ? "tooltip-visible" : "tooltip-hidden",
            "data-reach-tooltip-trigger": "",
            ref,
            onPointerEnter: composeEventHandlers(onPointerEnter, wrapPointerEventHandler(handleMouseEnter)),
            onPointerMove: composeEventHandlers(onPointerMove, wrapPointerEventHandler(handleMouseMove)),
            onPointerLeave: composeEventHandlers(onPointerLeave, wrapPointerEventHandler(handleMouseLeave)),
            onPointerDown: composeEventHandlers(onPointerDown, wrapPointerEventHandler(handleMouseDown)),
            onMouseEnter: wrapMouseEvent(onMouseEnter, handleMouseEnter),
            onMouseMove: wrapMouseEvent(onMouseMove, handleMouseMove),
            onMouseLeave: wrapMouseEvent(onMouseLeave, handleMouseLeave),
            onMouseDown: wrapMouseEvent(onMouseDown, handleMouseDown),
            onFocus: composeEventHandlers(onFocus, handleFocus),
            onBlur: composeEventHandlers(onBlur, handleBlur),
            onKeyDown: composeEventHandlers(onKeyDown, handleKeyDown)
          };
          var tooltip2 = {
            id: id2,
            triggerRect,
            isVisible
          };
          return [trigger, tooltip2, isVisible];
        }
        var Tooltip = /* @__PURE__ */ (0, external_react_namespaceObject.forwardRef)(function(_ref2, forwardedRef) {
          var children = _ref2.children, label = _ref2.label, DEPRECATED_ariaLabel = _ref2.ariaLabel, id2 = _ref2.id, DEBUG_STYLE = _ref2.DEBUG_STYLE, props2 = reach_tooltip_esm_objectWithoutPropertiesLoose(_ref2, reach_tooltip_esm_excluded);
          var child = external_react_namespaceObject.Children.only(children);
          false ? 0 : void 0;
          var _useTooltip = useTooltip({
            id: id2,
            onPointerEnter: child.props.onPointerEnter,
            onPointerMove: child.props.onPointerMove,
            onPointerLeave: child.props.onPointerLeave,
            onPointerDown: child.props.onPointerDown,
            onMouseEnter: child.props.onMouseEnter,
            onMouseMove: child.props.onMouseMove,
            onMouseLeave: child.props.onMouseLeave,
            onMouseDown: child.props.onMouseDown,
            onFocus: child.props.onFocus,
            onBlur: child.props.onBlur,
            onKeyDown: child.props.onKeyDown,
            disabled: child.props.disabled,
            ref: child.ref,
            DEBUG_STYLE
          }), trigger = _useTooltip[0], tooltip2 = _useTooltip[1];
          return /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ (0, external_react_namespaceObject.cloneElement)(child, trigger), /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(TooltipPopup, reach_tooltip_esm_extends({
            ref: forwardedRef,
            label,
            "aria-label": DEPRECATED_ariaLabel
          }, tooltip2, props2)));
        });
        if (false) {
        }
        var TooltipPopup = /* @__PURE__ */ (0, external_react_namespaceObject.forwardRef)(function TooltipPopup2(_ref3, forwardRef2) {
          var label = _ref3.label, DEPRECATED_ariaLabel = _ref3.ariaLabel, isVisible = _ref3.isVisible, id2 = _ref3.id, props2 = reach_tooltip_esm_objectWithoutPropertiesLoose(_ref3, reach_tooltip_esm_excluded2);
          return isVisible ? /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(Portal, null, /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(TooltipContent, reach_tooltip_esm_extends({
            ref: forwardRef2,
            label,
            "aria-label": DEPRECATED_ariaLabel,
            isVisible
          }, props2, {
            id: makeId("tooltip", String(id2))
          }))) : null;
        });
        if (false) {
        }
        var TooltipContent = /* @__PURE__ */ (0, external_react_namespaceObject.forwardRef)(function TooltipContent2(_ref4, forwardedRef) {
          var ariaLabel = _ref4.ariaLabel, realAriaLabel = _ref4["aria-label"], _ref4$as = _ref4.as, Comp = _ref4$as === void 0 ? "div" : _ref4$as, id2 = _ref4.id, isVisible = _ref4.isVisible, label = _ref4.label, _ref4$position = _ref4.position, position = _ref4$position === void 0 ? positionTooltip : _ref4$position, style = _ref4.style, triggerRect = _ref4.triggerRect, props2 = reach_tooltip_esm_objectWithoutPropertiesLoose(_ref4, _excluded3);
          var hasAriaLabel = (realAriaLabel || ariaLabel) != null;
          var ownRef = (0, external_react_namespaceObject.useRef)(null);
          var ref = useComposedRefs(forwardedRef, ownRef);
          var tooltipRect = useRect(ownRef, {
            observe: isVisible
          });
          return /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(Comp, reach_tooltip_esm_extends({
            role: hasAriaLabel ? void 0 : "tooltip"
          }, props2, {
            ref,
            "data-reach-tooltip": "",
            id: hasAriaLabel ? void 0 : id2,
            style: reach_tooltip_esm_extends({}, style, getStyles(position, triggerRect, tooltipRect))
          }), label), hasAriaLabel && /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(VisuallyHidden, {
            role: "tooltip",
            id: id2
          }, realAriaLabel || ariaLabel));
        });
        if (false) {
        }
        function getStyles(position, triggerRect, tooltipRect) {
          var haventMeasuredTooltipYet = !tooltipRect;
          if (haventMeasuredTooltipYet) {
            return {
              visibility: "hidden"
            };
          }
          return position(triggerRect, tooltipRect);
        }
        var OFFSET_DEFAULT = 8;
        var positionTooltip = function positionTooltip2(triggerRect, tooltipRect, offset) {
          if (offset === void 0) {
            offset = OFFSET_DEFAULT;
          }
          var _getDocumentDimension = getDocumentDimensions(), windowWidth = _getDocumentDimension.width, windowHeight = _getDocumentDimension.height;
          if (!triggerRect || !tooltipRect) {
            return {};
          }
          var collisions = {
            top: triggerRect.top - tooltipRect.height < 0,
            right: windowWidth < triggerRect.left + tooltipRect.width,
            bottom: windowHeight < triggerRect.bottom + tooltipRect.height + offset,
            left: triggerRect.left - tooltipRect.width < 0
          };
          var directionRight = collisions.right && !collisions.left;
          var directionUp = collisions.bottom && !collisions.top;
          return {
            left: directionRight ? triggerRect.right - tooltipRect.width + window.pageXOffset + "px" : triggerRect.left + window.pageXOffset + "px",
            top: directionUp ? triggerRect.top - offset - tooltipRect.height + window.pageYOffset + "px" : triggerRect.top + offset + triggerRect.height + window.pageYOffset + "px"
          };
        };
        function useDisabledTriggerOnSafari(_ref5) {
          var disabled = _ref5.disabled, isVisible = _ref5.isVisible, ref = _ref5.ref;
          (0, external_react_namespaceObject.useEffect)(function() {
            if (!(typeof window !== "undefined" && "PointerEvent" in window) || !disabled || !isVisible) {
              return;
            }
            var ownerDocument = getOwnerDocument(ref.current);
            function handleMouseMove(event) {
              if (!isVisible) {
                return;
              }
              if (event.target instanceof Element && event.target.closest("[data-reach-tooltip-trigger][data-state='tooltip-visible']")) {
                return;
              }
              send({
                type: TooltipEvents.GlobalMouseMove
              });
            }
            ownerDocument.addEventListener("mousemove", handleMouseMove);
            return function() {
              ownerDocument.removeEventListener("mousemove", handleMouseMove);
            };
          }, [disabled, isVisible, ref]);
        }
        function send(event) {
          var _transition = transition(state, event), value = _transition.value, context = _transition.context, changed = _transition.changed;
          if (changed) {
            state = {
              value,
              context
            };
            notify();
          }
        }
        function transition(currentState, event) {
          var stateDef = chart.states[currentState.value];
          var nextState = stateDef && stateDef.on && stateDef.on[event.type];
          if (!nextState) {
            return reach_tooltip_esm_extends({}, currentState, {
              changed: false
            });
          }
          if (stateDef && stateDef.leave) {
            stateDef.leave(currentState.context, event);
          }
          event.type;
          var payload = reach_tooltip_esm_objectWithoutPropertiesLoose(event, _excluded4);
          var context = reach_tooltip_esm_extends({}, state.context, payload);
          var nextStateValue = typeof nextState === "string" ? nextState : nextState.target;
          var nextDef = chart.states[nextStateValue];
          if (nextDef && nextDef.enter) {
            nextDef.enter(currentState.context, event);
          }
          return {
            value: nextStateValue,
            context,
            changed: true
          };
        }
        function isTooltipVisible(id2, initial) {
          return state.context.id === id2 && (initial ? state.value === TooltipStates.Visible : state.value === TooltipStates.Visible || state.value === TooltipStates.LeavingVisible);
        }
        const reach_tooltip_esm = Tooltip;
        var reach_ui_Tooltip = __webpack_require__(1061);
        var Tooltip_default = /* @__PURE__ */ __webpack_require__.n(reach_ui_Tooltip);
        ;
        const useThemeStyles = () => {
          const {
            theme,
            displayDensity,
            browserTheme
          } = (0, external_react_namespaceObject.useContext)(SettingsContext);
          const style = (0, external_react_namespaceObject.useMemo)(() => ({
            ...THEME_STYLES[displayDensity],
            ...THEME_STYLES[theme === "auto" ? browserTheme : theme]
          }), [theme, browserTheme, displayDensity]);
          return style;
        };
        const views_useThemeStyles = useThemeStyles;
        ;
        function tooltip_extends() {
          tooltip_extends = Object.assign || function(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return tooltip_extends.apply(this, arguments);
        }
        const tooltip_Tooltip = ({
          children,
          className = "",
          ...props2
        }) => {
          const style = views_useThemeStyles();
          return (
            // $FlowFixMe[cannot-spread-inexact] unsafe spread
            /* @__PURE__ */ external_react_namespaceObject.createElement(reach_tooltip_esm, tooltip_extends({
              className: `${Tooltip_default().Tooltip} ${className}`,
              style
            }, props2), children)
          );
        };
        const tooltip = tooltip_Tooltip;
        ;
        function Toggle_Toggle({
          children,
          className = "",
          isDisabled = false,
          isChecked,
          onChange,
          testName,
          title
        }) {
          let defaultClassName;
          if (isDisabled) {
            defaultClassName = Toggle_default().ToggleDisabled;
          } else if (isChecked) {
            defaultClassName = Toggle_default().ToggleOn;
          } else {
            defaultClassName = Toggle_default().ToggleOff;
          }
          const handleClick = (0, external_react_namespaceObject.useCallback)(() => onChange(!isChecked), [isChecked, onChange]);
          let toggle = /* @__PURE__ */ external_react_namespaceObject.createElement("button", {
            className: `${defaultClassName} ${className}`,
            "data-testname": testName,
            disabled: isDisabled,
            onClick: handleClick
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: Toggle_default().ToggleContent,
            tabIndex: -1
          }, children));
          if (title) {
            toggle = /* @__PURE__ */ external_react_namespaceObject.createElement(tooltip, {
              label: title
            }, toggle);
          }
          return toggle;
        }
        var ForgetBadge = __webpack_require__(3177);
        var ForgetBadge_default = /* @__PURE__ */ __webpack_require__.n(ForgetBadge);
        ;
        function ForgetBadge_ForgetBadge(props2) {
          const {
            className = ""
          } = props2;
          const innerView = props2.indexable ? /* @__PURE__ */ external_react_namespaceObject.createElement(Components_IndexableDisplayName, {
            displayName: "Memo",
            id: props2.elementID
          }) : "Memo";
          const onChange = () => {
          };
          const title = "\u2728 This component has been auto-memoized by the React Compiler.";
          return /* @__PURE__ */ external_react_namespaceObject.createElement(Toggle_Toggle, {
            onChange,
            className: ForgetBadge_default().ForgetToggle,
            title
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(Badge_Badge, {
            className: `${ForgetBadge_default().Root} ${className}`
          }, innerView));
        }
        var IndexableElementBadges = __webpack_require__(5817);
        var IndexableElementBadges_default = /* @__PURE__ */ __webpack_require__.n(IndexableElementBadges);
        ;
        function IndexableElementBadges_IndexableElementBadges({
          compiledWithForget,
          hocDisplayNames,
          elementID,
          className = ""
        }) {
          if (!compiledWithForget && (hocDisplayNames == null || hocDisplayNames.length === 0)) {
            return null;
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: `${IndexableElementBadges_default().Root} ${className}`
          }, compiledWithForget && /* @__PURE__ */ external_react_namespaceObject.createElement(ForgetBadge_ForgetBadge, {
            indexable: true,
            elementID
          }), hocDisplayNames != null && hocDisplayNames.length > 0 && /* @__PURE__ */ external_react_namespaceObject.createElement(Badge_Badge, null, /* @__PURE__ */ external_react_namespaceObject.createElement(Components_IndexableDisplayName, {
            displayName: hocDisplayNames[0],
            id: elementID
          })), hocDisplayNames != null && hocDisplayNames.length > 1 && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: IndexableElementBadges_default().ExtraLabel
          }, "+", hocDisplayNames.length - 1));
        }
        ;
        function Element_Element({
          data,
          index,
          style
        }) {
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const {
            ownerFlatTree,
            ownerID,
            selectedElementID
          } = (0, external_react_namespaceObject.useContext)(TreeStateContext);
          const dispatch = (0, external_react_namespaceObject.useContext)(TreeDispatcherContext);
          const {
            showInlineWarningsAndErrors
          } = external_react_namespaceObject.useContext(SettingsContext);
          const element = ownerFlatTree !== null ? ownerFlatTree[index] : store.getElementAtIndex(index);
          const [isHovered, setIsHovered] = (0, external_react_namespaceObject.useState)(false);
          const {
            isNavigatingWithKeyboard,
            onElementMouseEnter,
            treeFocused
          } = data;
          const id2 = element === null ? null : element.id;
          const isSelected = selectedElementID === id2;
          const errorsAndWarningsSubscription = (0, external_react_namespaceObject.useMemo)(() => ({
            getCurrentValue: () => element === null ? {
              errorCount: 0,
              warningCount: 0
            } : store.getErrorAndWarningCountForElementID(element.id),
            subscribe: (callback) => {
              store.addListener("mutated", callback);
              return () => store.removeListener("mutated", callback);
            }
          }), [store, element]);
          const {
            errorCount,
            warningCount
          } = useSubscription(errorsAndWarningsSubscription);
          const handleDoubleClick = () => {
            if (id2 !== null) {
              dispatch({
                type: "SELECT_OWNER",
                payload: id2
              });
            }
          };
          const handleClick = ({
            metaKey
          }) => {
            if (id2 !== null) {
              logEvent({
                event_name: "select-element",
                metadata: {
                  source: "click-element"
                }
              });
              dispatch({
                type: "SELECT_ELEMENT_BY_ID",
                payload: metaKey ? null : id2
              });
            }
          };
          const handleMouseEnter = () => {
            setIsHovered(true);
            if (id2 !== null) {
              onElementMouseEnter(id2);
            }
          };
          const handleMouseLeave = () => {
            setIsHovered(false);
          };
          const handleKeyDoubleClick = (event) => {
            event.stopPropagation();
            event.preventDefault();
          };
          if (element == null) {
            console.warn(`<Element> Could not find element at index ${index}`);
            return null;
          }
          const {
            depth,
            displayName,
            hocDisplayNames,
            isStrictModeNonCompliant,
            key,
            compiledWithForget
          } = element;
          const showStrictModeBadge = isStrictModeNonCompliant && depth === 0;
          let className = Element_default().Element;
          if (isSelected) {
            className = treeFocused ? Element_default().SelectedElement : Element_default().InactiveSelectedElement;
          } else if (isHovered && !isNavigatingWithKeyboard) {
            className = Element_default().HoveredElement;
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className,
            onMouseEnter: handleMouseEnter,
            onMouseLeave: handleMouseLeave,
            onMouseDown: handleClick,
            onDoubleClick: handleDoubleClick,
            style,
            "data-testname": "ComponentTreeListItem",
            "data-depth": depth
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Element_default().Wrapper,
            style: {
              // Left offset presents the appearance of a nested tree structure.
              // We must use padding rather than margin/left because of the selected background color.
              transform: `translateX(calc(${depth} * var(--indentation-size)))`
            }
          }, ownerID === null && /* @__PURE__ */ external_react_namespaceObject.createElement(ExpandCollapseToggle, {
            element,
            store
          }), /* @__PURE__ */ external_react_namespaceObject.createElement(Components_IndexableDisplayName, {
            displayName,
            id: id2
          }), key && /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, "\xA0", /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: Element_default().KeyName
          }, "key"), '="', /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: Element_default().KeyValue,
            title: key,
            onDoubleClick: handleKeyDoubleClick
          }, key), '"'), /* @__PURE__ */ external_react_namespaceObject.createElement(IndexableElementBadges_IndexableElementBadges, {
            hocDisplayNames,
            compiledWithForget,
            elementID: id2,
            className: Element_default().BadgesBlock
          }), showInlineWarningsAndErrors && errorCount > 0 && /* @__PURE__ */ external_react_namespaceObject.createElement(Icon_Icon, {
            type: "error",
            className: isSelected && treeFocused ? Element_default().ErrorIconContrast : Element_default().ErrorIcon
          }), showInlineWarningsAndErrors && warningCount > 0 && /* @__PURE__ */ external_react_namespaceObject.createElement(Icon_Icon, {
            type: "warning",
            className: isSelected && treeFocused ? Element_default().WarningIconContrast : Element_default().WarningIcon
          }), showStrictModeBadge && /* @__PURE__ */ external_react_namespaceObject.createElement(Icon_Icon, {
            className: isSelected && treeFocused ? Element_default().StrictModeContrast : Element_default().StrictMode,
            title: "This component is not running in StrictMode.",
            type: "strict-mode-non-compliant"
          })));
        }
        const swallowDoubleClick = (event) => {
          event.preventDefault();
          event.stopPropagation();
        };
        function ExpandCollapseToggle({
          element,
          store
        }) {
          const {
            children,
            id: id2,
            isCollapsed
          } = element;
          const toggleCollapsed = (event) => {
            event.preventDefault();
            event.stopPropagation();
            store.toggleIsCollapsed(id2, !isCollapsed);
          };
          const stopPropagation = (event) => {
            event.stopPropagation();
          };
          if (children.length === 0) {
            return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              className: Element_default().ExpandCollapseToggle
            });
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Element_default().ExpandCollapseToggle,
            onMouseDown: stopPropagation,
            onClick: toggleCollapsed,
            onDoubleClick: swallowDoubleClick
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: isCollapsed ? "collapsed" : "expanded"
          }));
        }
        ;
        function InspectHostNodesToggle() {
          const [isInspecting, setIsInspecting] = (0, external_react_namespaceObject.useState)(false);
          const bridge2 = (0, external_react_namespaceObject.useContext)(BridgeContext);
          const handleChange = (0, external_react_namespaceObject.useCallback)((isChecked) => {
            setIsInspecting(isChecked);
            if (isChecked) {
              logEvent({
                event_name: "inspect-element-button-clicked"
              });
              bridge2.send("startInspectingNative");
            } else {
              bridge2.send("stopInspectingNative", false);
            }
          }, [bridge2]);
          (0, external_react_namespaceObject.useEffect)(() => {
            const onStopInspectingNative = () => setIsInspecting(false);
            bridge2.addListener("stopInspectingNative", onStopInspectingNative);
            return () => bridge2.removeListener("stopInspectingNative", onStopInspectingNative);
          }, [bridge2]);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(Toggle_Toggle, {
            onChange: handleChange,
            isChecked: isInspecting,
            title: "Select an element in the page to inspect it"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "search"
          }));
        }
        var Button = __webpack_require__(3683);
        var Button_default = /* @__PURE__ */ __webpack_require__.n(Button);
        ;
        function Button_extends() {
          Button_extends = Object.assign || function(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return Button_extends.apply(this, arguments);
        }
        function Button_Button({
          children,
          className = "",
          testName,
          title,
          ...rest
        }) {
          let button = (
            // $FlowFixMe[cannot-spread-inexact] unsafe spread
            /* @__PURE__ */ external_react_namespaceObject.createElement("button", Button_extends({
              className: `${Button_default().Button} ${className}`,
              "data-testname": testName
            }, rest), /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
              className: `${Button_default().ButtonContent} ${className}`,
              tabIndex: -1
            }, children))
          );
          if (title) {
            button = /* @__PURE__ */ external_react_namespaceObject.createElement(tooltip, {
              label: title
            }, button);
          }
          return button;
        }
        var ElementBadges = __webpack_require__(8516);
        var ElementBadges_default = /* @__PURE__ */ __webpack_require__.n(ElementBadges);
        ;
        function ElementBadges_ElementBadges({
          compiledWithForget,
          hocDisplayNames,
          className = ""
        }) {
          if (!compiledWithForget && (hocDisplayNames == null || hocDisplayNames.length === 0)) {
            return null;
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: `${ElementBadges_default().Root} ${className}`
          }, compiledWithForget && /* @__PURE__ */ external_react_namespaceObject.createElement(ForgetBadge_ForgetBadge, {
            indexable: false
          }), hocDisplayNames != null && hocDisplayNames.length > 0 && /* @__PURE__ */ external_react_namespaceObject.createElement(Badge_Badge, null, hocDisplayNames[0]), hocDisplayNames != null && hocDisplayNames.length > 1 && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: ElementBadges_default().ExtraLabel
          }, "+", hocDisplayNames.length - 1));
        }
        ;
        const Pending = 0;
        const Resolved = 1;
        const Rejected = 2;
        let readContext;
        if (typeof external_react_namespaceObject.use === "function") {
          readContext = function(Context) {
            return external_react_namespaceObject.use(Context);
          };
        } else if (typeof external_react_namespaceObject.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === "object") {
          const ReactCurrentDispatcher = external_react_namespaceObject.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentDispatcher;
          readContext = function(Context) {
            const dispatcher = ReactCurrentDispatcher.current;
            if (dispatcher === null) {
              throw new Error("react-cache: read and preload may only be called from within a component's render. They are not supported in event handlers or lifecycle methods.");
            }
            return dispatcher.readContext(Context);
          };
        } else {
          throw new Error("react-cache: Unsupported React version");
        }
        const CacheContext = /* @__PURE__ */ (0, external_react_namespaceObject.createContext)(null);
        const entries = /* @__PURE__ */ new Map();
        const resourceConfigs = /* @__PURE__ */ new Map();
        function getEntriesForResource(resource2) {
          let entriesForResource = entries.get(resource2);
          if (entriesForResource === void 0) {
            const config = resourceConfigs.get(resource2);
            entriesForResource = config !== void 0 && config.useWeakMap ? /* @__PURE__ */ new WeakMap() : /* @__PURE__ */ new Map();
            entries.set(resource2, entriesForResource);
          }
          return entriesForResource;
        }
        function accessResult(resource2, fetch2, input, key) {
          const entriesForResource = getEntriesForResource(resource2);
          const entry = entriesForResource.get(key);
          if (entry === void 0) {
            const thenable = fetch2(input);
            thenable.then((value) => {
              if (newResult.status === Pending) {
                const resolvedResult = newResult;
                resolvedResult.status = Resolved;
                resolvedResult.value = value;
              }
            }, (error) => {
              if (newResult.status === Pending) {
                const rejectedResult = newResult;
                rejectedResult.status = Rejected;
                rejectedResult.value = error;
              }
            });
            const newResult = {
              status: Pending,
              value: thenable
            };
            entriesForResource.set(key, newResult);
            return newResult;
          } else {
            return entry;
          }
        }
        function createResource(fetch2, hashInput, config = {}) {
          const resource2 = {
            clear() {
              entries.delete(resource2);
            },
            invalidate(key) {
              const entriesForResource = getEntriesForResource(resource2);
              entriesForResource.delete(key);
            },
            read(input) {
              readContext(CacheContext);
              const key = hashInput(input);
              const result = accessResult(resource2, fetch2, input, key);
              switch (result.status) {
                case Pending: {
                  const suspender = result.value;
                  throw suspender;
                }
                case Resolved: {
                  const value = result.value;
                  return value;
                }
                case Rejected: {
                  const error = result.value;
                  throw error;
                }
                default:
                  return void 0;
              }
            },
            preload(input) {
              readContext(CacheContext);
              const key = hashInput(input);
              accessResult(resource2, fetch2, input, key);
            },
            write(key, value) {
              const entriesForResource = getEntriesForResource(resource2);
              const resolvedResult = {
                status: Resolved,
                value
              };
              entriesForResource.set(key, resolvedResult);
            }
          };
          resourceConfigs.set(resource2, config);
          return resource2;
        }
        function invalidateResources() {
          entries.clear();
        }
        ;
        const OwnersListContext = /* @__PURE__ */ (0, external_react_namespaceObject.createContext)(null);
        OwnersListContext.displayName = "OwnersListContext";
        const inProgressRequests = /* @__PURE__ */ new WeakMap();
        const resource = createResource((element) => {
          const request = inProgressRequests.get(element);
          if (request != null) {
            return request.promise;
          }
          let resolveFn = null;
          const promise = new Promise((resolve) => {
            resolveFn = resolve;
          });
          inProgressRequests.set(element, {
            promise,
            resolveFn
          });
          return promise;
        }, (element) => element, {
          useWeakMap: true
        });
        function OwnersListContextController({
          children
        }) {
          const bridge2 = (0, external_react_namespaceObject.useContext)(BridgeContext);
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const {
            ownerID
          } = (0, external_react_namespaceObject.useContext)(TreeStateContext);
          const read = (0, external_react_namespaceObject.useCallback)((id2) => {
            const element = store.getElementByID(id2);
            if (element !== null) {
              return resource.read(element);
            } else {
              return null;
            }
          }, [store]);
          (0, external_react_namespaceObject.useEffect)(() => {
            const onOwnersList = (ownersList) => {
              const id2 = ownersList.id;
              const element = store.getElementByID(id2);
              if (element !== null) {
                const request = inProgressRequests.get(element);
                if (request != null) {
                  inProgressRequests.delete(element);
                  request.resolveFn(ownersList.owners === null ? null : ownersList.owners.map(backendToFrontendSerializedElementMapper));
                }
              }
            };
            bridge2.addListener("ownersList", onOwnersList);
            return () => bridge2.removeListener("ownersList", onOwnersList);
          }, [bridge2, store]);
          (0, external_react_namespaceObject.useEffect)(() => {
            if (ownerID !== null) {
              const rendererID = store.getRendererIDForElement(ownerID);
              if (rendererID !== null) {
                bridge2.send("getOwnersList", {
                  id: ownerID,
                  rendererID
                });
              }
            }
            return () => {
            };
          }, [bridge2, ownerID, store]);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(OwnersListContext.Provider, {
            value: read
          }, children);
        }
        var tabbable = __webpack_require__(8029);
        var tabbable_default = /* @__PURE__ */ __webpack_require__.n(tabbable);
        ;
        function reach_popover_esm_objectWithoutPropertiesLoose(source, excluded) {
          if (source == null)
            return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i2;
          for (i2 = 0; i2 < sourceKeys.length; i2++) {
            key = sourceKeys[i2];
            if (excluded.indexOf(key) >= 0)
              continue;
            target[key] = source[key];
          }
          return target;
        }
        function reach_popover_esm_extends() {
          reach_popover_esm_extends = Object.assign || function(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return reach_popover_esm_extends.apply(this, arguments);
        }
        var reach_popover_esm_excluded = ["as", "targetRef", "position", "unstable_observableRefs"];
        var reach_popover_esm_Popover = /* @__PURE__ */ (0, external_react_namespaceObject.forwardRef)(function Popover2(props2, ref) {
          return /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(Portal, null, /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(PopoverImpl, reach_popover_esm_extends({
            ref
          }, props2)));
        });
        if (false) {
        }
        var PopoverImpl = /* @__PURE__ */ (0, external_react_namespaceObject.forwardRef)(function PopoverImpl2(_ref, forwardedRef) {
          var _ref$as = _ref.as, Comp = _ref$as === void 0 ? "div" : _ref$as, targetRef = _ref.targetRef, _ref$position = _ref.position, position = _ref$position === void 0 ? positionDefault : _ref$position, _ref$unstable_observa = _ref.unstable_observableRefs, unstable_observableRefs = _ref$unstable_observa === void 0 ? [] : _ref$unstable_observa, props2 = reach_popover_esm_objectWithoutPropertiesLoose(_ref, reach_popover_esm_excluded);
          var popoverRef = (0, external_react_namespaceObject.useRef)(null);
          var popoverRect = useRect(popoverRef, {
            observe: !props2.hidden
          });
          var targetRect = useRect(targetRef, {
            observe: !props2.hidden
          });
          var ref = useComposedRefs(popoverRef, forwardedRef);
          useSimulateTabNavigationForReactTree(targetRef, popoverRef);
          return /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(Comp, reach_popover_esm_extends({
            "data-reach-popover": "",
            ref
          }, props2, {
            style: reach_popover_esm_extends({
              position: "absolute"
            }, reach_popover_esm_getStyles.apply(void 0, [position, targetRect, popoverRect].concat(unstable_observableRefs)), props2.style)
          }));
        });
        if (false) {
        }
        function reach_popover_esm_getStyles(position, targetRect, popoverRect) {
          for (var _len = arguments.length, unstable_observableRefs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
            unstable_observableRefs[_key - 3] = arguments[_key];
          }
          return popoverRect ? position.apply(void 0, [targetRect, popoverRect].concat(unstable_observableRefs.map(function(ref) {
            return ref.current;
          }))) : {
            visibility: "hidden"
          };
        }
        function getTopPosition(targetRect, popoverRect, isDirectionUp) {
          return {
            top: isDirectionUp ? targetRect.top - popoverRect.height + window.pageYOffset + "px" : targetRect.top + targetRect.height + window.pageYOffset + "px"
          };
        }
        var positionDefault = function positionDefault2(targetRect, popoverRect) {
          if (!targetRect || !popoverRect) {
            return {};
          }
          var _getCollisions = getCollisions(targetRect, popoverRect), directionRight = _getCollisions.directionRight, directionUp = _getCollisions.directionUp;
          return reach_popover_esm_extends({
            left: directionRight ? targetRect.right - popoverRect.width + window.pageXOffset + "px" : targetRect.left + window.pageXOffset + "px"
          }, getTopPosition(targetRect, popoverRect, directionUp));
        };
        var positionRight = function positionRight2(targetRect, popoverRect) {
          if (!targetRect || !popoverRect) {
            return {};
          }
          var _getCollisions2 = getCollisions(targetRect, popoverRect), directionLeft = _getCollisions2.directionLeft, directionUp = _getCollisions2.directionUp;
          return reach_popover_esm_extends({
            left: directionLeft ? targetRect.left + window.pageXOffset + "px" : targetRect.right - popoverRect.width + window.pageXOffset + "px"
          }, getTopPosition(targetRect, popoverRect, directionUp));
        };
        var positionMatchWidth = function positionMatchWidth2(targetRect, popoverRect) {
          if (!targetRect || !popoverRect) {
            return {};
          }
          var _getCollisions3 = getCollisions(targetRect, popoverRect), directionUp = _getCollisions3.directionUp;
          return reach_popover_esm_extends({
            width: targetRect.width,
            left: targetRect.left
          }, getTopPosition(targetRect, popoverRect, directionUp));
        };
        function getCollisions(targetRect, popoverRect, offsetLeft, offsetBottom) {
          if (offsetLeft === void 0) {
            offsetLeft = 0;
          }
          if (offsetBottom === void 0) {
            offsetBottom = 0;
          }
          var collisions = {
            top: targetRect.top - popoverRect.height < 0,
            right: window.innerWidth < targetRect.left + popoverRect.width - offsetLeft,
            bottom: window.innerHeight < targetRect.bottom + popoverRect.height - offsetBottom,
            left: targetRect.left + targetRect.width - popoverRect.width < 0
          };
          var directionRight = collisions.right && !collisions.left;
          var directionLeft = collisions.left && !collisions.right;
          var directionUp = collisions.bottom && !collisions.top;
          var directionDown = collisions.top && !collisions.bottom;
          return {
            directionRight,
            directionLeft,
            directionUp,
            directionDown
          };
        }
        function useSimulateTabNavigationForReactTree(triggerRef, popoverRef) {
          var ownerDocument = getOwnerDocument(triggerRef.current);
          function handleKeyDown(event) {
            if (event.key === "Tab" && popoverRef.current && tabbable_default()(popoverRef.current).length === 0) {
              return;
            }
            if (event.key === "Tab" && event.shiftKey) {
              if (shiftTabbedFromElementAfterTrigger(event)) {
                focusLastTabbableInPopover(event);
              } else if (shiftTabbedOutOfPopover(event)) {
                focusTriggerRef(event);
              } else if (shiftTabbedToBrowserChrome(event)) {
                disableTabbablesInPopover();
              }
            } else if (event.key === "Tab") {
              if (tabbedFromTriggerToPopover()) {
                focusFirstPopoverTabbable(event);
              } else if (tabbedOutOfPopover()) {
                focusTabbableAfterTrigger(event);
              } else if (tabbedToBrowserChrome(event)) {
                disableTabbablesInPopover();
              }
            }
          }
          (0, external_react_namespaceObject.useEffect)(function() {
            ownerDocument.addEventListener("keydown", handleKeyDown);
            return function() {
              ownerDocument.removeEventListener("keydown", handleKeyDown);
            };
          }, []);
          function getElementAfterTrigger() {
            var elements = tabbable_default()(ownerDocument);
            var targetIndex = elements && triggerRef.current ? elements.indexOf(triggerRef.current) : -1;
            var elementAfterTrigger = elements && elements[targetIndex + 1];
            return popoverRef.current && popoverRef.current.contains(elementAfterTrigger || null) ? false : elementAfterTrigger;
          }
          function tabbedFromTriggerToPopover() {
            return triggerRef.current ? triggerRef.current === ownerDocument.activeElement : false;
          }
          function focusFirstPopoverTabbable(event) {
            var elements = popoverRef.current && tabbable_default()(popoverRef.current);
            if (elements && elements[0]) {
              event.preventDefault();
              elements[0].focus();
            }
          }
          function tabbedOutOfPopover() {
            var inPopover = popoverRef.current ? popoverRef.current.contains(ownerDocument.activeElement || null) : false;
            if (inPopover) {
              var elements = popoverRef.current && tabbable_default()(popoverRef.current);
              return Boolean(elements && elements[elements.length - 1] === ownerDocument.activeElement);
            }
            return false;
          }
          function focusTabbableAfterTrigger(event) {
            var elementAfterTrigger = getElementAfterTrigger();
            if (elementAfterTrigger) {
              event.preventDefault();
              elementAfterTrigger.focus();
            }
          }
          function shiftTabbedFromElementAfterTrigger(event) {
            if (!event.shiftKey)
              return;
            var elementAfterTrigger = getElementAfterTrigger();
            return event.target === elementAfterTrigger;
          }
          function focusLastTabbableInPopover(event) {
            var elements = popoverRef.current && tabbable_default()(popoverRef.current);
            var last = elements && elements[elements.length - 1];
            if (last) {
              event.preventDefault();
              last.focus();
            }
          }
          function shiftTabbedOutOfPopover(event) {
            var elements = popoverRef.current && tabbable_default()(popoverRef.current);
            if (elements) {
              return elements.length === 0 ? false : event.target === elements[0];
            }
            return false;
          }
          function focusTriggerRef(event) {
            var _triggerRef$current;
            event.preventDefault();
            (_triggerRef$current = triggerRef.current) == null ? void 0 : _triggerRef$current.focus();
          }
          function tabbedToBrowserChrome(event) {
            var elements = popoverRef.current ? tabbable_default()(ownerDocument).filter(function(element) {
              return !popoverRef.current.contains(element);
            }) : null;
            return elements ? event.target === elements[elements.length - 1] : false;
          }
          function shiftTabbedToBrowserChrome(event) {
            return event.target === tabbable_default()(ownerDocument)[0];
          }
          var restoreTabIndexTupl\u00E9s = [];
          function disableTabbablesInPopover() {
            var elements = popoverRef.current && tabbable_default()(popoverRef.current);
            if (elements) {
              elements.forEach(function(element) {
                restoreTabIndexTupl\u00E9s.push([element, element.tabIndex]);
                element.tabIndex = -1;
              });
              ownerDocument.addEventListener("focusin", enableTabbablesInPopover);
            }
          }
          function enableTabbablesInPopover() {
            ownerDocument.removeEventListener("focusin", enableTabbablesInPopover);
            restoreTabIndexTupl\u00E9s.forEach(function(_ref2) {
              var element = _ref2[0], tabIndex = _ref2[1];
              element.tabIndex = tabIndex;
            });
          }
        }
        const reach_popover_esm = (
          /* unused pure expression or super */
          null
        );
        ;
        function createNamedContext(name, defaultValue) {
          var Ctx = /* @__PURE__ */ (0, external_react_namespaceObject.createContext)(defaultValue);
          if (false) {
          }
          return Ctx;
        }
        ;
        function reach_utils_noop_esm_noop() {
        }
        ;
        function reach_descendants_esm_objectWithoutPropertiesLoose(source, excluded) {
          if (source == null)
            return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i2;
          for (i2 = 0; i2 < sourceKeys.length; i2++) {
            key = sourceKeys[i2];
            if (excluded.indexOf(key) >= 0)
              continue;
            target[key] = source[key];
          }
          return target;
        }
        function reach_descendants_esm_extends() {
          reach_descendants_esm_extends = Object.assign || function(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return reach_descendants_esm_extends.apply(this, arguments);
        }
        var reach_descendants_esm_excluded = ["element", "index"];
        function createDescendantContext(name, initialValue) {
          if (initialValue === void 0) {
            initialValue = {};
          }
          var descendants = [];
          return createNamedContext(name, reach_descendants_esm_extends({
            descendants,
            registerDescendant: reach_utils_noop_esm_noop,
            unregisterDescendant: reach_utils_noop_esm_noop
          }, initialValue));
        }
        function useDescendant(descendant, context, indexProp) {
          var forceUpdate = useForceUpdate();
          var _React$useContext = (0, external_react_namespaceObject.useContext)(context), registerDescendant = _React$useContext.registerDescendant, unregisterDescendant = _React$useContext.unregisterDescendant, descendants = _React$useContext.descendants;
          var index = indexProp != null ? indexProp : descendants.findIndex(function(item) {
            return item.element === descendant.element;
          });
          useIsomorphicLayoutEffect(function() {
            if (!descendant.element)
              forceUpdate();
            registerDescendant(reach_descendants_esm_extends({}, descendant, {
              index
            }));
            return function() {
              unregisterDescendant(descendant.element);
            };
          }, [descendant, forceUpdate, index, registerDescendant, unregisterDescendant].concat(Object.values(descendant)));
          return index;
        }
        function useDescendantsInit() {
          return (0, external_react_namespaceObject.useState)([]);
        }
        function useDescendants(ctx) {
          return (0, external_react_namespaceObject.useContext)(ctx).descendants;
        }
        function DescendantProvider(_ref) {
          var Ctx = _ref.context, children = _ref.children, items = _ref.items, set = _ref.set;
          var registerDescendant = (0, external_react_namespaceObject.useCallback)(
            function(_ref2) {
              var element = _ref2.element, explicitIndex = _ref2.index, rest = reach_descendants_esm_objectWithoutPropertiesLoose(_ref2, reach_descendants_esm_excluded);
              if (!element) {
                return;
              }
              set(function(items2) {
                var newItems;
                if (explicitIndex != null) {
                  return [].concat(items2, [reach_descendants_esm_extends({}, rest, {
                    element,
                    index: explicitIndex
                  })]).sort(function(a, b) {
                    return a.index - b.index;
                  });
                } else if (items2.length === 0) {
                  newItems = [reach_descendants_esm_extends({}, rest, {
                    element,
                    index: 0
                  })];
                } else if (items2.find(function(item) {
                  return item.element === element;
                })) {
                  newItems = items2;
                } else {
                  var index = items2.findIndex(function(item) {
                    if (!item.element || !element) {
                      return false;
                    }
                    return Boolean(item.element.compareDocumentPosition(element) & Node.DOCUMENT_POSITION_PRECEDING);
                  });
                  var newItem = reach_descendants_esm_extends({}, rest, {
                    element,
                    index
                  });
                  if (index === -1) {
                    newItems = [].concat(items2, [newItem]);
                  } else {
                    newItems = [].concat(items2.slice(0, index), [newItem], items2.slice(index));
                  }
                }
                return newItems.map(function(item, index2) {
                  return reach_descendants_esm_extends({}, item, {
                    index: index2
                  });
                });
              });
            },
            // set is a state setter initialized by the useDescendantsInit hook.
            // We can safely ignore the lint warning here because it will not change
            // between renders.
            // eslint-disable-next-line react-hooks/exhaustive-deps
            []
          );
          var unregisterDescendant = (0, external_react_namespaceObject.useCallback)(
            function(element) {
              if (!element) {
                return;
              }
              set(function(items2) {
                return items2.filter(function(item) {
                  return element !== item.element;
                });
              });
            },
            // set is a state setter initialized by the useDescendantsInit hook.
            // We can safely ignore the lint warning here because it will not change
            // between renders.
            // eslint-disable-next-line react-hooks/exhaustive-deps
            []
          );
          return /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(Ctx.Provider, {
            value: (0, external_react_namespaceObject.useMemo)(function() {
              return {
                descendants: items,
                registerDescendant,
                unregisterDescendant
              };
            }, [items, registerDescendant, unregisterDescendant])
          }, children);
        }
        function useDescendantKeyDown(context, options) {
          var _React$useContext2 = (0, external_react_namespaceObject.useContext)(context), descendants = _React$useContext2.descendants;
          var callback = options.callback, currentIndex = options.currentIndex, filter = options.filter, _options$key = options.key, key = _options$key === void 0 ? "index" : _options$key, _options$orientation = options.orientation, orientation = _options$orientation === void 0 ? "vertical" : _options$orientation, _options$rotate = options.rotate, rotate = _options$rotate === void 0 ? true : _options$rotate, _options$rtl = options.rtl, rtl = _options$rtl === void 0 ? false : _options$rtl;
          return function handleKeyDown(event) {
            if (!["ArrowDown", "ArrowUp", "ArrowLeft", "ArrowRight", "PageUp", "PageDown", "Home", "End"].includes(event.key)) {
              return;
            }
            var index = currentIndex != null ? currentIndex : -1;
            var selectableDescendants = filter ? descendants.filter(filter) : descendants;
            if (!selectableDescendants.length) {
              return;
            }
            var selectableIndex = selectableDescendants.findIndex(function(descendant) {
              return descendant.index === currentIndex;
            });
            function getNextOption() {
              var atBottom = index === getLastOption().index;
              return atBottom ? rotate ? getFirstOption() : selectableDescendants[selectableIndex] : selectableDescendants[(selectableIndex + 1) % selectableDescendants.length];
            }
            function getPreviousOption() {
              var atTop = index === getFirstOption().index;
              return atTop ? rotate ? getLastOption() : selectableDescendants[selectableIndex] : selectableDescendants[(selectableIndex - 1 + selectableDescendants.length) % selectableDescendants.length];
            }
            function getFirstOption() {
              return selectableDescendants[0];
            }
            function getLastOption() {
              return selectableDescendants[selectableDescendants.length - 1];
            }
            switch (event.key) {
              case "ArrowDown":
                if (orientation === "vertical" || orientation === "both") {
                  event.preventDefault();
                  var next = getNextOption();
                  callback(key === "option" ? next : next[key]);
                }
                break;
              case "ArrowUp":
                if (orientation === "vertical" || orientation === "both") {
                  event.preventDefault();
                  var prev = getPreviousOption();
                  callback(key === "option" ? prev : prev[key]);
                }
                break;
              case "ArrowLeft":
                if (orientation === "horizontal" || orientation === "both") {
                  event.preventDefault();
                  var nextOrPrev = (rtl ? getNextOption : getPreviousOption)();
                  callback(key === "option" ? nextOrPrev : nextOrPrev[key]);
                }
                break;
              case "ArrowRight":
                if (orientation === "horizontal" || orientation === "both") {
                  event.preventDefault();
                  var prevOrNext = (rtl ? getPreviousOption : getNextOption)();
                  callback(key === "option" ? prevOrNext : prevOrNext[key]);
                }
                break;
              case "PageUp":
                event.preventDefault();
                var prevOrFirst = (event.ctrlKey ? getPreviousOption : getFirstOption)();
                callback(key === "option" ? prevOrFirst : prevOrFirst[key]);
                break;
              case "Home":
                event.preventDefault();
                var first = getFirstOption();
                callback(key === "option" ? first : first[key]);
                break;
              case "PageDown":
                event.preventDefault();
                var nextOrLast = (event.ctrlKey ? getNextOption : getLastOption)();
                callback(key === "option" ? nextOrLast : nextOrLast[key]);
                break;
              case "End":
                event.preventDefault();
                var last = getLastOption();
                callback(key === "option" ? last : last[key]);
                break;
            }
          };
        }
        ;
        function isRightClick(nativeEvent) {
          return "which" in nativeEvent ? nativeEvent.which === 3 : "button" in nativeEvent ? nativeEvent.button === 2 : false;
        }
        ;
        function usePrevious(value) {
          var ref = (0, external_react_namespaceObject.useRef)(null);
          (0, external_react_namespaceObject.useEffect)(function() {
            ref.current = value;
          }, [value]);
          return ref.current;
        }
        ;
        function useStatefulRefValue(ref, initialState2) {
          var _useState = (0, external_react_namespaceObject.useState)(initialState2), state2 = _useState[0], setState = _useState[1];
          var callbackRef = (0, external_react_namespaceObject.useCallback)(function(refValue) {
            ref.current = refValue;
            setState(refValue);
          }, []);
          return [state2, callbackRef];
        }
        ;
        function reach_dropdown_esm_objectWithoutPropertiesLoose(source, excluded) {
          if (source == null)
            return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i2;
          for (i2 = 0; i2 < sourceKeys.length; i2++) {
            key = sourceKeys[i2];
            if (excluded.indexOf(key) >= 0)
              continue;
            target[key] = source[key];
          }
          return target;
        }
        function reach_dropdown_esm_extends() {
          reach_dropdown_esm_extends = Object.assign || function(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return reach_dropdown_esm_extends.apply(this, arguments);
        }
        var reach_dropdown_esm_excluded = ["onKeyDown", "onMouseDown", "id", "ref"], reach_dropdown_esm_excluded2 = (
          /* unused pure expression or super */
          null
        ), reach_dropdown_esm_excluded3 = ["index", "isLink", "onClick", "onDragStart", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseMove", "onMouseUp", "onSelect", "disabled", "onFocus", "valueText", "ref"], reach_dropdown_esm_excluded4 = (
          /* unused pure expression or super */
          null
        ), _excluded5 = ["id", "onKeyDown", "ref"], _excluded6 = (
          /* unused pure expression or super */
          null
        ), _excluded7 = ["onBlur", "portal", "position", "ref"], _excluded8 = (
          /* unused pure expression or super */
          null
        );
        var CLEAR_SELECTION_INDEX = "CLEAR_SELECTION_INDEX";
        var CLICK_MENU_ITEM = "CLICK_MENU_ITEM";
        var CLOSE_MENU = "CLOSE_MENU";
        var OPEN_MENU_AT_FIRST_ITEM = "OPEN_MENU_AT_FIRST_ITEM";
        var OPEN_MENU_AT_INDEX = "OPEN_MENU_AT_INDEX";
        var OPEN_MENU_CLEARED = "OPEN_MENU_CLEARED";
        var SEARCH_FOR_ITEM = "SEARCH_FOR_ITEM";
        var SELECT_ITEM_AT_INDEX = "SELECT_ITEM_AT_INDEX";
        var SET_BUTTON_ID = "SET_BUTTON_ID";
        var DropdownDescendantContext = /* @__PURE__ */ createDescendantContext("DropdownDescendantContext");
        var DropdownContext = /* @__PURE__ */ createNamedContext("DropdownContext", {});
        var initialState = {
          // The button ID is needed for aria controls and can be set directly and
          // updated for top-level use via context. Otherwise a default is set by useId.
          // TODO: Consider deprecating direct ID in 1.0 in favor of id at the top level
          //       for passing deterministic IDs to descendent components.
          triggerId: null,
          // Whether or not the dropdown is expanded
          isExpanded: false,
          // When a user begins typing a character string, the selection will change if
          // a matching item is found
          typeaheadQuery: "",
          // The index of the current selected item. When the selection is cleared a
          // value of -1 is used.
          selectionIndex: -1
        };
        var DropdownProvider = function DropdownProvider2(_ref) {
          var id2 = _ref.id, children = _ref.children;
          var triggerRef = (0, external_react_namespaceObject.useRef)(null);
          var dropdownRef = (0, external_react_namespaceObject.useRef)(null);
          var popoverRef = (0, external_react_namespaceObject.useRef)(null);
          var _useDescendantsInit = useDescendantsInit(), descendants = _useDescendantsInit[0], setDescendants = _useDescendantsInit[1];
          var _id = useId(id2);
          var dropdownId = id2 || makeId("menu", _id);
          var triggerId = makeId("menu-button", dropdownId);
          var _React$useReducer = (0, external_react_namespaceObject.useReducer)(reducer, reach_dropdown_esm_extends({}, initialState, {
            triggerId
          })), state2 = _React$useReducer[0], dispatch = _React$useReducer[1];
          var triggerClickedRef = (0, external_react_namespaceObject.useRef)(false);
          var selectCallbacks = (0, external_react_namespaceObject.useRef)([]);
          var readyToSelect = (0, external_react_namespaceObject.useRef)(false);
          var mouseDownStartPosRef = (0, external_react_namespaceObject.useRef)({
            x: 0,
            y: 0
          });
          var context = {
            dispatch,
            dropdownId,
            dropdownRef,
            mouseDownStartPosRef,
            popoverRef,
            readyToSelect,
            selectCallbacks,
            state: state2,
            triggerClickedRef,
            triggerRef
          };
          (0, external_react_namespaceObject.useEffect)(function() {
            if (state2.isExpanded) {
              window.__REACH_DISABLE_TOOLTIPS = true;
              window.requestAnimationFrame(function() {
                reach_dropdown_esm_focus(dropdownRef.current);
              });
            } else {
              window.__REACH_DISABLE_TOOLTIPS = false;
            }
          }, [state2.isExpanded]);
          return /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(DescendantProvider, {
            context: DropdownDescendantContext,
            items: descendants,
            set: setDescendants
          }, /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(DropdownContext.Provider, {
            value: context
          }, isFunction(children) ? children({
            isExpanded: state2.isExpanded,
            // TODO: Remove in 1.0
            isOpen: state2.isExpanded
          }) : children));
        };
        if (false) {
        }
        function useDropdownTrigger(_ref2) {
          var onKeyDown = _ref2.onKeyDown, onMouseDown = _ref2.onMouseDown, id2 = _ref2.id, forwardedRef = _ref2.ref, props2 = reach_dropdown_esm_objectWithoutPropertiesLoose(_ref2, reach_dropdown_esm_excluded);
          var _useDropdownContext = reach_dropdown_esm_useDropdownContext(), dispatch = _useDropdownContext.dispatch, dropdownId = _useDropdownContext.dropdownId, mouseDownStartPosRef = _useDropdownContext.mouseDownStartPosRef, triggerClickedRef = _useDropdownContext.triggerClickedRef, triggerRef = _useDropdownContext.triggerRef, _useDropdownContext$s = _useDropdownContext.state, triggerId = _useDropdownContext$s.triggerId, isExpanded = _useDropdownContext$s.isExpanded;
          var ref = useComposedRefs(triggerRef, forwardedRef);
          var items = useDropdownDescendants();
          var firstNonDisabledIndex = (0, external_react_namespaceObject.useMemo)(function() {
            return items.findIndex(function(item) {
              return !item.disabled;
            });
          }, [items]);
          (0, external_react_namespaceObject.useEffect)(function() {
            if (id2 != null && id2 !== triggerId) {
              dispatch({
                type: SET_BUTTON_ID,
                payload: id2
              });
            }
          }, [triggerId, dispatch, id2]);
          function handleKeyDown(event) {
            switch (event.key) {
              case "ArrowDown":
              case "ArrowUp":
                event.preventDefault();
                dispatch({
                  type: OPEN_MENU_AT_INDEX,
                  payload: {
                    index: firstNonDisabledIndex
                  }
                });
                break;
              case "Enter":
              case " ":
                dispatch({
                  type: OPEN_MENU_AT_INDEX,
                  payload: {
                    index: firstNonDisabledIndex
                  }
                });
                break;
            }
          }
          function handleMouseDown(event) {
            if (isRightClick(event.nativeEvent)) {
              return;
            }
            mouseDownStartPosRef.current = {
              x: event.clientX,
              y: event.clientY
            };
            if (!isExpanded) {
              triggerClickedRef.current = true;
            }
            if (isExpanded) {
              dispatch({
                type: CLOSE_MENU
              });
            } else {
              dispatch({
                type: OPEN_MENU_CLEARED
              });
            }
          }
          return {
            data: {
              isExpanded,
              controls: dropdownId
            },
            props: reach_dropdown_esm_extends({}, props2, {
              ref,
              id: triggerId || void 0,
              onKeyDown: composeEventHandlers(onKeyDown, handleKeyDown),
              onMouseDown: composeEventHandlers(onMouseDown, handleMouseDown),
              type: "button"
            })
          };
        }
        var DropdownTrigger = (
          /* unused pure expression or super */
          null
        );
        if (false) {
        }
        function useDropdownItem(_ref4) {
          var indexProp = _ref4.index, _ref4$isLink = _ref4.isLink, isLink = _ref4$isLink === void 0 ? false : _ref4$isLink, onClick = _ref4.onClick, onDragStart = _ref4.onDragStart, onMouseDown = _ref4.onMouseDown, onMouseEnter = _ref4.onMouseEnter, onMouseLeave = _ref4.onMouseLeave, onMouseMove = _ref4.onMouseMove, onMouseUp = _ref4.onMouseUp, onSelect = _ref4.onSelect, disabled = _ref4.disabled, onFocus = _ref4.onFocus, valueTextProp = _ref4.valueText, forwardedRef = _ref4.ref, props2 = reach_dropdown_esm_objectWithoutPropertiesLoose(_ref4, reach_dropdown_esm_excluded3);
          var _useDropdownContext2 = reach_dropdown_esm_useDropdownContext(), dispatch = _useDropdownContext2.dispatch, dropdownRef = _useDropdownContext2.dropdownRef, mouseDownStartPosRef = _useDropdownContext2.mouseDownStartPosRef, readyToSelect = _useDropdownContext2.readyToSelect, selectCallbacks = _useDropdownContext2.selectCallbacks, triggerRef = _useDropdownContext2.triggerRef, _useDropdownContext2$ = _useDropdownContext2.state, selectionIndex = _useDropdownContext2$.selectionIndex, isExpanded = _useDropdownContext2$.isExpanded;
          var ownRef = (0, external_react_namespaceObject.useRef)(null);
          var _React$useState = (0, external_react_namespaceObject.useState)(valueTextProp || ""), valueText = _React$useState[0], setValueText = _React$useState[1];
          var setValueTextFromDOM = (0, external_react_namespaceObject.useCallback)(function(node) {
            if (!valueTextProp && node != null && node.textContent) {
              setValueText(node.textContent);
            }
          }, [valueTextProp]);
          var mouseEventStarted = (0, external_react_namespaceObject.useRef)(false);
          var _useStatefulRefValue = useStatefulRefValue(ownRef, null), element = _useStatefulRefValue[0], handleRefSet = _useStatefulRefValue[1];
          var descendant = (0, external_react_namespaceObject.useMemo)(function() {
            return {
              element,
              key: valueText,
              disabled,
              isLink
            };
          }, [disabled, element, isLink, valueText]);
          var index = useDescendant(descendant, DropdownDescendantContext, indexProp);
          var isSelected = index === selectionIndex && !disabled;
          var ref = useComposedRefs(forwardedRef, handleRefSet, setValueTextFromDOM);
          selectCallbacks.current[index] = onSelect;
          function select() {
            reach_dropdown_esm_focus(triggerRef.current);
            onSelect && onSelect();
            dispatch({
              type: CLICK_MENU_ITEM
            });
          }
          function handleClick(event) {
            if (isRightClick(event.nativeEvent)) {
              return;
            }
            if (isLink) {
              if (disabled) {
                event.preventDefault();
              } else {
                select();
              }
            }
          }
          function handleDragStart(event) {
            if (isLink) {
              event.preventDefault();
            }
          }
          function handleMouseDown(event) {
            if (isRightClick(event.nativeEvent)) {
              return;
            }
            if (isLink) {
              mouseEventStarted.current = true;
            } else {
              event.preventDefault();
            }
          }
          function handleMouseEnter(event) {
            var doc = getOwnerDocument(dropdownRef.current);
            if (!isSelected && index != null && !disabled) {
              if (dropdownRef != null && dropdownRef.current && dropdownRef.current !== doc.activeElement && ownRef.current !== doc.activeElement) {
                dropdownRef.current.focus();
              }
              dispatch({
                type: SELECT_ITEM_AT_INDEX,
                payload: {
                  index
                }
              });
            }
          }
          function handleMouseLeave(event) {
            dispatch({
              type: CLEAR_SELECTION_INDEX
            });
          }
          function handleMouseMove(event) {
            if (!readyToSelect.current) {
              var threshold = 8;
              var deltaX = Math.abs(event.clientX - mouseDownStartPosRef.current.x);
              var deltaY = Math.abs(event.clientY - mouseDownStartPosRef.current.y);
              if (deltaX > threshold || deltaY > threshold) {
                readyToSelect.current = true;
              }
            }
            if (!isSelected && index != null && !disabled) {
              dispatch({
                type: SELECT_ITEM_AT_INDEX,
                payload: {
                  index,
                  dropdownRef
                }
              });
            }
          }
          function handleFocus() {
            readyToSelect.current = true;
            if (!isSelected && index != null && !disabled) {
              dispatch({
                type: SELECT_ITEM_AT_INDEX,
                payload: {
                  index
                }
              });
            }
          }
          function handleMouseUp(event) {
            if (isRightClick(event.nativeEvent)) {
              return;
            }
            if (!readyToSelect.current) {
              readyToSelect.current = true;
              return;
            }
            if (isLink) {
              if (mouseEventStarted.current) {
                mouseEventStarted.current = false;
              } else if (ownRef.current) {
                ownRef.current.click();
              }
            } else {
              if (!disabled) {
                select();
              }
            }
          }
          (0, external_react_namespaceObject.useEffect)(function() {
            if (isExpanded) {
              var id2 = window.setTimeout(function() {
                readyToSelect.current = true;
              }, 400);
              return function() {
                window.clearTimeout(id2);
              };
            } else {
              readyToSelect.current = false;
            }
          }, [isExpanded, readyToSelect]);
          (0, external_react_namespaceObject.useEffect)(function() {
            var ownerDocument = getOwnerDocument(ownRef.current);
            ownerDocument.addEventListener("mouseup", listener);
            return function() {
              ownerDocument.removeEventListener("mouseup", listener);
            };
            function listener() {
              mouseEventStarted.current = false;
            }
          }, []);
          return {
            data: {
              disabled
            },
            props: reach_dropdown_esm_extends({
              id: useItemId(index),
              tabIndex: -1
            }, props2, {
              ref,
              "data-disabled": disabled ? "" : void 0,
              "data-selected": isSelected ? "" : void 0,
              "data-valuetext": valueText,
              onClick: composeEventHandlers(onClick, handleClick),
              onDragStart: composeEventHandlers(onDragStart, handleDragStart),
              onMouseDown: composeEventHandlers(onMouseDown, handleMouseDown),
              onMouseEnter: composeEventHandlers(onMouseEnter, handleMouseEnter),
              onMouseLeave: composeEventHandlers(onMouseLeave, handleMouseLeave),
              onMouseMove: composeEventHandlers(onMouseMove, handleMouseMove),
              onFocus: composeEventHandlers(onFocus, handleFocus),
              onMouseUp: composeEventHandlers(onMouseUp, handleMouseUp)
            })
          };
        }
        var DropdownItem = (
          /* unused pure expression or super */
          null
        );
        if (false) {
        }
        function useDropdownItems(_ref6) {
          _ref6.id;
          var onKeyDown = _ref6.onKeyDown, forwardedRef = _ref6.ref, props2 = reach_dropdown_esm_objectWithoutPropertiesLoose(_ref6, _excluded5);
          var _useDropdownContext3 = reach_dropdown_esm_useDropdownContext(), dispatch = _useDropdownContext3.dispatch, triggerRef = _useDropdownContext3.triggerRef, dropdownRef = _useDropdownContext3.dropdownRef, selectCallbacks = _useDropdownContext3.selectCallbacks, dropdownId = _useDropdownContext3.dropdownId, _useDropdownContext3$ = _useDropdownContext3.state, isExpanded = _useDropdownContext3$.isExpanded, triggerId = _useDropdownContext3$.triggerId, selectionIndex = _useDropdownContext3$.selectionIndex, typeaheadQuery = _useDropdownContext3$.typeaheadQuery;
          var items = useDropdownDescendants();
          var ref = useComposedRefs(dropdownRef, forwardedRef);
          (0, external_react_namespaceObject.useEffect)(function() {
            var match = findItemFromTypeahead(items, typeaheadQuery);
            if (typeaheadQuery && match != null) {
              dispatch({
                type: SELECT_ITEM_AT_INDEX,
                payload: {
                  index: match,
                  dropdownRef
                }
              });
            }
            var timeout = window.setTimeout(function() {
              return typeaheadQuery && dispatch({
                type: SEARCH_FOR_ITEM,
                payload: ""
              });
            }, 1e3);
            return function() {
              return window.clearTimeout(timeout);
            };
          }, [dispatch, items, typeaheadQuery, dropdownRef]);
          var prevItemsLength = usePrevious(items.length);
          var prevSelected = usePrevious(items[selectionIndex]);
          var prevSelectionIndex = usePrevious(selectionIndex);
          (0, external_react_namespaceObject.useEffect)(function() {
            if (selectionIndex > items.length - 1) {
              dispatch({
                type: SELECT_ITEM_AT_INDEX,
                payload: {
                  index: items.length - 1,
                  dropdownRef
                }
              });
            } else if (
              // Checks if
              //  - item length has changed
              //  - selection index has not changed BUT selected item has changed
              //
              // This prevents any dynamic adding/removing of items from actually
              // changing a user's expected selection.
              prevItemsLength !== items.length && selectionIndex > -1 && prevSelected && prevSelectionIndex === selectionIndex && items[selectionIndex] !== prevSelected
            ) {
              dispatch({
                type: SELECT_ITEM_AT_INDEX,
                payload: {
                  index: items.findIndex(function(i2) {
                    return i2.key === (prevSelected == null ? void 0 : prevSelected.key);
                  }),
                  dropdownRef
                }
              });
            }
          }, [dropdownRef, dispatch, items, prevItemsLength, prevSelected, prevSelectionIndex, selectionIndex]);
          var handleKeyDown = composeEventHandlers(function handleKeyDown2(event) {
            var key = event.key;
            if (!isExpanded) {
              return;
            }
            switch (key) {
              case "Enter":
              case " ":
                var selected = items.find(function(item) {
                  return item.index === selectionIndex;
                });
                if (selected && !selected.disabled) {
                  event.preventDefault();
                  if (selected.isLink && selected.element) {
                    selected.element.click();
                  } else {
                    reach_dropdown_esm_focus(triggerRef.current);
                    selectCallbacks.current[selected.index] && selectCallbacks.current[selected.index]();
                    dispatch({
                      type: CLICK_MENU_ITEM
                    });
                  }
                }
                break;
              case "Escape":
                reach_dropdown_esm_focus(triggerRef.current);
                dispatch({
                  type: CLOSE_MENU
                });
                break;
              case "Tab":
                event.preventDefault();
                break;
              default:
                if (isString(key) && key.length === 1) {
                  var query = typeaheadQuery + key.toLowerCase();
                  dispatch({
                    type: SEARCH_FOR_ITEM,
                    payload: query
                  });
                }
                break;
            }
          }, useDescendantKeyDown(DropdownDescendantContext, {
            currentIndex: selectionIndex,
            orientation: "vertical",
            rotate: false,
            filter: function filter(item) {
              return !item.disabled;
            },
            callback: function callback(index) {
              dispatch({
                type: SELECT_ITEM_AT_INDEX,
                payload: {
                  index,
                  dropdownRef
                }
              });
            },
            key: "index"
          }));
          return {
            data: {
              activeDescendant: useItemId(selectionIndex) || void 0,
              triggerId
            },
            props: reach_dropdown_esm_extends({
              tabIndex: -1
            }, props2, {
              ref,
              id: dropdownId,
              onKeyDown: composeEventHandlers(onKeyDown, handleKeyDown)
            })
          };
        }
        var DropdownItems = (
          /* unused pure expression or super */
          null
        );
        if (false) {
        }
        function useDropdownPopover(_ref8) {
          var onBlur = _ref8.onBlur, _ref8$portal = _ref8.portal, portal = _ref8$portal === void 0 ? true : _ref8$portal, position = _ref8.position, forwardedRef = _ref8.ref, props2 = reach_dropdown_esm_objectWithoutPropertiesLoose(_ref8, _excluded7);
          var _useDropdownContext4 = reach_dropdown_esm_useDropdownContext(), triggerRef = _useDropdownContext4.triggerRef, triggerClickedRef = _useDropdownContext4.triggerClickedRef, dispatch = _useDropdownContext4.dispatch, dropdownRef = _useDropdownContext4.dropdownRef, popoverRef = _useDropdownContext4.popoverRef, isExpanded = _useDropdownContext4.state.isExpanded;
          var ref = useComposedRefs(popoverRef, forwardedRef);
          (0, external_react_namespaceObject.useEffect)(function() {
            if (!isExpanded) {
              return;
            }
            var ownerDocument = getOwnerDocument(popoverRef.current);
            function listener(event) {
              if (triggerClickedRef.current) {
                triggerClickedRef.current = false;
              } else if (!popoverContainsEventTarget(popoverRef.current, event.target)) {
                dispatch({
                  type: CLOSE_MENU
                });
              }
            }
            ownerDocument.addEventListener("mousedown", listener);
            return function() {
              ownerDocument.removeEventListener("mousedown", listener);
            };
          }, [triggerClickedRef, triggerRef, dispatch, dropdownRef, popoverRef, isExpanded]);
          return {
            data: {
              portal,
              position,
              targetRef: triggerRef,
              isExpanded
            },
            props: reach_dropdown_esm_extends({
              ref,
              hidden: !isExpanded,
              onBlur: composeEventHandlers(onBlur, function(event) {
                if (event.currentTarget.contains(event.relatedTarget)) {
                  return;
                }
                dispatch({
                  type: CLOSE_MENU
                });
              })
            }, props2)
          };
        }
        var DropdownPopover = (
          /* unused pure expression or super */
          null
        );
        if (false) {
        }
        function findItemFromTypeahead(items, string) {
          if (string === void 0) {
            string = "";
          }
          if (!string) {
            return null;
          }
          var found = items.find(function(item) {
            var _item$element, _item$element$dataset, _item$element$dataset2;
            return item.disabled ? false : (_item$element = item.element) == null ? void 0 : (_item$element$dataset = _item$element.dataset) == null ? void 0 : (_item$element$dataset2 = _item$element$dataset.valuetext) == null ? void 0 : _item$element$dataset2.toLowerCase().startsWith(string);
          });
          return found ? items.indexOf(found) : null;
        }
        function useItemId(index) {
          var _React$useContext = (0, external_react_namespaceObject.useContext)(DropdownContext), dropdownId = _React$useContext.dropdownId;
          return index != null && index > -1 ? makeId("option-" + index, dropdownId) : void 0;
        }
        function reach_dropdown_esm_focus(element) {
          element && element.focus();
        }
        function popoverContainsEventTarget(popover, target) {
          return !!(popover && popover.contains(target));
        }
        function reducer(state2, action) {
          if (action === void 0) {
            action = {};
          }
          switch (action.type) {
            case CLICK_MENU_ITEM:
              return reach_dropdown_esm_extends({}, state2, {
                isExpanded: false,
                selectionIndex: -1
              });
            case CLOSE_MENU:
              return reach_dropdown_esm_extends({}, state2, {
                isExpanded: false,
                selectionIndex: -1
              });
            case OPEN_MENU_AT_FIRST_ITEM:
              return reach_dropdown_esm_extends({}, state2, {
                isExpanded: true,
                selectionIndex: 0
              });
            case OPEN_MENU_AT_INDEX:
              return reach_dropdown_esm_extends({}, state2, {
                isExpanded: true,
                selectionIndex: action.payload.index
              });
            case OPEN_MENU_CLEARED:
              return reach_dropdown_esm_extends({}, state2, {
                isExpanded: true,
                selectionIndex: -1
              });
            case SELECT_ITEM_AT_INDEX: {
              var _action$payload$dropd = action.payload.dropdownRef, dropdownRef = _action$payload$dropd === void 0 ? {
                current: null
              } : _action$payload$dropd;
              if (action.payload.index >= 0 && action.payload.index !== state2.selectionIndex) {
                if (dropdownRef.current) {
                  var doc = getOwnerDocument(dropdownRef.current);
                  if (dropdownRef.current !== (doc == null ? void 0 : doc.activeElement)) {
                    dropdownRef.current.focus();
                  }
                }
                return reach_dropdown_esm_extends({}, state2, {
                  selectionIndex: action.payload.max != null ? Math.min(Math.max(action.payload.index, 0), action.payload.max) : Math.max(action.payload.index, 0)
                });
              }
              return state2;
            }
            case CLEAR_SELECTION_INDEX:
              return reach_dropdown_esm_extends({}, state2, {
                selectionIndex: -1
              });
            case SET_BUTTON_ID:
              return reach_dropdown_esm_extends({}, state2, {
                triggerId: action.payload
              });
            case SEARCH_FOR_ITEM:
              if (typeof action.payload !== "undefined") {
                return reach_dropdown_esm_extends({}, state2, {
                  typeaheadQuery: action.payload
                });
              }
              return state2;
            default:
              return state2;
          }
        }
        function reach_dropdown_esm_useDropdownContext() {
          return (0, external_react_namespaceObject.useContext)(DropdownContext);
        }
        function useDropdownDescendants() {
          return useDescendants(DropdownDescendantContext);
        }
        ;
        function reach_menu_button_esm_extends() {
          reach_menu_button_esm_extends = Object.assign || function(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return reach_menu_button_esm_extends.apply(this, arguments);
        }
        function reach_menu_button_esm_objectWithoutPropertiesLoose(source, excluded) {
          if (source == null)
            return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i2;
          for (i2 = 0; i2 < sourceKeys.length; i2++) {
            key = sourceKeys[i2];
            if (excluded.indexOf(key) >= 0)
              continue;
            target[key] = source[key];
          }
          return target;
        }
        var reach_menu_button_esm_excluded = ["as", "id", "children"], reach_menu_button_esm_excluded2 = ["as"], reach_menu_button_esm_excluded3 = ["as"], reach_menu_button_esm_excluded4 = ["as"], reach_menu_button_esm_excluded5 = ["as"], reach_menu_button_esm_excluded6 = (
          /* unused pure expression or super */
          null
        ), reach_menu_button_esm_excluded7 = ["portal"], reach_menu_button_esm_excluded8 = ["as"];
        var Menu = /* @__PURE__ */ (0, external_react_namespaceObject.forwardRef)(function(_ref, forwardedRef) {
          var _ref$as = _ref.as, Comp = _ref$as === void 0 ? external_react_namespaceObject.Fragment : _ref$as, id2 = _ref.id, children = _ref.children, rest = reach_menu_button_esm_objectWithoutPropertiesLoose(_ref, reach_menu_button_esm_excluded);
          useCheckStyles("menu-button");
          var parentIsFragment = (0, external_react_namespaceObject.useMemo)(function() {
            try {
              return (0, external_react_is_namespaceObject.isFragment)(/* @__PURE__ */ (0, external_react_namespaceObject.createElement)(Comp, null));
            } catch (err) {
              return false;
            }
          }, [Comp]);
          var props2 = parentIsFragment ? {} : reach_menu_button_esm_extends({
            ref: forwardedRef,
            id: id2,
            "data-reach-menu": ""
          }, rest);
          return /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(Comp, props2, /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(DropdownProvider, {
            id: id2,
            children
          }));
        });
        if (false) {
        }
        var MenuButton = /* @__PURE__ */ (0, external_react_namespaceObject.forwardRef)(function(_ref2, forwardedRef) {
          var _ref2$as = _ref2.as, Comp = _ref2$as === void 0 ? "button" : _ref2$as, rest = reach_menu_button_esm_objectWithoutPropertiesLoose(_ref2, reach_menu_button_esm_excluded2);
          var _useDropdownTrigger = useDropdownTrigger(reach_menu_button_esm_extends({}, rest, {
            ref: forwardedRef
          })), _useDropdownTrigger$d = _useDropdownTrigger.data, isExpanded = _useDropdownTrigger$d.isExpanded, controls = _useDropdownTrigger$d.controls, props2 = _useDropdownTrigger.props;
          return /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(
            Comp,
            reach_menu_button_esm_extends({
              "aria-expanded": isExpanded ? true : void 0,
              "aria-haspopup": true,
              "aria-controls": controls
            }, props2, {
              "data-reach-menu-button": ""
            })
          );
        });
        if (false) {
        }
        var MenuItemImpl = /* @__PURE__ */ (0, external_react_namespaceObject.forwardRef)(function(_ref3, forwardedRef) {
          var _ref3$as = _ref3.as, Comp = _ref3$as === void 0 ? "div" : _ref3$as, rest = reach_menu_button_esm_objectWithoutPropertiesLoose(_ref3, reach_menu_button_esm_excluded3);
          var _useDropdownItem = useDropdownItem(reach_menu_button_esm_extends({}, rest, {
            ref: forwardedRef
          })), disabled = _useDropdownItem.data.disabled, props2 = _useDropdownItem.props;
          return /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(Comp, reach_menu_button_esm_extends({
            role: "menuitem"
          }, props2, {
            "aria-disabled": disabled || void 0,
            "data-reach-menu-item": ""
          }));
        });
        var MenuItem = /* @__PURE__ */ (0, external_react_namespaceObject.forwardRef)(function(_ref4, forwardedRef) {
          var _ref4$as = _ref4.as, as = _ref4$as === void 0 ? "div" : _ref4$as, props2 = reach_menu_button_esm_objectWithoutPropertiesLoose(_ref4, reach_menu_button_esm_excluded4);
          return /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(MenuItemImpl, reach_menu_button_esm_extends({}, props2, {
            ref: forwardedRef,
            as
          }));
        });
        if (false) {
        }
        var MenuItems = /* @__PURE__ */ (0, external_react_namespaceObject.forwardRef)(function(_ref5, forwardedRef) {
          var _ref5$as = _ref5.as, Comp = _ref5$as === void 0 ? "div" : _ref5$as, rest = reach_menu_button_esm_objectWithoutPropertiesLoose(_ref5, reach_menu_button_esm_excluded5);
          var _useDropdownItems = useDropdownItems(reach_menu_button_esm_extends({}, rest, {
            ref: forwardedRef
          })), _useDropdownItems$dat = _useDropdownItems.data, activeDescendant = _useDropdownItems$dat.activeDescendant, triggerId = _useDropdownItems$dat.triggerId, props2 = _useDropdownItems.props;
          return (
            // TODO: Should probably file a but in jsx-a11y, but this is correct
            // according to https://www.w3.org/TR/wai-aria-practices-1.2/examples/menu-button/menu-button-actions-active-descendant.html
            // eslint-disable-next-line jsx-a11y/aria-activedescendant-has-tabindex
            /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(
              Comp,
              reach_menu_button_esm_extends({
                "aria-activedescendant": activeDescendant,
                "aria-labelledby": triggerId || void 0,
                role: "menu"
              }, props2, {
                "data-reach-menu-items": ""
              })
            )
          );
        });
        if (false) {
        }
        var MenuLink = (
          /* unused pure expression or super */
          null
        );
        if (false) {
        }
        var MenuList = /* @__PURE__ */ (0, external_react_namespaceObject.forwardRef)(function(_ref7, forwardedRef) {
          var _ref7$portal = _ref7.portal, portal = _ref7$portal === void 0 ? true : _ref7$portal, props2 = reach_menu_button_esm_objectWithoutPropertiesLoose(_ref7, reach_menu_button_esm_excluded7);
          return /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(MenuPopover, {
            portal
          }, /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(MenuItems, reach_menu_button_esm_extends({}, props2, {
            ref: forwardedRef,
            "data-reach-menu-list": ""
          })));
        });
        if (false) {
        }
        var MenuPopover = /* @__PURE__ */ (0, external_react_namespaceObject.forwardRef)(function(_ref8, forwardedRef) {
          var _ref8$as = _ref8.as, Comp = _ref8$as === void 0 ? "div" : _ref8$as, rest = reach_menu_button_esm_objectWithoutPropertiesLoose(_ref8, reach_menu_button_esm_excluded8);
          var _useDropdownPopover = useDropdownPopover(reach_menu_button_esm_extends({}, rest, {
            ref: forwardedRef
          })), _useDropdownPopover$d = _useDropdownPopover.data, portal = _useDropdownPopover$d.portal, targetRef = _useDropdownPopover$d.targetRef, position = _useDropdownPopover$d.position, props2 = _useDropdownPopover.props;
          var sharedProps = {
            "data-reach-menu-popover": ""
          };
          return portal ? /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(reach_popover_esm_Popover, reach_menu_button_esm_extends({}, props2, sharedProps, {
            as: Comp,
            targetRef,
            position
          })) : /* @__PURE__ */ (0, external_react_namespaceObject.createElement)(Comp, reach_menu_button_esm_extends({}, props2, sharedProps));
        });
        if (false) {
        }
        function useMenuButtonContext() {
          var _useDropdownContext = useDropdownContext(), isExpanded = _useDropdownContext.state.isExpanded;
          return useMemo(function() {
            return {
              isExpanded
            };
          }, [isExpanded]);
        }
        function useDevWarning(condition, message) {
          if (false) {
            var messageRef;
          }
        }
        ;
        function menu_button_extends() {
          menu_button_extends = Object.assign || function(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return menu_button_extends.apply(this, arguments);
        }
        const menu_button_MenuList = ({
          children,
          ...props2
        }) => {
          const style = views_useThemeStyles();
          return (
            // $FlowFixMe[cannot-spread-inexact] unsafe spread
            /* @__PURE__ */ external_react_namespaceObject.createElement(MenuList, menu_button_extends({
              style
            }, props2), children)
          );
        };
        var OwnersStack = __webpack_require__(9515);
        var OwnersStack_default = /* @__PURE__ */ __webpack_require__.n(OwnersStack);
        ;
        function dialogReducer(state2, action) {
          switch (action.type) {
            case "UPDATE_OWNER_ID":
              const selectedIndex = action.owners.findIndex((owner) => owner.id === action.ownerID);
              return {
                ownerID: action.ownerID,
                owners: action.owners,
                selectedIndex
              };
            case "UPDATE_SELECTED_INDEX":
              return {
                ...state2,
                selectedIndex: action.selectedIndex
              };
            default:
              throw new Error(`Invalid action "${action.type}"`);
          }
        }
        function OwnerStack() {
          const read = (0, external_react_namespaceObject.useContext)(OwnersListContext);
          const {
            ownerID
          } = (0, external_react_namespaceObject.useContext)(TreeStateContext);
          const treeDispatch = (0, external_react_namespaceObject.useContext)(TreeDispatcherContext);
          const [state2, dispatch] = (0, external_react_namespaceObject.useReducer)(dialogReducer, {
            ownerID: null,
            owners: [],
            selectedIndex: 0
          });
          if (ownerID === null) {
            dispatch({
              type: "UPDATE_OWNER_ID",
              ownerID: null,
              owners: []
            });
          } else if (ownerID !== state2.ownerID) {
            const isInStore = state2.owners.findIndex((owner) => owner.id === ownerID) >= 0;
            dispatch({
              type: "UPDATE_OWNER_ID",
              ownerID,
              owners: isInStore ? state2.owners : read(ownerID) || []
            });
          }
          const {
            owners,
            selectedIndex
          } = state2;
          const selectOwner = (0, external_react_namespaceObject.useCallback)((owner) => {
            if (owner !== null) {
              const index = owners.indexOf(owner);
              dispatch({
                type: "UPDATE_SELECTED_INDEX",
                selectedIndex: index >= 0 ? index : 0
              });
              treeDispatch({
                type: "SELECT_OWNER",
                payload: owner.id
              });
            } else {
              dispatch({
                type: "UPDATE_SELECTED_INDEX",
                selectedIndex: 0
              });
              treeDispatch({
                type: "RESET_OWNER_STACK"
              });
            }
          }, [owners, treeDispatch]);
          const [elementsTotalWidth, setElementsTotalWidth] = (0, external_react_namespaceObject.useState)(0);
          const elementsBarRef = (0, external_react_namespaceObject.useRef)(null);
          const isOverflowing = useIsOverflowing(elementsBarRef, elementsTotalWidth);
          const selectedOwner = owners[selectedIndex];
          (0, external_react_namespaceObject.useLayoutEffect)(() => {
            if (elementsBarRef.current === null || isOverflowing) {
              return () => {
              };
            }
            let totalWidth = 0;
            for (let i2 = 0; i2 < owners.length; i2++) {
              const element = elementsBarRef.current.children[i2];
              const computedStyle = getComputedStyle(element);
              totalWidth += element.offsetWidth + parseInt(computedStyle.marginLeft, 10) + parseInt(computedStyle.marginRight, 10);
            }
            setElementsTotalWidth(totalWidth);
          }, [elementsBarRef, isOverflowing, owners.length]);
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: OwnersStack_default().OwnerStack
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: OwnersStack_default().Bar,
            ref: elementsBarRef
          }, isOverflowing && /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement(ElementsDropdown, {
            owners,
            selectedIndex,
            selectOwner
          }), /* @__PURE__ */ external_react_namespaceObject.createElement(BackToOwnerButton, {
            owners,
            selectedIndex,
            selectOwner
          }), selectedOwner != null && /* @__PURE__ */ external_react_namespaceObject.createElement(ElementView, {
            owner: selectedOwner,
            isSelected: true,
            selectOwner
          })), !isOverflowing && owners.map((owner, index) => /* @__PURE__ */ external_react_namespaceObject.createElement(ElementView, {
            key: index,
            owner,
            isSelected: index === selectedIndex,
            selectOwner
          }))), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: OwnersStack_default().VRule
          }), /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            onClick: () => selectOwner(null),
            title: "Back to tree view"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "close"
          })));
        }
        function ElementsDropdown({
          owners,
          selectOwner
        }) {
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const menuItems = [];
          for (let index = owners.length - 1; index >= 0; index--) {
            const owner = owners[index];
            const isInStore = store.containsElement(owner.id);
            menuItems.push(/* @__PURE__ */ external_react_namespaceObject.createElement(MenuItem, {
              key: owner.id,
              className: `${OwnersStack_default().Component} ${isInStore ? "" : OwnersStack_default().NotInStore}`,
              onSelect: () => isInStore ? selectOwner(owner) : null
            }, owner.displayName, /* @__PURE__ */ external_react_namespaceObject.createElement(ElementBadges_ElementBadges, {
              hocDisplayNames: owner.hocDisplayNames,
              compiledWithForget: owner.compiledWithForget,
              className: OwnersStack_default().BadgesBlock
            })));
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement(Menu, null, /* @__PURE__ */ external_react_namespaceObject.createElement(MenuButton, {
            className: OwnersStack_default().MenuButton
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(tooltip, {
            label: "Open elements dropdown"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: OwnersStack_default().MenuButtonContent,
            tabIndex: -1
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "more"
          })))), /* @__PURE__ */ external_react_namespaceObject.createElement(menu_button_MenuList, {
            className: OwnersStack_default().Modal
          }, menuItems));
        }
        function ElementView({
          isSelected,
          owner,
          selectOwner
        }) {
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const {
            displayName,
            hocDisplayNames,
            compiledWithForget
          } = owner;
          const isInStore = store.containsElement(owner.id);
          const handleChange = (0, external_react_namespaceObject.useCallback)(() => {
            if (isInStore) {
              selectOwner(owner);
            }
          }, [isInStore, selectOwner, owner]);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(Toggle_Toggle, {
            className: `${OwnersStack_default().Component} ${isInStore ? "" : OwnersStack_default().NotInStore}`,
            isChecked: isSelected,
            onChange: handleChange
          }, displayName, /* @__PURE__ */ external_react_namespaceObject.createElement(ElementBadges_ElementBadges, {
            hocDisplayNames,
            compiledWithForget,
            className: OwnersStack_default().BadgesBlock
          }));
        }
        function BackToOwnerButton({
          owners,
          selectedIndex,
          selectOwner
        }) {
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          if (selectedIndex <= 0) {
            return null;
          }
          const owner = owners[selectedIndex - 1];
          const isInStore = store.containsElement(owner.id);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            className: isInStore ? void 0 : OwnersStack_default().NotInStore,
            onClick: () => isInStore ? selectOwner(owner) : null,
            title: `Up to ${owner.displayName || "owner"}`
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "previous"
          }));
        }
        var SearchInput = __webpack_require__(9110);
        var SearchInput_default = /* @__PURE__ */ __webpack_require__.n(SearchInput);
        ;
        function SearchInput_SearchInput({
          goToNextResult,
          goToPreviousResult,
          placeholder,
          search,
          searchIndex,
          searchResultsCount,
          searchText,
          testName
        }) {
          const inputRef = (0, external_react_namespaceObject.useRef)(null);
          const resetSearch = () => search("");
          const handleChange = ({
            currentTarget
          }) => {
            search(currentTarget.value);
          };
          const handleKeyPress = ({
            key,
            shiftKey
          }) => {
            if (key === "Enter") {
              if (shiftKey) {
                goToPreviousResult();
              } else {
                goToNextResult();
              }
            }
          };
          (0, external_react_namespaceObject.useEffect)(() => {
            if (inputRef.current === null) {
              return () => {
              };
            }
            const handleKeyDown = (event) => {
              const {
                key,
                metaKey
              } = event;
              if (key === "f" && metaKey) {
                if (inputRef.current !== null) {
                  inputRef.current.focus();
                  event.preventDefault();
                  event.stopPropagation();
                }
              }
            };
            const ownerDocument = inputRef.current.ownerDocument;
            ownerDocument.addEventListener("keydown", handleKeyDown);
            return () => ownerDocument.removeEventListener("keydown", handleKeyDown);
          }, []);
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SearchInput_default().SearchInput,
            "data-testname": testName
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(Icon_Icon, {
            className: SearchInput_default().InputIcon,
            type: "search"
          }), /* @__PURE__ */ external_react_namespaceObject.createElement("input", {
            "data-testname": testName ? `${testName}-Input` : void 0,
            className: SearchInput_default().Input,
            onChange: handleChange,
            onKeyPress: handleKeyPress,
            placeholder,
            ref: inputRef,
            value: searchText
          }), !!searchText && /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: SearchInput_default().IndexLabel,
            "data-testname": testName ? `${testName}-ResultsCount` : void 0
          }, Math.min(searchIndex + 1, searchResultsCount), " |", " ", searchResultsCount), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SearchInput_default().LeftVRule
          }), /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            "data-testname": testName ? `${testName}-PreviousButton` : void 0,
            disabled: !searchText,
            onClick: goToPreviousResult,
            title: /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, "Scroll to previous search result (", /* @__PURE__ */ external_react_namespaceObject.createElement("kbd", null, "Shift"), " +", " ", /* @__PURE__ */ external_react_namespaceObject.createElement("kbd", null, "Enter"), ")")
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "up"
          })), /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            "data-testname": testName ? `${testName}-NextButton` : void 0,
            disabled: !searchText,
            onClick: goToNextResult,
            title: /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, "Scroll to next search result (", /* @__PURE__ */ external_react_namespaceObject.createElement("kbd", null, "Enter"), ")")
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "down"
          })), /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            "data-testname": testName ? `${testName}-ResetButton` : void 0,
            disabled: !searchText,
            onClick: resetSearch,
            title: "Reset search"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "close"
          }))));
        }
        ;
        function ComponentSearchInput(props2) {
          const {
            searchIndex,
            searchResults,
            searchText
          } = (0, external_react_namespaceObject.useContext)(TreeStateContext);
          const dispatch = (0, external_react_namespaceObject.useContext)(TreeDispatcherContext);
          const search = (text) => dispatch({
            type: "SET_SEARCH_TEXT",
            payload: text
          });
          const goToNextResult = () => dispatch({
            type: "GO_TO_NEXT_SEARCH_RESULT"
          });
          const goToPreviousResult = () => dispatch({
            type: "GO_TO_PREVIOUS_SEARCH_RESULT"
          });
          return /* @__PURE__ */ external_react_namespaceObject.createElement(SearchInput_SearchInput, {
            goToNextResult,
            goToPreviousResult,
            placeholder: "Search (text or /regex/)",
            search,
            searchIndex,
            searchResultsCount: searchResults.length,
            searchText,
            testName: "ComponentSearchInput"
          });
        }
        ;
        const SettingsModalContext = /* @__PURE__ */ (0, external_react_namespaceObject.createContext)(null);
        SettingsModalContext.displayName = "SettingsModalContext";
        function SettingsModalContextController({
          children
        }) {
          const [isModalShowing, setIsModalShowing] = (0, external_react_namespaceObject.useState)(false);
          const value = (0, external_react_namespaceObject.useMemo)(() => ({
            isModalShowing,
            setIsModalShowing
          }), [isModalShowing, setIsModalShowing]);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(SettingsModalContext.Provider, {
            value
          }, children);
        }
        ;
        function SettingsModalContextToggle() {
          const {
            setIsModalShowing
          } = (0, external_react_namespaceObject.useContext)(SettingsModalContext);
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const {
            profilerStore
          } = store;
          const showFilterModal = (0, external_react_namespaceObject.useCallback)(() => setIsModalShowing(true), [setIsModalShowing]);
          const isProfilingSubscription = (0, external_react_namespaceObject.useMemo)(() => ({
            getCurrentValue: () => profilerStore.isProfiling,
            subscribe: (callback) => {
              profilerStore.addListener("isProfiling", callback);
              return () => profilerStore.removeListener("isProfiling", callback);
            }
          }), [profilerStore]);
          const isProfiling = useSubscription(isProfilingSubscription);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            disabled: isProfiling,
            onClick: showFilterModal,
            title: "View settings"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "settings"
          }));
        }
        ;
        const TreeFocusedContext = /* @__PURE__ */ (0, external_react_namespaceObject.createContext)(false);
        const Components_TreeFocusedContext = TreeFocusedContext;
        var SelectedTreeHighlight = __webpack_require__(7500);
        var SelectedTreeHighlight_default = /* @__PURE__ */ __webpack_require__.n(SelectedTreeHighlight);
        ;
        function SelectedTreeHighlight_SelectedTreeHighlight(_) {
          const {
            lineHeight
          } = (0, external_react_namespaceObject.useContext)(SettingsContext);
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const treeFocused = (0, external_react_namespaceObject.useContext)(Components_TreeFocusedContext);
          const {
            ownerID,
            selectedElementID
          } = (0, external_react_namespaceObject.useContext)(TreeStateContext);
          const subscription = (0, external_react_namespaceObject.useMemo)(() => ({
            getCurrentValue: () => {
              if (selectedElementID === null || store.isInsideCollapsedSubTree(selectedElementID)) {
                return null;
              }
              const element = store.getElementByID(selectedElementID);
              if (element === null || element.isCollapsed || element.children.length === 0) {
                return null;
              }
              const startIndex2 = store.getIndexOfElementID(element.children[0]);
              if (startIndex2 === null) {
                return null;
              }
              let stopIndex2 = null;
              let current = element;
              while (current !== null) {
                if (current.isCollapsed || current.children.length === 0) {
                  stopIndex2 = store.getIndexOfElementID(current.id);
                  current = null;
                } else {
                  const lastChildID = current.children[current.children.length - 1];
                  current = store.getElementByID(lastChildID);
                }
              }
              if (stopIndex2 === null) {
                return null;
              }
              return {
                startIndex: startIndex2,
                stopIndex: stopIndex2
              };
            },
            subscribe: (callback) => {
              store.addListener("mutated", callback);
              return () => {
                store.removeListener("mutated", callback);
              };
            }
          }), [selectedElementID, store]);
          const data = useSubscription(subscription);
          if (ownerID !== null) {
            return null;
          }
          if (data === null) {
            return null;
          }
          const {
            startIndex,
            stopIndex
          } = data;
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: treeFocused ? SelectedTreeHighlight_default().Active : SelectedTreeHighlight_default().Inactive,
            style: {
              position: "absolute",
              top: `${startIndex * lineHeight}px`,
              height: `${(stopIndex + 1 - startIndex) * lineHeight}px`
            }
          });
        }
        ;
        class TimeoutError extends Error {
          constructor(message) {
            super(message);
            if (Error.captureStackTrace) {
              Error.captureStackTrace(this, TimeoutError);
            }
            this.name = "TimeoutError";
          }
        }
        ;
        class ElementPollingCancellationError extends Error {
          constructor() {
            super();
            if (Error.captureStackTrace) {
              Error.captureStackTrace(this, ElementPollingCancellationError);
            }
            this.name = "ElementPollingCancellationError";
          }
        }
        ;
        function backendAPI_clearErrorsAndWarnings({
          bridge: bridge2,
          store
        }) {
          store.rootIDToRendererID.forEach((rendererID) => {
            bridge2.send("clearErrorsAndWarnings", {
              rendererID
            });
          });
        }
        function clearErrorsForElement({
          bridge: bridge2,
          id: id2,
          rendererID
        }) {
          bridge2.send("clearErrorsForFiberID", {
            rendererID,
            id: id2
          });
        }
        function clearWarningsForElement({
          bridge: bridge2,
          id: id2,
          rendererID
        }) {
          bridge2.send("clearWarningsForFiberID", {
            rendererID,
            id: id2
          });
        }
        function copyInspectedElementPath({
          bridge: bridge2,
          id: id2,
          path,
          rendererID
        }) {
          bridge2.send("copyElementPath", {
            id: id2,
            path,
            rendererID
          });
        }
        function inspectElement(bridge2, forceFullData, id2, path, rendererID, shouldListenToPauseEvents = false) {
          const requestID = requestCounter++;
          const promise = getPromiseForRequestID(requestID, "inspectedElement", bridge2, `Timed out while inspecting element ${id2}.`, shouldListenToPauseEvents);
          bridge2.send("inspectElement", {
            forceFullData,
            id: id2,
            path,
            rendererID,
            requestID
          });
          return promise;
        }
        let storeAsGlobalCount = 0;
        function storeAsGlobal({
          bridge: bridge2,
          id: id2,
          path,
          rendererID
        }) {
          bridge2.send("storeAsGlobal", {
            count: storeAsGlobalCount++,
            id: id2,
            path,
            rendererID
          });
        }
        const TIMEOUT_DELAY = 1e4;
        let requestCounter = 0;
        function getPromiseForRequestID(requestID, eventType, bridge2, timeoutMessage, shouldListenToPauseEvents = false) {
          return new Promise((resolve, reject) => {
            const cleanup = () => {
              bridge2.removeListener(eventType, onInspectedElement);
              bridge2.removeListener("shutdown", onShutdown);
              if (shouldListenToPauseEvents) {
                bridge2.removeListener("pauseElementPolling", onDisconnect);
              }
              clearTimeout(timeoutID);
            };
            const onShutdown = () => {
              cleanup();
              reject(new Error("Failed to inspect element. Try again or restart React DevTools."));
            };
            const onDisconnect = () => {
              cleanup();
              reject(new ElementPollingCancellationError());
            };
            const onInspectedElement = (data) => {
              if (data.responseID === requestID) {
                cleanup();
                resolve(data);
              }
            };
            const onTimeout = () => {
              cleanup();
              reject(new TimeoutError(timeoutMessage));
            };
            bridge2.addListener(eventType, onInspectedElement);
            bridge2.addListener("shutdown", onShutdown);
            if (shouldListenToPauseEvents) {
              bridge2.addListener("pauseElementPolling", onDisconnect);
            }
            const timeoutID = setTimeout(onTimeout, TIMEOUT_DELAY);
          });
        }
        function cloneInspectedElementWithPath(inspectedElement, path, value) {
          const hydratedValue = hydrateHelper(value, path);
          const clonedInspectedElement = {
            ...inspectedElement
          };
          fillInPath(clonedInspectedElement, value, path, hydratedValue);
          return clonedInspectedElement;
        }
        function convertInspectedElementBackendToFrontend(inspectedElementBackend) {
          const {
            canEditFunctionProps,
            canEditFunctionPropsDeletePaths,
            canEditFunctionPropsRenamePaths,
            canEditHooks,
            canEditHooksAndDeletePaths,
            canEditHooksAndRenamePaths,
            canToggleError,
            isErrored,
            targetErrorBoundaryID,
            canToggleSuspense,
            canViewSource,
            hasLegacyContext,
            id: id2,
            type,
            owners,
            source,
            context,
            hooks,
            plugins,
            props: props2,
            rendererPackageName,
            rendererVersion,
            rootType,
            state: state2,
            key,
            errors,
            warnings
          } = inspectedElementBackend;
          const inspectedElement = {
            canEditFunctionProps,
            canEditFunctionPropsDeletePaths,
            canEditFunctionPropsRenamePaths,
            canEditHooks,
            canEditHooksAndDeletePaths,
            canEditHooksAndRenamePaths,
            canToggleError,
            isErrored,
            targetErrorBoundaryID,
            canToggleSuspense,
            canViewSource,
            hasLegacyContext,
            id: id2,
            key,
            plugins,
            rendererPackageName,
            rendererVersion,
            rootType,
            // Previous backend implementations (<= 5.0.1) have a different interface for Source, with fileName.
            // This gates the source features for only compatible backends: >= 5.0.2
            source: source && source.sourceURL ? source : null,
            type,
            owners: owners === null ? null : owners.map(backendToFrontendSerializedElementMapper),
            context: hydrateHelper(context),
            hooks: hydrateHelper(hooks),
            props: hydrateHelper(props2),
            state: hydrateHelper(state2),
            errors,
            warnings
          };
          return inspectedElement;
        }
        function hydrateHelper(dehydratedData, path) {
          if (dehydratedData !== null) {
            const {
              cleaned,
              data,
              unserializable
            } = dehydratedData;
            if (path) {
              const {
                length
              } = path;
              if (length > 0) {
                return hydrate(data, cleaned.map((cleanedPath) => cleanedPath.slice(length)), unserializable.map((unserializablePath) => unserializablePath.slice(length)));
              }
            }
            return hydrate(data, cleaned, unserializable);
          } else {
            return null;
          }
        }
        var Tree = __webpack_require__(8633);
        var Tree_default = /* @__PURE__ */ __webpack_require__.n(Tree);
        ;
        const DEFAULT_INDENTATION_SIZE = 12;
        function Tree_Tree(props2) {
          const dispatch = (0, external_react_namespaceObject.useContext)(TreeDispatcherContext);
          const {
            numElements,
            ownerID,
            searchIndex,
            searchResults,
            selectedElementID,
            selectedElementIndex
          } = (0, external_react_namespaceObject.useContext)(TreeStateContext);
          const bridge2 = (0, external_react_namespaceObject.useContext)(BridgeContext);
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const {
            hideSettings
          } = (0, external_react_namespaceObject.useContext)(OptionsContext);
          const [isNavigatingWithKeyboard, setIsNavigatingWithKeyboard] = (0, external_react_namespaceObject.useState)(false);
          const {
            highlightNativeElement,
            clearHighlightNativeElement
          } = useHighlightNativeElement();
          const treeRef = (0, external_react_namespaceObject.useRef)(null);
          const focusTargetRef = (0, external_react_namespaceObject.useRef)(null);
          const [treeFocused, setTreeFocused] = (0, external_react_namespaceObject.useState)(false);
          const {
            lineHeight,
            showInlineWarningsAndErrors
          } = (0, external_react_namespaceObject.useContext)(SettingsContext);
          const listCallbackRef = (0, external_react_namespaceObject.useCallback)((list) => {
            if (list != null && selectedElementIndex !== null) {
              list.scrollToItem(selectedElementIndex, "smart");
            }
          }, [selectedElementIndex]);
          (0, external_react_namespaceObject.useEffect)(() => {
            function handleStopInspectingNative(didSelectNode) {
              if (didSelectNode && focusTargetRef.current !== null) {
                focusTargetRef.current.focus();
                logEvent({
                  event_name: "select-element",
                  metadata: {
                    source: "inspector"
                  }
                });
              }
            }
            bridge2.addListener("stopInspectingNative", handleStopInspectingNative);
            return () => bridge2.removeListener("stopInspectingNative", handleStopInspectingNative);
          }, [bridge2]);
          const lastScrolledIDRef = (0, external_react_namespaceObject.useRef)(null);
          (0, external_react_namespaceObject.useEffect)(() => {
            if (treeRef.current === null) {
              return () => {
              };
            }
            const handleKeyDown = (event) => {
              if (event.target.tagName === "INPUT" || event.defaultPrevented) {
                return;
              }
              let element;
              switch (event.key) {
                case "ArrowDown":
                  event.preventDefault();
                  if (event.altKey) {
                    dispatch({
                      type: "SELECT_NEXT_SIBLING_IN_TREE"
                    });
                  } else {
                    dispatch({
                      type: "SELECT_NEXT_ELEMENT_IN_TREE"
                    });
                  }
                  break;
                case "ArrowLeft":
                  event.preventDefault();
                  element = selectedElementID !== null ? store.getElementByID(selectedElementID) : null;
                  if (element !== null) {
                    if (event.altKey) {
                      if (element.ownerID !== null) {
                        dispatch({
                          type: "SELECT_OWNER_LIST_PREVIOUS_ELEMENT_IN_TREE"
                        });
                      }
                    } else {
                      if (element.children.length > 0 && !element.isCollapsed) {
                        store.toggleIsCollapsed(element.id, true);
                      } else {
                        dispatch({
                          type: "SELECT_PARENT_ELEMENT_IN_TREE"
                        });
                      }
                    }
                  }
                  break;
                case "ArrowRight":
                  event.preventDefault();
                  element = selectedElementID !== null ? store.getElementByID(selectedElementID) : null;
                  if (element !== null) {
                    if (event.altKey) {
                      dispatch({
                        type: "SELECT_OWNER_LIST_NEXT_ELEMENT_IN_TREE"
                      });
                    } else {
                      if (element.children.length > 0 && element.isCollapsed) {
                        store.toggleIsCollapsed(element.id, false);
                      } else {
                        dispatch({
                          type: "SELECT_CHILD_ELEMENT_IN_TREE"
                        });
                      }
                    }
                  }
                  break;
                case "ArrowUp":
                  event.preventDefault();
                  if (event.altKey) {
                    dispatch({
                      type: "SELECT_PREVIOUS_SIBLING_IN_TREE"
                    });
                  } else {
                    dispatch({
                      type: "SELECT_PREVIOUS_ELEMENT_IN_TREE"
                    });
                  }
                  break;
                default:
                  return;
              }
              setIsNavigatingWithKeyboard(true);
            };
            const container = treeRef.current;
            container.addEventListener("keydown", handleKeyDown);
            return () => {
              container.removeEventListener("keydown", handleKeyDown);
            };
          }, [dispatch, selectedElementID, store]);
          const handleBlur = (0, external_react_namespaceObject.useCallback)(() => setTreeFocused(false), []);
          const handleFocus = (0, external_react_namespaceObject.useCallback)(() => {
            setTreeFocused(true);
            if (selectedElementIndex === null && numElements > 0) {
              dispatch({
                type: "SELECT_ELEMENT_AT_INDEX",
                payload: 0
              });
            }
          }, [dispatch, numElements, selectedElementIndex]);
          const handleKeyPress = (0, external_react_namespaceObject.useCallback)((event) => {
            switch (event.key) {
              case "Enter":
              case " ":
                if (selectedElementID !== null) {
                  dispatch({
                    type: "SELECT_OWNER",
                    payload: selectedElementID
                  });
                }
                break;
              default:
                break;
            }
          }, [dispatch, selectedElementID]);
          const searchRef = (0, external_react_namespaceObject.useRef)({
            searchIndex,
            searchResults
          });
          (0, external_react_namespaceObject.useEffect)(() => {
            let didSelectNewSearchResult = false;
            if (searchRef.current.searchIndex !== searchIndex || searchRef.current.searchResults !== searchResults) {
              searchRef.current.searchIndex = searchIndex;
              searchRef.current.searchResults = searchResults;
              didSelectNewSearchResult = true;
            }
            if (isNavigatingWithKeyboard || didSelectNewSearchResult) {
              if (selectedElementID !== null) {
                highlightNativeElement(selectedElementID);
              } else {
                clearHighlightNativeElement();
              }
            }
          }, [bridge2, isNavigatingWithKeyboard, highlightNativeElement, searchIndex, searchResults, selectedElementID]);
          const handleElementMouseEnter = (0, external_react_namespaceObject.useCallback)((id2) => {
            if (!isNavigatingWithKeyboard) {
              highlightNativeElement(id2);
            }
          }, [isNavigatingWithKeyboard, highlightNativeElement]);
          const handleMouseMove = (0, external_react_namespaceObject.useCallback)(() => {
            setIsNavigatingWithKeyboard(false);
          }, []);
          const handleMouseLeave = clearHighlightNativeElement;
          const itemData = (0, external_react_namespaceObject.useMemo)(() => ({
            numElements,
            isNavigatingWithKeyboard,
            onElementMouseEnter: handleElementMouseEnter,
            lastScrolledIDRef,
            treeFocused
          }), [numElements, isNavigatingWithKeyboard, handleElementMouseEnter, lastScrolledIDRef, treeFocused]);
          const itemKey = (0, external_react_namespaceObject.useCallback)((index) => store.getElementIDAtIndex(index), [store]);
          const handlePreviousErrorOrWarningClick = external_react_namespaceObject.useCallback(() => {
            dispatch({
              type: "SELECT_PREVIOUS_ELEMENT_WITH_ERROR_OR_WARNING_IN_TREE"
            });
          }, []);
          const handleNextErrorOrWarningClick = external_react_namespaceObject.useCallback(() => {
            dispatch({
              type: "SELECT_NEXT_ELEMENT_WITH_ERROR_OR_WARNING_IN_TREE"
            });
          }, []);
          const errorsOrWarningsSubscription = (0, external_react_namespaceObject.useMemo)(() => ({
            getCurrentValue: () => ({
              errors: store.errorCount,
              warnings: store.warningCount
            }),
            subscribe: (callback) => {
              store.addListener("mutated", callback);
              return () => store.removeListener("mutated", callback);
            }
          }), [store]);
          const {
            errors,
            warnings
          } = useSubscription(errorsOrWarningsSubscription);
          const clearErrorsAndWarnings = () => {
            backendAPI_clearErrorsAndWarnings({
              bridge: bridge2,
              store
            });
          };
          const zeroElementsNotice = /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Tree_default().ZeroElementsNotice
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("p", null, "Loading React Element Tree..."), /* @__PURE__ */ external_react_namespaceObject.createElement("p", null, "If this seems stuck, please follow the", " ", /* @__PURE__ */ external_react_namespaceObject.createElement("a", {
            className: Tree_default().Link,
            href: "https://github.com/facebook/react/blob/main/packages/react-devtools/README.md#the-react-tab-shows-no-components",
            target: "_blank"
          }, "troubleshooting instructions"), "."));
          return /* @__PURE__ */ external_react_namespaceObject.createElement(Components_TreeFocusedContext.Provider, {
            value: treeFocused
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Tree_default().Tree,
            ref: treeRef
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Tree_default().SearchInput
          }, store.supportsClickToInspect && /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement(InspectHostNodesToggle, null), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Tree_default().VRule
          })), /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Suspense, {
            fallback: /* @__PURE__ */ external_react_namespaceObject.createElement(Loading, null)
          }, ownerID !== null ? /* @__PURE__ */ external_react_namespaceObject.createElement(OwnerStack, null) : /* @__PURE__ */ external_react_namespaceObject.createElement(ComponentSearchInput, null)), showInlineWarningsAndErrors && ownerID === null && (errors > 0 || warnings > 0) && /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Tree_default().VRule
          }), errors > 0 && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Tree_default().IconAndCount
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(Icon_Icon, {
            className: Tree_default().ErrorIcon,
            type: "error"
          }), errors), warnings > 0 && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Tree_default().IconAndCount
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(Icon_Icon, {
            className: Tree_default().WarningIcon,
            type: "warning"
          }), warnings), /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            onClick: handlePreviousErrorOrWarningClick,
            title: "Scroll to previous error or warning"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "up"
          })), /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            onClick: handleNextErrorOrWarningClick,
            title: "Scroll to next error or warning"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "down"
          })), /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            onClick: clearErrorsAndWarnings,
            title: "Clear all errors and warnings"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "clear"
          }))), !hideSettings && /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Tree_default().VRule
          }), /* @__PURE__ */ external_react_namespaceObject.createElement(SettingsModalContextToggle, null))), numElements === 0 ? zeroElementsNotice : /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Tree_default().AutoSizerWrapper,
            onBlur: handleBlur,
            onFocus: handleFocus,
            onKeyPress: handleKeyPress,
            onMouseMove: handleMouseMove,
            onMouseLeave: handleMouseLeave,
            ref: focusTargetRef,
            tabIndex: 0
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(AutoSizer, null, ({
            height,
            width
          }) => /* @__PURE__ */ external_react_namespaceObject.createElement(FixedSizeList, {
            className: Tree_default().List,
            height,
            innerElementType: InnerElementType,
            itemCount: numElements,
            itemData,
            itemKey,
            itemSize: lineHeight,
            ref: listCallbackRef,
            width
          }, Element_Element)))));
        }
        function updateIndentationSizeVar(innerDiv, cachedChildWidths, indentationSizeRef, prevListWidthRef) {
          const list = innerDiv.parentElement;
          const listWidth = list.clientWidth;
          if (listWidth === 0) {
            return;
          }
          if (listWidth > prevListWidthRef.current) {
            indentationSizeRef.current = DEFAULT_INDENTATION_SIZE;
          }
          prevListWidthRef.current = listWidth;
          let maxIndentationSize = indentationSizeRef.current;
          for (const child of innerDiv.children) {
            const depth = parseInt(child.getAttribute("data-depth"), 10) || 0;
            let childWidth = 0;
            const cachedChildWidth = cachedChildWidths.get(child);
            if (cachedChildWidth != null) {
              childWidth = cachedChildWidth;
            } else {
              const {
                firstElementChild
              } = child;
              if (firstElementChild != null) {
                childWidth = firstElementChild.clientWidth;
                cachedChildWidths.set(child, childWidth);
              }
            }
            const remainingWidth = Math.max(0, listWidth - childWidth);
            maxIndentationSize = Math.min(maxIndentationSize, remainingWidth / depth);
          }
          indentationSizeRef.current = maxIndentationSize;
          list.style.setProperty("--indentation-size", `${maxIndentationSize}px`);
        }
        function InnerElementType({
          children,
          style
        }) {
          const {
            ownerID
          } = (0, external_react_namespaceObject.useContext)(TreeStateContext);
          const cachedChildWidths = (0, external_react_namespaceObject.useMemo)(() => /* @__PURE__ */ new WeakMap(), []);
          const indentationSizeRef = (0, external_react_namespaceObject.useRef)(DEFAULT_INDENTATION_SIZE);
          const prevListWidthRef = (0, external_react_namespaceObject.useRef)(0);
          const prevOwnerIDRef = (0, external_react_namespaceObject.useRef)(ownerID);
          const divRef = (0, external_react_namespaceObject.useRef)(null);
          if (ownerID !== prevOwnerIDRef.current) {
            prevOwnerIDRef.current = ownerID;
            indentationSizeRef.current = DEFAULT_INDENTATION_SIZE;
          }
          (0, external_react_namespaceObject.useEffect)(() => {
            if (divRef.current !== null) {
              updateIndentationSizeVar(divRef.current, cachedChildWidths, indentationSizeRef, prevListWidthRef);
            }
          });
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Tree_default().InnerElementType,
            ref: divRef,
            style
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(SelectedTreeHighlight_SelectedTreeHighlight, null), children);
        }
        function Loading() {
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Tree_default().Loading
          }, "Loading...");
        }
        var shared = __webpack_require__(5394);
        var shared_default = /* @__PURE__ */ __webpack_require__.n(shared);
        ;
        function UnsupportedBridgeOperationView({
          callStack,
          children,
          componentStack,
          errorMessage
        }) {
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().ErrorBoundary
          }, children, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().ErrorInfo
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().HeaderRow
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().ErrorHeader
          }, errorMessage || "Bridge protocol mismatch")), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().InfoBox
          }, "An incompatible version of ", /* @__PURE__ */ external_react_namespaceObject.createElement("code", null, "react-devtools-core"), " has been embedded in a renderer like React Native. To fix this, update the", " ", /* @__PURE__ */ external_react_namespaceObject.createElement("code", null, "react-devtools-core"), " package within the React Native application, or downgrade the ", /* @__PURE__ */ external_react_namespaceObject.createElement("code", null, "react-devtools"), " package you use to open the DevTools UI."), !!callStack && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().ErrorStack
          }, "The error was thrown ", callStack.trim())));
        }
        ;
        function ErrorView({
          callStack,
          children,
          componentStack,
          dismissError = null,
          errorMessage
        }) {
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().ErrorBoundary
          }, children, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().ErrorInfo
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().HeaderRow
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().ErrorHeader
          }, "Uncaught Error: ", errorMessage || ""), dismissError !== null && /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            className: shared_default().CloseButton,
            onClick: dismissError
          }, "Dismiss", /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            className: shared_default().CloseButtonIcon,
            type: "close"
          }))), !!callStack && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().ErrorStack
          }, "The error was thrown ", callStack.trim()), !!componentStack && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().ErrorStack
          }, "The error occurred ", componentStack.trim())));
        }
        var LoadingAnimation = __webpack_require__(8818);
        var LoadingAnimation_default = /* @__PURE__ */ __webpack_require__.n(LoadingAnimation);
        ;
        function LoadingAnimation_LoadingAnimation({
          className = ""
        }) {
          return /* @__PURE__ */ external_react_namespaceObject.createElement("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            className: `${LoadingAnimation_default().Icon} ${className}`,
            width: "24",
            height: "24",
            viewBox: "0 0 100 100"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("path", {
            d: "M0 0h100v100H0z",
            fill: "none"
          }), /* @__PURE__ */ external_react_namespaceObject.createElement("circle", {
            fill: "currentColor",
            stroke: "none",
            cx: "20",
            cy: "50",
            r: "10"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("animate", {
            attributeName: "opacity",
            dur: "1s",
            values: "0;1;0",
            repeatCount: "indefinite",
            begin: "0.1"
          })), /* @__PURE__ */ external_react_namespaceObject.createElement("circle", {
            fill: "currentColor",
            stroke: "none",
            cx: "50",
            cy: "50",
            r: "10"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("animate", {
            attributeName: "opacity",
            dur: "1s",
            values: "0;1;0",
            repeatCount: "indefinite",
            begin: "0.2"
          })), /* @__PURE__ */ external_react_namespaceObject.createElement("circle", {
            fill: "currentColor",
            stroke: "none",
            cx: "80",
            cy: "50",
            r: "10"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("animate", {
            attributeName: "opacity",
            dur: "1s",
            values: "0;1;0",
            repeatCount: "indefinite",
            begin: "0.3"
          })));
        }
        ;
        function SearchingGitHubIssues() {
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().GitHubLinkRow
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(LoadingAnimation_LoadingAnimation, {
            className: shared_default().LoadingIcon
          }), "Searching GitHub for reports of this error...");
        }
        ;
        const GITHUB_ISSUES_API = "https://api.github.com/search/issues";
        function searchGitHubIssuesURL(message) {
          message = message.replace(/"[0-9]+"/g, "");
          const filters = ["in:title", "is:issue", "is:open", "is:public", 'label:"Component: Developer Tools"', "repo:facebook/react"];
          return GITHUB_ISSUES_API + "?q=" + encodeURIComponent(message) + "%20" + filters.map(encodeURIComponent).join("%20");
        }
        async function searchGitHubIssues(message) {
          const response = await fetch(searchGitHubIssuesURL(message));
          const data = await response.json();
          if (data.items.length > 0) {
            const item = data.items[0];
            return {
              title: item.title,
              url: item.html_url
            };
          } else {
            return null;
          }
        }
        ;
        const API_TIMEOUT = 3e3;
        const cache_Pending = 0;
        const cache_Resolved = 1;
        const cache_Rejected = 2;
        function readRecord(record) {
          if (record.status === cache_Resolved) {
            return record;
          } else if (record.status === cache_Rejected) {
            return record;
          } else {
            throw record.value;
          }
        }
        function createMap() {
          return /* @__PURE__ */ new Map();
        }
        function getRecordMap() {
          return (0, external_react_namespaceObject.unstable_getCacheForType)(createMap);
        }
        function findGitHubIssue(errorMessage) {
          errorMessage = normalizeErrorMessage(errorMessage);
          const map2 = getRecordMap();
          let record = map2.get(errorMessage);
          if (!record) {
            const callbacks = /* @__PURE__ */ new Set();
            const wakeable = {
              then(callback) {
                callbacks.add(callback);
              },
              // Optional property used by Timeline:
              displayName: `Searching GitHub issues for error "${errorMessage}"`
            };
            const wake = () => {
              callbacks.forEach((callback) => callback());
              callbacks.clear();
            };
            const newRecord = record = {
              status: cache_Pending,
              value: wakeable
            };
            let didTimeout = false;
            searchGitHubIssues(errorMessage).then((maybeItem) => {
              if (didTimeout) {
                return;
              }
              if (maybeItem) {
                const resolvedRecord = newRecord;
                resolvedRecord.status = cache_Resolved;
                resolvedRecord.value = maybeItem;
              } else {
                const notFoundRecord = newRecord;
                notFoundRecord.status = cache_Rejected;
                notFoundRecord.value = null;
              }
              wake();
            }).catch((error) => {
              const thrownRecord = newRecord;
              thrownRecord.status = cache_Rejected;
              thrownRecord.value = null;
              wake();
            });
            setTimeout(() => {
              didTimeout = true;
              const timedoutRecord = newRecord;
              timedoutRecord.status = cache_Rejected;
              timedoutRecord.value = null;
              wake();
            }, API_TIMEOUT);
            map2.set(errorMessage, record);
          }
          const response = readRecord(record).value;
          return response;
        }
        function normalizeErrorMessage(errorMessage) {
          errorMessage = errorMessage.replace(/"[0-9]+"/, "");
          return errorMessage;
        }
        ;
        function UpdateExistingIssue({
          gitHubIssue
        }) {
          const {
            title,
            url
          } = gitHubIssue;
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().GitHubLinkRow
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(Icon_Icon, {
            className: shared_default().ReportIcon,
            type: "bug"
          }), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().UpdateExistingIssuePrompt
          }, "Update existing issue:"), /* @__PURE__ */ external_react_namespaceObject.createElement("a", {
            className: shared_default().ReportLink,
            href: url,
            rel: "noopener noreferrer",
            target: "_blank",
            title: "Report bug"
          }, title));
        }
        ;
        const LABELS = ["Component: Developer Tools", "Type: Bug", "Status: Unconfirmed"];
        const TEMPLATE = "devtools_bug_report.yml";
        function ReportNewIssue({
          callStack,
          componentStack,
          errorMessage
        }) {
          let bugURL = "https://github.com/facebook/react";
          if (!bugURL) {
            return null;
          }
          const gitHubAPISearch = errorMessage !== null ? searchGitHubIssuesURL(errorMessage) : "(none)";
          const title = `[DevTools Bug] ${errorMessage || ""}`;
          const parameters = [`template=${TEMPLATE}`, `labels=${encodeURIComponent(LABELS.join(","))}`, `title=${encodeURIComponent(title)}`, `automated_package=${"react-devtools-inline"}`, `automated_version=${"5.3.1-ccb20cb88b"}`, `automated_error_message=${encodeURIComponent(errorMessage || "")}`, `automated_call_stack=${encodeURIComponent(callStack || "")}`, `automated_component_stack=${encodeURIComponent(componentStack || "")}`, `automated_github_query_string=${gitHubAPISearch}`];
          bugURL += `/issues/new?${parameters.join("&")}`;
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().GitHubLinkRow
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(Icon_Icon, {
            className: shared_default().ReportIcon,
            type: "bug"
          }), /* @__PURE__ */ external_react_namespaceObject.createElement("a", {
            className: shared_default().ReportLink,
            href: bugURL,
            rel: "noopener noreferrer",
            target: "_blank",
            title: "Report bug"
          }, "Report this issue"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().ReproSteps
          }, "(Please include steps on how to reproduce it and the components used.)"));
        }
        ;
        function WorkplaceGroup() {
          if (!isInternalFacebookBuild) {
            return null;
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().WorkplaceGroupRow
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(Icon_Icon, {
            className: shared_default().ReportIcon,
            type: "facebook"
          }), /* @__PURE__ */ external_react_namespaceObject.createElement("a", {
            className: shared_default().ReportLink,
            href: REACT_DEVTOOLS_WORKPLACE_URL,
            rel: "noopener noreferrer",
            target: "_blank",
            title: "Report bug"
          }, "Report this on Workplace"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().FacebookOnly
          }, "(Facebook employees only.)"));
        }
        ;
        function SuspendingErrorView({
          callStack,
          componentStack,
          errorMessage
        }) {
          const maybeItem = errorMessage !== null ? findGitHubIssue(errorMessage) : null;
          let GitHubUI;
          if (maybeItem != null) {
            GitHubUI = /* @__PURE__ */ external_react_namespaceObject.createElement(UpdateExistingIssue, {
              gitHubIssue: maybeItem
            });
          } else {
            GitHubUI = /* @__PURE__ */ external_react_namespaceObject.createElement(ReportNewIssue, {
              callStack,
              componentStack,
              errorMessage
            });
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, GitHubUI, /* @__PURE__ */ external_react_namespaceObject.createElement(WorkplaceGroup, null));
        }
        ;
        function TimeoutView({
          callStack,
          children,
          componentStack,
          dismissError = null,
          errorMessage
        }) {
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().ErrorBoundary
          }, children, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().ErrorInfo
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().HeaderRow
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().TimeoutHeader
          }, errorMessage || "Timed out waiting"), /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            className: shared_default().CloseButton,
            onClick: dismissError
          }, "Retry", /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            className: shared_default().CloseButtonIcon,
            type: "close"
          }))), !!componentStack && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().TimeoutStack
          }, "The timeout occurred ", componentStack.trim())));
        }
        ;
        function CaughtErrorView({
          callStack,
          children,
          info,
          componentStack,
          errorMessage
        }) {
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().ErrorBoundary
          }, children, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().ErrorInfo
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().HeaderRow
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().ErrorHeader
          }, errorMessage)), !!info && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().InfoBox
          }, info), !!callStack && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: shared_default().ErrorStack
          }, "The error was thrown ", callStack.trim())));
        }
        ;
        class UserError extends Error {
          constructor(message) {
            super(message);
            if (Error.captureStackTrace) {
              Error.captureStackTrace(this, UserError);
            }
            this.name = "UserError";
          }
        }
        ;
        class UnknownHookError extends Error {
          constructor(message) {
            super(message);
            if (Error.captureStackTrace) {
              Error.captureStackTrace(this, UnknownHookError);
            }
            this.name = "UnknownHookError";
          }
        }
        ;
        function ErrorBoundary_defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        const InitialState = {
          callStack: null,
          canDismiss: false,
          componentStack: null,
          errorMessage: null,
          hasError: false,
          isUnsupportedBridgeOperationError: false,
          isTimeout: false,
          isUserError: false,
          isUnknownHookError: false
        };
        class ErrorBoundary extends external_react_namespaceObject.Component {
          constructor(...args) {
            super(...args);
            ErrorBoundary_defineProperty(this, "state", InitialState);
            ErrorBoundary_defineProperty(this, "_logError", (error, componentStack) => {
              logEvent({
                event_name: "error",
                error_message: error.message ?? null,
                error_stack: error.stack ?? null,
                error_component_stack: componentStack ?? null
              });
            });
            ErrorBoundary_defineProperty(this, "_dismissError", () => {
              const onBeforeDismissCallback = this.props.onBeforeDismissCallback;
              if (typeof onBeforeDismissCallback === "function") {
                onBeforeDismissCallback();
              }
              this.setState(InitialState);
            });
            ErrorBoundary_defineProperty(this, "_onStoreError", (error) => {
              if (!this.state.hasError) {
                this._logError(error, null);
                this.setState({
                  ...ErrorBoundary.getDerivedStateFromError(error),
                  canDismiss: true
                });
              }
            });
          }
          static getDerivedStateFromError(error) {
            const errorMessage = typeof error === "object" && error !== null && typeof error.message === "string" ? error.message : null;
            const isTimeout = error instanceof TimeoutError;
            const isUserError = error instanceof UserError;
            const isUnknownHookError = error instanceof UnknownHookError;
            const isUnsupportedBridgeOperationError = error instanceof UnsupportedBridgeOperationError;
            const callStack = typeof error === "object" && error !== null && typeof error.stack === "string" ? error.stack.split("\n").slice(1).join("\n") : null;
            return {
              callStack,
              errorMessage,
              hasError: true,
              isUnsupportedBridgeOperationError,
              isUnknownHookError,
              isTimeout,
              isUserError
            };
          }
          componentDidCatch(error, {
            componentStack
          }) {
            this._logError(error, componentStack);
            this.setState({
              componentStack
            });
          }
          componentDidMount() {
            const {
              store
            } = this.props;
            if (store != null) {
              store.addListener("error", this._onStoreError);
            }
          }
          componentWillUnmount() {
            const {
              store
            } = this.props;
            if (store != null) {
              store.removeListener("error", this._onStoreError);
            }
          }
          render() {
            const {
              canDismiss: canDismissProp,
              children
            } = this.props;
            const {
              callStack,
              canDismiss: canDismissState,
              componentStack,
              errorMessage,
              hasError,
              isUnsupportedBridgeOperationError,
              isTimeout,
              isUserError,
              isUnknownHookError
            } = this.state;
            if (hasError) {
              if (isTimeout) {
                return /* @__PURE__ */ external_react_namespaceObject.createElement(TimeoutView, {
                  callStack,
                  componentStack,
                  dismissError: canDismissProp || canDismissState ? this._dismissError : null,
                  errorMessage
                });
              } else if (isUnsupportedBridgeOperationError) {
                return /* @__PURE__ */ external_react_namespaceObject.createElement(UnsupportedBridgeOperationView, {
                  callStack,
                  componentStack,
                  errorMessage
                });
              } else if (isUserError) {
                return /* @__PURE__ */ external_react_namespaceObject.createElement(CaughtErrorView, {
                  callStack,
                  componentStack,
                  errorMessage: errorMessage || "Error occured in inspected element",
                  info: /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, "React DevTools encountered an error while trying to inspect the hooks. This is most likely caused by a developer error in the currently inspected element. Please see your console for logged error.")
                });
              } else if (isUnknownHookError) {
                return /* @__PURE__ */ external_react_namespaceObject.createElement(CaughtErrorView, {
                  callStack,
                  componentStack,
                  errorMessage: errorMessage || "Encountered an unknown hook",
                  info: /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, "React DevTools encountered an unknown hook. This is probably because the react-debug-tools package is out of date. To fix, upgrade the React DevTools to the most recent version.")
                });
              } else {
                return /* @__PURE__ */ external_react_namespaceObject.createElement(ErrorView, {
                  callStack,
                  componentStack,
                  dismissError: canDismissProp || canDismissState ? this._dismissError : null,
                  errorMessage
                }, /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Suspense, {
                  fallback: /* @__PURE__ */ external_react_namespaceObject.createElement(SearchingGitHubIssues, null)
                }, /* @__PURE__ */ external_react_namespaceObject.createElement(SuspendingErrorView, {
                  callStack,
                  componentStack,
                  errorMessage
                })));
              }
            }
            return children;
          }
        }
        ;
        const views_ErrorBoundary = ErrorBoundary;
        ;
        function ThemeProvider({
          children
        }) {
          const themeStyle = views_useThemeStyles();
          const style = external_react_namespaceObject.useMemo(() => {
            return {
              ...themeStyle,
              width: "100%",
              height: "100%"
            };
          }, [themeStyle]);
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            style
          }, children);
        }
        ;
        function portaledContent(Component) {
          return function PortaledContent({
            portalContainer,
            ...rest
          }) {
            const store = (0, external_react_namespaceObject.useContext)(StoreContext);
            let children = /* @__PURE__ */ external_react_namespaceObject.createElement(views_ErrorBoundary, {
              store
            }, /* @__PURE__ */ external_react_namespaceObject.createElement(Component, rest));
            if (portalContainer != null) {
              children = /* @__PURE__ */ external_react_namespaceObject.createElement(ThemeProvider, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
                "data-react-devtools-portal-root": true,
                style: {
                  width: "100vw",
                  height: "100vh"
                }
              }, children));
            }
            return portalContainer != null ? /* @__PURE__ */ (0, external_react_dom_namespaceObject.createPortal)(children, portalContainer) : children;
          };
        }
        ;
        const inspectedElementCache = new (lru_cache_default())({
          max: 25
        });
        function inspectedElementMutableSource_inspectElement(bridge2, element, path, rendererID, shouldListenToPauseEvents = false) {
          const {
            id: id2
          } = element;
          const forceFullData = !inspectedElementCache.has(id2);
          return inspectElement(bridge2, forceFullData, id2, path, rendererID, shouldListenToPauseEvents).then((data) => {
            const {
              type
            } = data;
            let inspectedElement;
            switch (type) {
              case "error": {
                const {
                  message,
                  stack,
                  errorType
                } = data;
                let error;
                if (errorType === "user") {
                  error = new UserError(message);
                } else if (errorType === "unknown-hook") {
                  error = new UnknownHookError(message);
                } else {
                  error = new Error(message);
                }
                error.stack = stack || error.stack;
                throw error;
              }
              case "no-change":
                inspectedElement = inspectedElementCache.get(id2);
                if (inspectedElement != null) {
                  return [inspectedElement, type];
                }
                throw Error(`Cached data for element "${id2}" not found`);
              case "not-found":
                inspectedElementCache.del(id2);
                throw Error(`Element "${id2}" not found`);
              case "full-data":
                const fullData = data;
                inspectedElement = convertInspectedElementBackendToFrontend(fullData.value);
                inspectedElementCache.set(id2, inspectedElement);
                return [inspectedElement, type];
              case "hydrated-path":
                const hydratedPathData = data;
                const {
                  value
                } = hydratedPathData;
                inspectedElement = inspectedElementCache.get(id2) || null;
                if (inspectedElement !== null) {
                  inspectedElement = {
                    ...inspectedElement
                  };
                  if (path != null) {
                    hydration_fillInPath(inspectedElement, value, path, hydrateHelper(value, path));
                  }
                  inspectedElementCache.set(id2, inspectedElement);
                  return [inspectedElement, type];
                }
                break;
              default:
                if (false) {
                }
                break;
            }
            throw Error(`Unable to inspect element with id "${id2}"`);
          });
        }
        function clearCacheForTests() {
          inspectedElementCache.reset();
        }
        ;
        const inspectedElementCache_Pending = 0;
        const inspectedElementCache_Resolved = 1;
        const inspectedElementCache_Rejected = 2;
        function inspectedElementCache_readRecord(record) {
          if (record.status === inspectedElementCache_Resolved) {
            return record;
          } else {
            throw record.value;
          }
        }
        function inspectedElementCache_createMap() {
          return /* @__PURE__ */ new WeakMap();
        }
        function inspectedElementCache_getRecordMap() {
          return (0, external_react_namespaceObject.unstable_getCacheForType)(inspectedElementCache_createMap);
        }
        function createCacheSeed(element, inspectedElement) {
          const newRecord = {
            status: inspectedElementCache_Resolved,
            value: inspectedElement
          };
          const map2 = inspectedElementCache_createMap();
          map2.set(element, newRecord);
          return [inspectedElementCache_createMap, map2];
        }
        function inspectedElementCache_inspectElement(element, path, store, bridge2) {
          const map2 = inspectedElementCache_getRecordMap();
          let record = map2.get(element);
          if (!record) {
            const callbacks = /* @__PURE__ */ new Set();
            const wakeable = {
              then(callback) {
                callbacks.add(callback);
              },
              // Optional property used by Timeline:
              displayName: `Inspecting ${element.displayName || "Unknown"}`
            };
            const wake = () => {
              callbacks.forEach((callback) => callback());
              callbacks.clear();
            };
            const newRecord = record = {
              status: inspectedElementCache_Pending,
              value: wakeable
            };
            const rendererID = store.getRendererIDForElement(element.id);
            if (rendererID == null) {
              const rejectedRecord = newRecord;
              rejectedRecord.status = inspectedElementCache_Rejected;
              rejectedRecord.value = new Error(`Could not inspect element with id "${element.id}". No renderer found.`);
              map2.set(element, record);
              return null;
            }
            inspectedElementMutableSource_inspectElement(bridge2, element, path, rendererID).then(([inspectedElement]) => {
              const resolvedRecord = newRecord;
              resolvedRecord.status = inspectedElementCache_Resolved;
              resolvedRecord.value = inspectedElement;
              wake();
            }, (error) => {
              console.error(error);
              const rejectedRecord = newRecord;
              rejectedRecord.status = inspectedElementCache_Rejected;
              rejectedRecord.value = error;
              wake();
            });
            map2.set(element, record);
          }
          const response = inspectedElementCache_readRecord(record).value;
          return response;
        }
        function checkForUpdate({
          bridge: bridge2,
          element,
          refresh,
          store
        }) {
          const {
            id: id2
          } = element;
          const rendererID = store.getRendererIDForElement(id2);
          if (rendererID == null) {
            return;
          }
          return inspectedElementMutableSource_inspectElement(bridge2, element, null, rendererID, true).then(([inspectedElement, responseType]) => {
            if (responseType === "full-data") {
              (0, external_react_namespaceObject.startTransition)(() => {
                const [key, value] = createCacheSeed(element, inspectedElement);
                refresh(key, value);
              });
            }
          });
        }
        function createPromiseWhichResolvesInOneSecond() {
          return new Promise((resolve) => setTimeout(resolve, 1e3));
        }
        function startElementUpdatesPolling({
          bridge: bridge2,
          element,
          refresh,
          store
        }) {
          let status = "idle";
          function abort() {
            status = "aborted";
          }
          function resume() {
            if (status === "running" || status === "aborted") {
              return;
            }
            status = "idle";
            poll();
          }
          function pause() {
            if (status === "paused" || status === "aborted") {
              return;
            }
            status = "paused";
          }
          function poll() {
            status = "running";
            return Promise.allSettled([checkForUpdate({
              bridge: bridge2,
              element,
              refresh,
              store
            }), createPromiseWhichResolvesInOneSecond()]).then(([{
              status: updateStatus,
              reason
            }]) => {
              if (updateStatus === "rejected" && status !== "aborted") {
                if (reason instanceof ElementPollingCancellationError) {
                  return;
                }
                console.error(reason);
              }
            }).finally(() => {
              const shouldContinuePolling = status !== "aborted" && status !== "paused";
              status = "idle";
              if (shouldContinuePolling) {
                return poll();
              }
            });
          }
          poll();
          return {
            abort,
            resume,
            pause
          };
        }
        function clearCacheBecauseOfError(refresh) {
          (0, external_react_namespaceObject.startTransition)(() => {
            const map2 = inspectedElementCache_createMap();
            refresh(inspectedElementCache_createMap, map2);
          });
        }
        var InspectedElementErrorBoundary = __webpack_require__(9548);
        var InspectedElementErrorBoundary_default = /* @__PURE__ */ __webpack_require__.n(InspectedElementErrorBoundary);
        ;
        function InspectedElementErrorBoundaryWrapper({
          children
        }) {
          const {
            selectedElementID
          } = (0, external_react_namespaceObject.useContext)(TreeStateContext);
          const refresh = (0, external_react_namespaceObject.unstable_useCacheRefresh)();
          const handleDsmiss = (0, external_react_namespaceObject.useCallback)(() => {
            clearCacheBecauseOfError(refresh);
          }, [refresh]);
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementErrorBoundary_default().Wrapper
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(views_ErrorBoundary, {
            key: selectedElementID,
            canDismiss: true,
            onBeforeDismissCallback: handleDsmiss
          }, children));
        }
        var ModalDialog = __webpack_require__(7826);
        var ModalDialog_default = /* @__PURE__ */ __webpack_require__.n(ModalDialog);
        ;
        const ModalDialogContext = /* @__PURE__ */ (0, external_react_namespaceObject.createContext)(null);
        ModalDialogContext.displayName = "ModalDialogContext";
        function ModalDialog_dialogReducer(state2, action) {
          switch (action.type) {
            case "HIDE":
              return {
                dialogs: state2.dialogs.filter((dialog) => dialog.id !== action.id)
              };
            case "SHOW":
              return {
                dialogs: [...state2.dialogs, {
                  canBeDismissed: action.canBeDismissed !== false,
                  content: action.content,
                  id: action.id,
                  title: action.title || null
                }]
              };
            default:
              throw new Error(`Invalid action "${action.type}"`);
          }
        }
        function ModalDialogContextController({
          children
        }) {
          const [state2, dispatch] = (0, external_react_namespaceObject.useReducer)(ModalDialog_dialogReducer, {
            dialogs: []
          });
          const value = (0, external_react_namespaceObject.useMemo)(() => ({
            dialogs: state2.dialogs,
            dispatch
          }), [state2, dispatch]);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(ModalDialogContext.Provider, {
            value
          }, children);
        }
        function ModalDialog_ModalDialog(_) {
          const {
            dialogs,
            dispatch
          } = (0, external_react_namespaceObject.useContext)(ModalDialogContext);
          if (dialogs.length === 0) {
            return null;
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: ModalDialog_default().Background
          }, dialogs.map((dialog) => /* @__PURE__ */ external_react_namespaceObject.createElement(ModalDialogImpl, {
            key: dialog.id,
            canBeDismissed: dialog.canBeDismissed,
            content: dialog.content,
            dispatch,
            id: dialog.id,
            title: dialog.title
          })));
        }
        function ModalDialogImpl({
          canBeDismissed,
          content,
          dispatch,
          id: id2,
          title
        }) {
          const dismissModal = (0, external_react_namespaceObject.useCallback)(() => {
            if (canBeDismissed) {
              dispatch({
                type: "HIDE",
                id: id2
              });
            }
          }, [canBeDismissed, dispatch]);
          const dialogRef = (0, external_react_namespaceObject.useRef)(null);
          useModalDismissSignal(dialogRef, dismissModal, false);
          const handleDialogClick = (event) => {
            event.stopPropagation();
          };
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            ref: dialogRef,
            className: ModalDialog_default().Dialog,
            onClick: handleDialogClick
          }, title !== null && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: ModalDialog_default().Title
          }, title), content, canBeDismissed && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: ModalDialog_default().Buttons
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            autoFocus: true,
            className: ModalDialog_default().Button,
            onClick: dismissModal
          }, "Okay")));
        }
        ;
        function CannotSuspendWarningMessage() {
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const areSuspenseElementsHidden = !!store.componentFilters.find((filter) => filter.type === ComponentFilterElementType && filter.value === ElementTypeSuspense && filter.isEnabled);
          if (areSuspenseElementsHidden) {
            return /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, "Suspended state cannot be toggled while Suspense components are hidden. Disable the filter and try again.");
          } else {
            return /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, "The selected element is not within a Suspense container. Suspending it would cause an error.");
          }
        }
        var InspectedElementBadges = __webpack_require__(4352);
        var InspectedElementBadges_default = /* @__PURE__ */ __webpack_require__.n(InspectedElementBadges);
        ;
        function InspectedElementBadges_InspectedElementBadges({
          hocDisplayNames,
          compiledWithForget
        }) {
          if (!compiledWithForget && (hocDisplayNames == null || hocDisplayNames.length === 0)) {
            return null;
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementBadges_default().Root
          }, compiledWithForget && /* @__PURE__ */ external_react_namespaceObject.createElement(ForgetBadge_ForgetBadge, {
            indexable: false
          }), hocDisplayNames !== null && hocDisplayNames.map((hocDisplayName) => /* @__PURE__ */ external_react_namespaceObject.createElement(Badge_Badge, {
            key: hocDisplayName
          }, hocDisplayName)));
        }
        var AutoSizeInput = __webpack_require__(6747);
        var AutoSizeInput_default = /* @__PURE__ */ __webpack_require__.n(AutoSizeInput);
        ;
        function AutoSizeInput_extends() {
          AutoSizeInput_extends = Object.assign || function(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return AutoSizeInput_extends.apply(this, arguments);
        }
        function AutoSizeInput_AutoSizeInput({
          className,
          onFocus,
          placeholder = "",
          testName,
          value,
          ...rest
        }) {
          const onFocusWrapper = (event) => {
            const input = event.target;
            if (input !== null) {
              input.selectionStart = 0;
              input.selectionEnd = value.length;
            }
            if (typeof onFocus === "function") {
              onFocus(event);
            }
          };
          const isEmpty = value === "" || value === '""';
          return (
            // $FlowFixMe[cannot-spread-inexact] unsafe rest spread
            /* @__PURE__ */ external_react_namespaceObject.createElement("input", AutoSizeInput_extends({
              className: [AutoSizeInput_default().Input, className].join(" "),
              "data-testname": testName,
              onFocus: onFocusWrapper,
              placeholder,
              style: {
                width: `calc(${isEmpty ? placeholder.length : value.length}ch + 1px)`
              },
              value: isEmpty ? "" : value
            }, rest))
          );
        }
        var EditableName = __webpack_require__(3004);
        var EditableName_default = /* @__PURE__ */ __webpack_require__.n(EditableName);
        ;
        function EditableName_EditableName({
          allowEmpty = false,
          allowWhiteSpace = false,
          autoFocus = false,
          className = "",
          initialValue = "",
          overrideName,
          path,
          type
        }) {
          const [editableName, setEditableName] = (0, external_react_namespaceObject.useState)(initialValue);
          const [isValid, setIsValid] = (0, external_react_namespaceObject.useState)(false);
          const handleChange = (0, external_react_namespaceObject.useCallback)(({
            target
          }) => {
            let value = target.value;
            if (!allowWhiteSpace) {
              value = value.trim();
            }
            if (allowEmpty || value !== "") {
              setIsValid(true);
            } else {
              setIsValid(false);
            }
            setEditableName(value);
          }, [overrideName]);
          const handleKeyDown = (0, external_react_namespaceObject.useCallback)((event) => {
            event.stopPropagation();
            switch (event.key) {
              case "Enter":
              case "Tab":
                if (isValid) {
                  const basePath = path.slice(0, path.length - 1);
                  overrideName([...basePath, initialValue], [...basePath, editableName]);
                }
                break;
              case "Escape":
                setEditableName(initialValue);
                break;
              default:
                break;
            }
          }, [editableName, setEditableName, isValid, initialValue, overrideName]);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(AutoSizeInput_AutoSizeInput, {
            autoFocus,
            className: [EditableName_default().Input, className].join(" "),
            onChange: handleChange,
            onKeyDown: handleKeyDown,
            placeholder: "new entry",
            testName: "EditableName",
            type: "text",
            value: editableName
          });
        }
        var EditableValue = __webpack_require__(8490);
        var EditableValue_default = /* @__PURE__ */ __webpack_require__.n(EditableValue);
        ;
        function EditableValue_EditableValue({
          className = "",
          overrideValue,
          path,
          value
        }) {
          const [state2, dispatch] = useEditableValue(value);
          const {
            editableValue,
            hasPendingChanges,
            isValid,
            parsedValue
          } = state2;
          const reset = () => dispatch({
            type: "RESET",
            externalValue: value
          });
          const handleChange = ({
            target
          }) => dispatch({
            type: "UPDATE",
            editableValue: target.value,
            externalValue: value
          });
          const handleCheckBoxToggle = ({
            target
          }) => {
            dispatch({
              type: "UPDATE",
              editableValue: target.checked,
              externalValue: value
            });
            overrideValue(path, target.checked);
          };
          const handleKeyDown = (event) => {
            event.stopPropagation();
            switch (event.key) {
              case "Enter":
                applyChanges();
                break;
              case "Escape":
                reset();
                break;
              default:
                break;
            }
          };
          const applyChanges = () => {
            if (isValid && hasPendingChanges) {
              overrideValue(path, parsedValue);
            }
          };
          let placeholder = "";
          if (editableValue === void 0) {
            placeholder = "(undefined)";
          } else {
            placeholder = "Enter valid JSON";
          }
          const isBool = parsedValue === true || parsedValue === false;
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("input", {
            autoComplete: "new-password",
            className: `${isValid ? EditableValue_default().Input : EditableValue_default().Invalid} ${className}`,
            "data-testname": "EditableValue",
            onBlur: applyChanges,
            onChange: handleChange,
            onKeyDown: handleKeyDown,
            placeholder,
            type: "text",
            value: editableValue
          }), isBool && /* @__PURE__ */ external_react_namespaceObject.createElement("input", {
            className: EditableValue_default().Checkbox,
            checked: parsedValue,
            type: "checkbox",
            onChange: handleCheckBoxToggle
          }));
        }
        ;
        function parseHookPathForEdit(path) {
          let index = 0;
          for (let i2 = 0; i2 < path.length; i2++) {
            if (path[i2] === "value") {
              index = i2 + 1;
              break;
            }
          }
          return path.slice(index);
        }
        var NewArrayValue = __webpack_require__(6974);
        var NewArrayValue_default = /* @__PURE__ */ __webpack_require__.n(NewArrayValue);
        ;
        function NewArrayValue_NewArrayValue({
          bridge: bridge2,
          depth,
          hidden,
          hookID,
          index,
          inspectedElement,
          path,
          store,
          type
        }) {
          const [key, setKey] = (0, external_react_namespaceObject.useState)(0);
          const [isInvalid, setIsInvalid] = (0, external_react_namespaceObject.useState)(false);
          const overrideName = (oldPath, newPath) => {
            const value = newPath[newPath.length - 1];
            let parsedValue;
            let newIsInvalid = true;
            try {
              parsedValue = smartParse(value);
              newIsInvalid = false;
            } catch (error) {
            }
            if (isInvalid !== newIsInvalid) {
              setIsInvalid(newIsInvalid);
            }
            if (!newIsInvalid) {
              setKey(key + 1);
              const {
                id: id2
              } = inspectedElement;
              const rendererID = store.getRendererIDForElement(id2);
              if (rendererID !== null) {
                let basePath = path;
                if (hookID != null) {
                  basePath = parseHookPathForEdit(basePath);
                }
                bridge2.send("overrideValueAtPath", {
                  type,
                  hookID,
                  id: id2,
                  path: [...basePath, index],
                  rendererID,
                  value: parsedValue
                });
              }
            }
          };
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            key,
            hidden,
            style: {
              paddingLeft: `${(depth - 1) * 0.75}rem`
            }
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: NewArrayValue_default().NewArrayValue
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(EditableName_EditableName, {
            allowWhiteSpace: true,
            autoFocus: key > 0,
            className: [NewArrayValue_default().EditableName, isInvalid && NewArrayValue_default().Invalid].join(" "),
            initialValue: "",
            overrideName,
            path
          })));
        }
        var NewKeyValue = __webpack_require__(8313);
        var NewKeyValue_default = /* @__PURE__ */ __webpack_require__.n(NewKeyValue);
        ;
        function NewKeyValue_NewKeyValue({
          bridge: bridge2,
          depth,
          hidden,
          hookID,
          inspectedElement,
          path,
          store,
          type
        }) {
          const [newPropKey, setNewPropKey] = (0, external_react_namespaceObject.useState)(0);
          const [newPropName, setNewPropName] = (0, external_react_namespaceObject.useState)("");
          const overrideNewEntryName = (oldPath, newPath) => {
            setNewPropName(newPath[newPath.length - 1]);
          };
          const overrideNewEntryValue = (newPath, value) => {
            if (!newPropName) {
              return;
            }
            setNewPropName("");
            setNewPropKey(newPropKey + 1);
            const {
              id: id2
            } = inspectedElement;
            const rendererID = store.getRendererIDForElement(id2);
            if (rendererID !== null) {
              let basePath = newPath;
              if (hookID != null) {
                basePath = parseHookPathForEdit(basePath);
              }
              bridge2.send("overrideValueAtPath", {
                type,
                hookID,
                id: id2,
                path: basePath,
                rendererID,
                value
              });
            }
          };
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            "data-testname": "NewKeyValue",
            key: newPropKey,
            hidden,
            style: {
              paddingLeft: `${(depth - 1) * 0.75}rem`
            }
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: NewKeyValue_default().NewKeyValue
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(EditableName_EditableName, {
            autoFocus: newPropKey > 0,
            className: NewKeyValue_default().EditableName,
            overrideName: overrideNewEntryName,
            path: []
          }), ":\xA0", /* @__PURE__ */ external_react_namespaceObject.createElement(EditableValue_EditableValue, {
            className: NewKeyValue_default().EditableValue,
            overrideValue: overrideNewEntryValue,
            path: [...path, newPropName],
            value: ""
          })));
        }
        var Components_ExpandCollapseToggle = __webpack_require__(1774);
        var ExpandCollapseToggle_default = /* @__PURE__ */ __webpack_require__.n(Components_ExpandCollapseToggle);
        ;
        function ExpandCollapseToggle_ExpandCollapseToggle({
          disabled,
          isOpen,
          setIsOpen
        }) {
          return /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            className: ExpandCollapseToggle_default().ExpandCollapseToggle,
            disabled,
            onClick: () => setIsOpen((prevIsOpen) => !prevIsOpen),
            title: `${isOpen ? "Collapse" : "Expand"} prop value`
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: isOpen ? "expanded" : "collapsed"
          }));
        }
        var KeyValue = __webpack_require__(5458);
        var KeyValue_default = /* @__PURE__ */ __webpack_require__.n(KeyValue);
        ;
        const supportsUserTiming = typeof performance !== "undefined" && // $FlowFixMe[method-unbinding]
        typeof performance.mark === "function" && // $FlowFixMe[method-unbinding]
        typeof performance.clearMarks === "function";
        const supportsPerformanceNow = (
          // $FlowFixMe[method-unbinding]
          typeof performance !== "undefined" && typeof performance.now === "function"
        );
        function mark(markName) {
          if (supportsUserTiming) {
            performance.mark(markName + "-start");
          }
        }
        function measure(markName) {
          if (supportsUserTiming) {
            performance.mark(markName + "-end");
            performance.measure(markName, markName + "-start", markName + "-end");
            performance.clearMarks(markName + "-start");
            performance.clearMarks(markName + "-end");
          }
        }
        function PerformanceLoggingUtils_now() {
          if (supportsPerformanceNow) {
            return performance.now();
          }
          return Date.now();
        }
        async function withAsyncPerfMeasurements(markName, callback, onComplete) {
          const start = PerformanceLoggingUtils_now();
          if (__PERFORMANCE_PROFILE__) {
            mark(markName);
          }
          const result = await callback();
          if (__PERFORMANCE_PROFILE__) {
            measure(markName);
          }
          if (onComplete != null) {
            const duration = PerformanceLoggingUtils_now() - start;
            onComplete(duration);
          }
          return result;
        }
        function withSyncPerfMeasurements(markName, callback, onComplete) {
          const start = PerformanceLoggingUtils_now();
          if (constants_PERFORMANCE_PROFILE_) {
            mark(markName);
          }
          const result = callback();
          if (constants_PERFORMANCE_PROFILE_) {
            measure(markName);
          }
          if (onComplete != null) {
            const duration = PerformanceLoggingUtils_now() - start;
            onComplete(duration);
          }
          return result;
        }
        function withCallbackPerfMeasurements(markName, callback, onComplete) {
          const start = PerformanceLoggingUtils_now();
          if (constants_PERFORMANCE_PROFILE_) {
            mark(markName);
          }
          const done = () => {
            if (constants_PERFORMANCE_PROFILE_) {
              measure(markName);
            }
            if (onComplete != null) {
              const duration = PerformanceLoggingUtils_now() - start;
              onComplete(duration);
            }
          };
          return callback(done);
        }
        ;
        const TIMEOUT = 3e4;
        const hookNamesCache_Pending = 0;
        const hookNamesCache_Resolved = 1;
        const hookNamesCache_Rejected = 2;
        function hookNamesCache_readRecord(record) {
          if (record.status === hookNamesCache_Resolved) {
            return record;
          } else if (record.status === hookNamesCache_Rejected) {
            return record;
          } else {
            throw record.value;
          }
        }
        let map = /* @__PURE__ */ new WeakMap();
        function hasAlreadyLoadedHookNames(element) {
          const record = map.get(element);
          return record != null && record.status === hookNamesCache_Resolved;
        }
        function loadHookNames(element, hooksTree, loadHookNamesFunction, fetchFileWithCaching) {
          let record = map.get(element);
          if (__DEBUG__) {
            console.groupCollapsed("loadHookNames() record:");
            console.log(record);
            console.groupEnd();
          }
          if (!record) {
            const callbacks = /* @__PURE__ */ new Set();
            const wakeable = {
              then(callback) {
                callbacks.add(callback);
              },
              // Optional property used by Timeline:
              displayName: `Loading hook names for ${element.displayName || "Unknown"}`
            };
            let timeoutID;
            let didTimeout = false;
            let status = "unknown";
            let resolvedHookNames = null;
            const wake = () => {
              if (timeoutID) {
                clearTimeout(timeoutID);
                timeoutID = null;
              }
              callbacks.forEach((callback) => callback());
              callbacks.clear();
            };
            const handleLoadComplete = (durationMs) => {
              logEvent({
                event_name: "load-hook-names",
                event_status: status,
                duration_ms: durationMs,
                inspected_element_display_name: element.displayName,
                inspected_element_number_of_hooks: resolvedHookNames?.size ?? null
              });
            };
            const newRecord = record = {
              status: hookNamesCache_Pending,
              value: wakeable
            };
            withCallbackPerfMeasurements("loadHookNames", (done) => {
              loadHookNamesFunction(hooksTree, fetchFileWithCaching).then(function onSuccess(hookNames) {
                if (didTimeout) {
                  return;
                }
                if (__DEBUG__) {
                  console.log("[hookNamesCache] onSuccess() hookNames:", hookNames);
                }
                if (hookNames) {
                  const resolvedRecord = newRecord;
                  resolvedRecord.status = hookNamesCache_Resolved;
                  resolvedRecord.value = hookNames;
                } else {
                  const notFoundRecord = newRecord;
                  notFoundRecord.status = hookNamesCache_Rejected;
                  notFoundRecord.value = null;
                }
                status = "success";
                resolvedHookNames = hookNames;
                done();
                wake();
              }, function onError(error) {
                if (didTimeout) {
                  return;
                }
                if (__DEBUG__) {
                  console.log("[hookNamesCache] onError()");
                }
                console.error(error);
                const thrownRecord = newRecord;
                thrownRecord.status = hookNamesCache_Rejected;
                thrownRecord.value = null;
                status = "error";
                done();
                wake();
              });
              timeoutID = setTimeout(function onTimeout() {
                if (__DEBUG__) {
                  console.log("[hookNamesCache] onTimeout()");
                }
                timeoutID = null;
                didTimeout = true;
                const timedoutRecord = newRecord;
                timedoutRecord.status = hookNamesCache_Rejected;
                timedoutRecord.value = null;
                status = "timeout";
                done();
                wake();
              }, TIMEOUT);
            }, handleLoadComplete);
            map.set(element, record);
          }
          const response = hookNamesCache_readRecord(record).value;
          return response;
        }
        function getHookSourceLocationKey({
          fileName,
          lineNumber,
          columnNumber
        }) {
          if (fileName == null || lineNumber == null || columnNumber == null) {
            throw Error("Hook source code location not found.");
          }
          return `${fileName}:${lineNumber}:${columnNumber}`;
        }
        function clearHookNamesCache() {
          map = /* @__PURE__ */ new WeakMap();
        }
        ;
        const dynamicImportCache_TIMEOUT = 3e4;
        const dynamicImportCache_Pending = 0;
        const dynamicImportCache_Resolved = 1;
        const dynamicImportCache_Rejected = 2;
        const moduleLoaderFunctionToModuleMap = /* @__PURE__ */ new Map();
        function dynamicImportCache_readRecord(record) {
          if (record.status === dynamicImportCache_Resolved) {
            return record;
          } else if (record.status === dynamicImportCache_Rejected) {
            return record;
          } else {
            throw record.value;
          }
        }
        function loadModule(moduleLoaderFunction) {
          let record = moduleLoaderFunctionToModuleMap.get(moduleLoaderFunction);
          if (__DEBUG__) {
            console.log(`[dynamicImportCache] loadModule("${moduleLoaderFunction.name}")`);
          }
          if (!record) {
            const callbacks = /* @__PURE__ */ new Set();
            const wakeable = {
              then(callback) {
                callbacks.add(callback);
              },
              // Optional property used by Timeline:
              displayName: `Loading module "${moduleLoaderFunction.name}"`
            };
            const wake = () => {
              if (timeoutID) {
                clearTimeout(timeoutID);
                timeoutID = null;
              }
              callbacks.forEach((callback) => callback());
              callbacks.clear();
            };
            const newRecord = record = {
              status: dynamicImportCache_Pending,
              value: wakeable
            };
            let didTimeout = false;
            moduleLoaderFunction().then((module2) => {
              if (__DEBUG__) {
                console.log(`[dynamicImportCache] loadModule("${moduleLoaderFunction.name}") then()`);
              }
              if (didTimeout) {
                return;
              }
              const resolvedRecord = newRecord;
              resolvedRecord.status = dynamicImportCache_Resolved;
              resolvedRecord.value = module2;
              wake();
            }, (error) => {
              if (__DEBUG__) {
                console.log(`[dynamicImportCache] loadModule("${moduleLoaderFunction.name}") catch()`);
              }
              if (didTimeout) {
                return;
              }
              console.log(error);
              const thrownRecord = newRecord;
              thrownRecord.status = dynamicImportCache_Rejected;
              thrownRecord.value = null;
              wake();
            });
            let timeoutID = setTimeout(function onTimeout() {
              if (__DEBUG__) {
                console.log(`[dynamicImportCache] loadModule("${moduleLoaderFunction.name}") onTimeout()`);
              }
              timeoutID = null;
              didTimeout = true;
              const timedoutRecord = newRecord;
              timedoutRecord.status = dynamicImportCache_Rejected;
              timedoutRecord.value = null;
              wake();
            }, dynamicImportCache_TIMEOUT);
            moduleLoaderFunctionToModuleMap.set(moduleLoaderFunction, record);
          }
          const response = dynamicImportCache_readRecord(record).value;
          return response;
        }
        ;
        const FetchFileWithCachingContext = /* @__PURE__ */ (0, external_react_namespaceObject.createContext)(null);
        FetchFileWithCachingContext.displayName = "FetchFileWithCachingContext";
        const Components_FetchFileWithCachingContext = FetchFileWithCachingContext;
        ;
        const HookNamesModuleLoaderContext = /* @__PURE__ */ (0, external_react_namespaceObject.createContext)(null);
        HookNamesModuleLoaderContext.displayName = "HookNamesModuleLoaderContext";
        const Components_HookNamesModuleLoaderContext = HookNamesModuleLoaderContext;
        ;
        const InspectedElementContext = /* @__PURE__ */ (0, external_react_namespaceObject.createContext)(null);
        function InspectedElementContextController({
          children
        }) {
          const {
            selectedElementID
          } = (0, external_react_namespaceObject.useContext)(TreeStateContext);
          const fetchFileWithCaching = (0, external_react_namespaceObject.useContext)(Components_FetchFileWithCachingContext);
          const bridge2 = (0, external_react_namespaceObject.useContext)(BridgeContext);
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const {
            parseHookNames: parseHookNamesByDefault
          } = (0, external_react_namespaceObject.useContext)(SettingsContext);
          const hookNamesModuleLoader = (0, external_react_namespaceObject.useContext)(Components_HookNamesModuleLoaderContext);
          const refresh = (0, external_react_namespaceObject.unstable_useCacheRefresh)();
          const [state2, setState] = (0, external_react_namespaceObject.useState)({
            element: null,
            path: null
          });
          const element = selectedElementID !== null ? store.getElementByID(selectedElementID) : null;
          const alreadyLoadedHookNames = element != null && hasAlreadyLoadedHookNames(element);
          const [parseHookNames, setParseHookNames] = (0, external_react_namespaceObject.useState)(parseHookNamesByDefault || alreadyLoadedHookNames);
          const [bridgeIsAlive, setBridgeIsAliveStatus] = (0, external_react_namespaceObject.useState)(true);
          const elementHasChanged = element !== null && element !== state2.element;
          if (elementHasChanged) {
            setState({
              element,
              path: null
            });
            setParseHookNames(parseHookNamesByDefault || alreadyLoadedHookNames);
          }
          const purgeCachedMetadataRef = (0, external_react_namespaceObject.useRef)(null);
          let hookNames = null;
          let inspectedElement = null;
          if (!elementHasChanged && element !== null) {
            inspectedElement = inspectedElementCache_inspectElement(element, state2.path, store, bridge2);
            if (typeof hookNamesModuleLoader === "function") {
              if (parseHookNames || alreadyLoadedHookNames) {
                const hookNamesModule = loadModule(hookNamesModuleLoader);
                if (hookNamesModule !== null) {
                  const {
                    parseHookNames: loadHookNamesFunction,
                    purgeCachedMetadata
                  } = hookNamesModule;
                  purgeCachedMetadataRef.current = purgeCachedMetadata;
                  if (inspectedElement !== null && inspectedElement.hooks !== null && loadHookNamesFunction !== null) {
                    hookNames = loadHookNames(element, inspectedElement.hooks, loadHookNamesFunction, fetchFileWithCaching);
                  }
                }
              }
            }
          }
          const toggleParseHookNames = (0, external_react_namespaceObject.useCallback)(() => {
            (0, external_react_namespaceObject.startTransition)(() => {
              setParseHookNames((value2) => !value2);
              refresh();
            });
          }, [setParseHookNames]);
          const inspectPaths = (0, external_react_namespaceObject.useCallback)((path) => {
            (0, external_react_namespaceObject.startTransition)(() => {
              setState({
                element: state2.element,
                path
              });
              refresh();
            });
          }, [setState, state2]);
          (0, external_react_namespaceObject.useEffect)(() => {
            const purgeCachedMetadata = purgeCachedMetadataRef.current;
            if (typeof purgeCachedMetadata === "function") {
              const fastRefreshScheduled = () => {
                (0, external_react_namespaceObject.startTransition)(() => {
                  clearHookNamesCache();
                  purgeCachedMetadata();
                  refresh();
                });
              };
              bridge2.addListener("fastRefreshScheduled", fastRefreshScheduled);
              return () => bridge2.removeListener("fastRefreshScheduled", fastRefreshScheduled);
            }
          }, [bridge2]);
          (0, external_react_namespaceObject.useEffect)(() => {
            if (state2.path !== null) {
              setState({
                element: state2.element,
                path: null
              });
            }
          }, [state2]);
          (0, external_react_namespaceObject.useEffect)(() => {
            setBridgeIsAliveStatus(true);
            const listener = () => setBridgeIsAliveStatus(false);
            bridge2.addListener("shutdown", listener);
            return () => bridge2.removeListener("shutdown", listener);
          }, [bridge2]);
          (0, external_react_namespaceObject.useEffect)(() => {
            if (element !== null && bridgeIsAlive) {
              const {
                abort,
                pause,
                resume
              } = startElementUpdatesPolling({
                bridge: bridge2,
                element,
                refresh,
                store
              });
              bridge2.addListener("resumeElementPolling", resume);
              bridge2.addListener("pauseElementPolling", pause);
              return () => {
                bridge2.removeListener("resumeElementPolling", resume);
                bridge2.removeListener("pauseElementPolling", pause);
                abort();
              };
            }
          }, [
            element,
            hookNames,
            // Reset this timer any time the element we're inspecting gets a new response.
            // No sense to ping right away after e.g. inspecting/hydrating a path.
            inspectedElement,
            state2,
            bridgeIsAlive
          ]);
          const value = (0, external_react_namespaceObject.useMemo)(() => ({
            hookNames,
            inspectedElement,
            inspectPaths,
            parseHookNames,
            toggleParseHookNames
          }), [hookNames, inspectedElement, inspectPaths, parseHookNames, toggleParseHookNames]);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(InspectedElementContext.Provider, {
            value
          }, children);
        }
        ;
        const PROTOCOLS_SUPPORTED_AS_LINKS_IN_KEY_VALUE = ["file:///", "http://", "https://", "vscode://"];
        var ContextMenuItem = __webpack_require__(3072);
        var ContextMenuItem_default = /* @__PURE__ */ __webpack_require__.n(ContextMenuItem);
        ;
        function ContextMenuItem_ContextMenuItem({
          children,
          onClick,
          hide
        }) {
          const handleClick = () => {
            onClick();
            hide();
          };
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: ContextMenuItem_default().ContextMenuItem,
            onClick: handleClick,
            onTouchEnd: handleClick
          }, children);
        }
        var ContextMenu = __webpack_require__(4850);
        var ContextMenu_default = /* @__PURE__ */ __webpack_require__.n(ContextMenu);
        ;
        function repositionToFit(element, x, y) {
          const ownerWindow = element.ownerDocument.defaultView;
          if (y + element.offsetHeight >= ownerWindow.innerHeight) {
            if (y - element.offsetHeight > 0) {
              element.style.top = `${y - element.offsetHeight}px`;
            } else {
              element.style.top = "0px";
            }
          } else {
            element.style.top = `${y}px`;
          }
          if (x + element.offsetWidth >= ownerWindow.innerWidth) {
            if (x - element.offsetWidth > 0) {
              element.style.left = `${x - element.offsetWidth}px`;
            } else {
              element.style.left = "0px";
            }
          } else {
            element.style.left = `${x}px`;
          }
        }
        function ContextMenu_ContextMenu({
          anchorElementRef,
          position,
          items,
          hide,
          ref = /* @__PURE__ */ (0, external_react_namespaceObject.createRef)()
        }) {
          const anchor = anchorElementRef.current;
          if (anchor == null) {
            throw new Error("Attempted to open a context menu for an element, which is not mounted");
          }
          const ownerDocument = anchor.ownerDocument;
          const portalContainer = ownerDocument.querySelector("[data-react-devtools-portal-root]");
          (0, external_react_namespaceObject.useLayoutEffect)(() => {
            const menu = ref.current;
            function hideUnlessContains(event) {
              if (!menu.contains(event.target)) {
                hide();
              }
            }
            ownerDocument.addEventListener("mousedown", hideUnlessContains);
            ownerDocument.addEventListener("touchstart", hideUnlessContains);
            ownerDocument.addEventListener("keydown", hideUnlessContains);
            const ownerWindow = ownerDocument.defaultView;
            ownerWindow.addEventListener("resize", hide);
            repositionToFit(menu, position.x, position.y);
            return () => {
              ownerDocument.removeEventListener("mousedown", hideUnlessContains);
              ownerDocument.removeEventListener("touchstart", hideUnlessContains);
              ownerDocument.removeEventListener("keydown", hideUnlessContains);
              ownerWindow.removeEventListener("resize", hide);
            };
          }, []);
          if (portalContainer == null || items.length === 0) {
            return null;
          }
          return /* @__PURE__ */ (0, external_react_dom_namespaceObject.createPortal)(/* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: ContextMenu_default().ContextMenu,
            ref
          }, items.map(({
            onClick,
            content
          }, index) => /* @__PURE__ */ external_react_namespaceObject.createElement(ContextMenuItem_ContextMenuItem, {
            key: index,
            onClick,
            hide
          }, content))), portalContainer);
        }
        ;
        function useContextMenu(anchorElementRef) {
          const [shouldShow, setShouldShow] = (0, external_react_namespaceObject.useState)(false);
          const [position, setPosition] = external_react_namespaceObject.useState(null);
          const hide = (0, external_react_namespaceObject.useCallback)(() => {
            setShouldShow(false);
            setPosition(null);
          }, []);
          (0, external_react_namespaceObject.useEffect)(() => {
            const anchor = anchorElementRef.current;
            if (anchor == null)
              return;
            function handleAnchorContextMenu(e) {
              e.preventDefault();
              e.stopPropagation();
              const {
                pageX,
                pageY
              } = e;
              const ownerDocument = anchor?.ownerDocument;
              const portalContainer = ownerDocument?.querySelector("[data-react-devtools-portal-root]");
              if (portalContainer == null) {
                throw new Error("DevTools tooltip root node not found: can't display the context menu");
              }
              const {
                top: containerTop,
                left: containerLeft
              } = portalContainer.getBoundingClientRect();
              setShouldShow(true);
              setPosition({
                x: pageX - containerLeft,
                y: pageY - containerTop
              });
            }
            anchor.addEventListener("contextmenu", handleAnchorContextMenu);
            return () => {
              anchor.removeEventListener("contextmenu", handleAnchorContextMenu);
            };
          }, [anchorElementRef]);
          return {
            shouldShow,
            position,
            hide
          };
        }
        ;
        function ContextMenuContainer({
          anchorElementRef,
          items,
          closedMenuStub = null,
          ref
        }) {
          const {
            shouldShow,
            position,
            hide
          } = useContextMenu(anchorElementRef);
          (0, external_react_namespaceObject.useImperativeHandle)(ref, () => ({
            isShown() {
              return shouldShow;
            },
            hide
          }), [shouldShow, hide]);
          if (!shouldShow) {
            return closedMenuStub;
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement(ContextMenu_ContextMenu, {
            anchorElementRef,
            position,
            hide,
            items,
            ref
          });
        }
        var KeyValueContextMenuContainer = __webpack_require__(8289);
        var KeyValueContextMenuContainer_default = /* @__PURE__ */ __webpack_require__.n(KeyValueContextMenuContainer);
        ;
        function KeyValueContextMenuContainer_KeyValueContextMenuContainer({
          children,
          anchorElementRef,
          store,
          attributeSourceCanBeInspected,
          bridge: bridge2,
          id: id2,
          path,
          canBeCopiedToClipboard
        }) {
          const {
            isEnabledForInspectedElement: isContextMenuEnabledForInspectedElement,
            viewAttributeSourceFunction
          } = (0, external_react_namespaceObject.useContext)(ContextMenuContext);
          const menuItems = external_react_namespaceObject.useMemo(() => {
            const items = [{
              onClick: () => {
                const rendererID = store.getRendererIDForElement(id2);
                if (rendererID !== null) {
                  storeAsGlobal({
                    bridge: bridge2,
                    id: id2,
                    path,
                    rendererID
                  });
                }
              },
              content: /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
                className: KeyValueContextMenuContainer_default().ContextMenuItemContent
              }, /* @__PURE__ */ external_react_namespaceObject.createElement(Icon_Icon, {
                type: "store-as-global-variable"
              }), /* @__PURE__ */ external_react_namespaceObject.createElement("label", null, "Store as global variable"))
            }];
            if (canBeCopiedToClipboard) {
              items.unshift({
                onClick: () => {
                  const rendererID = store.getRendererIDForElement(id2);
                  if (rendererID !== null) {
                    copyInspectedElementPath({
                      bridge: bridge2,
                      id: id2,
                      path,
                      rendererID
                    });
                  }
                },
                content: /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
                  className: KeyValueContextMenuContainer_default().ContextMenuItemContent
                }, /* @__PURE__ */ external_react_namespaceObject.createElement(Icon_Icon, {
                  type: "copy"
                }), /* @__PURE__ */ external_react_namespaceObject.createElement("label", null, "Copy value to clipboard"))
              });
            }
            if (viewAttributeSourceFunction != null && attributeSourceCanBeInspected) {
              items.push({
                onClick: () => viewAttributeSourceFunction(id2, path),
                content: /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
                  className: KeyValueContextMenuContainer_default().ContextMenuItemContent
                }, /* @__PURE__ */ external_react_namespaceObject.createElement(Icon_Icon, {
                  type: "code"
                }), /* @__PURE__ */ external_react_namespaceObject.createElement("label", null, "Go to definition"))
              });
            }
            return items;
          }, [store, viewAttributeSourceFunction, attributeSourceCanBeInspected, canBeCopiedToClipboard, bridge2, id2, path]);
          if (!isContextMenuEnabledForInspectedElement) {
            return children;
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, children, /* @__PURE__ */ external_react_namespaceObject.createElement(ContextMenuContainer, {
            anchorElementRef,
            items: menuItems
          }));
        }
        ;
        const KeyValue_hasOwnProperty = Object.prototype.hasOwnProperty;
        function KeyValue_KeyValue({
          alphaSort,
          bridge: bridge2,
          canDeletePaths,
          canEditValues,
          canRenamePaths,
          canRenamePathsAtDepth,
          depth,
          element,
          inspectedElement,
          isDirectChildOfAnArray,
          hidden,
          hookID,
          hookName,
          name,
          path,
          pathRoot,
          store,
          value
        }) {
          const {
            readOnly: readOnlyGlobalFlag
          } = (0, external_react_namespaceObject.useContext)(OptionsContext);
          canDeletePaths = !readOnlyGlobalFlag && canDeletePaths;
          canEditValues = !readOnlyGlobalFlag && canEditValues;
          canRenamePaths = !readOnlyGlobalFlag && canRenamePaths;
          const {
            id: id2
          } = inspectedElement;
          const fullPath = (0, external_react_namespaceObject.useMemo)(() => [pathRoot, ...path], [pathRoot, path]);
          const [isOpen, setIsOpen] = (0, external_react_namespaceObject.useState)(false);
          const contextMenuTriggerRef = (0, external_react_namespaceObject.useRef)(null);
          const {
            inspectPaths
          } = (0, external_react_namespaceObject.useContext)(InspectedElementContext);
          let isInspectable = false;
          let isReadOnlyBasedOnMetadata = false;
          if (value !== null && typeof value === "object") {
            isInspectable = value[meta.inspectable] && value[meta.size] !== 0;
            isReadOnlyBasedOnMetadata = value[meta.readonly];
          }
          const [isInspectPathsPending, startInspectPathsTransition] = (0, external_react_namespaceObject.useTransition)();
          const toggleIsOpen = () => {
            if (isOpen) {
              setIsOpen(false);
            } else {
              setIsOpen(true);
              if (isInspectable) {
                startInspectPathsTransition(() => {
                  inspectPaths([pathRoot, ...path]);
                });
              }
            }
          };
          const dataType = typeof value;
          const isSimpleType = dataType === "number" || dataType === "string" || dataType === "boolean" || value == null;
          const pathType = value !== null && typeof value === "object" && KeyValue_hasOwnProperty.call(value, meta.type) ? value[meta.type] : typeof value;
          const pathIsFunction = pathType === "function";
          const style = {
            paddingLeft: `${(depth - 1) * 0.75}rem`
          };
          const overrideValue = (newPath, newValue) => {
            if (hookID != null) {
              newPath = parseHookPathForEdit(newPath);
            }
            const rendererID = store.getRendererIDForElement(id2);
            if (rendererID !== null) {
              bridge2.send("overrideValueAtPath", {
                hookID,
                id: id2,
                path: newPath,
                rendererID,
                type: pathRoot,
                value: newValue
              });
            }
          };
          const deletePath = (pathToDelete) => {
            if (hookID != null) {
              pathToDelete = parseHookPathForEdit(pathToDelete);
            }
            const rendererID = store.getRendererIDForElement(id2);
            if (rendererID !== null) {
              bridge2.send("deletePath", {
                hookID,
                id: id2,
                path: pathToDelete,
                rendererID,
                type: pathRoot
              });
            }
          };
          const renamePath = (oldPath, newPath) => {
            if (newPath[newPath.length - 1] === "") {
              if (canDeletePaths) {
                deletePath(oldPath);
              }
            } else {
              if (hookID != null) {
                oldPath = parseHookPathForEdit(oldPath);
                newPath = parseHookPathForEdit(newPath);
              }
              const rendererID = store.getRendererIDForElement(id2);
              if (rendererID !== null) {
                bridge2.send("renamePath", {
                  hookID,
                  id: id2,
                  newPath,
                  oldPath,
                  rendererID,
                  type: pathRoot
                });
              }
            }
          };
          let canRenameTheCurrentPath = canRenamePaths;
          if (canRenameTheCurrentPath && typeof canRenamePathsAtDepth === "function") {
            canRenameTheCurrentPath = canRenamePathsAtDepth(depth);
          }
          let renderedName;
          if (isDirectChildOfAnArray) {
            if (canDeletePaths) {
              renderedName = /* @__PURE__ */ external_react_namespaceObject.createElement(DeleteToggle, {
                name,
                deletePath,
                path
              });
            } else {
              renderedName = /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
                className: KeyValue_default().Name
              }, name, !!hookName && /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
                className: KeyValue_default().HookName
              }, "(", hookName, ")"));
            }
          } else if (canRenameTheCurrentPath) {
            renderedName = /* @__PURE__ */ external_react_namespaceObject.createElement(EditableName_EditableName, {
              allowEmpty: canDeletePaths,
              className: KeyValue_default().EditableName,
              initialValue: name,
              overrideName: renamePath,
              path
            });
          } else {
            renderedName = /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
              className: KeyValue_default().Name,
              "data-testname": "NonEditableName"
            }, name, !!hookName && /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
              className: KeyValue_default().HookName
            }, "(", hookName, ")"));
          }
          let children = null;
          if (isSimpleType) {
            let displayValue = value;
            if (dataType === "string") {
              displayValue = `"${value}"`;
            } else if (dataType === "boolean") {
              displayValue = value ? "true" : "false";
            } else if (value === null) {
              displayValue = "null";
            } else if (value === void 0) {
              displayValue = "undefined";
            } else if (isNaN(value)) {
              displayValue = "NaN";
            }
            let shouldDisplayValueAsLink = false;
            if (dataType === "string" && PROTOCOLS_SUPPORTED_AS_LINKS_IN_KEY_VALUE.some((protocolPrefix) => value.startsWith(protocolPrefix))) {
              shouldDisplayValueAsLink = true;
            }
            children = /* @__PURE__ */ external_react_namespaceObject.createElement(KeyValueContextMenuContainer_KeyValueContextMenuContainer, {
              key: "root",
              anchorElementRef: contextMenuTriggerRef,
              attributeSourceCanBeInspected: pathIsFunction,
              canBeCopiedToClipboard: !pathIsFunction,
              store,
              bridge: bridge2,
              id: id2,
              path: fullPath
            }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              "data-testname": "KeyValue",
              className: KeyValue_default().Item,
              hidden,
              ref: contextMenuTriggerRef,
              style
            }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              className: KeyValue_default().ExpandCollapseToggleSpacer
            }), renderedName, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              className: KeyValue_default().AfterName
            }, ":"), canEditValues ? /* @__PURE__ */ external_react_namespaceObject.createElement(EditableValue_EditableValue, {
              overrideValue,
              path,
              value
            }) : shouldDisplayValueAsLink ? /* @__PURE__ */ external_react_namespaceObject.createElement("a", {
              className: KeyValue_default().Link,
              href: value,
              target: "_blank",
              rel: "noopener noreferrer"
            }, displayValue) : /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
              className: KeyValue_default().Value,
              "data-testname": "NonEditableValue"
            }, displayValue)));
          } else if (KeyValue_hasOwnProperty.call(value, meta.type) && !KeyValue_hasOwnProperty.call(value, meta.unserializable)) {
            children = /* @__PURE__ */ external_react_namespaceObject.createElement(KeyValueContextMenuContainer_KeyValueContextMenuContainer, {
              key: "root",
              anchorElementRef: contextMenuTriggerRef,
              attributeSourceCanBeInspected: pathIsFunction,
              canBeCopiedToClipboard: !pathIsFunction,
              store,
              bridge: bridge2,
              id: id2,
              path: fullPath
            }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              "data-testname": "KeyValue",
              className: KeyValue_default().Item,
              hidden,
              ref: contextMenuTriggerRef,
              style
            }, isInspectable ? /* @__PURE__ */ external_react_namespaceObject.createElement(ExpandCollapseToggle_ExpandCollapseToggle, {
              isOpen,
              setIsOpen: toggleIsOpen
            }) : /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              className: KeyValue_default().ExpandCollapseToggleSpacer
            }), renderedName, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              className: KeyValue_default().AfterName
            }, ":"), /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
              className: KeyValue_default().Value,
              onClick: isInspectable ? toggleIsOpen : void 0
            }, getMetaValueLabel(value))));
            if (isInspectPathsPending) {
              children = /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, children, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
                className: KeyValue_default().Item,
                style
              }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
                className: KeyValue_default().ExpandCollapseToggleSpacer
              }), /* @__PURE__ */ external_react_namespaceObject.createElement(LoadingAnimation_LoadingAnimation, null)));
            }
          } else {
            if (src_isArray(value)) {
              const hasChildren = value.length > 0 || canEditValues;
              const displayName = getMetaValueLabel(value);
              children = value.map((innerValue, index) => /* @__PURE__ */ external_react_namespaceObject.createElement(KeyValue_KeyValue, {
                key: index,
                alphaSort,
                bridge: bridge2,
                canDeletePaths: canDeletePaths && !isReadOnlyBasedOnMetadata,
                canEditValues: canEditValues && !isReadOnlyBasedOnMetadata,
                canRenamePaths: canRenamePaths && !isReadOnlyBasedOnMetadata,
                canRenamePathsAtDepth,
                depth: depth + 1,
                element,
                hookID,
                inspectedElement,
                isDirectChildOfAnArray: true,
                hidden: hidden || !isOpen,
                name: index,
                path: path.concat(index),
                pathRoot,
                store,
                value: value[index]
              }));
              if (canEditValues && !isReadOnlyBasedOnMetadata) {
                children.push(/* @__PURE__ */ external_react_namespaceObject.createElement(NewArrayValue_NewArrayValue, {
                  key: "NewKeyValue",
                  bridge: bridge2,
                  depth: depth + 1,
                  hidden: hidden || !isOpen,
                  hookID,
                  index: value.length,
                  element,
                  inspectedElement,
                  path,
                  store,
                  type: pathRoot
                }));
              }
              children.unshift(/* @__PURE__ */ external_react_namespaceObject.createElement(KeyValueContextMenuContainer_KeyValueContextMenuContainer, {
                key: `${depth}-root`,
                anchorElementRef: contextMenuTriggerRef,
                attributeSourceCanBeInspected: pathIsFunction,
                canBeCopiedToClipboard: !pathIsFunction,
                store,
                bridge: bridge2,
                id: id2,
                path: fullPath
              }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
                "data-testname": "KeyValue",
                className: KeyValue_default().Item,
                hidden,
                ref: contextMenuTriggerRef,
                style
              }, hasChildren ? /* @__PURE__ */ external_react_namespaceObject.createElement(ExpandCollapseToggle_ExpandCollapseToggle, {
                isOpen,
                setIsOpen
              }) : /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
                className: KeyValue_default().ExpandCollapseToggleSpacer
              }), renderedName, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
                className: KeyValue_default().AfterName
              }, ":"), /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
                className: KeyValue_default().Value,
                onClick: hasChildren ? toggleIsOpen : void 0
              }, displayName))));
            } else {
              const entries2 = Object.entries(value);
              if (alphaSort) {
                entries2.sort(alphaSortEntries);
              }
              const hasChildren = entries2.length > 0 || canEditValues;
              const displayName = getMetaValueLabel(value);
              children = entries2.map(([key, keyValue]) => /* @__PURE__ */ external_react_namespaceObject.createElement(KeyValue_KeyValue, {
                key,
                alphaSort,
                bridge: bridge2,
                canDeletePaths: canDeletePaths && !isReadOnlyBasedOnMetadata,
                canEditValues: canEditValues && !isReadOnlyBasedOnMetadata,
                canRenamePaths: canRenamePaths && !isReadOnlyBasedOnMetadata,
                canRenamePathsAtDepth,
                depth: depth + 1,
                element,
                hookID,
                inspectedElement,
                hidden: hidden || !isOpen,
                name: key,
                path: path.concat(key),
                pathRoot,
                store,
                value: keyValue
              }));
              if (canEditValues && !isReadOnlyBasedOnMetadata) {
                children.push(/* @__PURE__ */ external_react_namespaceObject.createElement(NewKeyValue_NewKeyValue, {
                  key: "NewKeyValue",
                  bridge: bridge2,
                  depth: depth + 1,
                  element,
                  hidden: hidden || !isOpen,
                  hookID,
                  inspectedElement,
                  path,
                  store,
                  type: pathRoot
                }));
              }
              children.unshift(/* @__PURE__ */ external_react_namespaceObject.createElement(KeyValueContextMenuContainer_KeyValueContextMenuContainer, {
                key: `${depth}-root`,
                anchorElementRef: contextMenuTriggerRef,
                attributeSourceCanBeInspected: pathIsFunction,
                canBeCopiedToClipboard: !pathIsFunction,
                store,
                bridge: bridge2,
                id: id2,
                path: fullPath
              }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
                "data-testname": "KeyValue",
                className: KeyValue_default().Item,
                hidden,
                ref: contextMenuTriggerRef,
                style
              }, hasChildren ? /* @__PURE__ */ external_react_namespaceObject.createElement(ExpandCollapseToggle_ExpandCollapseToggle, {
                isOpen,
                setIsOpen
              }) : /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
                className: KeyValue_default().ExpandCollapseToggleSpacer
              }), renderedName, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
                className: KeyValue_default().AfterName
              }, ":"), /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
                className: KeyValue_default().Value,
                onClick: hasChildren ? toggleIsOpen : void 0
              }, displayName))));
            }
          }
          return children;
        }
        function DeleteToggle({
          deletePath,
          name,
          path
        }) {
          const handleClick = (event) => {
            event.stopPropagation();
            deletePath(path);
          };
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            className: KeyValue_default().DeleteArrayItemButton,
            onClick: handleClick,
            title: "Delete entry"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "delete"
          })), /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: KeyValue_default().Name
          }, name));
        }
        var InspectedElementSharedStyles = __webpack_require__(7074);
        var InspectedElementSharedStyles_default = /* @__PURE__ */ __webpack_require__.n(InspectedElementSharedStyles);
        ;
        function InspectedElementContextTree({
          bridge: bridge2,
          element,
          inspectedElement,
          store
        }) {
          const {
            hasLegacyContext,
            context,
            type
          } = inspectedElement;
          const isReadOnly = type !== ElementTypeClass && type !== ElementTypeFunction;
          const entries2 = context != null ? Object.entries(context) : null;
          if (entries2 !== null) {
            entries2.sort(alphaSortEntries);
          }
          const isEmpty = entries2 === null || entries2.length === 0;
          const handleCopy = () => (0, clipboard.copy)(serializeDataForCopy(context));
          const canRenamePathsAtDepth = (depth) => depth > 1;
          if (isEmpty) {
            return null;
          } else {
            return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              className: InspectedElementSharedStyles_default().InspectedElementTree
            }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              className: InspectedElementSharedStyles_default().HeaderRow
            }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              className: InspectedElementSharedStyles_default().Header
            }, hasLegacyContext ? "legacy context" : "context"), !isEmpty && /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
              onClick: handleCopy,
              title: "Copy to clipboard"
            }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
              type: "copy"
            }))), isEmpty && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              className: InspectedElementSharedStyles_default().Empty
            }, "None"), !isEmpty && entries2.map(([name, value]) => /* @__PURE__ */ external_react_namespaceObject.createElement(KeyValue_KeyValue, {
              key: name,
              alphaSort: true,
              bridge: bridge2,
              canDeletePaths: !isReadOnly,
              canEditValues: !isReadOnly,
              canRenamePaths: !isReadOnly,
              canRenamePathsAtDepth,
              depth: 1,
              element,
              hidden: false,
              inspectedElement,
              name,
              path: [name],
              pathRoot: "context",
              store,
              type: "context",
              value
            })));
          }
        }
        var InspectedElementErrorsAndWarningsTree = __webpack_require__(1443);
        var InspectedElementErrorsAndWarningsTree_default = /* @__PURE__ */ __webpack_require__.n(InspectedElementErrorsAndWarningsTree);
        ;
        function InspectedElementErrorsAndWarningsTree_InspectedElementErrorsAndWarningsTree({
          bridge: bridge2,
          inspectedElement,
          store
        }) {
          const refresh = (0, external_react_namespaceObject.unstable_useCacheRefresh)();
          const [isErrorsTransitionPending, startClearErrorsTransition] = (0, external_react_namespaceObject.useTransition)();
          const clearErrorsForInspectedElement = () => {
            const {
              id: id2
            } = inspectedElement;
            const rendererID = store.getRendererIDForElement(id2);
            if (rendererID !== null) {
              startClearErrorsTransition(() => {
                clearErrorsForElement({
                  bridge: bridge2,
                  id: id2,
                  rendererID
                });
                refresh();
              });
            }
          };
          const [isWarningsTransitionPending, startClearWarningsTransition] = (0, external_react_namespaceObject.useTransition)();
          const clearWarningsForInspectedElement = () => {
            const {
              id: id2
            } = inspectedElement;
            const rendererID = store.getRendererIDForElement(id2);
            if (rendererID !== null) {
              startClearWarningsTransition(() => {
                clearWarningsForElement({
                  bridge: bridge2,
                  id: id2,
                  rendererID
                });
                refresh();
              });
            }
          };
          const {
            showInlineWarningsAndErrors
          } = (0, external_react_namespaceObject.useContext)(SettingsContext);
          if (!showInlineWarningsAndErrors) {
            return null;
          }
          const {
            errors,
            warnings
          } = inspectedElement;
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, errors.length > 0 && /* @__PURE__ */ external_react_namespaceObject.createElement(InspectedElementErrorsAndWarningsTree_Tree, {
            badgeClassName: InspectedElementErrorsAndWarningsTree_default().ErrorBadge,
            bridge: bridge2,
            className: InspectedElementErrorsAndWarningsTree_default().ErrorTree,
            clearMessages: clearErrorsForInspectedElement,
            entries: errors,
            isTransitionPending: isErrorsTransitionPending,
            label: "errors",
            messageClassName: InspectedElementErrorsAndWarningsTree_default().Error
          }), warnings.length > 0 && /* @__PURE__ */ external_react_namespaceObject.createElement(InspectedElementErrorsAndWarningsTree_Tree, {
            badgeClassName: InspectedElementErrorsAndWarningsTree_default().WarningBadge,
            bridge: bridge2,
            className: InspectedElementErrorsAndWarningsTree_default().WarningTree,
            clearMessages: clearWarningsForInspectedElement,
            entries: warnings,
            isTransitionPending: isWarningsTransitionPending,
            label: "warnings",
            messageClassName: InspectedElementErrorsAndWarningsTree_default().Warning
          }));
        }
        function InspectedElementErrorsAndWarningsTree_Tree({
          badgeClassName,
          actions,
          className,
          clearMessages,
          entries: entries2,
          isTransitionPending,
          label,
          messageClassName
        }) {
          if (entries2.length === 0) {
            return null;
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: `${InspectedElementSharedStyles_default().InspectedElementTree} ${className}`
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: `${InspectedElementSharedStyles_default().HeaderRow} ${InspectedElementErrorsAndWarningsTree_default().HeaderRow}`
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementSharedStyles_default().Header
          }, label), /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            disabled: isTransitionPending,
            onClick: clearMessages,
            title: `Clear all ${label} for this component`
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "clear"
          }))), entries2.map(([message, count], index) => /* @__PURE__ */ external_react_namespaceObject.createElement(ErrorOrWarningView, {
            key: `${label}-${index}`,
            badgeClassName,
            className: messageClassName,
            count,
            message
          })));
        }
        function ErrorOrWarningView({
          className,
          badgeClassName,
          count,
          message
        }) {
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className
          }, count > 1 && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: badgeClassName
          }, count), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementErrorsAndWarningsTree_default().Message,
            title: message
          }, message));
        }
        var InspectedElementHooksTree = __webpack_require__(8562);
        var InspectedElementHooksTree_default = /* @__PURE__ */ __webpack_require__.n(InspectedElementHooksTree);
        ;
        function InspectedElementHooksTree_InspectedElementHooksTree({
          bridge: bridge2,
          element,
          hookNames,
          inspectedElement,
          parseHookNames,
          store,
          toggleParseHookNames
        }) {
          const {
            hooks,
            id: id2
          } = inspectedElement;
          const [parseHookNamesOptimistic, setParseHookNamesOptimistic] = (0, external_react_namespaceObject.useState)(parseHookNames);
          const handleChange = () => {
            setParseHookNamesOptimistic(!parseHookNames);
            toggleParseHookNames();
          };
          const hookNamesModuleLoader = (0, external_react_namespaceObject.useContext)(Components_HookNamesModuleLoaderContext);
          const hookParsingFailed = parseHookNames && hookNames === null;
          let toggleTitle;
          if (hookParsingFailed) {
            toggleTitle = "Hook parsing failed";
          } else if (parseHookNames) {
            toggleTitle = "Parsing hook names ...";
          } else {
            toggleTitle = "Parse hook names (may be slow)";
          }
          const handleCopy = () => (0, clipboard.copy)(serializeHooksForCopy(hooks));
          if (hooks === null) {
            return null;
          } else {
            return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              className: InspectedElementHooksTree_default().HooksTreeView,
              "data-testname": "InspectedElementHooksTree"
            }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              className: InspectedElementHooksTree_default().HeaderRow
            }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              className: InspectedElementHooksTree_default().Header
            }, "hooks"), typeof hookNamesModuleLoader === "function" && (!parseHookNames || hookParsingFailed) && /* @__PURE__ */ external_react_namespaceObject.createElement(Toggle_Toggle, {
              className: hookParsingFailed ? InspectedElementHooksTree_default().ToggleError : null,
              isChecked: parseHookNamesOptimistic,
              isDisabled: parseHookNamesOptimistic || hookParsingFailed,
              onChange: handleChange,
              testName: "LoadHookNamesButton",
              title: toggleTitle
            }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
              type: "parse-hook-names"
            })), /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
              onClick: handleCopy,
              title: "Copy to clipboard"
            }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
              type: "copy"
            }))), /* @__PURE__ */ external_react_namespaceObject.createElement(InnerHooksTreeView, {
              hookNames,
              hooks,
              id: id2,
              element,
              inspectedElement,
              path: []
            }));
          }
        }
        function InnerHooksTreeView({
          element,
          hookNames,
          hooks,
          id: id2,
          inspectedElement,
          path
        }) {
          return hooks.map((hook, index) => /* @__PURE__ */ external_react_namespaceObject.createElement(HookView, {
            key: index,
            element,
            hook: hooks[index],
            hookNames,
            id: id2,
            inspectedElement,
            path: path.concat([index])
          }));
        }
        function HookView({
          element,
          hook,
          hookNames,
          id: id2,
          inspectedElement,
          path
        }) {
          const {
            canEditHooks,
            canEditHooksAndDeletePaths,
            canEditHooksAndRenamePaths
          } = inspectedElement;
          const {
            id: hookID,
            isStateEditable,
            subHooks,
            value
          } = hook;
          const isReadOnly = hookID == null || !isStateEditable;
          const canDeletePaths = !isReadOnly && canEditHooksAndDeletePaths;
          const canEditValues = !isReadOnly && canEditHooks;
          const canRenamePaths = !isReadOnly && canEditHooksAndRenamePaths;
          const bridge2 = (0, external_react_namespaceObject.useContext)(BridgeContext);
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const [isOpen, setIsOpen] = (0, external_react_namespaceObject.useState)(false);
          const toggleIsOpen = (0, external_react_namespaceObject.useCallback)(() => setIsOpen((prevIsOpen) => !prevIsOpen), []);
          if (hook.hasOwnProperty(meta.inspected)) {
            if (false) {
            }
            return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              className: InspectedElementHooksTree_default().Hook
            }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              className: InspectedElementHooksTree_default().NameValueRow
            }, /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
              className: InspectedElementHooksTree_default().TruncationIndicator
            }, "...")));
          }
          const canRenamePathsAtDepth = (depth) => isStateEditable && depth > 1;
          const isCustomHook = subHooks.length > 0;
          let name = hook.name;
          if (hookID !== null) {
            name = /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
              className: InspectedElementHooksTree_default().PrimitiveHookNumber
            }, hookID + 1), name);
          }
          const type = typeof value;
          let displayValue;
          let isComplexDisplayValue = false;
          const hookSource = hook.hookSource;
          const hookName = hookNames != null && hookSource != null ? hookNames.get(getHookSourceLocationKey(hookSource)) : null;
          const hookDisplayName = hookName ? /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, name, !!hookName && /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: InspectedElementHooksTree_default().HookName
          }, "(", hookName, ")")) : name;
          if (type === "string") {
            displayValue = `"${value}"`;
          } else if (type === "boolean") {
            displayValue = value ? "true" : "false";
          } else if (type === "number") {
            displayValue = value;
          } else if (value === null) {
            displayValue = "null";
          } else if (value === void 0) {
            displayValue = null;
          } else if (src_isArray(value)) {
            isComplexDisplayValue = true;
            displayValue = "Array";
          } else if (type === "object") {
            isComplexDisplayValue = true;
            displayValue = "Object";
          }
          if (isCustomHook) {
            const subHooksView = src_isArray(subHooks) ? /* @__PURE__ */ external_react_namespaceObject.createElement(InnerHooksTreeView, {
              element,
              hooks: subHooks,
              hookNames,
              id: id2,
              inspectedElement,
              path: path.concat(["subHooks"])
            }) : /* @__PURE__ */ external_react_namespaceObject.createElement(KeyValue_KeyValue, {
              alphaSort: false,
              bridge: bridge2,
              canDeletePaths,
              canEditValues,
              canRenamePaths,
              canRenamePathsAtDepth,
              depth: 1,
              element,
              hookID,
              hookName,
              inspectedElement,
              name: "subHooks",
              path: path.concat(["subHooks"]),
              store,
              type: "hooks",
              value: subHooks
            });
            if (isComplexDisplayValue) {
              return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
                className: InspectedElementHooksTree_default().Hook
              }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
                className: InspectedElementHooksTree_default().NameValueRow
              }, /* @__PURE__ */ external_react_namespaceObject.createElement(ExpandCollapseToggle_ExpandCollapseToggle, {
                isOpen,
                setIsOpen
              }), /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
                onClick: toggleIsOpen,
                className: name !== "" ? InspectedElementHooksTree_default().Name : InspectedElementHooksTree_default().NameAnonymous
              }, hookDisplayName || "Anonymous"), /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
                className: InspectedElementHooksTree_default().Value,
                onClick: toggleIsOpen
              }, isOpen || getMetaValueLabel(value))), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
                className: InspectedElementHooksTree_default().Children,
                hidden: !isOpen
              }, /* @__PURE__ */ external_react_namespaceObject.createElement(KeyValue_KeyValue, {
                alphaSort: false,
                bridge: bridge2,
                canDeletePaths,
                canEditValues,
                canRenamePaths,
                canRenamePathsAtDepth,
                depth: 1,
                element,
                hookID,
                hookName,
                inspectedElement,
                name: "DebugValue",
                path: path.concat(["value"]),
                pathRoot: "hooks",
                store,
                value
              }), subHooksView));
            } else {
              return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
                className: InspectedElementHooksTree_default().Hook
              }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
                className: InspectedElementHooksTree_default().NameValueRow
              }, /* @__PURE__ */ external_react_namespaceObject.createElement(ExpandCollapseToggle_ExpandCollapseToggle, {
                isOpen,
                setIsOpen
              }), /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
                onClick: toggleIsOpen,
                className: name !== "" ? InspectedElementHooksTree_default().Name : InspectedElementHooksTree_default().NameAnonymous
              }, hookDisplayName || "Anonymous"), " ", /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
                className: InspectedElementHooksTree_default().Value,
                onClick: toggleIsOpen
              }, displayValue)), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
                className: InspectedElementHooksTree_default().Children,
                hidden: !isOpen
              }, subHooksView));
            }
          } else {
            if (isComplexDisplayValue) {
              return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
                className: InspectedElementHooksTree_default().Hook
              }, /* @__PURE__ */ external_react_namespaceObject.createElement(KeyValue_KeyValue, {
                alphaSort: false,
                bridge: bridge2,
                canDeletePaths,
                canEditValues,
                canRenamePaths,
                canRenamePathsAtDepth,
                depth: 1,
                element,
                hookID,
                hookName,
                inspectedElement,
                name,
                path: path.concat(["value"]),
                pathRoot: "hooks",
                store,
                value
              }));
            } else {
              return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
                className: InspectedElementHooksTree_default().Hook
              }, /* @__PURE__ */ external_react_namespaceObject.createElement(KeyValue_KeyValue, {
                alphaSort: false,
                bridge: bridge2,
                canDeletePaths: false,
                canEditValues,
                canRenamePaths: false,
                depth: 1,
                element,
                hookID,
                hookName,
                inspectedElement,
                name,
                path: path.concat(["value"]),
                pathRoot: "hooks",
                store,
                value
              }));
            }
          }
        }
        const Components_InspectedElementHooksTree = /* @__PURE__ */ external_react_namespaceObject.memo(InspectedElementHooksTree_InspectedElementHooksTree);
        ;
        function InspectedElementPropsTree({
          bridge: bridge2,
          element,
          inspectedElement,
          store
        }) {
          const {
            readOnly
          } = external_react_namespaceObject.useContext(OptionsContext);
          const {
            canEditFunctionProps,
            canEditFunctionPropsDeletePaths,
            canEditFunctionPropsRenamePaths,
            props: props2,
            type
          } = inspectedElement;
          const canDeletePaths = type === ElementTypeClass || canEditFunctionPropsDeletePaths;
          const canEditValues = !readOnly && (type === ElementTypeClass || canEditFunctionProps);
          const canRenamePaths = type === ElementTypeClass || canEditFunctionPropsRenamePaths;
          const entries2 = props2 != null ? Object.entries(props2) : null;
          if (entries2 !== null) {
            entries2.sort(alphaSortEntries);
          }
          const isEmpty = entries2 === null || entries2.length === 0;
          const handleCopy = () => (0, clipboard.copy)(serializeDataForCopy(props2));
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementSharedStyles_default().InspectedElementTree,
            "data-testname": "InspectedElementPropsTree"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementSharedStyles_default().HeaderRow
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementSharedStyles_default().Header
          }, "props"), !isEmpty && /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            onClick: handleCopy,
            title: "Copy to clipboard"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "copy"
          }))), !isEmpty && entries2.map(([name, value]) => /* @__PURE__ */ external_react_namespaceObject.createElement(KeyValue_KeyValue, {
            key: name,
            alphaSort: true,
            bridge: bridge2,
            canDeletePaths,
            canEditValues,
            canRenamePaths,
            depth: 1,
            element,
            hidden: false,
            inspectedElement,
            name,
            path: [name],
            pathRoot: "props",
            store,
            value
          })), canEditValues && /* @__PURE__ */ external_react_namespaceObject.createElement(NewKeyValue_NewKeyValue, {
            bridge: bridge2,
            depth: 0,
            hidden: false,
            inspectedElement,
            path: [],
            store,
            type: "props"
          }));
        }
        ;
        function InspectedElementStateTree({
          bridge: bridge2,
          element,
          inspectedElement,
          store
        }) {
          const {
            state: state2,
            type
          } = inspectedElement;
          const isHostComponent = type === ElementTypeHostComponent;
          const entries2 = state2 != null ? Object.entries(state2) : null;
          const isEmpty = entries2 === null || entries2.length === 0;
          if (isEmpty || isHostComponent) {
            return null;
          }
          if (entries2 !== null) {
            entries2.sort(alphaSortEntries);
          }
          const handleCopy = () => (0, clipboard.copy)(serializeDataForCopy(state2));
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementSharedStyles_default().InspectedElementTree
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementSharedStyles_default().HeaderRow
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementSharedStyles_default().Header
          }, "state"), !isEmpty && /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            onClick: handleCopy,
            title: "Copy to clipboard"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "copy"
          }))), isEmpty && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementSharedStyles_default().Empty
          }, "None"), !isEmpty && entries2.map(([name, value]) => /* @__PURE__ */ external_react_namespaceObject.createElement(KeyValue_KeyValue, {
            key: name,
            alphaSort: true,
            bridge: bridge2,
            canDeletePaths: true,
            canEditValues: true,
            canRenamePaths: true,
            depth: 1,
            element,
            hidden: false,
            inspectedElement,
            name,
            path: [name],
            pathRoot: "state",
            store,
            value
          })));
        }
        var InspectedElementStyleXPlugin = __webpack_require__(3587);
        var InspectedElementStyleXPlugin_default = /* @__PURE__ */ __webpack_require__.n(InspectedElementStyleXPlugin);
        ;
        function InspectedElementStyleXPlugin_InspectedElementStyleXPlugin({
          bridge: bridge2,
          element,
          inspectedElement,
          store
        }) {
          if (!enableStyleXFeatures) {
            return null;
          }
          const styleXPlugin = inspectedElement.plugins.stylex;
          if (styleXPlugin == null) {
            return null;
          }
          const {
            resolvedStyles,
            sources
          } = styleXPlugin;
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementSharedStyles_default().InspectedElementTree
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementSharedStyles_default().HeaderRow
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementSharedStyles_default().Header
          }, "stylex")), sources.map((source) => /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            key: source,
            className: InspectedElementStyleXPlugin_default().Source
          }, source)), Object.entries(resolvedStyles).map(([name, value]) => /* @__PURE__ */ external_react_namespaceObject.createElement(KeyValue_KeyValue, {
            key: name,
            alphaSort: true,
            bridge: bridge2,
            canDeletePaths: false,
            canEditValues: false,
            canRenamePaths: false,
            depth: 1,
            element,
            hidden: false,
            inspectedElement,
            name,
            path: [name],
            pathRoot: "stylex",
            store,
            value
          })));
        }
        ;
        function InspectedElementSuspenseToggle({
          bridge: bridge2,
          inspectedElement,
          store
        }) {
          const {
            readOnly
          } = external_react_namespaceObject.useContext(OptionsContext);
          const {
            id: id2,
            state: state2,
            type
          } = inspectedElement;
          const canToggleSuspense = !readOnly && inspectedElement.canToggleSuspense;
          if (type !== ElementTypeSuspense) {
            return null;
          }
          const isSuspended = state2 !== null;
          const toggleSuspense = (path, value) => {
            const rendererID = store.getRendererIDForElement(id2);
            if (rendererID !== null) {
              bridge2.send("overrideSuspense", {
                id: id2,
                rendererID,
                forceFallback: value
              });
            }
          };
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementSharedStyles_default().InspectedElementTree
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementSharedStyles_default().HeaderRow
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementSharedStyles_default().Header
          }, "suspense")), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementSharedStyles_default().ToggleSuspenseRow
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: InspectedElementSharedStyles_default().Name
          }, "Suspended"), canToggleSuspense ? (
            // key is required to keep <EditableValue> and header row toggle button in sync
            /* @__PURE__ */ external_react_namespaceObject.createElement(EditableValue_EditableValue, {
              key: isSuspended,
              overrideValue: toggleSuspense,
              path: ["suspense", "Suspended"],
              value: isSuspended
            })
          ) : /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: InspectedElementSharedStyles_default().Value
          }, isSuspended ? "true" : "false")));
        }
        ;
        const NativeStyleContext = /* @__PURE__ */ (0, external_react_namespaceObject.createContext)(null);
        NativeStyleContext.displayName = "NativeStyleContext";
        const context_inProgressRequests = /* @__PURE__ */ new WeakMap();
        const context_resource = createResource((element) => {
          const request = context_inProgressRequests.get(element);
          if (request != null) {
            return request.promise;
          }
          let resolveFn = null;
          const promise = new Promise((resolve) => {
            resolveFn = resolve;
          });
          context_inProgressRequests.set(element, {
            promise,
            resolveFn
          });
          return promise;
        }, (element) => element, {
          useWeakMap: true
        });
        function NativeStyleContextController({
          children
        }) {
          const bridge2 = (0, external_react_namespaceObject.useContext)(BridgeContext);
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const getStyleAndLayout = (0, external_react_namespaceObject.useCallback)((id2) => {
            const element = store.getElementByID(id2);
            if (element !== null) {
              return context_resource.read(element);
            } else {
              return null;
            }
          }, [store]);
          const {
            selectedElementID
          } = (0, external_react_namespaceObject.useContext)(TreeStateContext);
          const [currentStyleAndLayout, setCurrentStyleAndLayout] = (0, external_react_namespaceObject.useState)(null);
          (0, external_react_namespaceObject.useEffect)(() => {
            const onStyleAndLayout = ({
              id: id2,
              layout,
              style
            }) => {
              const element = store.getElementByID(id2);
              if (element !== null) {
                const styleAndLayout = {
                  layout,
                  style
                };
                const request = context_inProgressRequests.get(element);
                if (request != null) {
                  context_inProgressRequests.delete(element);
                  (0, external_react_dom_namespaceObject.unstable_batchedUpdates)(() => {
                    request.resolveFn(styleAndLayout);
                    setCurrentStyleAndLayout(styleAndLayout);
                  });
                } else {
                  context_resource.write(element, styleAndLayout);
                  if (id2 === selectedElementID) {
                    setCurrentStyleAndLayout(styleAndLayout);
                  }
                }
              }
            };
            bridge2.addListener("NativeStyleEditor_styleAndLayout", onStyleAndLayout);
            return () => bridge2.removeListener("NativeStyleEditor_styleAndLayout", onStyleAndLayout);
          }, [bridge2, currentStyleAndLayout, selectedElementID, store]);
          (0, external_react_namespaceObject.useEffect)(() => {
            if (selectedElementID === null) {
              return () => {
              };
            }
            const rendererID = store.getRendererIDForElement(selectedElementID);
            let timeoutID = null;
            const sendRequest = () => {
              timeoutID = null;
              if (rendererID !== null) {
                bridge2.send("NativeStyleEditor_measure", {
                  id: selectedElementID,
                  rendererID
                });
              }
            };
            sendRequest();
            const onStyleAndLayout = ({
              id: id2
            }) => {
              if (id2 === selectedElementID) {
                if (timeoutID !== null) {
                  clearTimeout(timeoutID);
                }
                timeoutID = setTimeout(sendRequest, 1e3);
              }
            };
            bridge2.addListener("NativeStyleEditor_styleAndLayout", onStyleAndLayout);
            return () => {
              bridge2.removeListener("NativeStyleEditor_styleAndLayout", onStyleAndLayout);
              if (timeoutID !== null) {
                clearTimeout(timeoutID);
              }
            };
          }, [bridge2, selectedElementID, store]);
          const value = (0, external_react_namespaceObject.useMemo)(
            () => ({
              getStyleAndLayout
            }),
            // NativeStyle is used to invalidate the cache and schedule an update with React.
            [currentStyleAndLayout, getStyleAndLayout]
          );
          return /* @__PURE__ */ external_react_namespaceObject.createElement(NativeStyleContext.Provider, {
            value
          }, children);
        }
        var LayoutViewer = __webpack_require__(2279);
        var LayoutViewer_default = /* @__PURE__ */ __webpack_require__.n(LayoutViewer);
        ;
        function LayoutViewer_LayoutViewer({
          id: id2,
          layout
        }) {
          const {
            height,
            margin,
            padding,
            y,
            width,
            x
          } = layout;
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: LayoutViewer_default().LayoutViewer
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: LayoutViewer_default().Header
          }, "layout"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: LayoutViewer_default().DashedBox
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: LayoutViewer_default().LabelRow
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
            className: LayoutViewer_default().Label
          }, "margin"), /* @__PURE__ */ external_react_namespaceObject.createElement("label", null, margin.top || "-")), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: LayoutViewer_default().BoxRow
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", null, margin.left || "-"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: LayoutViewer_default().SolidBox
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: LayoutViewer_default().LabelRow
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
            className: LayoutViewer_default().Label
          }, "padding"), /* @__PURE__ */ external_react_namespaceObject.createElement("label", null, padding.top || "-")), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: LayoutViewer_default().BoxRow
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", null, padding.left || "-"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: LayoutViewer_default().DashedBox
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: LayoutViewer_default().LabelRow
          }, format(width), " x ", format(height), " (", format(x), ", ", format(y), ")")), /* @__PURE__ */ external_react_namespaceObject.createElement("label", null, padding.right || "-")), /* @__PURE__ */ external_react_namespaceObject.createElement("label", null, padding.bottom || "-")), /* @__PURE__ */ external_react_namespaceObject.createElement("label", null, margin.right || "-")), /* @__PURE__ */ external_react_namespaceObject.createElement("label", null, margin.bottom || "-")));
        }
        function format(number) {
          if (Math.round(number) === number) {
            return number;
          } else {
            return number.toFixed(1);
          }
        }
        var StyleEditor = __webpack_require__(7494);
        var StyleEditor_default = /* @__PURE__ */ __webpack_require__.n(StyleEditor);
        ;
        function StyleEditor_StyleEditor({
          id: id2,
          style
        }) {
          const bridge2 = (0, external_react_namespaceObject.useContext)(BridgeContext);
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const changeAttribute = (oldName, newName, value) => {
            const rendererID = store.getRendererIDForElement(id2);
            if (rendererID !== null) {
              bridge2.send("NativeStyleEditor_renameAttribute", {
                id: id2,
                rendererID,
                oldName,
                newName,
                value
              });
            }
          };
          const changeValue = (name, value) => {
            const rendererID = store.getRendererIDForElement(id2);
            if (rendererID !== null) {
              bridge2.send("NativeStyleEditor_setValue", {
                id: id2,
                rendererID,
                name,
                value
              });
            }
          };
          const keys = (0, external_react_namespaceObject.useMemo)(() => Array.from(Object.keys(style)), [style]);
          const handleCopy = () => (0, clipboard.copy)(serializeDataForCopy(style));
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: StyleEditor_default().StyleEditor
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: StyleEditor_default().HeaderRow
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: StyleEditor_default().Header
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: StyleEditor_default().Brackets
          }, "style {")), /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            onClick: handleCopy,
            title: "Copy to clipboard"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "copy"
          }))), keys.length > 0 && keys.map((attribute) => /* @__PURE__ */ external_react_namespaceObject.createElement(Row, {
            key: attribute,
            attribute,
            changeAttribute,
            changeValue,
            validAttributes: store.nativeStyleEditorValidAttributes,
            value: style[attribute]
          })), /* @__PURE__ */ external_react_namespaceObject.createElement(NewRow, {
            changeAttribute,
            changeValue,
            validAttributes: store.nativeStyleEditorValidAttributes
          }), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: StyleEditor_default().Brackets
          }, "}"));
        }
        function NewRow({
          changeAttribute,
          changeValue,
          validAttributes
        }) {
          const [key, setKey] = (0, external_react_namespaceObject.useState)(0);
          const reset = () => setKey(key + 1);
          const newAttributeRef = (0, external_react_namespaceObject.useRef)("");
          const changeAttributeWrapper = (oldAttribute, newAttribute, value) => {
            newAttributeRef.current = newAttribute;
          };
          const changeValueWrapper = (attribute, value) => {
            if (newAttributeRef.current !== "") {
              if (value !== "") {
                changeValue(newAttributeRef.current, value);
              }
              reset();
            }
          };
          return /* @__PURE__ */ external_react_namespaceObject.createElement(Row, {
            key,
            attribute: "",
            attributePlaceholder: "attribute",
            changeAttribute: changeAttributeWrapper,
            changeValue: changeValueWrapper,
            validAttributes,
            value: "",
            valuePlaceholder: "value"
          });
        }
        function Row({
          attribute,
          attributePlaceholder,
          changeAttribute,
          changeValue,
          validAttributes,
          value,
          valuePlaceholder
        }) {
          const [localAttribute, setLocalAttribute] = (0, external_react_namespaceObject.useState)(attribute);
          const [localValue, setLocalValue] = (0, external_react_namespaceObject.useState)(JSON.stringify(value));
          const [isAttributeValid, setIsAttributeValid] = (0, external_react_namespaceObject.useState)(true);
          const [isValueValid, setIsValueValid] = (0, external_react_namespaceObject.useState)(true);
          const validateAndSetLocalAttribute = (newAttribute) => {
            const isValid = newAttribute === "" || validAttributes === null || validAttributes.indexOf(newAttribute) >= 0;
            (0, external_react_dom_namespaceObject.unstable_batchedUpdates)(() => {
              setLocalAttribute(newAttribute);
              setIsAttributeValid(isValid);
            });
          };
          const validateAndSetLocalValue = (newValue) => {
            let isValid = false;
            try {
              JSON.parse(sanitizeForParse(newValue));
              isValid = true;
            } catch (error) {
            }
            (0, external_react_dom_namespaceObject.unstable_batchedUpdates)(() => {
              setLocalValue(newValue);
              setIsValueValid(isValid);
            });
          };
          const resetAttribute = () => {
            setLocalAttribute(attribute);
          };
          const resetValue = () => {
            setLocalValue(value);
          };
          const submitValueChange = () => {
            if (isAttributeValid && isValueValid) {
              const parsedLocalValue = JSON.parse(sanitizeForParse(localValue));
              if (value !== parsedLocalValue) {
                changeValue(attribute, parsedLocalValue);
              }
            }
          };
          const submitAttributeChange = () => {
            if (isAttributeValid && isValueValid) {
              if (attribute !== localAttribute) {
                changeAttribute(attribute, localAttribute, value);
              }
            }
          };
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: StyleEditor_default().Row
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(Field, {
            className: isAttributeValid ? StyleEditor_default().Attribute : StyleEditor_default().Invalid,
            onChange: validateAndSetLocalAttribute,
            onReset: resetAttribute,
            onSubmit: submitAttributeChange,
            placeholder: attributePlaceholder,
            value: localAttribute
          }), ":\xA0", /* @__PURE__ */ external_react_namespaceObject.createElement(Field, {
            className: isValueValid ? StyleEditor_default().Value : StyleEditor_default().Invalid,
            onChange: validateAndSetLocalValue,
            onReset: resetValue,
            onSubmit: submitValueChange,
            placeholder: valuePlaceholder,
            value: localValue
          }), ";");
        }
        function Field({
          className,
          onChange,
          onReset,
          onSubmit,
          placeholder,
          value
        }) {
          const onKeyDown = (event) => {
            switch (event.key) {
              case "Enter":
                onSubmit();
                break;
              case "Escape":
                onReset();
                break;
              case "ArrowDown":
              case "ArrowLeft":
              case "ArrowRight":
              case "ArrowUp":
                event.stopPropagation();
                break;
              default:
                break;
            }
          };
          return /* @__PURE__ */ external_react_namespaceObject.createElement(AutoSizeInput_AutoSizeInput, {
            className: `${className} ${StyleEditor_default().Input}`,
            onBlur: onSubmit,
            onChange: (event) => onChange(event.target.value),
            onKeyDown,
            placeholder,
            value
          });
        }
        ;
        function NativeStyleEditorWrapper(_) {
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const subscription = (0, external_react_namespaceObject.useMemo)(() => ({
            getCurrentValue: () => store.supportsNativeStyleEditor,
            subscribe: (callback) => {
              store.addListener("supportsNativeStyleEditor", callback);
              return () => {
                store.removeListener("supportsNativeStyleEditor", callback);
              };
            }
          }), [store]);
          const supportsNativeStyleEditor = useSubscription(subscription);
          if (!supportsNativeStyleEditor) {
            return null;
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement(NativeStyleEditor, null);
        }
        function NativeStyleEditor(_) {
          const {
            getStyleAndLayout
          } = (0, external_react_namespaceObject.useContext)(NativeStyleContext);
          const {
            inspectedElementID
          } = (0, external_react_namespaceObject.useContext)(TreeStateContext);
          if (inspectedElementID === null) {
            return null;
          }
          const maybeStyleAndLayout = getStyleAndLayout(inspectedElementID);
          if (maybeStyleAndLayout === null) {
            return null;
          }
          const {
            layout,
            style
          } = maybeStyleAndLayout;
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, layout !== null && /* @__PURE__ */ external_react_namespaceObject.createElement(LayoutViewer_LayoutViewer, {
            id: inspectedElementID,
            layout
          }), style !== null && /* @__PURE__ */ external_react_namespaceObject.createElement(StyleEditor_StyleEditor, {
            id: inspectedElementID,
            style: style !== null ? style : {}
          }));
        }
        var jsc_safe_url = __webpack_require__(6486);
        var Skeleton = __webpack_require__(2265);
        var Skeleton_default = /* @__PURE__ */ __webpack_require__.n(Skeleton);
        ;
        function Skeleton_Skeleton({
          height,
          width
        }) {
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Skeleton_default().root,
            style: {
              height,
              width
            }
          });
        }
        const Components_Skeleton = Skeleton_Skeleton;
        var InspectedElementSourcePanel = __webpack_require__(8739);
        var InspectedElementSourcePanel_default = /* @__PURE__ */ __webpack_require__.n(InspectedElementSourcePanel);
        ;
        function InspectedElementSourcePanel_InspectedElementSourcePanel({
          source,
          symbolicatedSourcePromise
        }) {
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementSourcePanel_default().Source,
            "data-testname": "InspectedElementView-Source"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementSourcePanel_default().SourceHeaderRow
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementSourcePanel_default().SourceHeader
          }, "source"), /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Suspense, {
            fallback: /* @__PURE__ */ external_react_namespaceObject.createElement(Components_Skeleton, {
              height: 16,
              width: 16
            })
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(CopySourceButton, {
            source,
            symbolicatedSourcePromise
          }))), /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Suspense, {
            fallback: /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              className: InspectedElementSourcePanel_default().SourceOneLiner
            }, /* @__PURE__ */ external_react_namespaceObject.createElement(Components_Skeleton, {
              height: 16,
              width: "40%"
            }))
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(FormattedSourceString, {
            source,
            symbolicatedSourcePromise
          })));
        }
        function CopySourceButton({
          source,
          symbolicatedSourcePromise
        }) {
          const symbolicatedSource = external_react_namespaceObject.use(symbolicatedSourcePromise);
          if (symbolicatedSource == null) {
            const {
              sourceURL: sourceURL2,
              line: line2,
              column: column2
            } = source;
            const handleCopy2 = () => (0, clipboard.copy)(`${sourceURL2}:${line2}:${column2}`);
            return /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
              onClick: handleCopy2,
              title: "Copy to clipboard"
            }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
              type: "copy"
            }));
          }
          const {
            sourceURL,
            line,
            column
          } = symbolicatedSource;
          const handleCopy = () => (0, clipboard.copy)(`${sourceURL}:${line}:${column}`);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            onClick: handleCopy,
            title: "Copy to clipboard"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "copy"
          }));
        }
        function FormattedSourceString({
          source,
          symbolicatedSourcePromise
        }) {
          const symbolicatedSource = external_react_namespaceObject.use(symbolicatedSourcePromise);
          if (symbolicatedSource == null) {
            const {
              sourceURL: sourceURL2,
              line: line2
            } = source;
            return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              className: InspectedElementSourcePanel_default().SourceOneLiner
            }, formatSourceForDisplay(sourceURL2, line2));
          }
          const {
            sourceURL,
            line
          } = symbolicatedSource;
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementSourcePanel_default().SourceOneLiner
          }, formatSourceForDisplay(sourceURL, line));
        }
        function formatSourceForDisplay(sourceURL, line) {
          const sanitizedSourceURL = sourceURL.includes("//&") ? (0, jsc_safe_url.toNormalUrl)(sourceURL) : sourceURL;
          const BEFORE_SLASH_RE = /^(.*)[\\\/]/;
          let nameOnly = sanitizedSourceURL.replace(BEFORE_SLASH_RE, "");
          if (/^index\./.test(nameOnly)) {
            const match = sanitizedSourceURL.match(BEFORE_SLASH_RE);
            if (match) {
              const pathBeforeSlash = match[1];
              if (pathBeforeSlash) {
                const folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, "");
                nameOnly = folderName + "/" + nameOnly;
              }
            }
          }
          return `${nameOnly}:${line}`;
        }
        const Components_InspectedElementSourcePanel = InspectedElementSourcePanel_InspectedElementSourcePanel;
        var InspectedElementView = __webpack_require__(69);
        var InspectedElementView_default = /* @__PURE__ */ __webpack_require__.n(InspectedElementView);
        ;
        function InspectedElementView_InspectedElementView({
          element,
          hookNames,
          inspectedElement,
          parseHookNames,
          toggleParseHookNames,
          symbolicatedSourcePromise
        }) {
          const {
            owners,
            rendererPackageName,
            rendererVersion,
            rootType,
            source
          } = inspectedElement;
          const bridge2 = (0, external_react_namespaceObject.useContext)(BridgeContext);
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const rendererLabel = rendererPackageName !== null && rendererVersion !== null ? `${rendererPackageName}@${rendererVersion}` : null;
          const showOwnersList = owners !== null && owners.length > 0;
          const showRenderedBy = showOwnersList || rendererLabel !== null || rootType !== null;
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementView_default().InspectedElement
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementView_default().InspectedElementBadgesContainer
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(InspectedElementBadges_InspectedElementBadges, {
            hocDisplayNames: element.hocDisplayNames,
            compiledWithForget: element.compiledWithForget
          })), /* @__PURE__ */ external_react_namespaceObject.createElement(InspectedElementPropsTree, {
            bridge: bridge2,
            element,
            inspectedElement,
            store
          }), /* @__PURE__ */ external_react_namespaceObject.createElement(InspectedElementSuspenseToggle, {
            bridge: bridge2,
            inspectedElement,
            store
          }), /* @__PURE__ */ external_react_namespaceObject.createElement(InspectedElementStateTree, {
            bridge: bridge2,
            element,
            inspectedElement,
            store
          }), /* @__PURE__ */ external_react_namespaceObject.createElement(Components_InspectedElementHooksTree, {
            bridge: bridge2,
            element,
            hookNames,
            inspectedElement,
            parseHookNames,
            store,
            toggleParseHookNames
          }), /* @__PURE__ */ external_react_namespaceObject.createElement(InspectedElementContextTree, {
            bridge: bridge2,
            element,
            inspectedElement,
            store
          }), enableStyleXFeatures && /* @__PURE__ */ external_react_namespaceObject.createElement(InspectedElementStyleXPlugin_InspectedElementStyleXPlugin, {
            bridge: bridge2,
            element,
            inspectedElement,
            store
          }), /* @__PURE__ */ external_react_namespaceObject.createElement(InspectedElementErrorsAndWarningsTree_InspectedElementErrorsAndWarningsTree, {
            bridge: bridge2,
            element,
            inspectedElement,
            store
          }), /* @__PURE__ */ external_react_namespaceObject.createElement(NativeStyleEditorWrapper, null), showRenderedBy && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementView_default().Owners,
            "data-testname": "InspectedElementView-Owners"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementView_default().OwnersHeader
          }, "rendered by"), showOwnersList && owners?.map((owner) => /* @__PURE__ */ external_react_namespaceObject.createElement(OwnerView, {
            key: owner.id,
            displayName: owner.displayName || "Anonymous",
            hocDisplayNames: owner.hocDisplayNames,
            compiledWithForget: owner.compiledWithForget,
            id: owner.id,
            isInStore: store.containsElement(owner.id),
            type: owner.type
          })), rootType !== null && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementView_default().OwnersMetaField
          }, rootType), rendererLabel !== null && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElementView_default().OwnersMetaField
          }, rendererLabel)), source != null && /* @__PURE__ */ external_react_namespaceObject.createElement(Components_InspectedElementSourcePanel, {
            source,
            symbolicatedSourcePromise
          })));
        }
        function OwnerView({
          displayName,
          hocDisplayNames,
          compiledWithForget,
          id: id2,
          isInStore
        }) {
          const dispatch = (0, external_react_namespaceObject.useContext)(TreeDispatcherContext);
          const {
            highlightNativeElement,
            clearHighlightNativeElement
          } = useHighlightNativeElement();
          const handleClick = (0, external_react_namespaceObject.useCallback)(() => {
            logEvent({
              event_name: "select-element",
              metadata: {
                source: "owner-view"
              }
            });
            dispatch({
              type: "SELECT_ELEMENT_BY_ID",
              payload: id2
            });
          }, [dispatch, id2]);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            key: id2,
            className: InspectedElementView_default().OwnerButton,
            disabled: !isInStore,
            onClick: handleClick,
            onMouseEnter: () => highlightNativeElement(id2),
            onMouseLeave: clearHighlightNativeElement
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: InspectedElementView_default().OwnerContent
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: `${InspectedElementView_default().Owner} ${isInStore ? "" : InspectedElementView_default().NotInStore}`,
            title: displayName
          }, displayName), /* @__PURE__ */ external_react_namespaceObject.createElement(ElementBadges_ElementBadges, {
            hocDisplayNames,
            compiledWithForget
          })));
        }
        ;
        var charToInteger = {};
        var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        for (var i = 0; i < chars.length; i++) {
          charToInteger[chars.charCodeAt(i)] = i;
        }
        function decode(mappings) {
          var decoded = [];
          var line = [];
          var segment = [0, 0, 0, 0, 0];
          var j = 0;
          for (var i2 = 0, shift = 0, value = 0; i2 < mappings.length; i2++) {
            var c = mappings.charCodeAt(i2);
            if (c === 44) {
              segmentify(line, segment, j);
              j = 0;
            } else if (c === 59) {
              segmentify(line, segment, j);
              j = 0;
              decoded.push(line);
              line = [];
              segment[0] = 0;
            } else {
              var integer = charToInteger[c];
              if (integer === void 0) {
                throw new Error("Invalid character (" + String.fromCharCode(c) + ")");
              }
              var hasContinuationBit = integer & 32;
              integer &= 31;
              value += integer << shift;
              if (hasContinuationBit) {
                shift += 5;
              } else {
                var shouldNegate = value & 1;
                value >>>= 1;
                if (shouldNegate) {
                  value = value === 0 ? -2147483648 : -value;
                }
                segment[j] += value;
                j++;
                value = shift = 0;
              }
            }
          }
          segmentify(line, segment, j);
          decoded.push(line);
          return decoded;
        }
        function segmentify(line, segment, j) {
          if (j === 4)
            line.push([segment[0], segment[1], segment[2], segment[3]]);
          else if (j === 5)
            line.push([segment[0], segment[1], segment[2], segment[3], segment[4]]);
          else if (j === 1)
            line.push([segment[0]]);
        }
        function encode(decoded) {
          var sourceFileIndex = 0;
          var sourceCodeLine = 0;
          var sourceCodeColumn = 0;
          var nameIndex = 0;
          var mappings = "";
          for (var i2 = 0; i2 < decoded.length; i2++) {
            var line = decoded[i2];
            if (i2 > 0)
              mappings += ";";
            if (line.length === 0)
              continue;
            var generatedCodeColumn = 0;
            var lineMappings = [];
            for (var _i = 0, line_1 = line; _i < line_1.length; _i++) {
              var segment = line_1[_i];
              var segmentMappings = encodeInteger(segment[0] - generatedCodeColumn);
              generatedCodeColumn = segment[0];
              if (segment.length > 1) {
                segmentMappings += encodeInteger(segment[1] - sourceFileIndex) + encodeInteger(segment[2] - sourceCodeLine) + encodeInteger(segment[3] - sourceCodeColumn);
                sourceFileIndex = segment[1];
                sourceCodeLine = segment[2];
                sourceCodeColumn = segment[3];
              }
              if (segment.length === 5) {
                segmentMappings += encodeInteger(segment[4] - nameIndex);
                nameIndex = segment[4];
              }
              lineMappings.push(segmentMappings);
            }
            mappings += lineMappings.join(",");
          }
          return mappings;
        }
        function encodeInteger(num) {
          var result = "";
          num = num < 0 ? -num << 1 | 1 : num << 1;
          do {
            var clamped = num & 31;
            num >>>= 5;
            if (num > 0) {
              clamped |= 32;
            }
            result += chars[clamped];
          } while (num > 0);
          return result;
        }
        ;
        function SourceMapConsumer(sourceMapJSON) {
          if (sourceMapJSON.sections != null) {
            return IndexedSourceMapConsumer(sourceMapJSON);
          } else {
            return BasicSourceMapConsumer(sourceMapJSON);
          }
        }
        function BasicSourceMapConsumer(sourceMapJSON) {
          const decodedMappings = withSyncPerfMeasurements("Decoding source map mappings with sourcemap-codec", () => decode(sourceMapJSON.mappings));
          function originalPositionFor({
            columnNumber,
            lineNumber
          }) {
            const targetColumnNumber = columnNumber - 1;
            const lineMappings = decodedMappings[lineNumber - 1];
            let nearestEntry = null;
            let startIndex = 0;
            let stopIndex = lineMappings.length - 1;
            let index = -1;
            while (startIndex <= stopIndex) {
              index = Math.floor((stopIndex + startIndex) / 2);
              nearestEntry = lineMappings[index];
              const currentColumn = nearestEntry[0];
              if (currentColumn === targetColumnNumber) {
                break;
              } else {
                if (currentColumn > targetColumnNumber) {
                  if (stopIndex - index > 0) {
                    stopIndex = index;
                  } else {
                    index = stopIndex;
                    break;
                  }
                } else {
                  if (index - startIndex > 0) {
                    startIndex = index;
                  } else {
                    index = startIndex;
                    break;
                  }
                }
              }
            }
            while (index > 0) {
              const previousEntry = lineMappings[index - 1];
              const currentColumn = previousEntry[0];
              if (currentColumn !== targetColumnNumber) {
                break;
              }
              index--;
            }
            if (nearestEntry == null) {
              throw Error(`Could not find runtime location for line:${lineNumber} and column:${columnNumber}`);
            }
            const sourceIndex = nearestEntry[1];
            const sourceContent = sourceMapJSON.sourcesContent != null ? sourceMapJSON.sourcesContent[sourceIndex] : null;
            const sourceURL = sourceMapJSON.sources[sourceIndex] ?? null;
            const line = nearestEntry[2] + 1;
            const column = nearestEntry[3];
            if (sourceContent === null || sourceURL === null) {
              throw Error(`Could not find original source for line:${lineNumber} and column:${columnNumber}`);
            }
            return {
              column,
              line,
              sourceContent,
              sourceURL
            };
          }
          return {
            originalPositionFor
          };
        }
        function IndexedSourceMapConsumer(sourceMapJSON) {
          let lastOffset = {
            line: -1,
            column: 0
          };
          const sections = sourceMapJSON.sections.map((section) => {
            const offset = section.offset;
            const offsetLine = offset.line;
            const offsetColumn = offset.column;
            if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
              throw new Error("Section offsets must be ordered and non-overlapping.");
            }
            lastOffset = offset;
            return {
              // The offset fields are 0-based, but we use 1-based indices when encoding/decoding from VLQ.
              generatedLine: offsetLine + 1,
              generatedColumn: offsetColumn + 1,
              map: section.map,
              sourceMapConsumer: null
            };
          });
          function originalPositionFor({
            columnNumber,
            lineNumber
          }) {
            const targetColumnNumber = columnNumber - 1;
            let section = null;
            let startIndex = 0;
            let stopIndex = sections.length - 1;
            let index = -1;
            while (startIndex <= stopIndex) {
              index = Math.floor((stopIndex + startIndex) / 2);
              section = sections[index];
              const currentLine = section.generatedLine;
              if (currentLine === lineNumber) {
                const currentColumn = section.generatedColumn;
                if (currentColumn === lineNumber) {
                  break;
                } else {
                  if (currentColumn > targetColumnNumber) {
                    if (stopIndex - index > 0) {
                      stopIndex = index;
                    } else {
                      index = stopIndex;
                      break;
                    }
                  } else {
                    if (index - startIndex > 0) {
                      startIndex = index;
                    } else {
                      index = startIndex;
                      break;
                    }
                  }
                }
              } else {
                if (currentLine > lineNumber) {
                  if (stopIndex - index > 0) {
                    stopIndex = index;
                  } else {
                    index = stopIndex;
                    break;
                  }
                } else {
                  if (index - startIndex > 0) {
                    startIndex = index;
                  } else {
                    index = startIndex;
                    break;
                  }
                }
              }
            }
            if (section == null) {
              throw Error(`Could not find matching section for line:${lineNumber} and column:${columnNumber}`);
            }
            if (section.sourceMapConsumer === null) {
              section.sourceMapConsumer = new SourceMapConsumer(section.map);
            }
            return section.sourceMapConsumer.originalPositionFor({
              columnNumber,
              lineNumber
            });
          }
          return {
            originalPositionFor
          };
        }
        ;
        const symbolicationCache = /* @__PURE__ */ new Map();
        async function symbolicateSourceWithCache(fetchFileWithCaching, sourceURL, line, column) {
          const key = `${sourceURL}:${line}:${column}`;
          const cachedPromise = symbolicationCache.get(key);
          if (cachedPromise != null) {
            return cachedPromise;
          }
          const promise = symbolicateSource(fetchFileWithCaching, sourceURL, line, column);
          symbolicationCache.set(key, promise);
          return promise;
        }
        const SOURCE_MAP_ANNOTATION_PREFIX = "sourceMappingURL=";
        async function symbolicateSource(fetchFileWithCaching, sourceURL, lineNumber, columnNumber) {
          const resource2 = await fetchFileWithCaching(sourceURL).catch(() => null);
          if (resource2 == null) {
            return null;
          }
          const resourceLines = resource2.split(/[\r\n]+/);
          for (let i2 = resourceLines.length - 1; i2 >= 0; --i2) {
            const resourceLine = resourceLines[i2];
            if (!resourceLine)
              continue;
            if (!resourceLine.startsWith("//#"))
              break;
            if (resourceLine.includes(SOURCE_MAP_ANNOTATION_PREFIX)) {
              const sourceMapAnnotationStartIndex = resourceLine.indexOf(SOURCE_MAP_ANNOTATION_PREFIX);
              const sourceMapURL = resourceLine.slice(sourceMapAnnotationStartIndex + SOURCE_MAP_ANNOTATION_PREFIX.length, resourceLine.length);
              const sourceMap = await fetchFileWithCaching(sourceMapURL).catch(() => null);
              if (sourceMap != null) {
                try {
                  const parsedSourceMap = JSON.parse(sourceMap);
                  const consumer = SourceMapConsumer(parsedSourceMap);
                  const {
                    sourceURL: possiblyURL,
                    line,
                    column
                  } = consumer.originalPositionFor({
                    lineNumber,
                    // 1-based
                    columnNumber
                    // 1-based
                  });
                  try {
                    void new URL(possiblyURL);
                    const normalizedURL = normalizeUrl(possiblyURL);
                    return {
                      sourceURL: normalizedURL,
                      line,
                      column
                    };
                  } catch (e) {
                    if (possiblyURL.startsWith("/")) {
                      return {
                        sourceURL: possiblyURL,
                        line,
                        column
                      };
                    }
                    const [sourceMapAbsolutePathWithoutQueryParameters] = sourceMapURL.split(/[?#&]/);
                    const absoluteSourcePath = sourceMapAbsolutePathWithoutQueryParameters + (sourceMapAbsolutePathWithoutQueryParameters.endsWith("/") ? "" : "/") + possiblyURL;
                    return {
                      sourceURL: absoluteSourcePath,
                      line,
                      column
                    };
                  }
                } catch (e) {
                  return null;
                }
              }
              return null;
            }
          }
          return null;
        }
        ;
        function checkConditions(editorURL, source) {
          try {
            const url = new URL(editorURL);
            let sourceURL = source.sourceURL;
            if (sourceURL.includes("://")) {
              if (!__IS_INTERNAL_VERSION__) {
                return {
                  url: null,
                  shouldDisableButton: true
                };
              } else {
                const endOfSourceMapURLPattern = ".js/";
                const endOfSourceMapURLIndex = sourceURL.lastIndexOf(endOfSourceMapURLPattern);
                if (endOfSourceMapURLIndex === -1) {
                  return {
                    url: null,
                    shouldDisableButton: true
                  };
                } else {
                  sourceURL = sourceURL.slice(endOfSourceMapURLIndex + endOfSourceMapURLPattern.length, sourceURL.length);
                }
              }
            }
            const lineNumberAsString = String(source.line);
            url.href = url.href.replace("{path}", sourceURL).replace("{line}", lineNumberAsString).replace("%7Bpath%7D", sourceURL).replace("%7Bline%7D", lineNumberAsString);
            return {
              url,
              shouldDisableButton: false
            };
          } catch (e) {
            return {
              url: null,
              shouldDisableButton: true
            };
          }
        }
        function OpenInEditorButton({
          editorURL,
          source,
          symbolicatedSourcePromise
        }) {
          const symbolicatedSource = external_react_namespaceObject.use(symbolicatedSourcePromise);
          const {
            url,
            shouldDisableButton
          } = checkConditions(editorURL, symbolicatedSource ? symbolicatedSource : source);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            disabled: shouldDisableButton,
            onClick: () => window.open(url),
            title: "Open in editor"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "editor"
          }));
        }
        const Components_OpenInEditorButton = OpenInEditorButton;
        ;
        const ViewElementSourceContext = /* @__PURE__ */ (0, external_react_namespaceObject.createContext)(null);
        ViewElementSourceContext.displayName = "ViewElementSourceContext";
        const Components_ViewElementSourceContext = ViewElementSourceContext;
        ;
        const {
          useCallback,
          useContext: InspectedElementViewSourceButton_useContext
        } = external_react_namespaceObject;
        function InspectedElementViewSourceButton({
          canViewSource,
          source,
          symbolicatedSourcePromise
        }) {
          const {
            canViewElementSourceFunction,
            viewElementSourceFunction
          } = InspectedElementViewSourceButton_useContext(Components_ViewElementSourceContext);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Suspense, {
            fallback: /* @__PURE__ */ external_react_namespaceObject.createElement(Components_Skeleton, {
              height: 16,
              width: 24
            })
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ActualSourceButton, {
            canViewSource,
            source,
            symbolicatedSourcePromise,
            canViewElementSourceFunction,
            viewElementSourceFunction
          }));
        }
        function ActualSourceButton({
          canViewSource,
          source,
          symbolicatedSourcePromise,
          canViewElementSourceFunction,
          viewElementSourceFunction
        }) {
          const symbolicatedSource = symbolicatedSourcePromise == null ? null : external_react_namespaceObject.use(symbolicatedSourcePromise);
          const buttonIsEnabled = !!canViewSource && viewElementSourceFunction != null && source != null && (canViewElementSourceFunction == null || canViewElementSourceFunction(source, symbolicatedSource));
          const viewSource = useCallback(() => {
            if (viewElementSourceFunction != null && source != null) {
              viewElementSourceFunction(source, symbolicatedSource);
            }
          }, [source, symbolicatedSource]);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            disabled: !buttonIsEnabled,
            onClick: viewSource,
            title: "View source for this element"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "view-source"
          }));
        }
        const Components_InspectedElementViewSourceButton = InspectedElementViewSourceButton;
        var InspectedElement = __webpack_require__(7613);
        var InspectedElement_default = /* @__PURE__ */ __webpack_require__.n(InspectedElement);
        ;
        function InspectedElementWrapper(_) {
          const {
            inspectedElementID
          } = (0, external_react_namespaceObject.useContext)(TreeStateContext);
          const dispatch = (0, external_react_namespaceObject.useContext)(TreeDispatcherContext);
          const bridge2 = (0, external_react_namespaceObject.useContext)(BridgeContext);
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const {
            hideToggleErrorAction,
            hideToggleSuspenseAction,
            hideLogAction,
            hideViewSourceAction
          } = (0, external_react_namespaceObject.useContext)(OptionsContext);
          const {
            dispatch: modalDialogDispatch
          } = (0, external_react_namespaceObject.useContext)(ModalDialogContext);
          const {
            hookNames,
            inspectedElement,
            parseHookNames,
            toggleParseHookNames
          } = (0, external_react_namespaceObject.useContext)(InspectedElementContext);
          const fetchFileWithCaching = (0, external_react_namespaceObject.useContext)(Components_FetchFileWithCachingContext);
          const symbolicatedSourcePromise = external_react_namespaceObject.useMemo(() => {
            if (inspectedElement == null)
              return null;
            if (fetchFileWithCaching == null)
              return Promise.resolve(null);
            const {
              source
            } = inspectedElement;
            if (source == null)
              return Promise.resolve(null);
            const {
              sourceURL,
              line,
              column
            } = source;
            return symbolicateSourceWithCache(fetchFileWithCaching, sourceURL, line, column);
          }, [inspectedElement]);
          const element = inspectedElementID !== null ? store.getElementByID(inspectedElementID) : null;
          const highlightElement = (0, external_react_namespaceObject.useCallback)(() => {
            if (element !== null && inspectedElementID !== null) {
              const rendererID = store.getRendererIDForElement(inspectedElementID);
              if (rendererID !== null) {
                bridge2.send("highlightNativeElement", {
                  displayName: element.displayName,
                  hideAfterTimeout: true,
                  id: inspectedElementID,
                  openNativeElementsPanel: true,
                  rendererID,
                  scrollIntoView: true
                });
              }
            }
          }, [bridge2, element, inspectedElementID, store]);
          const logElement = (0, external_react_namespaceObject.useCallback)(() => {
            if (inspectedElementID !== null) {
              const rendererID = store.getRendererIDForElement(inspectedElementID);
              if (rendererID !== null) {
                bridge2.send("logElementToConsole", {
                  id: inspectedElementID,
                  rendererID
                });
              }
            }
          }, [bridge2, inspectedElementID, store]);
          const isErrored = inspectedElement != null && inspectedElement.isErrored;
          const targetErrorBoundaryID = inspectedElement != null ? inspectedElement.targetErrorBoundaryID : null;
          const isSuspended = element !== null && element.type === ElementTypeSuspense && inspectedElement != null && inspectedElement.state != null;
          const canToggleError = !hideToggleErrorAction && inspectedElement != null && inspectedElement.canToggleError;
          const canToggleSuspense = !hideToggleSuspenseAction && inspectedElement != null && inspectedElement.canToggleSuspense;
          const editorURL = (0, external_react_namespaceObject.useSyncExternalStore)(function subscribe2(callback) {
            window.addEventListener(LOCAL_STORAGE_OPEN_IN_EDITOR_URL, callback);
            return function unsubscribe() {
              window.removeEventListener(LOCAL_STORAGE_OPEN_IN_EDITOR_URL, callback);
            };
          }, function getState() {
            return getOpenInEditorURL();
          });
          const toggleErrored = (0, external_react_namespaceObject.useCallback)(() => {
            if (inspectedElement == null || targetErrorBoundaryID == null) {
              return;
            }
            const rendererID = store.getRendererIDForElement(targetErrorBoundaryID);
            if (rendererID !== null) {
              if (targetErrorBoundaryID !== inspectedElement.id) {
                dispatch({
                  type: "SELECT_ELEMENT_BY_ID",
                  payload: targetErrorBoundaryID
                });
              }
              bridge2.send("overrideError", {
                id: targetErrorBoundaryID,
                rendererID,
                forceError: !isErrored
              });
            }
          }, [bridge2, dispatch, isErrored, targetErrorBoundaryID]);
          const toggleSuspended = (0, external_react_namespaceObject.useCallback)(() => {
            let nearestSuspenseElement = null;
            let currentElement = element;
            while (currentElement !== null) {
              if (currentElement.type === ElementTypeSuspense) {
                nearestSuspenseElement = currentElement;
                break;
              } else if (currentElement.parentID > 0) {
                currentElement = store.getElementByID(currentElement.parentID);
              } else {
                currentElement = null;
              }
            }
            if (nearestSuspenseElement === null) {
              modalDialogDispatch({
                id: "InspectedElement",
                type: "SHOW",
                content: /* @__PURE__ */ external_react_namespaceObject.createElement(CannotSuspendWarningMessage, null)
              });
            } else {
              const nearestSuspenseElementID = nearestSuspenseElement.id;
              if (nearestSuspenseElement !== element) {
                dispatch({
                  type: "SELECT_ELEMENT_BY_ID",
                  payload: nearestSuspenseElementID
                });
              }
              const rendererID = store.getRendererIDForElement(nearestSuspenseElementID);
              if (rendererID !== null) {
                bridge2.send("overrideSuspense", {
                  id: nearestSuspenseElementID,
                  rendererID,
                  forceFallback: !isSuspended
                });
              }
            }
          }, [bridge2, dispatch, element, isSuspended, modalDialogDispatch, store]);
          if (element === null) {
            return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              className: InspectedElement_default().InspectedElement
            }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              className: InspectedElement_default().TitleRow
            }));
          }
          let strictModeBadge = null;
          if (element.isStrictModeNonCompliant) {
            strictModeBadge = /* @__PURE__ */ external_react_namespaceObject.createElement("a", {
              className: InspectedElement_default().StrictModeNonCompliant,
              href: "https://react.dev/reference/react/StrictMode",
              rel: "noopener noreferrer",
              target: "_blank",
              title: "This component is not running in StrictMode. Click to learn more."
            }, /* @__PURE__ */ external_react_namespaceObject.createElement(Icon_Icon, {
              type: "strict-mode-non-compliant"
            }));
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElement_default().InspectedElement
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElement_default().TitleRow,
            "data-testname": "InspectedElement-Title"
          }, strictModeBadge, element.key && /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElement_default().Key,
            title: `key "${element.key}"`
          }, element.key), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElement_default().KeyArrow
          })), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElement_default().SelectedComponentName
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: element.isStrictModeNonCompliant ? `${InspectedElement_default().ComponentName} ${InspectedElement_default().StrictModeNonCompliantComponentName}` : InspectedElement_default().ComponentName,
            title: element.displayName
          }, element.displayName)), !!editorURL && inspectedElement != null && inspectedElement.source != null && symbolicatedSourcePromise != null && /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Suspense, {
            fallback: /* @__PURE__ */ external_react_namespaceObject.createElement(Components_Skeleton, {
              height: 16,
              width: 24
            })
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(Components_OpenInEditorButton, {
            editorURL,
            source: inspectedElement.source,
            symbolicatedSourcePromise
          })), canToggleError && /* @__PURE__ */ external_react_namespaceObject.createElement(Toggle_Toggle, {
            isChecked: isErrored,
            onChange: toggleErrored,
            title: isErrored ? "Clear the forced error" : "Force the selected component into an errored state"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "error"
          })), canToggleSuspense && /* @__PURE__ */ external_react_namespaceObject.createElement(Toggle_Toggle, {
            isChecked: isSuspended,
            onChange: toggleSuspended,
            title: isSuspended ? "Unsuspend the selected component" : "Suspend the selected component"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "suspend"
          })), store.supportsInspectMatchingDOMElement && /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            onClick: highlightElement,
            title: "Inspect the matching DOM element"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "view-dom"
          })), !hideLogAction && /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            onClick: logElement,
            title: "Log this component data to the console"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "log-data"
          })), !hideViewSourceAction && /* @__PURE__ */ external_react_namespaceObject.createElement(Components_InspectedElementViewSourceButton, {
            canViewSource: inspectedElement?.canViewSource,
            source: inspectedElement?.source,
            symbolicatedSourcePromise
          })), inspectedElement === null && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: InspectedElement_default().Loading
          }, "Loading..."), inspectedElement !== null && symbolicatedSourcePromise != null && /* @__PURE__ */ external_react_namespaceObject.createElement(InspectedElementView_InspectedElementView, {
            key: inspectedElementID,
            element,
            hookNames,
            inspectedElement,
            parseHookNames,
            toggleParseHookNames,
            symbolicatedSourcePromise
          }));
        }
        var TabBar = __webpack_require__(3617);
        var TabBar_default = /* @__PURE__ */ __webpack_require__.n(TabBar);
        ;
        function TabBar_TabBar({
          currentTab,
          disabled = false,
          id: groupName,
          selectTab,
          tabs: tabs2,
          type
        }) {
          if (!tabs2.some((tab) => tab !== null && tab.id === currentTab)) {
            const firstTab = tabs2.find((tab) => tab !== null);
            selectTab(firstTab.id);
          }
          const onChange = (0, external_react_namespaceObject.useCallback)(({
            currentTarget
          }) => selectTab(currentTarget.value), [selectTab]);
          const handleKeyDown = (0, external_react_namespaceObject.useCallback)((event) => {
            switch (event.key) {
              case "ArrowDown":
              case "ArrowLeft":
              case "ArrowRight":
              case "ArrowUp":
                event.stopPropagation();
                break;
              default:
                break;
            }
          }, []);
          let iconSizeClassName;
          let tabLabelClassName;
          let tabSizeClassName;
          switch (type) {
            case "navigation":
              iconSizeClassName = TabBar_default().IconSizeNavigation;
              tabLabelClassName = TabBar_default().TabLabelNavigation;
              tabSizeClassName = TabBar_default().TabSizeNavigation;
              break;
            case "profiler":
              iconSizeClassName = TabBar_default().IconSizeProfiler;
              tabLabelClassName = TabBar_default().TabLabelProfiler;
              tabSizeClassName = TabBar_default().TabSizeProfiler;
              break;
            case "settings":
              iconSizeClassName = TabBar_default().IconSizeSettings;
              tabLabelClassName = TabBar_default().TabLabelSettings;
              tabSizeClassName = TabBar_default().TabSizeSettings;
              break;
            default:
              throw Error(`Unsupported type "${type}"`);
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, tabs2.map((tab) => {
            if (tab === null) {
              return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
                key: "VRule",
                className: TabBar_default().VRule
              });
            }
            const {
              icon,
              id: id2,
              label,
              title
            } = tab;
            let button = /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
              className: [tabSizeClassName, disabled ? TabBar_default().TabDisabled : TabBar_default().Tab, !disabled && currentTab === id2 ? TabBar_default().TabCurrent : ""].join(" "),
              "data-testname": `TabBarButton-${id2}`,
              key: id2,
              onKeyDown: handleKeyDown,
              onMouseDown: () => selectTab(id2)
            }, /* @__PURE__ */ external_react_namespaceObject.createElement("input", {
              type: "radio",
              className: TabBar_default().Input,
              checked: currentTab === id2,
              disabled,
              name: groupName,
              value: id2,
              onChange
            }), /* @__PURE__ */ external_react_namespaceObject.createElement(Icon_Icon, {
              className: `${disabled ? TabBar_default().IconDisabled : ""} ${iconSizeClassName}`,
              type: icon
            }), /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
              className: tabLabelClassName
            }, label));
            if (title) {
              button = /* @__PURE__ */ external_react_namespaceObject.createElement(tooltip, {
                key: id2,
                label: title
              }, button);
            }
            return button;
          }));
        }
        var SettingsShared = __webpack_require__(1426);
        var SettingsShared_default = /* @__PURE__ */ __webpack_require__.n(SettingsShared);
        ;
        const vscodeFilepath = "vscode://file/{path}:{line}";
        function ComponentsSettings(_) {
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const {
            parseHookNames,
            setParseHookNames
          } = (0, external_react_namespaceObject.useContext)(SettingsContext);
          const collapseNodesByDefaultSubscription = (0, external_react_namespaceObject.useMemo)(() => ({
            getCurrentValue: () => store.collapseNodesByDefault,
            subscribe: (callback) => {
              store.addListener("collapseNodesByDefault", callback);
              return () => store.removeListener("collapseNodesByDefault", callback);
            }
          }), [store]);
          const collapseNodesByDefault = useSubscription(collapseNodesByDefaultSubscription);
          const updateCollapseNodesByDefault = (0, external_react_namespaceObject.useCallback)(({
            currentTarget
          }) => {
            store.collapseNodesByDefault = !currentTarget.checked;
          }, [store]);
          const updateParseHookNames = (0, external_react_namespaceObject.useCallback)(({
            currentTarget
          }) => {
            setParseHookNames(currentTarget.checked);
          }, [setParseHookNames]);
          const [openInEditorURLPreset, setOpenInEditorURLPreset] = useLocalStorage(LOCAL_STORAGE_OPEN_IN_EDITOR_URL_PRESET, "custom");
          const [openInEditorURL, setOpenInEditorURL] = useLocalStorage(LOCAL_STORAGE_OPEN_IN_EDITOR_URL, getDefaultOpenInEditorURL());
          const [componentFilters, setComponentFilters] = (0, external_react_namespaceObject.useState)(() => [...store.componentFilters]);
          const addFilter = (0, external_react_namespaceObject.useCallback)(() => {
            setComponentFilters((prevComponentFilters) => {
              return [...prevComponentFilters, {
                type: ComponentFilterElementType,
                value: ElementTypeHostComponent,
                isEnabled: true
              }];
            });
          }, []);
          const changeFilterType = (0, external_react_namespaceObject.useCallback)((componentFilter, type) => {
            setComponentFilters((prevComponentFilters) => {
              const cloned = [...prevComponentFilters];
              const index = prevComponentFilters.indexOf(componentFilter);
              if (index >= 0) {
                if (type === ComponentFilterElementType) {
                  cloned[index] = {
                    type: ComponentFilterElementType,
                    isEnabled: componentFilter.isEnabled,
                    value: ElementTypeHostComponent
                  };
                } else if (type === ComponentFilterDisplayName) {
                  cloned[index] = {
                    type: ComponentFilterDisplayName,
                    isEnabled: componentFilter.isEnabled,
                    isValid: true,
                    value: ""
                  };
                } else if (type === ComponentFilterLocation) {
                  cloned[index] = {
                    type: ComponentFilterLocation,
                    isEnabled: componentFilter.isEnabled,
                    isValid: true,
                    value: ""
                  };
                } else if (type === ComponentFilterHOC) {
                  cloned[index] = {
                    type: ComponentFilterHOC,
                    isEnabled: componentFilter.isEnabled,
                    isValid: true
                  };
                }
              }
              return cloned;
            });
          }, []);
          const updateFilterValueElementType = (0, external_react_namespaceObject.useCallback)((componentFilter, value) => {
            if (componentFilter.type !== ComponentFilterElementType) {
              throw Error("Invalid value for element type filter");
            }
            setComponentFilters((prevComponentFilters) => {
              const cloned = [...prevComponentFilters];
              if (componentFilter.type === ComponentFilterElementType) {
                const index = prevComponentFilters.indexOf(componentFilter);
                if (index >= 0) {
                  cloned[index] = {
                    ...componentFilter,
                    value
                  };
                }
              }
              return cloned;
            });
          }, []);
          const updateFilterValueRegExp = (0, external_react_namespaceObject.useCallback)((componentFilter, value) => {
            if (componentFilter.type === ComponentFilterElementType) {
              throw Error("Invalid value for element type filter");
            }
            setComponentFilters((prevComponentFilters) => {
              const cloned = [...prevComponentFilters];
              if (componentFilter.type === ComponentFilterDisplayName || componentFilter.type === ComponentFilterLocation) {
                const index = prevComponentFilters.indexOf(componentFilter);
                if (index >= 0) {
                  let isValid = true;
                  try {
                    new RegExp(value);
                  } catch (error) {
                    isValid = false;
                  }
                  cloned[index] = {
                    ...componentFilter,
                    isValid,
                    value
                  };
                }
              }
              return cloned;
            });
          }, []);
          const removeFilter = (0, external_react_namespaceObject.useCallback)((index) => {
            setComponentFilters((prevComponentFilters) => {
              const cloned = [...prevComponentFilters];
              cloned.splice(index, 1);
              return cloned;
            });
          }, []);
          const removeAllFilter = () => {
            setComponentFilters([]);
          };
          const toggleFilterIsEnabled = (0, external_react_namespaceObject.useCallback)((componentFilter, isEnabled) => {
            setComponentFilters((prevComponentFilters) => {
              const cloned = [...prevComponentFilters];
              const index = prevComponentFilters.indexOf(componentFilter);
              if (index >= 0) {
                if (componentFilter.type === ComponentFilterElementType) {
                  cloned[index] = {
                    ...cloned[index],
                    isEnabled
                  };
                } else if (componentFilter.type === ComponentFilterDisplayName || componentFilter.type === ComponentFilterLocation) {
                  cloned[index] = {
                    ...cloned[index],
                    isEnabled
                  };
                } else if (componentFilter.type === ComponentFilterHOC) {
                  cloned[index] = {
                    ...cloned[index],
                    isEnabled
                  };
                }
              }
              return cloned;
            });
          }, []);
          const componentFiltersRef = (0, external_react_namespaceObject.useRef)(componentFilters);
          (0, external_react_namespaceObject.useEffect)(() => {
            componentFiltersRef.current = componentFilters;
            return () => {
            };
          }, [componentFilters]);
          (0, external_react_namespaceObject.useEffect)(() => () => {
            store.componentFilters = [...componentFiltersRef.current];
          }, [store]);
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SettingsShared_default().Settings
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
            className: SettingsShared_default().Setting
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("input", {
            type: "checkbox",
            checked: !collapseNodesByDefault,
            onChange: updateCollapseNodesByDefault
          }), " ", "Expand component tree by default"), /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
            className: SettingsShared_default().Setting
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("input", {
            type: "checkbox",
            checked: parseHookNames,
            onChange: updateParseHookNames
          }), " ", "Always parse hook names from source", " ", /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: SettingsShared_default().Warning
          }, "(may be slow)")), /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
            className: SettingsShared_default().OpenInURLSetting
          }, "Open in Editor URL:", " ", /* @__PURE__ */ external_react_namespaceObject.createElement("select", {
            className: SettingsShared_default().Select,
            value: openInEditorURLPreset,
            onChange: ({
              currentTarget
            }) => {
              const selectedValue = currentTarget.value;
              setOpenInEditorURLPreset(selectedValue);
              if (selectedValue === "vscode") {
                setOpenInEditorURL(vscodeFilepath);
              } else if (selectedValue === "custom") {
                setOpenInEditorURL("");
              }
            }
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("option", {
            value: "vscode"
          }, "VS Code"), /* @__PURE__ */ external_react_namespaceObject.createElement("option", {
            value: "custom"
          }, "Custom")), openInEditorURLPreset === "custom" && /* @__PURE__ */ external_react_namespaceObject.createElement("input", {
            className: SettingsShared_default().Input,
            type: "text",
            placeholder: false ? 0 : "",
            value: openInEditorURL,
            onChange: (event) => {
              setOpenInEditorURL(event.target.value);
            }
          })), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SettingsShared_default().Header
          }, "Hide components where..."), /* @__PURE__ */ external_react_namespaceObject.createElement("table", {
            className: SettingsShared_default().Table
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("tbody", null, componentFilters.length === 0 && /* @__PURE__ */ external_react_namespaceObject.createElement("tr", {
            className: SettingsShared_default().TableRow
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("td", {
            className: SettingsShared_default().NoFiltersCell
          }, "No filters have been added.")), componentFilters.map((componentFilter, index) => /* @__PURE__ */ external_react_namespaceObject.createElement("tr", {
            className: SettingsShared_default().TableRow,
            key: index
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("td", {
            className: SettingsShared_default().TableCell
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(Toggle_Toggle, {
            className: componentFilter.isValid !== false ? "" : SettingsShared_default().InvalidRegExp,
            isChecked: componentFilter.isEnabled,
            onChange: (isEnabled) => toggleFilterIsEnabled(componentFilter, isEnabled),
            title: componentFilter.isValid === false ? "Filter invalid" : componentFilter.isEnabled ? "Filter enabled" : "Filter disabled"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ToggleIcon, {
            isEnabled: componentFilter.isEnabled,
            isValid: componentFilter.isValid == null || componentFilter.isValid === true
          }))), /* @__PURE__ */ external_react_namespaceObject.createElement("td", {
            className: SettingsShared_default().TableCell
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("select", {
            className: SettingsShared_default().Select,
            value: componentFilter.type,
            onChange: ({
              currentTarget
            }) => changeFilterType(componentFilter, parseInt(currentTarget.value, 10))
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("option", {
            value: ComponentFilterDisplayName
          }, "name"), /* @__PURE__ */ external_react_namespaceObject.createElement("option", {
            value: ComponentFilterElementType
          }, "type"), /* @__PURE__ */ external_react_namespaceObject.createElement("option", {
            value: ComponentFilterHOC
          }, "hoc"))), /* @__PURE__ */ external_react_namespaceObject.createElement("td", {
            className: SettingsShared_default().TableCell
          }, componentFilter.type === ComponentFilterElementType && "equals", (componentFilter.type === ComponentFilterLocation || componentFilter.type === ComponentFilterDisplayName) && "matches"), /* @__PURE__ */ external_react_namespaceObject.createElement("td", {
            className: SettingsShared_default().TableCell
          }, componentFilter.type === ComponentFilterElementType && /* @__PURE__ */ external_react_namespaceObject.createElement("select", {
            className: SettingsShared_default().Select,
            value: componentFilter.value,
            onChange: ({
              currentTarget
            }) => updateFilterValueElementType(componentFilter, parseInt(currentTarget.value, 10))
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("option", {
            value: ElementTypeClass
          }, "class"), /* @__PURE__ */ external_react_namespaceObject.createElement("option", {
            value: ElementTypeContext
          }, "context"), /* @__PURE__ */ external_react_namespaceObject.createElement("option", {
            value: ElementTypeFunction
          }, "function"), /* @__PURE__ */ external_react_namespaceObject.createElement("option", {
            value: ElementTypeForwardRef
          }, "forward ref"), /* @__PURE__ */ external_react_namespaceObject.createElement("option", {
            value: ElementTypeHostComponent
          }, "dom nodes (e.g. <div>)"), /* @__PURE__ */ external_react_namespaceObject.createElement("option", {
            value: ElementTypeMemo
          }, "memo"), /* @__PURE__ */ external_react_namespaceObject.createElement("option", {
            value: ElementTypeOtherOrUnknown
          }, "other"), /* @__PURE__ */ external_react_namespaceObject.createElement("option", {
            value: ElementTypeProfiler
          }, "profiler"), /* @__PURE__ */ external_react_namespaceObject.createElement("option", {
            value: ElementTypeSuspense
          }, "suspense")), (componentFilter.type === ComponentFilterLocation || componentFilter.type === ComponentFilterDisplayName) && /* @__PURE__ */ external_react_namespaceObject.createElement("input", {
            className: SettingsShared_default().Input,
            type: "text",
            placeholder: "Regular expression",
            onChange: ({
              currentTarget
            }) => updateFilterValueRegExp(componentFilter, currentTarget.value),
            value: componentFilter.value
          })), /* @__PURE__ */ external_react_namespaceObject.createElement("td", {
            className: SettingsShared_default().TableCell
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            onClick: () => removeFilter(index),
            title: "Delete filter"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "delete"
          }))))))), /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            onClick: addFilter,
            title: "Add filter"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            className: SettingsShared_default().ButtonIcon,
            type: "add"
          }), "Add filter"), componentFilters.length > 0 && /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            onClick: removeAllFilter,
            title: "Delete all filters"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            className: SettingsShared_default().ButtonIcon,
            type: "delete"
          }), "Delete all filters"));
        }
        function ToggleIcon({
          isEnabled,
          isValid
        }) {
          let className;
          if (isValid) {
            className = isEnabled ? SettingsShared_default().ToggleOn : SettingsShared_default().ToggleOff;
          } else {
            className = isEnabled ? SettingsShared_default().ToggleOnInvalid : SettingsShared_default().ToggleOffInvalid;
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: isEnabled ? SettingsShared_default().ToggleInsideOn : SettingsShared_default().ToggleInsideOff
          }));
        }
        ;
        function DebuggingSettings(_) {
          const {
            appendComponentStack,
            breakOnConsoleErrors,
            hideConsoleLogsInStrictMode,
            setAppendComponentStack,
            setBreakOnConsoleErrors,
            setShowInlineWarningsAndErrors,
            showInlineWarningsAndErrors,
            setHideConsoleLogsInStrictMode
          } = (0, external_react_namespaceObject.useContext)(SettingsContext);
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SettingsShared_default().Settings
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SettingsShared_default().Setting
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", null, /* @__PURE__ */ external_react_namespaceObject.createElement("input", {
            type: "checkbox",
            checked: appendComponentStack,
            onChange: ({
              currentTarget
            }) => setAppendComponentStack(currentTarget.checked)
          }), " ", "Append component stacks to console warnings and errors.")), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SettingsShared_default().Setting
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", null, /* @__PURE__ */ external_react_namespaceObject.createElement("input", {
            type: "checkbox",
            checked: showInlineWarningsAndErrors,
            onChange: ({
              currentTarget
            }) => setShowInlineWarningsAndErrors(currentTarget.checked)
          }), " ", "Show inline warnings and errors.")), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SettingsShared_default().Setting
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", null, /* @__PURE__ */ external_react_namespaceObject.createElement("input", {
            type: "checkbox",
            checked: breakOnConsoleErrors,
            onChange: ({
              currentTarget
            }) => setBreakOnConsoleErrors(currentTarget.checked)
          }), " ", "Break on warnings")), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SettingsShared_default().Setting
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", null, /* @__PURE__ */ external_react_namespaceObject.createElement("input", {
            type: "checkbox",
            checked: hideConsoleLogsInStrictMode,
            onChange: ({
              currentTarget
            }) => setHideConsoleLogsInStrictMode(currentTarget.checked)
          }), " ", "Hide logs during additional invocations in", " ", /* @__PURE__ */ external_react_namespaceObject.createElement("a", {
            className: SettingsShared_default().StrictModeLink,
            target: "_blank",
            rel: "noopener noreferrer",
            href: "https://react.dev/reference/react/StrictMode"
          }, "Strict Mode"))));
        }
        ;
        function getChangeLogUrl(version) {
          if (!version) {
            return null;
          }
          const versionAnchor = version.replace(/^(\d+)\.(\d+)\.(\d+).*/, "$1$2$3");
          return `${CHANGE_LOG_URL}#${versionAnchor}`;
        }
        function GeneralSettings(_) {
          const {
            displayDensity,
            setDisplayDensity,
            setTheme,
            setTraceUpdatesEnabled,
            theme,
            traceUpdatesEnabled
          } = (0, external_react_namespaceObject.useContext)(SettingsContext);
          const {
            backendVersion,
            supportsTraceUpdates
          } = (0, external_react_namespaceObject.useContext)(StoreContext);
          const frontendVersion = "5.3.1-ccb20cb88b";
          const showBackendVersion = backendVersion && backendVersion !== frontendVersion;
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SettingsShared_default().Settings
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SettingsShared_default().Setting
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SettingsShared_default().RadioLabel
          }, "Theme"), /* @__PURE__ */ external_react_namespaceObject.createElement("select", {
            className: SettingsShared_default().Select,
            value: theme,
            onChange: ({
              currentTarget
            }) => setTheme(currentTarget.value)
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("option", {
            value: "auto"
          }, "Auto"), /* @__PURE__ */ external_react_namespaceObject.createElement("option", {
            value: "light"
          }, "Light"), /* @__PURE__ */ external_react_namespaceObject.createElement("option", {
            value: "dark"
          }, "Dark"))), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SettingsShared_default().Setting
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SettingsShared_default().RadioLabel
          }, "Display density"), /* @__PURE__ */ external_react_namespaceObject.createElement("select", {
            className: SettingsShared_default().Select,
            value: displayDensity,
            onChange: ({
              currentTarget
            }) => setDisplayDensity(currentTarget.value)
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("option", {
            value: "compact"
          }, "Compact"), /* @__PURE__ */ external_react_namespaceObject.createElement("option", {
            value: "comfortable"
          }, "Comfortable"))), supportsTraceUpdates && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SettingsShared_default().Setting
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", null, /* @__PURE__ */ external_react_namespaceObject.createElement("input", {
            type: "checkbox",
            checked: traceUpdatesEnabled,
            onChange: ({
              currentTarget
            }) => setTraceUpdatesEnabled(currentTarget.checked)
          }), " ", "Highlight updates when components render.")), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SettingsShared_default().ReleaseNotes
          }, showBackendVersion && /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, /* @__PURE__ */ external_react_namespaceObject.createElement("ul", {
            className: SettingsShared_default().VersionsList
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("li", null, /* @__PURE__ */ external_react_namespaceObject.createElement(Version, {
            label: "DevTools backend version:",
            version: backendVersion
          })), /* @__PURE__ */ external_react_namespaceObject.createElement("li", null, /* @__PURE__ */ external_react_namespaceObject.createElement(Version, {
            label: "DevTools frontend version:",
            version: frontendVersion
          })))), !showBackendVersion && /* @__PURE__ */ external_react_namespaceObject.createElement(Version, {
            label: "DevTools version:",
            version: frontendVersion
          })));
        }
        function Version({
          label,
          version
        }) {
          const changelogLink = (0, external_react_namespaceObject.useMemo)(() => {
            return getChangeLogUrl(version);
          }, [version]);
          if (version == null) {
            return null;
          } else {
            return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, label, " ", /* @__PURE__ */ external_react_namespaceObject.createElement("a", {
              className: SettingsShared_default().ReleaseNotesLink,
              target: "_blank",
              rel: "noopener noreferrer",
              href: changelogLink
            }, version));
          }
        }
        ;
        const ProfilerContext = /* @__PURE__ */ (0, external_react_namespaceObject.createContext)(null);
        ProfilerContext.displayName = "ProfilerContext";
        function ProfilerContextController({
          children
        }) {
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const {
            selectedElementID
          } = (0, external_react_namespaceObject.useContext)(TreeStateContext);
          const dispatch = (0, external_react_namespaceObject.useContext)(TreeDispatcherContext);
          const {
            profilerStore
          } = store;
          const subscription = (0, external_react_namespaceObject.useMemo)(() => ({
            getCurrentValue: () => ({
              didRecordCommits: profilerStore.didRecordCommits,
              isProcessingData: profilerStore.isProcessingData,
              isProfiling: profilerStore.isProfiling,
              profilingData: profilerStore.profilingData,
              supportsProfiling: store.rootSupportsBasicProfiling
            }),
            subscribe: (callback) => {
              profilerStore.addListener("profilingData", callback);
              profilerStore.addListener("isProcessingData", callback);
              profilerStore.addListener("isProfiling", callback);
              store.addListener("rootSupportsBasicProfiling", callback);
              return () => {
                profilerStore.removeListener("profilingData", callback);
                profilerStore.removeListener("isProcessingData", callback);
                profilerStore.removeListener("isProfiling", callback);
                store.removeListener("rootSupportsBasicProfiling", callback);
              };
            }
          }), [profilerStore, store]);
          const {
            didRecordCommits,
            isProcessingData,
            isProfiling,
            profilingData,
            supportsProfiling
          } = useSubscription(subscription);
          const [prevProfilingData, setPrevProfilingData] = (0, external_react_namespaceObject.useState)(null);
          const [rootID, setRootID] = (0, external_react_namespaceObject.useState)(null);
          const [selectedFiberID, selectFiberID] = (0, external_react_namespaceObject.useState)(null);
          const [selectedFiberName, selectFiberName] = (0, external_react_namespaceObject.useState)(null);
          const selectFiber = (0, external_react_namespaceObject.useCallback)((id2, name) => {
            selectFiberID(id2);
            selectFiberName(name);
            if (id2 !== null && profilingData !== null && profilingData.imported === false) {
              if (store.containsElement(id2)) {
                dispatch({
                  type: "SELECT_ELEMENT_BY_ID",
                  payload: id2
                });
              }
            }
          }, [dispatch, selectFiberID, selectFiberName, store, profilingData]);
          const setRootIDAndClearFiber = (0, external_react_namespaceObject.useCallback)((id2) => {
            selectFiber(null, null);
            setRootID(id2);
          }, [setRootID, selectFiber]);
          if (prevProfilingData !== profilingData) {
            (0, external_react_dom_namespaceObject.unstable_batchedUpdates)(() => {
              setPrevProfilingData(profilingData);
              const dataForRoots = profilingData !== null ? profilingData.dataForRoots : null;
              if (dataForRoots != null) {
                const firstRootID = dataForRoots.keys().next().value || null;
                if (rootID === null || !dataForRoots.has(rootID)) {
                  let selectedElementRootID = null;
                  if (selectedElementID !== null) {
                    selectedElementRootID = store.getRootIDForElement(selectedElementID);
                  }
                  if (selectedElementRootID !== null && dataForRoots.has(selectedElementRootID)) {
                    setRootIDAndClearFiber(selectedElementRootID);
                  } else {
                    setRootIDAndClearFiber(firstRootID);
                  }
                }
              }
            });
          }
          const [isCommitFilterEnabled, setIsCommitFilterEnabled] = useLocalStorage("React::DevTools::isCommitFilterEnabled", false);
          const [minCommitDuration, setMinCommitDuration] = useLocalStorage("minCommitDuration", 0);
          const [selectedCommitIndex, selectCommitIndex] = (0, external_react_namespaceObject.useState)(null);
          const [selectedTabID, selectTab] = useLocalStorage("React::DevTools::Profiler::defaultTab", "flame-chart", (value2) => {
            logEvent({
              event_name: "profiler-tab-changed",
              metadata: {
                tabId: value2
              }
            });
          });
          const startProfiling = (0, external_react_namespaceObject.useCallback)(() => {
            logEvent({
              event_name: "profiling-start",
              metadata: {
                current_tab: selectedTabID
              }
            });
            store.profilerStore.startProfiling();
          }, [store, selectedTabID]);
          const stopProfiling = (0, external_react_namespaceObject.useCallback)(() => store.profilerStore.stopProfiling(), [store]);
          if (isProfiling) {
            (0, external_react_dom_namespaceObject.unstable_batchedUpdates)(() => {
              if (selectedCommitIndex !== null) {
                selectCommitIndex(null);
              }
              if (selectedFiberID !== null) {
                selectFiberID(null);
                selectFiberName(null);
              }
            });
          }
          const value = (0, external_react_namespaceObject.useMemo)(() => ({
            selectedTabID,
            selectTab,
            didRecordCommits,
            isProcessingData,
            isProfiling,
            profilingData,
            startProfiling,
            stopProfiling,
            supportsProfiling,
            rootID,
            setRootID: setRootIDAndClearFiber,
            isCommitFilterEnabled,
            setIsCommitFilterEnabled,
            minCommitDuration,
            setMinCommitDuration,
            selectedCommitIndex,
            selectCommitIndex,
            selectedFiberID,
            selectedFiberName,
            selectFiber
          }), [selectedTabID, selectTab, didRecordCommits, isProcessingData, isProfiling, profilingData, startProfiling, stopProfiling, supportsProfiling, rootID, setRootID, setRootIDAndClearFiber, isCommitFilterEnabled, setIsCommitFilterEnabled, minCommitDuration, setMinCommitDuration, selectedCommitIndex, selectCommitIndex, selectedFiberID, selectedFiberName, selectFiber]);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(ProfilerContext.Provider, {
            value
          }, children);
        }
        ;
        function ProfilerSettings(_) {
          const {
            isCommitFilterEnabled,
            minCommitDuration,
            setIsCommitFilterEnabled,
            setMinCommitDuration
          } = (0, external_react_namespaceObject.useContext)(ProfilerContext);
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const recordChangeDescriptionsSubscription = (0, external_react_namespaceObject.useMemo)(() => ({
            getCurrentValue: () => store.recordChangeDescriptions,
            subscribe: (callback) => {
              store.addListener("recordChangeDescriptions", callback);
              return () => store.removeListener("recordChangeDescriptions", callback);
            }
          }), [store]);
          const recordChangeDescriptions = useSubscription(recordChangeDescriptionsSubscription);
          const updateRecordChangeDescriptions = (0, external_react_namespaceObject.useCallback)(({
            currentTarget
          }) => {
            store.recordChangeDescriptions = currentTarget.checked;
          }, [store]);
          const updateMinCommitDuration = (0, external_react_namespaceObject.useCallback)((event) => {
            const newValue = parseFloat(event.currentTarget.value);
            setMinCommitDuration(Number.isNaN(newValue) || newValue <= 0 ? 0 : newValue);
          }, [setMinCommitDuration]);
          const updateIsCommitFilterEnabled = (0, external_react_namespaceObject.useCallback)((event) => {
            const checked = event.currentTarget.checked;
            setIsCommitFilterEnabled(checked);
            if (checked) {
              if (minCommitDurationInputRef.current !== null) {
                minCommitDurationInputRef.current.focus();
              }
            }
          }, [setIsCommitFilterEnabled]);
          const minCommitDurationInputRef = (0, external_react_namespaceObject.useRef)(null);
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SettingsShared_default().Settings
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SettingsShared_default().Setting
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", null, /* @__PURE__ */ external_react_namespaceObject.createElement("input", {
            type: "checkbox",
            checked: recordChangeDescriptions,
            onChange: updateRecordChangeDescriptions
          }), " ", "Record why each component rendered while profiling.")), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SettingsShared_default().Setting
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", null, /* @__PURE__ */ external_react_namespaceObject.createElement("input", {
            checked: isCommitFilterEnabled,
            onChange: updateIsCommitFilterEnabled,
            type: "checkbox"
          }), " ", "Hide commits below"), " ", /* @__PURE__ */ external_react_namespaceObject.createElement("input", {
            className: SettingsShared_default().Input,
            onChange: updateMinCommitDuration,
            ref: minCommitDurationInputRef,
            type: "number",
            value: minCommitDuration
          }), " ", "(ms)"));
        }
        var SettingsModal = __webpack_require__(476);
        var SettingsModal_default = /* @__PURE__ */ __webpack_require__.n(SettingsModal);
        ;
        function SettingsModal_SettingsModal(_) {
          const {
            isModalShowing,
            setIsModalShowing
          } = (0, external_react_namespaceObject.useContext)(SettingsModalContext);
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const {
            profilerStore
          } = store;
          const isProfilingSubscription = (0, external_react_namespaceObject.useMemo)(() => ({
            getCurrentValue: () => profilerStore.isProfiling,
            subscribe: (callback) => {
              profilerStore.addListener("isProfiling", callback);
              return () => profilerStore.removeListener("isProfiling", callback);
            }
          }), [profilerStore]);
          const isProfiling = useSubscription(isProfilingSubscription);
          if (isProfiling && isModalShowing) {
            setIsModalShowing(false);
          }
          if (!isModalShowing) {
            return null;
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement(SettingsModalImpl, null);
        }
        function SettingsModalImpl(_) {
          const {
            setIsModalShowing
          } = (0, external_react_namespaceObject.useContext)(SettingsModalContext);
          const dismissModal = (0, external_react_namespaceObject.useCallback)(() => setIsModalShowing(false), [setIsModalShowing]);
          const [selectedTabID, selectTab] = useLocalStorage("React::DevTools::selectedSettingsTabID", "general");
          const modalRef = (0, external_react_namespaceObject.useRef)(null);
          useModalDismissSignal(modalRef, dismissModal);
          (0, external_react_namespaceObject.useEffect)(() => {
            if (modalRef.current !== null) {
              modalRef.current.focus();
            }
          }, [modalRef]);
          let view = null;
          switch (selectedTabID) {
            case "components":
              view = /* @__PURE__ */ external_react_namespaceObject.createElement(ComponentsSettings, null);
              break;
            case "debugging":
              view = /* @__PURE__ */ external_react_namespaceObject.createElement(DebuggingSettings, null);
              break;
            case "general":
              view = /* @__PURE__ */ external_react_namespaceObject.createElement(GeneralSettings, null);
              break;
            case "profiler":
              view = /* @__PURE__ */ external_react_namespaceObject.createElement(ProfilerSettings, null);
              break;
            default:
              break;
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SettingsModal_default().Background
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SettingsModal_default().Modal,
            ref: modalRef
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SettingsModal_default().Tabs
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(TabBar_TabBar, {
            currentTab: selectedTabID,
            id: "Settings",
            selectTab,
            tabs,
            type: "settings"
          }), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SettingsModal_default().Spacer
          }), /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            onClick: dismissModal,
            title: "Close settings dialog"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "close"
          }))), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SettingsModal_default().Content
          }, view)));
        }
        const tabs = [{
          id: "general",
          icon: "settings",
          label: "General"
        }, {
          id: "debugging",
          icon: "bug",
          label: "Debugging"
        }, {
          id: "components",
          icon: "components",
          label: "Components"
        }, {
          id: "profiler",
          icon: "profiler",
          label: "Profiler"
        }];
        var Components = __webpack_require__(407);
        var Components_default = /* @__PURE__ */ __webpack_require__.n(Components);
        ;
        function Components_Components(_) {
          const wrapperElementRef = (0, external_react_namespaceObject.useRef)(null);
          const resizeElementRef = (0, external_react_namespaceObject.useRef)(null);
          const [state2, dispatch] = (0, external_react_namespaceObject.useReducer)(resizeReducer, null, initResizeState);
          const {
            horizontalPercentage,
            verticalPercentage
          } = state2;
          (0, external_react_namespaceObject.useLayoutEffect)(() => {
            const resizeElement = resizeElementRef.current;
            setResizeCSSVariable(resizeElement, "horizontal", horizontalPercentage * 100);
            setResizeCSSVariable(resizeElement, "vertical", verticalPercentage * 100);
          }, []);
          (0, external_react_namespaceObject.useEffect)(() => {
            const timeoutID = setTimeout(() => {
              localStorageSetItem(LOCAL_STORAGE_KEY, JSON.stringify({
                horizontalPercentage,
                verticalPercentage
              }));
            }, 500);
            return () => clearTimeout(timeoutID);
          }, [horizontalPercentage, verticalPercentage]);
          const {
            isResizing
          } = state2;
          const onResizeStart = () => dispatch({
            type: "ACTION_SET_IS_RESIZING",
            payload: true
          });
          let onResize;
          let onResizeEnd;
          if (isResizing) {
            onResizeEnd = () => dispatch({
              type: "ACTION_SET_IS_RESIZING",
              payload: false
            });
            onResize = (event) => {
              const resizeElement = resizeElementRef.current;
              const wrapperElement = wrapperElementRef.current;
              if (!isResizing || wrapperElement === null || resizeElement === null) {
                return;
              }
              event.preventDefault();
              const orientation = getOrientation(wrapperElement);
              const {
                height,
                width,
                left,
                top
              } = wrapperElement.getBoundingClientRect();
              const currentMousePosition = orientation === "horizontal" ? event.clientX - left : event.clientY - top;
              const boundaryMin = MINIMUM_SIZE;
              const boundaryMax = orientation === "horizontal" ? width - MINIMUM_SIZE : height - MINIMUM_SIZE;
              const isMousePositionInBounds = currentMousePosition > boundaryMin && currentMousePosition < boundaryMax;
              if (isMousePositionInBounds) {
                const resizedElementDimension = orientation === "horizontal" ? width : height;
                const actionType = orientation === "horizontal" ? "ACTION_SET_HORIZONTAL_PERCENTAGE" : "ACTION_SET_VERTICAL_PERCENTAGE";
                const percentage = currentMousePosition / resizedElementDimension * 100;
                setResizeCSSVariable(resizeElement, orientation, percentage);
                dispatch({
                  type: actionType,
                  payload: currentMousePosition / resizedElementDimension
                });
              }
            };
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement(SettingsModalContextController, null, /* @__PURE__ */ external_react_namespaceObject.createElement(OwnersListContextController, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            ref: wrapperElementRef,
            className: Components_default().Components,
            onMouseMove: onResize,
            onMouseLeave: onResizeEnd,
            onMouseUp: onResizeEnd
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            ref: resizeElementRef,
            className: Components_default().TreeWrapper
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(Tree_Tree, null)), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Components_default().ResizeBarWrapper
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            onMouseDown: onResizeStart,
            className: Components_default().ResizeBar
          })), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Components_default().InspectedElementWrapper
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(NativeStyleContextController, null, /* @__PURE__ */ external_react_namespaceObject.createElement(InspectedElementErrorBoundaryWrapper, null, /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Suspense, {
            fallback: /* @__PURE__ */ external_react_namespaceObject.createElement(Components_Loading, null)
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(InspectedElementContextController, null, /* @__PURE__ */ external_react_namespaceObject.createElement(InspectedElementWrapper, null)))))), /* @__PURE__ */ external_react_namespaceObject.createElement(ModalDialog_ModalDialog, null), /* @__PURE__ */ external_react_namespaceObject.createElement(SettingsModal_SettingsModal, null)))));
        }
        function Components_Loading() {
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Components_default().Loading
          }, "Loading...");
        }
        const LOCAL_STORAGE_KEY = "React::DevTools::createResizeReducer";
        const VERTICAL_MODE_MAX_WIDTH = 600;
        const MINIMUM_SIZE = 50;
        function initResizeState() {
          let horizontalPercentage = 0.65;
          let verticalPercentage = 0.5;
          try {
            let data = localStorageGetItem(LOCAL_STORAGE_KEY);
            if (data != null) {
              data = JSON.parse(data);
              horizontalPercentage = data.horizontalPercentage;
              verticalPercentage = data.verticalPercentage;
            }
          } catch (error) {
          }
          return {
            horizontalPercentage,
            isResizing: false,
            verticalPercentage
          };
        }
        function resizeReducer(state2, action) {
          switch (action.type) {
            case "ACTION_SET_IS_RESIZING":
              return {
                ...state2,
                isResizing: action.payload
              };
            case "ACTION_SET_HORIZONTAL_PERCENTAGE":
              return {
                ...state2,
                horizontalPercentage: action.payload
              };
            case "ACTION_SET_VERTICAL_PERCENTAGE":
              return {
                ...state2,
                verticalPercentage: action.payload
              };
            default:
              return state2;
          }
        }
        function getOrientation(wrapperElement) {
          if (wrapperElement != null) {
            const {
              width
            } = wrapperElement.getBoundingClientRect();
            return width > VERTICAL_MODE_MAX_WIDTH ? "horizontal" : "vertical";
          }
          return null;
        }
        function setResizeCSSVariable(resizeElement, orientation, percentage) {
          if (resizeElement !== null && orientation !== null) {
            resizeElement.style.setProperty(`--${orientation}-resize-percentage`, `${percentage}%`);
          }
        }
        const views_Components_Components = portaledContent(Components_Components);
        ;
        const TimelineContext = /* @__PURE__ */ (0, external_react_namespaceObject.createContext)(null);
        TimelineContext.displayName = "TimelineContext";
        function TimelineContextController({
          children
        }) {
          const searchInputContainerRef = (0, external_react_namespaceObject.useRef)(null);
          const [file, setFile] = (0, external_react_namespaceObject.useState)(null);
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const isTimelineSupported = (0, external_react_namespaceObject.useSyncExternalStore)(function subscribe2(callback) {
            store.addListener("rootSupportsTimelineProfiling", callback);
            return function unsubscribe() {
              store.removeListener("rootSupportsTimelineProfiling", callback);
            };
          }, function getState() {
            return store.rootSupportsTimelineProfiling;
          });
          const inMemoryTimelineData = (0, external_react_namespaceObject.useSyncExternalStore)(function subscribe2(callback) {
            store.profilerStore.addListener("isProcessingData", callback);
            store.profilerStore.addListener("profilingData", callback);
            return function unsubscribe() {
              store.profilerStore.removeListener("isProcessingData", callback);
              store.profilerStore.removeListener("profilingData", callback);
            };
          }, function getState() {
            return store.profilerStore.profilingData?.timelineData || null;
          });
          const viewState = (0, external_react_namespaceObject.useMemo)(() => {
            const horizontalScrollStateChangeCallbacks = /* @__PURE__ */ new Set();
            const searchRegExpStateChangeCallbacks = /* @__PURE__ */ new Set();
            const horizontalScrollState = {
              offset: 0,
              length: 0
            };
            const state2 = {
              horizontalScrollState,
              onHorizontalScrollStateChange: (callback) => {
                horizontalScrollStateChangeCallbacks.add(callback);
              },
              onSearchRegExpStateChange: (callback) => {
                searchRegExpStateChangeCallbacks.add(callback);
              },
              searchRegExp: null,
              updateHorizontalScrollState: (scrollState) => {
                if (horizontalScrollState.offset === scrollState.offset && horizontalScrollState.length === scrollState.length) {
                  return;
                }
                horizontalScrollState.offset = scrollState.offset;
                horizontalScrollState.length = scrollState.length;
                horizontalScrollStateChangeCallbacks.forEach((callback) => {
                  callback(scrollState);
                });
              },
              updateSearchRegExpState: (searchRegExp) => {
                state2.searchRegExp = searchRegExp;
                searchRegExpStateChangeCallbacks.forEach((callback) => {
                  callback(searchRegExp);
                });
              },
              viewToMutableViewStateMap: /* @__PURE__ */ new Map()
            };
            return state2;
          }, [file]);
          const [selectedEvent, selectEvent] = (0, external_react_namespaceObject.useState)(null);
          const value = (0, external_react_namespaceObject.useMemo)(() => ({
            file,
            inMemoryTimelineData,
            isTimelineSupported,
            searchInputContainerRef,
            setFile,
            viewState,
            selectEvent,
            selectedEvent
          }), [file, inMemoryTimelineData, isTimelineSupported, setFile, viewState, selectEvent, selectedEvent]);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(TimelineContext.Provider, {
            value
          }, children);
        }
        ;
        function ClearProfilingDataButton() {
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const {
            didRecordCommits,
            isProfiling
          } = (0, external_react_namespaceObject.useContext)(ProfilerContext);
          const {
            file,
            setFile
          } = (0, external_react_namespaceObject.useContext)(TimelineContext);
          const {
            profilerStore
          } = store;
          const doesHaveInMemoryData = didRecordCommits;
          const doesHaveUserTimingData = file !== null;
          const clear = () => {
            if (doesHaveInMemoryData) {
              profilerStore.clear();
            }
            if (doesHaveUserTimingData) {
              setFile(null);
            }
          };
          return /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            disabled: isProfiling || !(doesHaveInMemoryData || doesHaveUserTimingData),
            onClick: clear,
            title: "Clear profiling data"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "clear"
          }));
        }
        var NoCommitData = __webpack_require__(4368);
        var NoCommitData_default = /* @__PURE__ */ __webpack_require__.n(NoCommitData);
        ;
        function NoCommitData_NoCommitData(_) {
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: NoCommitData_default().NoCommitData
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: NoCommitData_default().Header
          }, "There is no data matching the current filter criteria."), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: NoCommitData_default().FilterMessage
          }, "Try adjusting the commit filter in Profiler settings."));
        }
        ;
        const barWidthThreshold = 2;
        const maxBarWidth = 30;
        const minBarWidth = 5;
        var ChartNode = __webpack_require__(886);
        var ChartNode_default = /* @__PURE__ */ __webpack_require__.n(ChartNode);
        ;
        const minWidthToDisplay = 35;
        function ChartNode_ChartNode({
          color,
          height,
          isDimmed = false,
          label,
          onClick,
          onMouseEnter,
          onMouseLeave,
          onDoubleClick,
          textStyle,
          width,
          x,
          y
        }) {
          return /* @__PURE__ */ external_react_namespaceObject.createElement("g", {
            className: ChartNode_default().Group,
            transform: `translate(${x},${y})`
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("rect", {
            width,
            height,
            fill: color,
            onClick,
            onMouseEnter,
            onMouseLeave,
            onDoubleClick,
            className: ChartNode_default().Rect,
            style: {
              opacity: isDimmed ? 0.5 : 1
            }
          }), width >= minWidthToDisplay && /* @__PURE__ */ external_react_namespaceObject.createElement("foreignObject", {
            width,
            height,
            className: ChartNode_default().ForeignObject,
            style: {
              paddingLeft: x < 0 ? -x : 0,
              opacity: isDimmed ? 0.75 : 1,
              display: width < minWidthToDisplay ? "none" : "block"
            },
            y: 0
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: ChartNode_default().Div,
            style: textStyle
          }, label)));
        }
        ;
        function CommitFlamegraphListItem({
          data,
          index,
          style
        }) {
          const {
            chartData,
            onElementMouseEnter,
            onElementMouseLeave,
            scaleX,
            selectedChartNode,
            selectedChartNodeIndex,
            selectFiber,
            width
          } = data;
          const {
            renderPathNodes,
            maxSelfDuration,
            rows
          } = chartData;
          const {
            lineHeight
          } = (0, external_react_namespaceObject.useContext)(SettingsContext);
          const handleClick = (0, external_react_namespaceObject.useCallback)((event, id2, name) => {
            event.stopPropagation();
            selectFiber(id2, name);
          }, [selectFiber]);
          const handleMouseEnter = (nodeData) => {
            const {
              id: id2,
              name
            } = nodeData;
            onElementMouseEnter({
              id: id2,
              name
            });
          };
          const handleMouseLeave = () => {
            onElementMouseLeave();
          };
          const top = parseInt(style.top, 10);
          const row = rows[index];
          const selectedNodeOffset = scaleX(selectedChartNode !== null ? selectedChartNode.offset : 0, width);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, row.map((chartNode) => {
            const {
              didRender,
              id: id2,
              label,
              name,
              offset,
              selfDuration,
              treeBaseDuration
            } = chartNode;
            const nodeOffset = scaleX(offset, width);
            const nodeWidth = scaleX(treeBaseDuration, width);
            if (nodeWidth < barWidthThreshold) {
              return null;
            }
            if (nodeOffset + nodeWidth < selectedNodeOffset || nodeOffset > selectedNodeOffset + width) {
              return null;
            }
            let color = "url(#didNotRenderPattern)";
            let textColor = "var(--color-commit-did-not-render-pattern-text)";
            if (didRender) {
              color = getGradientColor(selfDuration / maxSelfDuration);
              textColor = "var(--color-commit-gradient-text)";
            } else if (renderPathNodes.has(id2)) {
              color = "var(--color-commit-did-not-render-fill)";
              textColor = "var(--color-commit-did-not-render-fill-text)";
            }
            return /* @__PURE__ */ external_react_namespaceObject.createElement(ChartNode_ChartNode, {
              color,
              height: lineHeight,
              isDimmed: index < selectedChartNodeIndex,
              key: id2,
              label,
              onClick: (event) => handleClick(event, id2, name),
              onMouseEnter: () => handleMouseEnter(chartNode),
              onMouseLeave: handleMouseLeave,
              textStyle: {
                color: textColor
              },
              width: nodeWidth,
              x: nodeOffset - selectedNodeOffset,
              y: top
            });
          }));
        }
        const Profiler_CommitFlamegraphListItem = /* @__PURE__ */ (0, external_react_namespaceObject.memo)(CommitFlamegraphListItem, areEqual);
        var WhatChanged = __webpack_require__(3582);
        var WhatChanged_default = /* @__PURE__ */ __webpack_require__.n(WhatChanged);
        ;
        function hookIndicesToString(indices) {
          const numbers = indices.map((value) => value + 1);
          switch (numbers.length) {
            case 0:
              return "No hooks changed";
            case 1:
              return `Hook ${numbers[0]} changed`;
            case 2:
              return `Hooks ${numbers[0]} and ${numbers[1]} changed`;
            default:
              return `Hooks ${numbers.slice(0, numbers.length - 1).join(", ")} and ${numbers[numbers.length - 1]} changed`;
          }
        }
        function WhatChanged_WhatChanged({
          fiberID
        }) {
          const {
            profilerStore
          } = (0, external_react_namespaceObject.useContext)(StoreContext);
          const {
            rootID,
            selectedCommitIndex
          } = (0, external_react_namespaceObject.useContext)(ProfilerContext);
          if (selectedCommitIndex === null) {
            return null;
          }
          const {
            changeDescriptions
          } = profilerStore.getCommitData(rootID, selectedCommitIndex);
          if (changeDescriptions === null) {
            return null;
          }
          const changeDescription = changeDescriptions.get(fiberID);
          if (changeDescription == null) {
            return null;
          }
          const {
            context,
            didHooksChange,
            hooks,
            isFirstMount,
            props: props2,
            state: state2
          } = changeDescription;
          if (isFirstMount) {
            return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              className: WhatChanged_default().Component
            }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
              className: WhatChanged_default().Label
            }, "Why did this render?"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              className: WhatChanged_default().Item
            }, "This is the first time the component rendered."));
          }
          const changes = [];
          if (context === true) {
            changes.push(/* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              key: "context",
              className: WhatChanged_default().Item
            }, "\u2022 Context changed"));
          } else if (typeof context === "object" && context !== null && context.length !== 0) {
            changes.push(/* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              key: "context",
              className: WhatChanged_default().Item
            }, "\u2022 Context changed:", context.map((key) => /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
              key,
              className: WhatChanged_default().Key
            }, key))));
          }
          if (didHooksChange) {
            if (Array.isArray(hooks)) {
              changes.push(/* @__PURE__ */ external_react_namespaceObject.createElement("div", {
                key: "hooks",
                className: WhatChanged_default().Item
              }, "\u2022 ", hookIndicesToString(hooks)));
            } else {
              changes.push(/* @__PURE__ */ external_react_namespaceObject.createElement("div", {
                key: "hooks",
                className: WhatChanged_default().Item
              }, "\u2022 Hooks changed"));
            }
          }
          if (props2 !== null && props2.length !== 0) {
            changes.push(/* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              key: "props",
              className: WhatChanged_default().Item
            }, "\u2022 Props changed:", props2.map((key) => /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
              key,
              className: WhatChanged_default().Key
            }, key))));
          }
          if (state2 !== null && state2.length !== 0) {
            changes.push(/* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              key: "state",
              className: WhatChanged_default().Item
            }, "\u2022 State changed:", state2.map((key) => /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
              key,
              className: WhatChanged_default().Key
            }, key))));
          }
          if (changes.length === 0) {
            changes.push(/* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              key: "nothing",
              className: WhatChanged_default().Item
            }, "The parent component rendered."));
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
            className: WhatChanged_default().Label
          }, "Why did this render?"), changes);
        }
        var HoveredFiberInfo = __webpack_require__(6078);
        var HoveredFiberInfo_default = /* @__PURE__ */ __webpack_require__.n(HoveredFiberInfo);
        ;
        function HoveredFiberInfo_HoveredFiberInfo({
          fiberData
        }) {
          const {
            profilerStore
          } = (0, external_react_namespaceObject.useContext)(StoreContext);
          const {
            rootID,
            selectedCommitIndex
          } = (0, external_react_namespaceObject.useContext)(ProfilerContext);
          const {
            id: id2,
            name
          } = fiberData;
          const {
            profilingCache
          } = profilerStore;
          if (rootID === null || selectedCommitIndex === null) {
            return null;
          }
          const commitIndices = profilingCache.getFiberCommits({
            fiberID: id2,
            rootID
          });
          const {
            nodes
          } = profilingCache.getCommitTree({
            rootID,
            commitIndex: selectedCommitIndex
          });
          const node = nodes.get(id2);
          let renderDurationInfo = null;
          let i2 = 0;
          for (i2 = 0; i2 < commitIndices.length; i2++) {
            const commitIndex = commitIndices[i2];
            if (selectedCommitIndex === commitIndex) {
              const {
                fiberActualDurations,
                fiberSelfDurations
              } = profilerStore.getCommitData(rootID, commitIndex);
              const actualDuration = fiberActualDurations.get(id2) || 0;
              const selfDuration = fiberSelfDurations.get(id2) || 0;
              renderDurationInfo = /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
                key: commitIndex,
                className: HoveredFiberInfo_default().CurrentCommit
              }, /* @__PURE__ */ external_react_namespaceObject.createElement("strong", null, "Duration:"), " ", formatDuration(selfDuration), "ms of", " ", formatDuration(actualDuration), "ms");
              break;
            }
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: HoveredFiberInfo_default().Toolbar
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: HoveredFiberInfo_default().Component
          }, name), node != null && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: HoveredFiberInfo_default().BadgesContainer
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(InspectedElementBadges_InspectedElementBadges, {
            hocDisplayNames: node.hocDisplayNames,
            compiledWithForget: node.compiledWithForget
          }), node.compiledWithForget && /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, "\u2728 This component has been auto-memoized by the React Compiler.")), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: HoveredFiberInfo_default().Content
          }, renderDurationInfo || /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, "Did not render."), /* @__PURE__ */ external_react_namespaceObject.createElement(WhatChanged_WhatChanged, {
            fiberID: id2
          }))));
        }
        var Profiler_Tooltip = __webpack_require__(1680);
        var Profiler_Tooltip_default = /* @__PURE__ */ __webpack_require__.n(Profiler_Tooltip);
        ;
        const initialTooltipState = {
          height: 0,
          mouseX: 0,
          mouseY: 0,
          width: 0
        };
        function Tooltip_Tooltip({
          children,
          className,
          label,
          style
        }) {
          const containerRef = (0, external_react_namespaceObject.useRef)(null);
          const tooltipRef = (0, external_react_namespaceObject.useRef)(null);
          const updateTooltipPosition = (event) => {
            const element = tooltipRef.current;
            if (element != null) {
              const mousePosition = getMousePosition(containerRef.current, event);
              const {
                left,
                top
              } = getTooltipPosition(element, mousePosition);
              element.style.left = left;
              element.style.top = top;
            }
          };
          const onMouseMove = (event) => {
            updateTooltipPosition(event);
          };
          const tooltipClassName = label === null ? Profiler_Tooltip_default().hidden : "";
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Profiler_Tooltip_default().Container,
            onMouseMove,
            ref: containerRef
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: `${Profiler_Tooltip_default().Tooltip} ${tooltipClassName} ${className || ""}`,
            ref: tooltipRef,
            style
          }, label), children);
        }
        const TOOLTIP_OFFSET = 5;
        function getTooltipPosition(element, mousePosition) {
          const {
            height,
            mouseX,
            mouseY,
            width
          } = mousePosition;
          let top = 0;
          let left = 0;
          if (mouseY + TOOLTIP_OFFSET + element.offsetHeight >= height) {
            if (mouseY - TOOLTIP_OFFSET - element.offsetHeight > 0) {
              top = `${mouseY - element.offsetHeight - TOOLTIP_OFFSET}px`;
            } else {
              top = "0px";
            }
          } else {
            top = `${mouseY + TOOLTIP_OFFSET}px`;
          }
          if (mouseX + TOOLTIP_OFFSET + element.offsetWidth >= width) {
            if (mouseX - TOOLTIP_OFFSET - element.offsetWidth > 0) {
              left = `${mouseX - element.offsetWidth - TOOLTIP_OFFSET}px`;
            } else {
              left = "0px";
            }
          } else {
            left = `${mouseX + TOOLTIP_OFFSET * 2}px`;
          }
          return {
            left,
            top
          };
        }
        function getMousePosition(relativeContainer, mouseEvent) {
          if (relativeContainer !== null) {
            let targetContainer = relativeContainer;
            while (targetContainer.parentElement != null) {
              if (targetContainer.style.position === "relative") {
                break;
              } else {
                targetContainer = targetContainer.parentElement;
              }
            }
            const {
              height,
              left,
              top,
              width
            } = targetContainer.getBoundingClientRect();
            const mouseX = mouseEvent.clientX - left;
            const mouseY = mouseEvent.clientY - top;
            return {
              height,
              mouseX,
              mouseY,
              width
            };
          } else {
            return initialTooltipState;
          }
        }
        var CommitFlamegraph = __webpack_require__(2350);
        var CommitFlamegraph_default = /* @__PURE__ */ __webpack_require__.n(CommitFlamegraph);
        ;
        function CommitFlamegraph_extends() {
          CommitFlamegraph_extends = Object.assign || function(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return CommitFlamegraph_extends.apply(this, arguments);
        }
        function CommitFlamegraphAutoSizer(_) {
          const {
            profilerStore
          } = (0, external_react_namespaceObject.useContext)(StoreContext);
          const {
            rootID,
            selectedCommitIndex,
            selectFiber
          } = (0, external_react_namespaceObject.useContext)(ProfilerContext);
          const {
            profilingCache
          } = profilerStore;
          const deselectCurrentFiber = (0, external_react_namespaceObject.useCallback)((event) => {
            event.stopPropagation();
            selectFiber(null, null);
          }, [selectFiber]);
          let commitTree = null;
          let chartData = null;
          if (selectedCommitIndex !== null) {
            commitTree = profilingCache.getCommitTree({
              commitIndex: selectedCommitIndex,
              rootID
            });
            chartData = profilingCache.getFlamegraphChartData({
              commitIndex: selectedCommitIndex,
              commitTree,
              rootID
            });
          }
          if (commitTree != null && chartData != null && chartData.depth > 0) {
            return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              className: CommitFlamegraph_default().Container,
              onClick: deselectCurrentFiber
            }, /* @__PURE__ */ external_react_namespaceObject.createElement(AutoSizer, null, ({
              height,
              width
            }) => (
              // Force Flow types to avoid checking for `null` here because there's no static proof that
              // by the time this render prop function is called, the values of the `let` variables have not changed.
              /* @__PURE__ */ external_react_namespaceObject.createElement(CommitFlamegraph_CommitFlamegraph, {
                chartData,
                commitTree,
                height,
                width
              })
            )));
          } else {
            return /* @__PURE__ */ external_react_namespaceObject.createElement(NoCommitData_NoCommitData, null);
          }
        }
        function CommitFlamegraph_CommitFlamegraph({
          chartData,
          commitTree,
          height,
          width
        }) {
          const [hoveredFiberData, setHoveredFiberData] = (0, external_react_namespaceObject.useState)(null);
          const {
            lineHeight
          } = (0, external_react_namespaceObject.useContext)(SettingsContext);
          const {
            selectFiber,
            selectedFiberID
          } = (0, external_react_namespaceObject.useContext)(ProfilerContext);
          const {
            highlightNativeElement,
            clearHighlightNativeElement
          } = useHighlightNativeElement();
          const selectedChartNodeIndex = (0, external_react_namespaceObject.useMemo)(() => {
            if (selectedFiberID === null) {
              return 0;
            }
            const depth = chartData.idToDepthMap.get(selectedFiberID);
            return depth !== void 0 ? depth - 1 : 0;
          }, [chartData, selectedFiberID]);
          const selectedChartNode = (0, external_react_namespaceObject.useMemo)(() => {
            if (selectedFiberID !== null) {
              return chartData.rows[selectedChartNodeIndex].find((chartNode) => chartNode.id === selectedFiberID) || null;
            }
            return null;
          }, [chartData, selectedFiberID, selectedChartNodeIndex]);
          const handleElementMouseEnter = (0, external_react_namespaceObject.useCallback)(({
            id: id2,
            name
          }) => {
            highlightNativeElement(id2);
            setHoveredFiberData({
              id: id2,
              name
            });
          }, [highlightNativeElement]);
          const handleElementMouseLeave = (0, external_react_namespaceObject.useCallback)(() => {
            clearHighlightNativeElement();
            setHoveredFiberData(null);
          }, [clearHighlightNativeElement]);
          const itemData = (0, external_react_namespaceObject.useMemo)(() => ({
            chartData,
            onElementMouseEnter: handleElementMouseEnter,
            onElementMouseLeave: handleElementMouseLeave,
            scaleX: scale(0, selectedChartNode !== null ? selectedChartNode.treeBaseDuration : chartData.baseDuration, 0, width),
            selectedChartNode,
            selectedChartNodeIndex,
            selectFiber,
            width
          }), [chartData, handleElementMouseEnter, handleElementMouseLeave, selectedChartNode, selectedChartNodeIndex, selectFiber, width]);
          const tooltipLabel = (0, external_react_namespaceObject.useMemo)(() => hoveredFiberData !== null ? /* @__PURE__ */ external_react_namespaceObject.createElement(HoveredFiberInfo_HoveredFiberInfo, {
            fiberData: hoveredFiberData
          }) : null, [hoveredFiberData]);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(Tooltip_Tooltip, {
            label: tooltipLabel
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(FixedSizeList, {
            height,
            innerElementType: CommitFlamegraph_InnerElementType,
            itemCount: chartData.depth,
            itemData,
            itemSize: lineHeight,
            width
          }, Profiler_CommitFlamegraphListItem));
        }
        const CommitFlamegraph_InnerElementType = /* @__PURE__ */ (0, external_react_namespaceObject.forwardRef)(({
          children,
          ...rest
        }, ref) => /* @__PURE__ */ external_react_namespaceObject.createElement("svg", CommitFlamegraph_extends({
          ref
        }, rest), /* @__PURE__ */ external_react_namespaceObject.createElement("defs", null, /* @__PURE__ */ external_react_namespaceObject.createElement("pattern", {
          id: "didNotRenderPattern",
          patternUnits: "userSpaceOnUse",
          width: "4",
          height: "4"
        }, /* @__PURE__ */ external_react_namespaceObject.createElement("path", {
          d: "M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2",
          className: CommitFlamegraph_default().PatternPath
        }))), children));
        ;
        function CommitRankedListItem({
          data,
          index,
          style
        }) {
          const {
            chartData,
            onElementMouseEnter,
            onElementMouseLeave,
            scaleX,
            selectedFiberIndex,
            selectFiber,
            width
          } = data;
          const node = chartData.nodes[index];
          const {
            lineHeight
          } = (0, external_react_namespaceObject.useContext)(SettingsContext);
          const handleClick = (0, external_react_namespaceObject.useCallback)((event) => {
            event.stopPropagation();
            const {
              id: id2,
              name
            } = node;
            selectFiber(id2, name);
          }, [node, selectFiber]);
          const handleMouseEnter = () => {
            const {
              id: id2,
              name
            } = node;
            onElementMouseEnter({
              id: id2,
              name
            });
          };
          const handleMouseLeave = () => {
            onElementMouseLeave();
          };
          const top = parseInt(style.top, 10);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(ChartNode_ChartNode, {
            color: getGradientColor(node.value / chartData.maxValue),
            height: lineHeight,
            isDimmed: index < selectedFiberIndex,
            key: node.id,
            label: node.label,
            onClick: handleClick,
            onMouseEnter: handleMouseEnter,
            onMouseLeave: handleMouseLeave,
            width: Math.max(minBarWidth, scaleX(node.value, width)),
            x: 0,
            y: top
          });
        }
        const Profiler_CommitRankedListItem = /* @__PURE__ */ (0, external_react_namespaceObject.memo)(CommitRankedListItem, areEqual);
        var CommitRanked = __webpack_require__(5292);
        var CommitRanked_default = /* @__PURE__ */ __webpack_require__.n(CommitRanked);
        ;
        function CommitRankedAutoSizer(_) {
          const {
            profilerStore
          } = (0, external_react_namespaceObject.useContext)(StoreContext);
          const {
            rootID,
            selectedCommitIndex,
            selectFiber
          } = (0, external_react_namespaceObject.useContext)(ProfilerContext);
          const {
            profilingCache
          } = profilerStore;
          const deselectCurrentFiber = (0, external_react_namespaceObject.useCallback)((event) => {
            event.stopPropagation();
            selectFiber(null, null);
          }, [selectFiber]);
          let commitTree = null;
          let chartData = null;
          if (selectedCommitIndex !== null) {
            commitTree = profilingCache.getCommitTree({
              commitIndex: selectedCommitIndex,
              rootID
            });
            chartData = profilingCache.getRankedChartData({
              commitIndex: selectedCommitIndex,
              commitTree,
              rootID
            });
          }
          if (commitTree != null && chartData != null && chartData.nodes.length > 0) {
            return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              className: CommitRanked_default().Container,
              onClick: deselectCurrentFiber
            }, /* @__PURE__ */ external_react_namespaceObject.createElement(AutoSizer, null, ({
              height,
              width
            }) => /* @__PURE__ */ external_react_namespaceObject.createElement(CommitRanked_CommitRanked, {
              chartData,
              commitTree,
              height,
              width
            })));
          } else {
            return /* @__PURE__ */ external_react_namespaceObject.createElement(NoCommitData_NoCommitData, null);
          }
        }
        function CommitRanked_CommitRanked({
          chartData,
          commitTree,
          height,
          width
        }) {
          const [hoveredFiberData, setHoveredFiberData] = (0, external_react_namespaceObject.useState)(null);
          const {
            lineHeight
          } = (0, external_react_namespaceObject.useContext)(SettingsContext);
          const {
            selectedFiberID,
            selectFiber
          } = (0, external_react_namespaceObject.useContext)(ProfilerContext);
          const {
            highlightNativeElement,
            clearHighlightNativeElement
          } = useHighlightNativeElement();
          const selectedFiberIndex = (0, external_react_namespaceObject.useMemo)(() => getNodeIndex(chartData, selectedFiberID), [chartData, selectedFiberID]);
          const handleElementMouseEnter = (0, external_react_namespaceObject.useCallback)(({
            id: id2,
            name
          }) => {
            highlightNativeElement(id2);
            setHoveredFiberData({
              id: id2,
              name
            });
          }, [highlightNativeElement]);
          const handleElementMouseLeave = (0, external_react_namespaceObject.useCallback)(() => {
            clearHighlightNativeElement();
            setHoveredFiberData(null);
          }, [clearHighlightNativeElement]);
          const itemData = (0, external_react_namespaceObject.useMemo)(() => ({
            chartData,
            onElementMouseEnter: handleElementMouseEnter,
            onElementMouseLeave: handleElementMouseLeave,
            scaleX: scale(0, chartData.nodes[selectedFiberIndex].value, 0, width),
            selectedFiberID,
            selectedFiberIndex,
            selectFiber,
            width
          }), [chartData, handleElementMouseEnter, handleElementMouseLeave, selectedFiberID, selectedFiberIndex, selectFiber, width]);
          const tooltipLabel = (0, external_react_namespaceObject.useMemo)(() => hoveredFiberData !== null ? /* @__PURE__ */ external_react_namespaceObject.createElement(HoveredFiberInfo_HoveredFiberInfo, {
            fiberData: hoveredFiberData
          }) : null, [hoveredFiberData]);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(Tooltip_Tooltip, {
            label: tooltipLabel
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(FixedSizeList, {
            height,
            innerElementType: "svg",
            itemCount: chartData.nodes.length,
            itemData,
            itemSize: lineHeight,
            width
          }, Profiler_CommitRankedListItem));
        }
        const getNodeIndex = (chartData, id2) => {
          if (id2 === null) {
            return 0;
          }
          const {
            nodes
          } = chartData;
          for (let index = 0; index < nodes.length; index++) {
            if (nodes[index].id === id2) {
              return index;
            }
          }
          return 0;
        };
        var RootSelector = __webpack_require__(4594);
        var RootSelector_default = /* @__PURE__ */ __webpack_require__.n(RootSelector);
        ;
        function RootSelector_RootSelector(_) {
          const {
            profilingData,
            rootID,
            setRootID
          } = (0, external_react_namespaceObject.useContext)(ProfilerContext);
          const options = [];
          if (profilingData !== null) {
            profilingData.dataForRoots.forEach((dataForRoot, id2) => {
              options.push(/* @__PURE__ */ external_react_namespaceObject.createElement("option", {
                key: id2,
                value: id2
              }, dataForRoot.displayName));
            });
          }
          const handleChange = (0, external_react_namespaceObject.useCallback)(({
            currentTarget
          }) => {
            setRootID(parseInt(currentTarget.value, 10));
          }, [setRootID]);
          if (profilingData === null || profilingData.dataForRoots.size <= 1) {
            return null;
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: RootSelector_default().Spacer
          }), /* @__PURE__ */ external_react_namespaceObject.createElement("select", {
            value: rootID,
            onChange: handleChange
          }, options));
        }
        var RecordToggle = __webpack_require__(1909);
        var RecordToggle_default = /* @__PURE__ */ __webpack_require__.n(RecordToggle);
        ;
        function RecordToggle_RecordToggle({
          disabled
        }) {
          const {
            isProfiling,
            startProfiling,
            stopProfiling
          } = (0, external_react_namespaceObject.useContext)(ProfilerContext);
          let className = RecordToggle_default().InactiveRecordToggle;
          if (disabled) {
            className = RecordToggle_default().DisabledRecordToggle;
          } else if (isProfiling) {
            className = RecordToggle_default().ActiveRecordToggle;
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            className,
            disabled,
            onClick: isProfiling ? stopProfiling : startProfiling,
            testName: "ProfilerToggleButton",
            title: isProfiling ? "Stop profiling" : "Start profiling"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "record"
          }));
        }
        var Profiler = __webpack_require__(6670);
        var Profiler_default = /* @__PURE__ */ __webpack_require__.n(Profiler);
        ;
        function NoProfilingData() {
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Profiler_default().Column
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Profiler_default().Header
          }, "No profiling data has been recorded."), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Profiler_default().Row
          }, "Click the record button ", /* @__PURE__ */ external_react_namespaceObject.createElement(RecordToggle_RecordToggle, null), " to start recording."), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: `${Profiler_default().Row} ${Profiler_default().LearnMoreRow}`
          }, "Click", " ", /* @__PURE__ */ external_react_namespaceObject.createElement("a", {
            className: Profiler_default().LearnMoreLink,
            href: "https://fb.me/react-devtools-profiling",
            rel: "noopener noreferrer",
            target: "_blank"
          }, "here"), " ", "to learn more about profiling."));
        }
        ;
        function RecordingInProgress() {
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Profiler_default().Column
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Profiler_default().Header
          }, "Profiling is in progress..."), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Profiler_default().Row
          }, "Click the record button ", /* @__PURE__ */ external_react_namespaceObject.createElement(RecordToggle_RecordToggle, null), " to stop recording."));
        }
        ;
        const DPR = window.devicePixelRatio || 1;
        const LABEL_SIZE = 80;
        const MARKER_HEIGHT = 20;
        const MARKER_TICK_HEIGHT = 8;
        const FONT_SIZE = 10;
        const MARKER_TEXT_PADDING = 8;
        const COLOR_HOVER_DIM_DELTA = 5;
        const TOP_ROW_PADDING = 4;
        const NATIVE_EVENT_HEIGHT = 14;
        const SUSPENSE_EVENT_HEIGHT = 14;
        const PENDING_SUSPENSE_EVENT_SIZE = 8;
        const REACT_EVENT_DIAMETER = 6;
        const USER_TIMING_MARK_SIZE = 8;
        const REACT_MEASURE_HEIGHT = 14;
        const BORDER_SIZE = 1 / DPR;
        const FLAMECHART_FRAME_HEIGHT = 14;
        const TEXT_PADDING = 3;
        const SNAPSHOT_SCRUBBER_SIZE = 3;
        const INTERVAL_TIMES = [1, 2, 5, 10, 20, 50, 100, 200, 500, 1e3, 2e3, 5e3];
        const MIN_INTERVAL_SIZE_PX = 70;
        let COLORS = {
          BACKGROUND: "",
          INTERNAL_MODULE_FRAME: "",
          INTERNAL_MODULE_FRAME_HOVER: "",
          INTERNAL_MODULE_FRAME_TEXT: "",
          NATIVE_EVENT: "",
          NATIVE_EVENT_HOVER: "",
          NETWORK_PRIMARY: "",
          NETWORK_PRIMARY_HOVER: "",
          NETWORK_SECONDARY: "",
          NETWORK_SECONDARY_HOVER: "",
          PRIORITY_BACKGROUND: "",
          PRIORITY_BORDER: "",
          PRIORITY_LABEL: "",
          USER_TIMING: "",
          USER_TIMING_HOVER: "",
          REACT_IDLE: "",
          REACT_IDLE_HOVER: "",
          REACT_RENDER: "",
          REACT_RENDER_HOVER: "",
          REACT_RENDER_TEXT: "",
          REACT_COMMIT: "",
          REACT_COMMIT_HOVER: "",
          REACT_COMMIT_TEXT: "",
          REACT_LAYOUT_EFFECTS: "",
          REACT_LAYOUT_EFFECTS_HOVER: "",
          REACT_LAYOUT_EFFECTS_TEXT: "",
          REACT_PASSIVE_EFFECTS: "",
          REACT_PASSIVE_EFFECTS_HOVER: "",
          REACT_PASSIVE_EFFECTS_TEXT: "",
          REACT_RESIZE_BAR: "",
          REACT_RESIZE_BAR_ACTIVE: "",
          REACT_RESIZE_BAR_BORDER: "",
          REACT_RESIZE_BAR_DOT: "",
          REACT_SCHEDULE: "",
          REACT_SCHEDULE_HOVER: "",
          REACT_SUSPENSE_REJECTED_EVENT: "",
          REACT_SUSPENSE_REJECTED_EVENT_HOVER: "",
          REACT_SUSPENSE_RESOLVED_EVENT: "",
          REACT_SUSPENSE_RESOLVED_EVENT_HOVER: "",
          REACT_SUSPENSE_UNRESOLVED_EVENT: "",
          REACT_SUSPENSE_UNRESOLVED_EVENT_HOVER: "",
          REACT_THROWN_ERROR: "",
          REACT_THROWN_ERROR_HOVER: "",
          REACT_WORK_BORDER: "",
          SCROLL_CARET: "",
          SCRUBBER_BACKGROUND: "",
          SCRUBBER_BORDER: "",
          SEARCH_RESULT_FILL: "",
          TEXT_COLOR: "",
          TEXT_DIM_COLOR: "",
          TIME_MARKER_LABEL: "",
          WARNING_BACKGROUND: "",
          WARNING_BACKGROUND_HOVER: "",
          WARNING_TEXT: "",
          WARNING_TEXT_INVERED: ""
        };
        function updateColorsToMatchTheme(element) {
          const computedStyle = getComputedStyle(element);
          if (computedStyle.getPropertyValue("--color-background") == null) {
            return false;
          }
          COLORS = {
            BACKGROUND: computedStyle.getPropertyValue("--color-background"),
            INTERNAL_MODULE_FRAME: computedStyle.getPropertyValue("--color-timeline-internal-module"),
            INTERNAL_MODULE_FRAME_HOVER: computedStyle.getPropertyValue("--color-timeline-internal-module-hover"),
            INTERNAL_MODULE_FRAME_TEXT: computedStyle.getPropertyValue("--color-timeline-internal-module-text"),
            NATIVE_EVENT: computedStyle.getPropertyValue("--color-timeline-native-event"),
            NATIVE_EVENT_HOVER: computedStyle.getPropertyValue("--color-timeline-native-event-hover"),
            NETWORK_PRIMARY: computedStyle.getPropertyValue("--color-timeline-network-primary"),
            NETWORK_PRIMARY_HOVER: computedStyle.getPropertyValue("--color-timeline-network-primary-hover"),
            NETWORK_SECONDARY: computedStyle.getPropertyValue("--color-timeline-network-secondary"),
            NETWORK_SECONDARY_HOVER: computedStyle.getPropertyValue("--color-timeline-network-secondary-hover"),
            PRIORITY_BACKGROUND: computedStyle.getPropertyValue("--color-timeline-priority-background"),
            PRIORITY_BORDER: computedStyle.getPropertyValue("--color-timeline-priority-border"),
            PRIORITY_LABEL: computedStyle.getPropertyValue("--color-text"),
            USER_TIMING: computedStyle.getPropertyValue("--color-timeline-user-timing"),
            USER_TIMING_HOVER: computedStyle.getPropertyValue("--color-timeline-user-timing-hover"),
            REACT_IDLE: computedStyle.getPropertyValue("--color-timeline-react-idle"),
            REACT_IDLE_HOVER: computedStyle.getPropertyValue("--color-timeline-react-idle-hover"),
            REACT_RENDER: computedStyle.getPropertyValue("--color-timeline-react-render"),
            REACT_RENDER_HOVER: computedStyle.getPropertyValue("--color-timeline-react-render-hover"),
            REACT_RENDER_TEXT: computedStyle.getPropertyValue("--color-timeline-react-render-text"),
            REACT_COMMIT: computedStyle.getPropertyValue("--color-timeline-react-commit"),
            REACT_COMMIT_HOVER: computedStyle.getPropertyValue("--color-timeline-react-commit-hover"),
            REACT_COMMIT_TEXT: computedStyle.getPropertyValue("--color-timeline-react-commit-text"),
            REACT_LAYOUT_EFFECTS: computedStyle.getPropertyValue("--color-timeline-react-layout-effects"),
            REACT_LAYOUT_EFFECTS_HOVER: computedStyle.getPropertyValue("--color-timeline-react-layout-effects-hover"),
            REACT_LAYOUT_EFFECTS_TEXT: computedStyle.getPropertyValue("--color-timeline-react-layout-effects-text"),
            REACT_PASSIVE_EFFECTS: computedStyle.getPropertyValue("--color-timeline-react-passive-effects"),
            REACT_PASSIVE_EFFECTS_HOVER: computedStyle.getPropertyValue("--color-timeline-react-passive-effects-hover"),
            REACT_PASSIVE_EFFECTS_TEXT: computedStyle.getPropertyValue("--color-timeline-react-passive-effects-text"),
            REACT_RESIZE_BAR: computedStyle.getPropertyValue("--color-resize-bar"),
            REACT_RESIZE_BAR_ACTIVE: computedStyle.getPropertyValue("--color-resize-bar-active"),
            REACT_RESIZE_BAR_BORDER: computedStyle.getPropertyValue("--color-resize-bar-border"),
            REACT_RESIZE_BAR_DOT: computedStyle.getPropertyValue("--color-resize-bar-dot"),
            REACT_SCHEDULE: computedStyle.getPropertyValue("--color-timeline-react-schedule"),
            REACT_SCHEDULE_HOVER: computedStyle.getPropertyValue("--color-timeline-react-schedule-hover"),
            REACT_SUSPENSE_REJECTED_EVENT: computedStyle.getPropertyValue("--color-timeline-react-suspense-rejected"),
            REACT_SUSPENSE_REJECTED_EVENT_HOVER: computedStyle.getPropertyValue("--color-timeline-react-suspense-rejected-hover"),
            REACT_SUSPENSE_RESOLVED_EVENT: computedStyle.getPropertyValue("--color-timeline-react-suspense-resolved"),
            REACT_SUSPENSE_RESOLVED_EVENT_HOVER: computedStyle.getPropertyValue("--color-timeline-react-suspense-resolved-hover"),
            REACT_SUSPENSE_UNRESOLVED_EVENT: computedStyle.getPropertyValue("--color-timeline-react-suspense-unresolved"),
            REACT_SUSPENSE_UNRESOLVED_EVENT_HOVER: computedStyle.getPropertyValue("--color-timeline-react-suspense-unresolved-hover"),
            REACT_THROWN_ERROR: computedStyle.getPropertyValue("--color-timeline-thrown-error"),
            REACT_THROWN_ERROR_HOVER: computedStyle.getPropertyValue("--color-timeline-thrown-error-hover"),
            REACT_WORK_BORDER: computedStyle.getPropertyValue("--color-timeline-react-work-border"),
            SCROLL_CARET: computedStyle.getPropertyValue("--color-scroll-caret"),
            SCRUBBER_BACKGROUND: computedStyle.getPropertyValue("--color-timeline-react-suspense-rejected"),
            SEARCH_RESULT_FILL: computedStyle.getPropertyValue("--color-timeline-react-suspense-rejected"),
            SCRUBBER_BORDER: computedStyle.getPropertyValue("--color-timeline-text-color"),
            TEXT_COLOR: computedStyle.getPropertyValue("--color-timeline-text-color"),
            TEXT_DIM_COLOR: computedStyle.getPropertyValue("--color-timeline-text-dim-color"),
            TIME_MARKER_LABEL: computedStyle.getPropertyValue("--color-text"),
            WARNING_BACKGROUND: computedStyle.getPropertyValue("--color-warning-background"),
            WARNING_BACKGROUND_HOVER: computedStyle.getPropertyValue("--color-warning-background-hover"),
            WARNING_TEXT: computedStyle.getPropertyValue("--color-warning-text-color"),
            WARNING_TEXT_INVERED: computedStyle.getPropertyValue("--color-warning-text-color-inverted")
          };
          return true;
        }
        ;
        function memoize_one_esm_areInputsEqual(newInputs, lastInputs) {
          if (newInputs.length !== lastInputs.length) {
            return false;
          }
          for (var i2 = 0; i2 < newInputs.length; i2++) {
            if (newInputs[i2] !== lastInputs[i2]) {
              return false;
            }
          }
          return true;
        }
        function memoize_one_esm_memoizeOne(resultFn, isEqual2) {
          if (isEqual2 === void 0) {
            isEqual2 = memoize_one_esm_areInputsEqual;
          }
          var lastThis;
          var lastArgs = [];
          var lastResult;
          var calledOnce = false;
          function memoized() {
            var newArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              newArgs[_i] = arguments[_i];
            }
            if (calledOnce && lastThis === this && isEqual2(newArgs, lastArgs)) {
              return lastResult;
            }
            lastResult = resultFn.apply(this, newArgs);
            calledOnce = true;
            lastThis = this;
            lastArgs = newArgs;
            return lastResult;
          }
          return memoized;
        }
        const dist_memoize_one_esm = memoize_one_esm_memoizeOne;
        ;
        const zeroPoint = Object.freeze({
          x: 0,
          y: 0
        });
        const zeroSize = Object.freeze({
          width: 0,
          height: 0
        });
        const zeroRect = Object.freeze({
          origin: zeroPoint,
          size: zeroSize
        });
        function pointEqualToPoint(point1, point2) {
          return point1.x === point2.x && point1.y === point2.y;
        }
        function sizeEqualToSize(size1, size2) {
          return size1.width === size2.width && size1.height === size2.height;
        }
        function rectEqualToRect(rect1, rect2) {
          return pointEqualToPoint(rect1.origin, rect2.origin) && sizeEqualToSize(rect1.size, rect2.size);
        }
        function sizeIsValid({
          width,
          height
        }) {
          return width >= 0 && height >= 0;
        }
        function sizeIsEmpty({
          width,
          height
        }) {
          return width <= 0 || height <= 0;
        }
        function rectToBox(rect) {
          const top = rect.origin.y;
          const right = rect.origin.x + rect.size.width;
          const bottom = rect.origin.y + rect.size.height;
          const left = rect.origin.x;
          return [top, right, bottom, left];
        }
        function boxToRect(box) {
          const [top, right, bottom, left] = box;
          return {
            origin: {
              x: left,
              y: top
            },
            size: {
              width: right - left,
              height: bottom - top
            }
          };
        }
        function rectIntersectsRect(rect1, rect2) {
          if (rect1.size.width === 0 || rect1.size.height === 0 || rect2.size.width === 0 || rect2.size.height === 0) {
            return false;
          }
          const [top1, right1, bottom1, left1] = rectToBox(rect1);
          const [top2, right2, bottom2, left2] = rectToBox(rect2);
          return !(right1 < left2 || right2 < left1 || bottom1 < top2 || bottom2 < top1);
        }
        function intersectionOfRects(rect1, rect2) {
          const [top1, right1, bottom1, left1] = rectToBox(rect1);
          const [top2, right2, bottom2, left2] = rectToBox(rect2);
          return boxToRect([Math.max(top1, top2), Math.min(right1, right2), Math.min(bottom1, bottom2), Math.max(left1, left2)]);
        }
        function rectContainsPoint({
          x,
          y
        }, rect) {
          const [top, right, bottom, left] = rectToBox(rect);
          return left <= x && x <= right && top <= y && y <= bottom;
        }
        function unionOfRects(...rects) {
          if (rects.length === 0) {
            return zeroRect;
          }
          const [firstRect, ...remainingRects] = rects;
          const boxUnion = remainingRects.map(rectToBox).reduce((intermediateUnion, nextBox) => {
            const [unionTop, unionRight, unionBottom, unionLeft] = intermediateUnion;
            const [nextTop, nextRight, nextBottom, nextLeft] = nextBox;
            return [Math.min(unionTop, nextTop), Math.max(unionRight, nextRight), Math.max(unionBottom, nextBottom), Math.min(unionLeft, nextLeft)];
          }, rectToBox(firstRect));
          return boxToRect(boxUnion);
        }
        ;
        function Surface_defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function configureRetinaCanvas(canvas, height, width) {
          canvas.width = width * DPR;
          canvas.height = height * DPR;
          canvas.style.width = `${width}px`;
          canvas.style.height = `${height}px`;
        }
        const getCanvasContext = dist_memoize_one_esm((canvas, height, width, scaleCanvas = true) => {
          const context = canvas.getContext("2d", {
            alpha: false
          });
          if (scaleCanvas) {
            configureRetinaCanvas(canvas, height, width);
            context.scale(DPR, DPR);
          }
          return context;
        });
        class Surface {
          constructor(resetHoveredEvent) {
            Surface_defineProperty(this, "_viewRefs", {
              activeView: null,
              hoveredView: null
            });
            this._resetHoveredEvent = resetHoveredEvent;
          }
          hasActiveView() {
            return this._viewRefs.activeView !== null;
          }
          setCanvas(canvas, canvasSize) {
            this._context = getCanvasContext(canvas, canvasSize.height, canvasSize.width);
            this._canvasSize = canvasSize;
            if (this.rootView) {
              this.rootView.setNeedsDisplay();
            }
          }
          displayIfNeeded() {
            const {
              rootView,
              _canvasSize,
              _context
            } = this;
            if (!rootView || !_context || !_canvasSize) {
              return;
            }
            rootView.setFrame({
              origin: zeroPoint,
              size: _canvasSize
            });
            rootView.setVisibleArea({
              origin: zeroPoint,
              size: _canvasSize
            });
            rootView.displayIfNeeded(_context, this._viewRefs);
          }
          getCurrentCursor() {
            const {
              activeView,
              hoveredView
            } = this._viewRefs;
            if (activeView !== null) {
              return activeView.currentCursor;
            } else if (hoveredView !== null) {
              return hoveredView.currentCursor;
            } else {
              return null;
            }
          }
          handleInteraction(interaction) {
            const rootView = this.rootView;
            if (rootView != null) {
              const viewRefs = this._viewRefs;
              switch (interaction.type) {
                case "mousemove":
                case "wheel-control":
                case "wheel-meta":
                case "wheel-plain":
                case "wheel-shift":
                  const hoveredView = viewRefs.hoveredView;
                  viewRefs.hoveredView = null;
                  rootView.handleInteractionAndPropagateToSubviews(interaction, viewRefs);
                  if (hoveredView !== null && viewRefs.hoveredView === null) {
                    this._resetHoveredEvent();
                  }
                  break;
                default:
                  rootView.handleInteractionAndPropagateToSubviews(interaction, viewRefs);
                  break;
              }
            }
          }
        }
        ;
        function viewToLayoutInfo(view) {
          return {
            view,
            frame: view.frame
          };
        }
        function viewsToLayout(views) {
          return views.map(viewToLayoutInfo);
        }
        function collapseLayoutIntoViews(layout) {
          layout.forEach(({
            view,
            frame
          }) => view.setFrame(frame));
        }
        const noopLayout = (layout) => layout;
        const layeredLayout = (layout, containerFrame) => {
          return layout.map((layoutInfo) => ({
            ...layoutInfo,
            frame: containerFrame
          }));
        };
        const verticallyStackedLayout = (layout, containerFrame) => {
          let currentY = containerFrame.origin.y;
          return layout.map((layoutInfo) => {
            const desiredSize = layoutInfo.view.desiredSize();
            const height = desiredSize ? desiredSize.height : containerFrame.origin.y + containerFrame.size.height - currentY;
            const proposedFrame = {
              origin: {
                x: containerFrame.origin.x,
                y: currentY
              },
              size: {
                width: containerFrame.size.width,
                height
              }
            };
            currentY += height;
            return {
              ...layoutInfo,
              frame: proposedFrame
            };
          });
        };
        const alignToContainerXLayout = (layout, containerFrame) => {
          return layout.map((layoutInfo) => ({
            ...layoutInfo,
            frame: {
              origin: {
                x: containerFrame.origin.x,
                y: layoutInfo.frame.origin.y
              },
              size: layoutInfo.frame.size
            }
          }));
        };
        const alignToContainerYLayout = (layout, containerFrame) => {
          return layout.map((layoutInfo) => ({
            ...layoutInfo,
            frame: {
              origin: {
                x: layoutInfo.frame.origin.x,
                y: containerFrame.origin.y
              },
              size: layoutInfo.frame.size
            }
          }));
        };
        const containerWidthLayout = (layout, containerFrame) => {
          return layout.map((layoutInfo) => ({
            ...layoutInfo,
            frame: {
              origin: layoutInfo.frame.origin,
              size: {
                width: containerFrame.size.width,
                height: layoutInfo.frame.size.height
              }
            }
          }));
        };
        const containerHeightLayout = (layout, containerFrame) => {
          return layout.map((layoutInfo) => ({
            ...layoutInfo,
            frame: {
              origin: layoutInfo.frame.origin,
              size: {
                width: layoutInfo.frame.size.width,
                height: containerFrame.size.height
              }
            }
          }));
        };
        const desiredHeightLayout = (layout) => {
          return layout.map((layoutInfo) => {
            const desiredSize = layoutInfo.view.desiredSize();
            const height = desiredSize ? desiredSize.height : 0;
            return {
              ...layoutInfo,
              frame: {
                origin: layoutInfo.frame.origin,
                size: {
                  width: layoutInfo.frame.size.width,
                  height
                }
              }
            };
          });
        };
        const uniformMaxSubviewHeightLayout = (layout) => {
          const maxHeight = Math.max(...layout.map((layoutInfo) => layoutInfo.frame.size.height));
          return layout.map((layoutInfo) => ({
            ...layoutInfo,
            frame: {
              origin: layoutInfo.frame.origin,
              size: {
                width: layoutInfo.frame.size.width,
                height: maxHeight
              }
            }
          }));
        };
        const atLeastContainerHeightLayout = (layout, containerFrame) => {
          return layout.map((layoutInfo) => ({
            ...layoutInfo,
            frame: {
              origin: layoutInfo.frame.origin,
              size: {
                width: layoutInfo.frame.size.width,
                height: Math.max(containerFrame.size.height, layoutInfo.frame.size.height)
              }
            }
          }));
        };
        function createComposedLayout(...layouters) {
          if (layouters.length === 0) {
            return noopLayout;
          }
          const composedLayout = (layout, containerFrame) => {
            return layouters.reduce((intermediateLayout, layouter) => layouter(intermediateLayout, containerFrame), layout);
          };
          return composedLayout;
        }
        ;
        function View_defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        class View {
          /**
           * Whether this view needs to be drawn.
           *
           * NOTE: Do not set directly! Use `setNeedsDisplay`.
           *
           * @see setNeedsDisplay
           * @private
           */
          /**
           * Whether the hierarchy below this view has subviews that need display.
           *
           * NOTE: Do not set directly! Use `setSubviewsNeedDisplay`.
           *
           * @see setSubviewsNeedDisplay
           * @private
           */
          constructor(surface, frame, layouter = noopLayout, visibleArea = frame, backgroundColor = null) {
            View_defineProperty(this, "currentCursor", null);
            View_defineProperty(this, "subviews", []);
            View_defineProperty(this, "_needsDisplay", true);
            View_defineProperty(this, "_subviewsNeedDisplay", false);
            this._backgroundColor = backgroundColor || null;
            this.surface = surface;
            this.frame = frame;
            this._layouter = layouter;
            this.visibleArea = visibleArea;
          }
          /**
           * Invalidates view's contents.
           *
           * Downward propagating; once called, all subviews of this view should also
           * be invalidated.
           */
          setNeedsDisplay() {
            this._needsDisplay = true;
            if (this.superview) {
              this.superview._setSubviewsNeedDisplay();
            }
            this.subviews.forEach((subview) => subview.setNeedsDisplay());
          }
          /**
           * Informs superview that it has subviews that need to be drawn.
           *
           * Upward propagating; once called, all superviews of this view should also
           * have `subviewsNeedDisplay` = true.
           *
           * @private
           */
          _setSubviewsNeedDisplay() {
            this._subviewsNeedDisplay = true;
            if (this.superview) {
              this.superview._setSubviewsNeedDisplay();
            }
          }
          setFrame(newFrame) {
            if (!rectEqualToRect(this.frame, newFrame)) {
              this.frame = newFrame;
              if (sizeIsValid(newFrame.size)) {
                this.frame = newFrame;
              } else {
                this.frame = zeroRect;
              }
              this.setNeedsDisplay();
            }
          }
          setVisibleArea(newVisibleArea) {
            if (!rectEqualToRect(this.visibleArea, newVisibleArea)) {
              if (sizeIsValid(newVisibleArea.size)) {
                this.visibleArea = newVisibleArea;
              } else {
                this.visibleArea = zeroRect;
              }
              this.setNeedsDisplay();
            }
          }
          /**
           * A size that can be used as a hint by layout functions.
           *
           * Implementations should typically return the intrinsic content size or a
           * size that fits all the view's content.
           *
           * The default implementation returns a size that fits all the view's
           * subviews.
           *
           * Can be overridden by subclasses.
           */
          desiredSize() {
            if (this._needsDisplay) {
              this.layoutSubviews();
            }
            const frames = this.subviews.map((subview) => subview.frame);
            return unionOfRects(...frames).size;
          }
          /**
           * Appends `view` to the list of this view's `subviews`.
           */
          addSubview(view) {
            if (this.subviews.includes(view)) {
              return;
            }
            this.subviews.push(view);
            view.superview = this;
          }
          /**
           * Breaks the subview-superview relationship between `view` and this view, if
           * `view` is a subview of this view.
           */
          removeSubview(view) {
            const subviewIndex = this.subviews.indexOf(view);
            if (subviewIndex === -1) {
              return;
            }
            view.superview = void 0;
            this.subviews.splice(subviewIndex, 1);
          }
          /**
           * Removes all subviews from this view.
           */
          removeAllSubviews() {
            this.subviews.forEach((subview) => subview.superview = void 0);
            this.subviews = [];
          }
          /**
           * Executes the display flow if this view needs to be drawn.
           *
           * 1. Lays out subviews with `layoutSubviews`.
           * 2. Draws content with `draw`.
           */
          displayIfNeeded(context, viewRefs) {
            if ((this._needsDisplay || this._subviewsNeedDisplay) && rectIntersectsRect(this.frame, this.visibleArea) && !sizeIsEmpty(this.visibleArea.size)) {
              this.layoutSubviews();
              if (this._needsDisplay) {
                this._needsDisplay = false;
              }
              if (this._subviewsNeedDisplay)
                this._subviewsNeedDisplay = false;
              const visibleArea = this.visibleArea;
              const region = new Path2D();
              region.rect(visibleArea.origin.x, visibleArea.origin.y, visibleArea.size.width, visibleArea.size.height);
              context.save();
              context.clip(region);
              context.beginPath();
              this.draw(context, viewRefs);
              context.restore();
            }
          }
          /**
           * Layout self and subviews.
           *
           * Implementations should call `setNeedsDisplay` if a draw is required.
           *
           * The default implementation uses `this.layouter` to lay out subviews.
           *
           * Can be overwritten by subclasses that wish to manually manage their
           * subviews' layout.
           *
           * NOTE: Do not call directly! Use `displayIfNeeded`.
           *
           * @see displayIfNeeded
           */
          layoutSubviews() {
            const {
              frame,
              _layouter,
              subviews,
              visibleArea
            } = this;
            const existingLayout = viewsToLayout(subviews);
            const newLayout = _layouter(existingLayout, frame);
            collapseLayoutIntoViews(newLayout);
            subviews.forEach((subview, subviewIndex) => {
              if (rectIntersectsRect(visibleArea, subview.frame)) {
                subview.setVisibleArea(intersectionOfRects(visibleArea, subview.frame));
              } else {
                subview.setVisibleArea(zeroRect);
              }
            });
          }
          /**
           * Draw the contents of this view in the given canvas `context`.
           *
           * Defaults to drawing this view's `subviews`.
           *
           * To be overwritten by subclasses that wish to draw custom content.
           *
           * NOTE: Do not call directly! Use `displayIfNeeded`.
           *
           * @see displayIfNeeded
           */
          draw(context, viewRefs) {
            const {
              subviews,
              visibleArea
            } = this;
            subviews.forEach((subview) => {
              if (rectIntersectsRect(visibleArea, subview.visibleArea)) {
                subview.displayIfNeeded(context, viewRefs);
              }
            });
            const backgroundColor = this._backgroundColor;
            if (backgroundColor !== null) {
              const desiredSize = this.desiredSize();
              if (visibleArea.size.height > desiredSize.height) {
                context.fillStyle = backgroundColor;
                context.fillRect(visibleArea.origin.x, visibleArea.origin.y + desiredSize.height, visibleArea.size.width, visibleArea.size.height - desiredSize.height);
              }
            }
          }
          /**
           * Handle an `interaction`.
           *
           * To be overwritten by subclasses that wish to handle interactions.
           *
           * NOTE: Do not call directly! Use `handleInteractionAndPropagateToSubviews`
           */
          handleInteraction(interaction, viewRefs) {
          }
          /**
           * Handle an `interaction` and propagates it to all of this view's
           * `subviews`.
           *
           * NOTE: Should not be overridden! Subclasses should override
           * `handleInteraction` instead.
           *
           * @see handleInteraction
           * @protected
           */
          handleInteractionAndPropagateToSubviews(interaction, viewRefs) {
            const {
              subviews,
              visibleArea
            } = this;
            if (visibleArea.size.height === 0) {
              return false;
            }
            for (let i2 = subviews.length - 1; i2 >= 0; i2--) {
              const subview = subviews[i2];
              if (rectIntersectsRect(visibleArea, subview.visibleArea)) {
                const didSubviewHandle = subview.handleInteractionAndPropagateToSubviews(interaction, viewRefs) === true;
                if (didSubviewHandle) {
                  return true;
                }
              }
            }
            const didSelfHandle = this.handleInteraction(interaction, viewRefs) === true;
            if (didSelfHandle) {
              return true;
            }
            return false;
          }
        }
        ;
        class BackgroundColorView extends View {
          draw(context) {
            const {
              visibleArea
            } = this;
            context.fillStyle = COLORS.BACKGROUND;
            context.fillRect(visibleArea.origin.x, visibleArea.origin.y, visibleArea.size.width, visibleArea.size.height);
          }
        }
        ;
        function clamp(min, max, value) {
          if (Number.isNaN(min) || Number.isNaN(max) || Number.isNaN(value)) {
            throw new Error(`Clamp was called with NaN. Args: min: ${min}, max: ${max}, value: ${value}.`);
          }
          return Math.min(max, Math.max(min, value));
        }
        ;
        function clampOffset(state2, containerLength) {
          return {
            offset: clamp(-(state2.length - containerLength), 0, state2.offset),
            length: state2.length
          };
        }
        function clampLength({
          state: state2,
          minContentLength,
          maxContentLength,
          containerLength
        }) {
          return {
            offset: state2.offset,
            length: clamp(Math.max(minContentLength, containerLength), Math.max(containerLength, maxContentLength), state2.length)
          };
        }
        function clampState({
          state: state2,
          minContentLength,
          maxContentLength,
          containerLength
        }) {
          return clampOffset(clampLength({
            state: state2,
            minContentLength,
            maxContentLength,
            containerLength
          }), containerLength);
        }
        function translateState({
          state: state2,
          delta,
          containerLength
        }) {
          return clampOffset({
            offset: state2.offset + delta,
            length: state2.length
          }, containerLength);
        }
        function zoomState({
          state: state2,
          multiplier,
          fixedPoint,
          minContentLength,
          maxContentLength,
          containerLength
        }) {
          const zoomedState = clampLength({
            state: {
              offset: state2.offset,
              length: state2.length * multiplier
            },
            minContentLength,
            maxContentLength,
            containerLength
          });
          const fixedPointFromContainer = fixedPoint + state2.offset;
          const scaledFixedPoint = fixedPoint * (zoomedState.length / state2.length);
          const offsetAdjustedState = clampOffset({
            offset: fixedPointFromContainer - scaledFixedPoint,
            length: zoomedState.length
          }, containerLength);
          return offsetAdjustedState;
        }
        function moveStateToRange({
          state: state2,
          rangeStart,
          rangeEnd,
          contentLength,
          minContentLength,
          maxContentLength,
          containerLength
        }) {
          const lengthClampedState = clampLength({
            state: {
              offset: state2.offset,
              length: contentLength * (containerLength / (rangeEnd - rangeStart))
            },
            minContentLength,
            maxContentLength,
            containerLength
          });
          const offsetAdjustedState = clampOffset({
            offset: -rangeStart * (lengthClampedState.length / contentLength),
            length: lengthClampedState.length
          }, containerLength);
          return offsetAdjustedState;
        }
        function areScrollStatesEqual(state1, state2) {
          return state1.offset === state2.offset && state1.length === state2.length;
        }
        ;
        const MOVE_WHEEL_DELTA_THRESHOLD = 1;
        const ZOOM_WHEEL_DELTA_THRESHOLD = 1;
        const MIN_ZOOM_LEVEL = 0.25;
        const MAX_ZOOM_LEVEL = 1e3;
        const DEFAULT_ZOOM_LEVEL = 0.25;
        ;
        function HorizontalPanAndZoomView_defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        class HorizontalPanAndZoomView extends View {
          constructor(surface, frame, contentView, intrinsicContentWidth, viewState) {
            super(surface, frame);
            HorizontalPanAndZoomView_defineProperty(this, "_isPanning", false);
            this._contentView = contentView;
            this._intrinsicContentWidth = intrinsicContentWidth;
            this._viewState = viewState;
            viewState.onHorizontalScrollStateChange((scrollState) => {
              this.zoomToRange(scrollState.offset, scrollState.length);
            });
            this.addSubview(contentView);
          }
          /**
           * Just sets scroll state.
           * Use `_setStateAndInformCallbacksIfChanged` if this view's callbacks should also be called.
           *
           * @returns Whether state was changed
           * @private
           */
          setScrollState(proposedState) {
            const clampedState = clampState({
              state: proposedState,
              minContentLength: this._intrinsicContentWidth * MIN_ZOOM_LEVEL,
              maxContentLength: this._intrinsicContentWidth * MAX_ZOOM_LEVEL,
              containerLength: this.frame.size.width
            });
            if (!areScrollStatesEqual(clampedState, this._viewState.horizontalScrollState)) {
              this.setNeedsDisplay();
            }
          }
          /**
           * Zoom to a specific range of the content specified as a range of the
           * content view's intrinsic content size.
           *
           * Does not inform callbacks of state change since this is a public API.
           */
          zoomToRange(rangeStart, rangeEnd) {
            const newState = moveStateToRange({
              state: this._viewState.horizontalScrollState,
              rangeStart,
              rangeEnd,
              contentLength: this._intrinsicContentWidth,
              minContentLength: this._intrinsicContentWidth * MIN_ZOOM_LEVEL,
              maxContentLength: this._intrinsicContentWidth * MAX_ZOOM_LEVEL,
              containerLength: this.frame.size.width
            });
            this.setScrollState(newState);
          }
          desiredSize() {
            return this._contentView.desiredSize();
          }
          layoutSubviews() {
            const {
              offset,
              length
            } = this._viewState.horizontalScrollState;
            const proposedFrame = {
              origin: {
                x: this.frame.origin.x + offset,
                y: this.frame.origin.y
              },
              size: {
                width: length,
                height: this.frame.size.height
              }
            };
            this._contentView.setFrame(proposedFrame);
            super.layoutSubviews();
          }
          handleInteraction(interaction, viewRefs) {
            switch (interaction.type) {
              case "mousedown":
                this._handleMouseDown(interaction, viewRefs);
                break;
              case "mousemove":
                this._handleMouseMove(interaction, viewRefs);
                break;
              case "mouseup":
                this._handleMouseUp(interaction, viewRefs);
                break;
              case "wheel-plain":
              case "wheel-shift":
                this._handleWheel(interaction);
                break;
            }
          }
          _handleMouseDown(interaction, viewRefs) {
            if (rectContainsPoint(interaction.payload.location, this.frame)) {
              this._isPanning = true;
              viewRefs.activeView = this;
              this.currentCursor = "grabbing";
            }
          }
          _handleMouseMove(interaction, viewRefs) {
            const isHovered = rectContainsPoint(interaction.payload.location, this.frame);
            if (isHovered && viewRefs.hoveredView === null) {
              viewRefs.hoveredView = this;
            }
            if (viewRefs.activeView === this) {
              this.currentCursor = "grabbing";
            } else if (isHovered) {
              this.currentCursor = "grab";
            }
            if (!this._isPanning) {
              return;
            }
            const {
              movementX,
              movementY
            } = interaction.payload.event;
            if (Math.abs(movementX) < Math.abs(movementY)) {
              return;
            }
            const newState = translateState({
              state: this._viewState.horizontalScrollState,
              delta: movementX,
              containerLength: this.frame.size.width
            });
            this._viewState.updateHorizontalScrollState(newState);
          }
          _handleMouseUp(interaction, viewRefs) {
            if (this._isPanning) {
              this._isPanning = false;
            }
            if (viewRefs.activeView === this) {
              viewRefs.activeView = null;
            }
          }
          _handleWheel(interaction) {
            const {
              location,
              delta: {
                deltaX,
                deltaY
              }
            } = interaction.payload;
            if (!rectContainsPoint(location, this.frame)) {
              return;
            }
            const absDeltaX = Math.abs(deltaX);
            const absDeltaY = Math.abs(deltaY);
            if (absDeltaY > absDeltaX) {
              if (absDeltaY < MOVE_WHEEL_DELTA_THRESHOLD) {
                return;
              }
              if (interaction.type === "wheel-shift") {
                return;
              }
              const newState = zoomState({
                state: this._viewState.horizontalScrollState,
                multiplier: 1 + 5e-3 * -deltaY,
                fixedPoint: location.x - this._viewState.horizontalScrollState.offset,
                minContentLength: this._intrinsicContentWidth * MIN_ZOOM_LEVEL,
                maxContentLength: this._intrinsicContentWidth * MAX_ZOOM_LEVEL,
                containerLength: this.frame.size.width
              });
              this._viewState.updateHorizontalScrollState(newState);
            } else {
              if (absDeltaX < MOVE_WHEEL_DELTA_THRESHOLD) {
                return;
              }
              const newState = translateState({
                state: this._viewState.horizontalScrollState,
                delta: -deltaX,
                containerLength: this.frame.size.width
              });
              this._viewState.updateHorizontalScrollState(newState);
            }
          }
        }
        ;
        const CARET_MARGIN = 3;
        const CARET_WIDTH = 5;
        const CARET_HEIGHT = 3;
        class VerticalScrollView extends View {
          constructor(surface, frame, contentView, viewState, label) {
            super(surface, frame);
            this._contentView = contentView;
            this._isPanning = false;
            this._mutableViewStateKey = label + ":VerticalScrollView";
            this._onChangeCallback = null;
            this._scrollState = {
              offset: 0,
              length: 0
            };
            this._viewState = viewState;
            this.addSubview(contentView);
            this._restoreMutableViewState();
          }
          setFrame(newFrame) {
            super.setFrame(newFrame);
            this._setScrollState(this._scrollState);
          }
          desiredSize() {
            return this._contentView.desiredSize();
          }
          draw(context, viewRefs) {
            super.draw(context, viewRefs);
            if (this.frame.size.height > CARET_HEIGHT * 2 + CARET_MARGIN * 3) {
              const offset = this._scrollState.offset;
              const desiredSize = this._contentView.desiredSize();
              const above = offset;
              const below = this.frame.size.height - desiredSize.height - offset;
              if (above < 0 || below < 0) {
                const {
                  visibleArea
                } = this;
                const {
                  x,
                  y
                } = visibleArea.origin;
                const {
                  width,
                  height
                } = visibleArea.size;
                const horizontalCenter = x + width / 2;
                const halfWidth = CARET_WIDTH;
                const left = horizontalCenter + halfWidth;
                const right = horizontalCenter - halfWidth;
                if (above < 0) {
                  const topY = y + CARET_MARGIN;
                  context.beginPath();
                  context.moveTo(horizontalCenter, topY);
                  context.lineTo(left, topY + CARET_HEIGHT);
                  context.lineTo(right, topY + CARET_HEIGHT);
                  context.closePath();
                  context.fillStyle = COLORS.SCROLL_CARET;
                  context.fill();
                }
                if (below < 0) {
                  const bottomY = y + height - CARET_MARGIN;
                  context.beginPath();
                  context.moveTo(horizontalCenter, bottomY);
                  context.lineTo(left, bottomY - CARET_HEIGHT);
                  context.lineTo(right, bottomY - CARET_HEIGHT);
                  context.closePath();
                  context.fillStyle = COLORS.SCROLL_CARET;
                  context.fill();
                }
              }
            }
          }
          layoutSubviews() {
            const {
              offset
            } = this._scrollState;
            const desiredSize = this._contentView.desiredSize();
            const minimumHeight = this.frame.size.height;
            const desiredHeight = desiredSize ? desiredSize.height : 0;
            const height = Math.max(desiredHeight, minimumHeight);
            const proposedFrame = {
              origin: {
                x: this.frame.origin.x,
                y: this.frame.origin.y + offset
              },
              size: {
                width: this.frame.size.width,
                height
              }
            };
            this._contentView.setFrame(proposedFrame);
            super.layoutSubviews();
          }
          handleInteraction(interaction) {
            switch (interaction.type) {
              case "mousedown":
                return this._handleMouseDown(interaction);
              case "mousemove":
                return this._handleMouseMove(interaction);
              case "mouseup":
                return this._handleMouseUp(interaction);
              case "wheel-shift":
                return this._handleWheelShift(interaction);
            }
          }
          onChange(callback) {
            this._onChangeCallback = callback;
          }
          scrollBy(deltaY) {
            const newState = translateState({
              state: this._scrollState,
              delta: -deltaY,
              containerLength: this.frame.size.height
            });
            return this._setScrollState(newState);
          }
          _handleMouseDown(interaction) {
            if (rectContainsPoint(interaction.payload.location, this.frame)) {
              const frameHeight = this.frame.size.height;
              const contentHeight = this._contentView.desiredSize().height;
              if (frameHeight < contentHeight) {
                this._isPanning = true;
              }
            }
          }
          _handleMouseMove(interaction) {
            if (!this._isPanning) {
              return;
            }
            const {
              movementX,
              movementY
            } = interaction.payload.event;
            if (Math.abs(movementX) > Math.abs(movementY)) {
              return;
            }
            const newState = translateState({
              state: this._scrollState,
              delta: interaction.payload.event.movementY,
              containerLength: this.frame.size.height
            });
            this._setScrollState(newState);
            return true;
          }
          _handleMouseUp(interaction) {
            if (this._isPanning) {
              this._isPanning = false;
            }
          }
          _handleWheelShift(interaction) {
            const {
              location,
              delta: {
                deltaX,
                deltaY
              }
            } = interaction.payload;
            if (!rectContainsPoint(location, this.frame)) {
              return false;
            }
            const absDeltaX = Math.abs(deltaX);
            const absDeltaY = Math.abs(deltaY);
            if (absDeltaX > absDeltaY) {
              return false;
            }
            if (absDeltaY < MOVE_WHEEL_DELTA_THRESHOLD) {
              return false;
            }
            return this.scrollBy(deltaY);
          }
          _restoreMutableViewState() {
            if (this._viewState.viewToMutableViewStateMap.has(this._mutableViewStateKey)) {
              this._scrollState = this._viewState.viewToMutableViewStateMap.get(this._mutableViewStateKey);
            } else {
              this._viewState.viewToMutableViewStateMap.set(this._mutableViewStateKey, this._scrollState);
            }
            this.setNeedsDisplay();
          }
          _setScrollState(proposedState) {
            const contentHeight = this._contentView.frame.size.height;
            const containerHeight = this.frame.size.height;
            const clampedState = clampState({
              state: proposedState,
              minContentLength: contentHeight,
              maxContentLength: contentHeight,
              containerLength: containerHeight
            });
            if (!areScrollStatesEqual(clampedState, this._scrollState)) {
              this._scrollState.offset = clampedState.offset;
              this._scrollState.length = clampedState.length;
              this.setNeedsDisplay();
              if (this._onChangeCallback !== null) {
                this._onChangeCallback(clampedState, this.frame.size.height);
              }
              return true;
            }
            if (contentHeight === containerHeight) {
              return false;
            }
            return true;
          }
        }
        ;
        const cachedTextWidths = /* @__PURE__ */ new Map();
        function getTextWidth(context, text) {
          let measuredWidth = cachedTextWidths.get(text);
          if (measuredWidth == null) {
            measuredWidth = context.measureText(text).width;
            cachedTextWidths.set(text, measuredWidth);
          }
          return measuredWidth;
        }
        function trimText(context, text, width) {
          const maxIndex = text.length - 1;
          let startIndex = 0;
          let stopIndex = maxIndex;
          let longestValidIndex = 0;
          let longestValidText = null;
          while (startIndex <= stopIndex) {
            const currentIndex = Math.floor((startIndex + stopIndex) / 2);
            const trimmedText = currentIndex === maxIndex ? text : text.slice(0, currentIndex) + "\u2026";
            if (getTextWidth(context, trimmedText) <= width) {
              if (longestValidIndex < currentIndex) {
                longestValidIndex = currentIndex;
                longestValidText = trimmedText;
              }
              startIndex = currentIndex + 1;
            } else {
              stopIndex = currentIndex - 1;
            }
          }
          return longestValidText;
        }
        function drawText(text, context, fullRect, drawableRect, config) {
          const {
            fillStyle = COLORS.TEXT_COLOR,
            fontSize = FONT_SIZE,
            textAlign = "left"
          } = config || {};
          if (fullRect.size.width > TEXT_PADDING * 2) {
            context.textAlign = textAlign;
            context.textBaseline = "middle";
            context.font = `${fontSize}px sans-serif`;
            const {
              x,
              y
            } = fullRect.origin;
            const trimmedName = trimText(context, text, fullRect.size.width - TEXT_PADDING * 2 + (x < 0 ? x : 0));
            if (trimmedName !== null) {
              context.fillStyle = fillStyle;
              const textOverflowsViewableArea = !rectEqualToRect(drawableRect, fullRect);
              if (textOverflowsViewableArea) {
                context.save();
                context.beginPath();
                context.rect(drawableRect.origin.x, drawableRect.origin.y, drawableRect.size.width, drawableRect.size.height);
                context.closePath();
                context.clip();
              }
              let textX;
              if (textAlign === "center") {
                textX = x + fullRect.size.width / 2 + TEXT_PADDING - (x < 0 ? x : 0);
              } else {
                textX = x + TEXT_PADDING - (x < 0 ? x : 0);
              }
              const textY = y + fullRect.size.height / 2;
              context.fillText(trimmedName, textX, textY);
              if (textOverflowsViewableArea) {
                context.restore();
              }
            }
          }
        }
        ;
        function ResizeBarView_defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        const RESIZE_BAR_DOT_RADIUS = 1;
        const RESIZE_BAR_DOT_SPACING = 4;
        const RESIZE_BAR_HEIGHT = 8;
        const RESIZE_BAR_WITH_LABEL_HEIGHT = 16;
        class ResizeBarView extends View {
          constructor(surface, frame, label) {
            super(surface, frame, noopLayout);
            ResizeBarView_defineProperty(this, "_interactionState", "normal");
            ResizeBarView_defineProperty(this, "showLabel", false);
            this._label = label;
          }
          desiredSize() {
            return this.showLabel ? {
              height: RESIZE_BAR_WITH_LABEL_HEIGHT,
              width: 0
            } : {
              height: RESIZE_BAR_HEIGHT,
              width: 0
            };
          }
          draw(context, viewRefs) {
            const {
              frame
            } = this;
            const {
              x,
              y
            } = frame.origin;
            const {
              width,
              height
            } = frame.size;
            const isActive = this._interactionState === "dragging" || this._interactionState === "hovered" && viewRefs.activeView === null;
            context.fillStyle = isActive ? COLORS.REACT_RESIZE_BAR_ACTIVE : COLORS.REACT_RESIZE_BAR;
            context.fillRect(x, y, width, height);
            context.fillStyle = COLORS.REACT_RESIZE_BAR_BORDER;
            context.fillRect(x, y, width, BORDER_SIZE);
            context.fillRect(x, y + height - BORDER_SIZE, width, BORDER_SIZE);
            const horizontalCenter = x + width / 2;
            const verticalCenter = y + height / 2;
            if (this.showLabel) {
              const labelRect = {
                origin: {
                  x: 0,
                  y: y + height - RESIZE_BAR_WITH_LABEL_HEIGHT
                },
                size: {
                  width: frame.size.width,
                  height: RESIZE_BAR_WITH_LABEL_HEIGHT
                }
              };
              drawText(this._label, context, labelRect, frame, {
                fillStyle: COLORS.REACT_RESIZE_BAR_DOT,
                textAlign: "center"
              });
            } else {
              context.beginPath();
              context.fillStyle = COLORS.REACT_RESIZE_BAR_DOT;
              context.arc(horizontalCenter, verticalCenter, RESIZE_BAR_DOT_RADIUS, 0, 2 * Math.PI);
              context.arc(horizontalCenter + RESIZE_BAR_DOT_SPACING, verticalCenter, RESIZE_BAR_DOT_RADIUS, 0, 2 * Math.PI);
              context.arc(horizontalCenter - RESIZE_BAR_DOT_SPACING, verticalCenter, RESIZE_BAR_DOT_RADIUS, 0, 2 * Math.PI);
              context.fill();
            }
          }
          _setInteractionState(state2) {
            if (this._interactionState === state2) {
              return;
            }
            this._interactionState = state2;
            this.setNeedsDisplay();
          }
          _handleMouseDown(interaction, viewRefs) {
            const cursorInView = rectContainsPoint(interaction.payload.location, this.frame);
            if (cursorInView) {
              this._setInteractionState("dragging");
              viewRefs.activeView = this;
            }
          }
          _handleMouseMove(interaction, viewRefs) {
            const cursorInView = rectContainsPoint(interaction.payload.location, this.frame);
            if (viewRefs.activeView === this) {
              this.currentCursor = "ns-resize";
            } else if (cursorInView) {
              if (this.showLabel) {
                this.currentCursor = "pointer";
              } else {
                this.currentCursor = "ns-resize";
              }
            }
            if (cursorInView) {
              viewRefs.hoveredView = this;
            }
            if (this._interactionState === "dragging") {
              return;
            }
            this._setInteractionState(cursorInView ? "hovered" : "normal");
          }
          _handleMouseUp(interaction, viewRefs) {
            const cursorInView = rectContainsPoint(interaction.payload.location, this.frame);
            if (this._interactionState === "dragging") {
              this._setInteractionState(cursorInView ? "hovered" : "normal");
            }
            if (viewRefs.activeView === this) {
              viewRefs.activeView = null;
            }
          }
          handleInteraction(interaction, viewRefs) {
            switch (interaction.type) {
              case "mousedown":
                this._handleMouseDown(interaction, viewRefs);
                break;
              case "mousemove":
                this._handleMouseMove(interaction, viewRefs);
                break;
              case "mouseup":
                this._handleMouseUp(interaction, viewRefs);
                break;
            }
          }
        }
        ;
        function ResizableView_defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        const ResizableView_RESIZE_BAR_HEIGHT = 8;
        const ResizableView_RESIZE_BAR_WITH_LABEL_HEIGHT = 16;
        const HIDDEN_RECT = {
          origin: {
            x: 0,
            y: 0
          },
          size: {
            width: 0,
            height: 0
          }
        };
        class ResizableView extends View {
          constructor(surface, frame, subview, viewState, canvasRef, label) {
            super(surface, frame, noopLayout);
            ResizableView_defineProperty(this, "_resizingState", null);
            this._canvasRef = canvasRef;
            this._layoutState = {
              barOffsetY: 0
            };
            this._mutableViewStateKey = label + ":ResizableView";
            this._subview = subview;
            this._resizeBar = new ResizeBarView(surface, frame, label);
            this._viewState = viewState;
            this.addSubview(this._subview);
            this.addSubview(this._resizeBar);
            this._restoreMutableViewState();
          }
          desiredSize() {
            const subviewDesiredSize = this._subview.desiredSize();
            if (this._shouldRenderResizeBar()) {
              const resizeBarDesiredSize = this._resizeBar.desiredSize();
              return {
                width: this.frame.size.width,
                height: this._layoutState.barOffsetY + resizeBarDesiredSize.height
              };
            } else {
              return {
                width: this.frame.size.width,
                height: subviewDesiredSize.height
              };
            }
          }
          layoutSubviews() {
            this._updateLayoutState();
            this._updateSubviewFrames();
            super.layoutSubviews();
          }
          _restoreMutableViewState() {
            if (this._viewState.viewToMutableViewStateMap.has(this._mutableViewStateKey)) {
              this._layoutState = this._viewState.viewToMutableViewStateMap.get(this._mutableViewStateKey);
              this._updateLayoutStateAndResizeBar(this._layoutState.barOffsetY);
            } else {
              this._viewState.viewToMutableViewStateMap.set(this._mutableViewStateKey, this._layoutState);
              const subviewDesiredSize = this._subview.desiredSize();
              this._updateLayoutStateAndResizeBar(subviewDesiredSize.maxInitialHeight != null ? Math.min(subviewDesiredSize.maxInitialHeight, subviewDesiredSize.height) : subviewDesiredSize.height);
            }
            this.setNeedsDisplay();
          }
          _shouldRenderResizeBar() {
            const subviewDesiredSize = this._subview.desiredSize();
            return subviewDesiredSize.hideScrollBarIfLessThanHeight != null ? subviewDesiredSize.height > subviewDesiredSize.hideScrollBarIfLessThanHeight : true;
          }
          _updateLayoutStateAndResizeBar(barOffsetY) {
            if (barOffsetY <= ResizableView_RESIZE_BAR_WITH_LABEL_HEIGHT - ResizableView_RESIZE_BAR_HEIGHT) {
              barOffsetY = 0;
            }
            this._layoutState.barOffsetY = barOffsetY;
            this._resizeBar.showLabel = barOffsetY === 0;
          }
          _updateLayoutState() {
            const {
              frame,
              _resizingState
            } = this;
            const subviewDesiredSize = this._subview.desiredSize();
            const maxBarOffset = subviewDesiredSize.height;
            let proposedBarOffsetY = this._layoutState.barOffsetY;
            if (_resizingState) {
              const {
                mouseY,
                cursorOffsetInBarFrame
              } = _resizingState;
              proposedBarOffsetY = mouseY - frame.origin.y - cursorOffsetInBarFrame;
            }
            this._updateLayoutStateAndResizeBar(clamp(0, maxBarOffset, proposedBarOffsetY));
          }
          _updateSubviewFrames() {
            const {
              frame: {
                origin: {
                  x,
                  y
                },
                size: {
                  width
                }
              },
              _layoutState: {
                barOffsetY
              }
            } = this;
            const resizeBarDesiredSize = this._resizeBar.desiredSize();
            if (barOffsetY === 0) {
              this._subview.setFrame(HIDDEN_RECT);
            } else {
              this._subview.setFrame({
                origin: {
                  x,
                  y
                },
                size: {
                  width,
                  height: barOffsetY
                }
              });
            }
            this._resizeBar.setFrame({
              origin: {
                x,
                y: y + barOffsetY
              },
              size: {
                width,
                height: resizeBarDesiredSize.height
              }
            });
          }
          _handleClick(interaction) {
            if (!this._shouldRenderResizeBar()) {
              return;
            }
            const cursorInView = rectContainsPoint(interaction.payload.location, this.frame);
            if (cursorInView) {
              if (this._layoutState.barOffsetY === 0) {
                const subviewDesiredSize = this._subview.desiredSize();
                this._updateLayoutStateAndResizeBar(subviewDesiredSize.height);
                this.setNeedsDisplay();
                return true;
              }
            }
          }
          _handleDoubleClick(interaction) {
            if (!this._shouldRenderResizeBar()) {
              return;
            }
            const cursorInView = rectContainsPoint(interaction.payload.location, this.frame);
            if (cursorInView) {
              if (this._layoutState.barOffsetY > 0) {
                this._updateLayoutStateAndResizeBar(0);
                this.setNeedsDisplay();
                return true;
              }
            }
          }
          _handleMouseDown(interaction) {
            const cursorLocation = interaction.payload.location;
            const resizeBarFrame = this._resizeBar.frame;
            if (rectContainsPoint(cursorLocation, resizeBarFrame)) {
              const mouseY = cursorLocation.y;
              this._resizingState = {
                cursorOffsetInBarFrame: mouseY - resizeBarFrame.origin.y,
                mouseY
              };
              return true;
            }
          }
          _handleMouseMove(interaction) {
            const {
              _resizingState
            } = this;
            if (_resizingState) {
              this._resizingState = {
                ..._resizingState,
                mouseY: interaction.payload.location.y
              };
              this.setNeedsDisplay();
              return true;
            }
          }
          _handleMouseUp(interaction) {
            if (this._resizingState) {
              this._resizingState = null;
            }
          }
          getCursorActiveSubView(interaction) {
            const cursorLocation = interaction.payload.location;
            const resizeBarFrame = this._resizeBar.frame;
            if (rectContainsPoint(cursorLocation, resizeBarFrame)) {
              return this;
            } else {
              return null;
            }
          }
          handleInteraction(interaction, viewRefs) {
            switch (interaction.type) {
              case "click":
                return this._handleClick(interaction);
              case "double-click":
                return this._handleDoubleClick(interaction);
              case "mousedown":
                return this._handleMouseDown(interaction);
              case "mousemove":
                return this._handleMouseMove(interaction);
              case "mouseup":
                return this._handleMouseUp(interaction);
            }
          }
        }
        ;
        ;
        const LINE_HEIGHT = 40;
        const PAGE_HEIGHT = 800;
        function normalizeWheel(event) {
          let deltaX = event.deltaX;
          let deltaY = event.deltaY;
          if (event.deltaMode === WheelEvent.DOM_DELTA_LINE) {
            deltaX *= LINE_HEIGHT;
            deltaY *= LINE_HEIGHT;
          } else if (event.deltaMode === WheelEvent.DOM_DELTA_PAGE) {
            deltaX *= PAGE_HEIGHT;
            deltaY *= PAGE_HEIGHT;
          }
          return {
            deltaX,
            deltaY
          };
        }
        ;
        let canvasBoundingRectCache = null;
        function cacheFirstGetCanvasBoundingRect(canvas) {
          if (canvasBoundingRectCache && canvas.width === canvasBoundingRectCache.width && canvas.height === canvasBoundingRectCache.height) {
            return canvasBoundingRectCache.rect;
          }
          canvasBoundingRectCache = {
            width: canvas.width,
            height: canvas.height,
            rect: canvas.getBoundingClientRect()
          };
          return canvasBoundingRectCache.rect;
        }
        function useCanvasInteraction(canvasRef, interactor) {
          const isMouseDownRef = (0, external_react_namespaceObject.useRef)(false);
          const didMouseMoveWhileDownRef = (0, external_react_namespaceObject.useRef)(false);
          (0, external_react_namespaceObject.useEffect)(() => {
            const canvas = canvasRef.current;
            if (!canvas) {
              return;
            }
            function localToCanvasCoordinates(localCoordinates) {
              const canvasRect = cacheFirstGetCanvasBoundingRect(canvas);
              return {
                x: localCoordinates.x - canvasRect.left,
                y: localCoordinates.y - canvasRect.top
              };
            }
            const onCanvasClick = (event) => {
              if (didMouseMoveWhileDownRef.current) {
                return;
              }
              interactor({
                type: "click",
                payload: {
                  event,
                  location: localToCanvasCoordinates({
                    x: event.x,
                    y: event.y
                  })
                }
              });
            };
            const onCanvasDoubleClick = (event) => {
              if (didMouseMoveWhileDownRef.current) {
                return;
              }
              interactor({
                type: "double-click",
                payload: {
                  event,
                  location: localToCanvasCoordinates({
                    x: event.x,
                    y: event.y
                  })
                }
              });
            };
            const onCanvasMouseDown = (event) => {
              didMouseMoveWhileDownRef.current = false;
              isMouseDownRef.current = true;
              interactor({
                type: "mousedown",
                payload: {
                  event,
                  location: localToCanvasCoordinates({
                    x: event.x,
                    y: event.y
                  })
                }
              });
            };
            const onDocumentMouseMove = (event) => {
              if (isMouseDownRef.current) {
                didMouseMoveWhileDownRef.current = true;
              }
              interactor({
                type: "mousemove",
                payload: {
                  event,
                  location: localToCanvasCoordinates({
                    x: event.x,
                    y: event.y
                  })
                }
              });
            };
            const onDocumentMouseUp = (event) => {
              isMouseDownRef.current = false;
              interactor({
                type: "mouseup",
                payload: {
                  event,
                  location: localToCanvasCoordinates({
                    x: event.x,
                    y: event.y
                  })
                }
              });
            };
            const onCanvasWheel = (event) => {
              event.preventDefault();
              event.stopPropagation();
              const location = localToCanvasCoordinates({
                x: event.x,
                y: event.y
              });
              const delta = normalizeWheel(event);
              if (event.shiftKey) {
                interactor({
                  type: "wheel-shift",
                  payload: {
                    event,
                    location,
                    delta
                  }
                });
              } else if (event.ctrlKey) {
                interactor({
                  type: "wheel-control",
                  payload: {
                    event,
                    location,
                    delta
                  }
                });
              } else if (event.metaKey) {
                interactor({
                  type: "wheel-meta",
                  payload: {
                    event,
                    location,
                    delta
                  }
                });
              } else {
                interactor({
                  type: "wheel-plain",
                  payload: {
                    event,
                    location,
                    delta
                  }
                });
              }
              return false;
            };
            const ownerDocument = canvas.ownerDocument;
            ownerDocument.addEventListener("mousemove", onDocumentMouseMove);
            ownerDocument.addEventListener("mouseup", onDocumentMouseUp);
            canvas.addEventListener("click", onCanvasClick);
            canvas.addEventListener("dblclick", onCanvasDoubleClick);
            canvas.addEventListener("mousedown", onCanvasMouseDown);
            canvas.addEventListener("wheel", onCanvasWheel);
            return () => {
              ownerDocument.removeEventListener("mousemove", onDocumentMouseMove);
              ownerDocument.removeEventListener("mouseup", onDocumentMouseUp);
              canvas.removeEventListener("click", onCanvasClick);
              canvas.removeEventListener("dblclick", onCanvasDoubleClick);
              canvas.removeEventListener("mousedown", onCanvasMouseDown);
              canvas.removeEventListener("wheel", onCanvasWheel);
            };
          }, [canvasRef, interactor]);
        }
        ;
        const withVerticalScrollbarLayout = (layout, containerFrame) => {
          const [contentLayoutInfo, scrollbarLayoutInfo] = layout;
          const desiredContentSize = contentLayoutInfo.view.desiredSize();
          const shouldShowScrollbar = desiredContentSize.height > containerFrame.size.height;
          const scrollbarWidth = shouldShowScrollbar ? scrollbarLayoutInfo.view.desiredSize().width : 0;
          const laidOutContentLayoutInfo = {
            ...contentLayoutInfo,
            frame: {
              origin: contentLayoutInfo.view.frame.origin,
              size: {
                width: containerFrame.size.width - scrollbarWidth,
                height: containerFrame.size.height
              }
            }
          };
          const laidOutScrollbarLayoutInfo = {
            ...scrollbarLayoutInfo,
            frame: {
              origin: {
                x: laidOutContentLayoutInfo.frame.origin.x + laidOutContentLayoutInfo.frame.size.width,
                y: containerFrame.origin.y
              },
              size: {
                width: scrollbarWidth,
                height: containerFrame.size.height
              }
            }
          };
          return [laidOutContentLayoutInfo, laidOutScrollbarLayoutInfo];
        };
        ;
        function VerticalScrollOverflowView_defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        class VerticalScrollOverflowView extends View {
          constructor(surface, frame, contentView, viewState) {
            super(surface, frame, withVerticalScrollbarLayout);
            VerticalScrollOverflowView_defineProperty(this, "_isProcessingOnChange", false);
            VerticalScrollOverflowView_defineProperty(this, "_isScrolling", false);
            VerticalScrollOverflowView_defineProperty(this, "_scrollOffset", 0);
            VerticalScrollOverflowView_defineProperty(this, "_onVerticalScrollViewChange", (scrollState, containerLength) => {
              const maxOffset = scrollState.length - containerLength;
              if (maxOffset === 0) {
                return;
              }
              const percentage = Math.abs(scrollState.offset) / maxOffset;
              const maxScrollThumbY = this._scrollBarView.getMaxScrollThumbY();
              this._isProcessingOnChange = true;
              this._scrollBarView.setScrollThumbY(percentage * maxScrollThumbY);
              this._isProcessingOnChange = false;
            });
            this._contentView = contentView;
            this._verticalScrollView = new VerticalScrollView(surface, frame, contentView, viewState, "VerticalScrollOverflowView");
            this._verticalScrollView.onChange(this._onVerticalScrollViewChange);
            this._scrollBarView = new VerticalScrollBarView(surface, frame, this);
            this.addSubview(this._verticalScrollView);
            this.addSubview(this._scrollBarView);
          }
          layoutSubviews() {
            super.layoutSubviews();
            const contentSize = this._contentView.desiredSize();
            this._scrollBarView.setContentHeight(contentSize.height);
          }
          setScrollOffset(newScrollOffset, maxScrollOffset) {
            const deltaY = newScrollOffset - this._scrollOffset;
            if (!this._isProcessingOnChange) {
              this._verticalScrollView.scrollBy(-deltaY);
            }
            this._scrollOffset = newScrollOffset;
            this.setNeedsDisplay();
          }
        }
        ;
        function VerticalScrollBarView_defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        const SCROLL_BAR_SIZE = 14;
        const VerticalScrollBarView_HIDDEN_RECT = {
          origin: {
            x: 0,
            y: 0
          },
          size: {
            width: 0,
            height: 0
          }
        };
        class VerticalScrollBarView extends View {
          constructor(surface, frame, verticalScrollOverflowView) {
            super(surface, frame);
            VerticalScrollBarView_defineProperty(this, "_contentHeight", 0);
            VerticalScrollBarView_defineProperty(this, "_isScrolling", false);
            VerticalScrollBarView_defineProperty(this, "_scrollBarRect", VerticalScrollBarView_HIDDEN_RECT);
            VerticalScrollBarView_defineProperty(this, "_scrollThumbRect", VerticalScrollBarView_HIDDEN_RECT);
            this._verticalScrollOverflowView = verticalScrollOverflowView;
          }
          desiredSize() {
            return {
              width: SCROLL_BAR_SIZE,
              height: 0
              // No desired height
            };
          }
          getMaxScrollThumbY() {
            const {
              height
            } = this.frame.size;
            const maxScrollThumbY = height - this._scrollThumbRect.size.height;
            return maxScrollThumbY;
          }
          setContentHeight(contentHeight) {
            this._contentHeight = contentHeight;
            const {
              height,
              width
            } = this.frame.size;
            const proposedScrollThumbRect = {
              origin: {
                x: this.frame.origin.x,
                y: this._scrollThumbRect.origin.y
              },
              size: {
                width,
                height: height * (height / contentHeight)
              }
            };
            if (!rectEqualToRect(this._scrollThumbRect, proposedScrollThumbRect)) {
              this._scrollThumbRect = proposedScrollThumbRect;
              this.setNeedsDisplay();
            }
          }
          setScrollThumbY(value) {
            const {
              height
            } = this.frame.size;
            const maxScrollThumbY = this.getMaxScrollThumbY();
            const newScrollThumbY = Math.max(0, Math.min(maxScrollThumbY, value));
            this._scrollThumbRect = {
              ...this._scrollThumbRect,
              origin: {
                x: this.frame.origin.x,
                y: newScrollThumbY
              }
            };
            const maxContentOffset = this._contentHeight - height;
            const contentScrollOffset = newScrollThumbY / maxScrollThumbY * maxContentOffset * -1;
            this._verticalScrollOverflowView.setScrollOffset(contentScrollOffset, maxScrollThumbY);
          }
          draw(context, viewRefs) {
            const {
              x,
              y
            } = this.frame.origin;
            const {
              width,
              height
            } = this.frame.size;
            context.fillStyle = COLORS.REACT_RESIZE_BAR;
            context.fillRect(x, y, width, height);
            context.fillStyle = COLORS.SCROLL_CARET;
            context.fillRect(this._scrollThumbRect.origin.x, this._scrollThumbRect.origin.y, this._scrollThumbRect.size.width, this._scrollThumbRect.size.height);
            context.fillStyle = COLORS.REACT_RESIZE_BAR_BORDER;
            context.fillRect(x, y, BORDER_SIZE, height);
          }
          handleInteraction(interaction, viewRefs) {
            switch (interaction.type) {
              case "click":
                this._handleClick(interaction, viewRefs);
                break;
              case "mousedown":
                this._handleMouseDown(interaction, viewRefs);
                break;
              case "mousemove":
                this._handleMouseMove(interaction, viewRefs);
                break;
              case "mouseup":
                this._handleMouseUp(interaction, viewRefs);
                break;
            }
          }
          _handleClick(interaction, viewRefs) {
            const {
              location
            } = interaction.payload;
            if (rectContainsPoint(location, this.frame)) {
              if (rectContainsPoint(location, this._scrollThumbRect)) {
                return;
              }
              const currentScrollThumbY = this._scrollThumbRect.origin.y;
              const y = location.y;
              const {
                height
              } = this.frame.size;
              const deltaY = height / this._contentHeight * height * 0.8;
              this.setScrollThumbY(y > currentScrollThumbY ? this._scrollThumbRect.origin.y + deltaY : this._scrollThumbRect.origin.y - deltaY);
            }
          }
          _handleMouseDown(interaction, viewRefs) {
            const {
              location
            } = interaction.payload;
            if (!rectContainsPoint(location, this._scrollThumbRect)) {
              return;
            }
            viewRefs.activeView = this;
            this.currentCursor = "default";
            this._isScrolling = true;
            this.setNeedsDisplay();
          }
          _handleMouseMove(interaction, viewRefs) {
            const {
              event,
              location
            } = interaction.payload;
            if (rectContainsPoint(location, this.frame)) {
              if (viewRefs.hoveredView !== this) {
                viewRefs.hoveredView = this;
              }
              this.currentCursor = "default";
            }
            if (viewRefs.activeView === this) {
              this.currentCursor = "default";
              this.setScrollThumbY(this._scrollThumbRect.origin.y + event.movementY);
            }
          }
          _handleMouseUp(interaction, viewRefs) {
            if (viewRefs.activeView === this) {
              viewRefs.activeView = null;
            }
            if (this._isScrolling) {
              this._isScrolling = false;
              this.setNeedsDisplay();
            }
          }
        }
        ;
        ;
        ;
        function positioningScaleFactor(intrinsicWidth, frame) {
          return frame.size.width / intrinsicWidth;
        }
        function timestampToPosition(timestamp, scaleFactor, frame) {
          return frame.origin.x + timestamp * scaleFactor;
        }
        function positionToTimestamp(position, scaleFactor, frame) {
          return (position - frame.origin.x) / scaleFactor;
        }
        function durationToWidth(duration, scaleFactor) {
          return duration * scaleFactor;
        }
        function widthToDuration(width, scaleFactor) {
          return width / scaleFactor;
        }
        var pretty_ms = __webpack_require__(894);
        var pretty_ms_default = /* @__PURE__ */ __webpack_require__.n(pretty_ms);
        ;
        function formatTimestamp(ms) {
          return ms.toLocaleString(void 0, {
            minimumFractionDigits: 1,
            maximumFractionDigits: 1
          }) + "ms";
        }
        function formatting_formatDuration(ms) {
          return pretty_ms_default()(ms, {
            millisecondsDecimalDigits: 1
          });
        }
        function trimString(string, length) {
          if (string.length > length) {
            return `${string.slice(0, length - 1)}\u2026`;
          }
          return string;
        }
        function getSchedulingEventLabel(event) {
          switch (event.type) {
            case "schedule-render":
              return "render scheduled";
            case "schedule-state-update":
              return "state update scheduled";
            case "schedule-force-update":
              return "force update scheduled";
            default:
              return null;
          }
        }
        ;
        function ComponentMeasuresView_defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        const ROW_WITH_BORDER_HEIGHT = NATIVE_EVENT_HEIGHT + BORDER_SIZE;
        class ComponentMeasuresView extends View {
          constructor(surface, frame, profilerData, viewState) {
            super(surface, frame);
            ComponentMeasuresView_defineProperty(this, "_cachedSearchRegExp", null);
            ComponentMeasuresView_defineProperty(this, "_hoveredComponentMeasure", null);
            ComponentMeasuresView_defineProperty(this, "onHover", null);
            this._profilerData = profilerData;
            this._viewState = viewState;
            this._cachedSearchMatches = /* @__PURE__ */ new Map();
            this._cachedSearchRegExp = null;
            viewState.onSearchRegExpStateChange(() => {
              this.setNeedsDisplay();
            });
            this._intrinsicSize = {
              width: profilerData.duration,
              height: ROW_WITH_BORDER_HEIGHT
            };
          }
          desiredSize() {
            return this._intrinsicSize;
          }
          setHoveredEvent(hoveredEvent) {
            if (this._hoveredComponentMeasure === hoveredEvent) {
              return;
            }
            this._hoveredComponentMeasure = hoveredEvent;
            this.setNeedsDisplay();
          }
          /**
           * Draw a single `ReactComponentMeasure` as a box/span with text inside of it.
           */
          _drawSingleReactComponentMeasure(context, rect, componentMeasure, scaleFactor, showHoverHighlight) {
            const {
              frame
            } = this;
            const {
              componentName,
              duration,
              timestamp,
              type,
              warning
            } = componentMeasure;
            const xStart = timestampToPosition(timestamp, scaleFactor, frame);
            const xStop = timestampToPosition(timestamp + duration, scaleFactor, frame);
            const componentMeasureRect = {
              origin: {
                x: xStart,
                y: frame.origin.y
              },
              size: {
                width: xStop - xStart,
                height: NATIVE_EVENT_HEIGHT
              }
            };
            if (!rectIntersectsRect(componentMeasureRect, rect)) {
              return false;
            }
            const width = durationToWidth(duration, scaleFactor);
            if (width < 1) {
              return false;
            }
            let textFillStyle = null;
            let typeLabel = null;
            const drawableRect = intersectionOfRects(componentMeasureRect, rect);
            context.beginPath();
            if (warning !== null) {
              context.fillStyle = showHoverHighlight ? COLORS.WARNING_BACKGROUND_HOVER : COLORS.WARNING_BACKGROUND;
            } else {
              switch (type) {
                case "render":
                  context.fillStyle = showHoverHighlight ? COLORS.REACT_RENDER_HOVER : COLORS.REACT_RENDER;
                  textFillStyle = COLORS.REACT_RENDER_TEXT;
                  typeLabel = "rendered";
                  break;
                case "layout-effect-mount":
                  context.fillStyle = showHoverHighlight ? COLORS.REACT_LAYOUT_EFFECTS_HOVER : COLORS.REACT_LAYOUT_EFFECTS;
                  textFillStyle = COLORS.REACT_LAYOUT_EFFECTS_TEXT;
                  typeLabel = "mounted layout effect";
                  break;
                case "layout-effect-unmount":
                  context.fillStyle = showHoverHighlight ? COLORS.REACT_LAYOUT_EFFECTS_HOVER : COLORS.REACT_LAYOUT_EFFECTS;
                  textFillStyle = COLORS.REACT_LAYOUT_EFFECTS_TEXT;
                  typeLabel = "unmounted layout effect";
                  break;
                case "passive-effect-mount":
                  context.fillStyle = showHoverHighlight ? COLORS.REACT_PASSIVE_EFFECTS_HOVER : COLORS.REACT_PASSIVE_EFFECTS;
                  textFillStyle = COLORS.REACT_PASSIVE_EFFECTS_TEXT;
                  typeLabel = "mounted passive effect";
                  break;
                case "passive-effect-unmount":
                  context.fillStyle = showHoverHighlight ? COLORS.REACT_PASSIVE_EFFECTS_HOVER : COLORS.REACT_PASSIVE_EFFECTS;
                  textFillStyle = COLORS.REACT_PASSIVE_EFFECTS_TEXT;
                  typeLabel = "unmounted passive effect";
                  break;
              }
            }
            let isMatch = false;
            const cachedSearchRegExp = this._cachedSearchRegExp;
            if (cachedSearchRegExp !== null) {
              const cachedSearchMatches = this._cachedSearchMatches;
              const cachedValue = cachedSearchMatches.get(componentName);
              if (cachedValue != null) {
                isMatch = cachedValue;
              } else {
                isMatch = componentName.match(cachedSearchRegExp) !== null;
                cachedSearchMatches.set(componentName, isMatch);
              }
            }
            if (isMatch) {
              context.fillStyle = COLORS.SEARCH_RESULT_FILL;
            }
            context.fillRect(drawableRect.origin.x, drawableRect.origin.y, drawableRect.size.width, drawableRect.size.height);
            const label = `${componentName} ${typeLabel} - ${formatting_formatDuration(duration)}`;
            drawText(label, context, componentMeasureRect, drawableRect, {
              fillStyle: textFillStyle
            });
            return true;
          }
          draw(context) {
            const {
              frame,
              _profilerData: {
                componentMeasures
              },
              _hoveredComponentMeasure,
              visibleArea
            } = this;
            const searchRegExp = this._viewState.searchRegExp;
            if (this._cachedSearchRegExp !== searchRegExp) {
              this._cachedSearchMatches = /* @__PURE__ */ new Map();
              this._cachedSearchRegExp = searchRegExp;
            }
            context.fillStyle = COLORS.BACKGROUND;
            context.fillRect(visibleArea.origin.x, visibleArea.origin.y, visibleArea.size.width, visibleArea.size.height);
            const scaleFactor = positioningScaleFactor(this._intrinsicSize.width, frame);
            let didDrawMeasure = false;
            componentMeasures.forEach((componentMeasure) => {
              didDrawMeasure = this._drawSingleReactComponentMeasure(context, visibleArea, componentMeasure, scaleFactor, componentMeasure === _hoveredComponentMeasure) || didDrawMeasure;
            });
            if (!didDrawMeasure) {
              drawText("(zoom or pan to see React components)", context, visibleArea, visibleArea, {
                fillStyle: COLORS.TEXT_DIM_COLOR,
                textAlign: "center"
              });
            }
            context.fillStyle = COLORS.PRIORITY_BORDER;
            context.fillRect(visibleArea.origin.x, visibleArea.origin.y + ROW_WITH_BORDER_HEIGHT - BORDER_SIZE, visibleArea.size.width, BORDER_SIZE);
          }
          /**
           * @private
           */
          _handleMouseMove(interaction, viewRefs) {
            const {
              frame,
              _intrinsicSize,
              onHover,
              visibleArea
            } = this;
            if (!onHover) {
              return;
            }
            const {
              location
            } = interaction.payload;
            if (!rectContainsPoint(location, visibleArea)) {
              onHover(null);
              return;
            }
            const scaleFactor = positioningScaleFactor(_intrinsicSize.width, frame);
            const hoverTimestamp = positionToTimestamp(location.x, scaleFactor, frame);
            const componentMeasures = this._profilerData.componentMeasures;
            for (let index = componentMeasures.length - 1; index >= 0; index--) {
              const componentMeasure = componentMeasures[index];
              const {
                duration,
                timestamp
              } = componentMeasure;
              if (hoverTimestamp >= timestamp && hoverTimestamp <= timestamp + duration) {
                this.currentCursor = "context-menu";
                viewRefs.hoveredView = this;
                onHover(componentMeasure);
                return;
              }
            }
            onHover(null);
          }
          handleInteraction(interaction, viewRefs) {
            switch (interaction.type) {
              case "mousemove":
                this._handleMouseMove(interaction, viewRefs);
                break;
            }
          }
        }
        ;
        function isInternalModule(internalModuleSourceToRanges, flamechartStackFrame) {
          const {
            locationColumn,
            locationLine,
            scriptUrl
          } = flamechartStackFrame;
          if (scriptUrl == null || locationColumn == null || locationLine == null) {
            return false;
          }
          if (
            // Handle webpack-internal:// sources
            scriptUrl.includes("/react-devtools") || scriptUrl.includes("/react_devtools") || // Filter out known extension IDs
            scriptUrl.includes(CHROME_WEBSTORE_EXTENSION_ID) || scriptUrl.includes(INTERNAL_EXTENSION_ID) || scriptUrl.includes(LOCAL_EXTENSION_ID)
          ) {
            return true;
          }
          const ranges = internalModuleSourceToRanges.get(scriptUrl);
          if (ranges != null) {
            for (let i2 = 0; i2 < ranges.length; i2++) {
              const [startStackFrame, stopStackFrame] = ranges[i2];
              const isAfterStart = locationLine > startStackFrame.lineNumber || locationLine === startStackFrame.lineNumber && locationColumn >= startStackFrame.columnNumber;
              const isBeforeStop = locationLine < stopStackFrame.lineNumber || locationLine === stopStackFrame.lineNumber && locationColumn <= stopStackFrame.columnNumber;
              if (isAfterStart && isBeforeStop) {
                return true;
              }
            }
          }
          return false;
        }
        ;
        function hslaColorToString({
          h,
          s,
          l,
          a
        }) {
          return `hsl(${h}deg ${s}% ${l}% / ${a})`;
        }
        function dimmedColor(color, dimDelta) {
          return {
            ...color,
            l: color.l - dimDelta
          };
        }
        function hashCode(string) {
          const p = (1 << 30) * 4 - 5;
          const z = 1345575271;
          const z2 = 1506996573;
          let s = 0;
          let zi = 1;
          for (let i2 = 0; i2 < string.length; i2++) {
            const xi = string.charCodeAt(i2) * z2;
            s = (s + zi * xi) % p;
            zi = zi * z % p;
          }
          s = (s + zi * (p - 1)) % p;
          return Math.abs(s | 0);
        }
        function indexToValueInSpace(index, space) {
          if (typeof space === "number") {
            return space;
          }
          const count = space.count || space.max - space.min;
          index %= count;
          return space.min + Math.floor(index / (count - 1) * (space.max - space.min));
        }
        class ColorGenerator {
          constructor(hueSpace, satSpace, lightnessSpace, alphaSpace) {
            this._hueSpace = hueSpace || {
              min: 0,
              max: 360
            };
            this._satSpace = satSpace || 67;
            this._lightnessSpace = lightnessSpace || 80;
            this._alphaSpace = alphaSpace || 1;
            this._colors = /* @__PURE__ */ new Map();
          }
          setColorForID(id2, color) {
            this._colors.set(id2, color);
          }
          colorForID(id2) {
            const cachedColor = this._colors.get(id2);
            if (cachedColor) {
              return cachedColor;
            }
            const color = this._generateColorForID(id2);
            this._colors.set(id2, color);
            return color;
          }
          _generateColorForID(id2) {
            const hash = hashCode(id2);
            return {
              h: indexToValueInSpace(hash, this._hueSpace),
              s: indexToValueInSpace(hash >> 8, this._satSpace),
              l: indexToValueInSpace(hash >> 16, this._lightnessSpace),
              a: indexToValueInSpace(hash >> 24, this._alphaSpace)
            };
          }
        }
        ;
        function FlamechartView_defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        const colorGenerator = new ColorGenerator({
          min: 30,
          max: 330
        }, {
          min: 50,
          max: 80,
          count: 3
        }, 85);
        colorGenerator.setColorForID("", {
          h: 43.6,
          s: 45.8,
          l: 90.6,
          a: 100
        });
        function defaultHslaColorForStackFrame({
          scriptUrl
        }) {
          return colorGenerator.colorForID(scriptUrl ?? "");
        }
        function defaultColorForStackFrame(stackFrame) {
          const color = defaultHslaColorForStackFrame(stackFrame);
          return hslaColorToString(color);
        }
        function hoverColorForStackFrame(stackFrame) {
          const color = dimmedColor(defaultHslaColorForStackFrame(stackFrame), COLOR_HOVER_DIM_DELTA);
          return hslaColorToString(color);
        }
        class FlamechartStackLayerView extends View {
          /** Layer to display */
          /** A set of `stackLayer`'s frames, for efficient lookup. */
          constructor(surface, frame, stackLayer, internalModuleSourceToRanges, duration) {
            super(surface, frame);
            FlamechartView_defineProperty(this, "_hoveredStackFrame", null);
            FlamechartView_defineProperty(this, "_onHover", null);
            FlamechartView_defineProperty(this, "_didGrab", false);
            this._stackLayer = stackLayer;
            this._stackFrameSet = new Set(stackLayer);
            this._internalModuleSourceToRanges = internalModuleSourceToRanges;
            this._intrinsicSize = {
              width: duration,
              height: FLAMECHART_FRAME_HEIGHT
            };
          }
          desiredSize() {
            return this._intrinsicSize;
          }
          setHoveredFlamechartStackFrame(hoveredStackFrame) {
            if (this._hoveredStackFrame === hoveredStackFrame) {
              return;
            }
            const stackFrameToSet = hoveredStackFrame && this._stackFrameSet.has(hoveredStackFrame) ? hoveredStackFrame : null;
            if (this._hoveredStackFrame === stackFrameToSet) {
              return;
            }
            this._hoveredStackFrame = stackFrameToSet;
            this.setNeedsDisplay();
          }
          draw(context) {
            const {
              frame,
              _stackLayer,
              _hoveredStackFrame,
              _intrinsicSize,
              visibleArea
            } = this;
            context.fillStyle = COLORS.PRIORITY_BACKGROUND;
            context.fillRect(visibleArea.origin.x, visibleArea.origin.y, visibleArea.size.width, visibleArea.size.height);
            const scaleFactor = positioningScaleFactor(_intrinsicSize.width, frame);
            for (let i2 = 0; i2 < _stackLayer.length; i2++) {
              const stackFrame = _stackLayer[i2];
              const {
                name,
                timestamp,
                duration
              } = stackFrame;
              const width = durationToWidth(duration, scaleFactor);
              if (width < 1) {
                continue;
              }
              const x = Math.floor(timestampToPosition(timestamp, scaleFactor, frame));
              const nodeRect = {
                origin: {
                  x,
                  y: frame.origin.y
                },
                size: {
                  width: Math.floor(width - BORDER_SIZE),
                  height: Math.floor(FLAMECHART_FRAME_HEIGHT - BORDER_SIZE)
                }
              };
              if (!rectIntersectsRect(nodeRect, visibleArea)) {
                continue;
              }
              const showHoverHighlight = _hoveredStackFrame === _stackLayer[i2];
              let textFillStyle;
              if (isInternalModule(this._internalModuleSourceToRanges, stackFrame)) {
                context.fillStyle = showHoverHighlight ? COLORS.INTERNAL_MODULE_FRAME_HOVER : COLORS.INTERNAL_MODULE_FRAME;
                textFillStyle = COLORS.INTERNAL_MODULE_FRAME_TEXT;
              } else {
                context.fillStyle = showHoverHighlight ? hoverColorForStackFrame(stackFrame) : defaultColorForStackFrame(stackFrame);
                textFillStyle = COLORS.TEXT_COLOR;
              }
              const drawableRect = intersectionOfRects(nodeRect, visibleArea);
              context.fillRect(drawableRect.origin.x, drawableRect.origin.y, drawableRect.size.width, drawableRect.size.height);
              drawText(name, context, nodeRect, drawableRect, {
                fillStyle: textFillStyle
              });
            }
            const borderFrame = {
              origin: {
                x: frame.origin.x,
                y: frame.origin.y + FLAMECHART_FRAME_HEIGHT - BORDER_SIZE
              },
              size: {
                width: frame.size.width,
                height: BORDER_SIZE
              }
            };
            if (rectIntersectsRect(borderFrame, visibleArea)) {
              const borderDrawableRect = intersectionOfRects(borderFrame, visibleArea);
              context.fillStyle = COLORS.PRIORITY_BORDER;
              context.fillRect(borderDrawableRect.origin.x, borderDrawableRect.origin.y, borderDrawableRect.size.width, borderDrawableRect.size.height);
            }
          }
          /**
           * @private
           */
          _handleMouseMove(interaction, viewRefs) {
            const {
              _stackLayer,
              frame,
              _intrinsicSize,
              _onHover,
              visibleArea
            } = this;
            const {
              location
            } = interaction.payload;
            if (!_onHover || !rectContainsPoint(location, visibleArea)) {
              return;
            }
            const scaleFactor = positioningScaleFactor(_intrinsicSize.width, frame);
            let startIndex = 0;
            let stopIndex = _stackLayer.length - 1;
            while (startIndex <= stopIndex) {
              const currentIndex = Math.floor((startIndex + stopIndex) / 2);
              const flamechartStackFrame = _stackLayer[currentIndex];
              const {
                timestamp,
                duration
              } = flamechartStackFrame;
              const x = Math.floor(timestampToPosition(timestamp, scaleFactor, frame));
              const width = durationToWidth(duration, scaleFactor);
              if (Math.floor(width - BORDER_SIZE) >= 1) {
                if (x <= location.x && x + width >= location.x) {
                  this.currentCursor = "context-menu";
                  viewRefs.hoveredView = this;
                  _onHover(flamechartStackFrame);
                  return;
                }
              }
              if (x > location.x) {
                stopIndex = currentIndex - 1;
              } else {
                startIndex = currentIndex + 1;
              }
            }
            _onHover(null);
          }
          handleInteraction(interaction, viewRefs) {
            switch (interaction.type) {
              case "mousemove":
                this._handleMouseMove(interaction, viewRefs);
                break;
            }
          }
        }
        class FlamechartView extends View {
          constructor(surface, frame, flamechart, internalModuleSourceToRanges, duration) {
            super(surface, frame, layeredLayout);
            FlamechartView_defineProperty(this, "_flamechartRowViews", []);
            FlamechartView_defineProperty(this, "_hoveredStackFrame", null);
            FlamechartView_defineProperty(this, "_onHover", null);
            this.setDataAndUpdateSubviews(flamechart, internalModuleSourceToRanges, duration);
          }
          setDataAndUpdateSubviews(flamechart, internalModuleSourceToRanges, duration) {
            const {
              surface,
              frame,
              _onHover,
              _hoveredStackFrame
            } = this;
            if (this._verticalStackView) {
              this.removeAllSubviews();
              this._flamechartRowViews = [];
            }
            this._verticalStackView = new View(surface, frame, verticallyStackedLayout);
            this._flamechartRowViews = flamechart.map((stackLayer) => {
              const rowView = new FlamechartStackLayerView(surface, frame, stackLayer, internalModuleSourceToRanges, duration);
              this._verticalStackView.addSubview(rowView);
              rowView._onHover = _onHover;
              rowView.setHoveredFlamechartStackFrame(_hoveredStackFrame);
              return rowView;
            });
            this.addSubview(new BackgroundColorView(surface, frame));
            this.addSubview(this._verticalStackView);
          }
          setHoveredFlamechartStackFrame(hoveredStackFrame) {
            this._hoveredStackFrame = hoveredStackFrame;
            this._flamechartRowViews.forEach((rowView) => rowView.setHoveredFlamechartStackFrame(hoveredStackFrame));
          }
          setOnHover(onHover) {
            this._onHover = onHover;
            this._flamechartRowViews.forEach((rowView) => rowView._onHover = onHover);
          }
          desiredSize() {
            const intrinsicSize = this._verticalStackView.desiredSize();
            return {
              ...intrinsicSize,
              // Collapsed by default
              maxInitialHeight: 0
            };
          }
          /**
           * @private
           */
          _handleMouseMove(interaction) {
            const {
              _onHover,
              visibleArea
            } = this;
            if (!_onHover) {
              return;
            }
            const {
              location
            } = interaction.payload;
            if (!rectContainsPoint(location, visibleArea)) {
              _onHover(null);
            }
          }
          handleInteraction(interaction) {
            switch (interaction.type) {
              case "mousemove":
                this._handleMouseMove(interaction);
                break;
            }
          }
        }
        ;
        function NativeEventsView_defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        const NativeEventsView_ROW_WITH_BORDER_HEIGHT = NATIVE_EVENT_HEIGHT + BORDER_SIZE;
        class NativeEventsView extends View {
          constructor(surface, frame, profilerData) {
            super(surface, frame);
            NativeEventsView_defineProperty(this, "_hoveredEvent", null);
            NativeEventsView_defineProperty(this, "_maxDepth", 0);
            NativeEventsView_defineProperty(this, "onHover", null);
            this._profilerData = profilerData;
            this._performPreflightComputations();
          }
          _performPreflightComputations() {
            this._depthToNativeEvent = /* @__PURE__ */ new Map();
            const {
              duration,
              nativeEvents
            } = this._profilerData;
            nativeEvents.forEach((event) => {
              const depth = event.depth;
              this._maxDepth = Math.max(this._maxDepth, depth);
              if (!this._depthToNativeEvent.has(depth)) {
                this._depthToNativeEvent.set(depth, [event]);
              } else {
                this._depthToNativeEvent.get(depth).push(event);
              }
            });
            this._intrinsicSize = {
              width: duration,
              height: (this._maxDepth + 1) * NativeEventsView_ROW_WITH_BORDER_HEIGHT,
              hideScrollBarIfLessThanHeight: NativeEventsView_ROW_WITH_BORDER_HEIGHT
            };
          }
          desiredSize() {
            return this._intrinsicSize;
          }
          setHoveredEvent(hoveredEvent) {
            if (this._hoveredEvent === hoveredEvent) {
              return;
            }
            this._hoveredEvent = hoveredEvent;
            this.setNeedsDisplay();
          }
          /**
           * Draw a single `NativeEvent` as a box/span with text inside of it.
           */
          _drawSingleNativeEvent(context, rect, event, baseY, scaleFactor, showHoverHighlight) {
            const {
              frame
            } = this;
            const {
              depth,
              duration,
              timestamp,
              type,
              warning
            } = event;
            baseY += depth * NativeEventsView_ROW_WITH_BORDER_HEIGHT;
            const xStart = timestampToPosition(timestamp, scaleFactor, frame);
            const xStop = timestampToPosition(timestamp + duration, scaleFactor, frame);
            const eventRect = {
              origin: {
                x: xStart,
                y: baseY
              },
              size: {
                width: xStop - xStart,
                height: NATIVE_EVENT_HEIGHT
              }
            };
            if (!rectIntersectsRect(eventRect, rect)) {
              return;
            }
            const width = durationToWidth(duration, scaleFactor);
            if (width < 1) {
              return;
            }
            const drawableRect = intersectionOfRects(eventRect, rect);
            context.beginPath();
            if (warning !== null) {
              context.fillStyle = showHoverHighlight ? COLORS.WARNING_BACKGROUND_HOVER : COLORS.WARNING_BACKGROUND;
            } else {
              context.fillStyle = showHoverHighlight ? COLORS.NATIVE_EVENT_HOVER : COLORS.NATIVE_EVENT;
            }
            context.fillRect(drawableRect.origin.x, drawableRect.origin.y, drawableRect.size.width, drawableRect.size.height);
            const label = `${type} - ${formatting_formatDuration(duration)}`;
            drawText(label, context, eventRect, drawableRect);
          }
          draw(context) {
            const {
              frame,
              _profilerData: {
                nativeEvents
              },
              _hoveredEvent,
              visibleArea
            } = this;
            context.fillStyle = COLORS.PRIORITY_BACKGROUND;
            context.fillRect(visibleArea.origin.x, visibleArea.origin.y, visibleArea.size.width, visibleArea.size.height);
            const scaleFactor = positioningScaleFactor(this._intrinsicSize.width, frame);
            nativeEvents.forEach((event) => {
              this._drawSingleNativeEvent(context, visibleArea, event, frame.origin.y, scaleFactor, event === _hoveredEvent);
            });
            for (let i2 = 0; i2 <= this._maxDepth; i2++) {
              const borderFrame = {
                origin: {
                  x: frame.origin.x,
                  y: frame.origin.y + NATIVE_EVENT_HEIGHT
                },
                size: {
                  width: frame.size.width,
                  height: BORDER_SIZE
                }
              };
              if (rectIntersectsRect(borderFrame, visibleArea)) {
                const borderDrawableRect = intersectionOfRects(borderFrame, visibleArea);
                context.fillStyle = COLORS.PRIORITY_BORDER;
                context.fillRect(borderDrawableRect.origin.x, borderDrawableRect.origin.y, borderDrawableRect.size.width, borderDrawableRect.size.height);
              }
            }
          }
          /**
           * @private
           */
          _handleMouseMove(interaction, viewRefs) {
            const {
              frame,
              _intrinsicSize,
              onHover,
              visibleArea
            } = this;
            if (!onHover) {
              return;
            }
            const {
              location
            } = interaction.payload;
            if (!rectContainsPoint(location, visibleArea)) {
              onHover(null);
              return;
            }
            const scaleFactor = positioningScaleFactor(_intrinsicSize.width, frame);
            const hoverTimestamp = positionToTimestamp(location.x, scaleFactor, frame);
            const adjustedCanvasMouseY = location.y - frame.origin.y;
            const depth = Math.floor(adjustedCanvasMouseY / NativeEventsView_ROW_WITH_BORDER_HEIGHT);
            const nativeEventsAtDepth = this._depthToNativeEvent.get(depth);
            if (nativeEventsAtDepth) {
              for (let index = nativeEventsAtDepth.length - 1; index >= 0; index--) {
                const nativeEvent = nativeEventsAtDepth[index];
                const {
                  duration,
                  timestamp
                } = nativeEvent;
                if (hoverTimestamp >= timestamp && hoverTimestamp <= timestamp + duration) {
                  viewRefs.hoveredView = this;
                  onHover(nativeEvent);
                  return;
                }
              }
            }
            onHover(null);
          }
          handleInteraction(interaction, viewRefs) {
            switch (interaction.type) {
              case "mousemove":
                this._handleMouseMove(interaction, viewRefs);
                break;
            }
          }
        }
        ;
        function NetworkMeasuresView_defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        const HEIGHT = SUSPENSE_EVENT_HEIGHT;
        const NetworkMeasuresView_ROW_WITH_BORDER_HEIGHT = HEIGHT + BORDER_SIZE;
        const BASE_URL_REGEX = /([^:]+:\/\/[^\/]+)/;
        class NetworkMeasuresView extends View {
          constructor(surface, frame, profilerData) {
            super(surface, frame);
            NetworkMeasuresView_defineProperty(this, "_hoveredNetworkMeasure", null);
            NetworkMeasuresView_defineProperty(this, "_maxDepth", 0);
            NetworkMeasuresView_defineProperty(this, "onHover", null);
            this._profilerData = profilerData;
            this._performPreflightComputations();
          }
          _performPreflightComputations() {
            this._depthToNetworkMeasure = /* @__PURE__ */ new Map();
            const {
              duration,
              networkMeasures
            } = this._profilerData;
            networkMeasures.forEach((event) => {
              const depth = event.depth;
              this._maxDepth = Math.max(this._maxDepth, depth);
              if (!this._depthToNetworkMeasure.has(depth)) {
                this._depthToNetworkMeasure.set(depth, [event]);
              } else {
                this._depthToNetworkMeasure.get(depth).push(event);
              }
            });
            this._intrinsicSize = {
              width: duration,
              height: (this._maxDepth + 1) * NetworkMeasuresView_ROW_WITH_BORDER_HEIGHT,
              // Collapsed by default
              maxInitialHeight: 0
            };
          }
          desiredSize() {
            return this._intrinsicSize;
          }
          setHoveredEvent(networkMeasure) {
            if (this._hoveredNetworkMeasure === networkMeasure) {
              return;
            }
            this._hoveredNetworkMeasure = networkMeasure;
            this.setNeedsDisplay();
          }
          /**
           * Draw a single `NetworkMeasure` as a box/span with text inside of it.
           */
          _drawSingleNetworkMeasure(context, networkMeasure, baseY, scaleFactor, showHoverHighlight) {
            const {
              frame,
              visibleArea
            } = this;
            const {
              depth,
              finishTimestamp,
              firstReceivedDataTimestamp,
              lastReceivedDataTimestamp,
              receiveResponseTimestamp,
              sendRequestTimestamp,
              url
            } = networkMeasure;
            const duration = this._profilerData.duration;
            const timestampBegin = sendRequestTimestamp;
            const timestampEnd = finishTimestamp || lastReceivedDataTimestamp || duration;
            const timestampMiddle = receiveResponseTimestamp || firstReceivedDataTimestamp || timestampEnd;
            const xStart = timestampToPosition(timestampBegin, scaleFactor, frame);
            const xMiddle = timestampToPosition(timestampMiddle, scaleFactor, frame);
            const xStop = timestampToPosition(timestampEnd, scaleFactor, frame);
            const width = durationToWidth(xStop - xStart, scaleFactor);
            if (width < 1) {
              return;
            }
            baseY += depth * NetworkMeasuresView_ROW_WITH_BORDER_HEIGHT;
            const outerRect = {
              origin: {
                x: xStart,
                y: baseY
              },
              size: {
                width: xStop - xStart,
                height: HEIGHT
              }
            };
            if (!rectIntersectsRect(outerRect, visibleArea)) {
              return;
            }
            let rect = {
              origin: {
                x: xStart,
                y: baseY
              },
              size: {
                width: xStop - xStart,
                height: HEIGHT
              }
            };
            if (rectIntersectsRect(rect, visibleArea)) {
              context.beginPath();
              context.fillStyle = this._hoveredNetworkMeasure === networkMeasure ? COLORS.NETWORK_SECONDARY_HOVER : COLORS.NETWORK_SECONDARY;
              context.fillRect(rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
            }
            rect = {
              origin: {
                x: xStart + BORDER_SIZE,
                y: baseY + BORDER_SIZE
              },
              size: {
                width: xMiddle - xStart - BORDER_SIZE,
                height: HEIGHT - BORDER_SIZE * 2
              }
            };
            if (rectIntersectsRect(rect, visibleArea)) {
              context.beginPath();
              context.fillStyle = this._hoveredNetworkMeasure === networkMeasure ? COLORS.NETWORK_PRIMARY_HOVER : COLORS.NETWORK_PRIMARY;
              context.fillRect(rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
            }
            const baseUrl = url.match(BASE_URL_REGEX);
            const displayUrl = baseUrl !== null ? baseUrl[1] : url;
            const durationLabel = finishTimestamp !== 0 ? `${formatting_formatDuration(finishTimestamp - sendRequestTimestamp)} - ` : "";
            const label = durationLabel + displayUrl;
            drawText(label, context, outerRect, visibleArea);
          }
          draw(context) {
            const {
              frame,
              _profilerData: {
                networkMeasures
              },
              _hoveredNetworkMeasure,
              visibleArea
            } = this;
            context.fillStyle = COLORS.PRIORITY_BACKGROUND;
            context.fillRect(visibleArea.origin.x, visibleArea.origin.y, visibleArea.size.width, visibleArea.size.height);
            const scaleFactor = positioningScaleFactor(this._intrinsicSize.width, frame);
            networkMeasures.forEach((networkMeasure) => {
              this._drawSingleNetworkMeasure(context, networkMeasure, frame.origin.y, scaleFactor, networkMeasure === _hoveredNetworkMeasure);
            });
            for (let i2 = 0; i2 <= this._maxDepth; i2++) {
              const borderFrame = {
                origin: {
                  x: frame.origin.x,
                  y: frame.origin.y + (i2 + 1) * NetworkMeasuresView_ROW_WITH_BORDER_HEIGHT - BORDER_SIZE
                },
                size: {
                  width: frame.size.width,
                  height: BORDER_SIZE
                }
              };
              if (rectIntersectsRect(borderFrame, visibleArea)) {
                const borderDrawableRect = intersectionOfRects(borderFrame, visibleArea);
                context.fillStyle = COLORS.PRIORITY_BORDER;
                context.fillRect(borderDrawableRect.origin.x, borderDrawableRect.origin.y, borderDrawableRect.size.width, borderDrawableRect.size.height);
              }
            }
          }
          /**
           * @private
           */
          _handleMouseMove(interaction, viewRefs) {
            const {
              frame,
              _intrinsicSize,
              onHover,
              visibleArea
            } = this;
            if (!onHover) {
              return;
            }
            const {
              location
            } = interaction.payload;
            if (!rectContainsPoint(location, visibleArea)) {
              onHover(null);
              return;
            }
            const scaleFactor = positioningScaleFactor(_intrinsicSize.width, frame);
            const hoverTimestamp = positionToTimestamp(location.x, scaleFactor, frame);
            const adjustedCanvasMouseY = location.y - frame.origin.y;
            const depth = Math.floor(adjustedCanvasMouseY / NetworkMeasuresView_ROW_WITH_BORDER_HEIGHT);
            const networkMeasuresAtDepth = this._depthToNetworkMeasure.get(depth);
            const duration = this._profilerData.duration;
            if (networkMeasuresAtDepth) {
              for (let index = networkMeasuresAtDepth.length - 1; index >= 0; index--) {
                const networkMeasure = networkMeasuresAtDepth[index];
                const {
                  finishTimestamp,
                  lastReceivedDataTimestamp,
                  sendRequestTimestamp
                } = networkMeasure;
                const timestampBegin = sendRequestTimestamp;
                const timestampEnd = finishTimestamp || lastReceivedDataTimestamp || duration;
                if (hoverTimestamp >= timestampBegin && hoverTimestamp <= timestampEnd) {
                  this.currentCursor = "context-menu";
                  viewRefs.hoveredView = this;
                  onHover(networkMeasure);
                  return;
                }
              }
            }
            if (viewRefs.hoveredView === this) {
              viewRefs.hoveredView = null;
            }
            onHover(null);
          }
          handleInteraction(interaction, viewRefs) {
            switch (interaction.type) {
              case "mousemove":
                this._handleMouseMove(interaction, viewRefs);
                break;
            }
          }
        }
        ;
        function ReactMeasuresView_defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        const REACT_LANE_HEIGHT = REACT_MEASURE_HEIGHT + BORDER_SIZE;
        const MAX_ROWS_TO_SHOW_INITIALLY = 5;
        class ReactMeasuresView extends View {
          constructor(surface, frame, profilerData) {
            super(surface, frame);
            ReactMeasuresView_defineProperty(this, "_hoveredMeasure", null);
            ReactMeasuresView_defineProperty(this, "onHover", null);
            this._profilerData = profilerData;
            this._performPreflightComputations();
          }
          _performPreflightComputations() {
            this._lanesToRender = [];
            for (const [lane, measuresForLane] of this._profilerData.laneToReactMeasureMap) {
              if (measuresForLane.length > 0) {
                this._lanesToRender.push(lane);
              }
            }
            this._intrinsicSize = {
              width: this._profilerData.duration,
              height: this._lanesToRender.length * REACT_LANE_HEIGHT,
              hideScrollBarIfLessThanHeight: REACT_LANE_HEIGHT,
              maxInitialHeight: MAX_ROWS_TO_SHOW_INITIALLY * REACT_LANE_HEIGHT
            };
          }
          desiredSize() {
            return this._intrinsicSize;
          }
          setHoveredMeasure(hoveredMeasure) {
            if (this._hoveredMeasure === hoveredMeasure) {
              return;
            }
            this._hoveredMeasure = hoveredMeasure;
            this.setNeedsDisplay();
          }
          /**
           * Draw a single `ReactMeasure` as a bar in the canvas.
           */
          _drawSingleReactMeasure(context, rect, measure2, nextMeasure, baseY, scaleFactor, showGroupHighlight, showHoverHighlight) {
            const {
              frame,
              visibleArea
            } = this;
            const {
              timestamp,
              type,
              duration
            } = measure2;
            let fillStyle = null;
            let hoveredFillStyle = null;
            let groupSelectedFillStyle = null;
            let textFillStyle = null;
            const width = durationToWidth(duration, scaleFactor);
            if (width <= 0) {
              return;
            }
            const x = timestampToPosition(timestamp, scaleFactor, frame);
            const measureRect = {
              origin: {
                x,
                y: baseY
              },
              size: {
                width,
                height: REACT_MEASURE_HEIGHT
              }
            };
            if (!rectIntersectsRect(measureRect, rect)) {
              return;
            }
            const drawableRect = intersectionOfRects(measureRect, rect);
            let textRect = measureRect;
            switch (type) {
              case "commit":
                fillStyle = COLORS.REACT_COMMIT;
                hoveredFillStyle = COLORS.REACT_COMMIT_HOVER;
                groupSelectedFillStyle = COLORS.REACT_COMMIT_HOVER;
                textFillStyle = COLORS.REACT_COMMIT_TEXT;
                if (nextMeasure != null) {
                  if (nextMeasure.timestamp < measure2.timestamp + measure2.duration) {
                    textRect = {
                      ...measureRect,
                      size: {
                        width: timestampToPosition(nextMeasure.timestamp, scaleFactor, frame) - x,
                        height: REACT_MEASURE_HEIGHT
                      }
                    };
                  }
                }
                break;
              case "render-idle":
                fillStyle = COLORS.REACT_IDLE;
                hoveredFillStyle = COLORS.REACT_IDLE_HOVER;
                groupSelectedFillStyle = COLORS.REACT_IDLE_HOVER;
                break;
              case "render":
                fillStyle = COLORS.REACT_RENDER;
                hoveredFillStyle = COLORS.REACT_RENDER_HOVER;
                groupSelectedFillStyle = COLORS.REACT_RENDER_HOVER;
                textFillStyle = COLORS.REACT_RENDER_TEXT;
                break;
              case "layout-effects":
                fillStyle = COLORS.REACT_LAYOUT_EFFECTS;
                hoveredFillStyle = COLORS.REACT_LAYOUT_EFFECTS_HOVER;
                groupSelectedFillStyle = COLORS.REACT_LAYOUT_EFFECTS_HOVER;
                textFillStyle = COLORS.REACT_LAYOUT_EFFECTS_TEXT;
                break;
              case "passive-effects":
                fillStyle = COLORS.REACT_PASSIVE_EFFECTS;
                hoveredFillStyle = COLORS.REACT_PASSIVE_EFFECTS_HOVER;
                groupSelectedFillStyle = COLORS.REACT_PASSIVE_EFFECTS_HOVER;
                textFillStyle = COLORS.REACT_PASSIVE_EFFECTS_TEXT;
                break;
              default:
                throw new Error(`Unexpected measure type "${type}"`);
            }
            context.fillStyle = showHoverHighlight ? hoveredFillStyle : showGroupHighlight ? groupSelectedFillStyle : fillStyle;
            context.fillRect(drawableRect.origin.x, drawableRect.origin.y, drawableRect.size.width, drawableRect.size.height);
            if (textFillStyle !== null) {
              drawText(formatting_formatDuration(duration), context, textRect, visibleArea, {
                fillStyle: textFillStyle
              });
            }
          }
          draw(context) {
            const {
              frame,
              _hoveredMeasure,
              _lanesToRender,
              _profilerData,
              visibleArea
            } = this;
            context.fillStyle = COLORS.PRIORITY_BACKGROUND;
            context.fillRect(visibleArea.origin.x, visibleArea.origin.y, visibleArea.size.width, visibleArea.size.height);
            const scaleFactor = positioningScaleFactor(this._intrinsicSize.width, frame);
            for (let i2 = 0; i2 < _lanesToRender.length; i2++) {
              const lane = _lanesToRender[i2];
              const baseY = frame.origin.y + i2 * REACT_LANE_HEIGHT;
              const measuresForLane = _profilerData.laneToReactMeasureMap.get(lane);
              if (!measuresForLane) {
                throw new Error("No measures found for a React lane! This is a bug in this profiler tool. Please file an issue.");
              }
              const label = _profilerData.laneToLabelMap.get(lane);
              if (label == null) {
                console.warn(`Could not find label for lane ${lane}.`);
              } else {
                const labelRect = {
                  origin: {
                    x: visibleArea.origin.x,
                    y: baseY
                  },
                  size: {
                    width: visibleArea.size.width,
                    height: REACT_LANE_HEIGHT
                  }
                };
                drawText(label, context, labelRect, visibleArea, {
                  fillStyle: COLORS.TEXT_DIM_COLOR
                });
              }
              for (let j = 0; j < measuresForLane.length; j++) {
                const measure2 = measuresForLane[j];
                const showHoverHighlight = _hoveredMeasure === measure2;
                const showGroupHighlight = !!_hoveredMeasure && _hoveredMeasure.batchUID === measure2.batchUID;
                this._drawSingleReactMeasure(context, visibleArea, measure2, measuresForLane[j + 1] || null, baseY, scaleFactor, showGroupHighlight, showHoverHighlight);
              }
              const borderFrame = {
                origin: {
                  x: frame.origin.x,
                  y: frame.origin.y + (i2 + 1) * REACT_LANE_HEIGHT - BORDER_SIZE
                },
                size: {
                  width: frame.size.width,
                  height: BORDER_SIZE
                }
              };
              if (rectIntersectsRect(borderFrame, visibleArea)) {
                const borderDrawableRect = intersectionOfRects(borderFrame, visibleArea);
                context.fillStyle = COLORS.PRIORITY_BORDER;
                context.fillRect(borderDrawableRect.origin.x, borderDrawableRect.origin.y, borderDrawableRect.size.width, borderDrawableRect.size.height);
              }
            }
          }
          /**
           * @private
           */
          _handleMouseMove(interaction, viewRefs) {
            const {
              frame,
              _intrinsicSize,
              _lanesToRender,
              onHover,
              _profilerData,
              visibleArea
            } = this;
            if (!onHover) {
              return;
            }
            const {
              location
            } = interaction.payload;
            if (!rectContainsPoint(location, visibleArea)) {
              onHover(null);
              return;
            }
            const adjustedCanvasMouseY = location.y - frame.origin.y;
            const renderedLaneIndex = Math.floor(adjustedCanvasMouseY / REACT_LANE_HEIGHT);
            if (renderedLaneIndex < 0 || renderedLaneIndex >= _lanesToRender.length) {
              onHover(null);
              return;
            }
            const lane = _lanesToRender[renderedLaneIndex];
            const scaleFactor = positioningScaleFactor(_intrinsicSize.width, frame);
            const hoverTimestamp = positionToTimestamp(location.x, scaleFactor, frame);
            const measures = _profilerData.laneToReactMeasureMap.get(lane);
            if (!measures) {
              onHover(null);
              return;
            }
            for (let index = measures.length - 1; index >= 0; index--) {
              const measure2 = measures[index];
              const {
                duration,
                timestamp
              } = measure2;
              if (hoverTimestamp >= timestamp && hoverTimestamp <= timestamp + duration) {
                this.currentCursor = "context-menu";
                viewRefs.hoveredView = this;
                onHover(measure2);
                return;
              }
            }
            onHover(null);
          }
          handleInteraction(interaction, viewRefs) {
            switch (interaction.type) {
              case "mousemove":
                this._handleMouseMove(interaction, viewRefs);
                break;
            }
          }
        }
        ;
        function SchedulingEventsView_defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        const EVENT_ROW_HEIGHT_FIXED = TOP_ROW_PADDING + REACT_EVENT_DIAMETER + TOP_ROW_PADDING;
        class SchedulingEventsView extends View {
          constructor(surface, frame, profilerData) {
            super(surface, frame);
            SchedulingEventsView_defineProperty(this, "_hoveredEvent", null);
            SchedulingEventsView_defineProperty(this, "onHover", null);
            SchedulingEventsView_defineProperty(this, "onClick", null);
            this._profilerData = profilerData;
            this._intrinsicSize = {
              width: this._profilerData.duration,
              height: EVENT_ROW_HEIGHT_FIXED
            };
          }
          desiredSize() {
            return this._intrinsicSize;
          }
          setHoveredEvent(hoveredEvent) {
            if (this._hoveredEvent === hoveredEvent) {
              return;
            }
            this._hoveredEvent = hoveredEvent;
            this.setNeedsDisplay();
          }
          /**
           * Draw a single `SchedulingEvent` as a circle in the canvas.
           */
          _drawSingleSchedulingEvent(context, rect, event, baseY, scaleFactor, showHoverHighlight) {
            const {
              frame
            } = this;
            const {
              timestamp,
              type,
              warning
            } = event;
            const x = timestampToPosition(timestamp, scaleFactor, frame);
            const radius = REACT_EVENT_DIAMETER / 2;
            const eventRect = {
              origin: {
                x: x - radius,
                y: baseY
              },
              size: {
                width: REACT_EVENT_DIAMETER,
                height: REACT_EVENT_DIAMETER
              }
            };
            if (!rectIntersectsRect(eventRect, rect)) {
              return;
            }
            let fillStyle = null;
            if (warning !== null) {
              fillStyle = showHoverHighlight ? COLORS.WARNING_BACKGROUND_HOVER : COLORS.WARNING_BACKGROUND;
            } else {
              switch (type) {
                case "schedule-render":
                case "schedule-state-update":
                case "schedule-force-update":
                  fillStyle = showHoverHighlight ? COLORS.REACT_SCHEDULE_HOVER : COLORS.REACT_SCHEDULE;
                  break;
                default:
                  if (false) {
                  }
                  break;
              }
            }
            if (fillStyle !== null) {
              const y = eventRect.origin.y + radius;
              context.beginPath();
              context.fillStyle = fillStyle;
              context.arc(x, y, radius, 0, 2 * Math.PI);
              context.fill();
            }
          }
          draw(context) {
            const {
              frame,
              _profilerData: {
                schedulingEvents
              },
              _hoveredEvent,
              visibleArea
            } = this;
            context.fillStyle = COLORS.BACKGROUND;
            context.fillRect(visibleArea.origin.x, visibleArea.origin.y, visibleArea.size.width, visibleArea.size.height);
            const baseY = frame.origin.y + TOP_ROW_PADDING;
            const scaleFactor = positioningScaleFactor(this._intrinsicSize.width, frame);
            const highlightedEvents = [];
            schedulingEvents.forEach((event) => {
              if (event === _hoveredEvent) {
                highlightedEvents.push(event);
                return;
              }
              this._drawSingleSchedulingEvent(context, visibleArea, event, baseY, scaleFactor, false);
            });
            highlightedEvents.forEach((event) => {
              this._drawSingleSchedulingEvent(context, visibleArea, event, baseY, scaleFactor, true);
            });
            const borderFrame = {
              origin: {
                x: frame.origin.x,
                y: frame.origin.y + EVENT_ROW_HEIGHT_FIXED - BORDER_SIZE
              },
              size: {
                width: frame.size.width,
                height: BORDER_SIZE
              }
            };
            if (rectIntersectsRect(borderFrame, visibleArea)) {
              const borderDrawableRect = intersectionOfRects(borderFrame, visibleArea);
              context.fillStyle = COLORS.REACT_WORK_BORDER;
              context.fillRect(borderDrawableRect.origin.x, borderDrawableRect.origin.y, borderDrawableRect.size.width, borderDrawableRect.size.height);
            }
          }
          /**
           * @private
           */
          _handleMouseMove(interaction, viewRefs) {
            const {
              frame,
              onHover,
              visibleArea
            } = this;
            if (!onHover) {
              return;
            }
            const {
              location
            } = interaction.payload;
            if (!rectContainsPoint(location, visibleArea)) {
              onHover(null);
              return;
            }
            const {
              _profilerData: {
                schedulingEvents
              }
            } = this;
            const scaleFactor = positioningScaleFactor(this._intrinsicSize.width, frame);
            const hoverTimestamp = positionToTimestamp(location.x, scaleFactor, frame);
            const eventTimestampAllowance = widthToDuration(REACT_EVENT_DIAMETER / 2, scaleFactor);
            for (let index = schedulingEvents.length - 1; index >= 0; index--) {
              const event = schedulingEvents[index];
              const {
                timestamp
              } = event;
              if (timestamp - eventTimestampAllowance <= hoverTimestamp && hoverTimestamp <= timestamp + eventTimestampAllowance) {
                this.currentCursor = "pointer";
                viewRefs.hoveredView = this;
                onHover(event);
                return;
              }
            }
            onHover(null);
          }
          /**
           * @private
           */
          _handleClick(interaction) {
            const {
              onClick
            } = this;
            if (onClick) {
              const {
                _profilerData: {
                  schedulingEvents
                }
              } = this;
              const eventIndex = schedulingEvents.findIndex((event) => event === this._hoveredEvent);
              onClick(this._hoveredEvent, eventIndex >= 0 ? eventIndex : null);
            }
          }
          handleInteraction(interaction, viewRefs) {
            switch (interaction.type) {
              case "mousemove":
                this._handleMouseMove(interaction, viewRefs);
                break;
              case "click":
                this._handleClick(interaction);
                break;
            }
          }
        }
        ;
        function SnapshotsView_defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        class SnapshotsView extends View {
          constructor(surface, frame, profilerData) {
            super(surface, frame);
            SnapshotsView_defineProperty(this, "_hoverLocation", null);
            SnapshotsView_defineProperty(this, "onHover", null);
            this._intrinsicSize = {
              width: profilerData.duration,
              height: profilerData.snapshotHeight
            };
            this._profilerData = profilerData;
          }
          desiredSize() {
            return this._intrinsicSize;
          }
          draw(context) {
            const snapshotHeight = this._profilerData.snapshotHeight;
            const {
              visibleArea
            } = this;
            context.fillStyle = COLORS.BACKGROUND;
            context.fillRect(visibleArea.origin.x, visibleArea.origin.y, visibleArea.size.width, visibleArea.size.height);
            const y = visibleArea.origin.y;
            let x = visibleArea.origin.x;
            while (x < visibleArea.origin.x + visibleArea.size.width) {
              const snapshot = this._findClosestSnapshot(x);
              if (snapshot === null) {
                break;
              }
              const scaledHeight = snapshotHeight;
              const scaledWidth = snapshot.width * snapshotHeight / snapshot.height;
              const imageRect = {
                origin: {
                  x,
                  y
                },
                size: {
                  width: scaledWidth,
                  height: scaledHeight
                }
              };
              if (snapshot.image === null) {
                const img = snapshot.image = new Image();
                img.onload = () => {
                  this._drawSnapshotImage(context, snapshot, imageRect);
                };
                img.src = snapshot.imageSource;
              } else {
                this._drawSnapshotImage(context, snapshot, imageRect);
              }
              x += scaledWidth + BORDER_SIZE;
            }
            const hoverLocation = this._hoverLocation;
            if (hoverLocation !== null) {
              const scrubberWidth = SNAPSHOT_SCRUBBER_SIZE + BORDER_SIZE * 2;
              const scrubberOffset = scrubberWidth / 2;
              context.fillStyle = COLORS.SCRUBBER_BORDER;
              context.fillRect(hoverLocation.x - scrubberOffset, visibleArea.origin.y, scrubberWidth, visibleArea.size.height);
              context.fillStyle = COLORS.SCRUBBER_BACKGROUND;
              context.fillRect(hoverLocation.x - scrubberOffset + BORDER_SIZE, visibleArea.origin.y, SNAPSHOT_SCRUBBER_SIZE, visibleArea.size.height);
            }
          }
          handleInteraction(interaction, viewRefs) {
            switch (interaction.type) {
              case "mousemove":
              case "wheel-control":
              case "wheel-meta":
              case "wheel-plain":
              case "wheel-shift":
                this._updateHover(interaction.payload.location, viewRefs);
                break;
            }
          }
          _drawSnapshotImage(context, snapshot, imageRect) {
            const visibleArea = this.visibleArea;
            const shouldClip = !rectEqualToRect(imageRect, visibleArea);
            if (shouldClip) {
              const clippedRect = intersectionOfRects(imageRect, visibleArea);
              context.save();
              context.beginPath();
              context.rect(clippedRect.origin.x, clippedRect.origin.y, clippedRect.size.width, clippedRect.size.height);
              context.closePath();
              context.clip();
            }
            context.fillStyle = COLORS.REACT_RESIZE_BAR_BORDER;
            context.fillRect(imageRect.origin.x, imageRect.origin.y, imageRect.size.width, imageRect.size.height);
            context.drawImage(
              snapshot.image,
              // Image coordinates
              0,
              0,
              // Native image size
              snapshot.width,
              snapshot.height,
              // Canvas coordinates
              imageRect.origin.x + BORDER_SIZE,
              imageRect.origin.y + BORDER_SIZE,
              // Scaled image size
              imageRect.size.width - BORDER_SIZE * 2,
              imageRect.size.height - BORDER_SIZE * 2
            );
            if (shouldClip) {
              context.restore();
            }
          }
          _findClosestSnapshot(x) {
            const frame = this.frame;
            const scaleFactor = positioningScaleFactor(this._intrinsicSize.width, frame);
            const snapshots = this._profilerData.snapshots;
            let startIndex = 0;
            let stopIndex = snapshots.length - 1;
            while (startIndex <= stopIndex) {
              const currentIndex = Math.floor((startIndex + stopIndex) / 2);
              const snapshot = snapshots[currentIndex];
              const {
                timestamp
              } = snapshot;
              const snapshotX = Math.floor(timestampToPosition(timestamp, scaleFactor, frame));
              if (x < snapshotX) {
                stopIndex = currentIndex - 1;
              } else {
                startIndex = currentIndex + 1;
              }
            }
            return snapshots[stopIndex] || null;
          }
          /**
           * @private
           */
          _updateHover(location, viewRefs) {
            const {
              onHover,
              visibleArea
            } = this;
            if (!onHover) {
              return;
            }
            if (!rectContainsPoint(location, visibleArea)) {
              if (this._hoverLocation !== null) {
                this._hoverLocation = null;
                this.setNeedsDisplay();
              }
              onHover(null);
              return;
            }
            const snapshot = this._findClosestSnapshot(location.x);
            if (snapshot !== null) {
              this._hoverLocation = location;
              onHover(snapshot);
            } else {
              this._hoverLocation = null;
              onHover(null);
            }
            this.setNeedsDisplay();
          }
        }
        ;
        function SuspenseEventsView_defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        const SuspenseEventsView_ROW_WITH_BORDER_HEIGHT = SUSPENSE_EVENT_HEIGHT + BORDER_SIZE;
        const SuspenseEventsView_MAX_ROWS_TO_SHOW_INITIALLY = 3;
        class SuspenseEventsView extends View {
          constructor(surface, frame, profilerData) {
            super(surface, frame);
            SuspenseEventsView_defineProperty(this, "_hoveredEvent", null);
            SuspenseEventsView_defineProperty(this, "_maxDepth", 0);
            SuspenseEventsView_defineProperty(this, "onHover", null);
            this._profilerData = profilerData;
            this._performPreflightComputations();
          }
          _performPreflightComputations() {
            this._depthToSuspenseEvent = /* @__PURE__ */ new Map();
            const {
              duration,
              suspenseEvents
            } = this._profilerData;
            suspenseEvents.forEach((event) => {
              const depth = event.depth;
              this._maxDepth = Math.max(this._maxDepth, depth);
              if (!this._depthToSuspenseEvent.has(depth)) {
                this._depthToSuspenseEvent.set(depth, [event]);
              } else {
                this._depthToSuspenseEvent.get(depth).push(event);
              }
            });
            this._intrinsicSize = {
              width: duration,
              height: (this._maxDepth + 1) * SuspenseEventsView_ROW_WITH_BORDER_HEIGHT,
              hideScrollBarIfLessThanHeight: SuspenseEventsView_ROW_WITH_BORDER_HEIGHT,
              maxInitialHeight: SuspenseEventsView_ROW_WITH_BORDER_HEIGHT * SuspenseEventsView_MAX_ROWS_TO_SHOW_INITIALLY
            };
          }
          desiredSize() {
            return this._intrinsicSize;
          }
          setHoveredEvent(hoveredEvent) {
            if (this._hoveredEvent === hoveredEvent) {
              return;
            }
            this._hoveredEvent = hoveredEvent;
            this.setNeedsDisplay();
          }
          /**
           * Draw a single `SuspenseEvent` as a box/span with text inside of it.
           */
          _drawSingleSuspenseEvent(context, rect, event, baseY, scaleFactor, showHoverHighlight) {
            const {
              frame
            } = this;
            const {
              componentName,
              depth,
              duration,
              phase,
              promiseName,
              resolution,
              timestamp,
              warning
            } = event;
            baseY += depth * SuspenseEventsView_ROW_WITH_BORDER_HEIGHT;
            let fillStyle = null;
            if (warning !== null) {
              fillStyle = showHoverHighlight ? COLORS.WARNING_BACKGROUND_HOVER : COLORS.WARNING_BACKGROUND;
            } else {
              switch (resolution) {
                case "rejected":
                  fillStyle = showHoverHighlight ? COLORS.REACT_SUSPENSE_REJECTED_EVENT_HOVER : COLORS.REACT_SUSPENSE_REJECTED_EVENT;
                  break;
                case "resolved":
                  fillStyle = showHoverHighlight ? COLORS.REACT_SUSPENSE_RESOLVED_EVENT_HOVER : COLORS.REACT_SUSPENSE_RESOLVED_EVENT;
                  break;
                case "unresolved":
                  fillStyle = showHoverHighlight ? COLORS.REACT_SUSPENSE_UNRESOLVED_EVENT_HOVER : COLORS.REACT_SUSPENSE_UNRESOLVED_EVENT;
                  break;
              }
            }
            const xStart = timestampToPosition(timestamp, scaleFactor, frame);
            if (duration === null) {
              const size2 = PENDING_SUSPENSE_EVENT_SIZE;
              const halfSize = size2 / 2;
              baseY += (SUSPENSE_EVENT_HEIGHT - PENDING_SUSPENSE_EVENT_SIZE) / 2;
              const y = baseY + halfSize;
              const suspenseRect = {
                origin: {
                  x: xStart - halfSize,
                  y: baseY
                },
                size: {
                  width: size2,
                  height: size2
                }
              };
              if (!rectIntersectsRect(suspenseRect, rect)) {
                return;
              }
              context.beginPath();
              context.fillStyle = fillStyle;
              context.moveTo(xStart, y - halfSize);
              context.lineTo(xStart + halfSize, y);
              context.lineTo(xStart, y + halfSize);
              context.lineTo(xStart - halfSize, y);
              context.fill();
            } else {
              const xStop = timestampToPosition(timestamp + duration, scaleFactor, frame);
              const eventRect = {
                origin: {
                  x: xStart,
                  y: baseY
                },
                size: {
                  width: xStop - xStart,
                  height: SUSPENSE_EVENT_HEIGHT
                }
              };
              if (!rectIntersectsRect(eventRect, rect)) {
                return;
              }
              const width = durationToWidth(duration, scaleFactor);
              if (width < 1) {
                return;
              }
              const drawableRect = intersectionOfRects(eventRect, rect);
              context.beginPath();
              context.fillStyle = fillStyle;
              context.fillRect(drawableRect.origin.x, drawableRect.origin.y, drawableRect.size.width, drawableRect.size.height);
              let label = "suspended";
              if (promiseName != null) {
                label = promiseName;
              } else if (componentName != null) {
                label = `${componentName} ${label}`;
              }
              if (phase !== null) {
                label += ` during ${phase}`;
              }
              if (resolution !== "unresolved") {
                label += ` - ${formatting_formatDuration(duration)}`;
              }
              drawText(label, context, eventRect, drawableRect);
            }
          }
          draw(context) {
            const {
              frame,
              _profilerData: {
                suspenseEvents
              },
              _hoveredEvent,
              visibleArea
            } = this;
            context.fillStyle = COLORS.PRIORITY_BACKGROUND;
            context.fillRect(visibleArea.origin.x, visibleArea.origin.y, visibleArea.size.width, visibleArea.size.height);
            const scaleFactor = positioningScaleFactor(this._intrinsicSize.width, frame);
            suspenseEvents.forEach((event) => {
              this._drawSingleSuspenseEvent(context, visibleArea, event, frame.origin.y, scaleFactor, event === _hoveredEvent);
            });
            for (let i2 = 0; i2 <= this._maxDepth; i2++) {
              const borderFrame = {
                origin: {
                  x: frame.origin.x,
                  y: frame.origin.y + (i2 + 1) * SuspenseEventsView_ROW_WITH_BORDER_HEIGHT - BORDER_SIZE
                },
                size: {
                  width: frame.size.width,
                  height: BORDER_SIZE
                }
              };
              if (rectIntersectsRect(borderFrame, visibleArea)) {
                const borderDrawableRect = intersectionOfRects(borderFrame, visibleArea);
                context.fillStyle = COLORS.REACT_WORK_BORDER;
                context.fillRect(borderDrawableRect.origin.x, borderDrawableRect.origin.y, borderDrawableRect.size.width, borderDrawableRect.size.height);
              }
            }
          }
          /**
           * @private
           */
          _handleMouseMove(interaction, viewRefs) {
            const {
              frame,
              _intrinsicSize,
              onHover,
              visibleArea
            } = this;
            if (!onHover) {
              return;
            }
            const {
              location
            } = interaction.payload;
            if (!rectContainsPoint(location, visibleArea)) {
              onHover(null);
              return;
            }
            const scaleFactor = positioningScaleFactor(_intrinsicSize.width, frame);
            const hoverTimestamp = positionToTimestamp(location.x, scaleFactor, frame);
            const adjustedCanvasMouseY = location.y - frame.origin.y;
            const depth = Math.floor(adjustedCanvasMouseY / SuspenseEventsView_ROW_WITH_BORDER_HEIGHT);
            const suspenseEventsAtDepth = this._depthToSuspenseEvent.get(depth);
            if (suspenseEventsAtDepth) {
              for (let index = suspenseEventsAtDepth.length - 1; index >= 0; index--) {
                const suspenseEvent = suspenseEventsAtDepth[index];
                const {
                  duration,
                  timestamp
                } = suspenseEvent;
                if (duration === null) {
                  const timestampAllowance = widthToDuration(PENDING_SUSPENSE_EVENT_SIZE / 2, scaleFactor);
                  if (timestamp - timestampAllowance <= hoverTimestamp && hoverTimestamp <= timestamp + timestampAllowance) {
                    this.currentCursor = "context-menu";
                    viewRefs.hoveredView = this;
                    onHover(suspenseEvent);
                    return;
                  }
                } else if (hoverTimestamp >= timestamp && hoverTimestamp <= timestamp + duration) {
                  this.currentCursor = "context-menu";
                  viewRefs.hoveredView = this;
                  onHover(suspenseEvent);
                  return;
                }
              }
            }
            onHover(null);
          }
          handleInteraction(interaction, viewRefs) {
            switch (interaction.type) {
              case "mousemove":
                this._handleMouseMove(interaction, viewRefs);
                break;
            }
          }
        }
        ;
        function ThrownErrorsView_defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        const ThrownErrorsView_EVENT_ROW_HEIGHT_FIXED = TOP_ROW_PADDING + REACT_EVENT_DIAMETER + TOP_ROW_PADDING;
        class ThrownErrorsView extends View {
          constructor(surface, frame, profilerData) {
            super(surface, frame);
            ThrownErrorsView_defineProperty(this, "_hoveredEvent", null);
            ThrownErrorsView_defineProperty(this, "onHover", null);
            this._profilerData = profilerData;
            this._intrinsicSize = {
              width: this._profilerData.duration,
              height: ThrownErrorsView_EVENT_ROW_HEIGHT_FIXED
            };
          }
          desiredSize() {
            return this._intrinsicSize;
          }
          setHoveredEvent(hoveredEvent) {
            if (this._hoveredEvent === hoveredEvent) {
              return;
            }
            this._hoveredEvent = hoveredEvent;
            this.setNeedsDisplay();
          }
          /**
           * Draw a single `ThrownError` as a circle in the canvas.
           */
          _drawSingleThrownError(context, rect, thrownError, baseY, scaleFactor, showHoverHighlight) {
            const {
              frame
            } = this;
            const {
              timestamp
            } = thrownError;
            const x = timestampToPosition(timestamp, scaleFactor, frame);
            const radius = REACT_EVENT_DIAMETER / 2;
            const eventRect = {
              origin: {
                x: x - radius,
                y: baseY
              },
              size: {
                width: REACT_EVENT_DIAMETER,
                height: REACT_EVENT_DIAMETER
              }
            };
            if (!rectIntersectsRect(eventRect, rect)) {
              return;
            }
            const fillStyle = showHoverHighlight ? COLORS.REACT_THROWN_ERROR_HOVER : COLORS.REACT_THROWN_ERROR;
            const y = eventRect.origin.y + radius;
            context.beginPath();
            context.fillStyle = fillStyle;
            context.arc(x, y, radius, 0, 2 * Math.PI);
            context.fill();
          }
          draw(context) {
            const {
              frame,
              _profilerData: {
                thrownErrors
              },
              _hoveredEvent,
              visibleArea
            } = this;
            context.fillStyle = COLORS.BACKGROUND;
            context.fillRect(visibleArea.origin.x, visibleArea.origin.y, visibleArea.size.width, visibleArea.size.height);
            const baseY = frame.origin.y + TOP_ROW_PADDING;
            const scaleFactor = positioningScaleFactor(this._intrinsicSize.width, frame);
            const highlightedEvents = [];
            thrownErrors.forEach((thrownError) => {
              if (thrownError === _hoveredEvent) {
                highlightedEvents.push(thrownError);
                return;
              }
              this._drawSingleThrownError(context, visibleArea, thrownError, baseY, scaleFactor, false);
            });
            highlightedEvents.forEach((thrownError) => {
              this._drawSingleThrownError(context, visibleArea, thrownError, baseY, scaleFactor, true);
            });
            const borderFrame = {
              origin: {
                x: frame.origin.x,
                y: frame.origin.y + ThrownErrorsView_EVENT_ROW_HEIGHT_FIXED - BORDER_SIZE
              },
              size: {
                width: frame.size.width,
                height: BORDER_SIZE
              }
            };
            if (rectIntersectsRect(borderFrame, visibleArea)) {
              const borderDrawableRect = intersectionOfRects(borderFrame, visibleArea);
              context.fillStyle = COLORS.REACT_WORK_BORDER;
              context.fillRect(borderDrawableRect.origin.x, borderDrawableRect.origin.y, borderDrawableRect.size.width, borderDrawableRect.size.height);
            }
          }
          /**
           * @private
           */
          _handleMouseMove(interaction, viewRefs) {
            const {
              frame,
              onHover,
              visibleArea
            } = this;
            if (!onHover) {
              return;
            }
            const {
              location
            } = interaction.payload;
            if (!rectContainsPoint(location, visibleArea)) {
              onHover(null);
              return;
            }
            const {
              _profilerData: {
                thrownErrors
              }
            } = this;
            const scaleFactor = positioningScaleFactor(this._intrinsicSize.width, frame);
            const hoverTimestamp = positionToTimestamp(location.x, scaleFactor, frame);
            const eventTimestampAllowance = widthToDuration(REACT_EVENT_DIAMETER / 2, scaleFactor);
            for (let index = thrownErrors.length - 1; index >= 0; index--) {
              const event = thrownErrors[index];
              const {
                timestamp
              } = event;
              if (timestamp - eventTimestampAllowance <= hoverTimestamp && hoverTimestamp <= timestamp + eventTimestampAllowance) {
                this.currentCursor = "context-menu";
                viewRefs.hoveredView = this;
                onHover(event);
                return;
              }
            }
            onHover(null);
          }
          handleInteraction(interaction, viewRefs) {
            switch (interaction.type) {
              case "mousemove":
                this._handleMouseMove(interaction, viewRefs);
                break;
            }
          }
        }
        ;
        const HEADER_HEIGHT_FIXED = MARKER_HEIGHT + BORDER_SIZE;
        const LABEL_FIXED_WIDTH = LABEL_SIZE + BORDER_SIZE;
        class TimeAxisMarkersView extends View {
          constructor(surface, frame, totalDuration) {
            super(surface, frame);
            this._totalDuration = totalDuration;
            this._intrinsicSize = {
              width: this._totalDuration,
              height: HEADER_HEIGHT_FIXED
            };
          }
          desiredSize() {
            return this._intrinsicSize;
          }
          // Time mark intervals vary based on the current zoom range and the time it represents.
          // In Chrome, these seem to range from 70-140 pixels wide.
          // Time wise, they represent intervals of e.g. 1s, 500ms, 200ms, 100ms, 50ms, 20ms.
          // Based on zoom, we should determine which amount to actually show.
          _getTimeTickInterval(scaleFactor) {
            for (let i2 = 0; i2 < INTERVAL_TIMES.length; i2++) {
              const currentInterval = INTERVAL_TIMES[i2];
              const intervalWidth = durationToWidth(currentInterval, scaleFactor);
              if (intervalWidth > MIN_INTERVAL_SIZE_PX) {
                return currentInterval;
              }
            }
            return INTERVAL_TIMES[0];
          }
          draw(context) {
            const {
              frame,
              _intrinsicSize,
              visibleArea
            } = this;
            const clippedFrame = {
              origin: frame.origin,
              size: {
                width: frame.size.width,
                height: _intrinsicSize.height
              }
            };
            const drawableRect = intersectionOfRects(clippedFrame, visibleArea);
            context.fillStyle = COLORS.BACKGROUND;
            context.fillRect(drawableRect.origin.x, drawableRect.origin.y, drawableRect.size.width, drawableRect.size.height);
            const scaleFactor = positioningScaleFactor(_intrinsicSize.width, clippedFrame);
            const interval = this._getTimeTickInterval(scaleFactor);
            const firstIntervalTimestamp = Math.ceil(positionToTimestamp(drawableRect.origin.x - LABEL_FIXED_WIDTH, scaleFactor, clippedFrame) / interval) * interval;
            for (let markerTimestamp = firstIntervalTimestamp; true; markerTimestamp += interval) {
              if (markerTimestamp <= 0) {
                continue;
              }
              const x = timestampToPosition(markerTimestamp, scaleFactor, clippedFrame);
              if (x > drawableRect.origin.x + drawableRect.size.width) {
                break;
              }
              const markerLabel = Math.round(markerTimestamp);
              context.fillStyle = COLORS.PRIORITY_BORDER;
              context.fillRect(x, drawableRect.origin.y + MARKER_HEIGHT - MARKER_TICK_HEIGHT, BORDER_SIZE, MARKER_TICK_HEIGHT);
              context.fillStyle = COLORS.TIME_MARKER_LABEL;
              context.textAlign = "right";
              context.textBaseline = "middle";
              context.font = `${FONT_SIZE}px sans-serif`;
              context.fillText(`${markerLabel}ms`, x - MARKER_TEXT_PADDING, MARKER_HEIGHT / 2);
            }
            const borderFrame = {
              origin: {
                x: clippedFrame.origin.x,
                y: clippedFrame.origin.y + clippedFrame.size.height - BORDER_SIZE
              },
              size: {
                width: clippedFrame.size.width,
                height: BORDER_SIZE
              }
            };
            if (rectIntersectsRect(borderFrame, visibleArea)) {
              const borderDrawableRect = intersectionOfRects(borderFrame, visibleArea);
              context.fillStyle = COLORS.PRIORITY_BORDER;
              context.fillRect(borderDrawableRect.origin.x, borderDrawableRect.origin.y, borderDrawableRect.size.width, borderDrawableRect.size.height);
            }
          }
        }
        ;
        function UserTimingMarksView_defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        const ROW_HEIGHT_FIXED = TOP_ROW_PADDING + USER_TIMING_MARK_SIZE + TOP_ROW_PADDING;
        class UserTimingMarksView extends View {
          constructor(surface, frame, marks, duration) {
            super(surface, frame);
            UserTimingMarksView_defineProperty(this, "_hoveredMark", null);
            UserTimingMarksView_defineProperty(this, "onHover", null);
            this._marks = marks;
            this._intrinsicSize = {
              width: duration,
              height: ROW_HEIGHT_FIXED
            };
          }
          desiredSize() {
            return this._intrinsicSize;
          }
          setHoveredMark(hoveredMark) {
            if (this._hoveredMark === hoveredMark) {
              return;
            }
            this._hoveredMark = hoveredMark;
            this.setNeedsDisplay();
          }
          /**
           * Draw a single `UserTimingMark` as a circle in the canvas.
           */
          _drawSingleMark(context, rect, mark2, baseY, scaleFactor, showHoverHighlight) {
            const {
              frame
            } = this;
            const {
              timestamp
            } = mark2;
            const x = timestampToPosition(timestamp, scaleFactor, frame);
            const size2 = USER_TIMING_MARK_SIZE;
            const halfSize = size2 / 2;
            const markRect = {
              origin: {
                x: x - halfSize,
                y: baseY
              },
              size: {
                width: size2,
                height: size2
              }
            };
            if (!rectIntersectsRect(markRect, rect)) {
              return;
            }
            const fillStyle = showHoverHighlight ? COLORS.USER_TIMING_HOVER : COLORS.USER_TIMING;
            if (fillStyle !== null) {
              const y = baseY + halfSize;
              context.beginPath();
              context.fillStyle = fillStyle;
              context.moveTo(x, y - halfSize);
              context.lineTo(x + halfSize, y);
              context.lineTo(x, y + halfSize);
              context.lineTo(x - halfSize, y);
              context.fill();
            }
          }
          draw(context) {
            const {
              frame,
              _marks,
              _hoveredMark,
              visibleArea
            } = this;
            context.fillStyle = COLORS.BACKGROUND;
            context.fillRect(visibleArea.origin.x, visibleArea.origin.y, visibleArea.size.width, visibleArea.size.height);
            const baseY = frame.origin.y + TOP_ROW_PADDING;
            const scaleFactor = positioningScaleFactor(this._intrinsicSize.width, frame);
            _marks.forEach((mark2) => {
              if (mark2 === _hoveredMark) {
                return;
              }
              this._drawSingleMark(context, visibleArea, mark2, baseY, scaleFactor, false);
            });
            if (_hoveredMark !== null) {
              this._drawSingleMark(context, visibleArea, _hoveredMark, baseY, scaleFactor, true);
            }
            const borderFrame = {
              origin: {
                x: frame.origin.x,
                y: frame.origin.y + ROW_HEIGHT_FIXED - BORDER_SIZE
              },
              size: {
                width: frame.size.width,
                height: BORDER_SIZE
              }
            };
            if (rectIntersectsRect(borderFrame, visibleArea)) {
              const borderDrawableRect = intersectionOfRects(borderFrame, visibleArea);
              context.fillStyle = COLORS.PRIORITY_BORDER;
              context.fillRect(borderDrawableRect.origin.x, borderDrawableRect.origin.y, borderDrawableRect.size.width, borderDrawableRect.size.height);
            }
          }
          /**
           * @private
           */
          _handleMouseMove(interaction, viewRefs) {
            const {
              frame,
              onHover,
              visibleArea
            } = this;
            if (!onHover) {
              return;
            }
            const {
              location
            } = interaction.payload;
            if (!rectContainsPoint(location, visibleArea)) {
              onHover(null);
              return;
            }
            const {
              _marks
            } = this;
            const scaleFactor = positioningScaleFactor(this._intrinsicSize.width, frame);
            const hoverTimestamp = positionToTimestamp(location.x, scaleFactor, frame);
            const timestampAllowance = widthToDuration(USER_TIMING_MARK_SIZE / 2, scaleFactor);
            for (let index = _marks.length - 1; index >= 0; index--) {
              const mark2 = _marks[index];
              const {
                timestamp
              } = mark2;
              if (timestamp - timestampAllowance <= hoverTimestamp && hoverTimestamp <= timestamp + timestampAllowance) {
                viewRefs.hoveredView = this;
                onHover(mark2);
                return;
              }
            }
            onHover(null);
          }
          handleInteraction(interaction, viewRefs) {
            switch (interaction.type) {
              case "mousemove":
                this._handleMouseMove(interaction, viewRefs);
                break;
            }
          }
        }
        ;
        ;
        function unmemoizedGetBatchRange(batchUID, data, minStartTime = 0) {
          const measures = data.batchUIDToMeasuresMap.get(batchUID);
          if (measures == null || measures.length === 0) {
            throw Error(`Could not find measures with batch UID "${batchUID}"`);
          }
          const lastMeasure = measures[measures.length - 1];
          const stopTime = lastMeasure.timestamp + lastMeasure.duration;
          if (stopTime < minStartTime) {
            return [0, 0];
          }
          let startTime = minStartTime;
          for (let index = 0; index < measures.length; index++) {
            const measure2 = measures[index];
            if (measure2.timestamp >= minStartTime) {
              startTime = measure2.timestamp;
              break;
            }
          }
          return [startTime, stopTime];
        }
        const getBatchRange = dist_memoize_one_esm(unmemoizedGetBatchRange);
        ;
        const TOOLTIP_OFFSET_BOTTOM = 10;
        const TOOLTIP_OFFSET_TOP = 5;
        function useSmartTooltip({
          canvasRef,
          mouseX,
          mouseY
        }) {
          const ref = (0, external_react_namespaceObject.useRef)(null);
          let height = window.innerHeight;
          let width = window.innerWidth;
          const target = canvasRef.current;
          if (target !== null) {
            const rect = target.getBoundingClientRect();
            height = rect.top + rect.height;
            width = rect.left + rect.width;
          }
          (0, external_react_namespaceObject.useLayoutEffect)(() => {
            const element = ref.current;
            if (element !== null) {
              if (mouseY + TOOLTIP_OFFSET_BOTTOM + element.offsetHeight >= height) {
                if (mouseY - TOOLTIP_OFFSET_TOP - element.offsetHeight > 0) {
                  element.style.top = `${mouseY - element.offsetHeight - TOOLTIP_OFFSET_TOP}px`;
                } else {
                  element.style.top = "0px";
                }
              } else {
                element.style.top = `${mouseY + TOOLTIP_OFFSET_BOTTOM}px`;
              }
              if (mouseX + TOOLTIP_OFFSET_BOTTOM + element.offsetWidth >= width) {
                if (mouseX - TOOLTIP_OFFSET_TOP - element.offsetWidth > 0) {
                  element.style.left = `${mouseX - element.offsetWidth - TOOLTIP_OFFSET_TOP}px`;
                } else {
                  element.style.left = "0px";
                }
              } else {
                element.style.left = `${mouseX + TOOLTIP_OFFSET_BOTTOM}px`;
              }
            }
          });
          return ref;
        }
        var EventTooltip = __webpack_require__(3980);
        var EventTooltip_default = /* @__PURE__ */ __webpack_require__.n(EventTooltip);
        ;
        const MAX_TOOLTIP_TEXT_LENGTH = 60;
        function getReactMeasureLabel(type) {
          switch (type) {
            case "commit":
              return "react commit";
            case "render-idle":
              return "react idle";
            case "render":
              return "react render";
            case "layout-effects":
              return "react layout effects";
            case "passive-effects":
              return "react passive effects";
            default:
              return null;
          }
        }
        function EventTooltip_EventTooltip({
          canvasRef,
          data,
          height,
          hoveredEvent,
          origin,
          width
        }) {
          const ref = useSmartTooltip({
            canvasRef,
            mouseX: origin.x,
            mouseY: origin.y
          });
          if (hoveredEvent === null) {
            return null;
          }
          const {
            componentMeasure,
            flamechartStackFrame,
            measure: measure2,
            nativeEvent,
            networkMeasure,
            schedulingEvent,
            snapshot,
            suspenseEvent,
            thrownError,
            userTimingMark
          } = hoveredEvent;
          let content = null;
          if (componentMeasure !== null) {
            content = /* @__PURE__ */ external_react_namespaceObject.createElement(TooltipReactComponentMeasure, {
              componentMeasure
            });
          } else if (nativeEvent !== null) {
            content = /* @__PURE__ */ external_react_namespaceObject.createElement(TooltipNativeEvent, {
              nativeEvent
            });
          } else if (networkMeasure !== null) {
            content = /* @__PURE__ */ external_react_namespaceObject.createElement(TooltipNetworkMeasure, {
              networkMeasure
            });
          } else if (schedulingEvent !== null) {
            content = /* @__PURE__ */ external_react_namespaceObject.createElement(TooltipSchedulingEvent, {
              data,
              schedulingEvent
            });
          } else if (snapshot !== null) {
            content = /* @__PURE__ */ external_react_namespaceObject.createElement(TooltipSnapshot, {
              height,
              snapshot,
              width
            });
          } else if (suspenseEvent !== null) {
            content = /* @__PURE__ */ external_react_namespaceObject.createElement(TooltipSuspenseEvent, {
              suspenseEvent
            });
          } else if (measure2 !== null) {
            content = /* @__PURE__ */ external_react_namespaceObject.createElement(TooltipReactMeasure, {
              data,
              measure: measure2
            });
          } else if (flamechartStackFrame !== null) {
            content = /* @__PURE__ */ external_react_namespaceObject.createElement(TooltipFlamechartNode, {
              stackFrame: flamechartStackFrame
            });
          } else if (userTimingMark !== null) {
            content = /* @__PURE__ */ external_react_namespaceObject.createElement(TooltipUserTimingMark, {
              mark: userTimingMark
            });
          } else if (thrownError !== null) {
            content = /* @__PURE__ */ external_react_namespaceObject.createElement(TooltipThrownError, {
              thrownError
            });
          }
          if (content !== null) {
            return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              className: EventTooltip_default().Tooltip,
              ref
            }, content);
          } else {
            return null;
          }
        }
        const TooltipReactComponentMeasure = ({
          componentMeasure
        }) => {
          const {
            componentName,
            duration,
            timestamp,
            type,
            warning
          } = componentMeasure;
          let label = componentName;
          switch (type) {
            case "render":
              label += " rendered";
              break;
            case "layout-effect-mount":
              label += " mounted layout effect";
              break;
            case "layout-effect-unmount":
              label += " unmounted layout effect";
              break;
            case "passive-effect-mount":
              label += " mounted passive effect";
              break;
            case "passive-effect-unmount":
              label += " unmounted passive effect";
              break;
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().TooltipSection
          }, trimString(label, 768), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().Divider
          }), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGrid
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGridLabel
          }, "Timestamp:"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, formatTimestamp(timestamp)), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGridLabel
          }, "Duration:"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, formatting_formatDuration(duration)))), warning !== null && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().TooltipWarningSection
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().WarningText
          }, warning)));
        };
        const TooltipFlamechartNode = ({
          stackFrame
        }) => {
          const {
            name,
            timestamp,
            duration,
            locationLine,
            locationColumn
          } = stackFrame;
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().TooltipSection
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: EventTooltip_default().FlamechartStackFrameName
          }, name), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGrid
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGridLabel
          }, "Timestamp:"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, formatTimestamp(timestamp)), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGridLabel
          }, "Duration:"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, formatting_formatDuration(duration)), (locationLine !== void 0 || locationColumn !== void 0) && /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGridLabel
          }, "Location:"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, "line ", locationLine, ", column ", locationColumn))));
        };
        const TooltipNativeEvent = ({
          nativeEvent
        }) => {
          const {
            duration,
            timestamp,
            type,
            warning
          } = nativeEvent;
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().TooltipSection
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: EventTooltip_default().NativeEventName
          }, trimString(type, 768)), "event", /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().Divider
          }), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGrid
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGridLabel
          }, "Timestamp:"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, formatTimestamp(timestamp)), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGridLabel
          }, "Duration:"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, formatting_formatDuration(duration)))), warning !== null && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().TooltipWarningSection
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().WarningText
          }, warning)));
        };
        const TooltipNetworkMeasure = ({
          networkMeasure
        }) => {
          const {
            finishTimestamp,
            lastReceivedDataTimestamp,
            priority,
            sendRequestTimestamp,
            url
          } = networkMeasure;
          let urlToDisplay = url;
          if (urlToDisplay.length > MAX_TOOLTIP_TEXT_LENGTH) {
            const half = Math.floor(MAX_TOOLTIP_TEXT_LENGTH / 2);
            urlToDisplay = url.slice(0, half) + "\u2026" + url.slice(url.length - half);
          }
          const timestampBegin = sendRequestTimestamp;
          const timestampEnd = finishTimestamp || lastReceivedDataTimestamp;
          const duration = timestampEnd > 0 ? formatting_formatDuration(finishTimestamp - timestampBegin) : "(incomplete)";
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().SingleLineTextSection
          }, duration, " ", /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: EventTooltip_default().DimText
          }, priority), " ", urlToDisplay);
        };
        const TooltipSchedulingEvent = ({
          data,
          schedulingEvent
        }) => {
          const label = getSchedulingEventLabel(schedulingEvent);
          if (!label) {
            if (false) {
            }
            return null;
          }
          let laneLabels = null;
          let lanes = null;
          switch (schedulingEvent.type) {
            case "schedule-render":
            case "schedule-state-update":
            case "schedule-force-update":
              lanes = schedulingEvent.lanes;
              laneLabels = lanes.map((lane) => data.laneToLabelMap.get(lane));
              break;
          }
          const {
            componentName,
            timestamp,
            warning
          } = schedulingEvent;
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().TooltipSection
          }, componentName && /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: EventTooltip_default().ComponentName
          }, trimString(componentName, 100)), label, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().Divider
          }), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGrid
          }, laneLabels !== null && lanes !== null && /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGridLabel
          }, "Lanes:"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, laneLabels.join(", "), " (", lanes.join(", "), ")")), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGridLabel
          }, "Timestamp:"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, formatTimestamp(timestamp)))), warning !== null && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().TooltipWarningSection
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().WarningText
          }, warning)));
        };
        const TooltipSnapshot = ({
          height,
          snapshot,
          width
        }) => {
          const aspectRatio = snapshot.width / snapshot.height;
          let safeWidth = snapshot.width;
          let safeHeight = snapshot.height;
          if (safeWidth > width) {
            safeWidth = width;
            safeHeight = safeWidth / aspectRatio;
          }
          if (safeHeight > height) {
            safeHeight = height;
            safeWidth = safeHeight * aspectRatio;
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement("img", {
            className: EventTooltip_default().Image,
            src: snapshot.imageSource,
            style: {
              height: safeHeight,
              width: safeWidth
            }
          });
        };
        const TooltipSuspenseEvent = ({
          suspenseEvent
        }) => {
          const {
            componentName,
            duration,
            phase,
            promiseName,
            resolution,
            timestamp,
            warning
          } = suspenseEvent;
          let label = "suspended";
          if (phase !== null) {
            label += ` during ${phase}`;
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().TooltipSection
          }, componentName && /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: EventTooltip_default().ComponentName
          }, trimString(componentName, 100)), label, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().Divider
          }), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGrid
          }, promiseName !== null && /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGridLabel
          }, "Resource:"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGridLongValue
          }, promiseName)), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGridLabel
          }, "Status:"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, resolution), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGridLabel
          }, "Timestamp:"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, formatTimestamp(timestamp)), duration !== null && /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGridLabel
          }, "Duration:"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, formatting_formatDuration(duration))))), warning !== null && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().TooltipWarningSection
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().WarningText
          }, warning)));
        };
        const TooltipReactMeasure = ({
          data,
          measure: measure2
        }) => {
          const label = getReactMeasureLabel(measure2.type);
          if (!label) {
            if (false) {
            }
            return null;
          }
          const {
            batchUID,
            duration,
            timestamp,
            lanes
          } = measure2;
          const [startTime, stopTime] = getBatchRange(batchUID, data);
          const laneLabels = lanes.map((lane) => data.laneToLabelMap.get(lane));
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().TooltipSection
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: EventTooltip_default().ReactMeasureLabel
          }, label), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().Divider
          }), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGrid
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGridLabel
          }, "Timestamp:"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, formatTimestamp(timestamp)), measure2.type !== "render-idle" && /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGridLabel
          }, "Duration:"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, formatting_formatDuration(duration))), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGridLabel
          }, "Batch duration:"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, formatting_formatDuration(stopTime - startTime)), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGridLabel
          }, "Lane", lanes.length === 1 ? "" : "s", ":"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, laneLabels.length > 0 ? `${laneLabels.join(", ")} (${lanes.join(", ")})` : lanes.join(", "))));
        };
        const TooltipUserTimingMark = ({
          mark: mark2
        }) => {
          const {
            name,
            timestamp
          } = mark2;
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().TooltipSection
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: EventTooltip_default().UserTimingLabel
          }, name), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().Divider
          }), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGrid
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGridLabel
          }, "Timestamp:"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, formatTimestamp(timestamp))));
        };
        const TooltipThrownError = ({
          thrownError
        }) => {
          const {
            componentName,
            message,
            phase,
            timestamp
          } = thrownError;
          const label = `threw an error during ${phase}`;
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().TooltipSection
          }, componentName && /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: EventTooltip_default().ComponentName
          }, trimString(componentName, 100)), /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: EventTooltip_default().UserTimingLabel
          }, label), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().Divider
          }), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGrid
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGridLabel
          }, "Timestamp:"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, formatTimestamp(timestamp)), message !== "" && /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: EventTooltip_default().DetailsGridLabel
          }, "Error:"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, message))));
        };
        ;
        const EMPTY_ARRAY = [];
        function TimelineSearchContext_reducer(state2, action) {
          let {
            searchIndex,
            searchRegExp,
            searchResults,
            searchText
          } = state2;
          switch (action.type) {
            case "GO_TO_NEXT_SEARCH_RESULT":
              if (searchResults.length > 0) {
                if (searchIndex === -1 || searchIndex + 1 === searchResults.length) {
                  searchIndex = 0;
                } else {
                  searchIndex++;
                }
              }
              break;
            case "GO_TO_PREVIOUS_SEARCH_RESULT":
              if (searchResults.length > 0) {
                if (searchIndex === -1 || searchIndex === 0) {
                  searchIndex = searchResults.length - 1;
                } else {
                  searchIndex--;
                }
              }
              break;
            case "SET_SEARCH_TEXT":
              searchText = action.payload;
              searchRegExp = null;
              searchResults = [];
              if (searchText !== "") {
                const safeSearchText = searchText.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
                searchRegExp = new RegExp(`^${safeSearchText}`, "i");
                let prevSelectedMeasure = null;
                if (searchIndex >= 0 && searchResults.length > searchIndex) {
                  prevSelectedMeasure = searchResults[searchIndex];
                }
                const componentMeasures = state2.profilerData.componentMeasures;
                let prevSelectedMeasureIndex = -1;
                for (let i2 = 0; i2 < componentMeasures.length; i2++) {
                  const componentMeasure = componentMeasures[i2];
                  if (componentMeasure.componentName.match(searchRegExp)) {
                    searchResults.push(componentMeasure);
                    if (componentMeasure === prevSelectedMeasure) {
                      prevSelectedMeasureIndex = searchResults.length - 1;
                    }
                  }
                }
                searchIndex = prevSelectedMeasureIndex >= 0 ? prevSelectedMeasureIndex : 0;
              }
              break;
          }
          return {
            profilerData: state2.profilerData,
            searchIndex,
            searchRegExp,
            searchResults,
            searchText
          };
        }
        const TimelineSearchContext = /* @__PURE__ */ (0, external_react_namespaceObject.createContext)(null);
        TimelineSearchContext.displayName = "TimelineSearchContext";
        function TimelineSearchContextController({
          children,
          profilerData,
          viewState
        }) {
          const [state2, dispatch] = (0, external_react_namespaceObject.useReducer)(TimelineSearchContext_reducer, {
            profilerData,
            searchIndex: -1,
            searchRegExp: null,
            searchResults: EMPTY_ARRAY,
            searchText: ""
          });
          const value = (0, external_react_namespaceObject.useMemo)(() => ({
            ...state2,
            dispatch
          }), [state2]);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(TimelineSearchContext.Provider, {
            value
          }, children);
        }
        ;
        function zoomToBatch(data, measure2, viewState, width) {
          const {
            batchUID
          } = measure2;
          const [rangeStart, rangeEnd] = getBatchRange(batchUID, data);
          const scrollState = moveStateToRange({
            state: viewState.horizontalScrollState,
            rangeStart,
            rangeEnd,
            contentLength: data.duration,
            minContentLength: data.duration * MIN_ZOOM_LEVEL,
            maxContentLength: data.duration * MAX_ZOOM_LEVEL,
            containerLength: width
          });
          viewState.updateHorizontalScrollState(scrollState);
        }
        function copySummary(data, measure2) {
          const {
            batchUID,
            duration,
            timestamp,
            type
          } = measure2;
          const [startTime, stopTime] = getBatchRange(batchUID, data);
          (0, clipboard.copy)(JSON.stringify({
            type,
            timestamp: pretty_ms_default()(timestamp),
            duration: pretty_ms_default()(duration),
            batchDuration: pretty_ms_default()(stopTime - startTime)
          }));
        }
        function CanvasPageContextMenu({
          canvasRef,
          timelineData,
          hoveredEvent,
          viewState,
          canvasWidth,
          closedMenuStub,
          ref
        }) {
          const menuItems = (0, external_react_namespaceObject.useMemo)(() => {
            if (hoveredEvent == null) {
              return [];
            }
            const {
              componentMeasure,
              flamechartStackFrame,
              measure: measure2,
              networkMeasure,
              schedulingEvent,
              suspenseEvent
            } = hoveredEvent;
            const items = [];
            if (componentMeasure != null) {
              items.push({
                onClick: () => (0, clipboard.copy)(componentMeasure.componentName),
                content: "Copy component name"
              });
            }
            if (networkMeasure != null) {
              items.push({
                onClick: () => (0, clipboard.copy)(networkMeasure.url),
                content: "Copy URL"
              });
            }
            if (schedulingEvent != null) {
              items.push({
                onClick: () => (0, clipboard.copy)(schedulingEvent.componentName),
                content: "Copy component name"
              });
            }
            if (suspenseEvent != null) {
              items.push({
                onClick: () => (0, clipboard.copy)(suspenseEvent.componentName),
                content: "Copy component name"
              });
            }
            if (measure2 != null) {
              items.push({
                onClick: () => zoomToBatch(timelineData, measure2, viewState, canvasWidth),
                content: "Zoom to batch"
              }, {
                onClick: () => copySummary(timelineData, measure2),
                content: "Copy summary"
              });
            }
            if (flamechartStackFrame != null) {
              items.push({
                onClick: () => (0, clipboard.copy)(flamechartStackFrame.scriptUrl),
                content: "Copy file path"
              }, {
                onClick: () => (0, clipboard.copy)(`line ${flamechartStackFrame.locationLine ?? ""}, column ${flamechartStackFrame.locationColumn ?? ""}`),
                content: "Copy location"
              });
            }
            return items;
          }, [hoveredEvent, viewState, canvasWidth]);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(ContextMenuContainer, {
            anchorElementRef: canvasRef,
            items: menuItems,
            closedMenuStub,
            ref
          });
        }
        var CanvasPage = __webpack_require__(9410);
        var CanvasPage_default = /* @__PURE__ */ __webpack_require__.n(CanvasPage);
        ;
        function CanvasPage_CanvasPage({
          profilerData,
          viewState
        }) {
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: CanvasPage_default().CanvasPage,
            style: {
              backgroundColor: COLORS.BACKGROUND
            }
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(AutoSizer, null, ({
            height,
            width
          }) => /* @__PURE__ */ external_react_namespaceObject.createElement(AutoSizedCanvas, {
            data: profilerData,
            height,
            viewState,
            width
          })));
        }
        const EMPTY_CONTEXT_INFO = {
          componentMeasure: null,
          flamechartStackFrame: null,
          measure: null,
          nativeEvent: null,
          networkMeasure: null,
          schedulingEvent: null,
          snapshot: null,
          suspenseEvent: null,
          thrownError: null,
          userTimingMark: null
        };
        function AutoSizedCanvas({
          data,
          height,
          viewState,
          width
        }) {
          const canvasRef = (0, external_react_namespaceObject.useRef)(null);
          const [mouseLocation, setMouseLocation] = (0, external_react_namespaceObject.useState)(zeroPoint);
          const [hoveredEvent, setHoveredEvent] = (0, external_react_namespaceObject.useState)(null);
          const [lastHoveredEvent, setLastHoveredEvent] = (0, external_react_namespaceObject.useState)(null);
          const contextMenuRef = (0, external_react_namespaceObject.useRef)(null);
          const resetHoveredEvent = (0, external_react_namespaceObject.useCallback)(() => setHoveredEvent(EMPTY_CONTEXT_INFO), []);
          const updateHoveredEvent = (0, external_react_namespaceObject.useCallback)((event) => {
            setHoveredEvent(event);
            if (contextMenuRef.current?.isShown()) {
              return;
            }
            const {
              componentMeasure,
              flamechartStackFrame,
              measure: measure2,
              networkMeasure,
              schedulingEvent,
              suspenseEvent
            } = event;
            if (componentMeasure != null || flamechartStackFrame != null || measure2 != null || networkMeasure != null || schedulingEvent != null || suspenseEvent != null) {
              setLastHoveredEvent(event);
            }
          }, [contextMenuRef]);
          const {
            searchIndex,
            searchRegExp,
            searchResults
          } = (0, external_react_namespaceObject.useContext)(TimelineSearchContext);
          (0, external_react_namespaceObject.useLayoutEffect)(() => {
            viewState.updateSearchRegExpState(searchRegExp);
            const componentMeasureSearchResult = searchResults.length > 0 ? searchResults[searchIndex] : null;
            if (componentMeasureSearchResult != null) {
              const scrollState = moveStateToRange({
                state: viewState.horizontalScrollState,
                rangeStart: componentMeasureSearchResult.timestamp,
                rangeEnd: componentMeasureSearchResult.timestamp + componentMeasureSearchResult.duration,
                contentLength: data.duration,
                minContentLength: data.duration * MIN_ZOOM_LEVEL,
                maxContentLength: data.duration * MAX_ZOOM_LEVEL,
                containerLength: width
              });
              viewState.updateHorizontalScrollState(scrollState);
            }
            surfaceRef.current.displayIfNeeded();
          }, [searchIndex, searchRegExp, searchResults, viewState]);
          const surfaceRef = (0, external_react_namespaceObject.useRef)(new Surface(resetHoveredEvent));
          const userTimingMarksViewRef = (0, external_react_namespaceObject.useRef)(null);
          const nativeEventsViewRef = (0, external_react_namespaceObject.useRef)(null);
          const schedulingEventsViewRef = (0, external_react_namespaceObject.useRef)(null);
          const suspenseEventsViewRef = (0, external_react_namespaceObject.useRef)(null);
          const componentMeasuresViewRef = (0, external_react_namespaceObject.useRef)(null);
          const reactMeasuresViewRef = (0, external_react_namespaceObject.useRef)(null);
          const flamechartViewRef = (0, external_react_namespaceObject.useRef)(null);
          const networkMeasuresViewRef = (0, external_react_namespaceObject.useRef)(null);
          const snapshotsViewRef = (0, external_react_namespaceObject.useRef)(null);
          const thrownErrorsViewRef = (0, external_react_namespaceObject.useRef)(null);
          (0, external_react_namespaceObject.useLayoutEffect)(() => {
            const surface = surfaceRef.current;
            const defaultFrame = {
              origin: zeroPoint,
              size: {
                width,
                height
              }
            };
            viewState.onHorizontalScrollStateChange((scrollState) => {
              contextMenuRef.current?.hide();
            });
            viewState.updateHorizontalScrollState(clampState({
              state: viewState.horizontalScrollState,
              minContentLength: data.duration * MIN_ZOOM_LEVEL,
              maxContentLength: data.duration * MAX_ZOOM_LEVEL,
              containerLength: defaultFrame.size.width
            }));
            function createViewHelper(view, label, shouldScrollVertically = false, shouldResizeVertically = false) {
              let verticalScrollView = null;
              if (shouldScrollVertically) {
                verticalScrollView = new VerticalScrollView(surface, defaultFrame, view, viewState, label);
              }
              const horizontalPanAndZoomView = new HorizontalPanAndZoomView(surface, defaultFrame, verticalScrollView !== null ? verticalScrollView : view, data.duration, viewState);
              let resizableView = null;
              if (shouldResizeVertically) {
                resizableView = new ResizableView(surface, defaultFrame, horizontalPanAndZoomView, viewState, canvasRef, label);
              }
              return resizableView || horizontalPanAndZoomView;
            }
            const axisMarkersView = new TimeAxisMarkersView(surface, defaultFrame, data.duration);
            const axisMarkersViewWrapper = createViewHelper(axisMarkersView, "time");
            let userTimingMarksViewWrapper = null;
            if (data.otherUserTimingMarks.length > 0) {
              const userTimingMarksView = new UserTimingMarksView(surface, defaultFrame, data.otherUserTimingMarks, data.duration);
              userTimingMarksViewRef.current = userTimingMarksView;
              userTimingMarksViewWrapper = createViewHelper(userTimingMarksView, "user timing api");
            }
            let nativeEventsViewWrapper = null;
            if (data.nativeEvents.length > 0) {
              const nativeEventsView = new NativeEventsView(surface, defaultFrame, data);
              nativeEventsViewRef.current = nativeEventsView;
              nativeEventsViewWrapper = createViewHelper(nativeEventsView, "events", true, true);
            }
            let thrownErrorsViewWrapper = null;
            if (data.thrownErrors.length > 0) {
              const thrownErrorsView = new ThrownErrorsView(surface, defaultFrame, data);
              thrownErrorsViewRef.current = thrownErrorsView;
              thrownErrorsViewWrapper = createViewHelper(thrownErrorsView, "thrown errors");
            }
            let schedulingEventsViewWrapper = null;
            if (data.schedulingEvents.length > 0) {
              const schedulingEventsView = new SchedulingEventsView(surface, defaultFrame, data);
              schedulingEventsViewRef.current = schedulingEventsView;
              schedulingEventsViewWrapper = createViewHelper(schedulingEventsView, "react updates");
            }
            let suspenseEventsViewWrapper = null;
            if (data.suspenseEvents.length > 0) {
              const suspenseEventsView = new SuspenseEventsView(surface, defaultFrame, data);
              suspenseEventsViewRef.current = suspenseEventsView;
              suspenseEventsViewWrapper = createViewHelper(suspenseEventsView, "suspense", true, true);
            }
            const reactMeasuresView = new ReactMeasuresView(surface, defaultFrame, data);
            reactMeasuresViewRef.current = reactMeasuresView;
            const reactMeasuresViewWrapper = createViewHelper(reactMeasuresView, "react scheduling", true, true);
            let componentMeasuresViewWrapper = null;
            if (data.componentMeasures.length > 0) {
              const componentMeasuresView = new ComponentMeasuresView(surface, defaultFrame, data, viewState);
              componentMeasuresViewRef.current = componentMeasuresView;
              componentMeasuresViewWrapper = createViewHelper(componentMeasuresView, "react components");
            }
            let snapshotsViewWrapper = null;
            if (data.snapshots.length > 0) {
              const snapshotsView = new SnapshotsView(surface, defaultFrame, data);
              snapshotsViewRef.current = snapshotsView;
              snapshotsViewWrapper = createViewHelper(snapshotsView, "snapshots", true, true);
            }
            let networkMeasuresViewWrapper = null;
            if (data.snapshots.length > 0) {
              const networkMeasuresView = new NetworkMeasuresView(surface, defaultFrame, data);
              networkMeasuresViewRef.current = networkMeasuresView;
              networkMeasuresViewWrapper = createViewHelper(networkMeasuresView, "network", true, true);
            }
            let flamechartViewWrapper = null;
            if (data.flamechart.length > 0) {
              const flamechartView = new FlamechartView(surface, defaultFrame, data.flamechart, data.internalModuleSourceToRanges, data.duration);
              flamechartViewRef.current = flamechartView;
              flamechartViewWrapper = createViewHelper(flamechartView, "flamechart", true, true);
            }
            const rootView = new View(surface, defaultFrame, verticallyStackedLayout, defaultFrame, COLORS.BACKGROUND);
            rootView.addSubview(axisMarkersViewWrapper);
            if (userTimingMarksViewWrapper !== null) {
              rootView.addSubview(userTimingMarksViewWrapper);
            }
            if (nativeEventsViewWrapper !== null) {
              rootView.addSubview(nativeEventsViewWrapper);
            }
            if (schedulingEventsViewWrapper !== null) {
              rootView.addSubview(schedulingEventsViewWrapper);
            }
            if (thrownErrorsViewWrapper !== null) {
              rootView.addSubview(thrownErrorsViewWrapper);
            }
            if (suspenseEventsViewWrapper !== null) {
              rootView.addSubview(suspenseEventsViewWrapper);
            }
            if (reactMeasuresViewWrapper !== null) {
              rootView.addSubview(reactMeasuresViewWrapper);
            }
            if (componentMeasuresViewWrapper !== null) {
              rootView.addSubview(componentMeasuresViewWrapper);
            }
            if (snapshotsViewWrapper !== null) {
              rootView.addSubview(snapshotsViewWrapper);
            }
            if (networkMeasuresViewWrapper !== null) {
              rootView.addSubview(networkMeasuresViewWrapper);
            }
            if (flamechartViewWrapper !== null) {
              rootView.addSubview(flamechartViewWrapper);
            }
            const verticalScrollOverflowView = new VerticalScrollOverflowView(surface, defaultFrame, rootView, viewState);
            surfaceRef.current.rootView = verticalScrollOverflowView;
          }, [data]);
          (0, external_react_namespaceObject.useLayoutEffect)(() => {
            if (canvasRef.current) {
              surfaceRef.current.setCanvas(canvasRef.current, {
                width,
                height
              });
            }
          }, [width, height]);
          const interactor = (0, external_react_namespaceObject.useCallback)((interaction) => {
            const canvas = canvasRef.current;
            if (canvas === null) {
              return;
            }
            const surface = surfaceRef.current;
            surface.handleInteraction(interaction);
            surface.displayIfNeeded();
            canvas.style.cursor = surface.getCurrentCursor() || "default";
            setMouseLocation({
              x: interaction.payload.event.x,
              y: interaction.payload.event.y
            });
          }, []);
          useCanvasInteraction(canvasRef, interactor);
          const {
            selectEvent
          } = (0, external_react_namespaceObject.useContext)(TimelineContext);
          (0, external_react_namespaceObject.useEffect)(() => {
            const {
              current: userTimingMarksView
            } = userTimingMarksViewRef;
            if (userTimingMarksView) {
              userTimingMarksView.onHover = (userTimingMark) => {
                if (!hoveredEvent || hoveredEvent.userTimingMark !== userTimingMark) {
                  updateHoveredEvent({
                    ...EMPTY_CONTEXT_INFO,
                    userTimingMark
                  });
                }
              };
            }
            const {
              current: nativeEventsView
            } = nativeEventsViewRef;
            if (nativeEventsView) {
              nativeEventsView.onHover = (nativeEvent) => {
                if (!hoveredEvent || hoveredEvent.nativeEvent !== nativeEvent) {
                  updateHoveredEvent({
                    ...EMPTY_CONTEXT_INFO,
                    nativeEvent
                  });
                }
              };
            }
            const {
              current: schedulingEventsView
            } = schedulingEventsViewRef;
            if (schedulingEventsView) {
              schedulingEventsView.onHover = (schedulingEvent) => {
                if (!hoveredEvent || hoveredEvent.schedulingEvent !== schedulingEvent) {
                  updateHoveredEvent({
                    ...EMPTY_CONTEXT_INFO,
                    schedulingEvent
                  });
                }
              };
              schedulingEventsView.onClick = (schedulingEvent) => {
                selectEvent({
                  ...EMPTY_CONTEXT_INFO,
                  schedulingEvent
                });
              };
            }
            const {
              current: suspenseEventsView
            } = suspenseEventsViewRef;
            if (suspenseEventsView) {
              suspenseEventsView.onHover = (suspenseEvent) => {
                if (!hoveredEvent || hoveredEvent.suspenseEvent !== suspenseEvent) {
                  updateHoveredEvent({
                    ...EMPTY_CONTEXT_INFO,
                    suspenseEvent
                  });
                }
              };
            }
            const {
              current: reactMeasuresView
            } = reactMeasuresViewRef;
            if (reactMeasuresView) {
              reactMeasuresView.onHover = (measure2) => {
                if (!hoveredEvent || hoveredEvent.measure !== measure2) {
                  updateHoveredEvent({
                    ...EMPTY_CONTEXT_INFO,
                    measure: measure2
                  });
                }
              };
            }
            const {
              current: componentMeasuresView
            } = componentMeasuresViewRef;
            if (componentMeasuresView) {
              componentMeasuresView.onHover = (componentMeasure) => {
                if (!hoveredEvent || hoveredEvent.componentMeasure !== componentMeasure) {
                  updateHoveredEvent({
                    ...EMPTY_CONTEXT_INFO,
                    componentMeasure
                  });
                }
              };
            }
            const {
              current: snapshotsView
            } = snapshotsViewRef;
            if (snapshotsView) {
              snapshotsView.onHover = (snapshot) => {
                if (!hoveredEvent || hoveredEvent.snapshot !== snapshot) {
                  updateHoveredEvent({
                    ...EMPTY_CONTEXT_INFO,
                    snapshot
                  });
                }
              };
            }
            const {
              current: flamechartView
            } = flamechartViewRef;
            if (flamechartView) {
              flamechartView.setOnHover((flamechartStackFrame) => {
                if (!hoveredEvent || hoveredEvent.flamechartStackFrame !== flamechartStackFrame) {
                  updateHoveredEvent({
                    ...EMPTY_CONTEXT_INFO,
                    flamechartStackFrame
                  });
                }
              });
            }
            const {
              current: networkMeasuresView
            } = networkMeasuresViewRef;
            if (networkMeasuresView) {
              networkMeasuresView.onHover = (networkMeasure) => {
                if (!hoveredEvent || hoveredEvent.networkMeasure !== networkMeasure) {
                  updateHoveredEvent({
                    ...EMPTY_CONTEXT_INFO,
                    networkMeasure
                  });
                }
              };
            }
            const {
              current: thrownErrorsView
            } = thrownErrorsViewRef;
            if (thrownErrorsView) {
              thrownErrorsView.onHover = (thrownError) => {
                if (!hoveredEvent || hoveredEvent.thrownError !== thrownError) {
                  updateHoveredEvent({
                    ...EMPTY_CONTEXT_INFO,
                    thrownError
                  });
                }
              };
            }
          }, [
            hoveredEvent,
            data
            // Attach onHover callbacks when views are re-created on data change
          ]);
          (0, external_react_namespaceObject.useLayoutEffect)(() => {
            const userTimingMarksView = userTimingMarksViewRef.current;
            if (userTimingMarksView) {
              userTimingMarksView.setHoveredMark(hoveredEvent ? hoveredEvent.userTimingMark : null);
            }
            const nativeEventsView = nativeEventsViewRef.current;
            if (nativeEventsView) {
              nativeEventsView.setHoveredEvent(hoveredEvent ? hoveredEvent.nativeEvent : null);
            }
            const schedulingEventsView = schedulingEventsViewRef.current;
            if (schedulingEventsView) {
              schedulingEventsView.setHoveredEvent(hoveredEvent ? hoveredEvent.schedulingEvent : null);
            }
            const suspenseEventsView = suspenseEventsViewRef.current;
            if (suspenseEventsView) {
              suspenseEventsView.setHoveredEvent(hoveredEvent ? hoveredEvent.suspenseEvent : null);
            }
            const reactMeasuresView = reactMeasuresViewRef.current;
            if (reactMeasuresView) {
              reactMeasuresView.setHoveredMeasure(hoveredEvent ? hoveredEvent.measure : null);
            }
            const flamechartView = flamechartViewRef.current;
            if (flamechartView) {
              flamechartView.setHoveredFlamechartStackFrame(hoveredEvent ? hoveredEvent.flamechartStackFrame : null);
            }
            const networkMeasuresView = networkMeasuresViewRef.current;
            if (networkMeasuresView) {
              networkMeasuresView.setHoveredEvent(hoveredEvent ? hoveredEvent.networkMeasure : null);
            }
          }, [hoveredEvent]);
          (0, external_react_namespaceObject.useLayoutEffect)(() => {
            surfaceRef.current.displayIfNeeded();
          });
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("canvas", {
            ref: canvasRef,
            height,
            width
          }), /* @__PURE__ */ external_react_namespaceObject.createElement(CanvasPageContextMenu, {
            canvasRef,
            hoveredEvent: lastHoveredEvent,
            timelineData: data,
            viewState,
            canvasWidth: width,
            closedMenuStub: !surfaceRef.current.hasActiveView() ? /* @__PURE__ */ external_react_namespaceObject.createElement(EventTooltip_EventTooltip, {
              canvasRef,
              data,
              height,
              hoveredEvent,
              origin: mouseLocation,
              width
            }) : null,
            ref: contextMenuRef
          }));
        }
        const src_CanvasPage = CanvasPage_CanvasPage;
        var runtime = __webpack_require__(2853);
        var library = __webpack_require__(5041);
        ;
        const REACT_TOTAL_NUM_LANES = 31;
        const SCHEDULING_PROFILER_VERSION = 1;
        const SNAPSHOT_MAX_HEIGHT = 60;
        ;
        class InvalidProfileError extends Error {
        }
        var error_stack_parser = __webpack_require__(8715);
        var error_stack_parser_default = /* @__PURE__ */ __webpack_require__.n(error_stack_parser);
        ;
        const NATIVE_EVENT_DURATION_THRESHOLD = 20;
        const NESTED_UPDATE_DURATION_THRESHOLD = 20;
        const WARNING_STRINGS = {
          LONG_EVENT_HANDLER: "An event handler scheduled a big update with React. Consider using the Transition API to defer some of this work.",
          NESTED_UPDATE: "A big nested update was scheduled during layout. Nested updates require React to re-render synchronously before the browser can paint. Consider delaying this update by moving it to a passive effect (useEffect).",
          SUSPEND_DURING_UPDATE: "A component suspended during an update which caused a fallback to be shown. Consider using the Transition API to avoid hiding components after they've been mounted."
        };
        function getLanesFromTransportDecimalBitmask(laneBitmaskString) {
          const laneBitmask = parseInt(laneBitmaskString, 10);
          if (laneBitmask < 0) {
            return [];
          }
          const lanes = [];
          let powersOfTwo = 0;
          while (powersOfTwo <= REACT_TOTAL_NUM_LANES) {
            if (1 << powersOfTwo & laneBitmask) {
              lanes.push(powersOfTwo);
            }
            powersOfTwo++;
          }
          return lanes;
        }
        function updateLaneToLabelMap(profilerData, laneLabelTuplesString) {
          if (profilerData.laneToLabelMap.size === 0) {
            const laneLabelTuples = laneLabelTuplesString.split(",");
            for (let laneIndex = 0; laneIndex < laneLabelTuples.length; laneIndex++) {
              profilerData.laneToLabelMap.set(laneIndex, laneLabelTuples[laneIndex]);
            }
          }
        }
        let profilerVersion = null;
        function getLastType(stack) {
          if (stack.length > 0) {
            const {
              type
            } = stack[stack.length - 1];
            return type;
          }
          return null;
        }
        function getDepth(stack) {
          if (stack.length > 0) {
            const {
              depth,
              type
            } = stack[stack.length - 1];
            return type === "render-idle" ? depth : depth + 1;
          }
          return 0;
        }
        function markWorkStarted(type, startTime, lanes, currentProfilerData, state2) {
          const {
            batchUID,
            measureStack
          } = state2;
          const depth = getDepth(measureStack);
          const measure2 = {
            type,
            batchUID,
            depth,
            lanes,
            timestamp: startTime,
            duration: 0
          };
          state2.measureStack.push({
            depth,
            measure: measure2,
            startTime,
            type
          });
          const measures = currentProfilerData.batchUIDToMeasuresMap.get(batchUID);
          if (measures != null) {
            measures.push(measure2);
          } else {
            currentProfilerData.batchUIDToMeasuresMap.set(state2.batchUID, [measure2]);
          }
          lanes.forEach((lane) => {
            currentProfilerData.laneToReactMeasureMap.get(lane).push(measure2);
          });
        }
        function markWorkCompleted(type, stopTime, currentProfilerData, stack) {
          if (stack.length === 0) {
            console.error('Unexpected type "%s" completed at %sms while stack is empty.', type, stopTime);
            return;
          }
          const last = stack[stack.length - 1];
          if (last.type !== type) {
            console.error('Unexpected type "%s" completed at %sms before "%s" completed.', type, stopTime, last.type);
          }
          const {
            measure: measure2,
            startTime
          } = stack.pop();
          if (!measure2) {
            console.error('Could not find matching measure for type "%s".', type);
          }
          measure2.duration = stopTime - startTime;
        }
        function throwIfIncomplete(type, stack) {
          const lastIndex = stack.length - 1;
          if (lastIndex >= 0) {
            const last = stack[lastIndex];
            if (last.stopTime === void 0 && last.type === type) {
              throw new InvalidProfileError(`Unexpected type "${type}" started before "${last.type}" completed.`);
            }
          }
        }
        function processEventDispatch(event, timestamp, profilerData, state2) {
          const data = event.args.data;
          const type = data.type;
          if (type.startsWith("react-")) {
            const stackTrace = data.stackTrace;
            if (stackTrace) {
              const topFrame = stackTrace[stackTrace.length - 1];
              if (topFrame.url.includes("/react-dom.")) {
                return;
              }
            }
          }
          if (type === "blur" || type === "click" || type === "input" || type.startsWith("focus") || type.startsWith("key") || type.startsWith("mouse") || type.startsWith("pointer")) {
            const duration = event.dur / 1e3;
            let depth = 0;
            while (state2.nativeEventStack.length > 0) {
              const prevNativeEvent = state2.nativeEventStack[state2.nativeEventStack.length - 1];
              const prevStopTime = prevNativeEvent.timestamp + prevNativeEvent.duration;
              if (timestamp < prevStopTime) {
                depth = prevNativeEvent.depth + 1;
                break;
              } else {
                state2.nativeEventStack.pop();
              }
            }
            const nativeEvent = {
              depth,
              duration,
              timestamp,
              type,
              warning: null
            };
            profilerData.nativeEvents.push(nativeEvent);
            state2.nativeEventStack.push(nativeEvent);
          }
        }
        function processResourceFinish(event, timestamp, profilerData, state2) {
          const requestId = event.args.data.requestId;
          const networkMeasure = state2.requestIdToNetworkMeasureMap.get(requestId);
          if (networkMeasure != null) {
            networkMeasure.finishTimestamp = timestamp;
            if (networkMeasure.firstReceivedDataTimestamp === 0) {
              networkMeasure.firstReceivedDataTimestamp = timestamp;
            }
            if (networkMeasure.lastReceivedDataTimestamp === 0) {
              networkMeasure.lastReceivedDataTimestamp = timestamp;
            }
            state2.requestIdToNetworkMeasureMap.delete(event.args.data.requestId);
          }
        }
        function processResourceReceivedData(event, timestamp, profilerData, state2) {
          const requestId = event.args.data.requestId;
          const networkMeasure = state2.requestIdToNetworkMeasureMap.get(requestId);
          if (networkMeasure != null) {
            if (networkMeasure.firstReceivedDataTimestamp === 0) {
              networkMeasure.firstReceivedDataTimestamp = timestamp;
            }
            networkMeasure.lastReceivedDataTimestamp = timestamp;
            networkMeasure.finishTimestamp = timestamp;
          }
        }
        function processResourceReceiveResponse(event, timestamp, profilerData, state2) {
          const requestId = event.args.data.requestId;
          const networkMeasure = state2.requestIdToNetworkMeasureMap.get(requestId);
          if (networkMeasure != null) {
            networkMeasure.receiveResponseTimestamp = timestamp;
          }
        }
        function processScreenshot(event, timestamp, profilerData, state2) {
          const encodedSnapshot = event.args.snapshot;
          const snapshot = {
            height: 0,
            image: null,
            imageSource: `data:image/png;base64,${encodedSnapshot}`,
            timestamp,
            width: 0
          };
          let resolveFn = null;
          state2.asyncProcessingPromises.push(new Promise((resolve) => {
            resolveFn = resolve;
          }));
          fetch(snapshot.imageSource).then((response) => response.blob()).then((blob) => {
            createImageBitmap(blob).then((bitmap) => {
              snapshot.height = bitmap.height;
              snapshot.width = bitmap.width;
              resolveFn();
            });
          });
          profilerData.snapshots.push(snapshot);
        }
        function processResourceSendRequest(event, timestamp, profilerData, state2) {
          const data = event.args.data;
          const requestId = data.requestId;
          const availableDepths = new Array(state2.requestIdToNetworkMeasureMap.size + 1).fill(true);
          state2.requestIdToNetworkMeasureMap.forEach(({
            depth: depth2
          }) => {
            availableDepths[depth2] = false;
          });
          let depth = 0;
          for (let i2 = 0; i2 < availableDepths.length; i2++) {
            if (availableDepths[i2]) {
              depth = i2;
              break;
            }
          }
          const networkMeasure = {
            depth,
            finishTimestamp: 0,
            firstReceivedDataTimestamp: 0,
            lastReceivedDataTimestamp: 0,
            requestId,
            requestMethod: data.requestMethod,
            priority: data.priority,
            sendRequestTimestamp: timestamp,
            receiveResponseTimestamp: 0,
            url: data.url
          };
          state2.requestIdToNetworkMeasureMap.set(requestId, networkMeasure);
          profilerData.networkMeasures.push(networkMeasure);
          networkMeasure.sendRequestTimestamp = timestamp;
        }
        function processTimelineEvent(event, currentProfilerData, state2) {
          const {
            cat,
            name,
            ts,
            ph
          } = event;
          const startTime = (ts - currentProfilerData.startTime) / 1e3;
          switch (cat) {
            case "disabled-by-default-devtools.screenshot":
              processScreenshot(event, startTime, currentProfilerData, state2);
              break;
            case "devtools.timeline":
              switch (name) {
                case "EventDispatch":
                  processEventDispatch(event, startTime, currentProfilerData, state2);
                  break;
                case "ResourceFinish":
                  processResourceFinish(event, startTime, currentProfilerData, state2);
                  break;
                case "ResourceReceivedData":
                  processResourceReceivedData(event, startTime, currentProfilerData, state2);
                  break;
                case "ResourceReceiveResponse":
                  processResourceReceiveResponse(event, startTime, currentProfilerData, state2);
                  break;
                case "ResourceSendRequest":
                  processResourceSendRequest(event, startTime, currentProfilerData, state2);
                  break;
              }
              break;
            case "blink.user_timing":
              if (name.startsWith("--react-version-")) {
                const [reactVersion] = name.slice(16).split("-");
                currentProfilerData.reactVersion = reactVersion;
              } else if (name.startsWith("--profiler-version-")) {
                const [versionString] = name.slice(19).split("-");
                profilerVersion = parseInt(versionString, 10);
                if (profilerVersion !== SCHEDULING_PROFILER_VERSION) {
                  throw new InvalidProfileError(`This version of profiling data (${versionString}) is not supported by the current profiler.`);
                }
              } else if (name.startsWith("--react-lane-labels-")) {
                const [laneLabelTuplesString] = name.slice(20).split("-");
                updateLaneToLabelMap(currentProfilerData, laneLabelTuplesString);
              } else if (name.startsWith("--component-")) {
                processReactComponentMeasure(name, startTime, currentProfilerData, state2);
              } else if (name.startsWith("--schedule-render-")) {
                const [laneBitmaskString] = name.slice(18).split("-");
                currentProfilerData.schedulingEvents.push({
                  type: "schedule-render",
                  lanes: getLanesFromTransportDecimalBitmask(laneBitmaskString),
                  timestamp: startTime,
                  warning: null
                });
              } else if (name.startsWith("--schedule-forced-update-")) {
                const [laneBitmaskString, componentName] = name.slice(25).split("-");
                const forceUpdateEvent = {
                  type: "schedule-force-update",
                  lanes: getLanesFromTransportDecimalBitmask(laneBitmaskString),
                  componentName,
                  timestamp: startTime,
                  warning: null
                };
                if (state2.measureStack.find(({
                  type
                }) => type === "commit")) {
                  state2.potentialLongNestedUpdate = forceUpdateEvent;
                }
                currentProfilerData.schedulingEvents.push(forceUpdateEvent);
              } else if (name.startsWith("--schedule-state-update-")) {
                const [laneBitmaskString, componentName] = name.slice(24).split("-");
                const stateUpdateEvent = {
                  type: "schedule-state-update",
                  lanes: getLanesFromTransportDecimalBitmask(laneBitmaskString),
                  componentName,
                  timestamp: startTime,
                  warning: null
                };
                if (state2.measureStack.find(({
                  type
                }) => type === "commit")) {
                  state2.potentialLongNestedUpdate = stateUpdateEvent;
                }
                currentProfilerData.schedulingEvents.push(stateUpdateEvent);
              } else if (name.startsWith("--error-")) {
                const [componentName, phase, message] = name.slice(8).split("-");
                currentProfilerData.thrownErrors.push({
                  componentName,
                  message,
                  phase,
                  timestamp: startTime,
                  type: "thrown-error"
                });
              } else if (name.startsWith("--suspense-suspend-")) {
                const [id2, componentName, phase, laneBitmaskString, promiseName] = name.slice(19).split("-");
                const lanes = getLanesFromTransportDecimalBitmask(laneBitmaskString);
                const availableDepths = new Array(state2.unresolvedSuspenseEvents.size + 1).fill(true);
                state2.unresolvedSuspenseEvents.forEach(({
                  depth: depth2
                }) => {
                  availableDepths[depth2] = false;
                });
                let depth = 0;
                for (let i2 = 0; i2 < availableDepths.length; i2++) {
                  if (availableDepths[i2]) {
                    depth = i2;
                    break;
                  }
                }
                const suspenseEvent = {
                  componentName,
                  depth,
                  duration: null,
                  id: id2,
                  phase,
                  promiseName: promiseName || null,
                  resolution: "unresolved",
                  timestamp: startTime,
                  type: "suspense",
                  warning: null
                };
                if (phase === "update") {
                  state2.potentialSuspenseEventsOutsideOfTransition.push([suspenseEvent, lanes]);
                }
                currentProfilerData.suspenseEvents.push(suspenseEvent);
                state2.unresolvedSuspenseEvents.set(id2, suspenseEvent);
              } else if (name.startsWith("--suspense-resolved-")) {
                const [id2] = name.slice(20).split("-");
                const suspenseEvent = state2.unresolvedSuspenseEvents.get(id2);
                if (suspenseEvent != null) {
                  state2.unresolvedSuspenseEvents.delete(id2);
                  suspenseEvent.duration = startTime - suspenseEvent.timestamp;
                  suspenseEvent.resolution = "resolved";
                }
              } else if (name.startsWith("--suspense-rejected-")) {
                const [id2] = name.slice(20).split("-");
                const suspenseEvent = state2.unresolvedSuspenseEvents.get(id2);
                if (suspenseEvent != null) {
                  state2.unresolvedSuspenseEvents.delete(id2);
                  suspenseEvent.duration = startTime - suspenseEvent.timestamp;
                  suspenseEvent.resolution = "rejected";
                }
              } else if (name.startsWith("--render-start-")) {
                if (state2.nextRenderShouldGenerateNewBatchID) {
                  state2.nextRenderShouldGenerateNewBatchID = false;
                  state2.batchUID = state2.uidCounter++;
                }
                if (state2.potentialLongNestedUpdate !== null) {
                  state2.potentialLongNestedUpdates.push([state2.potentialLongNestedUpdate, state2.batchUID]);
                  state2.potentialLongNestedUpdate = null;
                }
                const [laneBitmaskString] = name.slice(15).split("-");
                throwIfIncomplete("render", state2.measureStack);
                if (getLastType(state2.measureStack) !== "render-idle") {
                  markWorkStarted("render-idle", startTime, getLanesFromTransportDecimalBitmask(laneBitmaskString), currentProfilerData, state2);
                }
                markWorkStarted("render", startTime, getLanesFromTransportDecimalBitmask(laneBitmaskString), currentProfilerData, state2);
                for (let i2 = 0; i2 < state2.nativeEventStack.length; i2++) {
                  const nativeEvent = state2.nativeEventStack[i2];
                  const stopTime = nativeEvent.timestamp + nativeEvent.duration;
                  if (stopTime > startTime) {
                    state2.potentialLongEvents.push([nativeEvent, state2.batchUID]);
                  }
                }
              } else if (name.startsWith("--render-stop") || name.startsWith("--render-yield")) {
                markWorkCompleted("render", startTime, currentProfilerData, state2.measureStack);
              } else if (name.startsWith("--commit-start-")) {
                state2.nextRenderShouldGenerateNewBatchID = true;
                const [laneBitmaskString] = name.slice(15).split("-");
                markWorkStarted("commit", startTime, getLanesFromTransportDecimalBitmask(laneBitmaskString), currentProfilerData, state2);
              } else if (name.startsWith("--commit-stop")) {
                markWorkCompleted("commit", startTime, currentProfilerData, state2.measureStack);
                markWorkCompleted("render-idle", startTime, currentProfilerData, state2.measureStack);
              } else if (name.startsWith("--layout-effects-start-")) {
                const [laneBitmaskString] = name.slice(23).split("-");
                markWorkStarted("layout-effects", startTime, getLanesFromTransportDecimalBitmask(laneBitmaskString), currentProfilerData, state2);
              } else if (name.startsWith("--layout-effects-stop")) {
                markWorkCompleted("layout-effects", startTime, currentProfilerData, state2.measureStack);
              } else if (name.startsWith("--passive-effects-start-")) {
                const [laneBitmaskString] = name.slice(24).split("-");
                markWorkStarted("passive-effects", startTime, getLanesFromTransportDecimalBitmask(laneBitmaskString), currentProfilerData, state2);
              } else if (name.startsWith("--passive-effects-stop")) {
                markWorkCompleted("passive-effects", startTime, currentProfilerData, state2.measureStack);
              } else if (name.startsWith("--react-internal-module-start-")) {
                const stackFrameStart = name.slice(30);
                if (!state2.internalModuleStackStringSet.has(stackFrameStart)) {
                  state2.internalModuleStackStringSet.add(stackFrameStart);
                  const parsedStackFrameStart = parseStackFrame(stackFrameStart);
                  state2.internalModuleCurrentStackFrame = parsedStackFrameStart;
                }
              } else if (name.startsWith("--react-internal-module-stop-")) {
                const stackFrameStop = name.slice(29);
                if (!state2.internalModuleStackStringSet.has(stackFrameStop)) {
                  state2.internalModuleStackStringSet.add(stackFrameStop);
                  const parsedStackFrameStop = parseStackFrame(stackFrameStop);
                  if (parsedStackFrameStop !== null && state2.internalModuleCurrentStackFrame !== null) {
                    const parsedStackFrameStart = state2.internalModuleCurrentStackFrame;
                    state2.internalModuleCurrentStackFrame = null;
                    const range = [parsedStackFrameStart, parsedStackFrameStop];
                    const ranges = currentProfilerData.internalModuleSourceToRanges.get(parsedStackFrameStart.fileName);
                    if (ranges == null) {
                      currentProfilerData.internalModuleSourceToRanges.set(parsedStackFrameStart.fileName, [range]);
                    } else {
                      ranges.push(range);
                    }
                  }
                }
              } else if (ph === "R" || ph === "n") {
                currentProfilerData.otherUserTimingMarks.push({
                  name,
                  timestamp: startTime
                });
              } else if (ph === "b") {
              } else if (ph === "e") {
              } else if (ph === "i" || ph === "I") {
              } else {
                throw new InvalidProfileError(`Unrecognized event ${JSON.stringify(event)}! This is likely a bug in this profiler tool.`);
              }
              break;
          }
        }
        function assertNoOverlappingComponentMeasure(state2) {
          if (state2.currentReactComponentMeasure !== null) {
            console.error("Component measure started while another measure in progress:", state2.currentReactComponentMeasure);
          }
        }
        function assertCurrentComponentMeasureType(state2, type) {
          if (state2.currentReactComponentMeasure === null) {
            console.error(`Component measure type "${type}" stopped while no measure was in progress`);
          } else if (state2.currentReactComponentMeasure.type !== type) {
            console.error(`Component measure type "${type}" stopped while type ${state2.currentReactComponentMeasure.type} in progress`);
          }
        }
        function processReactComponentMeasure(name, startTime, currentProfilerData, state2) {
          if (name.startsWith("--component-render-start-")) {
            const [componentName] = name.slice(25).split("-");
            assertNoOverlappingComponentMeasure(state2);
            state2.currentReactComponentMeasure = {
              componentName,
              timestamp: startTime,
              duration: 0,
              type: "render",
              warning: null
            };
          } else if (name === "--component-render-stop") {
            assertCurrentComponentMeasureType(state2, "render");
            if (state2.currentReactComponentMeasure !== null) {
              const componentMeasure = state2.currentReactComponentMeasure;
              componentMeasure.duration = startTime - componentMeasure.timestamp;
              state2.currentReactComponentMeasure = null;
              currentProfilerData.componentMeasures.push(componentMeasure);
            }
          } else if (name.startsWith("--component-layout-effect-mount-start-")) {
            const [componentName] = name.slice(38).split("-");
            assertNoOverlappingComponentMeasure(state2);
            state2.currentReactComponentMeasure = {
              componentName,
              timestamp: startTime,
              duration: 0,
              type: "layout-effect-mount",
              warning: null
            };
          } else if (name === "--component-layout-effect-mount-stop") {
            assertCurrentComponentMeasureType(state2, "layout-effect-mount");
            if (state2.currentReactComponentMeasure !== null) {
              const componentMeasure = state2.currentReactComponentMeasure;
              componentMeasure.duration = startTime - componentMeasure.timestamp;
              state2.currentReactComponentMeasure = null;
              currentProfilerData.componentMeasures.push(componentMeasure);
            }
          } else if (name.startsWith("--component-layout-effect-unmount-start-")) {
            const [componentName] = name.slice(40).split("-");
            assertNoOverlappingComponentMeasure(state2);
            state2.currentReactComponentMeasure = {
              componentName,
              timestamp: startTime,
              duration: 0,
              type: "layout-effect-unmount",
              warning: null
            };
          } else if (name === "--component-layout-effect-unmount-stop") {
            assertCurrentComponentMeasureType(state2, "layout-effect-unmount");
            if (state2.currentReactComponentMeasure !== null) {
              const componentMeasure = state2.currentReactComponentMeasure;
              componentMeasure.duration = startTime - componentMeasure.timestamp;
              state2.currentReactComponentMeasure = null;
              currentProfilerData.componentMeasures.push(componentMeasure);
            }
          } else if (name.startsWith("--component-passive-effect-mount-start-")) {
            const [componentName] = name.slice(39).split("-");
            assertNoOverlappingComponentMeasure(state2);
            state2.currentReactComponentMeasure = {
              componentName,
              timestamp: startTime,
              duration: 0,
              type: "passive-effect-mount",
              warning: null
            };
          } else if (name === "--component-passive-effect-mount-stop") {
            assertCurrentComponentMeasureType(state2, "passive-effect-mount");
            if (state2.currentReactComponentMeasure !== null) {
              const componentMeasure = state2.currentReactComponentMeasure;
              componentMeasure.duration = startTime - componentMeasure.timestamp;
              state2.currentReactComponentMeasure = null;
              currentProfilerData.componentMeasures.push(componentMeasure);
            }
          } else if (name.startsWith("--component-passive-effect-unmount-start-")) {
            const [componentName] = name.slice(41).split("-");
            assertNoOverlappingComponentMeasure(state2);
            state2.currentReactComponentMeasure = {
              componentName,
              timestamp: startTime,
              duration: 0,
              type: "passive-effect-unmount",
              warning: null
            };
          } else if (name === "--component-passive-effect-unmount-stop") {
            assertCurrentComponentMeasureType(state2, "passive-effect-unmount");
            if (state2.currentReactComponentMeasure !== null) {
              const componentMeasure = state2.currentReactComponentMeasure;
              componentMeasure.duration = startTime - componentMeasure.timestamp;
              state2.currentReactComponentMeasure = null;
              currentProfilerData.componentMeasures.push(componentMeasure);
            }
          }
        }
        function preprocessFlamechart(rawData) {
          let parsedData;
          try {
            parsedData = (0, library.importFromChromeTimeline)(rawData, "react-devtools");
          } catch (error) {
            const errorToRethrow = new InvalidProfileError(error.message);
            errorToRethrow.stack = error.stack;
            throw errorToRethrow;
          }
          const profile = parsedData.profiles[0];
          const speedscopeFlamechart = new library.Flamechart({
            // $FlowFixMe[method-unbinding]
            getTotalWeight: profile.getTotalWeight.bind(profile),
            // $FlowFixMe[method-unbinding]
            forEachCall: profile.forEachCall.bind(profile),
            // $FlowFixMe[method-unbinding]
            formatValue: profile.formatValue.bind(profile),
            getColorBucketForFrame: () => 0
          });
          const flamechart = speedscopeFlamechart.getLayers().map((layer) => layer.map(({
            start,
            end,
            node: {
              frame: {
                name,
                file,
                line,
                col
              }
            }
          }) => ({
            name,
            timestamp: start / 1e3,
            duration: (end - start) / 1e3,
            scriptUrl: file,
            locationLine: line,
            locationColumn: col
          })));
          return flamechart;
        }
        function parseStackFrame(stackFrame) {
          const error = new Error();
          error.stack = stackFrame;
          const frames = error_stack_parser_default().parse(error);
          return frames.length === 1 ? frames[0] : null;
        }
        async function preprocessData(timeline) {
          const flamechart = preprocessFlamechart(timeline);
          const laneToReactMeasureMap = /* @__PURE__ */ new Map();
          for (let lane = 0; lane < REACT_TOTAL_NUM_LANES; lane++) {
            laneToReactMeasureMap.set(lane, []);
          }
          const profilerData = {
            batchUIDToMeasuresMap: /* @__PURE__ */ new Map(),
            componentMeasures: [],
            duration: 0,
            flamechart,
            internalModuleSourceToRanges: /* @__PURE__ */ new Map(),
            laneToLabelMap: /* @__PURE__ */ new Map(),
            laneToReactMeasureMap,
            nativeEvents: [],
            networkMeasures: [],
            otherUserTimingMarks: [],
            reactVersion: null,
            schedulingEvents: [],
            snapshots: [],
            snapshotHeight: 0,
            startTime: 0,
            suspenseEvents: [],
            thrownErrors: []
          };
          timeline = timeline.filter(Boolean).sort((a, b) => a.ts > b.ts ? 1 : -1);
          const indexOfProfileEvent = timeline.findIndex((event) => event.name === "Profile");
          if (indexOfProfileEvent === -1) {
            return profilerData;
          }
          profilerData.startTime = timeline[indexOfProfileEvent].args.data.startTime;
          profilerData.duration = (timeline[timeline.length - 1].ts - profilerData.startTime) / 1e3;
          const state2 = {
            asyncProcessingPromises: [],
            batchUID: 0,
            currentReactComponentMeasure: null,
            internalModuleCurrentStackFrame: null,
            internalModuleStackStringSet: /* @__PURE__ */ new Set(),
            measureStack: [],
            nativeEventStack: [],
            nextRenderShouldGenerateNewBatchID: true,
            potentialLongEvents: [],
            potentialLongNestedUpdate: null,
            potentialLongNestedUpdates: [],
            potentialSuspenseEventsOutsideOfTransition: [],
            requestIdToNetworkMeasureMap: /* @__PURE__ */ new Map(),
            uidCounter: 0,
            unresolvedSuspenseEvents: /* @__PURE__ */ new Map()
          };
          timeline.forEach((event) => processTimelineEvent(event, profilerData, state2));
          if (profilerVersion === null) {
            if (profilerData.schedulingEvents.length === 0 && profilerData.batchUIDToMeasuresMap.size === 0) {
              throw new InvalidProfileError("No React marks were found in the provided profile. Please provide profiling data from an React application running in development or profiling mode.");
            }
            throw new InvalidProfileError(`This version of profiling data is not supported by the current profiler.`);
          }
          const {
            measureStack
          } = state2;
          if (measureStack.length > 0) {
            console.error("Incomplete events or measures", measureStack);
          }
          state2.potentialLongEvents.forEach(([nativeEvent, batchUID]) => {
            const [startTime, stopTime] = getBatchRange(batchUID, profilerData, nativeEvent.timestamp);
            if (stopTime - startTime > NATIVE_EVENT_DURATION_THRESHOLD) {
              nativeEvent.warning = WARNING_STRINGS.LONG_EVENT_HANDLER;
            }
          });
          state2.potentialLongNestedUpdates.forEach(([schedulingEvent, batchUID]) => {
            const [startTime, stopTime] = getBatchRange(batchUID, profilerData);
            if (stopTime - startTime > NESTED_UPDATE_DURATION_THRESHOLD) {
              if (!schedulingEvent.lanes.some((lane) => profilerData.laneToLabelMap.get(lane) === "Transition")) {
              }
            }
          });
          state2.potentialSuspenseEventsOutsideOfTransition.forEach(([suspenseEvent, lanes]) => {
            if (!lanes.some((lane) => profilerData.laneToLabelMap.get(lane) === "Transition")) {
              suspenseEvent.warning = WARNING_STRINGS.SUSPEND_DURING_UPDATE;
            }
          });
          await Promise.all(state2.asyncProcessingPromises);
          if (profilerData.snapshots.length > 0) {
            const snapshot = profilerData.snapshots[0];
            profilerData.snapshotHeight = Math.min(snapshot.height, SNAPSHOT_MAX_HEIGHT);
          }
          return profilerData;
        }
        var nullthrows = __webpack_require__(4069);
        var nullthrows_default = /* @__PURE__ */ __webpack_require__.n(nullthrows);
        ;
        const readInputData = (file) => {
          if (!file.name.endsWith(".json")) {
            throw new InvalidProfileError("Invalid file type. Only JSON performance profiles are supported");
          }
          const fileReader = new FileReader();
          return new Promise((resolve, reject) => {
            fileReader.onload = () => {
              const result = nullthrows_default()(fileReader.result);
              if (typeof result === "string") {
                resolve(result);
              }
              reject(new InvalidProfileError("Input file was not read as a string"));
            };
            fileReader.onerror = () => reject(fileReader.error);
            fileReader.readAsText(file);
          });
        };
        ;
        async function importFile(file) {
          try {
            const readFile = await readInputData(file);
            const events = JSON.parse(readFile);
            if (events.length === 0) {
              throw new InvalidProfileError("No profiling data found in file.");
            }
            const processedData = await preprocessData(events);
            return {
              status: "SUCCESS",
              processedData
            };
          } catch (error) {
            if (error instanceof InvalidProfileError) {
              return {
                status: "INVALID_PROFILE_ERROR",
                error
              };
            } else {
              return {
                status: "UNEXPECTED_ERROR",
                error
              };
            }
          }
        }
        var importFile_worker = __webpack_require__(7282);
        var importFile_worker_default = /* @__PURE__ */ __webpack_require__.n(importFile_worker);
        ;
        const workerizedImportFile = window.Worker ? importFile_worker_default()() : importFile_namespaceObject;
        const import_worker_importFile = (file) => workerizedImportFile.importFile(file);
        ;
        const timelineCache_Pending = 0;
        const timelineCache_Resolved = 1;
        const timelineCache_Rejected = 2;
        const fileNameToProfilerDataMap = /* @__PURE__ */ new Map();
        function timelineCache_readRecord(record) {
          if (record.status === timelineCache_Resolved) {
            return record;
          } else if (record.status === timelineCache_Rejected) {
            return record;
          } else {
            throw record.value;
          }
        }
        function timelineCache_importFile(file) {
          const fileName = file.name;
          let record = fileNameToProfilerDataMap.get(fileName);
          if (!record) {
            const callbacks = /* @__PURE__ */ new Set();
            const wakeable = {
              then(callback) {
                callbacks.add(callback);
              },
              // Optional property used by Timeline:
              displayName: `Importing file "${fileName}"`
            };
            const wake = () => {
              callbacks.forEach((callback) => callback());
              callbacks.clear();
            };
            const newRecord = record = {
              status: timelineCache_Pending,
              value: wakeable
            };
            import_worker_importFile(file).then((data) => {
              switch (data.status) {
                case "SUCCESS":
                  const resolvedRecord = newRecord;
                  resolvedRecord.status = timelineCache_Resolved;
                  resolvedRecord.value = data.processedData;
                  break;
                case "INVALID_PROFILE_ERROR":
                case "UNEXPECTED_ERROR":
                  const thrownRecord = newRecord;
                  thrownRecord.status = timelineCache_Rejected;
                  thrownRecord.value = data.error;
                  break;
              }
              wake();
            });
            fileNameToProfilerDataMap.set(fileName, record);
          }
          const response = timelineCache_readRecord(record).value;
          return response;
        }
        ;
        function TimelineSearchInput(props2) {
          const {
            searchInputContainerRef
          } = (0, external_react_namespaceObject.useContext)(TimelineContext);
          const {
            dispatch,
            searchIndex,
            searchResults,
            searchText
          } = (0, external_react_namespaceObject.useContext)(TimelineSearchContext);
          if (searchInputContainerRef.current === null) {
            return null;
          }
          const search = (text) => dispatch({
            type: "SET_SEARCH_TEXT",
            payload: text
          });
          const goToNextResult = () => dispatch({
            type: "GO_TO_NEXT_SEARCH_RESULT"
          });
          const goToPreviousResult = () => dispatch({
            type: "GO_TO_PREVIOUS_SEARCH_RESULT"
          });
          return /* @__PURE__ */ (0, external_react_dom_namespaceObject.createPortal)(/* @__PURE__ */ external_react_namespaceObject.createElement(SearchInput_SearchInput, {
            goToNextResult,
            goToPreviousResult,
            placeholder: "Search components by name",
            search,
            searchIndex,
            searchResultsCount: searchResults.length,
            searchText
          }), searchInputContainerRef.current);
        }
        var TimelineNotSupported = __webpack_require__(8942);
        var TimelineNotSupported_default = /* @__PURE__ */ __webpack_require__.n(TimelineNotSupported);
        ;
        function TimelineNotSupported_TimelineNotSupported() {
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: TimelineNotSupported_default().Column
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: TimelineNotSupported_default().Header
          }, "Timeline profiling not supported."), /* @__PURE__ */ external_react_namespaceObject.createElement("p", {
            className: TimelineNotSupported_default().Paragraph
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("span", null, "Timeline profiler requires a development or profiling build of", " ", /* @__PURE__ */ external_react_namespaceObject.createElement("code", {
            className: TimelineNotSupported_default().Code
          }, "react-dom@^18"), ".")), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: TimelineNotSupported_default().LearnMoreRow
          }, "Click", " ", /* @__PURE__ */ external_react_namespaceObject.createElement("a", {
            className: TimelineNotSupported_default().Link,
            href: "https://fb.me/react-devtools-profiling",
            rel: "noopener noreferrer",
            target: "_blank"
          }, "here"), " ", "to learn more about profiling."), isInternalFacebookBuild && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: TimelineNotSupported_default().MetaGKRow
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("strong", null, "Meta only"), ": Enable the", " ", /* @__PURE__ */ external_react_namespaceObject.createElement("a", {
            className: TimelineNotSupported_default().Link,
            href: "https://fburl.com/react-devtools-scheduling-profiler-gk",
            rel: "noopener noreferrer",
            target: "_blank"
          }, "react_enable_scheduling_profiler GK"), "."));
        }
        var Timeline = __webpack_require__(7578);
        var Timeline_default = /* @__PURE__ */ __webpack_require__.n(Timeline);
        ;
        function Timeline_Timeline(_) {
          const {
            file,
            inMemoryTimelineData,
            isTimelineSupported,
            setFile,
            viewState
          } = (0, external_react_namespaceObject.useContext)(TimelineContext);
          const {
            didRecordCommits,
            isProfiling
          } = (0, external_react_namespaceObject.useContext)(ProfilerContext);
          const ref = (0, external_react_namespaceObject.useRef)(null);
          const {
            theme
          } = (0, external_react_namespaceObject.useContext)(SettingsContext);
          const deferredTheme = (0, external_react_namespaceObject.useDeferredValue)(theme);
          const [key, setKey] = (0, external_react_namespaceObject.useState)(theme);
          (0, external_react_namespaceObject.useLayoutEffect)(() => {
            const pollForTheme = () => {
              if (updateColorsToMatchTheme(ref.current)) {
                clearInterval(intervalID);
                setKey(deferredTheme);
              }
            };
            const intervalID = setInterval(pollForTheme, 50);
            return () => {
              clearInterval(intervalID);
            };
          }, [deferredTheme]);
          let content = null;
          if (isProfiling) {
            content = /* @__PURE__ */ external_react_namespaceObject.createElement(RecordingInProgress, null);
          } else if (inMemoryTimelineData && inMemoryTimelineData.length > 0) {
            const timelineData = inMemoryTimelineData[0];
            content = /* @__PURE__ */ external_react_namespaceObject.createElement(TimelineSearchContextController, {
              profilerData: timelineData,
              viewState
            }, /* @__PURE__ */ external_react_namespaceObject.createElement(TimelineSearchInput, null), /* @__PURE__ */ external_react_namespaceObject.createElement(src_CanvasPage, {
              profilerData: timelineData,
              viewState
            }));
          } else if (file) {
            content = /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Suspense, {
              fallback: /* @__PURE__ */ external_react_namespaceObject.createElement(ProcessingData, null)
            }, /* @__PURE__ */ external_react_namespaceObject.createElement(FileLoader, {
              file,
              key,
              onFileSelect: setFile,
              viewState
            }));
          } else if (didRecordCommits) {
            content = /* @__PURE__ */ external_react_namespaceObject.createElement(NoTimelineData, null);
          } else if (isTimelineSupported) {
            content = /* @__PURE__ */ external_react_namespaceObject.createElement(NoProfilingData, null);
          } else {
            content = /* @__PURE__ */ external_react_namespaceObject.createElement(TimelineNotSupported_TimelineNotSupported, null);
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Timeline_default().Content,
            ref
          }, content);
        }
        const ProcessingData = () => /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
          className: Timeline_default().EmptyStateContainer
        }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
          className: Timeline_default().Header
        }, "Processing data..."), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
          className: Timeline_default().Row
        }, "This should only take a minute."));
        const CouldNotLoadProfile = ({
          error,
          onFileSelect
        }) => /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
          className: Timeline_default().EmptyStateContainer
        }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
          className: Timeline_default().Header
        }, "Could not load profile"), error.message && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
          className: Timeline_default().Row
        }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
          className: Timeline_default().ErrorMessage
        }, error.message)), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
          className: Timeline_default().Row
        }, "Try importing another Chrome performance profile."));
        const NoTimelineData = () => /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
          className: Timeline_default().EmptyStateContainer
        }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
          className: Timeline_default().Row
        }, "This current profile does not contain timeline data."));
        const FileLoader = ({
          file,
          onFileSelect,
          viewState
        }) => {
          if (file === null) {
            return null;
          }
          const dataOrError = timelineCache_importFile(file);
          if (dataOrError instanceof Error) {
            return /* @__PURE__ */ external_react_namespaceObject.createElement(CouldNotLoadProfile, {
              error: dataOrError,
              onFileSelect
            });
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement(TimelineSearchContextController, {
            profilerData: dataOrError,
            viewState
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(TimelineSearchInput, null), /* @__PURE__ */ external_react_namespaceObject.createElement(src_CanvasPage, {
            profilerData: dataOrError,
            viewState
          }));
        };
        var SidebarEventInfo = __webpack_require__(5714);
        var SidebarEventInfo_default = /* @__PURE__ */ __webpack_require__.n(SidebarEventInfo);
        ;
        function SchedulingEventInfo({
          eventInfo
        }) {
          const {
            canViewElementSourceFunction,
            viewElementSourceFunction
          } = (0, external_react_namespaceObject.useContext)(Components_ViewElementSourceContext);
          const {
            componentName,
            timestamp
          } = eventInfo;
          const componentStack = eventInfo.componentStack || null;
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SidebarEventInfo_default().Toolbar
          }, componentName, " ", getSchedulingEventLabel(eventInfo)), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SidebarEventInfo_default().Content,
            tabIndex: 0
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("ul", {
            className: SidebarEventInfo_default().List
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("li", {
            className: SidebarEventInfo_default().ListItem
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
            className: SidebarEventInfo_default().Label
          }, "Timestamp"), ":", " ", /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: SidebarEventInfo_default().Value
          }, formatTimestamp(timestamp))), componentStack && /* @__PURE__ */ external_react_namespaceObject.createElement("li", {
            className: SidebarEventInfo_default().ListItem
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SidebarEventInfo_default().Row
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
            className: SidebarEventInfo_default().Label
          }, "Rendered by"), /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            onClick: () => (0, clipboard.copy)(componentStack),
            title: "Copy component stack to clipboard"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "copy"
          }))), /* @__PURE__ */ external_react_namespaceObject.createElement("ul", {
            className: SidebarEventInfo_default().List
          }, stackToComponentSources(componentStack).map(([displayName, stack], index) => {
            if (stack == null) {
              return /* @__PURE__ */ external_react_namespaceObject.createElement("li", {
                key: index
              }, /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
                className: SidebarEventInfo_default().UnclickableSource,
                disabled: true
              }, displayName));
            }
            const [sourceURL, line, column] = stack;
            const source = {
              sourceURL,
              line,
              column
            };
            const canViewSource = canViewElementSourceFunction == null || canViewElementSourceFunction(source, null);
            const viewSource = !canViewSource || viewElementSourceFunction == null ? () => null : () => viewElementSourceFunction(source, null);
            return /* @__PURE__ */ external_react_namespaceObject.createElement("li", {
              key: index
            }, /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
              className: canViewSource ? SidebarEventInfo_default().ClickableSource : SidebarEventInfo_default().UnclickableSource,
              disabled: !canViewSource,
              onClick: viewSource
            }, displayName));
          }))))));
        }
        function SidebarEventInfo_SidebarEventInfo(_) {
          const {
            selectedEvent
          } = (0, external_react_namespaceObject.useContext)(TimelineContext);
          if (selectedEvent && selectedEvent.schedulingEvent) {
            return /* @__PURE__ */ external_react_namespaceObject.createElement(SchedulingEventInfo, {
              eventInfo: selectedEvent.schedulingEvent
            });
          }
          return null;
        }
        ;
        function ReloadAndProfileButton({
          disabled
        }) {
          const bridge2 = (0, external_react_namespaceObject.useContext)(BridgeContext);
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const subscription = (0, external_react_namespaceObject.useMemo)(() => ({
            getCurrentValue: () => ({
              recordChangeDescriptions: store.recordChangeDescriptions,
              supportsReloadAndProfile: store.supportsReloadAndProfile
            }),
            subscribe: (callback) => {
              store.addListener("recordChangeDescriptions", callback);
              store.addListener("supportsReloadAndProfile", callback);
              return () => {
                store.removeListener("recordChangeDescriptions", callback);
                store.removeListener("supportsReloadAndProfile", callback);
              };
            }
          }), [store]);
          const {
            recordChangeDescriptions,
            supportsReloadAndProfile
          } = useSubscription(subscription);
          const reloadAndProfile = (0, external_react_namespaceObject.useCallback)(() => {
            bridge2.send("reloadAndProfile", recordChangeDescriptions);
          }, [bridge2, recordChangeDescriptions]);
          if (!supportsReloadAndProfile) {
            return null;
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            disabled,
            onClick: reloadAndProfile,
            title: "Reload and start profiling"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "reload"
          }));
        }
        ;
        const isArrayImpl = Array.isArray;
        function shared_isArray_isArray(a) {
          return isArrayImpl(a);
        }
        const shared_isArray = shared_isArray_isArray;
        ;
        const hasOwnProperty_hasOwnProperty = Object.prototype.hasOwnProperty;
        const shared_hasOwnProperty = hasOwnProperty_hasOwnProperty;
        var ProfilingImportExportButtons = __webpack_require__(8682);
        var ProfilingImportExportButtons_default = /* @__PURE__ */ __webpack_require__.n(ProfilingImportExportButtons);
        ;
        function ProfilingImportExportButtons_ProfilingImportExportButtons() {
          const {
            isProfiling,
            profilingData,
            rootID
          } = (0, external_react_namespaceObject.useContext)(ProfilerContext);
          const {
            setFile
          } = (0, external_react_namespaceObject.useContext)(TimelineContext);
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const {
            profilerStore
          } = store;
          const inputRef = (0, external_react_namespaceObject.useRef)(null);
          const downloadRef = (0, external_react_namespaceObject.useRef)(null);
          const {
            dispatch: modalDialogDispatch
          } = (0, external_react_namespaceObject.useContext)(ModalDialogContext);
          const doesHaveInMemoryData = profilerStore.didRecordCommits;
          const downloadData = (0, external_react_namespaceObject.useCallback)(() => {
            if (rootID === null) {
              return;
            }
            const anchorElement = downloadRef.current;
            if (profilingData !== null && anchorElement !== null) {
              const profilingDataExport = prepareProfilingDataExport(profilingData);
              const date = /* @__PURE__ */ new Date();
              const dateString = date.toLocaleDateString(void 0, {
                year: "numeric",
                month: "2-digit",
                day: "2-digit"
              }).replace(/\//g, "-");
              const timeString = date.toLocaleTimeString(void 0, {
                hour12: false
              }).replace(/:/g, "-");
              downloadFile(anchorElement, `profiling-data.${dateString}.${timeString}.json`, JSON.stringify(profilingDataExport, null, 2));
            }
          }, [rootID, profilingData]);
          const clickInputElement = (0, external_react_namespaceObject.useCallback)(() => {
            if (inputRef.current !== null) {
              inputRef.current.click();
            }
          }, []);
          const handleChange = () => {
            const input = inputRef.current;
            if (input !== null && input.files.length > 0) {
              const file = input.files[0];
              const fileReader = new FileReader();
              fileReader.addEventListener("load", () => {
                const raw = fileReader.result;
                const json = JSON.parse(raw);
                if (!shared_isArray(json) && shared_hasOwnProperty.call(json, "version")) {
                  setFile(null);
                  try {
                    const profilingDataExport = json;
                    profilerStore.profilingData = prepareProfilingDataFrontendFromExport(profilingDataExport);
                  } catch (error) {
                    modalDialogDispatch({
                      id: "ProfilingImportExportButtons",
                      type: "SHOW",
                      title: "Import failed",
                      content: /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, "The profiling data you selected cannot be imported."), error !== null && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
                        className: ProfilingImportExportButtons_default().ErrorMessage
                      }, error.message))
                    });
                  }
                } else {
                  profilerStore.clear();
                  setFile(file);
                }
              });
              fileReader.readAsText(file);
            }
          };
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: ProfilingImportExportButtons_default().VRule
          }), /* @__PURE__ */ external_react_namespaceObject.createElement("input", {
            ref: inputRef,
            className: ProfilingImportExportButtons_default().Input,
            type: "file",
            accept: ".json",
            onChange: handleChange,
            tabIndex: -1
          }), /* @__PURE__ */ external_react_namespaceObject.createElement("a", {
            ref: downloadRef,
            className: ProfilingImportExportButtons_default().Input
          }), /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            disabled: isProfiling,
            onClick: clickInputElement,
            title: "Load profile..."
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "import"
          })), /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            disabled: isProfiling || !doesHaveInMemoryData,
            onClick: downloadData,
            title: "Save profile..."
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "export"
          })));
        }
        var SnapshotCommitListItem = __webpack_require__(7102);
        var SnapshotCommitListItem_default = /* @__PURE__ */ __webpack_require__.n(SnapshotCommitListItem);
        ;
        function SnapshotCommitListItem_SnapshotCommitListItem({
          data: itemData,
          index,
          style
        }) {
          const {
            filteredCommitIndices,
            maxDuration,
            selectedCommitIndex,
            selectCommitIndex,
            setHoveredCommitIndex,
            startCommitDrag,
            totalDurations
          } = itemData;
          index = filteredCommitIndices[index];
          const totalDuration = totalDurations[index];
          const heightScale = Math.min(1, Math.max(0, Math.cbrt(totalDuration) / Math.cbrt(maxDuration))) || 0;
          const colorScale = Math.min(1, Math.max(0, totalDuration / maxDuration)) || 0;
          const isSelected = selectedCommitIndex === index;
          const width = parseFloat(style.width) - 1;
          const handleMouseDown = ({
            buttons,
            target
          }) => {
            if (buttons === 1) {
              selectCommitIndex(index);
              startCommitDrag({
                commitIndex: index,
                left: target.getBoundingClientRect().left,
                sizeIncrement: parseFloat(style.width)
              });
            }
          };
          let backgroundColor;
          if (!isSelected && totalDuration > 0) {
            backgroundColor = getGradientColor(colorScale);
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SnapshotCommitListItem_default().Outer,
            onMouseDown: handleMouseDown,
            onMouseEnter: () => setHoveredCommitIndex(index),
            style: {
              ...style,
              width,
              borderBottom: isSelected ? "3px solid var(--color-tab-selected-border)" : void 0
            }
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: isSelected ? SnapshotCommitListItem_default().InnerSelected : SnapshotCommitListItem_default().Inner,
            style: {
              height: `${Math.round(heightScale * 100)}%`,
              backgroundColor
            }
          }));
        }
        const Profiler_SnapshotCommitListItem = /* @__PURE__ */ (0, external_react_namespaceObject.memo)(SnapshotCommitListItem_SnapshotCommitListItem, areEqual);
        var SnapshotCommitList = __webpack_require__(5722);
        var SnapshotCommitList_default = /* @__PURE__ */ __webpack_require__.n(SnapshotCommitList);
        ;
        function SnapshotCommitList_SnapshotCommitList({
          commitData,
          commitTimes,
          filteredCommitIndices,
          selectedCommitIndex,
          selectedFilteredCommitIndex,
          selectCommitIndex,
          totalDurations
        }) {
          return /* @__PURE__ */ external_react_namespaceObject.createElement(AutoSizer, null, ({
            height,
            width
          }) => /* @__PURE__ */ external_react_namespaceObject.createElement(List, {
            commitData,
            commitTimes,
            height,
            filteredCommitIndices,
            selectedCommitIndex,
            selectedFilteredCommitIndex,
            selectCommitIndex,
            totalDurations,
            width
          }));
        }
        function List({
          commitData,
          selectedCommitIndex,
          commitTimes,
          height,
          filteredCommitIndices,
          selectedFilteredCommitIndex,
          selectCommitIndex,
          totalDurations,
          width
        }) {
          const listRef = (0, external_react_namespaceObject.useRef)(null);
          const divRef = (0, external_react_namespaceObject.useRef)(null);
          const prevCommitIndexRef = (0, external_react_namespaceObject.useRef)(null);
          (0, external_react_namespaceObject.useEffect)(() => {
            if (selectedFilteredCommitIndex !== prevCommitIndexRef.current) {
              prevCommitIndexRef.current = selectedFilteredCommitIndex;
              if (selectedFilteredCommitIndex !== null && listRef.current !== null) {
                listRef.current.scrollToItem(selectedFilteredCommitIndex);
              }
            }
          }, [listRef, selectedFilteredCommitIndex]);
          const itemSize = (0, external_react_namespaceObject.useMemo)(() => Math.max(minBarWidth, width / filteredCommitIndices.length), [filteredCommitIndices, width]);
          const maxDuration = (0, external_react_namespaceObject.useMemo)(() => totalDurations.reduce((max, duration) => Math.max(max, duration), 0), [totalDurations]);
          const maxCommitIndex = filteredCommitIndices.length - 1;
          const [dragState, setDragState] = (0, external_react_namespaceObject.useState)(null);
          const handleDragCommit = ({
            buttons,
            pageX
          }) => {
            if (buttons === 0) {
              setDragState(null);
              return;
            }
            if (dragState !== null) {
              const {
                commitIndex,
                left,
                sizeIncrement
              } = dragState;
              let newCommitIndex = commitIndex;
              let newCommitLeft = left;
              if (pageX < newCommitLeft) {
                while (pageX < newCommitLeft) {
                  newCommitLeft -= sizeIncrement;
                  newCommitIndex -= 1;
                }
              } else {
                let newCommitRectRight = newCommitLeft + sizeIncrement;
                while (pageX > newCommitRectRight) {
                  newCommitRectRight += sizeIncrement;
                  newCommitIndex += 1;
                }
              }
              if (newCommitIndex < 0) {
                newCommitIndex = 0;
              } else if (newCommitIndex > maxCommitIndex) {
                newCommitIndex = maxCommitIndex;
              }
              selectCommitIndex(newCommitIndex);
            }
          };
          (0, external_react_namespaceObject.useEffect)(() => {
            if (dragState === null) {
              return;
            }
            const element = divRef.current;
            if (element !== null) {
              const ownerDocument = element.ownerDocument;
              ownerDocument.addEventListener("mousemove", handleDragCommit);
              return () => {
                ownerDocument.removeEventListener("mousemove", handleDragCommit);
              };
            }
          }, [dragState]);
          const [hoveredCommitIndex, setHoveredCommitIndex] = (0, external_react_namespaceObject.useState)(null);
          const itemData = (0, external_react_namespaceObject.useMemo)(() => ({
            commitTimes,
            filteredCommitIndices,
            maxDuration,
            selectedCommitIndex,
            selectedFilteredCommitIndex,
            selectCommitIndex,
            setHoveredCommitIndex,
            startCommitDrag: setDragState,
            totalDurations
          }), [commitTimes, filteredCommitIndices, maxDuration, selectedCommitIndex, selectedFilteredCommitIndex, selectCommitIndex, setHoveredCommitIndex, totalDurations]);
          let tooltipLabel = null;
          if (hoveredCommitIndex !== null) {
            const {
              duration,
              effectDuration,
              passiveEffectDuration,
              priorityLevel,
              timestamp
            } = commitData[hoveredCommitIndex];
            if (effectDuration !== null || passiveEffectDuration !== null || priorityLevel !== null) {
              tooltipLabel = /* @__PURE__ */ external_react_namespaceObject.createElement("ul", {
                className: SnapshotCommitList_default().TooltipList
              }, priorityLevel !== null && /* @__PURE__ */ external_react_namespaceObject.createElement("li", {
                className: SnapshotCommitList_default().TooltipListItem
              }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
                className: SnapshotCommitList_default().TooltipLabel
              }, "Priority"), /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
                className: SnapshotCommitList_default().TooltipValue
              }, priorityLevel)), /* @__PURE__ */ external_react_namespaceObject.createElement("li", {
                className: SnapshotCommitList_default().TooltipListItem
              }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
                className: SnapshotCommitList_default().TooltipLabel
              }, "Committed at"), /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
                className: SnapshotCommitList_default().TooltipValue
              }, formatTime(timestamp), "s")), /* @__PURE__ */ external_react_namespaceObject.createElement("li", {
                className: SnapshotCommitList_default().TooltipListItem
              }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
                className: SnapshotCommitList_default().DurationsWrapper
              }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
                className: SnapshotCommitList_default().TooltipLabel
              }, "Durations"), /* @__PURE__ */ external_react_namespaceObject.createElement("ul", {
                className: SnapshotCommitList_default().DurationsList
              }, /* @__PURE__ */ external_react_namespaceObject.createElement("li", {
                className: SnapshotCommitList_default().DurationsListItem
              }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
                className: SnapshotCommitList_default().DurationsLabel
              }, "Render"), /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
                className: SnapshotCommitList_default().DurationsValue
              }, formatDuration(duration), "ms")), effectDuration !== null && /* @__PURE__ */ external_react_namespaceObject.createElement("li", {
                className: SnapshotCommitList_default().DurationsListItem
              }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
                className: SnapshotCommitList_default().DurationsLabel
              }, "Layout effects"), /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
                className: SnapshotCommitList_default().DurationsValue
              }, formatDuration(effectDuration), "ms")), passiveEffectDuration !== null && /* @__PURE__ */ external_react_namespaceObject.createElement("li", {
                className: SnapshotCommitList_default().DurationsListItem
              }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
                className: SnapshotCommitList_default().DurationsLabel
              }, "Passive effects"), /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
                className: SnapshotCommitList_default().DurationsValue
              }, formatDuration(passiveEffectDuration), "ms"))))));
            } else {
              tooltipLabel = `${formatDuration(duration)}ms at ${formatTime(timestamp)}s`;
            }
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement(Tooltip_Tooltip, {
            className: SnapshotCommitList_default().Tooltip,
            label: tooltipLabel
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            ref: divRef,
            style: {
              height,
              width
            },
            onMouseLeave: () => setHoveredCommitIndex(null)
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(FixedSizeList, {
            className: SnapshotCommitList_default().List,
            layout: "horizontal",
            height,
            itemCount: filteredCommitIndices.length,
            itemData,
            itemSize,
            ref: listRef,
            width
          }, Profiler_SnapshotCommitListItem)));
        }
        var SnapshotSelector = __webpack_require__(1633);
        var SnapshotSelector_default = /* @__PURE__ */ __webpack_require__.n(SnapshotSelector);
        ;
        function SnapshotSelector_SnapshotSelector(_) {
          const {
            isCommitFilterEnabled,
            minCommitDuration,
            rootID,
            selectedCommitIndex,
            selectCommitIndex
          } = (0, external_react_namespaceObject.useContext)(ProfilerContext);
          const {
            profilerStore
          } = (0, external_react_namespaceObject.useContext)(StoreContext);
          const {
            commitData
          } = profilerStore.getDataForRoot(rootID);
          const totalDurations = [];
          const commitTimes = [];
          commitData.forEach((commitDatum) => {
            totalDurations.push(commitDatum.duration + (commitDatum.effectDuration || 0) + (commitDatum.passiveEffectDuration || 0));
            commitTimes.push(commitDatum.timestamp);
          });
          const filteredCommitIndices = (0, external_react_namespaceObject.useMemo)(() => commitData.reduce((reduced, commitDatum, index) => {
            if (!isCommitFilterEnabled || commitDatum.duration >= minCommitDuration) {
              reduced.push(index);
            }
            return reduced;
          }, []), [commitData, isCommitFilterEnabled, minCommitDuration]);
          const numFilteredCommits = filteredCommitIndices.length;
          const selectedFilteredCommitIndex = (0, external_react_namespaceObject.useMemo)(() => {
            if (selectedCommitIndex !== null) {
              for (let i2 = 0; i2 < filteredCommitIndices.length; i2++) {
                if (filteredCommitIndices[i2] === selectedCommitIndex) {
                  return i2;
                }
              }
            }
            return null;
          }, [filteredCommitIndices, selectedCommitIndex]);
          if (selectedFilteredCommitIndex === null) {
            if (numFilteredCommits > 0) {
              selectCommitIndex(0);
            } else {
              selectCommitIndex(null);
            }
          } else if (selectedFilteredCommitIndex >= numFilteredCommits) {
            selectCommitIndex(numFilteredCommits === 0 ? null : numFilteredCommits - 1);
          }
          let label = null;
          if (numFilteredCommits > 0) {
            const handleCommitInputChange = (event) => {
              const value = parseInt(event.currentTarget.value, 10);
              if (!isNaN(value)) {
                const filteredIndex = Math.min(
                  Math.max(value - 1, 0),
                  // Snashots are shown to the user as 1-based
                  // but the indices within the profiler data array ar 0-based.
                  numFilteredCommits - 1
                );
                selectCommitIndex(filteredCommitIndices[filteredIndex]);
              }
            };
            const handleClick = (event) => {
              event.currentTarget.select();
            };
            const handleKeyDown2 = (event) => {
              switch (event.key) {
                case "ArrowDown":
                  viewPrevCommit();
                  event.stopPropagation();
                  break;
                case "ArrowUp":
                  viewNextCommit();
                  event.stopPropagation();
                  break;
                default:
                  break;
              }
            };
            const input = /* @__PURE__ */ external_react_namespaceObject.createElement("input", {
              className: SnapshotSelector_default().Input,
              "data-testname": "SnapshotSelector-Input",
              type: "text",
              inputMode: "numeric",
              pattern: "[0-9]*",
              value: (
                // $FlowFixMe[unsafe-addition] addition with possible null/undefined value
                selectedFilteredCommitIndex + 1
              ),
              size: `${numFilteredCommits}`.length,
              onChange: handleCommitInputChange,
              onClick: handleClick,
              onKeyDown: handleKeyDown2
            });
            label = /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, input, " / ", numFilteredCommits);
          }
          const viewNextCommit = () => {
            let nextCommitIndex = selectedFilteredCommitIndex + 1;
            if (nextCommitIndex === filteredCommitIndices.length) {
              nextCommitIndex = 0;
            }
            selectCommitIndex(filteredCommitIndices[nextCommitIndex]);
          };
          const viewPrevCommit = () => {
            let nextCommitIndex = selectedFilteredCommitIndex - 1;
            if (nextCommitIndex < 0) {
              nextCommitIndex = filteredCommitIndices.length - 1;
            }
            selectCommitIndex(filteredCommitIndices[nextCommitIndex]);
          };
          const handleKeyDown = (event) => {
            switch (event.key) {
              case "ArrowLeft":
                viewPrevCommit();
                event.stopPropagation();
                break;
              case "ArrowRight":
                viewNextCommit();
                event.stopPropagation();
                break;
              default:
                break;
            }
          };
          if (commitData.length === 0) {
            return null;
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: SnapshotSelector_default().IndexLabel,
            "data-testname": "SnapshotSelector-Label"
          }, label), /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            className: SnapshotSelector_default().Button,
            "data-testname": "SnapshotSelector-PreviousButton",
            disabled: numFilteredCommits === 0,
            onClick: viewPrevCommit,
            title: "Select previous commit"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "previous"
          })), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SnapshotSelector_default().Commits,
            onKeyDown: handleKeyDown,
            style: {
              flex: numFilteredCommits > 0 ? "1 1 auto" : "0 0 auto",
              maxWidth: numFilteredCommits > 0 ? numFilteredCommits * maxBarWidth : void 0
            },
            tabIndex: 0
          }, numFilteredCommits > 0 && /* @__PURE__ */ external_react_namespaceObject.createElement(SnapshotCommitList_SnapshotCommitList, {
            commitData,
            commitTimes,
            filteredCommitIndices,
            selectedCommitIndex,
            selectedFilteredCommitIndex,
            selectCommitIndex,
            totalDurations
          }), numFilteredCommits === 0 && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SnapshotSelector_default().NoCommits
          }, "No commits")), /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            className: SnapshotSelector_default().Button,
            "data-testname": "SnapshotSelector-NextButton",
            disabled: numFilteredCommits === 0,
            onClick: viewNextCommit,
            title: "Select next commit"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "next"
          })));
        }
        var Updaters = __webpack_require__(8640);
        var Updaters_default = /* @__PURE__ */ __webpack_require__.n(Updaters);
        ;
        function Updaters_Updaters({
          commitTree,
          updaters
        }) {
          const {
            selectFiber
          } = (0, external_react_namespaceObject.useContext)(ProfilerContext);
          const children = updaters.length > 0 ? updaters.map((serializedElement) => {
            const {
              displayName,
              id: id2,
              key,
              type
            } = serializedElement;
            const isVisibleInTree = commitTree.nodes.has(id2) && type !== types_ElementTypeRoot;
            if (isVisibleInTree) {
              return /* @__PURE__ */ external_react_namespaceObject.createElement("button", {
                key: id2,
                className: Updaters_default().Updater,
                onClick: () => selectFiber(id2, displayName)
              }, displayName, " ", key ? `key="${key}"` : "");
            } else {
              return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
                key: id2,
                className: Updaters_default().UnmountedUpdater
              }, displayName, " ", key ? `key="${key}"` : "");
            }
          }) : /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            key: "none",
            className: Updaters_default().NoUpdaters
          }, "(unknown)");
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Updaters_default().Updaters
          }, children);
        }
        var SidebarCommitInfo = __webpack_require__(6038);
        var SidebarCommitInfo_default = /* @__PURE__ */ __webpack_require__.n(SidebarCommitInfo);
        ;
        function SidebarCommitInfo_SidebarCommitInfo(_) {
          const {
            selectedCommitIndex,
            rootID
          } = (0, external_react_namespaceObject.useContext)(ProfilerContext);
          const {
            profilerStore
          } = (0, external_react_namespaceObject.useContext)(StoreContext);
          if (rootID === null || selectedCommitIndex === null) {
            return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
              className: SidebarCommitInfo_default().NothingSelected
            }, "Nothing selected");
          }
          const {
            duration,
            effectDuration,
            passiveEffectDuration,
            priorityLevel,
            timestamp,
            updaters
          } = profilerStore.getCommitData(rootID, selectedCommitIndex);
          const hasCommitPhaseDurations = effectDuration !== null || passiveEffectDuration !== null;
          const commitTree = updaters !== null ? getCommitTree({
            commitIndex: selectedCommitIndex,
            profilerStore,
            rootID
          }) : null;
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SidebarCommitInfo_default().Toolbar
          }, "Commit information"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SidebarCommitInfo_default().Content
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("ul", {
            className: SidebarCommitInfo_default().List
          }, priorityLevel !== null && /* @__PURE__ */ external_react_namespaceObject.createElement("li", {
            className: SidebarCommitInfo_default().ListItem
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
            className: SidebarCommitInfo_default().Label
          }, "Priority"), ":", " ", /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: SidebarCommitInfo_default().Value
          }, priorityLevel)), /* @__PURE__ */ external_react_namespaceObject.createElement("li", {
            className: SidebarCommitInfo_default().ListItem
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
            className: SidebarCommitInfo_default().Label
          }, "Committed at"), ":", " ", /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: SidebarCommitInfo_default().Value
          }, formatTime(timestamp), "s")), !hasCommitPhaseDurations && /* @__PURE__ */ external_react_namespaceObject.createElement("li", {
            className: SidebarCommitInfo_default().ListItem
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
            className: SidebarCommitInfo_default().Label
          }, "Render duration"), ":", " ", /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: SidebarCommitInfo_default().Value
          }, formatDuration(duration), "ms")), hasCommitPhaseDurations && /* @__PURE__ */ external_react_namespaceObject.createElement("li", {
            className: SidebarCommitInfo_default().ListItem
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
            className: SidebarCommitInfo_default().Label
          }, "Durations"), /* @__PURE__ */ external_react_namespaceObject.createElement("ul", {
            className: SidebarCommitInfo_default().DurationsList
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("li", {
            className: SidebarCommitInfo_default().DurationsListItem
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
            className: SidebarCommitInfo_default().Label
          }, "Render"), ":", " ", /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: SidebarCommitInfo_default().Value
          }, formatDuration(duration), "ms")), effectDuration !== null && /* @__PURE__ */ external_react_namespaceObject.createElement("li", {
            className: SidebarCommitInfo_default().DurationsListItem
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
            className: SidebarCommitInfo_default().Label
          }, "Layout effects"), ":", " ", /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: SidebarCommitInfo_default().Value
          }, formatDuration(effectDuration), "ms")), passiveEffectDuration !== null && /* @__PURE__ */ external_react_namespaceObject.createElement("li", {
            className: SidebarCommitInfo_default().DurationsListItem
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
            className: SidebarCommitInfo_default().Label
          }, "Passive effects"), ":", " ", /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: SidebarCommitInfo_default().Value
          }, formatDuration(passiveEffectDuration), "ms")))), updaters !== null && commitTree !== null && /* @__PURE__ */ external_react_namespaceObject.createElement("li", {
            className: SidebarCommitInfo_default().ListItem
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
            className: SidebarCommitInfo_default().Label
          }, "What caused this update"), "?", /* @__PURE__ */ external_react_namespaceObject.createElement(Updaters_Updaters, {
            commitTree,
            updaters
          })))));
        }
        ;
        function ProcessingData_ProcessingData() {
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Profiler_default().Column
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Profiler_default().Header
          }, "Processing data..."), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Profiler_default().Row
          }, "This should only take a minute."));
        }
        ;
        function ProfilingNotSupported() {
          return /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Profiler_default().Column
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Profiler_default().Header
          }, "Profiling not supported."), /* @__PURE__ */ external_react_namespaceObject.createElement("p", {
            className: Profiler_default().Paragraph
          }, "Profiling support requires either a development or profiling build of React v16.5+."), /* @__PURE__ */ external_react_namespaceObject.createElement("p", {
            className: Profiler_default().Paragraph
          }, "Learn more at", " ", /* @__PURE__ */ external_react_namespaceObject.createElement("a", {
            className: Profiler_default().Link,
            href: "https://fb.me/react-devtools-profiling",
            rel: "noopener noreferrer",
            target: "_blank"
          }, "reactjs.org/link/profiling"), "."));
        }
        var SidebarSelectedFiberInfo = __webpack_require__(1409);
        var SidebarSelectedFiberInfo_default = /* @__PURE__ */ __webpack_require__.n(SidebarSelectedFiberInfo);
        ;
        function SidebarSelectedFiberInfo_SidebarSelectedFiberInfo() {
          const {
            profilerStore
          } = (0, external_react_namespaceObject.useContext)(StoreContext);
          const {
            rootID,
            selectCommitIndex,
            selectedCommitIndex,
            selectedFiberID,
            selectedFiberName,
            selectFiber
          } = (0, external_react_namespaceObject.useContext)(ProfilerContext);
          const {
            profilingCache
          } = profilerStore;
          const selectedListItemRef = (0, external_react_namespaceObject.useRef)(null);
          (0, external_react_namespaceObject.useEffect)(() => {
            const selectedElement = selectedListItemRef.current;
            if (selectedElement !== null && // $FlowFixMe[method-unbinding]
            typeof selectedElement.scrollIntoView === "function") {
              selectedElement.scrollIntoView({
                block: "nearest",
                inline: "nearest"
              });
            }
          }, [selectedCommitIndex]);
          if (selectedFiberID === null || rootID === null || selectedCommitIndex === null) {
            return null;
          }
          const commitIndices = profilingCache.getFiberCommits({
            fiberID: selectedFiberID,
            rootID
          });
          const {
            nodes
          } = profilingCache.getCommitTree({
            rootID,
            commitIndex: selectedCommitIndex
          });
          const node = nodes.get(selectedFiberID);
          const handleKeyDown = (event) => {
            switch (event.key) {
              case "ArrowUp":
                if (selectedCommitIndex !== null) {
                  const prevIndex = commitIndices.indexOf(selectedCommitIndex);
                  const nextIndex = prevIndex > 0 ? prevIndex - 1 : commitIndices.length - 1;
                  selectCommitIndex(commitIndices[nextIndex]);
                }
                event.preventDefault();
                break;
              case "ArrowDown":
                if (selectedCommitIndex !== null) {
                  const prevIndex = commitIndices.indexOf(selectedCommitIndex);
                  const nextIndex = prevIndex < commitIndices.length - 1 ? prevIndex + 1 : 0;
                  selectCommitIndex(commitIndices[nextIndex]);
                }
                event.preventDefault();
                break;
              default:
                break;
            }
          };
          const listItems = [];
          let i2 = 0;
          for (i2 = 0; i2 < commitIndices.length; i2++) {
            const commitIndex = commitIndices[i2];
            const {
              duration,
              timestamp
            } = profilerStore.getCommitData(rootID, commitIndex);
            listItems.push(/* @__PURE__ */ external_react_namespaceObject.createElement("button", {
              key: commitIndex,
              ref: selectedCommitIndex === commitIndex ? selectedListItemRef : null,
              className: selectedCommitIndex === commitIndex ? SidebarSelectedFiberInfo_default().CurrentCommit : SidebarSelectedFiberInfo_default().Commit,
              onClick: () => selectCommitIndex(commitIndex)
            }, formatTime(timestamp), "s for ", formatDuration(duration), "ms"));
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SidebarSelectedFiberInfo_default().Toolbar
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SidebarSelectedFiberInfo_default().Component
          }, selectedFiberName || "Selected component"), /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
            onClick: () => selectFiber(null, null),
            title: "Back to commit view"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
            type: "close"
          }))), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: SidebarSelectedFiberInfo_default().Content,
            onKeyDown: handleKeyDown,
            tabIndex: 0
          }, node != null && /* @__PURE__ */ external_react_namespaceObject.createElement(InspectedElementBadges_InspectedElementBadges, {
            hocDisplayNames: node.hocDisplayNames,
            compiledWithForget: node.compiledWithForget
          }), /* @__PURE__ */ external_react_namespaceObject.createElement(WhatChanged_WhatChanged, {
            fiberID: selectedFiberID
          }), listItems.length > 0 && /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, /* @__PURE__ */ external_react_namespaceObject.createElement("label", {
            className: SidebarSelectedFiberInfo_default().Label
          }, "Rendered at: "), listItems), listItems.length === 0 && /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, "Did not render during this profiling session.")));
        }
        ;
        function Profiler_Profiler(_) {
          const {
            didRecordCommits,
            isProcessingData,
            isProfiling,
            selectedCommitIndex,
            selectedFiberID,
            selectedTabID,
            selectTab,
            supportsProfiling
          } = (0, external_react_namespaceObject.useContext)(ProfilerContext);
          const {
            file: timelineTraceEventData,
            searchInputContainerRef
          } = (0, external_react_namespaceObject.useContext)(TimelineContext);
          const {
            supportsTimeline
          } = (0, external_react_namespaceObject.useContext)(StoreContext);
          const isLegacyProfilerSelected = selectedTabID !== "timeline";
          let view = null;
          if (didRecordCommits || selectedTabID === "timeline") {
            switch (selectedTabID) {
              case "flame-chart":
                view = /* @__PURE__ */ external_react_namespaceObject.createElement(CommitFlamegraphAutoSizer, null);
                break;
              case "ranked-chart":
                view = /* @__PURE__ */ external_react_namespaceObject.createElement(CommitRankedAutoSizer, null);
                break;
              case "timeline":
                view = /* @__PURE__ */ external_react_namespaceObject.createElement(Timeline_Timeline, null);
                break;
              default:
                break;
            }
          } else if (isProfiling) {
            view = /* @__PURE__ */ external_react_namespaceObject.createElement(RecordingInProgress, null);
          } else if (isProcessingData) {
            view = /* @__PURE__ */ external_react_namespaceObject.createElement(ProcessingData_ProcessingData, null);
          } else if (timelineTraceEventData) {
            view = /* @__PURE__ */ external_react_namespaceObject.createElement(OnlyTimelineData, null);
          } else if (supportsProfiling) {
            view = /* @__PURE__ */ external_react_namespaceObject.createElement(NoProfilingData, null);
          } else {
            view = /* @__PURE__ */ external_react_namespaceObject.createElement(ProfilingNotSupported, null);
          }
          let sidebar = null;
          if (!isProfiling && !isProcessingData && didRecordCommits) {
            switch (selectedTabID) {
              case "flame-chart":
              case "ranked-chart":
                if (selectedCommitIndex !== null) {
                  if (selectedFiberID !== null) {
                    sidebar = /* @__PURE__ */ external_react_namespaceObject.createElement(SidebarSelectedFiberInfo_SidebarSelectedFiberInfo, null);
                  } else {
                    sidebar = /* @__PURE__ */ external_react_namespaceObject.createElement(SidebarCommitInfo_SidebarCommitInfo, null);
                  }
                }
                break;
              case "timeline":
                sidebar = /* @__PURE__ */ external_react_namespaceObject.createElement(SidebarEventInfo_SidebarEventInfo, null);
                break;
              default:
                break;
            }
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement(SettingsModalContextController, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Profiler_default().Profiler
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Profiler_default().LeftColumn
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Profiler_default().Toolbar
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(RecordToggle_RecordToggle, {
            disabled: !supportsProfiling
          }), /* @__PURE__ */ external_react_namespaceObject.createElement(ReloadAndProfileButton, {
            disabled: !supportsProfiling
          }), /* @__PURE__ */ external_react_namespaceObject.createElement(ClearProfilingDataButton, null), /* @__PURE__ */ external_react_namespaceObject.createElement(ProfilingImportExportButtons_ProfilingImportExportButtons, null), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Profiler_default().VRule
          }), /* @__PURE__ */ external_react_namespaceObject.createElement(TabBar_TabBar, {
            currentTab: selectedTabID,
            id: "Profiler",
            selectTab,
            tabs: supportsTimeline ? tabsWithTimeline : Profiler_tabs,
            type: "profiler"
          }), /* @__PURE__ */ external_react_namespaceObject.createElement(RootSelector_RootSelector, null), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Profiler_default().Spacer
          }), !isLegacyProfilerSelected && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            ref: searchInputContainerRef,
            className: Profiler_default().TimelineSearchInputContainer
          }), /* @__PURE__ */ external_react_namespaceObject.createElement(SettingsModalContextToggle, null), isLegacyProfilerSelected && didRecordCommits && /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Profiler_default().VRule
          }), /* @__PURE__ */ external_react_namespaceObject.createElement(SnapshotSelector_SnapshotSelector, null))), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Profiler_default().Content
          }, view, /* @__PURE__ */ external_react_namespaceObject.createElement(ModalDialog_ModalDialog, null))), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: Profiler_default().RightColumn
          }, sidebar), /* @__PURE__ */ external_react_namespaceObject.createElement(SettingsModal_SettingsModal, null)));
        }
        const OnlyTimelineData = () => /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
          className: Profiler_default().Column
        }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
          className: Profiler_default().Header
        }, "Timeline only"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
          className: Profiler_default().Row
        }, "The current profile contains only Timeline data."));
        const Profiler_tabs = [{
          id: "flame-chart",
          icon: "flame-chart",
          label: "Flamegraph",
          title: "Flamegraph chart"
        }, {
          id: "ranked-chart",
          icon: "ranked-chart",
          label: "Ranked",
          title: "Ranked chart"
        }];
        const tabsWithTimeline = [
          ...Profiler_tabs,
          null,
          // Divider/separator
          {
            id: "timeline",
            icon: "timeline",
            label: "Timeline",
            title: "Timeline"
          }
        ];
        const views_Profiler_Profiler = portaledContent(Profiler_Profiler);
        var ReactLogo = __webpack_require__(9653);
        var ReactLogo_default = /* @__PURE__ */ __webpack_require__.n(ReactLogo);
        ;
        function ReactLogo_ReactLogo({
          className
        }) {
          return /* @__PURE__ */ external_react_namespaceObject.createElement("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            className: `${ReactLogo_default().ReactLogo} ${className || ""}`,
            viewBox: "-11.5 -10.23174 23 20.46348"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("circle", {
            cx: "0",
            cy: "0",
            r: "2.05",
            fill: "currentColor"
          }), /* @__PURE__ */ external_react_namespaceObject.createElement("g", {
            stroke: "currentColor",
            strokeWidth: "1",
            fill: "none"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("ellipse", {
            rx: "11",
            ry: "4.2"
          }), /* @__PURE__ */ external_react_namespaceObject.createElement("ellipse", {
            rx: "11",
            ry: "4.2",
            transform: "rotate(60)"
          }), /* @__PURE__ */ external_react_namespaceObject.createElement("ellipse", {
            rx: "11",
            ry: "4.2",
            transform: "rotate(120)"
          })));
        }
        var UnsupportedBridgeProtocolDialog = __webpack_require__(8178);
        var UnsupportedBridgeProtocolDialog_default = /* @__PURE__ */ __webpack_require__.n(UnsupportedBridgeProtocolDialog);
        ;
        const DEVTOOLS_VERSION = "5.3.1-ccb20cb88b";
        const INSTRUCTIONS_FB_URL = "https://fb.me/devtools-unsupported-bridge-protocol";
        const MODAL_DIALOG_ID = "UnsupportedBridgeProtocolDialog";
        function UnsupportedBridgeProtocolDialog_UnsupportedBridgeProtocolDialog(_) {
          const {
            dialogs,
            dispatch
          } = (0, external_react_namespaceObject.useContext)(ModalDialogContext);
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const isVisible = !!dialogs.find((dialog) => dialog.id === MODAL_DIALOG_ID);
          (0, external_react_namespaceObject.useEffect)(() => {
            const updateDialog = () => {
              if (!isVisible) {
                if (store.unsupportedBridgeProtocolDetected) {
                  dispatch({
                    canBeDismissed: false,
                    id: MODAL_DIALOG_ID,
                    type: "SHOW",
                    content: /* @__PURE__ */ external_react_namespaceObject.createElement(DialogContent, {
                      unsupportedBridgeProtocol: store.bridgeProtocol
                    })
                  });
                }
              } else {
                if (!store.unsupportedBridgeProtocolDetected) {
                  dispatch({
                    type: "HIDE",
                    id: MODAL_DIALOG_ID
                  });
                }
              }
            };
            updateDialog();
            store.addListener("unsupportedBridgeProtocolDetected", updateDialog);
            return () => {
              store.removeListener("unsupportedBridgeProtocolDetected", updateDialog);
            };
          }, [isVisible, store]);
          return null;
        }
        function DialogContent({
          unsupportedBridgeProtocol
        }) {
          const {
            version,
            minNpmVersion,
            maxNpmVersion
          } = unsupportedBridgeProtocol;
          let instructions;
          if (maxNpmVersion === null) {
            const upgradeInstructions = `npm i -g react-devtools@^${minNpmVersion}`;
            instructions = /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("p", {
              className: UnsupportedBridgeProtocolDialog_default().Paragraph
            }, "To fix this, upgrade the DevTools NPM package:"), /* @__PURE__ */ external_react_namespaceObject.createElement("pre", {
              className: UnsupportedBridgeProtocolDialog_default().NpmCommand
            }, upgradeInstructions, /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
              onClick: () => (0, clipboard.copy)(upgradeInstructions),
              title: "Copy upgrade command to clipboard"
            }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
              type: "copy"
            }))));
          } else {
            const downgradeInstructions = `npm i -g react-devtools@${maxNpmVersion}`;
            instructions = /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("p", {
              className: UnsupportedBridgeProtocolDialog_default().Paragraph
            }, "To fix this, downgrade the DevTools NPM package:"), /* @__PURE__ */ external_react_namespaceObject.createElement("pre", {
              className: UnsupportedBridgeProtocolDialog_default().NpmCommand
            }, downgradeInstructions, /* @__PURE__ */ external_react_namespaceObject.createElement(Button_Button, {
              onClick: () => (0, clipboard.copy)(downgradeInstructions),
              title: "Copy downgrade command to clipboard"
            }, /* @__PURE__ */ external_react_namespaceObject.createElement(ButtonIcon_ButtonIcon, {
              type: "copy"
            }))));
          }
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: UnsupportedBridgeProtocolDialog_default().Column
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: UnsupportedBridgeProtocolDialog_default().Title
          }, "Unsupported DevTools backend version"), /* @__PURE__ */ external_react_namespaceObject.createElement("p", {
            className: UnsupportedBridgeProtocolDialog_default().Paragraph
          }, "You are running ", /* @__PURE__ */ external_react_namespaceObject.createElement("code", null, "react-devtools"), " version", " ", /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: UnsupportedBridgeProtocolDialog_default().Version
          }, DEVTOOLS_VERSION), "."), /* @__PURE__ */ external_react_namespaceObject.createElement("p", {
            className: UnsupportedBridgeProtocolDialog_default().Paragraph
          }, "This requires bridge protocol", " ", /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: UnsupportedBridgeProtocolDialog_default().Version
          }, "version ", currentBridgeProtocol.version), ". However the current backend version uses bridge protocol", " ", /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: UnsupportedBridgeProtocolDialog_default().Version
          }, "version ", version), "."), instructions, /* @__PURE__ */ external_react_namespaceObject.createElement("p", {
            className: UnsupportedBridgeProtocolDialog_default().Paragraph
          }, "Or", " ", /* @__PURE__ */ external_react_namespaceObject.createElement("a", {
            className: UnsupportedBridgeProtocolDialog_default().Link,
            href: INSTRUCTIONS_FB_URL,
            target: "_blank"
          }, "click here"), " ", "for more information.")));
        }
        var UnsupportedVersionDialog = __webpack_require__(7304);
        var UnsupportedVersionDialog_default = /* @__PURE__ */ __webpack_require__.n(UnsupportedVersionDialog);
        ;
        function UnsupportedVersionDialog_UnsupportedVersionDialog(_) {
          const {
            dispatch
          } = (0, external_react_namespaceObject.useContext)(ModalDialogContext);
          const store = (0, external_react_namespaceObject.useContext)(StoreContext);
          const [state2, setState] = (0, external_react_namespaceObject.useState)("dialog-not-shown");
          (0, external_react_namespaceObject.useEffect)(() => {
            if (state2 === "dialog-not-shown") {
              const showDialog = () => {
                (0, external_react_dom_namespaceObject.unstable_batchedUpdates)(() => {
                  setState("show-dialog");
                  dispatch({
                    canBeDismissed: true,
                    id: "UnsupportedVersionDialog",
                    type: "SHOW",
                    content: /* @__PURE__ */ external_react_namespaceObject.createElement(UnsupportedVersionDialog_DialogContent, null)
                  });
                });
              };
              if (store.unsupportedRendererVersionDetected) {
                showDialog();
              } else {
                store.addListener("unsupportedRendererVersionDetected", showDialog);
                return () => {
                  store.removeListener("unsupportedRendererVersionDetected", showDialog);
                };
              }
            }
          }, [state2, store]);
          return null;
        }
        function UnsupportedVersionDialog_DialogContent(_) {
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: UnsupportedVersionDialog_default().Row
          }, /* @__PURE__ */ external_react_namespaceObject.createElement("div", null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: UnsupportedVersionDialog_default().Title
          }, "Unsupported React version detected"), /* @__PURE__ */ external_react_namespaceObject.createElement("p", null, "This version of React DevTools supports React DOM v15+ and React Native v61+."), /* @__PURE__ */ external_react_namespaceObject.createElement("p", null, "In order to use DevTools with an older version of React, you'll need to", " ", /* @__PURE__ */ external_react_namespaceObject.createElement("a", {
            className: UnsupportedVersionDialog_default().ReleaseNotesLink,
            target: "_blank",
            rel: "noopener noreferrer",
            href: UNSUPPORTED_VERSION_URL
          }, "install an older version of the extension"), "."))));
        }
        var WarnIfLegacyBackendDetected = __webpack_require__(7277);
        var WarnIfLegacyBackendDetected_default = /* @__PURE__ */ __webpack_require__.n(WarnIfLegacyBackendDetected);
        ;
        function WarnIfLegacyBackendDetected_WarnIfLegacyBackendDetected(_) {
          const bridge2 = (0, external_react_namespaceObject.useContext)(BridgeContext);
          const {
            dispatch
          } = (0, external_react_namespaceObject.useContext)(ModalDialogContext);
          (0, external_react_namespaceObject.useEffect)(() => {
            let unlisten = bridge2.wall.listen((message) => {
              switch (message.type) {
                case "call":
                case "event":
                case "many-events":
                  dispatch({
                    canBeDismissed: false,
                    id: "WarnIfLegacyBackendDetected",
                    type: "SHOW",
                    title: "DevTools v4 is incompatible with this version of React",
                    content: /* @__PURE__ */ external_react_namespaceObject.createElement(InvalidBackendDetected, null)
                  });
                  if (typeof unlisten === "function") {
                    unlisten();
                    unlisten = null;
                  }
                  break;
                default:
                  break;
              }
              switch (message.event) {
                case "isBackendStorageAPISupported":
                case "isNativeStyleEditorSupported":
                case "operations":
                case "overrideComponentFilters":
                  if (typeof unlisten === "function") {
                    unlisten();
                    unlisten = null;
                  }
                  break;
                default:
                  break;
              }
            });
            return () => {
              if (typeof unlisten === "function") {
                unlisten();
                unlisten = null;
              }
            };
          }, [bridge2, dispatch]);
          return null;
        }
        function InvalidBackendDetected(_) {
          return /* @__PURE__ */ external_react_namespaceObject.createElement(external_react_namespaceObject.Fragment, null, /* @__PURE__ */ external_react_namespaceObject.createElement("p", null, "Either upgrade React or install React DevTools v3:"), /* @__PURE__ */ external_react_namespaceObject.createElement("code", {
            className: WarnIfLegacyBackendDetected_default().Command
          }, "npm install -d react-devtools@^3"));
        }
        var DevTools = __webpack_require__(7922);
        var DevTools_default = /* @__PURE__ */ __webpack_require__.n(DevTools);
        var root = __webpack_require__(2404);
        ;
        const componentsTab = {
          id: "components",
          icon: "components",
          label: "Components",
          title: "React Components"
        };
        const profilerTab = {
          id: "profiler",
          icon: "profiler",
          label: "Profiler",
          title: "React Profiler"
        };
        const DevTools_tabs = [componentsTab, profilerTab];
        function DevTools_DevTools({
          bridge: bridge2,
          browserTheme = "light",
          canViewElementSourceFunction,
          componentsPortalContainer,
          defaultTab = "components",
          enabledInspectedElementContextMenu = false,
          fetchFileWithCaching,
          hookNamesModuleLoaderFunction,
          overrideTab,
          profilerPortalContainer,
          showTabBar = false,
          store,
          warnIfLegacyBackendDetected = false,
          warnIfUnsupportedVersionDetected = false,
          viewAttributeSourceFunction,
          viewElementSourceFunction,
          readOnly,
          hideSettings,
          hideToggleErrorAction,
          hideToggleSuspenseAction,
          hideLogAction,
          hideViewSourceAction
        }) {
          const [currentTab, setTab] = useLocalStorage(LOCAL_STORAGE_DEFAULT_TAB_KEY, defaultTab);
          let tab = currentTab;
          if (overrideTab != null) {
            tab = overrideTab;
          }
          const selectTab = (0, external_react_namespaceObject.useCallback)((tabId) => {
            if (showTabBar === true) {
              if (tabId === "components") {
                logEvent({
                  event_name: "selected-components-tab"
                });
              } else {
                logEvent({
                  event_name: "selected-profiler-tab"
                });
              }
            }
            setTab(tabId);
          }, [setTab, showTabBar]);
          const options = (0, external_react_namespaceObject.useMemo)(() => ({
            readOnly: readOnly || false,
            hideSettings: hideSettings || false,
            hideToggleErrorAction: hideToggleErrorAction || false,
            hideToggleSuspenseAction: hideToggleSuspenseAction || false,
            hideLogAction: hideLogAction || false,
            hideViewSourceAction: hideViewSourceAction || false
          }), [readOnly, hideSettings, hideToggleErrorAction, hideToggleSuspenseAction, hideLogAction, hideViewSourceAction]);
          const viewElementSource = (0, external_react_namespaceObject.useMemo)(() => ({
            canViewElementSourceFunction: canViewElementSourceFunction || null,
            viewElementSourceFunction: viewElementSourceFunction || null
          }), [canViewElementSourceFunction, viewElementSourceFunction]);
          const contextMenu = (0, external_react_namespaceObject.useMemo)(() => ({
            isEnabledForInspectedElement: enabledInspectedElementContextMenu,
            viewAttributeSourceFunction: viewAttributeSourceFunction || null
          }), [enabledInspectedElementContextMenu, viewAttributeSourceFunction]);
          const devToolsRef = (0, external_react_namespaceObject.useRef)(null);
          (0, external_react_namespaceObject.useEffect)(() => {
            if (!showTabBar) {
              return;
            }
            const div = devToolsRef.current;
            if (div === null) {
              return;
            }
            const ownerWindow = div.ownerDocument.defaultView;
            const handleKeyDown = (event) => {
              if (event.ctrlKey || event.metaKey) {
                switch (event.key) {
                  case "1":
                    selectTab(DevTools_tabs[0].id);
                    event.preventDefault();
                    event.stopPropagation();
                    break;
                  case "2":
                    selectTab(DevTools_tabs[1].id);
                    event.preventDefault();
                    event.stopPropagation();
                    break;
                }
              }
            };
            ownerWindow.addEventListener("keydown", handleKeyDown);
            return () => {
              ownerWindow.removeEventListener("keydown", handleKeyDown);
            };
          }, [showTabBar]);
          (0, external_react_namespaceObject.useLayoutEffect)(() => {
            return () => {
              try {
                bridge2.shutdown();
              } catch (error) {
              }
            };
          }, [bridge2]);
          (0, external_react_namespaceObject.useEffect)(() => {
            logEvent({
              event_name: "loaded-dev-tools"
            });
          }, []);
          return /* @__PURE__ */ external_react_namespaceObject.createElement(BridgeContext.Provider, {
            value: bridge2
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(StoreContext.Provider, {
            value: store
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(OptionsContext.Provider, {
            value: options
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ContextMenuContext.Provider, {
            value: contextMenu
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ModalDialogContextController, null, /* @__PURE__ */ external_react_namespaceObject.createElement(SettingsContextController, {
            browserTheme,
            componentsPortalContainer,
            profilerPortalContainer
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(Components_ViewElementSourceContext.Provider, {
            value: viewElementSource
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(Components_HookNamesModuleLoaderContext.Provider, {
            value: hookNamesModuleLoaderFunction || null
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(Components_FetchFileWithCachingContext.Provider, {
            value: fetchFileWithCaching || null
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(TreeContextController, null, /* @__PURE__ */ external_react_namespaceObject.createElement(ProfilerContextController, null, /* @__PURE__ */ external_react_namespaceObject.createElement(TimelineContextController, null, /* @__PURE__ */ external_react_namespaceObject.createElement(ThemeProvider, null, /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: DevTools_default().DevTools,
            ref: devToolsRef,
            "data-react-devtools-portal-root": true
          }, showTabBar && /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: DevTools_default().TabBar
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(ReactLogo_ReactLogo, null), /* @__PURE__ */ external_react_namespaceObject.createElement("span", {
            className: DevTools_default().DevToolsVersion
          }, "5.3.1-ccb20cb88b"), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: DevTools_default().Spacer
          }), /* @__PURE__ */ external_react_namespaceObject.createElement(TabBar_TabBar, {
            currentTab: tab,
            id: "DevTools",
            selectTab,
            tabs: DevTools_tabs,
            type: "navigation"
          })), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: DevTools_default().TabContent,
            hidden: tab !== "components"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(views_Components_Components, {
            portalContainer: componentsPortalContainer
          })), /* @__PURE__ */ external_react_namespaceObject.createElement("div", {
            className: DevTools_default().TabContent,
            hidden: tab !== "profiler"
          }, /* @__PURE__ */ external_react_namespaceObject.createElement(views_Profiler_Profiler, {
            portalContainer: profilerPortalContainer
          }))))))))))), /* @__PURE__ */ external_react_namespaceObject.createElement(UnsupportedBridgeProtocolDialog_UnsupportedBridgeProtocolDialog, null), warnIfLegacyBackendDetected && /* @__PURE__ */ external_react_namespaceObject.createElement(WarnIfLegacyBackendDetected_WarnIfLegacyBackendDetected, null), warnIfUnsupportedVersionDetected && /* @__PURE__ */ external_react_namespaceObject.createElement(UnsupportedVersionDialog_UnsupportedVersionDialog, null))))));
        }
        ;
        function frontend_extends() {
          frontend_extends = Object.assign || function(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return frontend_extends.apply(this, arguments);
        }
        function createStore2(bridge2, config) {
          return new Store(bridge2, {
            checkBridgeProtocolCompatibility: true,
            supportsTraceUpdates: true,
            supportsTimeline: true,
            ...config
          });
        }
        function createBridge2(contentWindow, wall) {
          if (wall == null) {
            wall = {
              listen(fn) {
                const onMessage = ({
                  data
                }) => {
                  fn(data);
                };
                window.addEventListener("message", onMessage);
                return () => {
                  window.removeEventListener("message", onMessage);
                };
              },
              send(event, payload, transferable) {
                contentWindow.postMessage({
                  event,
                  payload
                }, "*", transferable);
              }
            };
          }
          return new bridge(wall);
        }
        function initialize(contentWindow, {
          bridge: bridge2,
          store
        } = {}) {
          if (bridge2 == null) {
            bridge2 = createBridge2(contentWindow);
          }
          const frontendBridge = bridge2;
          if (store == null) {
            store = createStore2(frontendBridge);
          }
          const onGetSavedPreferences = () => {
            frontendBridge.removeListener("getSavedPreferences", onGetSavedPreferences);
            const data = {
              appendComponentStack: getAppendComponentStack(),
              breakOnConsoleErrors: getBreakOnConsoleErrors(),
              componentFilters: getSavedComponentFilters(),
              showInlineWarningsAndErrors: getShowInlineWarningsAndErrors(),
              hideConsoleLogsInStrictMode: getHideConsoleLogsInStrictMode()
            };
            frontendBridge.send("savedPreferences", data);
          };
          frontendBridge.addListener("getSavedPreferences", onGetSavedPreferences);
          const ForwardRef = /* @__PURE__ */ (0, external_react_namespaceObject.forwardRef)((props2, ref) => /* @__PURE__ */ external_react_namespaceObject.createElement(DevTools_DevTools, frontend_extends({
            ref,
            bridge: frontendBridge,
            store
          }, props2)));
          ForwardRef.displayName = "DevTools";
          return ForwardRef;
        }
      })();
      module.exports = __webpack_exports__;
    })();
  }
});

// node_modules/react-devtools-inline/frontend.js
var require_frontend2 = __commonJS({
  "node_modules/react-devtools-inline/frontend.js"(exports, module) {
    module.exports = require_frontend();
  }
});

// src/frontend/frontend.ts
var import_react = __toESM(require_react());
var import_client = __toESM(require_client());
var import_frontend = __toESM(require_frontend2());

// src/shared/index.ts
var RN_WSS_PORT = 8097;
var DEFAULT_PROXY_WSS_PORT = 8098;
var DEFAULT_HOST = "localhost";
var ProxyEventType = /* @__PURE__ */ ((ProxyEventType2) => {
  ProxyEventType2["OPEN"] = "open";
  ProxyEventType2["CLOSE"] = "close";
  return ProxyEventType2;
})(ProxyEventType || {});

// src/frontend/frontend.ts
function isProxyEvent(message) {
  return Boolean("__isProxy" in message && message.__isProxy);
}
var noop2 = () => void 0;
var setupDevTools = (config) => {
  const {
    element,
    host = "localhost",
    port = DEFAULT_PROXY_WSS_PORT,
    devtoolsProps = {
      showTabBar: true,
      hideViewSourceAction: true
    },
    devtoolsStoreConfig,
    delegate
  } = config;
  let root = null;
  let bridge = null;
  let store = null;
  let devToolsEventListener = null;
  const socket = new WebSocket(`ws://${host}:${port}`);
  function setup() {
    if (root) {
      cleanup();
    }
    bridge = (0, import_frontend.createBridge)(window, {
      listen(listener) {
        devToolsEventListener = listener;
        return noop2;
      },
      send(event, payload) {
        if (socket.readyState !== WebSocket.OPEN)
          return;
        const data = JSON.stringify({
          event,
          ...payload ? { payload } : null
        });
        const isHandled = delegate?.onSend?.({ data });
        !isHandled && socket.send(data);
      }
    });
    store = (0, import_frontend.createStore)(bridge, {
      checkBridgeProtocolCompatibility: true,
      supportsTraceUpdates: true,
      supportsClickToInspect: true,
      ...devtoolsStoreConfig,
    });
    const DevTools = (0, import_frontend.initialize)(window, { bridge, store });
    root = (0, import_client.createRoot)(element);
    root.render((0, import_react.createElement)(DevTools, devtoolsProps));
  }
  function cleanup() {
    root?.unmount();
    root = null;
    bridge?.shutdown();
    bridge = null;
    store = null;
    devToolsEventListener = null;
  }
  function reload() {
    cleanup();
    setup();
  }
  socket.addEventListener("open", () => {
    delegate?.onConnect?.({ target: "proxy-server" });
    setup();
  });
  socket.addEventListener("message", ({ data: rawData }) => {
    const message = JSON.parse(rawData);
    if (isProxyEvent(message)) {
      switch (message.event) {
        case "open" /* OPEN */:
          delegate?.onConnect?.({ target: "client" });
          break;
        case "close" /* CLOSE */:
          delegate?.onClose?.({ target: "client" });
          reload();
          break;
      }
    } else {
      const isHandled = delegate?.onMessage?.({ data: rawData });
      !isHandled && devToolsEventListener?.(JSON.parse(rawData));
    }
  });
  socket.addEventListener("close", () => {
    delegate?.onClose?.({ target: "proxy-server" });
    cleanup();
  });
};
export {
  DEFAULT_HOST,
  DEFAULT_PROXY_WSS_PORT,
  ProxyEventType,
  RN_WSS_PORT,
  setupDevTools
};
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom-client.development.js:
  (**
   * @license React
   * react-dom-client.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (**
   * @license React
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-devtools-inline/dist/frontend.js:
  (*! promise-polyfill 2.0.1 *)
*/
