import { type ParamListBase } from '@granite-js/native/@react-navigation/native';
import { NativeStackNavigationProp } from '@granite-js/native/@react-navigation/native-stack';
import { defaultParserParams } from './utils/defaultParserParams';
export interface RouteOptions<T extends Readonly<object | undefined>> {
    parserParams?: (params: Record<string, unknown>) => Record<string, unknown>;
    validateParams?: (params: Readonly<object | undefined>) => T;
    component: React.FC<any>;
}
export type NavigationProps = NativeStackNavigationProp<keyof RegisterScreen extends never ? ParamListBase : RegisterScreen>;
export interface RegisterScreen {
}
export declare function useNavigation(): NavigationProps;
export type RouteHooksOptions<TScreen extends keyof RegisterScreen> = {
    from: TScreen;
    strict?: true;
} | {
    strict: false;
    from?: never;
};
export declare const routeMap: Map<"/test", {
    options: Omit<RouteOptions<any>, "component">;
    component: React.FC<any>;
}>;
export declare function useMatchOptions<TScreen extends keyof RegisterScreen>(options: RouteHooksOptions<TScreen>): {
    parserParams: ((params: Record<string, unknown>) => Record<string, unknown>) | typeof defaultParserParams;
    validateParams?: ((params: Readonly<object | undefined>) => any) | undefined;
} | null;
export declare function useParams<TScreen extends keyof RegisterScreen>(options: {
    from: TScreen;
    strict?: true;
}): RegisterScreen[TScreen];
export declare function useParams(options: {
    strict: false;
}): Readonly<object | undefined>;
export declare const createRoute: <T extends Readonly<object | undefined>>(path: keyof RegisterScreen, options: RouteOptions<T>) => {
    _path: "/test";
    useNavigation: typeof useNavigation;
    useParams: () => T;
};
