import { createRequire as __createRequire } from 'module'; const require = __createRequire(import.meta.url);
import {
  require_typescript
} from "./chunk-4QYXKJID.js";
import {
  __commonJS,
  __dirname,
  __export,
  __filename,
  __require,
  __toESM,
  init_esm_shims
} from "./chunk-GXCMR4MK.js";

// ../../.yarn/cache/sisteransi-npm-1.0.5-a80f5ef7c8-230ac975cc.zip/node_modules/sisteransi/src/index.js
var require_src = __commonJS({
  "../../.yarn/cache/sisteransi-npm-1.0.5-a80f5ef7c8-230ac975cc.zip/node_modules/sisteransi/src/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var ESC = "\x1B";
    var CSI = `${ESC}[`;
    var beep = "\x07";
    var cursor = {
      to(x, y2) {
        if (!y2) return `${CSI}${x + 1}G`;
        return `${CSI}${y2 + 1};${x + 1}H`;
      },
      move(x, y2) {
        let ret = "";
        if (x < 0) ret += `${CSI}${-x}D`;
        else if (x > 0) ret += `${CSI}${x}C`;
        if (y2 < 0) ret += `${CSI}${-y2}A`;
        else if (y2 > 0) ret += `${CSI}${y2}B`;
        return ret;
      },
      up: (count2 = 1) => `${CSI}${count2}A`,
      down: (count2 = 1) => `${CSI}${count2}B`,
      forward: (count2 = 1) => `${CSI}${count2}C`,
      backward: (count2 = 1) => `${CSI}${count2}D`,
      nextLine: (count2 = 1) => `${CSI}E`.repeat(count2),
      prevLine: (count2 = 1) => `${CSI}F`.repeat(count2),
      left: `${CSI}G`,
      hide: `${CSI}?25l`,
      show: `${CSI}?25h`,
      save: `${ESC}7`,
      restore: `${ESC}8`
    };
    var scroll = {
      up: (count2 = 1) => `${CSI}S`.repeat(count2),
      down: (count2 = 1) => `${CSI}T`.repeat(count2)
    };
    var erase = {
      screen: `${CSI}2J`,
      up: (count2 = 1) => `${CSI}1J`.repeat(count2),
      down: (count2 = 1) => `${CSI}J`.repeat(count2),
      line: `${CSI}2K`,
      lineEnd: `${CSI}K`,
      lineStart: `${CSI}1K`,
      lines(count2) {
        let clear = "";
        for (let i2 = 0; i2 < count2; i2++)
          clear += this.line + (i2 < count2 - 1 ? cursor.up() : "");
        if (count2)
          clear += cursor.left;
        return clear;
      }
    };
    module.exports = { cursor, scroll, erase, beep };
  }
});

// ../../.yarn/cache/picocolors-npm-1.0.1-6ba7faeb7c-c63cdad2bf.zip/node_modules/picocolors/picocolors.js
var require_picocolors = __commonJS({
  "../../.yarn/cache/picocolors-npm-1.0.1-6ba7faeb7c-c63cdad2bf.zip/node_modules/picocolors/picocolors.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var argv = process.argv || [];
    var env = process.env;
    var isColorSupported = !("NO_COLOR" in env || argv.includes("--no-color")) && ("FORCE_COLOR" in env || argv.includes("--color") || process.platform === "win32" || __require != null && __require("tty").isatty(1) && env.TERM !== "dumb" || "CI" in env);
    var formatter = (open, close, replace = open) => (input) => {
      let string = "" + input;
      let index = string.indexOf(close, open.length);
      return ~index ? open + replaceClose(string, close, replace, index) + close : open + string + close;
    };
    var replaceClose = (string, close, replace, index) => {
      let result = "";
      let cursor = 0;
      do {
        result += string.substring(cursor, index) + replace;
        cursor = index + close.length;
        index = string.indexOf(close, cursor);
      } while (~index);
      return result + string.substring(cursor);
    };
    var createColors = (enabled = isColorSupported) => {
      let init = enabled ? formatter : () => String;
      return {
        isColorSupported: enabled,
        reset: init("\x1B[0m", "\x1B[0m"),
        bold: init("\x1B[1m", "\x1B[22m", "\x1B[22m\x1B[1m"),
        dim: init("\x1B[2m", "\x1B[22m", "\x1B[22m\x1B[2m"),
        italic: init("\x1B[3m", "\x1B[23m"),
        underline: init("\x1B[4m", "\x1B[24m"),
        inverse: init("\x1B[7m", "\x1B[27m"),
        hidden: init("\x1B[8m", "\x1B[28m"),
        strikethrough: init("\x1B[9m", "\x1B[29m"),
        black: init("\x1B[30m", "\x1B[39m"),
        red: init("\x1B[31m", "\x1B[39m"),
        green: init("\x1B[32m", "\x1B[39m"),
        yellow: init("\x1B[33m", "\x1B[39m"),
        blue: init("\x1B[34m", "\x1B[39m"),
        magenta: init("\x1B[35m", "\x1B[39m"),
        cyan: init("\x1B[36m", "\x1B[39m"),
        white: init("\x1B[37m", "\x1B[39m"),
        gray: init("\x1B[90m", "\x1B[39m"),
        bgBlack: init("\x1B[40m", "\x1B[49m"),
        bgRed: init("\x1B[41m", "\x1B[49m"),
        bgGreen: init("\x1B[42m", "\x1B[49m"),
        bgYellow: init("\x1B[43m", "\x1B[49m"),
        bgBlue: init("\x1B[44m", "\x1B[49m"),
        bgMagenta: init("\x1B[45m", "\x1B[49m"),
        bgCyan: init("\x1B[46m", "\x1B[49m"),
        bgWhite: init("\x1B[47m", "\x1B[49m")
      };
    };
    module.exports = createColors();
    module.exports.createColors = createColors;
  }
});

// ../../.yarn/cache/resolve-from-npm-4.0.0-cf5f89b852-8408eec31a.zip/node_modules/resolve-from/index.js
var require_resolve_from = __commonJS({
  "../../.yarn/cache/resolve-from-npm-4.0.0-cf5f89b852-8408eec31a.zip/node_modules/resolve-from/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var path9 = __require("path");
    var Module = __require("module");
    var fs4 = __require("fs");
    var resolveFrom = (fromDir, moduleId, silent) => {
      if (typeof fromDir !== "string") {
        throw new TypeError(`Expected \`fromDir\` to be of type \`string\`, got \`${typeof fromDir}\``);
      }
      if (typeof moduleId !== "string") {
        throw new TypeError(`Expected \`moduleId\` to be of type \`string\`, got \`${typeof moduleId}\``);
      }
      try {
        fromDir = fs4.realpathSync(fromDir);
      } catch (err) {
        if (err.code === "ENOENT") {
          fromDir = path9.resolve(fromDir);
        } else if (silent) {
          return null;
        } else {
          throw err;
        }
      }
      const fromFile = path9.join(fromDir, "noop.js");
      const resolveFileName = () => Module._resolveFilename(moduleId, {
        id: fromFile,
        filename: fromFile,
        paths: Module._nodeModulePaths(fromDir)
      });
      if (silent) {
        try {
          return resolveFileName();
        } catch (err) {
          return null;
        }
      }
      return resolveFileName();
    };
    module.exports = (fromDir, moduleId) => resolveFrom(fromDir, moduleId);
    module.exports.silent = (fromDir, moduleId) => resolveFrom(fromDir, moduleId, true);
  }
});

// ../../.yarn/cache/callsites-npm-3.1.0-b5b543a31b-fff9227740.zip/node_modules/callsites/index.js
var require_callsites = __commonJS({
  "../../.yarn/cache/callsites-npm-3.1.0-b5b543a31b-fff9227740.zip/node_modules/callsites/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var callsites = () => {
      const _prepareStackTrace = Error.prepareStackTrace;
      Error.prepareStackTrace = (_2, stack2) => stack2;
      const stack = new Error().stack.slice(1);
      Error.prepareStackTrace = _prepareStackTrace;
      return stack;
    };
    module.exports = callsites;
    module.exports.default = callsites;
  }
});

// ../../.yarn/cache/parent-module-npm-1.0.1-4b41a1ca2b-c63d6e8000.zip/node_modules/parent-module/index.js
var require_parent_module = __commonJS({
  "../../.yarn/cache/parent-module-npm-1.0.1-4b41a1ca2b-c63d6e8000.zip/node_modules/parent-module/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var callsites = require_callsites();
    module.exports = (filepath) => {
      const stacks = callsites();
      if (!filepath) {
        return stacks[2].getFileName();
      }
      let seenVal = false;
      stacks.shift();
      for (const stack of stacks) {
        const parentFilepath = stack.getFileName();
        if (typeof parentFilepath !== "string") {
          continue;
        }
        if (parentFilepath === filepath) {
          seenVal = true;
          continue;
        }
        if (parentFilepath === "module.js") {
          continue;
        }
        if (seenVal && parentFilepath !== filepath) {
          return parentFilepath;
        }
      }
    };
  }
});

// ../../.yarn/cache/import-fresh-npm-3.3.0-9be5b940f7-7f882953aa.zip/node_modules/import-fresh/index.js
var require_import_fresh = __commonJS({
  "../../.yarn/cache/import-fresh-npm-3.3.0-9be5b940f7-7f882953aa.zip/node_modules/import-fresh/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var path9 = __require("path");
    var resolveFrom = require_resolve_from();
    var parentModule = require_parent_module();
    module.exports = (moduleId) => {
      if (typeof moduleId !== "string") {
        throw new TypeError("Expected a string");
      }
      const parentPath = parentModule(__filename);
      const cwd = parentPath ? path9.dirname(parentPath) : __dirname;
      const filePath = resolveFrom(cwd, moduleId);
      const oldModule = __require.cache[filePath];
      if (oldModule && oldModule.parent) {
        let i2 = oldModule.parent.children.length;
        while (i2--) {
          if (oldModule.parent.children[i2].id === filePath) {
            oldModule.parent.children.splice(i2, 1);
          }
        }
      }
      delete __require.cache[filePath];
      const parent = __require.cache[parentPath];
      return parent === void 0 ? __require(filePath) : parent.require(filePath);
    };
  }
});

// ../../.yarn/cache/is-arrayish-npm-0.2.1-1e4ea1a8d5-e7fb686a73.zip/node_modules/is-arrayish/index.js
var require_is_arrayish = __commonJS({
  "../../.yarn/cache/is-arrayish-npm-0.2.1-1e4ea1a8d5-e7fb686a73.zip/node_modules/is-arrayish/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    module.exports = function isArrayish(obj) {
      if (!obj) {
        return false;
      }
      return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && obj.splice instanceof Function;
    };
  }
});

// ../../.yarn/cache/error-ex-npm-1.3.2-dfe5426845-ba827f8936.zip/node_modules/error-ex/index.js
var require_error_ex = __commonJS({
  "../../.yarn/cache/error-ex-npm-1.3.2-dfe5426845-ba827f8936.zip/node_modules/error-ex/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var util = __require("util");
    var isArrayish = require_is_arrayish();
    var errorEx = function errorEx2(name, properties) {
      if (!name || name.constructor !== String) {
        properties = name || {};
        name = Error.name;
      }
      var errorExError = function ErrorEXError(message) {
        if (!this) {
          return new ErrorEXError(message);
        }
        message = message instanceof Error ? message.message : message || this.message;
        Error.call(this, message);
        Error.captureStackTrace(this, errorExError);
        this.name = name;
        Object.defineProperty(this, "message", {
          configurable: true,
          enumerable: false,
          get: function() {
            var newMessage = message.split(/\r?\n/g);
            for (var key in properties) {
              if (!properties.hasOwnProperty(key)) {
                continue;
              }
              var modifier = properties[key];
              if ("message" in modifier) {
                newMessage = modifier.message(this[key], newMessage) || newMessage;
                if (!isArrayish(newMessage)) {
                  newMessage = [newMessage];
                }
              }
            }
            return newMessage.join("\n");
          },
          set: function(v) {
            message = v;
          }
        });
        var overwrittenStack = null;
        var stackDescriptor = Object.getOwnPropertyDescriptor(this, "stack");
        var stackGetter = stackDescriptor.get;
        var stackValue = stackDescriptor.value;
        delete stackDescriptor.value;
        delete stackDescriptor.writable;
        stackDescriptor.set = function(newstack) {
          overwrittenStack = newstack;
        };
        stackDescriptor.get = function() {
          var stack = (overwrittenStack || (stackGetter ? stackGetter.call(this) : stackValue)).split(/\r?\n+/g);
          if (!overwrittenStack) {
            stack[0] = this.name + ": " + this.message;
          }
          var lineCount = 1;
          for (var key in properties) {
            if (!properties.hasOwnProperty(key)) {
              continue;
            }
            var modifier = properties[key];
            if ("line" in modifier) {
              var line = modifier.line(this[key]);
              if (line) {
                stack.splice(lineCount++, 0, "    " + line);
              }
            }
            if ("stack" in modifier) {
              modifier.stack(this[key], stack);
            }
          }
          return stack.join("\n");
        };
        Object.defineProperty(this, "stack", stackDescriptor);
      };
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(errorExError.prototype, Error.prototype);
        Object.setPrototypeOf(errorExError, Error);
      } else {
        util.inherits(errorExError, Error);
      }
      return errorExError;
    };
    errorEx.append = function(str, def) {
      return {
        message: function(v, message) {
          v = v || def;
          if (v) {
            message[0] += " " + str.replace("%s", v.toString());
          }
          return message;
        }
      };
    };
    errorEx.line = function(str, def) {
      return {
        line: function(v) {
          v = v || def;
          if (v) {
            return str.replace("%s", v.toString());
          }
          return null;
        }
      };
    };
    module.exports = errorEx;
  }
});

// ../../.yarn/cache/json-parse-even-better-errors-npm-2.3.1-89428c55ff-140932564c.zip/node_modules/json-parse-even-better-errors/index.js
var require_json_parse_even_better_errors = __commonJS({
  "../../.yarn/cache/json-parse-even-better-errors-npm-2.3.1-89428c55ff-140932564c.zip/node_modules/json-parse-even-better-errors/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var hexify = (char) => {
      const h2 = char.charCodeAt(0).toString(16).toUpperCase();
      return "0x" + (h2.length % 2 ? "0" : "") + h2;
    };
    var parseError = (e2, txt, context) => {
      if (!txt) {
        return {
          message: e2.message + " while parsing empty string",
          position: 0
        };
      }
      const badToken = e2.message.match(/^Unexpected token (.) .*position\s+(\d+)/i);
      const errIdx = badToken ? +badToken[2] : e2.message.match(/^Unexpected end of JSON.*/i) ? txt.length - 1 : null;
      const msg = badToken ? e2.message.replace(/^Unexpected token ./, `Unexpected token ${JSON.stringify(badToken[1])} (${hexify(badToken[1])})`) : e2.message;
      if (errIdx !== null && errIdx !== void 0) {
        const start = errIdx <= context ? 0 : errIdx - context;
        const end = errIdx + context >= txt.length ? txt.length : errIdx + context;
        const slice = (start === 0 ? "" : "...") + txt.slice(start, end) + (end === txt.length ? "" : "...");
        const near = txt === slice ? "" : "near ";
        return {
          message: msg + ` while parsing ${near}${JSON.stringify(slice)}`,
          position: errIdx
        };
      } else {
        return {
          message: msg + ` while parsing '${txt.slice(0, context * 2)}'`,
          position: 0
        };
      }
    };
    var JSONParseError = class extends SyntaxError {
      constructor(er, txt, context, caller) {
        context = context || 20;
        const metadata = parseError(er, txt, context);
        super(metadata.message);
        Object.assign(this, metadata);
        this.code = "EJSONPARSE";
        this.systemError = er;
        Error.captureStackTrace(this, caller || this.constructor);
      }
      get name() {
        return this.constructor.name;
      }
      set name(n2) {
      }
      get [Symbol.toStringTag]() {
        return this.constructor.name;
      }
    };
    var kIndent = Symbol.for("indent");
    var kNewline = Symbol.for("newline");
    var formatRE = /^\s*[{\[]((?:\r?\n)+)([\s\t]*)/;
    var emptyRE = /^(?:\{\}|\[\])((?:\r?\n)+)?$/;
    var parseJson = (txt, reviver, context) => {
      const parseText = stripBOM(txt);
      context = context || 20;
      try {
        const [, newline = "\n", indent = "  "] = parseText.match(emptyRE) || parseText.match(formatRE) || [, "", ""];
        const result = JSON.parse(parseText, reviver);
        if (result && typeof result === "object") {
          result[kNewline] = newline;
          result[kIndent] = indent;
        }
        return result;
      } catch (e2) {
        if (typeof txt !== "string" && !Buffer.isBuffer(txt)) {
          const isEmptyArray = Array.isArray(txt) && txt.length === 0;
          throw Object.assign(new TypeError(
            `Cannot parse ${isEmptyArray ? "an empty array" : String(txt)}`
          ), {
            code: "EJSONPARSE",
            systemError: e2
          });
        }
        throw new JSONParseError(e2, parseText, context, parseJson);
      }
    };
    var stripBOM = (txt) => String(txt).replace(/^\uFEFF/, "");
    module.exports = parseJson;
    parseJson.JSONParseError = JSONParseError;
    parseJson.noExceptions = (txt, reviver) => {
      try {
        return JSON.parse(stripBOM(txt), reviver);
      } catch (e2) {
      }
    };
  }
});

// ../../.yarn/cache/lines-and-columns-npm-1.2.4-480877adec-3da6ee62d4.zip/node_modules/lines-and-columns/build/index.js
var require_build = __commonJS({
  "../../.yarn/cache/lines-and-columns-npm-1.2.4-480877adec-3da6ee62d4.zip/node_modules/lines-and-columns/build/index.js"(exports) {
    "use strict";
    init_esm_shims();
    exports.__esModule = true;
    exports.LinesAndColumns = void 0;
    var LF2 = "\n";
    var CR2 = "\r";
    var LinesAndColumns = (
      /** @class */
      function() {
        function LinesAndColumns2(string) {
          this.string = string;
          var offsets = [0];
          for (var offset = 0; offset < string.length; ) {
            switch (string[offset]) {
              case LF2:
                offset += LF2.length;
                offsets.push(offset);
                break;
              case CR2:
                offset += CR2.length;
                if (string[offset] === LF2) {
                  offset += LF2.length;
                }
                offsets.push(offset);
                break;
              default:
                offset++;
                break;
            }
          }
          this.offsets = offsets;
        }
        LinesAndColumns2.prototype.locationForIndex = function(index) {
          if (index < 0 || index > this.string.length) {
            return null;
          }
          var line = 0;
          var offsets = this.offsets;
          while (offsets[line + 1] <= index) {
            line++;
          }
          var column = index - offsets[line];
          return { line, column };
        };
        LinesAndColumns2.prototype.indexForLocation = function(location) {
          var line = location.line, column = location.column;
          if (line < 0 || line >= this.offsets.length) {
            return null;
          }
          if (column < 0 || column > this.lengthOfLine(line)) {
            return null;
          }
          return this.offsets[line] + column;
        };
        LinesAndColumns2.prototype.lengthOfLine = function(line) {
          var offset = this.offsets[line];
          var nextOffset = line === this.offsets.length - 1 ? this.string.length : this.offsets[line + 1];
          return nextOffset - offset;
        };
        return LinesAndColumns2;
      }()
    );
    exports.LinesAndColumns = LinesAndColumns;
    exports["default"] = LinesAndColumns;
  }
});

// ../../.yarn/cache/js-tokens-npm-4.0.0-3738bbded7-e248708d37.zip/node_modules/js-tokens/index.js
var require_js_tokens = __commonJS({
  "../../.yarn/cache/js-tokens-npm-4.0.0-3738bbded7-e248708d37.zip/node_modules/js-tokens/index.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;
    exports.matchToToken = function(match) {
      var token = { type: "invalid", value: match[0], closed: void 0 };
      if (match[1]) token.type = "string", token.closed = !!(match[3] || match[4]);
      else if (match[5]) token.type = "comment";
      else if (match[6]) token.type = "comment", token.closed = !!match[7];
      else if (match[8]) token.type = "regex";
      else if (match[9]) token.type = "number";
      else if (match[10]) token.type = "name";
      else if (match[11]) token.type = "punctuator";
      else if (match[12]) token.type = "whitespace";
      return token;
    };
  }
});

// ../../.yarn/cache/@babel-helper-validator-identifier-npm-7.24.7-6ccac5ff48-87ad608694.zip/node_modules/@babel/helper-validator-identifier/lib/identifier.js
var require_identifier = __commonJS({
  "../../.yarn/cache/@babel-helper-validator-identifier-npm-7.24.7-6ccac5ff48-87ad608694.zip/node_modules/@babel/helper-validator-identifier/lib/identifier.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isIdentifierChar = isIdentifierChar;
    exports.isIdentifierName = isIdentifierName;
    exports.isIdentifierStart = isIdentifierStart;
    var nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
    var nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65";
    var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
    var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
    nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
    var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];
    var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
    function isInAstralSet(code, set) {
      let pos = 65536;
      for (let i2 = 0, length = set.length; i2 < length; i2 += 2) {
        pos += set[i2];
        if (pos > code) return false;
        pos += set[i2 + 1];
        if (pos >= code) return true;
      }
      return false;
    }
    function isIdentifierStart(code) {
      if (code < 65) return code === 36;
      if (code <= 90) return true;
      if (code < 97) return code === 95;
      if (code <= 122) return true;
      if (code <= 65535) {
        return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
      }
      return isInAstralSet(code, astralIdentifierStartCodes);
    }
    function isIdentifierChar(code) {
      if (code < 48) return code === 36;
      if (code < 58) return true;
      if (code < 65) return false;
      if (code <= 90) return true;
      if (code < 97) return code === 95;
      if (code <= 122) return true;
      if (code <= 65535) {
        return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
      }
      return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
    }
    function isIdentifierName(name) {
      let isFirst = true;
      for (let i2 = 0; i2 < name.length; i2++) {
        let cp = name.charCodeAt(i2);
        if ((cp & 64512) === 55296 && i2 + 1 < name.length) {
          const trail = name.charCodeAt(++i2);
          if ((trail & 64512) === 56320) {
            cp = 65536 + ((cp & 1023) << 10) + (trail & 1023);
          }
        }
        if (isFirst) {
          isFirst = false;
          if (!isIdentifierStart(cp)) {
            return false;
          }
        } else if (!isIdentifierChar(cp)) {
          return false;
        }
      }
      return !isFirst;
    }
  }
});

// ../../.yarn/cache/@babel-helper-validator-identifier-npm-7.24.7-6ccac5ff48-87ad608694.zip/node_modules/@babel/helper-validator-identifier/lib/keyword.js
var require_keyword = __commonJS({
  "../../.yarn/cache/@babel-helper-validator-identifier-npm-7.24.7-6ccac5ff48-87ad608694.zip/node_modules/@babel/helper-validator-identifier/lib/keyword.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isKeyword = isKeyword;
    exports.isReservedWord = isReservedWord;
    exports.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord;
    exports.isStrictBindReservedWord = isStrictBindReservedWord;
    exports.isStrictReservedWord = isStrictReservedWord;
    var reservedWords = {
      keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
      strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
      strictBind: ["eval", "arguments"]
    };
    var keywords = new Set(reservedWords.keyword);
    var reservedWordsStrictSet = new Set(reservedWords.strict);
    var reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
    function isReservedWord(word, inModule) {
      return inModule && word === "await" || word === "enum";
    }
    function isStrictReservedWord(word, inModule) {
      return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
    }
    function isStrictBindOnlyReservedWord(word) {
      return reservedWordsStrictBindSet.has(word);
    }
    function isStrictBindReservedWord(word, inModule) {
      return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
    }
    function isKeyword(word) {
      return keywords.has(word);
    }
  }
});

// ../../.yarn/cache/@babel-helper-validator-identifier-npm-7.24.7-6ccac5ff48-87ad608694.zip/node_modules/@babel/helper-validator-identifier/lib/index.js
var require_lib = __commonJS({
  "../../.yarn/cache/@babel-helper-validator-identifier-npm-7.24.7-6ccac5ff48-87ad608694.zip/node_modules/@babel/helper-validator-identifier/lib/index.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "isIdentifierChar", {
      enumerable: true,
      get: function() {
        return _identifier.isIdentifierChar;
      }
    });
    Object.defineProperty(exports, "isIdentifierName", {
      enumerable: true,
      get: function() {
        return _identifier.isIdentifierName;
      }
    });
    Object.defineProperty(exports, "isIdentifierStart", {
      enumerable: true,
      get: function() {
        return _identifier.isIdentifierStart;
      }
    });
    Object.defineProperty(exports, "isKeyword", {
      enumerable: true,
      get: function() {
        return _keyword.isKeyword;
      }
    });
    Object.defineProperty(exports, "isReservedWord", {
      enumerable: true,
      get: function() {
        return _keyword.isReservedWord;
      }
    });
    Object.defineProperty(exports, "isStrictBindOnlyReservedWord", {
      enumerable: true,
      get: function() {
        return _keyword.isStrictBindOnlyReservedWord;
      }
    });
    Object.defineProperty(exports, "isStrictBindReservedWord", {
      enumerable: true,
      get: function() {
        return _keyword.isStrictBindReservedWord;
      }
    });
    Object.defineProperty(exports, "isStrictReservedWord", {
      enumerable: true,
      get: function() {
        return _keyword.isStrictReservedWord;
      }
    });
    var _identifier = require_identifier();
    var _keyword = require_keyword();
  }
});

// ../../.yarn/cache/escape-string-regexp-npm-1.0.5-d82194b056-a968ad453d.zip/node_modules/escape-string-regexp/index.js
var require_escape_string_regexp = __commonJS({
  "../../.yarn/cache/escape-string-regexp-npm-1.0.5-d82194b056-a968ad453d.zip/node_modules/escape-string-regexp/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
    module.exports = function(str) {
      if (typeof str !== "string") {
        throw new TypeError("Expected a string");
      }
      return str.replace(matchOperatorsRe, "\\$&");
    };
  }
});

// ../../.yarn/cache/color-name-npm-1.1.3-fa50fa1a81-566a3d42cc.zip/node_modules/color-name/index.js
var require_color_name = __commonJS({
  "../../.yarn/cache/color-name-npm-1.1.3-fa50fa1a81-566a3d42cc.zip/node_modules/color-name/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    module.exports = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };
  }
});

// ../../.yarn/cache/color-convert-npm-1.9.3-4070ad7832-5ad3c53494.zip/node_modules/color-convert/conversions.js
var require_conversions = __commonJS({
  "../../.yarn/cache/color-convert-npm-1.9.3-4070ad7832-5ad3c53494.zip/node_modules/color-convert/conversions.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var cssKeywords = require_color_name();
    var reverseKeywords = {};
    for (key in cssKeywords) {
      if (cssKeywords.hasOwnProperty(key)) {
        reverseKeywords[cssKeywords[key]] = key;
      }
    }
    var key;
    var convert = module.exports = {
      rgb: { channels: 3, labels: "rgb" },
      hsl: { channels: 3, labels: "hsl" },
      hsv: { channels: 3, labels: "hsv" },
      hwb: { channels: 3, labels: "hwb" },
      cmyk: { channels: 4, labels: "cmyk" },
      xyz: { channels: 3, labels: "xyz" },
      lab: { channels: 3, labels: "lab" },
      lch: { channels: 3, labels: "lch" },
      hex: { channels: 1, labels: ["hex"] },
      keyword: { channels: 1, labels: ["keyword"] },
      ansi16: { channels: 1, labels: ["ansi16"] },
      ansi256: { channels: 1, labels: ["ansi256"] },
      hcg: { channels: 3, labels: ["h", "c", "g"] },
      apple: { channels: 3, labels: ["r16", "g16", "b16"] },
      gray: { channels: 1, labels: ["gray"] }
    };
    for (model in convert) {
      if (convert.hasOwnProperty(model)) {
        if (!("channels" in convert[model])) {
          throw new Error("missing channels property: " + model);
        }
        if (!("labels" in convert[model])) {
          throw new Error("missing channel labels property: " + model);
        }
        if (convert[model].labels.length !== convert[model].channels) {
          throw new Error("channel and label counts mismatch: " + model);
        }
        channels = convert[model].channels;
        labels = convert[model].labels;
        delete convert[model].channels;
        delete convert[model].labels;
        Object.defineProperty(convert[model], "channels", { value: channels });
        Object.defineProperty(convert[model], "labels", { value: labels });
      }
    }
    var channels;
    var labels;
    var model;
    convert.rgb.hsl = function(rgb) {
      var r2 = rgb[0] / 255;
      var g2 = rgb[1] / 255;
      var b2 = rgb[2] / 255;
      var min = Math.min(r2, g2, b2);
      var max = Math.max(r2, g2, b2);
      var delta = max - min;
      var h2;
      var s;
      var l2;
      if (max === min) {
        h2 = 0;
      } else if (r2 === max) {
        h2 = (g2 - b2) / delta;
      } else if (g2 === max) {
        h2 = 2 + (b2 - r2) / delta;
      } else if (b2 === max) {
        h2 = 4 + (r2 - g2) / delta;
      }
      h2 = Math.min(h2 * 60, 360);
      if (h2 < 0) {
        h2 += 360;
      }
      l2 = (min + max) / 2;
      if (max === min) {
        s = 0;
      } else if (l2 <= 0.5) {
        s = delta / (max + min);
      } else {
        s = delta / (2 - max - min);
      }
      return [h2, s * 100, l2 * 100];
    };
    convert.rgb.hsv = function(rgb) {
      var rdif;
      var gdif;
      var bdif;
      var h2;
      var s;
      var r2 = rgb[0] / 255;
      var g2 = rgb[1] / 255;
      var b2 = rgb[2] / 255;
      var v = Math.max(r2, g2, b2);
      var diff = v - Math.min(r2, g2, b2);
      var diffc = function(c4) {
        return (v - c4) / 6 / diff + 1 / 2;
      };
      if (diff === 0) {
        h2 = s = 0;
      } else {
        s = diff / v;
        rdif = diffc(r2);
        gdif = diffc(g2);
        bdif = diffc(b2);
        if (r2 === v) {
          h2 = bdif - gdif;
        } else if (g2 === v) {
          h2 = 1 / 3 + rdif - bdif;
        } else if (b2 === v) {
          h2 = 2 / 3 + gdif - rdif;
        }
        if (h2 < 0) {
          h2 += 1;
        } else if (h2 > 1) {
          h2 -= 1;
        }
      }
      return [
        h2 * 360,
        s * 100,
        v * 100
      ];
    };
    convert.rgb.hwb = function(rgb) {
      var r2 = rgb[0];
      var g2 = rgb[1];
      var b2 = rgb[2];
      var h2 = convert.rgb.hsl(rgb)[0];
      var w = 1 / 255 * Math.min(r2, Math.min(g2, b2));
      b2 = 1 - 1 / 255 * Math.max(r2, Math.max(g2, b2));
      return [h2, w * 100, b2 * 100];
    };
    convert.rgb.cmyk = function(rgb) {
      var r2 = rgb[0] / 255;
      var g2 = rgb[1] / 255;
      var b2 = rgb[2] / 255;
      var c4;
      var m2;
      var y2;
      var k3;
      k3 = Math.min(1 - r2, 1 - g2, 1 - b2);
      c4 = (1 - r2 - k3) / (1 - k3) || 0;
      m2 = (1 - g2 - k3) / (1 - k3) || 0;
      y2 = (1 - b2 - k3) / (1 - k3) || 0;
      return [c4 * 100, m2 * 100, y2 * 100, k3 * 100];
    };
    function comparativeDistance(x, y2) {
      return Math.pow(x[0] - y2[0], 2) + Math.pow(x[1] - y2[1], 2) + Math.pow(x[2] - y2[2], 2);
    }
    convert.rgb.keyword = function(rgb) {
      var reversed = reverseKeywords[rgb];
      if (reversed) {
        return reversed;
      }
      var currentClosestDistance = Infinity;
      var currentClosestKeyword;
      for (var keyword in cssKeywords) {
        if (cssKeywords.hasOwnProperty(keyword)) {
          var value2 = cssKeywords[keyword];
          var distance = comparativeDistance(rgb, value2);
          if (distance < currentClosestDistance) {
            currentClosestDistance = distance;
            currentClosestKeyword = keyword;
          }
        }
      }
      return currentClosestKeyword;
    };
    convert.keyword.rgb = function(keyword) {
      return cssKeywords[keyword];
    };
    convert.rgb.xyz = function(rgb) {
      var r2 = rgb[0] / 255;
      var g2 = rgb[1] / 255;
      var b2 = rgb[2] / 255;
      r2 = r2 > 0.04045 ? Math.pow((r2 + 0.055) / 1.055, 2.4) : r2 / 12.92;
      g2 = g2 > 0.04045 ? Math.pow((g2 + 0.055) / 1.055, 2.4) : g2 / 12.92;
      b2 = b2 > 0.04045 ? Math.pow((b2 + 0.055) / 1.055, 2.4) : b2 / 12.92;
      var x = r2 * 0.4124 + g2 * 0.3576 + b2 * 0.1805;
      var y2 = r2 * 0.2126 + g2 * 0.7152 + b2 * 0.0722;
      var z = r2 * 0.0193 + g2 * 0.1192 + b2 * 0.9505;
      return [x * 100, y2 * 100, z * 100];
    };
    convert.rgb.lab = function(rgb) {
      var xyz = convert.rgb.xyz(rgb);
      var x = xyz[0];
      var y2 = xyz[1];
      var z = xyz[2];
      var l2;
      var a2;
      var b2;
      x /= 95.047;
      y2 /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y2 = y2 > 8856e-6 ? Math.pow(y2, 1 / 3) : 7.787 * y2 + 16 / 116;
      z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l2 = 116 * y2 - 16;
      a2 = 500 * (x - y2);
      b2 = 200 * (y2 - z);
      return [l2, a2, b2];
    };
    convert.hsl.rgb = function(hsl) {
      var h2 = hsl[0] / 360;
      var s = hsl[1] / 100;
      var l2 = hsl[2] / 100;
      var t1;
      var t2;
      var t3;
      var rgb;
      var val;
      if (s === 0) {
        val = l2 * 255;
        return [val, val, val];
      }
      if (l2 < 0.5) {
        t2 = l2 * (1 + s);
      } else {
        t2 = l2 + s - l2 * s;
      }
      t1 = 2 * l2 - t2;
      rgb = [0, 0, 0];
      for (var i2 = 0; i2 < 3; i2++) {
        t3 = h2 + 1 / 3 * -(i2 - 1);
        if (t3 < 0) {
          t3++;
        }
        if (t3 > 1) {
          t3--;
        }
        if (6 * t3 < 1) {
          val = t1 + (t2 - t1) * 6 * t3;
        } else if (2 * t3 < 1) {
          val = t2;
        } else if (3 * t3 < 2) {
          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        } else {
          val = t1;
        }
        rgb[i2] = val * 255;
      }
      return rgb;
    };
    convert.hsl.hsv = function(hsl) {
      var h2 = hsl[0];
      var s = hsl[1] / 100;
      var l2 = hsl[2] / 100;
      var smin = s;
      var lmin = Math.max(l2, 0.01);
      var sv;
      var v;
      l2 *= 2;
      s *= l2 <= 1 ? l2 : 2 - l2;
      smin *= lmin <= 1 ? lmin : 2 - lmin;
      v = (l2 + s) / 2;
      sv = l2 === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l2 + s);
      return [h2, sv * 100, v * 100];
    };
    convert.hsv.rgb = function(hsv) {
      var h2 = hsv[0] / 60;
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var hi = Math.floor(h2) % 6;
      var f3 = h2 - Math.floor(h2);
      var p = 255 * v * (1 - s);
      var q2 = 255 * v * (1 - s * f3);
      var t2 = 255 * v * (1 - s * (1 - f3));
      v *= 255;
      switch (hi) {
        case 0:
          return [v, t2, p];
        case 1:
          return [q2, v, p];
        case 2:
          return [p, v, t2];
        case 3:
          return [p, q2, v];
        case 4:
          return [t2, p, v];
        case 5:
          return [v, p, q2];
      }
    };
    convert.hsv.hsl = function(hsv) {
      var h2 = hsv[0];
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var vmin = Math.max(v, 0.01);
      var lmin;
      var sl;
      var l2;
      l2 = (2 - s) * v;
      lmin = (2 - s) * vmin;
      sl = s * vmin;
      sl /= lmin <= 1 ? lmin : 2 - lmin;
      sl = sl || 0;
      l2 /= 2;
      return [h2, sl * 100, l2 * 100];
    };
    convert.hwb.rgb = function(hwb) {
      var h2 = hwb[0] / 360;
      var wh = hwb[1] / 100;
      var bl = hwb[2] / 100;
      var ratio = wh + bl;
      var i2;
      var v;
      var f3;
      var n2;
      if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
      }
      i2 = Math.floor(6 * h2);
      v = 1 - bl;
      f3 = 6 * h2 - i2;
      if ((i2 & 1) !== 0) {
        f3 = 1 - f3;
      }
      n2 = wh + f3 * (v - wh);
      var r2;
      var g2;
      var b2;
      switch (i2) {
        default:
        case 6:
        case 0:
          r2 = v;
          g2 = n2;
          b2 = wh;
          break;
        case 1:
          r2 = n2;
          g2 = v;
          b2 = wh;
          break;
        case 2:
          r2 = wh;
          g2 = v;
          b2 = n2;
          break;
        case 3:
          r2 = wh;
          g2 = n2;
          b2 = v;
          break;
        case 4:
          r2 = n2;
          g2 = wh;
          b2 = v;
          break;
        case 5:
          r2 = v;
          g2 = wh;
          b2 = n2;
          break;
      }
      return [r2 * 255, g2 * 255, b2 * 255];
    };
    convert.cmyk.rgb = function(cmyk) {
      var c4 = cmyk[0] / 100;
      var m2 = cmyk[1] / 100;
      var y2 = cmyk[2] / 100;
      var k3 = cmyk[3] / 100;
      var r2;
      var g2;
      var b2;
      r2 = 1 - Math.min(1, c4 * (1 - k3) + k3);
      g2 = 1 - Math.min(1, m2 * (1 - k3) + k3);
      b2 = 1 - Math.min(1, y2 * (1 - k3) + k3);
      return [r2 * 255, g2 * 255, b2 * 255];
    };
    convert.xyz.rgb = function(xyz) {
      var x = xyz[0] / 100;
      var y2 = xyz[1] / 100;
      var z = xyz[2] / 100;
      var r2;
      var g2;
      var b2;
      r2 = x * 3.2406 + y2 * -1.5372 + z * -0.4986;
      g2 = x * -0.9689 + y2 * 1.8758 + z * 0.0415;
      b2 = x * 0.0557 + y2 * -0.204 + z * 1.057;
      r2 = r2 > 31308e-7 ? 1.055 * Math.pow(r2, 1 / 2.4) - 0.055 : r2 * 12.92;
      g2 = g2 > 31308e-7 ? 1.055 * Math.pow(g2, 1 / 2.4) - 0.055 : g2 * 12.92;
      b2 = b2 > 31308e-7 ? 1.055 * Math.pow(b2, 1 / 2.4) - 0.055 : b2 * 12.92;
      r2 = Math.min(Math.max(0, r2), 1);
      g2 = Math.min(Math.max(0, g2), 1);
      b2 = Math.min(Math.max(0, b2), 1);
      return [r2 * 255, g2 * 255, b2 * 255];
    };
    convert.xyz.lab = function(xyz) {
      var x = xyz[0];
      var y2 = xyz[1];
      var z = xyz[2];
      var l2;
      var a2;
      var b2;
      x /= 95.047;
      y2 /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y2 = y2 > 8856e-6 ? Math.pow(y2, 1 / 3) : 7.787 * y2 + 16 / 116;
      z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l2 = 116 * y2 - 16;
      a2 = 500 * (x - y2);
      b2 = 200 * (y2 - z);
      return [l2, a2, b2];
    };
    convert.lab.xyz = function(lab) {
      var l2 = lab[0];
      var a2 = lab[1];
      var b2 = lab[2];
      var x;
      var y2;
      var z;
      y2 = (l2 + 16) / 116;
      x = a2 / 500 + y2;
      z = y2 - b2 / 200;
      var y22 = Math.pow(y2, 3);
      var x2 = Math.pow(x, 3);
      var z2 = Math.pow(z, 3);
      y2 = y22 > 8856e-6 ? y22 : (y2 - 16 / 116) / 7.787;
      x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
      z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
      x *= 95.047;
      y2 *= 100;
      z *= 108.883;
      return [x, y2, z];
    };
    convert.lab.lch = function(lab) {
      var l2 = lab[0];
      var a2 = lab[1];
      var b2 = lab[2];
      var hr;
      var h2;
      var c4;
      hr = Math.atan2(b2, a2);
      h2 = hr * 360 / 2 / Math.PI;
      if (h2 < 0) {
        h2 += 360;
      }
      c4 = Math.sqrt(a2 * a2 + b2 * b2);
      return [l2, c4, h2];
    };
    convert.lch.lab = function(lch) {
      var l2 = lch[0];
      var c4 = lch[1];
      var h2 = lch[2];
      var a2;
      var b2;
      var hr;
      hr = h2 / 360 * 2 * Math.PI;
      a2 = c4 * Math.cos(hr);
      b2 = c4 * Math.sin(hr);
      return [l2, a2, b2];
    };
    convert.rgb.ansi16 = function(args) {
      var r2 = args[0];
      var g2 = args[1];
      var b2 = args[2];
      var value2 = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
      value2 = Math.round(value2 / 50);
      if (value2 === 0) {
        return 30;
      }
      var ansi = 30 + (Math.round(b2 / 255) << 2 | Math.round(g2 / 255) << 1 | Math.round(r2 / 255));
      if (value2 === 2) {
        ansi += 60;
      }
      return ansi;
    };
    convert.hsv.ansi16 = function(args) {
      return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
    };
    convert.rgb.ansi256 = function(args) {
      var r2 = args[0];
      var g2 = args[1];
      var b2 = args[2];
      if (r2 === g2 && g2 === b2) {
        if (r2 < 8) {
          return 16;
        }
        if (r2 > 248) {
          return 231;
        }
        return Math.round((r2 - 8) / 247 * 24) + 232;
      }
      var ansi = 16 + 36 * Math.round(r2 / 255 * 5) + 6 * Math.round(g2 / 255 * 5) + Math.round(b2 / 255 * 5);
      return ansi;
    };
    convert.ansi16.rgb = function(args) {
      var color = args % 10;
      if (color === 0 || color === 7) {
        if (args > 50) {
          color += 3.5;
        }
        color = color / 10.5 * 255;
        return [color, color, color];
      }
      var mult = (~~(args > 50) + 1) * 0.5;
      var r2 = (color & 1) * mult * 255;
      var g2 = (color >> 1 & 1) * mult * 255;
      var b2 = (color >> 2 & 1) * mult * 255;
      return [r2, g2, b2];
    };
    convert.ansi256.rgb = function(args) {
      if (args >= 232) {
        var c4 = (args - 232) * 10 + 8;
        return [c4, c4, c4];
      }
      args -= 16;
      var rem;
      var r2 = Math.floor(args / 36) / 5 * 255;
      var g2 = Math.floor((rem = args % 36) / 6) / 5 * 255;
      var b2 = rem % 6 / 5 * 255;
      return [r2, g2, b2];
    };
    convert.rgb.hex = function(args) {
      var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
      var string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert.hex.rgb = function(args) {
      var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
      if (!match) {
        return [0, 0, 0];
      }
      var colorString = match[0];
      if (match[0].length === 3) {
        colorString = colorString.split("").map(function(char) {
          return char + char;
        }).join("");
      }
      var integer = parseInt(colorString, 16);
      var r2 = integer >> 16 & 255;
      var g2 = integer >> 8 & 255;
      var b2 = integer & 255;
      return [r2, g2, b2];
    };
    convert.rgb.hcg = function(rgb) {
      var r2 = rgb[0] / 255;
      var g2 = rgb[1] / 255;
      var b2 = rgb[2] / 255;
      var max = Math.max(Math.max(r2, g2), b2);
      var min = Math.min(Math.min(r2, g2), b2);
      var chroma = max - min;
      var grayscale;
      var hue;
      if (chroma < 1) {
        grayscale = min / (1 - chroma);
      } else {
        grayscale = 0;
      }
      if (chroma <= 0) {
        hue = 0;
      } else if (max === r2) {
        hue = (g2 - b2) / chroma % 6;
      } else if (max === g2) {
        hue = 2 + (b2 - r2) / chroma;
      } else {
        hue = 4 + (r2 - g2) / chroma + 4;
      }
      hue /= 6;
      hue %= 1;
      return [hue * 360, chroma * 100, grayscale * 100];
    };
    convert.hsl.hcg = function(hsl) {
      var s = hsl[1] / 100;
      var l2 = hsl[2] / 100;
      var c4 = 1;
      var f3 = 0;
      if (l2 < 0.5) {
        c4 = 2 * s * l2;
      } else {
        c4 = 2 * s * (1 - l2);
      }
      if (c4 < 1) {
        f3 = (l2 - 0.5 * c4) / (1 - c4);
      }
      return [hsl[0], c4 * 100, f3 * 100];
    };
    convert.hsv.hcg = function(hsv) {
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var c4 = s * v;
      var f3 = 0;
      if (c4 < 1) {
        f3 = (v - c4) / (1 - c4);
      }
      return [hsv[0], c4 * 100, f3 * 100];
    };
    convert.hcg.rgb = function(hcg) {
      var h2 = hcg[0] / 360;
      var c4 = hcg[1] / 100;
      var g2 = hcg[2] / 100;
      if (c4 === 0) {
        return [g2 * 255, g2 * 255, g2 * 255];
      }
      var pure = [0, 0, 0];
      var hi = h2 % 1 * 6;
      var v = hi % 1;
      var w = 1 - v;
      var mg = 0;
      switch (Math.floor(hi)) {
        case 0:
          pure[0] = 1;
          pure[1] = v;
          pure[2] = 0;
          break;
        case 1:
          pure[0] = w;
          pure[1] = 1;
          pure[2] = 0;
          break;
        case 2:
          pure[0] = 0;
          pure[1] = 1;
          pure[2] = v;
          break;
        case 3:
          pure[0] = 0;
          pure[1] = w;
          pure[2] = 1;
          break;
        case 4:
          pure[0] = v;
          pure[1] = 0;
          pure[2] = 1;
          break;
        default:
          pure[0] = 1;
          pure[1] = 0;
          pure[2] = w;
      }
      mg = (1 - c4) * g2;
      return [
        (c4 * pure[0] + mg) * 255,
        (c4 * pure[1] + mg) * 255,
        (c4 * pure[2] + mg) * 255
      ];
    };
    convert.hcg.hsv = function(hcg) {
      var c4 = hcg[1] / 100;
      var g2 = hcg[2] / 100;
      var v = c4 + g2 * (1 - c4);
      var f3 = 0;
      if (v > 0) {
        f3 = c4 / v;
      }
      return [hcg[0], f3 * 100, v * 100];
    };
    convert.hcg.hsl = function(hcg) {
      var c4 = hcg[1] / 100;
      var g2 = hcg[2] / 100;
      var l2 = g2 * (1 - c4) + 0.5 * c4;
      var s = 0;
      if (l2 > 0 && l2 < 0.5) {
        s = c4 / (2 * l2);
      } else if (l2 >= 0.5 && l2 < 1) {
        s = c4 / (2 * (1 - l2));
      }
      return [hcg[0], s * 100, l2 * 100];
    };
    convert.hcg.hwb = function(hcg) {
      var c4 = hcg[1] / 100;
      var g2 = hcg[2] / 100;
      var v = c4 + g2 * (1 - c4);
      return [hcg[0], (v - c4) * 100, (1 - v) * 100];
    };
    convert.hwb.hcg = function(hwb) {
      var w = hwb[1] / 100;
      var b2 = hwb[2] / 100;
      var v = 1 - b2;
      var c4 = v - w;
      var g2 = 0;
      if (c4 < 1) {
        g2 = (v - c4) / (1 - c4);
      }
      return [hwb[0], c4 * 100, g2 * 100];
    };
    convert.apple.rgb = function(apple) {
      return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
    };
    convert.rgb.apple = function(rgb) {
      return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
    };
    convert.gray.rgb = function(args) {
      return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };
    convert.gray.hsl = convert.gray.hsv = function(args) {
      return [0, 0, args[0]];
    };
    convert.gray.hwb = function(gray2) {
      return [0, 100, gray2[0]];
    };
    convert.gray.cmyk = function(gray2) {
      return [0, 0, 0, gray2[0]];
    };
    convert.gray.lab = function(gray2) {
      return [gray2[0], 0, 0];
    };
    convert.gray.hex = function(gray2) {
      var val = Math.round(gray2[0] / 100 * 255) & 255;
      var integer = (val << 16) + (val << 8) + val;
      var string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert.rgb.gray = function(rgb) {
      var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
      return [val / 255 * 100];
    };
  }
});

// ../../.yarn/cache/color-convert-npm-1.9.3-4070ad7832-5ad3c53494.zip/node_modules/color-convert/route.js
var require_route = __commonJS({
  "../../.yarn/cache/color-convert-npm-1.9.3-4070ad7832-5ad3c53494.zip/node_modules/color-convert/route.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var conversions = require_conversions();
    function buildGraph() {
      var graph = {};
      var models = Object.keys(conversions);
      for (var len = models.length, i2 = 0; i2 < len; i2++) {
        graph[models[i2]] = {
          // http://jsperf.com/1-vs-infinity
          // micro-opt, but this is simple.
          distance: -1,
          parent: null
        };
      }
      return graph;
    }
    function deriveBFS(fromModel) {
      var graph = buildGraph();
      var queue = [fromModel];
      graph[fromModel].distance = 0;
      while (queue.length) {
        var current = queue.pop();
        var adjacents = Object.keys(conversions[current]);
        for (var len = adjacents.length, i2 = 0; i2 < len; i2++) {
          var adjacent = adjacents[i2];
          var node = graph[adjacent];
          if (node.distance === -1) {
            node.distance = graph[current].distance + 1;
            node.parent = current;
            queue.unshift(adjacent);
          }
        }
      }
      return graph;
    }
    function link(from, to) {
      return function(args) {
        return to(from(args));
      };
    }
    function wrapConversion(toModel, graph) {
      var path9 = [graph[toModel].parent, toModel];
      var fn = conversions[graph[toModel].parent][toModel];
      var cur = graph[toModel].parent;
      while (graph[cur].parent) {
        path9.unshift(graph[cur].parent);
        fn = link(conversions[graph[cur].parent][cur], fn);
        cur = graph[cur].parent;
      }
      fn.conversion = path9;
      return fn;
    }
    module.exports = function(fromModel) {
      var graph = deriveBFS(fromModel);
      var conversion = {};
      var models = Object.keys(graph);
      for (var len = models.length, i2 = 0; i2 < len; i2++) {
        var toModel = models[i2];
        var node = graph[toModel];
        if (node.parent === null) {
          continue;
        }
        conversion[toModel] = wrapConversion(toModel, graph);
      }
      return conversion;
    };
  }
});

// ../../.yarn/cache/color-convert-npm-1.9.3-4070ad7832-5ad3c53494.zip/node_modules/color-convert/index.js
var require_color_convert = __commonJS({
  "../../.yarn/cache/color-convert-npm-1.9.3-4070ad7832-5ad3c53494.zip/node_modules/color-convert/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var conversions = require_conversions();
    var route = require_route();
    var convert = {};
    var models = Object.keys(conversions);
    function wrapRaw(fn) {
      var wrappedFn = function(args) {
        if (args === void 0 || args === null) {
          return args;
        }
        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }
        return fn(args);
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    function wrapRounded(fn) {
      var wrappedFn = function(args) {
        if (args === void 0 || args === null) {
          return args;
        }
        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }
        var result = fn(args);
        if (typeof result === "object") {
          for (var len = result.length, i2 = 0; i2 < len; i2++) {
            result[i2] = Math.round(result[i2]);
          }
        }
        return result;
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    models.forEach(function(fromModel) {
      convert[fromModel] = {};
      Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
      Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
      var routes = route(fromModel);
      var routeModels = Object.keys(routes);
      routeModels.forEach(function(toModel) {
        var fn = routes[toModel];
        convert[fromModel][toModel] = wrapRounded(fn);
        convert[fromModel][toModel].raw = wrapRaw(fn);
      });
    });
    module.exports = convert;
  }
});

// ../../.yarn/cache/ansi-styles-npm-3.2.1-70e34f5f1c-ece5a8ef06.zip/node_modules/ansi-styles/index.js
var require_ansi_styles = __commonJS({
  "../../.yarn/cache/ansi-styles-npm-3.2.1-70e34f5f1c-ece5a8ef06.zip/node_modules/ansi-styles/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var colorConvert = require_color_convert();
    var wrapAnsi16 = (fn, offset) => function() {
      const code = fn.apply(colorConvert, arguments);
      return `\x1B[${code + offset}m`;
    };
    var wrapAnsi256 = (fn, offset) => function() {
      const code = fn.apply(colorConvert, arguments);
      return `\x1B[${38 + offset};5;${code}m`;
    };
    var wrapAnsi16m = (fn, offset) => function() {
      const rgb = fn.apply(colorConvert, arguments);
      return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
    };
    function assembleStyles() {
      const codes = /* @__PURE__ */ new Map();
      const styles = {
        modifier: {
          reset: [0, 0],
          // 21 isn't widely supported and 22 does the same thing
          bold: [1, 22],
          dim: [2, 22],
          italic: [3, 23],
          underline: [4, 24],
          inverse: [7, 27],
          hidden: [8, 28],
          strikethrough: [9, 29]
        },
        color: {
          black: [30, 39],
          red: [31, 39],
          green: [32, 39],
          yellow: [33, 39],
          blue: [34, 39],
          magenta: [35, 39],
          cyan: [36, 39],
          white: [37, 39],
          gray: [90, 39],
          // Bright color
          redBright: [91, 39],
          greenBright: [92, 39],
          yellowBright: [93, 39],
          blueBright: [94, 39],
          magentaBright: [95, 39],
          cyanBright: [96, 39],
          whiteBright: [97, 39]
        },
        bgColor: {
          bgBlack: [40, 49],
          bgRed: [41, 49],
          bgGreen: [42, 49],
          bgYellow: [43, 49],
          bgBlue: [44, 49],
          bgMagenta: [45, 49],
          bgCyan: [46, 49],
          bgWhite: [47, 49],
          // Bright color
          bgBlackBright: [100, 49],
          bgRedBright: [101, 49],
          bgGreenBright: [102, 49],
          bgYellowBright: [103, 49],
          bgBlueBright: [104, 49],
          bgMagentaBright: [105, 49],
          bgCyanBright: [106, 49],
          bgWhiteBright: [107, 49]
        }
      };
      styles.color.grey = styles.color.gray;
      for (const groupName of Object.keys(styles)) {
        const group = styles[groupName];
        for (const styleName of Object.keys(group)) {
          const style = group[styleName];
          styles[styleName] = {
            open: `\x1B[${style[0]}m`,
            close: `\x1B[${style[1]}m`
          };
          group[styleName] = styles[styleName];
          codes.set(style[0], style[1]);
        }
        Object.defineProperty(styles, groupName, {
          value: group,
          enumerable: false
        });
        Object.defineProperty(styles, "codes", {
          value: codes,
          enumerable: false
        });
      }
      const ansi2ansi = (n2) => n2;
      const rgb2rgb = (r2, g2, b2) => [r2, g2, b2];
      styles.color.close = "\x1B[39m";
      styles.bgColor.close = "\x1B[49m";
      styles.color.ansi = {
        ansi: wrapAnsi16(ansi2ansi, 0)
      };
      styles.color.ansi256 = {
        ansi256: wrapAnsi256(ansi2ansi, 0)
      };
      styles.color.ansi16m = {
        rgb: wrapAnsi16m(rgb2rgb, 0)
      };
      styles.bgColor.ansi = {
        ansi: wrapAnsi16(ansi2ansi, 10)
      };
      styles.bgColor.ansi256 = {
        ansi256: wrapAnsi256(ansi2ansi, 10)
      };
      styles.bgColor.ansi16m = {
        rgb: wrapAnsi16m(rgb2rgb, 10)
      };
      for (let key of Object.keys(colorConvert)) {
        if (typeof colorConvert[key] !== "object") {
          continue;
        }
        const suite = colorConvert[key];
        if (key === "ansi16") {
          key = "ansi";
        }
        if ("ansi16" in suite) {
          styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
          styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
        }
        if ("ansi256" in suite) {
          styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
          styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
        }
        if ("rgb" in suite) {
          styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
          styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
        }
      }
      return styles;
    }
    Object.defineProperty(module, "exports", {
      enumerable: true,
      get: assembleStyles
    });
  }
});

// ../../.yarn/cache/has-flag-npm-3.0.0-738087faaa-1c6c83b14b.zip/node_modules/has-flag/index.js
var require_has_flag = __commonJS({
  "../../.yarn/cache/has-flag-npm-3.0.0-738087faaa-1c6c83b14b.zip/node_modules/has-flag/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    module.exports = (flag, argv) => {
      argv = argv || process.argv;
      const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
      const pos = argv.indexOf(prefix + flag);
      const terminatorPos = argv.indexOf("--");
      return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
    };
  }
});

// ../../.yarn/cache/supports-color-npm-5.5.0-cbac38734e-6ae5ff319b.zip/node_modules/supports-color/index.js
var require_supports_color = __commonJS({
  "../../.yarn/cache/supports-color-npm-5.5.0-cbac38734e-6ae5ff319b.zip/node_modules/supports-color/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var os = __require("os");
    var hasFlag = require_has_flag();
    var env = process.env;
    var forceColor;
    if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false")) {
      forceColor = false;
    } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
      forceColor = true;
    }
    if ("FORCE_COLOR" in env) {
      forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
    }
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    function supportsColor(stream) {
      if (forceColor === false) {
        return 0;
      }
      if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
        return 3;
      }
      if (hasFlag("color=256")) {
        return 2;
      }
      if (stream && !stream.isTTY && forceColor !== true) {
        return 0;
      }
      const min = forceColor ? 1 : 0;
      if (process.platform === "win32") {
        const osRelease = os.release().split(".");
        if (Number(process.versions.node.split(".")[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if ("CI" in env) {
        if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
          return 1;
        }
        return min;
      }
      if ("TEAMCITY_VERSION" in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
      }
      if (env.COLORTERM === "truecolor") {
        return 3;
      }
      if ("TERM_PROGRAM" in env) {
        const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (env.TERM_PROGRAM) {
          case "iTerm.app":
            return version >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
      }
      if ("COLORTERM" in env) {
        return 1;
      }
      if (env.TERM === "dumb") {
        return min;
      }
      return min;
    }
    function getSupportLevel(stream) {
      const level = supportsColor(stream);
      return translateLevel(level);
    }
    module.exports = {
      supportsColor: getSupportLevel,
      stdout: getSupportLevel(process.stdout),
      stderr: getSupportLevel(process.stderr)
    };
  }
});

// ../../.yarn/cache/chalk-npm-2.4.2-dde13814e3-e6543f02ec.zip/node_modules/chalk/templates.js
var require_templates = __commonJS({
  "../../.yarn/cache/chalk-npm-2.4.2-dde13814e3-e6543f02ec.zip/node_modules/chalk/templates.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var TEMPLATE_REGEX = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
    var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
    var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
    var ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;
    var ESCAPES = /* @__PURE__ */ new Map([
      ["n", "\n"],
      ["r", "\r"],
      ["t", "	"],
      ["b", "\b"],
      ["f", "\f"],
      ["v", "\v"],
      ["0", "\0"],
      ["\\", "\\"],
      ["e", "\x1B"],
      ["a", "\x07"]
    ]);
    function unescape2(c4) {
      if (c4[0] === "u" && c4.length === 5 || c4[0] === "x" && c4.length === 3) {
        return String.fromCharCode(parseInt(c4.slice(1), 16));
      }
      return ESCAPES.get(c4) || c4;
    }
    function parseArguments2(name, args) {
      const results = [];
      const chunks = args.trim().split(/\s*,\s*/g);
      let matches;
      for (const chunk of chunks) {
        if (!isNaN(chunk)) {
          results.push(Number(chunk));
        } else if (matches = chunk.match(STRING_REGEX)) {
          results.push(matches[2].replace(ESCAPE_REGEX, (m2, escape2, chr) => escape2 ? unescape2(escape2) : chr));
        } else {
          throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
        }
      }
      return results;
    }
    function parseStyle(style) {
      STYLE_REGEX.lastIndex = 0;
      const results = [];
      let matches;
      while ((matches = STYLE_REGEX.exec(style)) !== null) {
        const name = matches[1];
        if (matches[2]) {
          const args = parseArguments2(name, matches[2]);
          results.push([name].concat(args));
        } else {
          results.push([name]);
        }
      }
      return results;
    }
    function buildStyle(chalk, styles) {
      const enabled = {};
      for (const layer of styles) {
        for (const style of layer.styles) {
          enabled[style[0]] = layer.inverse ? null : style.slice(1);
        }
      }
      let current = chalk;
      for (const styleName of Object.keys(enabled)) {
        if (Array.isArray(enabled[styleName])) {
          if (!(styleName in current)) {
            throw new Error(`Unknown Chalk style: ${styleName}`);
          }
          if (enabled[styleName].length > 0) {
            current = current[styleName].apply(current, enabled[styleName]);
          } else {
            current = current[styleName];
          }
        }
      }
      return current;
    }
    module.exports = (chalk, tmp) => {
      const styles = [];
      const chunks = [];
      let chunk = [];
      tmp.replace(TEMPLATE_REGEX, (m2, escapeChar, inverse2, style, close, chr) => {
        if (escapeChar) {
          chunk.push(unescape2(escapeChar));
        } else if (style) {
          const str = chunk.join("");
          chunk = [];
          chunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));
          styles.push({ inverse: inverse2, styles: parseStyle(style) });
        } else if (close) {
          if (styles.length === 0) {
            throw new Error("Found extraneous } in Chalk template literal");
          }
          chunks.push(buildStyle(chalk, styles)(chunk.join("")));
          chunk = [];
          styles.pop();
        } else {
          chunk.push(chr);
        }
      });
      chunks.push(chunk.join(""));
      if (styles.length > 0) {
        const errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
        throw new Error(errMsg);
      }
      return chunks.join("");
    };
  }
});

// ../../.yarn/cache/chalk-npm-2.4.2-dde13814e3-e6543f02ec.zip/node_modules/chalk/index.js
var require_chalk = __commonJS({
  "../../.yarn/cache/chalk-npm-2.4.2-dde13814e3-e6543f02ec.zip/node_modules/chalk/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var escapeStringRegexp = require_escape_string_regexp();
    var ansiStyles = require_ansi_styles();
    var stdoutColor = require_supports_color().stdout;
    var template = require_templates();
    var isSimpleWindowsTerm = process.platform === "win32" && !(process.env.TERM || "").toLowerCase().startsWith("xterm");
    var levelMapping = ["ansi", "ansi", "ansi256", "ansi16m"];
    var skipModels = /* @__PURE__ */ new Set(["gray"]);
    var styles = /* @__PURE__ */ Object.create(null);
    function applyOptions(obj, options) {
      options = options || {};
      const scLevel = stdoutColor ? stdoutColor.level : 0;
      obj.level = options.level === void 0 ? scLevel : options.level;
      obj.enabled = "enabled" in options ? options.enabled : obj.level > 0;
    }
    function Chalk(options) {
      if (!this || !(this instanceof Chalk) || this.template) {
        const chalk = {};
        applyOptions(chalk, options);
        chalk.template = function() {
          const args = [].slice.call(arguments);
          return chalkTag.apply(null, [chalk.template].concat(args));
        };
        Object.setPrototypeOf(chalk, Chalk.prototype);
        Object.setPrototypeOf(chalk.template, chalk);
        chalk.template.constructor = Chalk;
        return chalk.template;
      }
      applyOptions(this, options);
    }
    if (isSimpleWindowsTerm) {
      ansiStyles.blue.open = "\x1B[94m";
    }
    for (const key of Object.keys(ansiStyles)) {
      ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), "g");
      styles[key] = {
        get() {
          const codes = ansiStyles[key];
          return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);
        }
      };
    }
    styles.visible = {
      get() {
        return build.call(this, this._styles || [], true, "visible");
      }
    };
    ansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), "g");
    for (const model of Object.keys(ansiStyles.color.ansi)) {
      if (skipModels.has(model)) {
        continue;
      }
      styles[model] = {
        get() {
          const level = this.level;
          return function() {
            const open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);
            const codes = {
              open,
              close: ansiStyles.color.close,
              closeRe: ansiStyles.color.closeRe
            };
            return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
          };
        }
      };
    }
    ansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), "g");
    for (const model of Object.keys(ansiStyles.bgColor.ansi)) {
      if (skipModels.has(model)) {
        continue;
      }
      const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
      styles[bgModel] = {
        get() {
          const level = this.level;
          return function() {
            const open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);
            const codes = {
              open,
              close: ansiStyles.bgColor.close,
              closeRe: ansiStyles.bgColor.closeRe
            };
            return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
          };
        }
      };
    }
    var proto = Object.defineProperties(() => {
    }, styles);
    function build(_styles, _empty, key) {
      const builder = function() {
        return applyStyle.apply(builder, arguments);
      };
      builder._styles = _styles;
      builder._empty = _empty;
      const self = this;
      Object.defineProperty(builder, "level", {
        enumerable: true,
        get() {
          return self.level;
        },
        set(level) {
          self.level = level;
        }
      });
      Object.defineProperty(builder, "enabled", {
        enumerable: true,
        get() {
          return self.enabled;
        },
        set(enabled) {
          self.enabled = enabled;
        }
      });
      builder.hasGrey = this.hasGrey || key === "gray" || key === "grey";
      builder.__proto__ = proto;
      return builder;
    }
    function applyStyle() {
      const args = arguments;
      const argsLen = args.length;
      let str = String(arguments[0]);
      if (argsLen === 0) {
        return "";
      }
      if (argsLen > 1) {
        for (let a2 = 1; a2 < argsLen; a2++) {
          str += " " + args[a2];
        }
      }
      if (!this.enabled || this.level <= 0 || !str) {
        return this._empty ? "" : str;
      }
      const originalDim = ansiStyles.dim.open;
      if (isSimpleWindowsTerm && this.hasGrey) {
        ansiStyles.dim.open = "";
      }
      for (const code of this._styles.slice().reverse()) {
        str = code.open + str.replace(code.closeRe, code.open) + code.close;
        str = str.replace(/\r?\n/g, `${code.close}$&${code.open}`);
      }
      ansiStyles.dim.open = originalDim;
      return str;
    }
    function chalkTag(chalk, strings) {
      if (!Array.isArray(strings)) {
        return [].slice.call(arguments, 1).join(" ");
      }
      const args = [].slice.call(arguments, 2);
      const parts = [strings.raw[0]];
      for (let i2 = 1; i2 < strings.length; i2++) {
        parts.push(String(args[i2 - 1]).replace(/[{}\\]/g, "\\$&"));
        parts.push(String(strings.raw[i2]));
      }
      return template(chalk, parts.join(""));
    }
    Object.defineProperties(Chalk.prototype, styles);
    module.exports = Chalk();
    module.exports.supportsColor = stdoutColor;
    module.exports.default = module.exports;
  }
});

// ../../.yarn/cache/@babel-highlight-npm-7.24.7-470270b1f2-674334c571.zip/node_modules/@babel/highlight/lib/index.js
var require_lib2 = __commonJS({
  "../../.yarn/cache/@babel-highlight-npm-7.24.7-470270b1f2-674334c571.zip/node_modules/@babel/highlight/lib/index.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = highlight;
    exports.shouldHighlight = shouldHighlight;
    var _jsTokens = require_js_tokens();
    var _helperValidatorIdentifier = require_lib();
    var _picocolors = _interopRequireWildcard(require_picocolors(), true);
    function _getRequireWildcardCache(e2) {
      if ("function" != typeof WeakMap) return null;
      var r2 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function(e3) {
        return e3 ? t2 : r2;
      })(e2);
    }
    function _interopRequireWildcard(e2, r2) {
      if (!r2 && e2 && e2.__esModule) return e2;
      if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
      var t2 = _getRequireWildcardCache(r2);
      if (t2 && t2.has(e2)) return t2.get(e2);
      var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var u3 in e2) if ("default" !== u3 && {}.hasOwnProperty.call(e2, u3)) {
        var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u3) : null;
        i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u3, i2) : n2[u3] = e2[u3];
      }
      return n2.default = e2, t2 && t2.set(e2, n2), n2;
    }
    var colors = typeof process === "object" && (process.env.FORCE_COLOR === "0" || process.env.FORCE_COLOR === "false") ? (0, _picocolors.createColors)(false) : _picocolors.default;
    var compose2 = (f3, g2) => (v) => f3(g2(v));
    var sometimesKeywords = /* @__PURE__ */ new Set(["as", "async", "from", "get", "of", "set"]);
    function getDefs(colors2) {
      return {
        keyword: colors2.cyan,
        capitalized: colors2.yellow,
        jsxIdentifier: colors2.yellow,
        punctuator: colors2.yellow,
        number: colors2.magenta,
        string: colors2.green,
        regex: colors2.magenta,
        comment: colors2.gray,
        invalid: compose2(compose2(colors2.white, colors2.bgRed), colors2.bold)
      };
    }
    var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
    var BRACKET = /^[()[\]{}]$/;
    var tokenize;
    {
      const JSX_TAG = /^[a-z][\w-]*$/i;
      const getTokenType = function(token, offset, text) {
        if (token.type === "name") {
          if ((0, _helperValidatorIdentifier.isKeyword)(token.value) || (0, _helperValidatorIdentifier.isStrictReservedWord)(token.value, true) || sometimesKeywords.has(token.value)) {
            return "keyword";
          }
          if (JSX_TAG.test(token.value) && (text[offset - 1] === "<" || text.slice(offset - 2, offset) === "</")) {
            return "jsxIdentifier";
          }
          if (token.value[0] !== token.value[0].toLowerCase()) {
            return "capitalized";
          }
        }
        if (token.type === "punctuator" && BRACKET.test(token.value)) {
          return "bracket";
        }
        if (token.type === "invalid" && (token.value === "@" || token.value === "#")) {
          return "punctuator";
        }
        return token.type;
      };
      tokenize = function* (text) {
        let match;
        while (match = _jsTokens.default.exec(text)) {
          const token = _jsTokens.matchToToken(match);
          yield {
            type: getTokenType(token, match.index, text),
            value: token.value
          };
        }
      };
    }
    function highlightTokens(defs, text) {
      let highlighted = "";
      for (const {
        type,
        value: value2
      } of tokenize(text)) {
        const colorize = defs[type];
        if (colorize) {
          highlighted += value2.split(NEWLINE).map((str) => colorize(str)).join("\n");
        } else {
          highlighted += value2;
        }
      }
      return highlighted;
    }
    function shouldHighlight(options) {
      return colors.isColorSupported || options.forceColor;
    }
    var pcWithForcedColor = void 0;
    function getColors(forceColor) {
      if (forceColor) {
        var _pcWithForcedColor;
        (_pcWithForcedColor = pcWithForcedColor) != null ? _pcWithForcedColor : pcWithForcedColor = (0, _picocolors.createColors)(true);
        return pcWithForcedColor;
      }
      return colors;
    }
    function highlight(code, options = {}) {
      if (code !== "" && shouldHighlight(options)) {
        const defs = getDefs(getColors(options.forceColor));
        return highlightTokens(defs, code);
      } else {
        return code;
      }
    }
    {
      let chalk, chalkWithForcedColor;
      exports.getChalk = ({
        forceColor
      }) => {
        var _chalk;
        (_chalk = chalk) != null ? _chalk : chalk = require_chalk();
        if (forceColor) {
          var _chalkWithForcedColor;
          (_chalkWithForcedColor = chalkWithForcedColor) != null ? _chalkWithForcedColor : chalkWithForcedColor = new chalk.constructor({
            enabled: true,
            level: 1
          });
          return chalkWithForcedColor;
        }
        return chalk;
      };
    }
  }
});

// ../../.yarn/cache/@babel-code-frame-npm-7.24.7-8654c9df5e-ab0af53947.zip/node_modules/@babel/code-frame/lib/index.js
var require_lib3 = __commonJS({
  "../../.yarn/cache/@babel-code-frame-npm-7.24.7-8654c9df5e-ab0af53947.zip/node_modules/@babel/code-frame/lib/index.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.codeFrameColumns = codeFrameColumns;
    exports.default = _default;
    var _highlight = require_lib2();
    var _picocolors = _interopRequireWildcard(require_picocolors(), true);
    function _getRequireWildcardCache(e2) {
      if ("function" != typeof WeakMap) return null;
      var r2 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function(e3) {
        return e3 ? t2 : r2;
      })(e2);
    }
    function _interopRequireWildcard(e2, r2) {
      if (!r2 && e2 && e2.__esModule) return e2;
      if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
      var t2 = _getRequireWildcardCache(r2);
      if (t2 && t2.has(e2)) return t2.get(e2);
      var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var u3 in e2) if ("default" !== u3 && {}.hasOwnProperty.call(e2, u3)) {
        var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u3) : null;
        i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u3, i2) : n2[u3] = e2[u3];
      }
      return n2.default = e2, t2 && t2.set(e2, n2), n2;
    }
    var colors = typeof process === "object" && (process.env.FORCE_COLOR === "0" || process.env.FORCE_COLOR === "false") ? (0, _picocolors.createColors)(false) : _picocolors.default;
    var compose2 = (f3, g2) => (v) => f3(g2(v));
    var pcWithForcedColor = void 0;
    function getColors(forceColor) {
      if (forceColor) {
        var _pcWithForcedColor;
        (_pcWithForcedColor = pcWithForcedColor) != null ? _pcWithForcedColor : pcWithForcedColor = (0, _picocolors.createColors)(true);
        return pcWithForcedColor;
      }
      return colors;
    }
    var deprecationWarningShown = false;
    function getDefs(colors2) {
      return {
        gutter: colors2.gray,
        marker: compose2(colors2.red, colors2.bold),
        message: compose2(colors2.red, colors2.bold)
      };
    }
    var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
    function getMarkerLines(loc, source, opts) {
      const startLoc = Object.assign({
        column: 0,
        line: -1
      }, loc.start);
      const endLoc = Object.assign({}, startLoc, loc.end);
      const {
        linesAbove = 2,
        linesBelow = 3
      } = opts || {};
      const startLine = startLoc.line;
      const startColumn = startLoc.column;
      const endLine = endLoc.line;
      const endColumn = endLoc.column;
      let start = Math.max(startLine - (linesAbove + 1), 0);
      let end = Math.min(source.length, endLine + linesBelow);
      if (startLine === -1) {
        start = 0;
      }
      if (endLine === -1) {
        end = source.length;
      }
      const lineDiff = endLine - startLine;
      const markerLines = {};
      if (lineDiff) {
        for (let i2 = 0; i2 <= lineDiff; i2++) {
          const lineNumber = i2 + startLine;
          if (!startColumn) {
            markerLines[lineNumber] = true;
          } else if (i2 === 0) {
            const sourceLength = source[lineNumber - 1].length;
            markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];
          } else if (i2 === lineDiff) {
            markerLines[lineNumber] = [0, endColumn];
          } else {
            const sourceLength = source[lineNumber - i2].length;
            markerLines[lineNumber] = [0, sourceLength];
          }
        }
      } else {
        if (startColumn === endColumn) {
          if (startColumn) {
            markerLines[startLine] = [startColumn, 0];
          } else {
            markerLines[startLine] = true;
          }
        } else {
          markerLines[startLine] = [startColumn, endColumn - startColumn];
        }
      }
      return {
        start,
        end,
        markerLines
      };
    }
    function codeFrameColumns(rawLines, loc, opts = {}) {
      const highlighted = (opts.highlightCode || opts.forceColor) && (0, _highlight.shouldHighlight)(opts);
      const colors2 = getColors(opts.forceColor);
      const defs = getDefs(colors2);
      const maybeHighlight = (fmt, string) => {
        return highlighted ? fmt(string) : string;
      };
      const lines = rawLines.split(NEWLINE);
      const {
        start,
        end,
        markerLines
      } = getMarkerLines(loc, lines, opts);
      const hasColumns = loc.start && typeof loc.start.column === "number";
      const numberMaxWidth = String(end).length;
      const highlightedLines = highlighted ? (0, _highlight.default)(rawLines, opts) : rawLines;
      let frame = highlightedLines.split(NEWLINE, end).slice(start, end).map((line, index) => {
        const number = start + 1 + index;
        const paddedNumber = ` ${number}`.slice(-numberMaxWidth);
        const gutter = ` ${paddedNumber} |`;
        const hasMarker = markerLines[number];
        const lastMarkerLine = !markerLines[number + 1];
        if (hasMarker) {
          let markerLine = "";
          if (Array.isArray(hasMarker)) {
            const markerSpacing = line.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\t]/g, " ");
            const numberOfMarkers = hasMarker[1] || 1;
            markerLine = ["\n ", maybeHighlight(defs.gutter, gutter.replace(/\d/g, " ")), " ", markerSpacing, maybeHighlight(defs.marker, "^").repeat(numberOfMarkers)].join("");
            if (lastMarkerLine && opts.message) {
              markerLine += " " + maybeHighlight(defs.message, opts.message);
            }
          }
          return [maybeHighlight(defs.marker, ">"), maybeHighlight(defs.gutter, gutter), line.length > 0 ? ` ${line}` : "", markerLine].join("");
        } else {
          return ` ${maybeHighlight(defs.gutter, gutter)}${line.length > 0 ? ` ${line}` : ""}`;
        }
      }).join("\n");
      if (opts.message && !hasColumns) {
        frame = `${" ".repeat(numberMaxWidth + 1)}${opts.message}
${frame}`;
      }
      if (highlighted) {
        return colors2.reset(frame);
      } else {
        return frame;
      }
    }
    function _default(rawLines, lineNumber, colNumber, opts = {}) {
      if (!deprecationWarningShown) {
        deprecationWarningShown = true;
        const message = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";
        if (process.emitWarning) {
          process.emitWarning(message, "DeprecationWarning");
        } else {
          const deprecationError = new Error(message);
          deprecationError.name = "DeprecationWarning";
          console.warn(new Error(message));
        }
      }
      colNumber = Math.max(colNumber, 0);
      const location = {
        start: {
          column: colNumber,
          line: lineNumber
        }
      };
      return codeFrameColumns(rawLines, location, opts);
    }
  }
});

// ../../.yarn/cache/parse-json-npm-5.2.0-f319ebf3b3-77947f2253.zip/node_modules/parse-json/index.js
var require_parse_json = __commonJS({
  "../../.yarn/cache/parse-json-npm-5.2.0-f319ebf3b3-77947f2253.zip/node_modules/parse-json/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var errorEx = require_error_ex();
    var fallback = require_json_parse_even_better_errors();
    var { default: LinesAndColumns } = require_build();
    var { codeFrameColumns } = require_lib3();
    var JSONError = errorEx("JSONError", {
      fileName: errorEx.append("in %s"),
      codeFrame: errorEx.append("\n\n%s\n")
    });
    var parseJson = (string, reviver, filename) => {
      if (typeof reviver === "string") {
        filename = reviver;
        reviver = null;
      }
      try {
        try {
          return JSON.parse(string, reviver);
        } catch (error) {
          fallback(string, reviver);
          throw error;
        }
      } catch (error) {
        error.message = error.message.replace(/\n/g, "");
        const indexMatch = error.message.match(/in JSON at position (\d+) while parsing/);
        const jsonError = new JSONError(error);
        if (filename) {
          jsonError.fileName = filename;
        }
        if (indexMatch && indexMatch.length > 0) {
          const lines = new LinesAndColumns(string);
          const index = Number(indexMatch[1]);
          const location = lines.locationForIndex(index);
          const codeFrame = codeFrameColumns(
            string,
            { start: { line: location.line + 1, column: location.column + 1 } },
            { highlightCode: true }
          );
          jsonError.codeFrame = codeFrame;
        }
        throw jsonError;
      }
    };
    parseJson.JSONError = JSONError;
    module.exports = parseJson;
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/common.js
var require_common = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/common.js"(exports, module) {
    "use strict";
    init_esm_shims();
    function isNothing(subject) {
      return typeof subject === "undefined" || subject === null;
    }
    function isObject2(subject) {
      return typeof subject === "object" && subject !== null;
    }
    function toArray(sequence) {
      if (Array.isArray(sequence)) return sequence;
      else if (isNothing(sequence)) return [];
      return [sequence];
    }
    function extend(target, source) {
      var index, length, key, sourceKeys;
      if (source) {
        sourceKeys = Object.keys(source);
        for (index = 0, length = sourceKeys.length; index < length; index += 1) {
          key = sourceKeys[index];
          target[key] = source[key];
        }
      }
      return target;
    }
    function repeat(string, count2) {
      var result = "", cycle;
      for (cycle = 0; cycle < count2; cycle += 1) {
        result += string;
      }
      return result;
    }
    function isNegativeZero(number) {
      return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
    }
    module.exports.isNothing = isNothing;
    module.exports.isObject = isObject2;
    module.exports.toArray = toArray;
    module.exports.repeat = repeat;
    module.exports.isNegativeZero = isNegativeZero;
    module.exports.extend = extend;
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/exception.js
var require_exception = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/exception.js"(exports, module) {
    "use strict";
    init_esm_shims();
    function formatError2(exception, compact) {
      var where = "", message = exception.reason || "(unknown reason)";
      if (!exception.mark) return message;
      if (exception.mark.name) {
        where += 'in "' + exception.mark.name + '" ';
      }
      where += "(" + (exception.mark.line + 1) + ":" + (exception.mark.column + 1) + ")";
      if (!compact && exception.mark.snippet) {
        where += "\n\n" + exception.mark.snippet;
      }
      return message + " " + where;
    }
    function YAMLException(reason, mark) {
      Error.call(this);
      this.name = "YAMLException";
      this.reason = reason;
      this.mark = mark;
      this.message = formatError2(this, false);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack || "";
      }
    }
    YAMLException.prototype = Object.create(Error.prototype);
    YAMLException.prototype.constructor = YAMLException;
    YAMLException.prototype.toString = function toString2(compact) {
      return this.name + ": " + formatError2(this, compact);
    };
    module.exports = YAMLException;
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/snippet.js
var require_snippet = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/snippet.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var common2 = require_common();
    function getLine(buffer, lineStart, lineEnd, position, maxLineLength) {
      var head = "";
      var tail = "";
      var maxHalfLength = Math.floor(maxLineLength / 2) - 1;
      if (position - lineStart > maxHalfLength) {
        head = " ... ";
        lineStart = position - maxHalfLength + head.length;
      }
      if (lineEnd - position > maxHalfLength) {
        tail = " ...";
        lineEnd = position + maxHalfLength - tail.length;
      }
      return {
        str: head + buffer.slice(lineStart, lineEnd).replace(/\t/g, "\u2192") + tail,
        pos: position - lineStart + head.length
        // relative position
      };
    }
    function padStart(string, max) {
      return common2.repeat(" ", max - string.length) + string;
    }
    function makeSnippet(mark, options) {
      options = Object.create(options || null);
      if (!mark.buffer) return null;
      if (!options.maxLength) options.maxLength = 79;
      if (typeof options.indent !== "number") options.indent = 1;
      if (typeof options.linesBefore !== "number") options.linesBefore = 3;
      if (typeof options.linesAfter !== "number") options.linesAfter = 2;
      var re = /\r?\n|\r|\0/g;
      var lineStarts = [0];
      var lineEnds = [];
      var match;
      var foundLineNo = -1;
      while (match = re.exec(mark.buffer)) {
        lineEnds.push(match.index);
        lineStarts.push(match.index + match[0].length);
        if (mark.position <= match.index && foundLineNo < 0) {
          foundLineNo = lineStarts.length - 2;
        }
      }
      if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;
      var result = "", i2, line;
      var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;
      var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);
      for (i2 = 1; i2 <= options.linesBefore; i2++) {
        if (foundLineNo - i2 < 0) break;
        line = getLine(
          mark.buffer,
          lineStarts[foundLineNo - i2],
          lineEnds[foundLineNo - i2],
          mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i2]),
          maxLineLength
        );
        result = common2.repeat(" ", options.indent) + padStart((mark.line - i2 + 1).toString(), lineNoLength) + " | " + line.str + "\n" + result;
      }
      line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);
      result += common2.repeat(" ", options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + " | " + line.str + "\n";
      result += common2.repeat("-", options.indent + lineNoLength + 3 + line.pos) + "^\n";
      for (i2 = 1; i2 <= options.linesAfter; i2++) {
        if (foundLineNo + i2 >= lineEnds.length) break;
        line = getLine(
          mark.buffer,
          lineStarts[foundLineNo + i2],
          lineEnds[foundLineNo + i2],
          mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i2]),
          maxLineLength
        );
        result += common2.repeat(" ", options.indent) + padStart((mark.line + i2 + 1).toString(), lineNoLength) + " | " + line.str + "\n";
      }
      return result.replace(/\n$/, "");
    }
    module.exports = makeSnippet;
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type.js
var require_type = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var YAMLException = require_exception();
    var TYPE_CONSTRUCTOR_OPTIONS = [
      "kind",
      "multi",
      "resolve",
      "construct",
      "instanceOf",
      "predicate",
      "represent",
      "representName",
      "defaultStyle",
      "styleAliases"
    ];
    var YAML_NODE_KINDS = [
      "scalar",
      "sequence",
      "mapping"
    ];
    function compileStyleAliases(map) {
      var result = {};
      if (map !== null) {
        Object.keys(map).forEach(function(style) {
          map[style].forEach(function(alias) {
            result[String(alias)] = style;
          });
        });
      }
      return result;
    }
    function Type(tag, options) {
      options = options || {};
      Object.keys(options).forEach(function(name) {
        if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
          throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
        }
      });
      this.options = options;
      this.tag = tag;
      this.kind = options["kind"] || null;
      this.resolve = options["resolve"] || function() {
        return true;
      };
      this.construct = options["construct"] || function(data) {
        return data;
      };
      this.instanceOf = options["instanceOf"] || null;
      this.predicate = options["predicate"] || null;
      this.represent = options["represent"] || null;
      this.representName = options["representName"] || null;
      this.defaultStyle = options["defaultStyle"] || null;
      this.multi = options["multi"] || false;
      this.styleAliases = compileStyleAliases(options["styleAliases"] || null);
      if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
        throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
      }
    }
    module.exports = Type;
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/schema.js
var require_schema = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/schema.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var YAMLException = require_exception();
    var Type = require_type();
    function compileList(schema, name) {
      var result = [];
      schema[name].forEach(function(currentType) {
        var newIndex = result.length;
        result.forEach(function(previousType, previousIndex) {
          if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) {
            newIndex = previousIndex;
          }
        });
        result[newIndex] = currentType;
      });
      return result;
    }
    function compileMap() {
      var result = {
        scalar: {},
        sequence: {},
        mapping: {},
        fallback: {},
        multi: {
          scalar: [],
          sequence: [],
          mapping: [],
          fallback: []
        }
      }, index, length;
      function collectType(type) {
        if (type.multi) {
          result.multi[type.kind].push(type);
          result.multi["fallback"].push(type);
        } else {
          result[type.kind][type.tag] = result["fallback"][type.tag] = type;
        }
      }
      for (index = 0, length = arguments.length; index < length; index += 1) {
        arguments[index].forEach(collectType);
      }
      return result;
    }
    function Schema(definition) {
      return this.extend(definition);
    }
    Schema.prototype.extend = function extend(definition) {
      var implicit = [];
      var explicit = [];
      if (definition instanceof Type) {
        explicit.push(definition);
      } else if (Array.isArray(definition)) {
        explicit = explicit.concat(definition);
      } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
        if (definition.implicit) implicit = implicit.concat(definition.implicit);
        if (definition.explicit) explicit = explicit.concat(definition.explicit);
      } else {
        throw new YAMLException("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");
      }
      implicit.forEach(function(type) {
        if (!(type instanceof Type)) {
          throw new YAMLException("Specified list of YAML types (or a single Type object) contains a non-Type object.");
        }
        if (type.loadKind && type.loadKind !== "scalar") {
          throw new YAMLException("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
        }
        if (type.multi) {
          throw new YAMLException("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.");
        }
      });
      explicit.forEach(function(type) {
        if (!(type instanceof Type)) {
          throw new YAMLException("Specified list of YAML types (or a single Type object) contains a non-Type object.");
        }
      });
      var result = Object.create(Schema.prototype);
      result.implicit = (this.implicit || []).concat(implicit);
      result.explicit = (this.explicit || []).concat(explicit);
      result.compiledImplicit = compileList(result, "implicit");
      result.compiledExplicit = compileList(result, "explicit");
      result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);
      return result;
    };
    module.exports = Schema;
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/str.js
var require_str = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/str.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Type = require_type();
    module.exports = new Type("tag:yaml.org,2002:str", {
      kind: "scalar",
      construct: function(data) {
        return data !== null ? data : "";
      }
    });
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/seq.js
var require_seq = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/seq.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Type = require_type();
    module.exports = new Type("tag:yaml.org,2002:seq", {
      kind: "sequence",
      construct: function(data) {
        return data !== null ? data : [];
      }
    });
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/map.js
var require_map = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/map.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Type = require_type();
    module.exports = new Type("tag:yaml.org,2002:map", {
      kind: "mapping",
      construct: function(data) {
        return data !== null ? data : {};
      }
    });
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/schema/failsafe.js
var require_failsafe = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/schema/failsafe.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Schema = require_schema();
    module.exports = new Schema({
      explicit: [
        require_str(),
        require_seq(),
        require_map()
      ]
    });
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/null.js
var require_null = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/null.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Type = require_type();
    function resolveYamlNull(data) {
      if (data === null) return true;
      var max = data.length;
      return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
    }
    function constructYamlNull() {
      return null;
    }
    function isNull(object) {
      return object === null;
    }
    module.exports = new Type("tag:yaml.org,2002:null", {
      kind: "scalar",
      resolve: resolveYamlNull,
      construct: constructYamlNull,
      predicate: isNull,
      represent: {
        canonical: function() {
          return "~";
        },
        lowercase: function() {
          return "null";
        },
        uppercase: function() {
          return "NULL";
        },
        camelcase: function() {
          return "Null";
        },
        empty: function() {
          return "";
        }
      },
      defaultStyle: "lowercase"
    });
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/bool.js
var require_bool = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/bool.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Type = require_type();
    function resolveYamlBoolean(data) {
      if (data === null) return false;
      var max = data.length;
      return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
    }
    function constructYamlBoolean(data) {
      return data === "true" || data === "True" || data === "TRUE";
    }
    function isBoolean(object) {
      return Object.prototype.toString.call(object) === "[object Boolean]";
    }
    module.exports = new Type("tag:yaml.org,2002:bool", {
      kind: "scalar",
      resolve: resolveYamlBoolean,
      construct: constructYamlBoolean,
      predicate: isBoolean,
      represent: {
        lowercase: function(object) {
          return object ? "true" : "false";
        },
        uppercase: function(object) {
          return object ? "TRUE" : "FALSE";
        },
        camelcase: function(object) {
          return object ? "True" : "False";
        }
      },
      defaultStyle: "lowercase"
    });
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/int.js
var require_int = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/int.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var common2 = require_common();
    var Type = require_type();
    function isHexCode(c4) {
      return 48 <= c4 && c4 <= 57 || 65 <= c4 && c4 <= 70 || 97 <= c4 && c4 <= 102;
    }
    function isOctCode(c4) {
      return 48 <= c4 && c4 <= 55;
    }
    function isDecCode(c4) {
      return 48 <= c4 && c4 <= 57;
    }
    function resolveYamlInteger(data) {
      if (data === null) return false;
      var max = data.length, index = 0, hasDigits = false, ch;
      if (!max) return false;
      ch = data[index];
      if (ch === "-" || ch === "+") {
        ch = data[++index];
      }
      if (ch === "0") {
        if (index + 1 === max) return true;
        ch = data[++index];
        if (ch === "b") {
          index++;
          for (; index < max; index++) {
            ch = data[index];
            if (ch === "_") continue;
            if (ch !== "0" && ch !== "1") return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        if (ch === "x") {
          index++;
          for (; index < max; index++) {
            ch = data[index];
            if (ch === "_") continue;
            if (!isHexCode(data.charCodeAt(index))) return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        if (ch === "o") {
          index++;
          for (; index < max; index++) {
            ch = data[index];
            if (ch === "_") continue;
            if (!isOctCode(data.charCodeAt(index))) return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
      }
      if (ch === "_") return false;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_") continue;
        if (!isDecCode(data.charCodeAt(index))) {
          return false;
        }
        hasDigits = true;
      }
      if (!hasDigits || ch === "_") return false;
      return true;
    }
    function constructYamlInteger(data) {
      var value2 = data, sign = 1, ch;
      if (value2.indexOf("_") !== -1) {
        value2 = value2.replace(/_/g, "");
      }
      ch = value2[0];
      if (ch === "-" || ch === "+") {
        if (ch === "-") sign = -1;
        value2 = value2.slice(1);
        ch = value2[0];
      }
      if (value2 === "0") return 0;
      if (ch === "0") {
        if (value2[1] === "b") return sign * parseInt(value2.slice(2), 2);
        if (value2[1] === "x") return sign * parseInt(value2.slice(2), 16);
        if (value2[1] === "o") return sign * parseInt(value2.slice(2), 8);
      }
      return sign * parseInt(value2, 10);
    }
    function isInteger(object) {
      return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 === 0 && !common2.isNegativeZero(object));
    }
    module.exports = new Type("tag:yaml.org,2002:int", {
      kind: "scalar",
      resolve: resolveYamlInteger,
      construct: constructYamlInteger,
      predicate: isInteger,
      represent: {
        binary: function(obj) {
          return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
        },
        octal: function(obj) {
          return obj >= 0 ? "0o" + obj.toString(8) : "-0o" + obj.toString(8).slice(1);
        },
        decimal: function(obj) {
          return obj.toString(10);
        },
        /* eslint-disable max-len */
        hexadecimal: function(obj) {
          return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
        }
      },
      defaultStyle: "decimal",
      styleAliases: {
        binary: [2, "bin"],
        octal: [8, "oct"],
        decimal: [10, "dec"],
        hexadecimal: [16, "hex"]
      }
    });
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/float.js
var require_float = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/float.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var common2 = require_common();
    var Type = require_type();
    var YAML_FLOAT_PATTERN = new RegExp(
      // 2.5e4, 2.5 and integers
      "^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"
    );
    function resolveYamlFloat(data) {
      if (data === null) return false;
      if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`
      // Probably should update regexp & check speed
      data[data.length - 1] === "_") {
        return false;
      }
      return true;
    }
    function constructYamlFloat(data) {
      var value2, sign;
      value2 = data.replace(/_/g, "").toLowerCase();
      sign = value2[0] === "-" ? -1 : 1;
      if ("+-".indexOf(value2[0]) >= 0) {
        value2 = value2.slice(1);
      }
      if (value2 === ".inf") {
        return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
      } else if (value2 === ".nan") {
        return NaN;
      }
      return sign * parseFloat(value2, 10);
    }
    var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
    function representYamlFloat(object, style) {
      var res;
      if (isNaN(object)) {
        switch (style) {
          case "lowercase":
            return ".nan";
          case "uppercase":
            return ".NAN";
          case "camelcase":
            return ".NaN";
        }
      } else if (Number.POSITIVE_INFINITY === object) {
        switch (style) {
          case "lowercase":
            return ".inf";
          case "uppercase":
            return ".INF";
          case "camelcase":
            return ".Inf";
        }
      } else if (Number.NEGATIVE_INFINITY === object) {
        switch (style) {
          case "lowercase":
            return "-.inf";
          case "uppercase":
            return "-.INF";
          case "camelcase":
            return "-.Inf";
        }
      } else if (common2.isNegativeZero(object)) {
        return "-0.0";
      }
      res = object.toString(10);
      return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
    }
    function isFloat(object) {
      return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common2.isNegativeZero(object));
    }
    module.exports = new Type("tag:yaml.org,2002:float", {
      kind: "scalar",
      resolve: resolveYamlFloat,
      construct: constructYamlFloat,
      predicate: isFloat,
      represent: representYamlFloat,
      defaultStyle: "lowercase"
    });
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/schema/json.js
var require_json = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/schema/json.js"(exports, module) {
    "use strict";
    init_esm_shims();
    module.exports = require_failsafe().extend({
      implicit: [
        require_null(),
        require_bool(),
        require_int(),
        require_float()
      ]
    });
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/schema/core.js
var require_core = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/schema/core.js"(exports, module) {
    "use strict";
    init_esm_shims();
    module.exports = require_json();
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/timestamp.js
var require_timestamp = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/timestamp.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Type = require_type();
    var YAML_DATE_REGEXP = new RegExp(
      "^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"
    );
    var YAML_TIMESTAMP_REGEXP = new RegExp(
      "^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$"
    );
    function resolveYamlTimestamp(data) {
      if (data === null) return false;
      if (YAML_DATE_REGEXP.exec(data) !== null) return true;
      if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
      return false;
    }
    function constructYamlTimestamp(data) {
      var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
      match = YAML_DATE_REGEXP.exec(data);
      if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);
      if (match === null) throw new Error("Date resolve error");
      year = +match[1];
      month = +match[2] - 1;
      day = +match[3];
      if (!match[4]) {
        return new Date(Date.UTC(year, month, day));
      }
      hour = +match[4];
      minute = +match[5];
      second = +match[6];
      if (match[7]) {
        fraction = match[7].slice(0, 3);
        while (fraction.length < 3) {
          fraction += "0";
        }
        fraction = +fraction;
      }
      if (match[9]) {
        tz_hour = +match[10];
        tz_minute = +(match[11] || 0);
        delta = (tz_hour * 60 + tz_minute) * 6e4;
        if (match[9] === "-") delta = -delta;
      }
      date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
      if (delta) date.setTime(date.getTime() - delta);
      return date;
    }
    function representYamlTimestamp(object) {
      return object.toISOString();
    }
    module.exports = new Type("tag:yaml.org,2002:timestamp", {
      kind: "scalar",
      resolve: resolveYamlTimestamp,
      construct: constructYamlTimestamp,
      instanceOf: Date,
      represent: representYamlTimestamp
    });
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/merge.js
var require_merge = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/merge.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Type = require_type();
    function resolveYamlMerge(data) {
      return data === "<<" || data === null;
    }
    module.exports = new Type("tag:yaml.org,2002:merge", {
      kind: "scalar",
      resolve: resolveYamlMerge
    });
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/binary.js
var require_binary = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/binary.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Type = require_type();
    var BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
    function resolveYamlBinary(data) {
      if (data === null) return false;
      var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;
      for (idx = 0; idx < max; idx++) {
        code = map.indexOf(data.charAt(idx));
        if (code > 64) continue;
        if (code < 0) return false;
        bitlen += 6;
      }
      return bitlen % 8 === 0;
    }
    function constructYamlBinary(data) {
      var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max = input.length, map = BASE64_MAP, bits = 0, result = [];
      for (idx = 0; idx < max; idx++) {
        if (idx % 4 === 0 && idx) {
          result.push(bits >> 16 & 255);
          result.push(bits >> 8 & 255);
          result.push(bits & 255);
        }
        bits = bits << 6 | map.indexOf(input.charAt(idx));
      }
      tailbits = max % 4 * 6;
      if (tailbits === 0) {
        result.push(bits >> 16 & 255);
        result.push(bits >> 8 & 255);
        result.push(bits & 255);
      } else if (tailbits === 18) {
        result.push(bits >> 10 & 255);
        result.push(bits >> 2 & 255);
      } else if (tailbits === 12) {
        result.push(bits >> 4 & 255);
      }
      return new Uint8Array(result);
    }
    function representYamlBinary(object) {
      var result = "", bits = 0, idx, tail, max = object.length, map = BASE64_MAP;
      for (idx = 0; idx < max; idx++) {
        if (idx % 3 === 0 && idx) {
          result += map[bits >> 18 & 63];
          result += map[bits >> 12 & 63];
          result += map[bits >> 6 & 63];
          result += map[bits & 63];
        }
        bits = (bits << 8) + object[idx];
      }
      tail = max % 3;
      if (tail === 0) {
        result += map[bits >> 18 & 63];
        result += map[bits >> 12 & 63];
        result += map[bits >> 6 & 63];
        result += map[bits & 63];
      } else if (tail === 2) {
        result += map[bits >> 10 & 63];
        result += map[bits >> 4 & 63];
        result += map[bits << 2 & 63];
        result += map[64];
      } else if (tail === 1) {
        result += map[bits >> 2 & 63];
        result += map[bits << 4 & 63];
        result += map[64];
        result += map[64];
      }
      return result;
    }
    function isBinary(obj) {
      return Object.prototype.toString.call(obj) === "[object Uint8Array]";
    }
    module.exports = new Type("tag:yaml.org,2002:binary", {
      kind: "scalar",
      resolve: resolveYamlBinary,
      construct: constructYamlBinary,
      predicate: isBinary,
      represent: representYamlBinary
    });
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/omap.js
var require_omap = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/omap.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Type = require_type();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var _toString = Object.prototype.toString;
    function resolveYamlOmap(data) {
      if (data === null) return true;
      var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        pairHasKey = false;
        if (_toString.call(pair) !== "[object Object]") return false;
        for (pairKey in pair) {
          if (_hasOwnProperty.call(pair, pairKey)) {
            if (!pairHasKey) pairHasKey = true;
            else return false;
          }
        }
        if (!pairHasKey) return false;
        if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);
        else return false;
      }
      return true;
    }
    function constructYamlOmap(data) {
      return data !== null ? data : [];
    }
    module.exports = new Type("tag:yaml.org,2002:omap", {
      kind: "sequence",
      resolve: resolveYamlOmap,
      construct: constructYamlOmap
    });
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/pairs.js
var require_pairs = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/pairs.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Type = require_type();
    var _toString = Object.prototype.toString;
    function resolveYamlPairs(data) {
      if (data === null) return true;
      var index, length, pair, keys, result, object = data;
      result = new Array(object.length);
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        if (_toString.call(pair) !== "[object Object]") return false;
        keys = Object.keys(pair);
        if (keys.length !== 1) return false;
        result[index] = [keys[0], pair[keys[0]]];
      }
      return true;
    }
    function constructYamlPairs(data) {
      if (data === null) return [];
      var index, length, pair, keys, result, object = data;
      result = new Array(object.length);
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        keys = Object.keys(pair);
        result[index] = [keys[0], pair[keys[0]]];
      }
      return result;
    }
    module.exports = new Type("tag:yaml.org,2002:pairs", {
      kind: "sequence",
      resolve: resolveYamlPairs,
      construct: constructYamlPairs
    });
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/set.js
var require_set = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/type/set.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var Type = require_type();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    function resolveYamlSet(data) {
      if (data === null) return true;
      var key, object = data;
      for (key in object) {
        if (_hasOwnProperty.call(object, key)) {
          if (object[key] !== null) return false;
        }
      }
      return true;
    }
    function constructYamlSet(data) {
      return data !== null ? data : {};
    }
    module.exports = new Type("tag:yaml.org,2002:set", {
      kind: "mapping",
      resolve: resolveYamlSet,
      construct: constructYamlSet
    });
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/schema/default.js
var require_default = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/schema/default.js"(exports, module) {
    "use strict";
    init_esm_shims();
    module.exports = require_core().extend({
      implicit: [
        require_timestamp(),
        require_merge()
      ],
      explicit: [
        require_binary(),
        require_omap(),
        require_pairs(),
        require_set()
      ]
    });
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/loader.js
var require_loader = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/loader.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var common2 = require_common();
    var YAMLException = require_exception();
    var makeSnippet = require_snippet();
    var DEFAULT_SCHEMA = require_default();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var CONTEXT_FLOW_IN = 1;
    var CONTEXT_FLOW_OUT = 2;
    var CONTEXT_BLOCK_IN = 3;
    var CONTEXT_BLOCK_OUT = 4;
    var CHOMPING_CLIP = 1;
    var CHOMPING_STRIP = 2;
    var CHOMPING_KEEP = 3;
    var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
    var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
    var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
    var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
    var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
    function _class(obj) {
      return Object.prototype.toString.call(obj);
    }
    function is_EOL(c4) {
      return c4 === 10 || c4 === 13;
    }
    function is_WHITE_SPACE(c4) {
      return c4 === 9 || c4 === 32;
    }
    function is_WS_OR_EOL(c4) {
      return c4 === 9 || c4 === 32 || c4 === 10 || c4 === 13;
    }
    function is_FLOW_INDICATOR(c4) {
      return c4 === 44 || c4 === 91 || c4 === 93 || c4 === 123 || c4 === 125;
    }
    function fromHexCode(c4) {
      var lc;
      if (48 <= c4 && c4 <= 57) {
        return c4 - 48;
      }
      lc = c4 | 32;
      if (97 <= lc && lc <= 102) {
        return lc - 97 + 10;
      }
      return -1;
    }
    function escapedHexLen(c4) {
      if (c4 === 120) {
        return 2;
      }
      if (c4 === 117) {
        return 4;
      }
      if (c4 === 85) {
        return 8;
      }
      return 0;
    }
    function fromDecimalCode(c4) {
      if (48 <= c4 && c4 <= 57) {
        return c4 - 48;
      }
      return -1;
    }
    function simpleEscapeSequence(c4) {
      return c4 === 48 ? "\0" : c4 === 97 ? "\x07" : c4 === 98 ? "\b" : c4 === 116 ? "	" : c4 === 9 ? "	" : c4 === 110 ? "\n" : c4 === 118 ? "\v" : c4 === 102 ? "\f" : c4 === 114 ? "\r" : c4 === 101 ? "\x1B" : c4 === 32 ? " " : c4 === 34 ? '"' : c4 === 47 ? "/" : c4 === 92 ? "\\" : c4 === 78 ? "\x85" : c4 === 95 ? "\xA0" : c4 === 76 ? "\u2028" : c4 === 80 ? "\u2029" : "";
    }
    function charFromCodepoint(c4) {
      if (c4 <= 65535) {
        return String.fromCharCode(c4);
      }
      return String.fromCharCode(
        (c4 - 65536 >> 10) + 55296,
        (c4 - 65536 & 1023) + 56320
      );
    }
    var simpleEscapeCheck = new Array(256);
    var simpleEscapeMap = new Array(256);
    for (i2 = 0; i2 < 256; i2++) {
      simpleEscapeCheck[i2] = simpleEscapeSequence(i2) ? 1 : 0;
      simpleEscapeMap[i2] = simpleEscapeSequence(i2);
    }
    var i2;
    function State(input, options) {
      this.input = input;
      this.filename = options["filename"] || null;
      this.schema = options["schema"] || DEFAULT_SCHEMA;
      this.onWarning = options["onWarning"] || null;
      this.legacy = options["legacy"] || false;
      this.json = options["json"] || false;
      this.listener = options["listener"] || null;
      this.implicitTypes = this.schema.compiledImplicit;
      this.typeMap = this.schema.compiledTypeMap;
      this.length = input.length;
      this.position = 0;
      this.line = 0;
      this.lineStart = 0;
      this.lineIndent = 0;
      this.firstTabInLine = -1;
      this.documents = [];
    }
    function generateError(state, message) {
      var mark = {
        name: state.filename,
        buffer: state.input.slice(0, -1),
        // omit trailing \0
        position: state.position,
        line: state.line,
        column: state.position - state.lineStart
      };
      mark.snippet = makeSnippet(mark);
      return new YAMLException(message, mark);
    }
    function throwError(state, message) {
      throw generateError(state, message);
    }
    function throwWarning(state, message) {
      if (state.onWarning) {
        state.onWarning.call(null, generateError(state, message));
      }
    }
    var directiveHandlers = {
      YAML: function handleYamlDirective(state, name, args) {
        var match, major, minor;
        if (state.version !== null) {
          throwError(state, "duplication of %YAML directive");
        }
        if (args.length !== 1) {
          throwError(state, "YAML directive accepts exactly one argument");
        }
        match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
        if (match === null) {
          throwError(state, "ill-formed argument of the YAML directive");
        }
        major = parseInt(match[1], 10);
        minor = parseInt(match[2], 10);
        if (major !== 1) {
          throwError(state, "unacceptable YAML version of the document");
        }
        state.version = args[0];
        state.checkLineBreaks = minor < 2;
        if (minor !== 1 && minor !== 2) {
          throwWarning(state, "unsupported YAML version of the document");
        }
      },
      TAG: function handleTagDirective(state, name, args) {
        var handle, prefix;
        if (args.length !== 2) {
          throwError(state, "TAG directive accepts exactly two arguments");
        }
        handle = args[0];
        prefix = args[1];
        if (!PATTERN_TAG_HANDLE.test(handle)) {
          throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
        }
        if (_hasOwnProperty.call(state.tagMap, handle)) {
          throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
        }
        if (!PATTERN_TAG_URI.test(prefix)) {
          throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
        }
        try {
          prefix = decodeURIComponent(prefix);
        } catch (err) {
          throwError(state, "tag prefix is malformed: " + prefix);
        }
        state.tagMap[handle] = prefix;
      }
    };
    function captureSegment(state, start, end, checkJson) {
      var _position, _length, _character, _result;
      if (start < end) {
        _result = state.input.slice(start, end);
        if (checkJson) {
          for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
            _character = _result.charCodeAt(_position);
            if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
              throwError(state, "expected valid JSON character");
            }
          }
        } else if (PATTERN_NON_PRINTABLE.test(_result)) {
          throwError(state, "the stream contains non-printable characters");
        }
        state.result += _result;
      }
    }
    function mergeMappings(state, destination, source, overridableKeys) {
      var sourceKeys, key, index, quantity;
      if (!common2.isObject(source)) {
        throwError(state, "cannot merge mappings; the provided source object is unacceptable");
      }
      sourceKeys = Object.keys(source);
      for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
        key = sourceKeys[index];
        if (!_hasOwnProperty.call(destination, key)) {
          destination[key] = source[key];
          overridableKeys[key] = true;
        }
      }
    }
    function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {
      var index, quantity;
      if (Array.isArray(keyNode)) {
        keyNode = Array.prototype.slice.call(keyNode);
        for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
          if (Array.isArray(keyNode[index])) {
            throwError(state, "nested arrays are not supported inside keys");
          }
          if (typeof keyNode === "object" && _class(keyNode[index]) === "[object Object]") {
            keyNode[index] = "[object Object]";
          }
        }
      }
      if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
        keyNode = "[object Object]";
      }
      keyNode = String(keyNode);
      if (_result === null) {
        _result = {};
      }
      if (keyTag === "tag:yaml.org,2002:merge") {
        if (Array.isArray(valueNode)) {
          for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
            mergeMappings(state, _result, valueNode[index], overridableKeys);
          }
        } else {
          mergeMappings(state, _result, valueNode, overridableKeys);
        }
      } else {
        if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {
          state.line = startLine || state.line;
          state.lineStart = startLineStart || state.lineStart;
          state.position = startPos || state.position;
          throwError(state, "duplicated mapping key");
        }
        if (keyNode === "__proto__") {
          Object.defineProperty(_result, keyNode, {
            configurable: true,
            enumerable: true,
            writable: true,
            value: valueNode
          });
        } else {
          _result[keyNode] = valueNode;
        }
        delete overridableKeys[keyNode];
      }
      return _result;
    }
    function readLineBreak(state) {
      var ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 10) {
        state.position++;
      } else if (ch === 13) {
        state.position++;
        if (state.input.charCodeAt(state.position) === 10) {
          state.position++;
        }
      } else {
        throwError(state, "a line break is expected");
      }
      state.line += 1;
      state.lineStart = state.position;
      state.firstTabInLine = -1;
    }
    function skipSeparationSpace(state, allowComments, checkIndent) {
      var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        while (is_WHITE_SPACE(ch)) {
          if (ch === 9 && state.firstTabInLine === -1) {
            state.firstTabInLine = state.position;
          }
          ch = state.input.charCodeAt(++state.position);
        }
        if (allowComments && ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (ch !== 10 && ch !== 13 && ch !== 0);
        }
        if (is_EOL(ch)) {
          readLineBreak(state);
          ch = state.input.charCodeAt(state.position);
          lineBreaks++;
          state.lineIndent = 0;
          while (ch === 32) {
            state.lineIndent++;
            ch = state.input.charCodeAt(++state.position);
          }
        } else {
          break;
        }
      }
      if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
        throwWarning(state, "deficient indentation");
      }
      return lineBreaks;
    }
    function testDocumentSeparator(state) {
      var _position = state.position, ch;
      ch = state.input.charCodeAt(_position);
      if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
        _position += 3;
        ch = state.input.charCodeAt(_position);
        if (ch === 0 || is_WS_OR_EOL(ch)) {
          return true;
        }
      }
      return false;
    }
    function writeFoldedLines(state, count2) {
      if (count2 === 1) {
        state.result += " ";
      } else if (count2 > 1) {
        state.result += common2.repeat("\n", count2 - 1);
      }
    }
    function readPlainScalar(state, nodeIndent, withinFlowCollection) {
      var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
      ch = state.input.charCodeAt(state.position);
      if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
        return false;
      }
      if (ch === 63 || ch === 45) {
        following = state.input.charCodeAt(state.position + 1);
        if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
          return false;
        }
      }
      state.kind = "scalar";
      state.result = "";
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
      while (ch !== 0) {
        if (ch === 58) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
            break;
          }
        } else if (ch === 35) {
          preceding = state.input.charCodeAt(state.position - 1);
          if (is_WS_OR_EOL(preceding)) {
            break;
          }
        } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
          break;
        } else if (is_EOL(ch)) {
          _line = state.line;
          _lineStart = state.lineStart;
          _lineIndent = state.lineIndent;
          skipSeparationSpace(state, false, -1);
          if (state.lineIndent >= nodeIndent) {
            hasPendingContent = true;
            ch = state.input.charCodeAt(state.position);
            continue;
          } else {
            state.position = captureEnd;
            state.line = _line;
            state.lineStart = _lineStart;
            state.lineIndent = _lineIndent;
            break;
          }
        }
        if (hasPendingContent) {
          captureSegment(state, captureStart, captureEnd, false);
          writeFoldedLines(state, state.line - _line);
          captureStart = captureEnd = state.position;
          hasPendingContent = false;
        }
        if (!is_WHITE_SPACE(ch)) {
          captureEnd = state.position + 1;
        }
        ch = state.input.charCodeAt(++state.position);
      }
      captureSegment(state, captureStart, captureEnd, false);
      if (state.result) {
        return true;
      }
      state.kind = _kind;
      state.result = _result;
      return false;
    }
    function readSingleQuotedScalar(state, nodeIndent) {
      var ch, captureStart, captureEnd;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 39) {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      state.position++;
      captureStart = captureEnd = state.position;
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 39) {
          captureSegment(state, captureStart, state.position, true);
          ch = state.input.charCodeAt(++state.position);
          if (ch === 39) {
            captureStart = state.position;
            state.position++;
            captureEnd = state.position;
          } else {
            return true;
          }
        } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError(state, "unexpected end of the document within a single quoted scalar");
        } else {
          state.position++;
          captureEnd = state.position;
        }
      }
      throwError(state, "unexpected end of the stream within a single quoted scalar");
    }
    function readDoubleQuotedScalar(state, nodeIndent) {
      var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 34) {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      state.position++;
      captureStart = captureEnd = state.position;
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 34) {
          captureSegment(state, captureStart, state.position, true);
          state.position++;
          return true;
        } else if (ch === 92) {
          captureSegment(state, captureStart, state.position, true);
          ch = state.input.charCodeAt(++state.position);
          if (is_EOL(ch)) {
            skipSeparationSpace(state, false, nodeIndent);
          } else if (ch < 256 && simpleEscapeCheck[ch]) {
            state.result += simpleEscapeMap[ch];
            state.position++;
          } else if ((tmp = escapedHexLen(ch)) > 0) {
            hexLength = tmp;
            hexResult = 0;
            for (; hexLength > 0; hexLength--) {
              ch = state.input.charCodeAt(++state.position);
              if ((tmp = fromHexCode(ch)) >= 0) {
                hexResult = (hexResult << 4) + tmp;
              } else {
                throwError(state, "expected hexadecimal character");
              }
            }
            state.result += charFromCodepoint(hexResult);
            state.position++;
          } else {
            throwError(state, "unknown escape sequence");
          }
          captureStart = captureEnd = state.position;
        } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError(state, "unexpected end of the document within a double quoted scalar");
        } else {
          state.position++;
          captureEnd = state.position;
        }
      }
      throwError(state, "unexpected end of the stream within a double quoted scalar");
    }
    function readFlowCollection(state, nodeIndent) {
      var readNext = true, _line, _lineStart, _pos, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = /* @__PURE__ */ Object.create(null), keyNode, keyTag, valueNode, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 91) {
        terminator = 93;
        isMapping = false;
        _result = [];
      } else if (ch === 123) {
        terminator = 125;
        isMapping = true;
        _result = {};
      } else {
        return false;
      }
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(++state.position);
      while (ch !== 0) {
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === terminator) {
          state.position++;
          state.tag = _tag;
          state.anchor = _anchor;
          state.kind = isMapping ? "mapping" : "sequence";
          state.result = _result;
          return true;
        } else if (!readNext) {
          throwError(state, "missed comma between flow collection entries");
        } else if (ch === 44) {
          throwError(state, "expected the node content, but found ','");
        }
        keyTag = keyNode = valueNode = null;
        isPair = isExplicitPair = false;
        if (ch === 63) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following)) {
            isPair = isExplicitPair = true;
            state.position++;
            skipSeparationSpace(state, true, nodeIndent);
          }
        }
        _line = state.line;
        _lineStart = state.lineStart;
        _pos = state.position;
        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
        keyTag = state.tag;
        keyNode = state.result;
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if ((isExplicitPair || state.line === _line) && ch === 58) {
          isPair = true;
          ch = state.input.charCodeAt(++state.position);
          skipSeparationSpace(state, true, nodeIndent);
          composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
          valueNode = state.result;
        }
        if (isMapping) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
        } else if (isPair) {
          _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
        } else {
          _result.push(keyNode);
        }
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === 44) {
          readNext = true;
          ch = state.input.charCodeAt(++state.position);
        } else {
          readNext = false;
        }
      }
      throwError(state, "unexpected end of the stream within a flow collection");
    }
    function readBlockScalar(state, nodeIndent) {
      var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 124) {
        folding = false;
      } else if (ch === 62) {
        folding = true;
      } else {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      while (ch !== 0) {
        ch = state.input.charCodeAt(++state.position);
        if (ch === 43 || ch === 45) {
          if (CHOMPING_CLIP === chomping) {
            chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
          } else {
            throwError(state, "repeat of a chomping mode identifier");
          }
        } else if ((tmp = fromDecimalCode(ch)) >= 0) {
          if (tmp === 0) {
            throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
          } else if (!detectedIndent) {
            textIndent = nodeIndent + tmp - 1;
            detectedIndent = true;
          } else {
            throwError(state, "repeat of an indentation width identifier");
          }
        } else {
          break;
        }
      }
      if (is_WHITE_SPACE(ch)) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (is_WHITE_SPACE(ch));
        if (ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (!is_EOL(ch) && ch !== 0);
        }
      }
      while (ch !== 0) {
        readLineBreak(state);
        state.lineIndent = 0;
        ch = state.input.charCodeAt(state.position);
        while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
          state.lineIndent++;
          ch = state.input.charCodeAt(++state.position);
        }
        if (!detectedIndent && state.lineIndent > textIndent) {
          textIndent = state.lineIndent;
        }
        if (is_EOL(ch)) {
          emptyLines++;
          continue;
        }
        if (state.lineIndent < textIndent) {
          if (chomping === CHOMPING_KEEP) {
            state.result += common2.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
          } else if (chomping === CHOMPING_CLIP) {
            if (didReadContent) {
              state.result += "\n";
            }
          }
          break;
        }
        if (folding) {
          if (is_WHITE_SPACE(ch)) {
            atMoreIndented = true;
            state.result += common2.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
          } else if (atMoreIndented) {
            atMoreIndented = false;
            state.result += common2.repeat("\n", emptyLines + 1);
          } else if (emptyLines === 0) {
            if (didReadContent) {
              state.result += " ";
            }
          } else {
            state.result += common2.repeat("\n", emptyLines);
          }
        } else {
          state.result += common2.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
        }
        didReadContent = true;
        detectedIndent = true;
        emptyLines = 0;
        captureStart = state.position;
        while (!is_EOL(ch) && ch !== 0) {
          ch = state.input.charCodeAt(++state.position);
        }
        captureSegment(state, captureStart, state.position, false);
      }
      return true;
    }
    function readBlockSequence(state, nodeIndent) {
      var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
      if (state.firstTabInLine !== -1) return false;
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        if (state.firstTabInLine !== -1) {
          state.position = state.firstTabInLine;
          throwError(state, "tab characters must not be used in indentation");
        }
        if (ch !== 45) {
          break;
        }
        following = state.input.charCodeAt(state.position + 1);
        if (!is_WS_OR_EOL(following)) {
          break;
        }
        detected = true;
        state.position++;
        if (skipSeparationSpace(state, true, -1)) {
          if (state.lineIndent <= nodeIndent) {
            _result.push(null);
            ch = state.input.charCodeAt(state.position);
            continue;
          }
        }
        _line = state.line;
        composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
        _result.push(state.result);
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
          throwError(state, "bad indentation of a sequence entry");
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }
      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = "sequence";
        state.result = _result;
        return true;
      }
      return false;
    }
    function readBlockMapping(state, nodeIndent, flowIndent) {
      var following, allowCompact, _line, _keyLine, _keyLineStart, _keyPos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = /* @__PURE__ */ Object.create(null), keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
      if (state.firstTabInLine !== -1) return false;
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        if (!atExplicitKey && state.firstTabInLine !== -1) {
          state.position = state.firstTabInLine;
          throwError(state, "tab characters must not be used in indentation");
        }
        following = state.input.charCodeAt(state.position + 1);
        _line = state.line;
        if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
          if (ch === 63) {
            if (atExplicitKey) {
              storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
              keyTag = keyNode = valueNode = null;
            }
            detected = true;
            atExplicitKey = true;
            allowCompact = true;
          } else if (atExplicitKey) {
            atExplicitKey = false;
            allowCompact = true;
          } else {
            throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
          }
          state.position += 1;
          ch = following;
        } else {
          _keyLine = state.line;
          _keyLineStart = state.lineStart;
          _keyPos = state.position;
          if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
            break;
          }
          if (state.line === _line) {
            ch = state.input.charCodeAt(state.position);
            while (is_WHITE_SPACE(ch)) {
              ch = state.input.charCodeAt(++state.position);
            }
            if (ch === 58) {
              ch = state.input.charCodeAt(++state.position);
              if (!is_WS_OR_EOL(ch)) {
                throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
              }
              if (atExplicitKey) {
                storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
                keyTag = keyNode = valueNode = null;
              }
              detected = true;
              atExplicitKey = false;
              allowCompact = false;
              keyTag = state.tag;
              keyNode = state.result;
            } else if (detected) {
              throwError(state, "can not read an implicit mapping pair; a colon is missed");
            } else {
              state.tag = _tag;
              state.anchor = _anchor;
              return true;
            }
          } else if (detected) {
            throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
          } else {
            state.tag = _tag;
            state.anchor = _anchor;
            return true;
          }
        }
        if (state.line === _line || state.lineIndent > nodeIndent) {
          if (atExplicitKey) {
            _keyLine = state.line;
            _keyLineStart = state.lineStart;
            _keyPos = state.position;
          }
          if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
            if (atExplicitKey) {
              keyNode = state.result;
            } else {
              valueNode = state.result;
            }
          }
          if (!atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
            keyTag = keyNode = valueNode = null;
          }
          skipSeparationSpace(state, true, -1);
          ch = state.input.charCodeAt(state.position);
        }
        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
          throwError(state, "bad indentation of a mapping entry");
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }
      if (atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
      }
      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = "mapping";
        state.result = _result;
      }
      return detected;
    }
    function readTagProperty(state) {
      var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 33) return false;
      if (state.tag !== null) {
        throwError(state, "duplication of a tag property");
      }
      ch = state.input.charCodeAt(++state.position);
      if (ch === 60) {
        isVerbatim = true;
        ch = state.input.charCodeAt(++state.position);
      } else if (ch === 33) {
        isNamed = true;
        tagHandle = "!!";
        ch = state.input.charCodeAt(++state.position);
      } else {
        tagHandle = "!";
      }
      _position = state.position;
      if (isVerbatim) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && ch !== 62);
        if (state.position < state.length) {
          tagName = state.input.slice(_position, state.position);
          ch = state.input.charCodeAt(++state.position);
        } else {
          throwError(state, "unexpected end of the stream within a verbatim tag");
        }
      } else {
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          if (ch === 33) {
            if (!isNamed) {
              tagHandle = state.input.slice(_position - 1, state.position + 1);
              if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
                throwError(state, "named tag handle cannot contain such characters");
              }
              isNamed = true;
              _position = state.position + 1;
            } else {
              throwError(state, "tag suffix cannot contain exclamation marks");
            }
          }
          ch = state.input.charCodeAt(++state.position);
        }
        tagName = state.input.slice(_position, state.position);
        if (PATTERN_FLOW_INDICATORS.test(tagName)) {
          throwError(state, "tag suffix cannot contain flow indicator characters");
        }
      }
      if (tagName && !PATTERN_TAG_URI.test(tagName)) {
        throwError(state, "tag name cannot contain such characters: " + tagName);
      }
      try {
        tagName = decodeURIComponent(tagName);
      } catch (err) {
        throwError(state, "tag name is malformed: " + tagName);
      }
      if (isVerbatim) {
        state.tag = tagName;
      } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
        state.tag = state.tagMap[tagHandle] + tagName;
      } else if (tagHandle === "!") {
        state.tag = "!" + tagName;
      } else if (tagHandle === "!!") {
        state.tag = "tag:yaml.org,2002:" + tagName;
      } else {
        throwError(state, 'undeclared tag handle "' + tagHandle + '"');
      }
      return true;
    }
    function readAnchorProperty(state) {
      var _position, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 38) return false;
      if (state.anchor !== null) {
        throwError(state, "duplication of an anchor property");
      }
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (state.position === _position) {
        throwError(state, "name of an anchor node must contain at least one character");
      }
      state.anchor = state.input.slice(_position, state.position);
      return true;
    }
    function readAlias(state) {
      var _position, alias, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 42) return false;
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (state.position === _position) {
        throwError(state, "name of an alias node must contain at least one character");
      }
      alias = state.input.slice(_position, state.position);
      if (!_hasOwnProperty.call(state.anchorMap, alias)) {
        throwError(state, 'unidentified alias "' + alias + '"');
      }
      state.result = state.anchorMap[alias];
      skipSeparationSpace(state, true, -1);
      return true;
    }
    function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
      var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, typeList, type, flowIndent, blockIndent;
      if (state.listener !== null) {
        state.listener("open", state);
      }
      state.tag = null;
      state.anchor = null;
      state.kind = null;
      state.result = null;
      allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
      if (allowToSeek) {
        if (skipSeparationSpace(state, true, -1)) {
          atNewLine = true;
          if (state.lineIndent > parentIndent) {
            indentStatus = 1;
          } else if (state.lineIndent === parentIndent) {
            indentStatus = 0;
          } else if (state.lineIndent < parentIndent) {
            indentStatus = -1;
          }
        }
      }
      if (indentStatus === 1) {
        while (readTagProperty(state) || readAnchorProperty(state)) {
          if (skipSeparationSpace(state, true, -1)) {
            atNewLine = true;
            allowBlockCollections = allowBlockStyles;
            if (state.lineIndent > parentIndent) {
              indentStatus = 1;
            } else if (state.lineIndent === parentIndent) {
              indentStatus = 0;
            } else if (state.lineIndent < parentIndent) {
              indentStatus = -1;
            }
          } else {
            allowBlockCollections = false;
          }
        }
      }
      if (allowBlockCollections) {
        allowBlockCollections = atNewLine || allowCompact;
      }
      if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
        if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
          flowIndent = parentIndent;
        } else {
          flowIndent = parentIndent + 1;
        }
        blockIndent = state.position - state.lineStart;
        if (indentStatus === 1) {
          if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
            hasContent = true;
          } else {
            if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
              hasContent = true;
            } else if (readAlias(state)) {
              hasContent = true;
              if (state.tag !== null || state.anchor !== null) {
                throwError(state, "alias node should not have any properties");
              }
            } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
              hasContent = true;
              if (state.tag === null) {
                state.tag = "?";
              }
            }
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
          }
        } else if (indentStatus === 0) {
          hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
        }
      }
      if (state.tag === null) {
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      } else if (state.tag === "?") {
        if (state.result !== null && state.kind !== "scalar") {
          throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
        }
        for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
          type = state.implicitTypes[typeIndex];
          if (type.resolve(state.result)) {
            state.result = type.construct(state.result);
            state.tag = type.tag;
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
            break;
          }
        }
      } else if (state.tag !== "!") {
        if (_hasOwnProperty.call(state.typeMap[state.kind || "fallback"], state.tag)) {
          type = state.typeMap[state.kind || "fallback"][state.tag];
        } else {
          type = null;
          typeList = state.typeMap.multi[state.kind || "fallback"];
          for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {
            if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
              type = typeList[typeIndex];
              break;
            }
          }
        }
        if (!type) {
          throwError(state, "unknown tag !<" + state.tag + ">");
        }
        if (state.result !== null && type.kind !== state.kind) {
          throwError(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
        }
        if (!type.resolve(state.result, state.tag)) {
          throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
        } else {
          state.result = type.construct(state.result, state.tag);
          if (state.anchor !== null) {
            state.anchorMap[state.anchor] = state.result;
          }
        }
      }
      if (state.listener !== null) {
        state.listener("close", state);
      }
      return state.tag !== null || state.anchor !== null || hasContent;
    }
    function readDocument(state) {
      var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
      state.version = null;
      state.checkLineBreaks = state.legacy;
      state.tagMap = /* @__PURE__ */ Object.create(null);
      state.anchorMap = /* @__PURE__ */ Object.create(null);
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if (state.lineIndent > 0 || ch !== 37) {
          break;
        }
        hasDirectives = true;
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        directiveName = state.input.slice(_position, state.position);
        directiveArgs = [];
        if (directiveName.length < 1) {
          throwError(state, "directive name must not be less than one character in length");
        }
        while (ch !== 0) {
          while (is_WHITE_SPACE(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          if (ch === 35) {
            do {
              ch = state.input.charCodeAt(++state.position);
            } while (ch !== 0 && !is_EOL(ch));
            break;
          }
          if (is_EOL(ch)) break;
          _position = state.position;
          while (ch !== 0 && !is_WS_OR_EOL(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          directiveArgs.push(state.input.slice(_position, state.position));
        }
        if (ch !== 0) readLineBreak(state);
        if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
          directiveHandlers[directiveName](state, directiveName, directiveArgs);
        } else {
          throwWarning(state, 'unknown document directive "' + directiveName + '"');
        }
      }
      skipSeparationSpace(state, true, -1);
      if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
        state.position += 3;
        skipSeparationSpace(state, true, -1);
      } else if (hasDirectives) {
        throwError(state, "directives end mark is expected");
      }
      composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
      skipSeparationSpace(state, true, -1);
      if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
        throwWarning(state, "non-ASCII line breaks are interpreted as content");
      }
      state.documents.push(state.result);
      if (state.position === state.lineStart && testDocumentSeparator(state)) {
        if (state.input.charCodeAt(state.position) === 46) {
          state.position += 3;
          skipSeparationSpace(state, true, -1);
        }
        return;
      }
      if (state.position < state.length - 1) {
        throwError(state, "end of the stream or a document separator is expected");
      } else {
        return;
      }
    }
    function loadDocuments(input, options) {
      input = String(input);
      options = options || {};
      if (input.length !== 0) {
        if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
          input += "\n";
        }
        if (input.charCodeAt(0) === 65279) {
          input = input.slice(1);
        }
      }
      var state = new State(input, options);
      var nullpos = input.indexOf("\0");
      if (nullpos !== -1) {
        state.position = nullpos;
        throwError(state, "null byte is not allowed in input");
      }
      state.input += "\0";
      while (state.input.charCodeAt(state.position) === 32) {
        state.lineIndent += 1;
        state.position += 1;
      }
      while (state.position < state.length - 1) {
        readDocument(state);
      }
      return state.documents;
    }
    function loadAll(input, iterator, options) {
      if (iterator !== null && typeof iterator === "object" && typeof options === "undefined") {
        options = iterator;
        iterator = null;
      }
      var documents = loadDocuments(input, options);
      if (typeof iterator !== "function") {
        return documents;
      }
      for (var index = 0, length = documents.length; index < length; index += 1) {
        iterator(documents[index]);
      }
    }
    function load2(input, options) {
      var documents = loadDocuments(input, options);
      if (documents.length === 0) {
        return void 0;
      } else if (documents.length === 1) {
        return documents[0];
      }
      throw new YAMLException("expected a single document in the stream, but found more");
    }
    module.exports.loadAll = loadAll;
    module.exports.load = load2;
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/dumper.js
var require_dumper = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/lib/dumper.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var common2 = require_common();
    var YAMLException = require_exception();
    var DEFAULT_SCHEMA = require_default();
    var _toString = Object.prototype.toString;
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var CHAR_BOM = 65279;
    var CHAR_TAB = 9;
    var CHAR_LINE_FEED = 10;
    var CHAR_CARRIAGE_RETURN = 13;
    var CHAR_SPACE = 32;
    var CHAR_EXCLAMATION = 33;
    var CHAR_DOUBLE_QUOTE = 34;
    var CHAR_SHARP = 35;
    var CHAR_PERCENT = 37;
    var CHAR_AMPERSAND = 38;
    var CHAR_SINGLE_QUOTE = 39;
    var CHAR_ASTERISK = 42;
    var CHAR_COMMA = 44;
    var CHAR_MINUS = 45;
    var CHAR_COLON = 58;
    var CHAR_EQUALS = 61;
    var CHAR_GREATER_THAN = 62;
    var CHAR_QUESTION = 63;
    var CHAR_COMMERCIAL_AT = 64;
    var CHAR_LEFT_SQUARE_BRACKET = 91;
    var CHAR_RIGHT_SQUARE_BRACKET = 93;
    var CHAR_GRAVE_ACCENT = 96;
    var CHAR_LEFT_CURLY_BRACKET = 123;
    var CHAR_VERTICAL_LINE = 124;
    var CHAR_RIGHT_CURLY_BRACKET = 125;
    var ESCAPE_SEQUENCES = {};
    ESCAPE_SEQUENCES[0] = "\\0";
    ESCAPE_SEQUENCES[7] = "\\a";
    ESCAPE_SEQUENCES[8] = "\\b";
    ESCAPE_SEQUENCES[9] = "\\t";
    ESCAPE_SEQUENCES[10] = "\\n";
    ESCAPE_SEQUENCES[11] = "\\v";
    ESCAPE_SEQUENCES[12] = "\\f";
    ESCAPE_SEQUENCES[13] = "\\r";
    ESCAPE_SEQUENCES[27] = "\\e";
    ESCAPE_SEQUENCES[34] = '\\"';
    ESCAPE_SEQUENCES[92] = "\\\\";
    ESCAPE_SEQUENCES[133] = "\\N";
    ESCAPE_SEQUENCES[160] = "\\_";
    ESCAPE_SEQUENCES[8232] = "\\L";
    ESCAPE_SEQUENCES[8233] = "\\P";
    var DEPRECATED_BOOLEANS_SYNTAX = [
      "y",
      "Y",
      "yes",
      "Yes",
      "YES",
      "on",
      "On",
      "ON",
      "n",
      "N",
      "no",
      "No",
      "NO",
      "off",
      "Off",
      "OFF"
    ];
    var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;
    function compileStyleMap(schema, map) {
      var result, keys, index, length, tag, style, type;
      if (map === null) return {};
      result = {};
      keys = Object.keys(map);
      for (index = 0, length = keys.length; index < length; index += 1) {
        tag = keys[index];
        style = String(map[tag]);
        if (tag.slice(0, 2) === "!!") {
          tag = "tag:yaml.org,2002:" + tag.slice(2);
        }
        type = schema.compiledTypeMap["fallback"][tag];
        if (type && _hasOwnProperty.call(type.styleAliases, style)) {
          style = type.styleAliases[style];
        }
        result[tag] = style;
      }
      return result;
    }
    function encodeHex(character) {
      var string, handle, length;
      string = character.toString(16).toUpperCase();
      if (character <= 255) {
        handle = "x";
        length = 2;
      } else if (character <= 65535) {
        handle = "u";
        length = 4;
      } else if (character <= 4294967295) {
        handle = "U";
        length = 8;
      } else {
        throw new YAMLException("code point within a string may not be greater than 0xFFFFFFFF");
      }
      return "\\" + handle + common2.repeat("0", length - string.length) + string;
    }
    var QUOTING_TYPE_SINGLE = 1;
    var QUOTING_TYPE_DOUBLE = 2;
    function State(options) {
      this.schema = options["schema"] || DEFAULT_SCHEMA;
      this.indent = Math.max(1, options["indent"] || 2);
      this.noArrayIndent = options["noArrayIndent"] || false;
      this.skipInvalid = options["skipInvalid"] || false;
      this.flowLevel = common2.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
      this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
      this.sortKeys = options["sortKeys"] || false;
      this.lineWidth = options["lineWidth"] || 80;
      this.noRefs = options["noRefs"] || false;
      this.noCompatMode = options["noCompatMode"] || false;
      this.condenseFlow = options["condenseFlow"] || false;
      this.quotingType = options["quotingType"] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
      this.forceQuotes = options["forceQuotes"] || false;
      this.replacer = typeof options["replacer"] === "function" ? options["replacer"] : null;
      this.implicitTypes = this.schema.compiledImplicit;
      this.explicitTypes = this.schema.compiledExplicit;
      this.tag = null;
      this.result = "";
      this.duplicates = [];
      this.usedDuplicates = null;
    }
    function indentString(string, spaces) {
      var ind = common2.repeat(" ", spaces), position = 0, next = -1, result = "", line, length = string.length;
      while (position < length) {
        next = string.indexOf("\n", position);
        if (next === -1) {
          line = string.slice(position);
          position = length;
        } else {
          line = string.slice(position, next + 1);
          position = next + 1;
        }
        if (line.length && line !== "\n") result += ind;
        result += line;
      }
      return result;
    }
    function generateNextLine(state, level) {
      return "\n" + common2.repeat(" ", state.indent * level);
    }
    function testImplicitResolving(state, str) {
      var index, length, type;
      for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
        type = state.implicitTypes[index];
        if (type.resolve(str)) {
          return true;
        }
      }
      return false;
    }
    function isWhitespace(c4) {
      return c4 === CHAR_SPACE || c4 === CHAR_TAB;
    }
    function isPrintable(c4) {
      return 32 <= c4 && c4 <= 126 || 161 <= c4 && c4 <= 55295 && c4 !== 8232 && c4 !== 8233 || 57344 <= c4 && c4 <= 65533 && c4 !== CHAR_BOM || 65536 <= c4 && c4 <= 1114111;
    }
    function isNsCharOrWhitespace(c4) {
      return isPrintable(c4) && c4 !== CHAR_BOM && c4 !== CHAR_CARRIAGE_RETURN && c4 !== CHAR_LINE_FEED;
    }
    function isPlainSafe(c4, prev, inblock) {
      var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c4);
      var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c4);
      return (
        // ns-plain-safe
        (inblock ? (
          // c = flow-in
          cIsNsCharOrWhitespace
        ) : cIsNsCharOrWhitespace && c4 !== CHAR_COMMA && c4 !== CHAR_LEFT_SQUARE_BRACKET && c4 !== CHAR_RIGHT_SQUARE_BRACKET && c4 !== CHAR_LEFT_CURLY_BRACKET && c4 !== CHAR_RIGHT_CURLY_BRACKET) && c4 !== CHAR_SHARP && !(prev === CHAR_COLON && !cIsNsChar) || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c4 === CHAR_SHARP || prev === CHAR_COLON && cIsNsChar
      );
    }
    function isPlainSafeFirst(c4) {
      return isPrintable(c4) && c4 !== CHAR_BOM && !isWhitespace(c4) && c4 !== CHAR_MINUS && c4 !== CHAR_QUESTION && c4 !== CHAR_COLON && c4 !== CHAR_COMMA && c4 !== CHAR_LEFT_SQUARE_BRACKET && c4 !== CHAR_RIGHT_SQUARE_BRACKET && c4 !== CHAR_LEFT_CURLY_BRACKET && c4 !== CHAR_RIGHT_CURLY_BRACKET && c4 !== CHAR_SHARP && c4 !== CHAR_AMPERSAND && c4 !== CHAR_ASTERISK && c4 !== CHAR_EXCLAMATION && c4 !== CHAR_VERTICAL_LINE && c4 !== CHAR_EQUALS && c4 !== CHAR_GREATER_THAN && c4 !== CHAR_SINGLE_QUOTE && c4 !== CHAR_DOUBLE_QUOTE && c4 !== CHAR_PERCENT && c4 !== CHAR_COMMERCIAL_AT && c4 !== CHAR_GRAVE_ACCENT;
    }
    function isPlainSafeLast(c4) {
      return !isWhitespace(c4) && c4 !== CHAR_COLON;
    }
    function codePointAt(string, pos) {
      var first = string.charCodeAt(pos), second;
      if (first >= 55296 && first <= 56319 && pos + 1 < string.length) {
        second = string.charCodeAt(pos + 1);
        if (second >= 56320 && second <= 57343) {
          return (first - 55296) * 1024 + second - 56320 + 65536;
        }
      }
      return first;
    }
    function needIndentIndicator(string) {
      var leadingSpaceRe = /^\n* /;
      return leadingSpaceRe.test(string);
    }
    var STYLE_PLAIN = 1;
    var STYLE_SINGLE = 2;
    var STYLE_LITERAL = 3;
    var STYLE_FOLDED = 4;
    var STYLE_DOUBLE = 5;
    function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {
      var i2;
      var char = 0;
      var prevChar = null;
      var hasLineBreak = false;
      var hasFoldableLine = false;
      var shouldTrackWidth = lineWidth !== -1;
      var previousLineBreak = -1;
      var plain = isPlainSafeFirst(codePointAt(string, 0)) && isPlainSafeLast(codePointAt(string, string.length - 1));
      if (singleLineOnly || forceQuotes) {
        for (i2 = 0; i2 < string.length; char >= 65536 ? i2 += 2 : i2++) {
          char = codePointAt(string, i2);
          if (!isPrintable(char)) {
            return STYLE_DOUBLE;
          }
          plain = plain && isPlainSafe(char, prevChar, inblock);
          prevChar = char;
        }
      } else {
        for (i2 = 0; i2 < string.length; char >= 65536 ? i2 += 2 : i2++) {
          char = codePointAt(string, i2);
          if (char === CHAR_LINE_FEED) {
            hasLineBreak = true;
            if (shouldTrackWidth) {
              hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.
              i2 - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ";
              previousLineBreak = i2;
            }
          } else if (!isPrintable(char)) {
            return STYLE_DOUBLE;
          }
          plain = plain && isPlainSafe(char, prevChar, inblock);
          prevChar = char;
        }
        hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i2 - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ");
      }
      if (!hasLineBreak && !hasFoldableLine) {
        if (plain && !forceQuotes && !testAmbiguousType(string)) {
          return STYLE_PLAIN;
        }
        return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
      }
      if (indentPerLevel > 9 && needIndentIndicator(string)) {
        return STYLE_DOUBLE;
      }
      if (!forceQuotes) {
        return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
      }
      return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
    }
    function writeScalar(state, string, level, iskey, inblock) {
      state.dump = function() {
        if (string.length === 0) {
          return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
        }
        if (!state.noCompatMode) {
          if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {
            return state.quotingType === QUOTING_TYPE_DOUBLE ? '"' + string + '"' : "'" + string + "'";
          }
        }
        var indent = state.indent * Math.max(1, level);
        var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
        var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
        function testAmbiguity(string2) {
          return testImplicitResolving(state, string2);
        }
        switch (chooseScalarStyle(
          string,
          singleLineOnly,
          state.indent,
          lineWidth,
          testAmbiguity,
          state.quotingType,
          state.forceQuotes && !iskey,
          inblock
        )) {
          case STYLE_PLAIN:
            return string;
          case STYLE_SINGLE:
            return "'" + string.replace(/'/g, "''") + "'";
          case STYLE_LITERAL:
            return "|" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
          case STYLE_FOLDED:
            return ">" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
          case STYLE_DOUBLE:
            return '"' + escapeString(string, lineWidth) + '"';
          default:
            throw new YAMLException("impossible error: invalid scalar style");
        }
      }();
    }
    function blockHeader(string, indentPerLevel) {
      var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : "";
      var clip = string[string.length - 1] === "\n";
      var keep = clip && (string[string.length - 2] === "\n" || string === "\n");
      var chomp = keep ? "+" : clip ? "" : "-";
      return indentIndicator + chomp + "\n";
    }
    function dropEndingNewline(string) {
      return string[string.length - 1] === "\n" ? string.slice(0, -1) : string;
    }
    function foldString(string, width) {
      var lineRe = /(\n+)([^\n]*)/g;
      var result = function() {
        var nextLF = string.indexOf("\n");
        nextLF = nextLF !== -1 ? nextLF : string.length;
        lineRe.lastIndex = nextLF;
        return foldLine(string.slice(0, nextLF), width);
      }();
      var prevMoreIndented = string[0] === "\n" || string[0] === " ";
      var moreIndented;
      var match;
      while (match = lineRe.exec(string)) {
        var prefix = match[1], line = match[2];
        moreIndented = line[0] === " ";
        result += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine(line, width);
        prevMoreIndented = moreIndented;
      }
      return result;
    }
    function foldLine(line, width) {
      if (line === "" || line[0] === " ") return line;
      var breakRe = / [^ ]/g;
      var match;
      var start = 0, end, curr = 0, next = 0;
      var result = "";
      while (match = breakRe.exec(line)) {
        next = match.index;
        if (next - start > width) {
          end = curr > start ? curr : next;
          result += "\n" + line.slice(start, end);
          start = end + 1;
        }
        curr = next;
      }
      result += "\n";
      if (line.length - start > width && curr > start) {
        result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
      } else {
        result += line.slice(start);
      }
      return result.slice(1);
    }
    function escapeString(string) {
      var result = "";
      var char = 0;
      var escapeSeq;
      for (var i2 = 0; i2 < string.length; char >= 65536 ? i2 += 2 : i2++) {
        char = codePointAt(string, i2);
        escapeSeq = ESCAPE_SEQUENCES[char];
        if (!escapeSeq && isPrintable(char)) {
          result += string[i2];
          if (char >= 65536) result += string[i2 + 1];
        } else {
          result += escapeSeq || encodeHex(char);
        }
      }
      return result;
    }
    function writeFlowSequence(state, level, object) {
      var _result = "", _tag = state.tag, index, length, value2;
      for (index = 0, length = object.length; index < length; index += 1) {
        value2 = object[index];
        if (state.replacer) {
          value2 = state.replacer.call(object, String(index), value2);
        }
        if (writeNode(state, level, value2, false, false) || typeof value2 === "undefined" && writeNode(state, level, null, false, false)) {
          if (_result !== "") _result += "," + (!state.condenseFlow ? " " : "");
          _result += state.dump;
        }
      }
      state.tag = _tag;
      state.dump = "[" + _result + "]";
    }
    function writeBlockSequence(state, level, object, compact) {
      var _result = "", _tag = state.tag, index, length, value2;
      for (index = 0, length = object.length; index < length; index += 1) {
        value2 = object[index];
        if (state.replacer) {
          value2 = state.replacer.call(object, String(index), value2);
        }
        if (writeNode(state, level + 1, value2, true, true, false, true) || typeof value2 === "undefined" && writeNode(state, level + 1, null, true, true, false, true)) {
          if (!compact || _result !== "") {
            _result += generateNextLine(state, level);
          }
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            _result += "-";
          } else {
            _result += "- ";
          }
          _result += state.dump;
        }
      }
      state.tag = _tag;
      state.dump = _result || "[]";
    }
    function writeFlowMapping(state, level, object) {
      var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
      for (index = 0, length = objectKeyList.length; index < length; index += 1) {
        pairBuffer = "";
        if (_result !== "") pairBuffer += ", ";
        if (state.condenseFlow) pairBuffer += '"';
        objectKey = objectKeyList[index];
        objectValue = object[objectKey];
        if (state.replacer) {
          objectValue = state.replacer.call(object, objectKey, objectValue);
        }
        if (!writeNode(state, level, objectKey, false, false)) {
          continue;
        }
        if (state.dump.length > 1024) pairBuffer += "? ";
        pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
        if (!writeNode(state, level, objectValue, false, false)) {
          continue;
        }
        pairBuffer += state.dump;
        _result += pairBuffer;
      }
      state.tag = _tag;
      state.dump = "{" + _result + "}";
    }
    function writeBlockMapping(state, level, object, compact) {
      var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
      if (state.sortKeys === true) {
        objectKeyList.sort();
      } else if (typeof state.sortKeys === "function") {
        objectKeyList.sort(state.sortKeys);
      } else if (state.sortKeys) {
        throw new YAMLException("sortKeys must be a boolean or a function");
      }
      for (index = 0, length = objectKeyList.length; index < length; index += 1) {
        pairBuffer = "";
        if (!compact || _result !== "") {
          pairBuffer += generateNextLine(state, level);
        }
        objectKey = objectKeyList[index];
        objectValue = object[objectKey];
        if (state.replacer) {
          objectValue = state.replacer.call(object, objectKey, objectValue);
        }
        if (!writeNode(state, level + 1, objectKey, true, true, true)) {
          continue;
        }
        explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
        if (explicitPair) {
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            pairBuffer += "?";
          } else {
            pairBuffer += "? ";
          }
        }
        pairBuffer += state.dump;
        if (explicitPair) {
          pairBuffer += generateNextLine(state, level);
        }
        if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
          continue;
        }
        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
          pairBuffer += ":";
        } else {
          pairBuffer += ": ";
        }
        pairBuffer += state.dump;
        _result += pairBuffer;
      }
      state.tag = _tag;
      state.dump = _result || "{}";
    }
    function detectType(state, object, explicit) {
      var _result, typeList, index, length, type, style;
      typeList = explicit ? state.explicitTypes : state.implicitTypes;
      for (index = 0, length = typeList.length; index < length; index += 1) {
        type = typeList[index];
        if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === "object" && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {
          if (explicit) {
            if (type.multi && type.representName) {
              state.tag = type.representName(object);
            } else {
              state.tag = type.tag;
            }
          } else {
            state.tag = "?";
          }
          if (type.represent) {
            style = state.styleMap[type.tag] || type.defaultStyle;
            if (_toString.call(type.represent) === "[object Function]") {
              _result = type.represent(object, style);
            } else if (_hasOwnProperty.call(type.represent, style)) {
              _result = type.represent[style](object, style);
            } else {
              throw new YAMLException("!<" + type.tag + '> tag resolver accepts not "' + style + '" style');
            }
            state.dump = _result;
          }
          return true;
        }
      }
      return false;
    }
    function writeNode(state, level, object, block, compact, iskey, isblockseq) {
      state.tag = null;
      state.dump = object;
      if (!detectType(state, object, false)) {
        detectType(state, object, true);
      }
      var type = _toString.call(state.dump);
      var inblock = block;
      var tagStr;
      if (block) {
        block = state.flowLevel < 0 || state.flowLevel > level;
      }
      var objectOrArray = type === "[object Object]" || type === "[object Array]", duplicateIndex, duplicate;
      if (objectOrArray) {
        duplicateIndex = state.duplicates.indexOf(object);
        duplicate = duplicateIndex !== -1;
      }
      if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
        compact = false;
      }
      if (duplicate && state.usedDuplicates[duplicateIndex]) {
        state.dump = "*ref_" + duplicateIndex;
      } else {
        if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
          state.usedDuplicates[duplicateIndex] = true;
        }
        if (type === "[object Object]") {
          if (block && Object.keys(state.dump).length !== 0) {
            writeBlockMapping(state, level, state.dump, compact);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + state.dump;
            }
          } else {
            writeFlowMapping(state, level, state.dump);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + " " + state.dump;
            }
          }
        } else if (type === "[object Array]") {
          if (block && state.dump.length !== 0) {
            if (state.noArrayIndent && !isblockseq && level > 0) {
              writeBlockSequence(state, level - 1, state.dump, compact);
            } else {
              writeBlockSequence(state, level, state.dump, compact);
            }
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + state.dump;
            }
          } else {
            writeFlowSequence(state, level, state.dump);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + " " + state.dump;
            }
          }
        } else if (type === "[object String]") {
          if (state.tag !== "?") {
            writeScalar(state, state.dump, level, iskey, inblock);
          }
        } else if (type === "[object Undefined]") {
          return false;
        } else {
          if (state.skipInvalid) return false;
          throw new YAMLException("unacceptable kind of an object to dump " + type);
        }
        if (state.tag !== null && state.tag !== "?") {
          tagStr = encodeURI(
            state.tag[0] === "!" ? state.tag.slice(1) : state.tag
          ).replace(/!/g, "%21");
          if (state.tag[0] === "!") {
            tagStr = "!" + tagStr;
          } else if (tagStr.slice(0, 18) === "tag:yaml.org,2002:") {
            tagStr = "!!" + tagStr.slice(18);
          } else {
            tagStr = "!<" + tagStr + ">";
          }
          state.dump = tagStr + " " + state.dump;
        }
      }
      return true;
    }
    function getDuplicateReferences(object, state) {
      var objects = [], duplicatesIndexes = [], index, length;
      inspectNode(object, objects, duplicatesIndexes);
      for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
        state.duplicates.push(objects[duplicatesIndexes[index]]);
      }
      state.usedDuplicates = new Array(length);
    }
    function inspectNode(object, objects, duplicatesIndexes) {
      var objectKeyList, index, length;
      if (object !== null && typeof object === "object") {
        index = objects.indexOf(object);
        if (index !== -1) {
          if (duplicatesIndexes.indexOf(index) === -1) {
            duplicatesIndexes.push(index);
          }
        } else {
          objects.push(object);
          if (Array.isArray(object)) {
            for (index = 0, length = object.length; index < length; index += 1) {
              inspectNode(object[index], objects, duplicatesIndexes);
            }
          } else {
            objectKeyList = Object.keys(object);
            for (index = 0, length = objectKeyList.length; index < length; index += 1) {
              inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
            }
          }
        }
      }
    }
    function dump(input, options) {
      options = options || {};
      var state = new State(options);
      if (!state.noRefs) getDuplicateReferences(input, state);
      var value2 = input;
      if (state.replacer) {
        value2 = state.replacer.call({ "": value2 }, "", value2);
      }
      if (writeNode(state, 0, value2, true, true)) return state.dump + "\n";
      return "";
    }
    module.exports.dump = dump;
  }
});

// ../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/index.js
var require_js_yaml = __commonJS({
  "../../.yarn/cache/js-yaml-npm-4.1.0-da4e64980b-184a24b4ea.zip/node_modules/js-yaml/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var loader = require_loader();
    var dumper = require_dumper();
    function renamed(from, to) {
      return function() {
        throw new Error("Function yaml." + from + " is removed in js-yaml 4. Use yaml." + to + " instead, which is now safe by default.");
      };
    }
    module.exports.Type = require_type();
    module.exports.Schema = require_schema();
    module.exports.FAILSAFE_SCHEMA = require_failsafe();
    module.exports.JSON_SCHEMA = require_json();
    module.exports.CORE_SCHEMA = require_core();
    module.exports.DEFAULT_SCHEMA = require_default();
    module.exports.load = loader.load;
    module.exports.loadAll = loader.loadAll;
    module.exports.dump = dumper.dump;
    module.exports.YAMLException = require_exception();
    module.exports.types = {
      binary: require_binary(),
      float: require_float(),
      map: require_map(),
      null: require_null(),
      pairs: require_pairs(),
      set: require_set(),
      timestamp: require_timestamp(),
      bool: require_bool(),
      int: require_int(),
      merge: require_merge(),
      omap: require_omap(),
      seq: require_seq(),
      str: require_str()
    };
    module.exports.safeLoad = renamed("safeLoad", "load");
    module.exports.safeLoadAll = renamed("safeLoadAll", "loadAll");
    module.exports.safeDump = renamed("safeDump", "dump");
  }
});

// ../../.yarn/__virtual__/cosmiconfig-virtual-6be535658c/0/cache/cosmiconfig-npm-9.0.0-1cc563163a-1c1703be4f.zip/node_modules/cosmiconfig/dist/loaders.js
var require_loaders = __commonJS({
  "../../.yarn/__virtual__/cosmiconfig-virtual-6be535658c/0/cache/cosmiconfig-npm-9.0.0-1cc563163a-1c1703be4f.zip/node_modules/cosmiconfig/dist/loaders.js"(exports) {
    "use strict";
    init_esm_shims();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadTs = exports.loadTsSync = exports.loadYaml = exports.loadJson = exports.loadJs = exports.loadJsSync = void 0;
    var fs_1 = __require("fs");
    var promises_1 = __require("fs/promises");
    var path_1 = __importDefault(__require("path"));
    var url_1 = __require("url");
    var importFresh;
    var loadJsSync = function loadJsSync2(filepath) {
      if (importFresh === void 0) {
        importFresh = require_import_fresh();
      }
      return importFresh(filepath);
    };
    exports.loadJsSync = loadJsSync;
    var loadJs = async function loadJs2(filepath) {
      try {
        const { href } = (0, url_1.pathToFileURL)(filepath);
        return (await import(href)).default;
      } catch (error) {
        try {
          return (0, exports.loadJsSync)(filepath, "");
        } catch (requireError) {
          if (requireError.code === "ERR_REQUIRE_ESM" || requireError instanceof SyntaxError && requireError.toString().includes("Cannot use import statement outside a module")) {
            throw error;
          }
          throw requireError;
        }
      }
    };
    exports.loadJs = loadJs;
    var parseJson;
    var loadJson = function loadJson2(filepath, content) {
      if (parseJson === void 0) {
        parseJson = require_parse_json();
      }
      try {
        return parseJson(content);
      } catch (error) {
        error.message = `JSON Error in ${filepath}:
${error.message}`;
        throw error;
      }
    };
    exports.loadJson = loadJson;
    var yaml;
    var loadYaml = function loadYaml2(filepath, content) {
      if (yaml === void 0) {
        yaml = require_js_yaml();
      }
      try {
        return yaml.load(content);
      } catch (error) {
        error.message = `YAML Error in ${filepath}:
${error.message}`;
        throw error;
      }
    };
    exports.loadYaml = loadYaml;
    var typescript;
    var loadTsSync = function loadTsSync2(filepath, content) {
      if (typescript === void 0) {
        typescript = require_typescript();
      }
      const compiledFilepath = `${filepath.slice(0, -2)}cjs`;
      try {
        const config = resolveTsConfig(path_1.default.dirname(filepath)) ?? {};
        config.compilerOptions = {
          ...config.compilerOptions,
          module: typescript.ModuleKind.NodeNext,
          moduleResolution: typescript.ModuleResolutionKind.NodeNext,
          target: typescript.ScriptTarget.ES2022,
          noEmit: false
        };
        content = typescript.transpileModule(content, config).outputText;
        (0, fs_1.writeFileSync)(compiledFilepath, content);
        return (0, exports.loadJsSync)(compiledFilepath, content).default;
      } catch (error) {
        error.message = `TypeScript Error in ${filepath}:
${error.message}`;
        throw error;
      } finally {
        if ((0, fs_1.existsSync)(compiledFilepath)) {
          (0, fs_1.rmSync)(compiledFilepath);
        }
      }
    };
    exports.loadTsSync = loadTsSync;
    var loadTs = async function loadTs2(filepath, content) {
      if (typescript === void 0) {
        typescript = (await import("./typescript-L5EPUEWV.js")).default;
      }
      const compiledFilepath = `${filepath.slice(0, -2)}mjs`;
      let transpiledContent;
      try {
        try {
          const config = resolveTsConfig(path_1.default.dirname(filepath)) ?? {};
          config.compilerOptions = {
            ...config.compilerOptions,
            module: typescript.ModuleKind.ES2022,
            moduleResolution: typescript.ModuleResolutionKind.Bundler,
            target: typescript.ScriptTarget.ES2022,
            noEmit: false
          };
          transpiledContent = typescript.transpileModule(content, config).outputText;
          await (0, promises_1.writeFile)(compiledFilepath, transpiledContent);
        } catch (error) {
          error.message = `TypeScript Error in ${filepath}:
${error.message}`;
          throw error;
        }
        return await (0, exports.loadJs)(compiledFilepath, transpiledContent);
      } finally {
        if ((0, fs_1.existsSync)(compiledFilepath)) {
          await (0, promises_1.rm)(compiledFilepath);
        }
      }
    };
    exports.loadTs = loadTs;
    function resolveTsConfig(directory) {
      const filePath = typescript.findConfigFile(directory, (fileName) => {
        return typescript.sys.fileExists(fileName);
      });
      if (filePath !== void 0) {
        const { config, error } = typescript.readConfigFile(filePath, (path9) => typescript.sys.readFile(path9));
        if (error) {
          throw new Error(`Error in ${filePath}: ${error.messageText.toString()}`);
        }
        return config;
      }
      return;
    }
  }
});

// ../../.yarn/__virtual__/cosmiconfig-virtual-6be535658c/0/cache/cosmiconfig-npm-9.0.0-1cc563163a-1c1703be4f.zip/node_modules/cosmiconfig/dist/defaults.js
var require_defaults = __commonJS({
  "../../.yarn/__virtual__/cosmiconfig-virtual-6be535658c/0/cache/cosmiconfig-npm-9.0.0-1cc563163a-1c1703be4f.zip/node_modules/cosmiconfig/dist/defaults.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultLoadersSync = exports.defaultLoaders = exports.metaSearchPlaces = exports.globalConfigSearchPlacesSync = exports.globalConfigSearchPlaces = exports.getDefaultSearchPlacesSync = exports.getDefaultSearchPlaces = void 0;
    var loaders_1 = require_loaders();
    function getDefaultSearchPlaces(moduleName) {
      return [
        "package.json",
        `.${moduleName}rc`,
        `.${moduleName}rc.json`,
        `.${moduleName}rc.yaml`,
        `.${moduleName}rc.yml`,
        `.${moduleName}rc.js`,
        `.${moduleName}rc.ts`,
        `.${moduleName}rc.cjs`,
        `.${moduleName}rc.mjs`,
        `.config/${moduleName}rc`,
        `.config/${moduleName}rc.json`,
        `.config/${moduleName}rc.yaml`,
        `.config/${moduleName}rc.yml`,
        `.config/${moduleName}rc.js`,
        `.config/${moduleName}rc.ts`,
        `.config/${moduleName}rc.cjs`,
        `.config/${moduleName}rc.mjs`,
        `${moduleName}.config.js`,
        `${moduleName}.config.ts`,
        `${moduleName}.config.cjs`,
        `${moduleName}.config.mjs`
      ];
    }
    exports.getDefaultSearchPlaces = getDefaultSearchPlaces;
    function getDefaultSearchPlacesSync(moduleName) {
      return [
        "package.json",
        `.${moduleName}rc`,
        `.${moduleName}rc.json`,
        `.${moduleName}rc.yaml`,
        `.${moduleName}rc.yml`,
        `.${moduleName}rc.js`,
        `.${moduleName}rc.ts`,
        `.${moduleName}rc.cjs`,
        `.config/${moduleName}rc`,
        `.config/${moduleName}rc.json`,
        `.config/${moduleName}rc.yaml`,
        `.config/${moduleName}rc.yml`,
        `.config/${moduleName}rc.js`,
        `.config/${moduleName}rc.ts`,
        `.config/${moduleName}rc.cjs`,
        `${moduleName}.config.js`,
        `${moduleName}.config.ts`,
        `${moduleName}.config.cjs`
      ];
    }
    exports.getDefaultSearchPlacesSync = getDefaultSearchPlacesSync;
    exports.globalConfigSearchPlaces = [
      "config",
      "config.json",
      "config.yaml",
      "config.yml",
      "config.js",
      "config.ts",
      "config.cjs",
      "config.mjs"
    ];
    exports.globalConfigSearchPlacesSync = [
      "config",
      "config.json",
      "config.yaml",
      "config.yml",
      "config.js",
      "config.ts",
      "config.cjs"
    ];
    exports.metaSearchPlaces = [
      "package.json",
      "package.yaml",
      ".config/config.json",
      ".config/config.yaml",
      ".config/config.yml",
      ".config/config.js",
      ".config/config.ts",
      ".config/config.cjs",
      ".config/config.mjs"
    ];
    exports.defaultLoaders = Object.freeze({
      ".mjs": loaders_1.loadJs,
      ".cjs": loaders_1.loadJs,
      ".js": loaders_1.loadJs,
      ".ts": loaders_1.loadTs,
      ".json": loaders_1.loadJson,
      ".yaml": loaders_1.loadYaml,
      ".yml": loaders_1.loadYaml,
      noExt: loaders_1.loadYaml
    });
    exports.defaultLoadersSync = Object.freeze({
      ".cjs": loaders_1.loadJsSync,
      ".js": loaders_1.loadJsSync,
      ".ts": loaders_1.loadTsSync,
      ".json": loaders_1.loadJson,
      ".yaml": loaders_1.loadYaml,
      ".yml": loaders_1.loadYaml,
      noExt: loaders_1.loadYaml
    });
  }
});

// ../../.yarn/cache/env-paths-npm-2.2.1-d4ad325f2a-285325677b.zip/node_modules/env-paths/index.js
var require_env_paths = __commonJS({
  "../../.yarn/cache/env-paths-npm-2.2.1-d4ad325f2a-285325677b.zip/node_modules/env-paths/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var path9 = __require("path");
    var os = __require("os");
    var homedir = os.homedir();
    var tmpdir = os.tmpdir();
    var { env } = process;
    var macos = (name) => {
      const library = path9.join(homedir, "Library");
      return {
        data: path9.join(library, "Application Support", name),
        config: path9.join(library, "Preferences", name),
        cache: path9.join(library, "Caches", name),
        log: path9.join(library, "Logs", name),
        temp: path9.join(tmpdir, name)
      };
    };
    var windows = (name) => {
      const appData = env.APPDATA || path9.join(homedir, "AppData", "Roaming");
      const localAppData = env.LOCALAPPDATA || path9.join(homedir, "AppData", "Local");
      return {
        // Data/config/cache/log are invented by me as Windows isn't opinionated about this
        data: path9.join(localAppData, name, "Data"),
        config: path9.join(appData, name, "Config"),
        cache: path9.join(localAppData, name, "Cache"),
        log: path9.join(localAppData, name, "Log"),
        temp: path9.join(tmpdir, name)
      };
    };
    var linux = (name) => {
      const username = path9.basename(homedir);
      return {
        data: path9.join(env.XDG_DATA_HOME || path9.join(homedir, ".local", "share"), name),
        config: path9.join(env.XDG_CONFIG_HOME || path9.join(homedir, ".config"), name),
        cache: path9.join(env.XDG_CACHE_HOME || path9.join(homedir, ".cache"), name),
        // https://wiki.debian.org/XDGBaseDirectorySpecification#state
        log: path9.join(env.XDG_STATE_HOME || path9.join(homedir, ".local", "state"), name),
        temp: path9.join(tmpdir, username, name)
      };
    };
    var envPaths = (name, options) => {
      if (typeof name !== "string") {
        throw new TypeError(`Expected string, got ${typeof name}`);
      }
      options = Object.assign({ suffix: "nodejs" }, options);
      if (options.suffix) {
        name += `-${options.suffix}`;
      }
      if (process.platform === "darwin") {
        return macos(name);
      }
      if (process.platform === "win32") {
        return windows(name);
      }
      return linux(name);
    };
    module.exports = envPaths;
    module.exports.default = envPaths;
  }
});

// ../../.yarn/__virtual__/cosmiconfig-virtual-6be535658c/0/cache/cosmiconfig-npm-9.0.0-1cc563163a-1c1703be4f.zip/node_modules/cosmiconfig/dist/util.js
var require_util = __commonJS({
  "../../.yarn/__virtual__/cosmiconfig-virtual-6be535658c/0/cache/cosmiconfig-npm-9.0.0-1cc563163a-1c1703be4f.zip/node_modules/cosmiconfig/dist/util.js"(exports) {
    "use strict";
    init_esm_shims();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o3, m2, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m2, k3);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k3];
        } };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m2, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m2[k3];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o3, v) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v });
    } : function(o3, v) {
      o3["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isDirectorySync = exports.isDirectory = exports.removeUndefinedValuesFromObject = exports.getPropertyByPath = exports.emplace = void 0;
    var fs_1 = __importStar(__require("fs"));
    function emplace(map, key, fn) {
      const cached = map.get(key);
      if (cached !== void 0) {
        return cached;
      }
      const result = fn();
      map.set(key, result);
      return result;
    }
    exports.emplace = emplace;
    function getPropertyByPath(source, path9) {
      if (typeof path9 === "string" && Object.prototype.hasOwnProperty.call(source, path9)) {
        return source[path9];
      }
      const parsedPath = typeof path9 === "string" ? path9.split(".") : path9;
      return parsedPath.reduce((previous, key) => {
        if (previous === void 0) {
          return previous;
        }
        return previous[key];
      }, source);
    }
    exports.getPropertyByPath = getPropertyByPath;
    function removeUndefinedValuesFromObject(options) {
      return Object.fromEntries(Object.entries(options).filter(([, value2]) => value2 !== void 0));
    }
    exports.removeUndefinedValuesFromObject = removeUndefinedValuesFromObject;
    async function isDirectory(path9) {
      try {
        const stat = await fs_1.promises.stat(path9);
        return stat.isDirectory();
      } catch (e2) {
        if (e2.code === "ENOENT") {
          return false;
        }
        throw e2;
      }
    }
    exports.isDirectory = isDirectory;
    function isDirectorySync(path9) {
      try {
        const stat = fs_1.default.statSync(path9);
        return stat.isDirectory();
      } catch (e2) {
        if (e2.code === "ENOENT") {
          return false;
        }
        throw e2;
      }
    }
    exports.isDirectorySync = isDirectorySync;
  }
});

// ../../.yarn/__virtual__/cosmiconfig-virtual-6be535658c/0/cache/cosmiconfig-npm-9.0.0-1cc563163a-1c1703be4f.zip/node_modules/cosmiconfig/dist/ExplorerBase.js
var require_ExplorerBase = __commonJS({
  "../../.yarn/__virtual__/cosmiconfig-virtual-6be535658c/0/cache/cosmiconfig-npm-9.0.0-1cc563163a-1c1703be4f.zip/node_modules/cosmiconfig/dist/ExplorerBase.js"(exports) {
    "use strict";
    init_esm_shims();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getExtensionDescription = exports.ExplorerBase = void 0;
    var env_paths_1 = __importDefault(require_env_paths());
    var os_1 = __importDefault(__require("os"));
    var path_1 = __importDefault(__require("path"));
    var util_js_1 = require_util();
    var ExplorerBase = class {
      #loadingMetaConfig = false;
      config;
      loadCache;
      searchCache;
      constructor(options) {
        this.config = options;
        if (options.cache) {
          this.loadCache = /* @__PURE__ */ new Map();
          this.searchCache = /* @__PURE__ */ new Map();
        }
        this.#validateConfig();
      }
      set loadingMetaConfig(value2) {
        this.#loadingMetaConfig = value2;
      }
      #validateConfig() {
        const config = this.config;
        for (const place of config.searchPlaces) {
          const extension = path_1.default.extname(place);
          const loader = this.config.loaders[extension || "noExt"] ?? this.config.loaders["default"];
          if (loader === void 0) {
            throw new Error(`Missing loader for ${getExtensionDescription(place)}.`);
          }
          if (typeof loader !== "function") {
            throw new Error(`Loader for ${getExtensionDescription(place)} is not a function: Received ${typeof loader}.`);
          }
        }
      }
      clearLoadCache() {
        if (this.loadCache) {
          this.loadCache.clear();
        }
      }
      clearSearchCache() {
        if (this.searchCache) {
          this.searchCache.clear();
        }
      }
      clearCaches() {
        this.clearLoadCache();
        this.clearSearchCache();
      }
      toCosmiconfigResult(filepath, config) {
        if (config === null) {
          return null;
        }
        if (config === void 0) {
          return { filepath, config: void 0, isEmpty: true };
        }
        if (this.config.applyPackagePropertyPathToConfiguration || this.#loadingMetaConfig) {
          const packageProp = this.config.packageProp ?? this.config.moduleName;
          config = (0, util_js_1.getPropertyByPath)(config, packageProp);
        }
        if (config === void 0) {
          return { filepath, config: void 0, isEmpty: true };
        }
        return { config, filepath };
      }
      validateImports(containingFilePath, imports, importStack) {
        const fileDirectory = path_1.default.dirname(containingFilePath);
        for (const importPath of imports) {
          if (typeof importPath !== "string") {
            throw new Error(`${containingFilePath}: Key $import must contain a string or a list of strings`);
          }
          const fullPath = path_1.default.resolve(fileDirectory, importPath);
          if (fullPath === containingFilePath) {
            throw new Error(`Self-import detected in ${containingFilePath}`);
          }
          const idx = importStack.indexOf(fullPath);
          if (idx !== -1) {
            throw new Error(`Circular import detected:
${[...importStack, fullPath].map((path9, i2) => `${i2 + 1}. ${path9}`).join("\n")} (same as ${idx + 1}.)`);
          }
        }
      }
      getSearchPlacesForDir(dir, globalConfigPlaces) {
        return (dir.isGlobalConfig ? globalConfigPlaces : this.config.searchPlaces).map((place) => path_1.default.join(dir.path, place));
      }
      getGlobalConfigDir() {
        return (0, env_paths_1.default)(this.config.moduleName, { suffix: "" }).config;
      }
      *getGlobalDirs(startDir) {
        const stopDir = path_1.default.resolve(this.config.stopDir ?? os_1.default.homedir());
        yield { path: startDir, isGlobalConfig: false };
        let currentDir = startDir;
        while (currentDir !== stopDir) {
          const parentDir = path_1.default.dirname(currentDir);
          if (parentDir === currentDir) {
            break;
          }
          yield { path: parentDir, isGlobalConfig: false };
          currentDir = parentDir;
        }
        yield { path: this.getGlobalConfigDir(), isGlobalConfig: true };
      }
    };
    exports.ExplorerBase = ExplorerBase;
    function getExtensionDescription(extension) {
      return extension ? `extension "${extension}"` : "files without extensions";
    }
    exports.getExtensionDescription = getExtensionDescription;
  }
});

// ../../.yarn/__virtual__/cosmiconfig-virtual-6be535658c/0/cache/cosmiconfig-npm-9.0.0-1cc563163a-1c1703be4f.zip/node_modules/cosmiconfig/dist/merge.js
var require_merge2 = __commonJS({
  "../../.yarn/__virtual__/cosmiconfig-virtual-6be535658c/0/cache/cosmiconfig-npm-9.0.0-1cc563163a-1c1703be4f.zip/node_modules/cosmiconfig/dist/merge.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mergeAll = exports.hasOwn = void 0;
    exports.hasOwn = Function.prototype.call.bind(Object.prototype.hasOwnProperty);
    var objToString = Function.prototype.call.bind(Object.prototype.toString);
    function isPlainObject2(obj) {
      return objToString(obj) === "[object Object]";
    }
    function merge(target, source, options) {
      for (const key of Object.keys(source)) {
        const newValue = source[key];
        if ((0, exports.hasOwn)(target, key)) {
          if (Array.isArray(target[key]) && Array.isArray(newValue)) {
            if (options.mergeArrays) {
              target[key].push(...newValue);
              continue;
            }
          } else if (isPlainObject2(target[key]) && isPlainObject2(newValue)) {
            target[key] = merge(target[key], newValue, options);
            continue;
          }
        }
        target[key] = newValue;
      }
      return target;
    }
    function mergeAll(objects, options) {
      return objects.reduce((target, source) => merge(target, source, options), {});
    }
    exports.mergeAll = mergeAll;
  }
});

// ../../.yarn/__virtual__/cosmiconfig-virtual-6be535658c/0/cache/cosmiconfig-npm-9.0.0-1cc563163a-1c1703be4f.zip/node_modules/cosmiconfig/dist/Explorer.js
var require_Explorer = __commonJS({
  "../../.yarn/__virtual__/cosmiconfig-virtual-6be535658c/0/cache/cosmiconfig-npm-9.0.0-1cc563163a-1c1703be4f.zip/node_modules/cosmiconfig/dist/Explorer.js"(exports) {
    "use strict";
    init_esm_shims();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Explorer = void 0;
    var promises_1 = __importDefault(__require("fs/promises"));
    var path_1 = __importDefault(__require("path"));
    var defaults_1 = require_defaults();
    var ExplorerBase_js_1 = require_ExplorerBase();
    var merge_1 = require_merge2();
    var util_js_1 = require_util();
    var Explorer = class extends ExplorerBase_js_1.ExplorerBase {
      async load(filepath) {
        filepath = path_1.default.resolve(filepath);
        const load2 = async () => {
          return await this.config.transform(await this.#readConfiguration(filepath));
        };
        if (this.loadCache) {
          return await (0, util_js_1.emplace)(this.loadCache, filepath, load2);
        }
        return await load2();
      }
      async search(from = "") {
        if (this.config.metaConfigFilePath) {
          this.loadingMetaConfig = true;
          const config = await this.load(this.config.metaConfigFilePath);
          this.loadingMetaConfig = false;
          if (config && !config.isEmpty) {
            return config;
          }
        }
        from = path_1.default.resolve(from);
        const dirs = this.#getDirs(from);
        const firstDirIter = await dirs.next();
        if (firstDirIter.done) {
          throw new Error(`Could not find any folders to iterate through (start from ${from})`);
        }
        let currentDir = firstDirIter.value;
        const search = async () => {
          if (await (0, util_js_1.isDirectory)(currentDir.path)) {
            for (const filepath of this.getSearchPlacesForDir(currentDir, defaults_1.globalConfigSearchPlaces)) {
              try {
                const result = await this.#readConfiguration(filepath);
                if (result !== null && !(result.isEmpty && this.config.ignoreEmptySearchPlaces)) {
                  return await this.config.transform(result);
                }
              } catch (error) {
                if (error.code === "ENOENT" || error.code === "EISDIR" || error.code === "ENOTDIR" || error.code === "EACCES") {
                  continue;
                }
                throw error;
              }
            }
          }
          const nextDirIter = await dirs.next();
          if (!nextDirIter.done) {
            currentDir = nextDirIter.value;
            if (this.searchCache) {
              return await (0, util_js_1.emplace)(this.searchCache, currentDir.path, search);
            }
            return await search();
          }
          return await this.config.transform(null);
        };
        if (this.searchCache) {
          return await (0, util_js_1.emplace)(this.searchCache, from, search);
        }
        return await search();
      }
      async #readConfiguration(filepath, importStack = []) {
        const contents = await promises_1.default.readFile(filepath, { encoding: "utf-8" });
        return this.toCosmiconfigResult(filepath, await this.#loadConfigFileWithImports(filepath, contents, importStack));
      }
      async #loadConfigFileWithImports(filepath, contents, importStack) {
        const loadedContent = await this.#loadConfiguration(filepath, contents);
        if (!loadedContent || !(0, merge_1.hasOwn)(loadedContent, "$import")) {
          return loadedContent;
        }
        const fileDirectory = path_1.default.dirname(filepath);
        const { $import: imports, ...ownContent } = loadedContent;
        const importPaths = Array.isArray(imports) ? imports : [imports];
        const newImportStack = [...importStack, filepath];
        this.validateImports(filepath, importPaths, newImportStack);
        const importedConfigs = await Promise.all(importPaths.map(async (importPath) => {
          const fullPath = path_1.default.resolve(fileDirectory, importPath);
          const result = await this.#readConfiguration(fullPath, newImportStack);
          return result?.config;
        }));
        return (0, merge_1.mergeAll)([...importedConfigs, ownContent], {
          mergeArrays: this.config.mergeImportArrays
        });
      }
      async #loadConfiguration(filepath, contents) {
        if (contents.trim() === "") {
          return;
        }
        const extension = path_1.default.extname(filepath);
        const loader = this.config.loaders[extension || "noExt"] ?? this.config.loaders["default"];
        if (!loader) {
          throw new Error(`No loader specified for ${(0, ExplorerBase_js_1.getExtensionDescription)(extension)}`);
        }
        try {
          const loadedContents = await loader(filepath, contents);
          if (path_1.default.basename(filepath, extension) !== "package") {
            return loadedContents;
          }
          return (0, util_js_1.getPropertyByPath)(loadedContents, this.config.packageProp ?? this.config.moduleName) ?? null;
        } catch (error) {
          error.filepath = filepath;
          throw error;
        }
      }
      async #fileExists(path9) {
        try {
          await promises_1.default.stat(path9);
          return true;
        } catch (e2) {
          return false;
        }
      }
      async *#getDirs(startDir) {
        switch (this.config.searchStrategy) {
          case "none": {
            yield { path: startDir, isGlobalConfig: false };
            return;
          }
          case "project": {
            let currentDir = startDir;
            while (true) {
              yield { path: currentDir, isGlobalConfig: false };
              for (const ext of ["json", "yaml"]) {
                const packageFile = path_1.default.join(currentDir, `package.${ext}`);
                if (await this.#fileExists(packageFile)) {
                  break;
                }
              }
              const parentDir = path_1.default.dirname(currentDir);
              if (parentDir === currentDir) {
                break;
              }
              currentDir = parentDir;
            }
            return;
          }
          case "global": {
            yield* this.getGlobalDirs(startDir);
          }
        }
      }
    };
    exports.Explorer = Explorer;
  }
});

// ../../.yarn/__virtual__/cosmiconfig-virtual-6be535658c/0/cache/cosmiconfig-npm-9.0.0-1cc563163a-1c1703be4f.zip/node_modules/cosmiconfig/dist/ExplorerSync.js
var require_ExplorerSync = __commonJS({
  "../../.yarn/__virtual__/cosmiconfig-virtual-6be535658c/0/cache/cosmiconfig-npm-9.0.0-1cc563163a-1c1703be4f.zip/node_modules/cosmiconfig/dist/ExplorerSync.js"(exports) {
    "use strict";
    init_esm_shims();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExplorerSync = void 0;
    var fs_1 = __importDefault(__require("fs"));
    var path_1 = __importDefault(__require("path"));
    var defaults_1 = require_defaults();
    var ExplorerBase_js_1 = require_ExplorerBase();
    var merge_1 = require_merge2();
    var util_js_1 = require_util();
    var ExplorerSync = class extends ExplorerBase_js_1.ExplorerBase {
      load(filepath) {
        filepath = path_1.default.resolve(filepath);
        const load2 = () => {
          return this.config.transform(this.#readConfiguration(filepath));
        };
        if (this.loadCache) {
          return (0, util_js_1.emplace)(this.loadCache, filepath, load2);
        }
        return load2();
      }
      search(from = "") {
        if (this.config.metaConfigFilePath) {
          this.loadingMetaConfig = true;
          const config = this.load(this.config.metaConfigFilePath);
          this.loadingMetaConfig = false;
          if (config && !config.isEmpty) {
            return config;
          }
        }
        from = path_1.default.resolve(from);
        const dirs = this.#getDirs(from);
        const firstDirIter = dirs.next();
        if (firstDirIter.done) {
          throw new Error(`Could not find any folders to iterate through (start from ${from})`);
        }
        let currentDir = firstDirIter.value;
        const search = () => {
          if ((0, util_js_1.isDirectorySync)(currentDir.path)) {
            for (const filepath of this.getSearchPlacesForDir(currentDir, defaults_1.globalConfigSearchPlacesSync)) {
              try {
                const result = this.#readConfiguration(filepath);
                if (result !== null && !(result.isEmpty && this.config.ignoreEmptySearchPlaces)) {
                  return this.config.transform(result);
                }
              } catch (error) {
                if (error.code === "ENOENT" || error.code === "EISDIR" || error.code === "ENOTDIR" || error.code === "EACCES") {
                  continue;
                }
                throw error;
              }
            }
          }
          const nextDirIter = dirs.next();
          if (!nextDirIter.done) {
            currentDir = nextDirIter.value;
            if (this.searchCache) {
              return (0, util_js_1.emplace)(this.searchCache, currentDir.path, search);
            }
            return search();
          }
          return this.config.transform(null);
        };
        if (this.searchCache) {
          return (0, util_js_1.emplace)(this.searchCache, from, search);
        }
        return search();
      }
      #readConfiguration(filepath, importStack = []) {
        const contents = fs_1.default.readFileSync(filepath, "utf8");
        return this.toCosmiconfigResult(filepath, this.#loadConfigFileWithImports(filepath, contents, importStack));
      }
      #loadConfigFileWithImports(filepath, contents, importStack) {
        const loadedContent = this.#loadConfiguration(filepath, contents);
        if (!loadedContent || !(0, merge_1.hasOwn)(loadedContent, "$import")) {
          return loadedContent;
        }
        const fileDirectory = path_1.default.dirname(filepath);
        const { $import: imports, ...ownContent } = loadedContent;
        const importPaths = Array.isArray(imports) ? imports : [imports];
        const newImportStack = [...importStack, filepath];
        this.validateImports(filepath, importPaths, newImportStack);
        const importedConfigs = importPaths.map((importPath) => {
          const fullPath = path_1.default.resolve(fileDirectory, importPath);
          const result = this.#readConfiguration(fullPath, newImportStack);
          return result?.config;
        });
        return (0, merge_1.mergeAll)([...importedConfigs, ownContent], {
          mergeArrays: this.config.mergeImportArrays
        });
      }
      #loadConfiguration(filepath, contents) {
        if (contents.trim() === "") {
          return;
        }
        const extension = path_1.default.extname(filepath);
        const loader = this.config.loaders[extension || "noExt"] ?? this.config.loaders["default"];
        if (!loader) {
          throw new Error(`No loader specified for ${(0, ExplorerBase_js_1.getExtensionDescription)(extension)}`);
        }
        try {
          const loadedContents = loader(filepath, contents);
          if (path_1.default.basename(filepath, extension) !== "package") {
            return loadedContents;
          }
          return (0, util_js_1.getPropertyByPath)(loadedContents, this.config.packageProp ?? this.config.moduleName) ?? null;
        } catch (error) {
          error.filepath = filepath;
          throw error;
        }
      }
      #fileExists(path9) {
        try {
          fs_1.default.statSync(path9);
          return true;
        } catch (e2) {
          return false;
        }
      }
      *#getDirs(startDir) {
        switch (this.config.searchStrategy) {
          case "none": {
            yield { path: startDir, isGlobalConfig: false };
            return;
          }
          case "project": {
            let currentDir = startDir;
            while (true) {
              yield { path: currentDir, isGlobalConfig: false };
              for (const ext of ["json", "yaml"]) {
                const packageFile = path_1.default.join(currentDir, `package.${ext}`);
                if (this.#fileExists(packageFile)) {
                  break;
                }
              }
              const parentDir = path_1.default.dirname(currentDir);
              if (parentDir === currentDir) {
                break;
              }
              currentDir = parentDir;
            }
            return;
          }
          case "global": {
            yield* this.getGlobalDirs(startDir);
          }
        }
      }
      /**
       * @deprecated Use {@link ExplorerSync.prototype.load}.
       */
      /* istanbul ignore next */
      loadSync(filepath) {
        return this.load(filepath);
      }
      /**
       * @deprecated Use {@link ExplorerSync.prototype.search}.
       */
      /* istanbul ignore next */
      searchSync(from = "") {
        return this.search(from);
      }
    };
    exports.ExplorerSync = ExplorerSync;
  }
});

// ../../.yarn/__virtual__/cosmiconfig-virtual-6be535658c/0/cache/cosmiconfig-npm-9.0.0-1cc563163a-1c1703be4f.zip/node_modules/cosmiconfig/dist/index.js
var require_dist = __commonJS({
  "../../.yarn/__virtual__/cosmiconfig-virtual-6be535658c/0/cache/cosmiconfig-npm-9.0.0-1cc563163a-1c1703be4f.zip/node_modules/cosmiconfig/dist/index.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultLoadersSync = exports.defaultLoaders = exports.globalConfigSearchPlacesSync = exports.globalConfigSearchPlaces = exports.getDefaultSearchPlacesSync = exports.getDefaultSearchPlaces = exports.cosmiconfigSync = exports.cosmiconfig = void 0;
    var defaults_1 = require_defaults();
    Object.defineProperty(exports, "defaultLoaders", { enumerable: true, get: function() {
      return defaults_1.defaultLoaders;
    } });
    Object.defineProperty(exports, "defaultLoadersSync", { enumerable: true, get: function() {
      return defaults_1.defaultLoadersSync;
    } });
    Object.defineProperty(exports, "getDefaultSearchPlaces", { enumerable: true, get: function() {
      return defaults_1.getDefaultSearchPlaces;
    } });
    Object.defineProperty(exports, "getDefaultSearchPlacesSync", { enumerable: true, get: function() {
      return defaults_1.getDefaultSearchPlacesSync;
    } });
    Object.defineProperty(exports, "globalConfigSearchPlaces", { enumerable: true, get: function() {
      return defaults_1.globalConfigSearchPlaces;
    } });
    Object.defineProperty(exports, "globalConfigSearchPlacesSync", { enumerable: true, get: function() {
      return defaults_1.globalConfigSearchPlacesSync;
    } });
    var Explorer_js_1 = require_Explorer();
    var ExplorerSync_js_1 = require_ExplorerSync();
    var util_1 = require_util();
    var identity3 = function identity4(x) {
      return x;
    };
    function getUserDefinedOptionsFromMetaConfig() {
      const metaExplorer = new ExplorerSync_js_1.ExplorerSync({
        moduleName: "cosmiconfig",
        stopDir: process.cwd(),
        searchPlaces: defaults_1.metaSearchPlaces,
        ignoreEmptySearchPlaces: false,
        applyPackagePropertyPathToConfiguration: true,
        loaders: defaults_1.defaultLoaders,
        transform: identity3,
        cache: true,
        metaConfigFilePath: null,
        mergeImportArrays: true,
        mergeSearchPlaces: true,
        searchStrategy: "none"
      });
      const metaConfig = metaExplorer.search();
      if (!metaConfig) {
        return null;
      }
      if (metaConfig.config?.loaders) {
        throw new Error("Can not specify loaders in meta config file");
      }
      if (metaConfig.config?.searchStrategy) {
        throw new Error("Can not specify searchStrategy in meta config file");
      }
      const overrideOptions = {
        mergeSearchPlaces: true,
        ...metaConfig.config ?? {}
      };
      return {
        config: (0, util_1.removeUndefinedValuesFromObject)(overrideOptions),
        filepath: metaConfig.filepath
      };
    }
    function getResolvedSearchPlaces(moduleName, toolDefinedSearchPlaces, userConfiguredOptions) {
      const userConfiguredSearchPlaces = userConfiguredOptions.searchPlaces?.map((path9) => path9.replace("{name}", moduleName));
      if (userConfiguredOptions.mergeSearchPlaces) {
        return [...userConfiguredSearchPlaces ?? [], ...toolDefinedSearchPlaces];
      }
      return userConfiguredSearchPlaces ?? /* istanbul ignore next */
      toolDefinedSearchPlaces;
    }
    function mergeOptionsBase(moduleName, defaults, options) {
      const userDefinedConfig = getUserDefinedOptionsFromMetaConfig();
      if (!userDefinedConfig) {
        return {
          ...defaults,
          ...(0, util_1.removeUndefinedValuesFromObject)(options),
          loaders: {
            ...defaults.loaders,
            ...options.loaders
          }
        };
      }
      const userConfiguredOptions = userDefinedConfig.config;
      const toolDefinedSearchPlaces = options.searchPlaces ?? defaults.searchPlaces;
      return {
        ...defaults,
        ...(0, util_1.removeUndefinedValuesFromObject)(options),
        metaConfigFilePath: userDefinedConfig.filepath,
        ...userConfiguredOptions,
        searchPlaces: getResolvedSearchPlaces(moduleName, toolDefinedSearchPlaces, userConfiguredOptions),
        loaders: {
          ...defaults.loaders,
          ...options.loaders
        }
      };
    }
    function validateOptions(options) {
      if (options.searchStrategy != null && options.searchStrategy !== "global" && options.stopDir) {
        throw new Error('Can not supply `stopDir` option with `searchStrategy` other than "global"');
      }
    }
    function mergeOptions2(moduleName, options) {
      validateOptions(options);
      const defaults = {
        moduleName,
        searchPlaces: (0, defaults_1.getDefaultSearchPlaces)(moduleName),
        ignoreEmptySearchPlaces: true,
        cache: true,
        transform: identity3,
        loaders: defaults_1.defaultLoaders,
        metaConfigFilePath: null,
        mergeImportArrays: true,
        mergeSearchPlaces: true,
        searchStrategy: options.stopDir ? "global" : "none"
      };
      return mergeOptionsBase(moduleName, defaults, options);
    }
    function mergeOptionsSync(moduleName, options) {
      validateOptions(options);
      const defaults = {
        moduleName,
        searchPlaces: (0, defaults_1.getDefaultSearchPlacesSync)(moduleName),
        ignoreEmptySearchPlaces: true,
        cache: true,
        transform: identity3,
        loaders: defaults_1.defaultLoadersSync,
        metaConfigFilePath: null,
        mergeImportArrays: true,
        mergeSearchPlaces: true,
        searchStrategy: options.stopDir ? "global" : "none"
      };
      return mergeOptionsBase(moduleName, defaults, options);
    }
    function cosmiconfig2(moduleName, options = {}) {
      const normalizedOptions = mergeOptions2(moduleName, options);
      const explorer = new Explorer_js_1.Explorer(normalizedOptions);
      return {
        search: explorer.search.bind(explorer),
        load: explorer.load.bind(explorer),
        clearLoadCache: explorer.clearLoadCache.bind(explorer),
        clearSearchCache: explorer.clearSearchCache.bind(explorer),
        clearCaches: explorer.clearCaches.bind(explorer)
      };
    }
    exports.cosmiconfig = cosmiconfig2;
    function cosmiconfigSync(moduleName, options = {}) {
      const normalizedOptions = mergeOptionsSync(moduleName, options);
      const explorerSync = new ExplorerSync_js_1.ExplorerSync(normalizedOptions);
      return {
        search: explorerSync.search.bind(explorerSync),
        load: explorerSync.load.bind(explorerSync),
        clearLoadCache: explorerSync.clearLoadCache.bind(explorerSync),
        clearSearchCache: explorerSync.clearSearchCache.bind(explorerSync),
        clearCaches: explorerSync.clearCaches.bind(explorerSync)
      };
    }
    exports.cosmiconfigSync = cosmiconfigSync;
  }
});

// ../../.yarn/cache/jiti-npm-1.21.7-82fc9937d6-77b61989c7.zip/node_modules/jiti/dist/jiti.js
var require_jiti = __commonJS({
  "../../.yarn/cache/jiti-npm-1.21.7-82fc9937d6-77b61989c7.zip/node_modules/jiti/dist/jiti.js"(exports, module) {
    "use strict";
    init_esm_shims();
    (() => {
      var __webpack_modules__ = { "./node_modules/.pnpm/create-require@1.1.1/node_modules/create-require/create-require.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const nativeModule = __webpack_require__2("module"), path9 = __webpack_require__2("path"), fs4 = __webpack_require__2("fs");
        module2.exports = function(filename) {
          return filename || (filename = process.cwd()), function(path10) {
            try {
              return fs4.lstatSync(path10).isDirectory();
            } catch (e2) {
              return false;
            }
          }(filename) && (filename = path9.join(filename, "index.js")), nativeModule.createRequire ? nativeModule.createRequire(filename) : nativeModule.createRequireFromPath ? nativeModule.createRequireFromPath(filename) : function(filename2) {
            const mod = new nativeModule.Module(filename2, null);
            return mod.filename = filename2, mod.paths = nativeModule.Module._nodeModulePaths(path9.dirname(filename2)), mod._compile("module.exports = require;", filename2), mod.exports;
          }(filename);
        };
      }, "./node_modules/.pnpm/mlly@1.7.3/node_modules/mlly/dist lazy recursive": (module2) => {
        function webpackEmptyAsyncContext(req) {
          return Promise.resolve().then(() => {
            var e2 = new Error("Cannot find module '" + req + "'");
            throw e2.code = "MODULE_NOT_FOUND", e2;
          });
        }
        webpackEmptyAsyncContext.keys = () => [], webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext, webpackEmptyAsyncContext.id = "./node_modules/.pnpm/mlly@1.7.3/node_modules/mlly/dist lazy recursive", module2.exports = webpackEmptyAsyncContext;
      }, "./node_modules/.pnpm/object-hash@3.0.0/node_modules/object-hash/index.js": (module2, exports2, __webpack_require__2) => {
        "use strict";
        var crypto3 = __webpack_require__2("crypto");
        function objectHash(object, options) {
          return function(object2, options2) {
            var hashingStream;
            hashingStream = "passthrough" !== options2.algorithm ? crypto3.createHash(options2.algorithm) : new PassThrough2();
            void 0 === hashingStream.write && (hashingStream.write = hashingStream.update, hashingStream.end = hashingStream.update);
            var hasher = typeHasher(options2, hashingStream);
            hasher.dispatch(object2), hashingStream.update || hashingStream.end("");
            if (hashingStream.digest) return hashingStream.digest("buffer" === options2.encoding ? void 0 : options2.encoding);
            var buf = hashingStream.read();
            if ("buffer" === options2.encoding) return buf;
            return buf.toString(options2.encoding);
          }(object, options = applyDefaults(object, options));
        }
        (exports2 = module2.exports = objectHash).sha1 = function(object) {
          return objectHash(object);
        }, exports2.keys = function(object) {
          return objectHash(object, { excludeValues: true, algorithm: "sha1", encoding: "hex" });
        }, exports2.MD5 = function(object) {
          return objectHash(object, { algorithm: "md5", encoding: "hex" });
        }, exports2.keysMD5 = function(object) {
          return objectHash(object, { algorithm: "md5", encoding: "hex", excludeValues: true });
        };
        var hashes = crypto3.getHashes ? crypto3.getHashes().slice() : ["sha1", "md5"];
        hashes.push("passthrough");
        var encodings = ["buffer", "hex", "binary", "base64"];
        function applyDefaults(object, sourceOptions) {
          sourceOptions = sourceOptions || {};
          var options = {};
          if (options.algorithm = sourceOptions.algorithm || "sha1", options.encoding = sourceOptions.encoding || "hex", options.excludeValues = !!sourceOptions.excludeValues, options.algorithm = options.algorithm.toLowerCase(), options.encoding = options.encoding.toLowerCase(), options.ignoreUnknown = true === sourceOptions.ignoreUnknown, options.respectType = false !== sourceOptions.respectType, options.respectFunctionNames = false !== sourceOptions.respectFunctionNames, options.respectFunctionProperties = false !== sourceOptions.respectFunctionProperties, options.unorderedArrays = true === sourceOptions.unorderedArrays, options.unorderedSets = false !== sourceOptions.unorderedSets, options.unorderedObjects = false !== sourceOptions.unorderedObjects, options.replacer = sourceOptions.replacer || void 0, options.excludeKeys = sourceOptions.excludeKeys || void 0, void 0 === object) throw new Error("Object argument required.");
          for (var i2 = 0; i2 < hashes.length; ++i2) hashes[i2].toLowerCase() === options.algorithm.toLowerCase() && (options.algorithm = hashes[i2]);
          if (-1 === hashes.indexOf(options.algorithm)) throw new Error('Algorithm "' + options.algorithm + '"  not supported. supported values: ' + hashes.join(", "));
          if (-1 === encodings.indexOf(options.encoding) && "passthrough" !== options.algorithm) throw new Error('Encoding "' + options.encoding + '"  not supported. supported values: ' + encodings.join(", "));
          return options;
        }
        function isNativeFunction(f3) {
          if ("function" != typeof f3) return false;
          return null != /^function\s+\w*\s*\(\s*\)\s*{\s+\[native code\]\s+}$/i.exec(Function.prototype.toString.call(f3));
        }
        function typeHasher(options, writeTo, context) {
          context = context || [];
          var write = function(str) {
            return writeTo.update ? writeTo.update(str, "utf8") : writeTo.write(str, "utf8");
          };
          return { dispatch: function(value2) {
            options.replacer && (value2 = options.replacer(value2));
            var type = typeof value2;
            return null === value2 && (type = "null"), this["_" + type](value2);
          }, _object: function(object) {
            var objString = Object.prototype.toString.call(object), objType = /\[object (.*)\]/i.exec(objString);
            objType = (objType = objType ? objType[1] : "unknown:[" + objString + "]").toLowerCase();
            var objectNumber;
            if ((objectNumber = context.indexOf(object)) >= 0) return this.dispatch("[CIRCULAR:" + objectNumber + "]");
            if (context.push(object), "undefined" != typeof Buffer && Buffer.isBuffer && Buffer.isBuffer(object)) return write("buffer:"), write(object);
            if ("object" === objType || "function" === objType || "asyncfunction" === objType) {
              var keys = Object.keys(object);
              options.unorderedObjects && (keys = keys.sort()), false === options.respectType || isNativeFunction(object) || keys.splice(0, 0, "prototype", "__proto__", "constructor"), options.excludeKeys && (keys = keys.filter(function(key) {
                return !options.excludeKeys(key);
              })), write("object:" + keys.length + ":");
              var self = this;
              return keys.forEach(function(key) {
                self.dispatch(key), write(":"), options.excludeValues || self.dispatch(object[key]), write(",");
              });
            }
            if (!this["_" + objType]) {
              if (options.ignoreUnknown) return write("[" + objType + "]");
              throw new Error('Unknown object type "' + objType + '"');
            }
            this["_" + objType](object);
          }, _array: function(arr, unordered) {
            unordered = void 0 !== unordered ? unordered : false !== options.unorderedArrays;
            var self = this;
            if (write("array:" + arr.length + ":"), !unordered || arr.length <= 1) return arr.forEach(function(entry) {
              return self.dispatch(entry);
            });
            var contextAdditions = [], entries = arr.map(function(entry) {
              var strm = new PassThrough2(), localContext = context.slice();
              return typeHasher(options, strm, localContext).dispatch(entry), contextAdditions = contextAdditions.concat(localContext.slice(context.length)), strm.read().toString();
            });
            return context = context.concat(contextAdditions), entries.sort(), this._array(entries, false);
          }, _date: function(date) {
            return write("date:" + date.toJSON());
          }, _symbol: function(sym) {
            return write("symbol:" + sym.toString());
          }, _error: function(err) {
            return write("error:" + err.toString());
          }, _boolean: function(bool) {
            return write("bool:" + bool.toString());
          }, _string: function(string) {
            write("string:" + string.length + ":"), write(string.toString());
          }, _function: function(fn) {
            write("fn:"), isNativeFunction(fn) ? this.dispatch("[native]") : this.dispatch(fn.toString()), false !== options.respectFunctionNames && this.dispatch("function-name:" + String(fn.name)), options.respectFunctionProperties && this._object(fn);
          }, _number: function(number) {
            return write("number:" + number.toString());
          }, _xml: function(xml) {
            return write("xml:" + xml.toString());
          }, _null: function() {
            return write("Null");
          }, _undefined: function() {
            return write("Undefined");
          }, _regexp: function(regex) {
            return write("regex:" + regex.toString());
          }, _uint8array: function(arr) {
            return write("uint8array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _uint8clampedarray: function(arr) {
            return write("uint8clampedarray:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _int8array: function(arr) {
            return write("int8array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _uint16array: function(arr) {
            return write("uint16array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _int16array: function(arr) {
            return write("int16array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _uint32array: function(arr) {
            return write("uint32array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _int32array: function(arr) {
            return write("int32array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _float32array: function(arr) {
            return write("float32array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _float64array: function(arr) {
            return write("float64array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _arraybuffer: function(arr) {
            return write("arraybuffer:"), this.dispatch(new Uint8Array(arr));
          }, _url: function(url) {
            return write("url:" + url.toString());
          }, _map: function(map) {
            write("map:");
            var arr = Array.from(map);
            return this._array(arr, false !== options.unorderedSets);
          }, _set: function(set) {
            write("set:");
            var arr = Array.from(set);
            return this._array(arr, false !== options.unorderedSets);
          }, _file: function(file) {
            return write("file:"), this.dispatch([file.name, file.size, file.type, file.lastModfied]);
          }, _blob: function() {
            if (options.ignoreUnknown) return write("[blob]");
            throw Error('Hashing Blob objects is currently not supported\n(see https://github.com/puleos/object-hash/issues/26)\nUse "options.replacer" or "options.ignoreUnknown"\n');
          }, _domwindow: function() {
            return write("domwindow");
          }, _bigint: function(number) {
            return write("bigint:" + number.toString());
          }, _process: function() {
            return write("process");
          }, _timer: function() {
            return write("timer");
          }, _pipe: function() {
            return write("pipe");
          }, _tcp: function() {
            return write("tcp");
          }, _udp: function() {
            return write("udp");
          }, _tty: function() {
            return write("tty");
          }, _statwatcher: function() {
            return write("statwatcher");
          }, _securecontext: function() {
            return write("securecontext");
          }, _connection: function() {
            return write("connection");
          }, _zlib: function() {
            return write("zlib");
          }, _context: function() {
            return write("context");
          }, _nodescript: function() {
            return write("nodescript");
          }, _httpparser: function() {
            return write("httpparser");
          }, _dataview: function() {
            return write("dataview");
          }, _signal: function() {
            return write("signal");
          }, _fsevent: function() {
            return write("fsevent");
          }, _tlswrap: function() {
            return write("tlswrap");
          } };
        }
        function PassThrough2() {
          return { buf: "", write: function(b2) {
            this.buf += b2;
          }, end: function(b2) {
            this.buf += b2;
          }, read: function() {
            return this.buf;
          } };
        }
        exports2.writeToStream = function(object, options, stream) {
          return void 0 === stream && (stream = options, options = {}), typeHasher(options = applyDefaults(object, options), stream).dispatch(object);
        };
      }, "./node_modules/.pnpm/pirates@4.0.6/node_modules/pirates/lib/index.js": (module2, exports2, __webpack_require__2) => {
        "use strict";
        module2 = __webpack_require__2.nmd(module2), Object.defineProperty(exports2, "__esModule", { value: true }), exports2.addHook = function(hook, opts = {}) {
          let reverted = false;
          const loaders = [], oldLoaders = [];
          let exts;
          const originalJSLoader = Module._extensions[".js"], matcher = opts.matcher || null, ignoreNodeModules = false !== opts.ignoreNodeModules;
          exts = opts.extensions || opts.exts || opts.extension || opts.ext || [".js"], Array.isArray(exts) || (exts = [exts]);
          return exts.forEach((ext) => {
            if ("string" != typeof ext) throw new TypeError(`Invalid Extension: ${ext}`);
            const oldLoader = Module._extensions[ext] || originalJSLoader;
            oldLoaders[ext] = Module._extensions[ext], loaders[ext] = Module._extensions[ext] = function(mod, filename) {
              let compile;
              reverted || function(filename2, exts2, matcher2, ignoreNodeModules2) {
                if ("string" != typeof filename2) return false;
                if (-1 === exts2.indexOf(_path.default.extname(filename2))) return false;
                const resolvedFilename = _path.default.resolve(filename2);
                if (ignoreNodeModules2 && nodeModulesRegex.test(resolvedFilename)) return false;
                if (matcher2 && "function" == typeof matcher2) return !!matcher2(resolvedFilename);
                return true;
              }(filename, exts, matcher, ignoreNodeModules) && (compile = mod._compile, mod._compile = function(code) {
                mod._compile = compile;
                const newCode = hook(code, filename);
                if ("string" != typeof newCode) throw new Error(HOOK_RETURNED_NOTHING_ERROR_MESSAGE);
                return mod._compile(newCode, filename);
              }), oldLoader(mod, filename);
            };
          }), function() {
            reverted || (reverted = true, exts.forEach((ext) => {
              Module._extensions[ext] === loaders[ext] && (oldLoaders[ext] ? Module._extensions[ext] = oldLoaders[ext] : delete Module._extensions[ext]);
            }));
          };
        };
        var _module = _interopRequireDefault(__webpack_require__2("module")), _path = _interopRequireDefault(__webpack_require__2("path"));
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }
        const nodeModulesRegex = /^(?:.*[\\/])?node_modules(?:[\\/].*)?$/, Module = module2.constructor.length > 1 ? module2.constructor : _module.default, HOOK_RETURNED_NOTHING_ERROR_MESSAGE = "[Pirates] A hook returned a non-string, or nothing at all! This is a violation of intergalactic law!\n--------------------\nIf you have no idea what this means or what Pirates is, let me explain: Pirates is a module that makes is easy to implement require hooks. One of the require hooks you're using uses it. One of these require hooks didn't return anything from it's handler, so we don't know what to do. You might want to debug this.";
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/comparator.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const ANY = Symbol("SemVer ANY");
        class Comparator {
          static get ANY() {
            return ANY;
          }
          constructor(comp, options) {
            if (options = parseOptions(options), comp instanceof Comparator) {
              if (comp.loose === !!options.loose) return comp;
              comp = comp.value;
            }
            comp = comp.trim().split(/\s+/).join(" "), debug2("comparator", comp, options), this.options = options, this.loose = !!options.loose, this.parse(comp), this.semver === ANY ? this.value = "" : this.value = this.operator + this.semver.version, debug2("comp", this);
          }
          parse(comp) {
            const r2 = this.options.loose ? re[t2.COMPARATORLOOSE] : re[t2.COMPARATOR], m2 = comp.match(r2);
            if (!m2) throw new TypeError(`Invalid comparator: ${comp}`);
            this.operator = void 0 !== m2[1] ? m2[1] : "", "=" === this.operator && (this.operator = ""), m2[2] ? this.semver = new SemVer(m2[2], this.options.loose) : this.semver = ANY;
          }
          toString() {
            return this.value;
          }
          test(version) {
            if (debug2("Comparator.test", version, this.options.loose), this.semver === ANY || version === ANY) return true;
            if ("string" == typeof version) try {
              version = new SemVer(version, this.options);
            } catch (er) {
              return false;
            }
            return cmp(version, this.operator, this.semver, this.options);
          }
          intersects(comp, options) {
            if (!(comp instanceof Comparator)) throw new TypeError("a Comparator is required");
            return "" === this.operator ? "" === this.value || new Range(comp.value, options).test(this.value) : "" === comp.operator ? "" === comp.value || new Range(this.value, options).test(comp.semver) : (!(options = parseOptions(options)).includePrerelease || "<0.0.0-0" !== this.value && "<0.0.0-0" !== comp.value) && (!(!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) && (!(!this.operator.startsWith(">") || !comp.operator.startsWith(">")) || (!(!this.operator.startsWith("<") || !comp.operator.startsWith("<")) || (!(this.semver.version !== comp.semver.version || !this.operator.includes("=") || !comp.operator.includes("=")) || (!!(cmp(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) || !!(cmp(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")))))));
          }
        }
        module2.exports = Comparator;
        const parseOptions = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/parse-options.js"), { safeRe: re, t: t2 } = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/re.js"), cmp = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/cmp.js"), debug2 = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/debug.js"), SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/semver.js"), Range = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/range.js");
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/range.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const SPACE_CHARACTERS = /\s+/g;
        class Range {
          constructor(range, options) {
            if (options = parseOptions(options), range instanceof Range) return range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease ? range : new Range(range.raw, options);
            if (range instanceof Comparator) return this.raw = range.value, this.set = [[range]], this.formatted = void 0, this;
            if (this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease, this.raw = range.trim().replace(SPACE_CHARACTERS, " "), this.set = this.raw.split("||").map((r2) => this.parseRange(r2.trim())).filter((c4) => c4.length), !this.set.length) throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
            if (this.set.length > 1) {
              const first = this.set[0];
              if (this.set = this.set.filter((c4) => !isNullSet(c4[0])), 0 === this.set.length) this.set = [first];
              else if (this.set.length > 1) {
                for (const c4 of this.set) if (1 === c4.length && isAny(c4[0])) {
                  this.set = [c4];
                  break;
                }
              }
            }
            this.formatted = void 0;
          }
          get range() {
            if (void 0 === this.formatted) {
              this.formatted = "";
              for (let i2 = 0; i2 < this.set.length; i2++) {
                i2 > 0 && (this.formatted += "||");
                const comps = this.set[i2];
                for (let k3 = 0; k3 < comps.length; k3++) k3 > 0 && (this.formatted += " "), this.formatted += comps[k3].toString().trim();
              }
            }
            return this.formatted;
          }
          format() {
            return this.range;
          }
          toString() {
            return this.range;
          }
          parseRange(range) {
            const memoKey = ((this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE)) + ":" + range, cached = cache.get(memoKey);
            if (cached) return cached;
            const loose = this.options.loose, hr = loose ? re[t2.HYPHENRANGELOOSE] : re[t2.HYPHENRANGE];
            range = range.replace(hr, hyphenReplace(this.options.includePrerelease)), debug2("hyphen replace", range), range = range.replace(re[t2.COMPARATORTRIM], comparatorTrimReplace), debug2("comparator trim", range), range = range.replace(re[t2.TILDETRIM], tildeTrimReplace), debug2("tilde trim", range), range = range.replace(re[t2.CARETTRIM], caretTrimReplace), debug2("caret trim", range);
            let rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
            loose && (rangeList = rangeList.filter((comp) => (debug2("loose invalid filter", comp, this.options), !!comp.match(re[t2.COMPARATORLOOSE])))), debug2("range list", rangeList);
            const rangeMap = /* @__PURE__ */ new Map(), comparators = rangeList.map((comp) => new Comparator(comp, this.options));
            for (const comp of comparators) {
              if (isNullSet(comp)) return [comp];
              rangeMap.set(comp.value, comp);
            }
            rangeMap.size > 1 && rangeMap.has("") && rangeMap.delete("");
            const result = [...rangeMap.values()];
            return cache.set(memoKey, result), result;
          }
          intersects(range, options) {
            if (!(range instanceof Range)) throw new TypeError("a Range is required");
            return this.set.some((thisComparators) => isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => rangeComparators.every((rangeComparator) => thisComparator.intersects(rangeComparator, options)))));
          }
          test(version) {
            if (!version) return false;
            if ("string" == typeof version) try {
              version = new SemVer(version, this.options);
            } catch (er) {
              return false;
            }
            for (let i2 = 0; i2 < this.set.length; i2++) if (testSet(this.set[i2], version, this.options)) return true;
            return false;
          }
        }
        module2.exports = Range;
        const cache = new (__webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/lrucache.js"))(), parseOptions = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/parse-options.js"), Comparator = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/comparator.js"), debug2 = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/debug.js"), SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/semver.js"), { safeRe: re, t: t2, comparatorTrimReplace, tildeTrimReplace, caretTrimReplace } = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/re.js"), { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/constants.js"), isNullSet = (c4) => "<0.0.0-0" === c4.value, isAny = (c4) => "" === c4.value, isSatisfiable = (comparators, options) => {
          let result = true;
          const remainingComparators = comparators.slice();
          let testComparator = remainingComparators.pop();
          for (; result && remainingComparators.length; ) result = remainingComparators.every((otherComparator) => testComparator.intersects(otherComparator, options)), testComparator = remainingComparators.pop();
          return result;
        }, parseComparator = (comp, options) => (debug2("comp", comp, options), comp = replaceCarets(comp, options), debug2("caret", comp), comp = replaceTildes(comp, options), debug2("tildes", comp), comp = replaceXRanges(comp, options), debug2("xrange", comp), comp = replaceStars(comp, options), debug2("stars", comp), comp), isX = (id) => !id || "x" === id.toLowerCase() || "*" === id, replaceTildes = (comp, options) => comp.trim().split(/\s+/).map((c4) => replaceTilde(c4, options)).join(" "), replaceTilde = (comp, options) => {
          const r2 = options.loose ? re[t2.TILDELOOSE] : re[t2.TILDE];
          return comp.replace(r2, (_2, M, m2, p, pr) => {
            let ret;
            return debug2("tilde", comp, _2, M, m2, p, pr), isX(M) ? ret = "" : isX(m2) ? ret = `>=${M}.0.0 <${+M + 1}.0.0-0` : isX(p) ? ret = `>=${M}.${m2}.0 <${M}.${+m2 + 1}.0-0` : pr ? (debug2("replaceTilde pr", pr), ret = `>=${M}.${m2}.${p}-${pr} <${M}.${+m2 + 1}.0-0`) : ret = `>=${M}.${m2}.${p} <${M}.${+m2 + 1}.0-0`, debug2("tilde return", ret), ret;
          });
        }, replaceCarets = (comp, options) => comp.trim().split(/\s+/).map((c4) => replaceCaret(c4, options)).join(" "), replaceCaret = (comp, options) => {
          debug2("caret", comp, options);
          const r2 = options.loose ? re[t2.CARETLOOSE] : re[t2.CARET], z = options.includePrerelease ? "-0" : "";
          return comp.replace(r2, (_2, M, m2, p, pr) => {
            let ret;
            return debug2("caret", comp, _2, M, m2, p, pr), isX(M) ? ret = "" : isX(m2) ? ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0` : isX(p) ? ret = "0" === M ? `>=${M}.${m2}.0${z} <${M}.${+m2 + 1}.0-0` : `>=${M}.${m2}.0${z} <${+M + 1}.0.0-0` : pr ? (debug2("replaceCaret pr", pr), ret = "0" === M ? "0" === m2 ? `>=${M}.${m2}.${p}-${pr} <${M}.${m2}.${+p + 1}-0` : `>=${M}.${m2}.${p}-${pr} <${M}.${+m2 + 1}.0-0` : `>=${M}.${m2}.${p}-${pr} <${+M + 1}.0.0-0`) : (debug2("no pr"), ret = "0" === M ? "0" === m2 ? `>=${M}.${m2}.${p}${z} <${M}.${m2}.${+p + 1}-0` : `>=${M}.${m2}.${p}${z} <${M}.${+m2 + 1}.0-0` : `>=${M}.${m2}.${p} <${+M + 1}.0.0-0`), debug2("caret return", ret), ret;
          });
        }, replaceXRanges = (comp, options) => (debug2("replaceXRanges", comp, options), comp.split(/\s+/).map((c4) => replaceXRange(c4, options)).join(" ")), replaceXRange = (comp, options) => {
          comp = comp.trim();
          const r2 = options.loose ? re[t2.XRANGELOOSE] : re[t2.XRANGE];
          return comp.replace(r2, (ret, gtlt, M, m2, p, pr) => {
            debug2("xRange", comp, ret, gtlt, M, m2, p, pr);
            const xM = isX(M), xm = xM || isX(m2), xp = xm || isX(p), anyX = xp;
            return "=" === gtlt && anyX && (gtlt = ""), pr = options.includePrerelease ? "-0" : "", xM ? ret = ">" === gtlt || "<" === gtlt ? "<0.0.0-0" : "*" : gtlt && anyX ? (xm && (m2 = 0), p = 0, ">" === gtlt ? (gtlt = ">=", xm ? (M = +M + 1, m2 = 0, p = 0) : (m2 = +m2 + 1, p = 0)) : "<=" === gtlt && (gtlt = "<", xm ? M = +M + 1 : m2 = +m2 + 1), "<" === gtlt && (pr = "-0"), ret = `${gtlt + M}.${m2}.${p}${pr}`) : xm ? ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0` : xp && (ret = `>=${M}.${m2}.0${pr} <${M}.${+m2 + 1}.0-0`), debug2("xRange return", ret), ret;
          });
        }, replaceStars = (comp, options) => (debug2("replaceStars", comp, options), comp.trim().replace(re[t2.STAR], "")), replaceGTE0 = (comp, options) => (debug2("replaceGTE0", comp, options), comp.trim().replace(re[options.includePrerelease ? t2.GTE0PRE : t2.GTE0], "")), hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr) => `${from = isX(fM) ? "" : isX(fm) ? `>=${fM}.0.0${incPr ? "-0" : ""}` : isX(fp) ? `>=${fM}.${fm}.0${incPr ? "-0" : ""}` : fpr ? `>=${from}` : `>=${from}${incPr ? "-0" : ""}`} ${to = isX(tM) ? "" : isX(tm) ? `<${+tM + 1}.0.0-0` : isX(tp) ? `<${tM}.${+tm + 1}.0-0` : tpr ? `<=${tM}.${tm}.${tp}-${tpr}` : incPr ? `<${tM}.${tm}.${+tp + 1}-0` : `<=${to}`}`.trim(), testSet = (set, version, options) => {
          for (let i2 = 0; i2 < set.length; i2++) if (!set[i2].test(version)) return false;
          if (version.prerelease.length && !options.includePrerelease) {
            for (let i2 = 0; i2 < set.length; i2++) if (debug2(set[i2].semver), set[i2].semver !== Comparator.ANY && set[i2].semver.prerelease.length > 0) {
              const allowed = set[i2].semver;
              if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) return true;
            }
            return false;
          }
          return true;
        };
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/semver.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const debug2 = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/debug.js"), { MAX_LENGTH, MAX_SAFE_INTEGER } = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/constants.js"), { safeRe: re, t: t2 } = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/re.js"), parseOptions = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/parse-options.js"), { compareIdentifiers } = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/identifiers.js");
        class SemVer {
          constructor(version, options) {
            if (options = parseOptions(options), version instanceof SemVer) {
              if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) return version;
              version = version.version;
            } else if ("string" != typeof version) throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`);
            if (version.length > MAX_LENGTH) throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);
            debug2("SemVer", version, options), this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease;
            const m2 = version.trim().match(options.loose ? re[t2.LOOSE] : re[t2.FULL]);
            if (!m2) throw new TypeError(`Invalid Version: ${version}`);
            if (this.raw = version, this.major = +m2[1], this.minor = +m2[2], this.patch = +m2[3], this.major > MAX_SAFE_INTEGER || this.major < 0) throw new TypeError("Invalid major version");
            if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) throw new TypeError("Invalid minor version");
            if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) throw new TypeError("Invalid patch version");
            m2[4] ? this.prerelease = m2[4].split(".").map((id) => {
              if (/^[0-9]+$/.test(id)) {
                const num = +id;
                if (num >= 0 && num < MAX_SAFE_INTEGER) return num;
              }
              return id;
            }) : this.prerelease = [], this.build = m2[5] ? m2[5].split(".") : [], this.format();
          }
          format() {
            return this.version = `${this.major}.${this.minor}.${this.patch}`, this.prerelease.length && (this.version += `-${this.prerelease.join(".")}`), this.version;
          }
          toString() {
            return this.version;
          }
          compare(other) {
            if (debug2("SemVer.compare", this.version, this.options, other), !(other instanceof SemVer)) {
              if ("string" == typeof other && other === this.version) return 0;
              other = new SemVer(other, this.options);
            }
            return other.version === this.version ? 0 : this.compareMain(other) || this.comparePre(other);
          }
          compareMain(other) {
            return other instanceof SemVer || (other = new SemVer(other, this.options)), compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
          }
          comparePre(other) {
            if (other instanceof SemVer || (other = new SemVer(other, this.options)), this.prerelease.length && !other.prerelease.length) return -1;
            if (!this.prerelease.length && other.prerelease.length) return 1;
            if (!this.prerelease.length && !other.prerelease.length) return 0;
            let i2 = 0;
            do {
              const a2 = this.prerelease[i2], b2 = other.prerelease[i2];
              if (debug2("prerelease compare", i2, a2, b2), void 0 === a2 && void 0 === b2) return 0;
              if (void 0 === b2) return 1;
              if (void 0 === a2) return -1;
              if (a2 !== b2) return compareIdentifiers(a2, b2);
            } while (++i2);
          }
          compareBuild(other) {
            other instanceof SemVer || (other = new SemVer(other, this.options));
            let i2 = 0;
            do {
              const a2 = this.build[i2], b2 = other.build[i2];
              if (debug2("build compare", i2, a2, b2), void 0 === a2 && void 0 === b2) return 0;
              if (void 0 === b2) return 1;
              if (void 0 === a2) return -1;
              if (a2 !== b2) return compareIdentifiers(a2, b2);
            } while (++i2);
          }
          inc(release, identifier, identifierBase) {
            switch (release) {
              case "premajor":
                this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", identifier, identifierBase);
                break;
              case "preminor":
                this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", identifier, identifierBase);
                break;
              case "prepatch":
                this.prerelease.length = 0, this.inc("patch", identifier, identifierBase), this.inc("pre", identifier, identifierBase);
                break;
              case "prerelease":
                0 === this.prerelease.length && this.inc("patch", identifier, identifierBase), this.inc("pre", identifier, identifierBase);
                break;
              case "major":
                0 === this.minor && 0 === this.patch && 0 !== this.prerelease.length || this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
                break;
              case "minor":
                0 === this.patch && 0 !== this.prerelease.length || this.minor++, this.patch = 0, this.prerelease = [];
                break;
              case "patch":
                0 === this.prerelease.length && this.patch++, this.prerelease = [];
                break;
              case "pre": {
                const base = Number(identifierBase) ? 1 : 0;
                if (!identifier && false === identifierBase) throw new Error("invalid increment argument: identifier is empty");
                if (0 === this.prerelease.length) this.prerelease = [base];
                else {
                  let i2 = this.prerelease.length;
                  for (; --i2 >= 0; ) "number" == typeof this.prerelease[i2] && (this.prerelease[i2]++, i2 = -2);
                  if (-1 === i2) {
                    if (identifier === this.prerelease.join(".") && false === identifierBase) throw new Error("invalid increment argument: identifier already exists");
                    this.prerelease.push(base);
                  }
                }
                if (identifier) {
                  let prerelease = [identifier, base];
                  false === identifierBase && (prerelease = [identifier]), 0 === compareIdentifiers(this.prerelease[0], identifier) ? isNaN(this.prerelease[1]) && (this.prerelease = prerelease) : this.prerelease = prerelease;
                }
                break;
              }
              default:
                throw new Error(`invalid increment argument: ${release}`);
            }
            return this.raw = this.format(), this.build.length && (this.raw += `+${this.build.join(".")}`), this;
          }
        }
        module2.exports = SemVer;
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/clean.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const parse = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/parse.js");
        module2.exports = (version, options) => {
          const s = parse(version.trim().replace(/^[=v]+/, ""), options);
          return s ? s.version : null;
        };
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/cmp.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const eq = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/eq.js"), neq = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/neq.js"), gt = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/gt.js"), gte = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/gte.js"), lt = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/lt.js"), lte = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/lte.js");
        module2.exports = (a2, op, b2, loose) => {
          switch (op) {
            case "===":
              return "object" == typeof a2 && (a2 = a2.version), "object" == typeof b2 && (b2 = b2.version), a2 === b2;
            case "!==":
              return "object" == typeof a2 && (a2 = a2.version), "object" == typeof b2 && (b2 = b2.version), a2 !== b2;
            case "":
            case "=":
            case "==":
              return eq(a2, b2, loose);
            case "!=":
              return neq(a2, b2, loose);
            case ">":
              return gt(a2, b2, loose);
            case ">=":
              return gte(a2, b2, loose);
            case "<":
              return lt(a2, b2, loose);
            case "<=":
              return lte(a2, b2, loose);
            default:
              throw new TypeError(`Invalid operator: ${op}`);
          }
        };
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/coerce.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/semver.js"), parse = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/parse.js"), { safeRe: re, t: t2 } = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/re.js");
        module2.exports = (version, options) => {
          if (version instanceof SemVer) return version;
          if ("number" == typeof version && (version = String(version)), "string" != typeof version) return null;
          let match = null;
          if ((options = options || {}).rtl) {
            const coerceRtlRegex = options.includePrerelease ? re[t2.COERCERTLFULL] : re[t2.COERCERTL];
            let next;
            for (; (next = coerceRtlRegex.exec(version)) && (!match || match.index + match[0].length !== version.length); ) match && next.index + next[0].length === match.index + match[0].length || (match = next), coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
            coerceRtlRegex.lastIndex = -1;
          } else match = version.match(options.includePrerelease ? re[t2.COERCEFULL] : re[t2.COERCE]);
          if (null === match) return null;
          const major = match[2], minor = match[3] || "0", patch = match[4] || "0", prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : "", build = options.includePrerelease && match[6] ? `+${match[6]}` : "";
          return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options);
        };
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare-build.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/semver.js");
        module2.exports = (a2, b2, loose) => {
          const versionA = new SemVer(a2, loose), versionB = new SemVer(b2, loose);
          return versionA.compare(versionB) || versionA.compareBuild(versionB);
        };
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare-loose.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare.js");
        module2.exports = (a2, b2) => compare(a2, b2, true);
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/semver.js");
        module2.exports = (a2, b2, loose) => new SemVer(a2, loose).compare(new SemVer(b2, loose));
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/diff.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const parse = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/parse.js");
        module2.exports = (version1, version2) => {
          const v1 = parse(version1, null, true), v2 = parse(version2, null, true), comparison = v1.compare(v2);
          if (0 === comparison) return null;
          const v1Higher = comparison > 0, highVersion = v1Higher ? v1 : v2, lowVersion = v1Higher ? v2 : v1, highHasPre = !!highVersion.prerelease.length;
          if (!!lowVersion.prerelease.length && !highHasPre) return lowVersion.patch || lowVersion.minor ? highVersion.patch ? "patch" : highVersion.minor ? "minor" : "major" : "major";
          const prefix = highHasPre ? "pre" : "";
          return v1.major !== v2.major ? prefix + "major" : v1.minor !== v2.minor ? prefix + "minor" : v1.patch !== v2.patch ? prefix + "patch" : "prerelease";
        };
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/eq.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare.js");
        module2.exports = (a2, b2, loose) => 0 === compare(a2, b2, loose);
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/gt.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare.js");
        module2.exports = (a2, b2, loose) => compare(a2, b2, loose) > 0;
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/gte.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare.js");
        module2.exports = (a2, b2, loose) => compare(a2, b2, loose) >= 0;
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/inc.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/semver.js");
        module2.exports = (version, release, options, identifier, identifierBase) => {
          "string" == typeof options && (identifierBase = identifier, identifier = options, options = void 0);
          try {
            return new SemVer(version instanceof SemVer ? version.version : version, options).inc(release, identifier, identifierBase).version;
          } catch (er) {
            return null;
          }
        };
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/lt.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare.js");
        module2.exports = (a2, b2, loose) => compare(a2, b2, loose) < 0;
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/lte.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare.js");
        module2.exports = (a2, b2, loose) => compare(a2, b2, loose) <= 0;
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/major.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/semver.js");
        module2.exports = (a2, loose) => new SemVer(a2, loose).major;
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/minor.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/semver.js");
        module2.exports = (a2, loose) => new SemVer(a2, loose).minor;
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/neq.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare.js");
        module2.exports = (a2, b2, loose) => 0 !== compare(a2, b2, loose);
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/parse.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/semver.js");
        module2.exports = (version, options, throwErrors = false) => {
          if (version instanceof SemVer) return version;
          try {
            return new SemVer(version, options);
          } catch (er) {
            if (!throwErrors) return null;
            throw er;
          }
        };
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/patch.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/semver.js");
        module2.exports = (a2, loose) => new SemVer(a2, loose).patch;
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/prerelease.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const parse = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/parse.js");
        module2.exports = (version, options) => {
          const parsed = parse(version, options);
          return parsed && parsed.prerelease.length ? parsed.prerelease : null;
        };
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/rcompare.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare.js");
        module2.exports = (a2, b2, loose) => compare(b2, a2, loose);
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/rsort.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const compareBuild = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare-build.js");
        module2.exports = (list, loose) => list.sort((a2, b2) => compareBuild(b2, a2, loose));
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/satisfies.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const Range = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/range.js");
        module2.exports = (version, range, options) => {
          try {
            range = new Range(range, options);
          } catch (er) {
            return false;
          }
          return range.test(version);
        };
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/sort.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const compareBuild = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare-build.js");
        module2.exports = (list, loose) => list.sort((a2, b2) => compareBuild(a2, b2, loose));
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/valid.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const parse = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/parse.js");
        module2.exports = (version, options) => {
          const v = parse(version, options);
          return v ? v.version : null;
        };
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/index.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const internalRe = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/re.js"), constants4 = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/constants.js"), SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/semver.js"), identifiers = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/identifiers.js"), parse = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/parse.js"), valid = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/valid.js"), clean = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/clean.js"), inc = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/inc.js"), diff = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/diff.js"), major = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/major.js"), minor = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/minor.js"), patch = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/patch.js"), prerelease = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/prerelease.js"), compare = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare.js"), rcompare = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/rcompare.js"), compareLoose = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare-loose.js"), compareBuild = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare-build.js"), sort = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/sort.js"), rsort = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/rsort.js"), gt = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/gt.js"), lt = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/lt.js"), eq = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/eq.js"), neq = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/neq.js"), gte = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/gte.js"), lte = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/lte.js"), cmp = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/cmp.js"), coerce = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/coerce.js"), Comparator = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/comparator.js"), Range = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/range.js"), satisfies = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/satisfies.js"), toComparators = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/to-comparators.js"), maxSatisfying = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/max-satisfying.js"), minSatisfying = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/min-satisfying.js"), minVersion = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/min-version.js"), validRange = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/valid.js"), outside = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/outside.js"), gtr = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/gtr.js"), ltr = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/ltr.js"), intersects = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/intersects.js"), simplifyRange = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/simplify.js"), subset = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/subset.js");
        module2.exports = { parse, valid, clean, inc, diff, major, minor, patch, prerelease, compare, rcompare, compareLoose, compareBuild, sort, rsort, gt, lt, eq, neq, gte, lte, cmp, coerce, Comparator, Range, satisfies, toComparators, maxSatisfying, minSatisfying, minVersion, validRange, outside, gtr, ltr, intersects, simplifyRange, subset, SemVer, re: internalRe.re, src: internalRe.src, tokens: internalRe.t, SEMVER_SPEC_VERSION: constants4.SEMVER_SPEC_VERSION, RELEASE_TYPES: constants4.RELEASE_TYPES, compareIdentifiers: identifiers.compareIdentifiers, rcompareIdentifiers: identifiers.rcompareIdentifiers };
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/constants.js": (module2) => {
        const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
        module2.exports = { MAX_LENGTH: 256, MAX_SAFE_COMPONENT_LENGTH: 16, MAX_SAFE_BUILD_LENGTH: 250, MAX_SAFE_INTEGER, RELEASE_TYPES: ["major", "premajor", "minor", "preminor", "patch", "prepatch", "prerelease"], SEMVER_SPEC_VERSION: "2.0.0", FLAG_INCLUDE_PRERELEASE: 1, FLAG_LOOSE: 2 };
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/debug.js": (module2) => {
        const debug2 = "object" == typeof process && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
        };
        module2.exports = debug2;
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/identifiers.js": (module2) => {
        const numeric = /^[0-9]+$/, compareIdentifiers = (a2, b2) => {
          const anum = numeric.test(a2), bnum = numeric.test(b2);
          return anum && bnum && (a2 = +a2, b2 = +b2), a2 === b2 ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a2 < b2 ? -1 : 1;
        };
        module2.exports = { compareIdentifiers, rcompareIdentifiers: (a2, b2) => compareIdentifiers(b2, a2) };
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/lrucache.js": (module2) => {
        module2.exports = class {
          constructor() {
            this.max = 1e3, this.map = /* @__PURE__ */ new Map();
          }
          get(key) {
            const value2 = this.map.get(key);
            return void 0 === value2 ? void 0 : (this.map.delete(key), this.map.set(key, value2), value2);
          }
          delete(key) {
            return this.map.delete(key);
          }
          set(key, value2) {
            if (!this.delete(key) && void 0 !== value2) {
              if (this.map.size >= this.max) {
                const firstKey = this.map.keys().next().value;
                this.delete(firstKey);
              }
              this.map.set(key, value2);
            }
            return this;
          }
        };
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/parse-options.js": (module2) => {
        const looseOption = Object.freeze({ loose: true }), emptyOpts = Object.freeze({});
        module2.exports = (options) => options ? "object" != typeof options ? looseOption : options : emptyOpts;
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/re.js": (module2, exports2, __webpack_require__2) => {
        const { MAX_SAFE_COMPONENT_LENGTH, MAX_SAFE_BUILD_LENGTH, MAX_LENGTH } = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/constants.js"), debug2 = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/debug.js"), re = (exports2 = module2.exports = {}).re = [], safeRe = exports2.safeRe = [], src = exports2.src = [], t2 = exports2.t = {};
        let R = 0;
        const safeRegexReplacements = [["\\s", 1], ["\\d", MAX_LENGTH], ["[a-zA-Z0-9-]", MAX_SAFE_BUILD_LENGTH]], createToken = (name, value2, isGlobal) => {
          const safe = ((value3) => {
            for (const [token, max] of safeRegexReplacements) value3 = value3.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
            return value3;
          })(value2), index = R++;
          debug2(name, index, value2), t2[name] = index, src[index] = value2, re[index] = new RegExp(value2, isGlobal ? "g" : void 0), safeRe[index] = new RegExp(safe, isGlobal ? "g" : void 0);
        };
        createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*"), createToken("NUMERICIDENTIFIERLOOSE", "\\d+"), createToken("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*"), createToken("MAINVERSION", `(${src[t2.NUMERICIDENTIFIER]})\\.(${src[t2.NUMERICIDENTIFIER]})\\.(${src[t2.NUMERICIDENTIFIER]})`), createToken("MAINVERSIONLOOSE", `(${src[t2.NUMERICIDENTIFIERLOOSE]})\\.(${src[t2.NUMERICIDENTIFIERLOOSE]})\\.(${src[t2.NUMERICIDENTIFIERLOOSE]})`), createToken("PRERELEASEIDENTIFIER", `(?:${src[t2.NUMERICIDENTIFIER]}|${src[t2.NONNUMERICIDENTIFIER]})`), createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t2.NUMERICIDENTIFIERLOOSE]}|${src[t2.NONNUMERICIDENTIFIER]})`), createToken("PRERELEASE", `(?:-(${src[t2.PRERELEASEIDENTIFIER]}(?:\\.${src[t2.PRERELEASEIDENTIFIER]})*))`), createToken("PRERELEASELOOSE", `(?:-?(${src[t2.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t2.PRERELEASEIDENTIFIERLOOSE]})*))`), createToken("BUILDIDENTIFIER", "[a-zA-Z0-9-]+"), createToken("BUILD", `(?:\\+(${src[t2.BUILDIDENTIFIER]}(?:\\.${src[t2.BUILDIDENTIFIER]})*))`), createToken("FULLPLAIN", `v?${src[t2.MAINVERSION]}${src[t2.PRERELEASE]}?${src[t2.BUILD]}?`), createToken("FULL", `^${src[t2.FULLPLAIN]}$`), createToken("LOOSEPLAIN", `[v=\\s]*${src[t2.MAINVERSIONLOOSE]}${src[t2.PRERELEASELOOSE]}?${src[t2.BUILD]}?`), createToken("LOOSE", `^${src[t2.LOOSEPLAIN]}$`), createToken("GTLT", "((?:<|>)?=?)"), createToken("XRANGEIDENTIFIERLOOSE", `${src[t2.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`), createToken("XRANGEIDENTIFIER", `${src[t2.NUMERICIDENTIFIER]}|x|X|\\*`), createToken("XRANGEPLAIN", `[v=\\s]*(${src[t2.XRANGEIDENTIFIER]})(?:\\.(${src[t2.XRANGEIDENTIFIER]})(?:\\.(${src[t2.XRANGEIDENTIFIER]})(?:${src[t2.PRERELEASE]})?${src[t2.BUILD]}?)?)?`), createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:${src[t2.PRERELEASELOOSE]})?${src[t2.BUILD]}?)?)?`), createToken("XRANGE", `^${src[t2.GTLT]}\\s*${src[t2.XRANGEPLAIN]}$`), createToken("XRANGELOOSE", `^${src[t2.GTLT]}\\s*${src[t2.XRANGEPLAINLOOSE]}$`), createToken("COERCEPLAIN", `(^|[^\\d])(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`), createToken("COERCE", `${src[t2.COERCEPLAIN]}(?:$|[^\\d])`), createToken("COERCEFULL", src[t2.COERCEPLAIN] + `(?:${src[t2.PRERELEASE]})?(?:${src[t2.BUILD]})?(?:$|[^\\d])`), createToken("COERCERTL", src[t2.COERCE], true), createToken("COERCERTLFULL", src[t2.COERCEFULL], true), createToken("LONETILDE", "(?:~>?)"), createToken("TILDETRIM", `(\\s*)${src[t2.LONETILDE]}\\s+`, true), exports2.tildeTrimReplace = "$1~", createToken("TILDE", `^${src[t2.LONETILDE]}${src[t2.XRANGEPLAIN]}$`), createToken("TILDELOOSE", `^${src[t2.LONETILDE]}${src[t2.XRANGEPLAINLOOSE]}$`), createToken("LONECARET", "(?:\\^)"), createToken("CARETTRIM", `(\\s*)${src[t2.LONECARET]}\\s+`, true), exports2.caretTrimReplace = "$1^", createToken("CARET", `^${src[t2.LONECARET]}${src[t2.XRANGEPLAIN]}$`), createToken("CARETLOOSE", `^${src[t2.LONECARET]}${src[t2.XRANGEPLAINLOOSE]}$`), createToken("COMPARATORLOOSE", `^${src[t2.GTLT]}\\s*(${src[t2.LOOSEPLAIN]})$|^$`), createToken("COMPARATOR", `^${src[t2.GTLT]}\\s*(${src[t2.FULLPLAIN]})$|^$`), createToken("COMPARATORTRIM", `(\\s*)${src[t2.GTLT]}\\s*(${src[t2.LOOSEPLAIN]}|${src[t2.XRANGEPLAIN]})`, true), exports2.comparatorTrimReplace = "$1$2$3", createToken("HYPHENRANGE", `^\\s*(${src[t2.XRANGEPLAIN]})\\s+-\\s+(${src[t2.XRANGEPLAIN]})\\s*$`), createToken("HYPHENRANGELOOSE", `^\\s*(${src[t2.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t2.XRANGEPLAINLOOSE]})\\s*$`), createToken("STAR", "(<|>)?=?\\s*\\*"), createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$"), createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/gtr.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const outside = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/outside.js");
        module2.exports = (version, range, options) => outside(version, range, ">", options);
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/intersects.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const Range = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/range.js");
        module2.exports = (r1, r2, options) => (r1 = new Range(r1, options), r2 = new Range(r2, options), r1.intersects(r2, options));
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/ltr.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const outside = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/outside.js");
        module2.exports = (version, range, options) => outside(version, range, "<", options);
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/max-satisfying.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/semver.js"), Range = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/range.js");
        module2.exports = (versions, range, options) => {
          let max = null, maxSV = null, rangeObj = null;
          try {
            rangeObj = new Range(range, options);
          } catch (er) {
            return null;
          }
          return versions.forEach((v) => {
            rangeObj.test(v) && (max && -1 !== maxSV.compare(v) || (max = v, maxSV = new SemVer(max, options)));
          }), max;
        };
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/min-satisfying.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/semver.js"), Range = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/range.js");
        module2.exports = (versions, range, options) => {
          let min = null, minSV = null, rangeObj = null;
          try {
            rangeObj = new Range(range, options);
          } catch (er) {
            return null;
          }
          return versions.forEach((v) => {
            rangeObj.test(v) && (min && 1 !== minSV.compare(v) || (min = v, minSV = new SemVer(min, options)));
          }), min;
        };
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/min-version.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/semver.js"), Range = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/range.js"), gt = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/gt.js");
        module2.exports = (range, loose) => {
          range = new Range(range, loose);
          let minver = new SemVer("0.0.0");
          if (range.test(minver)) return minver;
          if (minver = new SemVer("0.0.0-0"), range.test(minver)) return minver;
          minver = null;
          for (let i2 = 0; i2 < range.set.length; ++i2) {
            const comparators = range.set[i2];
            let setMin = null;
            comparators.forEach((comparator) => {
              const compver = new SemVer(comparator.semver.version);
              switch (comparator.operator) {
                case ">":
                  0 === compver.prerelease.length ? compver.patch++ : compver.prerelease.push(0), compver.raw = compver.format();
                case "":
                case ">=":
                  setMin && !gt(compver, setMin) || (setMin = compver);
                  break;
                case "<":
                case "<=":
                  break;
                default:
                  throw new Error(`Unexpected operation: ${comparator.operator}`);
              }
            }), !setMin || minver && !gt(minver, setMin) || (minver = setMin);
          }
          return minver && range.test(minver) ? minver : null;
        };
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/outside.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/semver.js"), Comparator = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/comparator.js"), { ANY } = Comparator, Range = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/range.js"), satisfies = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/satisfies.js"), gt = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/gt.js"), lt = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/lt.js"), lte = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/lte.js"), gte = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/gte.js");
        module2.exports = (version, range, hilo, options) => {
          let gtfn, ltefn, ltfn, comp, ecomp;
          switch (version = new SemVer(version, options), range = new Range(range, options), hilo) {
            case ">":
              gtfn = gt, ltefn = lte, ltfn = lt, comp = ">", ecomp = ">=";
              break;
            case "<":
              gtfn = lt, ltefn = gte, ltfn = gt, comp = "<", ecomp = "<=";
              break;
            default:
              throw new TypeError('Must provide a hilo val of "<" or ">"');
          }
          if (satisfies(version, range, options)) return false;
          for (let i2 = 0; i2 < range.set.length; ++i2) {
            const comparators = range.set[i2];
            let high = null, low = null;
            if (comparators.forEach((comparator) => {
              comparator.semver === ANY && (comparator = new Comparator(">=0.0.0")), high = high || comparator, low = low || comparator, gtfn(comparator.semver, high.semver, options) ? high = comparator : ltfn(comparator.semver, low.semver, options) && (low = comparator);
            }), high.operator === comp || high.operator === ecomp) return false;
            if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) return false;
            if (low.operator === ecomp && ltfn(version, low.semver)) return false;
          }
          return true;
        };
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/simplify.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const satisfies = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/satisfies.js"), compare = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare.js");
        module2.exports = (versions, range, options) => {
          const set = [];
          let first = null, prev = null;
          const v = versions.sort((a2, b2) => compare(a2, b2, options));
          for (const version of v) {
            satisfies(version, range, options) ? (prev = version, first || (first = version)) : (prev && set.push([first, prev]), prev = null, first = null);
          }
          first && set.push([first, null]);
          const ranges = [];
          for (const [min, max] of set) min === max ? ranges.push(min) : max || min !== v[0] ? max ? min === v[0] ? ranges.push(`<=${max}`) : ranges.push(`${min} - ${max}`) : ranges.push(`>=${min}`) : ranges.push("*");
          const simplified = ranges.join(" || "), original = "string" == typeof range.raw ? range.raw : String(range);
          return simplified.length < original.length ? simplified : range;
        };
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/subset.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const Range = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/range.js"), Comparator = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/comparator.js"), { ANY } = Comparator, satisfies = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/satisfies.js"), compare = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare.js"), minimumVersionWithPreRelease = [new Comparator(">=0.0.0-0")], minimumVersion = [new Comparator(">=0.0.0")], simpleSubset = (sub, dom, options) => {
          if (sub === dom) return true;
          if (1 === sub.length && sub[0].semver === ANY) {
            if (1 === dom.length && dom[0].semver === ANY) return true;
            sub = options.includePrerelease ? minimumVersionWithPreRelease : minimumVersion;
          }
          if (1 === dom.length && dom[0].semver === ANY) {
            if (options.includePrerelease) return true;
            dom = minimumVersion;
          }
          const eqSet = /* @__PURE__ */ new Set();
          let gt, lt, gtltComp, higher, lower, hasDomLT, hasDomGT;
          for (const c4 of sub) ">" === c4.operator || ">=" === c4.operator ? gt = higherGT(gt, c4, options) : "<" === c4.operator || "<=" === c4.operator ? lt = lowerLT(lt, c4, options) : eqSet.add(c4.semver);
          if (eqSet.size > 1) return null;
          if (gt && lt) {
            if (gtltComp = compare(gt.semver, lt.semver, options), gtltComp > 0) return null;
            if (0 === gtltComp && (">=" !== gt.operator || "<=" !== lt.operator)) return null;
          }
          for (const eq of eqSet) {
            if (gt && !satisfies(eq, String(gt), options)) return null;
            if (lt && !satisfies(eq, String(lt), options)) return null;
            for (const c4 of dom) if (!satisfies(eq, String(c4), options)) return false;
            return true;
          }
          let needDomLTPre = !(!lt || options.includePrerelease || !lt.semver.prerelease.length) && lt.semver, needDomGTPre = !(!gt || options.includePrerelease || !gt.semver.prerelease.length) && gt.semver;
          needDomLTPre && 1 === needDomLTPre.prerelease.length && "<" === lt.operator && 0 === needDomLTPre.prerelease[0] && (needDomLTPre = false);
          for (const c4 of dom) {
            if (hasDomGT = hasDomGT || ">" === c4.operator || ">=" === c4.operator, hasDomLT = hasDomLT || "<" === c4.operator || "<=" === c4.operator, gt) {
              if (needDomGTPre && c4.semver.prerelease && c4.semver.prerelease.length && c4.semver.major === needDomGTPre.major && c4.semver.minor === needDomGTPre.minor && c4.semver.patch === needDomGTPre.patch && (needDomGTPre = false), ">" === c4.operator || ">=" === c4.operator) {
                if (higher = higherGT(gt, c4, options), higher === c4 && higher !== gt) return false;
              } else if (">=" === gt.operator && !satisfies(gt.semver, String(c4), options)) return false;
            }
            if (lt) {
              if (needDomLTPre && c4.semver.prerelease && c4.semver.prerelease.length && c4.semver.major === needDomLTPre.major && c4.semver.minor === needDomLTPre.minor && c4.semver.patch === needDomLTPre.patch && (needDomLTPre = false), "<" === c4.operator || "<=" === c4.operator) {
                if (lower = lowerLT(lt, c4, options), lower === c4 && lower !== lt) return false;
              } else if ("<=" === lt.operator && !satisfies(lt.semver, String(c4), options)) return false;
            }
            if (!c4.operator && (lt || gt) && 0 !== gtltComp) return false;
          }
          return !(gt && hasDomLT && !lt && 0 !== gtltComp) && (!(lt && hasDomGT && !gt && 0 !== gtltComp) && (!needDomGTPre && !needDomLTPre));
        }, higherGT = (a2, b2, options) => {
          if (!a2) return b2;
          const comp = compare(a2.semver, b2.semver, options);
          return comp > 0 ? a2 : comp < 0 || ">" === b2.operator && ">=" === a2.operator ? b2 : a2;
        }, lowerLT = (a2, b2, options) => {
          if (!a2) return b2;
          const comp = compare(a2.semver, b2.semver, options);
          return comp < 0 ? a2 : comp > 0 || "<" === b2.operator && "<=" === a2.operator ? b2 : a2;
        };
        module2.exports = (sub, dom, options = {}) => {
          if (sub === dom) return true;
          sub = new Range(sub, options), dom = new Range(dom, options);
          let sawNonNull = false;
          OUTER: for (const simpleSub of sub.set) {
            for (const simpleDom of dom.set) {
              const isSub = simpleSubset(simpleSub, simpleDom, options);
              if (sawNonNull = sawNonNull || null !== isSub, isSub) continue OUTER;
            }
            if (sawNonNull) return false;
          }
          return true;
        };
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/to-comparators.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const Range = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/range.js");
        module2.exports = (range, options) => new Range(range, options).set.map((comp) => comp.map((c4) => c4.value).join(" ").trim().split(" "));
      }, "./node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/valid.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const Range = __webpack_require__2("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/range.js");
        module2.exports = (range, options) => {
          try {
            return new Range(range, options).range || "*";
          } catch (er) {
            return null;
          }
        };
      }, crypto: (module2) => {
        "use strict";
        module2.exports = __require("crypto");
      }, fs: (module2) => {
        "use strict";
        module2.exports = __require("fs");
      }, module: (module2) => {
        "use strict";
        module2.exports = __require("module");
      }, path: (module2) => {
        "use strict";
        module2.exports = __require("path");
      } }, __webpack_module_cache__ = {};
      function __webpack_require__(moduleId) {
        var cachedModule = __webpack_module_cache__[moduleId];
        if (void 0 !== cachedModule) return cachedModule.exports;
        var module2 = __webpack_module_cache__[moduleId] = { id: moduleId, loaded: false, exports: {} };
        return __webpack_modules__[moduleId](module2, module2.exports, __webpack_require__), module2.loaded = true, module2.exports;
      }
      __webpack_require__.n = (module2) => {
        var getter = module2 && module2.__esModule ? () => module2.default : () => module2;
        return __webpack_require__.d(getter, { a: getter }), getter;
      }, __webpack_require__.d = (exports2, definition) => {
        for (var key in definition) __webpack_require__.o(definition, key) && !__webpack_require__.o(exports2, key) && Object.defineProperty(exports2, key, { enumerable: true, get: definition[key] });
      }, __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop), __webpack_require__.nmd = (module2) => (module2.paths = [], module2.children || (module2.children = []), module2);
      var __webpack_exports__ = {};
      (() => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, { default: () => createJITI });
        var external_fs_ = __webpack_require__("fs"), external_module_ = __webpack_require__("module");
        const external_perf_hooks_namespaceObject = __require("perf_hooks"), external_os_namespaceObject = __require("os"), external_vm_namespaceObject = __require("vm");
        var external_vm_default = __webpack_require__.n(external_vm_namespaceObject);
        const external_url_namespaceObject = __require("url"), _DRIVE_LETTER_START_RE = /^[A-Za-z]:\//;
        function normalizeWindowsPath(input = "") {
          return input ? input.replace(/\\/g, "/").replace(_DRIVE_LETTER_START_RE, (r2) => r2.toUpperCase()) : input;
        }
        const _UNC_REGEX = /^[/\\]{2}/, _IS_ABSOLUTE_RE = /^[/\\](?![/\\])|^[/\\]{2}(?!\.)|^[A-Za-z]:[/\\]/, _DRIVE_LETTER_RE = /^[A-Za-z]:$/, pathe_ff20891b_normalize = function(path9) {
          if (0 === path9.length) return ".";
          const isUNCPath = (path9 = normalizeWindowsPath(path9)).match(_UNC_REGEX), isPathAbsolute = isAbsolute(path9), trailingSeparator = "/" === path9[path9.length - 1];
          return 0 === (path9 = normalizeString(path9, !isPathAbsolute)).length ? isPathAbsolute ? "/" : trailingSeparator ? "./" : "." : (trailingSeparator && (path9 += "/"), _DRIVE_LETTER_RE.test(path9) && (path9 += "/"), isUNCPath ? isPathAbsolute ? `//${path9}` : `//./${path9}` : isPathAbsolute && !isAbsolute(path9) ? `/${path9}` : path9);
        }, join = function(...arguments_) {
          if (0 === arguments_.length) return ".";
          let joined;
          for (const argument of arguments_) argument && argument.length > 0 && (void 0 === joined ? joined = argument : joined += `/${argument}`);
          return void 0 === joined ? "." : pathe_ff20891b_normalize(joined.replace(/\/\/+/g, "/"));
        };
        function normalizeString(path9, allowAboveRoot) {
          let res = "", lastSegmentLength = 0, lastSlash = -1, dots = 0, char = null;
          for (let index = 0; index <= path9.length; ++index) {
            if (index < path9.length) char = path9[index];
            else {
              if ("/" === char) break;
              char = "/";
            }
            if ("/" === char) {
              if (lastSlash === index - 1 || 1 === dots) ;
              else if (2 === dots) {
                if (res.length < 2 || 2 !== lastSegmentLength || "." !== res[res.length - 1] || "." !== res[res.length - 2]) {
                  if (res.length > 2) {
                    const lastSlashIndex = res.lastIndexOf("/");
                    -1 === lastSlashIndex ? (res = "", lastSegmentLength = 0) : (res = res.slice(0, lastSlashIndex), lastSegmentLength = res.length - 1 - res.lastIndexOf("/")), lastSlash = index, dots = 0;
                    continue;
                  }
                  if (res.length > 0) {
                    res = "", lastSegmentLength = 0, lastSlash = index, dots = 0;
                    continue;
                  }
                }
                allowAboveRoot && (res += res.length > 0 ? "/.." : "..", lastSegmentLength = 2);
              } else res.length > 0 ? res += `/${path9.slice(lastSlash + 1, index)}` : res = path9.slice(lastSlash + 1, index), lastSegmentLength = index - lastSlash - 1;
              lastSlash = index, dots = 0;
            } else "." === char && -1 !== dots ? ++dots : dots = -1;
          }
          return res;
        }
        const isAbsolute = function(p) {
          return _IS_ABSOLUTE_RE.test(p);
        }, _EXTNAME_RE = /.(\.[^./]+)$/, extname = function(p) {
          const match = _EXTNAME_RE.exec(normalizeWindowsPath(p));
          return match && match[1] || "";
        }, pathe_ff20891b_dirname = function(p) {
          const segments = normalizeWindowsPath(p).replace(/\/$/, "").split("/").slice(0, -1);
          return 1 === segments.length && _DRIVE_LETTER_RE.test(segments[0]) && (segments[0] += "/"), segments.join("/") || (isAbsolute(p) ? "/" : ".");
        }, basename = function(p, extension) {
          const lastSegment = normalizeWindowsPath(p).split("/").pop();
          return extension && lastSegment.endsWith(extension) ? lastSegment.slice(0, -extension.length) : lastSegment;
        }, suspectProtoRx = /"(?:_|\\u0{2}5[Ff]){2}(?:p|\\u0{2}70)(?:r|\\u0{2}72)(?:o|\\u0{2}6[Ff])(?:t|\\u0{2}74)(?:o|\\u0{2}6[Ff])(?:_|\\u0{2}5[Ff]){2}"\s*:/, suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/, JsonSigRx = /^\s*["[{]|^\s*-?\d{1,16}(\.\d{1,17})?([Ee][+-]?\d+)?\s*$/;
        function jsonParseTransform(key, value2) {
          if (!("__proto__" === key || "constructor" === key && value2 && "object" == typeof value2 && "prototype" in value2)) return value2;
          !function(key2) {
            console.warn(`[destr] Dropping "${key2}" key to prevent prototype pollution.`);
          }(key);
        }
        function destr(value2, options = {}) {
          if ("string" != typeof value2) return value2;
          const _value = value2.trim();
          if ('"' === value2[0] && value2.endsWith('"') && !value2.includes("\\")) return _value.slice(1, -1);
          if (_value.length <= 9) {
            const _lval = _value.toLowerCase();
            if ("true" === _lval) return true;
            if ("false" === _lval) return false;
            if ("undefined" === _lval) return;
            if ("null" === _lval) return null;
            if ("nan" === _lval) return Number.NaN;
            if ("infinity" === _lval) return Number.POSITIVE_INFINITY;
            if ("-infinity" === _lval) return Number.NEGATIVE_INFINITY;
          }
          if (!JsonSigRx.test(value2)) {
            if (options.strict) throw new SyntaxError("[destr] Invalid JSON");
            return value2;
          }
          try {
            if (suspectProtoRx.test(value2) || suspectConstructorRx.test(value2)) {
              if (options.strict) throw new Error("[destr] Possible prototype pollution");
              return JSON.parse(value2, jsonParseTransform);
            }
            return JSON.parse(value2);
          } catch (error) {
            if (options.strict) throw error;
            return value2;
          }
        }
        function escapeStringRegexp(string) {
          if ("string" != typeof string) throw new TypeError("Expected a string");
          return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
        }
        var create_require = __webpack_require__("./node_modules/.pnpm/create-require@1.1.1/node_modules/create-require/create-require.js"), create_require_default = __webpack_require__.n(create_require), semver = __webpack_require__("./node_modules/.pnpm/semver@7.6.3/node_modules/semver/index.js");
        const pathSeparators = /* @__PURE__ */ new Set(["/", "\\", void 0]), normalizedAliasSymbol = Symbol.for("pathe:normalizedAlias");
        function normalizeAliases(_aliases) {
          if (_aliases[normalizedAliasSymbol]) return _aliases;
          const aliases = Object.fromEntries(Object.entries(_aliases).sort(([a2], [b2]) => function(a3, b3) {
            return b3.split("/").length - a3.split("/").length;
          }(a2, b2)));
          for (const key in aliases) for (const alias in aliases) alias === key || key.startsWith(alias) || aliases[key].startsWith(alias) && pathSeparators.has(aliases[key][alias.length]) && (aliases[key] = aliases[alias] + aliases[key].slice(alias.length));
          return Object.defineProperty(aliases, normalizedAliasSymbol, { value: true, enumerable: false }), aliases;
        }
        function hasTrailingSlash(path9 = "/") {
          const lastChar = path9[path9.length - 1];
          return "/" === lastChar || "\\" === lastChar;
        }
        var lib = __webpack_require__("./node_modules/.pnpm/pirates@4.0.6/node_modules/pirates/lib/index.js"), object_hash = __webpack_require__("./node_modules/.pnpm/object-hash@3.0.0/node_modules/object-hash/index.js"), object_hash_default = __webpack_require__.n(object_hash), astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 7, 9, 32, 4, 318, 1, 80, 3, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 68, 8, 2, 0, 3, 0, 2, 3, 2, 4, 2, 0, 15, 1, 83, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 7, 19, 58, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 343, 9, 54, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 10, 5350, 0, 7, 14, 11465, 27, 2343, 9, 87, 9, 39, 4, 60, 6, 26, 9, 535, 9, 470, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4178, 9, 519, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 245, 1, 2, 9, 726, 6, 110, 6, 6, 9, 4759, 9, 787719, 239], astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 4, 51, 13, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 39, 27, 10, 22, 251, 41, 7, 1, 17, 2, 60, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 31, 9, 2, 0, 3, 0, 2, 37, 2, 0, 26, 0, 2, 0, 45, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 200, 32, 32, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 26, 3994, 6, 582, 6842, 29, 1763, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 433, 44, 212, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 42, 9, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 229, 29, 3, 0, 496, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191], nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC", reservedWords = { 3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile", 5: "class enum extends super const export import", 6: "enum", strict: "implements interface let package private protected public static yield", strictBind: "eval arguments" }, ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this", keywords$1 = { 5: ecma5AndLessKeywords, "5module": ecma5AndLessKeywords + " export import", 6: ecma5AndLessKeywords + " const class extends export import super" }, keywordRelationalOperator = /^in(stanceof)?$/, nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]"), nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0897-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65]");
        function isInAstralSet(code, set) {
          for (var pos = 65536, i3 = 0; i3 < set.length; i3 += 2) {
            if ((pos += set[i3]) > code) return false;
            if ((pos += set[i3 + 1]) >= code) return true;
          }
          return false;
        }
        function isIdentifierStart(code, astral) {
          return code < 65 ? 36 === code : code < 91 || (code < 97 ? 95 === code : code < 123 || (code <= 65535 ? code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code)) : false !== astral && isInAstralSet(code, astralIdentifierStartCodes)));
        }
        function isIdentifierChar(code, astral) {
          return code < 48 ? 36 === code : code < 58 || !(code < 65) && (code < 91 || (code < 97 ? 95 === code : code < 123 || (code <= 65535 ? code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code)) : false !== astral && (isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)))));
        }
        var TokenType = function(label, conf) {
          void 0 === conf && (conf = {}), this.label = label, this.keyword = conf.keyword, this.beforeExpr = !!conf.beforeExpr, this.startsExpr = !!conf.startsExpr, this.isLoop = !!conf.isLoop, this.isAssign = !!conf.isAssign, this.prefix = !!conf.prefix, this.postfix = !!conf.postfix, this.binop = conf.binop || null, this.updateContext = null;
        };
        function binop(name, prec) {
          return new TokenType(name, { beforeExpr: true, binop: prec });
        }
        var beforeExpr = { beforeExpr: true }, startsExpr = { startsExpr: true }, keywords = {};
        function kw(name, options) {
          return void 0 === options && (options = {}), options.keyword = name, keywords[name] = new TokenType(name, options);
        }
        var types$1 = { num: new TokenType("num", startsExpr), regexp: new TokenType("regexp", startsExpr), string: new TokenType("string", startsExpr), name: new TokenType("name", startsExpr), privateId: new TokenType("privateId", startsExpr), eof: new TokenType("eof"), bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }), bracketR: new TokenType("]"), braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }), braceR: new TokenType("}"), parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }), parenR: new TokenType(")"), comma: new TokenType(",", beforeExpr), semi: new TokenType(";", beforeExpr), colon: new TokenType(":", beforeExpr), dot: new TokenType("."), question: new TokenType("?", beforeExpr), questionDot: new TokenType("?."), arrow: new TokenType("=>", beforeExpr), template: new TokenType("template"), invalidTemplate: new TokenType("invalidTemplate"), ellipsis: new TokenType("...", beforeExpr), backQuote: new TokenType("`", startsExpr), dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }), eq: new TokenType("=", { beforeExpr: true, isAssign: true }), assign: new TokenType("_=", { beforeExpr: true, isAssign: true }), incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }), prefix: new TokenType("!/~", { beforeExpr: true, prefix: true, startsExpr: true }), logicalOR: binop("||", 1), logicalAND: binop("&&", 2), bitwiseOR: binop("|", 3), bitwiseXOR: binop("^", 4), bitwiseAND: binop("&", 5), equality: binop("==/!=/===/!==", 6), relational: binop("</>/<=/>=", 7), bitShift: binop("<</>>/>>>", 8), plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }), modulo: binop("%", 10), star: binop("*", 10), slash: binop("/", 10), starstar: new TokenType("**", { beforeExpr: true }), coalesce: binop("??", 1), _break: kw("break"), _case: kw("case", beforeExpr), _catch: kw("catch"), _continue: kw("continue"), _debugger: kw("debugger"), _default: kw("default", beforeExpr), _do: kw("do", { isLoop: true, beforeExpr: true }), _else: kw("else", beforeExpr), _finally: kw("finally"), _for: kw("for", { isLoop: true }), _function: kw("function", startsExpr), _if: kw("if"), _return: kw("return", beforeExpr), _switch: kw("switch"), _throw: kw("throw", beforeExpr), _try: kw("try"), _var: kw("var"), _const: kw("const"), _while: kw("while", { isLoop: true }), _with: kw("with"), _new: kw("new", { beforeExpr: true, startsExpr: true }), _this: kw("this", startsExpr), _super: kw("super", startsExpr), _class: kw("class", startsExpr), _extends: kw("extends", beforeExpr), _export: kw("export"), _import: kw("import", startsExpr), _null: kw("null", startsExpr), _true: kw("true", startsExpr), _false: kw("false", startsExpr), _in: kw("in", { beforeExpr: true, binop: 7 }), _instanceof: kw("instanceof", { beforeExpr: true, binop: 7 }), _typeof: kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true }), _void: kw("void", { beforeExpr: true, prefix: true, startsExpr: true }), _delete: kw("delete", { beforeExpr: true, prefix: true, startsExpr: true }) }, lineBreak = /\r\n?|\n|\u2028|\u2029/, lineBreakG = new RegExp(lineBreak.source, "g");
        function isNewLine(code) {
          return 10 === code || 13 === code || 8232 === code || 8233 === code;
        }
        function nextLineBreak(code, from, end) {
          void 0 === end && (end = code.length);
          for (var i3 = from; i3 < end; i3++) {
            var next = code.charCodeAt(i3);
            if (isNewLine(next)) return i3 < end - 1 && 13 === next && 10 === code.charCodeAt(i3 + 1) ? i3 + 2 : i3 + 1;
          }
          return -1;
        }
        var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/, skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, ref = Object.prototype, acorn_hasOwnProperty = ref.hasOwnProperty, acorn_toString = ref.toString, hasOwn = Object.hasOwn || function(obj, propName) {
          return acorn_hasOwnProperty.call(obj, propName);
        }, isArray = Array.isArray || function(obj) {
          return "[object Array]" === acorn_toString.call(obj);
        }, regexpCache = /* @__PURE__ */ Object.create(null);
        function wordsRegexp(words) {
          return regexpCache[words] || (regexpCache[words] = new RegExp("^(?:" + words.replace(/ /g, "|") + ")$"));
        }
        function codePointToString(code) {
          return code <= 65535 ? String.fromCharCode(code) : (code -= 65536, String.fromCharCode(55296 + (code >> 10), 56320 + (1023 & code)));
        }
        var loneSurrogate = /(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/, Position = function(line, col) {
          this.line = line, this.column = col;
        };
        Position.prototype.offset = function(n2) {
          return new Position(this.line, this.column + n2);
        };
        var SourceLocation = function(p, start, end) {
          this.start = start, this.end = end, null !== p.sourceFile && (this.source = p.sourceFile);
        };
        function getLineInfo(input, offset) {
          for (var line = 1, cur = 0; ; ) {
            var nextBreak = nextLineBreak(input, cur, offset);
            if (nextBreak < 0) return new Position(line, offset - cur);
            ++line, cur = nextBreak;
          }
        }
        var defaultOptions = { ecmaVersion: null, sourceType: "script", onInsertedSemicolon: null, onTrailingComma: null, allowReserved: null, allowReturnOutsideFunction: false, allowImportExportEverywhere: false, allowAwaitOutsideFunction: null, allowSuperOutsideMethod: null, allowHashBang: false, checkPrivateFields: true, locations: false, onToken: null, onComment: null, ranges: false, program: null, sourceFile: null, directSourceFile: null, preserveParens: false }, warnedAboutEcmaVersion = false;
        function getOptions(opts) {
          var options = {};
          for (var opt in defaultOptions) options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt];
          if ("latest" === options.ecmaVersion ? options.ecmaVersion = 1e8 : null == options.ecmaVersion ? (!warnedAboutEcmaVersion && "object" == typeof console && console.warn && (warnedAboutEcmaVersion = true, console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.")), options.ecmaVersion = 11) : options.ecmaVersion >= 2015 && (options.ecmaVersion -= 2009), null == options.allowReserved && (options.allowReserved = options.ecmaVersion < 5), opts && null != opts.allowHashBang || (options.allowHashBang = options.ecmaVersion >= 14), isArray(options.onToken)) {
            var tokens = options.onToken;
            options.onToken = function(token) {
              return tokens.push(token);
            };
          }
          return isArray(options.onComment) && (options.onComment = /* @__PURE__ */ function(options2, array) {
            return function(block, text, start, end, startLoc, endLoc) {
              var comment = { type: block ? "Block" : "Line", value: text, start, end };
              options2.locations && (comment.loc = new SourceLocation(this, startLoc, endLoc)), options2.ranges && (comment.range = [start, end]), array.push(comment);
            };
          }(options, options.onComment)), options;
        }
        function functionFlags(async, generator) {
          return 2 | (async ? 4 : 0) | (generator ? 8 : 0);
        }
        var Parser = function(options, input, startPos) {
          this.options = options = getOptions(options), this.sourceFile = options.sourceFile, this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : "module" === options.sourceType ? "5module" : 5]);
          var reserved = "";
          true !== options.allowReserved && (reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : 5 === options.ecmaVersion ? 5 : 3], "module" === options.sourceType && (reserved += " await")), this.reservedWords = wordsRegexp(reserved);
          var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
          this.reservedWordsStrict = wordsRegexp(reservedStrict), this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind), this.input = String(input), this.containsEsc = false, startPos ? (this.pos = startPos, this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1, this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length) : (this.pos = this.lineStart = 0, this.curLine = 1), this.type = types$1.eof, this.value = null, this.start = this.end = this.pos, this.startLoc = this.endLoc = this.curPosition(), this.lastTokEndLoc = this.lastTokStartLoc = null, this.lastTokStart = this.lastTokEnd = this.pos, this.context = this.initialContext(), this.exprAllowed = true, this.inModule = "module" === options.sourceType, this.strict = this.inModule || this.strictDirective(this.pos), this.potentialArrowAt = -1, this.potentialArrowInForAwait = false, this.yieldPos = this.awaitPos = this.awaitIdentPos = 0, this.labels = [], this.undefinedExports = /* @__PURE__ */ Object.create(null), 0 === this.pos && options.allowHashBang && "#!" === this.input.slice(0, 2) && this.skipLineComment(2), this.scopeStack = [], this.enterScope(1), this.regexpState = null, this.privateNameStack = [];
        }, prototypeAccessors = { inFunction: { configurable: true }, inGenerator: { configurable: true }, inAsync: { configurable: true }, canAwait: { configurable: true }, allowSuper: { configurable: true }, allowDirectSuper: { configurable: true }, treatFunctionsAsVar: { configurable: true }, allowNewDotTarget: { configurable: true }, inClassStaticBlock: { configurable: true } };
        Parser.prototype.parse = function() {
          var node = this.options.program || this.startNode();
          return this.nextToken(), this.parseTopLevel(node);
        }, prototypeAccessors.inFunction.get = function() {
          return (2 & this.currentVarScope().flags) > 0;
        }, prototypeAccessors.inGenerator.get = function() {
          return (8 & this.currentVarScope().flags) > 0 && !this.currentVarScope().inClassFieldInit;
        }, prototypeAccessors.inAsync.get = function() {
          return (4 & this.currentVarScope().flags) > 0 && !this.currentVarScope().inClassFieldInit;
        }, prototypeAccessors.canAwait.get = function() {
          for (var i3 = this.scopeStack.length - 1; i3 >= 0; i3--) {
            var scope = this.scopeStack[i3];
            if (scope.inClassFieldInit || 256 & scope.flags) return false;
            if (2 & scope.flags) return (4 & scope.flags) > 0;
          }
          return this.inModule && this.options.ecmaVersion >= 13 || this.options.allowAwaitOutsideFunction;
        }, prototypeAccessors.allowSuper.get = function() {
          var ref2 = this.currentThisScope(), flags = ref2.flags, inClassFieldInit = ref2.inClassFieldInit;
          return (64 & flags) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod;
        }, prototypeAccessors.allowDirectSuper.get = function() {
          return (128 & this.currentThisScope().flags) > 0;
        }, prototypeAccessors.treatFunctionsAsVar.get = function() {
          return this.treatFunctionsAsVarInScope(this.currentScope());
        }, prototypeAccessors.allowNewDotTarget.get = function() {
          var ref2 = this.currentThisScope(), flags = ref2.flags, inClassFieldInit = ref2.inClassFieldInit;
          return (258 & flags) > 0 || inClassFieldInit;
        }, prototypeAccessors.inClassStaticBlock.get = function() {
          return (256 & this.currentVarScope().flags) > 0;
        }, Parser.extend = function() {
          for (var plugins = [], len = arguments.length; len--; ) plugins[len] = arguments[len];
          for (var cls = this, i3 = 0; i3 < plugins.length; i3++) cls = plugins[i3](cls);
          return cls;
        }, Parser.parse = function(input, options) {
          return new this(options, input).parse();
        }, Parser.parseExpressionAt = function(input, pos, options) {
          var parser = new this(options, input, pos);
          return parser.nextToken(), parser.parseExpression();
        }, Parser.tokenizer = function(input, options) {
          return new this(options, input);
        }, Object.defineProperties(Parser.prototype, prototypeAccessors);
        var pp$9 = Parser.prototype, literal = /^(?:'((?:\\[^]|[^'\\])*?)'|"((?:\\[^]|[^"\\])*?)")/;
        pp$9.strictDirective = function(start) {
          if (this.options.ecmaVersion < 5) return false;
          for (; ; ) {
            skipWhiteSpace.lastIndex = start, start += skipWhiteSpace.exec(this.input)[0].length;
            var match = literal.exec(this.input.slice(start));
            if (!match) return false;
            if ("use strict" === (match[1] || match[2])) {
              skipWhiteSpace.lastIndex = start + match[0].length;
              var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length, next = this.input.charAt(end);
              return ";" === next || "}" === next || lineBreak.test(spaceAfter[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(next) || "!" === next && "=" === this.input.charAt(end + 1));
            }
            start += match[0].length, skipWhiteSpace.lastIndex = start, start += skipWhiteSpace.exec(this.input)[0].length, ";" === this.input[start] && start++;
          }
        }, pp$9.eat = function(type) {
          return this.type === type && (this.next(), true);
        }, pp$9.isContextual = function(name) {
          return this.type === types$1.name && this.value === name && !this.containsEsc;
        }, pp$9.eatContextual = function(name) {
          return !!this.isContextual(name) && (this.next(), true);
        }, pp$9.expectContextual = function(name) {
          this.eatContextual(name) || this.unexpected();
        }, pp$9.canInsertSemicolon = function() {
          return this.type === types$1.eof || this.type === types$1.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
        }, pp$9.insertSemicolon = function() {
          if (this.canInsertSemicolon()) return this.options.onInsertedSemicolon && this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc), true;
        }, pp$9.semicolon = function() {
          this.eat(types$1.semi) || this.insertSemicolon() || this.unexpected();
        }, pp$9.afterTrailingComma = function(tokType, notNext) {
          if (this.type === tokType) return this.options.onTrailingComma && this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc), notNext || this.next(), true;
        }, pp$9.expect = function(type) {
          this.eat(type) || this.unexpected();
        }, pp$9.unexpected = function(pos) {
          this.raise(null != pos ? pos : this.start, "Unexpected token");
        };
        var DestructuringErrors = function() {
          this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
        };
        pp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {
          if (refDestructuringErrors) {
            refDestructuringErrors.trailingComma > -1 && this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
            var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
            parens > -1 && this.raiseRecoverable(parens, isAssign ? "Assigning to rvalue" : "Parenthesized pattern");
          }
        }, pp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
          if (!refDestructuringErrors) return false;
          var shorthandAssign = refDestructuringErrors.shorthandAssign, doubleProto = refDestructuringErrors.doubleProto;
          if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;
          shorthandAssign >= 0 && this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns"), doubleProto >= 0 && this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
        }, pp$9.checkYieldAwaitInDefaultParams = function() {
          this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos) && this.raise(this.yieldPos, "Yield expression cannot be a default value"), this.awaitPos && this.raise(this.awaitPos, "Await expression cannot be a default value");
        }, pp$9.isSimpleAssignTarget = function(expr) {
          return "ParenthesizedExpression" === expr.type ? this.isSimpleAssignTarget(expr.expression) : "Identifier" === expr.type || "MemberExpression" === expr.type;
        };
        var pp$8 = Parser.prototype;
        pp$8.parseTopLevel = function(node) {
          var exports2 = /* @__PURE__ */ Object.create(null);
          for (node.body || (node.body = []); this.type !== types$1.eof; ) {
            var stmt = this.parseStatement(null, true, exports2);
            node.body.push(stmt);
          }
          if (this.inModule) for (var i3 = 0, list2 = Object.keys(this.undefinedExports); i3 < list2.length; i3 += 1) {
            var name = list2[i3];
            this.raiseRecoverable(this.undefinedExports[name].start, "Export '" + name + "' is not defined");
          }
          return this.adaptDirectivePrologue(node.body), this.next(), node.sourceType = this.options.sourceType, this.finishNode(node, "Program");
        };
        var loopLabel = { kind: "loop" }, switchLabel = { kind: "switch" };
        pp$8.isLet = function(context) {
          if (this.options.ecmaVersion < 6 || !this.isContextual("let")) return false;
          skipWhiteSpace.lastIndex = this.pos;
          var skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
          if (91 === nextCh || 92 === nextCh) return true;
          if (context) return false;
          if (123 === nextCh || nextCh > 55295 && nextCh < 56320) return true;
          if (isIdentifierStart(nextCh, true)) {
            for (var pos = next + 1; isIdentifierChar(nextCh = this.input.charCodeAt(pos), true); ) ++pos;
            if (92 === nextCh || nextCh > 55295 && nextCh < 56320) return true;
            var ident = this.input.slice(next, pos);
            if (!keywordRelationalOperator.test(ident)) return true;
          }
          return false;
        }, pp$8.isAsyncFunction = function() {
          if (this.options.ecmaVersion < 8 || !this.isContextual("async")) return false;
          skipWhiteSpace.lastIndex = this.pos;
          var after, skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length;
          return !(lineBreak.test(this.input.slice(this.pos, next)) || "function" !== this.input.slice(next, next + 8) || next + 8 !== this.input.length && (isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 55295 && after < 56320));
        }, pp$8.parseStatement = function(context, topLevel, exports2) {
          var kind, starttype = this.type, node = this.startNode();
          switch (this.isLet(context) && (starttype = types$1._var, kind = "let"), starttype) {
            case types$1._break:
            case types$1._continue:
              return this.parseBreakContinueStatement(node, starttype.keyword);
            case types$1._debugger:
              return this.parseDebuggerStatement(node);
            case types$1._do:
              return this.parseDoStatement(node);
            case types$1._for:
              return this.parseForStatement(node);
            case types$1._function:
              return context && (this.strict || "if" !== context && "label" !== context) && this.options.ecmaVersion >= 6 && this.unexpected(), this.parseFunctionStatement(node, false, !context);
            case types$1._class:
              return context && this.unexpected(), this.parseClass(node, true);
            case types$1._if:
              return this.parseIfStatement(node);
            case types$1._return:
              return this.parseReturnStatement(node);
            case types$1._switch:
              return this.parseSwitchStatement(node);
            case types$1._throw:
              return this.parseThrowStatement(node);
            case types$1._try:
              return this.parseTryStatement(node);
            case types$1._const:
            case types$1._var:
              return kind = kind || this.value, context && "var" !== kind && this.unexpected(), this.parseVarStatement(node, kind);
            case types$1._while:
              return this.parseWhileStatement(node);
            case types$1._with:
              return this.parseWithStatement(node);
            case types$1.braceL:
              return this.parseBlock(true, node);
            case types$1.semi:
              return this.parseEmptyStatement(node);
            case types$1._export:
            case types$1._import:
              if (this.options.ecmaVersion > 10 && starttype === types$1._import) {
                skipWhiteSpace.lastIndex = this.pos;
                var skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
                if (40 === nextCh || 46 === nextCh) return this.parseExpressionStatement(node, this.parseExpression());
              }
              return this.options.allowImportExportEverywhere || (topLevel || this.raise(this.start, "'import' and 'export' may only appear at the top level"), this.inModule || this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'")), starttype === types$1._import ? this.parseImport(node) : this.parseExport(node, exports2);
            default:
              if (this.isAsyncFunction()) return context && this.unexpected(), this.next(), this.parseFunctionStatement(node, true, !context);
              var maybeName = this.value, expr = this.parseExpression();
              return starttype === types$1.name && "Identifier" === expr.type && this.eat(types$1.colon) ? this.parseLabeledStatement(node, maybeName, expr, context) : this.parseExpressionStatement(node, expr);
          }
        }, pp$8.parseBreakContinueStatement = function(node, keyword) {
          var isBreak = "break" === keyword;
          this.next(), this.eat(types$1.semi) || this.insertSemicolon() ? node.label = null : this.type !== types$1.name ? this.unexpected() : (node.label = this.parseIdent(), this.semicolon());
          for (var i3 = 0; i3 < this.labels.length; ++i3) {
            var lab = this.labels[i3];
            if (null == node.label || lab.name === node.label.name) {
              if (null != lab.kind && (isBreak || "loop" === lab.kind)) break;
              if (node.label && isBreak) break;
            }
          }
          return i3 === this.labels.length && this.raise(node.start, "Unsyntactic " + keyword), this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
        }, pp$8.parseDebuggerStatement = function(node) {
          return this.next(), this.semicolon(), this.finishNode(node, "DebuggerStatement");
        }, pp$8.parseDoStatement = function(node) {
          return this.next(), this.labels.push(loopLabel), node.body = this.parseStatement("do"), this.labels.pop(), this.expect(types$1._while), node.test = this.parseParenExpression(), this.options.ecmaVersion >= 6 ? this.eat(types$1.semi) : this.semicolon(), this.finishNode(node, "DoWhileStatement");
        }, pp$8.parseForStatement = function(node) {
          this.next();
          var awaitAt = this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await") ? this.lastTokStart : -1;
          if (this.labels.push(loopLabel), this.enterScope(0), this.expect(types$1.parenL), this.type === types$1.semi) return awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, null);
          var isLet = this.isLet();
          if (this.type === types$1._var || this.type === types$1._const || isLet) {
            var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
            return this.next(), this.parseVar(init$1, true, kind), this.finishNode(init$1, "VariableDeclaration"), (this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && 1 === init$1.declarations.length ? (this.options.ecmaVersion >= 9 && (this.type === types$1._in ? awaitAt > -1 && this.unexpected(awaitAt) : node.await = awaitAt > -1), this.parseForIn(node, init$1)) : (awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, init$1));
          }
          var startsWithLet = this.isContextual("let"), isForOf = false, containsEsc = this.containsEsc, refDestructuringErrors = new DestructuringErrors(), initPos = this.start, init = awaitAt > -1 ? this.parseExprSubscripts(refDestructuringErrors, "await") : this.parseExpression(true, refDestructuringErrors);
          return this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual("of")) ? (awaitAt > -1 ? (this.type === types$1._in && this.unexpected(awaitAt), node.await = true) : isForOf && this.options.ecmaVersion >= 8 && (init.start !== initPos || containsEsc || "Identifier" !== init.type || "async" !== init.name ? this.options.ecmaVersion >= 9 && (node.await = false) : this.unexpected()), startsWithLet && isForOf && this.raise(init.start, "The left-hand side of a for-of loop may not start with 'let'."), this.toAssignable(init, false, refDestructuringErrors), this.checkLValPattern(init), this.parseForIn(node, init)) : (this.checkExpressionErrors(refDestructuringErrors, true), awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, init));
        }, pp$8.parseFunctionStatement = function(node, isAsync, declarationPosition) {
          return this.next(), this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);
        }, pp$8.parseIfStatement = function(node) {
          return this.next(), node.test = this.parseParenExpression(), node.consequent = this.parseStatement("if"), node.alternate = this.eat(types$1._else) ? this.parseStatement("if") : null, this.finishNode(node, "IfStatement");
        }, pp$8.parseReturnStatement = function(node) {
          return this.inFunction || this.options.allowReturnOutsideFunction || this.raise(this.start, "'return' outside of function"), this.next(), this.eat(types$1.semi) || this.insertSemicolon() ? node.argument = null : (node.argument = this.parseExpression(), this.semicolon()), this.finishNode(node, "ReturnStatement");
        }, pp$8.parseSwitchStatement = function(node) {
          var cur;
          this.next(), node.discriminant = this.parseParenExpression(), node.cases = [], this.expect(types$1.braceL), this.labels.push(switchLabel), this.enterScope(0);
          for (var sawDefault = false; this.type !== types$1.braceR; ) if (this.type === types$1._case || this.type === types$1._default) {
            var isCase = this.type === types$1._case;
            cur && this.finishNode(cur, "SwitchCase"), node.cases.push(cur = this.startNode()), cur.consequent = [], this.next(), isCase ? cur.test = this.parseExpression() : (sawDefault && this.raiseRecoverable(this.lastTokStart, "Multiple default clauses"), sawDefault = true, cur.test = null), this.expect(types$1.colon);
          } else cur || this.unexpected(), cur.consequent.push(this.parseStatement(null));
          return this.exitScope(), cur && this.finishNode(cur, "SwitchCase"), this.next(), this.labels.pop(), this.finishNode(node, "SwitchStatement");
        }, pp$8.parseThrowStatement = function(node) {
          return this.next(), lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) && this.raise(this.lastTokEnd, "Illegal newline after throw"), node.argument = this.parseExpression(), this.semicolon(), this.finishNode(node, "ThrowStatement");
        };
        var empty$1 = [];
        pp$8.parseCatchClauseParam = function() {
          var param = this.parseBindingAtom(), simple = "Identifier" === param.type;
          return this.enterScope(simple ? 32 : 0), this.checkLValPattern(param, simple ? 4 : 2), this.expect(types$1.parenR), param;
        }, pp$8.parseTryStatement = function(node) {
          if (this.next(), node.block = this.parseBlock(), node.handler = null, this.type === types$1._catch) {
            var clause = this.startNode();
            this.next(), this.eat(types$1.parenL) ? clause.param = this.parseCatchClauseParam() : (this.options.ecmaVersion < 10 && this.unexpected(), clause.param = null, this.enterScope(0)), clause.body = this.parseBlock(false), this.exitScope(), node.handler = this.finishNode(clause, "CatchClause");
          }
          return node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null, node.handler || node.finalizer || this.raise(node.start, "Missing catch or finally clause"), this.finishNode(node, "TryStatement");
        }, pp$8.parseVarStatement = function(node, kind, allowMissingInitializer) {
          return this.next(), this.parseVar(node, false, kind, allowMissingInitializer), this.semicolon(), this.finishNode(node, "VariableDeclaration");
        }, pp$8.parseWhileStatement = function(node) {
          return this.next(), node.test = this.parseParenExpression(), this.labels.push(loopLabel), node.body = this.parseStatement("while"), this.labels.pop(), this.finishNode(node, "WhileStatement");
        }, pp$8.parseWithStatement = function(node) {
          return this.strict && this.raise(this.start, "'with' in strict mode"), this.next(), node.object = this.parseParenExpression(), node.body = this.parseStatement("with"), this.finishNode(node, "WithStatement");
        }, pp$8.parseEmptyStatement = function(node) {
          return this.next(), this.finishNode(node, "EmptyStatement");
        }, pp$8.parseLabeledStatement = function(node, maybeName, expr, context) {
          for (var i$1 = 0, list2 = this.labels; i$1 < list2.length; i$1 += 1) {
            list2[i$1].name === maybeName && this.raise(expr.start, "Label '" + maybeName + "' is already declared");
          }
          for (var kind = this.type.isLoop ? "loop" : this.type === types$1._switch ? "switch" : null, i3 = this.labels.length - 1; i3 >= 0; i3--) {
            var label$1 = this.labels[i3];
            if (label$1.statementStart !== node.start) break;
            label$1.statementStart = this.start, label$1.kind = kind;
          }
          return this.labels.push({ name: maybeName, kind, statementStart: this.start }), node.body = this.parseStatement(context ? -1 === context.indexOf("label") ? context + "label" : context : "label"), this.labels.pop(), node.label = expr, this.finishNode(node, "LabeledStatement");
        }, pp$8.parseExpressionStatement = function(node, expr) {
          return node.expression = expr, this.semicolon(), this.finishNode(node, "ExpressionStatement");
        }, pp$8.parseBlock = function(createNewLexicalScope, node, exitStrict) {
          for (void 0 === createNewLexicalScope && (createNewLexicalScope = true), void 0 === node && (node = this.startNode()), node.body = [], this.expect(types$1.braceL), createNewLexicalScope && this.enterScope(0); this.type !== types$1.braceR; ) {
            var stmt = this.parseStatement(null);
            node.body.push(stmt);
          }
          return exitStrict && (this.strict = false), this.next(), createNewLexicalScope && this.exitScope(), this.finishNode(node, "BlockStatement");
        }, pp$8.parseFor = function(node, init) {
          return node.init = init, this.expect(types$1.semi), node.test = this.type === types$1.semi ? null : this.parseExpression(), this.expect(types$1.semi), node.update = this.type === types$1.parenR ? null : this.parseExpression(), this.expect(types$1.parenR), node.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(node, "ForStatement");
        }, pp$8.parseForIn = function(node, init) {
          var isForIn = this.type === types$1._in;
          return this.next(), "VariableDeclaration" === init.type && null != init.declarations[0].init && (!isForIn || this.options.ecmaVersion < 8 || this.strict || "var" !== init.kind || "Identifier" !== init.declarations[0].id.type) && this.raise(init.start, (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer"), node.left = init, node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign(), this.expect(types$1.parenR), node.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
        }, pp$8.parseVar = function(node, isFor, kind, allowMissingInitializer) {
          for (node.declarations = [], node.kind = kind; ; ) {
            var decl = this.startNode();
            if (this.parseVarId(decl, kind), this.eat(types$1.eq) ? decl.init = this.parseMaybeAssign(isFor) : allowMissingInitializer || "const" !== kind || this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of") ? allowMissingInitializer || "Identifier" === decl.id.type || isFor && (this.type === types$1._in || this.isContextual("of")) ? decl.init = null : this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value") : this.unexpected(), node.declarations.push(this.finishNode(decl, "VariableDeclarator")), !this.eat(types$1.comma)) break;
          }
          return node;
        }, pp$8.parseVarId = function(decl, kind) {
          decl.id = this.parseBindingAtom(), this.checkLValPattern(decl.id, "var" === kind ? 1 : 2, false);
        };
        var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2;
        function isPrivateNameConflicted(privateNameMap, element) {
          var name = element.key.name, curr = privateNameMap[name], next = "true";
          return "MethodDefinition" !== element.type || "get" !== element.kind && "set" !== element.kind || (next = (element.static ? "s" : "i") + element.kind), "iget" === curr && "iset" === next || "iset" === curr && "iget" === next || "sget" === curr && "sset" === next || "sset" === curr && "sget" === next ? (privateNameMap[name] = "true", false) : !!curr || (privateNameMap[name] = next, false);
        }
        function checkKeyName(node, name) {
          var computed = node.computed, key = node.key;
          return !computed && ("Identifier" === key.type && key.name === name || "Literal" === key.type && key.value === name);
        }
        pp$8.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {
          this.initFunction(node), (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) && (this.type === types$1.star && statement & FUNC_HANGING_STATEMENT && this.unexpected(), node.generator = this.eat(types$1.star)), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), statement & FUNC_STATEMENT && (node.id = 4 & statement && this.type !== types$1.name ? null : this.parseIdent(), !node.id || statement & FUNC_HANGING_STATEMENT || this.checkLValSimple(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? 1 : 2 : 3));
          var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          return this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(functionFlags(node.async, node.generator)), statement & FUNC_STATEMENT || (node.id = this.type === types$1.name ? this.parseIdent() : null), this.parseFunctionParams(node), this.parseFunctionBody(node, allowExpressionBody, false, forInit), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
        }, pp$8.parseFunctionParams = function(node) {
          this.expect(types$1.parenL), node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams();
        }, pp$8.parseClass = function(node, isStatement) {
          this.next();
          var oldStrict = this.strict;
          this.strict = true, this.parseClassId(node, isStatement), this.parseClassSuper(node);
          var privateNameMap = this.enterClassBody(), classBody = this.startNode(), hadConstructor = false;
          for (classBody.body = [], this.expect(types$1.braceL); this.type !== types$1.braceR; ) {
            var element = this.parseClassElement(null !== node.superClass);
            element && (classBody.body.push(element), "MethodDefinition" === element.type && "constructor" === element.kind ? (hadConstructor && this.raiseRecoverable(element.start, "Duplicate constructor in the same class"), hadConstructor = true) : element.key && "PrivateIdentifier" === element.key.type && isPrivateNameConflicted(privateNameMap, element) && this.raiseRecoverable(element.key.start, "Identifier '#" + element.key.name + "' has already been declared"));
          }
          return this.strict = oldStrict, this.next(), node.body = this.finishNode(classBody, "ClassBody"), this.exitClassBody(), this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
        }, pp$8.parseClassElement = function(constructorAllowsSuper) {
          if (this.eat(types$1.semi)) return null;
          var ecmaVersion = this.options.ecmaVersion, node = this.startNode(), keyName = "", isGenerator2 = false, isAsync = false, kind = "method", isStatic = false;
          if (this.eatContextual("static")) {
            if (ecmaVersion >= 13 && this.eat(types$1.braceL)) return this.parseClassStaticBlock(node), node;
            this.isClassElementNameStart() || this.type === types$1.star ? isStatic = true : keyName = "static";
          }
          if (node.static = isStatic, !keyName && ecmaVersion >= 8 && this.eatContextual("async") && (!this.isClassElementNameStart() && this.type !== types$1.star || this.canInsertSemicolon() ? keyName = "async" : isAsync = true), !keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star) && (isGenerator2 = true), !keyName && !isAsync && !isGenerator2) {
            var lastValue = this.value;
            (this.eatContextual("get") || this.eatContextual("set")) && (this.isClassElementNameStart() ? kind = lastValue : keyName = lastValue);
          }
          if (keyName ? (node.computed = false, node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc), node.key.name = keyName, this.finishNode(node.key, "Identifier")) : this.parseClassElementName(node), ecmaVersion < 13 || this.type === types$1.parenL || "method" !== kind || isGenerator2 || isAsync) {
            var isConstructor = !node.static && checkKeyName(node, "constructor"), allowsDirectSuper = isConstructor && constructorAllowsSuper;
            isConstructor && "method" !== kind && this.raise(node.key.start, "Constructor can't have get/set modifier"), node.kind = isConstructor ? "constructor" : kind, this.parseClassMethod(node, isGenerator2, isAsync, allowsDirectSuper);
          } else this.parseClassField(node);
          return node;
        }, pp$8.isClassElementNameStart = function() {
          return this.type === types$1.name || this.type === types$1.privateId || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword;
        }, pp$8.parseClassElementName = function(element) {
          this.type === types$1.privateId ? ("constructor" === this.value && this.raise(this.start, "Classes can't have an element named '#constructor'"), element.computed = false, element.key = this.parsePrivateIdent()) : this.parsePropertyName(element);
        }, pp$8.parseClassMethod = function(method, isGenerator2, isAsync, allowsDirectSuper) {
          var key = method.key;
          "constructor" === method.kind ? (isGenerator2 && this.raise(key.start, "Constructor can't be a generator"), isAsync && this.raise(key.start, "Constructor can't be an async method")) : method.static && checkKeyName(method, "prototype") && this.raise(key.start, "Classes may not have a static property named prototype");
          var value2 = method.value = this.parseMethod(isGenerator2, isAsync, allowsDirectSuper);
          return "get" === method.kind && 0 !== value2.params.length && this.raiseRecoverable(value2.start, "getter should have no params"), "set" === method.kind && 1 !== value2.params.length && this.raiseRecoverable(value2.start, "setter should have exactly one param"), "set" === method.kind && "RestElement" === value2.params[0].type && this.raiseRecoverable(value2.params[0].start, "Setter cannot use rest params"), this.finishNode(method, "MethodDefinition");
        }, pp$8.parseClassField = function(field) {
          if (checkKeyName(field, "constructor") ? this.raise(field.key.start, "Classes can't have a field named 'constructor'") : field.static && checkKeyName(field, "prototype") && this.raise(field.key.start, "Classes can't have a static field named 'prototype'"), this.eat(types$1.eq)) {
            var scope = this.currentThisScope(), inClassFieldInit = scope.inClassFieldInit;
            scope.inClassFieldInit = true, field.value = this.parseMaybeAssign(), scope.inClassFieldInit = inClassFieldInit;
          } else field.value = null;
          return this.semicolon(), this.finishNode(field, "PropertyDefinition");
        }, pp$8.parseClassStaticBlock = function(node) {
          node.body = [];
          var oldLabels = this.labels;
          for (this.labels = [], this.enterScope(320); this.type !== types$1.braceR; ) {
            var stmt = this.parseStatement(null);
            node.body.push(stmt);
          }
          return this.next(), this.exitScope(), this.labels = oldLabels, this.finishNode(node, "StaticBlock");
        }, pp$8.parseClassId = function(node, isStatement) {
          this.type === types$1.name ? (node.id = this.parseIdent(), isStatement && this.checkLValSimple(node.id, 2, false)) : (true === isStatement && this.unexpected(), node.id = null);
        }, pp$8.parseClassSuper = function(node) {
          node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(null, false) : null;
        }, pp$8.enterClassBody = function() {
          var element = { declared: /* @__PURE__ */ Object.create(null), used: [] };
          return this.privateNameStack.push(element), element.declared;
        }, pp$8.exitClassBody = function() {
          var ref2 = this.privateNameStack.pop(), declared = ref2.declared, used = ref2.used;
          if (this.options.checkPrivateFields) for (var len = this.privateNameStack.length, parent = 0 === len ? null : this.privateNameStack[len - 1], i3 = 0; i3 < used.length; ++i3) {
            var id = used[i3];
            hasOwn(declared, id.name) || (parent ? parent.used.push(id) : this.raiseRecoverable(id.start, "Private field '#" + id.name + "' must be declared in an enclosing class"));
          }
        }, pp$8.parseExportAllDeclaration = function(node, exports2) {
          return this.options.ecmaVersion >= 11 && (this.eatContextual("as") ? (node.exported = this.parseModuleExportName(), this.checkExport(exports2, node.exported, this.lastTokStart)) : node.exported = null), this.expectContextual("from"), this.type !== types$1.string && this.unexpected(), node.source = this.parseExprAtom(), this.options.ecmaVersion >= 16 && (node.attributes = this.parseWithClause()), this.semicolon(), this.finishNode(node, "ExportAllDeclaration");
        }, pp$8.parseExport = function(node, exports2) {
          if (this.next(), this.eat(types$1.star)) return this.parseExportAllDeclaration(node, exports2);
          if (this.eat(types$1._default)) return this.checkExport(exports2, "default", this.lastTokStart), node.declaration = this.parseExportDefaultDeclaration(), this.finishNode(node, "ExportDefaultDeclaration");
          if (this.shouldParseExportStatement()) node.declaration = this.parseExportDeclaration(node), "VariableDeclaration" === node.declaration.type ? this.checkVariableExport(exports2, node.declaration.declarations) : this.checkExport(exports2, node.declaration.id, node.declaration.id.start), node.specifiers = [], node.source = null;
          else {
            if (node.declaration = null, node.specifiers = this.parseExportSpecifiers(exports2), this.eatContextual("from")) this.type !== types$1.string && this.unexpected(), node.source = this.parseExprAtom(), this.options.ecmaVersion >= 16 && (node.attributes = this.parseWithClause());
            else {
              for (var i3 = 0, list2 = node.specifiers; i3 < list2.length; i3 += 1) {
                var spec = list2[i3];
                this.checkUnreserved(spec.local), this.checkLocalExport(spec.local), "Literal" === spec.local.type && this.raise(spec.local.start, "A string literal cannot be used as an exported binding without `from`.");
              }
              node.source = null;
            }
            this.semicolon();
          }
          return this.finishNode(node, "ExportNamedDeclaration");
        }, pp$8.parseExportDeclaration = function(node) {
          return this.parseStatement(null);
        }, pp$8.parseExportDefaultDeclaration = function() {
          var isAsync;
          if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {
            var fNode = this.startNode();
            return this.next(), isAsync && this.next(), this.parseFunction(fNode, 4 | FUNC_STATEMENT, false, isAsync);
          }
          if (this.type === types$1._class) {
            var cNode = this.startNode();
            return this.parseClass(cNode, "nullableID");
          }
          var declaration = this.parseMaybeAssign();
          return this.semicolon(), declaration;
        }, pp$8.checkExport = function(exports2, name, pos) {
          exports2 && ("string" != typeof name && (name = "Identifier" === name.type ? name.name : name.value), hasOwn(exports2, name) && this.raiseRecoverable(pos, "Duplicate export '" + name + "'"), exports2[name] = true);
        }, pp$8.checkPatternExport = function(exports2, pat) {
          var type = pat.type;
          if ("Identifier" === type) this.checkExport(exports2, pat, pat.start);
          else if ("ObjectPattern" === type) for (var i3 = 0, list2 = pat.properties; i3 < list2.length; i3 += 1) {
            var prop = list2[i3];
            this.checkPatternExport(exports2, prop);
          }
          else if ("ArrayPattern" === type) for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
            var elt = list$1[i$1];
            elt && this.checkPatternExport(exports2, elt);
          }
          else "Property" === type ? this.checkPatternExport(exports2, pat.value) : "AssignmentPattern" === type ? this.checkPatternExport(exports2, pat.left) : "RestElement" === type && this.checkPatternExport(exports2, pat.argument);
        }, pp$8.checkVariableExport = function(exports2, decls) {
          if (exports2) for (var i3 = 0, list2 = decls; i3 < list2.length; i3 += 1) {
            var decl = list2[i3];
            this.checkPatternExport(exports2, decl.id);
          }
        }, pp$8.shouldParseExportStatement = function() {
          return "var" === this.type.keyword || "const" === this.type.keyword || "class" === this.type.keyword || "function" === this.type.keyword || this.isLet() || this.isAsyncFunction();
        }, pp$8.parseExportSpecifier = function(exports2) {
          var node = this.startNode();
          return node.local = this.parseModuleExportName(), node.exported = this.eatContextual("as") ? this.parseModuleExportName() : node.local, this.checkExport(exports2, node.exported, node.exported.start), this.finishNode(node, "ExportSpecifier");
        }, pp$8.parseExportSpecifiers = function(exports2) {
          var nodes = [], first = true;
          for (this.expect(types$1.braceL); !this.eat(types$1.braceR); ) {
            if (first) first = false;
            else if (this.expect(types$1.comma), this.afterTrailingComma(types$1.braceR)) break;
            nodes.push(this.parseExportSpecifier(exports2));
          }
          return nodes;
        }, pp$8.parseImport = function(node) {
          return this.next(), this.type === types$1.string ? (node.specifiers = empty$1, node.source = this.parseExprAtom()) : (node.specifiers = this.parseImportSpecifiers(), this.expectContextual("from"), node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected()), this.options.ecmaVersion >= 16 && (node.attributes = this.parseWithClause()), this.semicolon(), this.finishNode(node, "ImportDeclaration");
        }, pp$8.parseImportSpecifier = function() {
          var node = this.startNode();
          return node.imported = this.parseModuleExportName(), this.eatContextual("as") ? node.local = this.parseIdent() : (this.checkUnreserved(node.imported), node.local = node.imported), this.checkLValSimple(node.local, 2), this.finishNode(node, "ImportSpecifier");
        }, pp$8.parseImportDefaultSpecifier = function() {
          var node = this.startNode();
          return node.local = this.parseIdent(), this.checkLValSimple(node.local, 2), this.finishNode(node, "ImportDefaultSpecifier");
        }, pp$8.parseImportNamespaceSpecifier = function() {
          var node = this.startNode();
          return this.next(), this.expectContextual("as"), node.local = this.parseIdent(), this.checkLValSimple(node.local, 2), this.finishNode(node, "ImportNamespaceSpecifier");
        }, pp$8.parseImportSpecifiers = function() {
          var nodes = [], first = true;
          if (this.type === types$1.name && (nodes.push(this.parseImportDefaultSpecifier()), !this.eat(types$1.comma))) return nodes;
          if (this.type === types$1.star) return nodes.push(this.parseImportNamespaceSpecifier()), nodes;
          for (this.expect(types$1.braceL); !this.eat(types$1.braceR); ) {
            if (first) first = false;
            else if (this.expect(types$1.comma), this.afterTrailingComma(types$1.braceR)) break;
            nodes.push(this.parseImportSpecifier());
          }
          return nodes;
        }, pp$8.parseWithClause = function() {
          var nodes = [];
          if (!this.eat(types$1._with)) return nodes;
          this.expect(types$1.braceL);
          for (var attributeKeys = {}, first = true; !this.eat(types$1.braceR); ) {
            if (first) first = false;
            else if (this.expect(types$1.comma), this.afterTrailingComma(types$1.braceR)) break;
            var attr = this.parseImportAttribute(), keyName = "Identifier" === attr.key.type ? attr.key.name : attr.key.value;
            hasOwn(attributeKeys, keyName) && this.raiseRecoverable(attr.key.start, "Duplicate attribute key '" + keyName + "'"), attributeKeys[keyName] = true, nodes.push(attr);
          }
          return nodes;
        }, pp$8.parseImportAttribute = function() {
          var node = this.startNode();
          return node.key = this.type === types$1.string ? this.parseExprAtom() : this.parseIdent("never" !== this.options.allowReserved), this.expect(types$1.colon), this.type !== types$1.string && this.unexpected(), node.value = this.parseExprAtom(), this.finishNode(node, "ImportAttribute");
        }, pp$8.parseModuleExportName = function() {
          if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {
            var stringLiteral = this.parseLiteral(this.value);
            return loneSurrogate.test(stringLiteral.value) && this.raise(stringLiteral.start, "An export name cannot include a lone surrogate."), stringLiteral;
          }
          return this.parseIdent(true);
        }, pp$8.adaptDirectivePrologue = function(statements) {
          for (var i3 = 0; i3 < statements.length && this.isDirectiveCandidate(statements[i3]); ++i3) statements[i3].directive = statements[i3].expression.raw.slice(1, -1);
        }, pp$8.isDirectiveCandidate = function(statement) {
          return this.options.ecmaVersion >= 5 && "ExpressionStatement" === statement.type && "Literal" === statement.expression.type && "string" == typeof statement.expression.value && ('"' === this.input[statement.start] || "'" === this.input[statement.start]);
        };
        var pp$7 = Parser.prototype;
        pp$7.toAssignable = function(node, isBinding, refDestructuringErrors) {
          if (this.options.ecmaVersion >= 6 && node) switch (node.type) {
            case "Identifier":
              this.inAsync && "await" === node.name && this.raise(node.start, "Cannot use 'await' as identifier inside an async function");
              break;
            case "ObjectPattern":
            case "ArrayPattern":
            case "AssignmentPattern":
            case "RestElement":
              break;
            case "ObjectExpression":
              node.type = "ObjectPattern", refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, true);
              for (var i3 = 0, list2 = node.properties; i3 < list2.length; i3 += 1) {
                var prop = list2[i3];
                this.toAssignable(prop, isBinding), "RestElement" !== prop.type || "ArrayPattern" !== prop.argument.type && "ObjectPattern" !== prop.argument.type || this.raise(prop.argument.start, "Unexpected token");
              }
              break;
            case "Property":
              "init" !== node.kind && this.raise(node.key.start, "Object pattern can't contain getter or setter"), this.toAssignable(node.value, isBinding);
              break;
            case "ArrayExpression":
              node.type = "ArrayPattern", refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, true), this.toAssignableList(node.elements, isBinding);
              break;
            case "SpreadElement":
              node.type = "RestElement", this.toAssignable(node.argument, isBinding), "AssignmentPattern" === node.argument.type && this.raise(node.argument.start, "Rest elements cannot have a default value");
              break;
            case "AssignmentExpression":
              "=" !== node.operator && this.raise(node.left.end, "Only '=' operator can be used for specifying default value."), node.type = "AssignmentPattern", delete node.operator, this.toAssignable(node.left, isBinding);
              break;
            case "ParenthesizedExpression":
              this.toAssignable(node.expression, isBinding, refDestructuringErrors);
              break;
            case "ChainExpression":
              this.raiseRecoverable(node.start, "Optional chaining cannot appear in left-hand side");
              break;
            case "MemberExpression":
              if (!isBinding) break;
            default:
              this.raise(node.start, "Assigning to rvalue");
          }
          else refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, true);
          return node;
        }, pp$7.toAssignableList = function(exprList, isBinding) {
          for (var end = exprList.length, i3 = 0; i3 < end; i3++) {
            var elt = exprList[i3];
            elt && this.toAssignable(elt, isBinding);
          }
          if (end) {
            var last = exprList[end - 1];
            6 === this.options.ecmaVersion && isBinding && last && "RestElement" === last.type && "Identifier" !== last.argument.type && this.unexpected(last.argument.start);
          }
          return exprList;
        }, pp$7.parseSpread = function(refDestructuringErrors) {
          var node = this.startNode();
          return this.next(), node.argument = this.parseMaybeAssign(false, refDestructuringErrors), this.finishNode(node, "SpreadElement");
        }, pp$7.parseRestBinding = function() {
          var node = this.startNode();
          return this.next(), 6 === this.options.ecmaVersion && this.type !== types$1.name && this.unexpected(), node.argument = this.parseBindingAtom(), this.finishNode(node, "RestElement");
        }, pp$7.parseBindingAtom = function() {
          if (this.options.ecmaVersion >= 6) switch (this.type) {
            case types$1.bracketL:
              var node = this.startNode();
              return this.next(), node.elements = this.parseBindingList(types$1.bracketR, true, true), this.finishNode(node, "ArrayPattern");
            case types$1.braceL:
              return this.parseObj(true);
          }
          return this.parseIdent();
        }, pp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowModifiers) {
          for (var elts = [], first = true; !this.eat(close); ) if (first ? first = false : this.expect(types$1.comma), allowEmpty && this.type === types$1.comma) elts.push(null);
          else {
            if (allowTrailingComma && this.afterTrailingComma(close)) break;
            if (this.type === types$1.ellipsis) {
              var rest = this.parseRestBinding();
              this.parseBindingListItem(rest), elts.push(rest), this.type === types$1.comma && this.raiseRecoverable(this.start, "Comma is not permitted after the rest element"), this.expect(close);
              break;
            }
            elts.push(this.parseAssignableListItem(allowModifiers));
          }
          return elts;
        }, pp$7.parseAssignableListItem = function(allowModifiers) {
          var elem = this.parseMaybeDefault(this.start, this.startLoc);
          return this.parseBindingListItem(elem), elem;
        }, pp$7.parseBindingListItem = function(param) {
          return param;
        }, pp$7.parseMaybeDefault = function(startPos, startLoc, left) {
          if (left = left || this.parseBindingAtom(), this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) return left;
          var node = this.startNodeAt(startPos, startLoc);
          return node.left = left, node.right = this.parseMaybeAssign(), this.finishNode(node, "AssignmentPattern");
        }, pp$7.checkLValSimple = function(expr, bindingType, checkClashes) {
          void 0 === bindingType && (bindingType = 0);
          var isBind = 0 !== bindingType;
          switch (expr.type) {
            case "Identifier":
              this.strict && this.reservedWordsStrictBind.test(expr.name) && this.raiseRecoverable(expr.start, (isBind ? "Binding " : "Assigning to ") + expr.name + " in strict mode"), isBind && (2 === bindingType && "let" === expr.name && this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name"), checkClashes && (hasOwn(checkClashes, expr.name) && this.raiseRecoverable(expr.start, "Argument name clash"), checkClashes[expr.name] = true), 5 !== bindingType && this.declareName(expr.name, bindingType, expr.start));
              break;
            case "ChainExpression":
              this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
              break;
            case "MemberExpression":
              isBind && this.raiseRecoverable(expr.start, "Binding member expression");
              break;
            case "ParenthesizedExpression":
              return isBind && this.raiseRecoverable(expr.start, "Binding parenthesized expression"), this.checkLValSimple(expr.expression, bindingType, checkClashes);
            default:
              this.raise(expr.start, (isBind ? "Binding" : "Assigning to") + " rvalue");
          }
        }, pp$7.checkLValPattern = function(expr, bindingType, checkClashes) {
          switch (void 0 === bindingType && (bindingType = 0), expr.type) {
            case "ObjectPattern":
              for (var i3 = 0, list2 = expr.properties; i3 < list2.length; i3 += 1) {
                var prop = list2[i3];
                this.checkLValInnerPattern(prop, bindingType, checkClashes);
              }
              break;
            case "ArrayPattern":
              for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
                var elem = list$1[i$1];
                elem && this.checkLValInnerPattern(elem, bindingType, checkClashes);
              }
              break;
            default:
              this.checkLValSimple(expr, bindingType, checkClashes);
          }
        }, pp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {
          switch (void 0 === bindingType && (bindingType = 0), expr.type) {
            case "Property":
              this.checkLValInnerPattern(expr.value, bindingType, checkClashes);
              break;
            case "AssignmentPattern":
              this.checkLValPattern(expr.left, bindingType, checkClashes);
              break;
            case "RestElement":
              this.checkLValPattern(expr.argument, bindingType, checkClashes);
              break;
            default:
              this.checkLValPattern(expr, bindingType, checkClashes);
          }
        };
        var TokContext = function(token, isExpr, preserveSpace, override, generator) {
          this.token = token, this.isExpr = !!isExpr, this.preserveSpace = !!preserveSpace, this.override = override, this.generator = !!generator;
        }, types = { b_stat: new TokContext("{", false), b_expr: new TokContext("{", true), b_tmpl: new TokContext("${", false), p_stat: new TokContext("(", false), p_expr: new TokContext("(", true), q_tmpl: new TokContext("`", true, true, function(p) {
          return p.tryReadTemplateToken();
        }), f_stat: new TokContext("function", false), f_expr: new TokContext("function", true), f_expr_gen: new TokContext("function", true, false, null, true), f_gen: new TokContext("function", false, false, null, true) }, pp$6 = Parser.prototype;
        pp$6.initialContext = function() {
          return [types.b_stat];
        }, pp$6.curContext = function() {
          return this.context[this.context.length - 1];
        }, pp$6.braceIsBlock = function(prevType) {
          var parent = this.curContext();
          return parent === types.f_expr || parent === types.f_stat || (prevType !== types$1.colon || parent !== types.b_stat && parent !== types.b_expr ? prevType === types$1._return || prevType === types$1.name && this.exprAllowed ? lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) : prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow || (prevType === types$1.braceL ? parent === types.b_stat : prevType !== types$1._var && prevType !== types$1._const && prevType !== types$1.name && !this.exprAllowed) : !parent.isExpr);
        }, pp$6.inGeneratorContext = function() {
          for (var i3 = this.context.length - 1; i3 >= 1; i3--) {
            var context = this.context[i3];
            if ("function" === context.token) return context.generator;
          }
          return false;
        }, pp$6.updateContext = function(prevType) {
          var update, type = this.type;
          type.keyword && prevType === types$1.dot ? this.exprAllowed = false : (update = type.updateContext) ? update.call(this, prevType) : this.exprAllowed = type.beforeExpr;
        }, pp$6.overrideContext = function(tokenCtx) {
          this.curContext() !== tokenCtx && (this.context[this.context.length - 1] = tokenCtx);
        }, types$1.parenR.updateContext = types$1.braceR.updateContext = function() {
          if (1 !== this.context.length) {
            var out = this.context.pop();
            out === types.b_stat && "function" === this.curContext().token && (out = this.context.pop()), this.exprAllowed = !out.isExpr;
          } else this.exprAllowed = true;
        }, types$1.braceL.updateContext = function(prevType) {
          this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr), this.exprAllowed = true;
        }, types$1.dollarBraceL.updateContext = function() {
          this.context.push(types.b_tmpl), this.exprAllowed = true;
        }, types$1.parenL.updateContext = function(prevType) {
          var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;
          this.context.push(statementParens ? types.p_stat : types.p_expr), this.exprAllowed = true;
        }, types$1.incDec.updateContext = function() {
        }, types$1._function.updateContext = types$1._class.updateContext = function(prevType) {
          !prevType.beforeExpr || prevType === types$1._else || prevType === types$1.semi && this.curContext() !== types.p_stat || prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) || (prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat ? this.context.push(types.f_stat) : this.context.push(types.f_expr), this.exprAllowed = false;
        }, types$1.colon.updateContext = function() {
          "function" === this.curContext().token && this.context.pop(), this.exprAllowed = true;
        }, types$1.backQuote.updateContext = function() {
          this.curContext() === types.q_tmpl ? this.context.pop() : this.context.push(types.q_tmpl), this.exprAllowed = false;
        }, types$1.star.updateContext = function(prevType) {
          if (prevType === types$1._function) {
            var index = this.context.length - 1;
            this.context[index] === types.f_expr ? this.context[index] = types.f_expr_gen : this.context[index] = types.f_gen;
          }
          this.exprAllowed = true;
        }, types$1.name.updateContext = function(prevType) {
          var allowed = false;
          this.options.ecmaVersion >= 6 && prevType !== types$1.dot && ("of" === this.value && !this.exprAllowed || "yield" === this.value && this.inGeneratorContext()) && (allowed = true), this.exprAllowed = allowed;
        };
        var pp$5 = Parser.prototype;
        function isLocalVariableAccess(node) {
          return "Identifier" === node.type || "ParenthesizedExpression" === node.type && isLocalVariableAccess(node.expression);
        }
        function isPrivateFieldAccess(node) {
          return "MemberExpression" === node.type && "PrivateIdentifier" === node.property.type || "ChainExpression" === node.type && isPrivateFieldAccess(node.expression) || "ParenthesizedExpression" === node.type && isPrivateFieldAccess(node.expression);
        }
        pp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {
          if (!(this.options.ecmaVersion >= 9 && "SpreadElement" === prop.type || this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))) {
            var name, key = prop.key;
            switch (key.type) {
              case "Identifier":
                name = key.name;
                break;
              case "Literal":
                name = String(key.value);
                break;
              default:
                return;
            }
            var kind = prop.kind;
            if (this.options.ecmaVersion >= 6) "__proto__" === name && "init" === kind && (propHash.proto && (refDestructuringErrors ? refDestructuringErrors.doubleProto < 0 && (refDestructuringErrors.doubleProto = key.start) : this.raiseRecoverable(key.start, "Redefinition of __proto__ property")), propHash.proto = true);
            else {
              var other = propHash[name = "$" + name];
              if (other) ("init" === kind ? this.strict && other.init || other.get || other.set : other.init || other[kind]) && this.raiseRecoverable(key.start, "Redefinition of property");
              else other = propHash[name] = { init: false, get: false, set: false };
              other[kind] = true;
            }
          }
        }, pp$5.parseExpression = function(forInit, refDestructuringErrors) {
          var startPos = this.start, startLoc = this.startLoc, expr = this.parseMaybeAssign(forInit, refDestructuringErrors);
          if (this.type === types$1.comma) {
            var node = this.startNodeAt(startPos, startLoc);
            for (node.expressions = [expr]; this.eat(types$1.comma); ) node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors));
            return this.finishNode(node, "SequenceExpression");
          }
          return expr;
        }, pp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {
          if (this.isContextual("yield")) {
            if (this.inGenerator) return this.parseYield(forInit);
            this.exprAllowed = false;
          }
          var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;
          refDestructuringErrors ? (oldParenAssign = refDestructuringErrors.parenthesizedAssign, oldTrailingComma = refDestructuringErrors.trailingComma, oldDoubleProto = refDestructuringErrors.doubleProto, refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1) : (refDestructuringErrors = new DestructuringErrors(), ownDestructuringErrors = true);
          var startPos = this.start, startLoc = this.startLoc;
          this.type !== types$1.parenL && this.type !== types$1.name || (this.potentialArrowAt = this.start, this.potentialArrowInForAwait = "await" === forInit);
          var left = this.parseMaybeConditional(forInit, refDestructuringErrors);
          if (afterLeftParse && (left = afterLeftParse.call(this, left, startPos, startLoc)), this.type.isAssign) {
            var node = this.startNodeAt(startPos, startLoc);
            return node.operator = this.value, this.type === types$1.eq && (left = this.toAssignable(left, false, refDestructuringErrors)), ownDestructuringErrors || (refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1), refDestructuringErrors.shorthandAssign >= left.start && (refDestructuringErrors.shorthandAssign = -1), this.type === types$1.eq ? this.checkLValPattern(left) : this.checkLValSimple(left), node.left = left, this.next(), node.right = this.parseMaybeAssign(forInit), oldDoubleProto > -1 && (refDestructuringErrors.doubleProto = oldDoubleProto), this.finishNode(node, "AssignmentExpression");
          }
          return ownDestructuringErrors && this.checkExpressionErrors(refDestructuringErrors, true), oldParenAssign > -1 && (refDestructuringErrors.parenthesizedAssign = oldParenAssign), oldTrailingComma > -1 && (refDestructuringErrors.trailingComma = oldTrailingComma), left;
        }, pp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {
          var startPos = this.start, startLoc = this.startLoc, expr = this.parseExprOps(forInit, refDestructuringErrors);
          if (this.checkExpressionErrors(refDestructuringErrors)) return expr;
          if (this.eat(types$1.question)) {
            var node = this.startNodeAt(startPos, startLoc);
            return node.test = expr, node.consequent = this.parseMaybeAssign(), this.expect(types$1.colon), node.alternate = this.parseMaybeAssign(forInit), this.finishNode(node, "ConditionalExpression");
          }
          return expr;
        }, pp$5.parseExprOps = function(forInit, refDestructuringErrors) {
          var startPos = this.start, startLoc = this.startLoc, expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);
          return this.checkExpressionErrors(refDestructuringErrors) || expr.start === startPos && "ArrowFunctionExpression" === expr.type ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit);
        }, pp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {
          var prec = this.type.binop;
          if (null != prec && (!forInit || this.type !== types$1._in) && prec > minPrec) {
            var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND, coalesce = this.type === types$1.coalesce;
            coalesce && (prec = types$1.logicalAND.binop);
            var op = this.value;
            this.next();
            var startPos = this.start, startLoc = this.startLoc, right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit), node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
            return (logical && this.type === types$1.coalesce || coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND)) && this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses"), this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit);
          }
          return left;
        }, pp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {
          "PrivateIdentifier" === right.type && this.raise(right.start, "Private identifier can only be left side of binary expression");
          var node = this.startNodeAt(startPos, startLoc);
          return node.left = left, node.operator = op, node.right = right, this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
        }, pp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {
          var expr, startPos = this.start, startLoc = this.startLoc;
          if (this.isContextual("await") && this.canAwait) expr = this.parseAwait(forInit), sawUnary = true;
          else if (this.type.prefix) {
            var node = this.startNode(), update = this.type === types$1.incDec;
            node.operator = this.value, node.prefix = true, this.next(), node.argument = this.parseMaybeUnary(null, true, update, forInit), this.checkExpressionErrors(refDestructuringErrors, true), update ? this.checkLValSimple(node.argument) : this.strict && "delete" === node.operator && isLocalVariableAccess(node.argument) ? this.raiseRecoverable(node.start, "Deleting local variable in strict mode") : "delete" === node.operator && isPrivateFieldAccess(node.argument) ? this.raiseRecoverable(node.start, "Private fields can not be deleted") : sawUnary = true, expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
          } else if (sawUnary || this.type !== types$1.privateId) {
            if (expr = this.parseExprSubscripts(refDestructuringErrors, forInit), this.checkExpressionErrors(refDestructuringErrors)) return expr;
            for (; this.type.postfix && !this.canInsertSemicolon(); ) {
              var node$1 = this.startNodeAt(startPos, startLoc);
              node$1.operator = this.value, node$1.prefix = false, node$1.argument = expr, this.checkLValSimple(expr), this.next(), expr = this.finishNode(node$1, "UpdateExpression");
            }
          } else (forInit || 0 === this.privateNameStack.length) && this.options.checkPrivateFields && this.unexpected(), expr = this.parsePrivateIdent(), this.type !== types$1._in && this.unexpected();
          return incDec || !this.eat(types$1.starstar) ? expr : sawUnary ? void this.unexpected(this.lastTokStart) : this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), "**", false);
        }, pp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {
          var startPos = this.start, startLoc = this.startLoc, expr = this.parseExprAtom(refDestructuringErrors, forInit);
          if ("ArrowFunctionExpression" === expr.type && ")" !== this.input.slice(this.lastTokStart, this.lastTokEnd)) return expr;
          var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);
          return refDestructuringErrors && "MemberExpression" === result.type && (refDestructuringErrors.parenthesizedAssign >= result.start && (refDestructuringErrors.parenthesizedAssign = -1), refDestructuringErrors.parenthesizedBind >= result.start && (refDestructuringErrors.parenthesizedBind = -1), refDestructuringErrors.trailingComma >= result.start && (refDestructuringErrors.trailingComma = -1)), result;
        }, pp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {
          for (var maybeAsyncArrow = this.options.ecmaVersion >= 8 && "Identifier" === base.type && "async" === base.name && this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start == 5 && this.potentialArrowAt === base.start, optionalChained = false; ; ) {
            var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);
            if (element.optional && (optionalChained = true), element === base || "ArrowFunctionExpression" === element.type) {
              if (optionalChained) {
                var chainNode = this.startNodeAt(startPos, startLoc);
                chainNode.expression = element, element = this.finishNode(chainNode, "ChainExpression");
              }
              return element;
            }
            base = element;
          }
        }, pp$5.shouldParseAsyncArrow = function() {
          return !this.canInsertSemicolon() && this.eat(types$1.arrow);
        }, pp$5.parseSubscriptAsyncArrow = function(startPos, startLoc, exprList, forInit) {
          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit);
        }, pp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {
          var optionalSupported = this.options.ecmaVersion >= 11, optional = optionalSupported && this.eat(types$1.questionDot);
          noCalls && optional && this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
          var computed = this.eat(types$1.bracketL);
          if (computed || optional && this.type !== types$1.parenL && this.type !== types$1.backQuote || this.eat(types$1.dot)) {
            var node = this.startNodeAt(startPos, startLoc);
            node.object = base, computed ? (node.property = this.parseExpression(), this.expect(types$1.bracketR)) : this.type === types$1.privateId && "Super" !== base.type ? node.property = this.parsePrivateIdent() : node.property = this.parseIdent("never" !== this.options.allowReserved), node.computed = !!computed, optionalSupported && (node.optional = optional), base = this.finishNode(node, "MemberExpression");
          } else if (!noCalls && this.eat(types$1.parenL)) {
            var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
            this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0;
            var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
            if (maybeAsyncArrow && !optional && this.shouldParseAsyncArrow()) return this.checkPatternErrors(refDestructuringErrors, false), this.checkYieldAwaitInDefaultParams(), this.awaitIdentPos > 0 && this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function"), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.parseSubscriptAsyncArrow(startPos, startLoc, exprList, forInit);
            this.checkExpressionErrors(refDestructuringErrors, true), this.yieldPos = oldYieldPos || this.yieldPos, this.awaitPos = oldAwaitPos || this.awaitPos, this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
            var node$1 = this.startNodeAt(startPos, startLoc);
            node$1.callee = base, node$1.arguments = exprList, optionalSupported && (node$1.optional = optional), base = this.finishNode(node$1, "CallExpression");
          } else if (this.type === types$1.backQuote) {
            (optional || optionalChained) && this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
            var node$2 = this.startNodeAt(startPos, startLoc);
            node$2.tag = base, node$2.quasi = this.parseTemplate({ isTagged: true }), base = this.finishNode(node$2, "TaggedTemplateExpression");
          }
          return base;
        }, pp$5.parseExprAtom = function(refDestructuringErrors, forInit, forNew) {
          this.type === types$1.slash && this.readRegexp();
          var node, canBeArrow = this.potentialArrowAt === this.start;
          switch (this.type) {
            case types$1._super:
              return this.allowSuper || this.raise(this.start, "'super' keyword outside a method"), node = this.startNode(), this.next(), this.type !== types$1.parenL || this.allowDirectSuper || this.raise(node.start, "super() call outside constructor of a subclass"), this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL && this.unexpected(), this.finishNode(node, "Super");
            case types$1._this:
              return node = this.startNode(), this.next(), this.finishNode(node, "ThisExpression");
            case types$1.name:
              var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc, id = this.parseIdent(false);
              if (this.options.ecmaVersion >= 8 && !containsEsc && "async" === id.name && !this.canInsertSemicolon() && this.eat(types$1._function)) return this.overrideContext(types.f_expr), this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit);
              if (canBeArrow && !this.canInsertSemicolon()) {
                if (this.eat(types$1.arrow)) return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false, forInit);
                if (this.options.ecmaVersion >= 8 && "async" === id.name && this.type === types$1.name && !containsEsc && (!this.potentialArrowInForAwait || "of" !== this.value || this.containsEsc)) return id = this.parseIdent(false), !this.canInsertSemicolon() && this.eat(types$1.arrow) || this.unexpected(), this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true, forInit);
              }
              return id;
            case types$1.regexp:
              var value2 = this.value;
              return (node = this.parseLiteral(value2.value)).regex = { pattern: value2.pattern, flags: value2.flags }, node;
            case types$1.num:
            case types$1.string:
              return this.parseLiteral(this.value);
            case types$1._null:
            case types$1._true:
            case types$1._false:
              return (node = this.startNode()).value = this.type === types$1._null ? null : this.type === types$1._true, node.raw = this.type.keyword, this.next(), this.finishNode(node, "Literal");
            case types$1.parenL:
              var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);
              return refDestructuringErrors && (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr) && (refDestructuringErrors.parenthesizedAssign = start), refDestructuringErrors.parenthesizedBind < 0 && (refDestructuringErrors.parenthesizedBind = start)), expr;
            case types$1.bracketL:
              return node = this.startNode(), this.next(), node.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors), this.finishNode(node, "ArrayExpression");
            case types$1.braceL:
              return this.overrideContext(types.b_expr), this.parseObj(false, refDestructuringErrors);
            case types$1._function:
              return node = this.startNode(), this.next(), this.parseFunction(node, 0);
            case types$1._class:
              return this.parseClass(this.startNode(), false);
            case types$1._new:
              return this.parseNew();
            case types$1.backQuote:
              return this.parseTemplate();
            case types$1._import:
              return this.options.ecmaVersion >= 11 ? this.parseExprImport(forNew) : this.unexpected();
            default:
              return this.parseExprAtomDefault();
          }
        }, pp$5.parseExprAtomDefault = function() {
          this.unexpected();
        }, pp$5.parseExprImport = function(forNew) {
          var node = this.startNode();
          if (this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword import"), this.next(), this.type === types$1.parenL && !forNew) return this.parseDynamicImport(node);
          if (this.type === types$1.dot) {
            var meta = this.startNodeAt(node.start, node.loc && node.loc.start);
            return meta.name = "import", node.meta = this.finishNode(meta, "Identifier"), this.parseImportMeta(node);
          }
          this.unexpected();
        }, pp$5.parseDynamicImport = function(node) {
          if (this.next(), node.source = this.parseMaybeAssign(), this.options.ecmaVersion >= 16) this.eat(types$1.parenR) ? node.options = null : (this.expect(types$1.comma), this.afterTrailingComma(types$1.parenR) ? node.options = null : (node.options = this.parseMaybeAssign(), this.eat(types$1.parenR) || (this.expect(types$1.comma), this.afterTrailingComma(types$1.parenR) || this.unexpected())));
          else if (!this.eat(types$1.parenR)) {
            var errorPos = this.start;
            this.eat(types$1.comma) && this.eat(types$1.parenR) ? this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()") : this.unexpected(errorPos);
          }
          return this.finishNode(node, "ImportExpression");
        }, pp$5.parseImportMeta = function(node) {
          this.next();
          var containsEsc = this.containsEsc;
          return node.property = this.parseIdent(true), "meta" !== node.property.name && this.raiseRecoverable(node.property.start, "The only valid meta property for import is 'import.meta'"), containsEsc && this.raiseRecoverable(node.start, "'import.meta' must not contain escaped characters"), "module" === this.options.sourceType || this.options.allowImportExportEverywhere || this.raiseRecoverable(node.start, "Cannot use 'import.meta' outside a module"), this.finishNode(node, "MetaProperty");
        }, pp$5.parseLiteral = function(value2) {
          var node = this.startNode();
          return node.value = value2, node.raw = this.input.slice(this.start, this.end), 110 === node.raw.charCodeAt(node.raw.length - 1) && (node.bigint = node.raw.slice(0, -1).replace(/_/g, "")), this.next(), this.finishNode(node, "Literal");
        }, pp$5.parseParenExpression = function() {
          this.expect(types$1.parenL);
          var val = this.parseExpression();
          return this.expect(types$1.parenR), val;
        }, pp$5.shouldParseArrow = function(exprList) {
          return !this.canInsertSemicolon();
        }, pp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {
          var val, startPos = this.start, startLoc = this.startLoc, allowTrailingComma = this.options.ecmaVersion >= 8;
          if (this.options.ecmaVersion >= 6) {
            this.next();
            var spreadStart, innerStartPos = this.start, innerStartLoc = this.startLoc, exprList = [], first = true, lastIsComma = false, refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos;
            for (this.yieldPos = 0, this.awaitPos = 0; this.type !== types$1.parenR; ) {
              if (first ? first = false : this.expect(types$1.comma), allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {
                lastIsComma = true;
                break;
              }
              if (this.type === types$1.ellipsis) {
                spreadStart = this.start, exprList.push(this.parseParenItem(this.parseRestBinding())), this.type === types$1.comma && this.raiseRecoverable(this.start, "Comma is not permitted after the rest element");
                break;
              }
              exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
            }
            var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;
            if (this.expect(types$1.parenR), canBeArrow && this.shouldParseArrow(exprList) && this.eat(types$1.arrow)) return this.checkPatternErrors(refDestructuringErrors, false), this.checkYieldAwaitInDefaultParams(), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.parseParenArrowList(startPos, startLoc, exprList, forInit);
            exprList.length && !lastIsComma || this.unexpected(this.lastTokStart), spreadStart && this.unexpected(spreadStart), this.checkExpressionErrors(refDestructuringErrors, true), this.yieldPos = oldYieldPos || this.yieldPos, this.awaitPos = oldAwaitPos || this.awaitPos, exprList.length > 1 ? ((val = this.startNodeAt(innerStartPos, innerStartLoc)).expressions = exprList, this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc)) : val = exprList[0];
          } else val = this.parseParenExpression();
          if (this.options.preserveParens) {
            var par = this.startNodeAt(startPos, startLoc);
            return par.expression = val, this.finishNode(par, "ParenthesizedExpression");
          }
          return val;
        }, pp$5.parseParenItem = function(item) {
          return item;
        }, pp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {
          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit);
        };
        var empty = [];
        pp$5.parseNew = function() {
          this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword new");
          var node = this.startNode();
          if (this.next(), this.options.ecmaVersion >= 6 && this.type === types$1.dot) {
            var meta = this.startNodeAt(node.start, node.loc && node.loc.start);
            meta.name = "new", node.meta = this.finishNode(meta, "Identifier"), this.next();
            var containsEsc = this.containsEsc;
            return node.property = this.parseIdent(true), "target" !== node.property.name && this.raiseRecoverable(node.property.start, "The only valid meta property for new is 'new.target'"), containsEsc && this.raiseRecoverable(node.start, "'new.target' must not contain escaped characters"), this.allowNewDotTarget || this.raiseRecoverable(node.start, "'new.target' can only be used in functions and class static block"), this.finishNode(node, "MetaProperty");
          }
          var startPos = this.start, startLoc = this.startLoc;
          return node.callee = this.parseSubscripts(this.parseExprAtom(null, false, true), startPos, startLoc, true, false), this.eat(types$1.parenL) ? node.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false) : node.arguments = empty, this.finishNode(node, "NewExpression");
        }, pp$5.parseTemplateElement = function(ref2) {
          var isTagged = ref2.isTagged, elem = this.startNode();
          return this.type === types$1.invalidTemplate ? (isTagged || this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal"), elem.value = { raw: this.value.replace(/\r\n?/g, "\n"), cooked: null }) : elem.value = { raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"), cooked: this.value }, this.next(), elem.tail = this.type === types$1.backQuote, this.finishNode(elem, "TemplateElement");
        }, pp$5.parseTemplate = function(ref2) {
          void 0 === ref2 && (ref2 = {});
          var isTagged = ref2.isTagged;
          void 0 === isTagged && (isTagged = false);
          var node = this.startNode();
          this.next(), node.expressions = [];
          var curElt = this.parseTemplateElement({ isTagged });
          for (node.quasis = [curElt]; !curElt.tail; ) this.type === types$1.eof && this.raise(this.pos, "Unterminated template literal"), this.expect(types$1.dollarBraceL), node.expressions.push(this.parseExpression()), this.expect(types$1.braceR), node.quasis.push(curElt = this.parseTemplateElement({ isTagged }));
          return this.next(), this.finishNode(node, "TemplateLiteral");
        }, pp$5.isAsyncProp = function(prop) {
          return !prop.computed && "Identifier" === prop.key.type && "async" === prop.key.name && (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types$1.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
        }, pp$5.parseObj = function(isPattern, refDestructuringErrors) {
          var node = this.startNode(), first = true, propHash = {};
          for (node.properties = [], this.next(); !this.eat(types$1.braceR); ) {
            if (first) first = false;
            else if (this.expect(types$1.comma), this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) break;
            var prop = this.parseProperty(isPattern, refDestructuringErrors);
            isPattern || this.checkPropClash(prop, propHash, refDestructuringErrors), node.properties.push(prop);
          }
          return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
        }, pp$5.parseProperty = function(isPattern, refDestructuringErrors) {
          var isGenerator2, isAsync, startPos, startLoc, prop = this.startNode();
          if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) return isPattern ? (prop.argument = this.parseIdent(false), this.type === types$1.comma && this.raiseRecoverable(this.start, "Comma is not permitted after the rest element"), this.finishNode(prop, "RestElement")) : (prop.argument = this.parseMaybeAssign(false, refDestructuringErrors), this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0 && (refDestructuringErrors.trailingComma = this.start), this.finishNode(prop, "SpreadElement"));
          this.options.ecmaVersion >= 6 && (prop.method = false, prop.shorthand = false, (isPattern || refDestructuringErrors) && (startPos = this.start, startLoc = this.startLoc), isPattern || (isGenerator2 = this.eat(types$1.star)));
          var containsEsc = this.containsEsc;
          return this.parsePropertyName(prop), !isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator2 && this.isAsyncProp(prop) ? (isAsync = true, isGenerator2 = this.options.ecmaVersion >= 9 && this.eat(types$1.star), this.parsePropertyName(prop)) : isAsync = false, this.parsePropertyValue(prop, isPattern, isGenerator2, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc), this.finishNode(prop, "Property");
        }, pp$5.parseGetterSetter = function(prop) {
          prop.kind = prop.key.name, this.parsePropertyName(prop), prop.value = this.parseMethod(false);
          var paramCount = "get" === prop.kind ? 0 : 1;
          if (prop.value.params.length !== paramCount) {
            var start = prop.value.start;
            "get" === prop.kind ? this.raiseRecoverable(start, "getter should have no params") : this.raiseRecoverable(start, "setter should have exactly one param");
          } else "set" === prop.kind && "RestElement" === prop.value.params[0].type && this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
        }, pp$5.parsePropertyValue = function(prop, isPattern, isGenerator2, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
          (isGenerator2 || isAsync) && this.type === types$1.colon && this.unexpected(), this.eat(types$1.colon) ? (prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors), prop.kind = "init") : this.options.ecmaVersion >= 6 && this.type === types$1.parenL ? (isPattern && this.unexpected(), prop.kind = "init", prop.method = true, prop.value = this.parseMethod(isGenerator2, isAsync)) : isPattern || containsEsc || !(this.options.ecmaVersion >= 5) || prop.computed || "Identifier" !== prop.key.type || "get" !== prop.key.name && "set" !== prop.key.name || this.type === types$1.comma || this.type === types$1.braceR || this.type === types$1.eq ? this.options.ecmaVersion >= 6 && !prop.computed && "Identifier" === prop.key.type ? ((isGenerator2 || isAsync) && this.unexpected(), this.checkUnreserved(prop.key), "await" !== prop.key.name || this.awaitIdentPos || (this.awaitIdentPos = startPos), prop.kind = "init", isPattern ? prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key)) : this.type === types$1.eq && refDestructuringErrors ? (refDestructuringErrors.shorthandAssign < 0 && (refDestructuringErrors.shorthandAssign = this.start), prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key))) : prop.value = this.copyNode(prop.key), prop.shorthand = true) : this.unexpected() : ((isGenerator2 || isAsync) && this.unexpected(), this.parseGetterSetter(prop));
        }, pp$5.parsePropertyName = function(prop) {
          if (this.options.ecmaVersion >= 6) {
            if (this.eat(types$1.bracketL)) return prop.computed = true, prop.key = this.parseMaybeAssign(), this.expect(types$1.bracketR), prop.key;
            prop.computed = false;
          }
          return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent("never" !== this.options.allowReserved);
        }, pp$5.initFunction = function(node) {
          node.id = null, this.options.ecmaVersion >= 6 && (node.generator = node.expression = false), this.options.ecmaVersion >= 8 && (node.async = false);
        }, pp$5.parseMethod = function(isGenerator2, isAsync, allowDirectSuper) {
          var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          return this.initFunction(node), this.options.ecmaVersion >= 6 && (node.generator = isGenerator2), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(64 | functionFlags(isAsync, node.generator) | (allowDirectSuper ? 128 : 0)), this.expect(types$1.parenL), node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams(), this.parseFunctionBody(node, false, true, false), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, "FunctionExpression");
        }, pp$5.parseArrowExpression = function(node, params, isAsync, forInit) {
          var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          return this.enterScope(16 | functionFlags(isAsync, false)), this.initFunction(node), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, node.params = this.toAssignableList(params, true), this.parseFunctionBody(node, true, false, forInit), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, "ArrowFunctionExpression");
        }, pp$5.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {
          var isExpression = isArrowFunction && this.type !== types$1.braceL, oldStrict = this.strict, useStrict = false;
          if (isExpression) node.body = this.parseMaybeAssign(forInit), node.expression = true, this.checkParams(node, false);
          else {
            var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
            oldStrict && !nonSimple || (useStrict = this.strictDirective(this.end)) && nonSimple && this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
            var oldLabels = this.labels;
            this.labels = [], useStrict && (this.strict = true), this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params)), this.strict && node.id && this.checkLValSimple(node.id, 5), node.body = this.parseBlock(false, void 0, useStrict && !oldStrict), node.expression = false, this.adaptDirectivePrologue(node.body.body), this.labels = oldLabels;
          }
          this.exitScope();
        }, pp$5.isSimpleParamList = function(params) {
          for (var i3 = 0, list2 = params; i3 < list2.length; i3 += 1) {
            if ("Identifier" !== list2[i3].type) return false;
          }
          return true;
        }, pp$5.checkParams = function(node, allowDuplicates) {
          for (var nameHash = /* @__PURE__ */ Object.create(null), i3 = 0, list2 = node.params; i3 < list2.length; i3 += 1) {
            var param = list2[i3];
            this.checkLValInnerPattern(param, 1, allowDuplicates ? null : nameHash);
          }
        }, pp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
          for (var elts = [], first = true; !this.eat(close); ) {
            if (first) first = false;
            else if (this.expect(types$1.comma), allowTrailingComma && this.afterTrailingComma(close)) break;
            var elt = void 0;
            allowEmpty && this.type === types$1.comma ? elt = null : this.type === types$1.ellipsis ? (elt = this.parseSpread(refDestructuringErrors), refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0 && (refDestructuringErrors.trailingComma = this.start)) : elt = this.parseMaybeAssign(false, refDestructuringErrors), elts.push(elt);
          }
          return elts;
        }, pp$5.checkUnreserved = function(ref2) {
          var start = ref2.start, end = ref2.end, name = ref2.name;
          (this.inGenerator && "yield" === name && this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator"), this.inAsync && "await" === name && this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function"), this.currentThisScope().inClassFieldInit && "arguments" === name && this.raiseRecoverable(start, "Cannot use 'arguments' in class field initializer"), !this.inClassStaticBlock || "arguments" !== name && "await" !== name || this.raise(start, "Cannot use " + name + " in class static initialization block"), this.keywords.test(name) && this.raise(start, "Unexpected keyword '" + name + "'"), this.options.ecmaVersion < 6 && -1 !== this.input.slice(start, end).indexOf("\\")) || (this.strict ? this.reservedWordsStrict : this.reservedWords).test(name) && (this.inAsync || "await" !== name || this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function"), this.raiseRecoverable(start, "The keyword '" + name + "' is reserved"));
        }, pp$5.parseIdent = function(liberal) {
          var node = this.parseIdentNode();
          return this.next(!!liberal), this.finishNode(node, "Identifier"), liberal || (this.checkUnreserved(node), "await" !== node.name || this.awaitIdentPos || (this.awaitIdentPos = node.start)), node;
        }, pp$5.parseIdentNode = function() {
          var node = this.startNode();
          return this.type === types$1.name ? node.name = this.value : this.type.keyword ? (node.name = this.type.keyword, "class" !== node.name && "function" !== node.name || this.lastTokEnd === this.lastTokStart + 1 && 46 === this.input.charCodeAt(this.lastTokStart) || this.context.pop(), this.type = types$1.name) : this.unexpected(), node;
        }, pp$5.parsePrivateIdent = function() {
          var node = this.startNode();
          return this.type === types$1.privateId ? node.name = this.value : this.unexpected(), this.next(), this.finishNode(node, "PrivateIdentifier"), this.options.checkPrivateFields && (0 === this.privateNameStack.length ? this.raise(node.start, "Private field '#" + node.name + "' must be declared in an enclosing class") : this.privateNameStack[this.privateNameStack.length - 1].used.push(node)), node;
        }, pp$5.parseYield = function(forInit) {
          this.yieldPos || (this.yieldPos = this.start);
          var node = this.startNode();
          return this.next(), this.type === types$1.semi || this.canInsertSemicolon() || this.type !== types$1.star && !this.type.startsExpr ? (node.delegate = false, node.argument = null) : (node.delegate = this.eat(types$1.star), node.argument = this.parseMaybeAssign(forInit)), this.finishNode(node, "YieldExpression");
        }, pp$5.parseAwait = function(forInit) {
          this.awaitPos || (this.awaitPos = this.start);
          var node = this.startNode();
          return this.next(), node.argument = this.parseMaybeUnary(null, true, false, forInit), this.finishNode(node, "AwaitExpression");
        };
        var pp$4 = Parser.prototype;
        pp$4.raise = function(pos, message) {
          var loc = getLineInfo(this.input, pos);
          message += " (" + loc.line + ":" + loc.column + ")";
          var err = new SyntaxError(message);
          throw err.pos = pos, err.loc = loc, err.raisedAt = this.pos, err;
        }, pp$4.raiseRecoverable = pp$4.raise, pp$4.curPosition = function() {
          if (this.options.locations) return new Position(this.curLine, this.pos - this.lineStart);
        };
        var pp$3 = Parser.prototype, Scope = function(flags) {
          this.flags = flags, this.var = [], this.lexical = [], this.functions = [], this.inClassFieldInit = false;
        };
        pp$3.enterScope = function(flags) {
          this.scopeStack.push(new Scope(flags));
        }, pp$3.exitScope = function() {
          this.scopeStack.pop();
        }, pp$3.treatFunctionsAsVarInScope = function(scope) {
          return 2 & scope.flags || !this.inModule && 1 & scope.flags;
        }, pp$3.declareName = function(name, bindingType, pos) {
          var redeclared = false;
          if (2 === bindingType) {
            var scope = this.currentScope();
            redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1, scope.lexical.push(name), this.inModule && 1 & scope.flags && delete this.undefinedExports[name];
          } else if (4 === bindingType) {
            this.currentScope().lexical.push(name);
          } else if (3 === bindingType) {
            var scope$2 = this.currentScope();
            redeclared = this.treatFunctionsAsVar ? scope$2.lexical.indexOf(name) > -1 : scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1, scope$2.functions.push(name);
          } else for (var i3 = this.scopeStack.length - 1; i3 >= 0; --i3) {
            var scope$3 = this.scopeStack[i3];
            if (scope$3.lexical.indexOf(name) > -1 && !(32 & scope$3.flags && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
              redeclared = true;
              break;
            }
            if (scope$3.var.push(name), this.inModule && 1 & scope$3.flags && delete this.undefinedExports[name], 259 & scope$3.flags) break;
          }
          redeclared && this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared");
        }, pp$3.checkLocalExport = function(id) {
          -1 === this.scopeStack[0].lexical.indexOf(id.name) && -1 === this.scopeStack[0].var.indexOf(id.name) && (this.undefinedExports[id.name] = id);
        }, pp$3.currentScope = function() {
          return this.scopeStack[this.scopeStack.length - 1];
        }, pp$3.currentVarScope = function() {
          for (var i3 = this.scopeStack.length - 1; ; i3--) {
            var scope = this.scopeStack[i3];
            if (259 & scope.flags) return scope;
          }
        }, pp$3.currentThisScope = function() {
          for (var i3 = this.scopeStack.length - 1; ; i3--) {
            var scope = this.scopeStack[i3];
            if (259 & scope.flags && !(16 & scope.flags)) return scope;
          }
        };
        var Node3 = function(parser, pos, loc) {
          this.type = "", this.start = pos, this.end = 0, parser.options.locations && (this.loc = new SourceLocation(parser, loc)), parser.options.directSourceFile && (this.sourceFile = parser.options.directSourceFile), parser.options.ranges && (this.range = [pos, 0]);
        }, pp$2 = Parser.prototype;
        function finishNodeAt(node, type, pos, loc) {
          return node.type = type, node.end = pos, this.options.locations && (node.loc.end = loc), this.options.ranges && (node.range[1] = pos), node;
        }
        pp$2.startNode = function() {
          return new Node3(this, this.start, this.startLoc);
        }, pp$2.startNodeAt = function(pos, loc) {
          return new Node3(this, pos, loc);
        }, pp$2.finishNode = function(node, type) {
          return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
        }, pp$2.finishNodeAt = function(node, type, pos, loc) {
          return finishNodeAt.call(this, node, type, pos, loc);
        }, pp$2.copyNode = function(node) {
          var newNode = new Node3(this, node.start, this.startLoc);
          for (var prop in node) newNode[prop] = node[prop];
          return newNode;
        };
        var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS", ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic", ecma12BinaryProperties = ecma10BinaryProperties + " EBase EComp EMod EPres ExtPict", unicodeBinaryProperties = { 9: ecma9BinaryProperties, 10: ecma10BinaryProperties, 11: ecma10BinaryProperties, 12: ecma12BinaryProperties, 13: ecma12BinaryProperties, 14: ecma12BinaryProperties }, unicodeBinaryPropertiesOfStrings = { 9: "", 10: "", 11: "", 12: "", 13: "", 14: "Basic_Emoji Emoji_Keycap_Sequence RGI_Emoji_Modifier_Sequence RGI_Emoji_Flag_Sequence RGI_Emoji_Tag_Sequence RGI_Emoji_ZWJ_Sequence RGI_Emoji" }, unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu", ecma9ScriptValues = "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb", ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd", ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho", ecma12ScriptValues = ecma11ScriptValues + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi", ecma13ScriptValues = ecma12ScriptValues + " Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith", unicodeScriptValues = { 9: ecma9ScriptValues, 10: ecma10ScriptValues, 11: ecma11ScriptValues, 12: ecma12ScriptValues, 13: ecma13ScriptValues, 14: ecma13ScriptValues + " Gara Garay Gukh Gurung_Khema Hrkt Katakana_Or_Hiragana Kawi Kirat_Rai Krai Nag_Mundari Nagm Ol_Onal Onao Sunu Sunuwar Todhri Todr Tulu_Tigalari Tutg Unknown Zzzz" }, data = {};
        function buildUnicodeData(ecmaVersion) {
          var d2 = data[ecmaVersion] = { binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues), binaryOfStrings: wordsRegexp(unicodeBinaryPropertiesOfStrings[ecmaVersion]), nonBinary: { General_Category: wordsRegexp(unicodeGeneralCategoryValues), Script: wordsRegexp(unicodeScriptValues[ecmaVersion]) } };
          d2.nonBinary.Script_Extensions = d2.nonBinary.Script, d2.nonBinary.gc = d2.nonBinary.General_Category, d2.nonBinary.sc = d2.nonBinary.Script, d2.nonBinary.scx = d2.nonBinary.Script_Extensions;
        }
        for (var i2 = 0, list = [9, 10, 11, 12, 13, 14]; i2 < list.length; i2 += 1) {
          buildUnicodeData(list[i2]);
        }
        var pp$1 = Parser.prototype, BranchID = function(parent, base) {
          this.parent = parent, this.base = base || this;
        };
        BranchID.prototype.separatedFrom = function(alt) {
          for (var self = this; self; self = self.parent) for (var other = alt; other; other = other.parent) if (self.base === other.base && self !== other) return true;
          return false;
        }, BranchID.prototype.sibling = function() {
          return new BranchID(this.parent, this.base);
        };
        var RegExpValidationState = function(parser) {
          this.parser = parser, this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "") + (parser.options.ecmaVersion >= 13 ? "d" : "") + (parser.options.ecmaVersion >= 15 ? "v" : ""), this.unicodeProperties = data[parser.options.ecmaVersion >= 14 ? 14 : parser.options.ecmaVersion], this.source = "", this.flags = "", this.start = 0, this.switchU = false, this.switchV = false, this.switchN = false, this.pos = 0, this.lastIntValue = 0, this.lastStringValue = "", this.lastAssertionIsQuantifiable = false, this.numCapturingParens = 0, this.maxBackReference = 0, this.groupNames = /* @__PURE__ */ Object.create(null), this.backReferenceNames = [], this.branchID = null;
        };
        function isRegularExpressionModifier(ch) {
          return 105 === ch || 109 === ch || 115 === ch;
        }
        function isSyntaxCharacter(ch) {
          return 36 === ch || ch >= 40 && ch <= 43 || 46 === ch || 63 === ch || ch >= 91 && ch <= 94 || ch >= 123 && ch <= 125;
        }
        function isControlLetter(ch) {
          return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
        }
        RegExpValidationState.prototype.reset = function(start, pattern, flags) {
          var unicodeSets = -1 !== flags.indexOf("v"), unicode = -1 !== flags.indexOf("u");
          this.start = 0 | start, this.source = pattern + "", this.flags = flags, unicodeSets && this.parser.options.ecmaVersion >= 15 ? (this.switchU = true, this.switchV = true, this.switchN = true) : (this.switchU = unicode && this.parser.options.ecmaVersion >= 6, this.switchV = false, this.switchN = unicode && this.parser.options.ecmaVersion >= 9);
        }, RegExpValidationState.prototype.raise = function(message) {
          this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
        }, RegExpValidationState.prototype.at = function(i3, forceU) {
          void 0 === forceU && (forceU = false);
          var s = this.source, l2 = s.length;
          if (i3 >= l2) return -1;
          var c4 = s.charCodeAt(i3);
          if (!forceU && !this.switchU || c4 <= 55295 || c4 >= 57344 || i3 + 1 >= l2) return c4;
          var next = s.charCodeAt(i3 + 1);
          return next >= 56320 && next <= 57343 ? (c4 << 10) + next - 56613888 : c4;
        }, RegExpValidationState.prototype.nextIndex = function(i3, forceU) {
          void 0 === forceU && (forceU = false);
          var s = this.source, l2 = s.length;
          if (i3 >= l2) return l2;
          var next, c4 = s.charCodeAt(i3);
          return !forceU && !this.switchU || c4 <= 55295 || c4 >= 57344 || i3 + 1 >= l2 || (next = s.charCodeAt(i3 + 1)) < 56320 || next > 57343 ? i3 + 1 : i3 + 2;
        }, RegExpValidationState.prototype.current = function(forceU) {
          return void 0 === forceU && (forceU = false), this.at(this.pos, forceU);
        }, RegExpValidationState.prototype.lookahead = function(forceU) {
          return void 0 === forceU && (forceU = false), this.at(this.nextIndex(this.pos, forceU), forceU);
        }, RegExpValidationState.prototype.advance = function(forceU) {
          void 0 === forceU && (forceU = false), this.pos = this.nextIndex(this.pos, forceU);
        }, RegExpValidationState.prototype.eat = function(ch, forceU) {
          return void 0 === forceU && (forceU = false), this.current(forceU) === ch && (this.advance(forceU), true);
        }, RegExpValidationState.prototype.eatChars = function(chs, forceU) {
          void 0 === forceU && (forceU = false);
          for (var pos = this.pos, i3 = 0, list2 = chs; i3 < list2.length; i3 += 1) {
            var ch = list2[i3], current = this.at(pos, forceU);
            if (-1 === current || current !== ch) return false;
            pos = this.nextIndex(pos, forceU);
          }
          return this.pos = pos, true;
        }, pp$1.validateRegExpFlags = function(state) {
          for (var validFlags = state.validFlags, flags = state.flags, u3 = false, v = false, i3 = 0; i3 < flags.length; i3++) {
            var flag = flags.charAt(i3);
            -1 === validFlags.indexOf(flag) && this.raise(state.start, "Invalid regular expression flag"), flags.indexOf(flag, i3 + 1) > -1 && this.raise(state.start, "Duplicate regular expression flag"), "u" === flag && (u3 = true), "v" === flag && (v = true);
          }
          this.options.ecmaVersion >= 15 && u3 && v && this.raise(state.start, "Invalid regular expression flag");
        }, pp$1.validateRegExpPattern = function(state) {
          this.regexp_pattern(state), !state.switchN && this.options.ecmaVersion >= 9 && function(obj) {
            for (var _2 in obj) return true;
            return false;
          }(state.groupNames) && (state.switchN = true, this.regexp_pattern(state));
        }, pp$1.regexp_pattern = function(state) {
          state.pos = 0, state.lastIntValue = 0, state.lastStringValue = "", state.lastAssertionIsQuantifiable = false, state.numCapturingParens = 0, state.maxBackReference = 0, state.groupNames = /* @__PURE__ */ Object.create(null), state.backReferenceNames.length = 0, state.branchID = null, this.regexp_disjunction(state), state.pos !== state.source.length && (state.eat(41) && state.raise("Unmatched ')'"), (state.eat(93) || state.eat(125)) && state.raise("Lone quantifier brackets")), state.maxBackReference > state.numCapturingParens && state.raise("Invalid escape");
          for (var i3 = 0, list2 = state.backReferenceNames; i3 < list2.length; i3 += 1) {
            var name = list2[i3];
            state.groupNames[name] || state.raise("Invalid named capture referenced");
          }
        }, pp$1.regexp_disjunction = function(state) {
          var trackDisjunction = this.options.ecmaVersion >= 16;
          for (trackDisjunction && (state.branchID = new BranchID(state.branchID, null)), this.regexp_alternative(state); state.eat(124); ) trackDisjunction && (state.branchID = state.branchID.sibling()), this.regexp_alternative(state);
          trackDisjunction && (state.branchID = state.branchID.parent), this.regexp_eatQuantifier(state, true) && state.raise("Nothing to repeat"), state.eat(123) && state.raise("Lone quantifier brackets");
        }, pp$1.regexp_alternative = function(state) {
          for (; state.pos < state.source.length && this.regexp_eatTerm(state); ) ;
        }, pp$1.regexp_eatTerm = function(state) {
          return this.regexp_eatAssertion(state) ? (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state) && state.switchU && state.raise("Invalid quantifier"), true) : !!(state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) && (this.regexp_eatQuantifier(state), true);
        }, pp$1.regexp_eatAssertion = function(state) {
          var start = state.pos;
          if (state.lastAssertionIsQuantifiable = false, state.eat(94) || state.eat(36)) return true;
          if (state.eat(92)) {
            if (state.eat(66) || state.eat(98)) return true;
            state.pos = start;
          }
          if (state.eat(40) && state.eat(63)) {
            var lookbehind = false;
            if (this.options.ecmaVersion >= 9 && (lookbehind = state.eat(60)), state.eat(61) || state.eat(33)) return this.regexp_disjunction(state), state.eat(41) || state.raise("Unterminated group"), state.lastAssertionIsQuantifiable = !lookbehind, true;
          }
          return state.pos = start, false;
        }, pp$1.regexp_eatQuantifier = function(state, noError) {
          return void 0 === noError && (noError = false), !!this.regexp_eatQuantifierPrefix(state, noError) && (state.eat(63), true);
        }, pp$1.regexp_eatQuantifierPrefix = function(state, noError) {
          return state.eat(42) || state.eat(43) || state.eat(63) || this.regexp_eatBracedQuantifier(state, noError);
        }, pp$1.regexp_eatBracedQuantifier = function(state, noError) {
          var start = state.pos;
          if (state.eat(123)) {
            var min = 0, max = -1;
            if (this.regexp_eatDecimalDigits(state) && (min = state.lastIntValue, state.eat(44) && this.regexp_eatDecimalDigits(state) && (max = state.lastIntValue), state.eat(125))) return -1 !== max && max < min && !noError && state.raise("numbers out of order in {} quantifier"), true;
            state.switchU && !noError && state.raise("Incomplete quantifier"), state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatAtom = function(state) {
          return this.regexp_eatPatternCharacters(state) || state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
        }, pp$1.regexp_eatReverseSolidusAtomEscape = function(state) {
          var start = state.pos;
          if (state.eat(92)) {
            if (this.regexp_eatAtomEscape(state)) return true;
            state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatUncapturingGroup = function(state) {
          var start = state.pos;
          if (state.eat(40)) {
            if (state.eat(63)) {
              if (this.options.ecmaVersion >= 16) {
                var addModifiers = this.regexp_eatModifiers(state), hasHyphen = state.eat(45);
                if (addModifiers || hasHyphen) {
                  for (var i3 = 0; i3 < addModifiers.length; i3++) {
                    var modifier = addModifiers.charAt(i3);
                    addModifiers.indexOf(modifier, i3 + 1) > -1 && state.raise("Duplicate regular expression modifiers");
                  }
                  if (hasHyphen) {
                    var removeModifiers = this.regexp_eatModifiers(state);
                    addModifiers || removeModifiers || 58 !== state.current() || state.raise("Invalid regular expression modifiers");
                    for (var i$1 = 0; i$1 < removeModifiers.length; i$1++) {
                      var modifier$1 = removeModifiers.charAt(i$1);
                      (removeModifiers.indexOf(modifier$1, i$1 + 1) > -1 || addModifiers.indexOf(modifier$1) > -1) && state.raise("Duplicate regular expression modifiers");
                    }
                  }
                }
              }
              if (state.eat(58)) {
                if (this.regexp_disjunction(state), state.eat(41)) return true;
                state.raise("Unterminated group");
              }
            }
            state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatCapturingGroup = function(state) {
          if (state.eat(40)) {
            if (this.options.ecmaVersion >= 9 ? this.regexp_groupSpecifier(state) : 63 === state.current() && state.raise("Invalid group"), this.regexp_disjunction(state), state.eat(41)) return state.numCapturingParens += 1, true;
            state.raise("Unterminated group");
          }
          return false;
        }, pp$1.regexp_eatModifiers = function(state) {
          for (var modifiers = "", ch = 0; -1 !== (ch = state.current()) && isRegularExpressionModifier(ch); ) modifiers += codePointToString(ch), state.advance();
          return modifiers;
        }, pp$1.regexp_eatExtendedAtom = function(state) {
          return state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
        }, pp$1.regexp_eatInvalidBracedQuantifier = function(state) {
          return this.regexp_eatBracedQuantifier(state, true) && state.raise("Nothing to repeat"), false;
        }, pp$1.regexp_eatSyntaxCharacter = function(state) {
          var ch = state.current();
          return !!isSyntaxCharacter(ch) && (state.lastIntValue = ch, state.advance(), true);
        }, pp$1.regexp_eatPatternCharacters = function(state) {
          for (var start = state.pos, ch = 0; -1 !== (ch = state.current()) && !isSyntaxCharacter(ch); ) state.advance();
          return state.pos !== start;
        }, pp$1.regexp_eatExtendedPatternCharacter = function(state) {
          var ch = state.current();
          return !(-1 === ch || 36 === ch || ch >= 40 && ch <= 43 || 46 === ch || 63 === ch || 91 === ch || 94 === ch || 124 === ch) && (state.advance(), true);
        }, pp$1.regexp_groupSpecifier = function(state) {
          if (state.eat(63)) {
            this.regexp_eatGroupName(state) || state.raise("Invalid group");
            var trackDisjunction = this.options.ecmaVersion >= 16, known = state.groupNames[state.lastStringValue];
            if (known) if (trackDisjunction) for (var i3 = 0, list2 = known; i3 < list2.length; i3 += 1) {
              list2[i3].separatedFrom(state.branchID) || state.raise("Duplicate capture group name");
            }
            else state.raise("Duplicate capture group name");
            trackDisjunction ? (known || (state.groupNames[state.lastStringValue] = [])).push(state.branchID) : state.groupNames[state.lastStringValue] = true;
          }
        }, pp$1.regexp_eatGroupName = function(state) {
          if (state.lastStringValue = "", state.eat(60)) {
            if (this.regexp_eatRegExpIdentifierName(state) && state.eat(62)) return true;
            state.raise("Invalid capture group name");
          }
          return false;
        }, pp$1.regexp_eatRegExpIdentifierName = function(state) {
          if (state.lastStringValue = "", this.regexp_eatRegExpIdentifierStart(state)) {
            for (state.lastStringValue += codePointToString(state.lastIntValue); this.regexp_eatRegExpIdentifierPart(state); ) state.lastStringValue += codePointToString(state.lastIntValue);
            return true;
          }
          return false;
        }, pp$1.regexp_eatRegExpIdentifierStart = function(state) {
          var start = state.pos, forceU = this.options.ecmaVersion >= 11, ch = state.current(forceU);
          return state.advance(forceU), 92 === ch && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU) && (ch = state.lastIntValue), function(ch2) {
            return isIdentifierStart(ch2, true) || 36 === ch2 || 95 === ch2;
          }(ch) ? (state.lastIntValue = ch, true) : (state.pos = start, false);
        }, pp$1.regexp_eatRegExpIdentifierPart = function(state) {
          var start = state.pos, forceU = this.options.ecmaVersion >= 11, ch = state.current(forceU);
          return state.advance(forceU), 92 === ch && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU) && (ch = state.lastIntValue), function(ch2) {
            return isIdentifierChar(ch2, true) || 36 === ch2 || 95 === ch2 || 8204 === ch2 || 8205 === ch2;
          }(ch) ? (state.lastIntValue = ch, true) : (state.pos = start, false);
        }, pp$1.regexp_eatAtomEscape = function(state) {
          return !!(this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) || (state.switchU && (99 === state.current() && state.raise("Invalid unicode escape"), state.raise("Invalid escape")), false);
        }, pp$1.regexp_eatBackReference = function(state) {
          var start = state.pos;
          if (this.regexp_eatDecimalEscape(state)) {
            var n2 = state.lastIntValue;
            if (state.switchU) return n2 > state.maxBackReference && (state.maxBackReference = n2), true;
            if (n2 <= state.numCapturingParens) return true;
            state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatKGroupName = function(state) {
          if (state.eat(107)) {
            if (this.regexp_eatGroupName(state)) return state.backReferenceNames.push(state.lastStringValue), true;
            state.raise("Invalid named reference");
          }
          return false;
        }, pp$1.regexp_eatCharacterEscape = function(state) {
          return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, false) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
        }, pp$1.regexp_eatCControlLetter = function(state) {
          var start = state.pos;
          if (state.eat(99)) {
            if (this.regexp_eatControlLetter(state)) return true;
            state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatZero = function(state) {
          return 48 === state.current() && !isDecimalDigit(state.lookahead()) && (state.lastIntValue = 0, state.advance(), true);
        }, pp$1.regexp_eatControlEscape = function(state) {
          var ch = state.current();
          return 116 === ch ? (state.lastIntValue = 9, state.advance(), true) : 110 === ch ? (state.lastIntValue = 10, state.advance(), true) : 118 === ch ? (state.lastIntValue = 11, state.advance(), true) : 102 === ch ? (state.lastIntValue = 12, state.advance(), true) : 114 === ch && (state.lastIntValue = 13, state.advance(), true);
        }, pp$1.regexp_eatControlLetter = function(state) {
          var ch = state.current();
          return !!isControlLetter(ch) && (state.lastIntValue = ch % 32, state.advance(), true);
        }, pp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
          void 0 === forceU && (forceU = false);
          var ch, start = state.pos, switchU = forceU || state.switchU;
          if (state.eat(117)) {
            if (this.regexp_eatFixedHexDigits(state, 4)) {
              var lead = state.lastIntValue;
              if (switchU && lead >= 55296 && lead <= 56319) {
                var leadSurrogateEnd = state.pos;
                if (state.eat(92) && state.eat(117) && this.regexp_eatFixedHexDigits(state, 4)) {
                  var trail = state.lastIntValue;
                  if (trail >= 56320 && trail <= 57343) return state.lastIntValue = 1024 * (lead - 55296) + (trail - 56320) + 65536, true;
                }
                state.pos = leadSurrogateEnd, state.lastIntValue = lead;
              }
              return true;
            }
            if (switchU && state.eat(123) && this.regexp_eatHexDigits(state) && state.eat(125) && ((ch = state.lastIntValue) >= 0 && ch <= 1114111)) return true;
            switchU && state.raise("Invalid unicode escape"), state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatIdentityEscape = function(state) {
          if (state.switchU) return !!this.regexp_eatSyntaxCharacter(state) || !!state.eat(47) && (state.lastIntValue = 47, true);
          var ch = state.current();
          return !(99 === ch || state.switchN && 107 === ch) && (state.lastIntValue = ch, state.advance(), true);
        }, pp$1.regexp_eatDecimalEscape = function(state) {
          state.lastIntValue = 0;
          var ch = state.current();
          if (ch >= 49 && ch <= 57) {
            do {
              state.lastIntValue = 10 * state.lastIntValue + (ch - 48), state.advance();
            } while ((ch = state.current()) >= 48 && ch <= 57);
            return true;
          }
          return false;
        };
        function isUnicodePropertyNameCharacter(ch) {
          return isControlLetter(ch) || 95 === ch;
        }
        function isUnicodePropertyValueCharacter(ch) {
          return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
        }
        function isDecimalDigit(ch) {
          return ch >= 48 && ch <= 57;
        }
        function isHexDigit(ch) {
          return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102;
        }
        function hexToInt(ch) {
          return ch >= 65 && ch <= 70 ? ch - 65 + 10 : ch >= 97 && ch <= 102 ? ch - 97 + 10 : ch - 48;
        }
        function isOctalDigit(ch) {
          return ch >= 48 && ch <= 55;
        }
        pp$1.regexp_eatCharacterClassEscape = function(state) {
          var ch = state.current();
          if (/* @__PURE__ */ function(ch2) {
            return 100 === ch2 || 68 === ch2 || 115 === ch2 || 83 === ch2 || 119 === ch2 || 87 === ch2;
          }(ch)) return state.lastIntValue = -1, state.advance(), 1;
          var negate = false;
          if (state.switchU && this.options.ecmaVersion >= 9 && ((negate = 80 === ch) || 112 === ch)) {
            var result;
            if (state.lastIntValue = -1, state.advance(), state.eat(123) && (result = this.regexp_eatUnicodePropertyValueExpression(state)) && state.eat(125)) return negate && 2 === result && state.raise("Invalid property name"), result;
            state.raise("Invalid property name");
          }
          return 0;
        }, pp$1.regexp_eatUnicodePropertyValueExpression = function(state) {
          var start = state.pos;
          if (this.regexp_eatUnicodePropertyName(state) && state.eat(61)) {
            var name = state.lastStringValue;
            if (this.regexp_eatUnicodePropertyValue(state)) {
              var value2 = state.lastStringValue;
              return this.regexp_validateUnicodePropertyNameAndValue(state, name, value2), 1;
            }
          }
          if (state.pos = start, this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
            var nameOrValue = state.lastStringValue;
            return this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
          }
          return 0;
        }, pp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value2) {
          hasOwn(state.unicodeProperties.nonBinary, name) || state.raise("Invalid property name"), state.unicodeProperties.nonBinary[name].test(value2) || state.raise("Invalid property value");
        }, pp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
          return state.unicodeProperties.binary.test(nameOrValue) ? 1 : state.switchV && state.unicodeProperties.binaryOfStrings.test(nameOrValue) ? 2 : void state.raise("Invalid property name");
        }, pp$1.regexp_eatUnicodePropertyName = function(state) {
          var ch = 0;
          for (state.lastStringValue = ""; isUnicodePropertyNameCharacter(ch = state.current()); ) state.lastStringValue += codePointToString(ch), state.advance();
          return "" !== state.lastStringValue;
        }, pp$1.regexp_eatUnicodePropertyValue = function(state) {
          var ch = 0;
          for (state.lastStringValue = ""; isUnicodePropertyValueCharacter(ch = state.current()); ) state.lastStringValue += codePointToString(ch), state.advance();
          return "" !== state.lastStringValue;
        }, pp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
          return this.regexp_eatUnicodePropertyValue(state);
        }, pp$1.regexp_eatCharacterClass = function(state) {
          if (state.eat(91)) {
            var negate = state.eat(94), result = this.regexp_classContents(state);
            return state.eat(93) || state.raise("Unterminated character class"), negate && 2 === result && state.raise("Negated character class may contain strings"), true;
          }
          return false;
        }, pp$1.regexp_classContents = function(state) {
          return 93 === state.current() ? 1 : state.switchV ? this.regexp_classSetExpression(state) : (this.regexp_nonEmptyClassRanges(state), 1);
        }, pp$1.regexp_nonEmptyClassRanges = function(state) {
          for (; this.regexp_eatClassAtom(state); ) {
            var left = state.lastIntValue;
            if (state.eat(45) && this.regexp_eatClassAtom(state)) {
              var right = state.lastIntValue;
              !state.switchU || -1 !== left && -1 !== right || state.raise("Invalid character class"), -1 !== left && -1 !== right && left > right && state.raise("Range out of order in character class");
            }
          }
        }, pp$1.regexp_eatClassAtom = function(state) {
          var start = state.pos;
          if (state.eat(92)) {
            if (this.regexp_eatClassEscape(state)) return true;
            if (state.switchU) {
              var ch$1 = state.current();
              (99 === ch$1 || isOctalDigit(ch$1)) && state.raise("Invalid class escape"), state.raise("Invalid escape");
            }
            state.pos = start;
          }
          var ch = state.current();
          return 93 !== ch && (state.lastIntValue = ch, state.advance(), true);
        }, pp$1.regexp_eatClassEscape = function(state) {
          var start = state.pos;
          if (state.eat(98)) return state.lastIntValue = 8, true;
          if (state.switchU && state.eat(45)) return state.lastIntValue = 45, true;
          if (!state.switchU && state.eat(99)) {
            if (this.regexp_eatClassControlLetter(state)) return true;
            state.pos = start;
          }
          return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
        }, pp$1.regexp_classSetExpression = function(state) {
          var subResult, result = 1;
          if (this.regexp_eatClassSetRange(state)) ;
          else if (subResult = this.regexp_eatClassSetOperand(state)) {
            2 === subResult && (result = 2);
            for (var start = state.pos; state.eatChars([38, 38]); ) 38 !== state.current() && (subResult = this.regexp_eatClassSetOperand(state)) ? 2 !== subResult && (result = 1) : state.raise("Invalid character in character class");
            if (start !== state.pos) return result;
            for (; state.eatChars([45, 45]); ) this.regexp_eatClassSetOperand(state) || state.raise("Invalid character in character class");
            if (start !== state.pos) return result;
          } else state.raise("Invalid character in character class");
          for (; ; ) if (!this.regexp_eatClassSetRange(state)) {
            if (!(subResult = this.regexp_eatClassSetOperand(state))) return result;
            2 === subResult && (result = 2);
          }
        }, pp$1.regexp_eatClassSetRange = function(state) {
          var start = state.pos;
          if (this.regexp_eatClassSetCharacter(state)) {
            var left = state.lastIntValue;
            if (state.eat(45) && this.regexp_eatClassSetCharacter(state)) {
              var right = state.lastIntValue;
              return -1 !== left && -1 !== right && left > right && state.raise("Range out of order in character class"), true;
            }
            state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatClassSetOperand = function(state) {
          return this.regexp_eatClassSetCharacter(state) ? 1 : this.regexp_eatClassStringDisjunction(state) || this.regexp_eatNestedClass(state);
        }, pp$1.regexp_eatNestedClass = function(state) {
          var start = state.pos;
          if (state.eat(91)) {
            var negate = state.eat(94), result = this.regexp_classContents(state);
            if (state.eat(93)) return negate && 2 === result && state.raise("Negated character class may contain strings"), result;
            state.pos = start;
          }
          if (state.eat(92)) {
            var result$1 = this.regexp_eatCharacterClassEscape(state);
            if (result$1) return result$1;
            state.pos = start;
          }
          return null;
        }, pp$1.regexp_eatClassStringDisjunction = function(state) {
          var start = state.pos;
          if (state.eatChars([92, 113])) {
            if (state.eat(123)) {
              var result = this.regexp_classStringDisjunctionContents(state);
              if (state.eat(125)) return result;
            } else state.raise("Invalid escape");
            state.pos = start;
          }
          return null;
        }, pp$1.regexp_classStringDisjunctionContents = function(state) {
          for (var result = this.regexp_classString(state); state.eat(124); ) 2 === this.regexp_classString(state) && (result = 2);
          return result;
        }, pp$1.regexp_classString = function(state) {
          for (var count2 = 0; this.regexp_eatClassSetCharacter(state); ) count2++;
          return 1 === count2 ? 1 : 2;
        }, pp$1.regexp_eatClassSetCharacter = function(state) {
          var start = state.pos;
          if (state.eat(92)) return !(!this.regexp_eatCharacterEscape(state) && !this.regexp_eatClassSetReservedPunctuator(state)) || (state.eat(98) ? (state.lastIntValue = 8, true) : (state.pos = start, false));
          var ch = state.current();
          return !(ch < 0 || ch === state.lookahead() && function(ch2) {
            return 33 === ch2 || ch2 >= 35 && ch2 <= 38 || ch2 >= 42 && ch2 <= 44 || 46 === ch2 || ch2 >= 58 && ch2 <= 64 || 94 === ch2 || 96 === ch2 || 126 === ch2;
          }(ch)) && (!function(ch2) {
            return 40 === ch2 || 41 === ch2 || 45 === ch2 || 47 === ch2 || ch2 >= 91 && ch2 <= 93 || ch2 >= 123 && ch2 <= 125;
          }(ch) && (state.advance(), state.lastIntValue = ch, true));
        }, pp$1.regexp_eatClassSetReservedPunctuator = function(state) {
          var ch = state.current();
          return !!function(ch2) {
            return 33 === ch2 || 35 === ch2 || 37 === ch2 || 38 === ch2 || 44 === ch2 || 45 === ch2 || ch2 >= 58 && ch2 <= 62 || 64 === ch2 || 96 === ch2 || 126 === ch2;
          }(ch) && (state.lastIntValue = ch, state.advance(), true);
        }, pp$1.regexp_eatClassControlLetter = function(state) {
          var ch = state.current();
          return !(!isDecimalDigit(ch) && 95 !== ch) && (state.lastIntValue = ch % 32, state.advance(), true);
        }, pp$1.regexp_eatHexEscapeSequence = function(state) {
          var start = state.pos;
          if (state.eat(120)) {
            if (this.regexp_eatFixedHexDigits(state, 2)) return true;
            state.switchU && state.raise("Invalid escape"), state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatDecimalDigits = function(state) {
          var start = state.pos, ch = 0;
          for (state.lastIntValue = 0; isDecimalDigit(ch = state.current()); ) state.lastIntValue = 10 * state.lastIntValue + (ch - 48), state.advance();
          return state.pos !== start;
        }, pp$1.regexp_eatHexDigits = function(state) {
          var start = state.pos, ch = 0;
          for (state.lastIntValue = 0; isHexDigit(ch = state.current()); ) state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch), state.advance();
          return state.pos !== start;
        }, pp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {
          if (this.regexp_eatOctalDigit(state)) {
            var n1 = state.lastIntValue;
            if (this.regexp_eatOctalDigit(state)) {
              var n2 = state.lastIntValue;
              n1 <= 3 && this.regexp_eatOctalDigit(state) ? state.lastIntValue = 64 * n1 + 8 * n2 + state.lastIntValue : state.lastIntValue = 8 * n1 + n2;
            } else state.lastIntValue = n1;
            return true;
          }
          return false;
        }, pp$1.regexp_eatOctalDigit = function(state) {
          var ch = state.current();
          return isOctalDigit(ch) ? (state.lastIntValue = ch - 48, state.advance(), true) : (state.lastIntValue = 0, false);
        }, pp$1.regexp_eatFixedHexDigits = function(state, length) {
          var start = state.pos;
          state.lastIntValue = 0;
          for (var i3 = 0; i3 < length; ++i3) {
            var ch = state.current();
            if (!isHexDigit(ch)) return state.pos = start, false;
            state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch), state.advance();
          }
          return true;
        };
        var Token = function(p) {
          this.type = p.type, this.value = p.value, this.start = p.start, this.end = p.end, p.options.locations && (this.loc = new SourceLocation(p, p.startLoc, p.endLoc)), p.options.ranges && (this.range = [p.start, p.end]);
        }, pp = Parser.prototype;
        function stringToBigInt(str) {
          return "function" != typeof BigInt ? null : BigInt(str.replace(/_/g, ""));
        }
        pp.next = function(ignoreEscapeSequenceInKeyword) {
          !ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword), this.options.onToken && this.options.onToken(new Token(this)), this.lastTokEnd = this.end, this.lastTokStart = this.start, this.lastTokEndLoc = this.endLoc, this.lastTokStartLoc = this.startLoc, this.nextToken();
        }, pp.getToken = function() {
          return this.next(), new Token(this);
        }, "undefined" != typeof Symbol && (pp[Symbol.iterator] = function() {
          var this$1$1 = this;
          return { next: function() {
            var token = this$1$1.getToken();
            return { done: token.type === types$1.eof, value: token };
          } };
        }), pp.nextToken = function() {
          var curContext = this.curContext();
          return curContext && curContext.preserveSpace || this.skipSpace(), this.start = this.pos, this.options.locations && (this.startLoc = this.curPosition()), this.pos >= this.input.length ? this.finishToken(types$1.eof) : curContext.override ? curContext.override(this) : void this.readToken(this.fullCharCodeAtPos());
        }, pp.readToken = function(code) {
          return isIdentifierStart(code, this.options.ecmaVersion >= 6) || 92 === code ? this.readWord() : this.getTokenFromCode(code);
        }, pp.fullCharCodeAtPos = function() {
          var code = this.input.charCodeAt(this.pos);
          if (code <= 55295 || code >= 56320) return code;
          var next = this.input.charCodeAt(this.pos + 1);
          return next <= 56319 || next >= 57344 ? code : (code << 10) + next - 56613888;
        }, pp.skipBlockComment = function() {
          var startLoc = this.options.onComment && this.curPosition(), start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
          if (-1 === end && this.raise(this.pos - 2, "Unterminated comment"), this.pos = end + 2, this.options.locations) for (var nextBreak = void 0, pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1; ) ++this.curLine, pos = this.lineStart = nextBreak;
          this.options.onComment && this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
        }, pp.skipLineComment = function(startSkip) {
          for (var start = this.pos, startLoc = this.options.onComment && this.curPosition(), ch = this.input.charCodeAt(this.pos += startSkip); this.pos < this.input.length && !isNewLine(ch); ) ch = this.input.charCodeAt(++this.pos);
          this.options.onComment && this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
        }, pp.skipSpace = function() {
          loop: for (; this.pos < this.input.length; ) {
            var ch = this.input.charCodeAt(this.pos);
            switch (ch) {
              case 32:
              case 160:
                ++this.pos;
                break;
              case 13:
                10 === this.input.charCodeAt(this.pos + 1) && ++this.pos;
              case 10:
              case 8232:
              case 8233:
                ++this.pos, this.options.locations && (++this.curLine, this.lineStart = this.pos);
                break;
              case 47:
                switch (this.input.charCodeAt(this.pos + 1)) {
                  case 42:
                    this.skipBlockComment();
                    break;
                  case 47:
                    this.skipLineComment(2);
                    break;
                  default:
                    break loop;
                }
                break;
              default:
                if (!(ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch)))) break loop;
                ++this.pos;
            }
          }
        }, pp.finishToken = function(type, val) {
          this.end = this.pos, this.options.locations && (this.endLoc = this.curPosition());
          var prevType = this.type;
          this.type = type, this.value = val, this.updateContext(prevType);
        }, pp.readToken_dot = function() {
          var next = this.input.charCodeAt(this.pos + 1);
          if (next >= 48 && next <= 57) return this.readNumber(true);
          var next2 = this.input.charCodeAt(this.pos + 2);
          return this.options.ecmaVersion >= 6 && 46 === next && 46 === next2 ? (this.pos += 3, this.finishToken(types$1.ellipsis)) : (++this.pos, this.finishToken(types$1.dot));
        }, pp.readToken_slash = function() {
          var next = this.input.charCodeAt(this.pos + 1);
          return this.exprAllowed ? (++this.pos, this.readRegexp()) : 61 === next ? this.finishOp(types$1.assign, 2) : this.finishOp(types$1.slash, 1);
        }, pp.readToken_mult_modulo_exp = function(code) {
          var next = this.input.charCodeAt(this.pos + 1), size = 1, tokentype = 42 === code ? types$1.star : types$1.modulo;
          return this.options.ecmaVersion >= 7 && 42 === code && 42 === next && (++size, tokentype = types$1.starstar, next = this.input.charCodeAt(this.pos + 2)), 61 === next ? this.finishOp(types$1.assign, size + 1) : this.finishOp(tokentype, size);
        }, pp.readToken_pipe_amp = function(code) {
          var next = this.input.charCodeAt(this.pos + 1);
          if (next === code) {
            if (this.options.ecmaVersion >= 12) {
              if (61 === this.input.charCodeAt(this.pos + 2)) return this.finishOp(types$1.assign, 3);
            }
            return this.finishOp(124 === code ? types$1.logicalOR : types$1.logicalAND, 2);
          }
          return 61 === next ? this.finishOp(types$1.assign, 2) : this.finishOp(124 === code ? types$1.bitwiseOR : types$1.bitwiseAND, 1);
        }, pp.readToken_caret = function() {
          return 61 === this.input.charCodeAt(this.pos + 1) ? this.finishOp(types$1.assign, 2) : this.finishOp(types$1.bitwiseXOR, 1);
        }, pp.readToken_plus_min = function(code) {
          var next = this.input.charCodeAt(this.pos + 1);
          return next === code ? 45 !== next || this.inModule || 62 !== this.input.charCodeAt(this.pos + 2) || 0 !== this.lastTokEnd && !lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)) ? this.finishOp(types$1.incDec, 2) : (this.skipLineComment(3), this.skipSpace(), this.nextToken()) : 61 === next ? this.finishOp(types$1.assign, 2) : this.finishOp(types$1.plusMin, 1);
        }, pp.readToken_lt_gt = function(code) {
          var next = this.input.charCodeAt(this.pos + 1), size = 1;
          return next === code ? (size = 62 === code && 62 === this.input.charCodeAt(this.pos + 2) ? 3 : 2, 61 === this.input.charCodeAt(this.pos + size) ? this.finishOp(types$1.assign, size + 1) : this.finishOp(types$1.bitShift, size)) : 33 !== next || 60 !== code || this.inModule || 45 !== this.input.charCodeAt(this.pos + 2) || 45 !== this.input.charCodeAt(this.pos + 3) ? (61 === next && (size = 2), this.finishOp(types$1.relational, size)) : (this.skipLineComment(4), this.skipSpace(), this.nextToken());
        }, pp.readToken_eq_excl = function(code) {
          var next = this.input.charCodeAt(this.pos + 1);
          return 61 === next ? this.finishOp(types$1.equality, 61 === this.input.charCodeAt(this.pos + 2) ? 3 : 2) : 61 === code && 62 === next && this.options.ecmaVersion >= 6 ? (this.pos += 2, this.finishToken(types$1.arrow)) : this.finishOp(61 === code ? types$1.eq : types$1.prefix, 1);
        }, pp.readToken_question = function() {
          var ecmaVersion = this.options.ecmaVersion;
          if (ecmaVersion >= 11) {
            var next = this.input.charCodeAt(this.pos + 1);
            if (46 === next) {
              var next2 = this.input.charCodeAt(this.pos + 2);
              if (next2 < 48 || next2 > 57) return this.finishOp(types$1.questionDot, 2);
            }
            if (63 === next) {
              if (ecmaVersion >= 12) {
                if (61 === this.input.charCodeAt(this.pos + 2)) return this.finishOp(types$1.assign, 3);
              }
              return this.finishOp(types$1.coalesce, 2);
            }
          }
          return this.finishOp(types$1.question, 1);
        }, pp.readToken_numberSign = function() {
          var code = 35;
          if (this.options.ecmaVersion >= 13 && (++this.pos, isIdentifierStart(code = this.fullCharCodeAtPos(), true) || 92 === code)) return this.finishToken(types$1.privateId, this.readWord1());
          this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
        }, pp.getTokenFromCode = function(code) {
          switch (code) {
            case 46:
              return this.readToken_dot();
            case 40:
              return ++this.pos, this.finishToken(types$1.parenL);
            case 41:
              return ++this.pos, this.finishToken(types$1.parenR);
            case 59:
              return ++this.pos, this.finishToken(types$1.semi);
            case 44:
              return ++this.pos, this.finishToken(types$1.comma);
            case 91:
              return ++this.pos, this.finishToken(types$1.bracketL);
            case 93:
              return ++this.pos, this.finishToken(types$1.bracketR);
            case 123:
              return ++this.pos, this.finishToken(types$1.braceL);
            case 125:
              return ++this.pos, this.finishToken(types$1.braceR);
            case 58:
              return ++this.pos, this.finishToken(types$1.colon);
            case 96:
              if (this.options.ecmaVersion < 6) break;
              return ++this.pos, this.finishToken(types$1.backQuote);
            case 48:
              var next = this.input.charCodeAt(this.pos + 1);
              if (120 === next || 88 === next) return this.readRadixNumber(16);
              if (this.options.ecmaVersion >= 6) {
                if (111 === next || 79 === next) return this.readRadixNumber(8);
                if (98 === next || 66 === next) return this.readRadixNumber(2);
              }
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
              return this.readNumber(false);
            case 34:
            case 39:
              return this.readString(code);
            case 47:
              return this.readToken_slash();
            case 37:
            case 42:
              return this.readToken_mult_modulo_exp(code);
            case 124:
            case 38:
              return this.readToken_pipe_amp(code);
            case 94:
              return this.readToken_caret();
            case 43:
            case 45:
              return this.readToken_plus_min(code);
            case 60:
            case 62:
              return this.readToken_lt_gt(code);
            case 61:
            case 33:
              return this.readToken_eq_excl(code);
            case 63:
              return this.readToken_question();
            case 126:
              return this.finishOp(types$1.prefix, 1);
            case 35:
              return this.readToken_numberSign();
          }
          this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
        }, pp.finishOp = function(type, size) {
          var str = this.input.slice(this.pos, this.pos + size);
          return this.pos += size, this.finishToken(type, str);
        }, pp.readRegexp = function() {
          for (var escaped, inClass, start = this.pos; ; ) {
            this.pos >= this.input.length && this.raise(start, "Unterminated regular expression");
            var ch = this.input.charAt(this.pos);
            if (lineBreak.test(ch) && this.raise(start, "Unterminated regular expression"), escaped) escaped = false;
            else {
              if ("[" === ch) inClass = true;
              else if ("]" === ch && inClass) inClass = false;
              else if ("/" === ch && !inClass) break;
              escaped = "\\" === ch;
            }
            ++this.pos;
          }
          var pattern = this.input.slice(start, this.pos);
          ++this.pos;
          var flagsStart = this.pos, flags = this.readWord1();
          this.containsEsc && this.unexpected(flagsStart);
          var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
          state.reset(start, pattern, flags), this.validateRegExpFlags(state), this.validateRegExpPattern(state);
          var value2 = null;
          try {
            value2 = new RegExp(pattern, flags);
          } catch (e2) {
          }
          return this.finishToken(types$1.regexp, { pattern, flags, value: value2 });
        }, pp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {
          for (var allowSeparators = this.options.ecmaVersion >= 12 && void 0 === len, isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && 48 === this.input.charCodeAt(this.pos), start = this.pos, total = 0, lastCode = 0, i3 = 0, e2 = null == len ? 1 / 0 : len; i3 < e2; ++i3, ++this.pos) {
            var code = this.input.charCodeAt(this.pos), val = void 0;
            if (allowSeparators && 95 === code) isLegacyOctalNumericLiteral && this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals"), 95 === lastCode && this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore"), 0 === i3 && this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits"), lastCode = code;
            else {
              if ((val = code >= 97 ? code - 97 + 10 : code >= 65 ? code - 65 + 10 : code >= 48 && code <= 57 ? code - 48 : 1 / 0) >= radix) break;
              lastCode = code, total = total * radix + val;
            }
          }
          return allowSeparators && 95 === lastCode && this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits"), this.pos === start || null != len && this.pos - start !== len ? null : total;
        }, pp.readRadixNumber = function(radix) {
          var start = this.pos;
          this.pos += 2;
          var val = this.readInt(radix);
          return null == val && this.raise(this.start + 2, "Expected number in radix " + radix), this.options.ecmaVersion >= 11 && 110 === this.input.charCodeAt(this.pos) ? (val = stringToBigInt(this.input.slice(start, this.pos)), ++this.pos) : isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(types$1.num, val);
        }, pp.readNumber = function(startsWithDot) {
          var start = this.pos;
          startsWithDot || null !== this.readInt(10, void 0, true) || this.raise(start, "Invalid number");
          var octal = this.pos - start >= 2 && 48 === this.input.charCodeAt(start);
          octal && this.strict && this.raise(start, "Invalid number");
          var next = this.input.charCodeAt(this.pos);
          if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && 110 === next) {
            var val$1 = stringToBigInt(this.input.slice(start, this.pos));
            return ++this.pos, isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(types$1.num, val$1);
          }
          octal && /[89]/.test(this.input.slice(start, this.pos)) && (octal = false), 46 !== next || octal || (++this.pos, this.readInt(10), next = this.input.charCodeAt(this.pos)), 69 !== next && 101 !== next || octal || (43 !== (next = this.input.charCodeAt(++this.pos)) && 45 !== next || ++this.pos, null === this.readInt(10) && this.raise(start, "Invalid number")), isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number");
          var str, val = (str = this.input.slice(start, this.pos), octal ? parseInt(str, 8) : parseFloat(str.replace(/_/g, "")));
          return this.finishToken(types$1.num, val);
        }, pp.readCodePoint = function() {
          var code;
          if (123 === this.input.charCodeAt(this.pos)) {
            this.options.ecmaVersion < 6 && this.unexpected();
            var codePos = ++this.pos;
            code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos), ++this.pos, code > 1114111 && this.invalidStringToken(codePos, "Code point out of bounds");
          } else code = this.readHexChar(4);
          return code;
        }, pp.readString = function(quote) {
          for (var out = "", chunkStart = ++this.pos; ; ) {
            this.pos >= this.input.length && this.raise(this.start, "Unterminated string constant");
            var ch = this.input.charCodeAt(this.pos);
            if (ch === quote) break;
            92 === ch ? (out += this.input.slice(chunkStart, this.pos), out += this.readEscapedChar(false), chunkStart = this.pos) : 8232 === ch || 8233 === ch ? (this.options.ecmaVersion < 10 && this.raise(this.start, "Unterminated string constant"), ++this.pos, this.options.locations && (this.curLine++, this.lineStart = this.pos)) : (isNewLine(ch) && this.raise(this.start, "Unterminated string constant"), ++this.pos);
          }
          return out += this.input.slice(chunkStart, this.pos++), this.finishToken(types$1.string, out);
        };
        var INVALID_TEMPLATE_ESCAPE_ERROR = {};
        pp.tryReadTemplateToken = function() {
          this.inTemplateElement = true;
          try {
            this.readTmplToken();
          } catch (err) {
            if (err !== INVALID_TEMPLATE_ESCAPE_ERROR) throw err;
            this.readInvalidTemplateToken();
          }
          this.inTemplateElement = false;
        }, pp.invalidStringToken = function(position, message) {
          if (this.inTemplateElement && this.options.ecmaVersion >= 9) throw INVALID_TEMPLATE_ESCAPE_ERROR;
          this.raise(position, message);
        }, pp.readTmplToken = function() {
          for (var out = "", chunkStart = this.pos; ; ) {
            this.pos >= this.input.length && this.raise(this.start, "Unterminated template");
            var ch = this.input.charCodeAt(this.pos);
            if (96 === ch || 36 === ch && 123 === this.input.charCodeAt(this.pos + 1)) return this.pos !== this.start || this.type !== types$1.template && this.type !== types$1.invalidTemplate ? (out += this.input.slice(chunkStart, this.pos), this.finishToken(types$1.template, out)) : 36 === ch ? (this.pos += 2, this.finishToken(types$1.dollarBraceL)) : (++this.pos, this.finishToken(types$1.backQuote));
            if (92 === ch) out += this.input.slice(chunkStart, this.pos), out += this.readEscapedChar(true), chunkStart = this.pos;
            else if (isNewLine(ch)) {
              switch (out += this.input.slice(chunkStart, this.pos), ++this.pos, ch) {
                case 13:
                  10 === this.input.charCodeAt(this.pos) && ++this.pos;
                case 10:
                  out += "\n";
                  break;
                default:
                  out += String.fromCharCode(ch);
              }
              this.options.locations && (++this.curLine, this.lineStart = this.pos), chunkStart = this.pos;
            } else ++this.pos;
          }
        }, pp.readInvalidTemplateToken = function() {
          for (; this.pos < this.input.length; this.pos++) switch (this.input[this.pos]) {
            case "\\":
              ++this.pos;
              break;
            case "$":
              if ("{" !== this.input[this.pos + 1]) break;
            case "`":
              return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos));
            case "\r":
              "\n" === this.input[this.pos + 1] && ++this.pos;
            case "\n":
            case "\u2028":
            case "\u2029":
              ++this.curLine, this.lineStart = this.pos + 1;
          }
          this.raise(this.start, "Unterminated template");
        }, pp.readEscapedChar = function(inTemplate) {
          var ch = this.input.charCodeAt(++this.pos);
          switch (++this.pos, ch) {
            case 110:
              return "\n";
            case 114:
              return "\r";
            case 120:
              return String.fromCharCode(this.readHexChar(2));
            case 117:
              return codePointToString(this.readCodePoint());
            case 116:
              return "	";
            case 98:
              return "\b";
            case 118:
              return "\v";
            case 102:
              return "\f";
            case 13:
              10 === this.input.charCodeAt(this.pos) && ++this.pos;
            case 10:
              return this.options.locations && (this.lineStart = this.pos, ++this.curLine), "";
            case 56:
            case 57:
              if (this.strict && this.invalidStringToken(this.pos - 1, "Invalid escape sequence"), inTemplate) {
                var codePos = this.pos - 1;
                this.invalidStringToken(codePos, "Invalid escape sequence in template string");
              }
            default:
              if (ch >= 48 && ch <= 55) {
                var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0], octal = parseInt(octalStr, 8);
                return octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), this.pos += octalStr.length - 1, ch = this.input.charCodeAt(this.pos), "0" === octalStr && 56 !== ch && 57 !== ch || !this.strict && !inTemplate || this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? "Octal literal in template string" : "Octal literal in strict mode"), String.fromCharCode(octal);
              }
              return isNewLine(ch) ? (this.options.locations && (this.lineStart = this.pos, ++this.curLine), "") : String.fromCharCode(ch);
          }
        }, pp.readHexChar = function(len) {
          var codePos = this.pos, n2 = this.readInt(16, len);
          return null === n2 && this.invalidStringToken(codePos, "Bad character escape sequence"), n2;
        }, pp.readWord1 = function() {
          this.containsEsc = false;
          for (var word = "", first = true, chunkStart = this.pos, astral = this.options.ecmaVersion >= 6; this.pos < this.input.length; ) {
            var ch = this.fullCharCodeAtPos();
            if (isIdentifierChar(ch, astral)) this.pos += ch <= 65535 ? 1 : 2;
            else {
              if (92 !== ch) break;
              this.containsEsc = true, word += this.input.slice(chunkStart, this.pos);
              var escStart = this.pos;
              117 !== this.input.charCodeAt(++this.pos) && this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX"), ++this.pos;
              var esc = this.readCodePoint();
              (first ? isIdentifierStart : isIdentifierChar)(esc, astral) || this.invalidStringToken(escStart, "Invalid Unicode escape"), word += codePointToString(esc), chunkStart = this.pos;
            }
            first = false;
          }
          return word + this.input.slice(chunkStart, this.pos);
        }, pp.readWord = function() {
          var word = this.readWord1(), type = types$1.name;
          return this.keywords.test(word) && (type = keywords[word]), this.finishToken(type, word);
        };
        Parser.acorn = { Parser, version: "8.14.0", defaultOptions, Position, SourceLocation, getLineInfo, Node: Node3, TokenType, tokTypes: types$1, keywordTypes: keywords, TokContext, tokContexts: types, isIdentifierChar, isIdentifierStart, Token, isNewLine, lineBreak, lineBreakG, nonASCIIwhitespace };
        const external_node_module_namespaceObject = __require("module"), external_node_fs_namespaceObject = __require("fs");
        Math.floor, String.fromCharCode;
        const TRAILING_SLASH_RE = /\/$|\/\?|\/#/, JOIN_LEADING_SLASH_RE = /^\.?\//;
        function dist_hasTrailingSlash(input = "", respectQueryAndFragment) {
          return respectQueryAndFragment ? TRAILING_SLASH_RE.test(input) : input.endsWith("/");
        }
        function withTrailingSlash(input = "", respectQueryAndFragment) {
          if (!respectQueryAndFragment) return input.endsWith("/") ? input : input + "/";
          if (dist_hasTrailingSlash(input, true)) return input || "/";
          let path9 = input, fragment = "";
          const fragmentIndex = input.indexOf("#");
          if (fragmentIndex >= 0 && (path9 = input.slice(0, fragmentIndex), fragment = input.slice(fragmentIndex), !path9)) return fragment;
          const [s0, ...s] = path9.split("?");
          return s0 + "/" + (s.length > 0 ? `?${s.join("?")}` : "") + fragment;
        }
        function isNonEmptyURL(url) {
          return url && "/" !== url;
        }
        function dist_joinURL(base, ...input) {
          let url = base || "";
          for (const segment of input.filter((url2) => isNonEmptyURL(url2))) if (url) {
            const _segment = segment.replace(JOIN_LEADING_SLASH_RE, "");
            url = withTrailingSlash(url) + _segment;
          } else url = segment;
          return url;
        }
        Symbol.for("ufo:protocolRelative");
        Object.defineProperty;
        const external_node_url_namespaceObject = __require("url"), external_node_assert_namespaceObject = __require("assert"), external_node_process_namespaceObject = __require("process"), external_node_path_namespaceObject = __require("path"), external_node_v8_namespaceObject = __require("v8"), external_node_util_namespaceObject = __require("util"), BUILTIN_MODULES = new Set(external_node_module_namespaceObject.builtinModules);
        function normalizeSlash(path9) {
          return path9.replace(/\\/g, "/");
        }
        const own$1 = {}.hasOwnProperty, classRegExp = /^([A-Z][a-z\d]*)+$/, kTypes = /* @__PURE__ */ new Set(["string", "function", "number", "object", "Function", "Object", "boolean", "bigint", "symbol"]), codes = {};
        function formatList(array, type = "and") {
          return array.length < 3 ? array.join(` ${type} `) : `${array.slice(0, -1).join(", ")}, ${type} ${array[array.length - 1]}`;
        }
        const messages = /* @__PURE__ */ new Map();
        let userStackTraceLimit;
        function createError(sym, value2, constructor) {
          return messages.set(sym, value2), /* @__PURE__ */ function(Base, key) {
            return NodeError;
            function NodeError(...parameters) {
              const limit = Error.stackTraceLimit;
              isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = 0);
              const error = new Base();
              isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = limit);
              const message = function(key2, parameters2, self) {
                const message2 = messages.get(key2);
                if (external_node_assert_namespaceObject(void 0 !== message2, "expected `message` to be found"), "function" == typeof message2) return external_node_assert_namespaceObject(message2.length <= parameters2.length, `Code: ${key2}; The provided arguments length (${parameters2.length}) does not match the required ones (${message2.length}).`), Reflect.apply(message2, self, parameters2);
                const regex = /%[dfijoOs]/g;
                let expectedLength = 0;
                for (; null !== regex.exec(message2); ) expectedLength++;
                return external_node_assert_namespaceObject(expectedLength === parameters2.length, `Code: ${key2}; The provided arguments length (${parameters2.length}) does not match the required ones (${expectedLength}).`), 0 === parameters2.length ? message2 : (parameters2.unshift(message2), Reflect.apply(external_node_util_namespaceObject.format, null, parameters2));
              }(key, parameters, error);
              return Object.defineProperties(error, { message: { value: message, enumerable: false, writable: true, configurable: true }, toString: { value() {
                return `${this.name} [${key}]: ${this.message}`;
              }, enumerable: false, writable: true, configurable: true } }), captureLargerStackTrace(error), error.code = key, error;
            }
          }(constructor, sym);
        }
        function isErrorStackTraceLimitWritable() {
          try {
            if (external_node_v8_namespaceObject.startupSnapshot.isBuildingSnapshot()) return false;
          } catch {
          }
          const desc = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit");
          return void 0 === desc ? Object.isExtensible(Error) : own$1.call(desc, "writable") && void 0 !== desc.writable ? desc.writable : void 0 !== desc.set;
        }
        codes.ERR_INVALID_ARG_TYPE = createError("ERR_INVALID_ARG_TYPE", (name, expected, actual) => {
          external_node_assert_namespaceObject("string" == typeof name, "'name' must be a string"), Array.isArray(expected) || (expected = [expected]);
          let message = "The ";
          if (name.endsWith(" argument")) message += `${name} `;
          else {
            const type = name.includes(".") ? "property" : "argument";
            message += `"${name}" ${type} `;
          }
          message += "must be ";
          const types2 = [], instances = [], other = [];
          for (const value2 of expected) external_node_assert_namespaceObject("string" == typeof value2, "All expected entries have to be of type string"), kTypes.has(value2) ? types2.push(value2.toLowerCase()) : null === classRegExp.exec(value2) ? (external_node_assert_namespaceObject("object" !== value2, 'The value "object" should be written as "Object"'), other.push(value2)) : instances.push(value2);
          if (instances.length > 0) {
            const pos = types2.indexOf("object");
            -1 !== pos && (types2.slice(pos, 1), instances.push("Object"));
          }
          return types2.length > 0 && (message += `${types2.length > 1 ? "one of type" : "of type"} ${formatList(types2, "or")}`, (instances.length > 0 || other.length > 0) && (message += " or ")), instances.length > 0 && (message += `an instance of ${formatList(instances, "or")}`, other.length > 0 && (message += " or ")), other.length > 0 && (other.length > 1 ? message += `one of ${formatList(other, "or")}` : (other[0].toLowerCase() !== other[0] && (message += "an "), message += `${other[0]}`)), message += `. Received ${function(value2) {
            if (null == value2) return String(value2);
            if ("function" == typeof value2 && value2.name) return `function ${value2.name}`;
            if ("object" == typeof value2) return value2.constructor && value2.constructor.name ? `an instance of ${value2.constructor.name}` : `${(0, external_node_util_namespaceObject.inspect)(value2, { depth: -1 })}`;
            let inspected = (0, external_node_util_namespaceObject.inspect)(value2, { colors: false });
            inspected.length > 28 && (inspected = `${inspected.slice(0, 25)}...`);
            return `type ${typeof value2} (${inspected})`;
          }(actual)}`, message;
        }, TypeError), codes.ERR_INVALID_MODULE_SPECIFIER = createError("ERR_INVALID_MODULE_SPECIFIER", (request, reason, base = void 0) => `Invalid module "${request}" ${reason}${base ? ` imported from ${base}` : ""}`, TypeError), codes.ERR_INVALID_PACKAGE_CONFIG = createError("ERR_INVALID_PACKAGE_CONFIG", (path9, base, message) => `Invalid package config ${path9}${base ? ` while importing ${base}` : ""}${message ? `. ${message}` : ""}`, Error), codes.ERR_INVALID_PACKAGE_TARGET = createError("ERR_INVALID_PACKAGE_TARGET", (packagePath, key, target, isImport = false, base = void 0) => {
          const relatedError = "string" == typeof target && !isImport && target.length > 0 && !target.startsWith("./");
          return "." === key ? (external_node_assert_namespaceObject(false === isImport), `Invalid "exports" main target ${JSON.stringify(target)} defined in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? '; targets must start with "./"' : ""}`) : `Invalid "${isImport ? "imports" : "exports"}" target ${JSON.stringify(target)} defined for '${key}' in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? '; targets must start with "./"' : ""}`;
        }, Error), codes.ERR_MODULE_NOT_FOUND = createError("ERR_MODULE_NOT_FOUND", (path9, base, exactUrl = false) => `Cannot find ${exactUrl ? "module" : "package"} '${path9}' imported from ${base}`, Error), codes.ERR_NETWORK_IMPORT_DISALLOWED = createError("ERR_NETWORK_IMPORT_DISALLOWED", "import of '%s' by %s is not supported: %s", Error), codes.ERR_PACKAGE_IMPORT_NOT_DEFINED = createError("ERR_PACKAGE_IMPORT_NOT_DEFINED", (specifier, packagePath, base) => `Package import specifier "${specifier}" is not defined${packagePath ? ` in package ${packagePath}package.json` : ""} imported from ${base}`, TypeError), codes.ERR_PACKAGE_PATH_NOT_EXPORTED = createError("ERR_PACKAGE_PATH_NOT_EXPORTED", (packagePath, subpath, base = void 0) => "." === subpath ? `No "exports" main defined in ${packagePath}package.json${base ? ` imported from ${base}` : ""}` : `Package subpath '${subpath}' is not defined by "exports" in ${packagePath}package.json${base ? ` imported from ${base}` : ""}`, Error), codes.ERR_UNSUPPORTED_DIR_IMPORT = createError("ERR_UNSUPPORTED_DIR_IMPORT", "Directory import '%s' is not supported resolving ES modules imported from %s", Error), codes.ERR_UNSUPPORTED_RESOLVE_REQUEST = createError("ERR_UNSUPPORTED_RESOLVE_REQUEST", 'Failed to resolve module specifier "%s" from "%s": Invalid relative URL or base scheme is not hierarchical.', TypeError), codes.ERR_UNKNOWN_FILE_EXTENSION = createError("ERR_UNKNOWN_FILE_EXTENSION", (extension, path9) => `Unknown file extension "${extension}" for ${path9}`, TypeError), codes.ERR_INVALID_ARG_VALUE = createError("ERR_INVALID_ARG_VALUE", (name, value2, reason = "is invalid") => {
          let inspected = (0, external_node_util_namespaceObject.inspect)(value2);
          inspected.length > 128 && (inspected = `${inspected.slice(0, 128)}...`);
          return `The ${name.includes(".") ? "property" : "argument"} '${name}' ${reason}. Received ${inspected}`;
        }, TypeError);
        const captureLargerStackTrace = function(wrappedFunction) {
          const hidden2 = "__node_internal_" + wrappedFunction.name;
          return Object.defineProperty(wrappedFunction, "name", { value: hidden2 }), wrappedFunction;
        }(function(error) {
          const stackTraceLimitIsWritable = isErrorStackTraceLimitWritable();
          return stackTraceLimitIsWritable && (userStackTraceLimit = Error.stackTraceLimit, Error.stackTraceLimit = Number.POSITIVE_INFINITY), Error.captureStackTrace(error), stackTraceLimitIsWritable && (Error.stackTraceLimit = userStackTraceLimit), error;
        });
        const hasOwnProperty$1 = {}.hasOwnProperty, { ERR_INVALID_PACKAGE_CONFIG: ERR_INVALID_PACKAGE_CONFIG$1 } = codes, cache = /* @__PURE__ */ new Map();
        function read(jsonPath, { base, specifier }) {
          const existing = cache.get(jsonPath);
          if (existing) return existing;
          let string;
          try {
            string = external_node_fs_namespaceObject.readFileSync(external_node_path_namespaceObject.toNamespacedPath(jsonPath), "utf8");
          } catch (error) {
            const exception = error;
            if ("ENOENT" !== exception.code) throw exception;
          }
          const result = { exists: false, pjsonPath: jsonPath, main: void 0, name: void 0, type: "none", exports: void 0, imports: void 0 };
          if (void 0 !== string) {
            let parsed;
            try {
              parsed = JSON.parse(string);
            } catch (error_) {
              const cause = error_, error = new ERR_INVALID_PACKAGE_CONFIG$1(jsonPath, (base ? `"${specifier}" from ` : "") + (0, external_node_url_namespaceObject.fileURLToPath)(base || specifier), cause.message);
              throw error.cause = cause, error;
            }
            result.exists = true, hasOwnProperty$1.call(parsed, "name") && "string" == typeof parsed.name && (result.name = parsed.name), hasOwnProperty$1.call(parsed, "main") && "string" == typeof parsed.main && (result.main = parsed.main), hasOwnProperty$1.call(parsed, "exports") && (result.exports = parsed.exports), hasOwnProperty$1.call(parsed, "imports") && (result.imports = parsed.imports), !hasOwnProperty$1.call(parsed, "type") || "commonjs" !== parsed.type && "module" !== parsed.type || (result.type = parsed.type);
          }
          return cache.set(jsonPath, result), result;
        }
        function getPackageScopeConfig(resolved) {
          let packageJSONUrl = new URL("package.json", resolved);
          for (; ; ) {
            if (packageJSONUrl.pathname.endsWith("node_modules/package.json")) break;
            const packageConfig = read((0, external_node_url_namespaceObject.fileURLToPath)(packageJSONUrl), { specifier: resolved });
            if (packageConfig.exists) return packageConfig;
            const lastPackageJSONUrl = packageJSONUrl;
            if (packageJSONUrl = new URL("../package.json", packageJSONUrl), packageJSONUrl.pathname === lastPackageJSONUrl.pathname) break;
          }
          return { pjsonPath: (0, external_node_url_namespaceObject.fileURLToPath)(packageJSONUrl), exists: false, type: "none" };
        }
        function getPackageType(url) {
          return getPackageScopeConfig(url).type;
        }
        const { ERR_UNKNOWN_FILE_EXTENSION } = codes, dist_hasOwnProperty = {}.hasOwnProperty, extensionFormatMap = { __proto__: null, ".cjs": "commonjs", ".js": "module", ".json": "json", ".mjs": "module" };
        const protocolHandlers = { __proto__: null, "data:": function(parsed) {
          const { 1: mime } = /^([^/]+\/[^;,]+)[^,]*?(;base64)?,/.exec(parsed.pathname) || [null, null, null];
          return function(mime2) {
            return mime2 && /\s*(text|application)\/javascript\s*(;\s*charset=utf-?8\s*)?/i.test(mime2) ? "module" : "application/json" === mime2 ? "json" : null;
          }(mime);
        }, "file:": function(url, _context, ignoreErrors) {
          const value2 = function(url2) {
            const pathname = url2.pathname;
            let index = pathname.length;
            for (; index--; ) {
              const code = pathname.codePointAt(index);
              if (47 === code) return "";
              if (46 === code) return 47 === pathname.codePointAt(index - 1) ? "" : pathname.slice(index);
            }
            return "";
          }(url);
          if (".js" === value2) {
            const packageType = getPackageType(url);
            return "none" !== packageType ? packageType : "commonjs";
          }
          if ("" === value2) {
            const packageType = getPackageType(url);
            return "none" === packageType || "commonjs" === packageType ? "commonjs" : "module";
          }
          const format2 = extensionFormatMap[value2];
          if (format2) return format2;
          if (ignoreErrors) return;
          const filepath = (0, external_node_url_namespaceObject.fileURLToPath)(url);
          throw new ERR_UNKNOWN_FILE_EXTENSION(value2, filepath);
        }, "http:": getHttpProtocolModuleFormat, "https:": getHttpProtocolModuleFormat, "node:": () => "builtin" };
        function getHttpProtocolModuleFormat() {
        }
        const RegExpPrototypeSymbolReplace = RegExp.prototype[Symbol.replace], { ERR_NETWORK_IMPORT_DISALLOWED, ERR_INVALID_MODULE_SPECIFIER, ERR_INVALID_PACKAGE_CONFIG, ERR_INVALID_PACKAGE_TARGET, ERR_MODULE_NOT_FOUND, ERR_PACKAGE_IMPORT_NOT_DEFINED, ERR_PACKAGE_PATH_NOT_EXPORTED, ERR_UNSUPPORTED_DIR_IMPORT, ERR_UNSUPPORTED_RESOLVE_REQUEST } = codes, own = {}.hasOwnProperty, invalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))?(\\|\/|$)/i, deprecatedInvalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\|\/|$)/i, invalidPackageNameRegEx = /^\.|%|\\/, patternRegEx = /\*/g, encodedSeparatorRegEx = /%2f|%5c/i, emittedPackageWarnings = /* @__PURE__ */ new Set(), doubleSlashRegEx = /[/\\]{2}/;
        function emitInvalidSegmentDeprecation(target, request, match, packageJsonUrl, internal, base, isTarget) {
          if (external_node_process_namespaceObject.noDeprecation) return;
          const pjsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl), double = null !== doubleSlashRegEx.exec(isTarget ? target : request);
          external_node_process_namespaceObject.emitWarning(`Use of deprecated ${double ? "double slash" : "leading or trailing slash matching"} resolving "${target}" for module request "${request}" ${request === match ? "" : `matched to "${match}" `}in the "${internal ? "imports" : "exports"}" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, external_node_url_namespaceObject.fileURLToPath)(base)}` : ""}.`, "DeprecationWarning", "DEP0166");
        }
        function emitLegacyIndexDeprecation(url, packageJsonUrl, base, main) {
          if (external_node_process_namespaceObject.noDeprecation) return;
          const format2 = function(url2, context) {
            const protocol = url2.protocol;
            return dist_hasOwnProperty.call(protocolHandlers, protocol) && protocolHandlers[protocol](url2, context, true) || null;
          }(url, { parentURL: base.href });
          if ("module" !== format2) return;
          const urlPath = (0, external_node_url_namespaceObject.fileURLToPath)(url.href), packagePath = (0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl)), basePath = (0, external_node_url_namespaceObject.fileURLToPath)(base);
          main ? external_node_path_namespaceObject.resolve(packagePath, main) !== urlPath && external_node_process_namespaceObject.emitWarning(`Package ${packagePath} has a "main" field set to "${main}", excluding the full filename and extension to the resolved file at "${urlPath.slice(packagePath.length)}", imported from ${basePath}.
 Automatic extension resolution of the "main" field is deprecated for ES modules.`, "DeprecationWarning", "DEP0151") : external_node_process_namespaceObject.emitWarning(`No "main" or "exports" field defined in the package.json for ${packagePath} resolving the main entry point "${urlPath.slice(packagePath.length)}", imported from ${basePath}.
Default "index" lookups for the main are deprecated for ES modules.`, "DeprecationWarning", "DEP0151");
        }
        function tryStatSync(path9) {
          try {
            return (0, external_node_fs_namespaceObject.statSync)(path9);
          } catch {
          }
        }
        function fileExists(url) {
          const stats = (0, external_node_fs_namespaceObject.statSync)(url, { throwIfNoEntry: false }), isFile = stats ? stats.isFile() : void 0;
          return null != isFile && isFile;
        }
        function legacyMainResolve(packageJsonUrl, packageConfig, base) {
          let guess;
          if (void 0 !== packageConfig.main) {
            if (guess = new external_node_url_namespaceObject.URL(packageConfig.main, packageJsonUrl), fileExists(guess)) return guess;
            const tries2 = [`./${packageConfig.main}.js`, `./${packageConfig.main}.json`, `./${packageConfig.main}.node`, `./${packageConfig.main}/index.js`, `./${packageConfig.main}/index.json`, `./${packageConfig.main}/index.node`];
            let i4 = -1;
            for (; ++i4 < tries2.length && (guess = new external_node_url_namespaceObject.URL(tries2[i4], packageJsonUrl), !fileExists(guess)); ) guess = void 0;
            if (guess) return emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main), guess;
          }
          const tries = ["./index.js", "./index.json", "./index.node"];
          let i3 = -1;
          for (; ++i3 < tries.length && (guess = new external_node_url_namespaceObject.URL(tries[i3], packageJsonUrl), !fileExists(guess)); ) guess = void 0;
          if (guess) return emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main), guess;
          throw new ERR_MODULE_NOT_FOUND((0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl)), (0, external_node_url_namespaceObject.fileURLToPath)(base));
        }
        function exportsNotFound(subpath, packageJsonUrl, base) {
          return new ERR_PACKAGE_PATH_NOT_EXPORTED((0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl)), subpath, base && (0, external_node_url_namespaceObject.fileURLToPath)(base));
        }
        function invalidPackageTarget(subpath, target, packageJsonUrl, internal, base) {
          return target = "object" == typeof target && null !== target ? JSON.stringify(target, null, "") : `${target}`, new ERR_INVALID_PACKAGE_TARGET((0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl)), subpath, target, internal, base && (0, external_node_url_namespaceObject.fileURLToPath)(base));
        }
        function resolvePackageTargetString(target, subpath, match, packageJsonUrl, base, pattern, internal, isPathMap, conditions) {
          if ("" !== subpath && !pattern && "/" !== target[target.length - 1]) throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
          if (!target.startsWith("./")) {
            if (internal && !target.startsWith("../") && !target.startsWith("/")) {
              let isURL = false;
              try {
                new external_node_url_namespaceObject.URL(target), isURL = true;
              } catch {
              }
              if (!isURL) {
                return packageResolve(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target + subpath, packageJsonUrl, conditions);
              }
            }
            throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
          }
          if (null !== invalidSegmentRegEx.exec(target.slice(2))) {
            if (null !== deprecatedInvalidSegmentRegEx.exec(target.slice(2))) throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
            if (!isPathMap) {
              const request = pattern ? match.replace("*", () => subpath) : match + subpath;
              emitInvalidSegmentDeprecation(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target, request, match, packageJsonUrl, internal, base, true);
            }
          }
          const resolved = new external_node_url_namespaceObject.URL(target, packageJsonUrl), resolvedPath = resolved.pathname, packagePath = new external_node_url_namespaceObject.URL(".", packageJsonUrl).pathname;
          if (!resolvedPath.startsWith(packagePath)) throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
          if ("" === subpath) return resolved;
          if (null !== invalidSegmentRegEx.exec(subpath)) {
            const request = pattern ? match.replace("*", () => subpath) : match + subpath;
            if (null === deprecatedInvalidSegmentRegEx.exec(subpath)) {
              if (!isPathMap) {
                emitInvalidSegmentDeprecation(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target, request, match, packageJsonUrl, internal, base, false);
              }
            } else !function(request2, match2, packageJsonUrl2, internal2, base2) {
              const reason = `request is not a valid match in pattern "${match2}" for the "${internal2 ? "imports" : "exports"}" resolution of ${(0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl2)}`;
              throw new ERR_INVALID_MODULE_SPECIFIER(request2, reason, base2 && (0, external_node_url_namespaceObject.fileURLToPath)(base2));
            }(request, match, packageJsonUrl, internal, base);
          }
          return pattern ? new external_node_url_namespaceObject.URL(RegExpPrototypeSymbolReplace.call(patternRegEx, resolved.href, () => subpath)) : new external_node_url_namespaceObject.URL(subpath, resolved);
        }
        function isArrayIndex(key) {
          const keyNumber = Number(key);
          return `${keyNumber}` === key && (keyNumber >= 0 && keyNumber < 4294967295);
        }
        function resolvePackageTarget(packageJsonUrl, target, subpath, packageSubpath, base, pattern, internal, isPathMap, conditions) {
          if ("string" == typeof target) return resolvePackageTargetString(target, subpath, packageSubpath, packageJsonUrl, base, pattern, internal, isPathMap, conditions);
          if (Array.isArray(target)) {
            const targetList = target;
            if (0 === targetList.length) return null;
            let lastException, i3 = -1;
            for (; ++i3 < targetList.length; ) {
              const targetItem = targetList[i3];
              let resolveResult;
              try {
                resolveResult = resolvePackageTarget(packageJsonUrl, targetItem, subpath, packageSubpath, base, pattern, internal, isPathMap, conditions);
              } catch (error) {
                if (lastException = error, "ERR_INVALID_PACKAGE_TARGET" === error.code) continue;
                throw error;
              }
              if (void 0 !== resolveResult) {
                if (null !== resolveResult) return resolveResult;
                lastException = null;
              }
            }
            if (null == lastException) return null;
            throw lastException;
          }
          if ("object" == typeof target && null !== target) {
            const keys = Object.getOwnPropertyNames(target);
            let i3 = -1;
            for (; ++i3 < keys.length; ) {
              if (isArrayIndex(keys[i3])) throw new ERR_INVALID_PACKAGE_CONFIG((0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl), base, '"exports" cannot contain numeric property keys.');
            }
            for (i3 = -1; ++i3 < keys.length; ) {
              const key = keys[i3];
              if ("default" === key || conditions && conditions.has(key)) {
                const resolveResult = resolvePackageTarget(packageJsonUrl, target[key], subpath, packageSubpath, base, pattern, internal, isPathMap, conditions);
                if (void 0 === resolveResult) continue;
                return resolveResult;
              }
            }
            return null;
          }
          if (null === target) return null;
          throw invalidPackageTarget(packageSubpath, target, packageJsonUrl, internal, base);
        }
        function emitTrailingSlashPatternDeprecation(match, pjsonUrl, base) {
          if (external_node_process_namespaceObject.noDeprecation) return;
          const pjsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(pjsonUrl);
          emittedPackageWarnings.has(pjsonPath + "|" + match) || (emittedPackageWarnings.add(pjsonPath + "|" + match), external_node_process_namespaceObject.emitWarning(`Use of deprecated trailing slash pattern mapping "${match}" in the "exports" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, external_node_url_namespaceObject.fileURLToPath)(base)}` : ""}. Mapping specifiers ending in "/" is no longer supported.`, "DeprecationWarning", "DEP0155"));
        }
        function packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig, base, conditions) {
          let exports2 = packageConfig.exports;
          if (function(exports3, packageJsonUrl2, base2) {
            if ("string" == typeof exports3 || Array.isArray(exports3)) return true;
            if ("object" != typeof exports3 || null === exports3) return false;
            const keys2 = Object.getOwnPropertyNames(exports3);
            let isConditionalSugar = false, i4 = 0, keyIndex = -1;
            for (; ++keyIndex < keys2.length; ) {
              const key = keys2[keyIndex], currentIsConditionalSugar = "" === key || "." !== key[0];
              if (0 == i4++) isConditionalSugar = currentIsConditionalSugar;
              else if (isConditionalSugar !== currentIsConditionalSugar) throw new ERR_INVALID_PACKAGE_CONFIG((0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl2), base2, `"exports" cannot contain some keys starting with '.' and some not. The exports object must either be an object of package subpath keys or an object of main entry condition name keys only.`);
            }
            return isConditionalSugar;
          }(exports2, packageJsonUrl, base) && (exports2 = { ".": exports2 }), own.call(exports2, packageSubpath) && !packageSubpath.includes("*") && !packageSubpath.endsWith("/")) {
            const resolveResult = resolvePackageTarget(packageJsonUrl, exports2[packageSubpath], "", packageSubpath, base, false, false, false, conditions);
            if (null == resolveResult) throw exportsNotFound(packageSubpath, packageJsonUrl, base);
            return resolveResult;
          }
          let bestMatch = "", bestMatchSubpath = "";
          const keys = Object.getOwnPropertyNames(exports2);
          let i3 = -1;
          for (; ++i3 < keys.length; ) {
            const key = keys[i3], patternIndex = key.indexOf("*");
            if (-1 !== patternIndex && packageSubpath.startsWith(key.slice(0, patternIndex))) {
              packageSubpath.endsWith("/") && emitTrailingSlashPatternDeprecation(packageSubpath, packageJsonUrl, base);
              const patternTrailer = key.slice(patternIndex + 1);
              packageSubpath.length >= key.length && packageSubpath.endsWith(patternTrailer) && 1 === patternKeyCompare(bestMatch, key) && key.lastIndexOf("*") === patternIndex && (bestMatch = key, bestMatchSubpath = packageSubpath.slice(patternIndex, packageSubpath.length - patternTrailer.length));
            }
          }
          if (bestMatch) {
            const resolveResult = resolvePackageTarget(packageJsonUrl, exports2[bestMatch], bestMatchSubpath, bestMatch, base, true, false, packageSubpath.endsWith("/"), conditions);
            if (null == resolveResult) throw exportsNotFound(packageSubpath, packageJsonUrl, base);
            return resolveResult;
          }
          throw exportsNotFound(packageSubpath, packageJsonUrl, base);
        }
        function patternKeyCompare(a2, b2) {
          const aPatternIndex = a2.indexOf("*"), bPatternIndex = b2.indexOf("*"), baseLengthA = -1 === aPatternIndex ? a2.length : aPatternIndex + 1, baseLengthB = -1 === bPatternIndex ? b2.length : bPatternIndex + 1;
          return baseLengthA > baseLengthB ? -1 : baseLengthB > baseLengthA || -1 === aPatternIndex ? 1 : -1 === bPatternIndex || a2.length > b2.length ? -1 : b2.length > a2.length ? 1 : 0;
        }
        function packageImportsResolve(name, base, conditions) {
          if ("#" === name || name.startsWith("#/") || name.endsWith("/")) {
            throw new ERR_INVALID_MODULE_SPECIFIER(name, "is not a valid internal imports specifier name", (0, external_node_url_namespaceObject.fileURLToPath)(base));
          }
          let packageJsonUrl;
          const packageConfig = getPackageScopeConfig(base);
          if (packageConfig.exists) {
            packageJsonUrl = (0, external_node_url_namespaceObject.pathToFileURL)(packageConfig.pjsonPath);
            const imports = packageConfig.imports;
            if (imports) if (own.call(imports, name) && !name.includes("*")) {
              const resolveResult = resolvePackageTarget(packageJsonUrl, imports[name], "", name, base, false, true, false, conditions);
              if (null != resolveResult) return resolveResult;
            } else {
              let bestMatch = "", bestMatchSubpath = "";
              const keys = Object.getOwnPropertyNames(imports);
              let i3 = -1;
              for (; ++i3 < keys.length; ) {
                const key = keys[i3], patternIndex = key.indexOf("*");
                if (-1 !== patternIndex && name.startsWith(key.slice(0, -1))) {
                  const patternTrailer = key.slice(patternIndex + 1);
                  name.length >= key.length && name.endsWith(patternTrailer) && 1 === patternKeyCompare(bestMatch, key) && key.lastIndexOf("*") === patternIndex && (bestMatch = key, bestMatchSubpath = name.slice(patternIndex, name.length - patternTrailer.length));
                }
              }
              if (bestMatch) {
                const resolveResult = resolvePackageTarget(packageJsonUrl, imports[bestMatch], bestMatchSubpath, bestMatch, base, true, true, false, conditions);
                if (null != resolveResult) return resolveResult;
              }
            }
          }
          throw function(specifier, packageJsonUrl2, base2) {
            return new ERR_PACKAGE_IMPORT_NOT_DEFINED(specifier, packageJsonUrl2 && (0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl2)), (0, external_node_url_namespaceObject.fileURLToPath)(base2));
          }(name, packageJsonUrl, base);
        }
        function packageResolve(specifier, base, conditions) {
          if (external_node_module_namespaceObject.builtinModules.includes(specifier)) return new external_node_url_namespaceObject.URL("node:" + specifier);
          const { packageName, packageSubpath, isScoped } = function(specifier2, base2) {
            let separatorIndex = specifier2.indexOf("/"), validPackageName = true, isScoped2 = false;
            "@" === specifier2[0] && (isScoped2 = true, -1 === separatorIndex || 0 === specifier2.length ? validPackageName = false : separatorIndex = specifier2.indexOf("/", separatorIndex + 1));
            const packageName2 = -1 === separatorIndex ? specifier2 : specifier2.slice(0, separatorIndex);
            if (null !== invalidPackageNameRegEx.exec(packageName2) && (validPackageName = false), !validPackageName) throw new ERR_INVALID_MODULE_SPECIFIER(specifier2, "is not a valid package name", (0, external_node_url_namespaceObject.fileURLToPath)(base2));
            return { packageName: packageName2, packageSubpath: "." + (-1 === separatorIndex ? "" : specifier2.slice(separatorIndex)), isScoped: isScoped2 };
          }(specifier, base), packageConfig = getPackageScopeConfig(base);
          if (packageConfig.exists) {
            const packageJsonUrl2 = (0, external_node_url_namespaceObject.pathToFileURL)(packageConfig.pjsonPath);
            if (packageConfig.name === packageName && void 0 !== packageConfig.exports && null !== packageConfig.exports) return packageExportsResolve(packageJsonUrl2, packageSubpath, packageConfig, base, conditions);
          }
          let lastPath, packageJsonUrl = new external_node_url_namespaceObject.URL("./node_modules/" + packageName + "/package.json", base), packageJsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl);
          do {
            const stat = tryStatSync(packageJsonPath.slice(0, -13));
            if (!stat || !stat.isDirectory()) {
              lastPath = packageJsonPath, packageJsonUrl = new external_node_url_namespaceObject.URL((isScoped ? "../../../../node_modules/" : "../../../node_modules/") + packageName + "/package.json", packageJsonUrl), packageJsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl);
              continue;
            }
            const packageConfig2 = read(packageJsonPath, { base, specifier });
            return void 0 !== packageConfig2.exports && null !== packageConfig2.exports ? packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig2, base, conditions) : "." === packageSubpath ? legacyMainResolve(packageJsonUrl, packageConfig2, base) : new external_node_url_namespaceObject.URL(packageSubpath, packageJsonUrl);
          } while (packageJsonPath.length !== lastPath.length);
          throw new ERR_MODULE_NOT_FOUND(packageName, (0, external_node_url_namespaceObject.fileURLToPath)(base), false);
        }
        function moduleResolve(specifier, base, conditions, preserveSymlinks) {
          const protocol = base.protocol, isRemote = "data:" === protocol || "http:" === protocol || "https:" === protocol;
          let resolved;
          if (function(specifier2) {
            return "" !== specifier2 && ("/" === specifier2[0] || function(specifier3) {
              if ("." === specifier3[0]) {
                if (1 === specifier3.length || "/" === specifier3[1]) return true;
                if ("." === specifier3[1] && (2 === specifier3.length || "/" === specifier3[2])) return true;
              }
              return false;
            }(specifier2));
          }(specifier)) try {
            resolved = new external_node_url_namespaceObject.URL(specifier, base);
          } catch (error_) {
            const error = new ERR_UNSUPPORTED_RESOLVE_REQUEST(specifier, base);
            throw error.cause = error_, error;
          }
          else if ("file:" === protocol && "#" === specifier[0]) resolved = packageImportsResolve(specifier, base, conditions);
          else try {
            resolved = new external_node_url_namespaceObject.URL(specifier);
          } catch (error_) {
            if (isRemote && !external_node_module_namespaceObject.builtinModules.includes(specifier)) {
              const error = new ERR_UNSUPPORTED_RESOLVE_REQUEST(specifier, base);
              throw error.cause = error_, error;
            }
            resolved = packageResolve(specifier, base, conditions);
          }
          return external_node_assert_namespaceObject(void 0 !== resolved, "expected to be defined"), "file:" !== resolved.protocol ? resolved : function(resolved2, base2, preserveSymlinks2) {
            if (null !== encodedSeparatorRegEx.exec(resolved2.pathname)) throw new ERR_INVALID_MODULE_SPECIFIER(resolved2.pathname, 'must not include encoded "/" or "\\" characters', (0, external_node_url_namespaceObject.fileURLToPath)(base2));
            let filePath;
            try {
              filePath = (0, external_node_url_namespaceObject.fileURLToPath)(resolved2);
            } catch (error) {
              const cause = error;
              throw Object.defineProperty(cause, "input", { value: String(resolved2) }), Object.defineProperty(cause, "module", { value: String(base2) }), cause;
            }
            const stats = tryStatSync(filePath.endsWith("/") ? filePath.slice(-1) : filePath);
            if (stats && stats.isDirectory()) {
              const error = new ERR_UNSUPPORTED_DIR_IMPORT(filePath, (0, external_node_url_namespaceObject.fileURLToPath)(base2));
              throw error.url = String(resolved2), error;
            }
            if (!stats || !stats.isFile()) {
              const error = new ERR_MODULE_NOT_FOUND(filePath || resolved2.pathname, base2 && (0, external_node_url_namespaceObject.fileURLToPath)(base2), true);
              throw error.url = String(resolved2), error;
            }
            if (!preserveSymlinks2) {
              const real = (0, external_node_fs_namespaceObject.realpathSync)(filePath), { search, hash } = resolved2;
              (resolved2 = (0, external_node_url_namespaceObject.pathToFileURL)(real + (filePath.endsWith(external_node_path_namespaceObject.sep) ? "/" : ""))).search = search, resolved2.hash = hash;
            }
            return resolved2;
          }(resolved, base, preserveSymlinks);
        }
        function fileURLToPath5(id) {
          return "string" != typeof id || id.startsWith("file://") ? normalizeSlash((0, external_node_url_namespaceObject.fileURLToPath)(id)) : normalizeSlash(id);
        }
        function pathToFileURL(id) {
          return (0, external_node_url_namespaceObject.pathToFileURL)(fileURLToPath5(id)).toString();
        }
        const DEFAULT_CONDITIONS_SET = /* @__PURE__ */ new Set(["node", "import"]), DEFAULT_EXTENSIONS = [".mjs", ".cjs", ".js", ".json"], NOT_FOUND_ERRORS = /* @__PURE__ */ new Set(["ERR_MODULE_NOT_FOUND", "ERR_UNSUPPORTED_DIR_IMPORT", "MODULE_NOT_FOUND", "ERR_PACKAGE_PATH_NOT_EXPORTED"]);
        function _tryModuleResolve(id, url, conditions) {
          try {
            return moduleResolve(id, url, conditions);
          } catch (error) {
            if (!NOT_FOUND_ERRORS.has(error?.code)) throw error;
          }
        }
        function _resolve(id, options = {}) {
          if ("string" != typeof id) {
            if (!(id instanceof URL)) throw new TypeError("input must be a `string` or `URL`");
            id = fileURLToPath5(id);
          }
          if (/(node|data|http|https):/.test(id)) return id;
          if (BUILTIN_MODULES.has(id)) return "node:" + id;
          if (id.startsWith("file://") && (id = fileURLToPath5(id)), isAbsolute(id)) try {
            if ((0, external_node_fs_namespaceObject.statSync)(id).isFile()) return pathToFileURL(id);
          } catch (error) {
            if ("ENOENT" !== error?.code) throw error;
          }
          const conditionsSet = options.conditions ? new Set(options.conditions) : DEFAULT_CONDITIONS_SET, _urls = (Array.isArray(options.url) ? options.url : [options.url]).filter(Boolean).map((url) => new URL(function(id2) {
            return "string" != typeof id2 && (id2 = id2.toString()), /(node|data|http|https|file):/.test(id2) ? id2 : BUILTIN_MODULES.has(id2) ? "node:" + id2 : "file://" + encodeURI(normalizeSlash(id2));
          }(url.toString())));
          0 === _urls.length && _urls.push(new URL(pathToFileURL(process.cwd())));
          const urls = [..._urls];
          for (const url of _urls) "file:" === url.protocol && urls.push(new URL("./", url), new URL(dist_joinURL(url.pathname, "_index.js"), url), new URL("node_modules", url));
          let resolved;
          for (const url of urls) {
            if (resolved = _tryModuleResolve(id, url, conditionsSet), resolved) break;
            for (const prefix of ["", "/index"]) {
              for (const extension of options.extensions || DEFAULT_EXTENSIONS) if (resolved = _tryModuleResolve(dist_joinURL(id, prefix) + extension, url, conditionsSet), resolved) break;
              if (resolved) break;
            }
            if (resolved) break;
          }
          if (!resolved) {
            const error = new Error(`Cannot find module ${id} imported from ${urls.join(", ")}`);
            throw error.code = "ERR_MODULE_NOT_FOUND", error;
          }
          return pathToFileURL(resolved);
        }
        function resolveSync(id, options) {
          return _resolve(id, options);
        }
        function resolvePathSync(id, options) {
          return fileURLToPath5(resolveSync(id, options));
        }
        const ESM_RE = /([\s;]|^)(import[\s\w*,{}]*from|import\s*["'*{]|export\b\s*(?:[*{]|default|class|type|function|const|var|let|async function)|import\.meta\b)/m, COMMENT_RE = /\/\*.+?\*\/|\/\/.*(?=[nr])/g;
        function hasESMSyntax(code, opts = {}) {
          return opts.stripComments && (code = code.replace(COMMENT_RE, "")), ESM_RE.test(code);
        }
        var external_crypto_ = __webpack_require__("crypto");
        function md5(content, len = 8) {
          return (0, external_crypto_.createHash)("md5").update(content).digest("hex").slice(0, len);
        }
        var __awaiter = function(thisArg, _arguments, P3, generator) {
          return new (P3 || (P3 = Promise))(function(resolve, reject) {
            function fulfilled(value2) {
              try {
                step(generator.next(value2));
              } catch (e2) {
                reject(e2);
              }
            }
            function rejected(value2) {
              try {
                step(generator.throw(value2));
              } catch (e2) {
                reject(e2);
              }
            }
            function step(result) {
              var value2;
              result.done ? resolve(result.value) : (value2 = result.value, value2 instanceof P3 ? value2 : new P3(function(resolve2) {
                resolve2(value2);
              })).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        const _EnvDebug = destr(process.env.JITI_DEBUG), _EnvCache = destr(process.env.JITI_CACHE), _EnvESMResolve = destr(process.env.JITI_ESM_RESOLVE), _EnvRequireCache = destr(process.env.JITI_REQUIRE_CACHE), _EnvSourceMaps = destr(process.env.JITI_SOURCE_MAPS), _EnvAlias = destr(process.env.JITI_ALIAS), _EnvTransform = destr(process.env.JITI_TRANSFORM_MODULES), _EnvNative = destr(process.env.JITI_NATIVE_MODULES), _ExpBun = destr(process.env.JITI_EXPERIMENTAL_BUN), isWindows = "win32" === (0, external_os_namespaceObject.platform)(), defaults = { debug: _EnvDebug, cache: void 0 === _EnvCache || !!_EnvCache, requireCache: void 0 === _EnvRequireCache || !!_EnvRequireCache, sourceMaps: void 0 !== _EnvSourceMaps && !!_EnvSourceMaps, interopDefault: false, esmResolve: _EnvESMResolve || false, cacheVersion: "7", legacy: (0, semver.lt)(process.version || "0.0.0", "14.0.0"), extensions: [".js", ".mjs", ".cjs", ".ts", ".mts", ".cts", ".json"], alias: _EnvAlias, nativeModules: _EnvNative || [], transformModules: _EnvTransform || [], experimentalBun: void 0 === _ExpBun ? !!process.versions.bun : !!_ExpBun }, JS_EXT_RE = /\.(c|m)?j(sx?)$/, TS_EXT_RE = /\.(c|m)?t(sx?)$/;
        function createJITI(_filename, opts = {}, parentModule, parentCache) {
          (opts = Object.assign(Object.assign({}, defaults), opts)).legacy && (opts.cacheVersion += "-legacy"), opts.transformOptions && (opts.cacheVersion += "-" + object_hash_default()(opts.transformOptions));
          const alias = opts.alias && Object.keys(opts.alias).length > 0 ? normalizeAliases(opts.alias || {}) : null, nativeModules = ["typescript", "jiti", ...opts.nativeModules || []], transformModules = [...opts.transformModules || []], isNativeRe = new RegExp(`node_modules/(${nativeModules.map((m2) => escapeStringRegexp(m2)).join("|")})/`), isTransformRe = new RegExp(`node_modules/(${transformModules.map((m2) => escapeStringRegexp(m2)).join("|")})/`);
          function debug2(...args) {
            opts.debug && console.log("[jiti]", ...args);
          }
          if (_filename || (_filename = process.cwd()), function(filename) {
            try {
              return (0, external_fs_.lstatSync)(filename).isDirectory();
            } catch (_a) {
              return false;
            }
          }(_filename) && (_filename = join(_filename, "index.js")), true === opts.cache && (opts.cache = function() {
            let _tmpDir = (0, external_os_namespaceObject.tmpdir)();
            if (process.env.TMPDIR && _tmpDir === process.cwd() && !process.env.JITI_RESPECT_TMPDIR_ENV) {
              const _env = process.env.TMPDIR;
              delete process.env.TMPDIR, _tmpDir = (0, external_os_namespaceObject.tmpdir)(), process.env.TMPDIR = _env;
            }
            return join(_tmpDir, "node-jiti");
          }()), opts.cache) try {
            if ((0, external_fs_.mkdirSync)(opts.cache, { recursive: true }), !function(filename) {
              try {
                return (0, external_fs_.accessSync)(filename, external_fs_.constants.W_OK), true;
              } catch (_a) {
                return false;
              }
            }(opts.cache)) throw new Error("directory is not writable");
          } catch (error) {
            debug2("Error creating cache directory at ", opts.cache, error), opts.cache = false;
          }
          const nativeRequire = create_require_default()(isWindows ? _filename.replace(/\//g, "\\") : _filename), tryResolve = (id, options) => {
            try {
              return nativeRequire.resolve(id, options);
            } catch (_a) {
            }
          }, _url = (0, external_url_namespaceObject.pathToFileURL)(_filename), _additionalExts = [...opts.extensions].filter((ext) => ".js" !== ext), _resolve2 = (id, options) => {
            let resolved, err;
            if (alias && (id = function(path9, aliases) {
              const _path = normalizeWindowsPath(path9);
              aliases = normalizeAliases(aliases);
              for (const [alias2, to] of Object.entries(aliases)) {
                if (!_path.startsWith(alias2)) continue;
                const _alias = hasTrailingSlash(alias2) ? alias2.slice(0, -1) : alias2;
                if (hasTrailingSlash(_path[_alias.length])) return join(to, _path.slice(alias2.length));
              }
              return _path;
            }(id, alias)), opts.esmResolve) {
              const conditionSets = [["node", "require"], ["node", "import"]];
              for (const conditions of conditionSets) {
                try {
                  resolved = resolvePathSync(id, { url: _url, conditions, extensions: opts.extensions });
                } catch (error) {
                  err = error;
                }
                if (resolved) return resolved;
              }
            }
            try {
              return nativeRequire.resolve(id, options);
            } catch (error) {
              err = error;
            }
            for (const ext of _additionalExts) {
              if (resolved = tryResolve(id + ext, options) || tryResolve(id + "/index" + ext, options), resolved) return resolved;
              if (TS_EXT_RE.test((null == parentModule ? void 0 : parentModule.filename) || "") && (resolved = tryResolve(id.replace(JS_EXT_RE, ".$1t$2"), options), resolved)) return resolved;
            }
            throw err;
          };
          function transform3(topts) {
            let code = function(filename, source, get) {
              if (!opts.cache || !filename) return get();
              const sourceHash = ` /* v${opts.cacheVersion}-${md5(source, 16)} */`, filebase = basename(pathe_ff20891b_dirname(filename)) + "-" + basename(filename), cacheFile = join(opts.cache, filebase + "." + md5(filename) + ".js");
              if ((0, external_fs_.existsSync)(cacheFile)) {
                const cacheSource = (0, external_fs_.readFileSync)(cacheFile, "utf8");
                if (cacheSource.endsWith(sourceHash)) return debug2("[cache hit]", filename, "~>", cacheFile), cacheSource;
              }
              debug2("[cache miss]", filename);
              const result = get();
              return result.includes("__JITI_ERROR__") || (0, external_fs_.writeFileSync)(cacheFile, result + sourceHash, "utf8"), result;
            }(topts.filename, topts.source, () => {
              var _a;
              const res = opts.transform(Object.assign(Object.assign(Object.assign({ legacy: opts.legacy }, opts.transformOptions), { babel: Object.assign(Object.assign({}, opts.sourceMaps ? { sourceFileName: topts.filename, sourceMaps: "inline" } : {}), null === (_a = opts.transformOptions) || void 0 === _a ? void 0 : _a.babel) }), topts));
              return res.error && opts.debug && debug2(res.error), res.code;
            });
            return code.startsWith("#!") && (code = "// " + code), code;
          }
          function _interopDefault(mod) {
            return opts.interopDefault ? function(sourceModule, opts2 = {}) {
              if (null === (value2 = sourceModule) || "object" != typeof value2 || !("default" in sourceModule)) return sourceModule;
              var value2;
              const defaultValue = sourceModule.default;
              if (null == defaultValue) return sourceModule;
              const _defaultType = typeof defaultValue;
              if ("object" !== _defaultType && ("function" !== _defaultType || opts2.preferNamespace)) return opts2.preferNamespace ? sourceModule : defaultValue;
              for (const key in sourceModule) try {
                key in defaultValue || Object.defineProperty(defaultValue, key, { enumerable: "default" !== key, configurable: "default" !== key, get: () => sourceModule[key] });
              } catch {
              }
              return defaultValue;
            }(mod) : mod;
          }
          function jiti2(id, _importOptions) {
            var _a;
            const cache2 = parentCache || {};
            if (id.startsWith("node:") ? id = id.slice(5) : id.startsWith("file:") && (id = (0, external_url_namespaceObject.fileURLToPath)(id)), external_module_.builtinModules.includes(id) || ".pnp.js" === id) return nativeRequire(id);
            if (opts.experimentalBun && !opts.transformOptions) try {
              debug2(`[bun] [native] ${id}`);
              const _mod = nativeRequire(id);
              return false === opts.requireCache && delete nativeRequire.cache[id], _interopDefault(_mod);
            } catch (error) {
              debug2(`[bun] Using fallback for ${id} because of an error:`, error);
            }
            const filename = _resolve2(id), ext = extname(filename);
            if (".json" === ext) {
              debug2("[json]", filename);
              const jsonModule = nativeRequire(id);
              return Object.defineProperty(jsonModule, "default", { value: jsonModule }), jsonModule;
            }
            if (ext && !opts.extensions.includes(ext)) return debug2("[unknown]", filename), nativeRequire(id);
            if (isNativeRe.test(filename)) return debug2("[native]", filename), nativeRequire(id);
            if (cache2[filename] && (true === cache2[filename].loaded || false === (null == parentModule ? void 0 : parentModule.loaded))) return _interopDefault(null === (_a = cache2[filename]) || void 0 === _a ? void 0 : _a.exports);
            if (opts.requireCache && nativeRequire.cache[filename]) {
              const cacheEntry = nativeRequire.cache[filename];
              if (null == cacheEntry ? void 0 : cacheEntry.loaded) return _interopDefault(cacheEntry.exports);
            }
            return evalModule((0, external_fs_.readFileSync)(filename, "utf8"), { id, filename, ext, cache: cache2 });
          }
          function evalModule(source, evalOptions = {}) {
            var _a;
            const id = evalOptions.id || (evalOptions.filename ? basename(evalOptions.filename) : `_jitiEval.${evalOptions.ext || ".js"}`), filename = evalOptions.filename || _resolve2(id), ext = evalOptions.ext || extname(filename), cache2 = evalOptions.cache || parentCache || {}, isTypescript = ".ts" === ext || ".mts" === ext || ".cts" === ext, isNativeModule = ".mjs" === ext || ".js" === ext && "module" === (null === (_a = function(path9) {
              for (; path9 && "." !== path9 && "/" !== path9; ) {
                path9 = join(path9, "..");
                try {
                  const pkg = (0, external_fs_.readFileSync)(join(path9, "package.json"), "utf8");
                  try {
                    return JSON.parse(pkg);
                  } catch (_a2) {
                  }
                  break;
                } catch (_b) {
                }
              }
            }(filename)) || void 0 === _a ? void 0 : _a.type), needsTranspile = !(".cjs" === ext) && (isTypescript || isNativeModule || isTransformRe.test(filename) || hasESMSyntax(source) || opts.legacy && source.match(/\?\.|\?\?/));
            const start = external_perf_hooks_namespaceObject.performance.now();
            if (needsTranspile) {
              source = transform3({ filename, source, ts: isTypescript });
              debug2("[transpile]" + (isNativeModule ? " [esm]" : ""), filename, `(${Math.round(1e3 * (external_perf_hooks_namespaceObject.performance.now() - start)) / 1e3}ms)`);
            } else try {
              return debug2("[native]", filename), _interopDefault(nativeRequire(id));
            } catch (error) {
              debug2("Native require error:", error), debug2("[fallback]", filename), source = transform3({ filename, source, ts: isTypescript });
            }
            const mod = new external_module_.Module(filename);
            let compiled;
            mod.filename = filename, parentModule && (mod.parent = parentModule, Array.isArray(parentModule.children) && !parentModule.children.includes(mod) && parentModule.children.push(mod)), mod.require = createJITI(filename, opts, mod, cache2), mod.path = pathe_ff20891b_dirname(filename), mod.paths = external_module_.Module._nodeModulePaths(mod.path), cache2[filename] = mod, opts.requireCache && (nativeRequire.cache[filename] = mod);
            try {
              compiled = external_vm_default().runInThisContext(external_module_.Module.wrap(source), { filename, lineOffset: 0, displayErrors: false });
            } catch (error) {
              opts.requireCache && delete nativeRequire.cache[filename], opts.onError(error);
            }
            try {
              compiled(mod.exports, mod.require, mod, mod.filename, pathe_ff20891b_dirname(mod.filename));
            } catch (error) {
              opts.requireCache && delete nativeRequire.cache[filename], opts.onError(error);
            }
            if (mod.exports && mod.exports.__JITI_ERROR__) {
              const { filename: filename2, line, column, code, message } = mod.exports.__JITI_ERROR__, err = new Error(`${code}: ${message} 
 ${`${filename2}:${line}:${column}`}`);
              Error.captureStackTrace(err, jiti2), opts.onError(err);
            }
            mod.loaded = true;
            return _interopDefault(mod.exports);
          }
          return _resolve2.paths = nativeRequire.resolve.paths, jiti2.resolve = _resolve2, jiti2.cache = opts.requireCache ? nativeRequire.cache : {}, jiti2.extensions = nativeRequire.extensions, jiti2.main = nativeRequire.main, jiti2.transform = transform3, jiti2.register = function() {
            return (0, lib.addHook)((source, filename) => jiti2.transform({ source, filename, ts: !!/\.[cm]?ts$/.test(filename) }), { exts: opts.extensions });
          }, jiti2.evalModule = evalModule, jiti2.import = (id, importOptions) => __awaiter(this, void 0, void 0, function* () {
            return yield jiti2(id);
          }), jiti2;
        }
      })(), module.exports = __webpack_exports__.default;
    })();
  }
});

// ../../.yarn/cache/jiti-npm-1.21.7-82fc9937d6-77b61989c7.zip/node_modules/jiti/dist/babel.js
var require_babel = __commonJS({
  "../../.yarn/cache/jiti-npm-1.21.7-82fc9937d6-77b61989c7.zip/node_modules/jiti/dist/babel.js"(exports, module) {
    "use strict";
    init_esm_shims();
    (() => {
      var __webpack_modules__ = { "./node_modules/.pnpm/@ampproject+remapping@2.3.0/node_modules/@ampproject/remapping/dist/remapping.umd.js": function(module2, __unused_webpack_exports, __webpack_require__2) {
        module2.exports = function(traceMapping, genMapping) {
          "use strict";
          const SOURCELESS_MAPPING = SegmentObject("", -1, -1, "", null, false), EMPTY_SOURCES = [];
          function SegmentObject(source, line, column, name, content, ignore) {
            return { source, line, column, name, content, ignore };
          }
          function Source(map, sources, source, content, ignore) {
            return { map, sources, source, content, ignore };
          }
          function MapSource(map, sources) {
            return Source(map, sources, "", null, false);
          }
          function OriginalSource(source, content, ignore) {
            return Source(null, EMPTY_SOURCES, source, content, ignore);
          }
          function traceMappings(tree) {
            const gen = new genMapping.GenMapping({ file: tree.map.file }), { sources: rootSources, map } = tree, rootNames = map.names, rootMappings = traceMapping.decodedMappings(map);
            for (let i2 = 0; i2 < rootMappings.length; i2++) {
              const segments = rootMappings[i2];
              for (let j2 = 0; j2 < segments.length; j2++) {
                const segment = segments[j2], genCol = segment[0];
                let traced = SOURCELESS_MAPPING;
                if (1 !== segment.length && (traced = originalPositionFor(rootSources[segment[1]], segment[2], segment[3], 5 === segment.length ? rootNames[segment[4]] : ""), null == traced)) continue;
                const { column, line, name, content, source, ignore } = traced;
                genMapping.maybeAddSegment(gen, i2, genCol, source, line, column, name), source && null != content && genMapping.setSourceContent(gen, source, content), ignore && genMapping.setIgnore(gen, source, true);
              }
            }
            return gen;
          }
          function originalPositionFor(source, line, column, name) {
            if (!source.map) return SegmentObject(source.source, line, column, name, source.content, source.ignore);
            const segment = traceMapping.traceSegment(source.map, line, column);
            return null == segment ? null : 1 === segment.length ? SOURCELESS_MAPPING : originalPositionFor(source.sources[segment[1]], segment[2], segment[3], 5 === segment.length ? source.map.names[segment[4]] : name);
          }
          function asArray(value2) {
            return Array.isArray(value2) ? value2 : [value2];
          }
          function buildSourceMapTree(input, loader) {
            const maps = asArray(input).map((m2) => new traceMapping.TraceMap(m2, "")), map = maps.pop();
            for (let i2 = 0; i2 < maps.length; i2++) if (maps[i2].sources.length > 1) throw new Error(`Transformation map ${i2} must have exactly one source file.
Did you specify these with the most recent transformation maps first?`);
            let tree = build(map, loader, "", 0);
            for (let i2 = maps.length - 1; i2 >= 0; i2--) tree = MapSource(maps[i2], [tree]);
            return tree;
          }
          function build(map, loader, importer, importerDepth) {
            const { resolvedSources, sourcesContent, ignoreList } = map, depth = importerDepth + 1;
            return MapSource(map, resolvedSources.map((sourceFile, i2) => {
              const ctx = { importer, depth, source: sourceFile || "", content: void 0, ignore: void 0 }, sourceMap = loader(ctx.source, ctx), { source, content, ignore } = ctx;
              return sourceMap ? build(new traceMapping.TraceMap(sourceMap, source), loader, source, depth) : OriginalSource(source, void 0 !== content ? content : sourcesContent ? sourcesContent[i2] : null, void 0 !== ignore ? ignore : !!ignoreList && ignoreList.includes(i2));
            }));
          }
          class SourceMap {
            constructor(map, options) {
              const out = options.decodedMappings ? genMapping.toDecodedMap(map) : genMapping.toEncodedMap(map);
              this.version = out.version, this.file = out.file, this.mappings = out.mappings, this.names = out.names, this.ignoreList = out.ignoreList, this.sourceRoot = out.sourceRoot, this.sources = out.sources, options.excludeContent || (this.sourcesContent = out.sourcesContent);
            }
            toString() {
              return JSON.stringify(this);
            }
          }
          function remapping(input, loader, options) {
            const opts = "object" == typeof options ? options : { excludeContent: !!options, decodedMappings: false }, tree = buildSourceMapTree(input, loader);
            return new SourceMap(traceMappings(tree), opts);
          }
          return remapping;
        }(__webpack_require__2("./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.25/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js"), __webpack_require__2("./node_modules/.pnpm/@jridgewell+gen-mapping@0.3.8/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js"));
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files lazy recursive": (module2) => {
        function webpackEmptyAsyncContext(req) {
          return Promise.resolve().then(() => {
            var e2 = new Error("Cannot find module '" + req + "'");
            throw e2.code = "MODULE_NOT_FOUND", e2;
          });
        }
        webpackEmptyAsyncContext.keys = () => [], webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext, webpackEmptyAsyncContext.id = "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files lazy recursive", module2.exports = webpackEmptyAsyncContext;
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive": (module2) => {
        function webpackEmptyContext(req) {
          var e2 = new Error("Cannot find module '" + req + "'");
          throw e2.code = "MODULE_NOT_FOUND", e2;
        }
        webpackEmptyContext.keys = () => [], webpackEmptyContext.resolve = webpackEmptyContext, webpackEmptyContext.id = "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive", module2.exports = webpackEmptyContext;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-class-properties@7.12.13_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-class-properties/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api) => (api.assertVersion(7), { name: "syntax-class-properties", manipulateOptions(opts, parserOpts) {
          parserOpts.plugins.push("classProperties", "classPrivateProperties", "classPrivateMethods");
        } }));
        exports2.default = _default;
      }, "./node_modules/.pnpm/@jridgewell+gen-mapping@0.3.8/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js": function(__unused_webpack_module, exports2, __webpack_require__2) {
        !function(exports3, setArray, sourcemapCodec, traceMapping) {
          "use strict";
          const COLUMN = 0, SOURCES_INDEX = 1, SOURCE_LINE = 2, SOURCE_COLUMN = 3, NAMES_INDEX = 4, NO_NAME = -1;
          class GenMapping {
            constructor({ file, sourceRoot } = {}) {
              this._names = new setArray.SetArray(), this._sources = new setArray.SetArray(), this._sourcesContent = [], this._mappings = [], this.file = file, this.sourceRoot = sourceRoot, this._ignoreList = new setArray.SetArray();
            }
          }
          function cast(map) {
            return map;
          }
          function addSegment(map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {
            return addSegmentInternal(false, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);
          }
          function addMapping(map, mapping) {
            return addMappingInternal(false, map, mapping);
          }
          const maybeAddSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => addSegmentInternal(true, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content), maybeAddMapping = (map, mapping) => addMappingInternal(true, map, mapping);
          function setSourceContent(map, source, content) {
            const { _sources: sources, _sourcesContent: sourcesContent } = cast(map);
            sourcesContent[setArray.put(sources, source)] = content;
          }
          function setIgnore(map, source, ignore = true) {
            const { _sources: sources, _sourcesContent: sourcesContent, _ignoreList: ignoreList } = cast(map), index = setArray.put(sources, source);
            index === sourcesContent.length && (sourcesContent[index] = null), ignore ? setArray.put(ignoreList, index) : setArray.remove(ignoreList, index);
          }
          function toDecodedMap(map) {
            const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names, _ignoreList: ignoreList } = cast(map);
            return removeEmptyFinalLines(mappings), { version: 3, file: map.file || void 0, names: names.array, sourceRoot: map.sourceRoot || void 0, sources: sources.array, sourcesContent, mappings, ignoreList: ignoreList.array };
          }
          function toEncodedMap(map) {
            const decoded = toDecodedMap(map);
            return Object.assign(Object.assign({}, decoded), { mappings: sourcemapCodec.encode(decoded.mappings) });
          }
          function fromMap(input) {
            const map = new traceMapping.TraceMap(input), gen = new GenMapping({ file: map.file, sourceRoot: map.sourceRoot });
            return putAll(cast(gen)._names, map.names), putAll(cast(gen)._sources, map.sources), cast(gen)._sourcesContent = map.sourcesContent || map.sources.map(() => null), cast(gen)._mappings = traceMapping.decodedMappings(map), map.ignoreList && putAll(cast(gen)._ignoreList, map.ignoreList), gen;
          }
          function allMappings(map) {
            const out = [], { _mappings: mappings, _sources: sources, _names: names } = cast(map);
            for (let i2 = 0; i2 < mappings.length; i2++) {
              const line = mappings[i2];
              for (let j2 = 0; j2 < line.length; j2++) {
                const seg = line[j2], generated = { line: i2 + 1, column: seg[COLUMN] };
                let source, original, name;
                1 !== seg.length && (source = sources.array[seg[SOURCES_INDEX]], original = { line: seg[SOURCE_LINE] + 1, column: seg[SOURCE_COLUMN] }, 5 === seg.length && (name = names.array[seg[NAMES_INDEX]])), out.push({ generated, source, original, name });
              }
            }
            return out;
          }
          function addSegmentInternal(skipable, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {
            const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names } = cast(map), line = getLine(mappings, genLine), index = getColumnIndex(line, genColumn);
            if (!source) {
              if (skipable && skipSourceless(line, index)) return;
              return insert(line, index, [genColumn]);
            }
            const sourcesIndex = setArray.put(sources, source), namesIndex = name ? setArray.put(names, name) : NO_NAME;
            if (sourcesIndex === sourcesContent.length && (sourcesContent[sourcesIndex] = null != content ? content : null), !skipable || !skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex)) return insert(line, index, name ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex] : [genColumn, sourcesIndex, sourceLine, sourceColumn]);
          }
          function getLine(mappings, index) {
            for (let i2 = mappings.length; i2 <= index; i2++) mappings[i2] = [];
            return mappings[index];
          }
          function getColumnIndex(line, genColumn) {
            let index = line.length;
            for (let i2 = index - 1; i2 >= 0 && !(genColumn >= line[i2][COLUMN]); index = i2--) ;
            return index;
          }
          function insert(array, index, value2) {
            for (let i2 = array.length; i2 > index; i2--) array[i2] = array[i2 - 1];
            array[index] = value2;
          }
          function removeEmptyFinalLines(mappings) {
            const { length } = mappings;
            let len = length;
            for (let i2 = len - 1; i2 >= 0 && !(mappings[i2].length > 0); len = i2, i2--) ;
            len < length && (mappings.length = len);
          }
          function putAll(setarr, array) {
            for (let i2 = 0; i2 < array.length; i2++) setArray.put(setarr, array[i2]);
          }
          function skipSourceless(line, index) {
            return 0 === index || 1 === line[index - 1].length;
          }
          function skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex) {
            if (0 === index) return false;
            const prev = line[index - 1];
            return 1 !== prev.length && sourcesIndex === prev[SOURCES_INDEX] && sourceLine === prev[SOURCE_LINE] && sourceColumn === prev[SOURCE_COLUMN] && namesIndex === (5 === prev.length ? prev[NAMES_INDEX] : NO_NAME);
          }
          function addMappingInternal(skipable, map, mapping) {
            const { generated, source, original, name, content } = mapping;
            return source ? addSegmentInternal(skipable, map, generated.line - 1, generated.column, source, original.line - 1, original.column, name, content) : addSegmentInternal(skipable, map, generated.line - 1, generated.column, null, null, null, null, null);
          }
          exports3.GenMapping = GenMapping, exports3.addMapping = addMapping, exports3.addSegment = addSegment, exports3.allMappings = allMappings, exports3.fromMap = fromMap, exports3.maybeAddMapping = maybeAddMapping, exports3.maybeAddSegment = maybeAddSegment, exports3.setIgnore = setIgnore, exports3.setSourceContent = setSourceContent, exports3.toDecodedMap = toDecodedMap, exports3.toEncodedMap = toEncodedMap, Object.defineProperty(exports3, "__esModule", { value: true });
        }(exports2, __webpack_require__2("./node_modules/.pnpm/@jridgewell+set-array@1.2.1/node_modules/@jridgewell/set-array/dist/set-array.umd.js"), __webpack_require__2("./node_modules/.pnpm/@jridgewell+sourcemap-codec@1.5.0/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js"), __webpack_require__2("./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.25/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js"));
      }, "./node_modules/.pnpm/@jridgewell+resolve-uri@3.1.2/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js": function(module2) {
        module2.exports = function() {
          "use strict";
          const schemeRegex = /^[\w+.-]+:\/\//, urlRegex = /^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?(\?[^#]*)?(#.*)?/, fileRegex = /^file:(?:\/\/((?![a-z]:)[^/#?]*)?)?(\/?[^#?]*)(\?[^#]*)?(#.*)?/i;
          function isAbsoluteUrl(input) {
            return schemeRegex.test(input);
          }
          function isSchemeRelativeUrl(input) {
            return input.startsWith("//");
          }
          function isAbsolutePath(input) {
            return input.startsWith("/");
          }
          function isFileUrl(input) {
            return input.startsWith("file:");
          }
          function isRelative(input) {
            return /^[.?#]/.test(input);
          }
          function parseAbsoluteUrl(input) {
            const match = urlRegex.exec(input);
            return makeUrl(match[1], match[2] || "", match[3], match[4] || "", match[5] || "/", match[6] || "", match[7] || "");
          }
          function parseFileUrl(input) {
            const match = fileRegex.exec(input), path9 = match[2];
            return makeUrl("file:", "", match[1] || "", "", isAbsolutePath(path9) ? path9 : "/" + path9, match[3] || "", match[4] || "");
          }
          function makeUrl(scheme, user, host, port, path9, query, hash) {
            return { scheme, user, host, port, path: path9, query, hash, type: 7 };
          }
          function parseUrl(input) {
            if (isSchemeRelativeUrl(input)) {
              const url2 = parseAbsoluteUrl("http:" + input);
              return url2.scheme = "", url2.type = 6, url2;
            }
            if (isAbsolutePath(input)) {
              const url2 = parseAbsoluteUrl("http://foo.com" + input);
              return url2.scheme = "", url2.host = "", url2.type = 5, url2;
            }
            if (isFileUrl(input)) return parseFileUrl(input);
            if (isAbsoluteUrl(input)) return parseAbsoluteUrl(input);
            const url = parseAbsoluteUrl("http://foo.com/" + input);
            return url.scheme = "", url.host = "", url.type = input ? input.startsWith("?") ? 3 : input.startsWith("#") ? 2 : 4 : 1, url;
          }
          function stripPathFilename(path9) {
            if (path9.endsWith("/..")) return path9;
            const index = path9.lastIndexOf("/");
            return path9.slice(0, index + 1);
          }
          function mergePaths(url, base) {
            normalizePath(base, base.type), "/" === url.path ? url.path = base.path : url.path = stripPathFilename(base.path) + url.path;
          }
          function normalizePath(url, type) {
            const rel = type <= 4, pieces = url.path.split("/");
            let pointer = 1, positive = 0, addTrailingSlash = false;
            for (let i2 = 1; i2 < pieces.length; i2++) {
              const piece = pieces[i2];
              piece ? (addTrailingSlash = false, "." !== piece && (".." !== piece ? (pieces[pointer++] = piece, positive++) : positive ? (addTrailingSlash = true, positive--, pointer--) : rel && (pieces[pointer++] = piece))) : addTrailingSlash = true;
            }
            let path9 = "";
            for (let i2 = 1; i2 < pointer; i2++) path9 += "/" + pieces[i2];
            (!path9 || addTrailingSlash && !path9.endsWith("/..")) && (path9 += "/"), url.path = path9;
          }
          function resolve(input, base) {
            if (!input && !base) return "";
            const url = parseUrl(input);
            let inputType = url.type;
            if (base && 7 !== inputType) {
              const baseUrl = parseUrl(base), baseType = baseUrl.type;
              switch (inputType) {
                case 1:
                  url.hash = baseUrl.hash;
                case 2:
                  url.query = baseUrl.query;
                case 3:
                case 4:
                  mergePaths(url, baseUrl);
                case 5:
                  url.user = baseUrl.user, url.host = baseUrl.host, url.port = baseUrl.port;
                case 6:
                  url.scheme = baseUrl.scheme;
              }
              baseType > inputType && (inputType = baseType);
            }
            normalizePath(url, inputType);
            const queryHash = url.query + url.hash;
            switch (inputType) {
              case 2:
              case 3:
                return queryHash;
              case 4: {
                const path9 = url.path.slice(1);
                return path9 ? isRelative(base || input) && !isRelative(path9) ? "./" + path9 + queryHash : path9 + queryHash : queryHash || ".";
              }
              case 5:
                return url.path + queryHash;
              default:
                return url.scheme + "//" + url.user + url.host + url.port + url.path + queryHash;
            }
          }
          return resolve;
        }();
      }, "./node_modules/.pnpm/@jridgewell+set-array@1.2.1/node_modules/@jridgewell/set-array/dist/set-array.umd.js": function(__unused_webpack_module, exports2) {
        !function(exports3) {
          "use strict";
          class SetArray {
            constructor() {
              this._indexes = { __proto__: null }, this.array = [];
            }
          }
          function cast(set) {
            return set;
          }
          function get(setarr, key) {
            return cast(setarr)._indexes[key];
          }
          function put(setarr, key) {
            const index = get(setarr, key);
            if (void 0 !== index) return index;
            const { array, _indexes: indexes } = cast(setarr), length = array.push(key);
            return indexes[key] = length - 1;
          }
          function pop(setarr) {
            const { array, _indexes: indexes } = cast(setarr);
            0 !== array.length && (indexes[array.pop()] = void 0);
          }
          function remove(setarr, key) {
            const index = get(setarr, key);
            if (void 0 === index) return;
            const { array, _indexes: indexes } = cast(setarr);
            for (let i2 = index + 1; i2 < array.length; i2++) {
              const k3 = array[i2];
              array[i2 - 1] = k3, indexes[k3]--;
            }
            indexes[key] = void 0, array.pop();
          }
          exports3.SetArray = SetArray, exports3.get = get, exports3.pop = pop, exports3.put = put, exports3.remove = remove, Object.defineProperty(exports3, "__esModule", { value: true });
        }(exports2);
      }, "./node_modules/.pnpm/@jridgewell+sourcemap-codec@1.5.0/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js": function(__unused_webpack_module, exports2) {
        !function(exports3) {
          "use strict";
          const comma = ",".charCodeAt(0), semicolon = ";".charCodeAt(0), chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", intToChar = new Uint8Array(64), charToInt = new Uint8Array(128);
          for (let i2 = 0; i2 < chars.length; i2++) {
            const c4 = chars.charCodeAt(i2);
            intToChar[i2] = c4, charToInt[c4] = i2;
          }
          function decodeInteger(reader, relative) {
            let value2 = 0, shift = 0, integer = 0;
            do {
              const c4 = reader.next();
              integer = charToInt[c4], value2 |= (31 & integer) << shift, shift += 5;
            } while (32 & integer);
            const shouldNegate = 1 & value2;
            return value2 >>>= 1, shouldNegate && (value2 = -2147483648 | -value2), relative + value2;
          }
          function encodeInteger(builder, num, relative) {
            let delta = num - relative;
            delta = delta < 0 ? -delta << 1 | 1 : delta << 1;
            do {
              let clamped = 31 & delta;
              delta >>>= 5, delta > 0 && (clamped |= 32), builder.write(intToChar[clamped]);
            } while (delta > 0);
            return num;
          }
          function hasMoreVlq(reader, max) {
            return !(reader.pos >= max) && reader.peek() !== comma;
          }
          const bufLength = 16384, td = "undefined" != typeof TextDecoder ? new TextDecoder() : "undefined" != typeof Buffer ? { decode: (buf) => Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength).toString() } : { decode(buf) {
            let out = "";
            for (let i2 = 0; i2 < buf.length; i2++) out += String.fromCharCode(buf[i2]);
            return out;
          } };
          class StringWriter {
            constructor() {
              this.pos = 0, this.out = "", this.buffer = new Uint8Array(bufLength);
            }
            write(v) {
              const { buffer } = this;
              buffer[this.pos++] = v, this.pos === bufLength && (this.out += td.decode(buffer), this.pos = 0);
            }
            flush() {
              const { buffer, out, pos } = this;
              return pos > 0 ? out + td.decode(buffer.subarray(0, pos)) : out;
            }
          }
          class StringReader {
            constructor(buffer) {
              this.pos = 0, this.buffer = buffer;
            }
            next() {
              return this.buffer.charCodeAt(this.pos++);
            }
            peek() {
              return this.buffer.charCodeAt(this.pos);
            }
            indexOf(char) {
              const { buffer, pos } = this, idx = buffer.indexOf(char, pos);
              return -1 === idx ? buffer.length : idx;
            }
          }
          const EMPTY = [];
          function decodeOriginalScopes(input) {
            const { length } = input, reader = new StringReader(input), scopes = [], stack = [];
            let line = 0;
            for (; reader.pos < length; reader.pos++) {
              line = decodeInteger(reader, line);
              const column = decodeInteger(reader, 0);
              if (!hasMoreVlq(reader, length)) {
                const last = stack.pop();
                last[2] = line, last[3] = column;
                continue;
              }
              const kind = decodeInteger(reader, 0), scope = 1 & decodeInteger(reader, 0) ? [line, column, 0, 0, kind, decodeInteger(reader, 0)] : [line, column, 0, 0, kind];
              let vars = EMPTY;
              if (hasMoreVlq(reader, length)) {
                vars = [];
                do {
                  const varsIndex = decodeInteger(reader, 0);
                  vars.push(varsIndex);
                } while (hasMoreVlq(reader, length));
              }
              scope.vars = vars, scopes.push(scope), stack.push(scope);
            }
            return scopes;
          }
          function encodeOriginalScopes(scopes) {
            const writer = new StringWriter();
            for (let i2 = 0; i2 < scopes.length; ) i2 = _encodeOriginalScopes(scopes, i2, writer, [0]);
            return writer.flush();
          }
          function _encodeOriginalScopes(scopes, index, writer, state) {
            const scope = scopes[index], { 0: startLine, 1: startColumn, 2: endLine, 3: endColumn, 4: kind, vars } = scope;
            index > 0 && writer.write(comma), state[0] = encodeInteger(writer, startLine, state[0]), encodeInteger(writer, startColumn, 0), encodeInteger(writer, kind, 0), encodeInteger(writer, 6 === scope.length ? 1 : 0, 0), 6 === scope.length && encodeInteger(writer, scope[5], 0);
            for (const v of vars) encodeInteger(writer, v, 0);
            for (index++; index < scopes.length; ) {
              const next = scopes[index], { 0: l2, 1: c4 } = next;
              if (l2 > endLine || l2 === endLine && c4 >= endColumn) break;
              index = _encodeOriginalScopes(scopes, index, writer, state);
            }
            return writer.write(comma), state[0] = encodeInteger(writer, endLine, state[0]), encodeInteger(writer, endColumn, 0), index;
          }
          function decodeGeneratedRanges(input) {
            const { length } = input, reader = new StringReader(input), ranges = [], stack = [];
            let genLine = 0, definitionSourcesIndex = 0, definitionScopeIndex = 0, callsiteSourcesIndex = 0, callsiteLine = 0, callsiteColumn = 0, bindingLine = 0, bindingColumn = 0;
            do {
              const semi = reader.indexOf(";");
              let genColumn = 0;
              for (; reader.pos < semi; reader.pos++) {
                if (genColumn = decodeInteger(reader, genColumn), !hasMoreVlq(reader, semi)) {
                  const last = stack.pop();
                  last[2] = genLine, last[3] = genColumn;
                  continue;
                }
                const fields = decodeInteger(reader, 0), hasCallsite = 2 & fields, hasScope = 4 & fields;
                let range, callsite = null, bindings = EMPTY;
                if (1 & fields) {
                  const defSourcesIndex = decodeInteger(reader, definitionSourcesIndex);
                  definitionScopeIndex = decodeInteger(reader, definitionSourcesIndex === defSourcesIndex ? definitionScopeIndex : 0), definitionSourcesIndex = defSourcesIndex, range = [genLine, genColumn, 0, 0, defSourcesIndex, definitionScopeIndex];
                } else range = [genLine, genColumn, 0, 0];
                if (range.isScope = !!hasScope, hasCallsite) {
                  const prevCsi = callsiteSourcesIndex, prevLine = callsiteLine;
                  callsiteSourcesIndex = decodeInteger(reader, callsiteSourcesIndex);
                  const sameSource = prevCsi === callsiteSourcesIndex;
                  callsiteLine = decodeInteger(reader, sameSource ? callsiteLine : 0), callsiteColumn = decodeInteger(reader, sameSource && prevLine === callsiteLine ? callsiteColumn : 0), callsite = [callsiteSourcesIndex, callsiteLine, callsiteColumn];
                }
                if (range.callsite = callsite, hasMoreVlq(reader, semi)) {
                  bindings = [];
                  do {
                    bindingLine = genLine, bindingColumn = genColumn;
                    const expressionsCount = decodeInteger(reader, 0);
                    let expressionRanges;
                    if (expressionsCount < -1) {
                      expressionRanges = [[decodeInteger(reader, 0)]];
                      for (let i2 = -1; i2 > expressionsCount; i2--) {
                        const prevBl = bindingLine;
                        bindingLine = decodeInteger(reader, bindingLine), bindingColumn = decodeInteger(reader, bindingLine === prevBl ? bindingColumn : 0);
                        const expression = decodeInteger(reader, 0);
                        expressionRanges.push([expression, bindingLine, bindingColumn]);
                      }
                    } else expressionRanges = [[expressionsCount]];
                    bindings.push(expressionRanges);
                  } while (hasMoreVlq(reader, semi));
                }
                range.bindings = bindings, ranges.push(range), stack.push(range);
              }
              genLine++, reader.pos = semi + 1;
            } while (reader.pos < length);
            return ranges;
          }
          function encodeGeneratedRanges(ranges) {
            if (0 === ranges.length) return "";
            const writer = new StringWriter();
            for (let i2 = 0; i2 < ranges.length; ) i2 = _encodeGeneratedRanges(ranges, i2, writer, [0, 0, 0, 0, 0, 0, 0]);
            return writer.flush();
          }
          function _encodeGeneratedRanges(ranges, index, writer, state) {
            const range = ranges[index], { 0: startLine, 1: startColumn, 2: endLine, 3: endColumn, isScope, callsite, bindings } = range;
            if (state[0] < startLine ? (catchupLine(writer, state[0], startLine), state[0] = startLine, state[1] = 0) : index > 0 && writer.write(comma), state[1] = encodeInteger(writer, range[1], state[1]), encodeInteger(writer, (6 === range.length ? 1 : 0) | (callsite ? 2 : 0) | (isScope ? 4 : 0), 0), 6 === range.length) {
              const { 4: sourcesIndex, 5: scopesIndex } = range;
              sourcesIndex !== state[2] && (state[3] = 0), state[2] = encodeInteger(writer, sourcesIndex, state[2]), state[3] = encodeInteger(writer, scopesIndex, state[3]);
            }
            if (callsite) {
              const { 0: sourcesIndex, 1: callLine, 2: callColumn } = range.callsite;
              sourcesIndex !== state[4] ? (state[5] = 0, state[6] = 0) : callLine !== state[5] && (state[6] = 0), state[4] = encodeInteger(writer, sourcesIndex, state[4]), state[5] = encodeInteger(writer, callLine, state[5]), state[6] = encodeInteger(writer, callColumn, state[6]);
            }
            if (bindings) for (const binding of bindings) {
              binding.length > 1 && encodeInteger(writer, -binding.length, 0), encodeInteger(writer, binding[0][0], 0);
              let bindingStartLine = startLine, bindingStartColumn = startColumn;
              for (let i2 = 1; i2 < binding.length; i2++) {
                const expRange = binding[i2];
                bindingStartLine = encodeInteger(writer, expRange[1], bindingStartLine), bindingStartColumn = encodeInteger(writer, expRange[2], bindingStartColumn), encodeInteger(writer, expRange[0], 0);
              }
            }
            for (index++; index < ranges.length; ) {
              const next = ranges[index], { 0: l2, 1: c4 } = next;
              if (l2 > endLine || l2 === endLine && c4 >= endColumn) break;
              index = _encodeGeneratedRanges(ranges, index, writer, state);
            }
            return state[0] < endLine ? (catchupLine(writer, state[0], endLine), state[0] = endLine, state[1] = 0) : writer.write(comma), state[1] = encodeInteger(writer, endColumn, state[1]), index;
          }
          function catchupLine(writer, lastLine, line) {
            do {
              writer.write(semicolon);
            } while (++lastLine < line);
          }
          function decode(mappings) {
            const { length } = mappings, reader = new StringReader(mappings), decoded = [];
            let genColumn = 0, sourcesIndex = 0, sourceLine = 0, sourceColumn = 0, namesIndex = 0;
            do {
              const semi = reader.indexOf(";"), line = [];
              let sorted = true, lastCol = 0;
              for (genColumn = 0; reader.pos < semi; ) {
                let seg;
                genColumn = decodeInteger(reader, genColumn), genColumn < lastCol && (sorted = false), lastCol = genColumn, hasMoreVlq(reader, semi) ? (sourcesIndex = decodeInteger(reader, sourcesIndex), sourceLine = decodeInteger(reader, sourceLine), sourceColumn = decodeInteger(reader, sourceColumn), hasMoreVlq(reader, semi) ? (namesIndex = decodeInteger(reader, namesIndex), seg = [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex]) : seg = [genColumn, sourcesIndex, sourceLine, sourceColumn]) : seg = [genColumn], line.push(seg), reader.pos++;
              }
              sorted || sort(line), decoded.push(line), reader.pos = semi + 1;
            } while (reader.pos <= length);
            return decoded;
          }
          function sort(line) {
            line.sort(sortComparator);
          }
          function sortComparator(a2, b2) {
            return a2[0] - b2[0];
          }
          function encode(decoded) {
            const writer = new StringWriter();
            let sourcesIndex = 0, sourceLine = 0, sourceColumn = 0, namesIndex = 0;
            for (let i2 = 0; i2 < decoded.length; i2++) {
              const line = decoded[i2];
              if (i2 > 0 && writer.write(semicolon), 0 === line.length) continue;
              let genColumn = 0;
              for (let j2 = 0; j2 < line.length; j2++) {
                const segment = line[j2];
                j2 > 0 && writer.write(comma), genColumn = encodeInteger(writer, segment[0], genColumn), 1 !== segment.length && (sourcesIndex = encodeInteger(writer, segment[1], sourcesIndex), sourceLine = encodeInteger(writer, segment[2], sourceLine), sourceColumn = encodeInteger(writer, segment[3], sourceColumn), 4 !== segment.length && (namesIndex = encodeInteger(writer, segment[4], namesIndex)));
              }
            }
            return writer.flush();
          }
          exports3.decode = decode, exports3.decodeGeneratedRanges = decodeGeneratedRanges, exports3.decodeOriginalScopes = decodeOriginalScopes, exports3.encode = encode, exports3.encodeGeneratedRanges = encodeGeneratedRanges, exports3.encodeOriginalScopes = encodeOriginalScopes, Object.defineProperty(exports3, "__esModule", { value: true });
        }(exports2);
      }, "./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.25/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js": function(__unused_webpack_module, exports2, __webpack_require__2) {
        !function(exports3, sourcemapCodec, resolveUri) {
          "use strict";
          function resolve(input, base) {
            return base && !base.endsWith("/") && (base += "/"), resolveUri(input, base);
          }
          function stripFilename(path9) {
            if (!path9) return "";
            const index = path9.lastIndexOf("/");
            return path9.slice(0, index + 1);
          }
          const COLUMN = 0, SOURCES_INDEX = 1, SOURCE_LINE = 2, SOURCE_COLUMN = 3, NAMES_INDEX = 4, REV_GENERATED_LINE = 1, REV_GENERATED_COLUMN = 2;
          function maybeSort(mappings, owned) {
            const unsortedIndex = nextUnsortedSegmentLine(mappings, 0);
            if (unsortedIndex === mappings.length) return mappings;
            owned || (mappings = mappings.slice());
            for (let i2 = unsortedIndex; i2 < mappings.length; i2 = nextUnsortedSegmentLine(mappings, i2 + 1)) mappings[i2] = sortSegments(mappings[i2], owned);
            return mappings;
          }
          function nextUnsortedSegmentLine(mappings, start) {
            for (let i2 = start; i2 < mappings.length; i2++) if (!isSorted(mappings[i2])) return i2;
            return mappings.length;
          }
          function isSorted(line) {
            for (let j2 = 1; j2 < line.length; j2++) if (line[j2][COLUMN] < line[j2 - 1][COLUMN]) return false;
            return true;
          }
          function sortSegments(line, owned) {
            return owned || (line = line.slice()), line.sort(sortComparator);
          }
          function sortComparator(a2, b2) {
            return a2[COLUMN] - b2[COLUMN];
          }
          let found = false;
          function binarySearch(haystack, needle, low, high) {
            for (; low <= high; ) {
              const mid = low + (high - low >> 1), cmp = haystack[mid][COLUMN] - needle;
              if (0 === cmp) return found = true, mid;
              cmp < 0 ? low = mid + 1 : high = mid - 1;
            }
            return found = false, low - 1;
          }
          function upperBound(haystack, needle, index) {
            for (let i2 = index + 1; i2 < haystack.length && haystack[i2][COLUMN] === needle; index = i2++) ;
            return index;
          }
          function lowerBound(haystack, needle, index) {
            for (let i2 = index - 1; i2 >= 0 && haystack[i2][COLUMN] === needle; index = i2--) ;
            return index;
          }
          function memoizedState() {
            return { lastKey: -1, lastNeedle: -1, lastIndex: -1 };
          }
          function memoizedBinarySearch(haystack, needle, state, key) {
            const { lastKey, lastNeedle, lastIndex } = state;
            let low = 0, high = haystack.length - 1;
            if (key === lastKey) {
              if (needle === lastNeedle) return found = -1 !== lastIndex && haystack[lastIndex][COLUMN] === needle, lastIndex;
              needle >= lastNeedle ? low = -1 === lastIndex ? 0 : lastIndex : high = lastIndex;
            }
            return state.lastKey = key, state.lastNeedle = needle, state.lastIndex = binarySearch(haystack, needle, low, high);
          }
          function buildBySources(decoded, memos) {
            const sources = memos.map(buildNullArray);
            for (let i2 = 0; i2 < decoded.length; i2++) {
              const line = decoded[i2];
              for (let j2 = 0; j2 < line.length; j2++) {
                const seg = line[j2];
                if (1 === seg.length) continue;
                const sourceIndex2 = seg[SOURCES_INDEX], sourceLine = seg[SOURCE_LINE], sourceColumn = seg[SOURCE_COLUMN], originalSource = sources[sourceIndex2], originalLine = originalSource[sourceLine] || (originalSource[sourceLine] = []), memo = memos[sourceIndex2];
                let index = upperBound(originalLine, sourceColumn, memoizedBinarySearch(originalLine, sourceColumn, memo, sourceLine));
                memo.lastIndex = ++index, insert(originalLine, index, [sourceColumn, i2, seg[COLUMN]]);
              }
            }
            return sources;
          }
          function insert(array, index, value2) {
            for (let i2 = array.length; i2 > index; i2--) array[i2] = array[i2 - 1];
            array[index] = value2;
          }
          function buildNullArray() {
            return { __proto__: null };
          }
          const AnyMap = function(map, mapUrl) {
            const parsed = parse(map);
            if (!("sections" in parsed)) return new TraceMap(parsed, mapUrl);
            const mappings = [], sources = [], sourcesContent = [], names = [], ignoreList = [];
            return recurse(parsed, mapUrl, mappings, sources, sourcesContent, names, ignoreList, 0, 0, 1 / 0, 1 / 0), presortedDecodedMap({ version: 3, file: parsed.file, names, sources, sourcesContent, mappings, ignoreList });
          };
          function parse(map) {
            return "string" == typeof map ? JSON.parse(map) : map;
          }
          function recurse(input, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset, columnOffset, stopLine, stopColumn) {
            const { sections } = input;
            for (let i2 = 0; i2 < sections.length; i2++) {
              const { map, offset } = sections[i2];
              let sl = stopLine, sc = stopColumn;
              if (i2 + 1 < sections.length) {
                const nextOffset = sections[i2 + 1].offset;
                sl = Math.min(stopLine, lineOffset + nextOffset.line), sl === stopLine ? sc = Math.min(stopColumn, columnOffset + nextOffset.column) : sl < stopLine && (sc = columnOffset + nextOffset.column);
              }
              addSection(map, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset + offset.line, columnOffset + offset.column, sl, sc);
            }
          }
          function addSection(input, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset, columnOffset, stopLine, stopColumn) {
            const parsed = parse(input);
            if ("sections" in parsed) return recurse(...arguments);
            const map = new TraceMap(parsed, mapUrl), sourcesOffset = sources.length, namesOffset = names.length, decoded = decodedMappings(map), { resolvedSources, sourcesContent: contents, ignoreList: ignores } = map;
            if (append(sources, resolvedSources), append(names, map.names), contents) append(sourcesContent, contents);
            else for (let i2 = 0; i2 < resolvedSources.length; i2++) sourcesContent.push(null);
            if (ignores) for (let i2 = 0; i2 < ignores.length; i2++) ignoreList.push(ignores[i2] + sourcesOffset);
            for (let i2 = 0; i2 < decoded.length; i2++) {
              const lineI = lineOffset + i2;
              if (lineI > stopLine) return;
              const out = getLine(mappings, lineI), cOffset = 0 === i2 ? columnOffset : 0, line = decoded[i2];
              for (let j2 = 0; j2 < line.length; j2++) {
                const seg = line[j2], column = cOffset + seg[COLUMN];
                if (lineI === stopLine && column >= stopColumn) return;
                if (1 === seg.length) {
                  out.push([column]);
                  continue;
                }
                const sourcesIndex = sourcesOffset + seg[SOURCES_INDEX], sourceLine = seg[SOURCE_LINE], sourceColumn = seg[SOURCE_COLUMN];
                out.push(4 === seg.length ? [column, sourcesIndex, sourceLine, sourceColumn] : [column, sourcesIndex, sourceLine, sourceColumn, namesOffset + seg[NAMES_INDEX]]);
              }
            }
          }
          function append(arr, other) {
            for (let i2 = 0; i2 < other.length; i2++) arr.push(other[i2]);
          }
          function getLine(arr, index) {
            for (let i2 = arr.length; i2 <= index; i2++) arr[i2] = [];
            return arr[index];
          }
          const LINE_GTR_ZERO = "`line` must be greater than 0 (lines start at line 1)", COL_GTR_EQ_ZERO = "`column` must be greater than or equal to 0 (columns start at column 0)", LEAST_UPPER_BOUND = -1, GREATEST_LOWER_BOUND = 1;
          class TraceMap {
            constructor(map, mapUrl) {
              const isString = "string" == typeof map;
              if (!isString && map._decodedMemo) return map;
              const parsed = isString ? JSON.parse(map) : map, { version, file, names, sourceRoot, sources, sourcesContent } = parsed;
              this.version = version, this.file = file, this.names = names || [], this.sourceRoot = sourceRoot, this.sources = sources, this.sourcesContent = sourcesContent, this.ignoreList = parsed.ignoreList || parsed.x_google_ignoreList || void 0;
              const from = resolve(sourceRoot || "", stripFilename(mapUrl));
              this.resolvedSources = sources.map((s) => resolve(s || "", from));
              const { mappings } = parsed;
              "string" == typeof mappings ? (this._encoded = mappings, this._decoded = void 0) : (this._encoded = void 0, this._decoded = maybeSort(mappings, isString)), this._decodedMemo = memoizedState(), this._bySources = void 0, this._bySourceMemos = void 0;
            }
          }
          function cast(map) {
            return map;
          }
          function encodedMappings(map) {
            var _a, _b;
            return null !== (_a = (_b = cast(map))._encoded) && void 0 !== _a ? _a : _b._encoded = sourcemapCodec.encode(cast(map)._decoded);
          }
          function decodedMappings(map) {
            var _a;
            return (_a = cast(map))._decoded || (_a._decoded = sourcemapCodec.decode(cast(map)._encoded));
          }
          function traceSegment(map, line, column) {
            const decoded = decodedMappings(map);
            if (line >= decoded.length) return null;
            const segments = decoded[line], index = traceSegmentInternal(segments, cast(map)._decodedMemo, line, column, GREATEST_LOWER_BOUND);
            return -1 === index ? null : segments[index];
          }
          function originalPositionFor(map, needle) {
            let { line, column, bias } = needle;
            if (line--, line < 0) throw new Error(LINE_GTR_ZERO);
            if (column < 0) throw new Error(COL_GTR_EQ_ZERO);
            const decoded = decodedMappings(map);
            if (line >= decoded.length) return OMapping(null, null, null, null);
            const segments = decoded[line], index = traceSegmentInternal(segments, cast(map)._decodedMemo, line, column, bias || GREATEST_LOWER_BOUND);
            if (-1 === index) return OMapping(null, null, null, null);
            const segment = segments[index];
            if (1 === segment.length) return OMapping(null, null, null, null);
            const { names, resolvedSources } = map;
            return OMapping(resolvedSources[segment[SOURCES_INDEX]], segment[SOURCE_LINE] + 1, segment[SOURCE_COLUMN], 5 === segment.length ? names[segment[NAMES_INDEX]] : null);
          }
          function generatedPositionFor(map, needle) {
            const { source, line, column, bias } = needle;
            return generatedPosition(map, source, line, column, bias || GREATEST_LOWER_BOUND, false);
          }
          function allGeneratedPositionsFor(map, needle) {
            const { source, line, column, bias } = needle;
            return generatedPosition(map, source, line, column, bias || LEAST_UPPER_BOUND, true);
          }
          function eachMapping(map, cb) {
            const decoded = decodedMappings(map), { names, resolvedSources } = map;
            for (let i2 = 0; i2 < decoded.length; i2++) {
              const line = decoded[i2];
              for (let j2 = 0; j2 < line.length; j2++) {
                const seg = line[j2], generatedLine = i2 + 1, generatedColumn = seg[0];
                let source = null, originalLine = null, originalColumn = null, name = null;
                1 !== seg.length && (source = resolvedSources[seg[1]], originalLine = seg[2] + 1, originalColumn = seg[3]), 5 === seg.length && (name = names[seg[4]]), cb({ generatedLine, generatedColumn, source, originalLine, originalColumn, name });
              }
            }
          }
          function sourceIndex(map, source) {
            const { sources, resolvedSources } = map;
            let index = sources.indexOf(source);
            return -1 === index && (index = resolvedSources.indexOf(source)), index;
          }
          function sourceContentFor(map, source) {
            const { sourcesContent } = map;
            if (null == sourcesContent) return null;
            const index = sourceIndex(map, source);
            return -1 === index ? null : sourcesContent[index];
          }
          function isIgnored(map, source) {
            const { ignoreList } = map;
            if (null == ignoreList) return false;
            const index = sourceIndex(map, source);
            return -1 !== index && ignoreList.includes(index);
          }
          function presortedDecodedMap(map, mapUrl) {
            const tracer = new TraceMap(clone(map, []), mapUrl);
            return cast(tracer)._decoded = map.mappings, tracer;
          }
          function decodedMap(map) {
            return clone(map, decodedMappings(map));
          }
          function encodedMap(map) {
            return clone(map, encodedMappings(map));
          }
          function clone(map, mappings) {
            return { version: map.version, file: map.file, names: map.names, sourceRoot: map.sourceRoot, sources: map.sources, sourcesContent: map.sourcesContent, mappings, ignoreList: map.ignoreList || map.x_google_ignoreList };
          }
          function OMapping(source, line, column, name) {
            return { source, line, column, name };
          }
          function GMapping(line, column) {
            return { line, column };
          }
          function traceSegmentInternal(segments, memo, line, column, bias) {
            let index = memoizedBinarySearch(segments, column, memo, line);
            return found ? index = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index) : bias === LEAST_UPPER_BOUND && index++, -1 === index || index === segments.length ? -1 : index;
          }
          function sliceGeneratedPositions(segments, memo, line, column, bias) {
            let min = traceSegmentInternal(segments, memo, line, column, GREATEST_LOWER_BOUND);
            if (found || bias !== LEAST_UPPER_BOUND || min++, -1 === min || min === segments.length) return [];
            const matchedColumn = found ? column : segments[min][COLUMN];
            found || (min = lowerBound(segments, matchedColumn, min));
            const max = upperBound(segments, matchedColumn, min), result = [];
            for (; min <= max; min++) {
              const segment = segments[min];
              result.push(GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]));
            }
            return result;
          }
          function generatedPosition(map, source, line, column, bias, all) {
            var _a;
            if (--line < 0) throw new Error(LINE_GTR_ZERO);
            if (column < 0) throw new Error(COL_GTR_EQ_ZERO);
            const { sources, resolvedSources } = map;
            let sourceIndex2 = sources.indexOf(source);
            if (-1 === sourceIndex2 && (sourceIndex2 = resolvedSources.indexOf(source)), -1 === sourceIndex2) return all ? [] : GMapping(null, null);
            const segments = ((_a = cast(map))._bySources || (_a._bySources = buildBySources(decodedMappings(map), cast(map)._bySourceMemos = sources.map(memoizedState))))[sourceIndex2][line];
            if (null == segments) return all ? [] : GMapping(null, null);
            const memo = cast(map)._bySourceMemos[sourceIndex2];
            if (all) return sliceGeneratedPositions(segments, memo, line, column, bias);
            const index = traceSegmentInternal(segments, memo, line, column, bias);
            if (-1 === index) return GMapping(null, null);
            const segment = segments[index];
            return GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]);
          }
          exports3.AnyMap = AnyMap, exports3.GREATEST_LOWER_BOUND = GREATEST_LOWER_BOUND, exports3.LEAST_UPPER_BOUND = LEAST_UPPER_BOUND, exports3.TraceMap = TraceMap, exports3.allGeneratedPositionsFor = allGeneratedPositionsFor, exports3.decodedMap = decodedMap, exports3.decodedMappings = decodedMappings, exports3.eachMapping = eachMapping, exports3.encodedMap = encodedMap, exports3.encodedMappings = encodedMappings, exports3.generatedPositionFor = generatedPositionFor, exports3.isIgnored = isIgnored, exports3.originalPositionFor = originalPositionFor, exports3.presortedDecodedMap = presortedDecodedMap, exports3.sourceContentFor = sourceContentFor, exports3.traceSegment = traceSegment;
        }(exports2, __webpack_require__2("./node_modules/.pnpm/@jridgewell+sourcemap-codec@1.5.0/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js"), __webpack_require__2("./node_modules/.pnpm/@jridgewell+resolve-uri@3.1.2/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js"));
      }, "./node_modules/.pnpm/babel-plugin-dynamic-import-node@2.3.3/node_modules/babel-plugin-dynamic-import-node/lib/index.js": (module2, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(api) {
          var transformImport = (0, _utils.createDynamicImportTransform)(api);
          return { manipulateOptions: function(opts, parserOpts) {
            parserOpts.plugins.push("dynamicImport");
          }, visitor: { Import: function(path9) {
            transformImport(this, path9);
          } } };
        };
        var _utils = __webpack_require__2("./node_modules/.pnpm/babel-plugin-dynamic-import-node@2.3.3/node_modules/babel-plugin-dynamic-import-node/lib/utils.js");
        module2.exports = exports2.default;
      }, "./node_modules/.pnpm/babel-plugin-dynamic-import-node@2.3.3/node_modules/babel-plugin-dynamic-import-node/lib/utils.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var _slicedToArray = function(arr, i2) {
          if (Array.isArray(arr)) return arr;
          if (Symbol.iterator in Object(arr)) return function(arr2, i3) {
            var _arr = [], _n = true, _d = false, _e = void 0;
            try {
              for (var _s, _i = arr2[Symbol.iterator](); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !i3 || _arr.length !== i3); _n = true) ;
            } catch (err) {
              _d = true, _e = err;
            } finally {
              try {
                !_n && _i.return && _i.return();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          }(arr, i2);
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        };
        function getImportSource(t2, callNode) {
          var importArguments = callNode.arguments, importPath = _slicedToArray(importArguments, 1)[0];
          return t2.isStringLiteral(importPath) || t2.isTemplateLiteral(importPath) ? (t2.removeComments(importPath), importPath) : t2.templateLiteral([t2.templateElement({ raw: "", cooked: "" }), t2.templateElement({ raw: "", cooked: "" }, true)], importArguments);
        }
        exports2.getImportSource = getImportSource, exports2.createDynamicImportTransform = function(_ref) {
          var template = _ref.template, t2 = _ref.types, builders = { static: { interop: template("Promise.resolve().then(() => INTEROP(require(SOURCE)))"), noInterop: template("Promise.resolve().then(() => require(SOURCE))") }, dynamic: { interop: template("Promise.resolve(SOURCE).then(s => INTEROP(require(s)))"), noInterop: template("Promise.resolve(SOURCE).then(s => require(s))") } }, visited = "function" == typeof WeakSet && /* @__PURE__ */ new WeakSet();
          return function(context, path9) {
            if (visited) {
              if (visited.has(path9)) return;
              visited.add(path9);
            }
            var node, SOURCE = getImportSource(t2, path9.parent), builder = (node = SOURCE, t2.isStringLiteral(node) || t2.isTemplateLiteral(node) && 0 === node.expressions.length ? builders.static : builders.dynamic), newImport = context.opts.noInterop ? builder.noInterop({ SOURCE }) : builder.interop({ SOURCE, INTEROP: context.addHelper("interopRequireWildcard") });
            path9.parentPath.replaceWith(newImport);
          };
        };
      }, "./node_modules/.pnpm/babel-plugin-parameter-decorator@1.0.16/node_modules/babel-plugin-parameter-decorator/lib/index.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _path = __webpack_require__2("path");
        function isInType(path9) {
          switch (path9.parent.type) {
            case "TSTypeReference":
            case "TSQualifiedName":
            case "TSExpressionWithTypeArguments":
            case "TSTypeQuery":
              return true;
            default:
              return false;
          }
        }
        module2.exports = function(_ref) {
          var types = _ref.types, decoratorExpressionForConstructor = function(decorator, param) {
            return function(className) {
              var resultantDecorator = types.callExpression(decorator.expression, [types.Identifier(className), types.Identifier("undefined"), types.NumericLiteral(param.key)]), resultantDecoratorWithFallback = types.logicalExpression("||", resultantDecorator, types.Identifier(className)), assignment = types.assignmentExpression("=", types.Identifier(className), resultantDecoratorWithFallback);
              return types.expressionStatement(assignment);
            };
          }, decoratorExpressionForMethod = function(decorator, param) {
            return function(className, functionName) {
              var resultantDecorator = types.callExpression(decorator.expression, [types.Identifier("".concat(className, ".prototype")), types.StringLiteral(functionName), types.NumericLiteral(param.key)]);
              return types.expressionStatement(resultantDecorator);
            };
          };
          return { visitor: { Program: function(path9, state) {
            var extension = (0, _path.extname)(state.file.opts.filename);
            ".ts" !== extension && ".tsx" !== extension || function() {
              var decorators = /* @__PURE__ */ Object.create(null);
              path9.node.body.filter(function(it) {
                var type = it.type, declaration = it.declaration;
                switch (type) {
                  case "ClassDeclaration":
                    return true;
                  case "ExportNamedDeclaration":
                  case "ExportDefaultDeclaration":
                    return declaration && "ClassDeclaration" === declaration.type;
                  default:
                    return false;
                }
              }).map(function(it) {
                return "ClassDeclaration" === it.type ? it : it.declaration;
              }).forEach(function(clazz) {
                clazz.body.body.forEach(function(body) {
                  (body.params || []).forEach(function(param) {
                    (param.decorators || []).forEach(function(decorator) {
                      decorator.expression.callee ? decorators[decorator.expression.callee.name] = decorator : decorators[decorator.expression.name] = decorator;
                    });
                  });
                });
              });
              var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = void 0;
              try {
                for (var _step, _iterator = path9.get("body")[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var stmt = _step.value;
                  if ("ImportDeclaration" === stmt.node.type) {
                    if (0 === stmt.node.specifiers.length) continue;
                    var _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = void 0;
                    try {
                      for (var _step2, _loop = function() {
                        var specifier = _step2.value, binding = stmt.scope.getBinding(specifier.local.name);
                        binding.referencePaths.length ? binding.referencePaths.reduce(function(prev, next) {
                          return prev || isInType(next);
                        }, false) && Object.keys(decorators).forEach(function(k3) {
                          var decorator = decorators[k3];
                          (decorator.expression.arguments || []).forEach(function(arg) {
                            arg.name === specifier.local.name && binding.referencePaths.push({ parent: decorator.expression });
                          });
                        }) : decorators[specifier.local.name] && binding.referencePaths.push({ parent: decorators[specifier.local.name] });
                      }, _iterator2 = stmt.node.specifiers[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) _loop();
                    } catch (err) {
                      _didIteratorError2 = true, _iteratorError2 = err;
                    } finally {
                      try {
                        _iteratorNormalCompletion2 || null == _iterator2.return || _iterator2.return();
                      } finally {
                        if (_didIteratorError2) throw _iteratorError2;
                      }
                    }
                  }
                }
              } catch (err) {
                _didIteratorError = true, _iteratorError = err;
              } finally {
                try {
                  _iteratorNormalCompletion || null == _iterator.return || _iterator.return();
                } finally {
                  if (_didIteratorError) throw _iteratorError;
                }
              }
            }();
          }, Function: function(path9) {
            var functionName = "";
            path9.node.id ? functionName = path9.node.id.name : path9.node.key && (functionName = path9.node.key.name), (path9.get("params") || []).slice().forEach(function(param) {
              var decorators = param.node.decorators || [], transformable = decorators.length;
              if (decorators.slice().forEach(function(decorator) {
                if ("ClassMethod" === path9.type) {
                  var classIdentifier, parentNode = path9.parentPath.parentPath, classDeclaration = path9.findParent(function(p) {
                    return "ClassDeclaration" === p.type;
                  });
                  if (classDeclaration ? classIdentifier = classDeclaration.node.id.name : (parentNode.insertAfter(null), classIdentifier = function(path10) {
                    var assignment = path10.findParent(function(p) {
                      return "AssignmentExpression" === p.node.type;
                    });
                    return "SequenceExpression" === assignment.node.right.type ? assignment.node.right.expressions[1].name : "ClassExpression" === assignment.node.right.type ? assignment.node.left.name : null;
                  }(path9)), "constructor" === functionName) {
                    var expression = decoratorExpressionForConstructor(decorator, param)(classIdentifier);
                    parentNode.insertAfter(expression);
                  } else {
                    var _expression = decoratorExpressionForMethod(decorator, param)(classIdentifier, functionName);
                    parentNode.insertAfter(_expression);
                  }
                } else {
                  var className = path9.findParent(function(p) {
                    return "VariableDeclarator" === p.node.type;
                  }).node.id.name;
                  if (functionName === className) {
                    var _expression2 = decoratorExpressionForConstructor(decorator, param)(className);
                    if ("body" === path9.parentKey) path9.insertAfter(_expression2);
                    else path9.findParent(function(p) {
                      return "body" === p.parentKey;
                    }).insertAfter(_expression2);
                  } else {
                    var classParent = path9.findParent(function(p) {
                      return "CallExpression" === p.node.type;
                    }), _expression3 = decoratorExpressionForMethod(decorator, param)(className, functionName);
                    classParent.insertAfter(_expression3);
                  }
                }
              }), transformable) {
                var replacement = function(path10) {
                  switch (path10.node.type) {
                    case "ObjectPattern":
                      return types.ObjectPattern(path10.node.properties);
                    case "AssignmentPattern":
                      return types.AssignmentPattern(path10.node.left, path10.node.right);
                    case "TSParameterProperty":
                      return types.Identifier(path10.node.parameter.name);
                    default:
                      return types.Identifier(path10.node.name);
                  }
                }(param);
                param.replaceWith(replacement);
              }
            });
          } } };
        };
      }, "./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2_@babel+core@7.26.0_@babel+traverse@7.26.4/node_modules/babel-plugin-transform-typescript-metadata/lib/metadata/metadataVisitor.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.metadataVisitor = function(classPath, path9) {
          const field = path9.node, classNode = classPath.node;
          switch (field.type) {
            case "ClassMethod":
              const decorators = "constructor" === field.kind ? classNode.decorators : field.decorators;
              if (!decorators || 0 === decorators.length) return;
              decorators.push(createMetadataDesignDecorator("design:type", _core.types.identifier("Function"))), decorators.push(createMetadataDesignDecorator("design:paramtypes", _core.types.arrayExpression(field.params.map((param) => (0, _serializeType.serializeType)(classPath, param)))));
              break;
            case "ClassProperty":
              if (!field.decorators || 0 === field.decorators.length) return;
              if (!field.typeAnnotation || "TSTypeAnnotation" !== field.typeAnnotation.type) return;
              field.decorators.push(createMetadataDesignDecorator("design:type", (0, _serializeType.serializeType)(classPath, field)));
          }
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _serializeType = __webpack_require__2("./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2_@babel+core@7.26.0_@babel+traverse@7.26.4/node_modules/babel-plugin-transform-typescript-metadata/lib/metadata/serializeType.js");
        function createMetadataDesignDecorator(design, typeArg) {
          return _core.types.decorator(_core.types.callExpression(_core.types.memberExpression(_core.types.identifier("Reflect"), _core.types.identifier("metadata")), [_core.types.stringLiteral(design), typeArg]));
        }
      }, "./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2_@babel+core@7.26.0_@babel+traverse@7.26.4/node_modules/babel-plugin-transform-typescript-metadata/lib/metadata/serializeType.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.serializeType = function(classPath, param) {
          const node = getTypedNode(param);
          if (null == node) return createVoidZero();
          if (!node.typeAnnotation || "TSTypeAnnotation" !== node.typeAnnotation.type) return createVoidZero();
          const annotation = node.typeAnnotation.typeAnnotation;
          return serializeTypeNode(classPath.node.id ? classPath.node.id.name : "", annotation);
        }, exports2.isClassType = isClassType;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
        function createVoidZero() {
          return _core.types.unaryExpression("void", _core.types.numericLiteral(0));
        }
        function getTypedNode(param) {
          return null == param ? null : "ClassProperty" === param.type || "Identifier" === param.type || "ObjectPattern" === param.type ? param : "AssignmentPattern" === param.type && "Identifier" === param.left.type ? param.left : "TSParameterProperty" === param.type ? getTypedNode(param.parameter) : null;
        }
        function serializeTypeReferenceNode(className, node) {
          const reference = serializeReference(node.typeName);
          return isClassType(className, reference) ? _core.types.identifier("Object") : _core.types.conditionalExpression(_core.types.binaryExpression("===", _core.types.unaryExpression("typeof", reference), _core.types.stringLiteral("undefined")), _core.types.identifier("Object"), _core.types.cloneDeep(reference));
        }
        function isClassType(className, node) {
          switch (node.type) {
            case "Identifier":
              return node.name === className;
            case "MemberExpression":
              return isClassType(className, node.object);
            default:
              throw new Error(`The property expression at ${node.start} is not valid as a Type to be used in Reflect.metadata`);
          }
        }
        function serializeReference(typeName) {
          return "Identifier" === typeName.type ? _core.types.identifier(typeName.name) : _core.types.memberExpression(serializeReference(typeName.left), typeName.right);
        }
        function serializeTypeNode(className, node) {
          if (void 0 === node) return _core.types.identifier("Object");
          switch (node.type) {
            case "TSVoidKeyword":
            case "TSUndefinedKeyword":
            case "TSNullKeyword":
            case "TSNeverKeyword":
              return createVoidZero();
            case "TSParenthesizedType":
              return serializeTypeNode(className, node.typeAnnotation);
            case "TSFunctionType":
            case "TSConstructorType":
              return _core.types.identifier("Function");
            case "TSArrayType":
            case "TSTupleType":
              return _core.types.identifier("Array");
            case "TSTypePredicate":
            case "TSBooleanKeyword":
              return _core.types.identifier("Boolean");
            case "TSStringKeyword":
              return _core.types.identifier("String");
            case "TSObjectKeyword":
              return _core.types.identifier("Object");
            case "TSLiteralType":
              switch (node.literal.type) {
                case "StringLiteral":
                  return _core.types.identifier("String");
                case "NumericLiteral":
                  return _core.types.identifier("Number");
                case "BooleanLiteral":
                  return _core.types.identifier("Boolean");
                default:
                  throw new Error("Bad type for decorator" + node.literal);
              }
            case "TSNumberKeyword":
            case "TSBigIntKeyword":
              return _core.types.identifier("Number");
            case "TSSymbolKeyword":
              return _core.types.identifier("Symbol");
            case "TSTypeReference":
              return serializeTypeReferenceNode(className, node);
            case "TSIntersectionType":
            case "TSUnionType":
              return serializeTypeList(className, node.types);
            case "TSConditionalType":
              return serializeTypeList(className, [node.trueType, node.falseType]);
            case "TSTypeQuery":
            case "TSTypeOperator":
            case "TSIndexedAccessType":
            case "TSMappedType":
            case "TSTypeLiteral":
            case "TSAnyKeyword":
            case "TSUnknownKeyword":
            case "TSThisType":
              break;
            default:
              throw new Error("Bad type for decorator");
          }
          return _core.types.identifier("Object");
        }
        function serializeTypeList(className, types) {
          let serializedUnion;
          for (let typeNode of types) {
            for (; "TSParenthesizedType" === typeNode.type; ) typeNode = typeNode.typeAnnotation;
            if ("TSNeverKeyword" === typeNode.type) continue;
            if ("TSNullKeyword" === typeNode.type || "TSUndefinedKeyword" === typeNode.type) continue;
            const serializedIndividual = serializeTypeNode(className, typeNode);
            if (_core.types.isIdentifier(serializedIndividual) && "Object" === serializedIndividual.name) return serializedIndividual;
            if (serializedUnion) {
              if (!_core.types.isIdentifier(serializedUnion) || !_core.types.isIdentifier(serializedIndividual) || serializedUnion.name !== serializedIndividual.name) return _core.types.identifier("Object");
            } else serializedUnion = serializedIndividual;
          }
          return serializedUnion || createVoidZero();
        }
      }, "./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2_@babel+core@7.26.0_@babel+traverse@7.26.4/node_modules/babel-plugin-transform-typescript-metadata/lib/parameter/parameterVisitor.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.parameterVisitor = function(classPath, path9) {
          if ("ClassMethod" !== path9.type) return;
          if ("ClassMethod" !== path9.node.type) return;
          if ("Identifier" !== path9.node.key.type) return;
          const methodPath = path9;
          (methodPath.get("params") || []).slice().forEach(function(param) {
            let resultantDecorator;
            null != ("Identifier" === param.node.type || "ObjectPattern" === param.node.type ? param.node : "TSParameterProperty" === param.node.type && "Identifier" === param.node.parameter.type ? param.node.parameter : null) && ((param.node.decorators || []).slice().forEach(function(decorator) {
              "constructor" === methodPath.node.kind ? (resultantDecorator = createParamDecorator(param.key, decorator.expression, true), classPath.node.decorators || (classPath.node.decorators = []), classPath.node.decorators.push(resultantDecorator)) : (resultantDecorator = createParamDecorator(param.key, decorator.expression, false), methodPath.node.decorators || (methodPath.node.decorators = []), methodPath.node.decorators.push(resultantDecorator));
            }), resultantDecorator && (param.node.decorators = null));
          });
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
        function createParamDecorator(paramIndex, decoratorExpression, isConstructor = false) {
          return _core.types.decorator(_core.types.functionExpression(null, [_core.types.identifier("target"), _core.types.identifier("key")], _core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(decoratorExpression, [_core.types.identifier("target"), _core.types.identifier(isConstructor ? "undefined" : "key"), _core.types.numericLiteral(paramIndex)]))])));
        }
      }, "./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2_@babel+core@7.26.0_@babel+traverse@7.26.4/node_modules/babel-plugin-transform-typescript-metadata/lib/plugin.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), _parameterVisitor = __webpack_require__2("./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2_@babel+core@7.26.0_@babel+traverse@7.26.4/node_modules/babel-plugin-transform-typescript-metadata/lib/parameter/parameterVisitor.js"), _metadataVisitor = __webpack_require__2("./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2_@babel+core@7.26.0_@babel+traverse@7.26.4/node_modules/babel-plugin-transform-typescript-metadata/lib/metadata/metadataVisitor.js"), _default = (0, _helperPluginUtils.declare)((api) => (api.assertVersion(7), { visitor: { Program(programPath) {
          programPath.traverse({ ClassDeclaration(path9) {
            for (const field of path9.get("body").get("body")) "ClassMethod" !== field.type && "ClassProperty" !== field.type || ((0, _parameterVisitor.parameterVisitor)(path9, field), (0, _metadataVisitor.metadataVisitor)(path9, field));
            path9.parentPath.scope.crawl();
          } });
        } } }));
        exports2.default = _default;
      }, "./node_modules/.pnpm/convert-source-map@2.0.0/node_modules/convert-source-map/index.js": (__unused_webpack_module, exports2) => {
        "use strict";
        var decodeBase64;
        function Converter(sm, opts) {
          (opts = opts || {}).hasComment && (sm = function(sm2) {
            return sm2.split(",").pop();
          }(sm)), "base64" === opts.encoding ? sm = decodeBase64(sm) : "uri" === opts.encoding && (sm = decodeURIComponent(sm)), (opts.isJSON || opts.encoding) && (sm = JSON.parse(sm)), this.sourcemap = sm;
        }
        function makeConverter(sm) {
          return new Converter(sm, { isJSON: true });
        }
        Object.defineProperty(exports2, "commentRegex", { get: function() {
          return /^\s*?\/[\/\*][@#]\s+?sourceMappingURL=data:(((?:application|text)\/json)(?:;charset=([^;,]+?)?)?)?(?:;(base64))?,(.*?)$/gm;
        } }), Object.defineProperty(exports2, "mapFileCommentRegex", { get: function() {
          return /(?:\/\/[@#][ \t]+?sourceMappingURL=([^\s'"`]+?)[ \t]*?$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^*]+?)[ \t]*?(?:\*\/){1}[ \t]*?$)/gm;
        } }), decodeBase64 = "undefined" != typeof Buffer ? "function" == typeof Buffer.from ? function(base64) {
          return Buffer.from(base64, "base64").toString();
        } : function(base64) {
          if ("number" == typeof value) throw new TypeError("The value to decode must not be of type number.");
          return new Buffer(base64, "base64").toString();
        } : function(base64) {
          return decodeURIComponent(escape(atob(base64)));
        }, Converter.prototype.toJSON = function(space) {
          return JSON.stringify(this.sourcemap, null, space);
        }, "undefined" != typeof Buffer ? "function" == typeof Buffer.from ? Converter.prototype.toBase64 = function() {
          var json = this.toJSON();
          return Buffer.from(json, "utf8").toString("base64");
        } : Converter.prototype.toBase64 = function() {
          var json = this.toJSON();
          if ("number" == typeof json) throw new TypeError("The json to encode must not be of type number.");
          return new Buffer(json, "utf8").toString("base64");
        } : Converter.prototype.toBase64 = function() {
          var json = this.toJSON();
          return btoa(unescape(encodeURIComponent(json)));
        }, Converter.prototype.toURI = function() {
          var json = this.toJSON();
          return encodeURIComponent(json);
        }, Converter.prototype.toComment = function(options) {
          var encoding, content, data;
          return null != options && "uri" === options.encoding ? (encoding = "", content = this.toURI()) : (encoding = ";base64", content = this.toBase64()), data = "sourceMappingURL=data:application/json;charset=utf-8" + encoding + "," + content, null != options && options.multiline ? "/*# " + data + " */" : "//# " + data;
        }, Converter.prototype.toObject = function() {
          return JSON.parse(this.toJSON());
        }, Converter.prototype.addProperty = function(key, value2) {
          if (this.sourcemap.hasOwnProperty(key)) throw new Error('property "' + key + '" already exists on the sourcemap, use set property instead');
          return this.setProperty(key, value2);
        }, Converter.prototype.setProperty = function(key, value2) {
          return this.sourcemap[key] = value2, this;
        }, Converter.prototype.getProperty = function(key) {
          return this.sourcemap[key];
        }, exports2.fromObject = function(obj) {
          return new Converter(obj);
        }, exports2.fromJSON = function(json) {
          return new Converter(json, { isJSON: true });
        }, exports2.fromURI = function(uri) {
          return new Converter(uri, { encoding: "uri" });
        }, exports2.fromBase64 = function(base64) {
          return new Converter(base64, { encoding: "base64" });
        }, exports2.fromComment = function(comment) {
          var m2;
          return new Converter(comment = comment.replace(/^\/\*/g, "//").replace(/\*\/$/g, ""), { encoding: (m2 = exports2.commentRegex.exec(comment)) && m2[4] || "uri", hasComment: true });
        }, exports2.fromMapFileComment = function(comment, read) {
          if ("string" == typeof read) throw new Error("String directory paths are no longer supported with `fromMapFileComment`\nPlease review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading");
          var sm = function(sm2, read2) {
            var r2 = exports2.mapFileCommentRegex.exec(sm2), filename = r2[1] || r2[2];
            try {
              return null != (sm2 = read2(filename)) && "function" == typeof sm2.catch ? sm2.catch(throwError) : sm2;
            } catch (e2) {
              throwError(e2);
            }
            function throwError(e2) {
              throw new Error("An error occurred while trying to read the map file at " + filename + "\n" + e2.stack);
            }
          }(comment, read);
          return null != sm && "function" == typeof sm.then ? sm.then(makeConverter) : makeConverter(sm);
        }, exports2.fromSource = function(content) {
          var m2 = content.match(exports2.commentRegex);
          return m2 ? exports2.fromComment(m2.pop()) : null;
        }, exports2.fromMapFileSource = function(content, read) {
          if ("string" == typeof read) throw new Error("String directory paths are no longer supported with `fromMapFileSource`\nPlease review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading");
          var m2 = content.match(exports2.mapFileCommentRegex);
          return m2 ? exports2.fromMapFileComment(m2.pop(), read) : null;
        }, exports2.removeComments = function(src) {
          return src.replace(exports2.commentRegex, "");
        }, exports2.removeMapFileComments = function(src) {
          return src.replace(exports2.mapFileCommentRegex, "");
        }, exports2.generateMapFileComment = function(file, options) {
          var data = "sourceMappingURL=" + file;
          return options && options.multiline ? "/*# " + data + " */" : "//# " + data;
        };
      }, "./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/browser.js": (module2, exports2, __webpack_require__2) => {
        exports2.formatArgs = function(args) {
          if (args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module2.exports.humanize(this.diff), !this.useColors) return;
          const c4 = "color: " + this.color;
          args.splice(1, 0, c4, "color: inherit");
          let index = 0, lastC = 0;
          args[0].replace(/%[a-zA-Z%]/g, (match) => {
            "%%" !== match && (index++, "%c" === match && (lastC = index));
          }), args.splice(lastC, 0, c4);
        }, exports2.save = function(namespaces) {
          try {
            namespaces ? exports2.storage.setItem("debug", namespaces) : exports2.storage.removeItem("debug");
          } catch (error) {
          }
        }, exports2.load = function() {
          let r2;
          try {
            r2 = exports2.storage.getItem("debug");
          } catch (error) {
          }
          !r2 && "undefined" != typeof process && "env" in process && (r2 = process.env.DEBUG);
          return r2;
        }, exports2.useColors = function() {
          if ("undefined" != typeof window && window.process && ("renderer" === window.process.type || window.process.__nwjs)) return true;
          if ("undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) return false;
          let m2;
          return "undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && (m2 = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m2[1], 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
        }, exports2.storage = function() {
          try {
            return localStorage;
          } catch (error) {
          }
        }(), exports2.destroy = /* @__PURE__ */ (() => {
          let warned = false;
          return () => {
            warned || (warned = true, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
          };
        })(), exports2.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"], exports2.log = console.debug || console.log || (() => {
        }), module2.exports = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/common.js")(exports2);
        const { formatters } = module2.exports;
        formatters.j = function(v) {
          try {
            return JSON.stringify(v);
          } catch (error) {
            return "[UnexpectedJSONParseError]: " + error.message;
          }
        };
      }, "./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/common.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        module2.exports = function(env) {
          function createDebug(namespace) {
            let prevTime, namespacesCache, enabledCache, enableOverride = null;
            function debug2(...args) {
              if (!debug2.enabled) return;
              const self = debug2, curr = Number(/* @__PURE__ */ new Date()), ms = curr - (prevTime || curr);
              self.diff = ms, self.prev = prevTime, self.curr = curr, prevTime = curr, args[0] = createDebug.coerce(args[0]), "string" != typeof args[0] && args.unshift("%O");
              let index = 0;
              args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format2) => {
                if ("%%" === match) return "%";
                index++;
                const formatter = createDebug.formatters[format2];
                if ("function" == typeof formatter) {
                  const val = args[index];
                  match = formatter.call(self, val), args.splice(index, 1), index--;
                }
                return match;
              }), createDebug.formatArgs.call(self, args);
              (self.log || createDebug.log).apply(self, args);
            }
            return debug2.namespace = namespace, debug2.useColors = createDebug.useColors(), debug2.color = createDebug.selectColor(namespace), debug2.extend = extend, debug2.destroy = createDebug.destroy, Object.defineProperty(debug2, "enabled", { enumerable: true, configurable: false, get: () => null !== enableOverride ? enableOverride : (namespacesCache !== createDebug.namespaces && (namespacesCache = createDebug.namespaces, enabledCache = createDebug.enabled(namespace)), enabledCache), set: (v) => {
              enableOverride = v;
            } }), "function" == typeof createDebug.init && createDebug.init(debug2), debug2;
          }
          function extend(namespace, delimiter) {
            const newDebug = createDebug(this.namespace + (void 0 === delimiter ? ":" : delimiter) + namespace);
            return newDebug.log = this.log, newDebug;
          }
          function matchesTemplate(search, template) {
            let searchIndex = 0, templateIndex = 0, starIndex = -1, matchIndex = 0;
            for (; searchIndex < search.length; ) if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || "*" === template[templateIndex])) "*" === template[templateIndex] ? (starIndex = templateIndex, matchIndex = searchIndex, templateIndex++) : (searchIndex++, templateIndex++);
            else {
              if (-1 === starIndex) return false;
              templateIndex = starIndex + 1, matchIndex++, searchIndex = matchIndex;
            }
            for (; templateIndex < template.length && "*" === template[templateIndex]; ) templateIndex++;
            return templateIndex === template.length;
          }
          return createDebug.debug = createDebug, createDebug.default = createDebug, createDebug.coerce = function(val) {
            if (val instanceof Error) return val.stack || val.message;
            return val;
          }, createDebug.disable = function() {
            const namespaces = [...createDebug.names, ...createDebug.skips.map((namespace) => "-" + namespace)].join(",");
            return createDebug.enable(""), namespaces;
          }, createDebug.enable = function(namespaces) {
            createDebug.save(namespaces), createDebug.namespaces = namespaces, createDebug.names = [], createDebug.skips = [];
            const split = ("string" == typeof namespaces ? namespaces : "").trim().replace(" ", ",").split(",").filter(Boolean);
            for (const ns of split) "-" === ns[0] ? createDebug.skips.push(ns.slice(1)) : createDebug.names.push(ns);
          }, createDebug.enabled = function(name) {
            for (const skip of createDebug.skips) if (matchesTemplate(name, skip)) return false;
            for (const ns of createDebug.names) if (matchesTemplate(name, ns)) return true;
            return false;
          }, createDebug.humanize = __webpack_require__2("./node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js"), createDebug.destroy = function() {
            console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
          }, Object.keys(env).forEach((key) => {
            createDebug[key] = env[key];
          }), createDebug.names = [], createDebug.skips = [], createDebug.formatters = {}, createDebug.selectColor = function(namespace) {
            let hash = 0;
            for (let i2 = 0; i2 < namespace.length; i2++) hash = (hash << 5) - hash + namespace.charCodeAt(i2), hash |= 0;
            return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
          }, createDebug.enable(createDebug.load()), createDebug;
        };
      }, "./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        "undefined" == typeof process || "renderer" === process.type || true === process.browser || process.__nwjs ? module2.exports = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/browser.js") : module2.exports = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/node.js");
      }, "./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/node.js": (module2, exports2, __webpack_require__2) => {
        const tty4 = __webpack_require__2("tty"), util = __webpack_require__2("util");
        exports2.init = function(debug2) {
          debug2.inspectOpts = {};
          const keys = Object.keys(exports2.inspectOpts);
          for (let i2 = 0; i2 < keys.length; i2++) debug2.inspectOpts[keys[i2]] = exports2.inspectOpts[keys[i2]];
        }, exports2.log = function(...args) {
          return process.stderr.write(util.formatWithOptions(exports2.inspectOpts, ...args) + "\n");
        }, exports2.formatArgs = function(args) {
          const { namespace: name, useColors } = this;
          if (useColors) {
            const c4 = this.color, colorCode = "\x1B[3" + (c4 < 8 ? c4 : "8;5;" + c4), prefix = `  ${colorCode};1m${name} \x1B[0m`;
            args[0] = prefix + args[0].split("\n").join("\n" + prefix), args.push(colorCode + "m+" + module2.exports.humanize(this.diff) + "\x1B[0m");
          } else args[0] = function() {
            if (exports2.inspectOpts.hideDate) return "";
            return (/* @__PURE__ */ new Date()).toISOString() + " ";
          }() + name + " " + args[0];
        }, exports2.save = function(namespaces) {
          namespaces ? process.env.DEBUG = namespaces : delete process.env.DEBUG;
        }, exports2.load = function() {
          return process.env.DEBUG;
        }, exports2.useColors = function() {
          return "colors" in exports2.inspectOpts ? Boolean(exports2.inspectOpts.colors) : tty4.isatty(process.stderr.fd);
        }, exports2.destroy = util.deprecate(() => {
        }, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."), exports2.colors = [6, 2, 3, 4, 5, 1];
        try {
          const supportsColor = __webpack_require__2("./node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js");
          supportsColor && (supportsColor.stderr || supportsColor).level >= 2 && (exports2.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221]);
        } catch (error) {
        }
        exports2.inspectOpts = Object.keys(process.env).filter((key) => /^debug_/i.test(key)).reduce((obj, key) => {
          const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_2, k3) => k3.toUpperCase());
          let val = process.env[key];
          return val = !!/^(yes|on|true|enabled)$/i.test(val) || !/^(no|off|false|disabled)$/i.test(val) && ("null" === val ? null : Number(val)), obj[prop] = val, obj;
        }, {}), module2.exports = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/common.js")(exports2);
        const { formatters } = module2.exports;
        formatters.o = function(v) {
          return this.inspectOpts.colors = this.useColors, util.inspect(v, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
        }, formatters.O = function(v) {
          return this.inspectOpts.colors = this.useColors, util.inspect(v, this.inspectOpts);
        };
      }, "./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js": (module2) => {
        "use strict";
        const GENSYNC_START = Symbol.for("gensync:v1:start"), GENSYNC_SUSPEND = Symbol.for("gensync:v1:suspend");
        function assertTypeof(type, name, value2, allowUndefined) {
          if (typeof value2 === type || allowUndefined && void 0 === value2) return;
          let msg;
          throw msg = allowUndefined ? `Expected opts.${name} to be either a ${type}, or undefined.` : `Expected opts.${name} to be a ${type}.`, makeError2(msg, "GENSYNC_OPTIONS_ERROR");
        }
        function makeError2(msg, code) {
          return Object.assign(new Error(msg), { code });
        }
        function buildOperation({ name, arity, sync, async }) {
          return setFunctionMetadata(name, arity, function* (...args) {
            const resume = yield GENSYNC_START;
            if (!resume) {
              return sync.call(this, args);
            }
            let result;
            try {
              async.call(this, args, (value2) => {
                result || (result = { value: value2 }, resume());
              }, (err) => {
                result || (result = { err }, resume());
              });
            } catch (err) {
              result = { err }, resume();
            }
            if (yield GENSYNC_SUSPEND, result.hasOwnProperty("err")) throw result.err;
            return result.value;
          });
        }
        function evaluateSync(gen) {
          let value2;
          for (; !({ value: value2 } = gen.next()).done; ) assertStart(value2, gen);
          return value2;
        }
        function evaluateAsync(gen, resolve, reject) {
          !function step() {
            try {
              let value2;
              for (; !({ value: value2 } = gen.next()).done; ) {
                assertStart(value2, gen);
                let sync = true, didSyncResume = false;
                const out = gen.next(() => {
                  sync ? didSyncResume = true : step();
                });
                if (sync = false, assertSuspend(out, gen), !didSyncResume) return;
              }
              return resolve(value2);
            } catch (err) {
              return reject(err);
            }
          }();
        }
        function assertStart(value2, gen) {
          value2 !== GENSYNC_START && throwError(gen, makeError2(`Got unexpected yielded value in gensync generator: ${JSON.stringify(value2)}. Did you perhaps mean to use 'yield*' instead of 'yield'?`, "GENSYNC_EXPECTED_START"));
        }
        function assertSuspend({ value: value2, done }, gen) {
          (done || value2 !== GENSYNC_SUSPEND) && throwError(gen, makeError2(done ? "Unexpected generator completion. If you get this, it is probably a gensync bug." : `Expected GENSYNC_SUSPEND, got ${JSON.stringify(value2)}. If you get this, it is probably a gensync bug.`, "GENSYNC_EXPECTED_SUSPEND"));
        }
        function throwError(gen, err) {
          throw gen.throw && gen.throw(err), err;
        }
        function setFunctionMetadata(name, arity, fn) {
          if ("string" == typeof name) {
            const nameDesc = Object.getOwnPropertyDescriptor(fn, "name");
            nameDesc && !nameDesc.configurable || Object.defineProperty(fn, "name", Object.assign(nameDesc || {}, { configurable: true, value: name }));
          }
          if ("number" == typeof arity) {
            const lengthDesc = Object.getOwnPropertyDescriptor(fn, "length");
            lengthDesc && !lengthDesc.configurable || Object.defineProperty(fn, "length", Object.assign(lengthDesc || {}, { configurable: true, value: arity }));
          }
          return fn;
        }
        module2.exports = Object.assign(function(optsOrFn) {
          let genFn = optsOrFn;
          return genFn = "function" != typeof optsOrFn ? function({ name, arity, sync, async, errback }) {
            if (assertTypeof("string", "name", name, true), assertTypeof("number", "arity", arity, true), assertTypeof("function", "sync", sync), assertTypeof("function", "async", async, true), assertTypeof("function", "errback", errback, true), async && errback) throw makeError2("Expected one of either opts.async or opts.errback, but got _both_.", "GENSYNC_OPTIONS_ERROR");
            if ("string" != typeof name) {
              let fnName;
              errback && errback.name && "errback" !== errback.name && (fnName = errback.name), async && async.name && "async" !== async.name && (fnName = async.name.replace(/Async$/, "")), sync && sync.name && "sync" !== sync.name && (fnName = sync.name.replace(/Sync$/, "")), "string" == typeof fnName && (name = fnName);
            }
            "number" != typeof arity && (arity = sync.length);
            return buildOperation({ name, arity, sync: function(args) {
              return sync.apply(this, args);
            }, async: function(args, resolve, reject) {
              async ? async.apply(this, args).then(resolve, reject) : errback ? errback.call(this, ...args, (err, value2) => {
                null == err ? resolve(value2) : reject(err);
              }) : resolve(sync.apply(this, args));
            } });
          }(optsOrFn) : function(genFn2) {
            return setFunctionMetadata(genFn2.name, genFn2.length, function(...args) {
              return genFn2.apply(this, args);
            });
          }(optsOrFn), Object.assign(genFn, /* @__PURE__ */ function(genFn2) {
            const fns = { sync: function(...args) {
              return evaluateSync(genFn2.apply(this, args));
            }, async: function(...args) {
              return new Promise((resolve, reject) => {
                evaluateAsync(genFn2.apply(this, args), resolve, reject);
              });
            }, errback: function(...args) {
              const cb = args.pop();
              if ("function" != typeof cb) throw makeError2("Asynchronous function called without callback", "GENSYNC_ERRBACK_NO_CALLBACK");
              let gen;
              try {
                gen = genFn2.apply(this, args);
              } catch (err) {
                return void cb(err);
              }
              evaluateAsync(gen, (val) => cb(void 0, val), (err) => cb(err));
            } };
            return fns;
          }(genFn));
        }, { all: buildOperation({ name: "all", arity: 1, sync: function(args) {
          return Array.from(args[0]).map((item) => evaluateSync(item));
        }, async: function(args, resolve, reject) {
          const items = Array.from(args[0]);
          if (0 === items.length) return void Promise.resolve().then(() => resolve([]));
          let count2 = 0;
          const results = items.map(() => {
          });
          items.forEach((item, i2) => {
            evaluateAsync(item, (val) => {
              results[i2] = val, count2 += 1, count2 === results.length && resolve(results);
            }, reject);
          });
        } }), race: buildOperation({ name: "race", arity: 1, sync: function(args) {
          const items = Array.from(args[0]);
          if (0 === items.length) throw makeError2("Must race at least 1 item", "GENSYNC_RACE_NONEMPTY");
          return evaluateSync(items[0]);
        }, async: function(args, resolve, reject) {
          const items = Array.from(args[0]);
          if (0 === items.length) throw makeError2("Must race at least 1 item", "GENSYNC_RACE_NONEMPTY");
          for (const item of items) evaluateAsync(item, resolve, reject);
        } }) });
      }, "./node_modules/.pnpm/globals@11.12.0/node_modules/globals/index.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        module2.exports = __webpack_require__2("./node_modules/.pnpm/globals@11.12.0/node_modules/globals/globals.json");
      }, "./node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js": (module2) => {
        "use strict";
        module2.exports = (flag, argv = process.argv) => {
          const prefix = flag.startsWith("-") ? "" : 1 === flag.length ? "-" : "--", position = argv.indexOf(prefix + flag), terminatorPosition = argv.indexOf("--");
          return -1 !== position && (-1 === terminatorPosition || position < terminatorPosition);
        };
      }, "./node_modules/.pnpm/jsesc@3.1.0/node_modules/jsesc/jsesc.js": (module2) => {
        "use strict";
        const object = {}, hasOwnProperty2 = object.hasOwnProperty, forOwn = (object2, callback) => {
          for (const key in object2) hasOwnProperty2.call(object2, key) && callback(key, object2[key]);
        }, fourHexEscape = (hex) => "\\u" + ("0000" + hex).slice(-4), hexadecimal = (code, lowercase) => {
          let hexadecimal2 = code.toString(16);
          return lowercase ? hexadecimal2 : hexadecimal2.toUpperCase();
        }, toString2 = object.toString, isArray = Array.isArray, isBigInt = (value2) => "bigint" == typeof value2, singleEscapes = { "\\": "\\\\", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "	": "\\t" }, regexSingleEscape = /[\\\b\f\n\r\t]/, regexDigit = /[0-9]/, regexWhitespace = /[\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/, escapeEverythingRegex = /([\uD800-\uDBFF][\uDC00-\uDFFF])|([\uD800-\uDFFF])|(['"`])|[^]/g, escapeNonAsciiRegex = /([\uD800-\uDBFF][\uDC00-\uDFFF])|([\uD800-\uDFFF])|(['"`])|[^ !#-&\(-\[\]-_a-~]/g, jsesc = (argument, options) => {
          const increaseIndentation = () => {
            oldIndent = indent, ++options.indentLevel, indent = options.indent.repeat(options.indentLevel);
          }, defaults = { escapeEverything: false, minimal: false, isScriptContext: false, quotes: "single", wrap: false, es6: false, json: false, compact: true, lowercaseHex: false, numbers: "decimal", indent: "	", indentLevel: 0, __inline1__: false, __inline2__: false }, json = options && options.json;
          var destination, source;
          json && (defaults.quotes = "double", defaults.wrap = true), destination = defaults, "single" != (options = (source = options) ? (forOwn(source, (key, value2) => {
            destination[key] = value2;
          }), destination) : destination).quotes && "double" != options.quotes && "backtick" != options.quotes && (options.quotes = "single");
          const quote = "double" == options.quotes ? '"' : "backtick" == options.quotes ? "`" : "'", compact = options.compact, lowercaseHex = options.lowercaseHex;
          let indent = options.indent.repeat(options.indentLevel), oldIndent = "";
          const inline1 = options.__inline1__, inline2 = options.__inline2__, newLine = compact ? "" : "\n";
          let result, isEmpty = true;
          const useBinNumbers = "binary" == options.numbers, useOctNumbers = "octal" == options.numbers, useDecNumbers = "decimal" == options.numbers, useHexNumbers = "hexadecimal" == options.numbers;
          if (json && argument && /* @__PURE__ */ ((value2) => "function" == typeof value2)(argument.toJSON) && (argument = argument.toJSON()), !((value2) => "string" == typeof value2 || "[object String]" == toString2.call(value2))(argument)) {
            if (((value2) => "[object Map]" == toString2.call(value2))(argument)) return 0 == argument.size ? "new Map()" : (compact || (options.__inline1__ = true, options.__inline2__ = false), "new Map(" + jsesc(Array.from(argument), options) + ")");
            if (((value2) => "[object Set]" == toString2.call(value2))(argument)) return 0 == argument.size ? "new Set()" : "new Set(" + jsesc(Array.from(argument), options) + ")";
            if (((value2) => "function" == typeof Buffer && Buffer.isBuffer(value2))(argument)) return 0 == argument.length ? "Buffer.from([])" : "Buffer.from(" + jsesc(Array.from(argument), options) + ")";
            if (isArray(argument)) return result = [], options.wrap = true, inline1 && (options.__inline1__ = false, options.__inline2__ = true), inline2 || increaseIndentation(), ((array, callback) => {
              const length = array.length;
              let index = -1;
              for (; ++index < length; ) callback(array[index]);
            })(argument, (value2) => {
              isEmpty = false, inline2 && (options.__inline2__ = false), result.push((compact || inline2 ? "" : indent) + jsesc(value2, options));
            }), isEmpty ? "[]" : inline2 ? "[" + result.join(", ") + "]" : "[" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "]";
            if (((value2) => "number" == typeof value2 || "[object Number]" == toString2.call(value2))(argument) || isBigInt(argument)) {
              if (json) return JSON.stringify(Number(argument));
              let result2;
              if (useDecNumbers) result2 = String(argument);
              else if (useHexNumbers) {
                let hexadecimal2 = argument.toString(16);
                lowercaseHex || (hexadecimal2 = hexadecimal2.toUpperCase()), result2 = "0x" + hexadecimal2;
              } else useBinNumbers ? result2 = "0b" + argument.toString(2) : useOctNumbers && (result2 = "0o" + argument.toString(8));
              return isBigInt(argument) ? result2 + "n" : result2;
            }
            return isBigInt(argument) ? json ? JSON.stringify(Number(argument)) : argument + "n" : ((value2) => "[object Object]" == toString2.call(value2))(argument) ? (result = [], options.wrap = true, increaseIndentation(), forOwn(argument, (key, value2) => {
              isEmpty = false, result.push((compact ? "" : indent) + jsesc(key, options) + ":" + (compact ? "" : " ") + jsesc(value2, options));
            }), isEmpty ? "{}" : "{" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "}") : json ? JSON.stringify(argument) || "null" : String(argument);
          }
          const regex = options.escapeEverything ? escapeEverythingRegex : escapeNonAsciiRegex;
          return result = argument.replace(regex, (char, pair, lone, quoteChar, index, string) => {
            if (pair) {
              if (options.minimal) return pair;
              const first = pair.charCodeAt(0), second = pair.charCodeAt(1);
              if (options.es6) {
                return "\\u{" + hexadecimal(1024 * (first - 55296) + second - 56320 + 65536, lowercaseHex) + "}";
              }
              return fourHexEscape(hexadecimal(first, lowercaseHex)) + fourHexEscape(hexadecimal(second, lowercaseHex));
            }
            if (lone) return fourHexEscape(hexadecimal(lone.charCodeAt(0), lowercaseHex));
            if ("\0" == char && !json && !regexDigit.test(string.charAt(index + 1))) return "\\0";
            if (quoteChar) return quoteChar == quote || options.escapeEverything ? "\\" + quoteChar : quoteChar;
            if (regexSingleEscape.test(char)) return singleEscapes[char];
            if (options.minimal && !regexWhitespace.test(char)) return char;
            const hex = hexadecimal(char.charCodeAt(0), lowercaseHex);
            return json || hex.length > 2 ? fourHexEscape(hex) : "\\x" + ("00" + hex).slice(-2);
          }), "`" == quote && (result = result.replace(/\$\{/g, "\\${")), options.isScriptContext && (result = result.replace(/<\/(script|style)/gi, "<\\/$1").replace(/<!--/g, json ? "\\u003C!--" : "\\x3C!--")), options.wrap && (result = quote + result + quote), result;
        };
        jsesc.version = "3.0.2", module2.exports = jsesc;
      }, "./node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js": (module2) => {
        var s = 1e3, m2 = 60 * s, h2 = 60 * m2, d2 = 24 * h2, w = 7 * d2, y2 = 365.25 * d2;
        function plural(ms, msAbs, n2, name) {
          var isPlural = msAbs >= 1.5 * n2;
          return Math.round(ms / n2) + " " + name + (isPlural ? "s" : "");
        }
        module2.exports = function(val, options) {
          options = options || {};
          var type = typeof val;
          if ("string" === type && val.length > 0) return function(str) {
            if ((str = String(str)).length > 100) return;
            var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
            if (!match) return;
            var n2 = parseFloat(match[1]);
            switch ((match[2] || "ms").toLowerCase()) {
              case "years":
              case "year":
              case "yrs":
              case "yr":
              case "y":
                return n2 * y2;
              case "weeks":
              case "week":
              case "w":
                return n2 * w;
              case "days":
              case "day":
              case "d":
                return n2 * d2;
              case "hours":
              case "hour":
              case "hrs":
              case "hr":
              case "h":
                return n2 * h2;
              case "minutes":
              case "minute":
              case "mins":
              case "min":
              case "m":
                return n2 * m2;
              case "seconds":
              case "second":
              case "secs":
              case "sec":
              case "s":
                return n2 * s;
              case "milliseconds":
              case "millisecond":
              case "msecs":
              case "msec":
              case "ms":
                return n2;
              default:
                return;
            }
          }(val);
          if ("number" === type && isFinite(val)) return options.long ? function(ms) {
            var msAbs = Math.abs(ms);
            if (msAbs >= d2) return plural(ms, msAbs, d2, "day");
            if (msAbs >= h2) return plural(ms, msAbs, h2, "hour");
            if (msAbs >= m2) return plural(ms, msAbs, m2, "minute");
            if (msAbs >= s) return plural(ms, msAbs, s, "second");
            return ms + " ms";
          }(val) : function(ms) {
            var msAbs = Math.abs(ms);
            if (msAbs >= d2) return Math.round(ms / d2) + "d";
            if (msAbs >= h2) return Math.round(ms / h2) + "h";
            if (msAbs >= m2) return Math.round(ms / m2) + "m";
            if (msAbs >= s) return Math.round(ms / s) + "s";
            return ms + "ms";
          }(val);
          throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
        };
      }, "./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js": (module2, exports2) => {
        var debug2;
        exports2 = module2.exports = SemVer, debug2 = "object" == typeof process && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? function() {
          var args = Array.prototype.slice.call(arguments, 0);
          args.unshift("SEMVER"), console.log.apply(console, args);
        } : function() {
        }, exports2.SEMVER_SPEC_VERSION = "2.0.0";
        var MAX_LENGTH = 256, MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991, MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6, re = exports2.re = [], safeRe = exports2.safeRe = [], src = exports2.src = [], t2 = exports2.tokens = {}, R = 0;
        function tok(n2) {
          t2[n2] = R++;
        }
        var safeRegexReplacements = [["\\s", 1], ["\\d", MAX_LENGTH], ["[a-zA-Z0-9-]", MAX_SAFE_BUILD_LENGTH]];
        function makeSafeRe(value2) {
          for (var i3 = 0; i3 < safeRegexReplacements.length; i3++) {
            var token = safeRegexReplacements[i3][0], max = safeRegexReplacements[i3][1];
            value2 = value2.split(token + "*").join(token + "{0," + max + "}").split(token + "+").join(token + "{1," + max + "}");
          }
          return value2;
        }
        tok("NUMERICIDENTIFIER"), src[t2.NUMERICIDENTIFIER] = "0|[1-9]\\d*", tok("NUMERICIDENTIFIERLOOSE"), src[t2.NUMERICIDENTIFIERLOOSE] = "\\d+", tok("NONNUMERICIDENTIFIER"), src[t2.NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*", tok("MAINVERSION"), src[t2.MAINVERSION] = "(" + src[t2.NUMERICIDENTIFIER] + ")\\.(" + src[t2.NUMERICIDENTIFIER] + ")\\.(" + src[t2.NUMERICIDENTIFIER] + ")", tok("MAINVERSIONLOOSE"), src[t2.MAINVERSIONLOOSE] = "(" + src[t2.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t2.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t2.NUMERICIDENTIFIERLOOSE] + ")", tok("PRERELEASEIDENTIFIER"), src[t2.PRERELEASEIDENTIFIER] = "(?:" + src[t2.NUMERICIDENTIFIER] + "|" + src[t2.NONNUMERICIDENTIFIER] + ")", tok("PRERELEASEIDENTIFIERLOOSE"), src[t2.PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[t2.NUMERICIDENTIFIERLOOSE] + "|" + src[t2.NONNUMERICIDENTIFIER] + ")", tok("PRERELEASE"), src[t2.PRERELEASE] = "(?:-(" + src[t2.PRERELEASEIDENTIFIER] + "(?:\\." + src[t2.PRERELEASEIDENTIFIER] + ")*))", tok("PRERELEASELOOSE"), src[t2.PRERELEASELOOSE] = "(?:-?(" + src[t2.PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[t2.PRERELEASEIDENTIFIERLOOSE] + ")*))", tok("BUILDIDENTIFIER"), src[t2.BUILDIDENTIFIER] = "[a-zA-Z0-9-]+", tok("BUILD"), src[t2.BUILD] = "(?:\\+(" + src[t2.BUILDIDENTIFIER] + "(?:\\." + src[t2.BUILDIDENTIFIER] + ")*))", tok("FULL"), tok("FULLPLAIN"), src[t2.FULLPLAIN] = "v?" + src[t2.MAINVERSION] + src[t2.PRERELEASE] + "?" + src[t2.BUILD] + "?", src[t2.FULL] = "^" + src[t2.FULLPLAIN] + "$", tok("LOOSEPLAIN"), src[t2.LOOSEPLAIN] = "[v=\\s]*" + src[t2.MAINVERSIONLOOSE] + src[t2.PRERELEASELOOSE] + "?" + src[t2.BUILD] + "?", tok("LOOSE"), src[t2.LOOSE] = "^" + src[t2.LOOSEPLAIN] + "$", tok("GTLT"), src[t2.GTLT] = "((?:<|>)?=?)", tok("XRANGEIDENTIFIERLOOSE"), src[t2.XRANGEIDENTIFIERLOOSE] = src[t2.NUMERICIDENTIFIERLOOSE] + "|x|X|\\*", tok("XRANGEIDENTIFIER"), src[t2.XRANGEIDENTIFIER] = src[t2.NUMERICIDENTIFIER] + "|x|X|\\*", tok("XRANGEPLAIN"), src[t2.XRANGEPLAIN] = "[v=\\s]*(" + src[t2.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t2.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t2.XRANGEIDENTIFIER] + ")(?:" + src[t2.PRERELEASE] + ")?" + src[t2.BUILD] + "?)?)?", tok("XRANGEPLAINLOOSE"), src[t2.XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[t2.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t2.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t2.XRANGEIDENTIFIERLOOSE] + ")(?:" + src[t2.PRERELEASELOOSE] + ")?" + src[t2.BUILD] + "?)?)?", tok("XRANGE"), src[t2.XRANGE] = "^" + src[t2.GTLT] + "\\s*" + src[t2.XRANGEPLAIN] + "$", tok("XRANGELOOSE"), src[t2.XRANGELOOSE] = "^" + src[t2.GTLT] + "\\s*" + src[t2.XRANGEPLAINLOOSE] + "$", tok("COERCE"), src[t2.COERCE] = "(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])", tok("COERCERTL"), re[t2.COERCERTL] = new RegExp(src[t2.COERCE], "g"), safeRe[t2.COERCERTL] = new RegExp(makeSafeRe(src[t2.COERCE]), "g"), tok("LONETILDE"), src[t2.LONETILDE] = "(?:~>?)", tok("TILDETRIM"), src[t2.TILDETRIM] = "(\\s*)" + src[t2.LONETILDE] + "\\s+", re[t2.TILDETRIM] = new RegExp(src[t2.TILDETRIM], "g"), safeRe[t2.TILDETRIM] = new RegExp(makeSafeRe(src[t2.TILDETRIM]), "g");
        tok("TILDE"), src[t2.TILDE] = "^" + src[t2.LONETILDE] + src[t2.XRANGEPLAIN] + "$", tok("TILDELOOSE"), src[t2.TILDELOOSE] = "^" + src[t2.LONETILDE] + src[t2.XRANGEPLAINLOOSE] + "$", tok("LONECARET"), src[t2.LONECARET] = "(?:\\^)", tok("CARETTRIM"), src[t2.CARETTRIM] = "(\\s*)" + src[t2.LONECARET] + "\\s+", re[t2.CARETTRIM] = new RegExp(src[t2.CARETTRIM], "g"), safeRe[t2.CARETTRIM] = new RegExp(makeSafeRe(src[t2.CARETTRIM]), "g");
        tok("CARET"), src[t2.CARET] = "^" + src[t2.LONECARET] + src[t2.XRANGEPLAIN] + "$", tok("CARETLOOSE"), src[t2.CARETLOOSE] = "^" + src[t2.LONECARET] + src[t2.XRANGEPLAINLOOSE] + "$", tok("COMPARATORLOOSE"), src[t2.COMPARATORLOOSE] = "^" + src[t2.GTLT] + "\\s*(" + src[t2.LOOSEPLAIN] + ")$|^$", tok("COMPARATOR"), src[t2.COMPARATOR] = "^" + src[t2.GTLT] + "\\s*(" + src[t2.FULLPLAIN] + ")$|^$", tok("COMPARATORTRIM"), src[t2.COMPARATORTRIM] = "(\\s*)" + src[t2.GTLT] + "\\s*(" + src[t2.LOOSEPLAIN] + "|" + src[t2.XRANGEPLAIN] + ")", re[t2.COMPARATORTRIM] = new RegExp(src[t2.COMPARATORTRIM], "g"), safeRe[t2.COMPARATORTRIM] = new RegExp(makeSafeRe(src[t2.COMPARATORTRIM]), "g");
        tok("HYPHENRANGE"), src[t2.HYPHENRANGE] = "^\\s*(" + src[t2.XRANGEPLAIN] + ")\\s+-\\s+(" + src[t2.XRANGEPLAIN] + ")\\s*$", tok("HYPHENRANGELOOSE"), src[t2.HYPHENRANGELOOSE] = "^\\s*(" + src[t2.XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[t2.XRANGEPLAINLOOSE] + ")\\s*$", tok("STAR"), src[t2.STAR] = "(<|>)?=?\\s*\\*";
        for (var i2 = 0; i2 < R; i2++) debug2(i2, src[i2]), re[i2] || (re[i2] = new RegExp(src[i2]), safeRe[i2] = new RegExp(makeSafeRe(src[i2])));
        function parse(version, options) {
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), version instanceof SemVer) return version;
          if ("string" != typeof version) return null;
          if (version.length > MAX_LENGTH) return null;
          if (!(options.loose ? safeRe[t2.LOOSE] : safeRe[t2.FULL]).test(version)) return null;
          try {
            return new SemVer(version, options);
          } catch (er) {
            return null;
          }
        }
        function SemVer(version, options) {
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), version instanceof SemVer) {
            if (version.loose === options.loose) return version;
            version = version.version;
          } else if ("string" != typeof version) throw new TypeError("Invalid Version: " + version);
          if (version.length > MAX_LENGTH) throw new TypeError("version is longer than " + MAX_LENGTH + " characters");
          if (!(this instanceof SemVer)) return new SemVer(version, options);
          debug2("SemVer", version, options), this.options = options, this.loose = !!options.loose;
          var m2 = version.trim().match(options.loose ? safeRe[t2.LOOSE] : safeRe[t2.FULL]);
          if (!m2) throw new TypeError("Invalid Version: " + version);
          if (this.raw = version, this.major = +m2[1], this.minor = +m2[2], this.patch = +m2[3], this.major > MAX_SAFE_INTEGER || this.major < 0) throw new TypeError("Invalid major version");
          if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) throw new TypeError("Invalid minor version");
          if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) throw new TypeError("Invalid patch version");
          m2[4] ? this.prerelease = m2[4].split(".").map(function(id) {
            if (/^[0-9]+$/.test(id)) {
              var num = +id;
              if (num >= 0 && num < MAX_SAFE_INTEGER) return num;
            }
            return id;
          }) : this.prerelease = [], this.build = m2[5] ? m2[5].split(".") : [], this.format();
        }
        exports2.parse = parse, exports2.valid = function(version, options) {
          var v = parse(version, options);
          return v ? v.version : null;
        }, exports2.clean = function(version, options) {
          var s = parse(version.trim().replace(/^[=v]+/, ""), options);
          return s ? s.version : null;
        }, exports2.SemVer = SemVer, SemVer.prototype.format = function() {
          return this.version = this.major + "." + this.minor + "." + this.patch, this.prerelease.length && (this.version += "-" + this.prerelease.join(".")), this.version;
        }, SemVer.prototype.toString = function() {
          return this.version;
        }, SemVer.prototype.compare = function(other) {
          return debug2("SemVer.compare", this.version, this.options, other), other instanceof SemVer || (other = new SemVer(other, this.options)), this.compareMain(other) || this.comparePre(other);
        }, SemVer.prototype.compareMain = function(other) {
          return other instanceof SemVer || (other = new SemVer(other, this.options)), compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
        }, SemVer.prototype.comparePre = function(other) {
          if (other instanceof SemVer || (other = new SemVer(other, this.options)), this.prerelease.length && !other.prerelease.length) return -1;
          if (!this.prerelease.length && other.prerelease.length) return 1;
          if (!this.prerelease.length && !other.prerelease.length) return 0;
          var i3 = 0;
          do {
            var a2 = this.prerelease[i3], b2 = other.prerelease[i3];
            if (debug2("prerelease compare", i3, a2, b2), void 0 === a2 && void 0 === b2) return 0;
            if (void 0 === b2) return 1;
            if (void 0 === a2) return -1;
            if (a2 !== b2) return compareIdentifiers(a2, b2);
          } while (++i3);
        }, SemVer.prototype.compareBuild = function(other) {
          other instanceof SemVer || (other = new SemVer(other, this.options));
          var i3 = 0;
          do {
            var a2 = this.build[i3], b2 = other.build[i3];
            if (debug2("prerelease compare", i3, a2, b2), void 0 === a2 && void 0 === b2) return 0;
            if (void 0 === b2) return 1;
            if (void 0 === a2) return -1;
            if (a2 !== b2) return compareIdentifiers(a2, b2);
          } while (++i3);
        }, SemVer.prototype.inc = function(release, identifier) {
          switch (release) {
            case "premajor":
              this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", identifier);
              break;
            case "preminor":
              this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", identifier);
              break;
            case "prepatch":
              this.prerelease.length = 0, this.inc("patch", identifier), this.inc("pre", identifier);
              break;
            case "prerelease":
              0 === this.prerelease.length && this.inc("patch", identifier), this.inc("pre", identifier);
              break;
            case "major":
              0 === this.minor && 0 === this.patch && 0 !== this.prerelease.length || this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
              break;
            case "minor":
              0 === this.patch && 0 !== this.prerelease.length || this.minor++, this.patch = 0, this.prerelease = [];
              break;
            case "patch":
              0 === this.prerelease.length && this.patch++, this.prerelease = [];
              break;
            case "pre":
              if (0 === this.prerelease.length) this.prerelease = [0];
              else {
                for (var i3 = this.prerelease.length; --i3 >= 0; ) "number" == typeof this.prerelease[i3] && (this.prerelease[i3]++, i3 = -2);
                -1 === i3 && this.prerelease.push(0);
              }
              identifier && (this.prerelease[0] === identifier ? isNaN(this.prerelease[1]) && (this.prerelease = [identifier, 0]) : this.prerelease = [identifier, 0]);
              break;
            default:
              throw new Error("invalid increment argument: " + release);
          }
          return this.format(), this.raw = this.version, this;
        }, exports2.inc = function(version, release, loose, identifier) {
          "string" == typeof loose && (identifier = loose, loose = void 0);
          try {
            return new SemVer(version, loose).inc(release, identifier).version;
          } catch (er) {
            return null;
          }
        }, exports2.diff = function(version1, version2) {
          if (eq(version1, version2)) return null;
          var v1 = parse(version1), v2 = parse(version2), prefix = "";
          if (v1.prerelease.length || v2.prerelease.length) {
            prefix = "pre";
            var defaultResult = "prerelease";
          }
          for (var key in v1) if (("major" === key || "minor" === key || "patch" === key) && v1[key] !== v2[key]) return prefix + key;
          return defaultResult;
        }, exports2.compareIdentifiers = compareIdentifiers;
        var numeric = /^[0-9]+$/;
        function compareIdentifiers(a2, b2) {
          var anum = numeric.test(a2), bnum = numeric.test(b2);
          return anum && bnum && (a2 = +a2, b2 = +b2), a2 === b2 ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a2 < b2 ? -1 : 1;
        }
        function compare(a2, b2, loose) {
          return new SemVer(a2, loose).compare(new SemVer(b2, loose));
        }
        function gt(a2, b2, loose) {
          return compare(a2, b2, loose) > 0;
        }
        function lt(a2, b2, loose) {
          return compare(a2, b2, loose) < 0;
        }
        function eq(a2, b2, loose) {
          return 0 === compare(a2, b2, loose);
        }
        function neq(a2, b2, loose) {
          return 0 !== compare(a2, b2, loose);
        }
        function gte(a2, b2, loose) {
          return compare(a2, b2, loose) >= 0;
        }
        function lte(a2, b2, loose) {
          return compare(a2, b2, loose) <= 0;
        }
        function cmp(a2, op, b2, loose) {
          switch (op) {
            case "===":
              return "object" == typeof a2 && (a2 = a2.version), "object" == typeof b2 && (b2 = b2.version), a2 === b2;
            case "!==":
              return "object" == typeof a2 && (a2 = a2.version), "object" == typeof b2 && (b2 = b2.version), a2 !== b2;
            case "":
            case "=":
            case "==":
              return eq(a2, b2, loose);
            case "!=":
              return neq(a2, b2, loose);
            case ">":
              return gt(a2, b2, loose);
            case ">=":
              return gte(a2, b2, loose);
            case "<":
              return lt(a2, b2, loose);
            case "<=":
              return lte(a2, b2, loose);
            default:
              throw new TypeError("Invalid operator: " + op);
          }
        }
        function Comparator(comp, options) {
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), comp instanceof Comparator) {
            if (comp.loose === !!options.loose) return comp;
            comp = comp.value;
          }
          if (!(this instanceof Comparator)) return new Comparator(comp, options);
          comp = comp.trim().split(/\s+/).join(" "), debug2("comparator", comp, options), this.options = options, this.loose = !!options.loose, this.parse(comp), this.semver === ANY ? this.value = "" : this.value = this.operator + this.semver.version, debug2("comp", this);
        }
        exports2.rcompareIdentifiers = function(a2, b2) {
          return compareIdentifiers(b2, a2);
        }, exports2.major = function(a2, loose) {
          return new SemVer(a2, loose).major;
        }, exports2.minor = function(a2, loose) {
          return new SemVer(a2, loose).minor;
        }, exports2.patch = function(a2, loose) {
          return new SemVer(a2, loose).patch;
        }, exports2.compare = compare, exports2.compareLoose = function(a2, b2) {
          return compare(a2, b2, true);
        }, exports2.compareBuild = function(a2, b2, loose) {
          var versionA = new SemVer(a2, loose), versionB = new SemVer(b2, loose);
          return versionA.compare(versionB) || versionA.compareBuild(versionB);
        }, exports2.rcompare = function(a2, b2, loose) {
          return compare(b2, a2, loose);
        }, exports2.sort = function(list, loose) {
          return list.sort(function(a2, b2) {
            return exports2.compareBuild(a2, b2, loose);
          });
        }, exports2.rsort = function(list, loose) {
          return list.sort(function(a2, b2) {
            return exports2.compareBuild(b2, a2, loose);
          });
        }, exports2.gt = gt, exports2.lt = lt, exports2.eq = eq, exports2.neq = neq, exports2.gte = gte, exports2.lte = lte, exports2.cmp = cmp, exports2.Comparator = Comparator;
        var ANY = {};
        function Range(range, options) {
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), range instanceof Range) return range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease ? range : new Range(range.raw, options);
          if (range instanceof Comparator) return new Range(range.value, options);
          if (!(this instanceof Range)) return new Range(range, options);
          if (this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease, this.raw = range.trim().split(/\s+/).join(" "), this.set = this.raw.split("||").map(function(range2) {
            return this.parseRange(range2.trim());
          }, this).filter(function(c4) {
            return c4.length;
          }), !this.set.length) throw new TypeError("Invalid SemVer Range: " + this.raw);
          this.format();
        }
        function isSatisfiable(comparators, options) {
          for (var result = true, remainingComparators = comparators.slice(), testComparator = remainingComparators.pop(); result && remainingComparators.length; ) result = remainingComparators.every(function(otherComparator) {
            return testComparator.intersects(otherComparator, options);
          }), testComparator = remainingComparators.pop();
          return result;
        }
        function isX(id) {
          return !id || "x" === id.toLowerCase() || "*" === id;
        }
        function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
          return ((from = isX(fM) ? "" : isX(fm) ? ">=" + fM + ".0.0" : isX(fp) ? ">=" + fM + "." + fm + ".0" : ">=" + from) + " " + (to = isX(tM) ? "" : isX(tm) ? "<" + (+tM + 1) + ".0.0" : isX(tp) ? "<" + tM + "." + (+tm + 1) + ".0" : tpr ? "<=" + tM + "." + tm + "." + tp + "-" + tpr : "<=" + to)).trim();
        }
        function testSet(set, version, options) {
          for (var i3 = 0; i3 < set.length; i3++) if (!set[i3].test(version)) return false;
          if (version.prerelease.length && !options.includePrerelease) {
            for (i3 = 0; i3 < set.length; i3++) if (debug2(set[i3].semver), set[i3].semver !== ANY && set[i3].semver.prerelease.length > 0) {
              var allowed = set[i3].semver;
              if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) return true;
            }
            return false;
          }
          return true;
        }
        function satisfies(version, range, options) {
          try {
            range = new Range(range, options);
          } catch (er) {
            return false;
          }
          return range.test(version);
        }
        function outside(version, range, hilo, options) {
          var gtfn, ltefn, ltfn, comp, ecomp;
          switch (version = new SemVer(version, options), range = new Range(range, options), hilo) {
            case ">":
              gtfn = gt, ltefn = lte, ltfn = lt, comp = ">", ecomp = ">=";
              break;
            case "<":
              gtfn = lt, ltefn = gte, ltfn = gt, comp = "<", ecomp = "<=";
              break;
            default:
              throw new TypeError('Must provide a hilo val of "<" or ">"');
          }
          if (satisfies(version, range, options)) return false;
          for (var i3 = 0; i3 < range.set.length; ++i3) {
            var comparators = range.set[i3], high = null, low = null;
            if (comparators.forEach(function(comparator) {
              comparator.semver === ANY && (comparator = new Comparator(">=0.0.0")), high = high || comparator, low = low || comparator, gtfn(comparator.semver, high.semver, options) ? high = comparator : ltfn(comparator.semver, low.semver, options) && (low = comparator);
            }), high.operator === comp || high.operator === ecomp) return false;
            if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) return false;
            if (low.operator === ecomp && ltfn(version, low.semver)) return false;
          }
          return true;
        }
        Comparator.prototype.parse = function(comp) {
          var r2 = this.options.loose ? safeRe[t2.COMPARATORLOOSE] : safeRe[t2.COMPARATOR], m2 = comp.match(r2);
          if (!m2) throw new TypeError("Invalid comparator: " + comp);
          this.operator = void 0 !== m2[1] ? m2[1] : "", "=" === this.operator && (this.operator = ""), m2[2] ? this.semver = new SemVer(m2[2], this.options.loose) : this.semver = ANY;
        }, Comparator.prototype.toString = function() {
          return this.value;
        }, Comparator.prototype.test = function(version) {
          if (debug2("Comparator.test", version, this.options.loose), this.semver === ANY || version === ANY) return true;
          if ("string" == typeof version) try {
            version = new SemVer(version, this.options);
          } catch (er) {
            return false;
          }
          return cmp(version, this.operator, this.semver, this.options);
        }, Comparator.prototype.intersects = function(comp, options) {
          if (!(comp instanceof Comparator)) throw new TypeError("a Comparator is required");
          var rangeTmp;
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), "" === this.operator) return "" === this.value || (rangeTmp = new Range(comp.value, options), satisfies(this.value, rangeTmp, options));
          if ("" === comp.operator) return "" === comp.value || (rangeTmp = new Range(this.value, options), satisfies(comp.semver, rangeTmp, options));
          var sameDirectionIncreasing = !(">=" !== this.operator && ">" !== this.operator || ">=" !== comp.operator && ">" !== comp.operator), sameDirectionDecreasing = !("<=" !== this.operator && "<" !== this.operator || "<=" !== comp.operator && "<" !== comp.operator), sameSemVer = this.semver.version === comp.semver.version, differentDirectionsInclusive = !(">=" !== this.operator && "<=" !== this.operator || ">=" !== comp.operator && "<=" !== comp.operator), oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && (">=" === this.operator || ">" === this.operator) && ("<=" === comp.operator || "<" === comp.operator), oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && ("<=" === this.operator || "<" === this.operator) && (">=" === comp.operator || ">" === comp.operator);
          return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
        }, exports2.Range = Range, Range.prototype.format = function() {
          return this.range = this.set.map(function(comps) {
            return comps.join(" ").trim();
          }).join("||").trim(), this.range;
        }, Range.prototype.toString = function() {
          return this.range;
        }, Range.prototype.parseRange = function(range) {
          var loose = this.options.loose, hr = loose ? safeRe[t2.HYPHENRANGELOOSE] : safeRe[t2.HYPHENRANGE];
          range = range.replace(hr, hyphenReplace), debug2("hyphen replace", range), range = range.replace(safeRe[t2.COMPARATORTRIM], "$1$2$3"), debug2("comparator trim", range, safeRe[t2.COMPARATORTRIM]), range = (range = (range = range.replace(safeRe[t2.TILDETRIM], "$1~")).replace(safeRe[t2.CARETTRIM], "$1^")).split(/\s+/).join(" ");
          var compRe = loose ? safeRe[t2.COMPARATORLOOSE] : safeRe[t2.COMPARATOR], set = range.split(" ").map(function(comp) {
            return function(comp2, options) {
              return debug2("comp", comp2, options), comp2 = function(comp3, options2) {
                return comp3.trim().split(/\s+/).map(function(comp4) {
                  return function(comp5, options3) {
                    debug2("caret", comp5, options3);
                    var r2 = options3.loose ? safeRe[t2.CARETLOOSE] : safeRe[t2.CARET];
                    return comp5.replace(r2, function(_2, M, m2, p, pr) {
                      var ret;
                      return debug2("caret", comp5, _2, M, m2, p, pr), isX(M) ? ret = "" : isX(m2) ? ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0" : isX(p) ? ret = "0" === M ? ">=" + M + "." + m2 + ".0 <" + M + "." + (+m2 + 1) + ".0" : ">=" + M + "." + m2 + ".0 <" + (+M + 1) + ".0.0" : pr ? (debug2("replaceCaret pr", pr), ret = "0" === M ? "0" === m2 ? ">=" + M + "." + m2 + "." + p + "-" + pr + " <" + M + "." + m2 + "." + (+p + 1) : ">=" + M + "." + m2 + "." + p + "-" + pr + " <" + M + "." + (+m2 + 1) + ".0" : ">=" + M + "." + m2 + "." + p + "-" + pr + " <" + (+M + 1) + ".0.0") : (debug2("no pr"), ret = "0" === M ? "0" === m2 ? ">=" + M + "." + m2 + "." + p + " <" + M + "." + m2 + "." + (+p + 1) : ">=" + M + "." + m2 + "." + p + " <" + M + "." + (+m2 + 1) + ".0" : ">=" + M + "." + m2 + "." + p + " <" + (+M + 1) + ".0.0"), debug2("caret return", ret), ret;
                    });
                  }(comp4, options2);
                }).join(" ");
              }(comp2, options), debug2("caret", comp2), comp2 = function(comp3, options2) {
                return comp3.trim().split(/\s+/).map(function(comp4) {
                  return function(comp5, options3) {
                    var r2 = options3.loose ? safeRe[t2.TILDELOOSE] : safeRe[t2.TILDE];
                    return comp5.replace(r2, function(_2, M, m2, p, pr) {
                      var ret;
                      return debug2("tilde", comp5, _2, M, m2, p, pr), isX(M) ? ret = "" : isX(m2) ? ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0" : isX(p) ? ret = ">=" + M + "." + m2 + ".0 <" + M + "." + (+m2 + 1) + ".0" : pr ? (debug2("replaceTilde pr", pr), ret = ">=" + M + "." + m2 + "." + p + "-" + pr + " <" + M + "." + (+m2 + 1) + ".0") : ret = ">=" + M + "." + m2 + "." + p + " <" + M + "." + (+m2 + 1) + ".0", debug2("tilde return", ret), ret;
                    });
                  }(comp4, options2);
                }).join(" ");
              }(comp2, options), debug2("tildes", comp2), comp2 = function(comp3, options2) {
                return debug2("replaceXRanges", comp3, options2), comp3.split(/\s+/).map(function(comp4) {
                  return function(comp5, options3) {
                    comp5 = comp5.trim();
                    var r2 = options3.loose ? safeRe[t2.XRANGELOOSE] : safeRe[t2.XRANGE];
                    return comp5.replace(r2, function(ret, gtlt, M, m2, p, pr) {
                      debug2("xRange", comp5, ret, gtlt, M, m2, p, pr);
                      var xM = isX(M), xm = xM || isX(m2), xp = xm || isX(p), anyX = xp;
                      return "=" === gtlt && anyX && (gtlt = ""), pr = options3.includePrerelease ? "-0" : "", xM ? ret = ">" === gtlt || "<" === gtlt ? "<0.0.0-0" : "*" : gtlt && anyX ? (xm && (m2 = 0), p = 0, ">" === gtlt ? (gtlt = ">=", xm ? (M = +M + 1, m2 = 0, p = 0) : (m2 = +m2 + 1, p = 0)) : "<=" === gtlt && (gtlt = "<", xm ? M = +M + 1 : m2 = +m2 + 1), ret = gtlt + M + "." + m2 + "." + p + pr) : xm ? ret = ">=" + M + ".0.0" + pr + " <" + (+M + 1) + ".0.0" + pr : xp && (ret = ">=" + M + "." + m2 + ".0" + pr + " <" + M + "." + (+m2 + 1) + ".0" + pr), debug2("xRange return", ret), ret;
                    });
                  }(comp4, options2);
                }).join(" ");
              }(comp2, options), debug2("xrange", comp2), comp2 = function(comp3, options2) {
                return debug2("replaceStars", comp3, options2), comp3.trim().replace(safeRe[t2.STAR], "");
              }(comp2, options), debug2("stars", comp2), comp2;
            }(comp, this.options);
          }, this).join(" ").split(/\s+/);
          return this.options.loose && (set = set.filter(function(comp) {
            return !!comp.match(compRe);
          })), set = set.map(function(comp) {
            return new Comparator(comp, this.options);
          }, this);
        }, Range.prototype.intersects = function(range, options) {
          if (!(range instanceof Range)) throw new TypeError("a Range is required");
          return this.set.some(function(thisComparators) {
            return isSatisfiable(thisComparators, options) && range.set.some(function(rangeComparators) {
              return isSatisfiable(rangeComparators, options) && thisComparators.every(function(thisComparator) {
                return rangeComparators.every(function(rangeComparator) {
                  return thisComparator.intersects(rangeComparator, options);
                });
              });
            });
          });
        }, exports2.toComparators = function(range, options) {
          return new Range(range, options).set.map(function(comp) {
            return comp.map(function(c4) {
              return c4.value;
            }).join(" ").trim().split(" ");
          });
        }, Range.prototype.test = function(version) {
          if (!version) return false;
          if ("string" == typeof version) try {
            version = new SemVer(version, this.options);
          } catch (er) {
            return false;
          }
          for (var i3 = 0; i3 < this.set.length; i3++) if (testSet(this.set[i3], version, this.options)) return true;
          return false;
        }, exports2.satisfies = satisfies, exports2.maxSatisfying = function(versions, range, options) {
          var max = null, maxSV = null;
          try {
            var rangeObj = new Range(range, options);
          } catch (er) {
            return null;
          }
          return versions.forEach(function(v) {
            rangeObj.test(v) && (max && -1 !== maxSV.compare(v) || (maxSV = new SemVer(max = v, options)));
          }), max;
        }, exports2.minSatisfying = function(versions, range, options) {
          var min = null, minSV = null;
          try {
            var rangeObj = new Range(range, options);
          } catch (er) {
            return null;
          }
          return versions.forEach(function(v) {
            rangeObj.test(v) && (min && 1 !== minSV.compare(v) || (minSV = new SemVer(min = v, options)));
          }), min;
        }, exports2.minVersion = function(range, loose) {
          range = new Range(range, loose);
          var minver = new SemVer("0.0.0");
          if (range.test(minver)) return minver;
          if (minver = new SemVer("0.0.0-0"), range.test(minver)) return minver;
          minver = null;
          for (var i3 = 0; i3 < range.set.length; ++i3) {
            range.set[i3].forEach(function(comparator) {
              var compver = new SemVer(comparator.semver.version);
              switch (comparator.operator) {
                case ">":
                  0 === compver.prerelease.length ? compver.patch++ : compver.prerelease.push(0), compver.raw = compver.format();
                case "":
                case ">=":
                  minver && !gt(minver, compver) || (minver = compver);
                  break;
                case "<":
                case "<=":
                  break;
                default:
                  throw new Error("Unexpected operation: " + comparator.operator);
              }
            });
          }
          if (minver && range.test(minver)) return minver;
          return null;
        }, exports2.validRange = function(range, options) {
          try {
            return new Range(range, options).range || "*";
          } catch (er) {
            return null;
          }
        }, exports2.ltr = function(version, range, options) {
          return outside(version, range, "<", options);
        }, exports2.gtr = function(version, range, options) {
          return outside(version, range, ">", options);
        }, exports2.outside = outside, exports2.prerelease = function(version, options) {
          var parsed = parse(version, options);
          return parsed && parsed.prerelease.length ? parsed.prerelease : null;
        }, exports2.intersects = function(r1, r2, options) {
          return r1 = new Range(r1, options), r2 = new Range(r2, options), r1.intersects(r2);
        }, exports2.coerce = function(version, options) {
          if (version instanceof SemVer) return version;
          "number" == typeof version && (version = String(version));
          if ("string" != typeof version) return null;
          var match = null;
          if ((options = options || {}).rtl) {
            for (var next; (next = safeRe[t2.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length); ) match && next.index + next[0].length === match.index + match[0].length || (match = next), safeRe[t2.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
            safeRe[t2.COERCERTL].lastIndex = -1;
          } else match = version.match(safeRe[t2.COERCE]);
          if (null === match) return null;
          return parse(match[2] + "." + (match[3] || "0") + "." + (match[4] || "0"), options);
        };
      }, "./node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        const os = __webpack_require__2("os"), tty4 = __webpack_require__2("tty"), hasFlag = __webpack_require__2("./node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js"), { env } = process;
        let forceColor;
        function translateLevel(level) {
          return 0 !== level && { level, hasBasic: true, has256: level >= 2, has16m: level >= 3 };
        }
        function supportsColor(haveStream, streamIsTTY) {
          if (0 === forceColor) return 0;
          if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) return 3;
          if (hasFlag("color=256")) return 2;
          if (haveStream && !streamIsTTY && void 0 === forceColor) return 0;
          const min = forceColor || 0;
          if ("dumb" === env.TERM) return min;
          if ("win32" === process.platform) {
            const osRelease = os.release().split(".");
            return Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586 ? Number(osRelease[2]) >= 14931 ? 3 : 2 : 1;
          }
          if ("CI" in env) return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((sign) => sign in env) || "codeship" === env.CI_NAME ? 1 : min;
          if ("TEAMCITY_VERSION" in env) return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
          if ("truecolor" === env.COLORTERM) return 3;
          if ("TERM_PROGRAM" in env) {
            const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
            switch (env.TERM_PROGRAM) {
              case "iTerm.app":
                return version >= 3 ? 3 : 2;
              case "Apple_Terminal":
                return 2;
            }
          }
          return /-256(color)?$/i.test(env.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM) || "COLORTERM" in env ? 1 : min;
        }
        hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never") ? forceColor = 0 : (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) && (forceColor = 1), "FORCE_COLOR" in env && (forceColor = "true" === env.FORCE_COLOR ? 1 : "false" === env.FORCE_COLOR ? 0 : 0 === env.FORCE_COLOR.length ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3)), module2.exports = { supportsColor: function(stream) {
          return translateLevel(supportsColor(stream, stream && stream.isTTY));
        }, stdout: translateLevel(supportsColor(true, tty4.isatty(1))), stderr: translateLevel(supportsColor(true, tty4.isatty(2))) };
      }, "./stubs/babel-codeframe.js": (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
        "use strict";
        function codeFrameColumns() {
          return "";
        }
        __webpack_require__2.r(__webpack_exports__2), __webpack_require__2.d(__webpack_exports__2, { codeFrameColumns: () => codeFrameColumns });
      }, "./stubs/helper-compilation-targets.js": (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
        "use strict";
        function getTargets() {
          return {};
        }
        __webpack_require__2.r(__webpack_exports__2), __webpack_require__2.d(__webpack_exports__2, { default: () => getTargets });
      }, assert: (module2) => {
        "use strict";
        module2.exports = __require("assert");
      }, fs: (module2) => {
        "use strict";
        module2.exports = __require("fs");
      }, module: (module2) => {
        "use strict";
        module2.exports = __require("module");
      }, os: (module2) => {
        "use strict";
        module2.exports = __require("os");
      }, path: (module2) => {
        "use strict";
        module2.exports = __require("path");
      }, process: (module2) => {
        "use strict";
        module2.exports = __require("process");
      }, tty: (module2) => {
        "use strict";
        module2.exports = __require("tty");
      }, url: (module2) => {
        "use strict";
        module2.exports = __require("url");
      }, util: (module2) => {
        "use strict";
        module2.exports = __require("util");
      }, v8: (module2) => {
        "use strict";
        module2.exports = __require("v8");
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.assertSimpleType = assertSimpleType, exports2.makeStrongCache = makeStrongCache, exports2.makeStrongCacheSync = function(handler) {
          return synchronize(makeStrongCache(handler));
        }, exports2.makeWeakCache = makeWeakCache, exports2.makeWeakCacheSync = function(handler) {
          return synchronize(makeWeakCache(handler));
        };
        var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/util.js");
        const synchronize = (gen) => _gensync()(gen).sync;
        function* genTrue() {
          return true;
        }
        function makeWeakCache(handler) {
          return makeCachedFunction(WeakMap, handler);
        }
        function makeStrongCache(handler) {
          return makeCachedFunction(Map, handler);
        }
        function makeCachedFunction(CallCache, handler) {
          const callCacheSync = new CallCache(), callCacheAsync = new CallCache(), futureCache = new CallCache();
          return function* (arg, data) {
            const asyncContext = yield* (0, _async.isAsync)(), callCache = asyncContext ? callCacheAsync : callCacheSync, cached = yield* function* (asyncContext2, callCache2, futureCache2, arg2, data2) {
              const cached2 = yield* getCachedValue(callCache2, arg2, data2);
              if (cached2.valid) return cached2;
              if (asyncContext2) {
                const cached3 = yield* getCachedValue(futureCache2, arg2, data2);
                if (cached3.valid) {
                  return { valid: true, value: yield* (0, _async.waitFor)(cached3.value.promise) };
                }
              }
              return { valid: false, value: null };
            }(asyncContext, callCache, futureCache, arg, data);
            if (cached.valid) return cached.value;
            const cache = new CacheConfigurator(data), handlerResult = handler(arg, cache);
            let finishLock, value2;
            return value2 = (0, _util.isIterableIterator)(handlerResult) ? yield* (0, _async.onFirstPause)(handlerResult, () => {
              finishLock = function(config, futureCache2, arg2) {
                const finishLock2 = new Lock();
                return updateFunctionCache(futureCache2, config, arg2, finishLock2), finishLock2;
              }(cache, futureCache, arg);
            }) : handlerResult, updateFunctionCache(callCache, cache, arg, value2), finishLock && (futureCache.delete(arg), finishLock.release(value2)), value2;
          };
        }
        function* getCachedValue(cache, arg, data) {
          const cachedValue = cache.get(arg);
          if (cachedValue) {
            for (const { value: value2, valid } of cachedValue) if (yield* valid(data)) return { valid: true, value: value2 };
          }
          return { valid: false, value: null };
        }
        function updateFunctionCache(cache, config, arg, value2) {
          config.configured() || config.forever();
          let cachedValue = cache.get(arg);
          switch (config.deactivate(), config.mode()) {
            case "forever":
              cachedValue = [{ value: value2, valid: genTrue }], cache.set(arg, cachedValue);
              break;
            case "invalidate":
              cachedValue = [{ value: value2, valid: config.validator() }], cache.set(arg, cachedValue);
              break;
            case "valid":
              cachedValue ? cachedValue.push({ value: value2, valid: config.validator() }) : (cachedValue = [{ value: value2, valid: config.validator() }], cache.set(arg, cachedValue));
          }
        }
        class CacheConfigurator {
          constructor(data) {
            this._active = true, this._never = false, this._forever = false, this._invalidate = false, this._configured = false, this._pairs = [], this._data = void 0, this._data = data;
          }
          simple() {
            return function(cache) {
              function cacheFn(val) {
                if ("boolean" != typeof val) return cache.using(() => assertSimpleType(val()));
                val ? cache.forever() : cache.never();
              }
              return cacheFn.forever = () => cache.forever(), cacheFn.never = () => cache.never(), cacheFn.using = (cb) => cache.using(() => assertSimpleType(cb())), cacheFn.invalidate = (cb) => cache.invalidate(() => assertSimpleType(cb())), cacheFn;
            }(this);
          }
          mode() {
            return this._never ? "never" : this._forever ? "forever" : this._invalidate ? "invalidate" : "valid";
          }
          forever() {
            if (!this._active) throw new Error("Cannot change caching after evaluation has completed.");
            if (this._never) throw new Error("Caching has already been configured with .never()");
            this._forever = true, this._configured = true;
          }
          never() {
            if (!this._active) throw new Error("Cannot change caching after evaluation has completed.");
            if (this._forever) throw new Error("Caching has already been configured with .forever()");
            this._never = true, this._configured = true;
          }
          using(handler) {
            if (!this._active) throw new Error("Cannot change caching after evaluation has completed.");
            if (this._never || this._forever) throw new Error("Caching has already been configured with .never or .forever()");
            this._configured = true;
            const key = handler(this._data), fn = (0, _async.maybeAsync)(handler, "You appear to be using an async cache handler, but Babel has been called synchronously");
            return (0, _async.isThenable)(key) ? key.then((key2) => (this._pairs.push([key2, fn]), key2)) : (this._pairs.push([key, fn]), key);
          }
          invalidate(handler) {
            return this._invalidate = true, this.using(handler);
          }
          validator() {
            const pairs = this._pairs;
            return function* (data) {
              for (const [key, fn] of pairs) if (key !== (yield* fn(data))) return false;
              return true;
            };
          }
          deactivate() {
            this._active = false;
          }
          configured() {
            return this._configured;
          }
        }
        function assertSimpleType(value2) {
          if ((0, _async.isThenable)(value2)) throw new Error("You appear to be using an async cache handler, which your current version of Babel does not support. We may add support for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synchronously handle your caching logic.");
          if (null != value2 && "string" != typeof value2 && "boolean" != typeof value2 && "number" != typeof value2) throw new Error("Cache keys must be either string, boolean, number, null, or undefined.");
          return value2;
        }
        class Lock {
          constructor() {
            this.released = false, this.promise = void 0, this._resolve = void 0, this.promise = new Promise((resolve) => {
              this._resolve = resolve;
            });
          }
          release(value2) {
            this.released = true, this._resolve(value2);
          }
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/config-chain.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _debug() {
          const data = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js");
          return _debug = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.buildPresetChain = function* (arg, context) {
          const chain = yield* buildPresetChainWalker(arg, context);
          return chain ? { plugins: dedupDescriptors(chain.plugins), presets: dedupDescriptors(chain.presets), options: chain.options.map((o3) => normalizeOptions2(o3)), files: /* @__PURE__ */ new Set() } : null;
        }, exports2.buildPresetChainWalker = void 0, exports2.buildRootChain = function* (opts, context) {
          let configReport, babelRcReport;
          const programmaticLogger = new _printer.ConfigPrinter(), programmaticChain = yield* loadProgrammaticChain({ options: opts, dirname: context.cwd }, context, void 0, programmaticLogger);
          if (!programmaticChain) return null;
          const programmaticReport = yield* programmaticLogger.output();
          let configFile;
          "string" == typeof opts.configFile ? configFile = yield* (0, _index.loadConfig)(opts.configFile, context.cwd, context.envName, context.caller) : false !== opts.configFile && (configFile = yield* (0, _index.findRootConfig)(context.root, context.envName, context.caller));
          let { babelrc, babelrcRoots } = opts, babelrcRootsDirectory = context.cwd;
          const configFileChain = emptyChain(), configFileLogger = new _printer.ConfigPrinter();
          if (configFile) {
            const validatedFile = validateConfigFile(configFile), result = yield* loadFileChain(validatedFile, context, void 0, configFileLogger);
            if (!result) return null;
            configReport = yield* configFileLogger.output(), void 0 === babelrc && (babelrc = validatedFile.options.babelrc), void 0 === babelrcRoots && (babelrcRootsDirectory = validatedFile.dirname, babelrcRoots = validatedFile.options.babelrcRoots), mergeChain(configFileChain, result);
          }
          let ignoreFile, babelrcFile, isIgnored = false;
          const fileChain = emptyChain();
          if ((true === babelrc || void 0 === babelrc) && "string" == typeof context.filename) {
            const pkgData = yield* (0, _index.findPackageData)(context.filename);
            if (pkgData && function(context2, pkgData2, babelrcRoots2, babelrcRootsDirectory2) {
              if ("boolean" == typeof babelrcRoots2) return babelrcRoots2;
              const absoluteRoot = context2.root;
              if (void 0 === babelrcRoots2) return pkgData2.directories.includes(absoluteRoot);
              let babelrcPatterns = babelrcRoots2;
              Array.isArray(babelrcPatterns) || (babelrcPatterns = [babelrcPatterns]);
              if (babelrcPatterns = babelrcPatterns.map((pat) => "string" == typeof pat ? _path().resolve(babelrcRootsDirectory2, pat) : pat), 1 === babelrcPatterns.length && babelrcPatterns[0] === absoluteRoot) return pkgData2.directories.includes(absoluteRoot);
              return babelrcPatterns.some((pat) => ("string" == typeof pat && (pat = (0, _patternToRegex.default)(pat, babelrcRootsDirectory2)), pkgData2.directories.some((directory) => matchPattern(pat, babelrcRootsDirectory2, directory, context2))));
            }(context, pkgData, babelrcRoots, babelrcRootsDirectory)) {
              if ({ ignore: ignoreFile, config: babelrcFile } = yield* (0, _index.findRelativeConfig)(pkgData, context.envName, context.caller), ignoreFile && fileChain.files.add(ignoreFile.filepath), ignoreFile && shouldIgnore(context, ignoreFile.ignore, null, ignoreFile.dirname) && (isIgnored = true), babelrcFile && !isIgnored) {
                const validatedFile = validateBabelrcFile(babelrcFile), babelrcLogger = new _printer.ConfigPrinter(), result = yield* loadFileChain(validatedFile, context, void 0, babelrcLogger);
                result ? (babelRcReport = yield* babelrcLogger.output(), mergeChain(fileChain, result)) : isIgnored = true;
              }
              babelrcFile && isIgnored && fileChain.files.add(babelrcFile.filepath);
            }
          }
          context.showConfig && console.log(`Babel configs on "${context.filename}" (ascending priority):
` + [configReport, babelRcReport, programmaticReport].filter((x) => !!x).join("\n\n") + "\n-----End Babel configs-----");
          const chain = mergeChain(mergeChain(mergeChain(emptyChain(), configFileChain), fileChain), programmaticChain);
          return { plugins: isIgnored ? [] : dedupDescriptors(chain.plugins), presets: isIgnored ? [] : dedupDescriptors(chain.presets), options: isIgnored ? [] : chain.options.map((o3) => normalizeOptions2(o3)), fileHandling: isIgnored ? "ignored" : "transpile", ignore: ignoreFile || void 0, babelrc: babelrcFile || void 0, config: configFile || void 0, files: chain.files };
        };
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/options.js"), _patternToRegex = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/pattern-to-regex.js"), _printer = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/printer.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/index.js"), _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js"), _configDescriptors = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/config-descriptors.js");
        const debug2 = _debug()("babel:config:config-chain");
        const buildPresetChainWalker = exports2.buildPresetChainWalker = makeChainWalker({ root: (preset) => loadPresetDescriptors(preset), env: (preset, envName) => loadPresetEnvDescriptors(preset)(envName), overrides: (preset, index) => loadPresetOverridesDescriptors(preset)(index), overridesEnv: (preset, index, envName) => loadPresetOverridesEnvDescriptors(preset)(index)(envName), createLogger: () => () => {
        } }), loadPresetDescriptors = (0, _caching.makeWeakCacheSync)((preset) => buildRootDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors)), loadPresetEnvDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((envName) => buildEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, envName))), loadPresetOverridesDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((index) => buildOverrideDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index))), loadPresetOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((index) => (0, _caching.makeStrongCacheSync)((envName) => buildOverrideEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index, envName))));
        const validateConfigFile = (0, _caching.makeWeakCacheSync)((file) => ({ filepath: file.filepath, dirname: file.dirname, options: (0, _options.validate)("configfile", file.options, file.filepath) })), validateBabelrcFile = (0, _caching.makeWeakCacheSync)((file) => ({ filepath: file.filepath, dirname: file.dirname, options: (0, _options.validate)("babelrcfile", file.options, file.filepath) })), validateExtendFile = (0, _caching.makeWeakCacheSync)((file) => ({ filepath: file.filepath, dirname: file.dirname, options: (0, _options.validate)("extendsfile", file.options, file.filepath) })), loadProgrammaticChain = makeChainWalker({ root: (input) => buildRootDescriptors(input, "base", _configDescriptors.createCachedDescriptors), env: (input, envName) => buildEnvDescriptors(input, "base", _configDescriptors.createCachedDescriptors, envName), overrides: (input, index) => buildOverrideDescriptors(input, "base", _configDescriptors.createCachedDescriptors, index), overridesEnv: (input, index, envName) => buildOverrideEnvDescriptors(input, "base", _configDescriptors.createCachedDescriptors, index, envName), createLogger: (input, context, baseLogger) => function(_2, context2, baseLogger2) {
          var _context$caller;
          if (!baseLogger2) return () => {
          };
          return baseLogger2.configure(context2.showConfig, _printer.ChainFormatter.Programmatic, { callerName: null == (_context$caller = context2.caller) ? void 0 : _context$caller.name });
        }(0, context, baseLogger) }), loadFileChainWalker = makeChainWalker({ root: (file) => loadFileDescriptors(file), env: (file, envName) => loadFileEnvDescriptors(file)(envName), overrides: (file, index) => loadFileOverridesDescriptors(file)(index), overridesEnv: (file, index, envName) => loadFileOverridesEnvDescriptors(file)(index)(envName), createLogger: (file, context, baseLogger) => function(filepath, context2, baseLogger2) {
          if (!baseLogger2) return () => {
          };
          return baseLogger2.configure(context2.showConfig, _printer.ChainFormatter.Config, { filepath });
        }(file.filepath, context, baseLogger) });
        function* loadFileChain(input, context, files, baseLogger) {
          const chain = yield* loadFileChainWalker(input, context, files, baseLogger);
          return null == chain || chain.files.add(input.filepath), chain;
        }
        const loadFileDescriptors = (0, _caching.makeWeakCacheSync)((file) => buildRootDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors)), loadFileEnvDescriptors = (0, _caching.makeWeakCacheSync)((file) => (0, _caching.makeStrongCacheSync)((envName) => buildEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, envName))), loadFileOverridesDescriptors = (0, _caching.makeWeakCacheSync)((file) => (0, _caching.makeStrongCacheSync)((index) => buildOverrideDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, index))), loadFileOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)((file) => (0, _caching.makeStrongCacheSync)((index) => (0, _caching.makeStrongCacheSync)((envName) => buildOverrideEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, index, envName))));
        function buildRootDescriptors({ dirname, options }, alias, descriptors2) {
          return descriptors2(dirname, options, alias);
        }
        function buildEnvDescriptors({ dirname, options }, alias, descriptors2, envName) {
          var _options$env;
          const opts = null == (_options$env = options.env) ? void 0 : _options$env[envName];
          return opts ? descriptors2(dirname, opts, `${alias}.env["${envName}"]`) : null;
        }
        function buildOverrideDescriptors({ dirname, options }, alias, descriptors2, index) {
          var _options$overrides;
          const opts = null == (_options$overrides = options.overrides) ? void 0 : _options$overrides[index];
          if (!opts) throw new Error("Assertion failure - missing override");
          return descriptors2(dirname, opts, `${alias}.overrides[${index}]`);
        }
        function buildOverrideEnvDescriptors({ dirname, options }, alias, descriptors2, index, envName) {
          var _options$overrides2, _override$env;
          const override = null == (_options$overrides2 = options.overrides) ? void 0 : _options$overrides2[index];
          if (!override) throw new Error("Assertion failure - missing override");
          const opts = null == (_override$env = override.env) ? void 0 : _override$env[envName];
          return opts ? descriptors2(dirname, opts, `${alias}.overrides[${index}].env["${envName}"]`) : null;
        }
        function makeChainWalker({ root, env, overrides, overridesEnv, createLogger }) {
          return function* (input, context, files = /* @__PURE__ */ new Set(), baseLogger) {
            const { dirname } = input, flattenedConfigs = [], rootOpts = root(input);
            if (configIsApplicable(rootOpts, dirname, context, input.filepath)) {
              flattenedConfigs.push({ config: rootOpts, envName: void 0, index: void 0 });
              const envOpts = env(input, context.envName);
              envOpts && configIsApplicable(envOpts, dirname, context, input.filepath) && flattenedConfigs.push({ config: envOpts, envName: context.envName, index: void 0 }), (rootOpts.options.overrides || []).forEach((_2, index) => {
                const overrideOps = overrides(input, index);
                if (configIsApplicable(overrideOps, dirname, context, input.filepath)) {
                  flattenedConfigs.push({ config: overrideOps, index, envName: void 0 });
                  const overrideEnvOpts = overridesEnv(input, index, context.envName);
                  overrideEnvOpts && configIsApplicable(overrideEnvOpts, dirname, context, input.filepath) && flattenedConfigs.push({ config: overrideEnvOpts, index, envName: context.envName });
                }
              });
            }
            if (flattenedConfigs.some(({ config: { options: { ignore, only } } }) => shouldIgnore(context, ignore, only, dirname))) return null;
            const chain = emptyChain(), logger = createLogger(input, context, baseLogger);
            for (const { config, index, envName } of flattenedConfigs) {
              if (!(yield* mergeExtendsChain(chain, config.options, dirname, context, files, baseLogger))) return null;
              logger(config, index, envName), yield* mergeChainOpts(chain, config);
            }
            return chain;
          };
        }
        function* mergeExtendsChain(chain, opts, dirname, context, files, baseLogger) {
          if (void 0 === opts.extends) return true;
          const file = yield* (0, _index.loadConfig)(opts.extends, dirname, context.envName, context.caller);
          if (files.has(file)) throw new Error(`Configuration cycle detected loading ${file.filepath}.
File already loaded following the config chain:
` + Array.from(files, (file2) => ` - ${file2.filepath}`).join("\n"));
          files.add(file);
          const fileChain = yield* loadFileChain(validateExtendFile(file), context, files, baseLogger);
          return files.delete(file), !!fileChain && (mergeChain(chain, fileChain), true);
        }
        function mergeChain(target, source) {
          target.options.push(...source.options), target.plugins.push(...source.plugins), target.presets.push(...source.presets);
          for (const file of source.files) target.files.add(file);
          return target;
        }
        function* mergeChainOpts(target, { options, plugins, presets }) {
          return target.options.push(options), target.plugins.push(...yield* plugins()), target.presets.push(...yield* presets()), target;
        }
        function emptyChain() {
          return { options: [], presets: [], plugins: [], files: /* @__PURE__ */ new Set() };
        }
        function normalizeOptions2(opts) {
          const options = Object.assign({}, opts);
          return delete options.extends, delete options.env, delete options.overrides, delete options.plugins, delete options.presets, delete options.passPerPreset, delete options.ignore, delete options.only, delete options.test, delete options.include, delete options.exclude, hasOwnProperty.call(options, "sourceMap") && (options.sourceMaps = options.sourceMap, delete options.sourceMap), options;
        }
        function dedupDescriptors(items) {
          const map = /* @__PURE__ */ new Map(), descriptors2 = [];
          for (const item of items) if ("function" == typeof item.value) {
            const fnKey = item.value;
            let nameMap = map.get(fnKey);
            nameMap || (nameMap = /* @__PURE__ */ new Map(), map.set(fnKey, nameMap));
            let desc = nameMap.get(item.name);
            desc ? desc.value = item : (desc = { value: item }, descriptors2.push(desc), item.ownPass || nameMap.set(item.name, desc));
          } else descriptors2.push({ value: item });
          return descriptors2.reduce((acc, desc) => (acc.push(desc.value), acc), []);
        }
        function configIsApplicable({ options }, dirname, context, configName) {
          return (void 0 === options.test || configFieldIsApplicable(context, options.test, dirname, configName)) && (void 0 === options.include || configFieldIsApplicable(context, options.include, dirname, configName)) && (void 0 === options.exclude || !configFieldIsApplicable(context, options.exclude, dirname, configName));
        }
        function configFieldIsApplicable(context, test, dirname, configName) {
          return matchesPatterns(context, Array.isArray(test) ? test : [test], dirname, configName);
        }
        function ignoreListReplacer(_key, value2) {
          return value2 instanceof RegExp ? String(value2) : value2;
        }
        function shouldIgnore(context, ignore, only, dirname) {
          if (ignore && matchesPatterns(context, ignore, dirname)) {
            var _context$filename;
            const message = `No config is applied to "${null != (_context$filename = context.filename) ? _context$filename : "(unknown)"}" because it matches one of \`ignore: ${JSON.stringify(ignore, ignoreListReplacer)}\` from "${dirname}"`;
            return debug2(message), context.showConfig && console.log(message), true;
          }
          if (only && !matchesPatterns(context, only, dirname)) {
            var _context$filename2;
            const message = `No config is applied to "${null != (_context$filename2 = context.filename) ? _context$filename2 : "(unknown)"}" because it fails to match one of \`only: ${JSON.stringify(only, ignoreListReplacer)}\` from "${dirname}"`;
            return debug2(message), context.showConfig && console.log(message), true;
          }
          return false;
        }
        function matchesPatterns(context, patterns, dirname, configName) {
          return patterns.some((pattern) => matchPattern(pattern, dirname, context.filename, context, configName));
        }
        function matchPattern(pattern, dirname, pathToTest, context, configName) {
          if ("function" == typeof pattern) return !!(0, _rewriteStackTrace.endHiddenCallStack)(pattern)(pathToTest, { dirname, envName: context.envName, caller: context.caller });
          if ("string" != typeof pathToTest) throw new _configError.default("Configuration contains string/RegExp pattern, but no filename was passed to Babel", configName);
          return "string" == typeof pattern && (pattern = (0, _patternToRegex.default)(pattern, dirname)), pattern.test(pathToTest);
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/config-descriptors.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.createCachedDescriptors = function(dirname, options, alias) {
          const { plugins, presets, passPerPreset } = options;
          return { options: optionsWithResolvedBrowserslistConfigFile(options, dirname), plugins: plugins ? () => createCachedPluginDescriptors(plugins, dirname)(alias) : () => handlerOf([]), presets: presets ? () => createCachedPresetDescriptors(presets, dirname)(alias)(!!passPerPreset) : () => handlerOf([]) };
        }, exports2.createDescriptor = createDescriptor, exports2.createUncachedDescriptors = function(dirname, options, alias) {
          return { options: optionsWithResolvedBrowserslistConfigFile(options, dirname), plugins: (0, _functional.once)(() => createPluginDescriptors(options.plugins || [], dirname, alias)), presets: (0, _functional.once)(() => createPresetDescriptors(options.presets || [], dirname, alias, !!options.passPerPreset)) };
        };
        var _functional = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/functional.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/index.js"), _item = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/item.js"), _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js"), _resolveTargets = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/resolve-targets.js");
        function* handlerOf(value2) {
          return value2;
        }
        function optionsWithResolvedBrowserslistConfigFile(options, dirname) {
          return "string" == typeof options.browserslistConfigFile && (options.browserslistConfigFile = (0, _resolveTargets.resolveBrowserslistConfigFile)(options.browserslistConfigFile, dirname)), options;
        }
        const PRESET_DESCRIPTOR_CACHE = /* @__PURE__ */ new WeakMap(), createCachedPresetDescriptors = (0, _caching.makeWeakCacheSync)((items, cache) => {
          const dirname = cache.using((dir) => dir);
          return (0, _caching.makeStrongCacheSync)((alias) => (0, _caching.makeStrongCache)(function* (passPerPreset) {
            return (yield* createPresetDescriptors(items, dirname, alias, passPerPreset)).map((desc) => loadCachedDescriptor(PRESET_DESCRIPTOR_CACHE, desc));
          }));
        }), PLUGIN_DESCRIPTOR_CACHE = /* @__PURE__ */ new WeakMap(), createCachedPluginDescriptors = (0, _caching.makeWeakCacheSync)((items, cache) => {
          const dirname = cache.using((dir) => dir);
          return (0, _caching.makeStrongCache)(function* (alias) {
            return (yield* createPluginDescriptors(items, dirname, alias)).map((desc) => loadCachedDescriptor(PLUGIN_DESCRIPTOR_CACHE, desc));
          });
        }), DEFAULT_OPTIONS2 = {};
        function loadCachedDescriptor(cache, desc) {
          const { value: value2, options = DEFAULT_OPTIONS2 } = desc;
          if (false === options) return desc;
          let cacheByOptions = cache.get(value2);
          cacheByOptions || (cacheByOptions = /* @__PURE__ */ new WeakMap(), cache.set(value2, cacheByOptions));
          let possibilities = cacheByOptions.get(options);
          if (possibilities || (possibilities = [], cacheByOptions.set(options, possibilities)), !possibilities.includes(desc)) {
            const matches = possibilities.filter((possibility) => {
              return b2 = desc, (a2 = possibility).name === b2.name && a2.value === b2.value && a2.options === b2.options && a2.dirname === b2.dirname && a2.alias === b2.alias && a2.ownPass === b2.ownPass && (null == (_a$file = a2.file) ? void 0 : _a$file.request) === (null == (_b$file = b2.file) ? void 0 : _b$file.request) && (null == (_a$file2 = a2.file) ? void 0 : _a$file2.resolved) === (null == (_b$file2 = b2.file) ? void 0 : _b$file2.resolved);
              var a2, b2, _a$file, _b$file, _a$file2, _b$file2;
            });
            if (matches.length > 0) return matches[0];
            possibilities.push(desc);
          }
          return desc;
        }
        function* createPresetDescriptors(items, dirname, alias, passPerPreset) {
          return yield* createDescriptors("preset", items, dirname, alias, passPerPreset);
        }
        function* createPluginDescriptors(items, dirname, alias) {
          return yield* createDescriptors("plugin", items, dirname, alias);
        }
        function* createDescriptors(type, items, dirname, alias, ownPass) {
          const descriptors2 = yield* _gensync().all(items.map((item, index) => createDescriptor(item, dirname, { type, alias: `${alias}$${index}`, ownPass: !!ownPass })));
          return function(items2) {
            const map = /* @__PURE__ */ new Map();
            for (const item of items2) {
              if ("function" != typeof item.value) continue;
              let nameMap = map.get(item.value);
              if (nameMap || (nameMap = /* @__PURE__ */ new Set(), map.set(item.value, nameMap)), nameMap.has(item.name)) {
                const conflicts = items2.filter((i2) => i2.value === item.value);
                throw new Error(["Duplicate plugin/preset detected.", "If you'd like to use two separate instances of a plugin,", "they need separate names, e.g.", "", "  plugins: [", "    ['some-plugin', {}],", "    ['some-plugin', {}, 'some unique name'],", "  ]", "", "Duplicates detected are:", `${JSON.stringify(conflicts, null, 2)}`].join("\n"));
              }
              nameMap.add(item.name);
            }
          }(descriptors2), descriptors2;
        }
        function* createDescriptor(pair, dirname, { type, alias, ownPass }) {
          const desc = (0, _item.getItemDescriptor)(pair);
          if (desc) return desc;
          let name, options, file, value2 = pair;
          Array.isArray(value2) && (3 === value2.length ? [value2, options, name] = value2 : [value2, options] = value2);
          let filepath = null;
          if ("string" == typeof value2) {
            if ("string" != typeof type) throw new Error("To resolve a string-based item, the type of item must be given");
            const resolver = "plugin" === type ? _index.loadPlugin : _index.loadPreset, request = value2;
            ({ filepath, value: value2 } = yield* resolver(value2, dirname)), file = { request, resolved: filepath };
          }
          if (!value2) throw new Error(`Unexpected falsy value: ${String(value2)}`);
          if ("object" == typeof value2 && value2.__esModule) {
            if (!value2.default) throw new Error("Must export a default export when using ES6 modules.");
            value2 = value2.default;
          }
          if ("object" != typeof value2 && "function" != typeof value2) throw new Error(`Unsupported format: ${typeof value2}. Expected an object or a function.`);
          if (null !== filepath && "object" == typeof value2 && value2) throw new Error(`Plugin/Preset files are not allowed to export objects, only functions. In ${filepath}`);
          return { name, alias: filepath || alias, value: value2, options, dirname, ownPass, file };
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/configuration.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _debug() {
          const data = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js");
          return _debug = function() {
            return data;
          }, data;
        }
        function _fs() {
          const data = __webpack_require__2("fs");
          return _fs = function() {
            return data;
          }, data;
        }
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _json() {
          const data = __webpack_require__2("./node_modules/.pnpm/json5@2.2.3/node_modules/json5/dist/index.mjs");
          return _json = function() {
            return data;
          }, data;
        }
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ROOT_CONFIG_FILENAMES = void 0, exports2.findConfigUpwards = function(rootDir) {
          let dirname = rootDir;
          for (; ; ) {
            for (const filename of ROOT_CONFIG_FILENAMES) if (_fs().existsSync(_path().join(dirname, filename))) return dirname;
            const nextDir = _path().dirname(dirname);
            if (dirname === nextDir) break;
            dirname = nextDir;
          }
          return null;
        }, exports2.findRelativeConfig = function* (packageData, envName, caller) {
          let config = null, ignore = null;
          const dirname = _path().dirname(packageData.filepath);
          for (const loc of packageData.directories) {
            var _packageData$pkg;
            if (!config) config = yield* loadOneConfig(RELATIVE_CONFIG_FILENAMES, loc, envName, caller, (null == (_packageData$pkg = packageData.pkg) ? void 0 : _packageData$pkg.dirname) === loc ? packageToBabelConfig(packageData.pkg) : null);
            if (!ignore) {
              const ignoreLoc = _path().join(loc, BABELIGNORE_FILENAME);
              ignore = yield* readIgnoreConfig(ignoreLoc), ignore && debug2("Found ignore %o from %o.", ignore.filepath, dirname);
            }
          }
          return { config, ignore };
        }, exports2.findRootConfig = function(dirname, envName, caller) {
          return loadOneConfig(ROOT_CONFIG_FILENAMES, dirname, envName, caller);
        }, exports2.loadConfig = function* (name, dirname, envName, caller) {
          const filepath = (v = process.versions.node, w = "8.9", v = v.split("."), w = w.split("."), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1] ? __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").resolve : (r2, { paths: [b2] }, M = __webpack_require__2("module")) => {
            let f3 = M._findPath(r2, M._nodeModulePaths(b2).concat(b2));
            if (f3) return f3;
            throw f3 = new Error(`Cannot resolve module '${r2}'`), f3.code = "MODULE_NOT_FOUND", f3;
          })(name, { paths: [dirname] }), conf = yield* readConfig(filepath, envName, caller);
          var v, w;
          if (!conf) throw new _configError.default("Config file contains no configuration data", filepath);
          return debug2("Loaded config %o from %o.", name, dirname), conf;
        }, exports2.resolveShowConfigPath = function* (dirname) {
          const targetPath = process.env.BABEL_SHOW_CONFIG_FOR;
          if (null != targetPath) {
            const absolutePath = _path().resolve(dirname, targetPath);
            if (!(yield* fs4.stat(absolutePath)).isFile()) throw new Error(`${absolutePath}: BABEL_SHOW_CONFIG_FOR must refer to a regular file, directories are not supported.`);
            return absolutePath;
          }
          return null;
        };
        var _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js"), _configApi = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/config-api.js"), _utils = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/utils.js"), _moduleTypes = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/module-types.js"), _patternToRegex = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/pattern-to-regex.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js"), fs4 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/fs.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js"), _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js");
        const debug2 = _debug()("babel:config:loading:files:configuration"), ROOT_CONFIG_FILENAMES = exports2.ROOT_CONFIG_FILENAMES = ["babel.config.js", "babel.config.cjs", "babel.config.mjs", "babel.config.json", "babel.config.cts"], RELATIVE_CONFIG_FILENAMES = [".babelrc", ".babelrc.js", ".babelrc.cjs", ".babelrc.mjs", ".babelrc.json", ".babelrc.cts"], BABELIGNORE_FILENAME = ".babelignore", runConfig = (0, _caching.makeWeakCache)(function* (options, cache) {
          return yield* [], { options: (0, _rewriteStackTrace.endHiddenCallStack)(options)((0, _configApi.makeConfigAPI)(cache)), cacheNeedsConfiguration: !cache.configured() };
        });
        function* readConfigCode(filepath, data) {
          if (!_fs().existsSync(filepath)) return null;
          let options = yield* (0, _moduleTypes.default)(filepath, (yield* (0, _async.isAsync)()) ? "auto" : "require", "You appear to be using a native ECMAScript module configuration file, which is only supported when running Babel asynchronously or when using the Node.js `--experimental-require-module` flag.", "You appear to be using a configuration file that contains top-level await, which is only supported when running Babel asynchronously."), cacheNeedsConfiguration = false;
          if ("function" == typeof options && ({ options, cacheNeedsConfiguration } = yield* runConfig(options, data)), !options || "object" != typeof options || Array.isArray(options)) throw new _configError.default("Configuration should be an exported JavaScript object.", filepath);
          if ("function" == typeof options.then) throw null == options.catch || options.catch(() => {
          }), new _configError.default("You appear to be using an async configuration, which your current version of Babel does not support. We may add support for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synchronously return your config.", filepath);
          return cacheNeedsConfiguration && function(filepath2) {
            throw new _configError.default(`Caching was left unconfigured. Babel's plugins, presets, and .babelrc.js files can be configured
for various types of caching, using the first param of their handler functions:

module.exports = function(api) {
  // The API exposes the following:

  // Cache the returned value forever and don't call this function again.
  api.cache(true);

  // Don't cache at all. Not recommended because it will be very slow.
  api.cache(false);

  // Cached based on the value of some function. If this function returns a value different from
  // a previously-encountered value, the plugins will re-evaluate.
  var env = api.cache(() => process.env.NODE_ENV);

  // If testing for a specific env, we recommend specifics to avoid instantiating a plugin for
  // any possible NODE_ENV value that might come up during plugin execution.
  var isProd = api.cache(() => process.env.NODE_ENV === "production");

  // .cache(fn) will perform a linear search though instances to find the matching plugin based
  // based on previous instantiated plugins. If you want to recreate the plugin and discard the
  // previous instance whenever something changes, you may use:
  var isProd = api.cache.invalidate(() => process.env.NODE_ENV === "production");

  // Note, we also expose the following more-verbose versions of the above examples:
  api.cache.forever(); // api.cache(true)
  api.cache.never();   // api.cache(false)
  api.cache.using(fn); // api.cache(fn)

  // Return the value that will be cached.
  return { };
};`, filepath2);
          }(filepath), function(options2, filepath2) {
            let configFilesByFilepath = cfboaf.get(options2);
            configFilesByFilepath || cfboaf.set(options2, configFilesByFilepath = /* @__PURE__ */ new Map());
            let configFile = configFilesByFilepath.get(filepath2);
            configFile || (configFile = { filepath: filepath2, dirname: _path().dirname(filepath2), options: options2 }, configFilesByFilepath.set(filepath2, configFile));
            return configFile;
          }(options, filepath);
        }
        const cfboaf = /* @__PURE__ */ new WeakMap();
        const packageToBabelConfig = (0, _caching.makeWeakCacheSync)((file) => {
          const babel = file.options.babel;
          if (void 0 === babel) return null;
          if ("object" != typeof babel || Array.isArray(babel) || null === babel) throw new _configError.default(".babel property must be an object", file.filepath);
          return { filepath: file.filepath, dirname: file.dirname, options: babel };
        }), readConfigJSON5 = (0, _utils.makeStaticFileCache)((filepath, content) => {
          let options;
          try {
            options = _json().parse(content);
          } catch (err) {
            throw new _configError.default(`Error while parsing config - ${err.message}`, filepath);
          }
          if (!options) throw new _configError.default("No config detected", filepath);
          if ("object" != typeof options) throw new _configError.default("Config returned typeof " + typeof options, filepath);
          if (Array.isArray(options)) throw new _configError.default("Expected config object but found array", filepath);
          return delete options.$schema, { filepath, dirname: _path().dirname(filepath), options };
        }), readIgnoreConfig = (0, _utils.makeStaticFileCache)((filepath, content) => {
          const ignoreDir = _path().dirname(filepath), ignorePatterns = content.split("\n").map((line) => line.replace(/#.*$/, "").trim()).filter(Boolean);
          for (const pattern of ignorePatterns) if ("!" === pattern[0]) throw new _configError.default("Negation of file paths is not supported.", filepath);
          return { filepath, dirname: _path().dirname(filepath), ignore: ignorePatterns.map((pattern) => (0, _patternToRegex.default)(pattern, ignoreDir)) };
        });
        function* loadOneConfig(names, dirname, envName, caller, previousConfig = null) {
          const config = (yield* _gensync().all(names.map((filename) => readConfig(_path().join(dirname, filename), envName, caller)))).reduce((previousConfig2, config2) => {
            if (config2 && previousConfig2) throw new _configError.default(`Multiple configuration files found. Please remove one:
 - ${_path().basename(previousConfig2.filepath)}
 - ${config2.filepath}
from ${dirname}`);
            return config2 || previousConfig2;
          }, previousConfig);
          return config && debug2("Found configuration %o from %o.", config.filepath, dirname), config;
        }
        function readConfig(filepath, envName, caller) {
          switch (_path().extname(filepath)) {
            case ".js":
            case ".cjs":
            case ".mjs":
            case ".cts":
              return readConfigCode(filepath, { envName, caller });
            default:
              return readConfigJSON5(filepath);
          }
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/import.cjs": (module2, __unused_webpack_exports, __webpack_require__2) => {
        module2.exports = function(filepath) {
          return __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files lazy recursive")(filepath);
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "ROOT_CONFIG_FILENAMES", { enumerable: true, get: function() {
          return _configuration.ROOT_CONFIG_FILENAMES;
        } }), Object.defineProperty(exports2, "findConfigUpwards", { enumerable: true, get: function() {
          return _configuration.findConfigUpwards;
        } }), Object.defineProperty(exports2, "findPackageData", { enumerable: true, get: function() {
          return _package.findPackageData;
        } }), Object.defineProperty(exports2, "findRelativeConfig", { enumerable: true, get: function() {
          return _configuration.findRelativeConfig;
        } }), Object.defineProperty(exports2, "findRootConfig", { enumerable: true, get: function() {
          return _configuration.findRootConfig;
        } }), Object.defineProperty(exports2, "loadConfig", { enumerable: true, get: function() {
          return _configuration.loadConfig;
        } }), Object.defineProperty(exports2, "loadPlugin", { enumerable: true, get: function() {
          return _plugins.loadPlugin;
        } }), Object.defineProperty(exports2, "loadPreset", { enumerable: true, get: function() {
          return _plugins.loadPreset;
        } }), Object.defineProperty(exports2, "resolvePlugin", { enumerable: true, get: function() {
          return _plugins.resolvePlugin;
        } }), Object.defineProperty(exports2, "resolvePreset", { enumerable: true, get: function() {
          return _plugins.resolvePreset;
        } }), Object.defineProperty(exports2, "resolveShowConfigPath", { enumerable: true, get: function() {
          return _configuration.resolveShowConfigPath;
        } });
        var _package = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/package.js"), _configuration = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/configuration.js"), _plugins = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/plugins.js");
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/module-types.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function* (filepath, loader, esmError, tlaError) {
          var _async2;
          let async, ext = _path().extname(filepath);
          SUPPORTED_EXTENSIONS.has(ext) || (ext = ".js");
          switch (`${loader} ${ext}`) {
            case "require .cjs":
            case "auto .cjs":
              return loadCjsDefault(filepath, arguments[2]);
            case "require .cts":
            case "auto .cts":
              return function(filepath2) {
                const ext2 = ".cts", hasTsSupport = !!(__webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[".ts"] || __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[".cts"] || __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[".mts"]);
                let handler;
                if (!hasTsSupport) {
                  const opts = { babelrc: false, configFile: false, sourceType: "unambiguous", sourceMaps: "inline", sourceFileName: _path().basename(filepath2), presets: [[getTSPreset(filepath2), Object.assign({ onlyRemoveTypeImports: true, optimizeConstEnums: true }, { allowDeclareFields: true })]] };
                  handler = function(m2, filename) {
                    if (handler && filename.endsWith(ext2)) try {
                      return m2._compile((0, _transformFile.transformFileSync)(filename, Object.assign({}, opts, { filename })).code, filename);
                    } catch (error) {
                      if (!hasTsSupport) {
                        const packageJson = __webpack_require__2("./node_modules/.pnpm/@babel+preset-typescript@7.26.0_@babel+core@7.26.0/node_modules/@babel/preset-typescript/package.json");
                        _semver().lt(packageJson.version, "7.21.4") && console.error("`.cts` configuration file failed to load, please try to update `@babel/preset-typescript`.");
                      }
                      throw error;
                    }
                    return __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[".js"](m2, filename);
                  }, __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[ext2] = handler;
                }
                try {
                  return loadCjsDefault(filepath2);
                } finally {
                  hasTsSupport || (__webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[ext2] === handler && delete __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[ext2], handler = void 0);
                }
              }(filepath);
            case "auto .js":
            case "require .js":
            case "require .mjs":
              try {
                return loadCjsDefault(filepath, arguments[2]);
              } catch (e2) {
                var _async;
                if ("ERR_REQUIRE_ASYNC_MODULE" === e2.code || "ERR_REQUIRE_CYCLE_MODULE" === e2.code && asyncModules.has(filepath)) {
                  if (asyncModules.add(filepath), !(null != (_async = async) ? _async : async = yield* (0, _async3.isAsync)())) throw new _configError.default(tlaError, filepath);
                } else if ("ERR_REQUIRE_ESM" !== e2.code && ".mjs" !== ext) throw e2;
              }
            case "auto .mjs":
              if (null != (_async2 = async) ? _async2 : async = yield* (0, _async3.isAsync)()) return (yield* (0, _async3.waitFor)(loadMjsFromPath(filepath))).default;
              throw new _configError.default(esmError, filepath);
            default:
              throw new Error("Internal Babel error: unreachable code.");
          }
        }, exports2.supportsESM = void 0;
        var _async3 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js");
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _url() {
          const data = __webpack_require__2("url");
          return _url = function() {
            return data;
          }, data;
        }
        function _semver() {
          const data = __webpack_require__2("./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js");
          return _semver = function() {
            return data;
          }, data;
        }
        function _debug() {
          const data = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js");
          return _debug = function() {
            return data;
          }, data;
        }
        var _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js"), _transformFile = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform-file.js");
        function asyncGeneratorStep(n3, t2, e2, r2, o3, a2, c4) {
          try {
            var i2 = n3[a2](c4), u3 = i2.value;
          } catch (n4) {
            return void e2(n4);
          }
          i2.done ? t2(u3) : Promise.resolve(u3).then(r2, o3);
        }
        const debug2 = _debug()("babel:config:loading:files:module-types");
        try {
          var import_ = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/import.cjs");
        } catch (_unused) {
        }
        exports2.supportsESM = _semver().satisfies(process.versions.node, "^12.17 || >=13.2");
        const LOADING_CJS_FILES = /* @__PURE__ */ new Set();
        function loadCjsDefault(filepath) {
          if (LOADING_CJS_FILES.has(filepath)) return debug2("Auto-ignoring usage of config %o.", filepath), {};
          let module2;
          try {
            LOADING_CJS_FILES.add(filepath), module2 = (0, _rewriteStackTrace.endHiddenCallStack)(__webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive"))(filepath);
          } finally {
            LOADING_CJS_FILES.delete(filepath);
          }
          return null == module2 || !module2.__esModule && "Module" !== module2[Symbol.toStringTag] ? module2 : module2.default || (arguments[1] ? module2 : void 0);
        }
        const loadMjsFromPath = (0, _rewriteStackTrace.endHiddenCallStack)((n2 = function* (filepath) {
          const url = (0, _url().pathToFileURL)(filepath).toString() + "?import";
          if (!import_) throw new _configError.default("Internal error: Native ECMAScript modules aren't supported by this platform.\n", filepath);
          return yield import_(url);
        }, _loadMjsFromPath = function() {
          var t2 = this, e2 = arguments;
          return new Promise(function(r2, o3) {
            var a2 = n2.apply(t2, e2);
            function _next(n3) {
              asyncGeneratorStep(a2, r2, o3, _next, _throw, "next", n3);
            }
            function _throw(n3) {
              asyncGeneratorStep(a2, r2, o3, _next, _throw, "throw", n3);
            }
            _next(void 0);
          });
        }, function(_x) {
          return _loadMjsFromPath.apply(this, arguments);
        }));
        var n2, _loadMjsFromPath;
        const SUPPORTED_EXTENSIONS = /* @__PURE__ */ new Set([".js", ".mjs", ".cjs", ".cts"]), asyncModules = /* @__PURE__ */ new Set();
        function getTSPreset(filepath) {
          try {
            return __webpack_require__2("./node_modules/.pnpm/@babel+preset-typescript@7.26.0_@babel+core@7.26.0/node_modules/@babel/preset-typescript/lib/index.js");
          } catch (error) {
            if ("MODULE_NOT_FOUND" !== error.code) throw error;
            let message = "You appear to be using a .cts file as Babel configuration, but the `@babel/preset-typescript` package was not found: please install it!";
            throw process.versions.pnp && (message += `
If you are using Yarn Plug'n'Play, you may also need to add the following configuration to your .yarnrc.yml file:

packageExtensions:
	"@babel/core@*":
		peerDependencies:
			"@babel/preset-typescript": "*"
`), new _configError.default(message, filepath);
          }
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/package.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.findPackageData = function* (filepath) {
          let pkg = null;
          const directories = [];
          let isPackage = true, dirname = _path().dirname(filepath);
          for (; !pkg && "node_modules" !== _path().basename(dirname); ) {
            directories.push(dirname), pkg = yield* readConfigPackage(_path().join(dirname, PACKAGE_FILENAME));
            const nextLoc = _path().dirname(dirname);
            if (dirname === nextLoc) {
              isPackage = false;
              break;
            }
            dirname = nextLoc;
          }
          return { filepath, directories, pkg, isPackage };
        };
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/utils.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js");
        const PACKAGE_FILENAME = "package.json", readConfigPackage = (0, _utils.makeStaticFileCache)((filepath, content) => {
          let options;
          try {
            options = JSON.parse(content);
          } catch (err) {
            throw new _configError.default(`Error while parsing JSON - ${err.message}`, filepath);
          }
          if (!options) throw new Error(`${filepath}: No config detected`);
          if ("object" != typeof options) throw new _configError.default("Config returned typeof " + typeof options, filepath);
          if (Array.isArray(options)) throw new _configError.default("Expected config object but found array", filepath);
          return { filepath, dirname: _path().dirname(filepath), options };
        });
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/plugins.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _debug() {
          const data = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js");
          return _debug = function() {
            return data;
          }, data;
        }
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.loadPlugin = function* (name, dirname) {
          const { filepath, loader } = resolvePlugin(name, dirname, yield* (0, _async.isAsync)()), value2 = yield* requireModule("plugin", loader, filepath);
          return debug2("Loaded plugin %o from %o.", name, dirname), { filepath, value: value2 };
        }, exports2.loadPreset = function* (name, dirname) {
          const { filepath, loader } = resolvePreset(name, dirname, yield* (0, _async.isAsync)()), value2 = yield* requireModule("preset", loader, filepath);
          return debug2("Loaded preset %o from %o.", name, dirname), { filepath, value: value2 };
        }, exports2.resolvePreset = exports2.resolvePlugin = void 0;
        var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js"), _moduleTypes = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/module-types.js");
        function _url() {
          const data = __webpack_require__2("url");
          return _url = function() {
            return data;
          }, data;
        }
        var _importMetaResolve = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/vendor/import-meta-resolve.js");
        function _fs() {
          const data = __webpack_require__2("fs");
          return _fs = function() {
            return data;
          }, data;
        }
        const debug2 = _debug()("babel:config:loading:files:plugins"), EXACT_RE = /^module:/, BABEL_PLUGIN_PREFIX_RE = /^(?!@|module:|[^/]+\/|babel-plugin-)/, BABEL_PRESET_PREFIX_RE = /^(?!@|module:|[^/]+\/|babel-preset-)/, BABEL_PLUGIN_ORG_RE = /^(@babel\/)(?!plugin-|[^/]+\/)/, BABEL_PRESET_ORG_RE = /^(@babel\/)(?!preset-|[^/]+\/)/, OTHER_PLUGIN_ORG_RE = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-plugin(?:-|\/|$)|[^/]+\/)/, OTHER_PRESET_ORG_RE = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-preset(?:-|\/|$)|[^/]+\/)/, OTHER_ORG_DEFAULT_RE = /^(@(?!babel$)[^/]+)$/, resolvePlugin = exports2.resolvePlugin = resolveStandardizedName.bind(null, "plugin"), resolvePreset = exports2.resolvePreset = resolveStandardizedName.bind(null, "preset");
        function standardizeName(type, name) {
          if (_path().isAbsolute(name)) return name;
          const isPreset = "preset" === type;
          return name.replace(isPreset ? BABEL_PRESET_PREFIX_RE : BABEL_PLUGIN_PREFIX_RE, `babel-${type}-`).replace(isPreset ? BABEL_PRESET_ORG_RE : BABEL_PLUGIN_ORG_RE, `$1${type}-`).replace(isPreset ? OTHER_PRESET_ORG_RE : OTHER_PLUGIN_ORG_RE, `$1babel-${type}-`).replace(OTHER_ORG_DEFAULT_RE, `$1/babel-${type}`).replace(EXACT_RE, "");
        }
        function* resolveAlternativesHelper(type, name) {
          const standardizedName = standardizeName(type, name), { error, value: value2 } = yield standardizedName;
          if (!error) return value2;
          if ("MODULE_NOT_FOUND" !== error.code) throw error;
          standardizedName === name || (yield name).error || (error.message += `
- If you want to resolve "${name}", use "module:${name}"`), (yield standardizeName(type, "@babel/" + name)).error || (error.message += `
- Did you mean "@babel/${name}"?`);
          const oppositeType = "preset" === type ? "plugin" : "preset";
          if ((yield standardizeName(oppositeType, name)).error || (error.message += `
- Did you accidentally pass a ${oppositeType} as a ${type}?`), "plugin" === type) {
            const transformName = standardizedName.replace("-proposal-", "-transform-");
            transformName === standardizedName || (yield transformName).error || (error.message += `
- Did you mean "${transformName}"?`);
          }
          throw error.message += "\n\nMake sure that all the Babel plugins and presets you are using\nare defined as dependencies or devDependencies in your package.json\nfile. It's possible that the missing plugin is loaded by a preset\nyou are using that forgot to add the plugin to its dependencies: you\ncan workaround this problem by explicitly adding the missing package\nto your top-level package.json.\n", error;
        }
        function tryRequireResolve(id, dirname) {
          try {
            return dirname ? { error: null, value: (v = process.versions.node, w = "8.9", v = v.split("."), w = w.split("."), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1] ? __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").resolve : (r2, { paths: [b2] }, M = __webpack_require__2("module")) => {
              let f3 = M._findPath(r2, M._nodeModulePaths(b2).concat(b2));
              if (f3) return f3;
              throw f3 = new Error(`Cannot resolve module '${r2}'`), f3.code = "MODULE_NOT_FOUND", f3;
            })(id, { paths: [dirname] }) } : { error: null, value: __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").resolve(id) };
          } catch (error) {
            return { error, value: null };
          }
          var v, w;
        }
        function tryImportMetaResolve(id, options) {
          try {
            return { error: null, value: (0, _importMetaResolve.resolve)(id, options) };
          } catch (error) {
            return { error, value: null };
          }
        }
        function resolveStandardizedNameForRequire(type, name, dirname) {
          const it = resolveAlternativesHelper(type, name);
          let res = it.next();
          for (; !res.done; ) res = it.next(tryRequireResolve(res.value, dirname));
          return { loader: "require", filepath: res.value };
        }
        function resolveStandardizedName(type, name, dirname, allowAsync) {
          if (!_moduleTypes.supportsESM || !allowAsync) return resolveStandardizedNameForRequire(type, name, dirname);
          try {
            const resolved = function(type2, name2, dirname2) {
              const parentUrl = (0, _url().pathToFileURL)(_path().join(dirname2, "./babel-virtual-resolve-base.js")).href, it = resolveAlternativesHelper(type2, name2);
              let res = it.next();
              for (; !res.done; ) res = it.next(tryImportMetaResolve(res.value, parentUrl));
              return { loader: "auto", filepath: (0, _url().fileURLToPath)(res.value) };
            }(type, name, dirname);
            if (!(0, _fs().existsSync)(resolved.filepath)) throw Object.assign(new Error(`Could not resolve "${name}" in file ${dirname}.`), { type: "MODULE_NOT_FOUND" });
            return resolved;
          } catch (e2) {
            try {
              return resolveStandardizedNameForRequire(type, name, dirname);
            } catch (e22) {
              if ("MODULE_NOT_FOUND" === e2.type) throw e2;
              if ("MODULE_NOT_FOUND" === e22.type) throw e22;
              throw e2;
            }
          }
        }
        var LOADING_MODULES = /* @__PURE__ */ new Set();
        function* requireModule(type, loader, name) {
          if (!(yield* (0, _async.isAsync)()) && LOADING_MODULES.has(name)) throw new Error(`Reentrant ${type} detected trying to load "${name}". This module is not ignored and is trying to load itself while compiling itself, leading to a dependency cycle. We recommend adding it to your "ignore" list in your babelrc, or to a .babelignore.`);
          try {
            return LOADING_MODULES.add(name), yield* (0, _moduleTypes.default)(name, loader, `You appear to be using a native ECMAScript module ${type}, which is only supported when running Babel asynchronously or when using the Node.js \`--experimental-require-module\` flag.`, `You appear to be using a ${type} that contains top-level await, which is only supported when running Babel asynchronously.`, true);
          } catch (err) {
            throw err.message = `[BABEL]: ${err.message} (While processing: ${name})`, err;
          } finally {
            LOADING_MODULES.delete(name);
          }
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/utils.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.makeStaticFileCache = function(fn) {
          return (0, _caching.makeStrongCache)(function* (filepath, cache) {
            const cached = cache.invalidate(() => function(filepath2) {
              if (!_fs2().existsSync(filepath2)) return null;
              try {
                return +_fs2().statSync(filepath2).mtime;
              } catch (e2) {
                if ("ENOENT" !== e2.code && "ENOTDIR" !== e2.code) throw e2;
              }
              return null;
            }(filepath));
            return null === cached ? null : fn(filepath, yield* fs4.readFile(filepath, "utf8"));
          });
        };
        var _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js"), fs4 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/fs.js");
        function _fs2() {
          const data = __webpack_require__2("fs");
          return _fs2 = function() {
            return data;
          }, data;
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/full.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/util.js"), context = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _plugin = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/plugin.js"), _item = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/item.js"), _configChain = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/config-chain.js"), _deepArray = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/deep-array.js");
        function _traverse() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data;
          }, data;
        }
        var _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js"), _options = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/options.js"), _plugins = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/plugins.js"), _configApi = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/config-api.js"), _partial = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/partial.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js");
        exports2.default = _gensync()(function* (inputOpts) {
          var _opts$assumptions;
          const result = yield* (0, _partial.default)(inputOpts);
          if (!result) return null;
          const { options, context: context2, fileHandling } = result;
          if ("ignored" === fileHandling) return null;
          const optionDefaults = {}, { plugins, presets } = options;
          if (!plugins || !presets) throw new Error("Assertion failure - plugins and presets exist");
          const presetContext = Object.assign({}, context2, { targets: options.targets }), toDescriptor = (item) => {
            const desc = (0, _item.getItemDescriptor)(item);
            if (!desc) throw new Error("Assertion failure - must be config item");
            return desc;
          }, presetsDescriptors = presets.map(toDescriptor), initialPluginsDescriptors = plugins.map(toDescriptor), pluginDescriptorsByPass = [[]], passes = [], externalDependencies = [], ignored = yield* enhanceError(context2, function* recursePresetDescriptors(rawPresets, pluginDescriptorsPass) {
            const presets2 = [];
            for (let i2 = 0; i2 < rawPresets.length; i2++) {
              const descriptor = rawPresets[i2];
              if (false !== descriptor.options) {
                try {
                  var preset = yield* loadPresetDescriptor(descriptor, presetContext);
                } catch (e2) {
                  throw "BABEL_UNKNOWN_OPTION" === e2.code && (0, _options.checkNoUnwrappedItemOptionPairs)(rawPresets, i2, "preset", e2), e2;
                }
                externalDependencies.push(preset.externalDependencies), descriptor.ownPass ? presets2.push({ preset: preset.chain, pass: [] }) : presets2.unshift({ preset: preset.chain, pass: pluginDescriptorsPass });
              }
            }
            if (presets2.length > 0) {
              pluginDescriptorsByPass.splice(1, 0, ...presets2.map((o3) => o3.pass).filter((p) => p !== pluginDescriptorsPass));
              for (const { preset: preset2, pass } of presets2) {
                if (!preset2) return true;
                pass.push(...preset2.plugins);
                if (yield* recursePresetDescriptors(preset2.presets, pass)) return true;
                preset2.options.forEach((opts2) => {
                  (0, _util.mergeOptions)(optionDefaults, opts2);
                });
              }
            }
          })(presetsDescriptors, pluginDescriptorsByPass[0]);
          if (ignored) return null;
          const opts = optionDefaults;
          (0, _util.mergeOptions)(opts, options);
          const pluginContext = Object.assign({}, presetContext, { assumptions: null != (_opts$assumptions = opts.assumptions) ? _opts$assumptions : {} });
          return yield* enhanceError(context2, function* () {
            pluginDescriptorsByPass[0].unshift(...initialPluginsDescriptors);
            for (const descs of pluginDescriptorsByPass) {
              const pass = [];
              passes.push(pass);
              for (let i2 = 0; i2 < descs.length; i2++) {
                const descriptor = descs[i2];
                if (false !== descriptor.options) {
                  try {
                    var plugin = yield* loadPluginDescriptor(descriptor, pluginContext);
                  } catch (e2) {
                    throw "BABEL_UNKNOWN_PLUGIN_PROPERTY" === e2.code && (0, _options.checkNoUnwrappedItemOptionPairs)(descs, i2, "plugin", e2), e2;
                  }
                  pass.push(plugin), externalDependencies.push(plugin.externalDependencies);
                }
              }
            }
          })(), opts.plugins = passes[0], opts.presets = passes.slice(1).filter((plugins2) => plugins2.length > 0).map((plugins2) => ({ plugins: plugins2 })), opts.passPerPreset = opts.presets.length > 0, { options: opts, passes, externalDependencies: (0, _deepArray.finalize)(externalDependencies) };
        });
        function enhanceError(context2, fn) {
          return function* (arg1, arg2) {
            try {
              return yield* fn(arg1, arg2);
            } catch (e2) {
              var _context$filename;
              if (!/^\[BABEL\]/.test(e2.message)) e2.message = `[BABEL] ${null != (_context$filename = context2.filename) ? _context$filename : "unknown file"}: ${e2.message}`;
              throw e2;
            }
          };
        }
        const makeDescriptorLoader = (apiFactory) => (0, _caching.makeWeakCache)(function* ({ value: value2, options, dirname, alias }, cache) {
          if (false === options) throw new Error("Assertion failure");
          options = options || {};
          const externalDependencies = [];
          let item = value2;
          if ("function" == typeof value2) {
            const factory = (0, _async.maybeAsync)(value2, "You appear to be using an async plugin/preset, but Babel has been called synchronously"), api = Object.assign({}, context, apiFactory(cache, externalDependencies));
            try {
              item = yield* factory(api, options, dirname);
            } catch (e2) {
              throw alias && (e2.message += ` (While processing: ${JSON.stringify(alias)})`), e2;
            }
          }
          if (!item || "object" != typeof item) throw new Error("Plugin/Preset did not return an object.");
          if ((0, _async.isThenable)(item)) throw yield* [], new Error(`You appear to be using a promise as a plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version. As an alternative, you can prefix the promise with "await". (While processing: ${JSON.stringify(alias)})`);
          if (externalDependencies.length > 0 && (!cache.configured() || "forever" === cache.mode())) {
            let error = `A plugin/preset has external untracked dependencies (${externalDependencies[0]}), but the cache `;
            throw cache.configured() ? error += " has been configured to never be invalidated. " : error += "has not been configured to be invalidated when the external dependencies change. ", error += `Plugins/presets should configure their cache to be invalidated when the external dependencies change, for example using \`api.cache.invalidate(() => statSync(filepath).mtimeMs)\` or \`api.cache.never()\`
(While processing: ${JSON.stringify(alias)})`, new Error(error);
          }
          return { value: item, options, dirname, alias, externalDependencies: (0, _deepArray.finalize)(externalDependencies) };
        }), pluginDescriptorLoader = makeDescriptorLoader(_configApi.makePluginAPI), presetDescriptorLoader = makeDescriptorLoader(_configApi.makePresetAPI), instantiatePlugin = (0, _caching.makeWeakCache)(function* ({ value: value2, options, dirname, alias, externalDependencies }, cache) {
          const pluginObj = (0, _plugins.validatePluginObject)(value2), plugin = Object.assign({}, pluginObj);
          if (plugin.visitor && (plugin.visitor = _traverse().default.explode(Object.assign({}, plugin.visitor))), plugin.inherits) {
            const inheritsDescriptor = { name: void 0, alias: `${alias}$inherits`, value: plugin.inherits, options, dirname }, inherits = yield* (0, _async.forwardAsync)(loadPluginDescriptor, (run2) => cache.invalidate((data) => run2(inheritsDescriptor, data)));
            plugin.pre = chainMaybeAsync(inherits.pre, plugin.pre), plugin.post = chainMaybeAsync(inherits.post, plugin.post), plugin.manipulateOptions = chainMaybeAsync(inherits.manipulateOptions, plugin.manipulateOptions), plugin.visitor = _traverse().default.visitors.merge([inherits.visitor || {}, plugin.visitor || {}]), inherits.externalDependencies.length > 0 && (externalDependencies = 0 === externalDependencies.length ? inherits.externalDependencies : (0, _deepArray.finalize)([externalDependencies, inherits.externalDependencies]));
          }
          return new _plugin.default(plugin, options, alias, externalDependencies);
        });
        function* loadPluginDescriptor(descriptor, context2) {
          if (descriptor.value instanceof _plugin.default) {
            if (descriptor.options) throw new Error("Passed options to an existing Plugin instance will not work.");
            return descriptor.value;
          }
          return yield* instantiatePlugin(yield* pluginDescriptorLoader(descriptor, context2), context2);
        }
        const needsFilename = (val) => val && "function" != typeof val, validateIfOptionNeedsFilename = (options, descriptor) => {
          if (needsFilename(options.test) || needsFilename(options.include) || needsFilename(options.exclude)) {
            const formattedPresetName = descriptor.name ? `"${descriptor.name}"` : "/* your preset */";
            throw new _configError.default([`Preset ${formattedPresetName} requires a filename to be set when babel is called directly,`, "```", `babel.transformSync(code, { filename: 'file.ts', presets: [${formattedPresetName}] });`, "```", "See https://babeljs.io/docs/en/options#filename for more information."].join("\n"));
          }
        }, validatePreset = (preset, context2, descriptor) => {
          if (!context2.filename) {
            var _options$overrides;
            const { options } = preset;
            validateIfOptionNeedsFilename(options, descriptor), null == (_options$overrides = options.overrides) || _options$overrides.forEach((overrideOptions) => validateIfOptionNeedsFilename(overrideOptions, descriptor));
          }
        }, instantiatePreset = (0, _caching.makeWeakCacheSync)(({ value: value2, dirname, alias, externalDependencies }) => ({ options: (0, _options.validate)("preset", value2), alias, dirname, externalDependencies }));
        function* loadPresetDescriptor(descriptor, context2) {
          const preset = instantiatePreset(yield* presetDescriptorLoader(descriptor, context2));
          return validatePreset(preset, context2, descriptor), { chain: yield* (0, _configChain.buildPresetChain)(preset, context2), externalDependencies: preset.externalDependencies };
        }
        function chainMaybeAsync(a2, b2) {
          return a2 ? b2 ? function(...args) {
            const res = a2.apply(this, args);
            return res && "function" == typeof res.then ? res.then(() => b2.apply(this, args)) : b2.apply(this, args);
          } : a2 : b2;
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/config-api.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _semver() {
          const data = __webpack_require__2("./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js");
          return _semver = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.makeConfigAPI = makeConfigAPI, exports2.makePluginAPI = function(cache, externalDependencies) {
          return Object.assign({}, makePresetAPI(cache, externalDependencies), { assumption: (name) => cache.using((data) => data.assumptions[name]) });
        }, exports2.makePresetAPI = makePresetAPI;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js");
        function makeConfigAPI(cache) {
          return { version: _index.version, cache: cache.simple(), env: (value2) => cache.using((data) => void 0 === value2 ? data.envName : "function" == typeof value2 ? (0, _caching.assertSimpleType)(value2(data.envName)) : (Array.isArray(value2) ? value2 : [value2]).some((entry) => {
            if ("string" != typeof entry) throw new Error("Unexpected non-string value");
            return entry === data.envName;
          })), async: () => false, caller: (cb) => cache.using((data) => (0, _caching.assertSimpleType)(cb(data.caller))), assertVersion };
        }
        function makePresetAPI(cache, externalDependencies) {
          return Object.assign({}, makeConfigAPI(cache), { targets: () => JSON.parse(cache.using((data) => JSON.stringify(data.targets))), addExternalDependency: (ref) => {
            externalDependencies.push(ref);
          } });
        }
        function assertVersion(range) {
          if ("number" == typeof range) {
            if (!Number.isInteger(range)) throw new Error("Expected string or integer value.");
            range = `^${range}.0.0-0`;
          }
          if ("string" != typeof range) throw new Error("Expected string or integer value.");
          if ("*" === range || _semver().satisfies(_index.version, range)) return;
          const limit = Error.stackTraceLimit;
          "number" == typeof limit && limit < 25 && (Error.stackTraceLimit = 25);
          const err = new Error(`Requires Babel "${range}", but was loaded with "${_index.version}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);
          throw "number" == typeof limit && (Error.stackTraceLimit = limit), Object.assign(err, { code: "BABEL_VERSION_UNSUPPORTED", version: _index.version, range });
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/deep-array.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.finalize = function(deepArr) {
          return Object.freeze(deepArr);
        }, exports2.flattenToSet = function(arr) {
          const result = /* @__PURE__ */ new Set(), stack = [arr];
          for (; stack.length > 0; ) for (const el of stack.pop()) Array.isArray(el) ? stack.push(el) : result.add(el);
          return result;
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/environment.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.getEnv = function(defaultValue = "development") {
          return process.env.BABEL_ENV || process.env.NODE_ENV || defaultValue;
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.createConfigItem = function(target, options, callback) {
          if (void 0 !== callback) (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.errback)(target, options, callback);
          else {
            if ("function" != typeof options) return createConfigItemSync(target, options);
            (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.errback)(target, void 0, callback);
          }
        }, exports2.createConfigItemAsync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.async)(...args);
        }, exports2.createConfigItemSync = createConfigItemSync, Object.defineProperty(exports2, "default", { enumerable: true, get: function() {
          return _full.default;
        } }), exports2.loadOptions = function(opts, callback) {
          if (void 0 !== callback) (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.errback)(opts, callback);
          else {
            if ("function" != typeof opts) return loadOptionsSync(opts);
            (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.errback)(void 0, opts);
          }
        }, exports2.loadOptionsAsync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.async)(...args);
        }, exports2.loadOptionsSync = loadOptionsSync, exports2.loadPartialConfig = function(opts, callback) {
          if (void 0 !== callback) (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.errback)(opts, callback);
          else {
            if ("function" != typeof opts) return loadPartialConfigSync(opts);
            (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.errback)(void 0, opts);
          }
        }, exports2.loadPartialConfigAsync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.async)(...args);
        }, exports2.loadPartialConfigSync = loadPartialConfigSync;
        var _full = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/full.js"), _partial = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/partial.js"), _item = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/item.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        const loadPartialConfigRunner = _gensync()(_partial.loadPartialConfig);
        function loadPartialConfigSync(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.sync)(...args);
        }
        const loadOptionsRunner = _gensync()(function* (opts) {
          var _config$options;
          const config = yield* (0, _full.default)(opts);
          return null != (_config$options = null == config ? void 0 : config.options) ? _config$options : null;
        });
        function loadOptionsSync(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.sync)(...args);
        }
        const createConfigItemRunner = _gensync()(_item.createConfigItem);
        function createConfigItemSync(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.sync)(...args);
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/item.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.createConfigItem = function* (value2, { dirname = ".", type } = {}) {
          return createItemFromDescriptor(yield* (0, _configDescriptors.createDescriptor)(value2, _path().resolve(dirname), { type, alias: "programmatic item" }));
        }, exports2.createItemFromDescriptor = createItemFromDescriptor, exports2.getItemDescriptor = function(item) {
          if (null != item && item[CONFIG_ITEM_BRAND]) return item._descriptor;
          return;
        };
        var _configDescriptors = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/config-descriptors.js");
        function createItemFromDescriptor(desc) {
          return new ConfigItem(desc);
        }
        const CONFIG_ITEM_BRAND = Symbol.for("@babel/core@7 - ConfigItem");
        class ConfigItem {
          constructor(descriptor) {
            this._descriptor = void 0, this[CONFIG_ITEM_BRAND] = true, this.value = void 0, this.options = void 0, this.dirname = void 0, this.name = void 0, this.file = void 0, this._descriptor = descriptor, Object.defineProperty(this, "_descriptor", { enumerable: false }), Object.defineProperty(this, CONFIG_ITEM_BRAND, { enumerable: false }), this.value = this._descriptor.value, this.options = this._descriptor.options, this.dirname = this._descriptor.dirname, this.name = this._descriptor.name, this.file = this._descriptor.file ? { request: this._descriptor.file.request, resolved: this._descriptor.file.resolved } : void 0, Object.freeze(this);
          }
        }
        Object.freeze(ConfigItem.prototype);
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/partial.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = loadPrivatePartialConfig, exports2.loadPartialConfig = function* (opts) {
          let showIgnoredFiles = false;
          if ("object" == typeof opts && null !== opts && !Array.isArray(opts)) {
            var _opts = opts;
            ({ showIgnoredFiles } = _opts), opts = function(r2, e2) {
              if (null == r2) return {};
              var t2 = {};
              for (var n2 in r2) if ({}.hasOwnProperty.call(r2, n2)) {
                if (e2.includes(n2)) continue;
                t2[n2] = r2[n2];
              }
              return t2;
            }(_opts, _excluded);
          }
          const result = yield* loadPrivatePartialConfig(opts);
          if (!result) return null;
          const { options, babelrc, ignore, config, fileHandling, files } = result;
          if ("ignored" === fileHandling && !showIgnoredFiles) return null;
          return (options.plugins || []).forEach((item) => {
            if (item.value instanceof _plugin.default) throw new Error("Passing cached plugin instances is not supported in babel.loadPartialConfig()");
          }), new PartialConfig(options, babelrc ? babelrc.filepath : void 0, ignore ? ignore.filepath : void 0, config ? config.filepath : void 0, fileHandling, files);
        };
        var _plugin = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/plugin.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/util.js"), _item = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/item.js"), _configChain = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/config-chain.js"), _environment = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/environment.js"), _options = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/options.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/index.js"), _resolveTargets = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/resolve-targets.js");
        const _excluded = ["showIgnoredFiles"];
        function* loadPrivatePartialConfig(inputOpts) {
          if (null != inputOpts && ("object" != typeof inputOpts || Array.isArray(inputOpts))) throw new Error("Babel options must be an object, null, or undefined");
          const args = inputOpts ? (0, _options.validate)("arguments", inputOpts) : {}, { envName = (0, _environment.getEnv)(), cwd = ".", root: rootDir = ".", rootMode = "root", caller, cloneInputAst = true } = args, absoluteCwd = _path().resolve(cwd), absoluteRootDir = function(rootDir2, rootMode2) {
            switch (rootMode2) {
              case "root":
                return rootDir2;
              case "upward-optional": {
                const upwardRootDir = (0, _index.findConfigUpwards)(rootDir2);
                return null === upwardRootDir ? rootDir2 : upwardRootDir;
              }
              case "upward": {
                const upwardRootDir = (0, _index.findConfigUpwards)(rootDir2);
                if (null !== upwardRootDir) return upwardRootDir;
                throw Object.assign(new Error(`Babel was run with rootMode:"upward" but a root could not be found when searching upward from "${rootDir2}".
One of the following config files must be in the directory tree: "${_index.ROOT_CONFIG_FILENAMES.join(", ")}".`), { code: "BABEL_ROOT_NOT_FOUND", dirname: rootDir2 });
              }
              default:
                throw new Error("Assertion failure - unknown rootMode value.");
            }
          }(_path().resolve(absoluteCwd, rootDir), rootMode), filename = "string" == typeof args.filename ? _path().resolve(cwd, args.filename) : void 0, context = { filename, cwd: absoluteCwd, root: absoluteRootDir, envName, caller, showConfig: (yield* (0, _index.resolveShowConfigPath)(absoluteCwd)) === filename }, configChain = yield* (0, _configChain.buildRootChain)(args, context);
          if (!configChain) return null;
          const merged = { assumptions: {} };
          configChain.options.forEach((opts) => {
            (0, _util.mergeOptions)(merged, opts);
          });
          return { options: Object.assign({}, merged, { targets: (0, _resolveTargets.resolveTargets)(merged, absoluteRootDir), cloneInputAst, babelrc: false, configFile: false, browserslistConfigFile: false, passPerPreset: false, envName: context.envName, cwd: context.cwd, root: context.root, rootMode: "root", filename: "string" == typeof context.filename ? context.filename : void 0, plugins: configChain.plugins.map((descriptor) => (0, _item.createItemFromDescriptor)(descriptor)), presets: configChain.presets.map((descriptor) => (0, _item.createItemFromDescriptor)(descriptor)) }), context, fileHandling: configChain.fileHandling, ignore: configChain.ignore, babelrc: configChain.babelrc, config: configChain.config, files: configChain.files };
        }
        class PartialConfig {
          constructor(options, babelrc, ignore, config, fileHandling, files) {
            this.options = void 0, this.babelrc = void 0, this.babelignore = void 0, this.config = void 0, this.fileHandling = void 0, this.files = void 0, this.options = options, this.babelignore = ignore, this.babelrc = babelrc, this.config = config, this.fileHandling = fileHandling, this.files = files, Object.freeze(this);
          }
          hasFilesystemConfig() {
            return void 0 !== this.babelrc || void 0 !== this.config;
          }
        }
        Object.freeze(PartialConfig.prototype);
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/pattern-to-regex.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(pattern, dirname) {
          const parts = _path().resolve(dirname, pattern).split(_path().sep);
          return new RegExp(["^", ...parts.map((part, i2) => {
            const last = i2 === parts.length - 1;
            return "**" === part ? last ? starStarPatLast : starStarPat : "*" === part ? last ? starPatLast : starPat : 0 === part.indexOf("*.") ? substitution + escapeRegExp(part.slice(1)) + (last ? endSep : sep) : escapeRegExp(part) + (last ? endSep : sep);
          })].join(""));
        };
        const sep = `\\${_path().sep}`, endSep = `(?:${sep}|$)`, substitution = `[^${sep}]+`, starPat = `(?:${substitution}${sep})`, starPatLast = `(?:${substitution}${endSep})`, starStarPat = `${starPat}*?`, starStarPatLast = `${starPat}*?${starPatLast}?`;
        function escapeRegExp(string) {
          return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/plugin.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _deepArray = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/deep-array.js");
        exports2.default = class {
          constructor(plugin, options, key, externalDependencies = (0, _deepArray.finalize)([])) {
            this.key = void 0, this.manipulateOptions = void 0, this.post = void 0, this.pre = void 0, this.visitor = void 0, this.parserOverride = void 0, this.generatorOverride = void 0, this.options = void 0, this.externalDependencies = void 0, this.key = plugin.name || key, this.manipulateOptions = plugin.manipulateOptions, this.post = plugin.post, this.pre = plugin.pre, this.visitor = plugin.visitor || {}, this.parserOverride = plugin.parserOverride, this.generatorOverride = plugin.generatorOverride, this.options = options, this.externalDependencies = externalDependencies;
          }
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/printer.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ConfigPrinter = exports2.ChainFormatter = void 0;
        const ChainFormatter = exports2.ChainFormatter = { Programmatic: 0, Config: 1 }, Formatter = { title(type, callerName, filepath) {
          let title = "";
          return type === ChainFormatter.Programmatic ? (title = "programmatic options", callerName && (title += " from " + callerName)) : title = "config " + filepath, title;
        }, loc(index, envName) {
          let loc = "";
          return null != index && (loc += `.overrides[${index}]`), null != envName && (loc += `.env["${envName}"]`), loc;
        }, *optionsAndDescriptors(opt) {
          const content = Object.assign({}, opt.options);
          delete content.overrides, delete content.env;
          const pluginDescriptors = [...yield* opt.plugins()];
          pluginDescriptors.length && (content.plugins = pluginDescriptors.map((d2) => descriptorToConfig(d2)));
          const presetDescriptors = [...yield* opt.presets()];
          return presetDescriptors.length && (content.presets = [...presetDescriptors].map((d2) => descriptorToConfig(d2))), JSON.stringify(content, void 0, 2);
        } };
        function descriptorToConfig(d2) {
          var _d$file;
          let name = null == (_d$file = d2.file) ? void 0 : _d$file.request;
          return null == name && ("object" == typeof d2.value ? name = d2.value : "function" == typeof d2.value && (name = `[Function: ${d2.value.toString().slice(0, 50)} ... ]`)), null == name && (name = "[Unknown]"), void 0 === d2.options ? name : null == d2.name ? [name, d2.options] : [name, d2.options, d2.name];
        }
        class ConfigPrinter {
          constructor() {
            this._stack = [];
          }
          configure(enabled, type, { callerName, filepath }) {
            return enabled ? (content, index, envName) => {
              this._stack.push({ type, callerName, filepath, content, index, envName });
            } : () => {
            };
          }
          static *format(config) {
            let title = Formatter.title(config.type, config.callerName, config.filepath);
            const loc = Formatter.loc(config.index, config.envName);
            loc && (title += ` ${loc}`);
            return `${title}
${yield* Formatter.optionsAndDescriptors(config.content)}`;
          }
          *output() {
            if (0 === this._stack.length) return "";
            return (yield* _gensync().all(this._stack.map((s) => ConfigPrinter.format(s)))).join("\n\n");
          }
        }
        exports2.ConfigPrinter = ConfigPrinter;
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/resolve-targets.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _helperCompilationTargets() {
          const data = __webpack_require__2("./stubs/helper-compilation-targets.js");
          return _helperCompilationTargets = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.resolveBrowserslistConfigFile = function(browserslistConfigFile, configFileDir) {
          return _path().resolve(configFileDir, browserslistConfigFile);
        }, exports2.resolveTargets = function(options, root) {
          const optTargets = options.targets;
          let targets;
          "string" == typeof optTargets || Array.isArray(optTargets) ? targets = { browsers: optTargets } : optTargets && (targets = "esmodules" in optTargets ? Object.assign({}, optTargets, { esmodules: "intersect" }) : optTargets);
          const { browserslistConfigFile } = options;
          let configFile, ignoreBrowserslistConfig = false;
          "string" == typeof browserslistConfigFile ? configFile = browserslistConfigFile : ignoreBrowserslistConfig = false === browserslistConfigFile;
          return (0, _helperCompilationTargets().default)(targets, { ignoreBrowserslistConfig, configFile, configPath: root, browserslistEnv: options.browserslistEnv });
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/util.js": (__unused_webpack_module, exports2) => {
        "use strict";
        function mergeDefaultFields(target, source) {
          for (const k3 of Object.keys(source)) {
            const val = source[k3];
            void 0 !== val && (target[k3] = val);
          }
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isIterableIterator = function(value2) {
          return !!value2 && "function" == typeof value2.next && "function" == typeof value2[Symbol.iterator];
        }, exports2.mergeOptions = function(target, source) {
          for (const k3 of Object.keys(source)) if ("parserOpts" !== k3 && "generatorOpts" !== k3 && "assumptions" !== k3 || !source[k3]) {
            const val = source[k3];
            void 0 !== val && (target[k3] = val);
          } else {
            const parserOpts = source[k3];
            mergeDefaultFields(target[k3] || (target[k3] = {}), parserOpts);
          }
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/option-assertions.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _helperCompilationTargets() {
          const data = __webpack_require__2("./stubs/helper-compilation-targets.js");
          return _helperCompilationTargets = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.access = access, exports2.assertArray = assertArray, exports2.assertAssumptions = function(loc, value2) {
          if (void 0 === value2) return;
          if ("object" != typeof value2 || null === value2) throw new Error(`${msg(loc)} must be an object or undefined.`);
          let root = loc;
          do {
            root = root.parent;
          } while ("root" !== root.type);
          const inPreset = "preset" === root.source;
          for (const name of Object.keys(value2)) {
            const subLoc = access(loc, name);
            if (!_options.assumptionsNames.has(name)) throw new Error(`${msg(subLoc)} is not a supported assumption.`);
            if ("boolean" != typeof value2[name]) throw new Error(`${msg(subLoc)} must be a boolean.`);
            if (inPreset && false === value2[name]) throw new Error(`${msg(subLoc)} cannot be set to 'false' inside presets.`);
          }
          return value2;
        }, exports2.assertBabelrcSearch = function(loc, value2) {
          if (void 0 === value2 || "boolean" == typeof value2) return value2;
          if (Array.isArray(value2)) value2.forEach((item, i2) => {
            if (!checkValidTest(item)) throw new Error(`${msg(access(loc, i2))} must be a string/Function/RegExp.`);
          });
          else if (!checkValidTest(value2)) throw new Error(`${msg(loc)} must be a undefined, a boolean, a string/Function/RegExp or an array of those, got ${JSON.stringify(value2)}`);
          return value2;
        }, exports2.assertBoolean = assertBoolean, exports2.assertCallerMetadata = function(loc, value2) {
          const obj = assertObject(loc, value2);
          if (obj) {
            if ("string" != typeof obj.name) throw new Error(`${msg(loc)} set but does not contain "name" property string`);
            for (const prop of Object.keys(obj)) {
              const propLoc = access(loc, prop), value3 = obj[prop];
              if (null != value3 && "boolean" != typeof value3 && "string" != typeof value3 && "number" != typeof value3) throw new Error(`${msg(propLoc)} must be null, undefined, a boolean, a string, or a number.`);
            }
          }
          return value2;
        }, exports2.assertCompact = function(loc, value2) {
          if (void 0 !== value2 && "boolean" != typeof value2 && "auto" !== value2) throw new Error(`${msg(loc)} must be a boolean, "auto", or undefined`);
          return value2;
        }, exports2.assertConfigApplicableTest = function(loc, value2) {
          if (void 0 === value2) return value2;
          if (Array.isArray(value2)) value2.forEach((item, i2) => {
            if (!checkValidTest(item)) throw new Error(`${msg(access(loc, i2))} must be a string/Function/RegExp.`);
          });
          else if (!checkValidTest(value2)) throw new Error(`${msg(loc)} must be a string/Function/RegExp, or an array of those`);
          return value2;
        }, exports2.assertConfigFileSearch = function(loc, value2) {
          if (void 0 !== value2 && "boolean" != typeof value2 && "string" != typeof value2) throw new Error(`${msg(loc)} must be a undefined, a boolean, a string, got ${JSON.stringify(value2)}`);
          return value2;
        }, exports2.assertFunction = function(loc, value2) {
          if (void 0 !== value2 && "function" != typeof value2) throw new Error(`${msg(loc)} must be a function, or undefined`);
          return value2;
        }, exports2.assertIgnoreList = function(loc, value2) {
          const arr = assertArray(loc, value2);
          return null == arr || arr.forEach((item, i2) => function(loc2, value3) {
            if ("string" != typeof value3 && "function" != typeof value3 && !(value3 instanceof RegExp)) throw new Error(`${msg(loc2)} must be an array of string/Function/RegExp values, or undefined`);
            return value3;
          }(access(loc, i2), item)), arr;
        }, exports2.assertInputSourceMap = function(loc, value2) {
          if (void 0 !== value2 && "boolean" != typeof value2 && ("object" != typeof value2 || !value2)) throw new Error(`${msg(loc)} must be a boolean, object, or undefined`);
          return value2;
        }, exports2.assertObject = assertObject, exports2.assertPluginList = function(loc, value2) {
          const arr = assertArray(loc, value2);
          arr && arr.forEach((item, i2) => function(loc2, value3) {
            if (Array.isArray(value3)) {
              if (0 === value3.length) throw new Error(`${msg(loc2)} must include an object`);
              if (value3.length > 3) throw new Error(`${msg(loc2)} may only be a two-tuple or three-tuple`);
              if (assertPluginTarget(access(loc2, 0), value3[0]), value3.length > 1) {
                const opts = value3[1];
                if (void 0 !== opts && false !== opts && ("object" != typeof opts || Array.isArray(opts) || null === opts)) throw new Error(`${msg(access(loc2, 1))} must be an object, false, or undefined`);
              }
              if (3 === value3.length) {
                const name = value3[2];
                if (void 0 !== name && "string" != typeof name) throw new Error(`${msg(access(loc2, 2))} must be a string, or undefined`);
              }
            } else assertPluginTarget(loc2, value3);
            return value3;
          }(access(loc, i2), item));
          return arr;
        }, exports2.assertRootMode = function(loc, value2) {
          if (void 0 !== value2 && "root" !== value2 && "upward" !== value2 && "upward-optional" !== value2) throw new Error(`${msg(loc)} must be a "root", "upward", "upward-optional" or undefined`);
          return value2;
        }, exports2.assertSourceMaps = function(loc, value2) {
          if (void 0 !== value2 && "boolean" != typeof value2 && "inline" !== value2 && "both" !== value2) throw new Error(`${msg(loc)} must be a boolean, "inline", "both", or undefined`);
          return value2;
        }, exports2.assertSourceType = function(loc, value2) {
          if (void 0 !== value2 && "module" !== value2 && "script" !== value2 && "unambiguous" !== value2) throw new Error(`${msg(loc)} must be "module", "script", "unambiguous", or undefined`);
          return value2;
        }, exports2.assertString = function(loc, value2) {
          if (void 0 !== value2 && "string" != typeof value2) throw new Error(`${msg(loc)} must be a string, or undefined`);
          return value2;
        }, exports2.assertTargets = function(loc, value2) {
          if ((0, _helperCompilationTargets().isBrowsersQueryValid)(value2)) return value2;
          if ("object" != typeof value2 || !value2 || Array.isArray(value2)) throw new Error(`${msg(loc)} must be a string, an array of strings or an object`);
          const browsersLoc = access(loc, "browsers"), esmodulesLoc = access(loc, "esmodules");
          assertBrowsersList(browsersLoc, value2.browsers), assertBoolean(esmodulesLoc, value2.esmodules);
          for (const key of Object.keys(value2)) {
            const val = value2[key], subLoc = access(loc, key);
            if ("esmodules" === key) assertBoolean(subLoc, val);
            else if ("browsers" === key) assertBrowsersList(subLoc, val);
            else {
              if (!hasOwnProperty.call(_helperCompilationTargets().TargetNames, key)) {
                const validTargets = Object.keys(_helperCompilationTargets().TargetNames).join(", ");
                throw new Error(`${msg(subLoc)} is not a valid target. Supported targets are ${validTargets}`);
              }
              assertBrowserVersion(subLoc, val);
            }
          }
          return value2;
        }, exports2.msg = msg;
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/options.js");
        function msg(loc) {
          switch (loc.type) {
            case "root":
              return "";
            case "env":
              return `${msg(loc.parent)}.env["${loc.name}"]`;
            case "overrides":
              return `${msg(loc.parent)}.overrides[${loc.index}]`;
            case "option":
              return `${msg(loc.parent)}.${loc.name}`;
            case "access":
              return `${msg(loc.parent)}[${JSON.stringify(loc.name)}]`;
            default:
              throw new Error(`Assertion failure: Unknown type ${loc.type}`);
          }
        }
        function access(loc, name) {
          return { type: "access", name, parent: loc };
        }
        function assertBoolean(loc, value2) {
          if (void 0 !== value2 && "boolean" != typeof value2) throw new Error(`${msg(loc)} must be a boolean, or undefined`);
          return value2;
        }
        function assertObject(loc, value2) {
          if (void 0 !== value2 && ("object" != typeof value2 || Array.isArray(value2) || !value2)) throw new Error(`${msg(loc)} must be an object, or undefined`);
          return value2;
        }
        function assertArray(loc, value2) {
          if (null != value2 && !Array.isArray(value2)) throw new Error(`${msg(loc)} must be an array, or undefined`);
          return value2;
        }
        function checkValidTest(value2) {
          return "string" == typeof value2 || "function" == typeof value2 || value2 instanceof RegExp;
        }
        function assertPluginTarget(loc, value2) {
          if (("object" != typeof value2 || !value2) && "string" != typeof value2 && "function" != typeof value2) throw new Error(`${msg(loc)} must be a string, object, function`);
          return value2;
        }
        function assertBrowsersList(loc, value2) {
          if (void 0 !== value2 && !(0, _helperCompilationTargets().isBrowsersQueryValid)(value2)) throw new Error(`${msg(loc)} must be undefined, a string or an array of strings`);
        }
        function assertBrowserVersion(loc, value2) {
          if (("number" != typeof value2 || Math.round(value2) !== value2) && "string" != typeof value2) throw new Error(`${msg(loc)} must be a string or an integer number`);
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/options.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.assumptionsNames = void 0, exports2.checkNoUnwrappedItemOptionPairs = function(items, index, type, e2) {
          if (0 === index) return;
          const lastItem = items[index - 1], thisItem = items[index];
          lastItem.file && void 0 === lastItem.options && "object" == typeof thisItem.value && (e2.message += `
- Maybe you meant to use
"${type}s": [
  ["${lastItem.file.request}", ${JSON.stringify(thisItem.value, void 0, 2)}]
]
To be a valid ${type}, its name and options should be wrapped in a pair of brackets`);
        }, exports2.validate = function(type, opts, filename) {
          try {
            return validateNested({ type: "root", source: type }, opts);
          } catch (error) {
            const configError = new _configError.default(error.message, filename);
            throw error.code && (configError.code = error.code), configError;
          }
        };
        var _removed = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/removed.js"), _optionAssertions = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/option-assertions.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js");
        const ROOT_VALIDATORS = { cwd: _optionAssertions.assertString, root: _optionAssertions.assertString, rootMode: _optionAssertions.assertRootMode, configFile: _optionAssertions.assertConfigFileSearch, caller: _optionAssertions.assertCallerMetadata, filename: _optionAssertions.assertString, filenameRelative: _optionAssertions.assertString, code: _optionAssertions.assertBoolean, ast: _optionAssertions.assertBoolean, cloneInputAst: _optionAssertions.assertBoolean, envName: _optionAssertions.assertString }, BABELRC_VALIDATORS = { babelrc: _optionAssertions.assertBoolean, babelrcRoots: _optionAssertions.assertBabelrcSearch }, NONPRESET_VALIDATORS = { extends: _optionAssertions.assertString, ignore: _optionAssertions.assertIgnoreList, only: _optionAssertions.assertIgnoreList, targets: _optionAssertions.assertTargets, browserslistConfigFile: _optionAssertions.assertConfigFileSearch, browserslistEnv: _optionAssertions.assertString }, COMMON_VALIDATORS = { inputSourceMap: _optionAssertions.assertInputSourceMap, presets: _optionAssertions.assertPluginList, plugins: _optionAssertions.assertPluginList, passPerPreset: _optionAssertions.assertBoolean, assumptions: _optionAssertions.assertAssumptions, env: function(loc, value2) {
          if ("env" === loc.parent.type) throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside of another .env block`);
          const parent = loc.parent, obj = (0, _optionAssertions.assertObject)(loc, value2);
          if (obj) for (const envName of Object.keys(obj)) {
            const env = (0, _optionAssertions.assertObject)((0, _optionAssertions.access)(loc, envName), obj[envName]);
            if (!env) continue;
            validateNested({ type: "env", name: envName, parent }, env);
          }
          return obj;
        }, overrides: function(loc, value2) {
          if ("env" === loc.parent.type) throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .env block`);
          if ("overrides" === loc.parent.type) throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .overrides block`);
          const parent = loc.parent, arr = (0, _optionAssertions.assertArray)(loc, value2);
          if (arr) for (const [index, item] of arr.entries()) {
            const objLoc = (0, _optionAssertions.access)(loc, index), env = (0, _optionAssertions.assertObject)(objLoc, item);
            if (!env) throw new Error(`${(0, _optionAssertions.msg)(objLoc)} must be an object`);
            validateNested({ type: "overrides", index, parent }, env);
          }
          return arr;
        }, test: _optionAssertions.assertConfigApplicableTest, include: _optionAssertions.assertConfigApplicableTest, exclude: _optionAssertions.assertConfigApplicableTest, retainLines: _optionAssertions.assertBoolean, comments: _optionAssertions.assertBoolean, shouldPrintComment: _optionAssertions.assertFunction, compact: _optionAssertions.assertCompact, minified: _optionAssertions.assertBoolean, auxiliaryCommentBefore: _optionAssertions.assertString, auxiliaryCommentAfter: _optionAssertions.assertString, sourceType: _optionAssertions.assertSourceType, wrapPluginVisitorMethod: _optionAssertions.assertFunction, highlightCode: _optionAssertions.assertBoolean, sourceMaps: _optionAssertions.assertSourceMaps, sourceMap: _optionAssertions.assertSourceMaps, sourceFileName: _optionAssertions.assertString, sourceRoot: _optionAssertions.assertString, parserOpts: _optionAssertions.assertObject, generatorOpts: _optionAssertions.assertObject };
        Object.assign(COMMON_VALIDATORS, { getModuleId: _optionAssertions.assertFunction, moduleRoot: _optionAssertions.assertString, moduleIds: _optionAssertions.assertBoolean, moduleId: _optionAssertions.assertString });
        exports2.assumptionsNames = /* @__PURE__ */ new Set(["arrayLikeIsIterable", "constantReexports", "constantSuper", "enumerableModuleMeta", "ignoreFunctionLength", "ignoreToPrimitiveHint", "iterableIsArray", "mutableTemplateObject", "noClassCalls", "noDocumentAll", "noIncompleteNsImportDetection", "noNewArrows", "noUninitializedPrivateFieldAccess", "objectRestNoSymbols", "privateFieldsAsSymbols", "privateFieldsAsProperties", "pureGetters", "setClassMethods", "setComputedProperties", "setPublicClassFields", "setSpreadProperties", "skipForOfIteratorClosing", "superIsCallableConstructor"]);
        function getSource(loc) {
          return "root" === loc.type ? loc.source : getSource(loc.parent);
        }
        function validateNested(loc, opts) {
          const type = getSource(loc);
          return function(opts2) {
            if (hasOwnProperty.call(opts2, "sourceMap") && hasOwnProperty.call(opts2, "sourceMaps")) throw new Error(".sourceMap is an alias for .sourceMaps, cannot use both");
          }(opts), Object.keys(opts).forEach((key) => {
            const optLoc = { type: "option", name: key, parent: loc };
            if ("preset" === type && NONPRESET_VALIDATORS[key]) throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in preset options`);
            if ("arguments" !== type && ROOT_VALIDATORS[key]) throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options`);
            if ("arguments" !== type && "configfile" !== type && BABELRC_VALIDATORS[key]) {
              if ("babelrcfile" === type || "extendsfile" === type) throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in .babelrc or "extends"ed files, only in root programmatic options, or babel.config.js/config file options`);
              throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options, or babel.config.js/config file options`);
            }
            (COMMON_VALIDATORS[key] || NONPRESET_VALIDATORS[key] || BABELRC_VALIDATORS[key] || ROOT_VALIDATORS[key] || throwUnknownError)(optLoc, opts[key]);
          }), opts;
        }
        function throwUnknownError(loc) {
          const key = loc.name;
          if (_removed.default[key]) {
            const { message, version = 5 } = _removed.default[key];
            throw new Error(`Using removed Babel ${version} option: ${(0, _optionAssertions.msg)(loc)} - ${message}`);
          }
          {
            const unknownOptErr = new Error(`Unknown option: ${(0, _optionAssertions.msg)(loc)}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.`);
            throw unknownOptErr.code = "BABEL_UNKNOWN_OPTION", unknownOptErr;
          }
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/plugins.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.validatePluginObject = function(obj) {
          const rootPath = { type: "root", source: "plugin" };
          return Object.keys(obj).forEach((key) => {
            const validator = VALIDATORS[key];
            if (!validator) {
              const invalidPluginPropertyError = new Error(`.${key} is not a valid Plugin property`);
              throw invalidPluginPropertyError.code = "BABEL_UNKNOWN_PLUGIN_PROPERTY", invalidPluginPropertyError;
            }
            validator({ type: "option", name: key, parent: rootPath }, obj[key]);
          }), obj;
        };
        var _optionAssertions = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/option-assertions.js");
        const VALIDATORS = { name: _optionAssertions.assertString, manipulateOptions: _optionAssertions.assertFunction, pre: _optionAssertions.assertFunction, post: _optionAssertions.assertFunction, inherits: _optionAssertions.assertFunction, visitor: function(loc, value2) {
          const obj = (0, _optionAssertions.assertObject)(loc, value2);
          if (obj && (Object.keys(obj).forEach((prop) => {
            "_exploded" !== prop && "_verified" !== prop && function(key, value3) {
              if (value3 && "object" == typeof value3) Object.keys(value3).forEach((handler) => {
                if ("enter" !== handler && "exit" !== handler) throw new Error(`.visitor["${key}"] may only have .enter and/or .exit handlers.`);
              });
              else if ("function" != typeof value3) throw new Error(`.visitor["${key}"] must be a function`);
            }(prop, obj[prop]);
          }), obj.enter || obj.exit)) throw new Error(`${(0, _optionAssertions.msg)(loc)} cannot contain catch-all "enter" or "exit" handlers. Please target individual nodes.`);
          return obj;
        }, parserOverride: _optionAssertions.assertFunction, generatorOverride: _optionAssertions.assertFunction };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/removed.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        exports2.default = { auxiliaryComment: { message: "Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`" }, blacklist: { message: "Put the specific transforms you want in the `plugins` option" }, breakConfig: { message: "This is not a necessary option in Babel 6" }, experimental: { message: "Put the specific transforms you want in the `plugins` option" }, externalHelpers: { message: "Use the `external-helpers` plugin instead. Check out http://babeljs.io/docs/plugins/external-helpers/" }, extra: { message: "" }, jsxPragma: { message: "use the `pragma` option in the `react-jsx` plugin. Check out http://babeljs.io/docs/plugins/transform-react-jsx/" }, loose: { message: "Specify the `loose` option for the relevant plugin you are using or use a preset that sets the option." }, metadataUsedHelpers: { message: "Not required anymore as this is enabled by default" }, modules: { message: "Use the corresponding module transform plugin in the `plugins` option. Check out http://babeljs.io/docs/plugins/#modules" }, nonStandard: { message: "Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. Also check out the react preset http://babeljs.io/docs/plugins/preset-react/" }, optional: { message: "Put the specific transforms you want in the `plugins` option" }, sourceMapName: { message: "The `sourceMapName` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.file` themselves." }, stage: { message: "Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets" }, whitelist: { message: "Put the specific transforms you want in the `plugins` option" }, resolveModuleSource: { version: 6, message: "Use `babel-plugin-module-resolver@3`'s 'resolvePath' options" }, metadata: { version: 6, message: "Generated plugin metadata is always included in the output result" }, sourceMapTarget: { version: 6, message: "The `sourceMapTarget` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.file` themselves." } };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        class ConfigError extends Error {
          constructor(message, filename) {
            super(message), (0, _rewriteStackTrace.expectedError)(this), filename && (0, _rewriteStackTrace.injectVirtualStackFrame)(this, filename);
          }
        }
        exports2.default = ConfigError;
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js": (__unused_webpack_module, exports2) => {
        "use strict";
        var _Object$getOwnPropert;
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.beginHiddenCallStack = function(fn) {
          return SUPPORTED ? Object.defineProperty(function(...args) {
            return setupPrepareStackTrace(), fn(...args);
          }, "name", { value: STOP_HIDING }) : fn;
        }, exports2.endHiddenCallStack = function(fn) {
          return SUPPORTED ? Object.defineProperty(function(...args) {
            return fn(...args);
          }, "name", { value: START_HIDING }) : fn;
        }, exports2.expectedError = function(error) {
          if (!SUPPORTED) return;
          return expectedErrors.add(error), error;
        }, exports2.injectVirtualStackFrame = function(error, filename) {
          if (!SUPPORTED) return;
          let frames = virtualFrames.get(error);
          frames || virtualFrames.set(error, frames = []);
          return frames.push(/* @__PURE__ */ function(filename2) {
            return /* @__PURE__ */ Object.create({ isNative: () => false, isConstructor: () => false, isToplevel: () => true, getFileName: () => filename2, getLineNumber: () => {
            }, getColumnNumber: () => {
            }, getFunctionName: () => {
            }, getMethodName: () => {
            }, getTypeName: () => {
            }, toString: () => filename2 });
          }(filename)), error;
        };
        const ErrorToString = Function.call.bind(Error.prototype.toString), SUPPORTED = !!Error.captureStackTrace && true === (null == (_Object$getOwnPropert = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit")) ? void 0 : _Object$getOwnPropert.writable), START_HIDING = "startHiding - secret - don't use this - v1", STOP_HIDING = "stopHiding - secret - don't use this - v1", expectedErrors = /* @__PURE__ */ new WeakSet(), virtualFrames = /* @__PURE__ */ new WeakMap();
        function setupPrepareStackTrace() {
          setupPrepareStackTrace = () => {
          };
          const { prepareStackTrace = defaultPrepareStackTrace } = Error;
          Error.stackTraceLimit && (Error.stackTraceLimit = Math.max(Error.stackTraceLimit, 50)), Error.prepareStackTrace = function(err, trace) {
            let newTrace = [];
            let status = expectedErrors.has(err) ? "hiding" : "unknown";
            for (let i2 = 0; i2 < trace.length; i2++) {
              const name = trace[i2].getFunctionName();
              if (name === START_HIDING) status = "hiding";
              else if (name === STOP_HIDING) {
                if ("hiding" === status) status = "showing", virtualFrames.has(err) && newTrace.unshift(...virtualFrames.get(err));
                else if ("unknown" === status) {
                  newTrace = trace;
                  break;
                }
              } else "hiding" !== status && newTrace.push(trace[i2]);
            }
            return prepareStackTrace(err, newTrace);
          };
        }
        function defaultPrepareStackTrace(err, trace) {
          return 0 === trace.length ? ErrorToString(err) : `${ErrorToString(err)}
    at ${trace.join("\n    at ")}`;
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        function asyncGeneratorStep(n2, t2, e2, r2, o3, a2, c4) {
          try {
            var i2 = n2[a2](c4), u3 = i2.value;
          } catch (n3) {
            return void e2(n3);
          }
          i2.done ? t2(u3) : Promise.resolve(u3).then(r2, o3);
        }
        function _asyncToGenerator(n2) {
          return function() {
            var t2 = this, e2 = arguments;
            return new Promise(function(r2, o3) {
              var a2 = n2.apply(t2, e2);
              function _next(n3) {
                asyncGeneratorStep(a2, r2, o3, _next, _throw, "next", n3);
              }
              function _throw(n3) {
                asyncGeneratorStep(a2, r2, o3, _next, _throw, "throw", n3);
              }
              _next(void 0);
            });
          };
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.forwardAsync = function(action, cb) {
          const g2 = _gensync()(action);
          return withKind((kind) => {
            const adapted = g2[kind];
            return cb(adapted);
          });
        }, exports2.isAsync = void 0, exports2.isThenable = isThenable, exports2.maybeAsync = function(fn, message) {
          return _gensync()({ sync(...args) {
            const result = fn.apply(this, args);
            if (isThenable(result)) throw new Error(message);
            return result;
          }, async(...args) {
            return Promise.resolve(fn.apply(this, args));
          } });
        }, exports2.waitFor = exports2.onFirstPause = void 0;
        const runGenerator = _gensync()(function* (item) {
          return yield* item;
        });
        exports2.isAsync = _gensync()({ sync: () => false, errback: (cb) => cb(null, true) });
        const withKind = _gensync()({ sync: (cb) => cb("sync"), async: (_ref = _asyncToGenerator(function* (cb) {
          return cb("async");
        }), function(_x) {
          return _ref.apply(this, arguments);
        }) });
        var _ref;
        exports2.onFirstPause = _gensync()({ name: "onFirstPause", arity: 2, sync: function(item) {
          return runGenerator.sync(item);
        }, errback: function(item, firstPause, cb) {
          let completed = false;
          runGenerator.errback(item, (err, value2) => {
            completed = true, cb(err, value2);
          }), completed || firstPause();
        } }), exports2.waitFor = _gensync()({ sync: (x) => x, async: (_ref2 = _asyncToGenerator(function* (x) {
          return x;
        }), function(_x2) {
          return _ref2.apply(this, arguments);
        }) });
        var _ref2;
        function isThenable(val) {
          return !(!val || "object" != typeof val && "function" != typeof val || !val.then || "function" != typeof val.then);
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/fs.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _fs() {
          const data = __webpack_require__2("fs");
          return _fs = function() {
            return data;
          }, data;
        }
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.stat = exports2.readFile = void 0;
        exports2.readFile = _gensync()({ sync: _fs().readFileSync, errback: _fs().readFile }), exports2.stat = _gensync()({ sync: _fs().statSync, errback: _fs().stat });
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/functional.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.once = function(fn) {
          let result, resultP, promiseReferenced = false;
          return function* () {
            if (!result) {
              if (resultP) return promiseReferenced = true, yield* (0, _async.waitFor)(resultP);
              if (yield* (0, _async.isAsync)()) {
                let resolve, reject;
                resultP = new Promise((res, rej) => {
                  resolve = res, reject = rej;
                });
                try {
                  result = { ok: true, value: yield* fn() }, resultP = null, promiseReferenced && resolve(result.value);
                } catch (error) {
                  result = { ok: false, value: error }, resultP = null, promiseReferenced && reject(error);
                }
              } else try {
                result = { ok: true, value: yield* fn() };
              } catch (error) {
                result = { ok: false, value: error };
              }
            }
            if (result.ok) return result.value;
            throw result.value;
          };
        };
        var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js");
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.DEFAULT_EXTENSIONS = void 0, Object.defineProperty(exports2, "File", { enumerable: true, get: function() {
          return _file.default;
        } }), Object.defineProperty(exports2, "buildExternalHelpers", { enumerable: true, get: function() {
          return _buildExternalHelpers.default;
        } }), Object.defineProperty(exports2, "createConfigItem", { enumerable: true, get: function() {
          return _index2.createConfigItem;
        } }), Object.defineProperty(exports2, "createConfigItemAsync", { enumerable: true, get: function() {
          return _index2.createConfigItemAsync;
        } }), Object.defineProperty(exports2, "createConfigItemSync", { enumerable: true, get: function() {
          return _index2.createConfigItemSync;
        } }), Object.defineProperty(exports2, "getEnv", { enumerable: true, get: function() {
          return _environment.getEnv;
        } }), Object.defineProperty(exports2, "loadOptions", { enumerable: true, get: function() {
          return _index2.loadOptions;
        } }), Object.defineProperty(exports2, "loadOptionsAsync", { enumerable: true, get: function() {
          return _index2.loadOptionsAsync;
        } }), Object.defineProperty(exports2, "loadOptionsSync", { enumerable: true, get: function() {
          return _index2.loadOptionsSync;
        } }), Object.defineProperty(exports2, "loadPartialConfig", { enumerable: true, get: function() {
          return _index2.loadPartialConfig;
        } }), Object.defineProperty(exports2, "loadPartialConfigAsync", { enumerable: true, get: function() {
          return _index2.loadPartialConfigAsync;
        } }), Object.defineProperty(exports2, "loadPartialConfigSync", { enumerable: true, get: function() {
          return _index2.loadPartialConfigSync;
        } }), Object.defineProperty(exports2, "parse", { enumerable: true, get: function() {
          return _parse.parse;
        } }), Object.defineProperty(exports2, "parseAsync", { enumerable: true, get: function() {
          return _parse.parseAsync;
        } }), Object.defineProperty(exports2, "parseSync", { enumerable: true, get: function() {
          return _parse.parseSync;
        } }), exports2.resolvePreset = exports2.resolvePlugin = void 0, Object.defineProperty(exports2, "template", { enumerable: true, get: function() {
          return _template().default;
        } }), Object.defineProperty(exports2, "tokTypes", { enumerable: true, get: function() {
          return _parser().tokTypes;
        } }), Object.defineProperty(exports2, "transform", { enumerable: true, get: function() {
          return _transform.transform;
        } }), Object.defineProperty(exports2, "transformAsync", { enumerable: true, get: function() {
          return _transform.transformAsync;
        } }), Object.defineProperty(exports2, "transformFile", { enumerable: true, get: function() {
          return _transformFile.transformFile;
        } }), Object.defineProperty(exports2, "transformFileAsync", { enumerable: true, get: function() {
          return _transformFile.transformFileAsync;
        } }), Object.defineProperty(exports2, "transformFileSync", { enumerable: true, get: function() {
          return _transformFile.transformFileSync;
        } }), Object.defineProperty(exports2, "transformFromAst", { enumerable: true, get: function() {
          return _transformAst.transformFromAst;
        } }), Object.defineProperty(exports2, "transformFromAstAsync", { enumerable: true, get: function() {
          return _transformAst.transformFromAstAsync;
        } }), Object.defineProperty(exports2, "transformFromAstSync", { enumerable: true, get: function() {
          return _transformAst.transformFromAstSync;
        } }), Object.defineProperty(exports2, "transformSync", { enumerable: true, get: function() {
          return _transform.transformSync;
        } }), Object.defineProperty(exports2, "traverse", { enumerable: true, get: function() {
          return _traverse().default;
        } }), exports2.version = exports2.types = void 0;
        var _file = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/file.js"), _buildExternalHelpers = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/tools/build-external-helpers.js"), resolvers = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/index.js"), _environment = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/environment.js");
        function _types() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
          return _types = function() {
            return data;
          }, data;
        }
        function _parser() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.26.3/node_modules/@babel/parser/lib/index.js");
          return _parser = function() {
            return data;
          }, data;
        }
        function _traverse() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data;
          }, data;
        }
        function _template() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/index.js");
          return _template = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "types", { enumerable: true, get: function() {
          return _types();
        } });
        var _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/index.js"), _transform = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform.js"), _transformFile = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform-file.js"), _transformAst = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform-ast.js"), _parse = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parse.js");
        __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
        exports2.version = "7.26.0";
        exports2.resolvePlugin = (name, dirname) => resolvers.resolvePlugin(name, dirname, false).filepath;
        exports2.resolvePreset = (name, dirname) => resolvers.resolvePreset(name, dirname, false).filepath;
        exports2.DEFAULT_EXTENSIONS = Object.freeze([".js", ".jsx", ".es6", ".es", ".mjs", ".cjs"]);
        exports2.OptionManager = class {
          init(opts) {
            return (0, _index2.loadOptionsSync)(opts);
          }
        }, exports2.Plugin = function(alias) {
          throw new Error(`The (${alias}) Babel 5 plugin is being run with an unsupported Babel version.`);
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parse.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.parse = void 0, exports2.parseAsync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.async)(...args);
        }, exports2.parseSync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.sync)(...args);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parser/index.js"), _normalizeOpts = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/normalize-opts.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        const parseRunner = _gensync()(function* (code, opts) {
          const config = yield* (0, _index.default)(opts);
          return null === config ? null : yield* (0, _index2.default)(config.passes, (0, _normalizeOpts.default)(config), code);
        });
        exports2.parse = function(code, opts, callback) {
          if ("function" == typeof opts && (callback = opts, opts = void 0), void 0 === callback) return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.sync)(code, opts);
          (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.errback)(code, opts, callback);
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parser/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _parser() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.26.3/node_modules/@babel/parser/lib/index.js");
          return _parser = function() {
            return data;
          }, data;
        }
        function _codeFrame() {
          const data = __webpack_require__2("./stubs/babel-codeframe.js");
          return _codeFrame = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function* (pluginPasses, { parserOpts, highlightCode = true, filename = "unknown" }, code) {
          try {
            const results = [];
            for (const plugins of pluginPasses) for (const plugin of plugins) {
              const { parserOverride } = plugin;
              if (parserOverride) {
                const ast = parserOverride(code, parserOpts, _parser().parse);
                void 0 !== ast && results.push(ast);
              }
            }
            if (0 === results.length) return (0, _parser().parse)(code, parserOpts);
            if (1 === results.length) {
              if (yield* [], "function" == typeof results[0].then) throw new Error("You appear to be using an async parser plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
              return results[0];
            }
            throw new Error("More than one plugin attempted to override parsing.");
          } catch (err) {
            "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED" === err.code && (err.message += "\nConsider renaming the file to '.mjs', or setting sourceType:module or sourceType:unambiguous in your Babel config for this file.");
            const { loc, missingPlugin } = err;
            if (loc) {
              const codeFrame = (0, _codeFrame().codeFrameColumns)(code, { start: { line: loc.line, column: loc.column + 1 } }, { highlightCode });
              err.message = missingPlugin ? `${filename}: ` + (0, _missingPluginHelper.default)(missingPlugin[0], loc, codeFrame, filename) : `${filename}: ${err.message}

` + codeFrame, err.code = "BABEL_PARSE_ERROR";
            }
            throw err;
          }
        };
        var _missingPluginHelper = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js");
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(missingPluginName, loc, codeFrame, filename) {
          let helpMessage = `Support for the experimental syntax '${missingPluginName}' isn't currently enabled (${loc.line}:${loc.column + 1}):

` + codeFrame;
          const pluginInfo = pluginNameMap[missingPluginName];
          if (pluginInfo) {
            const { syntax: syntaxPlugin, transform: transformPlugin } = pluginInfo;
            if (syntaxPlugin) {
              const syntaxPluginInfo = getNameURLCombination(syntaxPlugin);
              if (transformPlugin) {
                helpMessage += `

Add ${getNameURLCombination(transformPlugin)} to the '${transformPlugin.name.startsWith("@babel/plugin") ? "plugins" : "presets"}' section of your Babel config to enable transformation.
If you want to leave it as-is, add ${syntaxPluginInfo} to the 'plugins' section to enable parsing.`;
              } else helpMessage += `

Add ${syntaxPluginInfo} to the 'plugins' section of your Babel config to enable parsing.`;
            }
          }
          return helpMessage += `

If you already added the plugin for this syntax to your config, it's possible that your config isn't being loaded.
You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:
	npx cross-env BABEL_SHOW_CONFIG_FOR=${filename === "unknown" ? "<name of the input file>" : filename} <your build command>
See https://babeljs.io/docs/configuration#print-effective-configs for more info.
`, helpMessage;
        };
        const pluginNameMap = { asyncDoExpressions: { syntax: { name: "@babel/plugin-syntax-async-do-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-do-expressions" } }, decimal: { syntax: { name: "@babel/plugin-syntax-decimal", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decimal" } }, decorators: { syntax: { name: "@babel/plugin-syntax-decorators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decorators" }, transform: { name: "@babel/plugin-proposal-decorators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-decorators" } }, doExpressions: { syntax: { name: "@babel/plugin-syntax-do-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-do-expressions" }, transform: { name: "@babel/plugin-proposal-do-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-do-expressions" } }, exportDefaultFrom: { syntax: { name: "@babel/plugin-syntax-export-default-from", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-default-from" }, transform: { name: "@babel/plugin-proposal-export-default-from", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-export-default-from" } }, flow: { syntax: { name: "@babel/plugin-syntax-flow", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-flow" }, transform: { name: "@babel/preset-flow", url: "https://github.com/babel/babel/tree/main/packages/babel-preset-flow" } }, functionBind: { syntax: { name: "@babel/plugin-syntax-function-bind", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-bind" }, transform: { name: "@babel/plugin-proposal-function-bind", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-bind" } }, functionSent: { syntax: { name: "@babel/plugin-syntax-function-sent", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-sent" }, transform: { name: "@babel/plugin-proposal-function-sent", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-sent" } }, jsx: { syntax: { name: "@babel/plugin-syntax-jsx", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx" }, transform: { name: "@babel/preset-react", url: "https://github.com/babel/babel/tree/main/packages/babel-preset-react" } }, pipelineOperator: { syntax: { name: "@babel/plugin-syntax-pipeline-operator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-pipeline-operator" }, transform: { name: "@babel/plugin-proposal-pipeline-operator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-pipeline-operator" } }, recordAndTuple: { syntax: { name: "@babel/plugin-syntax-record-and-tuple", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-record-and-tuple" } }, throwExpressions: { syntax: { name: "@babel/plugin-syntax-throw-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-throw-expressions" }, transform: { name: "@babel/plugin-proposal-throw-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-throw-expressions" } }, typescript: { syntax: { name: "@babel/plugin-syntax-typescript", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-typescript" }, transform: { name: "@babel/preset-typescript", url: "https://github.com/babel/babel/tree/main/packages/babel-preset-typescript" } } };
        Object.assign(pluginNameMap, { asyncGenerators: { syntax: { name: "@babel/plugin-syntax-async-generators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-generators" }, transform: { name: "@babel/plugin-transform-async-generator-functions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-async-generator-functions" } }, classProperties: { syntax: { name: "@babel/plugin-syntax-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties" }, transform: { name: "@babel/plugin-transform-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-class-properties" } }, classPrivateProperties: { syntax: { name: "@babel/plugin-syntax-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties" }, transform: { name: "@babel/plugin-transform-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-class-properties" } }, classPrivateMethods: { syntax: { name: "@babel/plugin-syntax-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties" }, transform: { name: "@babel/plugin-transform-private-methods", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-private-methods" } }, classStaticBlock: { syntax: { name: "@babel/plugin-syntax-class-static-block", url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-syntax-class-static-block" }, transform: { name: "@babel/plugin-transform-class-static-block", url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-transform-class-static-block" } }, dynamicImport: { syntax: { name: "@babel/plugin-syntax-dynamic-import", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-dynamic-import" } }, exportNamespaceFrom: { syntax: { name: "@babel/plugin-syntax-export-namespace-from", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-namespace-from" }, transform: { name: "@babel/plugin-transform-export-namespace-from", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-export-namespace-from" } }, importAssertions: { syntax: { name: "@babel/plugin-syntax-import-assertions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-assertions" } }, importAttributes: { syntax: { name: "@babel/plugin-syntax-import-attributes", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-attributes" } }, importMeta: { syntax: { name: "@babel/plugin-syntax-import-meta", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-meta" } }, logicalAssignment: { syntax: { name: "@babel/plugin-syntax-logical-assignment-operators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-logical-assignment-operators" }, transform: { name: "@babel/plugin-transform-logical-assignment-operators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-logical-assignment-operators" } }, moduleStringNames: { syntax: { name: "@babel/plugin-syntax-module-string-names", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-module-string-names" } }, numericSeparator: { syntax: { name: "@babel/plugin-syntax-numeric-separator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-numeric-separator" }, transform: { name: "@babel/plugin-transform-numeric-separator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-numeric-separator" } }, nullishCoalescingOperator: { syntax: { name: "@babel/plugin-syntax-nullish-coalescing-operator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-nullish-coalescing-operator" }, transform: { name: "@babel/plugin-transform-nullish-coalescing-operator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-nullish-coalescing-opearator" } }, objectRestSpread: { syntax: { name: "@babel/plugin-syntax-object-rest-spread", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-object-rest-spread" }, transform: { name: "@babel/plugin-transform-object-rest-spread", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-object-rest-spread" } }, optionalCatchBinding: { syntax: { name: "@babel/plugin-syntax-optional-catch-binding", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-catch-binding" }, transform: { name: "@babel/plugin-transform-optional-catch-binding", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-optional-catch-binding" } }, optionalChaining: { syntax: { name: "@babel/plugin-syntax-optional-chaining", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-chaining" }, transform: { name: "@babel/plugin-transform-optional-chaining", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-optional-chaining" } }, privateIn: { syntax: { name: "@babel/plugin-syntax-private-property-in-object", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-private-property-in-object" }, transform: { name: "@babel/plugin-transform-private-property-in-object", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-private-property-in-object" } }, regexpUnicodeSets: { syntax: { name: "@babel/plugin-syntax-unicode-sets-regex", url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-syntax-unicode-sets-regex/README.md" }, transform: { name: "@babel/plugin-transform-unicode-sets-regex", url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-proposalunicode-sets-regex/README.md" } } });
        const getNameURLCombination = ({ name, url }) => `${name} (${url})`;
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/tools/build-external-helpers.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function helpers() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+helpers@7.26.0/node_modules/@babel/helpers/lib/index.js");
          return helpers = function() {
            return data;
          }, data;
        }
        function _generator() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/index.js");
          return _generator = function() {
            return data;
          }, data;
        }
        function _template() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/index.js");
          return _template = function() {
            return data;
          }, data;
        }
        function _t() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
          return _t = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(allowlist, outputType = "global") {
          let tree;
          const build = { global: buildGlobal, module: buildModule, umd: buildUmd, var: buildVar }[outputType];
          if (!build) throw new Error(`Unsupported output type ${outputType}`);
          tree = build(allowlist);
          return (0, _generator().default)(tree).code;
        };
        const { arrayExpression, assignmentExpression, binaryExpression, blockStatement, callExpression, cloneNode: cloneNode2, conditionalExpression, exportNamedDeclaration, exportSpecifier, expressionStatement, functionExpression, identifier, memberExpression, objectExpression, program, stringLiteral, unaryExpression, variableDeclaration, variableDeclarator } = _t(), buildUmdWrapper = (replacements2) => _template().default.statement`
    (function (root, factory) {
      if (typeof define === "function" && define.amd) {
        define(AMD_ARGUMENTS, factory);
      } else if (typeof exports === "object") {
        factory(COMMON_ARGUMENTS);
      } else {
        factory(BROWSER_ARGUMENTS);
      }
    })(UMD_ROOT, function (FACTORY_PARAMETERS) {
      FACTORY_BODY
    });
  `(replacements2);
        function buildGlobal(allowlist) {
          const namespace = identifier("babelHelpers"), body = [], container = functionExpression(null, [identifier("global")], blockStatement(body)), tree = program([expressionStatement(callExpression(container, [conditionalExpression(binaryExpression("===", unaryExpression("typeof", identifier("global")), stringLiteral("undefined")), identifier("self"), identifier("global"))]))]);
          return body.push(variableDeclaration("var", [variableDeclarator(namespace, assignmentExpression("=", memberExpression(identifier("global"), namespace), objectExpression([])))])), buildHelpers(body, namespace, allowlist), tree;
        }
        function buildModule(allowlist) {
          const body = [], refs = buildHelpers(body, null, allowlist);
          return body.unshift(exportNamedDeclaration(null, Object.keys(refs).map((name) => exportSpecifier(cloneNode2(refs[name]), identifier(name))))), program(body, [], "module");
        }
        function buildUmd(allowlist) {
          const namespace = identifier("babelHelpers"), body = [];
          return body.push(variableDeclaration("var", [variableDeclarator(namespace, identifier("global"))])), buildHelpers(body, namespace, allowlist), program([buildUmdWrapper({ FACTORY_PARAMETERS: identifier("global"), BROWSER_ARGUMENTS: assignmentExpression("=", memberExpression(identifier("root"), namespace), objectExpression([])), COMMON_ARGUMENTS: identifier("exports"), AMD_ARGUMENTS: arrayExpression([stringLiteral("exports")]), FACTORY_BODY: body, UMD_ROOT: identifier("this") })]);
        }
        function buildVar(allowlist) {
          const namespace = identifier("babelHelpers"), body = [];
          body.push(variableDeclaration("var", [variableDeclarator(namespace, objectExpression([]))]));
          const tree = program(body);
          return buildHelpers(body, namespace, allowlist), body.push(expressionStatement(namespace)), tree;
        }
        function buildHelpers(body, namespace, allowlist) {
          const getHelperReference = (name) => namespace ? memberExpression(namespace, identifier(name)) : identifier(`_${name}`), refs = {};
          return helpers().list.forEach(function(name) {
            if (allowlist && !allowlist.includes(name)) return;
            const ref = refs[name] = getHelperReference(name), { nodes } = helpers().get(name, getHelperReference, namespace ? null : `_${name}`, [], namespace ? (ast, exportName, mapExportBindingAssignments) => {
              mapExportBindingAssignments((node) => assignmentExpression("=", ref, node)), ast.body.push(expressionStatement(assignmentExpression("=", ref, identifier(exportName))));
            } : null);
            body.push(...nodes);
          }), refs;
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform-ast.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.transformFromAst = void 0, exports2.transformFromAstAsync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.async)(...args);
        }, exports2.transformFromAstSync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync)(...args);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/index.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        const transformFromAstRunner = _gensync()(function* (ast, code, opts) {
          const config = yield* (0, _index.default)(opts);
          if (null === config) return null;
          if (!ast) throw new Error("No AST given");
          return yield* (0, _index2.run)(config, code, ast);
        });
        exports2.transformFromAst = function(ast, code, optsOrCallback, maybeCallback) {
          let opts, callback;
          if ("function" == typeof optsOrCallback ? (callback = optsOrCallback, opts = void 0) : (opts = optsOrCallback, callback = maybeCallback), void 0 === callback) return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync)(ast, code, opts);
          (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.errback)(ast, code, opts, callback);
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform-file.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.transformFile = function(...args) {
          transformFileRunner.errback(...args);
        }, exports2.transformFileAsync = function(...args) {
          return transformFileRunner.async(...args);
        }, exports2.transformFileSync = function(...args) {
          return transformFileRunner.sync(...args);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/index.js"), fs4 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/fs.js");
        const transformFileRunner = _gensync()(function* (filename, opts) {
          const options = Object.assign({}, opts, { filename }), config = yield* (0, _index.default)(options);
          if (null === config) return null;
          const code = yield* fs4.readFile(filename, "utf8");
          return yield* (0, _index2.run)(config, code);
        });
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.transform = void 0, exports2.transformAsync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.async)(...args);
        }, exports2.transformSync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.sync)(...args);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/index.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        const transformRunner = _gensync()(function* (code, opts) {
          const config = yield* (0, _index.default)(opts);
          return null === config ? null : yield* (0, _index2.run)(config, code);
        });
        exports2.transform = function(code, optsOrCallback, maybeCallback) {
          let opts, callback;
          if ("function" == typeof optsOrCallback ? (callback = optsOrCallback, opts = void 0) : (opts = optsOrCallback, callback = maybeCallback), void 0 === callback) return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.sync)(code, opts);
          (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.errback)(code, opts, callback);
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _traverse() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function() {
          LOADED_PLUGIN || (LOADED_PLUGIN = new _plugin.default(Object.assign({}, blockHoistPlugin, { visitor: _traverse().default.explode(blockHoistPlugin.visitor) }), {}));
          return LOADED_PLUGIN;
        };
        var _plugin = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/plugin.js");
        let LOADED_PLUGIN;
        const blockHoistPlugin = { name: "internal.blockHoist", visitor: { Block: { exit({ node }) {
          node.body = performHoisting(node.body);
        } }, SwitchCase: { exit({ node }) {
          node.consequent = performHoisting(node.consequent);
        } } } };
        function performHoisting(body) {
          let max = Math.pow(2, 30) - 1, hasChange = false;
          for (let i2 = 0; i2 < body.length; i2++) {
            const p = priority(body[i2]);
            if (p > max) {
              hasChange = true;
              break;
            }
            max = p;
          }
          return hasChange ? function(body2) {
            const buckets = /* @__PURE__ */ Object.create(null);
            for (let i2 = 0; i2 < body2.length; i2++) {
              const n2 = body2[i2], p = priority(n2);
              (buckets[p] || (buckets[p] = [])).push(n2);
            }
            const keys = Object.keys(buckets).map((k3) => +k3).sort((a2, b2) => b2 - a2);
            let index = 0;
            for (const key of keys) {
              const bucket = buckets[key];
              for (const n2 of bucket) body2[index++] = n2;
            }
            return body2;
          }(body.slice()) : body;
        }
        function priority(bodyNode) {
          const priority2 = null == bodyNode ? void 0 : bodyNode._blockHoist;
          return null == priority2 ? 1 : true === priority2 ? 2 : priority2;
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/babel-7-helpers.cjs": (__unused_webpack_module, exports2, __webpack_require__2) => {
        exports2.getModuleName = () => __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/index.js").getModuleName;
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/file.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function helpers() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+helpers@7.26.0/node_modules/@babel/helpers/lib/index.js");
          return helpers = function() {
            return data;
          }, data;
        }
        function _traverse() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data;
          }, data;
        }
        function _codeFrame() {
          const data = __webpack_require__2("./stubs/babel-codeframe.js");
          return _codeFrame = function() {
            return data;
          }, data;
        }
        function _t() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
          return _t = function() {
            return data;
          }, data;
        }
        function _semver() {
          const data = __webpack_require__2("./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js");
          return _semver = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var babel7 = function(e2, r2) {
          if (!r2 && e2 && e2.__esModule) return e2;
          if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
          var t2 = _getRequireWildcardCache(r2);
          if (t2 && t2.has(e2)) return t2.get(e2);
          var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var u3 in e2) if ("default" !== u3 && {}.hasOwnProperty.call(e2, u3)) {
            var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u3) : null;
            i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u3, i2) : n2[u3] = e2[u3];
          }
          return n2.default = e2, t2 && t2.set(e2, n2), n2;
        }(__webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/babel-7-helpers.cjs"), true);
        function _getRequireWildcardCache(e2) {
          if ("function" != typeof WeakMap) return null;
          var r2 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
          return (_getRequireWildcardCache = function(e3) {
            return e3 ? t2 : r2;
          })(e2);
        }
        const { cloneNode: cloneNode2, interpreterDirective } = _t(), errorVisitor = { enter(path9, state) {
          const loc = path9.node.loc;
          loc && (state.loc = loc, path9.stop());
        } };
        class File2 {
          constructor(options, { code, ast, inputMap }) {
            this._map = /* @__PURE__ */ new Map(), this.opts = void 0, this.declarations = {}, this.path = void 0, this.ast = void 0, this.scope = void 0, this.metadata = {}, this.code = "", this.inputMap = void 0, this.hub = { file: this, getCode: () => this.code, getScope: () => this.scope, addHelper: this.addHelper.bind(this), buildError: this.buildCodeFrameError.bind(this) }, this.opts = options, this.code = code, this.ast = ast, this.inputMap = inputMap, this.path = _traverse().NodePath.get({ hub: this.hub, parentPath: null, parent: this.ast, container: this.ast, key: "program" }).setContext(), this.scope = this.path.scope;
          }
          get shebang() {
            const { interpreter } = this.path.node;
            return interpreter ? interpreter.value : "";
          }
          set shebang(value2) {
            value2 ? this.path.get("interpreter").replaceWith(interpreterDirective(value2)) : this.path.get("interpreter").remove();
          }
          set(key, val) {
            if ("helpersNamespace" === key) throw new Error("Babel 7.0.0-beta.56 has dropped support for the 'helpersNamespace' utility.If you are using @babel/plugin-external-helpers you will need to use a newer version than the one you currently have installed. If you have your own implementation, you'll want to explore using 'helperGenerator' alongside 'file.availableHelper()'.");
            this._map.set(key, val);
          }
          get(key) {
            return this._map.get(key);
          }
          has(key) {
            return this._map.has(key);
          }
          availableHelper(name, versionRange) {
            let minVersion;
            try {
              minVersion = helpers().minVersion(name);
            } catch (err) {
              if ("BABEL_HELPER_UNKNOWN" !== err.code) throw err;
              return false;
            }
            return "string" != typeof versionRange || (_semver().valid(versionRange) && (versionRange = `^${versionRange}`), !_semver().intersects(`<${minVersion}`, versionRange) && !_semver().intersects(">=8.0.0", versionRange));
          }
          addHelper(name) {
            const declar = this.declarations[name];
            if (declar) return cloneNode2(declar);
            const generator = this.get("helperGenerator");
            if (generator) {
              const res = generator(name);
              if (res) return res;
            }
            helpers().minVersion(name);
            const uid = this.declarations[name] = this.scope.generateUidIdentifier(name), dependencies = {};
            for (const dep of helpers().getDependencies(name)) dependencies[dep] = this.addHelper(dep);
            const { nodes, globals } = helpers().get(name, (dep) => dependencies[dep], uid.name, Object.keys(this.scope.getAllBindings()));
            globals.forEach((name2) => {
              this.path.scope.hasBinding(name2, true) && this.path.scope.rename(name2);
            }), nodes.forEach((node) => {
              node._compact = true;
            });
            const added = this.path.unshiftContainer("body", nodes);
            for (const path9 of added) path9.isVariableDeclaration() && this.scope.registerDeclaration(path9);
            return uid;
          }
          buildCodeFrameError(node, msg, _Error = SyntaxError) {
            let loc = null == node ? void 0 : node.loc;
            if (!loc && node) {
              const state = { loc: null };
              (0, _traverse().default)(node, errorVisitor, this.scope, state), loc = state.loc;
              let txt = "This is an error on an internal node. Probably an internal error.";
              loc && (txt += " Location has been estimated."), msg += ` (${txt})`;
            }
            if (loc) {
              const { highlightCode = true } = this.opts;
              msg += "\n" + (0, _codeFrame().codeFrameColumns)(this.code, { start: { line: loc.start.line, column: loc.start.column + 1 }, end: loc.end && loc.start.line === loc.end.line ? { line: loc.end.line, column: loc.end.column + 1 } : void 0 }, { highlightCode });
            }
            return new _Error(msg);
          }
        }
        exports2.default = File2, File2.prototype.addImport = function() {
          throw new Error("This API has been removed. If you're looking for this functionality in Babel 7, you should import the '@babel/helper-module-imports' module and use the functions exposed  from that module, such as 'addNamed' or 'addDefault'.");
        }, File2.prototype.addTemplateObject = function() {
          throw new Error("This function has been moved into the template literal transform itself.");
        }, File2.prototype.getModuleName = function() {
          return babel7.getModuleName()(this.opts, this.opts);
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/generate.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _convertSourceMap() {
          const data = __webpack_require__2("./node_modules/.pnpm/convert-source-map@2.0.0/node_modules/convert-source-map/index.js");
          return _convertSourceMap = function() {
            return data;
          }, data;
        }
        function _generator() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/index.js");
          return _generator = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(pluginPasses, file) {
          const { opts, ast, code, inputMap } = file, { generatorOpts } = opts;
          generatorOpts.inputSourceMap = null == inputMap ? void 0 : inputMap.toObject();
          const results = [];
          for (const plugins of pluginPasses) for (const plugin of plugins) {
            const { generatorOverride } = plugin;
            if (generatorOverride) {
              const result2 = generatorOverride(ast, generatorOpts, code, _generator().default);
              void 0 !== result2 && results.push(result2);
            }
          }
          let result;
          if (0 === results.length) result = (0, _generator().default)(ast, generatorOpts, code);
          else {
            if (1 !== results.length) throw new Error("More than one plugin attempted to override codegen.");
            if (result = results[0], "function" == typeof result.then) throw new Error("You appear to be using an async codegen plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
          }
          let { code: outputCode, decodedMap: outputMap = result.map } = result;
          result.__mergedMap ? outputMap = Object.assign({}, result.map) : outputMap && (outputMap = inputMap ? (0, _mergeMap.default)(inputMap.toObject(), outputMap, generatorOpts.sourceFileName) : result.map);
          "inline" !== opts.sourceMaps && "both" !== opts.sourceMaps || (outputCode += "\n" + _convertSourceMap().fromObject(outputMap).toComment());
          "inline" === opts.sourceMaps && (outputMap = null);
          return { outputCode, outputMap };
        };
        var _mergeMap = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/merge-map.js");
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/merge-map.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _remapping() {
          const data = __webpack_require__2("./node_modules/.pnpm/@ampproject+remapping@2.3.0/node_modules/@ampproject/remapping/dist/remapping.umd.js");
          return _remapping = function() {
            return data;
          }, data;
        }
        function rootless(map) {
          return Object.assign({}, map, { sourceRoot: null });
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(inputMap, map, sourceFileName) {
          const source = sourceFileName.replace(/\\/g, "/");
          let found = false;
          const result = _remapping()(rootless(map), (s, ctx) => s !== source || found ? null : (found = true, ctx.source = "", rootless(inputMap)));
          "string" == typeof inputMap.sourceRoot && (result.sourceRoot = inputMap.sourceRoot);
          return Object.assign({}, result);
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _traverse() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.run = function* (config, code, ast) {
          const file = yield* (0, _normalizeFile.default)(config.passes, (0, _normalizeOpts.default)(config), code, ast), opts = file.opts;
          try {
            yield* function* (file2, pluginPasses) {
              const async = yield* (0, _async.isAsync)();
              for (const pluginPairs of pluginPasses) {
                const passPairs = [], passes = [], visitors = [];
                for (const plugin of pluginPairs.concat([(0, _blockHoistPlugin.default)()])) {
                  const pass = new _pluginPass.default(file2, plugin.key, plugin.options, async);
                  passPairs.push([plugin, pass]), passes.push(pass), visitors.push(plugin.visitor);
                }
                for (const [plugin, pass] of passPairs) if (plugin.pre) {
                  const fn = (0, _async.maybeAsync)(plugin.pre, "You appear to be using an async plugin/preset, but Babel has been called synchronously");
                  yield* fn.call(pass, file2);
                }
                const visitor = _traverse().default.visitors.merge(visitors, passes, file2.opts.wrapPluginVisitorMethod);
                (0, _traverse().default)(file2.ast, visitor, file2.scope);
                for (const [plugin, pass] of passPairs) if (plugin.post) {
                  const fn = (0, _async.maybeAsync)(plugin.post, "You appear to be using an async plugin/preset, but Babel has been called synchronously");
                  yield* fn.call(pass, file2);
                }
              }
            }(file, config.passes);
          } catch (e2) {
            var _opts$filename;
            throw e2.message = `${null != (_opts$filename = opts.filename) ? _opts$filename : "unknown file"}: ${e2.message}`, e2.code || (e2.code = "BABEL_TRANSFORM_ERROR"), e2;
          }
          let outputCode, outputMap;
          try {
            false !== opts.code && ({ outputCode, outputMap } = (0, _generate.default)(config.passes, file));
          } catch (e2) {
            var _opts$filename2;
            throw e2.message = `${null != (_opts$filename2 = opts.filename) ? _opts$filename2 : "unknown file"}: ${e2.message}`, e2.code || (e2.code = "BABEL_GENERATE_ERROR"), e2;
          }
          return { metadata: file.metadata, options: opts, ast: true === opts.ast ? file.ast : null, code: void 0 === outputCode ? null : outputCode, map: void 0 === outputMap ? null : outputMap, sourceType: file.ast.program.sourceType, externalDependencies: (0, _deepArray.flattenToSet)(config.externalDependencies) };
        };
        var _pluginPass = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/plugin-pass.js"), _blockHoistPlugin = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js"), _normalizeOpts = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/normalize-opts.js"), _normalizeFile = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/normalize-file.js"), _generate = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/generate.js"), _deepArray = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/deep-array.js"), _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js");
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/normalize-file.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _fs() {
          const data = __webpack_require__2("fs");
          return _fs = function() {
            return data;
          }, data;
        }
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _debug() {
          const data = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js");
          return _debug = function() {
            return data;
          }, data;
        }
        function _t() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
          return _t = function() {
            return data;
          }, data;
        }
        function _convertSourceMap() {
          const data = __webpack_require__2("./node_modules/.pnpm/convert-source-map@2.0.0/node_modules/convert-source-map/index.js");
          return _convertSourceMap = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function* (pluginPasses, options, code, ast) {
          if (code = `${code || ""}`, ast) {
            if ("Program" === ast.type) ast = file(ast, [], []);
            else if ("File" !== ast.type) throw new Error("AST root must be a Program or File node");
            options.cloneInputAst && (ast = (0, _cloneDeep.default)(ast));
          } else ast = yield* (0, _index.default)(pluginPasses, options, code);
          let inputMap = null;
          if (false !== options.inputSourceMap) {
            if ("object" == typeof options.inputSourceMap && (inputMap = _convertSourceMap().fromObject(options.inputSourceMap)), !inputMap) {
              const lastComment = extractComments(INLINE_SOURCEMAP_REGEX, ast);
              if (lastComment) try {
                inputMap = _convertSourceMap().fromComment("//" + lastComment);
              } catch (err) {
                debug2("discarding unknown inline input sourcemap");
              }
            }
            if (!inputMap) {
              const lastComment = extractComments(EXTERNAL_SOURCEMAP_REGEX, ast);
              if ("string" == typeof options.filename && lastComment) try {
                const match = EXTERNAL_SOURCEMAP_REGEX.exec(lastComment), inputMapContent = _fs().readFileSync(_path().resolve(_path().dirname(options.filename), match[1]), "utf8");
                inputMap = _convertSourceMap().fromJSON(inputMapContent);
              } catch (err) {
                debug2("discarding unknown file input sourcemap", err);
              }
              else lastComment && debug2("discarding un-loadable file input sourcemap");
            }
          }
          return new _file.default(options, { code, ast, inputMap });
        };
        var _file = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/file.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parser/index.js"), _cloneDeep = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/util/clone-deep.js");
        const { file, traverseFast } = _t(), debug2 = _debug()("babel:transform:file"), INLINE_SOURCEMAP_REGEX = /^[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,.*$/, EXTERNAL_SOURCEMAP_REGEX = /^[@#][ \t]+sourceMappingURL=([^\s'"`]+)[ \t]*$/;
        function extractCommentsFromList(regex, comments, lastComment) {
          return comments && (comments = comments.filter(({ value: value2 }) => !regex.test(value2) || (lastComment = value2, false))), [comments, lastComment];
        }
        function extractComments(regex, ast) {
          let lastComment = null;
          return traverseFast(ast, (node) => {
            [node.leadingComments, lastComment] = extractCommentsFromList(regex, node.leadingComments, lastComment), [node.innerComments, lastComment] = extractCommentsFromList(regex, node.innerComments, lastComment), [node.trailingComments, lastComment] = extractCommentsFromList(regex, node.trailingComments, lastComment);
          }), lastComment;
        }
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/normalize-opts.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(config) {
          const { filename, cwd, filenameRelative = "string" == typeof filename ? _path().relative(cwd, filename) : "unknown", sourceType = "module", inputSourceMap, sourceMaps = !!inputSourceMap, sourceRoot = config.options.moduleRoot, sourceFileName = _path().basename(filenameRelative), comments = true, compact = "auto" } = config.options, opts = config.options, options = Object.assign({}, opts, { parserOpts: Object.assign({ sourceType: ".mjs" === _path().extname(filenameRelative) ? "module" : sourceType, sourceFileName: filename, plugins: [] }, opts.parserOpts), generatorOpts: Object.assign({ filename, auxiliaryCommentBefore: opts.auxiliaryCommentBefore, auxiliaryCommentAfter: opts.auxiliaryCommentAfter, retainLines: opts.retainLines, comments, shouldPrintComment: opts.shouldPrintComment, compact, minified: opts.minified, sourceMaps, sourceRoot, sourceFileName }, opts.generatorOpts) });
          for (const plugins of config.passes) for (const plugin of plugins) plugin.manipulateOptions && plugin.manipulateOptions(options, options.parserOpts);
          return options;
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/plugin-pass.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        class PluginPass {
          constructor(file, key, options, isAsync) {
            this._map = /* @__PURE__ */ new Map(), this.key = void 0, this.file = void 0, this.opts = void 0, this.cwd = void 0, this.filename = void 0, this.isAsync = void 0, this.key = key, this.file = file, this.opts = options || {}, this.cwd = file.opts.cwd, this.filename = file.opts.filename, this.isAsync = isAsync;
          }
          set(key, val) {
            this._map.set(key, val);
          }
          get(key) {
            return this._map.get(key);
          }
          availableHelper(name, versionRange) {
            return this.file.availableHelper(name, versionRange);
          }
          addHelper(name) {
            return this.file.addHelper(name);
          }
          buildCodeFrameError(node, msg, _Error) {
            return this.file.buildCodeFrameError(node, msg, _Error);
          }
        }
        exports2.default = PluginPass, PluginPass.prototype.getModuleName = function() {
          return this.file.getModuleName();
        }, PluginPass.prototype.addImport = function() {
          this.file.addImport();
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/util/clone-deep.js": (__unused_webpack_module, exports2) => {
        "use strict";
        function deepClone(value2, cache) {
          if (null !== value2) {
            if (cache.has(value2)) return cache.get(value2);
            let cloned;
            if (Array.isArray(value2)) {
              cloned = new Array(value2.length), cache.set(value2, cloned);
              for (let i2 = 0; i2 < value2.length; i2++) cloned[i2] = "object" != typeof value2[i2] ? value2[i2] : deepClone(value2[i2], cache);
            } else {
              cloned = {}, cache.set(value2, cloned);
              const keys = Object.keys(value2);
              for (let i2 = 0; i2 < keys.length; i2++) {
                const key = keys[i2];
                cloned[key] = "object" != typeof value2[key] ? value2[key] : deepClone(value2[key], cache);
              }
            }
            return cloned;
          }
          return value2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(value2) {
          return "object" != typeof value2 ? value2 : deepClone(value2, /* @__PURE__ */ new Map());
        };
      }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/vendor/import-meta-resolve.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _assert() {
          const data = __webpack_require__2("assert");
          return _assert = function() {
            return data;
          }, data;
        }
        function _fs() {
          const data = function(e2, r2) {
            if (!r2 && e2 && e2.__esModule) return e2;
            if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
            var t2 = _getRequireWildcardCache(r2);
            if (t2 && t2.has(e2)) return t2.get(e2);
            var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (var u3 in e2) if ("default" !== u3 && {}.hasOwnProperty.call(e2, u3)) {
              var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u3) : null;
              i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u3, i2) : n2[u3] = e2[u3];
            }
            return n2.default = e2, t2 && t2.set(e2, n2), n2;
          }(__webpack_require__2("fs"), true);
          return _fs = function() {
            return data;
          }, data;
        }
        function _process() {
          const data = __webpack_require__2("process");
          return _process = function() {
            return data;
          }, data;
        }
        function _url() {
          const data = __webpack_require__2("url");
          return _url = function() {
            return data;
          }, data;
        }
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _module() {
          const data = __webpack_require__2("module");
          return _module = function() {
            return data;
          }, data;
        }
        function _v() {
          const data = __webpack_require__2("v8");
          return _v = function() {
            return data;
          }, data;
        }
        function _util() {
          const data = __webpack_require__2("util");
          return _util = function() {
            return data;
          }, data;
        }
        function _getRequireWildcardCache(e2) {
          if ("function" != typeof WeakMap) return null;
          var r2 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
          return (_getRequireWildcardCache = function(e3) {
            return e3 ? t2 : r2;
          })(e2);
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.moduleResolve = moduleResolve, exports2.resolve = function(specifier, parent) {
          if (!parent) throw new Error("Please pass `parent`: `import-meta-resolve` cannot ponyfill that");
          try {
            return function(specifier2, context = {}) {
              const { parentURL } = context;
              let parsedParentURL, parsed, protocol;
              if (_assert()(void 0 !== parentURL, "expected `parentURL` to be defined"), function(parentURL2) {
                if (void 0 === parentURL2) return;
                if ("string" != typeof parentURL2 && (self = parentURL2, !Boolean(self && "object" == typeof self && "href" in self && "string" == typeof self.href && "protocol" in self && "string" == typeof self.protocol && self.href && self.protocol))) throw new codes.ERR_INVALID_ARG_TYPE("parentURL", ["string", "URL"], parentURL2);
                var self;
              }(parentURL), parentURL) try {
                parsedParentURL = new (_url()).URL(parentURL);
              } catch (_unused4) {
              }
              try {
                if (parsed = shouldBeTreatedAsRelativeOrAbsolutePath(specifier2) ? new (_url()).URL(specifier2, parsedParentURL) : new (_url()).URL(specifier2), protocol = parsed.protocol, "data:" === protocol) return { url: parsed.href, format: null };
              } catch (_unused5) {
              }
              const maybeReturn = function(specifier3, parsed2, parsedParentURL2) {
                if (parsedParentURL2) {
                  const parentProtocol = parsedParentURL2.protocol;
                  if ("http:" === parentProtocol || "https:" === parentProtocol) {
                    if (shouldBeTreatedAsRelativeOrAbsolutePath(specifier3)) {
                      const parsedProtocol = null == parsed2 ? void 0 : parsed2.protocol;
                      if (parsedProtocol && "https:" !== parsedProtocol && "http:" !== parsedProtocol) throw new ERR_NETWORK_IMPORT_DISALLOWED(specifier3, parsedParentURL2, "remote imports cannot import from a local location.");
                      return { url: (null == parsed2 ? void 0 : parsed2.href) || "" };
                    }
                    if (_module().builtinModules.includes(specifier3)) throw new ERR_NETWORK_IMPORT_DISALLOWED(specifier3, parsedParentURL2, "remote imports cannot import from a local location.");
                    throw new ERR_NETWORK_IMPORT_DISALLOWED(specifier3, parsedParentURL2, "only relative and absolute specifiers are supported.");
                  }
                }
              }(specifier2, parsed, parsedParentURL);
              if (maybeReturn) return maybeReturn;
              void 0 === protocol && parsed && (protocol = parsed.protocol);
              if ("node:" === protocol) return { url: specifier2 };
              if (parsed && "node:" === parsed.protocol) return { url: specifier2 };
              const conditions = function(conditions2) {
                if (void 0 !== conditions2 && conditions2 !== DEFAULT_CONDITIONS) {
                  if (!Array.isArray(conditions2)) throw new ERR_INVALID_ARG_VALUE("conditions", conditions2, "expected an array");
                  return new Set(conditions2);
                }
                return DEFAULT_CONDITIONS_SET;
              }(context.conditions), url = moduleResolve(specifier2, new (_url()).URL(parentURL), conditions, false);
              return { url: url.href, format: defaultGetFormatWithoutErrors(url, { parentURL }) };
            }(specifier, { parentURL: parent }).url;
          } catch (error) {
            const exception = error;
            if (("ERR_UNSUPPORTED_DIR_IMPORT" === exception.code || "ERR_MODULE_NOT_FOUND" === exception.code) && "string" == typeof exception.url) return exception.url;
            throw error;
          }
        };
        const own$1 = {}.hasOwnProperty, classRegExp = /^([A-Z][a-z\d]*)+$/, kTypes = /* @__PURE__ */ new Set(["string", "function", "number", "object", "Function", "Object", "boolean", "bigint", "symbol"]), codes = {};
        function formatList(array, type = "and") {
          return array.length < 3 ? array.join(` ${type} `) : `${array.slice(0, -1).join(", ")}, ${type} ${array[array.length - 1]}`;
        }
        const messages = /* @__PURE__ */ new Map();
        let userStackTraceLimit;
        function createError(sym, value2, constructor) {
          return messages.set(sym, value2), /* @__PURE__ */ function(Base, key) {
            return NodeError;
            function NodeError(...parameters) {
              const limit = Error.stackTraceLimit;
              isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = 0);
              const error = new Base();
              isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = limit);
              const message = function(key2, parameters2, self) {
                const message2 = messages.get(key2);
                if (_assert()(void 0 !== message2, "expected `message` to be found"), "function" == typeof message2) return _assert()(message2.length <= parameters2.length, `Code: ${key2}; The provided arguments length (${parameters2.length}) does not match the required ones (${message2.length}).`), Reflect.apply(message2, self, parameters2);
                const regex = /%[dfijoOs]/g;
                let expectedLength = 0;
                for (; null !== regex.exec(message2); ) expectedLength++;
                return _assert()(expectedLength === parameters2.length, `Code: ${key2}; The provided arguments length (${parameters2.length}) does not match the required ones (${expectedLength}).`), 0 === parameters2.length ? message2 : (parameters2.unshift(message2), Reflect.apply(_util().format, null, parameters2));
              }(key, parameters, error);
              return Object.defineProperties(error, { message: { value: message, enumerable: false, writable: true, configurable: true }, toString: { value() {
                return `${this.name} [${key}]: ${this.message}`;
              }, enumerable: false, writable: true, configurable: true } }), captureLargerStackTrace(error), error.code = key, error;
            }
          }(constructor, sym);
        }
        function isErrorStackTraceLimitWritable() {
          try {
            if (_v().startupSnapshot.isBuildingSnapshot()) return false;
          } catch (_unused) {
          }
          const desc = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit");
          return void 0 === desc ? Object.isExtensible(Error) : own$1.call(desc, "writable") && void 0 !== desc.writable ? desc.writable : void 0 !== desc.set;
        }
        codes.ERR_INVALID_ARG_TYPE = createError("ERR_INVALID_ARG_TYPE", (name, expected, actual) => {
          _assert()("string" == typeof name, "'name' must be a string"), Array.isArray(expected) || (expected = [expected]);
          let message = "The ";
          if (name.endsWith(" argument")) message += `${name} `;
          else {
            const type = name.includes(".") ? "property" : "argument";
            message += `"${name}" ${type} `;
          }
          message += "must be ";
          const types = [], instances = [], other = [];
          for (const value2 of expected) _assert()("string" == typeof value2, "All expected entries have to be of type string"), kTypes.has(value2) ? types.push(value2.toLowerCase()) : null === classRegExp.exec(value2) ? (_assert()("object" !== value2, 'The value "object" should be written as "Object"'), other.push(value2)) : instances.push(value2);
          if (instances.length > 0) {
            const pos = types.indexOf("object");
            -1 !== pos && (types.slice(pos, 1), instances.push("Object"));
          }
          return types.length > 0 && (message += `${types.length > 1 ? "one of type" : "of type"} ${formatList(types, "or")}`, (instances.length > 0 || other.length > 0) && (message += " or ")), instances.length > 0 && (message += `an instance of ${formatList(instances, "or")}`, other.length > 0 && (message += " or ")), other.length > 0 && (other.length > 1 ? message += `one of ${formatList(other, "or")}` : (other[0].toLowerCase() !== other[0] && (message += "an "), message += `${other[0]}`)), message += `. Received ${function(value2) {
            if (null == value2) return String(value2);
            if ("function" == typeof value2 && value2.name) return `function ${value2.name}`;
            if ("object" == typeof value2) return value2.constructor && value2.constructor.name ? `an instance of ${value2.constructor.name}` : `${(0, _util().inspect)(value2, { depth: -1 })}`;
            let inspected = (0, _util().inspect)(value2, { colors: false });
            inspected.length > 28 && (inspected = `${inspected.slice(0, 25)}...`);
            return `type ${typeof value2} (${inspected})`;
          }(actual)}`, message;
        }, TypeError), codes.ERR_INVALID_MODULE_SPECIFIER = createError("ERR_INVALID_MODULE_SPECIFIER", (request, reason, base = void 0) => `Invalid module "${request}" ${reason}${base ? ` imported from ${base}` : ""}`, TypeError), codes.ERR_INVALID_PACKAGE_CONFIG = createError("ERR_INVALID_PACKAGE_CONFIG", (path9, base, message) => `Invalid package config ${path9}${base ? ` while importing ${base}` : ""}${message ? `. ${message}` : ""}`, Error), codes.ERR_INVALID_PACKAGE_TARGET = createError("ERR_INVALID_PACKAGE_TARGET", (packagePath, key, target, isImport = false, base = void 0) => {
          const relatedError = "string" == typeof target && !isImport && target.length > 0 && !target.startsWith("./");
          return "." === key ? (_assert()(false === isImport), `Invalid "exports" main target ${JSON.stringify(target)} defined in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? '; targets must start with "./"' : ""}`) : `Invalid "${isImport ? "imports" : "exports"}" target ${JSON.stringify(target)} defined for '${key}' in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? '; targets must start with "./"' : ""}`;
        }, Error), codes.ERR_MODULE_NOT_FOUND = createError("ERR_MODULE_NOT_FOUND", (path9, base, exactUrl = false) => `Cannot find ${exactUrl ? "module" : "package"} '${path9}' imported from ${base}`, Error), codes.ERR_NETWORK_IMPORT_DISALLOWED = createError("ERR_NETWORK_IMPORT_DISALLOWED", "import of '%s' by %s is not supported: %s", Error), codes.ERR_PACKAGE_IMPORT_NOT_DEFINED = createError("ERR_PACKAGE_IMPORT_NOT_DEFINED", (specifier, packagePath, base) => `Package import specifier "${specifier}" is not defined${packagePath ? ` in package ${packagePath}package.json` : ""} imported from ${base}`, TypeError), codes.ERR_PACKAGE_PATH_NOT_EXPORTED = createError("ERR_PACKAGE_PATH_NOT_EXPORTED", (packagePath, subpath, base = void 0) => "." === subpath ? `No "exports" main defined in ${packagePath}package.json${base ? ` imported from ${base}` : ""}` : `Package subpath '${subpath}' is not defined by "exports" in ${packagePath}package.json${base ? ` imported from ${base}` : ""}`, Error), codes.ERR_UNSUPPORTED_DIR_IMPORT = createError("ERR_UNSUPPORTED_DIR_IMPORT", "Directory import '%s' is not supported resolving ES modules imported from %s", Error), codes.ERR_UNSUPPORTED_RESOLVE_REQUEST = createError("ERR_UNSUPPORTED_RESOLVE_REQUEST", 'Failed to resolve module specifier "%s" from "%s": Invalid relative URL or base scheme is not hierarchical.', TypeError), codes.ERR_UNKNOWN_FILE_EXTENSION = createError("ERR_UNKNOWN_FILE_EXTENSION", (extension, path9) => `Unknown file extension "${extension}" for ${path9}`, TypeError), codes.ERR_INVALID_ARG_VALUE = createError("ERR_INVALID_ARG_VALUE", (name, value2, reason = "is invalid") => {
          let inspected = (0, _util().inspect)(value2);
          inspected.length > 128 && (inspected = `${inspected.slice(0, 128)}...`);
          return `The ${name.includes(".") ? "property" : "argument"} '${name}' ${reason}. Received ${inspected}`;
        }, TypeError);
        const captureLargerStackTrace = function(wrappedFunction) {
          const hidden2 = "__node_internal_" + wrappedFunction.name;
          return Object.defineProperty(wrappedFunction, "name", { value: hidden2 }), wrappedFunction;
        }(function(error) {
          const stackTraceLimitIsWritable = isErrorStackTraceLimitWritable();
          return stackTraceLimitIsWritable && (userStackTraceLimit = Error.stackTraceLimit, Error.stackTraceLimit = Number.POSITIVE_INFINITY), Error.captureStackTrace(error), stackTraceLimitIsWritable && (Error.stackTraceLimit = userStackTraceLimit), error;
        });
        const hasOwnProperty$1 = {}.hasOwnProperty, { ERR_INVALID_PACKAGE_CONFIG: ERR_INVALID_PACKAGE_CONFIG$1 } = codes, cache = /* @__PURE__ */ new Map();
        function read(jsonPath, { base, specifier }) {
          const existing = cache.get(jsonPath);
          if (existing) return existing;
          let string;
          try {
            string = _fs().default.readFileSync(_path().toNamespacedPath(jsonPath), "utf8");
          } catch (error) {
            const exception = error;
            if ("ENOENT" !== exception.code) throw exception;
          }
          const result = { exists: false, pjsonPath: jsonPath, main: void 0, name: void 0, type: "none", exports: void 0, imports: void 0 };
          if (void 0 !== string) {
            let parsed;
            try {
              parsed = JSON.parse(string);
            } catch (error_) {
              const cause = error_, error = new ERR_INVALID_PACKAGE_CONFIG$1(jsonPath, (base ? `"${specifier}" from ` : "") + (0, _url().fileURLToPath)(base || specifier), cause.message);
              throw error.cause = cause, error;
            }
            result.exists = true, hasOwnProperty$1.call(parsed, "name") && "string" == typeof parsed.name && (result.name = parsed.name), hasOwnProperty$1.call(parsed, "main") && "string" == typeof parsed.main && (result.main = parsed.main), hasOwnProperty$1.call(parsed, "exports") && (result.exports = parsed.exports), hasOwnProperty$1.call(parsed, "imports") && (result.imports = parsed.imports), !hasOwnProperty$1.call(parsed, "type") || "commonjs" !== parsed.type && "module" !== parsed.type || (result.type = parsed.type);
          }
          return cache.set(jsonPath, result), result;
        }
        function getPackageScopeConfig(resolved) {
          let packageJSONUrl = new URL("package.json", resolved);
          for (; ; ) {
            if (packageJSONUrl.pathname.endsWith("node_modules/package.json")) break;
            const packageConfig = read((0, _url().fileURLToPath)(packageJSONUrl), { specifier: resolved });
            if (packageConfig.exists) return packageConfig;
            const lastPackageJSONUrl = packageJSONUrl;
            if (packageJSONUrl = new URL("../package.json", packageJSONUrl), packageJSONUrl.pathname === lastPackageJSONUrl.pathname) break;
          }
          return { pjsonPath: (0, _url().fileURLToPath)(packageJSONUrl), exists: false, type: "none" };
        }
        function getPackageType(url) {
          return getPackageScopeConfig(url).type;
        }
        const { ERR_UNKNOWN_FILE_EXTENSION } = codes, hasOwnProperty2 = {}.hasOwnProperty, extensionFormatMap = { __proto__: null, ".cjs": "commonjs", ".js": "module", ".json": "json", ".mjs": "module" };
        const protocolHandlers = { __proto__: null, "data:": function(parsed) {
          const { 1: mime } = /^([^/]+\/[^;,]+)[^,]*?(;base64)?,/.exec(parsed.pathname) || [null, null, null];
          return function(mime2) {
            return mime2 && /\s*(text|application)\/javascript\s*(;\s*charset=utf-?8\s*)?/i.test(mime2) ? "module" : "application/json" === mime2 ? "json" : null;
          }(mime);
        }, "file:": function(url, _context, ignoreErrors) {
          const value2 = function(url2) {
            const pathname = url2.pathname;
            let index = pathname.length;
            for (; index--; ) {
              const code = pathname.codePointAt(index);
              if (47 === code) return "";
              if (46 === code) return 47 === pathname.codePointAt(index - 1) ? "" : pathname.slice(index);
            }
            return "";
          }(url);
          if (".js" === value2) {
            const packageType = getPackageType(url);
            return "none" !== packageType ? packageType : "commonjs";
          }
          if ("" === value2) {
            const packageType = getPackageType(url);
            return "none" === packageType || "commonjs" === packageType ? "commonjs" : "module";
          }
          const format2 = extensionFormatMap[value2];
          if (format2) return format2;
          if (ignoreErrors) return;
          const filepath = (0, _url().fileURLToPath)(url);
          throw new ERR_UNKNOWN_FILE_EXTENSION(value2, filepath);
        }, "http:": getHttpProtocolModuleFormat, "https:": getHttpProtocolModuleFormat, "node:": () => "builtin" };
        function getHttpProtocolModuleFormat() {
        }
        function defaultGetFormatWithoutErrors(url, context) {
          const protocol = url.protocol;
          return hasOwnProperty2.call(protocolHandlers, protocol) && protocolHandlers[protocol](url, context, true) || null;
        }
        const { ERR_INVALID_ARG_VALUE } = codes, DEFAULT_CONDITIONS = Object.freeze(["node", "import"]), DEFAULT_CONDITIONS_SET = new Set(DEFAULT_CONDITIONS);
        const RegExpPrototypeSymbolReplace = RegExp.prototype[Symbol.replace], { ERR_NETWORK_IMPORT_DISALLOWED, ERR_INVALID_MODULE_SPECIFIER, ERR_INVALID_PACKAGE_CONFIG, ERR_INVALID_PACKAGE_TARGET, ERR_MODULE_NOT_FOUND, ERR_PACKAGE_IMPORT_NOT_DEFINED, ERR_PACKAGE_PATH_NOT_EXPORTED, ERR_UNSUPPORTED_DIR_IMPORT, ERR_UNSUPPORTED_RESOLVE_REQUEST } = codes, own = {}.hasOwnProperty, invalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))?(\\|\/|$)/i, deprecatedInvalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\|\/|$)/i, invalidPackageNameRegEx = /^\.|%|\\/, patternRegEx = /\*/g, encodedSeparatorRegEx = /%2f|%5c/i, emittedPackageWarnings = /* @__PURE__ */ new Set(), doubleSlashRegEx = /[/\\]{2}/;
        function emitInvalidSegmentDeprecation(target, request, match, packageJsonUrl, internal, base, isTarget) {
          if (_process().noDeprecation) return;
          const pjsonPath = (0, _url().fileURLToPath)(packageJsonUrl), double = null !== doubleSlashRegEx.exec(isTarget ? target : request);
          _process().emitWarning(`Use of deprecated ${double ? "double slash" : "leading or trailing slash matching"} resolving "${target}" for module request "${request}" ${request === match ? "" : `matched to "${match}" `}in the "${internal ? "imports" : "exports"}" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, _url().fileURLToPath)(base)}` : ""}.`, "DeprecationWarning", "DEP0166");
        }
        function emitLegacyIndexDeprecation(url, packageJsonUrl, base, main) {
          if (_process().noDeprecation) return;
          if ("module" !== defaultGetFormatWithoutErrors(url, { parentURL: base.href })) return;
          const urlPath = (0, _url().fileURLToPath)(url.href), packagePath = (0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), basePath = (0, _url().fileURLToPath)(base);
          main ? _path().resolve(packagePath, main) !== urlPath && _process().emitWarning(`Package ${packagePath} has a "main" field set to "${main}", excluding the full filename and extension to the resolved file at "${urlPath.slice(packagePath.length)}", imported from ${basePath}.
 Automatic extension resolution of the "main" field is deprecated for ES modules.`, "DeprecationWarning", "DEP0151") : _process().emitWarning(`No "main" or "exports" field defined in the package.json for ${packagePath} resolving the main entry point "${urlPath.slice(packagePath.length)}", imported from ${basePath}.
Default "index" lookups for the main are deprecated for ES modules.`, "DeprecationWarning", "DEP0151");
        }
        function tryStatSync(path9) {
          try {
            return (0, _fs().statSync)(path9);
          } catch (_unused2) {
          }
        }
        function fileExists(url) {
          const stats = (0, _fs().statSync)(url, { throwIfNoEntry: false }), isFile = stats ? stats.isFile() : void 0;
          return null != isFile && isFile;
        }
        function legacyMainResolve(packageJsonUrl, packageConfig, base) {
          let guess;
          if (void 0 !== packageConfig.main) {
            if (guess = new (_url()).URL(packageConfig.main, packageJsonUrl), fileExists(guess)) return guess;
            const tries2 = [`./${packageConfig.main}.js`, `./${packageConfig.main}.json`, `./${packageConfig.main}.node`, `./${packageConfig.main}/index.js`, `./${packageConfig.main}/index.json`, `./${packageConfig.main}/index.node`];
            let i3 = -1;
            for (; ++i3 < tries2.length && (guess = new (_url()).URL(tries2[i3], packageJsonUrl), !fileExists(guess)); ) guess = void 0;
            if (guess) return emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main), guess;
          }
          const tries = ["./index.js", "./index.json", "./index.node"];
          let i2 = -1;
          for (; ++i2 < tries.length && (guess = new (_url()).URL(tries[i2], packageJsonUrl), !fileExists(guess)); ) guess = void 0;
          if (guess) return emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main), guess;
          throw new ERR_MODULE_NOT_FOUND((0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), (0, _url().fileURLToPath)(base));
        }
        function exportsNotFound(subpath, packageJsonUrl, base) {
          return new ERR_PACKAGE_PATH_NOT_EXPORTED((0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), subpath, base && (0, _url().fileURLToPath)(base));
        }
        function invalidPackageTarget(subpath, target, packageJsonUrl, internal, base) {
          return target = "object" == typeof target && null !== target ? JSON.stringify(target, null, "") : `${target}`, new ERR_INVALID_PACKAGE_TARGET((0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), subpath, target, internal, base && (0, _url().fileURLToPath)(base));
        }
        function resolvePackageTargetString(target, subpath, match, packageJsonUrl, base, pattern, internal, isPathMap, conditions) {
          if ("" !== subpath && !pattern && "/" !== target[target.length - 1]) throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
          if (!target.startsWith("./")) {
            if (internal && !target.startsWith("../") && !target.startsWith("/")) {
              let isURL = false;
              try {
                new (_url()).URL(target), isURL = true;
              } catch (_unused3) {
              }
              if (!isURL) {
                return packageResolve(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target + subpath, packageJsonUrl, conditions);
              }
            }
            throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
          }
          if (null !== invalidSegmentRegEx.exec(target.slice(2))) {
            if (null !== deprecatedInvalidSegmentRegEx.exec(target.slice(2))) throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
            if (!isPathMap) {
              const request = pattern ? match.replace("*", () => subpath) : match + subpath;
              emitInvalidSegmentDeprecation(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target, request, match, packageJsonUrl, internal, base, true);
            }
          }
          const resolved = new (_url()).URL(target, packageJsonUrl), resolvedPath = resolved.pathname, packagePath = new (_url()).URL(".", packageJsonUrl).pathname;
          if (!resolvedPath.startsWith(packagePath)) throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
          if ("" === subpath) return resolved;
          if (null !== invalidSegmentRegEx.exec(subpath)) {
            const request = pattern ? match.replace("*", () => subpath) : match + subpath;
            if (null === deprecatedInvalidSegmentRegEx.exec(subpath)) {
              if (!isPathMap) {
                emitInvalidSegmentDeprecation(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target, request, match, packageJsonUrl, internal, base, false);
              }
            } else !function(request2, match2, packageJsonUrl2, internal2, base2) {
              const reason = `request is not a valid match in pattern "${match2}" for the "${internal2 ? "imports" : "exports"}" resolution of ${(0, _url().fileURLToPath)(packageJsonUrl2)}`;
              throw new ERR_INVALID_MODULE_SPECIFIER(request2, reason, base2 && (0, _url().fileURLToPath)(base2));
            }(request, match, packageJsonUrl, internal, base);
          }
          return pattern ? new (_url()).URL(RegExpPrototypeSymbolReplace.call(patternRegEx, resolved.href, () => subpath)) : new (_url()).URL(subpath, resolved);
        }
        function isArrayIndex(key) {
          const keyNumber = Number(key);
          return `${keyNumber}` === key && (keyNumber >= 0 && keyNumber < 4294967295);
        }
        function resolvePackageTarget(packageJsonUrl, target, subpath, packageSubpath, base, pattern, internal, isPathMap, conditions) {
          if ("string" == typeof target) return resolvePackageTargetString(target, subpath, packageSubpath, packageJsonUrl, base, pattern, internal, isPathMap, conditions);
          if (Array.isArray(target)) {
            const targetList = target;
            if (0 === targetList.length) return null;
            let lastException, i2 = -1;
            for (; ++i2 < targetList.length; ) {
              const targetItem = targetList[i2];
              let resolveResult;
              try {
                resolveResult = resolvePackageTarget(packageJsonUrl, targetItem, subpath, packageSubpath, base, pattern, internal, isPathMap, conditions);
              } catch (error) {
                if (lastException = error, "ERR_INVALID_PACKAGE_TARGET" === error.code) continue;
                throw error;
              }
              if (void 0 !== resolveResult) {
                if (null !== resolveResult) return resolveResult;
                lastException = null;
              }
            }
            if (null == lastException) return null;
            throw lastException;
          }
          if ("object" == typeof target && null !== target) {
            const keys = Object.getOwnPropertyNames(target);
            let i2 = -1;
            for (; ++i2 < keys.length; ) {
              if (isArrayIndex(keys[i2])) throw new ERR_INVALID_PACKAGE_CONFIG((0, _url().fileURLToPath)(packageJsonUrl), base, '"exports" cannot contain numeric property keys.');
            }
            for (i2 = -1; ++i2 < keys.length; ) {
              const key = keys[i2];
              if ("default" === key || conditions && conditions.has(key)) {
                const resolveResult = resolvePackageTarget(packageJsonUrl, target[key], subpath, packageSubpath, base, pattern, internal, isPathMap, conditions);
                if (void 0 === resolveResult) continue;
                return resolveResult;
              }
            }
            return null;
          }
          if (null === target) return null;
          throw invalidPackageTarget(packageSubpath, target, packageJsonUrl, internal, base);
        }
        function emitTrailingSlashPatternDeprecation(match, pjsonUrl, base) {
          if (_process().noDeprecation) return;
          const pjsonPath = (0, _url().fileURLToPath)(pjsonUrl);
          emittedPackageWarnings.has(pjsonPath + "|" + match) || (emittedPackageWarnings.add(pjsonPath + "|" + match), _process().emitWarning(`Use of deprecated trailing slash pattern mapping "${match}" in the "exports" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, _url().fileURLToPath)(base)}` : ""}. Mapping specifiers ending in "/" is no longer supported.`, "DeprecationWarning", "DEP0155"));
        }
        function packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig, base, conditions) {
          let exports3 = packageConfig.exports;
          if (function(exports4, packageJsonUrl2, base2) {
            if ("string" == typeof exports4 || Array.isArray(exports4)) return true;
            if ("object" != typeof exports4 || null === exports4) return false;
            const keys2 = Object.getOwnPropertyNames(exports4);
            let isConditionalSugar = false, i3 = 0, keyIndex = -1;
            for (; ++keyIndex < keys2.length; ) {
              const key = keys2[keyIndex], currentIsConditionalSugar = "" === key || "." !== key[0];
              if (0 == i3++) isConditionalSugar = currentIsConditionalSugar;
              else if (isConditionalSugar !== currentIsConditionalSugar) throw new ERR_INVALID_PACKAGE_CONFIG((0, _url().fileURLToPath)(packageJsonUrl2), base2, `"exports" cannot contain some keys starting with '.' and some not. The exports object must either be an object of package subpath keys or an object of main entry condition name keys only.`);
            }
            return isConditionalSugar;
          }(exports3, packageJsonUrl, base) && (exports3 = { ".": exports3 }), own.call(exports3, packageSubpath) && !packageSubpath.includes("*") && !packageSubpath.endsWith("/")) {
            const resolveResult = resolvePackageTarget(packageJsonUrl, exports3[packageSubpath], "", packageSubpath, base, false, false, false, conditions);
            if (null == resolveResult) throw exportsNotFound(packageSubpath, packageJsonUrl, base);
            return resolveResult;
          }
          let bestMatch = "", bestMatchSubpath = "";
          const keys = Object.getOwnPropertyNames(exports3);
          let i2 = -1;
          for (; ++i2 < keys.length; ) {
            const key = keys[i2], patternIndex = key.indexOf("*");
            if (-1 !== patternIndex && packageSubpath.startsWith(key.slice(0, patternIndex))) {
              packageSubpath.endsWith("/") && emitTrailingSlashPatternDeprecation(packageSubpath, packageJsonUrl, base);
              const patternTrailer = key.slice(patternIndex + 1);
              packageSubpath.length >= key.length && packageSubpath.endsWith(patternTrailer) && 1 === patternKeyCompare(bestMatch, key) && key.lastIndexOf("*") === patternIndex && (bestMatch = key, bestMatchSubpath = packageSubpath.slice(patternIndex, packageSubpath.length - patternTrailer.length));
            }
          }
          if (bestMatch) {
            const resolveResult = resolvePackageTarget(packageJsonUrl, exports3[bestMatch], bestMatchSubpath, bestMatch, base, true, false, packageSubpath.endsWith("/"), conditions);
            if (null == resolveResult) throw exportsNotFound(packageSubpath, packageJsonUrl, base);
            return resolveResult;
          }
          throw exportsNotFound(packageSubpath, packageJsonUrl, base);
        }
        function patternKeyCompare(a2, b2) {
          const aPatternIndex = a2.indexOf("*"), bPatternIndex = b2.indexOf("*"), baseLengthA = -1 === aPatternIndex ? a2.length : aPatternIndex + 1, baseLengthB = -1 === bPatternIndex ? b2.length : bPatternIndex + 1;
          return baseLengthA > baseLengthB ? -1 : baseLengthB > baseLengthA || -1 === aPatternIndex ? 1 : -1 === bPatternIndex || a2.length > b2.length ? -1 : b2.length > a2.length ? 1 : 0;
        }
        function packageImportsResolve(name, base, conditions) {
          if ("#" === name || name.startsWith("#/") || name.endsWith("/")) {
            throw new ERR_INVALID_MODULE_SPECIFIER(name, "is not a valid internal imports specifier name", (0, _url().fileURLToPath)(base));
          }
          let packageJsonUrl;
          const packageConfig = getPackageScopeConfig(base);
          if (packageConfig.exists) {
            packageJsonUrl = (0, _url().pathToFileURL)(packageConfig.pjsonPath);
            const imports = packageConfig.imports;
            if (imports) if (own.call(imports, name) && !name.includes("*")) {
              const resolveResult = resolvePackageTarget(packageJsonUrl, imports[name], "", name, base, false, true, false, conditions);
              if (null != resolveResult) return resolveResult;
            } else {
              let bestMatch = "", bestMatchSubpath = "";
              const keys = Object.getOwnPropertyNames(imports);
              let i2 = -1;
              for (; ++i2 < keys.length; ) {
                const key = keys[i2], patternIndex = key.indexOf("*");
                if (-1 !== patternIndex && name.startsWith(key.slice(0, -1))) {
                  const patternTrailer = key.slice(patternIndex + 1);
                  name.length >= key.length && name.endsWith(patternTrailer) && 1 === patternKeyCompare(bestMatch, key) && key.lastIndexOf("*") === patternIndex && (bestMatch = key, bestMatchSubpath = name.slice(patternIndex, name.length - patternTrailer.length));
                }
              }
              if (bestMatch) {
                const resolveResult = resolvePackageTarget(packageJsonUrl, imports[bestMatch], bestMatchSubpath, bestMatch, base, true, true, false, conditions);
                if (null != resolveResult) return resolveResult;
              }
            }
          }
          throw function(specifier, packageJsonUrl2, base2) {
            return new ERR_PACKAGE_IMPORT_NOT_DEFINED(specifier, packageJsonUrl2 && (0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl2)), (0, _url().fileURLToPath)(base2));
          }(name, packageJsonUrl, base);
        }
        function packageResolve(specifier, base, conditions) {
          if (_module().builtinModules.includes(specifier)) return new (_url()).URL("node:" + specifier);
          const { packageName, packageSubpath, isScoped } = function(specifier2, base2) {
            let separatorIndex = specifier2.indexOf("/"), validPackageName = true, isScoped2 = false;
            "@" === specifier2[0] && (isScoped2 = true, -1 === separatorIndex || 0 === specifier2.length ? validPackageName = false : separatorIndex = specifier2.indexOf("/", separatorIndex + 1));
            const packageName2 = -1 === separatorIndex ? specifier2 : specifier2.slice(0, separatorIndex);
            if (null !== invalidPackageNameRegEx.exec(packageName2) && (validPackageName = false), !validPackageName) throw new ERR_INVALID_MODULE_SPECIFIER(specifier2, "is not a valid package name", (0, _url().fileURLToPath)(base2));
            return { packageName: packageName2, packageSubpath: "." + (-1 === separatorIndex ? "" : specifier2.slice(separatorIndex)), isScoped: isScoped2 };
          }(specifier, base), packageConfig = getPackageScopeConfig(base);
          if (packageConfig.exists) {
            const packageJsonUrl2 = (0, _url().pathToFileURL)(packageConfig.pjsonPath);
            if (packageConfig.name === packageName && void 0 !== packageConfig.exports && null !== packageConfig.exports) return packageExportsResolve(packageJsonUrl2, packageSubpath, packageConfig, base, conditions);
          }
          let lastPath, packageJsonUrl = new (_url()).URL("./node_modules/" + packageName + "/package.json", base), packageJsonPath = (0, _url().fileURLToPath)(packageJsonUrl);
          do {
            const stat = tryStatSync(packageJsonPath.slice(0, -13));
            if (!stat || !stat.isDirectory()) {
              lastPath = packageJsonPath, packageJsonUrl = new (_url()).URL((isScoped ? "../../../../node_modules/" : "../../../node_modules/") + packageName + "/package.json", packageJsonUrl), packageJsonPath = (0, _url().fileURLToPath)(packageJsonUrl);
              continue;
            }
            const packageConfig2 = read(packageJsonPath, { base, specifier });
            return void 0 !== packageConfig2.exports && null !== packageConfig2.exports ? packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig2, base, conditions) : "." === packageSubpath ? legacyMainResolve(packageJsonUrl, packageConfig2, base) : new (_url()).URL(packageSubpath, packageJsonUrl);
          } while (packageJsonPath.length !== lastPath.length);
          throw new ERR_MODULE_NOT_FOUND(packageName, (0, _url().fileURLToPath)(base), false);
        }
        function shouldBeTreatedAsRelativeOrAbsolutePath(specifier) {
          return "" !== specifier && ("/" === specifier[0] || function(specifier2) {
            if ("." === specifier2[0]) {
              if (1 === specifier2.length || "/" === specifier2[1]) return true;
              if ("." === specifier2[1] && (2 === specifier2.length || "/" === specifier2[2])) return true;
            }
            return false;
          }(specifier));
        }
        function moduleResolve(specifier, base, conditions, preserveSymlinks) {
          const protocol = base.protocol, isRemote = "data:" === protocol || "http:" === protocol || "https:" === protocol;
          let resolved;
          if (shouldBeTreatedAsRelativeOrAbsolutePath(specifier)) try {
            resolved = new (_url()).URL(specifier, base);
          } catch (error_) {
            const error = new ERR_UNSUPPORTED_RESOLVE_REQUEST(specifier, base);
            throw error.cause = error_, error;
          }
          else if ("file:" === protocol && "#" === specifier[0]) resolved = packageImportsResolve(specifier, base, conditions);
          else try {
            resolved = new (_url()).URL(specifier);
          } catch (error_) {
            if (isRemote && !_module().builtinModules.includes(specifier)) {
              const error = new ERR_UNSUPPORTED_RESOLVE_REQUEST(specifier, base);
              throw error.cause = error_, error;
            }
            resolved = packageResolve(specifier, base, conditions);
          }
          return _assert()(void 0 !== resolved, "expected to be defined"), "file:" !== resolved.protocol ? resolved : function(resolved2, base2, preserveSymlinks2) {
            if (null !== encodedSeparatorRegEx.exec(resolved2.pathname)) throw new ERR_INVALID_MODULE_SPECIFIER(resolved2.pathname, 'must not include encoded "/" or "\\" characters', (0, _url().fileURLToPath)(base2));
            let filePath;
            try {
              filePath = (0, _url().fileURLToPath)(resolved2);
            } catch (error) {
              const cause = error;
              throw Object.defineProperty(cause, "input", { value: String(resolved2) }), Object.defineProperty(cause, "module", { value: String(base2) }), cause;
            }
            const stats = tryStatSync(filePath.endsWith("/") ? filePath.slice(-1) : filePath);
            if (stats && stats.isDirectory()) {
              const error = new ERR_UNSUPPORTED_DIR_IMPORT(filePath, (0, _url().fileURLToPath)(base2));
              throw error.url = String(resolved2), error;
            }
            if (!stats || !stats.isFile()) {
              const error = new ERR_MODULE_NOT_FOUND(filePath || resolved2.pathname, base2 && (0, _url().fileURLToPath)(base2), true);
              throw error.url = String(resolved2), error;
            }
            if (!preserveSymlinks2) {
              const real = (0, _fs().realpathSync)(filePath), { search, hash } = resolved2;
              (resolved2 = (0, _url().pathToFileURL)(real + (filePath.endsWith(_path().sep) ? "/" : ""))).search = search, resolved2.hash = hash;
            }
            return resolved2;
          }(resolved, base, preserveSymlinks);
        }
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/buffer.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        exports2.default = class {
          constructor(map, indentChar) {
            this._map = null, this._buf = "", this._str = "", this._appendCount = 0, this._last = 0, this._queue = [], this._queueCursor = 0, this._canMarkIdName = true, this._indentChar = "", this._fastIndentations = [], this._position = { line: 1, column: 0 }, this._sourcePosition = { identifierName: void 0, identifierNamePos: void 0, line: void 0, column: void 0, filename: void 0 }, this._map = map, this._indentChar = indentChar;
            for (let i2 = 0; i2 < 64; i2++) this._fastIndentations.push(indentChar.repeat(i2));
            this._allocQueue();
          }
          _allocQueue() {
            const queue = this._queue;
            for (let i2 = 0; i2 < 16; i2++) queue.push({ char: 0, repeat: 1, line: void 0, column: void 0, identifierName: void 0, identifierNamePos: void 0, filename: "" });
          }
          _pushQueue(char, repeat, line, column, filename) {
            const cursor = this._queueCursor;
            cursor === this._queue.length && this._allocQueue();
            const item = this._queue[cursor];
            item.char = char, item.repeat = repeat, item.line = line, item.column = column, item.filename = filename, this._queueCursor++;
          }
          _popQueue() {
            if (0 === this._queueCursor) throw new Error("Cannot pop from empty queue");
            return this._queue[--this._queueCursor];
          }
          get() {
            this._flush();
            const map = this._map, result = { code: (this._buf + this._str).trimRight(), decodedMap: null == map ? void 0 : map.getDecoded(), get __mergedMap() {
              return this.map;
            }, get map() {
              const resultMap = map ? map.get() : null;
              return result.map = resultMap, resultMap;
            }, set map(value2) {
              Object.defineProperty(result, "map", { value: value2, writable: true });
            }, get rawMappings() {
              const mappings = null == map ? void 0 : map.getRawMappings();
              return result.rawMappings = mappings, mappings;
            }, set rawMappings(value2) {
              Object.defineProperty(result, "rawMappings", { value: value2, writable: true });
            } };
            return result;
          }
          append(str, maybeNewline) {
            this._flush(), this._append(str, this._sourcePosition, maybeNewline);
          }
          appendChar(char) {
            this._flush(), this._appendChar(char, 1, this._sourcePosition);
          }
          queue(char) {
            if (10 === char) for (; 0 !== this._queueCursor; ) {
              const char2 = this._queue[this._queueCursor - 1].char;
              if (32 !== char2 && 9 !== char2) break;
              this._queueCursor--;
            }
            const sourcePosition = this._sourcePosition;
            this._pushQueue(char, 1, sourcePosition.line, sourcePosition.column, sourcePosition.filename);
          }
          queueIndentation(repeat) {
            0 !== repeat && this._pushQueue(-1, repeat, void 0, void 0, void 0);
          }
          _flush() {
            const queueCursor = this._queueCursor, queue = this._queue;
            for (let i2 = 0; i2 < queueCursor; i2++) {
              const item = queue[i2];
              this._appendChar(item.char, item.repeat, item);
            }
            this._queueCursor = 0;
          }
          _appendChar(char, repeat, sourcePos) {
            if (this._last = char, -1 === char) {
              const fastIndentation = this._fastIndentations[repeat];
              this._str += void 0 !== fastIndentation ? fastIndentation : repeat > 1 ? this._indentChar.repeat(repeat) : this._indentChar;
            } else this._str += repeat > 1 ? String.fromCharCode(char).repeat(repeat) : String.fromCharCode(char);
            10 !== char ? (this._mark(sourcePos.line, sourcePos.column, sourcePos.identifierName, sourcePos.identifierNamePos, sourcePos.filename), this._position.column += repeat) : (this._position.line++, this._position.column = 0), this._canMarkIdName && (sourcePos.identifierName = void 0, sourcePos.identifierNamePos = void 0);
          }
          _append(str, sourcePos, maybeNewline) {
            const len = str.length, position = this._position;
            if (this._last = str.charCodeAt(len - 1), ++this._appendCount > 4096 ? (this._str, this._buf += this._str, this._str = str, this._appendCount = 0) : this._str += str, !maybeNewline && !this._map) return void (position.column += len);
            const { column, identifierName, identifierNamePos, filename } = sourcePos;
            let line = sourcePos.line;
            null == identifierName && null == identifierNamePos || !this._canMarkIdName || (sourcePos.identifierName = void 0, sourcePos.identifierNamePos = void 0);
            let i2 = str.indexOf("\n"), last = 0;
            for (0 !== i2 && this._mark(line, column, identifierName, identifierNamePos, filename); -1 !== i2; ) position.line++, position.column = 0, last = i2 + 1, last < len && void 0 !== line && this._mark(++line, 0, null, null, filename), i2 = str.indexOf("\n", last);
            position.column += len - last;
          }
          _mark(line, column, identifierName, identifierNamePos, filename) {
            var _this$_map;
            null == (_this$_map = this._map) || _this$_map.mark(this._position, line, column, identifierName, identifierNamePos, filename);
          }
          removeTrailingNewline() {
            const queueCursor = this._queueCursor;
            0 !== queueCursor && 10 === this._queue[queueCursor - 1].char && this._queueCursor--;
          }
          removeLastSemicolon() {
            const queueCursor = this._queueCursor;
            0 !== queueCursor && 59 === this._queue[queueCursor - 1].char && this._queueCursor--;
          }
          getLastChar() {
            const queueCursor = this._queueCursor;
            return 0 !== queueCursor ? this._queue[queueCursor - 1].char : this._last;
          }
          getNewlineCount() {
            const queueCursor = this._queueCursor;
            let count2 = 0;
            if (0 === queueCursor) return 10 === this._last ? 1 : 0;
            for (let i2 = queueCursor - 1; i2 >= 0 && 10 === this._queue[i2].char; i2--) count2++;
            return count2 === queueCursor && 10 === this._last ? count2 + 1 : count2;
          }
          endsWithCharAndNewline() {
            const queue = this._queue, queueCursor = this._queueCursor;
            if (0 !== queueCursor) {
              if (10 !== queue[queueCursor - 1].char) return;
              return queueCursor > 1 ? queue[queueCursor - 2].char : this._last;
            }
          }
          hasContent() {
            return 0 !== this._queueCursor || !!this._last;
          }
          exactSource(loc, cb) {
            if (!this._map) return void cb();
            this.source("start", loc);
            const identifierName = loc.identifierName, sourcePos = this._sourcePosition;
            identifierName && (this._canMarkIdName = false, sourcePos.identifierName = identifierName), cb(), identifierName && (this._canMarkIdName = true, sourcePos.identifierName = void 0, sourcePos.identifierNamePos = void 0), this.source("end", loc);
          }
          source(prop, loc) {
            this._map && this._normalizePosition(prop, loc, 0);
          }
          sourceWithOffset(prop, loc, columnOffset) {
            this._map && this._normalizePosition(prop, loc, columnOffset);
          }
          _normalizePosition(prop, loc, columnOffset) {
            const pos = loc[prop], target = this._sourcePosition;
            pos && (target.line = pos.line, target.column = Math.max(pos.column + columnOffset, 0), target.filename = loc.filename);
          }
          getCurrentColumn() {
            const queue = this._queue, queueCursor = this._queueCursor;
            let lastIndex = -1, len = 0;
            for (let i2 = 0; i2 < queueCursor; i2++) {
              const item = queue[i2];
              10 === item.char && (lastIndex = len), len += item.repeat;
            }
            return -1 === lastIndex ? this._position.column + len : len - 1 - lastIndex;
          }
          getCurrentLine() {
            let count2 = 0;
            const queue = this._queue;
            for (let i2 = 0; i2 < this._queueCursor; i2++) 10 === queue[i2].char && count2++;
            return this._position.line + count2;
          }
        };
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/base.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.BlockStatement = function(node) {
          var _node$directives2;
          this.tokenChar(123);
          const exit = this.enterDelimited(), directivesLen = null == (_node$directives2 = node.directives) ? void 0 : _node$directives2.length;
          if (directivesLen) {
            var _node$directives$trai2;
            const newline = node.body.length ? 2 : 1;
            this.printSequence(node.directives, true, newline), null != (_node$directives$trai2 = node.directives[directivesLen - 1].trailingComments) && _node$directives$trai2.length || this.newline(newline);
          }
          this.printSequence(node.body, true), exit(), this.rightBrace(node);
        }, exports2.Directive = function(node) {
          this.print(node.value), this.semicolon();
        }, exports2.DirectiveLiteral = function(node) {
          const raw2 = this.getPossibleRaw(node);
          if (!this.format.minified && void 0 !== raw2) return void this.token(raw2);
          const { value: value2 } = node;
          if (unescapedDoubleQuoteRE.test(value2)) {
            if (unescapedSingleQuoteRE.test(value2)) throw new Error("Malformed AST: it is not possible to print a directive containing both unescaped single and double quotes.");
            this.token(`'${value2}'`);
          } else this.token(`"${value2}"`);
        }, exports2.File = function(node) {
          node.program && this.print(node.program.interpreter);
          this.print(node.program);
        }, exports2.InterpreterDirective = function(node) {
          this.token(`#!${node.value}`), this.newline(1, true);
        }, exports2.Placeholder = function(node) {
          this.token("%%"), this.print(node.name), this.token("%%"), "Statement" === node.expectedNode && this.semicolon();
        }, exports2.Program = function(node) {
          var _node$directives;
          this.noIndentInnerCommentsHere(), this.printInnerComments();
          const directivesLen = null == (_node$directives = node.directives) ? void 0 : _node$directives.length;
          if (directivesLen) {
            var _node$directives$trai;
            const newline = node.body.length ? 2 : 1;
            this.printSequence(node.directives, void 0, newline), null != (_node$directives$trai = node.directives[directivesLen - 1].trailingComments) && _node$directives$trai.length || this.newline(newline);
          }
          this.printSequence(node.body);
        };
        const unescapedSingleQuoteRE = /(?:^|[^\\])(?:\\\\)*'/, unescapedDoubleQuoteRE = /(?:^|[^\\])(?:\\\\)*"/;
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/classes.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ClassAccessorProperty = function(node) {
          var _node$key$loc2;
          this.printJoin(node.decorators);
          const endLine = null == (_node$key$loc2 = node.key.loc) || null == (_node$key$loc2 = _node$key$loc2.end) ? void 0 : _node$key$loc2.line;
          endLine && this.catchUp(endLine);
          this.tsPrintClassMemberModifiers(node), this.word("accessor", true), this.space(), node.computed ? (this.tokenChar(91), this.print(node.key), this.tokenChar(93)) : (this._variance(node), this.print(node.key));
          node.optional && this.tokenChar(63);
          node.definite && this.tokenChar(33);
          this.print(node.typeAnnotation), node.value && (this.space(), this.tokenChar(61), this.space(), this.print(node.value));
          this.semicolon();
        }, exports2.ClassBody = function(node) {
          if (this.tokenChar(123), 0 === node.body.length) this.tokenChar(125);
          else {
            this.newline();
            const separator = function(printer, node2) {
              if (!printer.tokenMap || null == node2.start || null == node2.end) return null;
              const indexes = printer.tokenMap.getIndexes(node2);
              if (!indexes) return null;
              let k3 = 1, occurrenceCount = 0, nextLocIndex = 0;
              const advanceNextLocIndex = () => {
                for (; nextLocIndex < node2.body.length && null == node2.body[nextLocIndex].start; ) nextLocIndex++;
              };
              return advanceNextLocIndex(), (i2) => {
                nextLocIndex <= i2 && (nextLocIndex = i2 + 1, advanceNextLocIndex());
                const end = nextLocIndex === node2.body.length ? node2.end : node2.body[nextLocIndex].start;
                let tok;
                for (; k3 < indexes.length && printer.tokenMap.matchesOriginal(tok = printer._tokens[indexes[k3]], ";") && tok.start < end; ) printer.token(";", void 0, occurrenceCount++), k3++;
              };
            }(this, node);
            null == separator || separator(-1);
            const exit = this.enterDelimited();
            this.printJoin(node.body, true, true, separator, true), exit(), this.endsWith(10) || this.newline(), this.rightBrace(node);
          }
        }, exports2.ClassExpression = exports2.ClassDeclaration = function(node, parent) {
          (isExportDefaultDeclaration(parent) || isExportNamedDeclaration(parent)) && this._shouldPrintDecoratorsBeforeExport(parent) || this.printJoin(node.decorators);
          node.declare && (this.word("declare"), this.space());
          node.abstract && (this.word("abstract"), this.space());
          this.word("class"), node.id && (this.space(), this.print(node.id));
          this.print(node.typeParameters), node.superClass && (this.space(), this.word("extends"), this.space(), this.print(node.superClass), this.print(node.superTypeParameters));
          node.implements && (this.space(), this.word("implements"), this.space(), this.printList(node.implements));
          this.space(), this.print(node.body);
        }, exports2.ClassMethod = function(node) {
          this._classMethodHead(node), this.space(), this.print(node.body);
        }, exports2.ClassPrivateMethod = function(node) {
          this._classMethodHead(node), this.space(), this.print(node.body);
        }, exports2.ClassPrivateProperty = function(node) {
          this.printJoin(node.decorators), node.static && (this.word("static"), this.space());
          this.print(node.key), this.print(node.typeAnnotation), node.value && (this.space(), this.tokenChar(61), this.space(), this.print(node.value));
          this.semicolon();
        }, exports2.ClassProperty = function(node) {
          if (this.printJoin(node.decorators), !node.static && !this.format.preserveFormat) {
            var _node$key$loc;
            const endLine = null == (_node$key$loc = node.key.loc) || null == (_node$key$loc = _node$key$loc.end) ? void 0 : _node$key$loc.line;
            endLine && this.catchUp(endLine);
          }
          this.tsPrintClassMemberModifiers(node), node.computed ? (this.tokenChar(91), this.print(node.key), this.tokenChar(93)) : (this._variance(node), this.print(node.key));
          node.optional && this.tokenChar(63);
          node.definite && this.tokenChar(33);
          this.print(node.typeAnnotation), node.value && (this.space(), this.tokenChar(61), this.space(), this.print(node.value));
          this.semicolon();
        }, exports2.StaticBlock = function(node) {
          this.word("static"), this.space(), this.tokenChar(123), 0 === node.body.length ? this.tokenChar(125) : (this.newline(), this.printSequence(node.body, true), this.rightBrace(node));
        }, exports2._classMethodHead = function(node) {
          if (this.printJoin(node.decorators), !this.format.preserveFormat) {
            var _node$key$loc3;
            const endLine = null == (_node$key$loc3 = node.key.loc) || null == (_node$key$loc3 = _node$key$loc3.end) ? void 0 : _node$key$loc3.line;
            endLine && this.catchUp(endLine);
          }
          this.tsPrintClassMemberModifiers(node), this._methodHead(node);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { isExportDefaultDeclaration, isExportNamedDeclaration } = _t;
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/expressions.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.LogicalExpression = exports2.BinaryExpression = exports2.AssignmentExpression = function(node) {
          this.print(node.left), this.space(), "in" === node.operator || "instanceof" === node.operator ? this.word(node.operator) : (this.token(node.operator), this._endsWithDiv = "/" === node.operator);
          this.space(), this.print(node.right);
        }, exports2.AssignmentPattern = function(node) {
          this.print(node.left), ("Identifier" === node.left.type || isPattern(node.left)) && (node.left.optional && this.tokenChar(63), this.print(node.left.typeAnnotation));
          this.space(), this.tokenChar(61), this.space(), this.print(node.right);
        }, exports2.AwaitExpression = function(node) {
          this.word("await"), node.argument && (this.space(), this.printTerminatorless(node.argument));
        }, exports2.BindExpression = function(node) {
          this.print(node.object), this.token("::"), this.print(node.callee);
        }, exports2.CallExpression = function(node) {
          this.print(node.callee), this.print(node.typeArguments), this.print(node.typeParameters), this.tokenChar(40);
          const exit = this.enterDelimited();
          this.printList(node.arguments, this.shouldPrintTrailingComma(")")), exit(), this.rightParens(node);
        }, exports2.ConditionalExpression = function(node) {
          this.print(node.test), this.space(), this.tokenChar(63), this.space(), this.print(node.consequent), this.space(), this.tokenChar(58), this.space(), this.print(node.alternate);
        }, exports2.Decorator = function(node) {
          this.tokenChar(64), this.print(node.expression), this.newline();
        }, exports2.DoExpression = function(node) {
          node.async && (this.word("async", true), this.space());
          this.word("do"), this.space(), this.print(node.body);
        }, exports2.EmptyStatement = function() {
          this.semicolon(true);
        }, exports2.ExpressionStatement = function(node) {
          this.tokenContext |= _index.TokenContext.expressionStatement, this.print(node.expression), this.semicolon();
        }, exports2.Import = function() {
          this.word("import");
        }, exports2.MemberExpression = function(node) {
          if (this.print(node.object), !node.computed && isMemberExpression(node.property)) throw new TypeError("Got a MemberExpression for MemberExpression property");
          let computed = node.computed;
          isLiteral(node.property) && "number" == typeof node.property.value && (computed = true);
          if (computed) {
            const exit = this.enterDelimited();
            this.tokenChar(91), this.print(node.property), this.tokenChar(93), exit();
          } else this.tokenChar(46), this.print(node.property);
        }, exports2.MetaProperty = function(node) {
          this.print(node.meta), this.tokenChar(46), this.print(node.property);
        }, exports2.ModuleExpression = function(node) {
          this.word("module", true), this.space(), this.tokenChar(123), this.indent();
          const { body } = node;
          (body.body.length || body.directives.length) && this.newline();
          this.print(body), this.dedent(), this.rightBrace(node);
        }, exports2.NewExpression = function(node, parent) {
          if (this.word("new"), this.space(), this.print(node.callee), this.format.minified && 0 === node.arguments.length && !node.optional && !isCallExpression(parent, { callee: node }) && !isMemberExpression(parent) && !isNewExpression(parent)) return;
          this.print(node.typeArguments), this.print(node.typeParameters), node.optional && this.token("?.");
          if (0 === node.arguments.length && this.tokenMap && !this.tokenMap.endMatches(node, ")")) return;
          this.tokenChar(40);
          const exit = this.enterDelimited();
          this.printList(node.arguments, this.shouldPrintTrailingComma(")")), exit(), this.rightParens(node);
        }, exports2.OptionalCallExpression = function(node) {
          this.print(node.callee), this.print(node.typeParameters), node.optional && this.token("?.");
          this.print(node.typeArguments), this.tokenChar(40);
          const exit = this.enterDelimited();
          this.printList(node.arguments), exit(), this.rightParens(node);
        }, exports2.OptionalMemberExpression = function(node) {
          let { computed } = node;
          const { optional, property } = node;
          if (this.print(node.object), !computed && isMemberExpression(property)) throw new TypeError("Got a MemberExpression for MemberExpression property");
          isLiteral(property) && "number" == typeof property.value && (computed = true);
          optional && this.token("?.");
          computed ? (this.tokenChar(91), this.print(property), this.tokenChar(93)) : (optional || this.tokenChar(46), this.print(property));
        }, exports2.ParenthesizedExpression = function(node) {
          this.tokenChar(40);
          const exit = this.enterDelimited();
          this.print(node.expression), exit(), this.rightParens(node);
        }, exports2.PrivateName = function(node) {
          this.tokenChar(35), this.print(node.id);
        }, exports2.SequenceExpression = function(node) {
          this.printList(node.expressions);
        }, exports2.Super = function() {
          this.word("super");
        }, exports2.ThisExpression = function() {
          this.word("this");
        }, exports2.UnaryExpression = function(node) {
          const { operator } = node;
          "void" === operator || "delete" === operator || "typeof" === operator || "throw" === operator ? (this.word(operator), this.space()) : this.token(operator);
          this.print(node.argument);
        }, exports2.UpdateExpression = function(node) {
          node.prefix ? (this.token(node.operator), this.print(node.argument)) : (this.print(node.argument, true), this.token(node.operator));
        }, exports2.V8IntrinsicIdentifier = function(node) {
          this.tokenChar(37), this.word(node.name);
        }, exports2.YieldExpression = function(node) {
          this.word("yield", true), node.delegate ? (this.tokenChar(42), node.argument && (this.space(), this.print(node.argument))) : node.argument && (this.space(), this.printTerminatorless(node.argument));
        }, exports2._shouldPrintDecoratorsBeforeExport = function(node) {
          if ("boolean" == typeof this.format.decoratorsBeforeExport) return this.format.decoratorsBeforeExport;
          return "number" == typeof node.start && node.start === node.declaration.start;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js");
        const { isCallExpression, isLiteral, isMemberExpression, isNewExpression, isPattern } = _t;
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/flow.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.AnyTypeAnnotation = function() {
          this.word("any");
        }, exports2.ArrayTypeAnnotation = function(node) {
          this.print(node.elementType, true), this.tokenChar(91), this.tokenChar(93);
        }, exports2.BooleanLiteralTypeAnnotation = function(node) {
          this.word(node.value ? "true" : "false");
        }, exports2.BooleanTypeAnnotation = function() {
          this.word("boolean");
        }, exports2.DeclareClass = function(node, parent) {
          isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
          this.word("class"), this.space(), this._interfaceish(node);
        }, exports2.DeclareExportAllDeclaration = function(node) {
          this.word("declare"), this.space(), _modules.ExportAllDeclaration.call(this, node);
        }, exports2.DeclareExportDeclaration = function(node) {
          this.word("declare"), this.space(), this.word("export"), this.space(), node.default && (this.word("default"), this.space());
          FlowExportDeclaration.call(this, node);
        }, exports2.DeclareFunction = function(node, parent) {
          isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
          this.word("function"), this.space(), this.print(node.id), this.print(node.id.typeAnnotation.typeAnnotation), node.predicate && (this.space(), this.print(node.predicate));
          this.semicolon();
        }, exports2.DeclareInterface = function(node) {
          this.word("declare"), this.space(), this.InterfaceDeclaration(node);
        }, exports2.DeclareModule = function(node) {
          this.word("declare"), this.space(), this.word("module"), this.space(), this.print(node.id), this.space(), this.print(node.body);
        }, exports2.DeclareModuleExports = function(node) {
          this.word("declare"), this.space(), this.word("module"), this.tokenChar(46), this.word("exports"), this.print(node.typeAnnotation);
        }, exports2.DeclareOpaqueType = function(node, parent) {
          isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
          this.OpaqueType(node);
        }, exports2.DeclareTypeAlias = function(node) {
          this.word("declare"), this.space(), this.TypeAlias(node);
        }, exports2.DeclareVariable = function(node, parent) {
          isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
          this.word("var"), this.space(), this.print(node.id), this.print(node.id.typeAnnotation), this.semicolon();
        }, exports2.DeclaredPredicate = function(node) {
          this.tokenChar(37), this.word("checks"), this.tokenChar(40), this.print(node.value), this.tokenChar(41);
        }, exports2.EmptyTypeAnnotation = function() {
          this.word("empty");
        }, exports2.EnumBooleanBody = function(node) {
          const { explicitType } = node;
          enumExplicitType(this, "boolean", explicitType), enumBody(this, node);
        }, exports2.EnumBooleanMember = function(node) {
          enumInitializedMember(this, node);
        }, exports2.EnumDeclaration = function(node) {
          const { id, body } = node;
          this.word("enum"), this.space(), this.print(id), this.print(body);
        }, exports2.EnumDefaultedMember = function(node) {
          const { id } = node;
          this.print(id), this.tokenChar(44);
        }, exports2.EnumNumberBody = function(node) {
          const { explicitType } = node;
          enumExplicitType(this, "number", explicitType), enumBody(this, node);
        }, exports2.EnumNumberMember = function(node) {
          enumInitializedMember(this, node);
        }, exports2.EnumStringBody = function(node) {
          const { explicitType } = node;
          enumExplicitType(this, "string", explicitType), enumBody(this, node);
        }, exports2.EnumStringMember = function(node) {
          enumInitializedMember(this, node);
        }, exports2.EnumSymbolBody = function(node) {
          enumExplicitType(this, "symbol", true), enumBody(this, node);
        }, exports2.ExistsTypeAnnotation = function() {
          this.tokenChar(42);
        }, exports2.FunctionTypeAnnotation = function(node, parent) {
          this.print(node.typeParameters), this.tokenChar(40), node.this && (this.word("this"), this.tokenChar(58), this.space(), this.print(node.this.typeAnnotation), (node.params.length || node.rest) && (this.tokenChar(44), this.space()));
          this.printList(node.params), node.rest && (node.params.length && (this.tokenChar(44), this.space()), this.token("..."), this.print(node.rest));
          this.tokenChar(41);
          const type = null == parent ? void 0 : parent.type;
          null != type && ("ObjectTypeCallProperty" === type || "ObjectTypeInternalSlot" === type || "DeclareFunction" === type || "ObjectTypeProperty" === type && parent.method) ? this.tokenChar(58) : (this.space(), this.token("=>"));
          this.space(), this.print(node.returnType);
        }, exports2.FunctionTypeParam = function(node) {
          this.print(node.name), node.optional && this.tokenChar(63);
          node.name && (this.tokenChar(58), this.space());
          this.print(node.typeAnnotation);
        }, exports2.IndexedAccessType = function(node) {
          this.print(node.objectType, true), this.tokenChar(91), this.print(node.indexType), this.tokenChar(93);
        }, exports2.InferredPredicate = function() {
          this.tokenChar(37), this.word("checks");
        }, exports2.InterfaceDeclaration = function(node) {
          this.word("interface"), this.space(), this._interfaceish(node);
        }, exports2.GenericTypeAnnotation = exports2.ClassImplements = exports2.InterfaceExtends = function(node) {
          this.print(node.id), this.print(node.typeParameters, true);
        }, exports2.InterfaceTypeAnnotation = function(node) {
          var _node$extends2;
          this.word("interface"), null != (_node$extends2 = node.extends) && _node$extends2.length && (this.space(), this.word("extends"), this.space(), this.printList(node.extends));
          this.space(), this.print(node.body);
        }, exports2.IntersectionTypeAnnotation = function(node) {
          this.printJoin(node.types, void 0, void 0, andSeparator);
        }, exports2.MixedTypeAnnotation = function() {
          this.word("mixed");
        }, exports2.NullLiteralTypeAnnotation = function() {
          this.word("null");
        }, exports2.NullableTypeAnnotation = function(node) {
          this.tokenChar(63), this.print(node.typeAnnotation);
        }, Object.defineProperty(exports2, "NumberLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _types2.NumericLiteral;
        } }), exports2.NumberTypeAnnotation = function() {
          this.word("number");
        }, exports2.ObjectTypeAnnotation = function(node) {
          node.exact ? this.token("{|") : this.tokenChar(123);
          const props = [...node.properties, ...node.callProperties || [], ...node.indexers || [], ...node.internalSlots || []];
          props.length && (this.newline(), this.space(), this.printJoin(props, true, true, void 0, void 0, function(leading) {
            if (leading && !props[0]) return 1;
          }, () => {
            (1 !== props.length || node.inexact) && (this.tokenChar(44), this.space());
          }), this.space());
          node.inexact && (this.indent(), this.token("..."), props.length && this.newline(), this.dedent());
          node.exact ? this.token("|}") : this.tokenChar(125);
        }, exports2.ObjectTypeCallProperty = function(node) {
          node.static && (this.word("static"), this.space());
          this.print(node.value);
        }, exports2.ObjectTypeIndexer = function(node) {
          node.static && (this.word("static"), this.space());
          this._variance(node), this.tokenChar(91), node.id && (this.print(node.id), this.tokenChar(58), this.space());
          this.print(node.key), this.tokenChar(93), this.tokenChar(58), this.space(), this.print(node.value);
        }, exports2.ObjectTypeInternalSlot = function(node) {
          node.static && (this.word("static"), this.space());
          this.tokenChar(91), this.tokenChar(91), this.print(node.id), this.tokenChar(93), this.tokenChar(93), node.optional && this.tokenChar(63);
          node.method || (this.tokenChar(58), this.space());
          this.print(node.value);
        }, exports2.ObjectTypeProperty = function(node) {
          node.proto && (this.word("proto"), this.space());
          node.static && (this.word("static"), this.space());
          "get" !== node.kind && "set" !== node.kind || (this.word(node.kind), this.space());
          this._variance(node), this.print(node.key), node.optional && this.tokenChar(63);
          node.method || (this.tokenChar(58), this.space());
          this.print(node.value);
        }, exports2.ObjectTypeSpreadProperty = function(node) {
          this.token("..."), this.print(node.argument);
        }, exports2.OpaqueType = function(node) {
          this.word("opaque"), this.space(), this.word("type"), this.space(), this.print(node.id), this.print(node.typeParameters), node.supertype && (this.tokenChar(58), this.space(), this.print(node.supertype));
          node.impltype && (this.space(), this.tokenChar(61), this.space(), this.print(node.impltype));
          this.semicolon();
        }, exports2.OptionalIndexedAccessType = function(node) {
          this.print(node.objectType), node.optional && this.token("?.");
          this.tokenChar(91), this.print(node.indexType), this.tokenChar(93);
        }, exports2.QualifiedTypeIdentifier = function(node) {
          this.print(node.qualification), this.tokenChar(46), this.print(node.id);
        }, Object.defineProperty(exports2, "StringLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _types2.StringLiteral;
        } }), exports2.StringTypeAnnotation = function() {
          this.word("string");
        }, exports2.SymbolTypeAnnotation = function() {
          this.word("symbol");
        }, exports2.ThisTypeAnnotation = function() {
          this.word("this");
        }, exports2.TupleTypeAnnotation = function(node) {
          this.tokenChar(91), this.printList(node.types), this.tokenChar(93);
        }, exports2.TypeAlias = function(node) {
          this.word("type"), this.space(), this.print(node.id), this.print(node.typeParameters), this.space(), this.tokenChar(61), this.space(), this.print(node.right), this.semicolon();
        }, exports2.TypeAnnotation = function(node, parent) {
          this.tokenChar(58), this.space(), "ArrowFunctionExpression" === parent.type ? this.tokenContext |= _index.TokenContext.arrowFlowReturnType : node.optional && this.tokenChar(63);
          this.print(node.typeAnnotation);
        }, exports2.TypeCastExpression = function(node) {
          this.tokenChar(40), this.print(node.expression), this.print(node.typeAnnotation), this.tokenChar(41);
        }, exports2.TypeParameter = function(node) {
          this._variance(node), this.word(node.name), node.bound && this.print(node.bound);
          node.default && (this.space(), this.tokenChar(61), this.space(), this.print(node.default));
        }, exports2.TypeParameterDeclaration = exports2.TypeParameterInstantiation = function(node) {
          this.tokenChar(60), this.printList(node.params), this.tokenChar(62);
        }, exports2.TypeofTypeAnnotation = function(node) {
          this.word("typeof"), this.space(), this.print(node.argument);
        }, exports2.UnionTypeAnnotation = function(node) {
          this.printJoin(node.types, void 0, void 0, orSeparator);
        }, exports2.Variance = function(node) {
          "plus" === node.kind ? this.tokenChar(43) : this.tokenChar(45);
        }, exports2.VoidTypeAnnotation = function() {
          this.word("void");
        }, exports2._interfaceish = function(node) {
          var _node$extends;
          this.print(node.id), this.print(node.typeParameters), null != (_node$extends = node.extends) && _node$extends.length && (this.space(), this.word("extends"), this.space(), this.printList(node.extends));
          if ("DeclareClass" === node.type) {
            var _node$mixins, _node$implements;
            null != (_node$mixins = node.mixins) && _node$mixins.length && (this.space(), this.word("mixins"), this.space(), this.printList(node.mixins)), null != (_node$implements = node.implements) && _node$implements.length && (this.space(), this.word("implements"), this.space(), this.printList(node.implements));
          }
          this.space(), this.print(node.body);
        }, exports2._variance = function(node) {
          var _node$variance;
          const kind = null == (_node$variance = node.variance) ? void 0 : _node$variance.kind;
          null != kind && ("plus" === kind ? this.tokenChar(43) : "minus" === kind && this.tokenChar(45));
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _modules = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/modules.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js"), _types2 = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/types.js");
        const { isDeclareExportDeclaration, isStatement } = _t;
        function enumExplicitType(context, name, hasExplicitType) {
          hasExplicitType && (context.space(), context.word("of"), context.space(), context.word(name)), context.space();
        }
        function enumBody(context, node) {
          const { members } = node;
          context.token("{"), context.indent(), context.newline();
          for (const member of members) context.print(member), context.newline();
          node.hasUnknownMembers && (context.token("..."), context.newline()), context.dedent(), context.token("}");
        }
        function enumInitializedMember(context, node) {
          context.print(node.id), context.space(), context.token("="), context.space(), context.print(node.init), context.token(",");
        }
        function FlowExportDeclaration(node) {
          if (node.declaration) {
            const declar = node.declaration;
            this.print(declar), isStatement(declar) || this.semicolon();
          } else this.tokenChar(123), node.specifiers.length && (this.space(), this.printList(node.specifiers), this.space()), this.tokenChar(125), node.source && (this.space(), this.word("from"), this.space(), this.print(node.source)), this.semicolon();
        }
        function andSeparator(occurrenceCount) {
          this.space(), this.token("&", false, occurrenceCount), this.space();
        }
        function orSeparator(occurrenceCount) {
          this.space(), this.token("|", false, occurrenceCount), this.space();
        }
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var _templateLiterals = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/template-literals.js");
        Object.keys(_templateLiterals).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _templateLiterals[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _templateLiterals[key];
          } }));
        });
        var _expressions = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/expressions.js");
        Object.keys(_expressions).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _expressions[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _expressions[key];
          } }));
        });
        var _statements = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/statements.js");
        Object.keys(_statements).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _statements[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _statements[key];
          } }));
        });
        var _classes = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/classes.js");
        Object.keys(_classes).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _classes[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _classes[key];
          } }));
        });
        var _methods = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/methods.js");
        Object.keys(_methods).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _methods[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _methods[key];
          } }));
        });
        var _modules = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/modules.js");
        Object.keys(_modules).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _modules[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _modules[key];
          } }));
        });
        var _types = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/types.js");
        Object.keys(_types).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _types[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _types[key];
          } }));
        });
        var _flow = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/flow.js");
        Object.keys(_flow).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _flow[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _flow[key];
          } }));
        });
        var _base = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/base.js");
        Object.keys(_base).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _base[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _base[key];
          } }));
        });
        var _jsx = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/jsx.js");
        Object.keys(_jsx).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _jsx[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _jsx[key];
          } }));
        });
        var _typescript = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/typescript.js");
        Object.keys(_typescript).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _typescript[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _typescript[key];
          } }));
        });
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/jsx.js": (__unused_webpack_module, exports2) => {
        "use strict";
        function spaceSeparator() {
          this.space();
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.JSXAttribute = function(node) {
          this.print(node.name), node.value && (this.tokenChar(61), this.print(node.value));
        }, exports2.JSXClosingElement = function(node) {
          this.tokenChar(60), this.tokenChar(47), this.print(node.name), this.tokenChar(62);
        }, exports2.JSXClosingFragment = function() {
          this.token("</"), this.tokenChar(62);
        }, exports2.JSXElement = function(node) {
          const open = node.openingElement;
          if (this.print(open), open.selfClosing) return;
          this.indent();
          for (const child of node.children) this.print(child);
          this.dedent(), this.print(node.closingElement);
        }, exports2.JSXEmptyExpression = function() {
          this.printInnerComments();
        }, exports2.JSXExpressionContainer = function(node) {
          this.tokenChar(123), this.print(node.expression), this.rightBrace(node);
        }, exports2.JSXFragment = function(node) {
          this.print(node.openingFragment), this.indent();
          for (const child of node.children) this.print(child);
          this.dedent(), this.print(node.closingFragment);
        }, exports2.JSXIdentifier = function(node) {
          this.word(node.name);
        }, exports2.JSXMemberExpression = function(node) {
          this.print(node.object), this.tokenChar(46), this.print(node.property);
        }, exports2.JSXNamespacedName = function(node) {
          this.print(node.namespace), this.tokenChar(58), this.print(node.name);
        }, exports2.JSXOpeningElement = function(node) {
          this.tokenChar(60), this.print(node.name), this.print(node.typeParameters), node.attributes.length > 0 && (this.space(), this.printJoin(node.attributes, void 0, void 0, spaceSeparator));
          node.selfClosing && (this.space(), this.tokenChar(47));
          this.tokenChar(62);
        }, exports2.JSXOpeningFragment = function() {
          this.tokenChar(60), this.tokenChar(62);
        }, exports2.JSXSpreadAttribute = function(node) {
          this.tokenChar(123), this.token("..."), this.print(node.argument), this.rightBrace(node);
        }, exports2.JSXSpreadChild = function(node) {
          this.tokenChar(123), this.token("..."), this.print(node.expression), this.rightBrace(node);
        }, exports2.JSXText = function(node) {
          const raw2 = this.getPossibleRaw(node);
          void 0 !== raw2 ? this.token(raw2, true) : this.token(node.value, true);
        };
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/methods.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ArrowFunctionExpression = function(node, parent) {
          node.async && (this.word("async", true), this.space());
          this._shouldPrintArrowParamsParens(node) ? this._params(node, void 0, parent) : this.print(node.params[0], true);
          this._predicate(node, true), this.space(), this.printInnerComments(), this.token("=>"), this.space(), this.tokenContext |= _index.TokenContext.arrowBody, this.print(node.body);
        }, exports2.FunctionDeclaration = exports2.FunctionExpression = function(node, parent) {
          this._functionHead(node, parent), this.space(), this.print(node.body);
        }, exports2._functionHead = function(node, parent) {
          node.async && (this.word("async"), this.format.preserveFormat || (this._endsWithInnerRaw = false), this.space());
          this.word("function"), node.generator && (this.format.preserveFormat || (this._endsWithInnerRaw = false), this.tokenChar(42));
          this.space(), node.id && this.print(node.id);
          this._params(node, node.id, parent), "TSDeclareFunction" !== node.type && this._predicate(node);
        }, exports2._methodHead = function(node) {
          const kind = node.kind, key = node.key;
          "get" !== kind && "set" !== kind || (this.word(kind), this.space());
          node.async && (this.word("async", true), this.space());
          "method" !== kind && "init" !== kind || node.generator && this.tokenChar(42);
          node.computed ? (this.tokenChar(91), this.print(key), this.tokenChar(93)) : this.print(key);
          node.optional && this.tokenChar(63);
          this._params(node, node.computed && "StringLiteral" !== node.key.type ? void 0 : node.key, void 0);
        }, exports2._param = function(parameter) {
          this.printJoin(parameter.decorators), this.print(parameter), parameter.optional && this.tokenChar(63);
          this.print(parameter.typeAnnotation);
        }, exports2._parameters = function(parameters, endToken) {
          const exit = this.enterDelimited(), trailingComma = this.shouldPrintTrailingComma(endToken), paramLength = parameters.length;
          for (let i2 = 0; i2 < paramLength; i2++) this._param(parameters[i2]), (trailingComma || i2 < paramLength - 1) && (this.token(",", null, i2), this.space());
          this.token(endToken), exit();
        }, exports2._params = function(node, idNode, parentNode) {
          this.print(node.typeParameters);
          const nameInfo = _getFuncIdName.call(this, idNode, parentNode);
          nameInfo && this.sourceIdentifierName(nameInfo.name, nameInfo.pos);
          this.tokenChar(40), this._parameters(node.params, ")");
          const noLineTerminator = "ArrowFunctionExpression" === node.type;
          this.print(node.returnType, noLineTerminator), this._noLineTerminator = noLineTerminator;
        }, exports2._predicate = function(node, noLineTerminatorAfter) {
          node.predicate && (node.returnType || this.tokenChar(58), this.space(), this.print(node.predicate, noLineTerminatorAfter));
        }, exports2._shouldPrintArrowParamsParens = function(node) {
          var _firstParam$leadingCo, _firstParam$trailingC;
          if (1 !== node.params.length) return true;
          if (node.typeParameters || node.returnType || node.predicate) return true;
          const firstParam = node.params[0];
          if (!isIdentifier2(firstParam) || firstParam.typeAnnotation || firstParam.optional || null != (_firstParam$leadingCo = firstParam.leadingComments) && _firstParam$leadingCo.length || null != (_firstParam$trailingC = firstParam.trailingComments) && _firstParam$trailingC.length) return true;
          if (this.tokenMap) {
            if (null == node.loc) return true;
            if (null !== this.tokenMap.findMatching(node, "(")) return true;
            const arrowToken = this.tokenMap.findMatching(node, "=>");
            return null == (null == arrowToken ? void 0 : arrowToken.loc) || arrowToken.loc.start.line !== node.loc.start.line;
          }
          return !!this.format.retainLines;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js");
        const { isIdentifier: isIdentifier2 } = _t;
        function _getFuncIdName(idNode, parent) {
          let nameInfo, id = idNode;
          if (!id && parent) {
            const parentType = parent.type;
            "VariableDeclarator" === parentType ? id = parent.id : "AssignmentExpression" === parentType || "AssignmentPattern" === parentType ? id = parent.left : "ObjectProperty" === parentType || "ClassProperty" === parentType ? parent.computed && "StringLiteral" !== parent.key.type || (id = parent.key) : "ClassPrivateProperty" !== parentType && "ClassAccessorProperty" !== parentType || (id = parent.key);
          }
          if (id) {
            var _id$loc, _id$loc2;
            if ("Identifier" === id.type) nameInfo = { pos: null == (_id$loc = id.loc) ? void 0 : _id$loc.start, name: (null == (_id$loc2 = id.loc) ? void 0 : _id$loc2.identifierName) || id.name };
            else if ("PrivateName" === id.type) {
              var _id$loc3;
              nameInfo = { pos: null == (_id$loc3 = id.loc) ? void 0 : _id$loc3.start, name: "#" + id.id.name };
            } else if ("StringLiteral" === id.type) {
              var _id$loc4;
              nameInfo = { pos: null == (_id$loc4 = id.loc) ? void 0 : _id$loc4.start, name: id.value };
            }
            return nameInfo;
          }
        }
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/modules.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ExportAllDeclaration = function(node) {
          var _node$attributes, _node$assertions;
          this.word("export"), this.space(), "type" === node.exportKind && (this.word("type"), this.space());
          this.tokenChar(42), this.space(), this.word("from"), this.space(), null != (_node$attributes = node.attributes) && _node$attributes.length || null != (_node$assertions = node.assertions) && _node$assertions.length ? (this.print(node.source, true), this.space(), this._printAttributes(node, false)) : this.print(node.source);
          this.semicolon();
        }, exports2.ExportDefaultDeclaration = function(node) {
          maybePrintDecoratorsBeforeExport(this, node), this.word("export"), this.noIndentInnerCommentsHere(), this.space(), this.word("default"), this.space(), this.tokenContext |= _index.TokenContext.exportDefault;
          const declar = node.declaration;
          this.print(declar), isStatement(declar) || this.semicolon();
        }, exports2.ExportDefaultSpecifier = function(node) {
          this.print(node.exported);
        }, exports2.ExportNamedDeclaration = function(node) {
          if (maybePrintDecoratorsBeforeExport(this, node), this.word("export"), this.space(), node.declaration) {
            const declar = node.declaration;
            this.print(declar), isStatement(declar) || this.semicolon();
          } else {
            "type" === node.exportKind && (this.word("type"), this.space());
            const specifiers = node.specifiers.slice(0);
            let hasSpecial = false;
            for (; ; ) {
              const first = specifiers[0];
              if (!isExportDefaultSpecifier(first) && !isExportNamespaceSpecifier(first)) break;
              hasSpecial = true, this.print(specifiers.shift()), specifiers.length && (this.tokenChar(44), this.space());
            }
            let hasBrace = false;
            var _node$attributes2, _node$assertions2;
            if ((specifiers.length || !specifiers.length && !hasSpecial) && (hasBrace = true, this.tokenChar(123), specifiers.length && (this.space(), this.printList(specifiers, this.shouldPrintTrailingComma("}")), this.space()), this.tokenChar(125)), node.source) this.space(), this.word("from"), this.space(), null != (_node$attributes2 = node.attributes) && _node$attributes2.length || null != (_node$assertions2 = node.assertions) && _node$assertions2.length ? (this.print(node.source, true), this.space(), this._printAttributes(node, hasBrace)) : this.print(node.source);
            this.semicolon();
          }
        }, exports2.ExportNamespaceSpecifier = function(node) {
          this.tokenChar(42), this.space(), this.word("as"), this.space(), this.print(node.exported);
        }, exports2.ExportSpecifier = function(node) {
          "type" === node.exportKind && (this.word("type"), this.space());
          this.print(node.local), node.exported && node.local.name !== node.exported.name && (this.space(), this.word("as"), this.space(), this.print(node.exported));
        }, exports2.ImportAttribute = function(node) {
          this.print(node.key), this.tokenChar(58), this.space(), this.print(node.value);
        }, exports2.ImportDeclaration = function(node) {
          var _node$attributes3, _node$assertions3;
          this.word("import"), this.space();
          const isTypeKind = "type" === node.importKind || "typeof" === node.importKind;
          isTypeKind ? (this.noIndentInnerCommentsHere(), this.word(node.importKind), this.space()) : node.module ? (this.noIndentInnerCommentsHere(), this.word("module"), this.space()) : node.phase && (this.noIndentInnerCommentsHere(), this.word(node.phase), this.space());
          const specifiers = node.specifiers.slice(0), hasSpecifiers = !!specifiers.length;
          for (; hasSpecifiers; ) {
            const first = specifiers[0];
            if (!isImportDefaultSpecifier(first) && !isImportNamespaceSpecifier(first)) break;
            this.print(specifiers.shift()), specifiers.length && (this.tokenChar(44), this.space());
          }
          let hasBrace = false;
          specifiers.length ? (hasBrace = true, this.tokenChar(123), this.space(), this.printList(specifiers, this.shouldPrintTrailingComma("}")), this.space(), this.tokenChar(125)) : isTypeKind && !hasSpecifiers && (hasBrace = true, this.tokenChar(123), this.tokenChar(125));
          (hasSpecifiers || isTypeKind) && (this.space(), this.word("from"), this.space());
          null != (_node$attributes3 = node.attributes) && _node$attributes3.length || null != (_node$assertions3 = node.assertions) && _node$assertions3.length ? (this.print(node.source, true), this.space(), this._printAttributes(node, hasBrace)) : this.print(node.source);
          this.semicolon();
        }, exports2.ImportDefaultSpecifier = function(node) {
          this.print(node.local);
        }, exports2.ImportExpression = function(node) {
          this.word("import"), node.phase && (this.tokenChar(46), this.word(node.phase));
          this.tokenChar(40), this.print(node.source), null != node.options && (this.tokenChar(44), this.space(), this.print(node.options));
          this.tokenChar(41);
        }, exports2.ImportNamespaceSpecifier = function(node) {
          this.tokenChar(42), this.space(), this.word("as"), this.space(), this.print(node.local);
        }, exports2.ImportSpecifier = function(node) {
          "type" !== node.importKind && "typeof" !== node.importKind || (this.word(node.importKind), this.space());
          this.print(node.imported), node.local && node.local.name !== node.imported.name && (this.space(), this.word("as"), this.space(), this.print(node.local));
        }, exports2._printAttributes = function(node, hasPreviousBrace) {
          const { importAttributesKeyword } = this.format, { attributes, assertions } = node;
          !attributes || importAttributesKeyword || warningShown || (warningShown = true, console.warn('You are using import attributes, without specifying the desired output syntax.\nPlease specify the "importAttributesKeyword" generator option, whose value can be one of:\n - "with"        : `import { a } from "b" with { type: "json" };`\n - "assert"      : `import { a } from "b" assert { type: "json" };`\n - "with-legacy" : `import { a } from "b" with type: "json";`\n'));
          const useAssertKeyword = "assert" === importAttributesKeyword || !importAttributesKeyword && assertions;
          if (this.word(useAssertKeyword ? "assert" : "with"), this.space(), !useAssertKeyword && "with" !== importAttributesKeyword) return void this.printList(attributes || assertions);
          const occurrenceCount = hasPreviousBrace ? 1 : 0;
          this.token("{", null, occurrenceCount), this.space(), this.printList(attributes || assertions, this.shouldPrintTrailingComma("}")), this.space(), this.token("}", null, occurrenceCount);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js");
        const { isClassDeclaration, isExportDefaultSpecifier, isExportNamespaceSpecifier, isImportDefaultSpecifier, isImportNamespaceSpecifier, isStatement } = _t;
        let warningShown = false;
        function maybePrintDecoratorsBeforeExport(printer, node) {
          isClassDeclaration(node.declaration) && printer._shouldPrintDecoratorsBeforeExport(node) && printer.printJoin(node.declaration.decorators);
        }
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/statements.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.BreakStatement = function(node) {
          this.word("break"), printStatementAfterKeyword(this, node.label);
        }, exports2.CatchClause = function(node) {
          this.word("catch"), this.space(), node.param && (this.tokenChar(40), this.print(node.param), this.print(node.param.typeAnnotation), this.tokenChar(41), this.space());
          this.print(node.body);
        }, exports2.ContinueStatement = function(node) {
          this.word("continue"), printStatementAfterKeyword(this, node.label);
        }, exports2.DebuggerStatement = function() {
          this.word("debugger"), this.semicolon();
        }, exports2.DoWhileStatement = function(node) {
          this.word("do"), this.space(), this.print(node.body), this.space(), this.word("while"), this.space(), this.tokenChar(40), this.print(node.test), this.tokenChar(41), this.semicolon();
        }, exports2.ForOfStatement = exports2.ForInStatement = void 0, exports2.ForStatement = function(node) {
          this.word("for"), this.space(), this.tokenChar(40);
          {
            const exit = this.enterForStatementInit();
            this.tokenContext |= _index.TokenContext.forHead, this.print(node.init), exit();
          }
          this.tokenChar(59), node.test && (this.space(), this.print(node.test));
          this.token(";", false, 1), node.update && (this.space(), this.print(node.update));
          this.tokenChar(41), this.printBlock(node);
        }, exports2.IfStatement = function(node) {
          this.word("if"), this.space(), this.tokenChar(40), this.print(node.test), this.tokenChar(41), this.space();
          const needsBlock = node.alternate && isIfStatement(getLastStatement(node.consequent));
          needsBlock && (this.tokenChar(123), this.newline(), this.indent());
          this.printAndIndentOnComments(node.consequent), needsBlock && (this.dedent(), this.newline(), this.tokenChar(125));
          node.alternate && (this.endsWith(125) && this.space(), this.word("else"), this.space(), this.printAndIndentOnComments(node.alternate));
        }, exports2.LabeledStatement = function(node) {
          this.print(node.label), this.tokenChar(58), this.space(), this.print(node.body);
        }, exports2.ReturnStatement = function(node) {
          this.word("return"), printStatementAfterKeyword(this, node.argument);
        }, exports2.SwitchCase = function(node) {
          node.test ? (this.word("case"), this.space(), this.print(node.test), this.tokenChar(58)) : (this.word("default"), this.tokenChar(58));
          node.consequent.length && (this.newline(), this.printSequence(node.consequent, true));
        }, exports2.SwitchStatement = function(node) {
          this.word("switch"), this.space(), this.tokenChar(40), this.print(node.discriminant), this.tokenChar(41), this.space(), this.tokenChar(123), this.printSequence(node.cases, true, void 0, function(leading, cas) {
            if (!leading && node.cases[node.cases.length - 1] === cas) return -1;
          }), this.rightBrace(node);
        }, exports2.ThrowStatement = function(node) {
          this.word("throw"), printStatementAfterKeyword(this, node.argument);
        }, exports2.TryStatement = function(node) {
          this.word("try"), this.space(), this.print(node.block), this.space(), node.handlers ? this.print(node.handlers[0]) : this.print(node.handler);
          node.finalizer && (this.space(), this.word("finally"), this.space(), this.print(node.finalizer));
        }, exports2.VariableDeclaration = function(node, parent) {
          node.declare && (this.word("declare"), this.space());
          const { kind } = node;
          "await using" === kind ? (this.word("await"), this.space(), this.word("using", true)) : this.word(kind, "using" === kind);
          this.space();
          let hasInits = false;
          if (!isFor(parent)) for (const declar of node.declarations) declar.init && (hasInits = true);
          if (this.printList(node.declarations, void 0, void 0, node.declarations.length > 1, hasInits ? function(occurrenceCount) {
            this.token(",", false, occurrenceCount), this.newline();
          } : void 0), isFor(parent)) {
            if (isForStatement(parent)) {
              if (parent.init === node) return;
            } else if (parent.left === node) return;
          }
          this.semicolon();
        }, exports2.VariableDeclarator = function(node) {
          this.print(node.id), node.definite && this.tokenChar(33);
          this.print(node.id.typeAnnotation), node.init && (this.space(), this.tokenChar(61), this.space(), this.print(node.init));
        }, exports2.WhileStatement = function(node) {
          this.word("while"), this.space(), this.tokenChar(40), this.print(node.test), this.tokenChar(41), this.printBlock(node);
        }, exports2.WithStatement = function(node) {
          this.word("with"), this.space(), this.tokenChar(40), this.print(node.object), this.tokenChar(41), this.printBlock(node);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js");
        const { isFor, isForStatement, isIfStatement, isStatement } = _t;
        function getLastStatement(statement) {
          const { body } = statement;
          return false === isStatement(body) ? statement : getLastStatement(body);
        }
        function ForXStatement(node) {
          this.word("for"), this.space();
          const isForOf = "ForOfStatement" === node.type;
          isForOf && node.await && (this.word("await"), this.space()), this.noIndentInnerCommentsHere(), this.tokenChar(40);
          {
            const exit = isForOf ? null : this.enterForStatementInit();
            this.tokenContext |= isForOf ? _index.TokenContext.forOfHead : _index.TokenContext.forInHead, this.print(node.left), null == exit || exit();
          }
          this.space(), this.word(isForOf ? "of" : "in"), this.space(), this.print(node.right), this.tokenChar(41), this.printBlock(node);
        }
        exports2.ForInStatement = ForXStatement, exports2.ForOfStatement = ForXStatement;
        function printStatementAfterKeyword(printer, node) {
          node && (printer.space(), printer.printTerminatorless(node)), printer.semicolon();
        }
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/template-literals.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.TaggedTemplateExpression = function(node) {
          this.print(node.tag), this.print(node.typeParameters), this.print(node.quasi);
        }, exports2.TemplateElement = function() {
          throw new Error("TemplateElement printing is handled in TemplateLiteral");
        }, exports2.TemplateLiteral = function(node) {
          const quasis = node.quasis;
          let partRaw = "`";
          for (let i2 = 0; i2 < quasis.length; i2++) if (partRaw += quasis[i2].value.raw, i2 + 1 < quasis.length && (this.token(partRaw + "${", true), this.print(node.expressions[i2]), partRaw = "}", this.tokenMap)) {
            const token = this.tokenMap.findMatching(node, "}", i2);
            token && this._catchUpTo(token.loc.start);
          }
          this.token(partRaw + "`", true);
        };
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/types.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ArgumentPlaceholder = function() {
          this.tokenChar(63);
        }, exports2.ArrayPattern = exports2.ArrayExpression = function(node) {
          const elems = node.elements, len = elems.length;
          this.tokenChar(91);
          const exit = this.enterDelimited();
          for (let i2 = 0; i2 < elems.length; i2++) {
            const elem = elems[i2];
            elem ? (i2 > 0 && this.space(), this.print(elem), (i2 < len - 1 || this.shouldPrintTrailingComma("]")) && this.token(",", false, i2)) : this.token(",", false, i2);
          }
          exit(), this.tokenChar(93);
        }, exports2.BigIntLiteral = function(node) {
          const raw2 = this.getPossibleRaw(node);
          if (!this.format.minified && void 0 !== raw2) return void this.word(raw2);
          this.word(node.value + "n");
        }, exports2.BooleanLiteral = function(node) {
          this.word(node.value ? "true" : "false");
        }, exports2.DecimalLiteral = function(node) {
          const raw2 = this.getPossibleRaw(node);
          if (!this.format.minified && void 0 !== raw2) return void this.word(raw2);
          this.word(node.value + "m");
        }, exports2.Identifier = function(node) {
          var _node$loc;
          this.sourceIdentifierName((null == (_node$loc = node.loc) ? void 0 : _node$loc.identifierName) || node.name), this.word(this.tokenMap ? this._getRawIdentifier(node) : node.name);
        }, exports2.NullLiteral = function() {
          this.word("null");
        }, exports2.NumericLiteral = function(node) {
          const raw2 = this.getPossibleRaw(node), opts = this.format.jsescOption, value2 = node.value, str = value2 + "";
          opts.numbers ? this.number(_jsesc(value2, opts), value2) : null == raw2 ? this.number(str, value2) : this.format.minified ? this.number(raw2.length < str.length ? raw2 : str, value2) : this.number(raw2, value2);
        }, exports2.ObjectPattern = exports2.ObjectExpression = function(node) {
          const props = node.properties;
          if (this.tokenChar(123), props.length) {
            const exit = this.enterDelimited();
            this.space(), this.printList(props, this.shouldPrintTrailingComma("}"), true, true), this.space(), exit();
          }
          this.sourceWithOffset("end", node.loc, -1), this.tokenChar(125);
        }, exports2.ObjectMethod = function(node) {
          this.printJoin(node.decorators), this._methodHead(node), this.space(), this.print(node.body);
        }, exports2.ObjectProperty = function(node) {
          if (this.printJoin(node.decorators), node.computed) this.tokenChar(91), this.print(node.key), this.tokenChar(93);
          else {
            if (isAssignmentPattern(node.value) && isIdentifier2(node.key) && node.key.name === node.value.left.name) return void this.print(node.value);
            if (this.print(node.key), node.shorthand && isIdentifier2(node.key) && isIdentifier2(node.value) && node.key.name === node.value.name) return;
          }
          this.tokenChar(58), this.space(), this.print(node.value);
        }, exports2.PipelineBareFunction = function(node) {
          this.print(node.callee);
        }, exports2.PipelinePrimaryTopicReference = function() {
          this.tokenChar(35);
        }, exports2.PipelineTopicExpression = function(node) {
          this.print(node.expression);
        }, exports2.RecordExpression = function(node) {
          const props = node.properties;
          let startToken, endToken;
          if ("bar" === this.format.recordAndTupleSyntaxType) startToken = "{|", endToken = "|}";
          else {
            if ("hash" !== this.format.recordAndTupleSyntaxType && null != this.format.recordAndTupleSyntaxType) throw new Error(`The "recordAndTupleSyntaxType" generator option must be "bar" or "hash" (${JSON.stringify(this.format.recordAndTupleSyntaxType)} received).`);
            startToken = "#{", endToken = "}";
          }
          this.token(startToken), props.length && (this.space(), this.printList(props, this.shouldPrintTrailingComma(endToken), true, true), this.space());
          this.token(endToken);
        }, exports2.RegExpLiteral = function(node) {
          this.word(`/${node.pattern}/${node.flags}`);
        }, exports2.SpreadElement = exports2.RestElement = function(node) {
          this.token("..."), this.print(node.argument);
        }, exports2.StringLiteral = function(node) {
          const raw2 = this.getPossibleRaw(node);
          if (!this.format.minified && void 0 !== raw2) return void this.token(raw2);
          const val = _jsesc(node.value, this.format.jsescOption);
          this.token(val);
        }, exports2.TopicReference = function() {
          const { topicToken } = this.format;
          if (!validTopicTokenSet.has(topicToken)) {
            const givenTopicTokenJSON = JSON.stringify(topicToken), validTopics = Array.from(validTopicTokenSet, (v) => JSON.stringify(v));
            throw new Error(`The "topicToken" generator option must be one of ${validTopics.join(", ")} (${givenTopicTokenJSON} received instead).`);
          }
          this.token(topicToken);
        }, exports2.TupleExpression = function(node) {
          const elems = node.elements, len = elems.length;
          let startToken, endToken;
          if ("bar" === this.format.recordAndTupleSyntaxType) startToken = "[|", endToken = "|]";
          else {
            if ("hash" !== this.format.recordAndTupleSyntaxType) throw new Error(`${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`);
            startToken = "#[", endToken = "]";
          }
          this.token(startToken);
          for (let i2 = 0; i2 < elems.length; i2++) {
            const elem = elems[i2];
            elem && (i2 > 0 && this.space(), this.print(elem), (i2 < len - 1 || this.shouldPrintTrailingComma(endToken)) && this.token(",", false, i2));
          }
          this.token(endToken);
        }, exports2._getRawIdentifier = function(node) {
          if (node === lastRawIdentNode) return lastRawIdentResult;
          lastRawIdentNode = node;
          const { name } = node, token = this.tokenMap.find(node, (tok) => tok.value === name);
          if (token) return lastRawIdentResult = this._originalCode.slice(token.start, token.end), lastRawIdentResult;
          return lastRawIdentResult = node.name;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _jsesc = __webpack_require__2("./node_modules/.pnpm/jsesc@3.1.0/node_modules/jsesc/jsesc.js");
        const { isAssignmentPattern, isIdentifier: isIdentifier2 } = _t;
        let lastRawIdentNode = null, lastRawIdentResult = "";
        const validTopicTokenSet = /* @__PURE__ */ new Set(["^^", "@@", "^", "%", "#"]);
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/typescript.js": (__unused_webpack_module, exports2) => {
        "use strict";
        function maybePrintTrailingCommaOrSemicolon(printer, node) {
          printer.tokenMap && node.start && node.end ? printer.tokenMap.endMatches(node, ",") ? printer.token(",") : printer.tokenMap.endMatches(node, ";") && printer.semicolon() : printer.semicolon();
        }
        function tsPrintUnionOrIntersectionType(printer, node, sep) {
          var _printer$tokenMap;
          let hasLeadingToken = 0;
          null != (_printer$tokenMap = printer.tokenMap) && _printer$tokenMap.startMatches(node, sep) && (hasLeadingToken = 1, printer.token(sep)), printer.printJoin(node.types, void 0, void 0, function(i2) {
            this.space(), this.token(sep, null, i2 + hasLeadingToken), this.space();
          });
        }
        function tokenIfPlusMinus(self, tok) {
          true !== tok && self.token(tok);
        }
        function printBraced(printer, node, cb) {
          printer.token("{");
          const exit = printer.enterDelimited();
          cb(), exit(), printer.rightBrace(node);
        }
        function printModifiersList(printer, node, modifiers) {
          var _printer$tokenMap2;
          const modifiersSet = /* @__PURE__ */ new Set();
          for (const modifier of modifiers) modifier && modifiersSet.add(modifier);
          null == (_printer$tokenMap2 = printer.tokenMap) || _printer$tokenMap2.find(node, (tok) => {
            if (modifiersSet.has(tok.value)) return printer.token(tok.value), printer.space(), modifiersSet.delete(tok.value), 0 === modifiersSet.size;
          });
          for (const modifier of modifiersSet) printer.word(modifier), printer.space();
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.TSAnyKeyword = function() {
          this.word("any");
        }, exports2.TSArrayType = function(node) {
          this.print(node.elementType, true), this.tokenChar(91), this.tokenChar(93);
        }, exports2.TSSatisfiesExpression = exports2.TSAsExpression = function(node) {
          const { type, expression, typeAnnotation } = node;
          this.print(expression, true), this.space(), this.word("TSAsExpression" === type ? "as" : "satisfies"), this.space(), this.print(typeAnnotation);
        }, exports2.TSBigIntKeyword = function() {
          this.word("bigint");
        }, exports2.TSBooleanKeyword = function() {
          this.word("boolean");
        }, exports2.TSCallSignatureDeclaration = function(node) {
          this.tsPrintSignatureDeclarationBase(node), maybePrintTrailingCommaOrSemicolon(this, node);
        }, exports2.TSInterfaceHeritage = exports2.TSExpressionWithTypeArguments = exports2.TSClassImplements = function(node) {
          this.print(node.expression), this.print(node.typeParameters);
        }, exports2.TSConditionalType = function(node) {
          this.print(node.checkType), this.space(), this.word("extends"), this.space(), this.print(node.extendsType), this.space(), this.tokenChar(63), this.space(), this.print(node.trueType), this.space(), this.tokenChar(58), this.space(), this.print(node.falseType);
        }, exports2.TSConstructSignatureDeclaration = function(node) {
          this.word("new"), this.space(), this.tsPrintSignatureDeclarationBase(node), maybePrintTrailingCommaOrSemicolon(this, node);
        }, exports2.TSConstructorType = function(node) {
          node.abstract && (this.word("abstract"), this.space());
          this.word("new"), this.space(), this.tsPrintFunctionOrConstructorType(node);
        }, exports2.TSDeclareFunction = function(node, parent) {
          node.declare && (this.word("declare"), this.space());
          this._functionHead(node, parent), this.semicolon();
        }, exports2.TSDeclareMethod = function(node) {
          this._classMethodHead(node), this.semicolon();
        }, exports2.TSEnumDeclaration = function(node) {
          const { declare, const: isConst, id, members } = node;
          declare && (this.word("declare"), this.space());
          isConst && (this.word("const"), this.space());
          this.word("enum"), this.space(), this.print(id), this.space(), printBraced(this, node, () => {
            var _this$shouldPrintTrai;
            return this.printList(members, null == (_this$shouldPrintTrai = this.shouldPrintTrailingComma("}")) || _this$shouldPrintTrai, true, true);
          });
        }, exports2.TSEnumMember = function(node) {
          const { id, initializer } = node;
          this.print(id), initializer && (this.space(), this.tokenChar(61), this.space(), this.print(initializer));
        }, exports2.TSExportAssignment = function(node) {
          this.word("export"), this.space(), this.tokenChar(61), this.space(), this.print(node.expression), this.semicolon();
        }, exports2.TSExternalModuleReference = function(node) {
          this.token("require("), this.print(node.expression), this.tokenChar(41);
        }, exports2.TSFunctionType = function(node) {
          this.tsPrintFunctionOrConstructorType(node);
        }, exports2.TSImportEqualsDeclaration = function(node) {
          const { isExport, id, moduleReference } = node;
          isExport && (this.word("export"), this.space());
          this.word("import"), this.space(), this.print(id), this.space(), this.tokenChar(61), this.space(), this.print(moduleReference), this.semicolon();
        }, exports2.TSImportType = function(node) {
          const { argument, qualifier, typeParameters } = node;
          this.word("import"), this.tokenChar(40), this.print(argument), this.tokenChar(41), qualifier && (this.tokenChar(46), this.print(qualifier));
          typeParameters && this.print(typeParameters);
        }, exports2.TSIndexSignature = function(node) {
          const { readonly, static: isStatic } = node;
          isStatic && (this.word("static"), this.space());
          readonly && (this.word("readonly"), this.space());
          this.tokenChar(91), this._parameters(node.parameters, "]"), this.print(node.typeAnnotation), maybePrintTrailingCommaOrSemicolon(this, node);
        }, exports2.TSIndexedAccessType = function(node) {
          this.print(node.objectType, true), this.tokenChar(91), this.print(node.indexType), this.tokenChar(93);
        }, exports2.TSInferType = function(node) {
          this.word("infer"), this.print(node.typeParameter);
        }, exports2.TSInstantiationExpression = function(node) {
          this.print(node.expression), this.print(node.typeParameters);
        }, exports2.TSInterfaceBody = function(node) {
          printBraced(this, node, () => this.printJoin(node.body, true, true));
        }, exports2.TSInterfaceDeclaration = function(node) {
          const { declare, id, typeParameters, extends: extendz, body } = node;
          declare && (this.word("declare"), this.space());
          this.word("interface"), this.space(), this.print(id), this.print(typeParameters), null != extendz && extendz.length && (this.space(), this.word("extends"), this.space(), this.printList(extendz));
          this.space(), this.print(body);
        }, exports2.TSIntersectionType = function(node) {
          tsPrintUnionOrIntersectionType(this, node, "&");
        }, exports2.TSIntrinsicKeyword = function() {
          this.word("intrinsic");
        }, exports2.TSLiteralType = function(node) {
          this.print(node.literal);
        }, exports2.TSMappedType = function(node) {
          const { nameType, optional, readonly, typeAnnotation } = node;
          this.tokenChar(123);
          const exit = this.enterDelimited();
          this.space(), readonly && (tokenIfPlusMinus(this, readonly), this.word("readonly"), this.space());
          this.tokenChar(91), this.word(node.typeParameter.name), this.space(), this.word("in"), this.space(), this.print(node.typeParameter.constraint), nameType && (this.space(), this.word("as"), this.space(), this.print(nameType));
          this.tokenChar(93), optional && (tokenIfPlusMinus(this, optional), this.tokenChar(63));
          typeAnnotation && (this.tokenChar(58), this.space(), this.print(typeAnnotation));
          this.space(), exit(), this.tokenChar(125);
        }, exports2.TSMethodSignature = function(node) {
          const { kind } = node;
          "set" !== kind && "get" !== kind || (this.word(kind), this.space());
          this.tsPrintPropertyOrMethodName(node), this.tsPrintSignatureDeclarationBase(node), maybePrintTrailingCommaOrSemicolon(this, node);
        }, exports2.TSModuleBlock = function(node) {
          printBraced(this, node, () => this.printSequence(node.body, true));
        }, exports2.TSModuleDeclaration = function(node) {
          const { declare, id, kind } = node;
          declare && (this.word("declare"), this.space());
          {
            if (node.global || (this.word(null != kind ? kind : "Identifier" === id.type ? "namespace" : "module"), this.space()), this.print(id), !node.body) return void this.semicolon();
            let body = node.body;
            for (; "TSModuleDeclaration" === body.type; ) this.tokenChar(46), this.print(body.id), body = body.body;
            this.space(), this.print(body);
          }
        }, exports2.TSNamedTupleMember = function(node) {
          this.print(node.label), node.optional && this.tokenChar(63);
          this.tokenChar(58), this.space(), this.print(node.elementType);
        }, exports2.TSNamespaceExportDeclaration = function(node) {
          this.word("export"), this.space(), this.word("as"), this.space(), this.word("namespace"), this.space(), this.print(node.id), this.semicolon();
        }, exports2.TSNeverKeyword = function() {
          this.word("never");
        }, exports2.TSNonNullExpression = function(node) {
          this.print(node.expression), this.tokenChar(33);
        }, exports2.TSNullKeyword = function() {
          this.word("null");
        }, exports2.TSNumberKeyword = function() {
          this.word("number");
        }, exports2.TSObjectKeyword = function() {
          this.word("object");
        }, exports2.TSOptionalType = function(node) {
          this.print(node.typeAnnotation), this.tokenChar(63);
        }, exports2.TSParameterProperty = function(node) {
          node.accessibility && (this.word(node.accessibility), this.space());
          node.readonly && (this.word("readonly"), this.space());
          this._param(node.parameter);
        }, exports2.TSParenthesizedType = function(node) {
          this.tokenChar(40), this.print(node.typeAnnotation), this.tokenChar(41);
        }, exports2.TSPropertySignature = function(node) {
          const { readonly } = node;
          readonly && (this.word("readonly"), this.space());
          this.tsPrintPropertyOrMethodName(node), this.print(node.typeAnnotation), maybePrintTrailingCommaOrSemicolon(this, node);
        }, exports2.TSQualifiedName = function(node) {
          this.print(node.left), this.tokenChar(46), this.print(node.right);
        }, exports2.TSRestType = function(node) {
          this.token("..."), this.print(node.typeAnnotation);
        }, exports2.TSStringKeyword = function() {
          this.word("string");
        }, exports2.TSSymbolKeyword = function() {
          this.word("symbol");
        }, exports2.TSThisType = function() {
          this.word("this");
        }, exports2.TSTupleType = function(node) {
          this.tokenChar(91), this.printList(node.elementTypes, this.shouldPrintTrailingComma("]")), this.tokenChar(93);
        }, exports2.TSTypeAliasDeclaration = function(node) {
          const { declare, id, typeParameters, typeAnnotation } = node;
          declare && (this.word("declare"), this.space());
          this.word("type"), this.space(), this.print(id), this.print(typeParameters), this.space(), this.tokenChar(61), this.space(), this.print(typeAnnotation), this.semicolon();
        }, exports2.TSTypeAnnotation = function(node, parent) {
          this.token("TSFunctionType" !== parent.type && "TSConstructorType" !== parent.type || parent.typeAnnotation !== node ? ":" : "=>"), this.space(), node.optional && this.tokenChar(63);
          this.print(node.typeAnnotation);
        }, exports2.TSTypeAssertion = function(node) {
          const { typeAnnotation, expression } = node;
          this.tokenChar(60), this.print(typeAnnotation), this.tokenChar(62), this.space(), this.print(expression);
        }, exports2.TSTypeLiteral = function(node) {
          printBraced(this, node, () => this.printJoin(node.members, true, true));
        }, exports2.TSTypeOperator = function(node) {
          this.word(node.operator), this.space(), this.print(node.typeAnnotation);
        }, exports2.TSTypeParameter = function(node) {
          node.in && (this.word("in"), this.space());
          node.out && (this.word("out"), this.space());
          this.word(node.name), node.constraint && (this.space(), this.word("extends"), this.space(), this.print(node.constraint));
          node.default && (this.space(), this.tokenChar(61), this.space(), this.print(node.default));
        }, exports2.TSTypeParameterDeclaration = exports2.TSTypeParameterInstantiation = function(node, parent) {
          this.tokenChar(60);
          let printTrailingSeparator = "ArrowFunctionExpression" === parent.type && 1 === node.params.length;
          this.tokenMap && null != node.start && null != node.end && (printTrailingSeparator && (printTrailingSeparator = !!this.tokenMap.find(node, (t2) => this.tokenMap.matchesOriginal(t2, ","))), printTrailingSeparator || (printTrailingSeparator = this.shouldPrintTrailingComma(">")));
          this.printList(node.params, printTrailingSeparator), this.tokenChar(62);
        }, exports2.TSTypePredicate = function(node) {
          node.asserts && (this.word("asserts"), this.space());
          this.print(node.parameterName), node.typeAnnotation && (this.space(), this.word("is"), this.space(), this.print(node.typeAnnotation.typeAnnotation));
        }, exports2.TSTypeQuery = function(node) {
          this.word("typeof"), this.space(), this.print(node.exprName), node.typeParameters && this.print(node.typeParameters);
        }, exports2.TSTypeReference = function(node) {
          this.print(node.typeName, !!node.typeParameters), this.print(node.typeParameters);
        }, exports2.TSUndefinedKeyword = function() {
          this.word("undefined");
        }, exports2.TSUnionType = function(node) {
          tsPrintUnionOrIntersectionType(this, node, "|");
        }, exports2.TSUnknownKeyword = function() {
          this.word("unknown");
        }, exports2.TSVoidKeyword = function() {
          this.word("void");
        }, exports2.tsPrintClassMemberModifiers = function(node) {
          const isField = "ClassAccessorProperty" === node.type || "ClassProperty" === node.type;
          printModifiersList(this, node, [isField && node.declare && "declare", node.accessibility]), node.static && (this.word("static"), this.space());
          printModifiersList(this, node, [node.override && "override", node.abstract && "abstract", isField && node.readonly && "readonly"]);
        }, exports2.tsPrintFunctionOrConstructorType = function(node) {
          const { typeParameters } = node, parameters = node.parameters;
          this.print(typeParameters), this.tokenChar(40), this._parameters(parameters, ")"), this.space();
          const returnType = node.typeAnnotation;
          this.print(returnType);
        }, exports2.tsPrintPropertyOrMethodName = function(node) {
          node.computed && this.tokenChar(91);
          this.print(node.key), node.computed && this.tokenChar(93);
          node.optional && this.tokenChar(63);
        }, exports2.tsPrintSignatureDeclarationBase = function(node) {
          const { typeParameters } = node, parameters = node.parameters;
          this.print(typeParameters), this.tokenChar(40), this._parameters(parameters, ")");
          const returnType = node.typeAnnotation;
          this.print(returnType);
        };
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(ast, opts = {}, code) {
          const format2 = normalizeOptions2(code, opts, ast), map = opts.sourceMaps ? new _sourceMap.default(opts, code) : null;
          return new _printer.default(format2, map, ast.tokens, "string" == typeof code ? code : null).generate(ast);
        };
        var _sourceMap = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/source-map.js"), _printer = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/printer.js");
        function normalizeOptions2(code, opts, ast) {
          if (opts.experimental_preserveFormat) {
            if ("string" != typeof code) throw new Error("`experimental_preserveFormat` requires the original `code` to be passed to @babel/generator as a string");
            if (!opts.retainLines) throw new Error("`experimental_preserveFormat` requires `retainLines` to be set to `true`");
            if (opts.compact && "auto" !== opts.compact) throw new Error("`experimental_preserveFormat` is not compatible with the `compact` option");
            if (opts.minified) throw new Error("`experimental_preserveFormat` is not compatible with the `minified` option");
            if (opts.jsescOption) throw new Error("`experimental_preserveFormat` is not compatible with the `jsescOption` option");
            if (!Array.isArray(ast.tokens)) throw new Error("`experimental_preserveFormat` requires the AST to have attatched the token of the input code. Make sure to enable the `tokens: true` parser option.");
          }
          const format2 = { auxiliaryCommentBefore: opts.auxiliaryCommentBefore, auxiliaryCommentAfter: opts.auxiliaryCommentAfter, shouldPrintComment: opts.shouldPrintComment, preserveFormat: opts.experimental_preserveFormat, retainLines: opts.retainLines, retainFunctionParens: opts.retainFunctionParens, comments: null == opts.comments || opts.comments, compact: opts.compact, minified: opts.minified, concise: opts.concise, indent: { adjustMultilineComment: true, style: "  " }, jsescOption: Object.assign({ quotes: "double", wrap: true, minimal: false }, opts.jsescOption), topicToken: opts.topicToken, importAttributesKeyword: opts.importAttributesKeyword };
          var _opts$recordAndTupleS;
          format2.decoratorsBeforeExport = opts.decoratorsBeforeExport, format2.jsescOption.json = opts.jsonCompatibleStrings, format2.recordAndTupleSyntaxType = null != (_opts$recordAndTupleS = opts.recordAndTupleSyntaxType) ? _opts$recordAndTupleS : "hash", format2.minified ? (format2.compact = true, format2.shouldPrintComment = format2.shouldPrintComment || (() => format2.comments)) : format2.shouldPrintComment = format2.shouldPrintComment || ((value2) => format2.comments || value2.includes("@license") || value2.includes("@preserve")), "auto" === format2.compact && (format2.compact = "string" == typeof code && code.length > 5e5, format2.compact && console.error(`[BABEL] Note: The code generator has deoptimised the styling of ${opts.filename} as it exceeds the max of 500KB.`)), (format2.compact || format2.preserveFormat) && (format2.indent.adjustMultilineComment = false);
          const { auxiliaryCommentBefore, auxiliaryCommentAfter, shouldPrintComment } = format2;
          return auxiliaryCommentBefore && !shouldPrintComment(auxiliaryCommentBefore) && (format2.auxiliaryCommentBefore = void 0), auxiliaryCommentAfter && !shouldPrintComment(auxiliaryCommentAfter) && (format2.auxiliaryCommentAfter = void 0), format2;
        }
        exports2.CodeGenerator = class {
          constructor(ast, opts = {}, code) {
            this._ast = void 0, this._format = void 0, this._map = void 0, this._ast = ast, this._format = normalizeOptions2(code, opts, ast), this._map = opts.sourceMaps ? new _sourceMap.default(opts, code) : null;
          }
          generate() {
            return new _printer.default(this._format, this._map).generate(this._ast);
          }
        };
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.TokenContext = void 0, exports2.isLastChild = function(parent, child) {
          const visitorKeys = VISITOR_KEYS[parent.type];
          for (let i2 = visitorKeys.length - 1; i2 >= 0; i2--) {
            const val = parent[visitorKeys[i2]];
            if (val === child) return true;
            if (Array.isArray(val)) {
              let j2 = val.length - 1;
              for (; j2 >= 0 && null === val[j2]; ) j2--;
              return j2 >= 0 && val[j2] === child;
            }
            if (val) return false;
          }
          return false;
        }, exports2.needsParens = function(node, parent, tokenContext, inForInit, getRawIdentifier) {
          var _expandedParens$get;
          if (!parent) return false;
          if (isNewExpression(parent) && parent.callee === node && isOrHasCallExpression(node)) return true;
          if (isDecorator(parent)) return !(isDecoratorMemberExpression(node) || isCallExpression(node) && isDecoratorMemberExpression(node.callee) || isParenthesizedExpression(node));
          return null == (_expandedParens$get = expandedParens.get(node.type)) ? void 0 : _expandedParens$get(node, parent, tokenContext, inForInit, getRawIdentifier);
        }, exports2.needsWhitespace = needsWhitespace, exports2.needsWhitespaceAfter = function(node, parent) {
          return needsWhitespace(node, parent, 2);
        }, exports2.needsWhitespaceBefore = function(node, parent) {
          return needsWhitespace(node, parent, 1);
        };
        var whitespace = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/whitespace.js"), parens = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/parentheses.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { FLIPPED_ALIAS_KEYS, VISITOR_KEYS, isCallExpression, isDecorator, isExpressionStatement, isMemberExpression, isNewExpression, isParenthesizedExpression } = _t;
        exports2.TokenContext = { expressionStatement: 1, arrowBody: 2, exportDefault: 4, forHead: 8, forInHead: 16, forOfHead: 32, arrowFlowReturnType: 64 };
        function expandAliases(obj) {
          const map = /* @__PURE__ */ new Map();
          function add(type, func) {
            const fn = map.get(type);
            map.set(type, fn ? function(node, parent, stack, inForInit, getRawIdentifier) {
              var _fn;
              return null != (_fn = fn(node, parent, stack, inForInit, getRawIdentifier)) ? _fn : func(node, parent, stack, inForInit, getRawIdentifier);
            } : func);
          }
          for (const type of Object.keys(obj)) {
            const aliases = FLIPPED_ALIAS_KEYS[type];
            if (aliases) for (const alias of aliases) add(alias, obj[type]);
            else add(type, obj[type]);
          }
          return map;
        }
        const expandedParens = expandAliases(parens), expandedWhitespaceNodes = expandAliases(whitespace.nodes);
        function isOrHasCallExpression(node) {
          return !!isCallExpression(node) || isMemberExpression(node) && isOrHasCallExpression(node.object);
        }
        function needsWhitespace(node, parent, type) {
          var _expandedWhitespaceNo;
          if (!node) return false;
          isExpressionStatement(node) && (node = node.expression);
          const flag = null == (_expandedWhitespaceNo = expandedWhitespaceNodes.get(node.type)) ? void 0 : _expandedWhitespaceNo(node, parent);
          return "number" == typeof flag && !!(flag & type);
        }
        function isDecoratorMemberExpression(node) {
          switch (node.type) {
            case "Identifier":
              return true;
            case "MemberExpression":
              return !node.computed && "Identifier" === node.property.type && isDecoratorMemberExpression(node.object);
            default:
              return false;
          }
        }
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/parentheses.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.AssignmentExpression = function(node, parent, tokenContext) {
          return !(!needsParenBeforeExpressionBrace(tokenContext) || !isObjectPattern(node.left)) || ConditionalExpression(node, parent);
        }, exports2.Binary = Binary, exports2.BinaryExpression = function(node, parent, tokenContext, inForStatementInit) {
          return "in" === node.operator && inForStatementInit;
        }, exports2.ClassExpression = function(node, parent, tokenContext) {
          return Boolean(tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.exportDefault));
        }, exports2.ArrowFunctionExpression = exports2.ConditionalExpression = ConditionalExpression, exports2.DoExpression = function(node, parent, tokenContext) {
          return !node.async && Boolean(tokenContext & _index.TokenContext.expressionStatement);
        }, exports2.FunctionExpression = function(node, parent, tokenContext) {
          return Boolean(tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.exportDefault));
        }, exports2.FunctionTypeAnnotation = function(node, parent, tokenContext) {
          const parentType = parent.type;
          return "UnionTypeAnnotation" === parentType || "IntersectionTypeAnnotation" === parentType || "ArrayTypeAnnotation" === parentType || Boolean(tokenContext & _index.TokenContext.arrowFlowReturnType);
        }, exports2.Identifier = function(node, parent, tokenContext, _inForInit, getRawIdentifier) {
          var _node$extra;
          const parentType = parent.type;
          if (null != (_node$extra = node.extra) && _node$extra.parenthesized && "AssignmentExpression" === parentType && parent.left === node) {
            const rightType = parent.right.type;
            if (("FunctionExpression" === rightType || "ClassExpression" === rightType) && null == parent.right.id) return true;
          }
          if (getRawIdentifier && getRawIdentifier(node) !== node.name) return false;
          if ("let" === node.name) {
            return !!((isMemberExpression(parent, { object: node, computed: true }) || isOptionalMemberExpression(parent, { object: node, computed: true, optional: false })) && tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.forHead | _index.TokenContext.forInHead)) || Boolean(tokenContext & _index.TokenContext.forOfHead);
          }
          return "async" === node.name && isForOfStatement(parent, { left: node, await: false });
        }, exports2.LogicalExpression = function(node, parent) {
          const parentType = parent.type;
          if (isTSTypeExpression(parentType)) return true;
          if ("LogicalExpression" !== parentType) return false;
          switch (node.operator) {
            case "||":
              return "??" === parent.operator || "&&" === parent.operator;
            case "&&":
              return "??" === parent.operator;
            case "??":
              return "??" !== parent.operator;
          }
        }, exports2.NullableTypeAnnotation = function(node, parent) {
          return isArrayTypeAnnotation(parent);
        }, exports2.ObjectExpression = function(node, parent, tokenContext) {
          return needsParenBeforeExpressionBrace(tokenContext);
        }, exports2.OptionalIndexedAccessType = function(node, parent) {
          return isIndexedAccessType(parent) && parent.objectType === node;
        }, exports2.OptionalCallExpression = exports2.OptionalMemberExpression = function(node, parent) {
          return isCallExpression(parent) && parent.callee === node || isMemberExpression(parent) && parent.object === node;
        }, exports2.SequenceExpression = function(node, parent) {
          const parentType = parent.type;
          if ("SequenceExpression" === parentType || "ParenthesizedExpression" === parentType || "MemberExpression" === parentType && parent.property === node || "OptionalMemberExpression" === parentType && parent.property === node || "TemplateLiteral" === parentType) return false;
          if ("ClassDeclaration" === parentType) return true;
          if ("ForOfStatement" === parentType) return parent.right === node;
          if ("ExportDefaultDeclaration" === parentType) return true;
          return !isStatement(parent);
        }, exports2.TSSatisfiesExpression = exports2.TSAsExpression = function(node, parent) {
          if (("AssignmentExpression" === parent.type || "AssignmentPattern" === parent.type) && parent.left === node) return true;
          if ("BinaryExpression" === parent.type && ("|" === parent.operator || "&" === parent.operator) && node === parent.left) return true;
          return Binary(node, parent);
        }, exports2.TSInferType = function(node, parent) {
          const parentType = parent.type;
          return "TSArrayType" === parentType || "TSOptionalType" === parentType;
        }, exports2.TSInstantiationExpression = function(node, parent) {
          const parentType = parent.type;
          return ("CallExpression" === parentType || "OptionalCallExpression" === parentType || "NewExpression" === parentType || "TSInstantiationExpression" === parentType) && !!parent.typeParameters;
        }, exports2.UnaryLike = exports2.TSTypeAssertion = UnaryLike, exports2.TSIntersectionType = exports2.TSUnionType = function(node, parent) {
          const parentType = parent.type;
          return "TSArrayType" === parentType || "TSOptionalType" === parentType || "TSIntersectionType" === parentType || "TSRestType" === parentType;
        }, exports2.IntersectionTypeAnnotation = exports2.UnionTypeAnnotation = function(node, parent) {
          const parentType = parent.type;
          return "ArrayTypeAnnotation" === parentType || "NullableTypeAnnotation" === parentType || "IntersectionTypeAnnotation" === parentType || "UnionTypeAnnotation" === parentType;
        }, exports2.UpdateExpression = function(node, parent) {
          return hasPostfixPart(node, parent) || isClassExtendsClause(node, parent);
        }, exports2.AwaitExpression = exports2.YieldExpression = function(node, parent) {
          const parentType = parent.type;
          return "BinaryExpression" === parentType || "LogicalExpression" === parentType || "UnaryExpression" === parentType || "SpreadElement" === parentType || hasPostfixPart(node, parent) || "AwaitExpression" === parentType && isYieldExpression(node) || "ConditionalExpression" === parentType && node === parent.test || isClassExtendsClause(node, parent) || isTSTypeExpression(parentType);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js");
        const { isArrayTypeAnnotation, isBinaryExpression, isCallExpression, isForOfStatement, isIndexedAccessType, isMemberExpression, isObjectPattern, isOptionalMemberExpression, isYieldExpression, isStatement } = _t, PRECEDENCE = /* @__PURE__ */ new Map([["||", 0], ["??", 0], ["|>", 0], ["&&", 1], ["|", 2], ["^", 3], ["&", 4], ["==", 5], ["===", 5], ["!=", 5], ["!==", 5], ["<", 6], [">", 6], ["<=", 6], [">=", 6], ["in", 6], ["instanceof", 6], [">>", 7], ["<<", 7], [">>>", 7], ["+", 8], ["-", 8], ["*", 9], ["/", 9], ["%", 9], ["**", 10]]);
        function getBinaryPrecedence(node, nodeType) {
          return "BinaryExpression" === nodeType || "LogicalExpression" === nodeType ? PRECEDENCE.get(node.operator) : "TSAsExpression" === nodeType || "TSSatisfiesExpression" === nodeType ? PRECEDENCE.get("in") : void 0;
        }
        function isTSTypeExpression(nodeType) {
          return "TSAsExpression" === nodeType || "TSSatisfiesExpression" === nodeType || "TSTypeAssertion" === nodeType;
        }
        const isClassExtendsClause = (node, parent) => {
          const parentType = parent.type;
          return ("ClassDeclaration" === parentType || "ClassExpression" === parentType) && parent.superClass === node;
        }, hasPostfixPart = (node, parent) => {
          const parentType = parent.type;
          return ("MemberExpression" === parentType || "OptionalMemberExpression" === parentType) && parent.object === node || ("CallExpression" === parentType || "OptionalCallExpression" === parentType || "NewExpression" === parentType) && parent.callee === node || "TaggedTemplateExpression" === parentType && parent.tag === node || "TSNonNullExpression" === parentType;
        };
        function needsParenBeforeExpressionBrace(tokenContext) {
          return Boolean(tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.arrowBody));
        }
        function Binary(node, parent) {
          const parentType = parent.type;
          if ("BinaryExpression" === node.type && "**" === node.operator && "BinaryExpression" === parentType && "**" === parent.operator) return parent.left === node;
          if (isClassExtendsClause(node, parent)) return true;
          if (hasPostfixPart(node, parent) || "UnaryExpression" === parentType || "SpreadElement" === parentType || "AwaitExpression" === parentType) return true;
          const parentPos = getBinaryPrecedence(parent, parentType);
          if (null != parentPos) {
            const nodePos = getBinaryPrecedence(node, node.type);
            if (parentPos === nodePos && "BinaryExpression" === parentType && parent.right === node || parentPos > nodePos) return true;
          }
        }
        function UnaryLike(node, parent) {
          return hasPostfixPart(node, parent) || isBinaryExpression(parent) && "**" === parent.operator && parent.left === node || isClassExtendsClause(node, parent);
        }
        function ConditionalExpression(node, parent) {
          const parentType = parent.type;
          return !!("UnaryExpression" === parentType || "SpreadElement" === parentType || "BinaryExpression" === parentType || "LogicalExpression" === parentType || "ConditionalExpression" === parentType && parent.test === node || "AwaitExpression" === parentType || isTSTypeExpression(parentType)) || UnaryLike(node, parent);
        }
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/whitespace.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.nodes = void 0;
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { FLIPPED_ALIAS_KEYS, isArrayExpression, isAssignmentExpression, isBinary, isBlockStatement, isCallExpression, isFunction, isIdentifier: isIdentifier2, isLiteral, isMemberExpression, isObjectExpression, isOptionalCallExpression, isOptionalMemberExpression, isStringLiteral } = _t;
        function crawlInternal(node, state) {
          return node ? (isMemberExpression(node) || isOptionalMemberExpression(node) ? (crawlInternal(node.object, state), node.computed && crawlInternal(node.property, state)) : isBinary(node) || isAssignmentExpression(node) ? (crawlInternal(node.left, state), crawlInternal(node.right, state)) : isCallExpression(node) || isOptionalCallExpression(node) ? (state.hasCall = true, crawlInternal(node.callee, state)) : isFunction(node) ? state.hasFunction = true : isIdentifier2(node) && (state.hasHelper = state.hasHelper || node.callee && isHelper(node.callee)), state) : state;
        }
        function crawl(node) {
          return crawlInternal(node, { hasCall: false, hasFunction: false, hasHelper: false });
        }
        function isHelper(node) {
          return !!node && (isMemberExpression(node) ? isHelper(node.object) || isHelper(node.property) : isIdentifier2(node) ? "require" === node.name || 95 === node.name.charCodeAt(0) : isCallExpression(node) ? isHelper(node.callee) : !(!isBinary(node) && !isAssignmentExpression(node)) && (isIdentifier2(node.left) && isHelper(node.left) || isHelper(node.right)));
        }
        function isType(node) {
          return isLiteral(node) || isObjectExpression(node) || isArrayExpression(node) || isIdentifier2(node) || isMemberExpression(node);
        }
        const nodes = exports2.nodes = { AssignmentExpression(node) {
          const state = crawl(node.right);
          if (state.hasCall && state.hasHelper || state.hasFunction) return state.hasFunction ? 3 : 2;
        }, SwitchCase: (node, parent) => (node.consequent.length || parent.cases[0] === node ? 1 : 0) | (node.consequent.length || parent.cases[parent.cases.length - 1] !== node ? 0 : 2), LogicalExpression(node) {
          if (isFunction(node.left) || isFunction(node.right)) return 2;
        }, Literal(node) {
          if (isStringLiteral(node) && "use strict" === node.value) return 2;
        }, CallExpression(node) {
          if (isFunction(node.callee) || isHelper(node)) return 3;
        }, OptionalCallExpression(node) {
          if (isFunction(node.callee)) return 3;
        }, VariableDeclaration(node) {
          for (let i2 = 0; i2 < node.declarations.length; i2++) {
            const declar = node.declarations[i2];
            let enabled = isHelper(declar.id) && !isType(declar.init);
            if (!enabled && declar.init) {
              const state = crawl(declar.init);
              enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;
            }
            if (enabled) return 3;
          }
        }, IfStatement(node) {
          if (isBlockStatement(node.consequent)) return 3;
        } };
        nodes.ObjectProperty = nodes.ObjectTypeProperty = nodes.ObjectMethod = function(node, parent) {
          if (parent.properties[0] === node) return 1;
        }, nodes.ObjectTypeCallProperty = function(node, parent) {
          var _parent$properties;
          if (parent.callProperties[0] === node && (null == (_parent$properties = parent.properties) || !_parent$properties.length)) return 1;
        }, nodes.ObjectTypeIndexer = function(node, parent) {
          var _parent$properties2, _parent$callPropertie;
          if (!(parent.indexers[0] !== node || null != (_parent$properties2 = parent.properties) && _parent$properties2.length || null != (_parent$callPropertie = parent.callProperties) && _parent$callPropertie.length)) return 1;
        }, nodes.ObjectTypeInternalSlot = function(node, parent) {
          var _parent$properties3, _parent$callPropertie2, _parent$indexers;
          if (!(parent.internalSlots[0] !== node || null != (_parent$properties3 = parent.properties) && _parent$properties3.length || null != (_parent$callPropertie2 = parent.callProperties) && _parent$callPropertie2.length || null != (_parent$indexers = parent.indexers) && _parent$indexers.length)) return 1;
        }, [["Function", true], ["Class", true], ["Loop", true], ["LabeledStatement", true], ["SwitchStatement", true], ["TryStatement", true]].forEach(function([type, amounts]) {
          [type].concat(FLIPPED_ALIAS_KEYS[type] || []).forEach(function(type2) {
            const ret = amounts ? 3 : 0;
            nodes[type2] = () => ret;
          });
        });
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/printer.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _buffer = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/buffer.js"), n2 = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _tokenMap = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/token-map.js"), generatorFunctions = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/index.js");
        const { isExpression, isFunction, isStatement, isClassBody, isTSInterfaceBody, isTSEnumDeclaration } = _t, SCIENTIFIC_NOTATION = /e/i, ZERO_DECIMAL_INTEGER = /\.0+$/, HAS_NEWLINE = /[\n\r\u2028\u2029]/, HAS_NEWLINE_OR_BlOCK_COMMENT_END = /[\n\r\u2028\u2029]|\*\//;
        function commentIsNewline(c4) {
          return "CommentLine" === c4.type || HAS_NEWLINE.test(c4.value);
        }
        const { needsParens } = n2;
        class Printer {
          constructor(format2, map, tokens, originalCode) {
            this.inForStatementInit = false, this.tokenContext = 0, this._tokens = null, this._originalCode = null, this._currentNode = null, this._indent = 0, this._indentRepeat = 0, this._insideAux = false, this._noLineTerminator = false, this._noLineTerminatorAfterNode = null, this._printAuxAfterOnNextUserNode = false, this._printedComments = /* @__PURE__ */ new Set(), this._endsWithInteger = false, this._endsWithWord = false, this._endsWithDiv = false, this._lastCommentLine = 0, this._endsWithInnerRaw = false, this._indentInnerComments = true, this.tokenMap = null, this._boundGetRawIdentifier = this._getRawIdentifier.bind(this), this._printSemicolonBeforeNextNode = -1, this._printSemicolonBeforeNextToken = -1, this.format = format2, this._tokens = tokens, this._originalCode = originalCode, this._indentRepeat = format2.indent.style.length, this._inputMap = null == map ? void 0 : map._inputMap, this._buf = new _buffer.default(map, format2.indent.style[0]);
          }
          enterForStatementInit() {
            return this.inForStatementInit ? () => {
            } : (this.inForStatementInit = true, () => {
              this.inForStatementInit = false;
            });
          }
          enterDelimited() {
            const oldInForStatementInit = this.inForStatementInit, oldNoLineTerminatorAfterNode = this._noLineTerminatorAfterNode;
            return false === oldInForStatementInit && null === oldNoLineTerminatorAfterNode ? () => {
            } : (this.inForStatementInit = false, this._noLineTerminatorAfterNode = null, () => {
              this.inForStatementInit = oldInForStatementInit, this._noLineTerminatorAfterNode = oldNoLineTerminatorAfterNode;
            });
          }
          generate(ast) {
            return this.format.preserveFormat && (this.tokenMap = new _tokenMap.TokenMap(ast, this._tokens, this._originalCode)), this.print(ast), this._maybeAddAuxComment(), this._buf.get();
          }
          indent() {
            const { format: format2 } = this;
            format2.preserveFormat || format2.compact || format2.concise || this._indent++;
          }
          dedent() {
            const { format: format2 } = this;
            format2.preserveFormat || format2.compact || format2.concise || this._indent--;
          }
          semicolon(force = false) {
            if (this._maybeAddAuxComment(), force) return this._appendChar(59), void (this._noLineTerminator = false);
            if (this.tokenMap) {
              const node = this._currentNode;
              if (null != node.start && null != node.end) {
                if (!this.tokenMap.endMatches(node, ";")) return void (this._printSemicolonBeforeNextNode = this._buf.getCurrentLine());
                const indexes = this.tokenMap.getIndexes(this._currentNode);
                this._catchUpTo(this._tokens[indexes[indexes.length - 1]].loc.start);
              }
            }
            this._queue(59), this._noLineTerminator = false;
          }
          rightBrace(node) {
            this.format.minified && this._buf.removeLastSemicolon(), this.sourceWithOffset("end", node.loc, -1), this.tokenChar(125);
          }
          rightParens(node) {
            this.sourceWithOffset("end", node.loc, -1), this.tokenChar(41);
          }
          space(force = false) {
            const { format: format2 } = this;
            if (!format2.compact && !format2.preserveFormat) {
              if (force) this._space();
              else if (this._buf.hasContent()) {
                const lastCp = this.getLastChar();
                32 !== lastCp && 10 !== lastCp && this._space();
              }
            }
          }
          word(str, noLineTerminatorAfter = false) {
            this.tokenContext = 0, this._maybePrintInnerComments(str), this._maybeAddAuxComment(), this.tokenMap && this._catchUpToCurrentToken(str), (this._endsWithWord || this._endsWithDiv && 47 === str.charCodeAt(0)) && this._space(), this._append(str, false), this._endsWithWord = true, this._noLineTerminator = noLineTerminatorAfter;
          }
          number(str, number) {
            this.word(str), this._endsWithInteger = Number.isInteger(number) && !function(str2) {
              if (str2.length > 2 && 48 === str2.charCodeAt(0)) {
                const secondChar = str2.charCodeAt(1);
                return 98 === secondChar || 111 === secondChar || 120 === secondChar;
              }
              return false;
            }(str) && !SCIENTIFIC_NOTATION.test(str) && !ZERO_DECIMAL_INTEGER.test(str) && 46 !== str.charCodeAt(str.length - 1);
          }
          token(str, maybeNewline = false, occurrenceCount = 0) {
            this.tokenContext = 0, this._maybePrintInnerComments(str, occurrenceCount), this._maybeAddAuxComment(), this.tokenMap && this._catchUpToCurrentToken(str, occurrenceCount);
            const lastChar = this.getLastChar(), strFirst = str.charCodeAt(0);
            (33 === lastChar && ("--" === str || 61 === strFirst) || 43 === strFirst && 43 === lastChar || 45 === strFirst && 45 === lastChar || 46 === strFirst && this._endsWithInteger) && this._space(), this._append(str, maybeNewline), this._noLineTerminator = false;
          }
          tokenChar(char) {
            this.tokenContext = 0;
            const str = String.fromCharCode(char);
            this._maybePrintInnerComments(str), this._maybeAddAuxComment(), this.tokenMap && this._catchUpToCurrentToken(str);
            const lastChar = this.getLastChar();
            (43 === char && 43 === lastChar || 45 === char && 45 === lastChar || 46 === char && this._endsWithInteger) && this._space(), this._appendChar(char), this._noLineTerminator = false;
          }
          newline(i2 = 1, force) {
            if (!(i2 <= 0)) {
              if (!force) {
                if (this.format.retainLines || this.format.compact) return;
                if (this.format.concise) return void this.space();
              }
              i2 > 2 && (i2 = 2), i2 -= this._buf.getNewlineCount();
              for (let j2 = 0; j2 < i2; j2++) this._newline();
            }
          }
          endsWith(char) {
            return this.getLastChar() === char;
          }
          getLastChar() {
            return this._buf.getLastChar();
          }
          endsWithCharAndNewline() {
            return this._buf.endsWithCharAndNewline();
          }
          removeTrailingNewline() {
            this._buf.removeTrailingNewline();
          }
          exactSource(loc, cb) {
            loc ? (this._catchUp("start", loc), this._buf.exactSource(loc, cb)) : cb();
          }
          source(prop, loc) {
            loc && (this._catchUp(prop, loc), this._buf.source(prop, loc));
          }
          sourceWithOffset(prop, loc, columnOffset) {
            loc && !this.format.preserveFormat && (this._catchUp(prop, loc), this._buf.sourceWithOffset(prop, loc, columnOffset));
          }
          sourceIdentifierName(identifierName, pos) {
            if (!this._buf._canMarkIdName) return;
            const sourcePosition = this._buf._sourcePosition;
            sourcePosition.identifierNamePos = pos, sourcePosition.identifierName = identifierName;
          }
          _space() {
            this._queue(32);
          }
          _newline() {
            this._queue(10);
          }
          _catchUpToCurrentToken(str, occurrenceCount = 0) {
            const token = this.tokenMap.findMatching(this._currentNode, str, occurrenceCount);
            token && this._catchUpTo(token.loc.start), -1 !== this._printSemicolonBeforeNextToken && this._printSemicolonBeforeNextToken === this._buf.getCurrentLine() && (this._buf.appendChar(59), this._endsWithWord = false, this._endsWithInteger = false, this._endsWithDiv = false), this._printSemicolonBeforeNextToken = -1, this._printSemicolonBeforeNextNode = -1;
          }
          _append(str, maybeNewline) {
            this._maybeIndent(str.charCodeAt(0)), this._buf.append(str, maybeNewline), this._endsWithWord = false, this._endsWithInteger = false, this._endsWithDiv = false;
          }
          _appendChar(char) {
            this._maybeIndent(char), this._buf.appendChar(char), this._endsWithWord = false, this._endsWithInteger = false, this._endsWithDiv = false;
          }
          _queue(char) {
            this._maybeIndent(char), this._buf.queue(char), this._endsWithWord = false, this._endsWithInteger = false;
          }
          _maybeIndent(firstChar) {
            this._indent && 10 !== firstChar && this.endsWith(10) && this._buf.queueIndentation(this._getIndent());
          }
          _shouldIndent(firstChar) {
            if (this._indent && 10 !== firstChar && this.endsWith(10)) return true;
          }
          catchUp(line) {
            if (!this.format.retainLines) return;
            const count2 = line - this._buf.getCurrentLine();
            for (let i2 = 0; i2 < count2; i2++) this._newline();
          }
          _catchUp(prop, loc) {
            const { format: format2 } = this;
            if (!format2.preserveFormat) return void (format2.retainLines && null != loc && loc[prop] && this.catchUp(loc[prop].line));
            const pos = null == loc ? void 0 : loc[prop];
            null != pos && this._catchUpTo(pos);
          }
          _catchUpTo({ line, column, index }) {
            const count2 = line - this._buf.getCurrentLine();
            if (count2 > 0 && this._noLineTerminator) return;
            for (let i2 = 0; i2 < count2; i2++) this._newline();
            const spacesCount = count2 > 0 ? column : column - this._buf.getCurrentColumn();
            if (spacesCount > 0) {
              const spaces = this._originalCode ? this._originalCode.slice(index - spacesCount, index).replace(/[^\t\x0B\f \xA0\u1680\u2000-\u200A\u202F\u205F\u3000\uFEFF]/gu, " ") : " ".repeat(spacesCount);
              this._append(spaces, false);
            }
          }
          _getIndent() {
            return this._indentRepeat * this._indent;
          }
          printTerminatorless(node) {
            this._noLineTerminator = true, this.print(node);
          }
          print(node, noLineTerminatorAfter, trailingCommentsLineOffset) {
            var _node$extra, _node$leadingComments, _node$leadingComments2;
            if (!node) return;
            this._endsWithInnerRaw = false;
            const nodeType = node.type, format2 = this.format, oldConcise = format2.concise;
            node._compact && (format2.concise = true);
            const printMethod = this[nodeType];
            if (void 0 === printMethod) throw new ReferenceError(`unknown node of type ${JSON.stringify(nodeType)} with constructor ${JSON.stringify(node.constructor.name)}`);
            const parent = this._currentNode;
            this._currentNode = node, this.tokenMap && (this._printSemicolonBeforeNextToken = this._printSemicolonBeforeNextNode);
            const oldInAux = this._insideAux;
            this._insideAux = null == node.loc, this._maybeAddAuxComment(this._insideAux && !oldInAux);
            const parenthesized = null == (_node$extra = node.extra) ? void 0 : _node$extra.parenthesized;
            let shouldPrintParens = parenthesized && format2.preserveFormat || parenthesized && format2.retainFunctionParens && "FunctionExpression" === nodeType || needsParens(node, parent, this.tokenContext, this.inForStatementInit, format2.preserveFormat ? this._boundGetRawIdentifier : void 0);
            if (!shouldPrintParens && parenthesized && null != (_node$leadingComments = node.leadingComments) && _node$leadingComments.length && "CommentBlock" === node.leadingComments[0].type) {
              switch (null == parent ? void 0 : parent.type) {
                case "ExpressionStatement":
                case "VariableDeclarator":
                case "AssignmentExpression":
                case "ReturnStatement":
                  break;
                case "CallExpression":
                case "OptionalCallExpression":
                case "NewExpression":
                  if (parent.callee !== node) break;
                default:
                  shouldPrintParens = true;
              }
            }
            let oldNoLineTerminatorAfterNode, oldInForStatementInitWasTrue, indentParenthesized = false;
            var _node$trailingComment;
            (!shouldPrintParens && this._noLineTerminator && (null != (_node$leadingComments2 = node.leadingComments) && _node$leadingComments2.some(commentIsNewline) || this.format.retainLines && node.loc && node.loc.start.line > this._buf.getCurrentLine()) && (shouldPrintParens = true, indentParenthesized = true), shouldPrintParens) || (noLineTerminatorAfter || (noLineTerminatorAfter = parent && this._noLineTerminatorAfterNode === parent && n2.isLastChild(parent, node)), noLineTerminatorAfter && (null != (_node$trailingComment = node.trailingComments) && _node$trailingComment.some(commentIsNewline) ? isExpression(node) && (shouldPrintParens = true) : (oldNoLineTerminatorAfterNode = this._noLineTerminatorAfterNode, this._noLineTerminatorAfterNode = node)));
            shouldPrintParens && (this.tokenChar(40), indentParenthesized && this.indent(), this._endsWithInnerRaw = false, this.inForStatementInit && (oldInForStatementInitWasTrue = true, this.inForStatementInit = false), oldNoLineTerminatorAfterNode = this._noLineTerminatorAfterNode, this._noLineTerminatorAfterNode = null), this._lastCommentLine = 0, this._printLeadingComments(node, parent);
            const loc = "Program" === nodeType || "File" === nodeType ? null : node.loc;
            this.exactSource(loc, printMethod.bind(this, node, parent)), shouldPrintParens ? (this._printTrailingComments(node, parent), indentParenthesized && (this.dedent(), this.newline()), this.tokenChar(41), this._noLineTerminator = noLineTerminatorAfter, oldInForStatementInitWasTrue && (this.inForStatementInit = true)) : noLineTerminatorAfter && !this._noLineTerminator ? (this._noLineTerminator = true, this._printTrailingComments(node, parent)) : this._printTrailingComments(node, parent, trailingCommentsLineOffset), this._currentNode = parent, format2.concise = oldConcise, this._insideAux = oldInAux, void 0 !== oldNoLineTerminatorAfterNode && (this._noLineTerminatorAfterNode = oldNoLineTerminatorAfterNode), this._endsWithInnerRaw = false;
          }
          _maybeAddAuxComment(enteredPositionlessNode) {
            enteredPositionlessNode && this._printAuxBeforeComment(), this._insideAux || this._printAuxAfterComment();
          }
          _printAuxBeforeComment() {
            if (this._printAuxAfterOnNextUserNode) return;
            this._printAuxAfterOnNextUserNode = true;
            const comment = this.format.auxiliaryCommentBefore;
            comment && this._printComment({ type: "CommentBlock", value: comment }, 0);
          }
          _printAuxAfterComment() {
            if (!this._printAuxAfterOnNextUserNode) return;
            this._printAuxAfterOnNextUserNode = false;
            const comment = this.format.auxiliaryCommentAfter;
            comment && this._printComment({ type: "CommentBlock", value: comment }, 0);
          }
          getPossibleRaw(node) {
            const extra = node.extra;
            if (null != (null == extra ? void 0 : extra.raw) && null != extra.rawValue && node.value === extra.rawValue) return extra.raw;
          }
          printJoin(nodes, statement, indent, separator, printTrailingSeparator, addNewlines, iterator, trailingCommentsLineOffset) {
            if (null == nodes || !nodes.length) return;
            if (null == indent && this.format.retainLines) {
              var _nodes$0$loc;
              const startLine = null == (_nodes$0$loc = nodes[0].loc) ? void 0 : _nodes$0$loc.start.line;
              null != startLine && startLine !== this._buf.getCurrentLine() && (indent = true);
            }
            indent && this.indent();
            const newlineOpts = { addNewlines, nextNodeStartLine: 0 }, boundSeparator = null == separator ? void 0 : separator.bind(this), len = nodes.length;
            for (let i2 = 0; i2 < len; i2++) {
              const node = nodes[i2];
              var _node$trailingComment2;
              if (node) {
                if (statement && this._printNewline(0 === i2, newlineOpts), this.print(node, void 0, trailingCommentsLineOffset || 0), null == iterator || iterator(node, i2), null != boundSeparator && (i2 < len - 1 ? boundSeparator(i2, false) : printTrailingSeparator && boundSeparator(i2, true)), statement) if (null != (_node$trailingComment2 = node.trailingComments) && _node$trailingComment2.length || (this._lastCommentLine = 0), i2 + 1 === len) this.newline(1);
                else {
                  var _nextNode$loc;
                  const nextNode = nodes[i2 + 1];
                  newlineOpts.nextNodeStartLine = (null == (_nextNode$loc = nextNode.loc) ? void 0 : _nextNode$loc.start.line) || 0, this._printNewline(true, newlineOpts);
                }
              }
            }
            indent && this.dedent();
          }
          printAndIndentOnComments(node) {
            const indent = node.leadingComments && node.leadingComments.length > 0;
            indent && this.indent(), this.print(node), indent && this.dedent();
          }
          printBlock(parent) {
            const node = parent.body;
            "EmptyStatement" !== node.type && this.space(), this.print(node);
          }
          _printTrailingComments(node, parent, lineOffset) {
            const { innerComments, trailingComments } = node;
            null != innerComments && innerComments.length && this._printComments(2, innerComments, node, parent, lineOffset), null != trailingComments && trailingComments.length && this._printComments(2, trailingComments, node, parent, lineOffset);
          }
          _printLeadingComments(node, parent) {
            const comments = node.leadingComments;
            null != comments && comments.length && this._printComments(0, comments, node, parent);
          }
          _maybePrintInnerComments(nextTokenStr, nextTokenOccurrenceCount) {
            var _this$tokenMap;
            this._endsWithInnerRaw && this.printInnerComments(null == (_this$tokenMap = this.tokenMap) ? void 0 : _this$tokenMap.findMatching(this._currentNode, nextTokenStr, nextTokenOccurrenceCount));
            this._endsWithInnerRaw = true, this._indentInnerComments = true;
          }
          printInnerComments(nextToken) {
            const node = this._currentNode, comments = node.innerComments;
            if (null == comments || !comments.length) return;
            const hasSpace = this.endsWith(32), indent = this._indentInnerComments, printedCommentsCount = this._printedComments.size;
            indent && this.indent(), this._printComments(1, comments, node, void 0, void 0, nextToken), hasSpace && printedCommentsCount !== this._printedComments.size && this.space(), indent && this.dedent();
          }
          noIndentInnerCommentsHere() {
            this._indentInnerComments = false;
          }
          printSequence(nodes, indent, trailingCommentsLineOffset, addNewlines) {
            this.printJoin(nodes, true, null != indent && indent, void 0, void 0, addNewlines, void 0, trailingCommentsLineOffset);
          }
          printList(items, printTrailingSeparator, statement, indent, separator, iterator) {
            this.printJoin(items, statement, indent, null != separator ? separator : commaSeparator, printTrailingSeparator, void 0, iterator);
          }
          shouldPrintTrailingComma(listEnd) {
            if (!this.tokenMap) return null;
            const listEndIndex = this.tokenMap.findLastIndex(this._currentNode, (token) => this.tokenMap.matchesOriginal(token, listEnd));
            return listEndIndex <= 0 ? null : this.tokenMap.matchesOriginal(this._tokens[listEndIndex - 1], ",");
          }
          _printNewline(newLine, opts) {
            const format2 = this.format;
            if (format2.retainLines || format2.compact) return;
            if (format2.concise) return void this.space();
            if (!newLine) return;
            const startLine = opts.nextNodeStartLine, lastCommentLine = this._lastCommentLine;
            if (startLine > 0 && lastCommentLine > 0) {
              const offset = startLine - lastCommentLine;
              if (offset >= 0) return void this.newline(offset || 1);
            }
            this._buf.hasContent() && this.newline(1);
          }
          _shouldPrintComment(comment, nextToken) {
            if (comment.ignore) return 0;
            if (this._printedComments.has(comment)) return 0;
            if (this._noLineTerminator && HAS_NEWLINE_OR_BlOCK_COMMENT_END.test(comment.value)) return 2;
            if (nextToken && this.tokenMap) {
              const commentTok = this.tokenMap.find(this._currentNode, (token) => token.value === comment.value);
              if (commentTok && commentTok.start > nextToken.start) return 2;
            }
            return this._printedComments.add(comment), this.format.shouldPrintComment(comment.value) ? 1 : 0;
          }
          _printComment(comment, skipNewLines) {
            const noLineTerminator = this._noLineTerminator, isBlockComment = "CommentBlock" === comment.type, printNewLines = isBlockComment && 1 !== skipNewLines && !this._noLineTerminator;
            printNewLines && this._buf.hasContent() && 2 !== skipNewLines && this.newline(1);
            const lastCharCode = this.getLastChar();
            let val;
            if (91 !== lastCharCode && 123 !== lastCharCode && 40 !== lastCharCode && this.space(), isBlockComment) {
              if (val = `/*${comment.value}*/`, this.format.indent.adjustMultilineComment) {
                var _comment$loc;
                const offset = null == (_comment$loc = comment.loc) ? void 0 : _comment$loc.start.column;
                if (offset) {
                  const newlineRegex = new RegExp("\\n\\s{1," + offset + "}", "g");
                  val = val.replace(newlineRegex, "\n");
                }
                if (this.format.concise) val = val.replace(/\n(?!$)/g, "\n");
                else {
                  let indentSize = this.format.retainLines ? 0 : this._buf.getCurrentColumn();
                  (this._shouldIndent(47) || this.format.retainLines) && (indentSize += this._getIndent()), val = val.replace(/\n(?!$)/g, `
${" ".repeat(indentSize)}`);
                }
              }
            } else val = noLineTerminator ? `/*${comment.value}*/` : `//${comment.value}`;
            if (this._endsWithDiv && this._space(), this.tokenMap) {
              const { _printSemicolonBeforeNextToken, _printSemicolonBeforeNextNode } = this;
              this._printSemicolonBeforeNextToken = -1, this._printSemicolonBeforeNextNode = -1, this.source("start", comment.loc), this._append(val, isBlockComment), this._printSemicolonBeforeNextNode = _printSemicolonBeforeNextNode, this._printSemicolonBeforeNextToken = _printSemicolonBeforeNextToken;
            } else this.source("start", comment.loc), this._append(val, isBlockComment);
            isBlockComment || noLineTerminator || this.newline(1, true), printNewLines && 3 !== skipNewLines && this.newline(1);
          }
          _printComments(type, comments, node, parent, lineOffset = 0, nextToken) {
            const nodeLoc = node.loc, len = comments.length;
            let hasLoc = !!nodeLoc;
            const nodeStartLine = hasLoc ? nodeLoc.start.line : 0, nodeEndLine = hasLoc ? nodeLoc.end.line : 0;
            let lastLine = 0, leadingCommentNewline = 0;
            const maybeNewline = this._noLineTerminator ? function() {
            } : this.newline.bind(this);
            for (let i2 = 0; i2 < len; i2++) {
              const comment = comments[i2], shouldPrint = this._shouldPrintComment(comment, nextToken);
              if (2 === shouldPrint) {
                hasLoc = false;
                break;
              }
              if (hasLoc && comment.loc && 1 === shouldPrint) {
                const commentStartLine = comment.loc.start.line, commentEndLine = comment.loc.end.line;
                if (0 === type) {
                  let offset = 0;
                  0 === i2 ? !this._buf.hasContent() || "CommentLine" !== comment.type && commentStartLine === commentEndLine || (offset = leadingCommentNewline = 1) : offset = commentStartLine - lastLine, lastLine = commentEndLine, maybeNewline(offset), this._printComment(comment, 1), i2 + 1 === len && (maybeNewline(Math.max(nodeStartLine - lastLine, leadingCommentNewline)), lastLine = nodeStartLine);
                } else if (1 === type) {
                  const offset = commentStartLine - (0 === i2 ? nodeStartLine : lastLine);
                  lastLine = commentEndLine, maybeNewline(offset), this._printComment(comment, 1), i2 + 1 === len && (maybeNewline(Math.min(1, nodeEndLine - lastLine)), lastLine = nodeEndLine);
                } else {
                  const offset = commentStartLine - (0 === i2 ? nodeEndLine - lineOffset : lastLine);
                  lastLine = commentEndLine, maybeNewline(offset), this._printComment(comment, 1);
                }
              } else {
                if (hasLoc = false, 1 !== shouldPrint) continue;
                if (1 === len) {
                  const singleLine = comment.loc ? comment.loc.start.line === comment.loc.end.line : !HAS_NEWLINE.test(comment.value), shouldSkipNewline = singleLine && !isStatement(node) && !isClassBody(parent) && !isTSInterfaceBody(parent) && !isTSEnumDeclaration(parent);
                  0 === type ? this._printComment(comment, shouldSkipNewline && "ObjectExpression" !== node.type || singleLine && isFunction(parent, { body: node }) ? 1 : 0) : shouldSkipNewline && 2 === type ? this._printComment(comment, 1) : this._printComment(comment, 0);
                } else 1 !== type || "ObjectExpression" === node.type && node.properties.length > 1 || "ClassBody" === node.type || "TSInterfaceBody" === node.type ? this._printComment(comment, 0) : this._printComment(comment, 0 === i2 ? 2 : i2 === len - 1 ? 3 : 0);
              }
            }
            2 === type && hasLoc && lastLine && (this._lastCommentLine = lastLine);
          }
        }
        Object.assign(Printer.prototype, generatorFunctions), Printer.prototype.Noop = function() {
        };
        exports2.default = Printer;
        function commaSeparator(occurrenceCount, last) {
          this.token(",", false, occurrenceCount), last || this.space();
        }
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/source-map.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _genMapping = __webpack_require__2("./node_modules/.pnpm/@jridgewell+gen-mapping@0.3.8/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js"), _traceMapping = __webpack_require__2("./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.25/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js");
        exports2.default = class {
          constructor(opts, code) {
            var _opts$sourceFileName;
            this._map = void 0, this._rawMappings = void 0, this._sourceFileName = void 0, this._lastGenLine = 0, this._lastSourceLine = 0, this._lastSourceColumn = 0, this._inputMap = void 0;
            const map = this._map = new _genMapping.GenMapping({ sourceRoot: opts.sourceRoot });
            if (this._sourceFileName = null == (_opts$sourceFileName = opts.sourceFileName) ? void 0 : _opts$sourceFileName.replace(/\\/g, "/"), this._rawMappings = void 0, opts.inputSourceMap) {
              this._inputMap = new _traceMapping.TraceMap(opts.inputSourceMap);
              const resolvedSources = this._inputMap.resolvedSources;
              if (resolvedSources.length) for (let i2 = 0; i2 < resolvedSources.length; i2++) {
                var _this$_inputMap$sourc;
                (0, _genMapping.setSourceContent)(map, resolvedSources[i2], null == (_this$_inputMap$sourc = this._inputMap.sourcesContent) ? void 0 : _this$_inputMap$sourc[i2]);
              }
            }
            if ("string" != typeof code || opts.inputSourceMap) {
              if ("object" == typeof code) for (const sourceFileName of Object.keys(code)) (0, _genMapping.setSourceContent)(map, sourceFileName.replace(/\\/g, "/"), code[sourceFileName]);
            } else (0, _genMapping.setSourceContent)(map, this._sourceFileName, code);
          }
          get() {
            return (0, _genMapping.toEncodedMap)(this._map);
          }
          getDecoded() {
            return (0, _genMapping.toDecodedMap)(this._map);
          }
          getRawMappings() {
            return this._rawMappings || (this._rawMappings = (0, _genMapping.allMappings)(this._map));
          }
          mark(generated, line, column, identifierName, identifierNamePos, filename) {
            var _originalMapping;
            let originalMapping;
            if (this._rawMappings = void 0, null != line) if (this._inputMap) {
              if (originalMapping = (0, _traceMapping.originalPositionFor)(this._inputMap, { line, column }), !originalMapping.name && identifierNamePos) {
                const originalIdentifierMapping = (0, _traceMapping.originalPositionFor)(this._inputMap, identifierNamePos);
                originalIdentifierMapping.name && (identifierName = originalIdentifierMapping.name);
              }
            } else originalMapping = { source: (null == filename ? void 0 : filename.replace(/\\/g, "/")) || this._sourceFileName, line, column };
            (0, _genMapping.maybeAddMapping)(this._map, { name: identifierName, generated, source: null == (_originalMapping = originalMapping) ? void 0 : _originalMapping.source, original: originalMapping });
          }
        };
      }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/token-map.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.TokenMap = void 0;
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { traverseFast, VISITOR_KEYS } = _t;
        exports2.TokenMap = class {
          constructor(ast, tokens, source) {
            this._tokens = void 0, this._source = void 0, this._nodesToTokenIndexes = /* @__PURE__ */ new Map(), this._nodesOccurrencesCountCache = /* @__PURE__ */ new Map(), this._tokensCache = /* @__PURE__ */ new Map(), this._tokens = tokens, this._source = source, traverseFast(ast, (node) => {
              const indexes = this._getTokensIndexesOfNode(node);
              indexes.length > 0 && this._nodesToTokenIndexes.set(node, indexes);
            }), this._tokensCache = null;
          }
          has(node) {
            return this._nodesToTokenIndexes.has(node);
          }
          getIndexes(node) {
            return this._nodesToTokenIndexes.get(node);
          }
          find(node, condition) {
            const indexes = this._nodesToTokenIndexes.get(node);
            if (indexes) for (let k3 = 0; k3 < indexes.length; k3++) {
              const index = indexes[k3], tok = this._tokens[index];
              if (condition(tok, index)) return tok;
            }
            return null;
          }
          findLastIndex(node, condition) {
            const indexes = this._nodesToTokenIndexes.get(node);
            if (indexes) for (let k3 = indexes.length - 1; k3 >= 0; k3--) {
              const index = indexes[k3];
              if (condition(this._tokens[index], index)) return index;
            }
            return -1;
          }
          findMatching(node, test, occurrenceCount = 0) {
            const indexes = this._nodesToTokenIndexes.get(node);
            if (indexes) {
              let i2 = 0;
              const count2 = occurrenceCount;
              if (count2 > 1) {
                const cache = this._nodesOccurrencesCountCache.get(node);
                cache && cache.test === test && cache.count < count2 && (i2 = cache.i + 1, occurrenceCount -= cache.count + 1);
              }
              for (; i2 < indexes.length; i2++) {
                const tok = this._tokens[indexes[i2]];
                if (this.matchesOriginal(tok, test)) {
                  if (0 === occurrenceCount) return count2 > 0 && this._nodesOccurrencesCountCache.set(node, { test, count: count2, i: i2 }), tok;
                  occurrenceCount--;
                }
              }
            }
            return null;
          }
          matchesOriginal(token, test) {
            return token.end - token.start === test.length && (null != token.value ? token.value === test : this._source.startsWith(test, token.start));
          }
          startMatches(node, test) {
            const indexes = this._nodesToTokenIndexes.get(node);
            if (!indexes) return false;
            const tok = this._tokens[indexes[0]];
            return tok.start === node.start && this.matchesOriginal(tok, test);
          }
          endMatches(node, test) {
            const indexes = this._nodesToTokenIndexes.get(node);
            if (!indexes) return false;
            const tok = this._tokens[indexes[indexes.length - 1]];
            return tok.end === node.end && this.matchesOriginal(tok, test);
          }
          _getTokensIndexesOfNode(node) {
            if (null == node.start || null == node.end) return [];
            const { first, last } = this._findTokensOfNode(node, 0, this._tokens.length - 1);
            let low = first;
            const children = function* (node2) {
              if ("TemplateLiteral" === node2.type) {
                yield node2.quasis[0];
                for (let i2 = 1; i2 < node2.quasis.length; i2++) yield node2.expressions[i2 - 1], yield node2.quasis[i2];
                return;
              }
              const keys = VISITOR_KEYS[node2.type];
              for (const key of keys) {
                const child = node2[key];
                child && (Array.isArray(child) ? yield* child : yield child);
              }
            }(node);
            "ExportNamedDeclaration" !== node.type && "ExportDefaultDeclaration" !== node.type || !node.declaration || "ClassDeclaration" !== node.declaration.type || children.next();
            const indexes = [];
            for (const child of children) {
              if (null == child) continue;
              if (null == child.start || null == child.end) continue;
              const childTok = this._findTokensOfNode(child, low, last), high = childTok.first;
              for (let k3 = low; k3 < high; k3++) indexes.push(k3);
              low = childTok.last + 1;
            }
            for (let k3 = low; k3 <= last; k3++) indexes.push(k3);
            return indexes;
          }
          _findTokensOfNode(node, low, high) {
            const cached = this._tokensCache.get(node);
            if (cached) return cached;
            const first = this._findFirstTokenOfNode(node.start, low, high), last = this._findLastTokenOfNode(node.end, first, high);
            return this._tokensCache.set(node, { first, last }), { first, last };
          }
          _findFirstTokenOfNode(start, low, high) {
            for (; low <= high; ) {
              const mid = high + low >> 1;
              if (start < this._tokens[mid].start) high = mid - 1;
              else {
                if (!(start > this._tokens[mid].start)) return mid;
                low = mid + 1;
              }
            }
            return low;
          }
          _findLastTokenOfNode(end, low, high) {
            for (; low <= high; ) {
              const mid = high + low >> 1;
              if (end < this._tokens[mid].end) high = mid - 1;
              else {
                if (!(end > this._tokens[mid].end)) return mid;
                low = mid + 1;
              }
            }
            return high;
          }
        };
      }, "./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.25.9/node_modules/@babel/helper-annotate-as-pure/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(pathOrNode) {
          const node = pathOrNode.node || pathOrNode;
          if (isPureAnnotated(node)) return;
          addComment(node, "leading", PURE_ANNOTATION);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { addComment } = _t, PURE_ANNOTATION = "#__PURE__", isPureAnnotated = ({ leadingComments }) => !!leadingComments && leadingComments.some((comment) => /[@#]__PURE__/.test(comment.value));
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/decorators-2018-09.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.buildDecoratedClass = function(ref, path9, elements, file) {
          const { node, scope } = path9, initializeId = scope.generateUidIdentifier("initialize"), isDeclaration = node.id && path9.isDeclaration(), isStrict = path9.isInStrictMode(), { superClass } = node;
          node.type = "ClassDeclaration", node.id || (node.id = _core.types.cloneNode(ref));
          let superId;
          superClass && (superId = scope.generateUidIdentifierBasedOnNode(node.superClass, "super"), node.superClass = superId);
          const classDecorators = takeDecorators(node), definitions = _core.types.arrayExpression(elements.filter((element) => !element.node.abstract && "TSIndexSignature" !== element.node.type).map((path10) => function(file2, classRef, superRef, path11) {
            const isMethod = path11.isClassMethod();
            if (path11.isPrivate()) throw path11.buildCodeFrameError(`Private ${isMethod ? "methods" : "fields"} in decorated classes are not supported yet.`);
            if ("ClassAccessorProperty" === path11.node.type) throw path11.buildCodeFrameError('Accessor properties are not supported in 2018-09 decorator transform, please specify { "version": "2021-12" } instead.');
            if ("StaticBlock" === path11.node.type) throw path11.buildCodeFrameError('Static blocks are not supported in 2018-09 decorator transform, please specify { "version": "2021-12" } instead.');
            const { node: node2, scope: scope2 } = path11;
            path11.isTSDeclareMethod() || new _helperReplaceSupers.default({ methodPath: path11, objectRef: classRef, superRef, file: file2, refToPreserve: classRef }).replace();
            const properties = [prop("kind", _core.types.stringLiteral(_core.types.isClassMethod(node2) ? node2.kind : "field")), prop("decorators", takeDecorators(node2)), prop("static", node2.static && _core.types.booleanLiteral(true)), prop("key", getKey(node2))].filter(Boolean);
            if (isMethod) {
              null != path11.ensureFunctionName || (path11.ensureFunctionName = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").NodePath.prototype.ensureFunctionName), path11.ensureFunctionName(false), properties.push(prop("value", _core.types.toExpression(path11.node)));
            } else _core.types.isClassProperty(node2) && node2.value ? properties.push((key = "value", body = _core.template.statements.ast`return ${node2.value}`, _core.types.objectMethod("method", _core.types.identifier(key), [], _core.types.blockStatement(body)))) : properties.push(prop("value", scope2.buildUndefinedNode()));
            var key, body;
            return path11.remove(), _core.types.objectExpression(properties);
          }(file, node.id, superId, path10))), wrapperCall = _core.template.expression.ast`
    ${function(file2) {
            return file2.addHelper("decorate");
          }(file)}(
      ${classDecorators || _core.types.nullLiteral()},
      function (${initializeId}, ${superClass ? _core.types.cloneNode(superId) : null}) {
        ${node}
        return { F: ${_core.types.cloneNode(node.id)}, d: ${definitions} };
      },
      ${superClass}
    )
  `;
          isStrict || wrapperCall.arguments[1].body.directives.push(_core.types.directive(_core.types.directiveLiteral("use strict")));
          let replacement = wrapperCall, classPathDesc = "arguments.1.body.body.0";
          isDeclaration && (replacement = _core.template.statement.ast`let ${ref} = ${wrapperCall}`, classPathDesc = "declarations.0.init." + classPathDesc);
          return { instanceNodes: [_core.template.statement.ast`
        ${_core.types.cloneNode(initializeId)}(this)
      `], wrapClass: (path10) => (path10.replaceWith(replacement), path10.get(classPathDesc)) };
        }, exports2.hasDecorators = function(node) {
          return hasOwnDecorators(node) || node.body.body.some(hasOwnDecorators);
        }, exports2.hasOwnDecorators = hasOwnDecorators;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _helperReplaceSupers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-replace-supers@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-replace-supers/lib/index.js");
        function hasOwnDecorators(node) {
          var _node$decorators;
          return !(null == (_node$decorators = node.decorators) || !_node$decorators.length);
        }
        function prop(key, value2) {
          return value2 ? _core.types.objectProperty(_core.types.identifier(key), value2) : null;
        }
        function takeDecorators(node) {
          let result;
          return node.decorators && node.decorators.length > 0 && (result = _core.types.arrayExpression(node.decorators.map((decorator) => decorator.expression))), node.decorators = void 0, result;
        }
        function getKey(node) {
          return node.computed ? node.key : _core.types.isIdentifier(node.key) ? _core.types.stringLiteral(node.key.name) : _core.types.stringLiteral(String(node.key.value));
        }
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/decorators.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function({ assertVersion, assumption }, { loose }, version, inherits) {
          var _assumption, _assumption2;
          assertVersion("2023-11" === version || "2023-05" === version || "2023-01" === version ? "^7.21.0" : "2021-12" === version ? "^7.16.0" : "^7.19.0");
          const VISITED = /* @__PURE__ */ new WeakSet(), constantSuper = null != (_assumption = assumption("constantSuper")) ? _assumption : loose, ignoreFunctionLength = null != (_assumption2 = assumption("ignoreFunctionLength")) ? _assumption2 : loose, namedEvaluationVisitor = /* @__PURE__ */ function(isAnonymous, visitor) {
            function handleComputedProperty(propertyPath, key, state) {
              switch (key.type) {
                case "StringLiteral":
                  return _core.types.stringLiteral(key.value);
                case "NumericLiteral":
                case "BigIntLiteral": {
                  const keyValue = key.value + "";
                  return propertyPath.get("key").replaceWith(_core.types.stringLiteral(keyValue)), _core.types.stringLiteral(keyValue);
                }
                default: {
                  const ref = propertyPath.scope.maybeGenerateMemoised(key);
                  return propertyPath.get("key").replaceWith(_core.types.assignmentExpression("=", ref, createToPropertyKeyCall(state, key))), _core.types.cloneNode(ref);
                }
              }
            }
            return { VariableDeclarator(path9, state) {
              const id = path9.node.id;
              if ("Identifier" === id.type) {
                const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path9.get("init"));
                if (isAnonymous(initializer)) {
                  const name = id.name;
                  visitor(initializer, state, name);
                }
              }
            }, AssignmentExpression(path9, state) {
              const id = path9.node.left;
              if ("Identifier" === id.type) {
                const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path9.get("right"));
                if (isAnonymous(initializer)) switch (path9.node.operator) {
                  case "=":
                  case "&&=":
                  case "||=":
                  case "??=":
                    visitor(initializer, state, id.name);
                }
              }
            }, AssignmentPattern(path9, state) {
              const id = path9.node.left;
              if ("Identifier" === id.type) {
                const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path9.get("right"));
                if (isAnonymous(initializer)) {
                  const name = id.name;
                  visitor(initializer, state, name);
                }
              }
            }, ObjectExpression(path9, state) {
              for (const propertyPath of path9.get("properties")) {
                if (!propertyPath.isObjectProperty()) continue;
                const { node } = propertyPath, id = node.key, initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(propertyPath.get("value"));
                if (isAnonymous(initializer)) {
                  if (node.computed) {
                    const ref = handleComputedProperty(propertyPath, id, state);
                    visitor(initializer, state, ref);
                  } else if (!isProtoKey(id)) if ("Identifier" === id.type) visitor(initializer, state, id.name);
                  else {
                    const className = _core.types.stringLiteral(id.value + "");
                    visitor(initializer, state, className);
                  }
                }
              }
            }, ClassPrivateProperty(path9, state) {
              const { node } = path9, initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path9.get("value"));
              if (isAnonymous(initializer)) {
                const className = _core.types.stringLiteral("#" + node.key.id.name);
                visitor(initializer, state, className);
              }
            }, ClassAccessorProperty(path9, state) {
              const { node } = path9, id = node.key, initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path9.get("value"));
              if (isAnonymous(initializer)) if (node.computed) {
                const ref = handleComputedProperty(path9, id, state);
                visitor(initializer, state, ref);
              } else if ("Identifier" === id.type) visitor(initializer, state, id.name);
              else if ("PrivateName" === id.type) {
                const className = _core.types.stringLiteral("#" + id.id.name);
                visitor(initializer, state, className);
              } else {
                const className = _core.types.stringLiteral(id.value + "");
                visitor(initializer, state, className);
              }
            }, ClassProperty(path9, state) {
              const { node } = path9, id = node.key, initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path9.get("value"));
              if (isAnonymous(initializer)) if (node.computed) {
                const ref = handleComputedProperty(path9, id, state);
                visitor(initializer, state, ref);
              } else if ("Identifier" === id.type) visitor(initializer, state, id.name);
              else {
                const className = _core.types.stringLiteral(id.value + "");
                visitor(initializer, state, className);
              }
            } };
          }(isDecoratedAnonymousClassExpression, visitClass);
          function visitClass(path9, state, className) {
            var _node$id;
            if (VISITED.has(path9)) return;
            const { node } = path9;
            null != className || (className = null == (_node$id = node.id) ? void 0 : _node$id.name);
            const newPath = function(path10, state2, constantSuper2, ignoreFunctionLength2, className2, propertyVisitor, version2) {
              var _path$node$id, _classDecorationsId;
              const body = path10.get("body.body"), classDecorators = path10.node.decorators;
              let hasElementDecorators = false, hasComputedKeysSideEffects = false, elemDecsUseFnContext = false;
              const generateClassPrivateUid = /* @__PURE__ */ function(classPath) {
                let generator;
                return () => (generator || (generator = function(classPath2) {
                  const currentPrivateId = [], privateNames = /* @__PURE__ */ new Set();
                  return classPath2.traverse({ PrivateName(path11) {
                    privateNames.add(path11.node.id.name);
                  } }), () => {
                    let reifiedId;
                    do {
                      incrementId(currentPrivateId), reifiedId = String.fromCharCode(...currentPrivateId);
                    } while (privateNames.has(reifiedId));
                    return _core.types.privateName(_core.types.identifier(reifiedId));
                  };
                }(classPath)), generator());
              }(path10), classAssignments = [], scopeParent = path10.scope.parent, memoiseExpression = (expression, hint, assignments) => {
                const localEvaluatedId = generateLetUidIdentifier(scopeParent, hint);
                return assignments.push(_core.types.assignmentExpression("=", localEvaluatedId, expression)), _core.types.cloneNode(localEvaluatedId);
              };
              let protoInitLocal, staticInitLocal;
              const classIdName = null == (_path$node$id = path10.node.id) ? void 0 : _path$node$id.name, setClassName = "object" == typeof className2 ? className2 : void 0, usesFunctionContextOrYieldAwait = (decorator) => {
                try {
                  return _core.types.traverseFast(decorator, (node2) => {
                    if (_core.types.isThisExpression(node2) || _core.types.isSuper(node2) || _core.types.isYieldExpression(node2) || _core.types.isAwaitExpression(node2) || _core.types.isIdentifier(node2, { name: "arguments" }) || classIdName && _core.types.isIdentifier(node2, { name: classIdName }) || _core.types.isMetaProperty(node2) && "import" !== node2.meta.name) throw null;
                  }), false;
                } catch (_unused2) {
                  return true;
                }
              }, instancePrivateNames = [];
              for (const element of body) {
                if (!isClassDecoratableElementPath(element)) continue;
                const elementNode = element.node;
                if (!elementNode.static && _core.types.isPrivateName(elementNode.key) && instancePrivateNames.push(elementNode.key.id.name), isDecorated(elementNode)) {
                  switch (elementNode.type) {
                    case "ClassProperty":
                      propertyVisitor.ClassProperty(element, state2);
                      break;
                    case "ClassPrivateProperty":
                      propertyVisitor.ClassPrivateProperty(element, state2);
                      break;
                    case "ClassAccessorProperty":
                      if (propertyVisitor.ClassAccessorProperty(element, state2), "2023-11" === version2) break;
                    default:
                      if (elementNode.static) null != staticInitLocal || (staticInitLocal = generateLetUidIdentifier(scopeParent, "initStatic"));
                      else null != protoInitLocal || (protoInitLocal = generateLetUidIdentifier(scopeParent, "initProto"));
                  }
                  hasElementDecorators = true, elemDecsUseFnContext || (elemDecsUseFnContext = elementNode.decorators.some(usesFunctionContextOrYieldAwait));
                } else if ("ClassAccessorProperty" === elementNode.type) {
                  propertyVisitor.ClassAccessorProperty(element, state2);
                  const { key, value: value2, static: isStatic, computed } = elementNode, newId = generateClassPrivateUid(), newField = generateClassProperty(newId, value2, isStatic), keyPath = element.get("key"), [newPath2] = element.replaceWith(newField);
                  let getterKey, setterKey;
                  computed && !keyPath.isConstantExpression() ? (getterKey = (0, _misc.memoiseComputedKey)(createToPropertyKeyCall(state2, key), scopeParent, scopeParent.generateUid("computedKey")), setterKey = _core.types.cloneNode(getterKey.left)) : (getterKey = _core.types.cloneNode(key), setterKey = _core.types.cloneNode(key)), assignIdForAnonymousClass(path10, className2), addProxyAccessorsFor(path10.node.id, newPath2, getterKey, setterKey, newId, computed, isStatic, version2);
                }
                "computed" in element.node && element.node.computed && (hasComputedKeysSideEffects || (hasComputedKeysSideEffects = !scopeParent.isStatic(element.node.key)));
              }
              if (!classDecorators && !hasElementDecorators) return path10.node.id || "string" != typeof className2 || (path10.node.id = _core.types.identifier(className2)), void (setClassName && path10.node.body.body.unshift(createStaticBlockFromExpressions([createSetFunctionNameCall(state2, setClassName)])));
              const elementDecoratorInfo = [];
              let constructorPath;
              const decoratedPrivateMethods = /* @__PURE__ */ new Set();
              let classInitLocal, classIdLocal, decoratorReceiverId = null;
              function handleDecorators(decorators) {
                let hasSideEffects = false, usesFnContext = false;
                const decoratorsThis = [];
                for (const decorator of decorators) {
                  const { expression } = decorator;
                  let object;
                  if (("2023-11" === version2 || "2023-05" === version2) && _core.types.isMemberExpression(expression)) if (_core.types.isSuper(expression.object)) object = _core.types.thisExpression();
                  else if (scopeParent.isStatic(expression.object)) object = _core.types.cloneNode(expression.object);
                  else {
                    null != decoratorReceiverId || (decoratorReceiverId = generateLetUidIdentifier(scopeParent, "obj")), object = _core.types.assignmentExpression("=", _core.types.cloneNode(decoratorReceiverId), expression.object), expression.object = _core.types.cloneNode(decoratorReceiverId);
                  }
                  decoratorsThis.push(object), hasSideEffects || (hasSideEffects = !scopeParent.isStatic(expression)), usesFnContext || (usesFnContext = usesFunctionContextOrYieldAwait(decorator));
                }
                return { hasSideEffects, usesFnContext, decoratorsThis };
              }
              const willExtractSomeElemDecs = hasComputedKeysSideEffects || elemDecsUseFnContext || "2023-11" !== version2;
              let classDecorationsId, lastInstancePrivateName, needsDeclaraionForClassBinding = false, classDecorationsFlag = 0, classDecorations = [], computedKeyAssignments = [];
              if (classDecorators) {
                classInitLocal = generateLetUidIdentifier(scopeParent, "initClass"), needsDeclaraionForClassBinding = path10.isClassDeclaration(), { id: classIdLocal, path: path10 } = function(path11, className3) {
                  const id = path11.node.id, scope = path11.scope;
                  if ("ClassDeclaration" === path11.type) {
                    const className4 = id.name, varId = scope.generateUidIdentifierBasedOnNode(id), classId = _core.types.identifier(className4);
                    return scope.rename(className4, varId.name), path11.get("id").replaceWith(classId), { id: _core.types.cloneNode(varId), path: path11 };
                  }
                  {
                    let varId;
                    id ? (className3 = id.name, varId = generateLetUidIdentifier(scope.parent, className3), scope.rename(className3, varId.name)) : varId = generateLetUidIdentifier(scope.parent, "string" == typeof className3 ? className3 : "decorated_class");
                    const newClassExpr = _core.types.classExpression("string" == typeof className3 ? _core.types.identifier(className3) : null, path11.node.superClass, path11.node.body), [newPath2] = path11.replaceWith(_core.types.sequenceExpression([newClassExpr, varId]));
                    return { id: _core.types.cloneNode(varId), path: newPath2.get("expressions.0") };
                  }
                }(path10, className2), path10.node.decorators = null;
                const classDecsUsePrivateName = classDecorators.some(usesPrivateField), { hasSideEffects, usesFnContext, decoratorsThis } = handleDecorators(classDecorators), { haveThis, decs } = generateDecorationList(classDecorators, decoratorsThis, version2);
                if (classDecorationsFlag = haveThis ? 1 : 0, classDecorations = decs, (usesFnContext || hasSideEffects && willExtractSomeElemDecs || classDecsUsePrivateName) && (classDecorationsId = memoiseExpression(_core.types.arrayExpression(classDecorations), "classDecs", classAssignments)), !hasElementDecorators) for (const element of path10.get("body.body")) {
                  const { node: node2 } = element;
                  if ("computed" in node2 && node2.computed) if (element.isClassProperty({ static: true })) {
                    if (!element.get("key").isConstantExpression()) {
                      const key = node2.key, maybeAssignment = (0, _misc.memoiseComputedKey)(key, scopeParent, scopeParent.generateUid("computedKey"));
                      null != maybeAssignment && (node2.key = _core.types.cloneNode(maybeAssignment.left), computedKeyAssignments.push(maybeAssignment));
                    }
                  } else computedKeyAssignments.length > 0 && (prependExpressionsToComputedKey(computedKeyAssignments, element), computedKeyAssignments = []);
                }
              } else assignIdForAnonymousClass(path10, className2), classIdLocal = _core.types.cloneNode(path10.node.id);
              let needsInstancePrivateBrandCheck = false, fieldInitializerExpressions = [], staticFieldInitializerExpressions = [];
              if (hasElementDecorators) {
                if (protoInitLocal) {
                  const protoInitCall = _core.types.callExpression(_core.types.cloneNode(protoInitLocal), [_core.types.thisExpression()]);
                  fieldInitializerExpressions.push(protoInitCall);
                }
                for (const element of body) {
                  if (!isClassDecoratableElementPath(element)) {
                    staticFieldInitializerExpressions.length > 0 && element.isStaticBlock() && (prependExpressionsToStaticBlock(staticFieldInitializerExpressions, element), staticFieldInitializerExpressions = []);
                    continue;
                  }
                  const { node: node2 } = element, decorators = node2.decorators, hasDecorators = !(null == decorators || !decorators.length), isComputed = "computed" in node2 && node2.computed;
                  let decoratorsArray, decoratorsHaveThis, name = "computedKey";
                  if ("PrivateName" === node2.key.type ? name = node2.key.id.name : isComputed || "Identifier" !== node2.key.type || (name = node2.key.name), hasDecorators) {
                    const { hasSideEffects, usesFnContext, decoratorsThis } = handleDecorators(decorators), { decs, haveThis } = generateDecorationList(decorators, decoratorsThis, version2);
                    decoratorsHaveThis = haveThis, decoratorsArray = 1 === decs.length ? decs[0] : _core.types.arrayExpression(decs), (usesFnContext || hasSideEffects && willExtractSomeElemDecs) && (decoratorsArray = memoiseExpression(decoratorsArray, name + "Decs", computedKeyAssignments));
                  }
                  if (isComputed && !element.get("key").isConstantExpression()) {
                    const key2 = node2.key, maybeAssignment = (0, _misc.memoiseComputedKey)(hasDecorators ? createToPropertyKeyCall(state2, key2) : key2, scopeParent, scopeParent.generateUid("computedKey"));
                    null != maybeAssignment && (classDecorators && element.isClassProperty({ static: true }) ? (node2.key = _core.types.cloneNode(maybeAssignment.left), computedKeyAssignments.push(maybeAssignment)) : node2.key = maybeAssignment);
                  }
                  const { key, static: isStatic } = node2, isPrivate = "PrivateName" === key.type, kind = getElementKind(element);
                  let locals;
                  if (isPrivate && !isStatic && (hasDecorators && (needsInstancePrivateBrandCheck = true), !_core.types.isClassPrivateProperty(node2) && lastInstancePrivateName || (lastInstancePrivateName = key)), element.isClassMethod({ kind: "constructor" }) && (constructorPath = element), hasDecorators) {
                    let privateMethods, nameExpr;
                    if (nameExpr = isComputed ? getComputedKeyMemoiser(element.get("key")) : "PrivateName" === key.type ? _core.types.stringLiteral(key.id.name) : "Identifier" === key.type ? _core.types.stringLiteral(key.name) : _core.types.cloneNode(key), kind === ACCESSOR) {
                      const { value: value2 } = element.node, params = "2023-11" === version2 && isStatic ? [] : [_core.types.thisExpression()];
                      value2 && params.push(_core.types.cloneNode(value2));
                      const newId = generateClassPrivateUid(), newFieldInitId = generateLetUidIdentifier(scopeParent, `init_${name}`), newField = generateClassProperty(newId, _core.types.callExpression(_core.types.cloneNode(newFieldInitId), params), isStatic), [newPath2] = element.replaceWith(newField);
                      if (isPrivate) {
                        privateMethods = extractProxyAccessorsFor(newId, version2);
                        const getId = generateLetUidIdentifier(scopeParent, `get_${name}`), setId = generateLetUidIdentifier(scopeParent, `set_${name}`);
                        addCallAccessorsFor(version2, newPath2, key, getId, setId, isStatic), locals = [newFieldInitId, getId, setId];
                      } else assignIdForAnonymousClass(path10, className2), addProxyAccessorsFor(path10.node.id, newPath2, _core.types.cloneNode(key), _core.types.isAssignmentExpression(key) ? _core.types.cloneNode(key.left) : _core.types.cloneNode(key), newId, isComputed, isStatic, version2), locals = [newFieldInitId];
                    } else if (kind === FIELD) {
                      const initId = generateLetUidIdentifier(scopeParent, `init_${name}`), valuePath = element.get("value"), args = "2023-11" === version2 && isStatic ? [] : [_core.types.thisExpression()];
                      valuePath.node && args.push(valuePath.node), valuePath.replaceWith(_core.types.callExpression(_core.types.cloneNode(initId), args)), locals = [initId], isPrivate && (privateMethods = extractProxyAccessorsFor(key, version2));
                    } else if (isPrivate) {
                      const callId = generateLetUidIdentifier(scopeParent, `call_${name}`);
                      locals = [callId];
                      if (new _helperReplaceSupers.default({ constantSuper: constantSuper2, methodPath: element, objectRef: classIdLocal, superRef: path10.node.superClass, file: state2.file, refToPreserve: classIdLocal }).replace(), privateMethods = [createFunctionExpressionFromPrivateMethod(element.node)], kind === GETTER || kind === SETTER) movePrivateAccessor(element, _core.types.cloneNode(key), _core.types.cloneNode(callId), isStatic);
                      else {
                        const node3 = element.node;
                        path10.node.body.body.unshift(_core.types.classPrivateProperty(key, _core.types.cloneNode(callId), [], node3.static)), decoratedPrivateMethods.add(key.id.name), element.remove();
                      }
                    }
                    elementDecoratorInfo.push({ kind, decoratorsArray, decoratorsHaveThis, name: nameExpr, isStatic, privateMethods, locals }), element.node && (element.node.decorators = null);
                  }
                  if (isComputed && computedKeyAssignments.length > 0 && (classDecorators && element.isClassProperty({ static: true }) || (prependExpressionsToComputedKey(computedKeyAssignments, kind === ACCESSOR ? element.getNextSibling() : element), computedKeyAssignments = [])), fieldInitializerExpressions.length > 0 && !isStatic && (kind === FIELD || kind === ACCESSOR) && (prependExpressionsToFieldInitializer(fieldInitializerExpressions, element), fieldInitializerExpressions = []), staticFieldInitializerExpressions.length > 0 && isStatic && (kind === FIELD || kind === ACCESSOR) && (prependExpressionsToFieldInitializer(staticFieldInitializerExpressions, element), staticFieldInitializerExpressions = []), hasDecorators && "2023-11" === version2 && (kind === FIELD || kind === ACCESSOR)) {
                    const initExtraId = generateLetUidIdentifier(scopeParent, `init_extra_${name}`);
                    locals.push(initExtraId);
                    const initExtraCall = _core.types.callExpression(_core.types.cloneNode(initExtraId), isStatic ? [] : [_core.types.thisExpression()]);
                    isStatic ? staticFieldInitializerExpressions.push(initExtraCall) : fieldInitializerExpressions.push(initExtraCall);
                  }
                }
              }
              if (computedKeyAssignments.length > 0) {
                const elements = path10.get("body.body");
                let lastComputedElement;
                for (let i2 = elements.length - 1; i2 >= 0; i2--) {
                  const path11 = elements[i2], node2 = path11.node;
                  if (node2.computed) {
                    if (classDecorators && _core.types.isClassProperty(node2, { static: true })) continue;
                    lastComputedElement = path11;
                    break;
                  }
                }
                null != lastComputedElement && (!function(expressions, fieldPath) {
                  const key = fieldPath.get("key"), completion = getComputedKeyLastElement(key);
                  if (completion.isConstantExpression()) prependExpressionsToComputedKey(expressions, fieldPath);
                  else {
                    const scopeParent2 = key.scope.parent, maybeAssignment = (0, _misc.memoiseComputedKey)(completion.node, scopeParent2, scopeParent2.generateUid("computedKey"));
                    if (maybeAssignment) {
                      const expressionSequence = [...expressions, _core.types.cloneNode(maybeAssignment.left)], completionParent = completion.parentPath;
                      completionParent.isSequenceExpression() ? completionParent.pushContainer("expressions", expressionSequence) : completion.replaceWith(maybeSequenceExpression([_core.types.cloneNode(maybeAssignment), ...expressionSequence]));
                    } else prependExpressionsToComputedKey(expressions, fieldPath);
                  }
                }(computedKeyAssignments, lastComputedElement), computedKeyAssignments = []);
              }
              if (fieldInitializerExpressions.length > 0) {
                const isDerivedClass = !!path10.node.superClass;
                constructorPath ? isDerivedClass ? function(expressions, constructorPath2, protoInitLocal2) {
                  constructorPath2.traverse({ CallExpression: { exit(path11) {
                    if (!path11.get("callee").isSuper()) return;
                    const newNodes = [path11.node, ...expressions.map((expr) => _core.types.cloneNode(expr))];
                    path11.isCompletionRecord() && newNodes.push(_core.types.thisExpression()), path11.replaceWith(function(expressions2, protoInitLocal3) {
                      if (protoInitLocal3) {
                        if (expressions2.length >= 2 && isProtoInitCallExpression(expressions2[1], protoInitLocal3)) {
                          const mergedSuperCall = _core.types.callExpression(_core.types.cloneNode(protoInitLocal3), [expressions2[0]]);
                          expressions2.splice(0, 2, mergedSuperCall);
                        }
                        expressions2.length >= 2 && _core.types.isThisExpression(expressions2[expressions2.length - 1]) && isProtoInitCallExpression(expressions2[expressions2.length - 2], protoInitLocal3) && expressions2.splice(expressions2.length - 1, 1);
                      }
                      return maybeSequenceExpression(expressions2);
                    }(newNodes, protoInitLocal2)), path11.skip();
                  } }, ClassMethod(path11) {
                    "constructor" === path11.node.kind && path11.skip();
                  } });
                }(fieldInitializerExpressions, constructorPath, protoInitLocal) : function(expressions, constructorPath2) {
                  constructorPath2.node.body.body.unshift(_core.types.expressionStatement(maybeSequenceExpression(expressions)));
                }(fieldInitializerExpressions, constructorPath) : path10.node.body.body.unshift(createConstructorFromExpressions(fieldInitializerExpressions, isDerivedClass)), fieldInitializerExpressions = [];
              }
              staticFieldInitializerExpressions.length > 0 && (path10.node.body.body.push(createStaticBlockFromExpressions(staticFieldInitializerExpressions)), staticFieldInitializerExpressions = []);
              const sortedElementDecoratorInfo = (info = elementDecoratorInfo, [...info.filter((el) => el.isStatic && el.kind >= ACCESSOR && el.kind <= SETTER), ...info.filter((el) => !el.isStatic && el.kind >= ACCESSOR && el.kind <= SETTER), ...info.filter((el) => el.isStatic && el.kind === FIELD), ...info.filter((el) => !el.isStatic && el.kind === FIELD)]), elementDecorations = function(decorationInfo, version3) {
                return _core.types.arrayExpression(decorationInfo.map((el) => {
                  let flag = el.kind;
                  return el.isStatic && (flag += "2023-11" === version3 || "2023-05" === version3 ? STATIC : STATIC_OLD_VERSION), el.decoratorsHaveThis && (flag += DECORATORS_HAVE_THIS), _core.types.arrayExpression([el.decoratorsArray, _core.types.numericLiteral(flag), el.name, ...el.privateMethods || []]);
                }));
              }("2023-11" === version2 ? elementDecoratorInfo : sortedElementDecoratorInfo, version2), elementLocals = function(decorationInfo) {
                const localIds = [];
                for (const el of decorationInfo) {
                  const { locals } = el;
                  Array.isArray(locals) ? localIds.push(...locals) : void 0 !== locals && localIds.push(locals);
                }
                return localIds;
              }(sortedElementDecoratorInfo);
              var info;
              protoInitLocal && elementLocals.push(protoInitLocal);
              staticInitLocal && elementLocals.push(staticInitLocal);
              const classLocals = [];
              let classInitInjected = false;
              const classInitCall = classInitLocal && _core.types.callExpression(_core.types.cloneNode(classInitLocal), []);
              let originalClassPath = path10;
              const originalClass = path10.node, staticClosures = [];
              if (classDecorators) {
                classLocals.push(classIdLocal, classInitLocal);
                const statics = [];
                if (path10.get("body.body").forEach((element) => {
                  if (element.isStaticBlock()) {
                    if (hasInstancePrivateAccess(element, instancePrivateNames)) {
                      const staticBlockClosureId = memoiseExpression((block = element.node, _core.types.functionExpression(null, [], _core.types.blockStatement(block.body))), "staticBlock", staticClosures);
                      staticFieldInitializerExpressions.push(_core.types.callExpression(_core.types.memberExpression(staticBlockClosureId, _core.types.identifier("call")), [_core.types.thisExpression()]));
                    } else staticFieldInitializerExpressions.push(function(block2) {
                      return _core.types.callExpression(_core.types.arrowFunctionExpression([], _core.types.blockStatement(block2.body)), []);
                    }(element.node));
                    element.remove();
                  } else {
                    var block;
                    if ((element.isClassProperty() || element.isClassPrivateProperty()) && element.node.static) {
                      const valuePath = element.get("value");
                      if (hasInstancePrivateAccess(valuePath, instancePrivateNames)) {
                        const fieldValueClosureId = memoiseExpression(function(value2) {
                          return _core.types.functionExpression(null, [], _core.types.blockStatement([_core.types.returnStatement(value2)]));
                        }(valuePath.node), "fieldValue", staticClosures);
                        valuePath.replaceWith(_core.types.callExpression(_core.types.memberExpression(fieldValueClosureId, _core.types.identifier("call")), [_core.types.thisExpression()]));
                      }
                      staticFieldInitializerExpressions.length > 0 && (prependExpressionsToFieldInitializer(staticFieldInitializerExpressions, element), staticFieldInitializerExpressions = []), element.node.static = false, statics.push(element.node), element.remove();
                    } else if (element.isClassPrivateMethod({ static: true })) {
                      if (hasInstancePrivateAccess(element, instancePrivateNames)) {
                        new _helperReplaceSupers.default({ constantSuper: constantSuper2, methodPath: element, objectRef: classIdLocal, superRef: path10.node.superClass, file: state2.file, refToPreserve: classIdLocal }).replace();
                        const privateMethodDelegateId = memoiseExpression(createFunctionExpressionFromPrivateMethod(element.node), element.get("key.id").node.name, staticClosures);
                        ignoreFunctionLength2 ? (element.node.params = [_core.types.restElement(_core.types.identifier("arg"))], element.node.body = _core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(_core.types.memberExpression(privateMethodDelegateId, _core.types.identifier("apply")), [_core.types.thisExpression(), _core.types.identifier("arg")]))])) : (element.node.params = element.node.params.map((p, i2) => _core.types.isRestElement(p) ? _core.types.restElement(_core.types.identifier("arg")) : _core.types.identifier("_" + i2)), element.node.body = _core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(_core.types.memberExpression(privateMethodDelegateId, _core.types.identifier("apply")), [_core.types.thisExpression(), _core.types.identifier("arguments")]))]));
                      }
                      element.node.static = false, statics.push(element.node), element.remove();
                    }
                  }
                }), statics.length > 0 || staticFieldInitializerExpressions.length > 0) {
                  const staticsClass = _core.template.expression.ast`
        class extends ${state2.addHelper("identity")} {}
      `;
                  staticsClass.body.body = [_core.types.classProperty(_core.types.toExpression(originalClass), void 0, void 0, void 0, true, true), ...statics];
                  const constructorBody = [], newExpr = _core.types.newExpression(staticsClass, []);
                  staticFieldInitializerExpressions.length > 0 && constructorBody.push(...staticFieldInitializerExpressions), classInitCall && (classInitInjected = true, constructorBody.push(classInitCall)), constructorBody.length > 0 ? (constructorBody.unshift(_core.types.callExpression(_core.types.super(), [_core.types.cloneNode(classIdLocal)])), staticsClass.body.body.push(createConstructorFromExpressions(constructorBody, false))) : newExpr.arguments.push(_core.types.cloneNode(classIdLocal));
                  const [newPath2] = path10.replaceWith(newExpr);
                  originalClassPath = newPath2.get("callee").get("body").get("body.0.key");
                }
              }
              !classInitInjected && classInitCall && path10.node.body.body.push(_core.types.staticBlock([_core.types.expressionStatement(classInitCall)]));
              let { superClass } = originalClass;
              if (superClass && ("2023-11" === version2 || "2023-05" === version2)) {
                const id = path10.scope.maybeGenerateMemoised(superClass);
                id && (originalClass.superClass = _core.types.assignmentExpression("=", id, superClass), superClass = id);
              }
              const applyDecoratorWrapper = _core.types.staticBlock([]);
              originalClass.body.body.unshift(applyDecoratorWrapper);
              const applyDecsBody = applyDecoratorWrapper.body;
              if (computedKeyAssignments.length > 0) {
                const elements = originalClassPath.get("body.body");
                let firstPublicElement;
                for (const path11 of elements) if ((path11.isClassProperty() || path11.isClassMethod()) && "constructor" !== path11.node.kind) {
                  firstPublicElement = path11;
                  break;
                }
                null != firstPublicElement ? (!function(path11) {
                  const { node: node2 } = path11;
                  node2.computed = true, _core.types.isIdentifier(node2.key) && (node2.key = _core.types.stringLiteral(node2.key.name));
                }(firstPublicElement), prependExpressionsToComputedKey(computedKeyAssignments, firstPublicElement)) : (originalClass.body.body.unshift(_core.types.classProperty(_core.types.sequenceExpression([...computedKeyAssignments, _core.types.stringLiteral("_")]), void 0, void 0, void 0, true, true)), applyDecsBody.push(_core.types.expressionStatement(_core.types.unaryExpression("delete", _core.types.memberExpression(_core.types.thisExpression(), _core.types.identifier("_")))))), computedKeyAssignments = [];
              }
              applyDecsBody.push(_core.types.expressionStatement(function(elementLocals2, classLocals2, elementDecorations2, classDecorations2, classDecorationsFlag2, maybePrivateBrandName, setClassName2, superClass2, state3, version3) {
                let lhs, rhs;
                const args = [setClassName2 ? createSetFunctionNameCall(state3, setClassName2) : _core.types.thisExpression(), classDecorations2, elementDecorations2];
                "2023-11" !== version3 && args.splice(1, 2, elementDecorations2, classDecorations2);
                if ("2021-12" === version3 || "2022-03" === version3 && !state3.availableHelper("applyDecs2203R")) return lhs = _core.types.arrayPattern([...elementLocals2, ...classLocals2]), rhs = _core.types.callExpression(state3.addHelper("2021-12" === version3 ? "applyDecs" : "applyDecs2203"), args), _core.types.assignmentExpression("=", lhs, rhs);
                "2022-03" === version3 ? rhs = _core.types.callExpression(state3.addHelper("applyDecs2203R"), args) : "2023-01" === version3 ? (maybePrivateBrandName && args.push(createPrivateBrandCheckClosure(maybePrivateBrandName)), rhs = _core.types.callExpression(state3.addHelper("applyDecs2301"), args)) : "2023-05" === version3 && ((maybePrivateBrandName || superClass2 || 0 !== classDecorationsFlag2.value) && args.push(classDecorationsFlag2), maybePrivateBrandName ? args.push(createPrivateBrandCheckClosure(maybePrivateBrandName)) : superClass2 && args.push(_core.types.unaryExpression("void", _core.types.numericLiteral(0))), superClass2 && args.push(superClass2), rhs = _core.types.callExpression(state3.addHelper("applyDecs2305"), args));
                "2023-11" === version3 && ((maybePrivateBrandName || superClass2 || 0 !== classDecorationsFlag2.value) && args.push(classDecorationsFlag2), maybePrivateBrandName ? args.push(createPrivateBrandCheckClosure(maybePrivateBrandName)) : superClass2 && args.push(_core.types.unaryExpression("void", _core.types.numericLiteral(0))), superClass2 && args.push(superClass2), rhs = _core.types.callExpression(state3.addHelper("applyDecs2311"), args));
                elementLocals2.length > 0 ? classLocals2.length > 0 ? lhs = _core.types.objectPattern([_core.types.objectProperty(_core.types.identifier("e"), _core.types.arrayPattern(elementLocals2)), _core.types.objectProperty(_core.types.identifier("c"), _core.types.arrayPattern(classLocals2))]) : (lhs = _core.types.arrayPattern(elementLocals2), rhs = _core.types.memberExpression(rhs, _core.types.identifier("e"), false, false)) : (lhs = _core.types.arrayPattern(classLocals2), rhs = _core.types.memberExpression(rhs, _core.types.identifier("c"), false, false));
                return _core.types.assignmentExpression("=", lhs, rhs);
              }(elementLocals, classLocals, elementDecorations, null != (_classDecorationsId = classDecorationsId) ? _classDecorationsId : _core.types.arrayExpression(classDecorations), _core.types.numericLiteral(classDecorationsFlag), needsInstancePrivateBrandCheck ? lastInstancePrivateName : null, setClassName, _core.types.cloneNode(superClass), state2, version2))), staticInitLocal && applyDecsBody.push(_core.types.expressionStatement(_core.types.callExpression(_core.types.cloneNode(staticInitLocal), [_core.types.thisExpression()])));
              staticClosures.length > 0 && applyDecsBody.push(...staticClosures.map((expr) => _core.types.expressionStatement(expr)));
              if (path10.insertBefore(classAssignments.map((expr) => _core.types.expressionStatement(expr))), needsDeclaraionForClassBinding) {
                if (scopeParent.getBinding(classIdLocal.name).constantViolations.length) {
                  const classOuterBindingDelegateLocal = scopeParent.generateUidIdentifier("t" + classIdLocal.name), classOuterBindingLocal = classIdLocal;
                  path10.replaceWithMultiple([_core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.cloneNode(classOuterBindingLocal)), _core.types.variableDeclarator(classOuterBindingDelegateLocal)]), _core.types.blockStatement([_core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.cloneNode(classIdLocal))]), path10.node, _core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.cloneNode(classOuterBindingDelegateLocal), _core.types.cloneNode(classIdLocal)))]), _core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.cloneNode(classOuterBindingLocal), _core.types.cloneNode(classOuterBindingDelegateLocal)))]);
                } else path10.insertBefore(_core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.cloneNode(classIdLocal))]));
              }
              decoratedPrivateMethods.size > 0 && function(path11, decoratedPrivateMethods2) {
                const privateNameVisitor = (0, _fields.privateNameVisitorFactory)({ PrivateName(path12, state3) {
                  if (!state3.privateNamesMap.has(path12.node.id.name)) return;
                  const parentPath = path12.parentPath, parentParentPath = parentPath.parentPath;
                  if ("AssignmentExpression" === parentParentPath.node.type && parentParentPath.node.left === parentPath.node || "UpdateExpression" === parentParentPath.node.type || "RestElement" === parentParentPath.node.type || "ArrayPattern" === parentParentPath.node.type || "ObjectProperty" === parentParentPath.node.type && parentParentPath.node.value === parentPath.node && "ObjectPattern" === parentParentPath.parentPath.type || "ForOfStatement" === parentParentPath.node.type && parentParentPath.node.left === parentPath.node) throw path12.buildCodeFrameError(`Decorated private methods are read-only, but "#${path12.node.id.name}" is updated via this expression.`);
                } }), privateNamesMap = /* @__PURE__ */ new Map();
                for (const name of decoratedPrivateMethods2) privateNamesMap.set(name, null);
                path11.traverse(privateNameVisitor, { privateNamesMap });
              }(path10, decoratedPrivateMethods);
              return path10.scope.crawl(), path10;
            }(path9, state, constantSuper, ignoreFunctionLength, className, namedEvaluationVisitor, version);
            newPath ? VISITED.add(newPath) : VISITED.add(path9);
          }
          return { name: "proposal-decorators", inherits, visitor: Object.assign({ ExportDefaultDeclaration(path9, state) {
            const { declaration } = path9.node;
            if ("ClassDeclaration" === (null == declaration ? void 0 : declaration.type) && isDecorated(declaration)) {
              const isAnonymous = !declaration.id;
              null != path9.splitExportDeclaration || (path9.splitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").NodePath.prototype.splitExportDeclaration);
              const updatedVarDeclarationPath = path9.splitExportDeclaration();
              isAnonymous && visitClass(updatedVarDeclarationPath, state, _core.types.stringLiteral("default"));
            }
          }, ExportNamedDeclaration(path9) {
            const { declaration } = path9.node;
            "ClassDeclaration" === (null == declaration ? void 0 : declaration.type) && isDecorated(declaration) && (null != path9.splitExportDeclaration || (path9.splitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").NodePath.prototype.splitExportDeclaration), path9.splitExportDeclaration());
          }, Class(path9, state) {
            visitClass(path9, state, void 0);
          } }, namedEvaluationVisitor) };
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _helperReplaceSupers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-replace-supers@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-replace-supers/lib/index.js"), _helperSkipTransparentExpressionWrappers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.25.9/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js"), _fields = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/fields.js"), _misc = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/misc.js");
        function incrementId(id, idx = id.length - 1) {
          if (-1 === idx) return void id.unshift(65);
          const current = id[idx];
          90 === current ? id[idx] = 97 : 122 === current ? (id[idx] = 65, incrementId(id, idx - 1)) : id[idx] = current + 1;
        }
        function generateClassProperty(key, value2, isStatic) {
          return "PrivateName" === key.type ? _core.types.classPrivateProperty(key, value2, void 0, isStatic) : _core.types.classProperty(key, value2, void 0, void 0, isStatic);
        }
        function assignIdForAnonymousClass(path9, className) {
          path9.node.id || (path9.node.id = "string" == typeof className ? _core.types.identifier(className) : path9.scope.generateUidIdentifier("Class"));
        }
        function addProxyAccessorsFor(className, element, getterKey, setterKey, targetKey, isComputed, isStatic, version) {
          const thisArg = "2023-11" !== version && "2023-05" !== version || !isStatic ? _core.types.thisExpression() : className, getterBody = _core.types.blockStatement([_core.types.returnStatement(_core.types.memberExpression(_core.types.cloneNode(thisArg), _core.types.cloneNode(targetKey)))]), setterBody = _core.types.blockStatement([_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.memberExpression(_core.types.cloneNode(thisArg), _core.types.cloneNode(targetKey)), _core.types.identifier("v")))]);
          let getter, setter;
          "PrivateName" === getterKey.type ? (getter = _core.types.classPrivateMethod("get", getterKey, [], getterBody, isStatic), setter = _core.types.classPrivateMethod("set", setterKey, [_core.types.identifier("v")], setterBody, isStatic)) : (getter = _core.types.classMethod("get", getterKey, [], getterBody, isComputed, isStatic), setter = _core.types.classMethod("set", setterKey, [_core.types.identifier("v")], setterBody, isComputed, isStatic)), element.insertAfter(setter), element.insertAfter(getter);
        }
        function extractProxyAccessorsFor(targetKey, version) {
          return "2023-11" !== version && "2023-05" !== version && "2023-01" !== version ? [_core.template.expression.ast`
        function () {
          return this.${_core.types.cloneNode(targetKey)};
        }
      `, _core.template.expression.ast`
        function (value) {
          this.${_core.types.cloneNode(targetKey)} = value;
        }
      `] : [_core.template.expression.ast`
      o => o.${_core.types.cloneNode(targetKey)}
    `, _core.template.expression.ast`
      (o, v) => o.${_core.types.cloneNode(targetKey)} = v
    `];
        }
        function getComputedKeyLastElement(path9) {
          if ((path9 = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path9)).isSequenceExpression()) {
            const expressions = path9.get("expressions");
            return getComputedKeyLastElement(expressions[expressions.length - 1]);
          }
          return path9;
        }
        function getComputedKeyMemoiser(path9) {
          const element = getComputedKeyLastElement(path9);
          if (element.isConstantExpression()) return _core.types.cloneNode(path9.node);
          if (element.isIdentifier() && path9.scope.hasUid(element.node.name)) return _core.types.cloneNode(path9.node);
          if (element.isAssignmentExpression() && element.get("left").isIdentifier()) return _core.types.cloneNode(element.node.left);
          throw new Error(`Internal Error: the computed key ${path9.toString()} has not yet been memoised.`);
        }
        function prependExpressionsToComputedKey(expressions, fieldPath) {
          const key = fieldPath.get("key");
          key.isSequenceExpression() ? expressions.push(...key.node.expressions) : expressions.push(key.node), key.replaceWith(maybeSequenceExpression(expressions));
        }
        function prependExpressionsToFieldInitializer(expressions, fieldPath) {
          const initializer = fieldPath.get("value");
          initializer.node ? expressions.push(initializer.node) : expressions.length > 0 && (expressions[expressions.length - 1] = _core.types.unaryExpression("void", expressions[expressions.length - 1])), initializer.replaceWith(maybeSequenceExpression(expressions));
        }
        function prependExpressionsToStaticBlock(expressions, blockPath) {
          blockPath.unshiftContainer("body", _core.types.expressionStatement(maybeSequenceExpression(expressions)));
        }
        function isProtoInitCallExpression(expression, protoInitCall) {
          return _core.types.isCallExpression(expression) && _core.types.isIdentifier(expression.callee, { name: protoInitCall.name });
        }
        function createConstructorFromExpressions(expressions, isDerivedClass) {
          const body = [_core.types.expressionStatement(maybeSequenceExpression(expressions))];
          return isDerivedClass && body.unshift(_core.types.expressionStatement(_core.types.callExpression(_core.types.super(), [_core.types.spreadElement(_core.types.identifier("args"))]))), _core.types.classMethod("constructor", _core.types.identifier("constructor"), isDerivedClass ? [_core.types.restElement(_core.types.identifier("args"))] : [], _core.types.blockStatement(body));
        }
        function createStaticBlockFromExpressions(expressions) {
          return _core.types.staticBlock([_core.types.expressionStatement(maybeSequenceExpression(expressions))]);
        }
        const FIELD = 0, ACCESSOR = 1, METHOD = 2, GETTER = 3, SETTER = 4, STATIC_OLD_VERSION = 5, STATIC = 8, DECORATORS_HAVE_THIS = 16;
        function getElementKind(element) {
          switch (element.node.type) {
            case "ClassProperty":
            case "ClassPrivateProperty":
              return FIELD;
            case "ClassAccessorProperty":
              return ACCESSOR;
            case "ClassMethod":
            case "ClassPrivateMethod":
              return "get" === element.node.kind ? GETTER : "set" === element.node.kind ? SETTER : METHOD;
          }
        }
        function generateDecorationList(decorators, decoratorsThis, version) {
          const decsCount = decorators.length, haveOneThis = decoratorsThis.some(Boolean), decs = [];
          for (let i2 = 0; i2 < decsCount; i2++) "2023-11" !== version && "2023-05" !== version || !haveOneThis || decs.push(decoratorsThis[i2] || _core.types.unaryExpression("void", _core.types.numericLiteral(0))), decs.push(decorators[i2].expression);
          return { haveThis: haveOneThis, decs };
        }
        function addCallAccessorsFor(version, element, key, getId, setId, isStatic) {
          element.insertAfter(_core.types.classPrivateMethod("get", _core.types.cloneNode(key), [], _core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(_core.types.cloneNode(getId), "2023-11" === version && isStatic ? [] : [_core.types.thisExpression()]))]), isStatic)), element.insertAfter(_core.types.classPrivateMethod("set", _core.types.cloneNode(key), [_core.types.identifier("v")], _core.types.blockStatement([_core.types.expressionStatement(_core.types.callExpression(_core.types.cloneNode(setId), "2023-11" === version && isStatic ? [_core.types.identifier("v")] : [_core.types.thisExpression(), _core.types.identifier("v")]))]), isStatic));
        }
        function movePrivateAccessor(element, key, methodLocalVar, isStatic) {
          let params, block;
          "set" === element.node.kind ? (params = [_core.types.identifier("v")], block = [_core.types.expressionStatement(_core.types.callExpression(methodLocalVar, [_core.types.thisExpression(), _core.types.identifier("v")]))]) : (params = [], block = [_core.types.returnStatement(_core.types.callExpression(methodLocalVar, [_core.types.thisExpression()]))]), element.replaceWith(_core.types.classPrivateMethod(element.node.kind, _core.types.cloneNode(key), params, _core.types.blockStatement(block), isStatic));
        }
        function isClassDecoratableElementPath(path9) {
          const { type } = path9;
          return "TSDeclareMethod" !== type && "TSIndexSignature" !== type && "StaticBlock" !== type;
        }
        function maybeSequenceExpression(exprs) {
          return 0 === exprs.length ? _core.types.unaryExpression("void", _core.types.numericLiteral(0)) : 1 === exprs.length ? exprs[0] : _core.types.sequenceExpression(exprs);
        }
        function createFunctionExpressionFromPrivateMethod(node) {
          const { params, body, generator: isGenerator2, async: isAsync } = node;
          return _core.types.functionExpression(void 0, params, body, isGenerator2, isAsync);
        }
        function createSetFunctionNameCall(state, className) {
          return _core.types.callExpression(state.addHelper("setFunctionName"), [_core.types.thisExpression(), className]);
        }
        function createToPropertyKeyCall(state, propertyKey) {
          return _core.types.callExpression(state.addHelper("toPropertyKey"), [propertyKey]);
        }
        function createPrivateBrandCheckClosure(brandName) {
          return _core.types.arrowFunctionExpression([_core.types.identifier("_")], _core.types.binaryExpression("in", _core.types.cloneNode(brandName), _core.types.identifier("_")));
        }
        function usesPrivateField(expression) {
          try {
            return _core.types.traverseFast(expression, (node) => {
              if (_core.types.isPrivateName(node)) throw null;
            }), false;
          } catch (_unused) {
            return true;
          }
        }
        function hasInstancePrivateAccess(path9, privateNames) {
          let containsInstancePrivateAccess = false;
          if (privateNames.length > 0) {
            const privateNameVisitor = (0, _fields.privateNameVisitorFactory)({ PrivateName(path10, state) {
              state.privateNamesMap.has(path10.node.id.name) && (containsInstancePrivateAccess = true, path10.stop());
            } }), privateNamesMap = /* @__PURE__ */ new Map();
            for (const name of privateNames) privateNamesMap.set(name, null);
            path9.traverse(privateNameVisitor, { privateNamesMap });
          }
          return containsInstancePrivateAccess;
        }
        function isProtoKey(node) {
          return "Identifier" === node.type ? "__proto__" === node.name : "__proto__" === node.value;
        }
        function isDecorated(node) {
          return node.decorators && node.decorators.length > 0;
        }
        function shouldTransformElement(node) {
          switch (node.type) {
            case "ClassAccessorProperty":
              return true;
            case "ClassMethod":
            case "ClassProperty":
            case "ClassPrivateMethod":
            case "ClassPrivateProperty":
              return isDecorated(node);
            default:
              return false;
          }
        }
        function isDecoratedAnonymousClassExpression(path9) {
          return path9.isClassExpression({ id: null }) && (isDecorated(node = path9.node) || node.body.body.some(shouldTransformElement));
          var node;
        }
        function generateLetUidIdentifier(scope, name) {
          const id = scope.generateUidIdentifier(name);
          return scope.push({ id, kind: "let" }), _core.types.cloneNode(id);
        }
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/features.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.FEATURES = void 0, exports2.enableFeature = function(file, feature, loose) {
          hasFeature(file, feature) && !canIgnoreLoose(file, feature) || (file.set(featuresKey, file.get(featuresKey) | feature), "#__internal__@babel/preset-env__prefer-true-but-false-is-ok-if-it-prevents-an-error" === loose ? (setLoose(file, feature, true), file.set(looseLowPriorityKey, file.get(looseLowPriorityKey) | feature)) : "#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error" === loose ? (setLoose(file, feature, false), file.set(looseLowPriorityKey, file.get(looseLowPriorityKey) | feature)) : setLoose(file, feature, loose));
          let resolvedLoose;
          for (const [mask, name] of featuresSameLoose) {
            if (!hasFeature(file, mask)) continue;
            if (canIgnoreLoose(file, mask)) continue;
            const loose2 = isLoose(file, mask);
            if (resolvedLoose === !loose2) throw new Error("'loose' mode configuration must be the same for @babel/plugin-transform-class-properties, @babel/plugin-transform-private-methods and @babel/plugin-transform-private-property-in-object (when they are enabled).\n\n" + getBabelShowConfigForHint(file));
            resolvedLoose = loose2;
            var higherPriorityPluginName = name;
          }
          if (void 0 !== resolvedLoose) for (const [mask, name] of featuresSameLoose) hasFeature(file, mask) && isLoose(file, mask) !== resolvedLoose && (setLoose(file, mask, resolvedLoose), console.warn(`Though the "loose" option was set to "${!resolvedLoose}" in your @babel/preset-env config, it will not be used for ${name} since the "loose" mode option was set to "${resolvedLoose}" for ${higherPriorityPluginName}.
The "loose" option must be the same for @babel/plugin-transform-class-properties, @babel/plugin-transform-private-methods and @babel/plugin-transform-private-property-in-object (when they are enabled): you can silence this warning by explicitly adding
	["${name}", { "loose": ${resolvedLoose} }]
to the "plugins" section of your Babel config.

` + getBabelShowConfigForHint(file)));
        }, exports2.isLoose = isLoose, exports2.shouldTransform = function(path9, file) {
          let decoratorPath = null, publicFieldPath = null, privateFieldPath = null, privateMethodPath = null, staticBlockPath = null;
          (0, _decorators.hasOwnDecorators)(path9.node) && (decoratorPath = path9.get("decorators.0"));
          for (const el of path9.get("body.body")) !decoratorPath && (0, _decorators.hasOwnDecorators)(el.node) && (decoratorPath = el.get("decorators.0")), !publicFieldPath && el.isClassProperty() && (publicFieldPath = el), !privateFieldPath && el.isClassPrivateProperty() && (privateFieldPath = el), !privateMethodPath && null != el.isClassPrivateMethod && el.isClassPrivateMethod() && (privateMethodPath = el), !staticBlockPath && null != el.isStaticBlock && el.isStaticBlock() && (staticBlockPath = el);
          if (decoratorPath && privateFieldPath) throw privateFieldPath.buildCodeFrameError("Private fields in decorated classes are not supported yet.");
          if (decoratorPath && privateMethodPath) throw privateMethodPath.buildCodeFrameError("Private methods in decorated classes are not supported yet.");
          if (decoratorPath && !hasFeature(file, FEATURES.decorators)) throw path9.buildCodeFrameError('Decorators are not enabled.\nIf you are using ["@babel/plugin-proposal-decorators", { "version": "legacy" }], make sure it comes *before* "@babel/plugin-transform-class-properties" and enable loose mode, like so:\n	["@babel/plugin-proposal-decorators", { "version": "legacy" }]\n	["@babel/plugin-transform-class-properties", { "loose": true }]');
          if (privateMethodPath && !hasFeature(file, FEATURES.privateMethods)) throw privateMethodPath.buildCodeFrameError("Class private methods are not enabled. Please add `@babel/plugin-transform-private-methods` to your configuration.");
          if ((publicFieldPath || privateFieldPath) && !hasFeature(file, FEATURES.fields) && !hasFeature(file, FEATURES.privateMethods)) throw path9.buildCodeFrameError("Class fields are not enabled. Please add `@babel/plugin-transform-class-properties` to your configuration.");
          if (staticBlockPath && !hasFeature(file, FEATURES.staticBlocks)) throw path9.buildCodeFrameError("Static class blocks are not enabled. Please add `@babel/plugin-transform-class-static-block` to your configuration.");
          if (decoratorPath || privateMethodPath || staticBlockPath) return true;
          if ((publicFieldPath || privateFieldPath) && hasFeature(file, FEATURES.fields)) return true;
          return false;
        };
        var _decorators = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/decorators-2018-09.js");
        const FEATURES = exports2.FEATURES = Object.freeze({ fields: 2, privateMethods: 4, decorators: 8, privateIn: 16, staticBlocks: 32 }), featuresSameLoose = /* @__PURE__ */ new Map([[FEATURES.fields, "@babel/plugin-transform-class-properties"], [FEATURES.privateMethods, "@babel/plugin-transform-private-methods"], [FEATURES.privateIn, "@babel/plugin-transform-private-property-in-object"]]), featuresKey = "@babel/plugin-class-features/featuresKey", looseKey = "@babel/plugin-class-features/looseKey";
        var looseLowPriorityKey = "@babel/plugin-class-features/looseLowPriorityKey/#__internal__@babel/preset-env__please-overwrite-loose-instead-of-throwing", canIgnoreLoose = function(file, feature) {
          return !!(file.get(looseLowPriorityKey) & feature);
        };
        function getBabelShowConfigForHint(file) {
          let { filename } = file.opts;
          return filename && "unknown" !== filename || (filename = "[name of the input file]"), `If you already set the same 'loose' mode for these plugins in your config, it's possible that they are enabled multiple times with different options.
You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:
	npx cross-env BABEL_SHOW_CONFIG_FOR=${filename} <your build command>
See https://babeljs.io/docs/configuration#print-effective-configs for more info.`;
        }
        function hasFeature(file, feature) {
          return !!(file.get(featuresKey) & feature);
        }
        function isLoose(file, feature) {
          return !!(file.get(looseKey) & feature);
        }
        function setLoose(file, feature, loose) {
          loose ? file.set(looseKey, file.get(looseKey) | feature) : file.set(looseKey, file.get(looseKey) & ~feature), file.set(looseLowPriorityKey, file.get(looseLowPriorityKey) & ~feature);
        }
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/fields.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.buildCheckInRHS = buildCheckInRHS, exports2.buildFieldsInitNodes = function(ref, superRef, props, privateNamesMap, file, setPublicClassFields, privateFieldsAsSymbolsOrProperties, noUninitializedPrivateFieldAccess, constantSuper, innerBindingRef) {
          var _ref;
          let injectSuperRef, classRefFlags = 0;
          const staticNodes = [], instanceNodes = [];
          let lastInstanceNodeReturnsThis = false;
          const pureStaticNodes = [];
          let classBindingNode = null;
          const getSuperRef = _core.types.isIdentifier(superRef) ? () => superRef : () => (null != injectSuperRef || (injectSuperRef = props[0].scope.generateUidIdentifierBasedOnNode(superRef)), injectSuperRef), classRefForInnerBinding = null != (_ref = ref) ? _ref : props[0].scope.generateUidIdentifier((null == innerBindingRef ? void 0 : innerBindingRef.name) || "Class");
          null != ref || (ref = _core.types.cloneNode(innerBindingRef));
          for (const prop of props) {
            prop.isClassProperty() && ts.assertFieldTransformed(prop);
            const isStatic = !(null != _core.types.isStaticBlock && _core.types.isStaticBlock(prop.node)) && prop.node.static, isInstance = !isStatic, isPrivate = prop.isPrivate(), isPublic = !isPrivate, isField = prop.isProperty(), isMethod = !isField, isStaticBlock = null == prop.isStaticBlock ? void 0 : prop.isStaticBlock();
            if (isStatic && (classRefFlags |= 1), isStatic || isMethod && isPrivate || isStaticBlock) {
              new _helperReplaceSupers.default({ methodPath: prop, constantSuper, file, refToPreserve: innerBindingRef, getSuperRef, getObjectRef: () => (classRefFlags |= 2, isStatic || isStaticBlock ? classRefForInnerBinding : _core.types.memberExpression(classRefForInnerBinding, _core.types.identifier("prototype"))) }).replace();
              replaceThisContext(prop, classRefForInnerBinding, innerBindingRef) && (classRefFlags |= 2);
            }
            switch (lastInstanceNodeReturnsThis = false, true) {
              case isStaticBlock: {
                const blockBody = prop.node.body;
                1 === blockBody.length && _core.types.isExpressionStatement(blockBody[0]) ? staticNodes.push(inheritPropComments(blockBody[0], prop)) : staticNodes.push(_core.types.inheritsComments(_core.template.statement.ast`(() => { ${blockBody} })()`, prop.node));
                break;
              }
              case (isStatic && isPrivate && isField && privateFieldsAsSymbolsOrProperties):
                staticNodes.push(buildPrivateFieldInitLoose(_core.types.cloneNode(ref), prop, privateNamesMap));
                break;
              case (isStatic && isPrivate && isField && !privateFieldsAsSymbolsOrProperties):
                newHelpers(file) ? staticNodes.push(buildPrivateStaticFieldInitSpec(prop, privateNamesMap, noUninitializedPrivateFieldAccess)) : staticNodes.push(buildPrivateStaticFieldInitSpecOld(prop, privateNamesMap));
                break;
              case (isStatic && isPublic && isField && setPublicClassFields):
                if (!isNameOrLength(prop.node)) {
                  staticNodes.push(buildPublicFieldInitLoose(_core.types.cloneNode(ref), prop));
                  break;
                }
              case (isStatic && isPublic && isField && !setPublicClassFields):
                staticNodes.push(buildPublicFieldInitSpec(_core.types.cloneNode(ref), prop, file));
                break;
              case (isInstance && isPrivate && isField && privateFieldsAsSymbolsOrProperties):
                instanceNodes.push(buildPrivateFieldInitLoose(_core.types.thisExpression(), prop, privateNamesMap));
                break;
              case (isInstance && isPrivate && isField && !privateFieldsAsSymbolsOrProperties):
                instanceNodes.push(buildPrivateInstanceFieldInitSpec(_core.types.thisExpression(), prop, privateNamesMap, file));
                break;
              case (isInstance && isPrivate && isMethod && privateFieldsAsSymbolsOrProperties):
                instanceNodes.unshift(buildPrivateMethodInitLoose(_core.types.thisExpression(), prop, privateNamesMap)), pureStaticNodes.push(buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));
                break;
              case (isInstance && isPrivate && isMethod && !privateFieldsAsSymbolsOrProperties):
                instanceNodes.unshift(buildPrivateInstanceMethodInitSpec(_core.types.thisExpression(), prop, privateNamesMap, file)), pureStaticNodes.push(buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));
                break;
              case (isStatic && isPrivate && isMethod && !privateFieldsAsSymbolsOrProperties):
                newHelpers(file) || staticNodes.unshift(buildPrivateStaticFieldInitSpecOld(prop, privateNamesMap)), pureStaticNodes.push(buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));
                break;
              case (isStatic && isPrivate && isMethod && privateFieldsAsSymbolsOrProperties):
                staticNodes.unshift(buildPrivateStaticMethodInitLoose(_core.types.cloneNode(ref), prop, file, privateNamesMap)), pureStaticNodes.push(buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));
                break;
              case (isInstance && isPublic && isField && setPublicClassFields):
                instanceNodes.push(buildPublicFieldInitLoose(_core.types.thisExpression(), prop));
                break;
              case (isInstance && isPublic && isField && !setPublicClassFields):
                lastInstanceNodeReturnsThis = true, instanceNodes.push(buildPublicFieldInitSpec(_core.types.thisExpression(), prop, file));
                break;
              default:
                throw new Error("Unreachable.");
            }
          }
          2 & classRefFlags && null != innerBindingRef && (classBindingNode = _core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.cloneNode(classRefForInnerBinding), _core.types.cloneNode(innerBindingRef))));
          return { staticNodes: staticNodes.filter(Boolean), instanceNodes: instanceNodes.filter(Boolean), lastInstanceNodeReturnsThis, pureStaticNodes: pureStaticNodes.filter(Boolean), classBindingNode, wrapClass(path9) {
            for (const prop of props) prop.node.leadingComments = null, prop.remove();
            return injectSuperRef && (path9.scope.push({ id: _core.types.cloneNode(injectSuperRef) }), path9.set("superClass", _core.types.assignmentExpression("=", injectSuperRef, path9.node.superClass))), 0 !== classRefFlags && (path9.isClassExpression() ? (path9.scope.push({ id: ref }), path9.replaceWith(_core.types.assignmentExpression("=", _core.types.cloneNode(ref), path9.node))) : (null == innerBindingRef && (path9.node.id = ref), null != classBindingNode && path9.scope.push({ id: classRefForInnerBinding }))), path9;
          } };
        }, exports2.buildPrivateNamesMap = function(className, privateFieldsAsSymbolsOrProperties, props, file) {
          const privateNamesMap = /* @__PURE__ */ new Map();
          let classBrandId;
          for (const prop of props) if (prop.isPrivate()) {
            const { name } = prop.node.key.id;
            let update = privateNamesMap.get(name);
            if (!update) {
              const isMethod = !prop.isProperty(), isStatic = prop.node.static;
              let id, initAdded = false;
              if (!privateFieldsAsSymbolsOrProperties && newHelpers(file) && isMethod && !isStatic) initAdded = !!classBrandId, null != classBrandId || (classBrandId = prop.scope.generateUidIdentifier(`${className}_brand`)), id = classBrandId;
              else id = prop.scope.generateUidIdentifier(name);
              update = { id, static: isStatic, method: isMethod, initAdded }, privateNamesMap.set(name, update);
            }
            if (prop.isClassPrivateMethod()) if ("get" === prop.node.kind) {
              const { body } = prop.node.body;
              let $3;
              1 === body.length && _core.types.isReturnStatement($3 = body[0]) && _core.types.isCallExpression($3 = $3.argument) && 1 === $3.arguments.length && _core.types.isThisExpression($3.arguments[0]) && _core.types.isIdentifier($3 = $3.callee) ? (update.getId = _core.types.cloneNode($3), update.getterDeclared = true) : update.getId = prop.scope.generateUidIdentifier(`get_${name}`);
            } else if ("set" === prop.node.kind) {
              const { params } = prop.node, { body } = prop.node.body;
              let $3;
              1 === body.length && _core.types.isExpressionStatement($3 = body[0]) && _core.types.isCallExpression($3 = $3.expression) && 2 === $3.arguments.length && _core.types.isThisExpression($3.arguments[0]) && _core.types.isIdentifier($3.arguments[1], { name: params[0].name }) && _core.types.isIdentifier($3 = $3.callee) ? (update.setId = _core.types.cloneNode($3), update.setterDeclared = true) : update.setId = prop.scope.generateUidIdentifier(`set_${name}`);
            } else "method" === prop.node.kind && (update.methodId = prop.scope.generateUidIdentifier(name));
            privateNamesMap.set(name, update);
          }
          return privateNamesMap;
        }, exports2.buildPrivateNamesNodes = function(privateNamesMap, privateFieldsAsProperties, privateFieldsAsSymbols, state) {
          const initNodes = [], injectedIds = /* @__PURE__ */ new Set();
          for (const [name, value2] of privateNamesMap) {
            const { static: isStatic, method: isMethod, getId, setId } = value2, isGetterOrSetter = getId || setId, id = _core.types.cloneNode(value2.id);
            let init;
            if (privateFieldsAsProperties) init = _core.types.callExpression(state.addHelper("classPrivateFieldLooseKey"), [_core.types.stringLiteral(name)]);
            else if (privateFieldsAsSymbols) init = _core.types.callExpression(_core.types.identifier("Symbol"), [_core.types.stringLiteral(name)]);
            else if (!isStatic) {
              if (injectedIds.has(id.name)) continue;
              injectedIds.add(id.name), init = _core.types.newExpression(_core.types.identifier(!isMethod || isGetterOrSetter && !newHelpers(state) ? "WeakMap" : "WeakSet"), []);
            }
            init && (privateFieldsAsSymbols || (0, _helperAnnotateAsPure.default)(init), initNodes.push(_core.template.statement.ast`var ${id} = ${init}`));
          }
          return initNodes;
        }, exports2.privateNameVisitorFactory = privateNameVisitorFactory, exports2.transformPrivateNamesUsage = function(ref, path9, privateNamesMap, { privateFieldsAsProperties, noUninitializedPrivateFieldAccess, noDocumentAll, innerBinding }, state) {
          if (!privateNamesMap.size) return;
          const body = path9.get("body"), handler = privateFieldsAsProperties ? privateNameHandlerLoose : privateNameHandlerSpec;
          (0, _helperMemberExpressionToFunctions.default)(body, privateNameVisitor, Object.assign({ privateNamesMap, classRef: ref, file: state }, handler, { noDocumentAll, noUninitializedPrivateFieldAccess, innerBinding })), body.traverse(privateInVisitor, { privateNamesMap, classRef: ref, file: state, privateFieldsAsProperties, innerBinding });
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _traverse = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js"), _helperReplaceSupers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-replace-supers@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-replace-supers/lib/index.js"), _helperMemberExpressionToFunctions = __webpack_require__2("./node_modules/.pnpm/@babel+helper-member-expression-to-functions@7.25.9/node_modules/@babel/helper-member-expression-to-functions/lib/index.js"), _helperOptimiseCallExpression = __webpack_require__2("./node_modules/.pnpm/@babel+helper-optimise-call-expression@7.25.9/node_modules/@babel/helper-optimise-call-expression/lib/index.js"), _helperAnnotateAsPure = __webpack_require__2("./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.25.9/node_modules/@babel/helper-annotate-as-pure/lib/index.js"), _helperSkipTransparentExpressionWrappers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.25.9/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js"), ts = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js"), newHelpers = (file) => file.availableHelper("classPrivateFieldGet2");
        function privateNameVisitorFactory(visitor) {
          const nestedVisitor = _traverse.visitors.environmentVisitor(Object.assign({}, visitor)), privateNameVisitor2 = Object.assign({}, visitor, { Class(path9) {
            const { privateNamesMap } = this, body = path9.get("body.body"), visiblePrivateNames = new Map(privateNamesMap), redeclared = [];
            for (const prop of body) {
              if (!prop.isPrivate()) continue;
              const { name } = prop.node.key.id;
              visiblePrivateNames.delete(name), redeclared.push(name);
            }
            redeclared.length && (path9.get("body").traverse(nestedVisitor, Object.assign({}, this, { redeclared })), path9.traverse(privateNameVisitor2, Object.assign({}, this, { privateNamesMap: visiblePrivateNames })), path9.skipKey("body"));
          } });
          return privateNameVisitor2;
        }
        const privateNameVisitor = privateNameVisitorFactory({ PrivateName(path9, { noDocumentAll }) {
          const { privateNamesMap, redeclared } = this, { node, parentPath } = path9;
          if (!parentPath.isMemberExpression({ property: node }) && !parentPath.isOptionalMemberExpression({ property: node })) return;
          const { name } = node.id;
          privateNamesMap.has(name) && (null != redeclared && redeclared.includes(name) || this.handle(parentPath, noDocumentAll));
        } });
        function unshadow(name, scope, innerBinding) {
          for (; null != (_scope = scope) && _scope.hasBinding(name) && !scope.bindingIdentifierEquals(name, innerBinding); ) {
            var _scope;
            scope.rename(name), scope = scope.parent;
          }
        }
        function buildCheckInRHS(rhs, file, inRHSIsObject) {
          return inRHSIsObject || null == file.availableHelper || !file.availableHelper("checkInRHS") ? rhs : _core.types.callExpression(file.addHelper("checkInRHS"), [rhs]);
        }
        const privateInVisitor = privateNameVisitorFactory({ BinaryExpression(path9, { file }) {
          const { operator, left, right } = path9.node;
          if ("in" !== operator) return;
          if (!_core.types.isPrivateName(left)) return;
          const { privateFieldsAsProperties, privateNamesMap, redeclared } = this, { name } = left.id;
          if (!privateNamesMap.has(name)) return;
          if (null != redeclared && redeclared.includes(name)) return;
          if (unshadow(this.classRef.name, path9.scope, this.innerBinding), privateFieldsAsProperties) {
            const { id: id2 } = privateNamesMap.get(name);
            return void path9.replaceWith(_core.template.expression.ast`
        Object.prototype.hasOwnProperty.call(${buildCheckInRHS(right, file)}, ${_core.types.cloneNode(id2)})
      `);
          }
          const { id, static: isStatic } = privateNamesMap.get(name);
          isStatic ? path9.replaceWith(_core.template.expression.ast`${buildCheckInRHS(right, file)} === ${_core.types.cloneNode(this.classRef)}`) : path9.replaceWith(_core.template.expression.ast`${_core.types.cloneNode(id)}.has(${buildCheckInRHS(right, file)})`);
        } });
        function readOnlyError(file, name) {
          return _core.types.callExpression(file.addHelper("readOnlyError"), [_core.types.stringLiteral(`#${name}`)]);
        }
        function writeOnlyError(file, name) {
          return file.availableHelper("writeOnlyError") ? _core.types.callExpression(file.addHelper("writeOnlyError"), [_core.types.stringLiteral(`#${name}`)]) : (console.warn("@babel/helpers is outdated, update it to silence this warning."), _core.types.buildUndefinedNode());
        }
        function buildStaticPrivateFieldAccess(expr, noUninitializedPrivateFieldAccess) {
          return noUninitializedPrivateFieldAccess ? expr : _core.types.memberExpression(expr, _core.types.identifier("_"));
        }
        function autoInherits(fn) {
          return function(member) {
            return _core.types.inherits(fn.apply(this, arguments), member.node);
          };
        }
        const privateNameHandlerSpec = { memoise(member, count2) {
          const { scope } = member, { object } = member.node, memo = scope.maybeGenerateMemoised(object);
          memo && this.memoiser.set(object, memo, count2);
        }, receiver(member) {
          const { object } = member.node;
          return this.memoiser.has(object) ? _core.types.cloneNode(this.memoiser.get(object)) : _core.types.cloneNode(object);
        }, get: autoInherits(function(member) {
          const { classRef, privateNamesMap, file, innerBinding, noUninitializedPrivateFieldAccess } = this, privateName = member.node.property, { name } = privateName.id, { id, static: isStatic, method: isMethod, methodId, getId, setId } = privateNamesMap.get(name), isGetterOrSetter = getId || setId, cloneId = (id2) => _core.types.inherits(_core.types.cloneNode(id2), privateName);
          if (isStatic) {
            if (unshadow(classRef.name, member.scope, innerBinding), !newHelpers(file)) {
              const helperName = isMethod && !isGetterOrSetter ? "classStaticPrivateMethodGet" : "classStaticPrivateFieldSpecGet";
              return _core.types.callExpression(file.addHelper(helperName), [this.receiver(member), _core.types.cloneNode(classRef), cloneId(id)]);
            }
            const receiver = this.receiver(member), skipCheck = _core.types.isIdentifier(receiver) && receiver.name === classRef.name;
            if (!isMethod) return buildStaticPrivateFieldAccess(skipCheck ? cloneId(id) : _core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver, cloneId(id)]), noUninitializedPrivateFieldAccess);
            if (getId) return skipCheck ? _core.types.callExpression(cloneId(getId), [receiver]) : _core.types.callExpression(file.addHelper("classPrivateGetter"), [_core.types.cloneNode(classRef), receiver, cloneId(getId)]);
            if (setId) {
              const err = _core.types.buildUndefinedNode();
              return skipCheck ? err : _core.types.sequenceExpression([_core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver]), err]);
            }
            return skipCheck ? cloneId(id) : _core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver, cloneId(id)]);
          }
          return isMethod ? isGetterOrSetter ? getId ? newHelpers(file) ? _core.types.callExpression(file.addHelper("classPrivateGetter"), [_core.types.cloneNode(id), this.receiver(member), cloneId(getId)]) : _core.types.callExpression(file.addHelper("classPrivateFieldGet"), [this.receiver(member), cloneId(id)]) : _core.types.sequenceExpression([this.receiver(member), writeOnlyError(file, name)]) : newHelpers(file) ? _core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(id), this.receiver(member), cloneId(methodId)]) : _core.types.callExpression(file.addHelper("classPrivateMethodGet"), [this.receiver(member), _core.types.cloneNode(id), cloneId(methodId)]) : newHelpers(file) ? _core.types.callExpression(file.addHelper("classPrivateFieldGet2"), [cloneId(id), this.receiver(member)]) : _core.types.callExpression(file.addHelper("classPrivateFieldGet"), [this.receiver(member), cloneId(id)]);
        }), boundGet(member) {
          return this.memoise(member, 1), _core.types.callExpression(_core.types.memberExpression(this.get(member), _core.types.identifier("bind")), [this.receiver(member)]);
        }, set: autoInherits(function(member, value2) {
          const { classRef, privateNamesMap, file, noUninitializedPrivateFieldAccess } = this, privateName = member.node.property, { name } = privateName.id, { id, static: isStatic, method: isMethod, setId, getId } = privateNamesMap.get(name), isGetterOrSetter = getId || setId, cloneId = (id2) => _core.types.inherits(_core.types.cloneNode(id2), privateName);
          if (isStatic) {
            if (!newHelpers(file)) {
              const helperName = isMethod && !isGetterOrSetter ? "classStaticPrivateMethodSet" : "classStaticPrivateFieldSpecSet";
              return _core.types.callExpression(file.addHelper(helperName), [this.receiver(member), _core.types.cloneNode(classRef), cloneId(id), value2]);
            }
            const receiver = this.receiver(member), skipCheck = _core.types.isIdentifier(receiver) && receiver.name === classRef.name;
            if (isMethod && !setId) {
              const err = readOnlyError(file, name);
              return skipCheck ? _core.types.sequenceExpression([value2, err]) : _core.types.sequenceExpression([value2, _core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver]), readOnlyError(file, name)]);
            }
            return setId ? skipCheck ? _core.types.callExpression(_core.types.cloneNode(setId), [receiver, value2]) : _core.types.callExpression(file.addHelper("classPrivateSetter"), [_core.types.cloneNode(classRef), cloneId(setId), receiver, value2]) : _core.types.assignmentExpression("=", buildStaticPrivateFieldAccess(cloneId(id), noUninitializedPrivateFieldAccess), skipCheck ? value2 : _core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver, value2]));
          }
          return isMethod ? setId ? newHelpers(file) ? _core.types.callExpression(file.addHelper("classPrivateSetter"), [_core.types.cloneNode(id), cloneId(setId), this.receiver(member), value2]) : _core.types.callExpression(file.addHelper("classPrivateFieldSet"), [this.receiver(member), cloneId(id), value2]) : _core.types.sequenceExpression([this.receiver(member), value2, readOnlyError(file, name)]) : newHelpers(file) ? _core.types.callExpression(file.addHelper("classPrivateFieldSet2"), [cloneId(id), this.receiver(member), value2]) : _core.types.callExpression(file.addHelper("classPrivateFieldSet"), [this.receiver(member), cloneId(id), value2]);
        }), destructureSet(member) {
          const { classRef, privateNamesMap, file, noUninitializedPrivateFieldAccess } = this, privateName = member.node.property, { name } = privateName.id, { id, static: isStatic, method: isMethod, setId } = privateNamesMap.get(name), cloneId = (id2) => _core.types.inherits(_core.types.cloneNode(id2), privateName);
          if (!newHelpers(file)) {
            if (isStatic) {
              try {
                var helper = file.addHelper("classStaticPrivateFieldDestructureSet");
              } catch (_unused) {
                throw new Error("Babel can not transpile `[C.#p] = [0]` with @babel/helpers < 7.13.10, \nplease update @babel/helpers to the latest version.");
              }
              return _core.types.memberExpression(_core.types.callExpression(helper, [this.receiver(member), _core.types.cloneNode(classRef), cloneId(id)]), _core.types.identifier("value"));
            }
            return _core.types.memberExpression(_core.types.callExpression(file.addHelper("classPrivateFieldDestructureSet"), [this.receiver(member), cloneId(id)]), _core.types.identifier("value"));
          }
          if (isMethod && !setId) return _core.types.memberExpression(_core.types.sequenceExpression([member.node.object, readOnlyError(file, name)]), _core.types.identifier("_"));
          if (isStatic && !isMethod) {
            const getCall = this.get(member);
            if (!noUninitializedPrivateFieldAccess || !_core.types.isCallExpression(getCall)) return getCall;
            const ref = getCall.arguments.pop();
            return getCall.arguments.push(_core.template.expression.ast`(_) => ${ref} = _`), _core.types.memberExpression(_core.types.callExpression(file.addHelper("toSetter"), [getCall]), _core.types.identifier("_"));
          }
          const setCall = this.set(member, _core.types.identifier("_"));
          if (!_core.types.isCallExpression(setCall) || !_core.types.isIdentifier(setCall.arguments[setCall.arguments.length - 1], { name: "_" })) throw member.buildCodeFrameError("Internal Babel error while compiling this code. This is a Babel bug. Please report it at https://github.com/babel/babel/issues.");
          let args;
          return args = _core.types.isMemberExpression(setCall.callee, { computed: false }) && _core.types.isIdentifier(setCall.callee.property) && "call" === setCall.callee.property.name ? [setCall.callee.object, _core.types.arrayExpression(setCall.arguments.slice(1, -1)), setCall.arguments[0]] : [setCall.callee, _core.types.arrayExpression(setCall.arguments.slice(0, -1))], _core.types.memberExpression(_core.types.callExpression(file.addHelper("toSetter"), args), _core.types.identifier("_"));
        }, call(member, args) {
          return this.memoise(member, 1), (0, _helperOptimiseCallExpression.default)(this.get(member), this.receiver(member), args, false);
        }, optionalCall(member, args) {
          return this.memoise(member, 1), (0, _helperOptimiseCallExpression.default)(this.get(member), this.receiver(member), args, true);
        }, delete() {
          throw new Error("Internal Babel error: deleting private elements is a parsing error.");
        } }, privateNameHandlerLoose = { get(member) {
          const { privateNamesMap, file } = this, { object } = member.node, { name } = member.node.property.id;
          return _core.template.expression`BASE(REF, PROP)[PROP]`({ BASE: file.addHelper("classPrivateFieldLooseBase"), REF: _core.types.cloneNode(object), PROP: _core.types.cloneNode(privateNamesMap.get(name).id) });
        }, set() {
          throw new Error("private name handler with loose = true don't need set()");
        }, boundGet(member) {
          return _core.types.callExpression(_core.types.memberExpression(this.get(member), _core.types.identifier("bind")), [_core.types.cloneNode(member.node.object)]);
        }, simpleSet(member) {
          return this.get(member);
        }, destructureSet(member) {
          return this.get(member);
        }, call(member, args) {
          return _core.types.callExpression(this.get(member), args);
        }, optionalCall(member, args) {
          return _core.types.optionalCallExpression(this.get(member), args, true);
        }, delete() {
          throw new Error("Internal Babel error: deleting private elements is a parsing error.");
        } };
        function buildPrivateFieldInitLoose(ref, prop, privateNamesMap) {
          const { id } = privateNamesMap.get(prop.node.key.id.name), value2 = prop.node.value || prop.scope.buildUndefinedNode();
          return inheritPropComments(_core.template.statement.ast`
      Object.defineProperty(${ref}, ${_core.types.cloneNode(id)}, {
        // configurable is false by default
        // enumerable is false by default
        writable: true,
        value: ${value2}
      });
    `, prop);
        }
        function buildPrivateInstanceFieldInitSpec(ref, prop, privateNamesMap, state) {
          const { id } = privateNamesMap.get(prop.node.key.id.name), value2 = prop.node.value || prop.scope.buildUndefinedNode();
          if (!state.availableHelper("classPrivateFieldInitSpec")) return inheritPropComments(_core.template.statement.ast`${_core.types.cloneNode(id)}.set(${ref}, {
          // configurable is always false for private elements
          // enumerable is always false for private elements
          writable: true,
          value: ${value2},
        })`, prop);
          const helper = state.addHelper("classPrivateFieldInitSpec");
          return inheritLoc(inheritPropComments(_core.types.expressionStatement(_core.types.callExpression(helper, [_core.types.thisExpression(), inheritLoc(_core.types.cloneNode(id), prop.node.key), newHelpers(state) ? value2 : _core.template.expression.ast`{ writable: true, value: ${value2} }`])), prop), prop.node);
        }
        function buildPrivateStaticFieldInitSpec(prop, privateNamesMap, noUninitializedPrivateFieldAccess) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), value2 = noUninitializedPrivateFieldAccess ? prop.node.value : _core.template.expression.ast`{
        _: ${prop.node.value || _core.types.buildUndefinedNode()}
      }`;
          return inheritPropComments(_core.types.variableDeclaration("var", [_core.types.variableDeclarator(_core.types.cloneNode(privateName.id), value2)]), prop);
        }
        var buildPrivateStaticFieldInitSpecOld = function(prop, privateNamesMap) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), { id, getId, setId, initAdded } = privateName, isGetterOrSetter = getId || setId;
          if (!prop.isProperty() && (initAdded || !isGetterOrSetter)) return;
          if (isGetterOrSetter) return privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: true })), inheritPropComments(_core.template.statement.ast`
          var ${_core.types.cloneNode(id)} = {
            // configurable is false by default
            // enumerable is false by default
            // writable is false by default
            get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
            set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
          }
        `, prop);
          const value2 = prop.node.value || prop.scope.buildUndefinedNode();
          return inheritPropComments(_core.template.statement.ast`
        var ${_core.types.cloneNode(id)} = {
          // configurable is false by default
          // enumerable is false by default
          writable: true,
          value: ${value2}
        };
      `, prop);
        };
        function buildPrivateMethodInitLoose(ref, prop, privateNamesMap) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), { methodId, id, getId, setId, initAdded } = privateName;
          if (initAdded) return;
          if (methodId) return inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          value: ${methodId.name}
        });
      `, prop);
          return getId || setId ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: true })), inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
        });
      `, prop)) : void 0;
        }
        function buildPrivateInstanceMethodInitSpec(ref, prop, privateNamesMap, state) {
          const privateName = privateNamesMap.get(prop.node.key.id.name);
          if (!privateName.initAdded) {
            if (!newHelpers(state)) {
              if (privateName.getId || privateName.setId) return function(ref2, prop2, privateNamesMap2, state2) {
                const privateName2 = privateNamesMap2.get(prop2.node.key.id.name), { id, getId, setId } = privateName2;
                if (privateNamesMap2.set(prop2.node.key.id.name, Object.assign({}, privateName2, { initAdded: true })), !state2.availableHelper("classPrivateFieldInitSpec")) return inheritPropComments(_core.template.statement.ast`
          ${id}.set(${ref2}, {
            get: ${getId ? getId.name : prop2.scope.buildUndefinedNode()},
            set: ${setId ? setId.name : prop2.scope.buildUndefinedNode()}
          });
        `, prop2);
                const helper = state2.addHelper("classPrivateFieldInitSpec");
                return inheritLoc(inheritPropComments(_core.template.statement.ast`${helper}(
      ${_core.types.thisExpression()},
      ${_core.types.cloneNode(id)},
      {
        get: ${getId ? getId.name : prop2.scope.buildUndefinedNode()},
        set: ${setId ? setId.name : prop2.scope.buildUndefinedNode()}
      },
    )`, prop2), prop2.node);
              }(ref, prop, privateNamesMap, state);
            }
            return function(ref2, prop2, privateNamesMap2, state2) {
              const privateName2 = privateNamesMap2.get(prop2.node.key.id.name), { id } = privateName2;
              if (!state2.availableHelper("classPrivateMethodInitSpec")) return inheritPropComments(_core.template.statement.ast`${id}.add(${ref2})`, prop2);
              const helper = state2.addHelper("classPrivateMethodInitSpec");
              return inheritPropComments(_core.template.statement.ast`${helper}(
      ${_core.types.thisExpression()},
      ${_core.types.cloneNode(id)}
    )`, prop2);
            }(ref, prop, privateNamesMap, state);
          }
        }
        function buildPublicFieldInitLoose(ref, prop) {
          const { key, computed } = prop.node, value2 = prop.node.value || prop.scope.buildUndefinedNode();
          return inheritPropComments(_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.memberExpression(ref, key, computed || _core.types.isLiteral(key)), value2)), prop);
        }
        function buildPublicFieldInitSpec(ref, prop, state) {
          const { key, computed } = prop.node, value2 = prop.node.value || prop.scope.buildUndefinedNode();
          return inheritPropComments(_core.types.expressionStatement(_core.types.callExpression(state.addHelper("defineProperty"), [ref, computed || _core.types.isLiteral(key) ? key : _core.types.stringLiteral(key.name), value2])), prop);
        }
        function buildPrivateStaticMethodInitLoose(ref, prop, state, privateNamesMap) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), { id, methodId, getId, setId, initAdded } = privateName;
          if (initAdded) return;
          return getId || setId ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: true })), inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
        })
      `, prop)) : inheritPropComments(_core.template.statement.ast`
      Object.defineProperty(${ref}, ${id}, {
        // configurable is false by default
        // enumerable is false by default
        // writable is false by default
        value: ${methodId.name}
      });
    `, prop);
        }
        function buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties = false) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), { id, methodId, getId, setId, getterDeclared, setterDeclared, static: isStatic } = privateName, { params, body, generator, async } = prop.node, isGetter = getId && 0 === params.length, isSetter = setId && params.length > 0;
          if (isGetter && getterDeclared || isSetter && setterDeclared) return privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: true })), null;
          if (newHelpers(file) && (isGetter || isSetter) && !privateFieldsAsSymbolsOrProperties) {
            const scope = prop.get("body").scope, thisArg = scope.generateUidIdentifier("this"), state = { thisRef: thisArg, argumentsPath: [] };
            if (prop.traverse(thisContextVisitor, state), state.argumentsPath.length) {
              const argumentsId = scope.generateUidIdentifier("arguments");
              scope.push({ id: argumentsId, init: _core.template.expression.ast`[].slice.call(arguments, 1)` });
              for (const path9 of state.argumentsPath) path9.replaceWith(_core.types.cloneNode(argumentsId));
            }
            params.unshift(_core.types.cloneNode(thisArg));
          }
          let declId = methodId;
          return isGetter ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { getterDeclared: true, initAdded: true })), declId = getId) : isSetter ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { setterDeclared: true, initAdded: true })), declId = setId) : isStatic && !privateFieldsAsSymbolsOrProperties && (declId = id), inheritPropComments(_core.types.functionDeclaration(_core.types.cloneNode(declId), params, body, generator, async), prop);
        }
        const thisContextVisitor = _traverse.visitors.environmentVisitor({ Identifier(path9, state) {
          state.argumentsPath && "arguments" === path9.node.name && state.argumentsPath.push(path9);
        }, UnaryExpression(path9) {
          const { node } = path9;
          if ("delete" === node.operator) {
            const argument = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes)(node.argument);
            _core.types.isThisExpression(argument) && path9.replaceWith(_core.types.booleanLiteral(true));
          }
        }, ThisExpression(path9, state) {
          state.needsClassRef = true, path9.replaceWith(_core.types.cloneNode(state.thisRef));
        }, MetaProperty(path9) {
          const { node, scope } = path9;
          "new" === node.meta.name && "target" === node.property.name && path9.replaceWith(scope.buildUndefinedNode());
        } }), innerReferencesVisitor = { ReferencedIdentifier(path9, state) {
          path9.scope.bindingIdentifierEquals(path9.node.name, state.innerBinding) && (state.needsClassRef = true, path9.node.name = state.thisRef.name);
        } };
        function replaceThisContext(path9, ref, innerBindingRef) {
          var _state$thisRef;
          const state = { thisRef: ref, needsClassRef: false, innerBinding: innerBindingRef };
          return path9.isMethod() || path9.traverse(thisContextVisitor, state), null != innerBindingRef && null != (_state$thisRef = state.thisRef) && _state$thisRef.name && state.thisRef.name !== innerBindingRef.name && path9.traverse(innerReferencesVisitor, state), state.needsClassRef;
        }
        function isNameOrLength({ key, computed }) {
          return "Identifier" === key.type ? !computed && ("name" === key.name || "length" === key.name) : "StringLiteral" === key.type && ("name" === key.value || "length" === key.value);
        }
        function inheritPropComments(node, prop) {
          return _core.types.inheritLeadingComments(node, prop.node), _core.types.inheritInnerComments(node, prop.node), node;
        }
        function inheritLoc(node, original) {
          return node.start = original.start, node.end = original.end, node.loc = original.loc, node;
        }
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "FEATURES", { enumerable: true, get: function() {
          return _features.FEATURES;
        } }), Object.defineProperty(exports2, "buildCheckInRHS", { enumerable: true, get: function() {
          return _fields.buildCheckInRHS;
        } }), exports2.createClassFeaturePlugin = function({ name, feature, loose, manipulateOptions, api, inherits, decoratorVersion }) {
          var _api$assumption;
          if (feature & _features.FEATURES.decorators && ("2023-11" === decoratorVersion || "2023-05" === decoratorVersion || "2023-01" === decoratorVersion || "2022-03" === decoratorVersion || "2021-12" === decoratorVersion)) return (0, _decorators.default)(api, { loose }, decoratorVersion, inherits);
          null != api || (api = { assumption: () => {
          } });
          const setPublicClassFields = api.assumption("setPublicClassFields"), privateFieldsAsSymbols = api.assumption("privateFieldsAsSymbols"), privateFieldsAsProperties = api.assumption("privateFieldsAsProperties"), noUninitializedPrivateFieldAccess = null != (_api$assumption = api.assumption("noUninitializedPrivateFieldAccess")) && _api$assumption, constantSuper = api.assumption("constantSuper"), noDocumentAll = api.assumption("noDocumentAll");
          if (privateFieldsAsProperties && privateFieldsAsSymbols) throw new Error('Cannot enable both the "privateFieldsAsProperties" and "privateFieldsAsSymbols" assumptions as the same time.');
          const privateFieldsAsSymbolsOrProperties = privateFieldsAsProperties || privateFieldsAsSymbols;
          if (true === loose) {
            const explicit = [];
            void 0 !== setPublicClassFields && explicit.push('"setPublicClassFields"'), void 0 !== privateFieldsAsProperties && explicit.push('"privateFieldsAsProperties"'), void 0 !== privateFieldsAsSymbols && explicit.push('"privateFieldsAsSymbols"'), 0 !== explicit.length && console.warn(`[${name}]: You are using the "loose: true" option and you are explicitly setting a value for the ${explicit.join(" and ")} assumption${explicit.length > 1 ? "s" : ""}. The "loose" option can cause incompatibilities with the other class features plugins, so it's recommended that you replace it with the following top-level option:
	"assumptions": {
		"setPublicClassFields": true,
		"privateFieldsAsSymbols": true
	}`);
          }
          return { name, manipulateOptions, inherits, pre(file) {
            (0, _features.enableFeature)(file, feature, loose), "number" != typeof file.get(versionKey) && file.get(versionKey) && !_semver.lt(file.get(versionKey), "7.25.9") || file.set(versionKey, "7.25.9");
          }, visitor: { Class(path9, { file }) {
            var _ref;
            if ("7.25.9" !== file.get(versionKey)) return;
            if (!(0, _features.shouldTransform)(path9, file)) return;
            const pathIsClassDeclaration = path9.isClassDeclaration();
            pathIsClassDeclaration && (0, _typescript.assertFieldTransformed)(path9);
            const loose2 = (0, _features.isLoose)(file, feature);
            let constructor;
            const isDecorated = (0, _decorators2.hasDecorators)(path9.node), props = [], elements = [], computedPaths = [], privateNames = /* @__PURE__ */ new Set(), body = path9.get("body");
            for (const path10 of body.get("body")) {
              if ((path10.isClassProperty() || path10.isClassMethod()) && path10.node.computed && computedPaths.push(path10), path10.isPrivate()) {
                const { name: name2 } = path10.node.key.id, getName = `get ${name2}`, setName = `set ${name2}`;
                if (path10.isClassPrivateMethod()) {
                  if ("get" === path10.node.kind) {
                    if (privateNames.has(getName) || privateNames.has(name2) && !privateNames.has(setName)) throw path10.buildCodeFrameError("Duplicate private field");
                    privateNames.add(getName).add(name2);
                  } else if ("set" === path10.node.kind) {
                    if (privateNames.has(setName) || privateNames.has(name2) && !privateNames.has(getName)) throw path10.buildCodeFrameError("Duplicate private field");
                    privateNames.add(setName).add(name2);
                  }
                } else {
                  if (privateNames.has(name2) && !privateNames.has(getName) && !privateNames.has(setName) || privateNames.has(name2) && (privateNames.has(getName) || privateNames.has(setName))) throw path10.buildCodeFrameError("Duplicate private field");
                  privateNames.add(name2);
                }
              }
              path10.isClassMethod({ kind: "constructor" }) ? constructor = path10 : (elements.push(path10), (path10.isProperty() || path10.isPrivate() || null != path10.isStaticBlock && path10.isStaticBlock()) && props.push(path10));
            }
            if (!props.length && !isDecorated) return;
            const innerBinding = path9.node.id;
            let ref;
            innerBinding && pathIsClassDeclaration || (null != path9.ensureFunctionName || (path9.ensureFunctionName = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").NodePath.prototype.ensureFunctionName), path9.ensureFunctionName(false), ref = path9.scope.generateUidIdentifier((null == innerBinding ? void 0 : innerBinding.name) || "Class"));
            const classRefForDefine = null != (_ref = ref) ? _ref : _core.types.cloneNode(innerBinding), privateNamesMap = (0, _fields.buildPrivateNamesMap)(classRefForDefine.name, null != privateFieldsAsSymbolsOrProperties ? privateFieldsAsSymbolsOrProperties : loose2, props, file), privateNamesNodes = (0, _fields.buildPrivateNamesNodes)(privateNamesMap, null != privateFieldsAsProperties ? privateFieldsAsProperties : loose2, null != privateFieldsAsSymbols && privateFieldsAsSymbols, file);
            let keysNodes, staticNodes, instanceNodes, lastInstanceNodeReturnsThis, pureStaticNodes, classBindingNode, wrapClass;
            (0, _fields.transformPrivateNamesUsage)(classRefForDefine, path9, privateNamesMap, { privateFieldsAsProperties: null != privateFieldsAsSymbolsOrProperties ? privateFieldsAsSymbolsOrProperties : loose2, noUninitializedPrivateFieldAccess, noDocumentAll, innerBinding }, file), isDecorated ? (staticNodes = pureStaticNodes = keysNodes = [], { instanceNodes, wrapClass } = (0, _decorators2.buildDecoratedClass)(classRefForDefine, path9, elements, file)) : (keysNodes = (0, _misc.extractComputedKeys)(path9, computedPaths, file), { staticNodes, pureStaticNodes, instanceNodes, lastInstanceNodeReturnsThis, classBindingNode, wrapClass } = (0, _fields.buildFieldsInitNodes)(ref, path9.node.superClass, props, privateNamesMap, file, null != setPublicClassFields ? setPublicClassFields : loose2, null != privateFieldsAsSymbolsOrProperties ? privateFieldsAsSymbolsOrProperties : loose2, noUninitializedPrivateFieldAccess, null != constantSuper ? constantSuper : loose2, innerBinding)), instanceNodes.length > 0 && (0, _misc.injectInitialization)(path9, constructor, instanceNodes, (referenceVisitor, state) => {
              if (!isDecorated) for (const prop of props) null != _core.types.isStaticBlock && _core.types.isStaticBlock(prop.node) || prop.node.static || prop.traverse(referenceVisitor, state);
            }, lastInstanceNodeReturnsThis);
            const wrappedPath = wrapClass(path9);
            wrappedPath.insertBefore([...privateNamesNodes, ...keysNodes]), staticNodes.length > 0 && wrappedPath.insertAfter(staticNodes), pureStaticNodes.length > 0 && wrappedPath.find((parent) => parent.isStatement() || parent.isDeclaration()).insertAfter(pureStaticNodes), null != classBindingNode && pathIsClassDeclaration && wrappedPath.insertAfter(classBindingNode);
          }, ExportDefaultDeclaration(path9, { file }) {
            {
              if ("7.25.9" !== file.get(versionKey)) return;
              const decl = path9.get("declaration");
              if (decl.isClassDeclaration() && (0, _decorators2.hasDecorators)(decl.node)) if (decl.node.id) null != path9.splitExportDeclaration || (path9.splitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").NodePath.prototype.splitExportDeclaration), path9.splitExportDeclaration();
              else decl.node.type = "ClassExpression";
            }
          } } };
        }, Object.defineProperty(exports2, "enableFeature", { enumerable: true, get: function() {
          return _features.enableFeature;
        } }), Object.defineProperty(exports2, "injectInitialization", { enumerable: true, get: function() {
          return _misc.injectInitialization;
        } });
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _decorators = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/decorators.js"), _semver = __webpack_require__2("./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js"), _fields = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/fields.js"), _decorators2 = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/decorators-2018-09.js"), _misc = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/misc.js"), _features = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/features.js"), _typescript = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js");
        const versionKey = "@babel/plugin-class-features/version";
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/misc.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.extractComputedKeys = function(path9, computedPaths, file) {
          const { scope } = path9, declarations = [], state = { classBinding: path9.node.id && scope.getBinding(path9.node.id.name), file };
          for (const computedPath of computedPaths) {
            const computedKey = computedPath.get("key");
            computedKey.isReferencedIdentifier() ? handleClassTDZ(computedKey, state) : computedKey.traverse(classFieldDefinitionEvaluationTDZVisitor, state);
            const computedNode = computedPath.node;
            if (!computedKey.isConstantExpression()) {
              const assignment = memoiseComputedKey(computedKey.node, scope, scope.generateUidBasedOnNode(computedKey.node));
              assignment && (declarations.push(_core.types.expressionStatement(assignment)), computedNode.key = _core.types.cloneNode(assignment.left));
            }
          }
          return declarations;
        }, exports2.injectInitialization = function(path9, constructor, nodes, renamer, lastReturnsThis) {
          if (!nodes.length) return;
          const isDerived = !!path9.node.superClass;
          if (!constructor) {
            const newConstructor = _core.types.classMethod("constructor", _core.types.identifier("constructor"), [], _core.types.blockStatement([]));
            isDerived && (newConstructor.params = [_core.types.restElement(_core.types.identifier("args"))], newConstructor.body.body.push(_core.template.statement.ast`super(...args)`)), [constructor] = path9.get("body").unshiftContainer("body", newConstructor);
          }
          renamer && renamer(referenceVisitor, { scope: constructor.scope });
          if (isDerived) {
            const bareSupers = [];
            constructor.traverse(findBareSupers, bareSupers);
            let isFirst = true;
            for (const bareSuper of bareSupers) if (isFirst ? isFirst = false : nodes = nodes.map((n2) => _core.types.cloneNode(n2)), bareSuper.parentPath.isExpressionStatement()) bareSuper.insertAfter(nodes);
            else {
              const allNodes = [bareSuper.node, ...nodes.map((n2) => _core.types.toExpression(n2))];
              lastReturnsThis || allNodes.push(_core.types.thisExpression()), bareSuper.replaceWith(_core.types.sequenceExpression(allNodes));
            }
          } else constructor.get("body").unshiftContainer("body", nodes);
        }, exports2.memoiseComputedKey = memoiseComputedKey;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
        const findBareSupers = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").visitors.environmentVisitor({ Super(path9) {
          const { node, parentPath } = path9;
          parentPath.isCallExpression({ callee: node }) && this.push(parentPath);
        } }), referenceVisitor = { "TSTypeAnnotation|TypeAnnotation"(path9) {
          path9.skip();
        }, ReferencedIdentifier(path9, { scope }) {
          scope.hasOwnBinding(path9.node.name) && (scope.rename(path9.node.name), path9.skip());
        } };
        function handleClassTDZ(path9, state) {
          if (state.classBinding && state.classBinding === path9.scope.getBinding(path9.node.name)) {
            const classNameTDZError = state.file.addHelper("classNameTDZError"), throwNode = _core.types.callExpression(classNameTDZError, [_core.types.stringLiteral(path9.node.name)]);
            path9.replaceWith(_core.types.sequenceExpression([throwNode, path9.node])), path9.skip();
          }
        }
        const classFieldDefinitionEvaluationTDZVisitor = { ReferencedIdentifier: handleClassTDZ };
        function memoiseComputedKey(keyNode, scope, hint) {
          if (_core.types.isIdentifier(keyNode) && scope.hasUid(keyNode.name)) return;
          if (_core.types.isAssignmentExpression(keyNode, { operator: "=" }) && _core.types.isIdentifier(keyNode.left) && scope.hasUid(keyNode.left.name)) return _core.types.cloneNode(keyNode);
          {
            const ident = _core.types.identifier(hint);
            return scope.push({ id: ident, kind: "let" }), _core.types.assignmentExpression("=", _core.types.cloneNode(ident), keyNode);
          }
        }
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.assertFieldTransformed = function(path9) {
          if (path9.node.declare) throw path9.buildCodeFrameError("TypeScript 'declare' fields must first be transformed by @babel/plugin-transform-typescript.\nIf you have already enabled that plugin (or '@babel/preset-typescript'), make sure that it runs before any plugin related to additional class features:\n - @babel/plugin-transform-class-properties\n - @babel/plugin-transform-private-methods\n - @babel/plugin-proposal-decorators");
        };
      }, "./node_modules/.pnpm/@babel+helper-member-expression-to-functions@7.25.9/node_modules/@babel/helper-member-expression-to-functions/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _interopNamespace(e2) {
          if (e2 && e2.__esModule) return e2;
          var n2 = /* @__PURE__ */ Object.create(null);
          return e2 && Object.keys(e2).forEach(function(k3) {
            if ("default" !== k3) {
              var d2 = Object.getOwnPropertyDescriptor(e2, k3);
              Object.defineProperty(n2, k3, d2.get ? d2 : { enumerable: true, get: function() {
                return e2[k3];
              } });
            }
          }), n2.default = e2, Object.freeze(n2);
        }
        Object.defineProperty(exports2, "__esModule", { value: true });
        var _t__namespace = _interopNamespace(__webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"));
        function willPathCastToBoolean(path9) {
          const maybeWrapped = path9, { node, parentPath } = maybeWrapped;
          if (parentPath.isLogicalExpression()) {
            const { operator, right } = parentPath.node;
            if ("&&" === operator || "||" === operator || "??" === operator && node === right) return willPathCastToBoolean(parentPath);
          }
          if (parentPath.isSequenceExpression()) {
            const { expressions } = parentPath.node;
            return expressions[expressions.length - 1] !== node || willPathCastToBoolean(parentPath);
          }
          return parentPath.isConditional({ test: node }) || parentPath.isUnaryExpression({ operator: "!" }) || parentPath.isLoop({ test: node });
        }
        const { LOGICAL_OPERATORS, arrowFunctionExpression, assignmentExpression, binaryExpression, booleanLiteral, callExpression, cloneNode: cloneNode2, conditionalExpression, identifier, isMemberExpression, isOptionalCallExpression, isOptionalMemberExpression, isUpdateExpression, logicalExpression, memberExpression, nullLiteral, optionalCallExpression, optionalMemberExpression, sequenceExpression, updateExpression } = _t__namespace;
        class AssignmentMemoiser {
          constructor() {
            this._map = void 0, this._map = /* @__PURE__ */ new WeakMap();
          }
          has(key) {
            return this._map.has(key);
          }
          get(key) {
            if (!this.has(key)) return;
            const record = this._map.get(key), { value: value2 } = record;
            return record.count--, 0 === record.count ? assignmentExpression("=", value2, key) : value2;
          }
          set(key, value2, count2) {
            return this._map.set(key, { count: count2, value: value2 });
          }
        }
        function toNonOptional(path9, base) {
          const { node } = path9;
          if (isOptionalMemberExpression(node)) return memberExpression(base, node.property, node.computed);
          if (path9.isOptionalCallExpression()) {
            const callee = path9.get("callee");
            if (path9.node.optional && callee.isOptionalMemberExpression()) {
              const object = callee.node.object, context = path9.scope.maybeGenerateMemoised(object);
              return callee.get("object").replaceWith(assignmentExpression("=", context, object)), callExpression(memberExpression(base, identifier("call")), [context, ...path9.node.arguments]);
            }
            return callExpression(base, path9.node.arguments);
          }
          return path9.node;
        }
        const handle = { memoise() {
        }, handle(member, noDocumentAll) {
          const { node, parent, parentPath, scope } = member;
          if (member.isOptionalMemberExpression()) {
            if (function(path9) {
              for (; path9 && !path9.isProgram(); ) {
                const { parentPath: parentPath2, container, listKey } = path9, parentNode = parentPath2.node;
                if (listKey) {
                  if (container !== parentNode[listKey]) return true;
                } else if (container !== parentNode) return true;
                path9 = parentPath2;
              }
              return false;
            }(member)) return;
            const endPath = member.find(({ node: node2, parent: parent2 }) => isOptionalMemberExpression(parent2) ? parent2.optional || parent2.object !== node2 : !isOptionalCallExpression(parent2) || (node2 !== member.node && parent2.optional || parent2.callee !== node2));
            if (scope.path.isPattern()) return void endPath.replaceWith(callExpression(arrowFunctionExpression([], endPath.node), []));
            const willEndPathCastToBoolean = willPathCastToBoolean(endPath), rootParentPath = endPath.parentPath;
            if (rootParentPath.isUpdateExpression({ argument: node })) throw member.buildCodeFrameError("can't handle update expression");
            const isAssignment = rootParentPath.isAssignmentExpression({ left: endPath.node }), isDeleteOperation = rootParentPath.isUnaryExpression({ operator: "delete" });
            if (isDeleteOperation && endPath.isOptionalMemberExpression() && endPath.get("property").isPrivateName()) throw member.buildCodeFrameError("can't delete a private class element");
            let startingOptional = member;
            for (; ; ) if (startingOptional.isOptionalMemberExpression()) {
              if (startingOptional.node.optional) break;
              startingOptional = startingOptional.get("object");
            } else {
              if (!startingOptional.isOptionalCallExpression()) throw new Error(`Internal error: unexpected ${startingOptional.node.type}`);
              if (startingOptional.node.optional) break;
              startingOptional = startingOptional.get("callee");
            }
            const startingNode = startingOptional.isOptionalMemberExpression() ? startingOptional.node.object : startingOptional.node.callee, baseNeedsMemoised = scope.maybeGenerateMemoised(startingNode), baseRef = null != baseNeedsMemoised ? baseNeedsMemoised : startingNode, parentIsOptionalCall = parentPath.isOptionalCallExpression({ callee: node }), isOptionalCall = (parent2) => parentIsOptionalCall, parentIsCall = parentPath.isCallExpression({ callee: node });
            startingOptional.replaceWith(toNonOptional(startingOptional, baseRef)), isOptionalCall() ? parent.optional ? parentPath.replaceWith(this.optionalCall(member, parent.arguments)) : parentPath.replaceWith(this.call(member, parent.arguments)) : parentIsCall ? member.replaceWith(this.boundGet(member)) : this.delete && parentPath.isUnaryExpression({ operator: "delete" }) ? parentPath.replaceWith(this.delete(member)) : parentPath.isAssignmentExpression() ? handleAssignment(this, member, parentPath) : member.replaceWith(this.get(member));
            let context, regular = member.node;
            for (let current = member; current !== endPath; ) {
              const parentPath2 = current.parentPath;
              if (parentPath2 === endPath && isOptionalCall() && parent.optional) {
                regular = parentPath2.node;
                break;
              }
              regular = toNonOptional(parentPath2, regular), current = parentPath2;
            }
            const endParentPath = endPath.parentPath;
            if (isMemberExpression(regular) && endParentPath.isOptionalCallExpression({ callee: endPath.node, optional: true })) {
              const { object } = regular;
              context = member.scope.maybeGenerateMemoised(object), context && (regular.object = assignmentExpression("=", context, object));
            }
            let replacementPath = endPath;
            (isDeleteOperation || isAssignment) && (replacementPath = endParentPath, regular = endParentPath.node);
            const baseMemoised = baseNeedsMemoised ? assignmentExpression("=", cloneNode2(baseRef), cloneNode2(startingNode)) : cloneNode2(baseRef);
            if (willEndPathCastToBoolean) {
              let nonNullishCheck;
              nonNullishCheck = noDocumentAll ? binaryExpression("!=", baseMemoised, nullLiteral()) : logicalExpression("&&", binaryExpression("!==", baseMemoised, nullLiteral()), binaryExpression("!==", cloneNode2(baseRef), scope.buildUndefinedNode())), replacementPath.replaceWith(logicalExpression("&&", nonNullishCheck, regular));
            } else {
              let nullishCheck;
              nullishCheck = noDocumentAll ? binaryExpression("==", baseMemoised, nullLiteral()) : logicalExpression("||", binaryExpression("===", baseMemoised, nullLiteral()), binaryExpression("===", cloneNode2(baseRef), scope.buildUndefinedNode())), replacementPath.replaceWith(conditionalExpression(nullishCheck, isDeleteOperation ? booleanLiteral(true) : scope.buildUndefinedNode(), regular));
            }
            if (context) {
              const endParent = endParentPath.node;
              endParentPath.replaceWith(optionalCallExpression(optionalMemberExpression(endParent.callee, identifier("call"), false, true), [cloneNode2(context), ...endParent.arguments], false));
            }
          } else {
            if (isUpdateExpression(parent, { argument: node })) {
              if (this.simpleSet) return void member.replaceWith(this.simpleSet(member));
              const { operator, prefix } = parent;
              this.memoise(member, 2);
              const ref = scope.generateUidIdentifierBasedOnNode(node);
              scope.push({ id: ref });
              const seq = [assignmentExpression("=", cloneNode2(ref), this.get(member))];
              if (prefix) {
                seq.push(updateExpression(operator, cloneNode2(ref), prefix));
                const value2 = sequenceExpression(seq);
                return void parentPath.replaceWith(this.set(member, value2));
              }
              {
                const ref2 = scope.generateUidIdentifierBasedOnNode(node);
                scope.push({ id: ref2 }), seq.push(assignmentExpression("=", cloneNode2(ref2), updateExpression(operator, cloneNode2(ref), prefix)), cloneNode2(ref));
                const value2 = sequenceExpression(seq);
                return void parentPath.replaceWith(sequenceExpression([this.set(member, value2), cloneNode2(ref2)]));
              }
            }
            if (parentPath.isAssignmentExpression({ left: node })) handleAssignment(this, member, parentPath);
            else {
              if (!parentPath.isCallExpression({ callee: node })) return parentPath.isOptionalCallExpression({ callee: node }) ? scope.path.isPattern() ? void parentPath.replaceWith(callExpression(arrowFunctionExpression([], parentPath.node), [])) : void parentPath.replaceWith(this.optionalCall(member, parentPath.node.arguments)) : void (this.delete && parentPath.isUnaryExpression({ operator: "delete" }) ? parentPath.replaceWith(this.delete(member)) : parentPath.isForXStatement({ left: node }) || parentPath.isObjectProperty({ value: node }) && parentPath.parentPath.isObjectPattern() || parentPath.isAssignmentPattern({ left: node }) && parentPath.parentPath.isObjectProperty({ value: parent }) && parentPath.parentPath.parentPath.isObjectPattern() || parentPath.isArrayPattern() || parentPath.isAssignmentPattern({ left: node }) && parentPath.parentPath.isArrayPattern() || parentPath.isRestElement() ? member.replaceWith(this.destructureSet(member)) : parentPath.isTaggedTemplateExpression() ? member.replaceWith(this.boundGet(member)) : member.replaceWith(this.get(member)));
              parentPath.replaceWith(this.call(member, parentPath.node.arguments));
            }
          }
        } };
        function handleAssignment(state, member, parentPath) {
          if (state.simpleSet) return void member.replaceWith(state.simpleSet(member));
          const { operator, right: value2 } = parentPath.node;
          if ("=" === operator) parentPath.replaceWith(state.set(member, value2));
          else {
            const operatorTrunc = operator.slice(0, -1);
            LOGICAL_OPERATORS.includes(operatorTrunc) ? (state.memoise(member, 1), parentPath.replaceWith(logicalExpression(operatorTrunc, state.get(member), state.set(member, value2)))) : (state.memoise(member, 2), parentPath.replaceWith(state.set(member, binaryExpression(operatorTrunc, state.get(member), value2))));
          }
        }
        exports2.default = function(path9, visitor, state) {
          path9.traverse(visitor, Object.assign({}, handle, state, { memoiser: new AssignmentMemoiser() }));
        };
      }, "./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/import-builder.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _assert = __webpack_require__2("assert"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { callExpression, cloneNode: cloneNode2, expressionStatement, identifier, importDeclaration, importDefaultSpecifier, importNamespaceSpecifier, importSpecifier, memberExpression, stringLiteral, variableDeclaration, variableDeclarator } = _t;
        exports2.default = class {
          constructor(importedSource, scope, hub) {
            this._statements = [], this._resultName = null, this._importedSource = void 0, this._scope = scope, this._hub = hub, this._importedSource = importedSource;
          }
          done() {
            return { statements: this._statements, resultName: this._resultName };
          }
          import() {
            return this._statements.push(importDeclaration([], stringLiteral(this._importedSource))), this;
          }
          require() {
            return this._statements.push(expressionStatement(callExpression(identifier("require"), [stringLiteral(this._importedSource)]))), this;
          }
          namespace(name = "namespace") {
            const local = this._scope.generateUidIdentifier(name), statement = this._statements[this._statements.length - 1];
            return _assert("ImportDeclaration" === statement.type), _assert(0 === statement.specifiers.length), statement.specifiers = [importNamespaceSpecifier(local)], this._resultName = cloneNode2(local), this;
          }
          default(name) {
            const id = this._scope.generateUidIdentifier(name), statement = this._statements[this._statements.length - 1];
            return _assert("ImportDeclaration" === statement.type), _assert(0 === statement.specifiers.length), statement.specifiers = [importDefaultSpecifier(id)], this._resultName = cloneNode2(id), this;
          }
          named(name, importName) {
            if ("default" === importName) return this.default(name);
            const id = this._scope.generateUidIdentifier(name), statement = this._statements[this._statements.length - 1];
            return _assert("ImportDeclaration" === statement.type), _assert(0 === statement.specifiers.length), statement.specifiers = [importSpecifier(id, identifier(importName))], this._resultName = cloneNode2(id), this;
          }
          var(name) {
            const id = this._scope.generateUidIdentifier(name);
            let statement = this._statements[this._statements.length - 1];
            return "ExpressionStatement" !== statement.type && (_assert(this._resultName), statement = expressionStatement(this._resultName), this._statements.push(statement)), this._statements[this._statements.length - 1] = variableDeclaration("var", [variableDeclarator(id, statement.expression)]), this._resultName = cloneNode2(id), this;
          }
          defaultInterop() {
            return this._interop(this._hub.addHelper("interopRequireDefault"));
          }
          wildcardInterop() {
            return this._interop(this._hub.addHelper("interopRequireWildcard"));
          }
          _interop(callee) {
            const statement = this._statements[this._statements.length - 1];
            return "ExpressionStatement" === statement.type ? statement.expression = callExpression(callee, [statement.expression]) : "VariableDeclaration" === statement.type ? (_assert(1 === statement.declarations.length), statement.declarations[0].init = callExpression(callee, [statement.declarations[0].init])) : _assert.fail("Unexpected type."), this;
          }
          prop(name) {
            const statement = this._statements[this._statements.length - 1];
            return "ExpressionStatement" === statement.type ? statement.expression = memberExpression(statement.expression, identifier(name)) : "VariableDeclaration" === statement.type ? (_assert(1 === statement.declarations.length), statement.declarations[0].init = memberExpression(statement.declarations[0].init, identifier(name))) : _assert.fail("Unexpected type:" + statement.type), this;
          }
          read(name) {
            this._resultName = memberExpression(this._resultName, identifier(name));
          }
        };
      }, "./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/import-injector.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _assert = __webpack_require__2("assert"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _importBuilder = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/import-builder.js"), _isModule = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/is-module.js");
        const { identifier, importSpecifier, numericLiteral, sequenceExpression, isImportDeclaration } = _t;
        function isValueImport(node) {
          return "type" !== node.importKind && "typeof" !== node.importKind;
        }
        function hasNamespaceImport(node) {
          return 1 === node.specifiers.length && "ImportNamespaceSpecifier" === node.specifiers[0].type || 2 === node.specifiers.length && "ImportNamespaceSpecifier" === node.specifiers[1].type;
        }
        function hasDefaultImport(node) {
          return node.specifiers.length > 0 && "ImportDefaultSpecifier" === node.specifiers[0].type;
        }
        function maybeAppendImportSpecifiers(target, source) {
          return target.specifiers.length ? !source.specifiers.length || !hasNamespaceImport(target) && !hasNamespaceImport(source) && (hasDefaultImport(source) && (hasDefaultImport(target) ? source.specifiers[0] = importSpecifier(source.specifiers[0].local, identifier("default")) : target.specifiers.unshift(source.specifiers.shift())), target.specifiers.push(...source.specifiers), true) : (target.specifiers = source.specifiers, true);
        }
        exports2.default = class {
          constructor(path9, importedSource, opts) {
            this._defaultOpts = { importedSource: null, importedType: "commonjs", importedInterop: "babel", importingInterop: "babel", ensureLiveReference: false, ensureNoContext: false, importPosition: "before" };
            const programPath = path9.find((p) => p.isProgram());
            this._programPath = programPath, this._programScope = programPath.scope, this._hub = programPath.hub, this._defaultOpts = this._applyDefaults(importedSource, opts, true);
          }
          addDefault(importedSourceIn, opts) {
            return this.addNamed("default", importedSourceIn, opts);
          }
          addNamed(importName, importedSourceIn, opts) {
            return _assert("string" == typeof importName), this._generateImport(this._applyDefaults(importedSourceIn, opts), importName);
          }
          addNamespace(importedSourceIn, opts) {
            return this._generateImport(this._applyDefaults(importedSourceIn, opts), null);
          }
          addSideEffect(importedSourceIn, opts) {
            return this._generateImport(this._applyDefaults(importedSourceIn, opts), void 0);
          }
          _applyDefaults(importedSource, opts, isInit = false) {
            let newOpts;
            return "string" == typeof importedSource ? newOpts = Object.assign({}, this._defaultOpts, { importedSource }, opts) : (_assert(!opts, "Unexpected secondary arguments."), newOpts = Object.assign({}, this._defaultOpts, importedSource)), !isInit && opts && (void 0 !== opts.nameHint && (newOpts.nameHint = opts.nameHint), void 0 !== opts.blockHoist && (newOpts.blockHoist = opts.blockHoist)), newOpts;
          }
          _generateImport(opts, importName) {
            const isDefault = "default" === importName, isNamed = !!importName && !isDefault, isNamespace = null === importName, { importedSource, importedType, importedInterop, importingInterop, ensureLiveReference, ensureNoContext, nameHint, importPosition, blockHoist } = opts;
            let name = nameHint || importName;
            const isMod = (0, _isModule.default)(this._programPath), isModuleForNode = isMod && "node" === importingInterop, isModuleForBabel = isMod && "babel" === importingInterop;
            if ("after" === importPosition && !isMod) throw new Error('"importPosition": "after" is only supported in modules');
            const builder = new _importBuilder.default(importedSource, this._programScope, this._hub);
            if ("es6" === importedType) {
              if (!isModuleForNode && !isModuleForBabel) throw new Error("Cannot import an ES6 module from CommonJS");
              builder.import(), isNamespace ? builder.namespace(nameHint || importedSource) : (isDefault || isNamed) && builder.named(name, importName);
            } else {
              if ("commonjs" !== importedType) throw new Error(`Unexpected interopType "${importedType}"`);
              if ("babel" === importedInterop) if (isModuleForNode) {
                name = "default" !== name ? name : importedSource;
                const es6Default = `${importedSource}$es6Default`;
                builder.import(), isNamespace ? builder.default(es6Default).var(name || importedSource).wildcardInterop() : isDefault ? ensureLiveReference ? builder.default(es6Default).var(name || importedSource).defaultInterop().read("default") : builder.default(es6Default).var(name).defaultInterop().prop(importName) : isNamed && builder.default(es6Default).read(importName);
              } else isModuleForBabel ? (builder.import(), isNamespace ? builder.namespace(name || importedSource) : (isDefault || isNamed) && builder.named(name, importName)) : (builder.require(), isNamespace ? builder.var(name || importedSource).wildcardInterop() : (isDefault || isNamed) && ensureLiveReference ? isDefault ? (name = "default" !== name ? name : importedSource, builder.var(name).read(importName), builder.defaultInterop()) : builder.var(importedSource).read(importName) : isDefault ? builder.var(name).defaultInterop().prop(importName) : isNamed && builder.var(name).prop(importName));
              else if ("compiled" === importedInterop) isModuleForNode ? (builder.import(), isNamespace ? builder.default(name || importedSource) : (isDefault || isNamed) && builder.default(importedSource).read(name)) : isModuleForBabel ? (builder.import(), isNamespace ? builder.namespace(name || importedSource) : (isDefault || isNamed) && builder.named(name, importName)) : (builder.require(), isNamespace ? builder.var(name || importedSource) : (isDefault || isNamed) && (ensureLiveReference ? builder.var(importedSource).read(name) : builder.prop(importName).var(name)));
              else {
                if ("uncompiled" !== importedInterop) throw new Error(`Unknown importedInterop "${importedInterop}".`);
                if (isDefault && ensureLiveReference) throw new Error("No live reference for commonjs default");
                isModuleForNode ? (builder.import(), isNamespace ? builder.default(name || importedSource) : isDefault ? builder.default(name) : isNamed && builder.default(importedSource).read(name)) : isModuleForBabel ? (builder.import(), isNamespace ? builder.default(name || importedSource) : isDefault ? builder.default(name) : isNamed && builder.named(name, importName)) : (builder.require(), isNamespace ? builder.var(name || importedSource) : isDefault ? builder.var(name) : isNamed && (ensureLiveReference ? builder.var(importedSource).read(name) : builder.var(name).prop(importName)));
              }
            }
            const { statements, resultName } = builder.done();
            return this._insertStatements(statements, importPosition, blockHoist), (isDefault || isNamed) && ensureNoContext && "Identifier" !== resultName.type ? sequenceExpression([numericLiteral(0), resultName]) : resultName;
          }
          _insertStatements(statements, importPosition = "before", blockHoist = 3) {
            if ("after" === importPosition) {
              if (this._insertStatementsAfter(statements)) return;
            } else if (this._insertStatementsBefore(statements, blockHoist)) return;
            this._programPath.unshiftContainer("body", statements);
          }
          _insertStatementsBefore(statements, blockHoist) {
            if (1 === statements.length && isImportDeclaration(statements[0]) && isValueImport(statements[0])) {
              const firstImportDecl = this._programPath.get("body").find((p) => p.isImportDeclaration() && isValueImport(p.node));
              if ((null == firstImportDecl ? void 0 : firstImportDecl.node.source.value) === statements[0].source.value && maybeAppendImportSpecifiers(firstImportDecl.node, statements[0])) return true;
            }
            statements.forEach((node) => {
              node._blockHoist = blockHoist;
            });
            const targetPath = this._programPath.get("body").find((p) => {
              const val = p.node._blockHoist;
              return Number.isFinite(val) && val < 4;
            });
            return !!targetPath && (targetPath.insertBefore(statements), true);
          }
          _insertStatementsAfter(statements) {
            const statementsSet = new Set(statements), importDeclarations = /* @__PURE__ */ new Map();
            for (const statement of statements) if (isImportDeclaration(statement) && isValueImport(statement)) {
              const source = statement.source.value;
              importDeclarations.has(source) || importDeclarations.set(source, []), importDeclarations.get(source).push(statement);
            }
            let lastImportPath = null;
            for (const bodyStmt of this._programPath.get("body")) if (bodyStmt.isImportDeclaration() && isValueImport(bodyStmt.node)) {
              lastImportPath = bodyStmt;
              const source = bodyStmt.node.source.value, newImports = importDeclarations.get(source);
              if (!newImports) continue;
              for (const decl of newImports) statementsSet.has(decl) && maybeAppendImportSpecifiers(bodyStmt.node, decl) && statementsSet.delete(decl);
            }
            return 0 === statementsSet.size || (lastImportPath && lastImportPath.insertAfter(Array.from(statementsSet)), !!lastImportPath);
          }
        };
      }, "./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "ImportInjector", { enumerable: true, get: function() {
          return _importInjector.default;
        } }), exports2.addDefault = function(path9, importedSource, opts) {
          return new _importInjector.default(path9).addDefault(importedSource, opts);
        }, exports2.addNamed = function(path9, name, importedSource, opts) {
          return new _importInjector.default(path9).addNamed(name, importedSource, opts);
        }, exports2.addNamespace = function(path9, importedSource, opts) {
          return new _importInjector.default(path9).addNamespace(importedSource, opts);
        }, exports2.addSideEffect = function(path9, importedSource, opts) {
          return new _importInjector.default(path9).addSideEffect(importedSource, opts);
        }, Object.defineProperty(exports2, "isModule", { enumerable: true, get: function() {
          return _isModule.default;
        } });
        var _importInjector = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/import-injector.js"), _isModule = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/is-module.js");
      }, "./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/is-module.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(path9) {
          return "module" === path9.node.sourceType;
        };
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/dynamic-import.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.buildDynamicImport = function(node, deferToThen, wrapWithPromise, builder) {
          const specifier = _core.types.isCallExpression(node) ? node.arguments[0] : node.source;
          if (_core.types.isStringLiteral(specifier) || _core.types.isTemplateLiteral(specifier) && 0 === specifier.quasis.length) return deferToThen ? _core.template.expression.ast`
        Promise.resolve().then(() => ${builder(specifier)})
      ` : builder(specifier);
          const specifierToString = _core.types.isTemplateLiteral(specifier) ? _core.types.identifier("specifier") : _core.types.templateLiteral([_core.types.templateElement({ raw: "" }), _core.types.templateElement({ raw: "" })], [_core.types.identifier("specifier")]);
          return deferToThen ? _core.template.expression.ast`
      (specifier =>
        new Promise(r => r(${specifierToString}))
          .then(s => ${builder(_core.types.identifier("s"))})
      )(${specifier})
    ` : wrapWithPromise ? _core.template.expression.ast`
      (specifier =>
        new Promise(r => r(${builder(specifierToString)}))
      )(${specifier})
    ` : _core.template.expression.ast`
      (specifier => ${builder(specifierToString)})(${specifier})
    `;
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
        exports2.getDynamicImportSource = function(node) {
          const [source] = node.arguments;
          return _core.types.isStringLiteral(source) || _core.types.isTemplateLiteral(source) ? source : _core.template.expression.ast`\`\${${source}}\``;
        };
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/get-module-name.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = getModuleName;
        {
          const originalGetModuleName = getModuleName;
          exports2.default = getModuleName = function(rootOpts, pluginOpts) {
            var _pluginOpts$moduleId, _pluginOpts$moduleIds, _pluginOpts$getModule, _pluginOpts$moduleRoo;
            return originalGetModuleName(rootOpts, { moduleId: null != (_pluginOpts$moduleId = pluginOpts.moduleId) ? _pluginOpts$moduleId : rootOpts.moduleId, moduleIds: null != (_pluginOpts$moduleIds = pluginOpts.moduleIds) ? _pluginOpts$moduleIds : rootOpts.moduleIds, getModuleId: null != (_pluginOpts$getModule = pluginOpts.getModuleId) ? _pluginOpts$getModule : rootOpts.getModuleId, moduleRoot: null != (_pluginOpts$moduleRoo = pluginOpts.moduleRoot) ? _pluginOpts$moduleRoo : rootOpts.moduleRoot });
          };
        }
        function getModuleName(rootOpts, pluginOpts) {
          const { filename, filenameRelative = filename, sourceRoot = pluginOpts.moduleRoot } = rootOpts, { moduleId, moduleIds = !!moduleId, getModuleId, moduleRoot = sourceRoot } = pluginOpts;
          if (!moduleIds) return null;
          if (null != moduleId && !getModuleId) return moduleId;
          let moduleName = null != moduleRoot ? moduleRoot + "/" : "";
          if (filenameRelative) {
            const sourceRootReplacer = null != sourceRoot ? new RegExp("^" + sourceRoot + "/?") : "";
            moduleName += filenameRelative.replace(sourceRootReplacer, "").replace(/\.\w*$/, "");
          }
          return moduleName = moduleName.replace(/\\/g, "/"), getModuleId && getModuleId(moduleName) || moduleName;
        }
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "buildDynamicImport", { enumerable: true, get: function() {
          return _dynamicImport.buildDynamicImport;
        } }), exports2.buildNamespaceInitStatements = function(metadata, sourceMetadata, constantReexports = false, wrapReference = Lazy.wrapReference) {
          var _wrapReference;
          const statements = [], srcNamespaceId = _core.types.identifier(sourceMetadata.name);
          for (const localName of sourceMetadata.importsNamespace) localName !== sourceMetadata.name && statements.push(_core.template.statement`var NAME = SOURCE;`({ NAME: localName, SOURCE: _core.types.cloneNode(srcNamespaceId) }));
          const srcNamespace = null != (_wrapReference = wrapReference(srcNamespaceId, sourceMetadata.wrap)) ? _wrapReference : srcNamespaceId;
          constantReexports && statements.push(...buildReexportsFromMeta(metadata, sourceMetadata, true, wrapReference));
          for (const exportName of sourceMetadata.reexportNamespace) statements.push((_core.types.isIdentifier(srcNamespace) ? _core.template.statement`EXPORTS.NAME = NAMESPACE;` : _core.template.statement`
            Object.defineProperty(EXPORTS, "NAME", {
              enumerable: true,
              get: function() {
                return NAMESPACE;
              }
            });
          `)({ EXPORTS: metadata.exportName, NAME: exportName, NAMESPACE: _core.types.cloneNode(srcNamespace) }));
          if (sourceMetadata.reexportAll) {
            const statement = function(metadata2, namespace, constantReexports2) {
              return (constantReexports2 ? _core.template.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          EXPORTS[key] = NAMESPACE[key];
        });
      ` : _core.template.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          Object.defineProperty(EXPORTS, key, {
            enumerable: true,
            get: function() {
              return NAMESPACE[key];
            },
          });
        });
    `)({ NAMESPACE: namespace, EXPORTS: metadata2.exportName, VERIFY_NAME_LIST: metadata2.exportNameListName ? _core.template`
            if (Object.prototype.hasOwnProperty.call(EXPORTS_LIST, key)) return;
          `({ EXPORTS_LIST: metadata2.exportNameListName }) : null });
            }(metadata, _core.types.cloneNode(srcNamespace), constantReexports);
            statement.loc = sourceMetadata.reexportAll.loc, statements.push(statement);
          }
          return statements;
        }, exports2.ensureStatementsHoisted = function(statements) {
          statements.forEach((header) => {
            header._blockHoist = 3;
          });
        }, Object.defineProperty(exports2, "getModuleName", { enumerable: true, get: function() {
          return _getModuleName.default;
        } }), Object.defineProperty(exports2, "hasExports", { enumerable: true, get: function() {
          return _normalizeAndLoadMetadata.hasExports;
        } }), Object.defineProperty(exports2, "isModule", { enumerable: true, get: function() {
          return _helperModuleImports.isModule;
        } }), Object.defineProperty(exports2, "isSideEffectImport", { enumerable: true, get: function() {
          return _normalizeAndLoadMetadata.isSideEffectImport;
        } }), exports2.rewriteModuleStatementsAndPrepareHeader = function(path9, { exportName, strict, allowTopLevelThis, strictMode, noInterop, importInterop = noInterop ? "none" : "babel", lazy, getWrapperPayload = Lazy.toGetWrapperPayload(null != lazy && lazy), wrapReference = Lazy.wrapReference, esNamespaceOnly, filename, constantReexports = arguments[1].loose, enumerableModuleMeta = arguments[1].loose, noIncompleteNsImportDetection }) {
          (0, _normalizeAndLoadMetadata.validateImportInteropOption)(importInterop), _assert((0, _helperModuleImports.isModule)(path9), "Cannot process module statements in a script"), path9.node.sourceType = "script";
          const meta = (0, _normalizeAndLoadMetadata.default)(path9, exportName, { importInterop, initializeReexports: constantReexports, getWrapperPayload, esNamespaceOnly, filename });
          allowTopLevelThis || (0, _rewriteThis.default)(path9);
          if ((0, _rewriteLiveReferences.default)(path9, meta, wrapReference), false !== strictMode) {
            path9.node.directives.some((directive) => "use strict" === directive.value.value) || path9.unshiftContainer("directives", _core.types.directive(_core.types.directiveLiteral("use strict")));
          }
          const headers = [];
          (0, _normalizeAndLoadMetadata.hasExports)(meta) && !strict && headers.push(function(metadata, enumerableModuleMeta2 = false) {
            return (enumerableModuleMeta2 ? _core.template.statement`
        EXPORTS.__esModule = true;
      ` : _core.template.statement`
        Object.defineProperty(EXPORTS, "__esModule", {
          value: true,
        });
      `)({ EXPORTS: metadata.exportName });
          }(meta, enumerableModuleMeta));
          const nameList = function(programPath, metadata) {
            const exportedVars = /* @__PURE__ */ Object.create(null);
            for (const data of metadata.local.values()) for (const name2 of data.names) exportedVars[name2] = true;
            let hasReexport = false;
            for (const data of metadata.source.values()) {
              for (const exportName2 of data.reexports.keys()) exportedVars[exportName2] = true;
              for (const exportName2 of data.reexportNamespace) exportedVars[exportName2] = true;
              hasReexport = hasReexport || !!data.reexportAll;
            }
            if (!hasReexport || 0 === Object.keys(exportedVars).length) return null;
            const name = programPath.scope.generateUidIdentifier("exportNames");
            return delete exportedVars.default, { name: name.name, statement: _core.types.variableDeclaration("var", [_core.types.variableDeclarator(name, _core.types.valueToNode(exportedVars))]) };
          }(path9, meta);
          nameList && (meta.exportNameListName = nameList.name, headers.push(nameList.statement));
          return headers.push(...function(programPath, metadata, wrapReference2, constantReexports2 = false, noIncompleteNsImportDetection2 = false) {
            const initStatements = [];
            for (const [localName, data] of metadata.local) if ("import" === data.kind) ;
            else if ("hoisted" === data.kind) initStatements.push([data.names[0], buildInitStatement(metadata, data.names, _core.types.identifier(localName))]);
            else if (!noIncompleteNsImportDetection2) for (const exportName2 of data.names) initStatements.push([exportName2, null]);
            for (const data of metadata.source.values()) {
              if (!constantReexports2) {
                const reexportsStatements = buildReexportsFromMeta(metadata, data, false, wrapReference2), reexports = [...data.reexports.keys()];
                for (let i2 = 0; i2 < reexportsStatements.length; i2++) initStatements.push([reexports[i2], reexportsStatements[i2]]);
              }
              if (!noIncompleteNsImportDetection2) for (const exportName2 of data.reexportNamespace) initStatements.push([exportName2, null]);
            }
            initStatements.sort(([a2], [b2]) => a2 < b2 ? -1 : b2 < a2 ? 1 : 0);
            const results = [];
            if (noIncompleteNsImportDetection2) for (const [, initStatement] of initStatements) results.push(initStatement);
            else {
              const chunkSize = 100;
              for (let i2 = 0; i2 < initStatements.length; i2 += chunkSize) {
                let uninitializedExportNames = [];
                for (let j2 = 0; j2 < chunkSize && i2 + j2 < initStatements.length; j2++) {
                  const [exportName2, initStatement] = initStatements[i2 + j2];
                  null !== initStatement ? (uninitializedExportNames.length > 0 && (results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode())), uninitializedExportNames = []), results.push(initStatement)) : uninitializedExportNames.push(exportName2);
                }
                uninitializedExportNames.length > 0 && results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode()));
              }
            }
            return results;
          }(path9, meta, wrapReference, constantReexports, noIncompleteNsImportDetection)), { meta, headers };
        }, Object.defineProperty(exports2, "rewriteThis", { enumerable: true, get: function() {
          return _rewriteThis.default;
        } }), exports2.wrapInterop = function(programPath, expr, type) {
          if ("none" === type) return null;
          if ("node-namespace" === type) return _core.types.callExpression(programPath.hub.addHelper("interopRequireWildcard"), [expr, _core.types.booleanLiteral(true)]);
          if ("node-default" === type) return null;
          let helper;
          if ("default" === type) helper = "interopRequireDefault";
          else {
            if ("namespace" !== type) throw new Error(`Unknown interop: ${type}`);
            helper = "interopRequireWildcard";
          }
          return _core.types.callExpression(programPath.hub.addHelper(helper), [expr]);
        };
        var _assert = __webpack_require__2("assert"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _helperModuleImports = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/index.js"), _rewriteThis = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/rewrite-this.js"), _rewriteLiveReferences = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js"), _normalizeAndLoadMetadata = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js"), Lazy = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/lazy-modules.js"), _dynamicImport = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/dynamic-import.js"), _getModuleName = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/get-module-name.js");
        exports2.getDynamicImportSource = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/dynamic-import.js").getDynamicImportSource;
        const ReexportTemplate = { constant: ({ exports: exports3, exportName, namespaceImport }) => _core.template.statement.ast`
      ${exports3}.${exportName} = ${namespaceImport};
    `, constantComputed: ({ exports: exports3, exportName, namespaceImport }) => _core.template.statement.ast`
      ${exports3}["${exportName}"] = ${namespaceImport};
    `, spec: ({ exports: exports3, exportName, namespaceImport }) => _core.template.statement.ast`
      Object.defineProperty(${exports3}, "${exportName}", {
        enumerable: true,
        get: function() {
          return ${namespaceImport};
        },
      });
    ` };
        function buildReexportsFromMeta(meta, metadata, constantReexports, wrapReference) {
          var _wrapReference2;
          let namespace = _core.types.identifier(metadata.name);
          namespace = null != (_wrapReference2 = wrapReference(namespace, metadata.wrap)) ? _wrapReference2 : namespace;
          const { stringSpecifiers } = meta;
          return Array.from(metadata.reexports, ([exportName, importName]) => {
            let namespaceImport = _core.types.cloneNode(namespace);
            "default" === importName && "node-default" === metadata.interop || (namespaceImport = stringSpecifiers.has(importName) ? _core.types.memberExpression(namespaceImport, _core.types.stringLiteral(importName), true) : _core.types.memberExpression(namespaceImport, _core.types.identifier(importName)));
            const astNodes = { exports: meta.exportName, exportName, namespaceImport };
            return constantReexports || _core.types.isIdentifier(namespaceImport) ? stringSpecifiers.has(exportName) ? ReexportTemplate.constantComputed(astNodes) : ReexportTemplate.constant(astNodes) : ReexportTemplate.spec(astNodes);
          });
        }
        const InitTemplate = { computed: ({ exports: exports3, name, value: value2 }) => _core.template.expression.ast`${exports3}["${name}"] = ${value2}`, default: ({ exports: exports3, name, value: value2 }) => _core.template.expression.ast`${exports3}.${name} = ${value2}`, define: ({ exports: exports3, name, value: value2 }) => _core.template.expression.ast`
      Object.defineProperty(${exports3}, "${name}", {
        enumerable: true,
        value: void 0,
        writable: true
      })["${name}"] = ${value2}` };
        function buildInitStatement(metadata, exportNames, initExpr) {
          const { stringSpecifiers, exportName: exports3 } = metadata;
          return _core.types.expressionStatement(exportNames.reduce((value2, name) => {
            const params = { exports: exports3, name, value: value2 };
            return "__proto__" === name ? InitTemplate.define(params) : stringSpecifiers.has(name) ? InitTemplate.computed(params) : InitTemplate.default(params);
          }, initExpr));
        }
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/lazy-modules.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.toGetWrapperPayload = function(lazy) {
          return (source, metadata) => {
            if (false === lazy) return null;
            if ((0, _normalizeAndLoadMetadata.isSideEffectImport)(metadata) || metadata.reexportAll) return null;
            if (true === lazy) return source.includes(".") ? null : "lazy";
            if (Array.isArray(lazy)) return lazy.includes(source) ? "lazy" : null;
            if ("function" == typeof lazy) return lazy(source) ? "lazy" : null;
            throw new Error(".lazy must be a boolean, string array, or function");
          };
        }, exports2.wrapReference = function(ref, payload) {
          return "lazy" === payload ? _core.types.callExpression(ref, []) : null;
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _normalizeAndLoadMetadata = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js");
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(programPath, exportName, { importInterop, initializeReexports = false, getWrapperPayload, esNamespaceOnly = false, filename }) {
          exportName || (exportName = programPath.scope.generateUidIdentifier("exports").name);
          const stringSpecifiers = /* @__PURE__ */ new Set();
          !function(programPath2) {
            programPath2.get("body").forEach((child) => {
              child.isExportDefaultDeclaration() && (null != child.splitExportDeclaration || (child.splitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").NodePath.prototype.splitExportDeclaration), child.splitExportDeclaration());
            });
          }(programPath);
          const { local, sources, hasExports } = function(programPath2, { getWrapperPayload: getWrapperPayload2, initializeReexports: initializeReexports2 }, stringSpecifiers2) {
            const localData = function(programPath3, initializeReexports3, stringSpecifiers3) {
              const bindingKindLookup = /* @__PURE__ */ new Map();
              programPath3.get("body").forEach((child) => {
                let kind;
                if (child.isImportDeclaration()) kind = "import";
                else {
                  if (child.isExportDefaultDeclaration() && (child = child.get("declaration")), child.isExportNamedDeclaration()) {
                    if (child.node.declaration) child = child.get("declaration");
                    else if (initializeReexports3 && child.node.source && child.get("source").isStringLiteral()) return void child.get("specifiers").forEach((spec) => {
                      assertExportSpecifier(spec), bindingKindLookup.set(spec.get("local").node.name, "block");
                    });
                  }
                  if (child.isFunctionDeclaration()) kind = "hoisted";
                  else if (child.isClassDeclaration()) kind = "block";
                  else if (child.isVariableDeclaration({ kind: "var" })) kind = "var";
                  else {
                    if (!child.isVariableDeclaration()) return;
                    kind = "block";
                  }
                }
                Object.keys(child.getOuterBindingIdentifiers()).forEach((name) => {
                  bindingKindLookup.set(name, kind);
                });
              });
              const localMetadata = /* @__PURE__ */ new Map(), getLocalMetadata = (idPath) => {
                const localName = idPath.node.name;
                let metadata = localMetadata.get(localName);
                if (!metadata) {
                  const kind = bindingKindLookup.get(localName);
                  if (void 0 === kind) throw idPath.buildCodeFrameError(`Exporting local "${localName}", which is not declared.`);
                  metadata = { names: [], kind }, localMetadata.set(localName, metadata);
                }
                return metadata;
              };
              return programPath3.get("body").forEach((child) => {
                if (!child.isExportNamedDeclaration() || !initializeReexports3 && child.node.source) {
                  if (child.isExportDefaultDeclaration()) {
                    const declaration = child.get("declaration");
                    if (!declaration.isFunctionDeclaration() && !declaration.isClassDeclaration()) throw declaration.buildCodeFrameError("Unexpected default expression export.");
                    getLocalMetadata(declaration.get("id")).names.push("default");
                  }
                } else if (child.node.declaration) {
                  const declaration = child.get("declaration"), ids = declaration.getOuterBindingIdentifierPaths();
                  Object.keys(ids).forEach((name) => {
                    if ("__esModule" === name) throw declaration.buildCodeFrameError('Illegal export "__esModule".');
                    getLocalMetadata(ids[name]).names.push(name);
                  });
                } else child.get("specifiers").forEach((spec) => {
                  const local2 = spec.get("local"), exported = spec.get("exported"), localMetadata2 = getLocalMetadata(local2), exportName2 = getExportSpecifierName(exported, stringSpecifiers3);
                  if ("__esModule" === exportName2) throw exported.buildCodeFrameError('Illegal export "__esModule".');
                  localMetadata2.names.push(exportName2);
                });
              }), localMetadata;
            }(programPath2, initializeReexports2, stringSpecifiers2), importNodes = /* @__PURE__ */ new Map(), sourceData = /* @__PURE__ */ new Map(), getData = (sourceNode, node) => {
              const source = sourceNode.value;
              let data = sourceData.get(source);
              return data ? importNodes.get(source).push(node) : (data = { name: programPath2.scope.generateUidIdentifier((0, _path.basename)(source, (0, _path.extname)(source))).name, interop: "none", loc: null, imports: /* @__PURE__ */ new Map(), importsNamespace: /* @__PURE__ */ new Set(), reexports: /* @__PURE__ */ new Map(), reexportNamespace: /* @__PURE__ */ new Set(), reexportAll: null, wrap: null, get lazy() {
                return "lazy" === this.wrap;
              }, referenced: false }, sourceData.set(source, data), importNodes.set(source, [node])), data;
            };
            let hasExports2 = false;
            programPath2.get("body").forEach((child) => {
              if (child.isImportDeclaration()) {
                const data = getData(child.node.source, child.node);
                data.loc || (data.loc = child.node.loc), child.get("specifiers").forEach((spec) => {
                  if (spec.isImportDefaultSpecifier()) {
                    const localName = spec.get("local").node.name;
                    data.imports.set(localName, "default");
                    const reexport = localData.get(localName);
                    reexport && (localData.delete(localName), reexport.names.forEach((name) => {
                      data.reexports.set(name, "default");
                    }), data.referenced = true);
                  } else if (spec.isImportNamespaceSpecifier()) {
                    const localName = spec.get("local").node.name;
                    data.importsNamespace.add(localName);
                    const reexport = localData.get(localName);
                    reexport && (localData.delete(localName), reexport.names.forEach((name) => {
                      data.reexportNamespace.add(name);
                    }), data.referenced = true);
                  } else if (spec.isImportSpecifier()) {
                    const importName = getExportSpecifierName(spec.get("imported"), stringSpecifiers2), localName = spec.get("local").node.name;
                    data.imports.set(localName, importName);
                    const reexport = localData.get(localName);
                    reexport && (localData.delete(localName), reexport.names.forEach((name) => {
                      data.reexports.set(name, importName);
                    }), data.referenced = true);
                  }
                });
              } else if (child.isExportAllDeclaration()) {
                hasExports2 = true;
                const data = getData(child.node.source, child.node);
                data.loc || (data.loc = child.node.loc), data.reexportAll = { loc: child.node.loc }, data.referenced = true;
              } else if (child.isExportNamedDeclaration() && child.node.source) {
                hasExports2 = true;
                const data = getData(child.node.source, child.node);
                data.loc || (data.loc = child.node.loc), child.get("specifiers").forEach((spec) => {
                  assertExportSpecifier(spec);
                  const importName = getExportSpecifierName(spec.get("local"), stringSpecifiers2), exportName2 = getExportSpecifierName(spec.get("exported"), stringSpecifiers2);
                  if (data.reexports.set(exportName2, importName), data.referenced = true, "__esModule" === exportName2) throw spec.get("exported").buildCodeFrameError('Illegal export "__esModule".');
                });
              } else (child.isExportNamedDeclaration() || child.isExportDefaultDeclaration()) && (hasExports2 = true);
            });
            for (const metadata of sourceData.values()) {
              let needsDefault = false, needsNamed = false;
              metadata.importsNamespace.size > 0 && (needsDefault = true, needsNamed = true), metadata.reexportAll && (needsNamed = true);
              for (const importName of metadata.imports.values()) "default" === importName ? needsDefault = true : needsNamed = true;
              for (const importName of metadata.reexports.values()) "default" === importName ? needsDefault = true : needsNamed = true;
              needsDefault && needsNamed ? metadata.interop = "namespace" : needsDefault && (metadata.interop = "default");
            }
            if (getWrapperPayload2) for (const [source, metadata] of sourceData) metadata.wrap = getWrapperPayload2(source, metadata, importNodes.get(source));
            return { hasExports: hasExports2, local: localData, sources: sourceData };
          }(programPath, { initializeReexports, getWrapperPayload }, stringSpecifiers);
          !function(programPath2) {
            programPath2.get("body").forEach((child) => {
              if (child.isImportDeclaration()) child.remove();
              else if (child.isExportNamedDeclaration()) child.node.declaration ? (child.node.declaration._blockHoist = child.node._blockHoist, child.replaceWith(child.node.declaration)) : child.remove();
              else if (child.isExportDefaultDeclaration()) {
                const declaration = child.get("declaration");
                if (!declaration.isFunctionDeclaration() && !declaration.isClassDeclaration()) throw declaration.buildCodeFrameError("Unexpected default expression export.");
                declaration._blockHoist = child.node._blockHoist, child.replaceWith(declaration);
              } else child.isExportAllDeclaration() && child.remove();
            });
          }(programPath);
          for (const [source, metadata] of sources) {
            const { importsNamespace, imports } = metadata;
            if (importsNamespace.size > 0 && 0 === imports.size) {
              const [nameOfnamespace] = importsNamespace;
              metadata.name = nameOfnamespace;
            }
            const resolvedInterop = resolveImportInterop(importInterop, source, filename);
            "none" === resolvedInterop ? metadata.interop = "none" : "node" === resolvedInterop && "namespace" === metadata.interop ? metadata.interop = "node-namespace" : "node" === resolvedInterop && "default" === metadata.interop ? metadata.interop = "node-default" : esNamespaceOnly && "namespace" === metadata.interop && (metadata.interop = "default");
          }
          return { exportName, exportNameListName: null, hasExports, local, source: sources, stringSpecifiers };
        }, exports2.hasExports = function(metadata) {
          return metadata.hasExports;
        }, exports2.isSideEffectImport = function(source) {
          return 0 === source.imports.size && 0 === source.importsNamespace.size && 0 === source.reexports.size && 0 === source.reexportNamespace.size && !source.reexportAll;
        }, exports2.validateImportInteropOption = validateImportInteropOption;
        var _path = __webpack_require__2("path"), _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/index.js");
        function validateImportInteropOption(importInterop) {
          if ("function" != typeof importInterop && "none" !== importInterop && "babel" !== importInterop && "node" !== importInterop) throw new Error(`.importInterop must be one of "none", "babel", "node", or a function returning one of those values (received ${importInterop}).`);
          return importInterop;
        }
        function resolveImportInterop(importInterop, source, filename) {
          return "function" == typeof importInterop ? validateImportInteropOption(importInterop(source, filename)) : importInterop;
        }
        function getExportSpecifierName(path9, stringSpecifiers) {
          if (path9.isIdentifier()) return path9.node.name;
          if (path9.isStringLiteral()) {
            const stringValue = path9.node.value;
            return (0, _helperValidatorIdentifier.isIdentifierName)(stringValue) || stringSpecifiers.add(stringValue), stringValue;
          }
          throw new Error(`Expected export specifier to be either Identifier or StringLiteral, got ${path9.node.type}`);
        }
        function assertExportSpecifier(path9) {
          if (!path9.isExportSpecifier()) throw path9.isExportNamespaceSpecifier() ? path9.buildCodeFrameError("Export namespace should be first transformed by `@babel/plugin-transform-export-namespace-from`.") : path9.buildCodeFrameError("Unexpected export specifier type");
        }
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(programPath, metadata, wrapReference) {
          const imported = /* @__PURE__ */ new Map(), exported = /* @__PURE__ */ new Map(), requeueInParent = (path9) => {
            programPath.requeue(path9);
          };
          for (const [source, data] of metadata.source) {
            for (const [localName, importName] of data.imports) imported.set(localName, [source, importName, null]);
            for (const localName of data.importsNamespace) imported.set(localName, [source, null, localName]);
          }
          for (const [local, data] of metadata.local) {
            let exportMeta = exported.get(local);
            exportMeta || (exportMeta = [], exported.set(local, exportMeta)), exportMeta.push(...data.names);
          }
          const rewriteBindingInitVisitorState = { metadata, requeueInParent, scope: programPath.scope, exported };
          programPath.traverse(rewriteBindingInitVisitor, rewriteBindingInitVisitorState);
          const rewriteReferencesVisitorState = { seen: /* @__PURE__ */ new WeakSet(), metadata, requeueInParent, scope: programPath.scope, imported, exported, buildImportReference([source, importName, localName], identNode) {
            const meta = metadata.source.get(source);
            if (meta.referenced = true, localName) {
              var _wrapReference;
              if (meta.wrap) identNode = null != (_wrapReference = wrapReference(identNode, meta.wrap)) ? _wrapReference : identNode;
              return identNode;
            }
            let namespace = _core.types.identifier(meta.name);
            var _wrapReference2;
            meta.wrap && (namespace = null != (_wrapReference2 = wrapReference(namespace, meta.wrap)) ? _wrapReference2 : namespace);
            if ("default" === importName && "node-default" === meta.interop) return namespace;
            const computed = metadata.stringSpecifiers.has(importName);
            return _core.types.memberExpression(namespace, computed ? _core.types.stringLiteral(importName) : _core.types.identifier(importName), computed);
          } };
          programPath.traverse(rewriteReferencesVisitor, rewriteReferencesVisitorState);
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
        const rewriteBindingInitVisitor = { Scope(path9) {
          path9.skip();
        }, ClassDeclaration(path9) {
          const { requeueInParent, exported, metadata } = this, { id } = path9.node;
          if (!id) throw new Error("Expected class to have a name");
          const localName = id.name, exportNames = exported.get(localName) || [];
          if (exportNames.length > 0) {
            const statement = _core.types.expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, _core.types.identifier(localName), path9.scope));
            statement._blockHoist = path9.node._blockHoist, requeueInParent(path9.insertAfter(statement)[0]);
          }
        }, VariableDeclaration(path9) {
          const { requeueInParent, exported, metadata } = this, isVar = "var" === path9.node.kind;
          for (const decl of path9.get("declarations")) {
            const { id } = decl.node;
            let { init } = decl.node;
            if (!_core.types.isIdentifier(id) || !exported.has(id.name) || _core.types.isArrowFunctionExpression(init) || _core.types.isFunctionExpression(init) && !init.id || _core.types.isClassExpression(init) && !init.id) {
              for (const localName of Object.keys(decl.getOuterBindingIdentifiers())) if (exported.has(localName)) {
                const statement = _core.types.expressionStatement(buildBindingExportAssignmentExpression(metadata, exported.get(localName), _core.types.identifier(localName), path9.scope));
                statement._blockHoist = path9.node._blockHoist, requeueInParent(path9.insertAfter(statement)[0]);
              }
            } else {
              if (!init) {
                if (isVar) continue;
                init = path9.scope.buildUndefinedNode();
              }
              decl.node.init = buildBindingExportAssignmentExpression(metadata, exported.get(id.name), init, path9.scope), requeueInParent(decl.get("init"));
            }
          }
        } }, buildBindingExportAssignmentExpression = (metadata, exportNames, localExpr, scope) => {
          const exportsObjectName = metadata.exportName;
          for (let currentScope = scope; null != currentScope; currentScope = currentScope.parent) currentScope.hasOwnBinding(exportsObjectName) && currentScope.rename(exportsObjectName);
          return (exportNames || []).reduce((expr, exportName) => {
            const { stringSpecifiers } = metadata, computed = stringSpecifiers.has(exportName);
            return _core.types.assignmentExpression("=", _core.types.memberExpression(_core.types.identifier(exportsObjectName), computed ? _core.types.stringLiteral(exportName) : _core.types.identifier(exportName), computed), expr);
          }, localExpr);
        }, buildImportThrow = (localName) => _core.template.expression.ast`
    (function() {
      throw new Error('"' + '${localName}' + '" is read-only.');
    })()
  `, rewriteReferencesVisitor = { ReferencedIdentifier(path9) {
          const { seen, buildImportReference, scope, imported, requeueInParent } = this;
          if (seen.has(path9.node)) return;
          seen.add(path9.node);
          const localName = path9.node.name, importData = imported.get(localName);
          if (importData) {
            if (function(path10) {
              do {
                switch (path10.parent.type) {
                  case "TSTypeAnnotation":
                  case "TSTypeAliasDeclaration":
                  case "TSTypeReference":
                  case "TypeAnnotation":
                  case "TypeAlias":
                    return true;
                  case "ExportSpecifier":
                    return "type" === path10.parentPath.parent.exportKind;
                  default:
                    if (path10.parentPath.isStatement() || path10.parentPath.isExpression()) return false;
                }
              } while (path10 = path10.parentPath);
            }(path9)) throw path9.buildCodeFrameError(`Cannot transform the imported binding "${localName}" since it's also used in a type annotation. Please strip type annotations using @babel/preset-typescript or @babel/preset-flow.`);
            const localBinding = path9.scope.getBinding(localName);
            if (scope.getBinding(localName) !== localBinding) return;
            const ref = buildImportReference(importData, path9.node);
            if (ref.loc = path9.node.loc, (path9.parentPath.isCallExpression({ callee: path9.node }) || path9.parentPath.isOptionalCallExpression({ callee: path9.node }) || path9.parentPath.isTaggedTemplateExpression({ tag: path9.node })) && _core.types.isMemberExpression(ref)) path9.replaceWith(_core.types.sequenceExpression([_core.types.numericLiteral(0), ref]));
            else if (path9.isJSXIdentifier() && _core.types.isMemberExpression(ref)) {
              const { object, property } = ref;
              path9.replaceWith(_core.types.jsxMemberExpression(_core.types.jsxIdentifier(object.name), _core.types.jsxIdentifier(property.name)));
            } else path9.replaceWith(ref);
            requeueInParent(path9), path9.skip();
          }
        }, UpdateExpression(path9) {
          const { scope, seen, imported, exported, requeueInParent, buildImportReference } = this;
          if (seen.has(path9.node)) return;
          seen.add(path9.node);
          const arg = path9.get("argument");
          if (arg.isMemberExpression()) return;
          const update = path9.node;
          if (arg.isIdentifier()) {
            const localName = arg.node.name;
            if (scope.getBinding(localName) !== path9.scope.getBinding(localName)) return;
            const exportedNames = exported.get(localName), importData = imported.get(localName);
            if ((null == exportedNames ? void 0 : exportedNames.length) > 0 || importData) if (importData) path9.replaceWith(_core.types.assignmentExpression(update.operator[0] + "=", buildImportReference(importData, arg.node), buildImportThrow(localName)));
            else if (update.prefix) path9.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, _core.types.cloneNode(update), path9.scope));
            else {
              const ref = scope.generateDeclaredUidIdentifier(localName);
              path9.replaceWith(_core.types.sequenceExpression([_core.types.assignmentExpression("=", _core.types.cloneNode(ref), _core.types.cloneNode(update)), buildBindingExportAssignmentExpression(this.metadata, exportedNames, _core.types.identifier(localName), path9.scope), _core.types.cloneNode(ref)]));
            }
          }
          requeueInParent(path9), path9.skip();
        }, AssignmentExpression: { exit(path9) {
          const { scope, seen, imported, exported, requeueInParent, buildImportReference } = this;
          if (seen.has(path9.node)) return;
          seen.add(path9.node);
          const left = path9.get("left");
          if (!left.isMemberExpression()) if (left.isIdentifier()) {
            const localName = left.node.name;
            if (scope.getBinding(localName) !== path9.scope.getBinding(localName)) return;
            const exportedNames = exported.get(localName), importData = imported.get(localName);
            if ((null == exportedNames ? void 0 : exportedNames.length) > 0 || importData) {
              const assignment = path9.node;
              importData && (assignment.left = buildImportReference(importData, left.node), assignment.right = _core.types.sequenceExpression([assignment.right, buildImportThrow(localName)]));
              const { operator } = assignment;
              let newExpr;
              newExpr = "=" === operator ? assignment : "&&=" === operator || "||=" === operator || "??=" === operator ? _core.types.assignmentExpression("=", assignment.left, _core.types.logicalExpression(operator.slice(0, -1), _core.types.cloneNode(assignment.left), assignment.right)) : _core.types.assignmentExpression("=", assignment.left, _core.types.binaryExpression(operator.slice(0, -1), _core.types.cloneNode(assignment.left), assignment.right)), path9.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, newExpr, path9.scope)), requeueInParent(path9), path9.skip();
            }
          } else {
            const ids = left.getOuterBindingIdentifiers(), programScopeIds = Object.keys(ids).filter((localName) => scope.getBinding(localName) === path9.scope.getBinding(localName)), id = programScopeIds.find((localName) => imported.has(localName));
            id && (path9.node.right = _core.types.sequenceExpression([path9.node.right, buildImportThrow(id)]));
            const items = [];
            if (programScopeIds.forEach((localName) => {
              const exportedNames = exported.get(localName) || [];
              exportedNames.length > 0 && items.push(buildBindingExportAssignmentExpression(this.metadata, exportedNames, _core.types.identifier(localName), path9.scope));
            }), items.length > 0) {
              let node = _core.types.sequenceExpression(items);
              path9.parentPath.isExpressionStatement() && (node = _core.types.expressionStatement(node), node._blockHoist = path9.parentPath.node._blockHoist);
              requeueInParent(path9.insertAfter(node)[0]);
            }
          }
        } }, ForXStatement(path9) {
          const { scope, node } = path9, { left } = node, { exported, imported, scope: programScope } = this;
          if (!_core.types.isVariableDeclaration(left)) {
            let importConstViolationName, didTransformExport = false;
            const loopBodyScope = path9.get("body").scope;
            for (const name of Object.keys(_core.types.getOuterBindingIdentifiers(left))) programScope.getBinding(name) === scope.getBinding(name) && (exported.has(name) && (didTransformExport = true, loopBodyScope.hasOwnBinding(name) && loopBodyScope.rename(name)), imported.has(name) && !importConstViolationName && (importConstViolationName = name));
            if (!didTransformExport && !importConstViolationName) return;
            path9.ensureBlock();
            const bodyPath = path9.get("body"), newLoopId = scope.generateUidIdentifierBasedOnNode(left);
            path9.get("left").replaceWith(_core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.cloneNode(newLoopId))])), scope.registerDeclaration(path9.get("left")), didTransformExport && bodyPath.unshiftContainer("body", _core.types.expressionStatement(_core.types.assignmentExpression("=", left, newLoopId))), importConstViolationName && bodyPath.unshiftContainer("body", _core.types.expressionStatement(buildImportThrow(importConstViolationName)));
          }
        } };
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/rewrite-this.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(programPath) {
          rewriteThisVisitor || (rewriteThisVisitor = _traverse.visitors.environmentVisitor({ ThisExpression(path9) {
            path9.replaceWith(_core.types.unaryExpression("void", _core.types.numericLiteral(0), true));
          } }), rewriteThisVisitor.noScope = true);
          (0, _traverse.default)(programPath.node, rewriteThisVisitor);
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _traverse = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
        let rewriteThisVisitor;
      }, "./node_modules/.pnpm/@babel+helper-optimise-call-expression@7.25.9/node_modules/@babel/helper-optimise-call-expression/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(callee, thisNode, args, optional) {
          return 1 === args.length && isSpreadElement(args[0]) && isIdentifier2(args[0].argument, { name: "arguments" }) ? optional ? optionalCallExpression(optionalMemberExpression(callee, identifier("apply"), false, true), [thisNode, args[0].argument], false) : callExpression(memberExpression(callee, identifier("apply")), [thisNode, args[0].argument]) : optional ? optionalCallExpression(optionalMemberExpression(callee, identifier("call"), false, true), [thisNode, ...args], false) : callExpression(memberExpression(callee, identifier("call")), [thisNode, ...args]);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { callExpression, identifier, isIdentifier: isIdentifier2, isSpreadElement, memberExpression, optionalCallExpression, optionalMemberExpression } = _t;
      }, "./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.declare = declare, exports2.declarePreset = void 0;
        const apiPolyfills = { assertVersion: (api) => (range) => {
          !function(range2, version) {
            if ("number" == typeof range2) {
              if (!Number.isInteger(range2)) throw new Error("Expected string or integer value.");
              range2 = `^${range2}.0.0-0`;
            }
            if ("string" != typeof range2) throw new Error("Expected string or integer value.");
            const limit = Error.stackTraceLimit;
            "number" == typeof limit && limit < 25 && (Error.stackTraceLimit = 25);
            let err;
            err = "7." === version.slice(0, 2) ? new Error(`Requires Babel "^7.0.0-beta.41", but was loaded with "${version}". You'll need to update your @babel/core version.`) : new Error(`Requires Babel "${range2}", but was loaded with "${version}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);
            "number" == typeof limit && (Error.stackTraceLimit = limit);
            throw Object.assign(err, { code: "BABEL_VERSION_UNSUPPORTED", version, range: range2 });
          }(range, api.version);
        } };
        function declare(builder) {
          return (api, options, dirname) => {
            var _clonedApi2;
            let clonedApi;
            for (const name of Object.keys(apiPolyfills)) {
              api[name] || (null != clonedApi || (clonedApi = copyApiObject(api)), clonedApi[name] = apiPolyfills[name](clonedApi));
            }
            return builder(null != (_clonedApi2 = clonedApi) ? _clonedApi2 : api, options || {}, dirname);
          };
        }
        Object.assign(apiPolyfills, { targets: () => () => ({}), assumption: () => () => {
        }, addExternalDependency: () => () => {
        } });
        exports2.declarePreset = declare;
        function copyApiObject(api) {
          let proto = null;
          return "string" == typeof api.version && /^7\./.test(api.version) && (proto = Object.getPrototypeOf(api), !proto || hasOwnProperty.call(proto, "version") && hasOwnProperty.call(proto, "transform") && hasOwnProperty.call(proto, "template") && hasOwnProperty.call(proto, "types") || (proto = null)), Object.assign({}, proto, api);
        }
      }, "./node_modules/.pnpm/@babel+helper-replace-supers@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-replace-supers/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _helperMemberExpressionToFunctions = __webpack_require__2("./node_modules/.pnpm/@babel+helper-member-expression-to-functions@7.25.9/node_modules/@babel/helper-member-expression-to-functions/lib/index.js"), _helperOptimiseCallExpression = __webpack_require__2("./node_modules/.pnpm/@babel+helper-optimise-call-expression@7.25.9/node_modules/@babel/helper-optimise-call-expression/lib/index.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _traverse = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
        const { assignmentExpression, callExpression, cloneNode: cloneNode2, identifier, memberExpression, sequenceExpression, stringLiteral, thisExpression } = _core.types;
        exports2.environmentVisitor = _traverse.visitors.environmentVisitor({}), exports2.skipAllButComputedKey = function(path9) {
          path9.skip(), path9.node.computed && path9.context.maybeQueue(path9.get("key"));
        };
        const visitor = _traverse.visitors.environmentVisitor({ Super(path9, state) {
          const { node, parentPath } = path9;
          parentPath.isMemberExpression({ object: node }) && state.handle(parentPath);
        } }), unshadowSuperBindingVisitor = _traverse.visitors.environmentVisitor({ Scopable(path9, { refName }) {
          const binding = path9.scope.getOwnBinding(refName);
          binding && binding.identifier.name === refName && path9.scope.rename(refName);
        } }), specHandlers = { memoise(superMember, count2) {
          const { scope, node } = superMember, { computed, property } = node;
          if (!computed) return;
          const memo = scope.maybeGenerateMemoised(property);
          memo && this.memoiser.set(property, memo, count2);
        }, prop(superMember) {
          const { computed, property } = superMember.node;
          return this.memoiser.has(property) ? cloneNode2(this.memoiser.get(property)) : computed ? cloneNode2(property) : stringLiteral(property.name);
        }, _getPrototypeOfExpression() {
          const objectRef = cloneNode2(this.getObjectRef()), targetRef = this.isStatic || this.isPrivateMethod ? objectRef : memberExpression(objectRef, identifier("prototype"));
          return callExpression(this.file.addHelper("getPrototypeOf"), [targetRef]);
        }, get(superMember) {
          const objectRef = cloneNode2(this.getObjectRef());
          return callExpression(this.file.addHelper("superPropGet"), [this.isDerivedConstructor ? sequenceExpression([thisExpression(), objectRef]) : objectRef, this.prop(superMember), thisExpression(), ...this.isStatic || this.isPrivateMethod ? [] : [_core.types.numericLiteral(1)]]);
        }, _call(superMember, args, optional) {
          const objectRef = cloneNode2(this.getObjectRef());
          let argsNode;
          argsNode = 1 === args.length && _core.types.isSpreadElement(args[0]) && (_core.types.isIdentifier(args[0].argument) || _core.types.isArrayExpression(args[0].argument)) ? args[0].argument : _core.types.arrayExpression(args);
          const call = _core.types.callExpression(this.file.addHelper("superPropGet"), [this.isDerivedConstructor ? sequenceExpression([thisExpression(), objectRef]) : objectRef, this.prop(superMember), thisExpression(), _core.types.numericLiteral(2 | (this.isStatic || this.isPrivateMethod ? 0 : 1))]);
          return optional ? _core.types.optionalCallExpression(call, [argsNode], true) : callExpression(call, [argsNode]);
        }, set(superMember, value2) {
          const objectRef = cloneNode2(this.getObjectRef());
          return callExpression(this.file.addHelper("superPropSet"), [this.isDerivedConstructor ? sequenceExpression([thisExpression(), objectRef]) : objectRef, this.prop(superMember), value2, thisExpression(), _core.types.numericLiteral(superMember.isInStrictMode() ? 1 : 0), ...this.isStatic || this.isPrivateMethod ? [] : [_core.types.numericLiteral(1)]]);
        }, destructureSet(superMember) {
          throw superMember.buildCodeFrameError("Destructuring to a super field is not supported yet.");
        }, call(superMember, args) {
          return this._call(superMember, args, false);
        }, optionalCall(superMember, args) {
          return this._call(superMember, args, true);
        }, delete(superMember) {
          return superMember.node.computed ? sequenceExpression([callExpression(this.file.addHelper("toPropertyKey"), [cloneNode2(superMember.node.property)]), _core.template.expression.ast`
          function () { throw new ReferenceError("'delete super[expr]' is invalid"); }()
        `]) : _core.template.expression.ast`
        function () { throw new ReferenceError("'delete super.prop' is invalid"); }()
      `;
        } }, specHandlers_old = { memoise(superMember, count2) {
          const { scope, node } = superMember, { computed, property } = node;
          if (!computed) return;
          const memo = scope.maybeGenerateMemoised(property);
          memo && this.memoiser.set(property, memo, count2);
        }, prop(superMember) {
          const { computed, property } = superMember.node;
          return this.memoiser.has(property) ? cloneNode2(this.memoiser.get(property)) : computed ? cloneNode2(property) : stringLiteral(property.name);
        }, _getPrototypeOfExpression() {
          const objectRef = cloneNode2(this.getObjectRef()), targetRef = this.isStatic || this.isPrivateMethod ? objectRef : memberExpression(objectRef, identifier("prototype"));
          return callExpression(this.file.addHelper("getPrototypeOf"), [targetRef]);
        }, get(superMember) {
          return this._get(superMember);
        }, _get(superMember) {
          const proto = this._getPrototypeOfExpression();
          return callExpression(this.file.addHelper("get"), [this.isDerivedConstructor ? sequenceExpression([thisExpression(), proto]) : proto, this.prop(superMember), thisExpression()]);
        }, set(superMember, value2) {
          const proto = this._getPrototypeOfExpression();
          return callExpression(this.file.addHelper("set"), [this.isDerivedConstructor ? sequenceExpression([thisExpression(), proto]) : proto, this.prop(superMember), value2, thisExpression(), _core.types.booleanLiteral(superMember.isInStrictMode())]);
        }, destructureSet(superMember) {
          throw superMember.buildCodeFrameError("Destructuring to a super field is not supported yet.");
        }, call(superMember, args) {
          return (0, _helperOptimiseCallExpression.default)(this._get(superMember), thisExpression(), args, false);
        }, optionalCall(superMember, args) {
          return (0, _helperOptimiseCallExpression.default)(this._get(superMember), cloneNode2(thisExpression()), args, true);
        }, delete(superMember) {
          return superMember.node.computed ? sequenceExpression([callExpression(this.file.addHelper("toPropertyKey"), [cloneNode2(superMember.node.property)]), _core.template.expression.ast`
          function () { throw new ReferenceError("'delete super[expr]' is invalid"); }()
        `]) : _core.template.expression.ast`
        function () { throw new ReferenceError("'delete super.prop' is invalid"); }()
      `;
        } }, looseHandlers = Object.assign({}, specHandlers, { prop(superMember) {
          const { property } = superMember.node;
          return this.memoiser.has(property) ? cloneNode2(this.memoiser.get(property)) : cloneNode2(property);
        }, get(superMember) {
          const { isStatic, getSuperRef } = this, { computed } = superMember.node, prop = this.prop(superMember);
          let object;
          var _getSuperRef, _getSuperRef2;
          isStatic ? object = null != (_getSuperRef = getSuperRef()) ? _getSuperRef : memberExpression(identifier("Function"), identifier("prototype")) : object = memberExpression(null != (_getSuperRef2 = getSuperRef()) ? _getSuperRef2 : identifier("Object"), identifier("prototype"));
          return memberExpression(object, prop, computed);
        }, set(superMember, value2) {
          const { computed } = superMember.node, prop = this.prop(superMember);
          return assignmentExpression("=", memberExpression(thisExpression(), prop, computed), value2);
        }, destructureSet(superMember) {
          const { computed } = superMember.node, prop = this.prop(superMember);
          return memberExpression(thisExpression(), prop, computed);
        }, call(superMember, args) {
          return (0, _helperOptimiseCallExpression.default)(this.get(superMember), thisExpression(), args, false);
        }, optionalCall(superMember, args) {
          return (0, _helperOptimiseCallExpression.default)(this.get(superMember), thisExpression(), args, true);
        } });
        exports2.default = class {
          constructor(opts) {
            var _opts$constantSuper;
            const path9 = opts.methodPath;
            this.methodPath = path9, this.isDerivedConstructor = path9.isClassMethod({ kind: "constructor" }) && !!opts.superRef, this.isStatic = path9.isObjectMethod() || path9.node.static || (null == path9.isStaticBlock ? void 0 : path9.isStaticBlock()), this.isPrivateMethod = path9.isPrivate() && path9.isMethod(), this.file = opts.file, this.constantSuper = null != (_opts$constantSuper = opts.constantSuper) ? _opts$constantSuper : opts.isLoose, this.opts = opts;
          }
          getObjectRef() {
            return cloneNode2(this.opts.objectRef || this.opts.getObjectRef());
          }
          getSuperRef() {
            return this.opts.superRef ? cloneNode2(this.opts.superRef) : this.opts.getSuperRef ? cloneNode2(this.opts.getSuperRef()) : void 0;
          }
          replace() {
            const { methodPath } = this;
            this.opts.refToPreserve && methodPath.traverse(unshadowSuperBindingVisitor, { refName: this.opts.refToPreserve.name });
            const handler = this.constantSuper ? looseHandlers : this.file.availableHelper("superPropSet") ? specHandlers : specHandlers_old;
            visitor.shouldSkip = (path9) => {
              if (path9.parentPath === methodPath && ("decorators" === path9.parentKey || "key" === path9.parentKey)) return true;
            }, (0, _helperMemberExpressionToFunctions.default)(methodPath, visitor, Object.assign({ file: this.file, scope: this.methodPath.scope, isDerivedConstructor: this.isDerivedConstructor, isStatic: this.isStatic, isPrivateMethod: this.isPrivateMethod, getObjectRef: this.getObjectRef.bind(this), getSuperRef: this.getSuperRef.bind(this), boundGet: handler.get }, handler));
          }
        };
      }, "./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.25.9/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isTransparentExprWrapper = isTransparentExprWrapper, exports2.skipTransparentExprWrapperNodes = function(node) {
          for (; isTransparentExprWrapper(node); ) node = node.expression;
          return node;
        }, exports2.skipTransparentExprWrappers = function(path9) {
          for (; isTransparentExprWrapper(path9.node); ) path9 = path9.get("expression");
          return path9;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { isParenthesizedExpression, isTSAsExpression, isTSNonNullExpression, isTSSatisfiesExpression, isTSTypeAssertion, isTypeCastExpression } = _t;
        function isTransparentExprWrapper(node) {
          return isTSAsExpression(node) || isTSSatisfiesExpression(node) || isTSTypeAssertion(node) || isTSNonNullExpression(node) || isTypeCastExpression(node) || isParenthesizedExpression(node);
        }
      }, "./node_modules/.pnpm/@babel+helper-string-parser@7.25.9/node_modules/@babel/helper-string-parser/lib/index.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.readCodePoint = readCodePoint, exports2.readInt = readInt, exports2.readStringContents = function(type, input, pos, lineStart, curLine, errors) {
          const initialPos = pos, initialLineStart = lineStart, initialCurLine = curLine;
          let out = "", firstInvalidLoc = null, chunkStart = pos;
          const { length } = input;
          for (; ; ) {
            if (pos >= length) {
              errors.unterminated(initialPos, initialLineStart, initialCurLine), out += input.slice(chunkStart, pos);
              break;
            }
            const ch = input.charCodeAt(pos);
            if (isStringEnd(type, ch, input, pos)) {
              out += input.slice(chunkStart, pos);
              break;
            }
            if (92 === ch) {
              out += input.slice(chunkStart, pos);
              const res = readEscapedChar(input, pos, lineStart, curLine, "template" === type, errors);
              null !== res.ch || firstInvalidLoc ? out += res.ch : firstInvalidLoc = { pos, lineStart, curLine }, { pos, lineStart, curLine } = res, chunkStart = pos;
            } else 8232 === ch || 8233 === ch ? (++curLine, lineStart = ++pos) : 10 === ch || 13 === ch ? "template" === type ? (out += input.slice(chunkStart, pos) + "\n", ++pos, 13 === ch && 10 === input.charCodeAt(pos) && ++pos, ++curLine, chunkStart = lineStart = pos) : errors.unterminated(initialPos, initialLineStart, initialCurLine) : ++pos;
          }
          return { pos, str: out, firstInvalidLoc, lineStart, curLine, containsInvalid: !!firstInvalidLoc };
        };
        var _isDigit = function(code) {
          return code >= 48 && code <= 57;
        };
        const forbiddenNumericSeparatorSiblings = { decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]), hex: /* @__PURE__ */ new Set([46, 88, 95, 120]) }, isAllowedNumericSeparatorSibling = { bin: (ch) => 48 === ch || 49 === ch, oct: (ch) => ch >= 48 && ch <= 55, dec: (ch) => ch >= 48 && ch <= 57, hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102 };
        function isStringEnd(type, ch, input, pos) {
          return "template" === type ? 96 === ch || 36 === ch && 123 === input.charCodeAt(pos + 1) : ch === ("double" === type ? 34 : 39);
        }
        function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
          const throwOnInvalid = !inTemplate;
          pos++;
          const res = (ch2) => ({ pos, ch: ch2, lineStart, curLine }), ch = input.charCodeAt(pos++);
          switch (ch) {
            case 110:
              return res("\n");
            case 114:
              return res("\r");
            case 120: {
              let code;
              return { code, pos } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors), res(null === code ? null : String.fromCharCode(code));
            }
            case 117: {
              let code;
              return { code, pos } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors), res(null === code ? null : String.fromCodePoint(code));
            }
            case 116:
              return res("	");
            case 98:
              return res("\b");
            case 118:
              return res("\v");
            case 102:
              return res("\f");
            case 13:
              10 === input.charCodeAt(pos) && ++pos;
            case 10:
              lineStart = pos, ++curLine;
            case 8232:
            case 8233:
              return res("");
            case 56:
            case 57:
              if (inTemplate) return res(null);
              errors.strictNumericEscape(pos - 1, lineStart, curLine);
            default:
              if (ch >= 48 && ch <= 55) {
                const startPos = pos - 1;
                let octalStr = /^[0-7]+/.exec(input.slice(startPos, pos + 2))[0], octal = parseInt(octalStr, 8);
                octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), pos += octalStr.length - 1;
                const next = input.charCodeAt(pos);
                if ("0" !== octalStr || 56 === next || 57 === next) {
                  if (inTemplate) return res(null);
                  errors.strictNumericEscape(startPos, lineStart, curLine);
                }
                return res(String.fromCharCode(octal));
              }
              return res(String.fromCharCode(ch));
          }
        }
        function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
          const initialPos = pos;
          let n2;
          return { n: n2, pos } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid), null === n2 && (throwOnInvalid ? errors.invalidEscapeSequence(initialPos, lineStart, curLine) : pos = initialPos - 1), { code: n2, pos };
        }
        function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {
          const start = pos, forbiddenSiblings = 16 === radix ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct, isAllowedSibling = 16 === radix ? isAllowedNumericSeparatorSibling.hex : 10 === radix ? isAllowedNumericSeparatorSibling.dec : 8 === radix ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
          let invalid = false, total = 0;
          for (let i2 = 0, e2 = null == len ? 1 / 0 : len; i2 < e2; ++i2) {
            const code = input.charCodeAt(pos);
            let val;
            if (95 !== code || "bail" === allowNumSeparator) {
              if (val = code >= 97 ? code - 97 + 10 : code >= 65 ? code - 65 + 10 : _isDigit(code) ? code - 48 : 1 / 0, val >= radix) {
                if (val <= 9 && bailOnError) return { n: null, pos };
                if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) val = 0;
                else {
                  if (!forceLen) break;
                  val = 0, invalid = true;
                }
              }
              ++pos, total = total * radix + val;
            } else {
              const prev = input.charCodeAt(pos - 1), next = input.charCodeAt(pos + 1);
              if (allowNumSeparator) {
                if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
                  if (bailOnError) return { n: null, pos };
                  errors.unexpectedNumericSeparator(pos, lineStart, curLine);
                }
              } else {
                if (bailOnError) return { n: null, pos };
                errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
              }
              ++pos;
            }
          }
          return pos === start || null != len && pos - start !== len || invalid ? { n: null, pos } : { n: total, pos };
        }
        function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
          let code;
          if (123 === input.charCodeAt(pos)) {
            if (++pos, { code, pos } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors), ++pos, null !== code && code > 1114111) {
              if (!throwOnInvalid) return { code: null, pos };
              errors.invalidCodePoint(pos, lineStart, curLine);
            }
          } else ({ code, pos } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
          return { code, pos };
        }
      }, "./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/identifier.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isIdentifierChar = isIdentifierChar, exports2.isIdentifierName = function(name) {
          let isFirst = true;
          for (let i2 = 0; i2 < name.length; i2++) {
            let cp = name.charCodeAt(i2);
            if (55296 == (64512 & cp) && i2 + 1 < name.length) {
              const trail = name.charCodeAt(++i2);
              56320 == (64512 & trail) && (cp = 65536 + ((1023 & cp) << 10) + (1023 & trail));
            }
            if (isFirst) {
              if (isFirst = false, !isIdentifierStart(cp)) return false;
            } else if (!isIdentifierChar(cp)) return false;
          }
          return !isFirst;
        }, exports2.isIdentifierStart = isIdentifierStart;
        let nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC", nonASCIIidentifierChars = "\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0897-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65";
        const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]"), nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
        nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
        const astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 4, 51, 13, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 39, 27, 10, 22, 251, 41, 7, 1, 17, 2, 60, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 31, 9, 2, 0, 3, 0, 2, 37, 2, 0, 26, 0, 2, 0, 45, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 200, 32, 32, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 26, 3994, 6, 582, 6842, 29, 1763, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 433, 44, 212, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 42, 9, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 229, 29, 3, 0, 496, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191], astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 7, 9, 32, 4, 318, 1, 80, 3, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 68, 8, 2, 0, 3, 0, 2, 3, 2, 4, 2, 0, 15, 1, 83, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 7, 19, 58, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 343, 9, 54, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 10, 5350, 0, 7, 14, 11465, 27, 2343, 9, 87, 9, 39, 4, 60, 6, 26, 9, 535, 9, 470, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4178, 9, 519, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 245, 1, 2, 9, 726, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
        function isInAstralSet(code, set) {
          let pos = 65536;
          for (let i2 = 0, length = set.length; i2 < length; i2 += 2) {
            if (pos += set[i2], pos > code) return false;
            if (pos += set[i2 + 1], pos >= code) return true;
          }
          return false;
        }
        function isIdentifierStart(code) {
          return code < 65 ? 36 === code : code <= 90 || (code < 97 ? 95 === code : code <= 122 || (code <= 65535 ? code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code)) : isInAstralSet(code, astralIdentifierStartCodes)));
        }
        function isIdentifierChar(code) {
          return code < 48 ? 36 === code : code < 58 || !(code < 65) && (code <= 90 || (code < 97 ? 95 === code : code <= 122 || (code <= 65535 ? code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code)) : isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes))));
        }
      }, "./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "isIdentifierChar", { enumerable: true, get: function() {
          return _identifier.isIdentifierChar;
        } }), Object.defineProperty(exports2, "isIdentifierName", { enumerable: true, get: function() {
          return _identifier.isIdentifierName;
        } }), Object.defineProperty(exports2, "isIdentifierStart", { enumerable: true, get: function() {
          return _identifier.isIdentifierStart;
        } }), Object.defineProperty(exports2, "isKeyword", { enumerable: true, get: function() {
          return _keyword.isKeyword;
        } }), Object.defineProperty(exports2, "isReservedWord", { enumerable: true, get: function() {
          return _keyword.isReservedWord;
        } }), Object.defineProperty(exports2, "isStrictBindOnlyReservedWord", { enumerable: true, get: function() {
          return _keyword.isStrictBindOnlyReservedWord;
        } }), Object.defineProperty(exports2, "isStrictBindReservedWord", { enumerable: true, get: function() {
          return _keyword.isStrictBindReservedWord;
        } }), Object.defineProperty(exports2, "isStrictReservedWord", { enumerable: true, get: function() {
          return _keyword.isStrictReservedWord;
        } });
        var _identifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/identifier.js"), _keyword = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/keyword.js");
      }, "./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/keyword.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isKeyword = function(word) {
          return keywords.has(word);
        }, exports2.isReservedWord = isReservedWord, exports2.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord, exports2.isStrictBindReservedWord = function(word, inModule) {
          return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
        }, exports2.isStrictReservedWord = isStrictReservedWord;
        const reservedWords_strict = ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"], reservedWords_strictBind = ["eval", "arguments"], keywords = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"]), reservedWordsStrictSet = new Set(reservedWords_strict), reservedWordsStrictBindSet = new Set(reservedWords_strictBind);
        function isReservedWord(word, inModule) {
          return inModule && "await" === word || "enum" === word;
        }
        function isStrictReservedWord(word, inModule) {
          return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
        }
        function isStrictBindOnlyReservedWord(word) {
          return reservedWordsStrictBindSet.has(word);
        }
      }, "./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/find-suggestion.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.findSuggestion = function(str, arr) {
          const distances = arr.map((el) => function(a2, b2) {
            let i2, j2, t2 = [], u3 = [];
            const m2 = a2.length, n2 = b2.length;
            if (!m2) return n2;
            if (!n2) return m2;
            for (j2 = 0; j2 <= n2; j2++) t2[j2] = j2;
            for (i2 = 1; i2 <= m2; i2++) {
              for (u3 = [i2], j2 = 1; j2 <= n2; j2++) u3[j2] = a2[i2 - 1] === b2[j2 - 1] ? t2[j2 - 1] : min(t2[j2 - 1], t2[j2], u3[j2 - 1]) + 1;
              t2 = u3;
            }
            return u3[n2];
          }(el, str));
          return arr[distances.indexOf(min(...distances))];
        };
        const { min } = Math;
      }, "./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "OptionValidator", { enumerable: true, get: function() {
          return _validator.OptionValidator;
        } }), Object.defineProperty(exports2, "findSuggestion", { enumerable: true, get: function() {
          return _findSuggestion.findSuggestion;
        } });
        var _validator = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/validator.js"), _findSuggestion = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/find-suggestion.js");
      }, "./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/validator.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.OptionValidator = void 0;
        var _findSuggestion = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/find-suggestion.js");
        exports2.OptionValidator = class {
          constructor(descriptor) {
            this.descriptor = descriptor;
          }
          validateTopLevelOptions(options, TopLevelOptionShape) {
            const validOptionNames = Object.keys(TopLevelOptionShape);
            for (const option of Object.keys(options)) if (!validOptionNames.includes(option)) throw new Error(this.formatMessage(`'${option}' is not a valid top-level option.
- Did you mean '${(0, _findSuggestion.findSuggestion)(option, validOptionNames)}'?`));
          }
          validateBooleanOption(name, value2, defaultValue) {
            return void 0 === value2 ? defaultValue : (this.invariant("boolean" == typeof value2, `'${name}' option must be a boolean.`), value2);
          }
          validateStringOption(name, value2, defaultValue) {
            return void 0 === value2 ? defaultValue : (this.invariant("string" == typeof value2, `'${name}' option must be a string.`), value2);
          }
          invariant(condition, message) {
            if (!condition) throw new Error(this.formatMessage(message));
          }
          formatMessage(message) {
            return `${this.descriptor}: ${message}`;
          }
        };
      }, "./node_modules/.pnpm/@babel+helpers@7.26.0/node_modules/@babel/helpers/lib/helpers-generated.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _template = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/index.js");
        function helper(minVersion, source, metadata) {
          return Object.freeze({ minVersion, ast: () => _template.default.program.ast(source, { preserveComments: true }), metadata });
        }
        const helpers = exports2.default = { __proto__: null, OverloadYield: helper("7.18.14", "function _OverloadYield(e,d){this.v=e,this.k=d}", { globals: [], locals: { _OverloadYield: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_OverloadYield", dependencies: {} }), applyDecoratedDescriptor: helper("7.0.0-beta.0", 'function _applyDecoratedDescriptor(i,e,r,n,l){var a={};return Object.keys(n).forEach((function(i){a[i]=n[i]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(i,e,r)||r}),a),l&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(l):void 0,a.initializer=void 0),void 0===a.initializer?(Object.defineProperty(i,e,a),null):a}', { globals: ["Object"], locals: { _applyDecoratedDescriptor: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_applyDecoratedDescriptor", dependencies: {} }), applyDecs2311: helper("7.24.0", 'function applyDecs2311(e,t,n,r,o,i){var a,c,u,s,f,l,p,d=Symbol.metadata||Symbol.for("Symbol.metadata"),m=Object.defineProperty,h=Object.create,y=[h(null),h(null)],v=t.length;function g(t,n,r){return function(o,i){n&&(i=o,o=e);for(var a=0;a<t.length;a++)i=t[a].apply(o,r?[i]:[]);return r?i:o}}function b(e,t,n,r){if("function"!=typeof e&&(r||void 0!==e))throw new TypeError(t+" must "+(n||"be")+" a function"+(r?"":" or undefined"));return e}function applyDec(e,t,n,r,o,i,u,s,f,l,p){function d(e){if(!p(e))throw new TypeError("Attempted to access private element on non-instance")}var h=[].concat(t[0]),v=t[3],w=!u,D=1===o,S=3===o,j=4===o,E=2===o;function I(t,n,r){return function(o,i){return n&&(i=o,o=e),r&&r(o),P[t].call(o,i)}}if(!w){var P={},k=[],F=S?"get":j||D?"set":"value";if(f?(l||D?P={get:setFunctionName((function(){return v(this)}),r,"get"),set:function(e){t[4](this,e)}}:P[F]=v,l||setFunctionName(P[F],r,E?"":F)):l||(P=Object.getOwnPropertyDescriptor(e,r)),!l&&!f){if((c=y[+s][r])&&7!=(c^o))throw Error("Decorating two elements with the same name ("+P[F].name+") is not supported yet");y[+s][r]=o<3?1:o}}for(var N=e,O=h.length-1;O>=0;O-=n?2:1){var T=b(h[O],"A decorator","be",!0),z=n?h[O-1]:void 0,A={},H={kind:["field","accessor","method","getter","setter","class"][o],name:r,metadata:a,addInitializer:function(e,t){if(e.v)throw new TypeError("attempted to call addInitializer after decoration was finished");b(t,"An initializer","be",!0),i.push(t)}.bind(null,A)};if(w)c=T.call(z,N,H),A.v=1,b(c,"class decorators","return")&&(N=c);else if(H.static=s,H.private=f,c=H.access={has:f?p.bind():function(e){return r in e}},j||(c.get=f?E?function(e){return d(e),P.value}:I("get",0,d):function(e){return e[r]}),E||S||(c.set=f?I("set",0,d):function(e,t){e[r]=t}),N=T.call(z,D?{get:P.get,set:P.set}:P[F],H),A.v=1,D){if("object"==typeof N&&N)(c=b(N.get,"accessor.get"))&&(P.get=c),(c=b(N.set,"accessor.set"))&&(P.set=c),(c=b(N.init,"accessor.init"))&&k.unshift(c);else if(void 0!==N)throw new TypeError("accessor decorators must return an object with get, set, or init properties or undefined")}else b(N,(l?"field":"method")+" decorators","return")&&(l?k.unshift(N):P[F]=N)}return o<2&&u.push(g(k,s,1),g(i,s,0)),l||w||(f?D?u.splice(-1,0,I("get",s),I("set",s)):u.push(E?P[F]:b.call.bind(P[F])):m(e,r,P)),N}function w(e){return m(e,d,{configurable:!0,enumerable:!0,value:a})}return void 0!==i&&(a=i[d]),a=h(null==a?null:a),f=[],l=function(e){e&&f.push(g(e))},p=function(t,r){for(var i=0;i<n.length;i++){var a=n[i],c=a[1],l=7&c;if((8&c)==t&&!l==r){var p=a[2],d=!!a[3],m=16&c;applyDec(t?e:e.prototype,a,m,d?"#"+p:toPropertyKey(p),l,l<2?[]:t?s=s||[]:u=u||[],f,!!t,d,r,t&&d?function(t){return checkInRHS(t)===e}:o)}}},p(8,0),p(0,0),p(8,1),p(0,1),l(u),l(s),c=f,v||w(e),{e:c,get c(){var n=[];return v&&[w(e=applyDec(e,[t],r,e.name,5,n)),g(n,1)]}}}', { globals: ["Symbol", "Object", "TypeError", "Error"], locals: { applyDecs2311: ["body.0.id"] }, exportBindingAssignments: [], exportName: "applyDecs2311", dependencies: { checkInRHS: ["body.0.body.body.5.argument.expressions.4.right.body.body.0.body.body.1.consequent.body.1.expression.arguments.10.consequent.body.body.0.argument.left.callee"], setFunctionName: ["body.0.body.body.3.body.body.3.consequent.body.1.test.expressions.0.consequent.expressions.0.consequent.right.properties.0.value.callee", "body.0.body.body.3.body.body.3.consequent.body.1.test.expressions.0.consequent.expressions.1.right.callee"], toPropertyKey: ["body.0.body.body.5.argument.expressions.4.right.body.body.0.body.body.1.consequent.body.1.expression.arguments.3.alternate.callee"] } }), arrayLikeToArray: helper("7.9.0", "function _arrayLikeToArray(r,a){(null==a||a>r.length)&&(a=r.length);for(var e=0,n=Array(a);e<a;e++)n[e]=r[e];return n}", { globals: ["Array"], locals: { _arrayLikeToArray: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_arrayLikeToArray", dependencies: {} }), arrayWithHoles: helper("7.0.0-beta.0", "function _arrayWithHoles(r){if(Array.isArray(r))return r}", { globals: ["Array"], locals: { _arrayWithHoles: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_arrayWithHoles", dependencies: {} }), arrayWithoutHoles: helper("7.0.0-beta.0", "function _arrayWithoutHoles(r){if(Array.isArray(r))return arrayLikeToArray(r)}", { globals: ["Array"], locals: { _arrayWithoutHoles: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_arrayWithoutHoles", dependencies: { arrayLikeToArray: ["body.0.body.body.0.consequent.argument.callee"] } }), assertClassBrand: helper("7.24.0", 'function _assertClassBrand(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}', { globals: ["TypeError"], locals: { _assertClassBrand: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_assertClassBrand", dependencies: {} }), assertThisInitialized: helper("7.0.0-beta.0", `function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}`, { globals: ["ReferenceError"], locals: { _assertThisInitialized: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_assertThisInitialized", dependencies: {} }), asyncGeneratorDelegate: helper("7.0.0-beta.0", 'function _asyncGeneratorDelegate(t){var e={},n=!1;function pump(e,r){return n=!0,r=new Promise((function(n){n(t[e](r))})),{done:!1,value:new OverloadYield(r,1)}}return e["undefined"!=typeof Symbol&&Symbol.iterator||"@@iterator"]=function(){return this},e.next=function(t){return n?(n=!1,t):pump("next",t)},"function"==typeof t.throw&&(e.throw=function(t){if(n)throw n=!1,t;return pump("throw",t)}),"function"==typeof t.return&&(e.return=function(t){return n?(n=!1,t):pump("return",t)}),e}', { globals: ["Promise", "Symbol"], locals: { _asyncGeneratorDelegate: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_asyncGeneratorDelegate", dependencies: { OverloadYield: ["body.0.body.body.1.body.body.0.argument.expressions.2.properties.1.value.callee"] } }), asyncIterator: helper("7.15.9", 'function _asyncIterator(r){var n,t,o,e=2;for("undefined"!=typeof Symbol&&(t=Symbol.asyncIterator,o=Symbol.iterator);e--;){if(t&&null!=(n=r[t]))return n.call(r);if(o&&null!=(n=r[o]))return new AsyncFromSyncIterator(n.call(r));t="@@asyncIterator",o="@@iterator"}throw new TypeError("Object is not async iterable")}function AsyncFromSyncIterator(r){function AsyncFromSyncIteratorContinuation(r){if(Object(r)!==r)return Promise.reject(new TypeError(r+" is not an object."));var n=r.done;return Promise.resolve(r.value).then((function(r){return{value:r,done:n}}))}return AsyncFromSyncIterator=function(r){this.s=r,this.n=r.next},AsyncFromSyncIterator.prototype={s:null,n:null,next:function(){return AsyncFromSyncIteratorContinuation(this.n.apply(this.s,arguments))},return:function(r){var n=this.s.return;return void 0===n?Promise.resolve({value:r,done:!0}):AsyncFromSyncIteratorContinuation(n.apply(this.s,arguments))},throw:function(r){var n=this.s.return;return void 0===n?Promise.reject(r):AsyncFromSyncIteratorContinuation(n.apply(this.s,arguments))}},new AsyncFromSyncIterator(r)}', { globals: ["Symbol", "TypeError", "Object", "Promise"], locals: { _asyncIterator: ["body.0.id"], AsyncFromSyncIterator: ["body.1.id", "body.0.body.body.1.body.body.1.consequent.argument.callee", "body.1.body.body.1.argument.expressions.1.left.object", "body.1.body.body.1.argument.expressions.2.callee", "body.1.body.body.1.argument.expressions.0.left"] }, exportBindingAssignments: [], exportName: "_asyncIterator", dependencies: {} }), asyncToGenerator: helper("7.0.0-beta.0", 'function asyncGeneratorStep(n,t,e,r,o,a,c){try{var i=n[a](c),u=i.value}catch(n){return void e(n)}i.done?t(u):Promise.resolve(u).then(r,o)}function _asyncToGenerator(n){return function(){var t=this,e=arguments;return new Promise((function(r,o){var a=n.apply(t,e);function _next(n){asyncGeneratorStep(a,r,o,_next,_throw,"next",n)}function _throw(n){asyncGeneratorStep(a,r,o,_next,_throw,"throw",n)}_next(void 0)}))}}', { globals: ["Promise"], locals: { asyncGeneratorStep: ["body.0.id", "body.1.body.body.0.argument.body.body.1.argument.arguments.0.body.body.1.body.body.0.expression.callee", "body.1.body.body.0.argument.body.body.1.argument.arguments.0.body.body.2.body.body.0.expression.callee"], _asyncToGenerator: ["body.1.id"] }, exportBindingAssignments: [], exportName: "_asyncToGenerator", dependencies: {} }), awaitAsyncGenerator: helper("7.0.0-beta.0", "function _awaitAsyncGenerator(e){return new OverloadYield(e,0)}", { globals: [], locals: { _awaitAsyncGenerator: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_awaitAsyncGenerator", dependencies: { OverloadYield: ["body.0.body.body.0.argument.callee"] } }), callSuper: helper("7.23.8", "function _callSuper(t,o,e){return o=getPrototypeOf(o),possibleConstructorReturn(t,isNativeReflectConstruct()?Reflect.construct(o,e||[],getPrototypeOf(t).constructor):o.apply(t,e))}", { globals: ["Reflect"], locals: { _callSuper: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_callSuper", dependencies: { getPrototypeOf: ["body.0.body.body.0.argument.expressions.0.right.callee", "body.0.body.body.0.argument.expressions.1.arguments.1.consequent.arguments.2.object.callee"], isNativeReflectConstruct: ["body.0.body.body.0.argument.expressions.1.arguments.1.test.callee"], possibleConstructorReturn: ["body.0.body.body.0.argument.expressions.1.callee"] } }), checkInRHS: helper("7.20.5", `function _checkInRHS(e){if(Object(e)!==e)throw TypeError("right-hand side of 'in' should be an object, got "+(null!==e?typeof e:"null"));return e}`, { globals: ["Object", "TypeError"], locals: { _checkInRHS: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_checkInRHS", dependencies: {} }), checkPrivateRedeclaration: helper("7.14.1", 'function _checkPrivateRedeclaration(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}', { globals: ["TypeError"], locals: { _checkPrivateRedeclaration: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_checkPrivateRedeclaration", dependencies: {} }), classCallCheck: helper("7.0.0-beta.0", 'function _classCallCheck(a,n){if(!(a instanceof n))throw new TypeError("Cannot call a class as a function")}', { globals: ["TypeError"], locals: { _classCallCheck: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classCallCheck", dependencies: {} }), classNameTDZError: helper("7.0.0-beta.0", `function _classNameTDZError(e){throw new ReferenceError('Class "'+e+'" cannot be referenced in computed property keys.')}`, { globals: ["ReferenceError"], locals: { _classNameTDZError: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classNameTDZError", dependencies: {} }), classPrivateFieldGet2: helper("7.24.0", "function _classPrivateFieldGet2(s,a){return s.get(assertClassBrand(s,a))}", { globals: [], locals: { _classPrivateFieldGet2: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateFieldGet2", dependencies: { assertClassBrand: ["body.0.body.body.0.argument.arguments.0.callee"] } }), classPrivateFieldInitSpec: helper("7.14.1", "function _classPrivateFieldInitSpec(e,t,a){checkPrivateRedeclaration(e,t),t.set(e,a)}", { globals: [], locals: { _classPrivateFieldInitSpec: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateFieldInitSpec", dependencies: { checkPrivateRedeclaration: ["body.0.body.body.0.expression.expressions.0.callee"] } }), classPrivateFieldLooseBase: helper("7.0.0-beta.0", 'function _classPrivateFieldBase(e,t){if(!{}.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}', { globals: ["TypeError"], locals: { _classPrivateFieldBase: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateFieldBase", dependencies: {} }), classPrivateFieldLooseKey: helper("7.0.0-beta.0", 'var id=0;function _classPrivateFieldKey(e){return"__private_"+id+++"_"+e}', { globals: [], locals: { id: ["body.0.declarations.0.id", "body.1.body.body.0.argument.left.left.right.argument", "body.1.body.body.0.argument.left.left.right.argument"], _classPrivateFieldKey: ["body.1.id"] }, exportBindingAssignments: [], exportName: "_classPrivateFieldKey", dependencies: {} }), classPrivateFieldSet2: helper("7.24.0", "function _classPrivateFieldSet2(s,a,r){return s.set(assertClassBrand(s,a),r),r}", { globals: [], locals: { _classPrivateFieldSet2: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateFieldSet2", dependencies: { assertClassBrand: ["body.0.body.body.0.argument.expressions.0.arguments.0.callee"] } }), classPrivateGetter: helper("7.24.0", "function _classPrivateGetter(s,r,a){return a(assertClassBrand(s,r))}", { globals: [], locals: { _classPrivateGetter: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateGetter", dependencies: { assertClassBrand: ["body.0.body.body.0.argument.arguments.0.callee"] } }), classPrivateMethodInitSpec: helper("7.14.1", "function _classPrivateMethodInitSpec(e,a){checkPrivateRedeclaration(e,a),a.add(e)}", { globals: [], locals: { _classPrivateMethodInitSpec: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateMethodInitSpec", dependencies: { checkPrivateRedeclaration: ["body.0.body.body.0.expression.expressions.0.callee"] } }), classPrivateSetter: helper("7.24.0", "function _classPrivateSetter(s,r,a,t){return r(assertClassBrand(s,a),t),t}", { globals: [], locals: { _classPrivateSetter: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateSetter", dependencies: { assertClassBrand: ["body.0.body.body.0.argument.expressions.0.arguments.0.callee"] } }), classStaticPrivateMethodGet: helper("7.3.2", "function _classStaticPrivateMethodGet(s,a,t){return assertClassBrand(a,s),t}", { globals: [], locals: { _classStaticPrivateMethodGet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classStaticPrivateMethodGet", dependencies: { assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"] } }), construct: helper("7.0.0-beta.0", "function _construct(t,e,r){if(isNativeReflectConstruct())return Reflect.construct.apply(null,arguments);var o=[null];o.push.apply(o,e);var p=new(t.bind.apply(t,o));return r&&setPrototypeOf(p,r.prototype),p}", { globals: ["Reflect"], locals: { _construct: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_construct", dependencies: { isNativeReflectConstruct: ["body.0.body.body.0.test.callee"], setPrototypeOf: ["body.0.body.body.4.argument.expressions.0.right.callee"] } }), createClass: helper("7.0.0-beta.0", 'function _defineProperties(e,r){for(var t=0;t<r.length;t++){var o=r[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,toPropertyKey(o.key),o)}}function _createClass(e,r,t){return r&&_defineProperties(e.prototype,r),t&&_defineProperties(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}', { globals: ["Object"], locals: { _defineProperties: ["body.0.id", "body.1.body.body.0.argument.expressions.0.right.callee", "body.1.body.body.0.argument.expressions.1.right.callee"], _createClass: ["body.1.id"] }, exportBindingAssignments: [], exportName: "_createClass", dependencies: { toPropertyKey: ["body.0.body.body.0.body.body.1.expression.expressions.3.arguments.1.callee"] } }), createForOfIteratorHelper: helper("7.9.0", 'function _createForOfIteratorHelper(r,e){var t="undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(!t){if(Array.isArray(r)||(t=unsupportedIterableToArray(r))||e&&r&&"number"==typeof r.length){t&&(r=t);var n=0,F=function(){};return{s:F,n:function(){return n>=r.length?{done:!0}:{done:!1,value:r[n++]}},e:function(r){throw r},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,u=!1;return{s:function(){t=t.call(r)},n:function(){var r=t.next();return a=r.done,r},e:function(r){u=!0,o=r},f:function(){try{a||null==t.return||t.return()}finally{if(u)throw o}}}}', { globals: ["Symbol", "Array", "TypeError"], locals: { _createForOfIteratorHelper: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_createForOfIteratorHelper", dependencies: { unsupportedIterableToArray: ["body.0.body.body.1.consequent.body.0.test.left.right.right.callee"] } }), createForOfIteratorHelperLoose: helper("7.9.0", 'function _createForOfIteratorHelperLoose(r,e){var t="undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(t)return(t=t.call(r)).next.bind(t);if(Array.isArray(r)||(t=unsupportedIterableToArray(r))||e&&r&&"number"==typeof r.length){t&&(r=t);var o=0;return function(){return o>=r.length?{done:!0}:{done:!1,value:r[o++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}', { globals: ["Symbol", "Array", "TypeError"], locals: { _createForOfIteratorHelperLoose: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_createForOfIteratorHelperLoose", dependencies: { unsupportedIterableToArray: ["body.0.body.body.2.test.left.right.right.callee"] } }), createSuper: helper("7.9.0", "function _createSuper(t){var r=isNativeReflectConstruct();return function(){var e,o=getPrototypeOf(t);if(r){var s=getPrototypeOf(this).constructor;e=Reflect.construct(o,arguments,s)}else e=o.apply(this,arguments);return possibleConstructorReturn(this,e)}}", { globals: ["Reflect"], locals: { _createSuper: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_createSuper", dependencies: { getPrototypeOf: ["body.0.body.body.1.argument.body.body.0.declarations.1.init.callee", "body.0.body.body.1.argument.body.body.1.consequent.body.0.declarations.0.init.object.callee"], isNativeReflectConstruct: ["body.0.body.body.0.declarations.0.init.callee"], possibleConstructorReturn: ["body.0.body.body.1.argument.body.body.2.argument.callee"] } }), decorate: helper("7.1.5", `function _decorate(e,r,t,i){var o=_getDecoratorsApi();if(i)for(var n=0;n<i.length;n++)o=i[n](o);var s=r((function(e){o.initializeInstanceElements(e,a.elements)}),t),a=o.decorateClass(_coalesceClassElements(s.d.map(_createElementDescriptor)),e);return o.initializeClassElements(s.F,a.elements),o.runClassFinishers(s.F,a.finishers)}function _getDecoratorsApi(){_getDecoratorsApi=function(){return e};var e={elementsDefinitionOrder:[["method"],["field"]],initializeInstanceElements:function(e,r){["method","field"].forEach((function(t){r.forEach((function(r){r.kind===t&&"own"===r.placement&&this.defineClassElement(e,r)}),this)}),this)},initializeClassElements:function(e,r){var t=e.prototype;["method","field"].forEach((function(i){r.forEach((function(r){var o=r.placement;if(r.kind===i&&("static"===o||"prototype"===o)){var n="static"===o?e:t;this.defineClassElement(n,r)}}),this)}),this)},defineClassElement:function(e,r){var t=r.descriptor;if("field"===r.kind){var i=r.initializer;t={enumerable:t.enumerable,writable:t.writable,configurable:t.configurable,value:void 0===i?void 0:i.call(e)}}Object.defineProperty(e,r.key,t)},decorateClass:function(e,r){var t=[],i=[],o={static:[],prototype:[],own:[]};if(e.forEach((function(e){this.addElementPlacement(e,o)}),this),e.forEach((function(e){if(!_hasDecorators(e))return t.push(e);var r=this.decorateElement(e,o);t.push(r.element),t.push.apply(t,r.extras),i.push.apply(i,r.finishers)}),this),!r)return{elements:t,finishers:i};var n=this.decorateConstructor(t,r);return i.push.apply(i,n.finishers),n.finishers=i,n},addElementPlacement:function(e,r,t){var i=r[e.placement];if(!t&&-1!==i.indexOf(e.key))throw new TypeError("Duplicated element ("+e.key+")");i.push(e.key)},decorateElement:function(e,r){for(var t=[],i=[],o=e.decorators,n=o.length-1;n>=0;n--){var s=r[e.placement];s.splice(s.indexOf(e.key),1);var a=this.fromElementDescriptor(e),l=this.toElementFinisherExtras((0,o[n])(a)||a);e=l.element,this.addElementPlacement(e,r),l.finisher&&i.push(l.finisher);var c=l.extras;if(c){for(var p=0;p<c.length;p++)this.addElementPlacement(c[p],r);t.push.apply(t,c)}}return{element:e,finishers:i,extras:t}},decorateConstructor:function(e,r){for(var t=[],i=r.length-1;i>=0;i--){var o=this.fromClassDescriptor(e),n=this.toClassDescriptor((0,r[i])(o)||o);if(void 0!==n.finisher&&t.push(n.finisher),void 0!==n.elements){e=n.elements;for(var s=0;s<e.length-1;s++)for(var a=s+1;a<e.length;a++)if(e[s].key===e[a].key&&e[s].placement===e[a].placement)throw new TypeError("Duplicated element ("+e[s].key+")")}}return{elements:e,finishers:t}},fromElementDescriptor:function(e){var r={kind:e.kind,key:e.key,placement:e.placement,descriptor:e.descriptor};return Object.defineProperty(r,Symbol.toStringTag,{value:"Descriptor",configurable:!0}),"field"===e.kind&&(r.initializer=e.initializer),r},toElementDescriptors:function(e){if(void 0!==e)return toArray(e).map((function(e){var r=this.toElementDescriptor(e);return this.disallowProperty(e,"finisher","An element descriptor"),this.disallowProperty(e,"extras","An element descriptor"),r}),this)},toElementDescriptor:function(e){var r=e.kind+"";if("method"!==r&&"field"!==r)throw new TypeError('An element descriptor\\'s .kind property must be either "method" or "field", but a decorator created an element descriptor with .kind "'+r+'"');var t=toPropertyKey(e.key),i=e.placement+"";if("static"!==i&&"prototype"!==i&&"own"!==i)throw new TypeError('An element descriptor\\'s .placement property must be one of "static", "prototype" or "own", but a decorator created an element descriptor with .placement "'+i+'"');var o=e.descriptor;this.disallowProperty(e,"elements","An element descriptor");var n={kind:r,key:t,placement:i,descriptor:Object.assign({},o)};return"field"!==r?this.disallowProperty(e,"initializer","A method descriptor"):(this.disallowProperty(o,"get","The property descriptor of a field descriptor"),this.disallowProperty(o,"set","The property descriptor of a field descriptor"),this.disallowProperty(o,"value","The property descriptor of a field descriptor"),n.initializer=e.initializer),n},toElementFinisherExtras:function(e){return{element:this.toElementDescriptor(e),finisher:_optionalCallableProperty(e,"finisher"),extras:this.toElementDescriptors(e.extras)}},fromClassDescriptor:function(e){var r={kind:"class",elements:e.map(this.fromElementDescriptor,this)};return Object.defineProperty(r,Symbol.toStringTag,{value:"Descriptor",configurable:!0}),r},toClassDescriptor:function(e){var r=e.kind+"";if("class"!==r)throw new TypeError('A class descriptor\\'s .kind property must be "class", but a decorator created a class descriptor with .kind "'+r+'"');this.disallowProperty(e,"key","A class descriptor"),this.disallowProperty(e,"placement","A class descriptor"),this.disallowProperty(e,"descriptor","A class descriptor"),this.disallowProperty(e,"initializer","A class descriptor"),this.disallowProperty(e,"extras","A class descriptor");var t=_optionalCallableProperty(e,"finisher");return{elements:this.toElementDescriptors(e.elements),finisher:t}},runClassFinishers:function(e,r){for(var t=0;t<r.length;t++){var i=(0,r[t])(e);if(void 0!==i){if("function"!=typeof i)throw new TypeError("Finishers must return a constructor.");e=i}}return e},disallowProperty:function(e,r,t){if(void 0!==e[r])throw new TypeError(t+" can't have a ."+r+" property.")}};return e}function _createElementDescriptor(e){var r,t=toPropertyKey(e.key);"method"===e.kind?r={value:e.value,writable:!0,configurable:!0,enumerable:!1}:"get"===e.kind?r={get:e.value,configurable:!0,enumerable:!1}:"set"===e.kind?r={set:e.value,configurable:!0,enumerable:!1}:"field"===e.kind&&(r={configurable:!0,writable:!0,enumerable:!0});var i={kind:"field"===e.kind?"field":"method",key:t,placement:e.static?"static":"field"===e.kind?"own":"prototype",descriptor:r};return e.decorators&&(i.decorators=e.decorators),"field"===e.kind&&(i.initializer=e.value),i}function _coalesceGetterSetter(e,r){void 0!==e.descriptor.get?r.descriptor.get=e.descriptor.get:r.descriptor.set=e.descriptor.set}function _coalesceClassElements(e){for(var r=[],isSameElement=function(e){return"method"===e.kind&&e.key===o.key&&e.placement===o.placement},t=0;t<e.length;t++){var i,o=e[t];if("method"===o.kind&&(i=r.find(isSameElement)))if(_isDataDescriptor(o.descriptor)||_isDataDescriptor(i.descriptor)){if(_hasDecorators(o)||_hasDecorators(i))throw new ReferenceError("Duplicated methods ("+o.key+") can't be decorated.");i.descriptor=o.descriptor}else{if(_hasDecorators(o)){if(_hasDecorators(i))throw new ReferenceError("Decorators can't be placed on different accessors with for the same property ("+o.key+").");i.decorators=o.decorators}_coalesceGetterSetter(o,i)}else r.push(o)}return r}function _hasDecorators(e){return e.decorators&&e.decorators.length}function _isDataDescriptor(e){return void 0!==e&&!(void 0===e.value&&void 0===e.writable)}function _optionalCallableProperty(e,r){var t=e[r];if(void 0!==t&&"function"!=typeof t)throw new TypeError("Expected '"+r+"' to be a function");return t}`, { globals: ["Object", "TypeError", "Symbol", "ReferenceError"], locals: { _decorate: ["body.0.id"], _getDecoratorsApi: ["body.1.id", "body.0.body.body.0.declarations.0.init.callee", "body.1.body.body.0.expression.left"], _createElementDescriptor: ["body.2.id", "body.0.body.body.2.declarations.1.init.arguments.0.arguments.0.arguments.0"], _coalesceGetterSetter: ["body.3.id", "body.4.body.body.0.body.body.1.consequent.alternate.body.1.expression.callee"], _coalesceClassElements: ["body.4.id", "body.0.body.body.2.declarations.1.init.arguments.0.callee"], _hasDecorators: ["body.5.id", "body.1.body.body.1.declarations.0.init.properties.4.value.body.body.1.test.expressions.1.arguments.0.body.body.0.test.argument.callee", "body.4.body.body.0.body.body.1.consequent.consequent.body.0.test.left.callee", "body.4.body.body.0.body.body.1.consequent.consequent.body.0.test.right.callee", "body.4.body.body.0.body.body.1.consequent.alternate.body.0.test.callee", "body.4.body.body.0.body.body.1.consequent.alternate.body.0.consequent.body.0.test.callee"], _isDataDescriptor: ["body.6.id", "body.4.body.body.0.body.body.1.consequent.test.left.callee", "body.4.body.body.0.body.body.1.consequent.test.right.callee"], _optionalCallableProperty: ["body.7.id", "body.1.body.body.1.declarations.0.init.properties.11.value.body.body.0.argument.properties.1.value.callee", "body.1.body.body.1.declarations.0.init.properties.13.value.body.body.3.declarations.0.init.callee"] }, exportBindingAssignments: [], exportName: "_decorate", dependencies: { toArray: ["body.1.body.body.1.declarations.0.init.properties.9.value.body.body.0.consequent.argument.callee.object.callee"], toPropertyKey: ["body.1.body.body.1.declarations.0.init.properties.10.value.body.body.2.declarations.0.init.callee", "body.2.body.body.0.declarations.1.init.callee"] } }), defaults: helper("7.0.0-beta.0", "function _defaults(e,r){for(var t=Object.getOwnPropertyNames(r),o=0;o<t.length;o++){var n=t[o],a=Object.getOwnPropertyDescriptor(r,n);a&&a.configurable&&void 0===e[n]&&Object.defineProperty(e,n,a)}return e}", { globals: ["Object"], locals: { _defaults: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_defaults", dependencies: {} }), defineAccessor: helper("7.20.7", "function _defineAccessor(e,r,n,t){var c={configurable:!0,enumerable:!0};return c[e]=t,Object.defineProperty(r,n,c)}", { globals: ["Object"], locals: { _defineAccessor: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_defineAccessor", dependencies: {} }), defineProperty: helper("7.0.0-beta.0", "function _defineProperty(e,r,t){return(r=toPropertyKey(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}", { globals: ["Object"], locals: { _defineProperty: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_defineProperty", dependencies: { toPropertyKey: ["body.0.body.body.0.argument.expressions.0.test.left.right.callee"] } }), extends: helper("7.0.0-beta.0", "function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}", { globals: ["Object"], locals: { _extends: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee.object", "body.0.body.body.0.argument.expressions.0.left"] }, exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"], exportName: "_extends", dependencies: {} }), get: helper("7.0.0-beta.0", 'function _get(){return _get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,r){var p=superPropBase(e,t);if(p){var n=Object.getOwnPropertyDescriptor(p,t);return n.get?n.get.call(arguments.length<3?e:r):n.value}},_get.apply(null,arguments)}', { globals: ["Reflect", "Object"], locals: { _get: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee.object", "body.0.body.body.0.argument.expressions.0.left"] }, exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"], exportName: "_get", dependencies: { superPropBase: ["body.0.body.body.0.argument.expressions.0.right.alternate.body.body.0.declarations.0.init.callee"] } }), getPrototypeOf: helper("7.0.0-beta.0", "function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}", { globals: ["Object"], locals: { _getPrototypeOf: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.0.body.body.0.argument.expressions.0.left"] }, exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"], exportName: "_getPrototypeOf", dependencies: {} }), identity: helper("7.17.0", "function _identity(t){return t}", { globals: [], locals: { _identity: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_identity", dependencies: {} }), importDeferProxy: helper("7.23.0", "function _importDeferProxy(e){var t=null,constValue=function(e){return function(){return e}},proxy=function(r){return function(n,o,f){return null===t&&(t=e()),r(t,o,f)}};return new Proxy({},{defineProperty:constValue(!1),deleteProperty:constValue(!1),get:proxy(Reflect.get),getOwnPropertyDescriptor:proxy(Reflect.getOwnPropertyDescriptor),getPrototypeOf:constValue(null),isExtensible:constValue(!1),has:proxy(Reflect.has),ownKeys:proxy(Reflect.ownKeys),preventExtensions:constValue(!0),set:constValue(!1),setPrototypeOf:constValue(!1)})}", { globals: ["Proxy", "Reflect"], locals: { _importDeferProxy: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_importDeferProxy", dependencies: {} }), inherits: helper("7.0.0-beta.0", 'function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&setPrototypeOf(t,e)}', { globals: ["TypeError", "Object"], locals: { _inherits: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_inherits", dependencies: { setPrototypeOf: ["body.0.body.body.1.expression.expressions.2.right.callee"] } }), inheritsLoose: helper("7.0.0-beta.0", "function _inheritsLoose(t,o){t.prototype=Object.create(o.prototype),t.prototype.constructor=t,setPrototypeOf(t,o)}", { globals: ["Object"], locals: { _inheritsLoose: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_inheritsLoose", dependencies: { setPrototypeOf: ["body.0.body.body.0.expression.expressions.2.callee"] } }), initializerDefineProperty: helper("7.0.0-beta.0", "function _initializerDefineProperty(e,i,r,l){r&&Object.defineProperty(e,i,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(l):void 0})}", { globals: ["Object"], locals: { _initializerDefineProperty: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_initializerDefineProperty", dependencies: {} }), initializerWarningHelper: helper("7.0.0-beta.0", 'function _initializerWarningHelper(r,e){throw Error("Decorating class property failed. Please ensure that transform-class-properties is enabled and runs after the decorators transform.")}', { globals: ["Error"], locals: { _initializerWarningHelper: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_initializerWarningHelper", dependencies: {} }), instanceof: helper("7.0.0-beta.0", 'function _instanceof(n,e){return null!=e&&"undefined"!=typeof Symbol&&e[Symbol.hasInstance]?!!e[Symbol.hasInstance](n):n instanceof e}', { globals: ["Symbol"], locals: { _instanceof: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_instanceof", dependencies: {} }), interopRequireDefault: helper("7.0.0-beta.0", "function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}", { globals: [], locals: { _interopRequireDefault: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_interopRequireDefault", dependencies: {} }), interopRequireWildcard: helper("7.14.0", 'function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}', { globals: ["WeakMap", "Object"], locals: { _getRequireWildcardCache: ["body.0.id", "body.1.body.body.2.declarations.0.init.callee", "body.0.body.body.2.argument.callee.left"], _interopRequireWildcard: ["body.1.id"] }, exportBindingAssignments: [], exportName: "_interopRequireWildcard", dependencies: {} }), isNativeFunction: helper("7.0.0-beta.0", 'function _isNativeFunction(t){try{return-1!==Function.toString.call(t).indexOf("[native code]")}catch(n){return"function"==typeof t}}', { globals: ["Function"], locals: { _isNativeFunction: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_isNativeFunction", dependencies: {} }), isNativeReflectConstruct: helper("7.9.0", "function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(_isNativeReflectConstruct=function(){return!!t})()}", { globals: ["Boolean", "Reflect"], locals: { _isNativeReflectConstruct: ["body.0.id", "body.0.body.body.1.argument.callee.left"] }, exportBindingAssignments: ["body.0.body.body.1.argument.callee"], exportName: "_isNativeReflectConstruct", dependencies: {} }), iterableToArray: helper("7.0.0-beta.0", 'function _iterableToArray(r){if("undefined"!=typeof Symbol&&null!=r[Symbol.iterator]||null!=r["@@iterator"])return Array.from(r)}', { globals: ["Symbol", "Array"], locals: { _iterableToArray: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_iterableToArray", dependencies: {} }), iterableToArrayLimit: helper("7.0.0-beta.0", 'function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}', { globals: ["Symbol", "Object"], locals: { _iterableToArrayLimit: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_iterableToArrayLimit", dependencies: {} }), jsx: helper("7.0.0-beta.0", 'var REACT_ELEMENT_TYPE;function _createRawReactElement(e,r,E,l){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var o=e&&e.defaultProps,n=arguments.length-3;if(r||0===n||(r={children:void 0}),1===n)r.children=l;else if(n>1){for(var t=Array(n),f=0;f<n;f++)t[f]=arguments[f+3];r.children=t}if(r&&o)for(var i in o)void 0===r[i]&&(r[i]=o[i]);else r||(r=o||{});return{$$typeof:REACT_ELEMENT_TYPE,type:e,key:void 0===E?null:""+E,ref:null,props:r,_owner:null}}', { globals: ["Symbol", "Array"], locals: { REACT_ELEMENT_TYPE: ["body.0.declarations.0.id", "body.1.body.body.0.expression.left", "body.1.body.body.4.argument.properties.0.value", "body.1.body.body.0.expression.right.left"], _createRawReactElement: ["body.1.id"] }, exportBindingAssignments: [], exportName: "_createRawReactElement", dependencies: {} }), maybeArrayLike: helper("7.9.0", 'function _maybeArrayLike(r,a,e){if(a&&!Array.isArray(a)&&"number"==typeof a.length){var y=a.length;return arrayLikeToArray(a,void 0!==e&&e<y?e:y)}return r(a,e)}', { globals: ["Array"], locals: { _maybeArrayLike: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_maybeArrayLike", dependencies: { arrayLikeToArray: ["body.0.body.body.0.consequent.body.1.argument.callee"] } }), newArrowCheck: helper("7.0.0-beta.0", 'function _newArrowCheck(n,r){if(n!==r)throw new TypeError("Cannot instantiate an arrow function")}', { globals: ["TypeError"], locals: { _newArrowCheck: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_newArrowCheck", dependencies: {} }), nonIterableRest: helper("7.0.0-beta.0", 'function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}', { globals: ["TypeError"], locals: { _nonIterableRest: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_nonIterableRest", dependencies: {} }), nonIterableSpread: helper("7.0.0-beta.0", 'function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}', { globals: ["TypeError"], locals: { _nonIterableSpread: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_nonIterableSpread", dependencies: {} }), nullishReceiverError: helper("7.22.6", 'function _nullishReceiverError(r){throw new TypeError("Cannot set property of null or undefined.")}', { globals: ["TypeError"], locals: { _nullishReceiverError: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_nullishReceiverError", dependencies: {} }), objectDestructuringEmpty: helper("7.0.0-beta.0", 'function _objectDestructuringEmpty(t){if(null==t)throw new TypeError("Cannot destructure "+t)}', { globals: ["TypeError"], locals: { _objectDestructuringEmpty: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_objectDestructuringEmpty", dependencies: {} }), objectSpread2: helper("7.5.0", "function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread2(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}", { globals: ["Object"], locals: { ownKeys: ["body.0.id", "body.1.body.body.0.body.body.1.expression.consequent.callee.object.callee", "body.1.body.body.0.body.body.1.expression.alternate.alternate.callee.object.callee"], _objectSpread2: ["body.1.id"] }, exportBindingAssignments: [], exportName: "_objectSpread2", dependencies: { defineProperty: ["body.1.body.body.0.body.body.1.expression.consequent.arguments.0.body.body.0.expression.callee"] } }), objectWithoutProperties: helper("7.0.0-beta.0", "function _objectWithoutProperties(e,t){if(null==e)return{};var o,r,i=objectWithoutPropertiesLoose(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)o=s[r],t.includes(o)||{}.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}", { globals: ["Object"], locals: { _objectWithoutProperties: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_objectWithoutProperties", dependencies: { objectWithoutPropertiesLoose: ["body.0.body.body.1.declarations.2.init.callee"] } }), objectWithoutPropertiesLoose: helper("7.0.0-beta.0", "function _objectWithoutPropertiesLoose(r,e){if(null==r)return{};var t={};for(var n in r)if({}.hasOwnProperty.call(r,n)){if(e.includes(n))continue;t[n]=r[n]}return t}", { globals: [], locals: { _objectWithoutPropertiesLoose: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_objectWithoutPropertiesLoose", dependencies: {} }), possibleConstructorReturn: helper("7.0.0-beta.0", 'function _possibleConstructorReturn(t,e){if(e&&("object"==typeof e||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return assertThisInitialized(t)}', { globals: ["TypeError"], locals: { _possibleConstructorReturn: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_possibleConstructorReturn", dependencies: { assertThisInitialized: ["body.0.body.body.2.argument.callee"] } }), readOnlyError: helper("7.0.0-beta.0", `function _readOnlyError(r){throw new TypeError('"'+r+'" is read-only')}`, { globals: ["TypeError"], locals: { _readOnlyError: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_readOnlyError", dependencies: {} }), regeneratorRuntime: helper("7.18.0", `function _regeneratorRuntime(){"use strict";
/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */_regeneratorRuntime=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(t,e,r){t[e]=r.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag";function define(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{define({},"")}catch(t){define=function(t,e,r){return t[e]=r}}function wrap(t,e,r,n){var i=e&&e.prototype instanceof Generator?e:Generator,a=Object.create(i.prototype),c=new Context(n||[]);return o(a,"_invoke",{value:makeInvokeMethod(t,r,c)}),a}function tryCatch(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=wrap;var h="suspendedStart",l="suspendedYield",f="executing",s="completed",y={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var p={};define(p,a,(function(){return this}));var d=Object.getPrototypeOf,v=d&&d(d(values([])));v&&v!==r&&n.call(v,a)&&(p=v);var g=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(p);function defineIteratorMethods(t){["next","throw","return"].forEach((function(e){define(t,e,(function(t){return this._invoke(e,t)}))}))}function AsyncIterator(t,e){function invoke(r,o,i,a){var c=tryCatch(t[r],t,o);if("throw"!==c.type){var u=c.arg,h=u.value;return h&&"object"==typeof h&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){invoke("next",t,i,a)}),(function(t){invoke("throw",t,i,a)})):e.resolve(h).then((function(t){u.value=t,i(u)}),(function(t){return invoke("throw",t,i,a)}))}a(c.arg)}var r;o(this,"_invoke",{value:function(t,n){function callInvokeWithMethodAndArg(){return new e((function(e,r){invoke(t,n,e,r)}))}return r=r?r.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}})}function makeInvokeMethod(e,r,n){var o=h;return function(i,a){if(o===f)throw Error("Generator is already running");if(o===s){if("throw"===i)throw a;return{value:t,done:!0}}for(n.method=i,n.arg=a;;){var c=n.delegate;if(c){var u=maybeInvokeDelegate(c,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===h)throw o=s,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=f;var p=tryCatch(e,r,n);if("normal"===p.type){if(o=n.done?s:l,p.arg===y)continue;return{value:p.arg,done:n.done}}"throw"===p.type&&(o=s,n.method="throw",n.arg=p.arg)}}}function maybeInvokeDelegate(e,r){var n=r.method,o=e.iterator[n];if(o===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,maybeInvokeDelegate(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var i=tryCatch(o,e.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,y;var a=i.arg;return a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function pushTryEntry(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function resetTryEntry(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function Context(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(pushTryEntry,this),this.reset(!0)}function values(e){if(e||""===e){var r=e[a];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function next(){for(;++o<e.length;)if(n.call(e,o))return next.value=e[o],next.done=!1,next;return next.value=t,next.done=!0,next};return i.next=i}}throw new TypeError(typeof e+" is not iterable")}return GeneratorFunction.prototype=GeneratorFunctionPrototype,o(g,"constructor",{value:GeneratorFunctionPrototype,configurable:!0}),o(GeneratorFunctionPrototype,"constructor",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,u,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===GeneratorFunction||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,GeneratorFunctionPrototype):(t.__proto__=GeneratorFunctionPrototype,define(t,u,"GeneratorFunction")),t.prototype=Object.create(g),t},e.awrap=function(t){return{__await:t}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,c,(function(){return this})),e.AsyncIterator=AsyncIterator,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new AsyncIterator(wrap(t,r,n,o),i);return e.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},defineIteratorMethods(g),define(g,u,"Generator"),define(g,a,(function(){return this})),define(g,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function next(){for(;r.length;){var t=r.pop();if(t in e)return next.value=t,next.done=!1,next}return next.done=!0,next}},e.values=values,Context.prototype={constructor:Context,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(resetTryEntry),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function handle(n,o){return a.type="throw",a.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return handle("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0);if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),resetTryEntry(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;resetTryEntry(r)}return o}}throw Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:values(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}`, { globals: ["Object", "Symbol", "Error", "TypeError", "isNaN", "Promise"], locals: { _regeneratorRuntime: ["body.0.id", "body.0.body.body.0.expression.left"] }, exportBindingAssignments: ["body.0.body.body.0.expression"], exportName: "_regeneratorRuntime", dependencies: {} }), set: helper("7.0.0-beta.0", 'function set(e,r,t,o){return set="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(e,r,t,o){var f,i=superPropBase(e,r);if(i){if((f=Object.getOwnPropertyDescriptor(i,r)).set)return f.set.call(o,t),!0;if(!f.writable)return!1}if(f=Object.getOwnPropertyDescriptor(o,r)){if(!f.writable)return!1;f.value=t,Object.defineProperty(o,r,f)}else defineProperty(o,r,t);return!0},set(e,r,t,o)}function _set(e,r,t,o,f){if(!set(e,r,t,o||e)&&f)throw new TypeError("failed to set property");return t}', { globals: ["Reflect", "Object", "TypeError"], locals: { set: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.1.body.body.0.test.left.argument.callee", "body.0.body.body.0.argument.expressions.0.left"], _set: ["body.1.id"] }, exportBindingAssignments: [], exportName: "_set", dependencies: { superPropBase: ["body.0.body.body.0.argument.expressions.0.right.alternate.body.body.0.declarations.1.init.callee"], defineProperty: ["body.0.body.body.0.argument.expressions.0.right.alternate.body.body.2.alternate.expression.callee"] } }), setFunctionName: helper("7.23.6", 'function setFunctionName(e,t,n){"symbol"==typeof t&&(t=(t=t.description)?"["+t+"]":"");try{Object.defineProperty(e,"name",{configurable:!0,value:n?n+" "+t:t})}catch(e){}return e}', { globals: ["Object"], locals: { setFunctionName: ["body.0.id"] }, exportBindingAssignments: [], exportName: "setFunctionName", dependencies: {} }), setPrototypeOf: helper("7.0.0-beta.0", "function _setPrototypeOf(t,e){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},_setPrototypeOf(t,e)}", { globals: ["Object"], locals: { _setPrototypeOf: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.0.body.body.0.argument.expressions.0.left"] }, exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"], exportName: "_setPrototypeOf", dependencies: {} }), skipFirstGeneratorNext: helper("7.0.0-beta.0", "function _skipFirstGeneratorNext(t){return function(){var r=t.apply(this,arguments);return r.next(),r}}", { globals: [], locals: { _skipFirstGeneratorNext: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_skipFirstGeneratorNext", dependencies: {} }), slicedToArray: helper("7.0.0-beta.0", "function _slicedToArray(r,e){return arrayWithHoles(r)||iterableToArrayLimit(r,e)||unsupportedIterableToArray(r,e)||nonIterableRest()}", { globals: [], locals: { _slicedToArray: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_slicedToArray", dependencies: { arrayWithHoles: ["body.0.body.body.0.argument.left.left.left.callee"], iterableToArrayLimit: ["body.0.body.body.0.argument.left.left.right.callee"], unsupportedIterableToArray: ["body.0.body.body.0.argument.left.right.callee"], nonIterableRest: ["body.0.body.body.0.argument.right.callee"] } }), superPropBase: helper("7.0.0-beta.0", "function _superPropBase(t,o){for(;!{}.hasOwnProperty.call(t,o)&&null!==(t=getPrototypeOf(t)););return t}", { globals: [], locals: { _superPropBase: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_superPropBase", dependencies: { getPrototypeOf: ["body.0.body.body.0.test.right.right.right.callee"] } }), superPropGet: helper("7.25.0", 'function _superPropGet(t,o,e,r){var p=get(getPrototypeOf(1&r?t.prototype:t),o,e);return 2&r&&"function"==typeof p?function(t){return p.apply(e,t)}:p}', { globals: [], locals: { _superPropGet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_superPropGet", dependencies: { get: ["body.0.body.body.0.declarations.0.init.callee"], getPrototypeOf: ["body.0.body.body.0.declarations.0.init.arguments.0.callee"] } }), superPropSet: helper("7.25.0", "function _superPropSet(t,e,o,r,p,f){return set(getPrototypeOf(f?t.prototype:t),e,o,r,p)}", { globals: [], locals: { _superPropSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_superPropSet", dependencies: { set: ["body.0.body.body.0.argument.callee"], getPrototypeOf: ["body.0.body.body.0.argument.arguments.0.callee"] } }), taggedTemplateLiteral: helper("7.0.0-beta.0", "function _taggedTemplateLiteral(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}", { globals: ["Object"], locals: { _taggedTemplateLiteral: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_taggedTemplateLiteral", dependencies: {} }), taggedTemplateLiteralLoose: helper("7.0.0-beta.0", "function _taggedTemplateLiteralLoose(e,t){return t||(t=e.slice(0)),e.raw=t,e}", { globals: [], locals: { _taggedTemplateLiteralLoose: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_taggedTemplateLiteralLoose", dependencies: {} }), tdz: helper("7.5.5", 'function _tdzError(e){throw new ReferenceError(e+" is not defined - temporal dead zone")}', { globals: ["ReferenceError"], locals: { _tdzError: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_tdzError", dependencies: {} }), temporalRef: helper("7.0.0-beta.0", "function _temporalRef(r,e){return r===undef?err(e):r}", { globals: [], locals: { _temporalRef: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_temporalRef", dependencies: { temporalUndefined: ["body.0.body.body.0.argument.test.right"], tdz: ["body.0.body.body.0.argument.consequent.callee"] } }), temporalUndefined: helper("7.0.0-beta.0", "function _temporalUndefined(){}", { globals: [], locals: { _temporalUndefined: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_temporalUndefined", dependencies: {} }), toArray: helper("7.0.0-beta.0", "function _toArray(r){return arrayWithHoles(r)||iterableToArray(r)||unsupportedIterableToArray(r)||nonIterableRest()}", { globals: [], locals: { _toArray: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_toArray", dependencies: { arrayWithHoles: ["body.0.body.body.0.argument.left.left.left.callee"], iterableToArray: ["body.0.body.body.0.argument.left.left.right.callee"], unsupportedIterableToArray: ["body.0.body.body.0.argument.left.right.callee"], nonIterableRest: ["body.0.body.body.0.argument.right.callee"] } }), toConsumableArray: helper("7.0.0-beta.0", "function _toConsumableArray(r){return arrayWithoutHoles(r)||iterableToArray(r)||unsupportedIterableToArray(r)||nonIterableSpread()}", { globals: [], locals: { _toConsumableArray: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_toConsumableArray", dependencies: { arrayWithoutHoles: ["body.0.body.body.0.argument.left.left.left.callee"], iterableToArray: ["body.0.body.body.0.argument.left.left.right.callee"], unsupportedIterableToArray: ["body.0.body.body.0.argument.left.right.callee"], nonIterableSpread: ["body.0.body.body.0.argument.right.callee"] } }), toPrimitive: helper("7.1.5", 'function toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}', { globals: ["Symbol", "TypeError", "String", "Number"], locals: { toPrimitive: ["body.0.id"] }, exportBindingAssignments: [], exportName: "toPrimitive", dependencies: {} }), toPropertyKey: helper("7.1.5", 'function toPropertyKey(t){var i=toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}', { globals: [], locals: { toPropertyKey: ["body.0.id"] }, exportBindingAssignments: [], exportName: "toPropertyKey", dependencies: { toPrimitive: ["body.0.body.body.0.declarations.0.init.callee"] } }), toSetter: helper("7.24.0", 'function _toSetter(t,e,n){e||(e=[]);var r=e.length++;return Object.defineProperty({},"_",{set:function(o){e[r]=o,t.apply(n,e)}})}', { globals: ["Object"], locals: { _toSetter: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_toSetter", dependencies: {} }), typeof: helper("7.0.0-beta.0", 'function _typeof(o){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}', { globals: ["Symbol"], locals: { _typeof: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.0.body.body.0.argument.expressions.0.left"] }, exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"], exportName: "_typeof", dependencies: {} }), unsupportedIterableToArray: helper("7.9.0", 'function _unsupportedIterableToArray(r,a){if(r){if("string"==typeof r)return arrayLikeToArray(r,a);var t={}.toString.call(r).slice(8,-1);return"Object"===t&&r.constructor&&(t=r.constructor.name),"Map"===t||"Set"===t?Array.from(r):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?arrayLikeToArray(r,a):void 0}}', { globals: ["Array"], locals: { _unsupportedIterableToArray: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_unsupportedIterableToArray", dependencies: { arrayLikeToArray: ["body.0.body.body.0.consequent.body.0.consequent.argument.callee", "body.0.body.body.0.consequent.body.2.argument.expressions.1.alternate.consequent.callee"] } }), usingCtx: helper("7.23.9", 'function _usingCtx(){var r="function"==typeof SuppressedError?SuppressedError:function(r,e){var n=Error();return n.name="SuppressedError",n.error=r,n.suppressed=e,n},e={},n=[];function using(r,e){if(null!=e){if(Object(e)!==e)throw new TypeError("using declarations can only be used with objects, functions, null, or undefined.");if(r)var o=e[Symbol.asyncDispose||Symbol.for("Symbol.asyncDispose")];if(void 0===o&&(o=e[Symbol.dispose||Symbol.for("Symbol.dispose")],r))var t=o;if("function"!=typeof o)throw new TypeError("Object is not disposable.");t&&(o=function(){try{t.call(e)}catch(r){return Promise.reject(r)}}),n.push({v:e,d:o,a:r})}else r&&n.push({d:e,a:r});return e}return{e:e,u:using.bind(null,!1),a:using.bind(null,!0),d:function(){var o,t=this.e,s=0;function next(){for(;o=n.pop();)try{if(!o.a&&1===s)return s=0,n.push(o),Promise.resolve().then(next);if(o.d){var r=o.d.call(o.v);if(o.a)return s|=2,Promise.resolve(r).then(next,err)}else s|=1}catch(r){return err(r)}if(1===s)return t!==e?Promise.reject(t):Promise.resolve();if(t!==e)throw t}function err(n){return t=t!==e?new r(n,t):n,next()}return next()}}}', { globals: ["SuppressedError", "Error", "Object", "TypeError", "Symbol", "Promise"], locals: { _usingCtx: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_usingCtx", dependencies: {} }), wrapAsyncGenerator: helper("7.0.0-beta.0", 'function _wrapAsyncGenerator(e){return function(){return new AsyncGenerator(e.apply(this,arguments))}}function AsyncGenerator(e){var r,t;function resume(r,t){try{var n=e[r](t),o=n.value,u=o instanceof OverloadYield;Promise.resolve(u?o.v:o).then((function(t){if(u){var i="return"===r?"return":"next";if(!o.k||t.done)return resume(i,t);t=e[i](t).value}settle(n.done?"return":"normal",t)}),(function(e){resume("throw",e)}))}catch(e){settle("throw",e)}}function settle(e,n){switch(e){case"return":r.resolve({value:n,done:!0});break;case"throw":r.reject(n);break;default:r.resolve({value:n,done:!1})}(r=r.next)?resume(r.key,r.arg):t=null}this._invoke=function(e,n){return new Promise((function(o,u){var i={key:e,arg:n,resolve:o,reject:u,next:null};t?t=t.next=i:(r=t=i,resume(e,n))}))},"function"!=typeof e.return&&(this.return=void 0)}AsyncGenerator.prototype["function"==typeof Symbol&&Symbol.asyncIterator||"@@asyncIterator"]=function(){return this},AsyncGenerator.prototype.next=function(e){return this._invoke("next",e)},AsyncGenerator.prototype.throw=function(e){return this._invoke("throw",e)},AsyncGenerator.prototype.return=function(e){return this._invoke("return",e)};', { globals: ["Promise", "Symbol"], locals: { _wrapAsyncGenerator: ["body.0.id"], AsyncGenerator: ["body.1.id", "body.0.body.body.0.argument.body.body.0.argument.callee", "body.2.expression.expressions.0.left.object.object", "body.2.expression.expressions.1.left.object.object", "body.2.expression.expressions.2.left.object.object", "body.2.expression.expressions.3.left.object.object"] }, exportBindingAssignments: [], exportName: "_wrapAsyncGenerator", dependencies: { OverloadYield: ["body.1.body.body.1.body.body.0.block.body.0.declarations.2.init.right"] } }), wrapNativeSuper: helper("7.0.0-beta.0", 'function _wrapNativeSuper(t){var r="function"==typeof Map?new Map:void 0;return _wrapNativeSuper=function(t){if(null===t||!isNativeFunction(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==r){if(r.has(t))return r.get(t);r.set(t,Wrapper)}function Wrapper(){return construct(t,arguments,getPrototypeOf(this).constructor)}return Wrapper.prototype=Object.create(t.prototype,{constructor:{value:Wrapper,enumerable:!1,writable:!0,configurable:!0}}),setPrototypeOf(Wrapper,t)},_wrapNativeSuper(t)}', { globals: ["Map", "TypeError", "Object"], locals: { _wrapNativeSuper: ["body.0.id", "body.0.body.body.1.argument.expressions.1.callee", "body.0.body.body.1.argument.expressions.0.left"] }, exportBindingAssignments: ["body.0.body.body.1.argument.expressions.0"], exportName: "_wrapNativeSuper", dependencies: { getPrototypeOf: ["body.0.body.body.1.argument.expressions.0.right.body.body.3.body.body.0.argument.arguments.2.object.callee"], setPrototypeOf: ["body.0.body.body.1.argument.expressions.0.right.body.body.4.argument.expressions.1.callee"], isNativeFunction: ["body.0.body.body.1.argument.expressions.0.right.body.body.0.test.right.argument.callee"], construct: ["body.0.body.body.1.argument.expressions.0.right.body.body.3.body.body.0.argument.callee"] } }), wrapRegExp: helper("7.19.0", 'function _wrapRegExp(){_wrapRegExp=function(e,r){return new BabelRegExp(e,void 0,r)};var e=RegExp.prototype,r=new WeakMap;function BabelRegExp(e,t,p){var o=RegExp(e,t);return r.set(o,p||r.get(e)),setPrototypeOf(o,BabelRegExp.prototype)}function buildGroups(e,t){var p=r.get(t);return Object.keys(p).reduce((function(r,t){var o=p[t];if("number"==typeof o)r[t]=e[o];else{for(var i=0;void 0===e[o[i]]&&i+1<o.length;)i++;r[t]=e[o[i]]}return r}),Object.create(null))}return inherits(BabelRegExp,RegExp),BabelRegExp.prototype.exec=function(r){var t=e.exec.call(this,r);if(t){t.groups=buildGroups(t,this);var p=t.indices;p&&(p.groups=buildGroups(p,this))}return t},BabelRegExp.prototype[Symbol.replace]=function(t,p){if("string"==typeof p){var o=r.get(this);return e[Symbol.replace].call(this,t,p.replace(/\\$<([^>]+)>/g,(function(e,r){var t=o[r];return"$"+(Array.isArray(t)?t.join("$"):t)})))}if("function"==typeof p){var i=this;return e[Symbol.replace].call(this,t,(function(){var e=arguments;return"object"!=typeof e[e.length-1]&&(e=[].slice.call(e)).push(buildGroups(e,i)),p.apply(this,e)}))}return e[Symbol.replace].call(this,t,p)},_wrapRegExp.apply(this,arguments)}', { globals: ["RegExp", "WeakMap", "Object", "Symbol", "Array"], locals: { _wrapRegExp: ["body.0.id", "body.0.body.body.4.argument.expressions.3.callee.object", "body.0.body.body.0.expression.left"] }, exportBindingAssignments: ["body.0.body.body.0.expression"], exportName: "_wrapRegExp", dependencies: { setPrototypeOf: ["body.0.body.body.2.body.body.1.argument.expressions.1.callee"], inherits: ["body.0.body.body.4.argument.expressions.0.callee"] } }), writeOnlyError: helper("7.12.13", `function _writeOnlyError(r){throw new TypeError('"'+r+'" is write-only')}`, { globals: ["TypeError"], locals: { _writeOnlyError: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_writeOnlyError", dependencies: {} }) };
        Object.assign(helpers, { AwaitValue: helper("7.0.0-beta.0", "function _AwaitValue(t){this.wrapped=t}", { globals: [], locals: { _AwaitValue: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_AwaitValue", dependencies: {} }), applyDecs: helper("7.17.8", 'function old_createMetadataMethodsForProperty(e,t,a,r){return{getMetadata:function(o){old_assertNotFinished(r,"getMetadata"),old_assertMetadataKey(o);var i=e[o];if(void 0!==i)if(1===t){var n=i.public;if(void 0!==n)return n[a]}else if(2===t){var l=i.private;if(void 0!==l)return l.get(a)}else if(Object.hasOwnProperty.call(i,"constructor"))return i.constructor},setMetadata:function(o,i){old_assertNotFinished(r,"setMetadata"),old_assertMetadataKey(o);var n=e[o];if(void 0===n&&(n=e[o]={}),1===t){var l=n.public;void 0===l&&(l=n.public={}),l[a]=i}else if(2===t){var s=n.priv;void 0===s&&(s=n.private=new Map),s.set(a,i)}else n.constructor=i}}}function old_convertMetadataMapToFinal(e,t){var a=e[Symbol.metadata||Symbol.for("Symbol.metadata")],r=Object.getOwnPropertySymbols(t);if(0!==r.length){for(var o=0;o<r.length;o++){var i=r[o],n=t[i],l=a?a[i]:null,s=n.public,c=l?l.public:null;s&&c&&Object.setPrototypeOf(s,c);var d=n.private;if(d){var u=Array.from(d.values()),f=l?l.private:null;f&&(u=u.concat(f)),n.private=u}l&&Object.setPrototypeOf(n,l)}a&&Object.setPrototypeOf(t,a),e[Symbol.metadata||Symbol.for("Symbol.metadata")]=t}}function old_createAddInitializerMethod(e,t){return function(a){old_assertNotFinished(t,"addInitializer"),old_assertCallable(a,"An initializer"),e.push(a)}}function old_memberDec(e,t,a,r,o,i,n,l,s){var c;switch(i){case 1:c="accessor";break;case 2:c="method";break;case 3:c="getter";break;case 4:c="setter";break;default:c="field"}var d,u,f={kind:c,name:l?"#"+t:toPropertyKey(t),isStatic:n,isPrivate:l},p={v:!1};if(0!==i&&(f.addInitializer=old_createAddInitializerMethod(o,p)),l){d=2,u=Symbol(t);var v={};0===i?(v.get=a.get,v.set=a.set):2===i?v.get=function(){return a.value}:(1!==i&&3!==i||(v.get=function(){return a.get.call(this)}),1!==i&&4!==i||(v.set=function(e){a.set.call(this,e)})),f.access=v}else d=1,u=t;try{return e(s,Object.assign(f,old_createMetadataMethodsForProperty(r,d,u,p)))}finally{p.v=!0}}function old_assertNotFinished(e,t){if(e.v)throw Error("attempted to call "+t+" after decoration was finished")}function old_assertMetadataKey(e){if("symbol"!=typeof e)throw new TypeError("Metadata keys must be symbols, received: "+e)}function old_assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function old_assertValidReturnValue(e,t){var a=typeof t;if(1===e){if("object"!==a||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&old_assertCallable(t.get,"accessor.get"),void 0!==t.set&&old_assertCallable(t.set,"accessor.set"),void 0!==t.init&&old_assertCallable(t.init,"accessor.init"),void 0!==t.initializer&&old_assertCallable(t.initializer,"accessor.initializer")}else if("function"!==a)throw new TypeError((0===e?"field":10===e?"class":"method")+" decorators must return a function or void 0")}function old_getInit(e){var t;return null==(t=e.init)&&(t=e.initializer)&&void 0!==console&&console.warn(".initializer has been renamed to .init as of March 2022"),t}function old_applyMemberDec(e,t,a,r,o,i,n,l,s){var c,d,u,f,p,v,y,h=a[0];if(n?(0===o||1===o?(c={get:a[3],set:a[4]},u="get"):3===o?(c={get:a[3]},u="get"):4===o?(c={set:a[3]},u="set"):c={value:a[3]},0!==o&&(1===o&&setFunctionName(a[4],"#"+r,"set"),setFunctionName(a[3],"#"+r,u))):0!==o&&(c=Object.getOwnPropertyDescriptor(t,r)),1===o?f={get:c.get,set:c.set}:2===o?f=c.value:3===o?f=c.get:4===o&&(f=c.set),"function"==typeof h)void 0!==(p=old_memberDec(h,r,c,l,s,o,i,n,f))&&(old_assertValidReturnValue(o,p),0===o?d=p:1===o?(d=old_getInit(p),v=p.get||f.get,y=p.set||f.set,f={get:v,set:y}):f=p);else for(var m=h.length-1;m>=0;m--){var b;void 0!==(p=old_memberDec(h[m],r,c,l,s,o,i,n,f))&&(old_assertValidReturnValue(o,p),0===o?b=p:1===o?(b=old_getInit(p),v=p.get||f.get,y=p.set||f.set,f={get:v,set:y}):f=p,void 0!==b&&(void 0===d?d=b:"function"==typeof d?d=[d,b]:d.push(b)))}if(0===o||1===o){if(void 0===d)d=function(e,t){return t};else if("function"!=typeof d){var g=d;d=function(e,t){for(var a=t,r=0;r<g.length;r++)a=g[r].call(e,a);return a}}else{var _=d;d=function(e,t){return _.call(e,t)}}e.push(d)}0!==o&&(1===o?(c.get=f.get,c.set=f.set):2===o?c.value=f:3===o?c.get=f:4===o&&(c.set=f),n?1===o?(e.push((function(e,t){return f.get.call(e,t)})),e.push((function(e,t){return f.set.call(e,t)}))):2===o?e.push(f):e.push((function(e,t){return f.call(e,t)})):Object.defineProperty(t,r,c))}function old_applyMemberDecs(e,t,a,r,o){for(var i,n,l=new Map,s=new Map,c=0;c<o.length;c++){var d=o[c];if(Array.isArray(d)){var u,f,p,v=d[1],y=d[2],h=d.length>3,m=v>=5;if(m?(u=t,f=r,0!=(v-=5)&&(p=n=n||[])):(u=t.prototype,f=a,0!==v&&(p=i=i||[])),0!==v&&!h){var b=m?s:l,g=b.get(y)||0;if(!0===g||3===g&&4!==v||4===g&&3!==v)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+y);!g&&v>2?b.set(y,v):b.set(y,!0)}old_applyMemberDec(e,u,d,y,v,m,h,f,p)}}old_pushInitializers(e,i),old_pushInitializers(e,n)}function old_pushInitializers(e,t){t&&e.push((function(e){for(var a=0;a<t.length;a++)t[a].call(e);return e}))}function old_applyClassDecs(e,t,a,r){if(r.length>0){for(var o=[],i=t,n=t.name,l=r.length-1;l>=0;l--){var s={v:!1};try{var c=Object.assign({kind:"class",name:n,addInitializer:old_createAddInitializerMethod(o,s)},old_createMetadataMethodsForProperty(a,0,n,s)),d=r[l](i,c)}finally{s.v=!0}void 0!==d&&(old_assertValidReturnValue(10,d),i=d)}e.push(i,(function(){for(var e=0;e<o.length;e++)o[e].call(i)}))}}function applyDecs(e,t,a){var r=[],o={},i={};return old_applyMemberDecs(r,e,i,o,t),old_convertMetadataMapToFinal(e.prototype,i),old_applyClassDecs(r,e,o,a),old_convertMetadataMapToFinal(e,o),r}', { globals: ["Object", "Map", "Symbol", "Array", "Error", "TypeError", "console"], locals: { old_createMetadataMethodsForProperty: ["body.0.id", "body.3.body.body.4.block.body.0.argument.arguments.1.arguments.1.callee", "body.12.body.body.0.consequent.body.0.body.body.1.block.body.0.declarations.0.init.arguments.1.callee"], old_convertMetadataMapToFinal: ["body.1.id", "body.13.body.body.1.argument.expressions.1.callee", "body.13.body.body.1.argument.expressions.3.callee"], old_createAddInitializerMethod: ["body.2.id", "body.3.body.body.3.test.expressions.0.right.right.callee", "body.12.body.body.0.consequent.body.0.body.body.1.block.body.0.declarations.0.init.arguments.0.properties.2.value.callee"], old_memberDec: ["body.3.id", "body.9.body.body.1.consequent.expression.left.right.right.callee", "body.9.body.body.1.alternate.body.body.1.expression.left.right.right.callee"], old_assertNotFinished: ["body.4.id", "body.0.body.body.0.argument.properties.0.value.body.body.0.expression.expressions.0.callee", "body.0.body.body.0.argument.properties.1.value.body.body.0.expression.expressions.0.callee", "body.2.body.body.0.argument.body.body.0.expression.expressions.0.callee"], old_assertMetadataKey: ["body.5.id", "body.0.body.body.0.argument.properties.0.value.body.body.0.expression.expressions.1.callee", "body.0.body.body.0.argument.properties.1.value.body.body.0.expression.expressions.1.callee"], old_assertCallable: ["body.6.id", "body.2.body.body.0.argument.body.body.0.expression.expressions.1.callee", "body.7.body.body.1.consequent.body.1.expression.expressions.0.right.callee", "body.7.body.body.1.consequent.body.1.expression.expressions.1.right.callee", "body.7.body.body.1.consequent.body.1.expression.expressions.2.right.callee", "body.7.body.body.1.consequent.body.1.expression.expressions.3.right.callee"], old_assertValidReturnValue: ["body.7.id", "body.9.body.body.1.consequent.expression.right.expressions.0.callee", "body.9.body.body.1.alternate.body.body.1.expression.right.expressions.0.callee", "body.12.body.body.0.consequent.body.0.body.body.2.expression.right.expressions.0.callee"], old_getInit: ["body.8.id", "body.9.body.body.1.consequent.expression.right.expressions.1.alternate.consequent.expressions.0.right.callee", "body.9.body.body.1.alternate.body.body.1.expression.right.expressions.1.alternate.consequent.expressions.0.right.callee"], old_applyMemberDec: ["body.9.id", "body.10.body.body.0.body.body.1.consequent.body.2.expression.callee"], old_applyMemberDecs: ["body.10.id", "body.13.body.body.1.argument.expressions.0.callee"], old_pushInitializers: ["body.11.id", "body.10.body.body.1.expression.expressions.0.callee", "body.10.body.body.1.expression.expressions.1.callee"], old_applyClassDecs: ["body.12.id", "body.13.body.body.1.argument.expressions.2.callee"], applyDecs: ["body.13.id"] }, exportBindingAssignments: [], exportName: "applyDecs", dependencies: { setFunctionName: ["body.9.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee", "body.9.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee"], toPropertyKey: ["body.3.body.body.2.declarations.2.init.properties.1.value.alternate.callee"] } }), applyDecs2203: helper("7.19.0", 'function applyDecs2203Factory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw Error("attempted to call addInitializer after decoration was finished")}(t),assertCallable(r,"An initializer"),e.push(r)}}function memberDec(e,t,r,a,n,i,s,o){var c;switch(n){case 1:c="accessor";break;case 2:c="method";break;case 3:c="getter";break;case 4:c="setter";break;default:c="field"}var l,u,f={kind:c,name:s?"#"+t:t,static:i,private:s},p={v:!1};0!==n&&(f.addInitializer=createAddInitializerMethod(a,p)),0===n?s?(l=r.get,u=r.set):(l=function(){return this[t]},u=function(e){this[t]=e}):2===n?l=function(){return r.value}:(1!==n&&3!==n||(l=function(){return r.get.call(this)}),1!==n&&4!==n||(u=function(e){r.set.call(this,e)})),f.access=l&&u?{get:l,set:u}:l?{get:l}:{set:u};try{return e(o,f)}finally{p.v=!0}}function assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable(t.set,"accessor.set"),void 0!==t.init&&assertCallable(t.init,"accessor.init")}else if("function"!==r)throw new TypeError((0===e?"field":10===e?"class":"method")+" decorators must return a function or void 0")}function applyMemberDec(e,t,r,a,n,i,s,o){var c,l,u,f,p,d,h=r[0];if(s?c=0===n||1===n?{get:r[3],set:r[4]}:3===n?{get:r[3]}:4===n?{set:r[3]}:{value:r[3]}:0!==n&&(c=Object.getOwnPropertyDescriptor(t,a)),1===n?u={get:c.get,set:c.set}:2===n?u=c.value:3===n?u=c.get:4===n&&(u=c.set),"function"==typeof h)void 0!==(f=memberDec(h,a,c,o,n,i,s,u))&&(assertValidReturnValue(n,f),0===n?l=f:1===n?(l=f.init,p=f.get||u.get,d=f.set||u.set,u={get:p,set:d}):u=f);else for(var v=h.length-1;v>=0;v--){var g;void 0!==(f=memberDec(h[v],a,c,o,n,i,s,u))&&(assertValidReturnValue(n,f),0===n?g=f:1===n?(g=f.init,p=f.get||u.get,d=f.set||u.set,u={get:p,set:d}):u=f,void 0!==g&&(void 0===l?l=g:"function"==typeof l?l=[l,g]:l.push(g)))}if(0===n||1===n){if(void 0===l)l=function(e,t){return t};else if("function"!=typeof l){var y=l;l=function(e,t){for(var r=t,a=0;a<y.length;a++)r=y[a].call(e,r);return r}}else{var m=l;l=function(e,t){return m.call(e,t)}}e.push(l)}0!==n&&(1===n?(c.get=u.get,c.set=u.set):2===n?c.value=u:3===n?c.get=u:4===n&&(c.set=u),s?1===n?(e.push((function(e,t){return u.get.call(e,t)})),e.push((function(e,t){return u.set.call(e,t)}))):2===n?e.push(u):e.push((function(e,t){return u.call(e,t)})):Object.defineProperty(t,a,c))}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r){var a=[];return function(e,t,r){for(var a,n,i=new Map,s=new Map,o=0;o<r.length;o++){var c=r[o];if(Array.isArray(c)){var l,u,f=c[1],p=c[2],d=c.length>3,h=f>=5;if(h?(l=t,0!=(f-=5)&&(u=n=n||[])):(l=t.prototype,0!==f&&(u=a=a||[])),0!==f&&!d){var v=h?s:i,g=v.get(p)||0;if(!0===g||3===g&&4!==f||4===g&&3!==f)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+p);!g&&f>2?v.set(p,f):v.set(p,!0)}applyMemberDec(e,l,c,p,f,h,d,u)}}pushInitializers(e,a),pushInitializers(e,n)}(a,e,t),function(e,t,r){if(r.length>0){for(var a=[],n=t,i=t.name,s=r.length-1;s>=0;s--){var o={v:!1};try{var c=r[s](n,{kind:"class",name:i,addInitializer:createAddInitializerMethod(a,o)})}finally{o.v=!0}void 0!==c&&(assertValidReturnValue(10,c),n=c)}e.push(n,(function(){for(var e=0;e<a.length;e++)a[e].call(n)}))}}(a,e,r),a}}var applyDecs2203Impl;function applyDecs2203(e,t,r){return(applyDecs2203Impl=applyDecs2203Impl||applyDecs2203Factory())(e,t,r)}', { globals: ["Error", "TypeError", "Object", "Map", "Array"], locals: { applyDecs2203Factory: ["body.0.id", "body.2.body.body.0.argument.callee.right.right.callee"], applyDecs2203Impl: ["body.1.declarations.0.id", "body.2.body.body.0.argument.callee.right.left", "body.2.body.body.0.argument.callee.left"], applyDecs2203: ["body.2.id"] }, exportBindingAssignments: [], exportName: "applyDecs2203", dependencies: {} }), applyDecs2203R: helper("7.20.0", 'function applyDecs2203RFactory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw Error("attempted to call addInitializer after decoration was finished")}(t),assertCallable(r,"An initializer"),e.push(r)}}function memberDec(e,t,r,n,a,i,o,s){var c;switch(a){case 1:c="accessor";break;case 2:c="method";break;case 3:c="getter";break;case 4:c="setter";break;default:c="field"}var l,u,f={kind:c,name:o?"#"+t:toPropertyKey(t),static:i,private:o},p={v:!1};0!==a&&(f.addInitializer=createAddInitializerMethod(n,p)),0===a?o?(l=r.get,u=r.set):(l=function(){return this[t]},u=function(e){this[t]=e}):2===a?l=function(){return r.value}:(1!==a&&3!==a||(l=function(){return r.get.call(this)}),1!==a&&4!==a||(u=function(e){r.set.call(this,e)})),f.access=l&&u?{get:l,set:u}:l?{get:l}:{set:u};try{return e(s,f)}finally{p.v=!0}}function assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable(t.set,"accessor.set"),void 0!==t.init&&assertCallable(t.init,"accessor.init")}else if("function"!==r)throw new TypeError((0===e?"field":10===e?"class":"method")+" decorators must return a function or void 0")}function applyMemberDec(e,t,r,n,a,i,o,s){var c,l,u,f,p,d,h,v=r[0];if(o?(0===a||1===a?(c={get:r[3],set:r[4]},u="get"):3===a?(c={get:r[3]},u="get"):4===a?(c={set:r[3]},u="set"):c={value:r[3]},0!==a&&(1===a&&setFunctionName(r[4],"#"+n,"set"),setFunctionName(r[3],"#"+n,u))):0!==a&&(c=Object.getOwnPropertyDescriptor(t,n)),1===a?f={get:c.get,set:c.set}:2===a?f=c.value:3===a?f=c.get:4===a&&(f=c.set),"function"==typeof v)void 0!==(p=memberDec(v,n,c,s,a,i,o,f))&&(assertValidReturnValue(a,p),0===a?l=p:1===a?(l=p.init,d=p.get||f.get,h=p.set||f.set,f={get:d,set:h}):f=p);else for(var g=v.length-1;g>=0;g--){var y;void 0!==(p=memberDec(v[g],n,c,s,a,i,o,f))&&(assertValidReturnValue(a,p),0===a?y=p:1===a?(y=p.init,d=p.get||f.get,h=p.set||f.set,f={get:d,set:h}):f=p,void 0!==y&&(void 0===l?l=y:"function"==typeof l?l=[l,y]:l.push(y)))}if(0===a||1===a){if(void 0===l)l=function(e,t){return t};else if("function"!=typeof l){var m=l;l=function(e,t){for(var r=t,n=0;n<m.length;n++)r=m[n].call(e,r);return r}}else{var b=l;l=function(e,t){return b.call(e,t)}}e.push(l)}0!==a&&(1===a?(c.get=f.get,c.set=f.set):2===a?c.value=f:3===a?c.get=f:4===a&&(c.set=f),o?1===a?(e.push((function(e,t){return f.get.call(e,t)})),e.push((function(e,t){return f.set.call(e,t)}))):2===a?e.push(f):e.push((function(e,t){return f.call(e,t)})):Object.defineProperty(t,n,c))}function applyMemberDecs(e,t){for(var r,n,a=[],i=new Map,o=new Map,s=0;s<t.length;s++){var c=t[s];if(Array.isArray(c)){var l,u,f=c[1],p=c[2],d=c.length>3,h=f>=5;if(h?(l=e,0!=(f-=5)&&(u=n=n||[])):(l=e.prototype,0!==f&&(u=r=r||[])),0!==f&&!d){var v=h?o:i,g=v.get(p)||0;if(!0===g||3===g&&4!==f||4===g&&3!==f)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+p);!g&&f>2?v.set(p,f):v.set(p,!0)}applyMemberDec(a,l,c,p,f,h,d,u)}}return pushInitializers(a,r),pushInitializers(a,n),a}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r){return{e:applyMemberDecs(e,t),get c(){return function(e,t){if(t.length>0){for(var r=[],n=e,a=e.name,i=t.length-1;i>=0;i--){var o={v:!1};try{var s=t[i](n,{kind:"class",name:a,addInitializer:createAddInitializerMethod(r,o)})}finally{o.v=!0}void 0!==s&&(assertValidReturnValue(10,s),n=s)}return[n,function(){for(var e=0;e<r.length;e++)r[e].call(n)}]}}(e,r)}}}}function applyDecs2203R(e,t,r){return(applyDecs2203R=applyDecs2203RFactory())(e,t,r)}', { globals: ["Error", "TypeError", "Object", "Map", "Array"], locals: { applyDecs2203RFactory: ["body.0.id", "body.1.body.body.0.argument.callee.right.callee"], applyDecs2203R: ["body.1.id", "body.1.body.body.0.argument.callee.left"] }, exportBindingAssignments: ["body.1.body.body.0.argument.callee"], exportName: "applyDecs2203R", dependencies: { setFunctionName: ["body.0.body.body.4.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee", "body.0.body.body.4.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee"], toPropertyKey: ["body.0.body.body.1.body.body.2.declarations.2.init.properties.1.value.alternate.callee"] } }), applyDecs2301: helper("7.21.0", 'function applyDecs2301Factory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw Error("attempted to call addInitializer after decoration was finished")}(t),assertCallable(r,"An initializer"),e.push(r)}}function assertInstanceIfPrivate(e,t){if(!e(t))throw new TypeError("Attempted to access private element on non-instance")}function memberDec(e,t,r,n,a,i,s,o,c){var u;switch(a){case 1:u="accessor";break;case 2:u="method";break;case 3:u="getter";break;case 4:u="setter";break;default:u="field"}var l,f,p={kind:u,name:s?"#"+t:toPropertyKey(t),static:i,private:s},d={v:!1};if(0!==a&&(p.addInitializer=createAddInitializerMethod(n,d)),s||0!==a&&2!==a)if(2===a)l=function(e){return assertInstanceIfPrivate(c,e),r.value};else{var h=0===a||1===a;(h||3===a)&&(l=s?function(e){return assertInstanceIfPrivate(c,e),r.get.call(e)}:function(e){return r.get.call(e)}),(h||4===a)&&(f=s?function(e,t){assertInstanceIfPrivate(c,e),r.set.call(e,t)}:function(e,t){r.set.call(e,t)})}else l=function(e){return e[t]},0===a&&(f=function(e,r){e[t]=r});var v=s?c.bind():function(e){return t in e};p.access=l&&f?{get:l,set:f,has:v}:l?{get:l,has:v}:{set:f,has:v};try{return e(o,p)}finally{d.v=!0}}function assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable(t.set,"accessor.set"),void 0!==t.init&&assertCallable(t.init,"accessor.init")}else if("function"!==r)throw new TypeError((0===e?"field":10===e?"class":"method")+" decorators must return a function or void 0")}function curryThis2(e){return function(t){e(this,t)}}function applyMemberDec(e,t,r,n,a,i,s,o,c){var u,l,f,p,d,h,v,y,g=r[0];if(s?(0===a||1===a?(u={get:(d=r[3],function(){return d(this)}),set:curryThis2(r[4])},f="get"):3===a?(u={get:r[3]},f="get"):4===a?(u={set:r[3]},f="set"):u={value:r[3]},0!==a&&(1===a&&setFunctionName(u.set,"#"+n,"set"),setFunctionName(u[f||"value"],"#"+n,f))):0!==a&&(u=Object.getOwnPropertyDescriptor(t,n)),1===a?p={get:u.get,set:u.set}:2===a?p=u.value:3===a?p=u.get:4===a&&(p=u.set),"function"==typeof g)void 0!==(h=memberDec(g,n,u,o,a,i,s,p,c))&&(assertValidReturnValue(a,h),0===a?l=h:1===a?(l=h.init,v=h.get||p.get,y=h.set||p.set,p={get:v,set:y}):p=h);else for(var m=g.length-1;m>=0;m--){var b;void 0!==(h=memberDec(g[m],n,u,o,a,i,s,p,c))&&(assertValidReturnValue(a,h),0===a?b=h:1===a?(b=h.init,v=h.get||p.get,y=h.set||p.set,p={get:v,set:y}):p=h,void 0!==b&&(void 0===l?l=b:"function"==typeof l?l=[l,b]:l.push(b)))}if(0===a||1===a){if(void 0===l)l=function(e,t){return t};else if("function"!=typeof l){var I=l;l=function(e,t){for(var r=t,n=0;n<I.length;n++)r=I[n].call(e,r);return r}}else{var w=l;l=function(e,t){return w.call(e,t)}}e.push(l)}0!==a&&(1===a?(u.get=p.get,u.set=p.set):2===a?u.value=p:3===a?u.get=p:4===a&&(u.set=p),s?1===a?(e.push((function(e,t){return p.get.call(e,t)})),e.push((function(e,t){return p.set.call(e,t)}))):2===a?e.push(p):e.push((function(e,t){return p.call(e,t)})):Object.defineProperty(t,n,u))}function applyMemberDecs(e,t,r){for(var n,a,i,s=[],o=new Map,c=new Map,u=0;u<t.length;u++){var l=t[u];if(Array.isArray(l)){var f,p,d=l[1],h=l[2],v=l.length>3,y=d>=5,g=r;if(y?(f=e,0!=(d-=5)&&(p=a=a||[]),v&&!i&&(i=function(t){return checkInRHS(t)===e}),g=i):(f=e.prototype,0!==d&&(p=n=n||[])),0!==d&&!v){var m=y?c:o,b=m.get(h)||0;if(!0===b||3===b&&4!==d||4===b&&3!==d)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+h);!b&&d>2?m.set(h,d):m.set(h,!0)}applyMemberDec(s,f,l,h,d,y,v,p,g)}}return pushInitializers(s,n),pushInitializers(s,a),s}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r,n){return{e:applyMemberDecs(e,t,n),get c(){return function(e,t){if(t.length>0){for(var r=[],n=e,a=e.name,i=t.length-1;i>=0;i--){var s={v:!1};try{var o=t[i](n,{kind:"class",name:a,addInitializer:createAddInitializerMethod(r,s)})}finally{s.v=!0}void 0!==o&&(assertValidReturnValue(10,o),n=o)}return[n,function(){for(var e=0;e<r.length;e++)r[e].call(n)}]}}(e,r)}}}}function applyDecs2301(e,t,r,n){return(applyDecs2301=applyDecs2301Factory())(e,t,r,n)}', { globals: ["Error", "TypeError", "Object", "Map", "Array"], locals: { applyDecs2301Factory: ["body.0.id", "body.1.body.body.0.argument.callee.right.callee"], applyDecs2301: ["body.1.id", "body.1.body.body.0.argument.callee.left"] }, exportBindingAssignments: ["body.1.body.body.0.argument.callee"], exportName: "applyDecs2301", dependencies: { checkInRHS: ["body.0.body.body.7.body.body.0.body.body.1.consequent.body.1.test.expressions.0.consequent.expressions.2.right.right.body.body.0.argument.left.callee"], setFunctionName: ["body.0.body.body.6.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee", "body.0.body.body.6.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee"], toPropertyKey: ["body.0.body.body.2.body.body.2.declarations.2.init.properties.1.value.alternate.callee"] } }), applyDecs2305: helper("7.21.0", 'function applyDecs2305(e,t,r,n,o,a){function i(e,t,r){return function(n,o){return r&&r(n),e[t].call(n,o)}}function c(e,t){for(var r=0;r<e.length;r++)e[r].call(t);return t}function s(e,t,r,n){if("function"!=typeof e&&(n||void 0!==e))throw new TypeError(t+" must "+(r||"be")+" a function"+(n?"":" or undefined"));return e}function applyDec(e,t,r,n,o,a,c,u,l,f,p,d,h){function m(e){if(!h(e))throw new TypeError("Attempted to access private element on non-instance")}var y,v=t[0],g=t[3],b=!u;if(!b){r||Array.isArray(v)||(v=[v]);var w={},S=[],A=3===o?"get":4===o||d?"set":"value";f?(p||d?w={get:setFunctionName((function(){return g(this)}),n,"get"),set:function(e){t[4](this,e)}}:w[A]=g,p||setFunctionName(w[A],n,2===o?"":A)):p||(w=Object.getOwnPropertyDescriptor(e,n))}for(var P=e,j=v.length-1;j>=0;j-=r?2:1){var D=v[j],E=r?v[j-1]:void 0,I={},O={kind:["field","accessor","method","getter","setter","class"][o],name:n,metadata:a,addInitializer:function(e,t){if(e.v)throw Error("attempted to call addInitializer after decoration was finished");s(t,"An initializer","be",!0),c.push(t)}.bind(null,I)};try{if(b)(y=s(D.call(E,P,O),"class decorators","return"))&&(P=y);else{var k,F;O.static=l,O.private=f,f?2===o?k=function(e){return m(e),w.value}:(o<4&&(k=i(w,"get",m)),3!==o&&(F=i(w,"set",m))):(k=function(e){return e[n]},(o<2||4===o)&&(F=function(e,t){e[n]=t}));var N=O.access={has:f?h.bind():function(e){return n in e}};if(k&&(N.get=k),F&&(N.set=F),P=D.call(E,d?{get:w.get,set:w.set}:w[A],O),d){if("object"==typeof P&&P)(y=s(P.get,"accessor.get"))&&(w.get=y),(y=s(P.set,"accessor.set"))&&(w.set=y),(y=s(P.init,"accessor.init"))&&S.push(y);else if(void 0!==P)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0")}else s(P,(p?"field":"method")+" decorators","return")&&(p?S.push(P):w[A]=P)}}finally{I.v=!0}}return(p||d)&&u.push((function(e,t){for(var r=S.length-1;r>=0;r--)t=S[r].call(e,t);return t})),p||b||(f?d?u.push(i(w,"get"),i(w,"set")):u.push(2===o?w[A]:i.call.bind(w[A])):Object.defineProperty(e,n,w)),P}function u(e,t){return Object.defineProperty(e,Symbol.metadata||Symbol.for("Symbol.metadata"),{configurable:!0,enumerable:!0,value:t})}if(arguments.length>=6)var l=a[Symbol.metadata||Symbol.for("Symbol.metadata")];var f=Object.create(null==l?null:l),p=function(e,t,r,n){var o,a,i=[],s=function(t){return checkInRHS(t)===e},u=new Map;function l(e){e&&i.push(c.bind(null,e))}for(var f=0;f<t.length;f++){var p=t[f];if(Array.isArray(p)){var d=p[1],h=p[2],m=p.length>3,y=16&d,v=!!(8&d),g=0==(d&=7),b=h+"/"+v;if(!g&&!m){var w=u.get(b);if(!0===w||3===w&&4!==d||4===w&&3!==d)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+h);u.set(b,!(d>2)||d)}applyDec(v?e:e.prototype,p,y,m?"#"+h:toPropertyKey(h),d,n,v?a=a||[]:o=o||[],i,v,m,g,1===d,v&&m?s:r)}}return l(o),l(a),i}(e,t,o,f);return r.length||u(e,f),{e:p,get c(){var t=[];return r.length&&[u(applyDec(e,[r],n,e.name,5,f,t),f),c.bind(null,t,e)]}}}', { globals: ["TypeError", "Array", "Object", "Error", "Symbol", "Map"], locals: { applyDecs2305: ["body.0.id"] }, exportBindingAssignments: [], exportName: "applyDecs2305", dependencies: { checkInRHS: ["body.0.body.body.6.declarations.1.init.callee.body.body.0.declarations.3.init.body.body.0.argument.left.callee"], setFunctionName: ["body.0.body.body.3.body.body.2.consequent.body.2.expression.consequent.expressions.0.consequent.right.properties.0.value.callee", "body.0.body.body.3.body.body.2.consequent.body.2.expression.consequent.expressions.1.right.callee"], toPropertyKey: ["body.0.body.body.6.declarations.1.init.callee.body.body.2.body.body.1.consequent.body.2.expression.arguments.3.alternate.callee"] } }), classApplyDescriptorDestructureSet: helper("7.13.10", 'function _classApplyDescriptorDestructureSet(e,t){if(t.set)return"__destrObj"in t||(t.__destrObj={set value(r){t.set.call(e,r)}}),t.__destrObj;if(!t.writable)throw new TypeError("attempted to set read only private field");return t}', { globals: ["TypeError"], locals: { _classApplyDescriptorDestructureSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classApplyDescriptorDestructureSet", dependencies: {} }), classApplyDescriptorGet: helper("7.13.10", "function _classApplyDescriptorGet(e,t){return t.get?t.get.call(e):t.value}", { globals: [], locals: { _classApplyDescriptorGet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classApplyDescriptorGet", dependencies: {} }), classApplyDescriptorSet: helper("7.13.10", 'function _classApplyDescriptorSet(e,t,l){if(t.set)t.set.call(e,l);else{if(!t.writable)throw new TypeError("attempted to set read only private field");t.value=l}}', { globals: ["TypeError"], locals: { _classApplyDescriptorSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classApplyDescriptorSet", dependencies: {} }), classCheckPrivateStaticAccess: helper("7.13.10", "function _classCheckPrivateStaticAccess(s,a,r){return assertClassBrand(a,s,r)}", { globals: [], locals: { _classCheckPrivateStaticAccess: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classCheckPrivateStaticAccess", dependencies: { assertClassBrand: ["body.0.body.body.0.argument.callee"] } }), classCheckPrivateStaticFieldDescriptor: helper("7.13.10", 'function _classCheckPrivateStaticFieldDescriptor(t,e){if(void 0===t)throw new TypeError("attempted to "+e+" private static field before its declaration")}', { globals: ["TypeError"], locals: { _classCheckPrivateStaticFieldDescriptor: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classCheckPrivateStaticFieldDescriptor", dependencies: {} }), classExtractFieldDescriptor: helper("7.13.10", "function _classExtractFieldDescriptor(e,t){return classPrivateFieldGet2(t,e)}", { globals: [], locals: { _classExtractFieldDescriptor: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classExtractFieldDescriptor", dependencies: { classPrivateFieldGet2: ["body.0.body.body.0.argument.callee"] } }), classPrivateFieldDestructureSet: helper("7.4.4", "function _classPrivateFieldDestructureSet(e,t){var r=classPrivateFieldGet2(t,e);return classApplyDescriptorDestructureSet(e,r)}", { globals: [], locals: { _classPrivateFieldDestructureSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateFieldDestructureSet", dependencies: { classApplyDescriptorDestructureSet: ["body.0.body.body.1.argument.callee"], classPrivateFieldGet2: ["body.0.body.body.0.declarations.0.init.callee"] } }), classPrivateFieldGet: helper("7.0.0-beta.0", "function _classPrivateFieldGet(e,t){var r=classPrivateFieldGet2(t,e);return classApplyDescriptorGet(e,r)}", { globals: [], locals: { _classPrivateFieldGet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateFieldGet", dependencies: { classApplyDescriptorGet: ["body.0.body.body.1.argument.callee"], classPrivateFieldGet2: ["body.0.body.body.0.declarations.0.init.callee"] } }), classPrivateFieldSet: helper("7.0.0-beta.0", "function _classPrivateFieldSet(e,t,r){var s=classPrivateFieldGet2(t,e);return classApplyDescriptorSet(e,s,r),r}", { globals: [], locals: { _classPrivateFieldSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateFieldSet", dependencies: { classApplyDescriptorSet: ["body.0.body.body.1.argument.expressions.0.callee"], classPrivateFieldGet2: ["body.0.body.body.0.declarations.0.init.callee"] } }), classPrivateMethodGet: helper("7.1.6", "function _classPrivateMethodGet(s,a,r){return assertClassBrand(a,s),r}", { globals: [], locals: { _classPrivateMethodGet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateMethodGet", dependencies: { assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"] } }), classPrivateMethodSet: helper("7.1.6", 'function _classPrivateMethodSet(){throw new TypeError("attempted to reassign private method")}', { globals: ["TypeError"], locals: { _classPrivateMethodSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateMethodSet", dependencies: {} }), classStaticPrivateFieldDestructureSet: helper("7.13.10", 'function _classStaticPrivateFieldDestructureSet(t,r,s){return assertClassBrand(r,t),classCheckPrivateStaticFieldDescriptor(s,"set"),classApplyDescriptorDestructureSet(t,s)}', { globals: [], locals: { _classStaticPrivateFieldDestructureSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classStaticPrivateFieldDestructureSet", dependencies: { classApplyDescriptorDestructureSet: ["body.0.body.body.0.argument.expressions.2.callee"], assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"], classCheckPrivateStaticFieldDescriptor: ["body.0.body.body.0.argument.expressions.1.callee"] } }), classStaticPrivateFieldSpecGet: helper("7.0.2", 'function _classStaticPrivateFieldSpecGet(t,s,r){return assertClassBrand(s,t),classCheckPrivateStaticFieldDescriptor(r,"get"),classApplyDescriptorGet(t,r)}', { globals: [], locals: { _classStaticPrivateFieldSpecGet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classStaticPrivateFieldSpecGet", dependencies: { classApplyDescriptorGet: ["body.0.body.body.0.argument.expressions.2.callee"], assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"], classCheckPrivateStaticFieldDescriptor: ["body.0.body.body.0.argument.expressions.1.callee"] } }), classStaticPrivateFieldSpecSet: helper("7.0.2", 'function _classStaticPrivateFieldSpecSet(s,t,r,e){return assertClassBrand(t,s),classCheckPrivateStaticFieldDescriptor(r,"set"),classApplyDescriptorSet(s,r,e),e}', { globals: [], locals: { _classStaticPrivateFieldSpecSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classStaticPrivateFieldSpecSet", dependencies: { classApplyDescriptorSet: ["body.0.body.body.0.argument.expressions.2.callee"], assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"], classCheckPrivateStaticFieldDescriptor: ["body.0.body.body.0.argument.expressions.1.callee"] } }), classStaticPrivateMethodSet: helper("7.3.2", 'function _classStaticPrivateMethodSet(){throw new TypeError("attempted to set read only static private field")}', { globals: ["TypeError"], locals: { _classStaticPrivateMethodSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classStaticPrivateMethodSet", dependencies: {} }), defineEnumerableProperties: helper("7.0.0-beta.0", 'function _defineEnumerableProperties(e,r){for(var t in r){var n=r[t];n.configurable=n.enumerable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,t,n)}if(Object.getOwnPropertySymbols)for(var a=Object.getOwnPropertySymbols(r),b=0;b<a.length;b++){var i=a[b];(n=r[i]).configurable=n.enumerable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,i,n)}return e}', { globals: ["Object"], locals: { _defineEnumerableProperties: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_defineEnumerableProperties", dependencies: {} }), dispose: helper("7.22.0", 'function dispose_SuppressedError(r,e){return"undefined"!=typeof SuppressedError?dispose_SuppressedError=SuppressedError:(dispose_SuppressedError=function(r,e){this.suppressed=e,this.error=r,this.stack=Error().stack},dispose_SuppressedError.prototype=Object.create(Error.prototype,{constructor:{value:dispose_SuppressedError,writable:!0,configurable:!0}})),new dispose_SuppressedError(r,e)}function _dispose(r,e,s){function next(){for(;r.length>0;)try{var o=r.pop(),p=o.d.call(o.v);if(o.a)return Promise.resolve(p).then(next,err)}catch(r){return err(r)}if(s)throw e}function err(r){return e=s?new dispose_SuppressedError(e,r):r,s=!0,next()}return next()}', { globals: ["SuppressedError", "Error", "Object", "Promise"], locals: { dispose_SuppressedError: ["body.0.id", "body.0.body.body.0.argument.expressions.0.alternate.expressions.1.left.object", "body.0.body.body.0.argument.expressions.0.alternate.expressions.1.right.arguments.1.properties.0.value.properties.0.value", "body.0.body.body.0.argument.expressions.1.callee", "body.1.body.body.1.body.body.0.argument.expressions.0.right.consequent.callee", "body.0.body.body.0.argument.expressions.0.consequent.left", "body.0.body.body.0.argument.expressions.0.alternate.expressions.0.left"], _dispose: ["body.1.id"] }, exportBindingAssignments: [], exportName: "_dispose", dependencies: {} }), objectSpread: helper("7.0.0-beta.0", 'function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?Object(arguments[r]):{},o=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&o.push.apply(o,Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),o.forEach((function(r){defineProperty(e,r,t[r])}))}return e}', { globals: ["Object"], locals: { _objectSpread: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_objectSpread", dependencies: { defineProperty: ["body.0.body.body.0.body.body.1.expression.expressions.1.arguments.0.body.body.0.expression.callee"] } }), using: helper("7.22.0", 'function _using(o,n,e){if(null==n)return n;if(Object(n)!==n)throw new TypeError("using declarations can only be used with objects, functions, null, or undefined.");if(e)var r=n[Symbol.asyncDispose||Symbol.for("Symbol.asyncDispose")];if(null==r&&(r=n[Symbol.dispose||Symbol.for("Symbol.dispose")]),"function"!=typeof r)throw new TypeError("Property [Symbol.dispose] is not a function.");return o.push({v:n,d:r,a:e}),n}', { globals: ["Object", "TypeError", "Symbol"], locals: { _using: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_using", dependencies: {} }) });
      }, "./node_modules/.pnpm/@babel+helpers@7.26.0/node_modules/@babel/helpers/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0, exports2.get = get, exports2.getDependencies = function(name) {
          return loadHelper(name).getDependencies();
        }, exports2.list = void 0, exports2.minVersion = function(name) {
          return loadHelper(name).minVersion;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _helpersGenerated = __webpack_require__2("./node_modules/.pnpm/@babel+helpers@7.26.0/node_modules/@babel/helpers/lib/helpers-generated.js");
        const { cloneNode: cloneNode2, identifier } = _t;
        function deep(obj, path9, value2) {
          try {
            const parts = path9.split(".");
            let last = parts.shift();
            for (; parts.length > 0; ) obj = obj[last], last = parts.shift();
            if (!(arguments.length > 2)) return obj[last];
            obj[last] = value2;
          } catch (e2) {
            throw e2.message += ` (when accessing ${path9})`, e2;
          }
        }
        const helperData = /* @__PURE__ */ Object.create(null);
        function loadHelper(name) {
          if (!helperData[name]) {
            const helper = _helpersGenerated.default[name];
            if (!helper) throw Object.assign(new ReferenceError(`Unknown helper ${name}`), { code: "BABEL_HELPER_UNKNOWN", helper: name });
            helperData[name] = { minVersion: helper.minVersion, build(getDependency, bindingName, localBindings, adjustAst) {
              const ast = helper.ast();
              return function(ast2, metadata, bindingName2, localBindings2, getDependency2, adjustAst2) {
                const { locals, dependencies, exportBindingAssignments, exportName } = metadata, bindings = new Set(localBindings2 || []);
                bindingName2 && bindings.add(bindingName2);
                for (const [name2, paths] of (Object.entries || ((o3) => Object.keys(o3).map((k3) => [k3, o3[k3]])))(locals)) {
                  let newName = name2;
                  if (bindingName2 && name2 === exportName) newName = bindingName2;
                  else for (; bindings.has(newName); ) newName = "_" + newName;
                  if (newName !== name2) for (const path9 of paths) deep(ast2, path9, identifier(newName));
                }
                for (const [name2, paths] of (Object.entries || ((o3) => Object.keys(o3).map((k3) => [k3, o3[k3]])))(dependencies)) {
                  const ref = "function" == typeof getDependency2 && getDependency2(name2) || identifier(name2);
                  for (const path9 of paths) deep(ast2, path9, cloneNode2(ref));
                }
                null == adjustAst2 || adjustAst2(ast2, exportName, (map) => {
                  exportBindingAssignments.forEach((p) => deep(ast2, p, map(deep(ast2, p))));
                });
              }(ast, helper.metadata, bindingName, localBindings, getDependency, adjustAst), { nodes: ast.body, globals: helper.metadata.globals };
            }, getDependencies: () => Object.keys(helper.metadata.dependencies) };
          }
          return helperData[name];
        }
        function get(name, getDependency, bindingName, localBindings, adjustAst) {
          if ("object" == typeof bindingName) {
            const id = bindingName;
            bindingName = "Identifier" === (null == id ? void 0 : id.type) ? id.name : void 0;
          }
          return loadHelper(name).build(getDependency, bindingName, localBindings, adjustAst);
        }
        exports2.ensure = (name) => {
          loadHelper(name);
        };
        exports2.list = Object.keys(_helpersGenerated.default).map((name) => name.replace(/^_/, ""));
        exports2.default = get;
      }, "./node_modules/.pnpm/@babel+parser@7.26.3/node_modules/@babel/parser/lib/index.js": (__unused_webpack_module, exports2) => {
        "use strict";
        function _objectWithoutPropertiesLoose(r2, e2) {
          if (null == r2) return {};
          var t2 = {};
          for (var n2 in r2) if ({}.hasOwnProperty.call(r2, n2)) {
            if (e2.includes(n2)) continue;
            t2[n2] = r2[n2];
          }
          return t2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true });
        class Position {
          constructor(line, col, index) {
            this.line = void 0, this.column = void 0, this.index = void 0, this.line = line, this.column = col, this.index = index;
          }
        }
        class SourceLocation {
          constructor(start, end) {
            this.start = void 0, this.end = void 0, this.filename = void 0, this.identifierName = void 0, this.start = start, this.end = end;
          }
        }
        function createPositionWithColumnOffset(position, columnOffset) {
          const { line, column, index } = position;
          return new Position(line, column + columnOffset, index + columnOffset);
        }
        const code = "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED";
        var ModuleErrors = { ImportMetaOutsideModule: { message: `import.meta may appear only with 'sourceType: "module"'`, code }, ImportOutsideModule: { message: `'import' and 'export' may appear only with 'sourceType: "module"'`, code } };
        const NodeDescriptions = { ArrayPattern: "array destructuring pattern", AssignmentExpression: "assignment expression", AssignmentPattern: "assignment expression", ArrowFunctionExpression: "arrow function expression", ConditionalExpression: "conditional expression", CatchClause: "catch clause", ForOfStatement: "for-of statement", ForInStatement: "for-in statement", ForStatement: "for-loop", FormalParameters: "function parameter list", Identifier: "identifier", ImportSpecifier: "import specifier", ImportDefaultSpecifier: "import default specifier", ImportNamespaceSpecifier: "import namespace specifier", ObjectPattern: "object destructuring pattern", ParenthesizedExpression: "parenthesized expression", RestElement: "rest element", UpdateExpression: { true: "prefix operation", false: "postfix operation" }, VariableDeclarator: "variable declaration", YieldExpression: "yield expression" }, toNodeDescription = (node) => "UpdateExpression" === node.type ? NodeDescriptions.UpdateExpression[`${node.prefix}`] : NodeDescriptions[node.type];
        var StandardErrors = { AccessorIsGenerator: ({ kind }) => `A ${kind}ter cannot be a generator.`, ArgumentsInClass: "'arguments' is only allowed in functions and class methods.", AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.", AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.", AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.", AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.", AwaitUsingNotInAsyncContext: "'await using' is only allowed within async functions and at the top levels of modules.", AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.", AwaitNotInAsyncFunction: "'await' is only allowed within async functions.", BadGetterArity: "A 'get' accessor must not have any formal parameters.", BadSetterArity: "A 'set' accessor must have exactly one formal parameter.", BadSetterRestParameter: "A 'set' accessor function argument must not be a rest parameter.", ConstructorClassField: "Classes may not have a field named 'constructor'.", ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.", ConstructorIsAccessor: "Class constructor may not be an accessor.", ConstructorIsAsync: "Constructor can't be an async function.", ConstructorIsGenerator: "Constructor can't be a generator.", DeclarationMissingInitializer: ({ kind }) => `Missing initializer in ${kind} declaration.`, DecoratorArgumentsOutsideParentheses: "Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.", DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.", DecoratorsBeforeAfterExport: "Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.", DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?", DecoratorExportClass: "Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.", DecoratorSemicolon: "Decorators must not be followed by a semicolon.", DecoratorStaticBlock: "Decorators can't be used with a static block.", DeferImportRequiresNamespace: 'Only `import defer * as x from "./module"` is valid.', DeletePrivateField: "Deleting a private field is not allowed.", DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.", DuplicateConstructor: "Duplicate constructor in the same class.", DuplicateDefaultExport: "Only one default export allowed per module.", DuplicateExport: ({ exportName }) => `\`${exportName}\` has already been exported. Exported identifiers must be unique.`, DuplicateProto: "Redefinition of __proto__ property.", DuplicateRegExpFlags: "Duplicate regular expression flag.", DynamicImportPhaseRequiresImportExpressions: ({ phase }) => `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`, ElementAfterRest: "Rest element must be last element.", EscapedCharNotAnIdentifier: "Invalid Unicode escape.", ExportBindingIsString: ({ localName, exportName }) => `A string literal cannot be used as an exported binding without \`from\`.
- Did you mean \`export { '${localName}' as '${exportName}' } from 'some-module'\`?`, ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.", ForInOfLoopInitializer: ({ type }) => `'${"ForInStatement" === type ? "for-in" : "for-of"}' loop variable declaration may not have an initializer.`, ForInUsing: "For-in loop may not start with 'using' declaration.", ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.", ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.", GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.", IllegalBreakContinue: ({ type }) => `Unsyntactic ${"BreakStatement" === type ? "break" : "continue"}.`, IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.", IllegalReturn: "'return' outside of function.", ImportAttributesUseAssert: "The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedImportAssert` parser plugin to suppress this error.", ImportBindingIsString: ({ importName }) => `A string literal cannot be used as an imported binding.
- Did you mean \`import { "${importName}" as foo }\`?`, ImportCallArity: "`import()` requires exactly one or two arguments.", ImportCallNotNewExpression: "Cannot use new with import(...).", ImportCallSpreadArgument: "`...` is not allowed in `import()`.", ImportJSONBindingNotDefault: "A JSON module can only be imported with `default`.", ImportReflectionHasAssertion: "`import module x` cannot have assertions.", ImportReflectionNotBinding: 'Only `import module x from "./module"` is valid.', IncompatibleRegExpUVFlags: "The 'u' and 'v' regular expression flags cannot be enabled at the same time.", InvalidBigIntLiteral: "Invalid BigIntLiteral.", InvalidCodePoint: "Code point out of bounds.", InvalidCoverInitializedName: "Invalid shorthand property initializer.", InvalidDecimal: "Invalid decimal.", InvalidDigit: ({ radix }) => `Expected number in radix ${radix}.`, InvalidEscapeSequence: "Bad character escape sequence.", InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.", InvalidEscapedReservedWord: ({ reservedWord }) => `Escape sequence in keyword ${reservedWord}.`, InvalidIdentifier: ({ identifierName }) => `Invalid identifier ${identifierName}.`, InvalidLhs: ({ ancestor }) => `Invalid left-hand side in ${toNodeDescription(ancestor)}.`, InvalidLhsBinding: ({ ancestor }) => `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`, InvalidLhsOptionalChaining: ({ ancestor }) => `Invalid optional chaining in the left-hand side of ${toNodeDescription(ancestor)}.`, InvalidNumber: "Invalid number.", InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.", InvalidOrUnexpectedToken: ({ unexpected }) => `Unexpected character '${unexpected}'.`, InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.", InvalidPrivateFieldResolution: ({ identifierName }) => `Private name #${identifierName} is not defined.`, InvalidPropertyBindingPattern: "Binding member expression.", InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.", InvalidRestAssignmentPattern: "Invalid rest operator's argument.", LabelRedeclaration: ({ labelName }) => `Label '${labelName}' is already declared.`, LetInLexicalBinding: "'let' is disallowed as a lexically bound name.", LineTerminatorBeforeArrow: "No line break is allowed before '=>'.", MalformedRegExpFlags: "Invalid regular expression flag.", MissingClassName: "A class name is required.", MissingEqInAssignment: "Only '=' operator can be used for specifying default value.", MissingSemicolon: "Missing semicolon.", MissingPlugin: ({ missingPlugin }) => `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`, MissingOneOfPlugins: ({ missingPlugin }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`, MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.", MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.", ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.", ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.", ModuleAttributesWithDuplicateKeys: ({ key }) => `Duplicate key "${key}" is not allowed in module attributes.`, ModuleExportNameHasLoneSurrogate: ({ surrogateCharCode }) => `An export name cannot include a lone surrogate, found '\\u${surrogateCharCode.toString(16)}'.`, ModuleExportUndefined: ({ localName }) => `Export '${localName}' is not defined.`, MultipleDefaultsInSwitch: "Multiple default clauses.", NewlineAfterThrow: "Illegal newline after throw.", NoCatchOrFinally: "Missing catch or finally clause.", NumberIdentifier: "Identifier directly after number.", NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.", ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.", OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.", OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.", OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.", ParamDupe: "Argument name clash.", PatternHasAccessor: "Object pattern can't contain getter or setter.", PatternHasMethod: "Object pattern can't contain methods.", PrivateInExpectedIn: ({ identifierName }) => `Private names are only allowed in property accesses (\`obj.#${identifierName}\`) or in \`in\` expressions (\`#${identifierName} in obj\`).`, PrivateNameRedeclaration: ({ identifierName }) => `Duplicate private name #${identifierName}.`, RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.", RecordNoProto: "'__proto__' is not allowed in Record expressions.", RestTrailingComma: "Unexpected trailing comma after rest element.", SloppyFunction: "In non-strict mode code, functions can only be declared at top level or inside a block.", SloppyFunctionAnnexB: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.", SourcePhaseImportRequiresDefault: 'Only `import source x from "./module"` is valid.', StaticPrototype: "Classes may not have static property named prototype.", SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?", SuperPrivateField: "Private fields can't be accessed on super.", TrailingDecorator: "Decorators must be attached to a class element.", TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.", UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.", UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.', UnexpectedDigitAfterHash: "Unexpected digit after hash token.", UnexpectedImportExport: "'import' and 'export' may only appear at the top level.", UnexpectedKeyword: ({ keyword }) => `Unexpected keyword '${keyword}'.`, UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.", UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.", UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.", UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.", UnexpectedPrivateField: "Unexpected private name.", UnexpectedReservedWord: ({ reservedWord }) => `Unexpected reserved word '${reservedWord}'.`, UnexpectedSuper: "'super' is only allowed in object methods and classes.", UnexpectedToken: ({ expected, unexpected }) => `Unexpected token${unexpected ? ` '${unexpected}'.` : ""}${expected ? `, expected "${expected}"` : ""}`, UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.", UnexpectedUsingDeclaration: "Using declaration cannot appear in the top level when source type is `script`.", UnsupportedBind: "Binding should be performed on object property.", UnsupportedDecoratorExport: "A decorated export must export a class declaration.", UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.", UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.", UnsupportedMetaProperty: ({ target, onlyValidPropertyName }) => `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`, UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.", UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.", UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).", UnterminatedComment: "Unterminated comment.", UnterminatedRegExp: "Unterminated regular expression.", UnterminatedString: "Unterminated string constant.", UnterminatedTemplate: "Unterminated template.", UsingDeclarationExport: "Using declaration cannot be exported.", UsingDeclarationHasBindingPattern: "Using declaration cannot have destructuring patterns.", VarRedeclaration: ({ identifierName }) => `Identifier '${identifierName}' has already been declared.`, YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.", YieldInParameter: "Yield expression is not allowed in formal parameters.", ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0." };
        const UnparenthesizedPipeBodyDescriptions = /* @__PURE__ */ new Set(["ArrowFunctionExpression", "AssignmentExpression", "ConditionalExpression", "YieldExpression"]);
        var PipelineOperatorErrors = { PipeBodyIsTighter: "Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.", PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.', PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.", PipeTopicUnconfiguredToken: ({ token }) => `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${token}" }.`, PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.", PipeUnparenthesizedBody: ({ type }) => `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({ type })}; please wrap it in parentheses.`, PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.', PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.", PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.", PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.", PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.", PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.' };
        const _excluded = ["message"];
        function defineHidden(obj, key, value2) {
          Object.defineProperty(obj, key, { enumerable: false, configurable: true, value: value2 });
        }
        function toParseErrorConstructor({ toMessage, code: code2, reasonCode, syntaxPlugin }) {
          const hasMissingPlugin = "MissingPlugin" === reasonCode || "MissingOneOfPlugins" === reasonCode;
          {
            const oldReasonCodes = { AccessorCannotDeclareThisParameter: "AccesorCannotDeclareThisParameter", AccessorCannotHaveTypeParameters: "AccesorCannotHaveTypeParameters", ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference: "ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference", SetAccessorCannotHaveOptionalParameter: "SetAccesorCannotHaveOptionalParameter", SetAccessorCannotHaveRestParameter: "SetAccesorCannotHaveRestParameter", SetAccessorCannotHaveReturnType: "SetAccesorCannotHaveReturnType" };
            oldReasonCodes[reasonCode] && (reasonCode = oldReasonCodes[reasonCode]);
          }
          return function constructor(loc, details) {
            const error = new SyntaxError();
            return error.code = code2, error.reasonCode = reasonCode, error.loc = loc, error.pos = loc.index, error.syntaxPlugin = syntaxPlugin, hasMissingPlugin && (error.missingPlugin = details.missingPlugin), defineHidden(error, "clone", function(overrides = {}) {
              var _overrides$loc;
              const { line, column, index } = null != (_overrides$loc = overrides.loc) ? _overrides$loc : loc;
              return constructor(new Position(line, column, index), Object.assign({}, details, overrides.details));
            }), defineHidden(error, "details", details), Object.defineProperty(error, "message", { configurable: true, get() {
              const message = `${toMessage(details)} (${loc.line}:${loc.column})`;
              return this.message = message, message;
            }, set(value2) {
              Object.defineProperty(this, "message", { value: value2, writable: true });
            } }), error;
          };
        }
        function ParseErrorEnum(argument, syntaxPlugin) {
          if (Array.isArray(argument)) return (parseErrorTemplates) => ParseErrorEnum(parseErrorTemplates, argument[0]);
          const ParseErrorConstructors = {};
          for (const reasonCode of Object.keys(argument)) {
            const template = argument[reasonCode], _ref = "string" == typeof template ? { message: () => template } : "function" == typeof template ? { message: template } : template, { message } = _ref, rest = _objectWithoutPropertiesLoose(_ref, _excluded), toMessage = "string" == typeof message ? () => message : message;
            ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({ code: "BABEL_PARSER_SYNTAX_ERROR", reasonCode, toMessage }, syntaxPlugin ? { syntaxPlugin } : {}, rest));
          }
          return ParseErrorConstructors;
        }
        const Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum({ StrictDelete: "Deleting local variable in strict mode.", StrictEvalArguments: ({ referenceName }) => `Assigning to '${referenceName}' in strict mode.`, StrictEvalArgumentsBinding: ({ bindingName }) => `Binding '${bindingName}' in strict mode.`, StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.", StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.", StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.", StrictWith: "'with' in strict mode." }), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors)), { defineProperty } = Object, toUnenumerable = (object, key) => {
          object && defineProperty(object, key, { enumerable: false, value: object[key] });
        };
        function toESTreeLocation(node) {
          return toUnenumerable(node.loc.start, "index"), toUnenumerable(node.loc.end, "index"), node;
        }
        class TokContext {
          constructor(token, preserveSpace) {
            this.token = void 0, this.preserveSpace = void 0, this.token = token, this.preserveSpace = !!preserveSpace;
          }
        }
        const types = { brace: new TokContext("{"), j_oTag: new TokContext("<tag"), j_cTag: new TokContext("</tag"), j_expr: new TokContext("<tag>...</tag>", true) };
        types.template = new TokContext("`", true);
        class ExportedTokenType {
          constructor(label, conf = {}) {
            this.label = void 0, this.keyword = void 0, this.beforeExpr = void 0, this.startsExpr = void 0, this.rightAssociative = void 0, this.isLoop = void 0, this.isAssign = void 0, this.prefix = void 0, this.postfix = void 0, this.binop = void 0, this.label = label, this.keyword = conf.keyword, this.beforeExpr = !!conf.beforeExpr, this.startsExpr = !!conf.startsExpr, this.rightAssociative = !!conf.rightAssociative, this.isLoop = !!conf.isLoop, this.isAssign = !!conf.isAssign, this.prefix = !!conf.prefix, this.postfix = !!conf.postfix, this.binop = null != conf.binop ? conf.binop : null, this.updateContext = null;
          }
        }
        const keywords$1 = /* @__PURE__ */ new Map();
        function createKeyword(name, options = {}) {
          options.keyword = name;
          const token = createToken(name, options);
          return keywords$1.set(name, token), token;
        }
        function createBinop(name, binop) {
          return createToken(name, { beforeExpr: true, binop });
        }
        let tokenTypeCounter = -1;
        const tokenTypes = [], tokenLabels = [], tokenBinops = [], tokenBeforeExprs = [], tokenStartsExprs = [], tokenPrefixes = [];
        function createToken(name, options = {}) {
          var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;
          return ++tokenTypeCounter, tokenLabels.push(name), tokenBinops.push(null != (_options$binop = options.binop) ? _options$binop : -1), tokenBeforeExprs.push(null != (_options$beforeExpr = options.beforeExpr) && _options$beforeExpr), tokenStartsExprs.push(null != (_options$startsExpr = options.startsExpr) && _options$startsExpr), tokenPrefixes.push(null != (_options$prefix = options.prefix) && _options$prefix), tokenTypes.push(new ExportedTokenType(name, options)), tokenTypeCounter;
        }
        function createKeywordLike(name, options = {}) {
          var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;
          return ++tokenTypeCounter, keywords$1.set(name, tokenTypeCounter), tokenLabels.push(name), tokenBinops.push(null != (_options$binop2 = options.binop) ? _options$binop2 : -1), tokenBeforeExprs.push(null != (_options$beforeExpr2 = options.beforeExpr) && _options$beforeExpr2), tokenStartsExprs.push(null != (_options$startsExpr2 = options.startsExpr) && _options$startsExpr2), tokenPrefixes.push(null != (_options$prefix2 = options.prefix) && _options$prefix2), tokenTypes.push(new ExportedTokenType("name", options)), tokenTypeCounter;
        }
        const tt = { bracketL: createToken("[", { beforeExpr: true, startsExpr: true }), bracketHashL: createToken("#[", { beforeExpr: true, startsExpr: true }), bracketBarL: createToken("[|", { beforeExpr: true, startsExpr: true }), bracketR: createToken("]"), bracketBarR: createToken("|]"), braceL: createToken("{", { beforeExpr: true, startsExpr: true }), braceBarL: createToken("{|", { beforeExpr: true, startsExpr: true }), braceHashL: createToken("#{", { beforeExpr: true, startsExpr: true }), braceR: createToken("}"), braceBarR: createToken("|}"), parenL: createToken("(", { beforeExpr: true, startsExpr: true }), parenR: createToken(")"), comma: createToken(",", { beforeExpr: true }), semi: createToken(";", { beforeExpr: true }), colon: createToken(":", { beforeExpr: true }), doubleColon: createToken("::", { beforeExpr: true }), dot: createToken("."), question: createToken("?", { beforeExpr: true }), questionDot: createToken("?."), arrow: createToken("=>", { beforeExpr: true }), template: createToken("template"), ellipsis: createToken("...", { beforeExpr: true }), backQuote: createToken("`", { startsExpr: true }), dollarBraceL: createToken("${", { beforeExpr: true, startsExpr: true }), templateTail: createToken("...`", { startsExpr: true }), templateNonTail: createToken("...${", { beforeExpr: true, startsExpr: true }), at: createToken("@"), hash: createToken("#", { startsExpr: true }), interpreterDirective: createToken("#!..."), eq: createToken("=", { beforeExpr: true, isAssign: true }), assign: createToken("_=", { beforeExpr: true, isAssign: true }), slashAssign: createToken("_=", { beforeExpr: true, isAssign: true }), xorAssign: createToken("_=", { beforeExpr: true, isAssign: true }), moduloAssign: createToken("_=", { beforeExpr: true, isAssign: true }), incDec: createToken("++/--", { prefix: true, postfix: true, startsExpr: true }), bang: createToken("!", { beforeExpr: true, prefix: true, startsExpr: true }), tilde: createToken("~", { beforeExpr: true, prefix: true, startsExpr: true }), doubleCaret: createToken("^^", { startsExpr: true }), doubleAt: createToken("@@", { startsExpr: true }), pipeline: createBinop("|>", 0), nullishCoalescing: createBinop("??", 1), logicalOR: createBinop("||", 1), logicalAND: createBinop("&&", 2), bitwiseOR: createBinop("|", 3), bitwiseXOR: createBinop("^", 4), bitwiseAND: createBinop("&", 5), equality: createBinop("==/!=/===/!==", 6), lt: createBinop("</>/<=/>=", 7), gt: createBinop("</>/<=/>=", 7), relational: createBinop("</>/<=/>=", 7), bitShift: createBinop("<</>>/>>>", 8), bitShiftL: createBinop("<</>>/>>>", 8), bitShiftR: createBinop("<</>>/>>>", 8), plusMin: createToken("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }), modulo: createToken("%", { binop: 10, startsExpr: true }), star: createToken("*", { binop: 10 }), slash: createBinop("/", 10), exponent: createToken("**", { beforeExpr: true, binop: 11, rightAssociative: true }), _in: createKeyword("in", { beforeExpr: true, binop: 7 }), _instanceof: createKeyword("instanceof", { beforeExpr: true, binop: 7 }), _break: createKeyword("break"), _case: createKeyword("case", { beforeExpr: true }), _catch: createKeyword("catch"), _continue: createKeyword("continue"), _debugger: createKeyword("debugger"), _default: createKeyword("default", { beforeExpr: true }), _else: createKeyword("else", { beforeExpr: true }), _finally: createKeyword("finally"), _function: createKeyword("function", { startsExpr: true }), _if: createKeyword("if"), _return: createKeyword("return", { beforeExpr: true }), _switch: createKeyword("switch"), _throw: createKeyword("throw", { beforeExpr: true, prefix: true, startsExpr: true }), _try: createKeyword("try"), _var: createKeyword("var"), _const: createKeyword("const"), _with: createKeyword("with"), _new: createKeyword("new", { beforeExpr: true, startsExpr: true }), _this: createKeyword("this", { startsExpr: true }), _super: createKeyword("super", { startsExpr: true }), _class: createKeyword("class", { startsExpr: true }), _extends: createKeyword("extends", { beforeExpr: true }), _export: createKeyword("export"), _import: createKeyword("import", { startsExpr: true }), _null: createKeyword("null", { startsExpr: true }), _true: createKeyword("true", { startsExpr: true }), _false: createKeyword("false", { startsExpr: true }), _typeof: createKeyword("typeof", { beforeExpr: true, prefix: true, startsExpr: true }), _void: createKeyword("void", { beforeExpr: true, prefix: true, startsExpr: true }), _delete: createKeyword("delete", { beforeExpr: true, prefix: true, startsExpr: true }), _do: createKeyword("do", { isLoop: true, beforeExpr: true }), _for: createKeyword("for", { isLoop: true }), _while: createKeyword("while", { isLoop: true }), _as: createKeywordLike("as", { startsExpr: true }), _assert: createKeywordLike("assert", { startsExpr: true }), _async: createKeywordLike("async", { startsExpr: true }), _await: createKeywordLike("await", { startsExpr: true }), _defer: createKeywordLike("defer", { startsExpr: true }), _from: createKeywordLike("from", { startsExpr: true }), _get: createKeywordLike("get", { startsExpr: true }), _let: createKeywordLike("let", { startsExpr: true }), _meta: createKeywordLike("meta", { startsExpr: true }), _of: createKeywordLike("of", { startsExpr: true }), _sent: createKeywordLike("sent", { startsExpr: true }), _set: createKeywordLike("set", { startsExpr: true }), _source: createKeywordLike("source", { startsExpr: true }), _static: createKeywordLike("static", { startsExpr: true }), _using: createKeywordLike("using", { startsExpr: true }), _yield: createKeywordLike("yield", { startsExpr: true }), _asserts: createKeywordLike("asserts", { startsExpr: true }), _checks: createKeywordLike("checks", { startsExpr: true }), _exports: createKeywordLike("exports", { startsExpr: true }), _global: createKeywordLike("global", { startsExpr: true }), _implements: createKeywordLike("implements", { startsExpr: true }), _intrinsic: createKeywordLike("intrinsic", { startsExpr: true }), _infer: createKeywordLike("infer", { startsExpr: true }), _is: createKeywordLike("is", { startsExpr: true }), _mixins: createKeywordLike("mixins", { startsExpr: true }), _proto: createKeywordLike("proto", { startsExpr: true }), _require: createKeywordLike("require", { startsExpr: true }), _satisfies: createKeywordLike("satisfies", { startsExpr: true }), _keyof: createKeywordLike("keyof", { startsExpr: true }), _readonly: createKeywordLike("readonly", { startsExpr: true }), _unique: createKeywordLike("unique", { startsExpr: true }), _abstract: createKeywordLike("abstract", { startsExpr: true }), _declare: createKeywordLike("declare", { startsExpr: true }), _enum: createKeywordLike("enum", { startsExpr: true }), _module: createKeywordLike("module", { startsExpr: true }), _namespace: createKeywordLike("namespace", { startsExpr: true }), _interface: createKeywordLike("interface", { startsExpr: true }), _type: createKeywordLike("type", { startsExpr: true }), _opaque: createKeywordLike("opaque", { startsExpr: true }), name: createToken("name", { startsExpr: true }), placeholder: createToken("%%", { startsExpr: true }), string: createToken("string", { startsExpr: true }), num: createToken("num", { startsExpr: true }), bigint: createToken("bigint", { startsExpr: true }), decimal: createToken("decimal", { startsExpr: true }), regexp: createToken("regexp", { startsExpr: true }), privateName: createToken("#name", { startsExpr: true }), eof: createToken("eof"), jsxName: createToken("jsxName"), jsxText: createToken("jsxText", { beforeExpr: true }), jsxTagStart: createToken("jsxTagStart", { startsExpr: true }), jsxTagEnd: createToken("jsxTagEnd") };
        function tokenIsIdentifier(token) {
          return token >= 93 && token <= 133;
        }
        function tokenIsKeywordOrIdentifier(token) {
          return token >= 58 && token <= 133;
        }
        function tokenIsLiteralPropertyName(token) {
          return token >= 58 && token <= 137;
        }
        function tokenCanStartExpression(token) {
          return tokenStartsExprs[token];
        }
        function tokenIsFlowInterfaceOrTypeOrOpaque(token) {
          return token >= 129 && token <= 131;
        }
        function tokenIsKeyword(token) {
          return token >= 58 && token <= 92;
        }
        function tokenLabelName(token) {
          return tokenLabels[token];
        }
        function tokenOperatorPrecedence(token) {
          return tokenBinops[token];
        }
        function tokenIsTemplate(token) {
          return token >= 24 && token <= 25;
        }
        function getExportedToken(token) {
          return tokenTypes[token];
        }
        tokenTypes[8].updateContext = (context) => {
          context.pop();
        }, tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = (context) => {
          context.push(types.brace);
        }, tokenTypes[22].updateContext = (context) => {
          context[context.length - 1] === types.template ? context.pop() : context.push(types.template);
        }, tokenTypes[143].updateContext = (context) => {
          context.push(types.j_expr, types.j_oTag);
        };
        let nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC", nonASCIIidentifierChars = "\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0897-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65";
        const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]"), nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
        nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
        const astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 4, 51, 13, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 39, 27, 10, 22, 251, 41, 7, 1, 17, 2, 60, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 31, 9, 2, 0, 3, 0, 2, 37, 2, 0, 26, 0, 2, 0, 45, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 200, 32, 32, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 26, 3994, 6, 582, 6842, 29, 1763, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 433, 44, 212, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 42, 9, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 229, 29, 3, 0, 496, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191], astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 7, 9, 32, 4, 318, 1, 80, 3, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 68, 8, 2, 0, 3, 0, 2, 3, 2, 4, 2, 0, 15, 1, 83, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 7, 19, 58, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 343, 9, 54, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 10, 5350, 0, 7, 14, 11465, 27, 2343, 9, 87, 9, 39, 4, 60, 6, 26, 9, 535, 9, 470, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4178, 9, 519, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 245, 1, 2, 9, 726, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
        function isInAstralSet(code2, set) {
          let pos = 65536;
          for (let i2 = 0, length = set.length; i2 < length; i2 += 2) {
            if (pos += set[i2], pos > code2) return false;
            if (pos += set[i2 + 1], pos >= code2) return true;
          }
          return false;
        }
        function isIdentifierStart(code2) {
          return code2 < 65 ? 36 === code2 : code2 <= 90 || (code2 < 97 ? 95 === code2 : code2 <= 122 || (code2 <= 65535 ? code2 >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code2)) : isInAstralSet(code2, astralIdentifierStartCodes)));
        }
        function isIdentifierChar(code2) {
          return code2 < 48 ? 36 === code2 : code2 < 58 || !(code2 < 65) && (code2 <= 90 || (code2 < 97 ? 95 === code2 : code2 <= 122 || (code2 <= 65535 ? code2 >= 170 && nonASCIIidentifier.test(String.fromCharCode(code2)) : isInAstralSet(code2, astralIdentifierStartCodes) || isInAstralSet(code2, astralIdentifierCodes))));
        }
        const reservedWords_strict = ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"], reservedWords_strictBind = ["eval", "arguments"], keywords = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"]), reservedWordsStrictSet = new Set(reservedWords_strict), reservedWordsStrictBindSet = new Set(reservedWords_strictBind);
        function isReservedWord(word, inModule) {
          return inModule && "await" === word || "enum" === word;
        }
        function isStrictReservedWord(word, inModule) {
          return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
        }
        function isStrictBindOnlyReservedWord(word) {
          return reservedWordsStrictBindSet.has(word);
        }
        function isStrictBindReservedWord(word, inModule) {
          return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
        }
        const reservedWordLikeSet = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);
        class Scope {
          constructor(flags) {
            this.flags = 0, this.names = /* @__PURE__ */ new Map(), this.firstLexicalName = "", this.flags = flags;
          }
        }
        class ScopeHandler {
          constructor(parser, inModule) {
            this.parser = void 0, this.scopeStack = [], this.inModule = void 0, this.undefinedExports = /* @__PURE__ */ new Map(), this.parser = parser, this.inModule = inModule;
          }
          get inTopLevel() {
            return (1 & this.currentScope().flags) > 0;
          }
          get inFunction() {
            return (2 & this.currentVarScopeFlags()) > 0;
          }
          get allowSuper() {
            return (16 & this.currentThisScopeFlags()) > 0;
          }
          get allowDirectSuper() {
            return (32 & this.currentThisScopeFlags()) > 0;
          }
          get inClass() {
            return (64 & this.currentThisScopeFlags()) > 0;
          }
          get inClassAndNotInNonArrowFunction() {
            const flags = this.currentThisScopeFlags();
            return (64 & flags) > 0 && !(2 & flags);
          }
          get inStaticBlock() {
            for (let i2 = this.scopeStack.length - 1; ; i2--) {
              const { flags } = this.scopeStack[i2];
              if (128 & flags) return true;
              if (451 & flags) return false;
            }
          }
          get inNonArrowFunction() {
            return (2 & this.currentThisScopeFlags()) > 0;
          }
          get treatFunctionsAsVar() {
            return this.treatFunctionsAsVarInScope(this.currentScope());
          }
          createScope(flags) {
            return new Scope(flags);
          }
          enter(flags) {
            this.scopeStack.push(this.createScope(flags));
          }
          exit() {
            return this.scopeStack.pop().flags;
          }
          treatFunctionsAsVarInScope(scope) {
            return !!(130 & scope.flags || !this.parser.inModule && 1 & scope.flags);
          }
          declareName(name, bindingType, loc) {
            let scope = this.currentScope();
            if (8 & bindingType || 16 & bindingType) {
              this.checkRedeclarationInScope(scope, name, bindingType, loc);
              let type = scope.names.get(name) || 0;
              16 & bindingType ? type |= 4 : (scope.firstLexicalName || (scope.firstLexicalName = name), type |= 2), scope.names.set(name, type), 8 & bindingType && this.maybeExportDefined(scope, name);
            } else if (4 & bindingType) for (let i2 = this.scopeStack.length - 1; i2 >= 0 && (scope = this.scopeStack[i2], this.checkRedeclarationInScope(scope, name, bindingType, loc), scope.names.set(name, 1 | (scope.names.get(name) || 0)), this.maybeExportDefined(scope, name), !(387 & scope.flags)); --i2) ;
            this.parser.inModule && 1 & scope.flags && this.undefinedExports.delete(name);
          }
          maybeExportDefined(scope, name) {
            this.parser.inModule && 1 & scope.flags && this.undefinedExports.delete(name);
          }
          checkRedeclarationInScope(scope, name, bindingType, loc) {
            this.isRedeclaredInScope(scope, name, bindingType) && this.parser.raise(Errors.VarRedeclaration, loc, { identifierName: name });
          }
          isRedeclaredInScope(scope, name, bindingType) {
            if (!(1 & bindingType)) return false;
            if (8 & bindingType) return scope.names.has(name);
            const type = scope.names.get(name);
            return 16 & bindingType ? (2 & type) > 0 || !this.treatFunctionsAsVarInScope(scope) && (1 & type) > 0 : (2 & type) > 0 && !(8 & scope.flags && scope.firstLexicalName === name) || !this.treatFunctionsAsVarInScope(scope) && (4 & type) > 0;
          }
          checkLocalExport(id) {
            const { name } = id;
            this.scopeStack[0].names.has(name) || this.undefinedExports.set(name, id.loc.start);
          }
          currentScope() {
            return this.scopeStack[this.scopeStack.length - 1];
          }
          currentVarScopeFlags() {
            for (let i2 = this.scopeStack.length - 1; ; i2--) {
              const { flags } = this.scopeStack[i2];
              if (387 & flags) return flags;
            }
          }
          currentThisScopeFlags() {
            for (let i2 = this.scopeStack.length - 1; ; i2--) {
              const { flags } = this.scopeStack[i2];
              if (451 & flags && !(4 & flags)) return flags;
            }
          }
        }
        class FlowScope extends Scope {
          constructor(...args) {
            super(...args), this.declareFunctions = /* @__PURE__ */ new Set();
          }
        }
        class FlowScopeHandler extends ScopeHandler {
          createScope(flags) {
            return new FlowScope(flags);
          }
          declareName(name, bindingType, loc) {
            const scope = this.currentScope();
            if (2048 & bindingType) return this.checkRedeclarationInScope(scope, name, bindingType, loc), this.maybeExportDefined(scope, name), void scope.declareFunctions.add(name);
            super.declareName(name, bindingType, loc);
          }
          isRedeclaredInScope(scope, name, bindingType) {
            if (super.isRedeclaredInScope(scope, name, bindingType)) return true;
            if (2048 & bindingType && !scope.declareFunctions.has(name)) {
              const type = scope.names.get(name);
              return (4 & type) > 0 || (2 & type) > 0;
            }
            return false;
          }
          checkLocalExport(id) {
            this.scopeStack[0].declareFunctions.has(id.name) || super.checkLocalExport(id);
          }
        }
        class BaseParser {
          constructor() {
            this.sawUnambiguousESM = false, this.ambiguousScriptDifferentAst = false;
          }
          sourceToOffsetPos(sourcePos) {
            return sourcePos + this.startIndex;
          }
          offsetToSourcePos(offsetPos) {
            return offsetPos - this.startIndex;
          }
          hasPlugin(pluginConfig) {
            if ("string" == typeof pluginConfig) return this.plugins.has(pluginConfig);
            {
              const [pluginName, pluginOptions] = pluginConfig;
              if (!this.hasPlugin(pluginName)) return false;
              const actualOptions = this.plugins.get(pluginName);
              for (const key of Object.keys(pluginOptions)) if ((null == actualOptions ? void 0 : actualOptions[key]) !== pluginOptions[key]) return false;
              return true;
            }
          }
          getPluginOption(plugin, name) {
            var _this$plugins$get;
            return null == (_this$plugins$get = this.plugins.get(plugin)) ? void 0 : _this$plugins$get[name];
          }
        }
        function setTrailingComments(node, comments) {
          void 0 === node.trailingComments ? node.trailingComments = comments : node.trailingComments.unshift(...comments);
        }
        function setInnerComments(node, comments) {
          void 0 === node.innerComments ? node.innerComments = comments : node.innerComments.unshift(...comments);
        }
        function adjustInnerComments(node, elements, commentWS) {
          let lastElement = null, i2 = elements.length;
          for (; null === lastElement && i2 > 0; ) lastElement = elements[--i2];
          null === lastElement || lastElement.start > commentWS.start ? setInnerComments(node, commentWS.comments) : setTrailingComments(lastElement, commentWS.comments);
        }
        class CommentsParser extends BaseParser {
          addComment(comment) {
            this.filename && (comment.loc.filename = this.filename);
            const { commentsLen } = this.state;
            this.comments.length !== commentsLen && (this.comments.length = commentsLen), this.comments.push(comment), this.state.commentsLen++;
          }
          processComment(node) {
            const { commentStack } = this.state, commentStackLength = commentStack.length;
            if (0 === commentStackLength) return;
            let i2 = commentStackLength - 1;
            const lastCommentWS = commentStack[i2];
            lastCommentWS.start === node.end && (lastCommentWS.leadingNode = node, i2--);
            const { start: nodeStart } = node;
            for (; i2 >= 0; i2--) {
              const commentWS = commentStack[i2], commentEnd = commentWS.end;
              if (!(commentEnd > nodeStart)) {
                commentEnd === nodeStart && (commentWS.trailingNode = node);
                break;
              }
              commentWS.containingNode = node, this.finalizeComment(commentWS), commentStack.splice(i2, 1);
            }
          }
          finalizeComment(commentWS) {
            const { comments } = commentWS;
            if (null !== commentWS.leadingNode || null !== commentWS.trailingNode) null !== commentWS.leadingNode && setTrailingComments(commentWS.leadingNode, comments), null !== commentWS.trailingNode && function(node, comments2) {
              void 0 === node.leadingComments ? node.leadingComments = comments2 : node.leadingComments.unshift(...comments2);
            }(commentWS.trailingNode, comments);
            else {
              const { containingNode: node, start: commentStart } = commentWS;
              if (44 === this.input.charCodeAt(this.offsetToSourcePos(commentStart) - 1)) switch (node.type) {
                case "ObjectExpression":
                case "ObjectPattern":
                case "RecordExpression":
                  adjustInnerComments(node, node.properties, commentWS);
                  break;
                case "CallExpression":
                case "OptionalCallExpression":
                  adjustInnerComments(node, node.arguments, commentWS);
                  break;
                case "FunctionDeclaration":
                case "FunctionExpression":
                case "ArrowFunctionExpression":
                case "ObjectMethod":
                case "ClassMethod":
                case "ClassPrivateMethod":
                  adjustInnerComments(node, node.params, commentWS);
                  break;
                case "ArrayExpression":
                case "ArrayPattern":
                case "TupleExpression":
                  adjustInnerComments(node, node.elements, commentWS);
                  break;
                case "ExportNamedDeclaration":
                case "ImportDeclaration":
                  adjustInnerComments(node, node.specifiers, commentWS);
                  break;
                default:
                  setInnerComments(node, comments);
              }
              else setInnerComments(node, comments);
            }
          }
          finalizeRemainingComments() {
            const { commentStack } = this.state;
            for (let i2 = commentStack.length - 1; i2 >= 0; i2--) this.finalizeComment(commentStack[i2]);
            this.state.commentStack = [];
          }
          resetPreviousNodeTrailingComments(node) {
            const { commentStack } = this.state, { length } = commentStack;
            if (0 === length) return;
            const commentWS = commentStack[length - 1];
            commentWS.leadingNode === node && (commentWS.leadingNode = null);
          }
          resetPreviousIdentifierLeadingComments(node) {
            const { commentStack } = this.state, { length } = commentStack;
            0 !== length && (commentStack[length - 1].trailingNode === node ? commentStack[length - 1].trailingNode = null : length >= 2 && commentStack[length - 2].trailingNode === node && (commentStack[length - 2].trailingNode = null));
          }
          takeSurroundingComments(node, start, end) {
            const { commentStack } = this.state, commentStackLength = commentStack.length;
            if (0 === commentStackLength) return;
            let i2 = commentStackLength - 1;
            for (; i2 >= 0; i2--) {
              const commentWS = commentStack[i2], commentEnd = commentWS.end;
              if (commentWS.start === end) commentWS.leadingNode = node;
              else if (commentEnd === start) commentWS.trailingNode = node;
              else if (commentEnd < start) break;
            }
          }
        }
        const lineBreakG = new RegExp(/\r\n|[\r\n\u2028\u2029]/.source, "g");
        function isNewLine(code2) {
          switch (code2) {
            case 10:
            case 13:
            case 8232:
            case 8233:
              return true;
            default:
              return false;
          }
        }
        function hasNewLine(input, start, end) {
          for (let i2 = start; i2 < end; i2++) if (isNewLine(input.charCodeAt(i2))) return true;
          return false;
        }
        const skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, skipWhiteSpaceInLine = /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/g;
        function isWhitespace(code2) {
          switch (code2) {
            case 9:
            case 11:
            case 12:
            case 32:
            case 160:
            case 5760:
            case 8192:
            case 8193:
            case 8194:
            case 8195:
            case 8196:
            case 8197:
            case 8198:
            case 8199:
            case 8200:
            case 8201:
            case 8202:
            case 8239:
            case 8287:
            case 12288:
            case 65279:
              return true;
            default:
              return false;
          }
        }
        class State {
          constructor() {
            this.flags = 1024, this.startIndex = void 0, this.curLine = void 0, this.lineStart = void 0, this.startLoc = void 0, this.endLoc = void 0, this.errors = [], this.potentialArrowAt = -1, this.noArrowAt = [], this.noArrowParamsConversionAt = [], this.topicContext = { maxNumOfResolvableTopics: 0, maxTopicIndex: null }, this.labels = [], this.commentsLen = 0, this.commentStack = [], this.pos = 0, this.type = 140, this.value = null, this.start = 0, this.end = 0, this.lastTokEndLoc = null, this.lastTokStartLoc = null, this.context = [types.brace], this.firstInvalidTemplateEscapePos = null, this.strictErrors = /* @__PURE__ */ new Map(), this.tokensLength = 0;
          }
          get strict() {
            return (1 & this.flags) > 0;
          }
          set strict(v) {
            v ? this.flags |= 1 : this.flags &= -2;
          }
          init({ strictMode, sourceType, startIndex, startLine, startColumn }) {
            this.strict = false !== strictMode && (true === strictMode || "module" === sourceType), this.startIndex = startIndex, this.curLine = startLine, this.lineStart = -startColumn, this.startLoc = this.endLoc = new Position(startLine, startColumn, startIndex);
          }
          get maybeInArrowParameters() {
            return (2 & this.flags) > 0;
          }
          set maybeInArrowParameters(v) {
            v ? this.flags |= 2 : this.flags &= -3;
          }
          get inType() {
            return (4 & this.flags) > 0;
          }
          set inType(v) {
            v ? this.flags |= 4 : this.flags &= -5;
          }
          get noAnonFunctionType() {
            return (8 & this.flags) > 0;
          }
          set noAnonFunctionType(v) {
            v ? this.flags |= 8 : this.flags &= -9;
          }
          get hasFlowComment() {
            return (16 & this.flags) > 0;
          }
          set hasFlowComment(v) {
            v ? this.flags |= 16 : this.flags &= -17;
          }
          get isAmbientContext() {
            return (32 & this.flags) > 0;
          }
          set isAmbientContext(v) {
            v ? this.flags |= 32 : this.flags &= -33;
          }
          get inAbstractClass() {
            return (64 & this.flags) > 0;
          }
          set inAbstractClass(v) {
            v ? this.flags |= 64 : this.flags &= -65;
          }
          get inDisallowConditionalTypesContext() {
            return (128 & this.flags) > 0;
          }
          set inDisallowConditionalTypesContext(v) {
            v ? this.flags |= 128 : this.flags &= -129;
          }
          get soloAwait() {
            return (256 & this.flags) > 0;
          }
          set soloAwait(v) {
            v ? this.flags |= 256 : this.flags &= -257;
          }
          get inFSharpPipelineDirectBody() {
            return (512 & this.flags) > 0;
          }
          set inFSharpPipelineDirectBody(v) {
            v ? this.flags |= 512 : this.flags &= -513;
          }
          get canStartJSXElement() {
            return (1024 & this.flags) > 0;
          }
          set canStartJSXElement(v) {
            v ? this.flags |= 1024 : this.flags &= -1025;
          }
          get containsEsc() {
            return (2048 & this.flags) > 0;
          }
          set containsEsc(v) {
            v ? this.flags |= 2048 : this.flags &= -2049;
          }
          get hasTopLevelAwait() {
            return (4096 & this.flags) > 0;
          }
          set hasTopLevelAwait(v) {
            v ? this.flags |= 4096 : this.flags &= -4097;
          }
          curPosition() {
            return new Position(this.curLine, this.pos - this.lineStart, this.pos + this.startIndex);
          }
          clone() {
            const state = new State();
            return state.flags = this.flags, state.startIndex = this.startIndex, state.curLine = this.curLine, state.lineStart = this.lineStart, state.startLoc = this.startLoc, state.endLoc = this.endLoc, state.errors = this.errors.slice(), state.potentialArrowAt = this.potentialArrowAt, state.noArrowAt = this.noArrowAt.slice(), state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice(), state.topicContext = this.topicContext, state.labels = this.labels.slice(), state.commentsLen = this.commentsLen, state.commentStack = this.commentStack.slice(), state.pos = this.pos, state.type = this.type, state.value = this.value, state.start = this.start, state.end = this.end, state.lastTokEndLoc = this.lastTokEndLoc, state.lastTokStartLoc = this.lastTokStartLoc, state.context = this.context.slice(), state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos, state.strictErrors = this.strictErrors, state.tokensLength = this.tokensLength, state;
          }
        }
        var _isDigit = function(code2) {
          return code2 >= 48 && code2 <= 57;
        };
        const forbiddenNumericSeparatorSiblings = { decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]), hex: /* @__PURE__ */ new Set([46, 88, 95, 120]) }, isAllowedNumericSeparatorSibling = { bin: (ch) => 48 === ch || 49 === ch, oct: (ch) => ch >= 48 && ch <= 55, dec: (ch) => ch >= 48 && ch <= 57, hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102 };
        function readStringContents(type, input, pos, lineStart, curLine, errors) {
          const initialPos = pos, initialLineStart = lineStart, initialCurLine = curLine;
          let out = "", firstInvalidLoc = null, chunkStart = pos;
          const { length } = input;
          for (; ; ) {
            if (pos >= length) {
              errors.unterminated(initialPos, initialLineStart, initialCurLine), out += input.slice(chunkStart, pos);
              break;
            }
            const ch = input.charCodeAt(pos);
            if (isStringEnd(type, ch, input, pos)) {
              out += input.slice(chunkStart, pos);
              break;
            }
            if (92 === ch) {
              out += input.slice(chunkStart, pos);
              const res = readEscapedChar(input, pos, lineStart, curLine, "template" === type, errors);
              null !== res.ch || firstInvalidLoc ? out += res.ch : firstInvalidLoc = { pos, lineStart, curLine }, { pos, lineStart, curLine } = res, chunkStart = pos;
            } else 8232 === ch || 8233 === ch ? (++curLine, lineStart = ++pos) : 10 === ch || 13 === ch ? "template" === type ? (out += input.slice(chunkStart, pos) + "\n", ++pos, 13 === ch && 10 === input.charCodeAt(pos) && ++pos, ++curLine, chunkStart = lineStart = pos) : errors.unterminated(initialPos, initialLineStart, initialCurLine) : ++pos;
          }
          return { pos, str: out, firstInvalidLoc, lineStart, curLine, containsInvalid: !!firstInvalidLoc };
        }
        function isStringEnd(type, ch, input, pos) {
          return "template" === type ? 96 === ch || 36 === ch && 123 === input.charCodeAt(pos + 1) : ch === ("double" === type ? 34 : 39);
        }
        function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
          const throwOnInvalid = !inTemplate;
          pos++;
          const res = (ch2) => ({ pos, ch: ch2, lineStart, curLine }), ch = input.charCodeAt(pos++);
          switch (ch) {
            case 110:
              return res("\n");
            case 114:
              return res("\r");
            case 120: {
              let code2;
              return { code: code2, pos } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors), res(null === code2 ? null : String.fromCharCode(code2));
            }
            case 117: {
              let code2;
              return { code: code2, pos } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors), res(null === code2 ? null : String.fromCodePoint(code2));
            }
            case 116:
              return res("	");
            case 98:
              return res("\b");
            case 118:
              return res("\v");
            case 102:
              return res("\f");
            case 13:
              10 === input.charCodeAt(pos) && ++pos;
            case 10:
              lineStart = pos, ++curLine;
            case 8232:
            case 8233:
              return res("");
            case 56:
            case 57:
              if (inTemplate) return res(null);
              errors.strictNumericEscape(pos - 1, lineStart, curLine);
            default:
              if (ch >= 48 && ch <= 55) {
                const startPos = pos - 1;
                let octalStr = /^[0-7]+/.exec(input.slice(startPos, pos + 2))[0], octal = parseInt(octalStr, 8);
                octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), pos += octalStr.length - 1;
                const next = input.charCodeAt(pos);
                if ("0" !== octalStr || 56 === next || 57 === next) {
                  if (inTemplate) return res(null);
                  errors.strictNumericEscape(startPos, lineStart, curLine);
                }
                return res(String.fromCharCode(octal));
              }
              return res(String.fromCharCode(ch));
          }
        }
        function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
          const initialPos = pos;
          let n2;
          return { n: n2, pos } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid), null === n2 && (throwOnInvalid ? errors.invalidEscapeSequence(initialPos, lineStart, curLine) : pos = initialPos - 1), { code: n2, pos };
        }
        function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {
          const start = pos, forbiddenSiblings = 16 === radix ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct, isAllowedSibling = 16 === radix ? isAllowedNumericSeparatorSibling.hex : 10 === radix ? isAllowedNumericSeparatorSibling.dec : 8 === radix ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
          let invalid = false, total = 0;
          for (let i2 = 0, e2 = null == len ? 1 / 0 : len; i2 < e2; ++i2) {
            const code2 = input.charCodeAt(pos);
            let val;
            if (95 !== code2 || "bail" === allowNumSeparator) {
              if (val = code2 >= 97 ? code2 - 97 + 10 : code2 >= 65 ? code2 - 65 + 10 : _isDigit(code2) ? code2 - 48 : 1 / 0, val >= radix) {
                if (val <= 9 && bailOnError) return { n: null, pos };
                if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) val = 0;
                else {
                  if (!forceLen) break;
                  val = 0, invalid = true;
                }
              }
              ++pos, total = total * radix + val;
            } else {
              const prev = input.charCodeAt(pos - 1), next = input.charCodeAt(pos + 1);
              if (allowNumSeparator) {
                if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
                  if (bailOnError) return { n: null, pos };
                  errors.unexpectedNumericSeparator(pos, lineStart, curLine);
                }
              } else {
                if (bailOnError) return { n: null, pos };
                errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
              }
              ++pos;
            }
          }
          return pos === start || null != len && pos - start !== len || invalid ? { n: null, pos } : { n: total, pos };
        }
        function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
          let code2;
          if (123 === input.charCodeAt(pos)) {
            if (++pos, { code: code2, pos } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors), ++pos, null !== code2 && code2 > 1114111) {
              if (!throwOnInvalid) return { code: null, pos };
              errors.invalidCodePoint(pos, lineStart, curLine);
            }
          } else ({ code: code2, pos } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
          return { code: code2, pos };
        }
        function buildPosition(pos, lineStart, curLine) {
          return new Position(curLine, pos - lineStart, pos);
        }
        const VALID_REGEX_FLAGS = /* @__PURE__ */ new Set([103, 109, 115, 105, 121, 117, 100, 118]);
        class Token {
          constructor(state) {
            const startIndex = state.startIndex || 0;
            this.type = state.type, this.value = state.value, this.start = startIndex + state.start, this.end = startIndex + state.end, this.loc = new SourceLocation(state.startLoc, state.endLoc);
          }
        }
        class Tokenizer extends CommentsParser {
          constructor(options, input) {
            super(), this.isLookahead = void 0, this.tokens = [], this.errorHandlers_readInt = { invalidDigit: (pos, lineStart, curLine, radix) => !!this.options.errorRecovery && (this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), { radix }), true), numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence), unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator) }, this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, { invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence), invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint) }), this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, { strictNumericEscape: (pos, lineStart, curLine) => {
              this.recordStrictModeErrors(Errors.StrictNumericEscape, buildPosition(pos, lineStart, curLine));
            }, unterminated: (pos, lineStart, curLine) => {
              throw this.raise(Errors.UnterminatedString, buildPosition(pos - 1, lineStart, curLine));
            } }), this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, { strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape), unterminated: (pos, lineStart, curLine) => {
              throw this.raise(Errors.UnterminatedTemplate, buildPosition(pos, lineStart, curLine));
            } }), this.state = new State(), this.state.init(options), this.input = input, this.length = input.length, this.comments = [], this.isLookahead = false;
          }
          pushToken(token) {
            this.tokens.length = this.state.tokensLength, this.tokens.push(token), ++this.state.tokensLength;
          }
          next() {
            this.checkKeywordEscapes(), this.options.tokens && this.pushToken(new Token(this.state)), this.state.lastTokEndLoc = this.state.endLoc, this.state.lastTokStartLoc = this.state.startLoc, this.nextToken();
          }
          eat(type) {
            return !!this.match(type) && (this.next(), true);
          }
          match(type) {
            return this.state.type === type;
          }
          createLookaheadState(state) {
            return { pos: state.pos, value: null, type: state.type, start: state.start, end: state.end, context: [this.curContext()], inType: state.inType, startLoc: state.startLoc, lastTokEndLoc: state.lastTokEndLoc, curLine: state.curLine, lineStart: state.lineStart, curPosition: state.curPosition };
          }
          lookahead() {
            const old = this.state;
            this.state = this.createLookaheadState(old), this.isLookahead = true, this.nextToken(), this.isLookahead = false;
            const curr = this.state;
            return this.state = old, curr;
          }
          nextTokenStart() {
            return this.nextTokenStartSince(this.state.pos);
          }
          nextTokenStartSince(pos) {
            return skipWhiteSpace.lastIndex = pos, skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;
          }
          lookaheadCharCode() {
            return this.input.charCodeAt(this.nextTokenStart());
          }
          nextTokenInLineStart() {
            return this.nextTokenInLineStartSince(this.state.pos);
          }
          nextTokenInLineStartSince(pos) {
            return skipWhiteSpaceInLine.lastIndex = pos, skipWhiteSpaceInLine.test(this.input) ? skipWhiteSpaceInLine.lastIndex : pos;
          }
          lookaheadInLineCharCode() {
            return this.input.charCodeAt(this.nextTokenInLineStart());
          }
          codePointAtPos(pos) {
            let cp = this.input.charCodeAt(pos);
            if (55296 == (64512 & cp) && ++pos < this.input.length) {
              const trail = this.input.charCodeAt(pos);
              56320 == (64512 & trail) && (cp = 65536 + ((1023 & cp) << 10) + (1023 & trail));
            }
            return cp;
          }
          setStrict(strict) {
            this.state.strict = strict, strict && (this.state.strictErrors.forEach(([toParseError, at]) => this.raise(toParseError, at)), this.state.strictErrors.clear());
          }
          curContext() {
            return this.state.context[this.state.context.length - 1];
          }
          nextToken() {
            this.skipSpace(), this.state.start = this.state.pos, this.isLookahead || (this.state.startLoc = this.state.curPosition()), this.state.pos >= this.length ? this.finishToken(140) : this.getTokenFromCode(this.codePointAtPos(this.state.pos));
          }
          skipBlockComment(commentEnd) {
            let startLoc;
            this.isLookahead || (startLoc = this.state.curPosition());
            const start = this.state.pos, end = this.input.indexOf(commentEnd, start + 2);
            if (-1 === end) throw this.raise(Errors.UnterminatedComment, this.state.curPosition());
            for (this.state.pos = end + commentEnd.length, lineBreakG.lastIndex = start + 2; lineBreakG.test(this.input) && lineBreakG.lastIndex <= end; ) ++this.state.curLine, this.state.lineStart = lineBreakG.lastIndex;
            if (this.isLookahead) return;
            const comment = { type: "CommentBlock", value: this.input.slice(start + 2, end), start: this.sourceToOffsetPos(start), end: this.sourceToOffsetPos(end + commentEnd.length), loc: new SourceLocation(startLoc, this.state.curPosition()) };
            return this.options.tokens && this.pushToken(comment), comment;
          }
          skipLineComment(startSkip) {
            const start = this.state.pos;
            let startLoc;
            this.isLookahead || (startLoc = this.state.curPosition());
            let ch = this.input.charCodeAt(this.state.pos += startSkip);
            if (this.state.pos < this.length) for (; !isNewLine(ch) && ++this.state.pos < this.length; ) ch = this.input.charCodeAt(this.state.pos);
            if (this.isLookahead) return;
            const end = this.state.pos, comment = { type: "CommentLine", value: this.input.slice(start + startSkip, end), start: this.sourceToOffsetPos(start), end: this.sourceToOffsetPos(end), loc: new SourceLocation(startLoc, this.state.curPosition()) };
            return this.options.tokens && this.pushToken(comment), comment;
          }
          skipSpace() {
            const spaceStart = this.state.pos, comments = [];
            loop: for (; this.state.pos < this.length; ) {
              const ch = this.input.charCodeAt(this.state.pos);
              switch (ch) {
                case 32:
                case 160:
                case 9:
                  ++this.state.pos;
                  break;
                case 13:
                  10 === this.input.charCodeAt(this.state.pos + 1) && ++this.state.pos;
                case 10:
                case 8232:
                case 8233:
                  ++this.state.pos, ++this.state.curLine, this.state.lineStart = this.state.pos;
                  break;
                case 47:
                  switch (this.input.charCodeAt(this.state.pos + 1)) {
                    case 42: {
                      const comment = this.skipBlockComment("*/");
                      void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                      break;
                    }
                    case 47: {
                      const comment = this.skipLineComment(2);
                      void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                      break;
                    }
                    default:
                      break loop;
                  }
                  break;
                default:
                  if (isWhitespace(ch)) ++this.state.pos;
                  else if (45 === ch && !this.inModule && this.options.annexB) {
                    const pos = this.state.pos;
                    if (45 !== this.input.charCodeAt(pos + 1) || 62 !== this.input.charCodeAt(pos + 2) || !(0 === spaceStart || this.state.lineStart > spaceStart)) break loop;
                    {
                      const comment = this.skipLineComment(3);
                      void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                    }
                  } else {
                    if (60 !== ch || this.inModule || !this.options.annexB) break loop;
                    {
                      const pos = this.state.pos;
                      if (33 !== this.input.charCodeAt(pos + 1) || 45 !== this.input.charCodeAt(pos + 2) || 45 !== this.input.charCodeAt(pos + 3)) break loop;
                      {
                        const comment = this.skipLineComment(4);
                        void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                      }
                    }
                  }
              }
            }
            if (comments.length > 0) {
              const end = this.state.pos, commentWhitespace = { start: this.sourceToOffsetPos(spaceStart), end: this.sourceToOffsetPos(end), comments, leadingNode: null, trailingNode: null, containingNode: null };
              this.state.commentStack.push(commentWhitespace);
            }
          }
          finishToken(type, val) {
            this.state.end = this.state.pos, this.state.endLoc = this.state.curPosition();
            const prevType = this.state.type;
            this.state.type = type, this.state.value = val, this.isLookahead || this.updateContext(prevType);
          }
          replaceToken(type) {
            this.state.type = type, this.updateContext();
          }
          readToken_numberSign() {
            if (0 === this.state.pos && this.readToken_interpreter()) return;
            const nextPos = this.state.pos + 1, next = this.codePointAtPos(nextPos);
            if (next >= 48 && next <= 57) throw this.raise(Errors.UnexpectedDigitAfterHash, this.state.curPosition());
            if (123 === next || 91 === next && this.hasPlugin("recordAndTuple")) {
              if (this.expectPlugin("recordAndTuple"), "bar" === this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(123 === next ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, this.state.curPosition());
              this.state.pos += 2, 123 === next ? this.finishToken(7) : this.finishToken(1);
            } else isIdentifierStart(next) ? (++this.state.pos, this.finishToken(139, this.readWord1(next))) : 92 === next ? (++this.state.pos, this.finishToken(139, this.readWord1())) : this.finishOp(27, 1);
          }
          readToken_dot() {
            const next = this.input.charCodeAt(this.state.pos + 1);
            next >= 48 && next <= 57 ? this.readNumber(true) : 46 === next && 46 === this.input.charCodeAt(this.state.pos + 2) ? (this.state.pos += 3, this.finishToken(21)) : (++this.state.pos, this.finishToken(16));
          }
          readToken_slash() {
            61 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(31, 2) : this.finishOp(56, 1);
          }
          readToken_interpreter() {
            if (0 !== this.state.pos || this.length < 2) return false;
            let ch = this.input.charCodeAt(this.state.pos + 1);
            if (33 !== ch) return false;
            const start = this.state.pos;
            for (this.state.pos += 1; !isNewLine(ch) && ++this.state.pos < this.length; ) ch = this.input.charCodeAt(this.state.pos);
            const value2 = this.input.slice(start + 2, this.state.pos);
            return this.finishToken(28, value2), true;
          }
          readToken_mult_modulo(code2) {
            let type = 42 === code2 ? 55 : 54, width = 1, next = this.input.charCodeAt(this.state.pos + 1);
            42 === code2 && 42 === next && (width++, next = this.input.charCodeAt(this.state.pos + 2), type = 57), 61 !== next || this.state.inType || (width++, type = 37 === code2 ? 33 : 30), this.finishOp(type, width);
          }
          readToken_pipe_amp(code2) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (next !== code2) {
              if (124 === code2) {
                if (62 === next) return void this.finishOp(39, 2);
                if (this.hasPlugin("recordAndTuple") && 125 === next) {
                  if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
                  return this.state.pos += 2, void this.finishToken(9);
                }
                if (this.hasPlugin("recordAndTuple") && 93 === next) {
                  if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
                  return this.state.pos += 2, void this.finishToken(4);
                }
              }
              61 !== next ? this.finishOp(124 === code2 ? 43 : 45, 1) : this.finishOp(30, 2);
            } else 61 === this.input.charCodeAt(this.state.pos + 2) ? this.finishOp(30, 3) : this.finishOp(124 === code2 ? 41 : 42, 2);
          }
          readToken_caret() {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (61 !== next || this.state.inType) if (94 === next && this.hasPlugin(["pipelineOperator", { proposal: "hack", topicToken: "^^" }])) {
              this.finishOp(37, 2);
              94 === this.input.codePointAt(this.state.pos) && this.unexpected();
            } else this.finishOp(44, 1);
            else this.finishOp(32, 2);
          }
          readToken_atSign() {
            64 === this.input.charCodeAt(this.state.pos + 1) && this.hasPlugin(["pipelineOperator", { proposal: "hack", topicToken: "@@" }]) ? this.finishOp(38, 2) : this.finishOp(26, 1);
          }
          readToken_plus_min(code2) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            next !== code2 ? 61 === next ? this.finishOp(30, 2) : this.finishOp(53, 1) : this.finishOp(34, 2);
          }
          readToken_lt() {
            const { pos } = this.state, next = this.input.charCodeAt(pos + 1);
            if (60 === next) return 61 === this.input.charCodeAt(pos + 2) ? void this.finishOp(30, 3) : void this.finishOp(51, 2);
            61 !== next ? this.finishOp(47, 1) : this.finishOp(49, 2);
          }
          readToken_gt() {
            const { pos } = this.state, next = this.input.charCodeAt(pos + 1);
            if (62 === next) {
              const size = 62 === this.input.charCodeAt(pos + 2) ? 3 : 2;
              return 61 === this.input.charCodeAt(pos + size) ? void this.finishOp(30, size + 1) : void this.finishOp(52, size);
            }
            61 !== next ? this.finishOp(48, 1) : this.finishOp(49, 2);
          }
          readToken_eq_excl(code2) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (61 !== next) return 61 === code2 && 62 === next ? (this.state.pos += 2, void this.finishToken(19)) : void this.finishOp(61 === code2 ? 29 : 35, 1);
            this.finishOp(46, 61 === this.input.charCodeAt(this.state.pos + 2) ? 3 : 2);
          }
          readToken_question() {
            const next = this.input.charCodeAt(this.state.pos + 1), next2 = this.input.charCodeAt(this.state.pos + 2);
            63 === next ? 61 === next2 ? this.finishOp(30, 3) : this.finishOp(40, 2) : 46 !== next || next2 >= 48 && next2 <= 57 ? (++this.state.pos, this.finishToken(17)) : (this.state.pos += 2, this.finishToken(18));
          }
          getTokenFromCode(code2) {
            switch (code2) {
              case 46:
                return void this.readToken_dot();
              case 40:
                return ++this.state.pos, void this.finishToken(10);
              case 41:
                return ++this.state.pos, void this.finishToken(11);
              case 59:
                return ++this.state.pos, void this.finishToken(13);
              case 44:
                return ++this.state.pos, void this.finishToken(12);
              case 91:
                if (this.hasPlugin("recordAndTuple") && 124 === this.input.charCodeAt(this.state.pos + 1)) {
                  if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
                  this.state.pos += 2, this.finishToken(2);
                } else ++this.state.pos, this.finishToken(0);
                return;
              case 93:
                return ++this.state.pos, void this.finishToken(3);
              case 123:
                if (this.hasPlugin("recordAndTuple") && 124 === this.input.charCodeAt(this.state.pos + 1)) {
                  if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
                  this.state.pos += 2, this.finishToken(6);
                } else ++this.state.pos, this.finishToken(5);
                return;
              case 125:
                return ++this.state.pos, void this.finishToken(8);
              case 58:
                return void (this.hasPlugin("functionBind") && 58 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(15, 2) : (++this.state.pos, this.finishToken(14)));
              case 63:
                return void this.readToken_question();
              case 96:
                return void this.readTemplateToken();
              case 48: {
                const next = this.input.charCodeAt(this.state.pos + 1);
                if (120 === next || 88 === next) return void this.readRadixNumber(16);
                if (111 === next || 79 === next) return void this.readRadixNumber(8);
                if (98 === next || 66 === next) return void this.readRadixNumber(2);
              }
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
                return void this.readNumber(false);
              case 34:
              case 39:
                return void this.readString(code2);
              case 47:
                return void this.readToken_slash();
              case 37:
              case 42:
                return void this.readToken_mult_modulo(code2);
              case 124:
              case 38:
                return void this.readToken_pipe_amp(code2);
              case 94:
                return void this.readToken_caret();
              case 43:
              case 45:
                return void this.readToken_plus_min(code2);
              case 60:
                return void this.readToken_lt();
              case 62:
                return void this.readToken_gt();
              case 61:
              case 33:
                return void this.readToken_eq_excl(code2);
              case 126:
                return void this.finishOp(36, 1);
              case 64:
                return void this.readToken_atSign();
              case 35:
                return void this.readToken_numberSign();
              case 92:
                return void this.readWord();
              default:
                if (isIdentifierStart(code2)) return void this.readWord(code2);
            }
            throw this.raise(Errors.InvalidOrUnexpectedToken, this.state.curPosition(), { unexpected: String.fromCodePoint(code2) });
          }
          finishOp(type, size) {
            const str = this.input.slice(this.state.pos, this.state.pos + size);
            this.state.pos += size, this.finishToken(type, str);
          }
          readRegexp() {
            const startLoc = this.state.startLoc, start = this.state.start + 1;
            let escaped, inClass, { pos } = this.state;
            for (; ; ++pos) {
              if (pos >= this.length) throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));
              const ch = this.input.charCodeAt(pos);
              if (isNewLine(ch)) throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));
              if (escaped) escaped = false;
              else {
                if (91 === ch) inClass = true;
                else if (93 === ch && inClass) inClass = false;
                else if (47 === ch && !inClass) break;
                escaped = 92 === ch;
              }
            }
            const content = this.input.slice(start, pos);
            ++pos;
            let mods = "";
            const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);
            for (; pos < this.length; ) {
              const cp = this.codePointAtPos(pos), char = String.fromCharCode(cp);
              if (VALID_REGEX_FLAGS.has(cp)) 118 === cp ? mods.includes("u") && this.raise(Errors.IncompatibleRegExpUVFlags, nextPos()) : 117 === cp && mods.includes("v") && this.raise(Errors.IncompatibleRegExpUVFlags, nextPos()), mods.includes(char) && this.raise(Errors.DuplicateRegExpFlags, nextPos());
              else {
                if (!isIdentifierChar(cp) && 92 !== cp) break;
                this.raise(Errors.MalformedRegExpFlags, nextPos());
              }
              ++pos, mods += char;
            }
            this.state.pos = pos, this.finishToken(138, { pattern: content, flags: mods });
          }
          readInt(radix, len, forceLen = false, allowNumSeparator = true) {
            const { n: n2, pos } = readInt(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt, false);
            return this.state.pos = pos, n2;
          }
          readRadixNumber(radix) {
            const start = this.state.pos, startLoc = this.state.curPosition();
            let isBigInt = false;
            this.state.pos += 2;
            const val = this.readInt(radix);
            null == val && this.raise(Errors.InvalidDigit, createPositionWithColumnOffset(startLoc, 2), { radix });
            const next = this.input.charCodeAt(this.state.pos);
            if (110 === next) ++this.state.pos, isBigInt = true;
            else if (109 === next) throw this.raise(Errors.InvalidDecimal, startLoc);
            if (isIdentifierStart(this.codePointAtPos(this.state.pos))) throw this.raise(Errors.NumberIdentifier, this.state.curPosition());
            if (isBigInt) {
              const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, "");
              this.finishToken(136, str);
            } else this.finishToken(135, val);
          }
          readNumber(startsWithDot) {
            const start = this.state.pos, startLoc = this.state.curPosition();
            let isFloat = false, isBigInt = false, hasExponent = false, isOctal = false;
            startsWithDot || null !== this.readInt(10) || this.raise(Errors.InvalidNumber, this.state.curPosition());
            const hasLeadingZero = this.state.pos - start >= 2 && 48 === this.input.charCodeAt(start);
            if (hasLeadingZero) {
              const integer = this.input.slice(start, this.state.pos);
              if (this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc), !this.state.strict) {
                const underscorePos = integer.indexOf("_");
                underscorePos > 0 && this.raise(Errors.ZeroDigitNumericSeparator, createPositionWithColumnOffset(startLoc, underscorePos));
              }
              isOctal = hasLeadingZero && !/[89]/.test(integer);
            }
            let next = this.input.charCodeAt(this.state.pos);
            if (46 !== next || isOctal || (++this.state.pos, this.readInt(10), isFloat = true, next = this.input.charCodeAt(this.state.pos)), 69 !== next && 101 !== next || isOctal || (next = this.input.charCodeAt(++this.state.pos), 43 !== next && 45 !== next || ++this.state.pos, null === this.readInt(10) && this.raise(Errors.InvalidOrMissingExponent, startLoc), isFloat = true, hasExponent = true, next = this.input.charCodeAt(this.state.pos)), 110 === next && ((isFloat || hasLeadingZero) && this.raise(Errors.InvalidBigIntLiteral, startLoc), ++this.state.pos, isBigInt = true), 109 === next) {
              this.expectPlugin("decimal", this.state.curPosition()), (hasExponent || hasLeadingZero) && this.raise(Errors.InvalidDecimal, startLoc), ++this.state.pos;
              var isDecimal = true;
            }
            if (isIdentifierStart(this.codePointAtPos(this.state.pos))) throw this.raise(Errors.NumberIdentifier, this.state.curPosition());
            const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, "");
            if (isBigInt) return void this.finishToken(136, str);
            if (isDecimal) return void this.finishToken(137, str);
            const val = isOctal ? parseInt(str, 8) : parseFloat(str);
            this.finishToken(135, val);
          }
          readCodePoint(throwOnInvalid) {
            const { code: code2, pos } = readCodePoint(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);
            return this.state.pos = pos, code2;
          }
          readString(quote) {
            const { str, pos, curLine, lineStart } = readStringContents(34 === quote ? "double" : "single", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);
            this.state.pos = pos + 1, this.state.lineStart = lineStart, this.state.curLine = curLine, this.finishToken(134, str);
          }
          readTemplateContinuation() {
            this.match(8) || this.unexpected(null, 8), this.state.pos--, this.readTemplateToken();
          }
          readTemplateToken() {
            const opening = this.input[this.state.pos], { str, firstInvalidLoc, pos, curLine, lineStart } = readStringContents("template", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);
            this.state.pos = pos + 1, this.state.lineStart = lineStart, this.state.curLine = curLine, firstInvalidLoc && (this.state.firstInvalidTemplateEscapePos = new Position(firstInvalidLoc.curLine, firstInvalidLoc.pos - firstInvalidLoc.lineStart, this.sourceToOffsetPos(firstInvalidLoc.pos))), 96 === this.input.codePointAt(pos) ? this.finishToken(24, firstInvalidLoc ? null : opening + str + "`") : (this.state.pos++, this.finishToken(25, firstInvalidLoc ? null : opening + str + "${"));
          }
          recordStrictModeErrors(toParseError, at) {
            const index = at.index;
            this.state.strict && !this.state.strictErrors.has(index) ? this.raise(toParseError, at) : this.state.strictErrors.set(index, [toParseError, at]);
          }
          readWord1(firstCode) {
            this.state.containsEsc = false;
            let word = "";
            const start = this.state.pos;
            let chunkStart = this.state.pos;
            for (void 0 !== firstCode && (this.state.pos += firstCode <= 65535 ? 1 : 2); this.state.pos < this.length; ) {
              const ch = this.codePointAtPos(this.state.pos);
              if (isIdentifierChar(ch)) this.state.pos += ch <= 65535 ? 1 : 2;
              else {
                if (92 !== ch) break;
                {
                  this.state.containsEsc = true, word += this.input.slice(chunkStart, this.state.pos);
                  const escStart = this.state.curPosition(), identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;
                  if (117 !== this.input.charCodeAt(++this.state.pos)) {
                    this.raise(Errors.MissingUnicodeEscape, this.state.curPosition()), chunkStart = this.state.pos - 1;
                    continue;
                  }
                  ++this.state.pos;
                  const esc = this.readCodePoint(true);
                  null !== esc && (identifierCheck(esc) || this.raise(Errors.EscapedCharNotAnIdentifier, escStart), word += String.fromCodePoint(esc)), chunkStart = this.state.pos;
                }
              }
            }
            return word + this.input.slice(chunkStart, this.state.pos);
          }
          readWord(firstCode) {
            const word = this.readWord1(firstCode), type = keywords$1.get(word);
            void 0 !== type ? this.finishToken(type, tokenLabelName(type)) : this.finishToken(132, word);
          }
          checkKeywordEscapes() {
            const { type } = this.state;
            tokenIsKeyword(type) && this.state.containsEsc && this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, { reservedWord: tokenLabelName(type) });
          }
          raise(toParseError, at, details = {}) {
            const error = toParseError(at instanceof Position ? at : at.loc.start, details);
            if (!this.options.errorRecovery) throw error;
            return this.isLookahead || this.state.errors.push(error), error;
          }
          raiseOverwrite(toParseError, at, details = {}) {
            const loc = at instanceof Position ? at : at.loc.start, pos = loc.index, errors = this.state.errors;
            for (let i2 = errors.length - 1; i2 >= 0; i2--) {
              const error = errors[i2];
              if (error.loc.index === pos) return errors[i2] = toParseError(loc, details);
              if (error.loc.index < pos) break;
            }
            return this.raise(toParseError, at, details);
          }
          updateContext(prevType) {
          }
          unexpected(loc, type) {
            throw this.raise(Errors.UnexpectedToken, null != loc ? loc : this.state.startLoc, { expected: type ? tokenLabelName(type) : null });
          }
          expectPlugin(pluginName, loc) {
            if (this.hasPlugin(pluginName)) return true;
            throw this.raise(Errors.MissingPlugin, null != loc ? loc : this.state.startLoc, { missingPlugin: [pluginName] });
          }
          expectOnePlugin(pluginNames) {
            if (!pluginNames.some((name) => this.hasPlugin(name))) throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, { missingPlugin: pluginNames });
          }
          errorBuilder(error) {
            return (pos, lineStart, curLine) => {
              this.raise(error, buildPosition(pos, lineStart, curLine));
            };
          }
        }
        class ClassScope {
          constructor() {
            this.privateNames = /* @__PURE__ */ new Set(), this.loneAccessors = /* @__PURE__ */ new Map(), this.undefinedPrivateNames = /* @__PURE__ */ new Map();
          }
        }
        class ClassScopeHandler {
          constructor(parser) {
            this.parser = void 0, this.stack = [], this.undefinedPrivateNames = /* @__PURE__ */ new Map(), this.parser = parser;
          }
          current() {
            return this.stack[this.stack.length - 1];
          }
          enter() {
            this.stack.push(new ClassScope());
          }
          exit() {
            const oldClassScope = this.stack.pop(), current = this.current();
            for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) current ? current.undefinedPrivateNames.has(name) || current.undefinedPrivateNames.set(name, loc) : this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, { identifierName: name });
          }
          declarePrivateName(name, elementType, loc) {
            const { privateNames, loneAccessors, undefinedPrivateNames } = this.current();
            let redefined = privateNames.has(name);
            if (3 & elementType) {
              const accessor = redefined && loneAccessors.get(name);
              if (accessor) {
                redefined = (3 & accessor) === (3 & elementType) || (4 & accessor) !== (4 & elementType), redefined || loneAccessors.delete(name);
              } else redefined || loneAccessors.set(name, elementType);
            }
            redefined && this.parser.raise(Errors.PrivateNameRedeclaration, loc, { identifierName: name }), privateNames.add(name), undefinedPrivateNames.delete(name);
          }
          usePrivateName(name, loc) {
            let classScope;
            for (classScope of this.stack) if (classScope.privateNames.has(name)) return;
            classScope ? classScope.undefinedPrivateNames.set(name, loc) : this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, { identifierName: name });
          }
        }
        class ExpressionScope {
          constructor(type = 0) {
            this.type = type;
          }
          canBeArrowParameterDeclaration() {
            return 2 === this.type || 1 === this.type;
          }
          isCertainlyParameterDeclaration() {
            return 3 === this.type;
          }
        }
        class ArrowHeadParsingScope extends ExpressionScope {
          constructor(type) {
            super(type), this.declarationErrors = /* @__PURE__ */ new Map();
          }
          recordDeclarationError(ParsingErrorClass, at) {
            const index = at.index;
            this.declarationErrors.set(index, [ParsingErrorClass, at]);
          }
          clearDeclarationError(index) {
            this.declarationErrors.delete(index);
          }
          iterateErrors(iterator) {
            this.declarationErrors.forEach(iterator);
          }
        }
        class ExpressionScopeHandler {
          constructor(parser) {
            this.parser = void 0, this.stack = [new ExpressionScope()], this.parser = parser;
          }
          enter(scope) {
            this.stack.push(scope);
          }
          exit() {
            this.stack.pop();
          }
          recordParameterInitializerError(toParseError, node) {
            const origin = node.loc.start, { stack } = this;
            let i2 = stack.length - 1, scope = stack[i2];
            for (; !scope.isCertainlyParameterDeclaration(); ) {
              if (!scope.canBeArrowParameterDeclaration()) return;
              scope.recordDeclarationError(toParseError, origin), scope = stack[--i2];
            }
            this.parser.raise(toParseError, origin);
          }
          recordArrowParameterBindingError(error, node) {
            const { stack } = this, scope = stack[stack.length - 1], origin = node.loc.start;
            if (scope.isCertainlyParameterDeclaration()) this.parser.raise(error, origin);
            else {
              if (!scope.canBeArrowParameterDeclaration()) return;
              scope.recordDeclarationError(error, origin);
            }
          }
          recordAsyncArrowParametersError(at) {
            const { stack } = this;
            let i2 = stack.length - 1, scope = stack[i2];
            for (; scope.canBeArrowParameterDeclaration(); ) 2 === scope.type && scope.recordDeclarationError(Errors.AwaitBindingIdentifier, at), scope = stack[--i2];
          }
          validateAsPattern() {
            const { stack } = this, currentScope = stack[stack.length - 1];
            currentScope.canBeArrowParameterDeclaration() && currentScope.iterateErrors(([toParseError, loc]) => {
              this.parser.raise(toParseError, loc);
              let i2 = stack.length - 2, scope = stack[i2];
              for (; scope.canBeArrowParameterDeclaration(); ) scope.clearDeclarationError(loc.index), scope = stack[--i2];
            });
          }
        }
        function newExpressionScope() {
          return new ExpressionScope();
        }
        class ProductionParameterHandler {
          constructor() {
            this.stacks = [];
          }
          enter(flags) {
            this.stacks.push(flags);
          }
          exit() {
            this.stacks.pop();
          }
          currentFlags() {
            return this.stacks[this.stacks.length - 1];
          }
          get hasAwait() {
            return (2 & this.currentFlags()) > 0;
          }
          get hasYield() {
            return (1 & this.currentFlags()) > 0;
          }
          get hasReturn() {
            return (4 & this.currentFlags()) > 0;
          }
          get hasIn() {
            return (8 & this.currentFlags()) > 0;
          }
        }
        function functionFlags(isAsync, isGenerator2) {
          return (isAsync ? 2 : 0) | (isGenerator2 ? 1 : 0);
        }
        class UtilParser extends Tokenizer {
          addExtra(node, key, value2, enumerable = true) {
            if (!node) return;
            let { extra } = node;
            null == extra && (extra = {}, node.extra = extra), enumerable ? extra[key] = value2 : Object.defineProperty(extra, key, { enumerable, value: value2 });
          }
          isContextual(token) {
            return this.state.type === token && !this.state.containsEsc;
          }
          isUnparsedContextual(nameStart, name) {
            const nameEnd = nameStart + name.length;
            if (this.input.slice(nameStart, nameEnd) === name) {
              const nextCh = this.input.charCodeAt(nameEnd);
              return !(isIdentifierChar(nextCh) || 55296 == (64512 & nextCh));
            }
            return false;
          }
          isLookaheadContextual(name) {
            const next = this.nextTokenStart();
            return this.isUnparsedContextual(next, name);
          }
          eatContextual(token) {
            return !!this.isContextual(token) && (this.next(), true);
          }
          expectContextual(token, toParseError) {
            if (!this.eatContextual(token)) {
              if (null != toParseError) throw this.raise(toParseError, this.state.startLoc);
              this.unexpected(null, token);
            }
          }
          canInsertSemicolon() {
            return this.match(140) || this.match(8) || this.hasPrecedingLineBreak();
          }
          hasPrecedingLineBreak() {
            return hasNewLine(this.input, this.offsetToSourcePos(this.state.lastTokEndLoc.index), this.state.start);
          }
          hasFollowingLineBreak() {
            return hasNewLine(this.input, this.state.end, this.nextTokenStart());
          }
          isLineTerminator() {
            return this.eat(13) || this.canInsertSemicolon();
          }
          semicolon(allowAsi = true) {
            (allowAsi ? this.isLineTerminator() : this.eat(13)) || this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);
          }
          expect(type, loc) {
            this.eat(type) || this.unexpected(loc, type);
          }
          tryParse(fn, oldState = this.state.clone()) {
            const abortSignal = { node: null };
            try {
              const node = fn((node2 = null) => {
                throw abortSignal.node = node2, abortSignal;
              });
              if (this.state.errors.length > oldState.errors.length) {
                const failState = this.state;
                return this.state = oldState, this.state.tokensLength = failState.tokensLength, { node, error: failState.errors[oldState.errors.length], thrown: false, aborted: false, failState };
              }
              return { node, error: null, thrown: false, aborted: false, failState: null };
            } catch (error) {
              const failState = this.state;
              if (this.state = oldState, error instanceof SyntaxError) return { node: null, error, thrown: true, aborted: false, failState };
              if (error === abortSignal) return { node: abortSignal.node, error: null, thrown: false, aborted: true, failState };
              throw error;
            }
          }
          checkExpressionErrors(refExpressionErrors, andThrow) {
            if (!refExpressionErrors) return false;
            const { shorthandAssignLoc, doubleProtoLoc, privateKeyLoc, optionalParametersLoc } = refExpressionErrors;
            if (!andThrow) return !!(shorthandAssignLoc || doubleProtoLoc || optionalParametersLoc || privateKeyLoc);
            null != shorthandAssignLoc && this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc), null != doubleProtoLoc && this.raise(Errors.DuplicateProto, doubleProtoLoc), null != privateKeyLoc && this.raise(Errors.UnexpectedPrivateField, privateKeyLoc), null != optionalParametersLoc && this.unexpected(optionalParametersLoc);
          }
          isLiteralPropertyName() {
            return tokenIsLiteralPropertyName(this.state.type);
          }
          isPrivateName(node) {
            return "PrivateName" === node.type;
          }
          getPrivateNameSV(node) {
            return node.id.name;
          }
          hasPropertyAsPrivateName(node) {
            return ("MemberExpression" === node.type || "OptionalMemberExpression" === node.type) && this.isPrivateName(node.property);
          }
          isObjectProperty(node) {
            return "ObjectProperty" === node.type;
          }
          isObjectMethod(node) {
            return "ObjectMethod" === node.type;
          }
          initializeScopes(inModule = "module" === this.options.sourceType) {
            const oldLabels = this.state.labels;
            this.state.labels = [];
            const oldExportedIdentifiers = this.exportedIdentifiers;
            this.exportedIdentifiers = /* @__PURE__ */ new Set();
            const oldInModule = this.inModule;
            this.inModule = inModule;
            const oldScope = this.scope, ScopeHandler2 = this.getScopeHandler();
            this.scope = new ScopeHandler2(this, inModule);
            const oldProdParam = this.prodParam;
            this.prodParam = new ProductionParameterHandler();
            const oldClassScope = this.classScope;
            this.classScope = new ClassScopeHandler(this);
            const oldExpressionScope = this.expressionScope;
            return this.expressionScope = new ExpressionScopeHandler(this), () => {
              this.state.labels = oldLabels, this.exportedIdentifiers = oldExportedIdentifiers, this.inModule = oldInModule, this.scope = oldScope, this.prodParam = oldProdParam, this.classScope = oldClassScope, this.expressionScope = oldExpressionScope;
            };
          }
          enterInitialScopes() {
            let paramFlags = 0;
            this.inModule && (paramFlags |= 2), this.scope.enter(1), this.prodParam.enter(paramFlags);
          }
          checkDestructuringPrivate(refExpressionErrors) {
            const { privateKeyLoc } = refExpressionErrors;
            null !== privateKeyLoc && this.expectPlugin("destructuringPrivate", privateKeyLoc);
          }
        }
        class ExpressionErrors {
          constructor() {
            this.shorthandAssignLoc = null, this.doubleProtoLoc = null, this.privateKeyLoc = null, this.optionalParametersLoc = null;
          }
        }
        class Node3 {
          constructor(parser, pos, loc) {
            this.type = "", this.start = pos, this.end = 0, this.loc = new SourceLocation(loc), null != parser && parser.options.ranges && (this.range = [pos, 0]), null != parser && parser.filename && (this.loc.filename = parser.filename);
          }
        }
        const NodePrototype = Node3.prototype;
        function cloneIdentifier(node) {
          const { type, start, end, loc, range, extra, name } = node, cloned = Object.create(NodePrototype);
          return cloned.type = type, cloned.start = start, cloned.end = end, cloned.loc = loc, cloned.range = range, cloned.extra = extra, cloned.name = name, "Placeholder" === type && (cloned.expectedNode = node.expectedNode), cloned;
        }
        function cloneStringLiteral(node) {
          const { type, start, end, loc, range, extra } = node;
          if ("Placeholder" === type) return function(node2) {
            return cloneIdentifier(node2);
          }(node);
          const cloned = Object.create(NodePrototype);
          return cloned.type = type, cloned.start = start, cloned.end = end, cloned.loc = loc, cloned.range = range, void 0 !== node.raw ? cloned.raw = node.raw : cloned.extra = extra, cloned.value = node.value, cloned;
        }
        NodePrototype.__clone = function() {
          const newNode = new Node3(void 0, this.start, this.loc.start), keys = Object.keys(this);
          for (let i2 = 0, length = keys.length; i2 < length; i2++) {
            const key = keys[i2];
            "leadingComments" !== key && "trailingComments" !== key && "innerComments" !== key && (newNode[key] = this[key]);
          }
          return newNode;
        };
        class NodeUtils extends UtilParser {
          startNode() {
            const loc = this.state.startLoc;
            return new Node3(this, loc.index, loc);
          }
          startNodeAt(loc) {
            return new Node3(this, loc.index, loc);
          }
          startNodeAtNode(type) {
            return this.startNodeAt(type.loc.start);
          }
          finishNode(node, type) {
            return this.finishNodeAt(node, type, this.state.lastTokEndLoc);
          }
          finishNodeAt(node, type, endLoc) {
            return node.type = type, node.end = endLoc.index, node.loc.end = endLoc, this.options.ranges && (node.range[1] = endLoc.index), this.options.attachComment && this.processComment(node), node;
          }
          resetStartLocation(node, startLoc) {
            node.start = startLoc.index, node.loc.start = startLoc, this.options.ranges && (node.range[0] = startLoc.index);
          }
          resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
            node.end = endLoc.index, node.loc.end = endLoc, this.options.ranges && (node.range[1] = endLoc.index);
          }
          resetStartLocationFromNode(node, locationNode) {
            this.resetStartLocation(node, locationNode.loc.start);
          }
        }
        const reservedTypes = /* @__PURE__ */ new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]), FlowErrors = ParseErrorEnum`flow`({ AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.", AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.", AssignReservedType: ({ reservedType }) => `Cannot overwrite reserved type ${reservedType}.`, DeclareClassElement: "The `declare` modifier can only appear on class fields.", DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.", DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.", EnumBooleanMemberNotInitialized: ({ memberName, enumName }) => `Boolean enum members need to be initialized. Use either \`${memberName} = true,\` or \`${memberName} = false,\` in enum \`${enumName}\`.`, EnumDuplicateMemberName: ({ memberName, enumName }) => `Enum member names need to be unique, but the name \`${memberName}\` has already been used before in enum \`${enumName}\`.`, EnumInconsistentMemberValues: ({ enumName }) => `Enum \`${enumName}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`, EnumInvalidExplicitType: ({ invalidEnumType, enumName }) => `Enum type \`${invalidEnumType}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`, EnumInvalidExplicitTypeUnknownSupplied: ({ enumName }) => `Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`, EnumInvalidMemberInitializerPrimaryType: ({ enumName, memberName, explicitType }) => `Enum \`${enumName}\` has type \`${explicitType}\`, so the initializer of \`${memberName}\` needs to be a ${explicitType} literal.`, EnumInvalidMemberInitializerSymbolType: ({ enumName, memberName }) => `Symbol enum members cannot be initialized. Use \`${memberName},\` in enum \`${enumName}\`.`, EnumInvalidMemberInitializerUnknownType: ({ enumName, memberName }) => `The enum member initializer for \`${memberName}\` needs to be a literal (either a boolean, number, or string) in enum \`${enumName}\`.`, EnumInvalidMemberName: ({ enumName, memberName, suggestion }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${memberName}\`, consider using \`${suggestion}\`, in enum \`${enumName}\`.`, EnumNumberMemberNotInitialized: ({ enumName, memberName }) => `Number enum members need to be initialized, e.g. \`${memberName} = 1\` in enum \`${enumName}\`.`, EnumStringMemberInconsistentlyInitialized: ({ enumName }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \`${enumName}\`.`, GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.", ImportReflectionHasImportType: "An `import module` declaration can not use `type` or `typeof` keyword.", ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.", InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.", InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.", InexactVariance: "Explicit inexact syntax cannot have variance.", InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.", MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.", NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.", NestedFlowComment: "Cannot have a flow comment inside another flow comment.", PatternIsOptional: Object.assign({ message: "A binding pattern parameter cannot be optional in an implementation signature." }, { reasonCode: "OptionalBindingPattern" }), SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.", SpreadVariance: "Spread properties cannot have variance.", ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.", ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.", ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.", ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.", ThisParamNoDefault: "The `this` parameter may not have a default value.", TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.", TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.", UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.", UnexpectedReservedType: ({ reservedType }) => `Unexpected reserved type ${reservedType}.`, UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.", UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.", UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.", UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".', UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.", UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.", UnsupportedDeclareExportKind: ({ unsupportedExportKind, suggestion }) => `\`declare export ${unsupportedExportKind}\` is not supported. Use \`${suggestion}\` instead.`, UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.", UnterminatedFlowComment: "Unterminated flow-comment." });
        function hasTypeImportKind(node) {
          return "type" === node.importKind || "typeof" === node.importKind;
        }
        const exportSuggestions = { const: "declare export var", let: "declare export var", type: "export type", interface: "export interface" };
        const FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;
        const entities = { __proto__: null, quot: '"', amp: "&", apos: "'", lt: "<", gt: ">", nbsp: "\xA0", iexcl: "\xA1", cent: "\xA2", pound: "\xA3", curren: "\xA4", yen: "\xA5", brvbar: "\xA6", sect: "\xA7", uml: "\xA8", copy: "\xA9", ordf: "\xAA", laquo: "\xAB", not: "\xAC", shy: "\xAD", reg: "\xAE", macr: "\xAF", deg: "\xB0", plusmn: "\xB1", sup2: "\xB2", sup3: "\xB3", acute: "\xB4", micro: "\xB5", para: "\xB6", middot: "\xB7", cedil: "\xB8", sup1: "\xB9", ordm: "\xBA", raquo: "\xBB", frac14: "\xBC", frac12: "\xBD", frac34: "\xBE", iquest: "\xBF", Agrave: "\xC0", Aacute: "\xC1", Acirc: "\xC2", Atilde: "\xC3", Auml: "\xC4", Aring: "\xC5", AElig: "\xC6", Ccedil: "\xC7", Egrave: "\xC8", Eacute: "\xC9", Ecirc: "\xCA", Euml: "\xCB", Igrave: "\xCC", Iacute: "\xCD", Icirc: "\xCE", Iuml: "\xCF", ETH: "\xD0", Ntilde: "\xD1", Ograve: "\xD2", Oacute: "\xD3", Ocirc: "\xD4", Otilde: "\xD5", Ouml: "\xD6", times: "\xD7", Oslash: "\xD8", Ugrave: "\xD9", Uacute: "\xDA", Ucirc: "\xDB", Uuml: "\xDC", Yacute: "\xDD", THORN: "\xDE", szlig: "\xDF", agrave: "\xE0", aacute: "\xE1", acirc: "\xE2", atilde: "\xE3", auml: "\xE4", aring: "\xE5", aelig: "\xE6", ccedil: "\xE7", egrave: "\xE8", eacute: "\xE9", ecirc: "\xEA", euml: "\xEB", igrave: "\xEC", iacute: "\xED", icirc: "\xEE", iuml: "\xEF", eth: "\xF0", ntilde: "\xF1", ograve: "\xF2", oacute: "\xF3", ocirc: "\xF4", otilde: "\xF5", ouml: "\xF6", divide: "\xF7", oslash: "\xF8", ugrave: "\xF9", uacute: "\xFA", ucirc: "\xFB", uuml: "\xFC", yacute: "\xFD", thorn: "\xFE", yuml: "\xFF", OElig: "\u0152", oelig: "\u0153", Scaron: "\u0160", scaron: "\u0161", Yuml: "\u0178", fnof: "\u0192", circ: "\u02C6", tilde: "\u02DC", Alpha: "\u0391", Beta: "\u0392", Gamma: "\u0393", Delta: "\u0394", Epsilon: "\u0395", Zeta: "\u0396", Eta: "\u0397", Theta: "\u0398", Iota: "\u0399", Kappa: "\u039A", Lambda: "\u039B", Mu: "\u039C", Nu: "\u039D", Xi: "\u039E", Omicron: "\u039F", Pi: "\u03A0", Rho: "\u03A1", Sigma: "\u03A3", Tau: "\u03A4", Upsilon: "\u03A5", Phi: "\u03A6", Chi: "\u03A7", Psi: "\u03A8", Omega: "\u03A9", alpha: "\u03B1", beta: "\u03B2", gamma: "\u03B3", delta: "\u03B4", epsilon: "\u03B5", zeta: "\u03B6", eta: "\u03B7", theta: "\u03B8", iota: "\u03B9", kappa: "\u03BA", lambda: "\u03BB", mu: "\u03BC", nu: "\u03BD", xi: "\u03BE", omicron: "\u03BF", pi: "\u03C0", rho: "\u03C1", sigmaf: "\u03C2", sigma: "\u03C3", tau: "\u03C4", upsilon: "\u03C5", phi: "\u03C6", chi: "\u03C7", psi: "\u03C8", omega: "\u03C9", thetasym: "\u03D1", upsih: "\u03D2", piv: "\u03D6", ensp: "\u2002", emsp: "\u2003", thinsp: "\u2009", zwnj: "\u200C", zwj: "\u200D", lrm: "\u200E", rlm: "\u200F", ndash: "\u2013", mdash: "\u2014", lsquo: "\u2018", rsquo: "\u2019", sbquo: "\u201A", ldquo: "\u201C", rdquo: "\u201D", bdquo: "\u201E", dagger: "\u2020", Dagger: "\u2021", bull: "\u2022", hellip: "\u2026", permil: "\u2030", prime: "\u2032", Prime: "\u2033", lsaquo: "\u2039", rsaquo: "\u203A", oline: "\u203E", frasl: "\u2044", euro: "\u20AC", image: "\u2111", weierp: "\u2118", real: "\u211C", trade: "\u2122", alefsym: "\u2135", larr: "\u2190", uarr: "\u2191", rarr: "\u2192", darr: "\u2193", harr: "\u2194", crarr: "\u21B5", lArr: "\u21D0", uArr: "\u21D1", rArr: "\u21D2", dArr: "\u21D3", hArr: "\u21D4", forall: "\u2200", part: "\u2202", exist: "\u2203", empty: "\u2205", nabla: "\u2207", isin: "\u2208", notin: "\u2209", ni: "\u220B", prod: "\u220F", sum: "\u2211", minus: "\u2212", lowast: "\u2217", radic: "\u221A", prop: "\u221D", infin: "\u221E", ang: "\u2220", and: "\u2227", or: "\u2228", cap: "\u2229", cup: "\u222A", int: "\u222B", there4: "\u2234", sim: "\u223C", cong: "\u2245", asymp: "\u2248", ne: "\u2260", equiv: "\u2261", le: "\u2264", ge: "\u2265", sub: "\u2282", sup: "\u2283", nsub: "\u2284", sube: "\u2286", supe: "\u2287", oplus: "\u2295", otimes: "\u2297", perp: "\u22A5", sdot: "\u22C5", lceil: "\u2308", rceil: "\u2309", lfloor: "\u230A", rfloor: "\u230B", lang: "\u2329", rang: "\u232A", loz: "\u25CA", spades: "\u2660", clubs: "\u2663", hearts: "\u2665", diams: "\u2666" }, JsxErrors = ParseErrorEnum`jsx`({ AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.", MissingClosingTagElement: ({ openingTagName }) => `Expected corresponding JSX closing tag for <${openingTagName}>.`, MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.", UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?", UnexpectedToken: ({ unexpected, HTMLEntity }) => `Unexpected token \`${unexpected}\`. Did you mean \`${HTMLEntity}\` or \`{'${unexpected}'}\`?`, UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.", UnterminatedJsxContent: "Unterminated JSX contents.", UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?" });
        function isFragment(object) {
          return !!object && ("JSXOpeningFragment" === object.type || "JSXClosingFragment" === object.type);
        }
        function getQualifiedJSXName(object) {
          if ("JSXIdentifier" === object.type) return object.name;
          if ("JSXNamespacedName" === object.type) return object.namespace.name + ":" + object.name.name;
          if ("JSXMemberExpression" === object.type) return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
          throw new Error("Node had unexpected type: " + object.type);
        }
        class TypeScriptScope extends Scope {
          constructor(...args) {
            super(...args), this.tsNames = /* @__PURE__ */ new Map();
          }
        }
        class TypeScriptScopeHandler extends ScopeHandler {
          constructor(...args) {
            super(...args), this.importsStack = [];
          }
          createScope(flags) {
            return this.importsStack.push(/* @__PURE__ */ new Set()), new TypeScriptScope(flags);
          }
          enter(flags) {
            256 === flags && this.importsStack.push(/* @__PURE__ */ new Set()), super.enter(flags);
          }
          exit() {
            const flags = super.exit();
            return 256 === flags && this.importsStack.pop(), flags;
          }
          hasImport(name, allowShadow) {
            const len = this.importsStack.length;
            if (this.importsStack[len - 1].has(name)) return true;
            if (!allowShadow && len > 1) {
              for (let i2 = 0; i2 < len - 1; i2++) if (this.importsStack[i2].has(name)) return true;
            }
            return false;
          }
          declareName(name, bindingType, loc) {
            if (4096 & bindingType) return this.hasImport(name, true) && this.parser.raise(Errors.VarRedeclaration, loc, { identifierName: name }), void this.importsStack[this.importsStack.length - 1].add(name);
            const scope = this.currentScope();
            let type = scope.tsNames.get(name) || 0;
            if (1024 & bindingType) return this.maybeExportDefined(scope, name), void scope.tsNames.set(name, 16 | type);
            super.declareName(name, bindingType, loc), 2 & bindingType && (1 & bindingType || (this.checkRedeclarationInScope(scope, name, bindingType, loc), this.maybeExportDefined(scope, name)), type |= 1), 256 & bindingType && (type |= 2), 512 & bindingType && (type |= 4), 128 & bindingType && (type |= 8), type && scope.tsNames.set(name, type);
          }
          isRedeclaredInScope(scope, name, bindingType) {
            const type = scope.tsNames.get(name);
            if ((2 & type) > 0) {
              if (256 & bindingType) {
                return !!(512 & bindingType) !== (4 & type) > 0;
              }
              return true;
            }
            return 128 & bindingType && (8 & type) > 0 ? !!(2 & scope.names.get(name)) && !!(1 & bindingType) : !!(2 & bindingType && (1 & type) > 0) || super.isRedeclaredInScope(scope, name, bindingType);
          }
          checkLocalExport(id) {
            const { name } = id;
            if (this.hasImport(name)) return;
            for (let i2 = this.scopeStack.length - 1; i2 >= 0; i2--) {
              const type = this.scopeStack[i2].tsNames.get(name);
              if ((1 & type) > 0 || (16 & type) > 0) return;
            }
            super.checkLocalExport(id);
          }
        }
        const unwrapParenthesizedExpression = (node) => "ParenthesizedExpression" === node.type ? unwrapParenthesizedExpression(node.expression) : node;
        class LValParser extends NodeUtils {
          toAssignable(node, isLHS = false) {
            var _node$extra, _node$extra3;
            let parenthesized;
            switch (("ParenthesizedExpression" === node.type || null != (_node$extra = node.extra) && _node$extra.parenthesized) && (parenthesized = unwrapParenthesizedExpression(node), isLHS ? "Identifier" === parenthesized.type ? this.expressionScope.recordArrowParameterBindingError(Errors.InvalidParenthesizedAssignment, node) : "MemberExpression" === parenthesized.type || this.isOptionalMemberExpression(parenthesized) || this.raise(Errors.InvalidParenthesizedAssignment, node) : this.raise(Errors.InvalidParenthesizedAssignment, node)), node.type) {
              case "Identifier":
              case "ObjectPattern":
              case "ArrayPattern":
              case "AssignmentPattern":
              case "RestElement":
                break;
              case "ObjectExpression":
                node.type = "ObjectPattern";
                for (let i2 = 0, length = node.properties.length, last = length - 1; i2 < length; i2++) {
                  var _node$extra2;
                  const prop = node.properties[i2], isLast = i2 === last;
                  this.toAssignableObjectExpressionProp(prop, isLast, isLHS), isLast && "RestElement" === prop.type && null != (_node$extra2 = node.extra) && _node$extra2.trailingCommaLoc && this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);
                }
                break;
              case "ObjectProperty": {
                const { key, value: value2 } = node;
                this.isPrivateName(key) && this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start), this.toAssignable(value2, isLHS);
                break;
              }
              case "SpreadElement":
                throw new Error("Internal @babel/parser error (this is a bug, please report it). SpreadElement should be converted by .toAssignable's caller.");
              case "ArrayExpression":
                node.type = "ArrayPattern", this.toAssignableList(node.elements, null == (_node$extra3 = node.extra) ? void 0 : _node$extra3.trailingCommaLoc, isLHS);
                break;
              case "AssignmentExpression":
                "=" !== node.operator && this.raise(Errors.MissingEqInAssignment, node.left.loc.end), node.type = "AssignmentPattern", delete node.operator, this.toAssignable(node.left, isLHS);
                break;
              case "ParenthesizedExpression":
                this.toAssignable(parenthesized, isLHS);
            }
          }
          toAssignableObjectExpressionProp(prop, isLast, isLHS) {
            if ("ObjectMethod" === prop.type) this.raise("get" === prop.kind || "set" === prop.kind ? Errors.PatternHasAccessor : Errors.PatternHasMethod, prop.key);
            else if ("SpreadElement" === prop.type) {
              prop.type = "RestElement";
              const arg = prop.argument;
              this.checkToRestConversion(arg, false), this.toAssignable(arg, isLHS), isLast || this.raise(Errors.RestTrailingComma, prop);
            } else this.toAssignable(prop, isLHS);
          }
          toAssignableList(exprList, trailingCommaLoc, isLHS) {
            const end = exprList.length - 1;
            for (let i2 = 0; i2 <= end; i2++) {
              const elt = exprList[i2];
              if (elt) {
                if ("SpreadElement" === elt.type) {
                  elt.type = "RestElement";
                  const arg = elt.argument;
                  this.checkToRestConversion(arg, true), this.toAssignable(arg, isLHS);
                } else this.toAssignable(elt, isLHS);
                "RestElement" === elt.type && (i2 < end ? this.raise(Errors.RestTrailingComma, elt) : trailingCommaLoc && this.raise(Errors.RestTrailingComma, trailingCommaLoc));
              }
            }
          }
          isAssignable(node, isBinding) {
            switch (node.type) {
              case "Identifier":
              case "ObjectPattern":
              case "ArrayPattern":
              case "AssignmentPattern":
              case "RestElement":
                return true;
              case "ObjectExpression": {
                const last = node.properties.length - 1;
                return node.properties.every((prop, i2) => "ObjectMethod" !== prop.type && (i2 === last || "SpreadElement" !== prop.type) && this.isAssignable(prop));
              }
              case "ObjectProperty":
                return this.isAssignable(node.value);
              case "SpreadElement":
                return this.isAssignable(node.argument);
              case "ArrayExpression":
                return node.elements.every((element) => null === element || this.isAssignable(element));
              case "AssignmentExpression":
                return "=" === node.operator;
              case "ParenthesizedExpression":
                return this.isAssignable(node.expression);
              case "MemberExpression":
              case "OptionalMemberExpression":
                return !isBinding;
              default:
                return false;
            }
          }
          toReferencedList(exprList, isParenthesizedExpr) {
            return exprList;
          }
          toReferencedListDeep(exprList, isParenthesizedExpr) {
            this.toReferencedList(exprList, isParenthesizedExpr);
            for (const expr of exprList) "ArrayExpression" === (null == expr ? void 0 : expr.type) && this.toReferencedListDeep(expr.elements);
          }
          parseSpread(refExpressionErrors) {
            const node = this.startNode();
            return this.next(), node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, void 0), this.finishNode(node, "SpreadElement");
          }
          parseRestBinding() {
            const node = this.startNode();
            return this.next(), node.argument = this.parseBindingAtom(), this.finishNode(node, "RestElement");
          }
          parseBindingAtom() {
            switch (this.state.type) {
              case 0: {
                const node = this.startNode();
                return this.next(), node.elements = this.parseBindingList(3, 93, 1), this.finishNode(node, "ArrayPattern");
              }
              case 5:
                return this.parseObjectLike(8, true);
            }
            return this.parseIdentifier();
          }
          parseBindingList(close, closeCharCode, flags) {
            const allowEmpty = 1 & flags, elts = [];
            let first = true;
            for (; !this.eat(close); ) if (first ? first = false : this.expect(12), allowEmpty && this.match(12)) elts.push(null);
            else {
              if (this.eat(close)) break;
              if (this.match(21)) {
                let rest = this.parseRestBinding();
                if ((this.hasPlugin("flow") || 2 & flags) && (rest = this.parseFunctionParamType(rest)), elts.push(rest), !this.checkCommaAfterRest(closeCharCode)) {
                  this.expect(close);
                  break;
                }
              } else {
                const decorators = [];
                for (this.match(26) && this.hasPlugin("decorators") && this.raise(Errors.UnsupportedParameterDecorator, this.state.startLoc); this.match(26); ) decorators.push(this.parseDecorator());
                elts.push(this.parseAssignableListItem(flags, decorators));
              }
            }
            return elts;
          }
          parseBindingRestProperty(prop) {
            return this.next(), prop.argument = this.parseIdentifier(), this.checkCommaAfterRest(125), this.finishNode(prop, "RestElement");
          }
          parseBindingProperty() {
            const { type, startLoc } = this.state;
            if (21 === type) return this.parseBindingRestProperty(this.startNode());
            const prop = this.startNode();
            return 139 === type ? (this.expectPlugin("destructuringPrivate", startLoc), this.classScope.usePrivateName(this.state.value, startLoc), prop.key = this.parsePrivateName()) : this.parsePropertyName(prop), prop.method = false, this.parseObjPropValue(prop, startLoc, false, false, true, false);
          }
          parseAssignableListItem(flags, decorators) {
            const left = this.parseMaybeDefault();
            (this.hasPlugin("flow") || 2 & flags) && this.parseFunctionParamType(left);
            const elt = this.parseMaybeDefault(left.loc.start, left);
            return decorators.length && (left.decorators = decorators), elt;
          }
          parseFunctionParamType(param) {
            return param;
          }
          parseMaybeDefault(startLoc, left) {
            var _left;
            if (null != startLoc || (startLoc = this.state.startLoc), left = null != (_left = left) ? _left : this.parseBindingAtom(), !this.eat(29)) return left;
            const node = this.startNodeAt(startLoc);
            return node.left = left, node.right = this.parseMaybeAssignAllowIn(), this.finishNode(node, "AssignmentPattern");
          }
          isValidLVal(type, isUnparenthesizedInAssign, binding) {
            switch (type) {
              case "AssignmentPattern":
                return "left";
              case "RestElement":
                return "argument";
              case "ObjectProperty":
                return "value";
              case "ParenthesizedExpression":
                return "expression";
              case "ArrayPattern":
                return "elements";
              case "ObjectPattern":
                return "properties";
            }
            return false;
          }
          isOptionalMemberExpression(expression) {
            return "OptionalMemberExpression" === expression.type;
          }
          checkLVal(expression, ancestor, binding = 64, checkClashes = false, strictModeChanged = false, hasParenthesizedAncestor = false) {
            var _expression$extra;
            const type = expression.type;
            if (this.isObjectMethod(expression)) return;
            const isOptionalMemberExpression = this.isOptionalMemberExpression(expression);
            if (isOptionalMemberExpression || "MemberExpression" === type) return isOptionalMemberExpression && (this.expectPlugin("optionalChainingAssign", expression.loc.start), "AssignmentExpression" !== ancestor.type && this.raise(Errors.InvalidLhsOptionalChaining, expression, { ancestor })), void (64 !== binding && this.raise(Errors.InvalidPropertyBindingPattern, expression));
            if ("Identifier" === type) {
              this.checkIdentifier(expression, binding, strictModeChanged);
              const { name } = expression;
              return void (checkClashes && (checkClashes.has(name) ? this.raise(Errors.ParamDupe, expression) : checkClashes.add(name)));
            }
            const validity = this.isValidLVal(type, !(hasParenthesizedAncestor || null != (_expression$extra = expression.extra) && _expression$extra.parenthesized) && "AssignmentExpression" === ancestor.type, binding);
            if (true === validity) return;
            if (false === validity) {
              const ParseErrorClass = 64 === binding ? Errors.InvalidLhs : Errors.InvalidLhsBinding;
              return void this.raise(ParseErrorClass, expression, { ancestor });
            }
            let key, isParenthesizedExpression;
            "string" == typeof validity ? (key = validity, isParenthesizedExpression = "ParenthesizedExpression" === type) : [key, isParenthesizedExpression] = validity;
            const nextAncestor = "ArrayPattern" === type || "ObjectPattern" === type ? { type } : ancestor, val = expression[key];
            if (Array.isArray(val)) for (const child of val) child && this.checkLVal(child, nextAncestor, binding, checkClashes, strictModeChanged, isParenthesizedExpression);
            else val && this.checkLVal(val, nextAncestor, binding, checkClashes, strictModeChanged, isParenthesizedExpression);
          }
          checkIdentifier(at, bindingType, strictModeChanged = false) {
            this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name)) && (64 === bindingType ? this.raise(Errors.StrictEvalArguments, at, { referenceName: at.name }) : this.raise(Errors.StrictEvalArgumentsBinding, at, { bindingName: at.name })), 8192 & bindingType && "let" === at.name && this.raise(Errors.LetInLexicalBinding, at), 64 & bindingType || this.declareNameFromIdentifier(at, bindingType);
          }
          declareNameFromIdentifier(identifier, binding) {
            this.scope.declareName(identifier.name, binding, identifier.loc.start);
          }
          checkToRestConversion(node, allowPattern) {
            switch (node.type) {
              case "ParenthesizedExpression":
                this.checkToRestConversion(node.expression, allowPattern);
                break;
              case "Identifier":
              case "MemberExpression":
                break;
              case "ArrayExpression":
              case "ObjectExpression":
                if (allowPattern) break;
              default:
                this.raise(Errors.InvalidRestAssignmentPattern, node);
            }
          }
          checkCommaAfterRest(close) {
            return !!this.match(12) && (this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, this.state.startLoc), true);
          }
        }
        function assert(x) {
          if (!x) throw new Error("Assert fail");
        }
        const TSErrors = ParseErrorEnum`typescript`({ AbstractMethodHasImplementation: ({ methodName }) => `Method '${methodName}' cannot have an implementation because it is marked abstract.`, AbstractPropertyHasInitializer: ({ propertyName }) => `Property '${propertyName}' cannot have an initializer because it is marked abstract.`, AccessorCannotBeOptional: "An 'accessor' property cannot be declared optional.", AccessorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.", AccessorCannotHaveTypeParameters: "An accessor cannot have type parameters.", ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.", ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.", ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference: "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.", ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.", DeclareAccessor: ({ kind }) => `'declare' is not allowed in ${kind}ters.`, DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.", DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.", DuplicateAccessibilityModifier: ({ modifier }) => "Accessibility modifier already seen.", DuplicateModifier: ({ modifier }) => `Duplicate modifier: '${modifier}'.`, EmptyHeritageClauseType: ({ token }) => `'${token}' list cannot be empty.`, EmptyTypeArguments: "Type argument list cannot be empty.", EmptyTypeParameters: "Type parameter list cannot be empty.", ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.", ImportAliasHasImportType: "An import alias can not use 'import type'.", ImportReflectionHasImportType: "An `import module` declaration can not use `type` modifier", IncompatibleModifiers: ({ modifiers }) => `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`, IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.", IndexSignatureHasAccessibility: ({ modifier }) => `Index signatures cannot have an accessibility modifier ('${modifier}').`, IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.", IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.", IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.", InitializerNotAllowedInAmbientContext: "Initializers are not allowed in ambient contexts.", InvalidModifierOnTypeMember: ({ modifier }) => `'${modifier}' modifier cannot appear on a type member.`, InvalidModifierOnTypeParameter: ({ modifier }) => `'${modifier}' modifier cannot appear on a type parameter.`, InvalidModifierOnTypeParameterPositions: ({ modifier }) => `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`, InvalidModifiersOrder: ({ orderedModifiers }) => `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`, InvalidPropertyAccessAfterInstantiationExpression: "Invalid property access after an instantiation expression. You can either wrap the instantiation expression in parentheses, or delete the type arguments.", InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.", MissingInterfaceName: "'interface' declarations must be followed by an identifier.", NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.", NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.", OptionalTypeBeforeRequired: "A required element cannot follow an optional element.", OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.", PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.", PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.", PrivateElementHasAccessibility: ({ modifier }) => `Private elements cannot have an accessibility modifier ('${modifier}').`, ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.", ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.", ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.", SetAccessorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.", SetAccessorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.", SetAccessorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.", SingleTypeParameterWithoutTrailingComma: ({ typeParameterName }) => `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`, StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.", TupleOptionalAfterType: "A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).", TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.", TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.", TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.", TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.", UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.", UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.", UnexpectedTypeAnnotation: "Did not expect a type annotation here.", UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.", UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.", UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.", UnsupportedSignatureParameterKind: ({ type }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.` });
        function tsIsAccessModifier(modifier) {
          return "private" === modifier || "public" === modifier || "protected" === modifier;
        }
        function tsIsVarianceAnnotations(modifier) {
          return "in" === modifier || "out" === modifier;
        }
        function isPossiblyLiteralEnum(expression) {
          if ("MemberExpression" !== expression.type) return false;
          const { computed, property } = expression;
          return (!computed || "StringLiteral" === property.type || !("TemplateLiteral" !== property.type || property.expressions.length > 0)) && isUncomputedMemberExpressionChain(expression.object);
        }
        function isValidAmbientConstInitializer(expression, estree) {
          var _expression$extra;
          const { type } = expression;
          if (null != (_expression$extra = expression.extra) && _expression$extra.parenthesized) return false;
          if (estree) {
            if ("Literal" === type) {
              const { value: value2 } = expression;
              if ("string" == typeof value2 || "boolean" == typeof value2) return true;
            }
          } else if ("StringLiteral" === type || "BooleanLiteral" === type) return true;
          return !(!isNumber(expression, estree) && !function(expression2, estree2) {
            if ("UnaryExpression" === expression2.type) {
              const { operator, argument } = expression2;
              if ("-" === operator && isNumber(argument, estree2)) return true;
            }
            return false;
          }(expression, estree)) || ("TemplateLiteral" === type && 0 === expression.expressions.length || !!isPossiblyLiteralEnum(expression));
        }
        function isNumber(expression, estree) {
          return estree ? "Literal" === expression.type && ("number" == typeof expression.value || "bigint" in expression) : "NumericLiteral" === expression.type || "BigIntLiteral" === expression.type;
        }
        function isUncomputedMemberExpressionChain(expression) {
          return "Identifier" === expression.type || "MemberExpression" === expression.type && !expression.computed && isUncomputedMemberExpressionChain(expression.object);
        }
        const PlaceholderErrors = ParseErrorEnum`placeholders`({ ClassNameIsRequired: "A class name is required.", UnexpectedSpace: "Unexpected space in placeholder." });
        const PIPELINE_PROPOSALS = ["minimal", "fsharp", "hack", "smart"], TOPIC_TOKENS = ["^^", "@@", "^", "%", "#"];
        const mixinPlugins = { estree: (superClass) => class extends superClass {
          parse() {
            const file = toESTreeLocation(super.parse());
            return this.options.tokens && (file.tokens = file.tokens.map(toESTreeLocation)), file;
          }
          parseRegExpLiteral({ pattern, flags }) {
            let regex = null;
            try {
              regex = new RegExp(pattern, flags);
            } catch (_2) {
            }
            const node = this.estreeParseLiteral(regex);
            return node.regex = { pattern, flags }, node;
          }
          parseBigIntLiteral(value2) {
            let bigInt;
            try {
              bigInt = BigInt(value2);
            } catch (_unused) {
              bigInt = null;
            }
            const node = this.estreeParseLiteral(bigInt);
            return node.bigint = String(node.value || value2), node;
          }
          parseDecimalLiteral(value2) {
            const node = this.estreeParseLiteral(null);
            return node.decimal = String(node.value || value2), node;
          }
          estreeParseLiteral(value2) {
            return this.parseLiteral(value2, "Literal");
          }
          parseStringLiteral(value2) {
            return this.estreeParseLiteral(value2);
          }
          parseNumericLiteral(value2) {
            return this.estreeParseLiteral(value2);
          }
          parseNullLiteral() {
            return this.estreeParseLiteral(null);
          }
          parseBooleanLiteral(value2) {
            return this.estreeParseLiteral(value2);
          }
          directiveToStmt(directive) {
            const expression = directive.value;
            delete directive.value, expression.type = "Literal", expression.raw = expression.extra.raw, expression.value = expression.extra.expressionValue;
            const stmt = directive;
            return stmt.type = "ExpressionStatement", stmt.expression = expression, stmt.directive = expression.extra.rawValue, delete expression.extra, stmt;
          }
          initFunction(node, isAsync) {
            super.initFunction(node, isAsync), node.expression = false;
          }
          checkDeclaration(node) {
            null != node && this.isObjectProperty(node) ? this.checkDeclaration(node.value) : super.checkDeclaration(node);
          }
          getObjectOrClassMethodParams(method) {
            return method.value.params;
          }
          isValidDirective(stmt) {
            var _stmt$expression$extr;
            return "ExpressionStatement" === stmt.type && "Literal" === stmt.expression.type && "string" == typeof stmt.expression.value && !(null != (_stmt$expression$extr = stmt.expression.extra) && _stmt$expression$extr.parenthesized);
          }
          parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
            super.parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse);
            const directiveStatements = node.directives.map((d2) => this.directiveToStmt(d2));
            node.body = directiveStatements.concat(node.body), delete node.directives;
          }
          pushClassMethod(classBody, method, isGenerator2, isAsync, isConstructor, allowsDirectSuper) {
            this.parseMethod(method, isGenerator2, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true), method.typeParameters && (method.value.typeParameters = method.typeParameters, delete method.typeParameters), classBody.body.push(method);
          }
          parsePrivateName() {
            const node = super.parsePrivateName();
            return this.getPluginOption("estree", "classFeatures") ? this.convertPrivateNameToPrivateIdentifier(node) : node;
          }
          convertPrivateNameToPrivateIdentifier(node) {
            const name = super.getPrivateNameSV(node);
            return delete node.id, node.name = name, node.type = "PrivateIdentifier", node;
          }
          isPrivateName(node) {
            return this.getPluginOption("estree", "classFeatures") ? "PrivateIdentifier" === node.type : super.isPrivateName(node);
          }
          getPrivateNameSV(node) {
            return this.getPluginOption("estree", "classFeatures") ? node.name : super.getPrivateNameSV(node);
          }
          parseLiteral(value2, type) {
            const node = super.parseLiteral(value2, type);
            return node.raw = node.extra.raw, delete node.extra, node;
          }
          parseFunctionBody(node, allowExpression, isMethod = false) {
            super.parseFunctionBody(node, allowExpression, isMethod), node.expression = "BlockStatement" !== node.body.type;
          }
          parseMethod(node, isGenerator2, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
            let funcNode = this.startNode();
            return funcNode.kind = node.kind, funcNode = super.parseMethod(funcNode, isGenerator2, isAsync, isConstructor, allowDirectSuper, type, inClassScope), funcNode.type = "FunctionExpression", delete funcNode.kind, node.value = funcNode, "ClassPrivateMethod" === type && (node.computed = false), this.finishNode(node, "MethodDefinition");
          }
          nameIsConstructor(key) {
            return "Literal" === key.type ? "constructor" === key.value : super.nameIsConstructor(key);
          }
          parseClassProperty(...args) {
            const propertyNode = super.parseClassProperty(...args);
            return this.getPluginOption("estree", "classFeatures") ? (propertyNode.type = "PropertyDefinition", propertyNode) : propertyNode;
          }
          parseClassPrivateProperty(...args) {
            const propertyNode = super.parseClassPrivateProperty(...args);
            return this.getPluginOption("estree", "classFeatures") ? (propertyNode.type = "PropertyDefinition", propertyNode.computed = false, propertyNode) : propertyNode;
          }
          parseObjectMethod(prop, isGenerator2, isAsync, isPattern, isAccessor) {
            const node = super.parseObjectMethod(prop, isGenerator2, isAsync, isPattern, isAccessor);
            return node && (node.type = "Property", "method" === node.kind && (node.kind = "init"), node.shorthand = false), node;
          }
          parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
            const node = super.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
            return node && (node.kind = "init", node.type = "Property"), node;
          }
          isValidLVal(type, isUnparenthesizedInAssign, binding) {
            return "Property" === type ? "value" : super.isValidLVal(type, isUnparenthesizedInAssign, binding);
          }
          isAssignable(node, isBinding) {
            return null != node && this.isObjectProperty(node) ? this.isAssignable(node.value, isBinding) : super.isAssignable(node, isBinding);
          }
          toAssignable(node, isLHS = false) {
            if (null != node && this.isObjectProperty(node)) {
              const { key, value: value2 } = node;
              this.isPrivateName(key) && this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start), this.toAssignable(value2, isLHS);
            } else super.toAssignable(node, isLHS);
          }
          toAssignableObjectExpressionProp(prop, isLast, isLHS) {
            "Property" !== prop.type || "get" !== prop.kind && "set" !== prop.kind ? "Property" === prop.type && prop.method ? this.raise(Errors.PatternHasMethod, prop.key) : super.toAssignableObjectExpressionProp(prop, isLast, isLHS) : this.raise(Errors.PatternHasAccessor, prop.key);
          }
          finishCallExpression(unfinished, optional) {
            const node = super.finishCallExpression(unfinished, optional);
            var _ref, _ref2;
            "Import" === node.callee.type && (node.type = "ImportExpression", node.source = node.arguments[0], node.options = null != (_ref = node.arguments[1]) ? _ref : null, node.attributes = null != (_ref2 = node.arguments[1]) ? _ref2 : null, delete node.arguments, delete node.callee);
            return node;
          }
          toReferencedArguments(node) {
            "ImportExpression" !== node.type && super.toReferencedArguments(node);
          }
          parseExport(unfinished, decorators) {
            const exportStartLoc = this.state.lastTokStartLoc, node = super.parseExport(unfinished, decorators);
            switch (node.type) {
              case "ExportAllDeclaration":
                node.exported = null;
                break;
              case "ExportNamedDeclaration":
                1 === node.specifiers.length && "ExportNamespaceSpecifier" === node.specifiers[0].type && (node.type = "ExportAllDeclaration", node.exported = node.specifiers[0].exported, delete node.specifiers);
              case "ExportDefaultDeclaration": {
                var _declaration$decorato;
                const { declaration } = node;
                "ClassDeclaration" === (null == declaration ? void 0 : declaration.type) && (null == (_declaration$decorato = declaration.decorators) ? void 0 : _declaration$decorato.length) > 0 && declaration.start === node.start && this.resetStartLocation(node, exportStartLoc);
              }
            }
            return node;
          }
          parseSubscript(base, startLoc, noCalls, state) {
            const node = super.parseSubscript(base, startLoc, noCalls, state);
            if (state.optionalChainMember) {
              if ("OptionalMemberExpression" !== node.type && "OptionalCallExpression" !== node.type || (node.type = node.type.substring(8)), state.stop) {
                const chain = this.startNodeAtNode(node);
                return chain.expression = node, this.finishNode(chain, "ChainExpression");
              }
            } else "MemberExpression" !== node.type && "CallExpression" !== node.type || (node.optional = false);
            return node;
          }
          isOptionalMemberExpression(node) {
            return "ChainExpression" === node.type ? "MemberExpression" === node.expression.type : super.isOptionalMemberExpression(node);
          }
          hasPropertyAsPrivateName(node) {
            return "ChainExpression" === node.type && (node = node.expression), super.hasPropertyAsPrivateName(node);
          }
          isObjectProperty(node) {
            return "Property" === node.type && "init" === node.kind && !node.method;
          }
          isObjectMethod(node) {
            return "Property" === node.type && (node.method || "get" === node.kind || "set" === node.kind);
          }
          finishNodeAt(node, type, endLoc) {
            return toESTreeLocation(super.finishNodeAt(node, type, endLoc));
          }
          resetStartLocation(node, startLoc) {
            super.resetStartLocation(node, startLoc), toESTreeLocation(node);
          }
          resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
            super.resetEndLocation(node, endLoc), toESTreeLocation(node);
          }
        }, jsx: (superClass) => class extends superClass {
          jsxReadToken() {
            let out = "", chunkStart = this.state.pos;
            for (; ; ) {
              if (this.state.pos >= this.length) throw this.raise(JsxErrors.UnterminatedJsxContent, this.state.startLoc);
              const ch = this.input.charCodeAt(this.state.pos);
              switch (ch) {
                case 60:
                case 123:
                  return this.state.pos === this.state.start ? void (60 === ch && this.state.canStartJSXElement ? (++this.state.pos, this.finishToken(143)) : super.getTokenFromCode(ch)) : (out += this.input.slice(chunkStart, this.state.pos), void this.finishToken(142, out));
                case 38:
                  out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadEntity(), chunkStart = this.state.pos;
                  break;
                default:
                  isNewLine(ch) ? (out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadNewLine(true), chunkStart = this.state.pos) : ++this.state.pos;
              }
            }
          }
          jsxReadNewLine(normalizeCRLF) {
            const ch = this.input.charCodeAt(this.state.pos);
            let out;
            return ++this.state.pos, 13 === ch && 10 === this.input.charCodeAt(this.state.pos) ? (++this.state.pos, out = normalizeCRLF ? "\n" : "\r\n") : out = String.fromCharCode(ch), ++this.state.curLine, this.state.lineStart = this.state.pos, out;
          }
          jsxReadString(quote) {
            let out = "", chunkStart = ++this.state.pos;
            for (; ; ) {
              if (this.state.pos >= this.length) throw this.raise(Errors.UnterminatedString, this.state.startLoc);
              const ch = this.input.charCodeAt(this.state.pos);
              if (ch === quote) break;
              38 === ch ? (out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadEntity(), chunkStart = this.state.pos) : isNewLine(ch) ? (out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadNewLine(false), chunkStart = this.state.pos) : ++this.state.pos;
            }
            out += this.input.slice(chunkStart, this.state.pos++), this.finishToken(134, out);
          }
          jsxReadEntity() {
            const startPos = ++this.state.pos;
            if (35 === this.codePointAtPos(this.state.pos)) {
              ++this.state.pos;
              let radix = 10;
              120 === this.codePointAtPos(this.state.pos) && (radix = 16, ++this.state.pos);
              const codePoint = this.readInt(radix, void 0, false, "bail");
              if (null !== codePoint && 59 === this.codePointAtPos(this.state.pos)) return ++this.state.pos, String.fromCodePoint(codePoint);
            } else {
              let count2 = 0, semi = false;
              for (; count2++ < 10 && this.state.pos < this.length && !(semi = 59 === this.codePointAtPos(this.state.pos)); ) ++this.state.pos;
              if (semi) {
                const desc = this.input.slice(startPos, this.state.pos), entity = entities[desc];
                if (++this.state.pos, entity) return entity;
              }
            }
            return this.state.pos = startPos, "&";
          }
          jsxReadWord() {
            let ch;
            const start = this.state.pos;
            do {
              ch = this.input.charCodeAt(++this.state.pos);
            } while (isIdentifierChar(ch) || 45 === ch);
            this.finishToken(141, this.input.slice(start, this.state.pos));
          }
          jsxParseIdentifier() {
            const node = this.startNode();
            return this.match(141) ? node.name = this.state.value : tokenIsKeyword(this.state.type) ? node.name = tokenLabelName(this.state.type) : this.unexpected(), this.next(), this.finishNode(node, "JSXIdentifier");
          }
          jsxParseNamespacedName() {
            const startLoc = this.state.startLoc, name = this.jsxParseIdentifier();
            if (!this.eat(14)) return name;
            const node = this.startNodeAt(startLoc);
            return node.namespace = name, node.name = this.jsxParseIdentifier(), this.finishNode(node, "JSXNamespacedName");
          }
          jsxParseElementName() {
            const startLoc = this.state.startLoc;
            let node = this.jsxParseNamespacedName();
            if ("JSXNamespacedName" === node.type) return node;
            for (; this.eat(16); ) {
              const newNode = this.startNodeAt(startLoc);
              newNode.object = node, newNode.property = this.jsxParseIdentifier(), node = this.finishNode(newNode, "JSXMemberExpression");
            }
            return node;
          }
          jsxParseAttributeValue() {
            let node;
            switch (this.state.type) {
              case 5:
                return node = this.startNode(), this.setContext(types.brace), this.next(), node = this.jsxParseExpressionContainer(node, types.j_oTag), "JSXEmptyExpression" === node.expression.type && this.raise(JsxErrors.AttributeIsEmpty, node), node;
              case 143:
              case 134:
                return this.parseExprAtom();
              default:
                throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);
            }
          }
          jsxParseEmptyExpression() {
            const node = this.startNodeAt(this.state.lastTokEndLoc);
            return this.finishNodeAt(node, "JSXEmptyExpression", this.state.startLoc);
          }
          jsxParseSpreadChild(node) {
            return this.next(), node.expression = this.parseExpression(), this.setContext(types.j_expr), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(node, "JSXSpreadChild");
          }
          jsxParseExpressionContainer(node, previousContext) {
            if (this.match(8)) node.expression = this.jsxParseEmptyExpression();
            else {
              const expression = this.parseExpression();
              node.expression = expression;
            }
            return this.setContext(previousContext), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(node, "JSXExpressionContainer");
          }
          jsxParseAttribute() {
            const node = this.startNode();
            return this.match(5) ? (this.setContext(types.brace), this.next(), this.expect(21), node.argument = this.parseMaybeAssignAllowIn(), this.setContext(types.j_oTag), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(node, "JSXSpreadAttribute")) : (node.name = this.jsxParseNamespacedName(), node.value = this.eat(29) ? this.jsxParseAttributeValue() : null, this.finishNode(node, "JSXAttribute"));
          }
          jsxParseOpeningElementAt(startLoc) {
            const node = this.startNodeAt(startLoc);
            return this.eat(144) ? this.finishNode(node, "JSXOpeningFragment") : (node.name = this.jsxParseElementName(), this.jsxParseOpeningElementAfterName(node));
          }
          jsxParseOpeningElementAfterName(node) {
            const attributes = [];
            for (; !this.match(56) && !this.match(144); ) attributes.push(this.jsxParseAttribute());
            return node.attributes = attributes, node.selfClosing = this.eat(56), this.expect(144), this.finishNode(node, "JSXOpeningElement");
          }
          jsxParseClosingElementAt(startLoc) {
            const node = this.startNodeAt(startLoc);
            return this.eat(144) ? this.finishNode(node, "JSXClosingFragment") : (node.name = this.jsxParseElementName(), this.expect(144), this.finishNode(node, "JSXClosingElement"));
          }
          jsxParseElementAt(startLoc) {
            const node = this.startNodeAt(startLoc), children = [], openingElement = this.jsxParseOpeningElementAt(startLoc);
            let closingElement = null;
            if (!openingElement.selfClosing) {
              contents: for (; ; ) switch (this.state.type) {
                case 143:
                  if (startLoc = this.state.startLoc, this.next(), this.eat(56)) {
                    closingElement = this.jsxParseClosingElementAt(startLoc);
                    break contents;
                  }
                  children.push(this.jsxParseElementAt(startLoc));
                  break;
                case 142:
                  children.push(this.parseLiteral(this.state.value, "JSXText"));
                  break;
                case 5: {
                  const node2 = this.startNode();
                  this.setContext(types.brace), this.next(), this.match(21) ? children.push(this.jsxParseSpreadChild(node2)) : children.push(this.jsxParseExpressionContainer(node2, types.j_expr));
                  break;
                }
                default:
                  this.unexpected();
              }
              isFragment(openingElement) && !isFragment(closingElement) && null !== closingElement ? this.raise(JsxErrors.MissingClosingTagFragment, closingElement) : !isFragment(openingElement) && isFragment(closingElement) ? this.raise(JsxErrors.MissingClosingTagElement, closingElement, { openingTagName: getQualifiedJSXName(openingElement.name) }) : isFragment(openingElement) || isFragment(closingElement) || getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name) && this.raise(JsxErrors.MissingClosingTagElement, closingElement, { openingTagName: getQualifiedJSXName(openingElement.name) });
            }
            if (isFragment(openingElement) ? (node.openingFragment = openingElement, node.closingFragment = closingElement) : (node.openingElement = openingElement, node.closingElement = closingElement), node.children = children, this.match(47)) throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, this.state.startLoc);
            return isFragment(openingElement) ? this.finishNode(node, "JSXFragment") : this.finishNode(node, "JSXElement");
          }
          jsxParseElement() {
            const startLoc = this.state.startLoc;
            return this.next(), this.jsxParseElementAt(startLoc);
          }
          setContext(newContext) {
            const { context } = this.state;
            context[context.length - 1] = newContext;
          }
          parseExprAtom(refExpressionErrors) {
            return this.match(143) ? this.jsxParseElement() : this.match(47) && 33 !== this.input.charCodeAt(this.state.pos) ? (this.replaceToken(143), this.jsxParseElement()) : super.parseExprAtom(refExpressionErrors);
          }
          skipSpace() {
            this.curContext().preserveSpace || super.skipSpace();
          }
          getTokenFromCode(code2) {
            const context = this.curContext();
            if (context !== types.j_expr) {
              if (context === types.j_oTag || context === types.j_cTag) {
                if (isIdentifierStart(code2)) return void this.jsxReadWord();
                if (62 === code2) return ++this.state.pos, void this.finishToken(144);
                if ((34 === code2 || 39 === code2) && context === types.j_oTag) return void this.jsxReadString(code2);
              }
              if (60 === code2 && this.state.canStartJSXElement && 33 !== this.input.charCodeAt(this.state.pos + 1)) return ++this.state.pos, void this.finishToken(143);
              super.getTokenFromCode(code2);
            } else this.jsxReadToken();
          }
          updateContext(prevType) {
            const { context, type } = this.state;
            if (56 === type && 143 === prevType) context.splice(-2, 2, types.j_cTag), this.state.canStartJSXElement = false;
            else if (143 === type) context.push(types.j_oTag);
            else if (144 === type) {
              const out = context[context.length - 1];
              out === types.j_oTag && 56 === prevType || out === types.j_cTag ? (context.pop(), this.state.canStartJSXElement = context[context.length - 1] === types.j_expr) : (this.setContext(types.j_expr), this.state.canStartJSXElement = true);
            } else this.state.canStartJSXElement = tokenBeforeExprs[type];
          }
        }, flow: (superClass) => class extends superClass {
          constructor(...args) {
            super(...args), this.flowPragma = void 0;
          }
          getScopeHandler() {
            return FlowScopeHandler;
          }
          shouldParseTypes() {
            return this.getPluginOption("flow", "all") || "flow" === this.flowPragma;
          }
          finishToken(type, val) {
            134 !== type && 13 !== type && 28 !== type && void 0 === this.flowPragma && (this.flowPragma = null), super.finishToken(type, val);
          }
          addComment(comment) {
            if (void 0 === this.flowPragma) {
              const matches = FLOW_PRAGMA_REGEX.exec(comment.value);
              if (matches) if ("flow" === matches[1]) this.flowPragma = "flow";
              else {
                if ("noflow" !== matches[1]) throw new Error("Unexpected flow pragma");
                this.flowPragma = "noflow";
              }
              else ;
            }
            super.addComment(comment);
          }
          flowParseTypeInitialiser(tok) {
            const oldInType = this.state.inType;
            this.state.inType = true, this.expect(tok || 14);
            const type = this.flowParseType();
            return this.state.inType = oldInType, type;
          }
          flowParsePredicate() {
            const node = this.startNode(), moduloLoc = this.state.startLoc;
            return this.next(), this.expectContextual(110), this.state.lastTokStartLoc.index > moduloLoc.index + 1 && this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc), this.eat(10) ? (node.value = super.parseExpression(), this.expect(11), this.finishNode(node, "DeclaredPredicate")) : this.finishNode(node, "InferredPredicate");
          }
          flowParseTypeAndPredicateInitialiser() {
            const oldInType = this.state.inType;
            this.state.inType = true, this.expect(14);
            let type = null, predicate = null;
            return this.match(54) ? (this.state.inType = oldInType, predicate = this.flowParsePredicate()) : (type = this.flowParseType(), this.state.inType = oldInType, this.match(54) && (predicate = this.flowParsePredicate())), [type, predicate];
          }
          flowParseDeclareClass(node) {
            return this.next(), this.flowParseInterfaceish(node, true), this.finishNode(node, "DeclareClass");
          }
          flowParseDeclareFunction(node) {
            this.next();
            const id = node.id = this.parseIdentifier(), typeNode = this.startNode(), typeContainer = this.startNode();
            this.match(47) ? typeNode.typeParameters = this.flowParseTypeParameterDeclaration() : typeNode.typeParameters = null, this.expect(10);
            const tmp = this.flowParseFunctionTypeParams();
            return typeNode.params = tmp.params, typeNode.rest = tmp.rest, typeNode.this = tmp._this, this.expect(11), [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser(), typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation"), id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation"), this.resetEndLocation(id), this.semicolon(), this.scope.declareName(node.id.name, 2048, node.id.loc.start), this.finishNode(node, "DeclareFunction");
          }
          flowParseDeclare(node, insideModule) {
            return this.match(80) ? this.flowParseDeclareClass(node) : this.match(68) ? this.flowParseDeclareFunction(node) : this.match(74) ? this.flowParseDeclareVariable(node) : this.eatContextual(127) ? this.match(16) ? this.flowParseDeclareModuleExports(node) : (insideModule && this.raise(FlowErrors.NestedDeclareModule, this.state.lastTokStartLoc), this.flowParseDeclareModule(node)) : this.isContextual(130) ? this.flowParseDeclareTypeAlias(node) : this.isContextual(131) ? this.flowParseDeclareOpaqueType(node) : this.isContextual(129) ? this.flowParseDeclareInterface(node) : this.match(82) ? this.flowParseDeclareExportDeclaration(node, insideModule) : void this.unexpected();
          }
          flowParseDeclareVariable(node) {
            return this.next(), node.id = this.flowParseTypeAnnotatableIdentifier(true), this.scope.declareName(node.id.name, 5, node.id.loc.start), this.semicolon(), this.finishNode(node, "DeclareVariable");
          }
          flowParseDeclareModule(node) {
            this.scope.enter(0), this.match(134) ? node.id = super.parseExprAtom() : node.id = this.parseIdentifier();
            const bodyNode = node.body = this.startNode(), body = bodyNode.body = [];
            for (this.expect(5); !this.match(8); ) {
              let bodyNode2 = this.startNode();
              this.match(83) ? (this.next(), this.isContextual(130) || this.match(87) || this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, this.state.lastTokStartLoc), super.parseImport(bodyNode2)) : (this.expectContextual(125, FlowErrors.UnsupportedStatementInDeclareModule), bodyNode2 = this.flowParseDeclare(bodyNode2, true)), body.push(bodyNode2);
            }
            this.scope.exit(), this.expect(8), this.finishNode(bodyNode, "BlockStatement");
            let kind = null, hasModuleExport = false;
            return body.forEach((bodyElement) => {
              !function(bodyElement2) {
                return "DeclareExportAllDeclaration" === bodyElement2.type || "DeclareExportDeclaration" === bodyElement2.type && (!bodyElement2.declaration || "TypeAlias" !== bodyElement2.declaration.type && "InterfaceDeclaration" !== bodyElement2.declaration.type);
              }(bodyElement) ? "DeclareModuleExports" === bodyElement.type && (hasModuleExport && this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement), "ES" === kind && this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement), kind = "CommonJS", hasModuleExport = true) : ("CommonJS" === kind && this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement), kind = "ES");
            }), node.kind = kind || "CommonJS", this.finishNode(node, "DeclareModule");
          }
          flowParseDeclareExportDeclaration(node, insideModule) {
            if (this.expect(82), this.eat(65)) return this.match(68) || this.match(80) ? node.declaration = this.flowParseDeclare(this.startNode()) : (node.declaration = this.flowParseType(), this.semicolon()), node.default = true, this.finishNode(node, "DeclareExportDeclaration");
            if (this.match(75) || this.isLet() || (this.isContextual(130) || this.isContextual(129)) && !insideModule) {
              const label = this.state.value;
              throw this.raise(FlowErrors.UnsupportedDeclareExportKind, this.state.startLoc, { unsupportedExportKind: label, suggestion: exportSuggestions[label] });
            }
            return this.match(74) || this.match(68) || this.match(80) || this.isContextual(131) ? (node.declaration = this.flowParseDeclare(this.startNode()), node.default = false, this.finishNode(node, "DeclareExportDeclaration")) : this.match(55) || this.match(5) || this.isContextual(129) || this.isContextual(130) || this.isContextual(131) ? ("ExportNamedDeclaration" === (node = this.parseExport(node, null)).type && (node.type = "ExportDeclaration", node.default = false, delete node.exportKind), node.type = "Declare" + node.type, node) : void this.unexpected();
          }
          flowParseDeclareModuleExports(node) {
            return this.next(), this.expectContextual(111), node.typeAnnotation = this.flowParseTypeAnnotation(), this.semicolon(), this.finishNode(node, "DeclareModuleExports");
          }
          flowParseDeclareTypeAlias(node) {
            this.next();
            const finished7 = this.flowParseTypeAlias(node);
            return finished7.type = "DeclareTypeAlias", finished7;
          }
          flowParseDeclareOpaqueType(node) {
            this.next();
            const finished7 = this.flowParseOpaqueType(node, true);
            return finished7.type = "DeclareOpaqueType", finished7;
          }
          flowParseDeclareInterface(node) {
            return this.next(), this.flowParseInterfaceish(node, false), this.finishNode(node, "DeclareInterface");
          }
          flowParseInterfaceish(node, isClass) {
            if (node.id = this.flowParseRestrictedIdentifier(!isClass, true), this.scope.declareName(node.id.name, isClass ? 17 : 8201, node.id.loc.start), this.match(47) ? node.typeParameters = this.flowParseTypeParameterDeclaration() : node.typeParameters = null, node.extends = [], this.eat(81)) do {
              node.extends.push(this.flowParseInterfaceExtends());
            } while (!isClass && this.eat(12));
            if (isClass) {
              if (node.implements = [], node.mixins = [], this.eatContextual(117)) do {
                node.mixins.push(this.flowParseInterfaceExtends());
              } while (this.eat(12));
              if (this.eatContextual(113)) do {
                node.implements.push(this.flowParseInterfaceExtends());
              } while (this.eat(12));
            }
            node.body = this.flowParseObjectType({ allowStatic: isClass, allowExact: false, allowSpread: false, allowProto: isClass, allowInexact: false });
          }
          flowParseInterfaceExtends() {
            const node = this.startNode();
            return node.id = this.flowParseQualifiedTypeIdentifier(), this.match(47) ? node.typeParameters = this.flowParseTypeParameterInstantiation() : node.typeParameters = null, this.finishNode(node, "InterfaceExtends");
          }
          flowParseInterface(node) {
            return this.flowParseInterfaceish(node, false), this.finishNode(node, "InterfaceDeclaration");
          }
          checkNotUnderscore(word) {
            "_" === word && this.raise(FlowErrors.UnexpectedReservedUnderscore, this.state.startLoc);
          }
          checkReservedType(word, startLoc, declaration) {
            reservedTypes.has(word) && this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, startLoc, { reservedType: word });
          }
          flowParseRestrictedIdentifier(liberal, declaration) {
            return this.checkReservedType(this.state.value, this.state.startLoc, declaration), this.parseIdentifier(liberal);
          }
          flowParseTypeAlias(node) {
            return node.id = this.flowParseRestrictedIdentifier(false, true), this.scope.declareName(node.id.name, 8201, node.id.loc.start), this.match(47) ? node.typeParameters = this.flowParseTypeParameterDeclaration() : node.typeParameters = null, node.right = this.flowParseTypeInitialiser(29), this.semicolon(), this.finishNode(node, "TypeAlias");
          }
          flowParseOpaqueType(node, declare) {
            return this.expectContextual(130), node.id = this.flowParseRestrictedIdentifier(true, true), this.scope.declareName(node.id.name, 8201, node.id.loc.start), this.match(47) ? node.typeParameters = this.flowParseTypeParameterDeclaration() : node.typeParameters = null, node.supertype = null, this.match(14) && (node.supertype = this.flowParseTypeInitialiser(14)), node.impltype = null, declare || (node.impltype = this.flowParseTypeInitialiser(29)), this.semicolon(), this.finishNode(node, "OpaqueType");
          }
          flowParseTypeParameter(requireDefault = false) {
            const nodeStartLoc = this.state.startLoc, node = this.startNode(), variance = this.flowParseVariance(), ident = this.flowParseTypeAnnotatableIdentifier();
            return node.name = ident.name, node.variance = variance, node.bound = ident.typeAnnotation, this.match(29) ? (this.eat(29), node.default = this.flowParseType()) : requireDefault && this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc), this.finishNode(node, "TypeParameter");
          }
          flowParseTypeParameterDeclaration() {
            const oldInType = this.state.inType, node = this.startNode();
            node.params = [], this.state.inType = true, this.match(47) || this.match(143) ? this.next() : this.unexpected();
            let defaultRequired = false;
            do {
              const typeParameter = this.flowParseTypeParameter(defaultRequired);
              node.params.push(typeParameter), typeParameter.default && (defaultRequired = true), this.match(48) || this.expect(12);
            } while (!this.match(48));
            return this.expect(48), this.state.inType = oldInType, this.finishNode(node, "TypeParameterDeclaration");
          }
          flowParseTypeParameterInstantiation() {
            const node = this.startNode(), oldInType = this.state.inType;
            node.params = [], this.state.inType = true, this.expect(47);
            const oldNoAnonFunctionType = this.state.noAnonFunctionType;
            for (this.state.noAnonFunctionType = false; !this.match(48); ) node.params.push(this.flowParseType()), this.match(48) || this.expect(12);
            return this.state.noAnonFunctionType = oldNoAnonFunctionType, this.expect(48), this.state.inType = oldInType, this.finishNode(node, "TypeParameterInstantiation");
          }
          flowParseTypeParameterInstantiationCallOrNew() {
            const node = this.startNode(), oldInType = this.state.inType;
            for (node.params = [], this.state.inType = true, this.expect(47); !this.match(48); ) node.params.push(this.flowParseTypeOrImplicitInstantiation()), this.match(48) || this.expect(12);
            return this.expect(48), this.state.inType = oldInType, this.finishNode(node, "TypeParameterInstantiation");
          }
          flowParseInterfaceType() {
            const node = this.startNode();
            if (this.expectContextual(129), node.extends = [], this.eat(81)) do {
              node.extends.push(this.flowParseInterfaceExtends());
            } while (this.eat(12));
            return node.body = this.flowParseObjectType({ allowStatic: false, allowExact: false, allowSpread: false, allowProto: false, allowInexact: false }), this.finishNode(node, "InterfaceTypeAnnotation");
          }
          flowParseObjectPropertyKey() {
            return this.match(135) || this.match(134) ? super.parseExprAtom() : this.parseIdentifier(true);
          }
          flowParseObjectTypeIndexer(node, isStatic, variance) {
            return node.static = isStatic, 14 === this.lookahead().type ? (node.id = this.flowParseObjectPropertyKey(), node.key = this.flowParseTypeInitialiser()) : (node.id = null, node.key = this.flowParseType()), this.expect(3), node.value = this.flowParseTypeInitialiser(), node.variance = variance, this.finishNode(node, "ObjectTypeIndexer");
          }
          flowParseObjectTypeInternalSlot(node, isStatic) {
            return node.static = isStatic, node.id = this.flowParseObjectPropertyKey(), this.expect(3), this.expect(3), this.match(47) || this.match(10) ? (node.method = true, node.optional = false, node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start))) : (node.method = false, this.eat(17) && (node.optional = true), node.value = this.flowParseTypeInitialiser()), this.finishNode(node, "ObjectTypeInternalSlot");
          }
          flowParseObjectTypeMethodish(node) {
            for (node.params = [], node.rest = null, node.typeParameters = null, node.this = null, this.match(47) && (node.typeParameters = this.flowParseTypeParameterDeclaration()), this.expect(10), this.match(78) && (node.this = this.flowParseFunctionTypeParam(true), node.this.name = null, this.match(11) || this.expect(12)); !this.match(11) && !this.match(21); ) node.params.push(this.flowParseFunctionTypeParam(false)), this.match(11) || this.expect(12);
            return this.eat(21) && (node.rest = this.flowParseFunctionTypeParam(false)), this.expect(11), node.returnType = this.flowParseTypeInitialiser(), this.finishNode(node, "FunctionTypeAnnotation");
          }
          flowParseObjectTypeCallProperty(node, isStatic) {
            const valueNode = this.startNode();
            return node.static = isStatic, node.value = this.flowParseObjectTypeMethodish(valueNode), this.finishNode(node, "ObjectTypeCallProperty");
          }
          flowParseObjectType({ allowStatic, allowExact, allowSpread, allowProto, allowInexact }) {
            const oldInType = this.state.inType;
            this.state.inType = true;
            const nodeStart = this.startNode();
            let endDelim, exact;
            nodeStart.callProperties = [], nodeStart.properties = [], nodeStart.indexers = [], nodeStart.internalSlots = [];
            let inexact = false;
            for (allowExact && this.match(6) ? (this.expect(6), endDelim = 9, exact = true) : (this.expect(5), endDelim = 8, exact = false), nodeStart.exact = exact; !this.match(endDelim); ) {
              let isStatic = false, protoStartLoc = null, inexactStartLoc = null;
              const node = this.startNode();
              if (allowProto && this.isContextual(118)) {
                const lookahead = this.lookahead();
                14 !== lookahead.type && 17 !== lookahead.type && (this.next(), protoStartLoc = this.state.startLoc, allowStatic = false);
              }
              if (allowStatic && this.isContextual(106)) {
                const lookahead = this.lookahead();
                14 !== lookahead.type && 17 !== lookahead.type && (this.next(), isStatic = true);
              }
              const variance = this.flowParseVariance();
              if (this.eat(0)) null != protoStartLoc && this.unexpected(protoStartLoc), this.eat(0) ? (variance && this.unexpected(variance.loc.start), nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic))) : nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));
              else if (this.match(10) || this.match(47)) null != protoStartLoc && this.unexpected(protoStartLoc), variance && this.unexpected(variance.loc.start), nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));
              else {
                let kind = "init";
                if (this.isContextual(99) || this.isContextual(104)) {
                  tokenIsLiteralPropertyName(this.lookahead().type) && (kind = this.state.value, this.next());
                }
                const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, null != allowInexact ? allowInexact : !exact);
                null === propOrInexact ? (inexact = true, inexactStartLoc = this.state.lastTokStartLoc) : nodeStart.properties.push(propOrInexact);
              }
              this.flowObjectTypeSemicolon(), !inexactStartLoc || this.match(8) || this.match(9) || this.raise(FlowErrors.UnexpectedExplicitInexactInObject, inexactStartLoc);
            }
            this.expect(endDelim), allowSpread && (nodeStart.inexact = inexact);
            const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
            return this.state.inType = oldInType, out;
          }
          flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {
            if (this.eat(21)) {
              return this.match(12) || this.match(13) || this.match(8) || this.match(9) ? (allowSpread ? allowInexact || this.raise(FlowErrors.InexactInsideExact, this.state.lastTokStartLoc) : this.raise(FlowErrors.InexactInsideNonObject, this.state.lastTokStartLoc), variance && this.raise(FlowErrors.InexactVariance, variance), null) : (allowSpread || this.raise(FlowErrors.UnexpectedSpreadType, this.state.lastTokStartLoc), null != protoStartLoc && this.unexpected(protoStartLoc), variance && this.raise(FlowErrors.SpreadVariance, variance), node.argument = this.flowParseType(), this.finishNode(node, "ObjectTypeSpreadProperty"));
            }
            {
              node.key = this.flowParseObjectPropertyKey(), node.static = isStatic, node.proto = null != protoStartLoc, node.kind = kind;
              let optional = false;
              return this.match(47) || this.match(10) ? (node.method = true, null != protoStartLoc && this.unexpected(protoStartLoc), variance && this.unexpected(variance.loc.start), node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start)), "get" !== kind && "set" !== kind || this.flowCheckGetterSetterParams(node), !allowSpread && "constructor" === node.key.name && node.value.this && this.raise(FlowErrors.ThisParamBannedInConstructor, node.value.this)) : ("init" !== kind && this.unexpected(), node.method = false, this.eat(17) && (optional = true), node.value = this.flowParseTypeInitialiser(), node.variance = variance), node.optional = optional, this.finishNode(node, "ObjectTypeProperty");
            }
          }
          flowCheckGetterSetterParams(property) {
            const paramCount = "get" === property.kind ? 0 : 1, length = property.value.params.length + (property.value.rest ? 1 : 0);
            property.value.this && this.raise("get" === property.kind ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, property.value.this), length !== paramCount && this.raise("get" === property.kind ? Errors.BadGetterArity : Errors.BadSetterArity, property), "set" === property.kind && property.value.rest && this.raise(Errors.BadSetterRestParameter, property);
          }
          flowObjectTypeSemicolon() {
            this.eat(13) || this.eat(12) || this.match(8) || this.match(9) || this.unexpected();
          }
          flowParseQualifiedTypeIdentifier(startLoc, id) {
            null != startLoc || (startLoc = this.state.startLoc);
            let node = id || this.flowParseRestrictedIdentifier(true);
            for (; this.eat(16); ) {
              const node2 = this.startNodeAt(startLoc);
              node2.qualification = node, node2.id = this.flowParseRestrictedIdentifier(true), node = this.finishNode(node2, "QualifiedTypeIdentifier");
            }
            return node;
          }
          flowParseGenericType(startLoc, id) {
            const node = this.startNodeAt(startLoc);
            return node.typeParameters = null, node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id), this.match(47) && (node.typeParameters = this.flowParseTypeParameterInstantiation()), this.finishNode(node, "GenericTypeAnnotation");
          }
          flowParseTypeofType() {
            const node = this.startNode();
            return this.expect(87), node.argument = this.flowParsePrimaryType(), this.finishNode(node, "TypeofTypeAnnotation");
          }
          flowParseTupleType() {
            const node = this.startNode();
            for (node.types = [], this.expect(0); this.state.pos < this.length && !this.match(3) && (node.types.push(this.flowParseType()), !this.match(3)); ) this.expect(12);
            return this.expect(3), this.finishNode(node, "TupleTypeAnnotation");
          }
          flowParseFunctionTypeParam(first) {
            let name = null, optional = false, typeAnnotation = null;
            const node = this.startNode(), lh = this.lookahead(), isThis = 78 === this.state.type;
            return 14 === lh.type || 17 === lh.type ? (isThis && !first && this.raise(FlowErrors.ThisParamMustBeFirst, node), name = this.parseIdentifier(isThis), this.eat(17) && (optional = true, isThis && this.raise(FlowErrors.ThisParamMayNotBeOptional, node)), typeAnnotation = this.flowParseTypeInitialiser()) : typeAnnotation = this.flowParseType(), node.name = name, node.optional = optional, node.typeAnnotation = typeAnnotation, this.finishNode(node, "FunctionTypeParam");
          }
          reinterpretTypeAsFunctionTypeParam(type) {
            const node = this.startNodeAt(type.loc.start);
            return node.name = null, node.optional = false, node.typeAnnotation = type, this.finishNode(node, "FunctionTypeParam");
          }
          flowParseFunctionTypeParams(params = []) {
            let rest = null, _this = null;
            for (this.match(78) && (_this = this.flowParseFunctionTypeParam(true), _this.name = null, this.match(11) || this.expect(12)); !this.match(11) && !this.match(21); ) params.push(this.flowParseFunctionTypeParam(false)), this.match(11) || this.expect(12);
            return this.eat(21) && (rest = this.flowParseFunctionTypeParam(false)), { params, rest, _this };
          }
          flowIdentToTypeAnnotation(startLoc, node, id) {
            switch (id.name) {
              case "any":
                return this.finishNode(node, "AnyTypeAnnotation");
              case "bool":
              case "boolean":
                return this.finishNode(node, "BooleanTypeAnnotation");
              case "mixed":
                return this.finishNode(node, "MixedTypeAnnotation");
              case "empty":
                return this.finishNode(node, "EmptyTypeAnnotation");
              case "number":
                return this.finishNode(node, "NumberTypeAnnotation");
              case "string":
                return this.finishNode(node, "StringTypeAnnotation");
              case "symbol":
                return this.finishNode(node, "SymbolTypeAnnotation");
              default:
                return this.checkNotUnderscore(id.name), this.flowParseGenericType(startLoc, id);
            }
          }
          flowParsePrimaryType() {
            const startLoc = this.state.startLoc, node = this.startNode();
            let tmp, type, isGroupedType = false;
            const oldNoAnonFunctionType = this.state.noAnonFunctionType;
            switch (this.state.type) {
              case 5:
                return this.flowParseObjectType({ allowStatic: false, allowExact: false, allowSpread: true, allowProto: false, allowInexact: true });
              case 6:
                return this.flowParseObjectType({ allowStatic: false, allowExact: true, allowSpread: true, allowProto: false, allowInexact: false });
              case 0:
                return this.state.noAnonFunctionType = false, type = this.flowParseTupleType(), this.state.noAnonFunctionType = oldNoAnonFunctionType, type;
              case 47: {
                const node2 = this.startNode();
                return node2.typeParameters = this.flowParseTypeParameterDeclaration(), this.expect(10), tmp = this.flowParseFunctionTypeParams(), node2.params = tmp.params, node2.rest = tmp.rest, node2.this = tmp._this, this.expect(11), this.expect(19), node2.returnType = this.flowParseType(), this.finishNode(node2, "FunctionTypeAnnotation");
              }
              case 10: {
                const node2 = this.startNode();
                if (this.next(), !this.match(11) && !this.match(21)) if (tokenIsIdentifier(this.state.type) || this.match(78)) {
                  const token = this.lookahead().type;
                  isGroupedType = 17 !== token && 14 !== token;
                } else isGroupedType = true;
                if (isGroupedType) {
                  if (this.state.noAnonFunctionType = false, type = this.flowParseType(), this.state.noAnonFunctionType = oldNoAnonFunctionType, this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && 19 === this.lookahead().type)) return this.expect(11), type;
                  this.eat(12);
                }
                return tmp = type ? this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]) : this.flowParseFunctionTypeParams(), node2.params = tmp.params, node2.rest = tmp.rest, node2.this = tmp._this, this.expect(11), this.expect(19), node2.returnType = this.flowParseType(), node2.typeParameters = null, this.finishNode(node2, "FunctionTypeAnnotation");
              }
              case 134:
                return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
              case 85:
              case 86:
                return node.value = this.match(85), this.next(), this.finishNode(node, "BooleanLiteralTypeAnnotation");
              case 53:
                if ("-" === this.state.value) {
                  if (this.next(), this.match(135)) return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node);
                  if (this.match(136)) return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node);
                  throw this.raise(FlowErrors.UnexpectedSubtractionOperand, this.state.startLoc);
                }
                return void this.unexpected();
              case 135:
                return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
              case 136:
                return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
              case 88:
                return this.next(), this.finishNode(node, "VoidTypeAnnotation");
              case 84:
                return this.next(), this.finishNode(node, "NullLiteralTypeAnnotation");
              case 78:
                return this.next(), this.finishNode(node, "ThisTypeAnnotation");
              case 55:
                return this.next(), this.finishNode(node, "ExistsTypeAnnotation");
              case 87:
                return this.flowParseTypeofType();
              default:
                if (tokenIsKeyword(this.state.type)) {
                  const label = tokenLabelName(this.state.type);
                  return this.next(), super.createIdentifier(node, label);
                }
                if (tokenIsIdentifier(this.state.type)) return this.isContextual(129) ? this.flowParseInterfaceType() : this.flowIdentToTypeAnnotation(startLoc, node, this.parseIdentifier());
            }
            this.unexpected();
          }
          flowParsePostfixType() {
            const startLoc = this.state.startLoc;
            let type = this.flowParsePrimaryType(), seenOptionalIndexedAccess = false;
            for (; (this.match(0) || this.match(18)) && !this.canInsertSemicolon(); ) {
              const node = this.startNodeAt(startLoc), optional = this.eat(18);
              seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional, this.expect(0), !optional && this.match(3) ? (node.elementType = type, this.next(), type = this.finishNode(node, "ArrayTypeAnnotation")) : (node.objectType = type, node.indexType = this.flowParseType(), this.expect(3), seenOptionalIndexedAccess ? (node.optional = optional, type = this.finishNode(node, "OptionalIndexedAccessType")) : type = this.finishNode(node, "IndexedAccessType"));
            }
            return type;
          }
          flowParsePrefixType() {
            const node = this.startNode();
            return this.eat(17) ? (node.typeAnnotation = this.flowParsePrefixType(), this.finishNode(node, "NullableTypeAnnotation")) : this.flowParsePostfixType();
          }
          flowParseAnonFunctionWithoutParens() {
            const param = this.flowParsePrefixType();
            if (!this.state.noAnonFunctionType && this.eat(19)) {
              const node = this.startNodeAt(param.loc.start);
              return node.params = [this.reinterpretTypeAsFunctionTypeParam(param)], node.rest = null, node.this = null, node.returnType = this.flowParseType(), node.typeParameters = null, this.finishNode(node, "FunctionTypeAnnotation");
            }
            return param;
          }
          flowParseIntersectionType() {
            const node = this.startNode();
            this.eat(45);
            const type = this.flowParseAnonFunctionWithoutParens();
            for (node.types = [type]; this.eat(45); ) node.types.push(this.flowParseAnonFunctionWithoutParens());
            return 1 === node.types.length ? type : this.finishNode(node, "IntersectionTypeAnnotation");
          }
          flowParseUnionType() {
            const node = this.startNode();
            this.eat(43);
            const type = this.flowParseIntersectionType();
            for (node.types = [type]; this.eat(43); ) node.types.push(this.flowParseIntersectionType());
            return 1 === node.types.length ? type : this.finishNode(node, "UnionTypeAnnotation");
          }
          flowParseType() {
            const oldInType = this.state.inType;
            this.state.inType = true;
            const type = this.flowParseUnionType();
            return this.state.inType = oldInType, type;
          }
          flowParseTypeOrImplicitInstantiation() {
            if (132 === this.state.type && "_" === this.state.value) {
              const startLoc = this.state.startLoc, node = this.parseIdentifier();
              return this.flowParseGenericType(startLoc, node);
            }
            return this.flowParseType();
          }
          flowParseTypeAnnotation() {
            const node = this.startNode();
            return node.typeAnnotation = this.flowParseTypeInitialiser(), this.finishNode(node, "TypeAnnotation");
          }
          flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
            const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
            return this.match(14) && (ident.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(ident)), ident;
          }
          typeCastToParameter(node) {
            return node.expression.typeAnnotation = node.typeAnnotation, this.resetEndLocation(node.expression, node.typeAnnotation.loc.end), node.expression;
          }
          flowParseVariance() {
            let variance = null;
            return this.match(53) ? (variance = this.startNode(), "+" === this.state.value ? variance.kind = "plus" : variance.kind = "minus", this.next(), this.finishNode(variance, "Variance")) : variance;
          }
          parseFunctionBody(node, allowExpressionBody, isMethod = false) {
            allowExpressionBody ? this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod)) : super.parseFunctionBody(node, false, isMethod);
          }
          parseFunctionBodyAndFinish(node, type, isMethod = false) {
            if (this.match(14)) {
              const typeNode = this.startNode();
              [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser(), node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;
            }
            return super.parseFunctionBodyAndFinish(node, type, isMethod);
          }
          parseStatementLike(flags) {
            if (this.state.strict && this.isContextual(129)) {
              if (tokenIsKeywordOrIdentifier(this.lookahead().type)) {
                const node = this.startNode();
                return this.next(), this.flowParseInterface(node);
              }
            } else if (this.isContextual(126)) {
              const node = this.startNode();
              return this.next(), this.flowParseEnumDeclaration(node);
            }
            const stmt = super.parseStatementLike(flags);
            return void 0 !== this.flowPragma || this.isValidDirective(stmt) || (this.flowPragma = null), stmt;
          }
          parseExpressionStatement(node, expr, decorators) {
            if ("Identifier" === expr.type) {
              if ("declare" === expr.name) {
                if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) return this.flowParseDeclare(node);
              } else if (tokenIsIdentifier(this.state.type)) {
                if ("interface" === expr.name) return this.flowParseInterface(node);
                if ("type" === expr.name) return this.flowParseTypeAlias(node);
                if ("opaque" === expr.name) return this.flowParseOpaqueType(node, false);
              }
            }
            return super.parseExpressionStatement(node, expr, decorators);
          }
          shouldParseExportDeclaration() {
            const { type } = this.state;
            return 126 === type || tokenIsFlowInterfaceOrTypeOrOpaque(type) ? !this.state.containsEsc : super.shouldParseExportDeclaration();
          }
          isExportDefaultSpecifier() {
            const { type } = this.state;
            return 126 === type || tokenIsFlowInterfaceOrTypeOrOpaque(type) ? this.state.containsEsc : super.isExportDefaultSpecifier();
          }
          parseExportDefaultExpression() {
            if (this.isContextual(126)) {
              const node = this.startNode();
              return this.next(), this.flowParseEnumDeclaration(node);
            }
            return super.parseExportDefaultExpression();
          }
          parseConditional(expr, startLoc, refExpressionErrors) {
            if (!this.match(17)) return expr;
            if (this.state.maybeInArrowParameters) {
              const nextCh = this.lookaheadCharCode();
              if (44 === nextCh || 61 === nextCh || 58 === nextCh || 41 === nextCh) return this.setOptionalParametersError(refExpressionErrors), expr;
            }
            this.expect(17);
            const state = this.state.clone(), originalNoArrowAt = this.state.noArrowAt, node = this.startNodeAt(startLoc);
            let { consequent, failed } = this.tryParseConditionalConsequent(), [valid, invalid] = this.getArrowLikeExpressions(consequent);
            if (failed || invalid.length > 0) {
              const noArrowAt = [...originalNoArrowAt];
              if (invalid.length > 0) {
                this.state = state, this.state.noArrowAt = noArrowAt;
                for (let i2 = 0; i2 < invalid.length; i2++) noArrowAt.push(invalid[i2].start);
                ({ consequent, failed } = this.tryParseConditionalConsequent()), [valid, invalid] = this.getArrowLikeExpressions(consequent);
              }
              failed && valid.length > 1 && this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc), failed && 1 === valid.length && (this.state = state, noArrowAt.push(valid[0].start), this.state.noArrowAt = noArrowAt, { consequent, failed } = this.tryParseConditionalConsequent());
            }
            return this.getArrowLikeExpressions(consequent, true), this.state.noArrowAt = originalNoArrowAt, this.expect(14), node.test = expr, node.consequent = consequent, node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(void 0, void 0)), this.finishNode(node, "ConditionalExpression");
          }
          tryParseConditionalConsequent() {
            this.state.noArrowParamsConversionAt.push(this.state.start);
            const consequent = this.parseMaybeAssignAllowIn(), failed = !this.match(14);
            return this.state.noArrowParamsConversionAt.pop(), { consequent, failed };
          }
          getArrowLikeExpressions(node, disallowInvalid) {
            const stack = [node], arrows = [];
            for (; 0 !== stack.length; ) {
              const node2 = stack.pop();
              "ArrowFunctionExpression" === node2.type && "BlockStatement" !== node2.body.type ? (node2.typeParameters || !node2.returnType ? this.finishArrowValidation(node2) : arrows.push(node2), stack.push(node2.body)) : "ConditionalExpression" === node2.type && (stack.push(node2.consequent), stack.push(node2.alternate));
            }
            return disallowInvalid ? (arrows.forEach((node2) => this.finishArrowValidation(node2)), [arrows, []]) : function(list, test) {
              const list1 = [], list2 = [];
              for (let i2 = 0; i2 < list.length; i2++) (test(list[i2], i2, list) ? list1 : list2).push(list[i2]);
              return [list1, list2];
            }(arrows, (node2) => node2.params.every((param) => this.isAssignable(param, true)));
          }
          finishArrowValidation(node) {
            var _node$extra;
            this.toAssignableList(node.params, null == (_node$extra = node.extra) ? void 0 : _node$extra.trailingCommaLoc, false), this.scope.enter(6), super.checkParams(node, false, true), this.scope.exit();
          }
          forwardNoArrowParamsConversionAt(node, parse) {
            let result;
            return this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node.start)) ? (this.state.noArrowParamsConversionAt.push(this.state.start), result = parse(), this.state.noArrowParamsConversionAt.pop()) : result = parse(), result;
          }
          parseParenItem(node, startLoc) {
            const newNode = super.parseParenItem(node, startLoc);
            if (this.eat(17) && (newNode.optional = true, this.resetEndLocation(node)), this.match(14)) {
              const typeCastNode = this.startNodeAt(startLoc);
              return typeCastNode.expression = newNode, typeCastNode.typeAnnotation = this.flowParseTypeAnnotation(), this.finishNode(typeCastNode, "TypeCastExpression");
            }
            return newNode;
          }
          assertModuleNodeAllowed(node) {
            "ImportDeclaration" === node.type && ("type" === node.importKind || "typeof" === node.importKind) || "ExportNamedDeclaration" === node.type && "type" === node.exportKind || "ExportAllDeclaration" === node.type && "type" === node.exportKind || super.assertModuleNodeAllowed(node);
          }
          parseExportDeclaration(node) {
            if (this.isContextual(130)) {
              node.exportKind = "type";
              const declarationNode = this.startNode();
              return this.next(), this.match(5) ? (node.specifiers = this.parseExportSpecifiers(true), super.parseExportFrom(node), null) : this.flowParseTypeAlias(declarationNode);
            }
            if (this.isContextual(131)) {
              node.exportKind = "type";
              const declarationNode = this.startNode();
              return this.next(), this.flowParseOpaqueType(declarationNode, false);
            }
            if (this.isContextual(129)) {
              node.exportKind = "type";
              const declarationNode = this.startNode();
              return this.next(), this.flowParseInterface(declarationNode);
            }
            if (this.isContextual(126)) {
              node.exportKind = "value";
              const declarationNode = this.startNode();
              return this.next(), this.flowParseEnumDeclaration(declarationNode);
            }
            return super.parseExportDeclaration(node);
          }
          eatExportStar(node) {
            return !!super.eatExportStar(node) || !(!this.isContextual(130) || 55 !== this.lookahead().type) && (node.exportKind = "type", this.next(), this.next(), true);
          }
          maybeParseExportNamespaceSpecifier(node) {
            const { startLoc } = this.state, hasNamespace = super.maybeParseExportNamespaceSpecifier(node);
            return hasNamespace && "type" === node.exportKind && this.unexpected(startLoc), hasNamespace;
          }
          parseClassId(node, isStatement, optionalId) {
            super.parseClassId(node, isStatement, optionalId), this.match(47) && (node.typeParameters = this.flowParseTypeParameterDeclaration());
          }
          parseClassMember(classBody, member, state) {
            const { startLoc } = this.state;
            if (this.isContextual(125)) {
              if (super.parseClassMemberFromModifier(classBody, member)) return;
              member.declare = true;
            }
            super.parseClassMember(classBody, member, state), member.declare && ("ClassProperty" !== member.type && "ClassPrivateProperty" !== member.type && "PropertyDefinition" !== member.type ? this.raise(FlowErrors.DeclareClassElement, startLoc) : member.value && this.raise(FlowErrors.DeclareClassFieldInitializer, member.value));
          }
          isIterator(word) {
            return "iterator" === word || "asyncIterator" === word;
          }
          readIterator() {
            const word = super.readWord1(), fullWord = "@@" + word;
            this.isIterator(word) && this.state.inType || this.raise(Errors.InvalidIdentifier, this.state.curPosition(), { identifierName: fullWord }), this.finishToken(132, fullWord);
          }
          getTokenFromCode(code2) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            123 === code2 && 124 === next ? this.finishOp(6, 2) : !this.state.inType || 62 !== code2 && 60 !== code2 ? this.state.inType && 63 === code2 ? 46 === next ? this.finishOp(18, 2) : this.finishOp(17, 1) : !function(current, next2, next22) {
              return 64 === current && 64 === next2 && isIdentifierStart(next22);
            }(code2, next, this.input.charCodeAt(this.state.pos + 2)) ? super.getTokenFromCode(code2) : (this.state.pos += 2, this.readIterator()) : this.finishOp(62 === code2 ? 48 : 47, 1);
          }
          isAssignable(node, isBinding) {
            return "TypeCastExpression" === node.type ? this.isAssignable(node.expression, isBinding) : super.isAssignable(node, isBinding);
          }
          toAssignable(node, isLHS = false) {
            isLHS || "AssignmentExpression" !== node.type || "TypeCastExpression" !== node.left.type || (node.left = this.typeCastToParameter(node.left)), super.toAssignable(node, isLHS);
          }
          toAssignableList(exprList, trailingCommaLoc, isLHS) {
            for (let i2 = 0; i2 < exprList.length; i2++) {
              const expr = exprList[i2];
              "TypeCastExpression" === (null == expr ? void 0 : expr.type) && (exprList[i2] = this.typeCastToParameter(expr));
            }
            super.toAssignableList(exprList, trailingCommaLoc, isLHS);
          }
          toReferencedList(exprList, isParenthesizedExpr) {
            for (let i2 = 0; i2 < exprList.length; i2++) {
              var _expr$extra;
              const expr = exprList[i2];
              !expr || "TypeCastExpression" !== expr.type || null != (_expr$extra = expr.extra) && _expr$extra.parenthesized || !(exprList.length > 1) && isParenthesizedExpr || this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);
            }
            return exprList;
          }
          parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
            const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
            return canBePattern && !this.state.maybeInArrowParameters && this.toReferencedList(node.elements), node;
          }
          isValidLVal(type, isParenthesized, binding) {
            return "TypeCastExpression" === type || super.isValidLVal(type, isParenthesized, binding);
          }
          parseClassProperty(node) {
            return this.match(14) && (node.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassProperty(node);
          }
          parseClassPrivateProperty(node) {
            return this.match(14) && (node.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassPrivateProperty(node);
          }
          isClassMethod() {
            return this.match(47) || super.isClassMethod();
          }
          isClassProperty() {
            return this.match(14) || super.isClassProperty();
          }
          isNonstaticConstructor(method) {
            return !this.match(14) && super.isNonstaticConstructor(method);
          }
          pushClassMethod(classBody, method, isGenerator2, isAsync, isConstructor, allowsDirectSuper) {
            if (method.variance && this.unexpected(method.variance.loc.start), delete method.variance, this.match(47) && (method.typeParameters = this.flowParseTypeParameterDeclaration()), super.pushClassMethod(classBody, method, isGenerator2, isAsync, isConstructor, allowsDirectSuper), method.params && isConstructor) {
              const params = method.params;
              params.length > 0 && this.isThisParam(params[0]) && this.raise(FlowErrors.ThisParamBannedInConstructor, method);
            } else if ("MethodDefinition" === method.type && isConstructor && method.value.params) {
              const params = method.value.params;
              params.length > 0 && this.isThisParam(params[0]) && this.raise(FlowErrors.ThisParamBannedInConstructor, method);
            }
          }
          pushClassPrivateMethod(classBody, method, isGenerator2, isAsync) {
            method.variance && this.unexpected(method.variance.loc.start), delete method.variance, this.match(47) && (method.typeParameters = this.flowParseTypeParameterDeclaration()), super.pushClassPrivateMethod(classBody, method, isGenerator2, isAsync);
          }
          parseClassSuper(node) {
            if (super.parseClassSuper(node), node.superClass && this.match(47) && (node.superTypeParameters = this.flowParseTypeParameterInstantiation()), this.isContextual(113)) {
              this.next();
              const implemented = node.implements = [];
              do {
                const node2 = this.startNode();
                node2.id = this.flowParseRestrictedIdentifier(true), this.match(47) ? node2.typeParameters = this.flowParseTypeParameterInstantiation() : node2.typeParameters = null, implemented.push(this.finishNode(node2, "ClassImplements"));
              } while (this.eat(12));
            }
          }
          checkGetterSetterParams(method) {
            super.checkGetterSetterParams(method);
            const params = this.getObjectOrClassMethodParams(method);
            if (params.length > 0) {
              const param = params[0];
              this.isThisParam(param) && "get" === method.kind ? this.raise(FlowErrors.GetterMayNotHaveThisParam, param) : this.isThisParam(param) && this.raise(FlowErrors.SetterMayNotHaveThisParam, param);
            }
          }
          parsePropertyNamePrefixOperator(node) {
            node.variance = this.flowParseVariance();
          }
          parseObjPropValue(prop, startLoc, isGenerator2, isAsync, isPattern, isAccessor, refExpressionErrors) {
            let typeParameters;
            prop.variance && this.unexpected(prop.variance.loc.start), delete prop.variance, this.match(47) && !isAccessor && (typeParameters = this.flowParseTypeParameterDeclaration(), this.match(10) || this.unexpected());
            const result = super.parseObjPropValue(prop, startLoc, isGenerator2, isAsync, isPattern, isAccessor, refExpressionErrors);
            return typeParameters && ((result.value || result).typeParameters = typeParameters), result;
          }
          parseFunctionParamType(param) {
            return this.eat(17) && ("Identifier" !== param.type && this.raise(FlowErrors.PatternIsOptional, param), this.isThisParam(param) && this.raise(FlowErrors.ThisParamMayNotBeOptional, param), param.optional = true), this.match(14) ? param.typeAnnotation = this.flowParseTypeAnnotation() : this.isThisParam(param) && this.raise(FlowErrors.ThisParamAnnotationRequired, param), this.match(29) && this.isThisParam(param) && this.raise(FlowErrors.ThisParamNoDefault, param), this.resetEndLocation(param), param;
          }
          parseMaybeDefault(startLoc, left) {
            const node = super.parseMaybeDefault(startLoc, left);
            return "AssignmentPattern" === node.type && node.typeAnnotation && node.right.start < node.typeAnnotation.start && this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation), node;
          }
          checkImportReflection(node) {
            super.checkImportReflection(node), node.module && "value" !== node.importKind && this.raise(FlowErrors.ImportReflectionHasImportType, node.specifiers[0].loc.start);
          }
          parseImportSpecifierLocal(node, specifier, type) {
            specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier(), node.specifiers.push(this.finishImportSpecifier(specifier, type));
          }
          isPotentialImportPhase(isExport) {
            if (super.isPotentialImportPhase(isExport)) return true;
            if (this.isContextual(130)) {
              if (!isExport) return true;
              const ch = this.lookaheadCharCode();
              return 123 === ch || 42 === ch;
            }
            return !isExport && this.isContextual(87);
          }
          applyImportPhase(node, isExport, phase, loc) {
            if (super.applyImportPhase(node, isExport, phase, loc), isExport) {
              if (!phase && this.match(65)) return;
              node.exportKind = "type" === phase ? phase : "value";
            } else "type" === phase && this.match(55) && this.unexpected(), node.importKind = "type" === phase || "typeof" === phase ? phase : "value";
          }
          parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
            const firstIdent = specifier.imported;
            let specifierTypeKind = null;
            "Identifier" === firstIdent.type && ("type" === firstIdent.name ? specifierTypeKind = "type" : "typeof" === firstIdent.name && (specifierTypeKind = "typeof"));
            let isBinding = false;
            if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
              const as_ident = this.parseIdentifier(true);
              null === specifierTypeKind || tokenIsKeywordOrIdentifier(this.state.type) ? (specifier.imported = firstIdent, specifier.importKind = null, specifier.local = this.parseIdentifier()) : (specifier.imported = as_ident, specifier.importKind = specifierTypeKind, specifier.local = cloneIdentifier(as_ident));
            } else {
              if (null !== specifierTypeKind && tokenIsKeywordOrIdentifier(this.state.type)) specifier.imported = this.parseIdentifier(true), specifier.importKind = specifierTypeKind;
              else {
                if (importedIsString) throw this.raise(Errors.ImportBindingIsString, specifier, { importName: firstIdent.value });
                specifier.imported = firstIdent, specifier.importKind = null;
              }
              this.eatContextual(93) ? specifier.local = this.parseIdentifier() : (isBinding = true, specifier.local = cloneIdentifier(specifier.imported));
            }
            const specifierIsTypeImport = hasTypeImportKind(specifier);
            return isInTypeOnlyImport && specifierIsTypeImport && this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier), (isInTypeOnlyImport || specifierIsTypeImport) && this.checkReservedType(specifier.local.name, specifier.local.loc.start, true), !isBinding || isInTypeOnlyImport || specifierIsTypeImport || this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true), this.finishImportSpecifier(specifier, "ImportSpecifier");
          }
          parseBindingAtom() {
            return 78 === this.state.type ? this.parseIdentifier(true) : super.parseBindingAtom();
          }
          parseFunctionParams(node, isConstructor) {
            const kind = node.kind;
            "get" !== kind && "set" !== kind && this.match(47) && (node.typeParameters = this.flowParseTypeParameterDeclaration()), super.parseFunctionParams(node, isConstructor);
          }
          parseVarId(decl, kind) {
            super.parseVarId(decl, kind), this.match(14) && (decl.id.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(decl.id));
          }
          parseAsyncArrowFromCallExpression(node, call) {
            if (this.match(14)) {
              const oldNoAnonFunctionType = this.state.noAnonFunctionType;
              this.state.noAnonFunctionType = true, node.returnType = this.flowParseTypeAnnotation(), this.state.noAnonFunctionType = oldNoAnonFunctionType;
            }
            return super.parseAsyncArrowFromCallExpression(node, call);
          }
          shouldParseAsyncArrow() {
            return this.match(14) || super.shouldParseAsyncArrow();
          }
          parseMaybeAssign(refExpressionErrors, afterLeftParse) {
            var _jsx;
            let jsx, state = null;
            if (this.hasPlugin("jsx") && (this.match(143) || this.match(47))) {
              if (state = this.state.clone(), jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state), !jsx.error) return jsx.node;
              const { context } = this.state, currentContext = context[context.length - 1];
              currentContext !== types.j_oTag && currentContext !== types.j_expr || context.pop();
            }
            if (null != (_jsx = jsx) && _jsx.error || this.match(47)) {
              var _jsx2, _jsx3;
              let typeParameters;
              state = state || this.state.clone();
              const arrow = this.tryParse((abort) => {
                var _arrowExpression$extr;
                typeParameters = this.flowParseTypeParameterDeclaration();
                const arrowExpression2 = this.forwardNoArrowParamsConversionAt(typeParameters, () => {
                  const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
                  return this.resetStartLocationFromNode(result, typeParameters), result;
                });
                null != (_arrowExpression$extr = arrowExpression2.extra) && _arrowExpression$extr.parenthesized && abort();
                const expr = this.maybeUnwrapTypeCastExpression(arrowExpression2);
                return "ArrowFunctionExpression" !== expr.type && abort(), expr.typeParameters = typeParameters, this.resetStartLocationFromNode(expr, typeParameters), arrowExpression2;
              }, state);
              let arrowExpression = null;
              if (arrow.node && "ArrowFunctionExpression" === this.maybeUnwrapTypeCastExpression(arrow.node).type) {
                if (!arrow.error && !arrow.aborted) return arrow.node.async && this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, typeParameters), arrow.node;
                arrowExpression = arrow.node;
              }
              if (null != (_jsx2 = jsx) && _jsx2.node) return this.state = jsx.failState, jsx.node;
              if (arrowExpression) return this.state = arrow.failState, arrowExpression;
              if (null != (_jsx3 = jsx) && _jsx3.thrown) throw jsx.error;
              if (arrow.thrown) throw arrow.error;
              throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, typeParameters);
            }
            return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
          }
          parseArrow(node) {
            if (this.match(14)) {
              const result = this.tryParse(() => {
                const oldNoAnonFunctionType = this.state.noAnonFunctionType;
                this.state.noAnonFunctionType = true;
                const typeNode = this.startNode();
                return [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser(), this.state.noAnonFunctionType = oldNoAnonFunctionType, this.canInsertSemicolon() && this.unexpected(), this.match(19) || this.unexpected(), typeNode;
              });
              if (result.thrown) return null;
              result.error && (this.state = result.failState), node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, "TypeAnnotation") : null;
            }
            return super.parseArrow(node);
          }
          shouldParseArrow(params) {
            return this.match(14) || super.shouldParseArrow(params);
          }
          setArrowFunctionParameters(node, params) {
            this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node.start)) ? node.params = params : super.setArrowFunctionParameters(node, params);
          }
          checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
            if (!isArrowFunction || !this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node.start))) {
              for (let i2 = 0; i2 < node.params.length; i2++) this.isThisParam(node.params[i2]) && i2 > 0 && this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i2]);
              super.checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged);
            }
          }
          parseParenAndDistinguishExpression(canBeArrow) {
            return super.parseParenAndDistinguishExpression(canBeArrow && !this.state.noArrowAt.includes(this.sourceToOffsetPos(this.state.start)));
          }
          parseSubscripts(base, startLoc, noCalls) {
            if ("Identifier" === base.type && "async" === base.name && this.state.noArrowAt.includes(startLoc.index)) {
              this.next();
              const node = this.startNodeAt(startLoc);
              node.callee = base, node.arguments = super.parseCallExpressionArguments(11), base = this.finishNode(node, "CallExpression");
            } else if ("Identifier" === base.type && "async" === base.name && this.match(47)) {
              const state = this.state.clone(), arrow = this.tryParse((abort) => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(), state);
              if (!arrow.error && !arrow.aborted) return arrow.node;
              const result = this.tryParse(() => super.parseSubscripts(base, startLoc, noCalls), state);
              if (result.node && !result.error) return result.node;
              if (arrow.node) return this.state = arrow.failState, arrow.node;
              if (result.node) return this.state = result.failState, result.node;
              throw arrow.error || result.error;
            }
            return super.parseSubscripts(base, startLoc, noCalls);
          }
          parseSubscript(base, startLoc, noCalls, subscriptState) {
            if (this.match(18) && this.isLookaheadToken_lt()) {
              if (subscriptState.optionalChainMember = true, noCalls) return subscriptState.stop = true, base;
              this.next();
              const node = this.startNodeAt(startLoc);
              return node.callee = base, node.typeArguments = this.flowParseTypeParameterInstantiation(), this.expect(10), node.arguments = this.parseCallExpressionArguments(11), node.optional = true, this.finishCallExpression(node, true);
            }
            if (!noCalls && this.shouldParseTypes() && this.match(47)) {
              const node = this.startNodeAt(startLoc);
              node.callee = base;
              const result = this.tryParse(() => (node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew(), this.expect(10), node.arguments = super.parseCallExpressionArguments(11), subscriptState.optionalChainMember && (node.optional = false), this.finishCallExpression(node, subscriptState.optionalChainMember)));
              if (result.node) return result.error && (this.state = result.failState), result.node;
            }
            return super.parseSubscript(base, startLoc, noCalls, subscriptState);
          }
          parseNewCallee(node) {
            super.parseNewCallee(node);
            let targs = null;
            this.shouldParseTypes() && this.match(47) && (targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node), node.typeArguments = targs;
          }
          parseAsyncArrowWithTypeParameters(startLoc) {
            const node = this.startNodeAt(startLoc);
            if (this.parseFunctionParams(node, false), this.parseArrow(node)) return super.parseArrowExpression(node, void 0, true);
          }
          readToken_mult_modulo(code2) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (42 === code2 && 47 === next && this.state.hasFlowComment) return this.state.hasFlowComment = false, this.state.pos += 2, void this.nextToken();
            super.readToken_mult_modulo(code2);
          }
          readToken_pipe_amp(code2) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            124 !== code2 || 125 !== next ? super.readToken_pipe_amp(code2) : this.finishOp(9, 2);
          }
          parseTopLevel(file, program) {
            const fileNode = super.parseTopLevel(file, program);
            return this.state.hasFlowComment && this.raise(FlowErrors.UnterminatedFlowComment, this.state.curPosition()), fileNode;
          }
          skipBlockComment() {
            if (!this.hasPlugin("flowComments") || !this.skipFlowComment()) return super.skipBlockComment(this.state.hasFlowComment ? "*-/" : "*/");
            {
              if (this.state.hasFlowComment) throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);
              this.hasFlowCommentCompletion();
              const commentSkip = this.skipFlowComment();
              commentSkip && (this.state.pos += commentSkip, this.state.hasFlowComment = true);
            }
          }
          skipFlowComment() {
            const { pos } = this.state;
            let shiftToFirstNonWhiteSpace = 2;
            for (; [32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace)); ) shiftToFirstNonWhiteSpace++;
            const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos), ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);
            return 58 === ch2 && 58 === ch3 ? shiftToFirstNonWhiteSpace + 2 : "flow-include" === this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) ? shiftToFirstNonWhiteSpace + 12 : 58 === ch2 && 58 !== ch3 && shiftToFirstNonWhiteSpace;
          }
          hasFlowCommentCompletion() {
            if (-1 === this.input.indexOf("*/", this.state.pos)) throw this.raise(Errors.UnterminatedComment, this.state.curPosition());
          }
          flowEnumErrorBooleanMemberNotInitialized(loc, { enumName, memberName }) {
            this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, { memberName, enumName });
          }
          flowEnumErrorInvalidMemberInitializer(loc, enumContext) {
            return this.raise(enumContext.explicitType ? "symbol" === enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType : FlowErrors.EnumInvalidMemberInitializerUnknownType, loc, enumContext);
          }
          flowEnumErrorNumberMemberNotInitialized(loc, details) {
            this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);
          }
          flowEnumErrorStringMemberInconsistentlyInitialized(node, details) {
            this.raise(FlowErrors.EnumStringMemberInconsistentlyInitialized, node, details);
          }
          flowEnumMemberInit() {
            const startLoc = this.state.startLoc, endOfInit = () => this.match(12) || this.match(8);
            switch (this.state.type) {
              case 135: {
                const literal = this.parseNumericLiteral(this.state.value);
                return endOfInit() ? { type: "number", loc: literal.loc.start, value: literal } : { type: "invalid", loc: startLoc };
              }
              case 134: {
                const literal = this.parseStringLiteral(this.state.value);
                return endOfInit() ? { type: "string", loc: literal.loc.start, value: literal } : { type: "invalid", loc: startLoc };
              }
              case 85:
              case 86: {
                const literal = this.parseBooleanLiteral(this.match(85));
                return endOfInit() ? { type: "boolean", loc: literal.loc.start, value: literal } : { type: "invalid", loc: startLoc };
              }
              default:
                return { type: "invalid", loc: startLoc };
            }
          }
          flowEnumMemberRaw() {
            const loc = this.state.startLoc;
            return { id: this.parseIdentifier(true), init: this.eat(29) ? this.flowEnumMemberInit() : { type: "none", loc } };
          }
          flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {
            const { explicitType } = context;
            null !== explicitType && explicitType !== expectedType && this.flowEnumErrorInvalidMemberInitializer(loc, context);
          }
          flowEnumMembers({ enumName, explicitType }) {
            const seenNames = /* @__PURE__ */ new Set(), members = { booleanMembers: [], numberMembers: [], stringMembers: [], defaultedMembers: [] };
            let hasUnknownMembers = false;
            for (; !this.match(8); ) {
              if (this.eat(21)) {
                hasUnknownMembers = true;
                break;
              }
              const memberNode = this.startNode(), { id, init } = this.flowEnumMemberRaw(), memberName = id.name;
              if ("" === memberName) continue;
              /^[a-z]/.test(memberName) && this.raise(FlowErrors.EnumInvalidMemberName, id, { memberName, suggestion: memberName[0].toUpperCase() + memberName.slice(1), enumName }), seenNames.has(memberName) && this.raise(FlowErrors.EnumDuplicateMemberName, id, { memberName, enumName }), seenNames.add(memberName);
              const context = { enumName, explicitType, memberName };
              switch (memberNode.id = id, init.type) {
                case "boolean":
                  this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "boolean"), memberNode.init = init.value, members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));
                  break;
                case "number":
                  this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "number"), memberNode.init = init.value, members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));
                  break;
                case "string":
                  this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "string"), memberNode.init = init.value, members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));
                  break;
                case "invalid":
                  throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);
                case "none":
                  switch (explicitType) {
                    case "boolean":
                      this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);
                      break;
                    case "number":
                      this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);
                      break;
                    default:
                      members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));
                  }
              }
              this.match(8) || this.expect(12);
            }
            return { members, hasUnknownMembers };
          }
          flowEnumStringMembers(initializedMembers, defaultedMembers, { enumName }) {
            if (0 === initializedMembers.length) return defaultedMembers;
            if (0 === defaultedMembers.length) return initializedMembers;
            if (defaultedMembers.length > initializedMembers.length) {
              for (const member of initializedMembers) this.flowEnumErrorStringMemberInconsistentlyInitialized(member, { enumName });
              return defaultedMembers;
            }
            for (const member of defaultedMembers) this.flowEnumErrorStringMemberInconsistentlyInitialized(member, { enumName });
            return initializedMembers;
          }
          flowEnumParseExplicitType({ enumName }) {
            if (!this.eatContextual(102)) return null;
            if (!tokenIsIdentifier(this.state.type)) throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, this.state.startLoc, { enumName });
            const { value: value2 } = this.state;
            return this.next(), "boolean" !== value2 && "number" !== value2 && "string" !== value2 && "symbol" !== value2 && this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, { enumName, invalidEnumType: value2 }), value2;
          }
          flowEnumBody(node, id) {
            const enumName = id.name, nameLoc = id.loc.start, explicitType = this.flowEnumParseExplicitType({ enumName });
            this.expect(5);
            const { members, hasUnknownMembers } = this.flowEnumMembers({ enumName, explicitType });
            switch (node.hasUnknownMembers = hasUnknownMembers, explicitType) {
              case "boolean":
                return node.explicitType = true, node.members = members.booleanMembers, this.expect(8), this.finishNode(node, "EnumBooleanBody");
              case "number":
                return node.explicitType = true, node.members = members.numberMembers, this.expect(8), this.finishNode(node, "EnumNumberBody");
              case "string":
                return node.explicitType = true, node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, { enumName }), this.expect(8), this.finishNode(node, "EnumStringBody");
              case "symbol":
                return node.members = members.defaultedMembers, this.expect(8), this.finishNode(node, "EnumSymbolBody");
              default: {
                const empty = () => (node.members = [], this.expect(8), this.finishNode(node, "EnumStringBody"));
                node.explicitType = false;
                const boolsLen = members.booleanMembers.length, numsLen = members.numberMembers.length, strsLen = members.stringMembers.length, defaultedLen = members.defaultedMembers.length;
                if (boolsLen || numsLen || strsLen || defaultedLen) {
                  if (boolsLen || numsLen) {
                    if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
                      for (const member of members.defaultedMembers) this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, { enumName, memberName: member.id.name });
                      return node.members = members.booleanMembers, this.expect(8), this.finishNode(node, "EnumBooleanBody");
                    }
                    if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
                      for (const member of members.defaultedMembers) this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, { enumName, memberName: member.id.name });
                      return node.members = members.numberMembers, this.expect(8), this.finishNode(node, "EnumNumberBody");
                    }
                    return this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, { enumName }), empty();
                  }
                  return node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, { enumName }), this.expect(8), this.finishNode(node, "EnumStringBody");
                }
                return empty();
              }
            }
          }
          flowParseEnumDeclaration(node) {
            const id = this.parseIdentifier();
            return node.id = id, node.body = this.flowEnumBody(this.startNode(), id), this.finishNode(node, "EnumDeclaration");
          }
          isLookaheadToken_lt() {
            const next = this.nextTokenStart();
            if (60 === this.input.charCodeAt(next)) {
              const afterNext = this.input.charCodeAt(next + 1);
              return 60 !== afterNext && 61 !== afterNext;
            }
            return false;
          }
          maybeUnwrapTypeCastExpression(node) {
            return "TypeCastExpression" === node.type ? node.expression : node;
          }
        }, typescript: (superClass) => class extends superClass {
          constructor(...args) {
            super(...args), this.tsParseInOutModifiers = this.tsParseModifiers.bind(this, { allowedModifiers: ["in", "out"], disallowedModifiers: ["const", "public", "private", "protected", "readonly", "declare", "abstract", "override"], errorTemplate: TSErrors.InvalidModifierOnTypeParameter }), this.tsParseConstModifier = this.tsParseModifiers.bind(this, { allowedModifiers: ["const"], disallowedModifiers: ["in", "out"], errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions }), this.tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, { allowedModifiers: ["in", "out", "const"], disallowedModifiers: ["public", "private", "protected", "readonly", "declare", "abstract", "override"], errorTemplate: TSErrors.InvalidModifierOnTypeParameter });
          }
          getScopeHandler() {
            return TypeScriptScopeHandler;
          }
          tsIsIdentifier() {
            return tokenIsIdentifier(this.state.type);
          }
          tsTokenCanFollowModifier() {
            return this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(139) || this.isLiteralPropertyName();
          }
          tsNextTokenOnSameLineAndCanFollowModifier() {
            return this.next(), !this.hasPrecedingLineBreak() && this.tsTokenCanFollowModifier();
          }
          tsNextTokenCanFollowModifier() {
            return this.match(106) ? (this.next(), this.tsTokenCanFollowModifier()) : this.tsNextTokenOnSameLineAndCanFollowModifier();
          }
          tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {
            if (!tokenIsIdentifier(this.state.type) && 58 !== this.state.type && 75 !== this.state.type) return;
            const modifier = this.state.value;
            if (allowedModifiers.includes(modifier)) {
              if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) return;
              if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) return modifier;
            }
          }
          tsParseModifiers({ allowedModifiers, disallowedModifiers, stopOnStartOfClassStaticBlock, errorTemplate = TSErrors.InvalidModifierOnTypeMember }, modified) {
            const enforceOrder = (loc, modifier, before, after) => {
              modifier === before && modified[after] && this.raise(TSErrors.InvalidModifiersOrder, loc, { orderedModifiers: [before, after] });
            }, incompatible = (loc, modifier, mod1, mod2) => {
              (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) && this.raise(TSErrors.IncompatibleModifiers, loc, { modifiers: [mod1, mod2] });
            };
            for (; ; ) {
              const { startLoc } = this.state, modifier = this.tsParseModifier(allowedModifiers.concat(null != disallowedModifiers ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);
              if (!modifier) break;
              tsIsAccessModifier(modifier) ? modified.accessibility ? this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, { modifier }) : (enforceOrder(startLoc, modifier, modifier, "override"), enforceOrder(startLoc, modifier, modifier, "static"), enforceOrder(startLoc, modifier, modifier, "readonly"), modified.accessibility = modifier) : tsIsVarianceAnnotations(modifier) ? (modified[modifier] && this.raise(TSErrors.DuplicateModifier, startLoc, { modifier }), modified[modifier] = true, enforceOrder(startLoc, modifier, "in", "out")) : (hasOwnProperty.call(modified, modifier) ? this.raise(TSErrors.DuplicateModifier, startLoc, { modifier }) : (enforceOrder(startLoc, modifier, "static", "readonly"), enforceOrder(startLoc, modifier, "static", "override"), enforceOrder(startLoc, modifier, "override", "readonly"), enforceOrder(startLoc, modifier, "abstract", "override"), incompatible(startLoc, modifier, "declare", "override"), incompatible(startLoc, modifier, "static", "abstract")), modified[modifier] = true), null != disallowedModifiers && disallowedModifiers.includes(modifier) && this.raise(errorTemplate, startLoc, { modifier });
            }
          }
          tsIsListTerminator(kind) {
            switch (kind) {
              case "EnumMembers":
              case "TypeMembers":
                return this.match(8);
              case "HeritageClauseElement":
                return this.match(5);
              case "TupleElementTypes":
                return this.match(3);
              case "TypeParametersOrArguments":
                return this.match(48);
            }
          }
          tsParseList(kind, parseElement) {
            const result = [];
            for (; !this.tsIsListTerminator(kind); ) result.push(parseElement());
            return result;
          }
          tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {
            return function(x) {
              if (null == x) throw new Error(`Unexpected ${x} value.`);
              return x;
            }(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));
          }
          tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {
            const result = [];
            let trailingCommaPos = -1;
            for (; !this.tsIsListTerminator(kind); ) {
              trailingCommaPos = -1;
              const element = parseElement();
              if (null == element) return;
              if (result.push(element), !this.eat(12)) {
                if (this.tsIsListTerminator(kind)) break;
                return void (expectSuccess && this.expect(12));
              }
              trailingCommaPos = this.state.lastTokStartLoc.index;
            }
            return refTrailingCommaPos && (refTrailingCommaPos.value = trailingCommaPos), result;
          }
          tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {
            skipFirstToken || (bracket ? this.expect(0) : this.expect(47));
            const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);
            return bracket ? this.expect(3) : this.expect(48), result;
          }
          tsParseImportType() {
            const node = this.startNode();
            return this.expect(83), this.expect(10), this.match(134) || this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc), node.argument = super.parseExprAtom(), this.eat(12) && !this.match(11) ? (node.options = super.parseMaybeAssignAllowIn(), this.eat(12)) : node.options = null, this.expect(11), this.eat(16) && (node.qualifier = this.tsParseEntityName()), this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSImportType");
          }
          tsParseEntityName(allowReservedWords = true) {
            let entity = this.parseIdentifier(allowReservedWords);
            for (; this.eat(16); ) {
              const node = this.startNodeAtNode(entity);
              node.left = entity, node.right = this.parseIdentifier(allowReservedWords), entity = this.finishNode(node, "TSQualifiedName");
            }
            return entity;
          }
          tsParseTypeReference() {
            const node = this.startNode();
            return node.typeName = this.tsParseEntityName(), !this.hasPrecedingLineBreak() && this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSTypeReference");
          }
          tsParseThisTypePredicate(lhs) {
            this.next();
            const node = this.startNodeAtNode(lhs);
            return node.parameterName = lhs, node.typeAnnotation = this.tsParseTypeAnnotation(false), node.asserts = false, this.finishNode(node, "TSTypePredicate");
          }
          tsParseThisTypeNode() {
            const node = this.startNode();
            return this.next(), this.finishNode(node, "TSThisType");
          }
          tsParseTypeQuery() {
            const node = this.startNode();
            return this.expect(87), this.match(83) ? node.exprName = this.tsParseImportType() : node.exprName = this.tsParseEntityName(), !this.hasPrecedingLineBreak() && this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSTypeQuery");
          }
          tsParseTypeParameter(parseModifiers) {
            const node = this.startNode();
            return parseModifiers(node), node.name = this.tsParseTypeParameterName(), node.constraint = this.tsEatThenParseType(81), node.default = this.tsEatThenParseType(29), this.finishNode(node, "TSTypeParameter");
          }
          tsTryParseTypeParameters(parseModifiers) {
            if (this.match(47)) return this.tsParseTypeParameters(parseModifiers);
          }
          tsParseTypeParameters(parseModifiers) {
            const node = this.startNode();
            this.match(47) || this.match(143) ? this.next() : this.unexpected();
            const refTrailingCommaPos = { value: -1 };
            return node.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos), 0 === node.params.length && this.raise(TSErrors.EmptyTypeParameters, node), -1 !== refTrailingCommaPos.value && this.addExtra(node, "trailingComma", refTrailingCommaPos.value), this.finishNode(node, "TSTypeParameterDeclaration");
          }
          tsFillSignature(returnToken, signature) {
            const returnTokenRequired = 19 === returnToken;
            signature.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier), this.expect(10), signature.parameters = this.tsParseBindingListForSignature(), (returnTokenRequired || this.match(returnToken)) && (signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken));
          }
          tsParseBindingListForSignature() {
            const list = super.parseBindingList(11, 41, 2);
            for (const pattern of list) {
              const { type } = pattern;
              "AssignmentPattern" !== type && "TSParameterProperty" !== type || this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, { type });
            }
            return list;
          }
          tsParseTypeMemberSemicolon() {
            this.eat(12) || this.isLineTerminator() || this.expect(13);
          }
          tsParseSignatureMember(kind, node) {
            return this.tsFillSignature(14, node), this.tsParseTypeMemberSemicolon(), this.finishNode(node, kind);
          }
          tsIsUnambiguouslyIndexSignature() {
            return this.next(), !!tokenIsIdentifier(this.state.type) && (this.next(), this.match(14));
          }
          tsTryParseIndexSignature(node) {
            if (!this.match(0) || !this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))) return;
            this.expect(0);
            const id = this.parseIdentifier();
            id.typeAnnotation = this.tsParseTypeAnnotation(), this.resetEndLocation(id), this.expect(3), node.parameters = [id];
            const type = this.tsTryParseTypeAnnotation();
            return type && (node.typeAnnotation = type), this.tsParseTypeMemberSemicolon(), this.finishNode(node, "TSIndexSignature");
          }
          tsParsePropertyOrMethodSignature(node, readonly) {
            this.eat(17) && (node.optional = true);
            const nodeAny = node;
            if (this.match(10) || this.match(47)) {
              readonly && this.raise(TSErrors.ReadonlyForMethodSignature, node);
              const method = nodeAny;
              method.kind && this.match(47) && this.raise(TSErrors.AccessorCannotHaveTypeParameters, this.state.curPosition()), this.tsFillSignature(14, method), this.tsParseTypeMemberSemicolon();
              const paramsKey = "parameters", returnTypeKey = "typeAnnotation";
              if ("get" === method.kind) method[paramsKey].length > 0 && (this.raise(Errors.BadGetterArity, this.state.curPosition()), this.isThisParam(method[paramsKey][0]) && this.raise(TSErrors.AccessorCannotDeclareThisParameter, this.state.curPosition()));
              else if ("set" === method.kind) {
                if (1 !== method[paramsKey].length) this.raise(Errors.BadSetterArity, this.state.curPosition());
                else {
                  const firstParameter = method[paramsKey][0];
                  this.isThisParam(firstParameter) && this.raise(TSErrors.AccessorCannotDeclareThisParameter, this.state.curPosition()), "Identifier" === firstParameter.type && firstParameter.optional && this.raise(TSErrors.SetAccessorCannotHaveOptionalParameter, this.state.curPosition()), "RestElement" === firstParameter.type && this.raise(TSErrors.SetAccessorCannotHaveRestParameter, this.state.curPosition());
                }
                method[returnTypeKey] && this.raise(TSErrors.SetAccessorCannotHaveReturnType, method[returnTypeKey]);
              } else method.kind = "method";
              return this.finishNode(method, "TSMethodSignature");
            }
            {
              const property = nodeAny;
              readonly && (property.readonly = true);
              const type = this.tsTryParseTypeAnnotation();
              return type && (property.typeAnnotation = type), this.tsParseTypeMemberSemicolon(), this.finishNode(property, "TSPropertySignature");
            }
          }
          tsParseTypeMember() {
            const node = this.startNode();
            if (this.match(10) || this.match(47)) return this.tsParseSignatureMember("TSCallSignatureDeclaration", node);
            if (this.match(77)) {
              const id = this.startNode();
              return this.next(), this.match(10) || this.match(47) ? this.tsParseSignatureMember("TSConstructSignatureDeclaration", node) : (node.key = this.createIdentifier(id, "new"), this.tsParsePropertyOrMethodSignature(node, false));
            }
            this.tsParseModifiers({ allowedModifiers: ["readonly"], disallowedModifiers: ["declare", "abstract", "private", "protected", "public", "static", "override"] }, node);
            const idx = this.tsTryParseIndexSignature(node);
            return idx || (super.parsePropertyName(node), node.computed || "Identifier" !== node.key.type || "get" !== node.key.name && "set" !== node.key.name || !this.tsTokenCanFollowModifier() || (node.kind = node.key.name, super.parsePropertyName(node)), this.tsParsePropertyOrMethodSignature(node, !!node.readonly));
          }
          tsParseTypeLiteral() {
            const node = this.startNode();
            return node.members = this.tsParseObjectTypeMembers(), this.finishNode(node, "TSTypeLiteral");
          }
          tsParseObjectTypeMembers() {
            this.expect(5);
            const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
            return this.expect(8), members;
          }
          tsIsStartOfMappedType() {
            return this.next(), this.eat(53) ? this.isContextual(122) : (this.isContextual(122) && this.next(), !!this.match(0) && (this.next(), !!this.tsIsIdentifier() && (this.next(), this.match(58))));
          }
          tsParseMappedType() {
            const node = this.startNode();
            this.expect(5), this.match(53) ? (node.readonly = this.state.value, this.next(), this.expectContextual(122)) : this.eatContextual(122) && (node.readonly = true), this.expect(0);
            {
              const typeParameter = this.startNode();
              typeParameter.name = this.tsParseTypeParameterName(), typeParameter.constraint = this.tsExpectThenParseType(58), node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter");
            }
            return node.nameType = this.eatContextual(93) ? this.tsParseType() : null, this.expect(3), this.match(53) ? (node.optional = this.state.value, this.next(), this.expect(17)) : this.eat(17) && (node.optional = true), node.typeAnnotation = this.tsTryParseType(), this.semicolon(), this.expect(8), this.finishNode(node, "TSMappedType");
          }
          tsParseTupleType() {
            const node = this.startNode();
            node.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
            let seenOptionalElement = false;
            return node.elementTypes.forEach((elementNode) => {
              const { type } = elementNode;
              !seenOptionalElement || "TSRestType" === type || "TSOptionalType" === type || "TSNamedTupleMember" === type && elementNode.optional || this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode), seenOptionalElement || (seenOptionalElement = "TSNamedTupleMember" === type && elementNode.optional || "TSOptionalType" === type);
            }), this.finishNode(node, "TSTupleType");
          }
          tsParseTupleElementType() {
            const { startLoc } = this.state, rest = this.eat(21);
            let labeled, label, optional, type;
            const chAfterWord = tokenIsKeywordOrIdentifier(this.state.type) ? this.lookaheadCharCode() : null;
            if (58 === chAfterWord) labeled = true, optional = false, label = this.parseIdentifier(true), this.expect(14), type = this.tsParseType();
            else if (63 === chAfterWord) {
              optional = true;
              const startLoc2 = this.state.startLoc, wordName = this.state.value, typeOrLabel = this.tsParseNonArrayType();
              58 === this.lookaheadCharCode() ? (labeled = true, label = this.createIdentifier(this.startNodeAt(startLoc2), wordName), this.expect(17), this.expect(14), type = this.tsParseType()) : (labeled = false, type = typeOrLabel, this.expect(17));
            } else type = this.tsParseType(), optional = this.eat(17), labeled = this.eat(14);
            if (labeled) {
              let labeledNode;
              label ? (labeledNode = this.startNodeAtNode(label), labeledNode.optional = optional, labeledNode.label = label, labeledNode.elementType = type, this.eat(17) && (labeledNode.optional = true, this.raise(TSErrors.TupleOptionalAfterType, this.state.lastTokStartLoc))) : (labeledNode = this.startNodeAtNode(type), labeledNode.optional = optional, this.raise(TSErrors.InvalidTupleMemberLabel, type), labeledNode.label = type, labeledNode.elementType = this.tsParseType()), type = this.finishNode(labeledNode, "TSNamedTupleMember");
            } else if (optional) {
              const optionalTypeNode = this.startNodeAtNode(type);
              optionalTypeNode.typeAnnotation = type, type = this.finishNode(optionalTypeNode, "TSOptionalType");
            }
            if (rest) {
              const restNode = this.startNodeAt(startLoc);
              restNode.typeAnnotation = type, type = this.finishNode(restNode, "TSRestType");
            }
            return type;
          }
          tsParseParenthesizedType() {
            const node = this.startNode();
            return this.expect(10), node.typeAnnotation = this.tsParseType(), this.expect(11), this.finishNode(node, "TSParenthesizedType");
          }
          tsParseFunctionOrConstructorType(type, abstract) {
            const node = this.startNode();
            return "TSConstructorType" === type && (node.abstract = !!abstract, abstract && this.next(), this.next()), this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node)), this.finishNode(node, type);
          }
          tsParseLiteralTypeNode() {
            const node = this.startNode();
            switch (this.state.type) {
              case 135:
              case 136:
              case 134:
              case 85:
              case 86:
                node.literal = super.parseExprAtom();
                break;
              default:
                this.unexpected();
            }
            return this.finishNode(node, "TSLiteralType");
          }
          tsParseTemplateLiteralType() {
            const node = this.startNode();
            return node.literal = super.parseTemplate(false), this.finishNode(node, "TSLiteralType");
          }
          parseTemplateSubstitution() {
            return this.state.inType ? this.tsParseType() : super.parseTemplateSubstitution();
          }
          tsParseThisTypeOrThisTypePredicate() {
            const thisKeyword = this.tsParseThisTypeNode();
            return this.isContextual(116) && !this.hasPrecedingLineBreak() ? this.tsParseThisTypePredicate(thisKeyword) : thisKeyword;
          }
          tsParseNonArrayType() {
            switch (this.state.type) {
              case 134:
              case 135:
              case 136:
              case 85:
              case 86:
                return this.tsParseLiteralTypeNode();
              case 53:
                if ("-" === this.state.value) {
                  const node = this.startNode(), nextToken = this.lookahead();
                  return 135 !== nextToken.type && 136 !== nextToken.type && this.unexpected(), node.literal = this.parseMaybeUnary(), this.finishNode(node, "TSLiteralType");
                }
                break;
              case 78:
                return this.tsParseThisTypeOrThisTypePredicate();
              case 87:
                return this.tsParseTypeQuery();
              case 83:
                return this.tsParseImportType();
              case 5:
                return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
              case 0:
                return this.tsParseTupleType();
              case 10:
                return this.tsParseParenthesizedType();
              case 25:
              case 24:
                return this.tsParseTemplateLiteralType();
              default: {
                const { type } = this.state;
                if (tokenIsIdentifier(type) || 88 === type || 84 === type) {
                  const nodeType = 88 === type ? "TSVoidKeyword" : 84 === type ? "TSNullKeyword" : function(value2) {
                    switch (value2) {
                      case "any":
                        return "TSAnyKeyword";
                      case "boolean":
                        return "TSBooleanKeyword";
                      case "bigint":
                        return "TSBigIntKeyword";
                      case "never":
                        return "TSNeverKeyword";
                      case "number":
                        return "TSNumberKeyword";
                      case "object":
                        return "TSObjectKeyword";
                      case "string":
                        return "TSStringKeyword";
                      case "symbol":
                        return "TSSymbolKeyword";
                      case "undefined":
                        return "TSUndefinedKeyword";
                      case "unknown":
                        return "TSUnknownKeyword";
                      default:
                        return;
                    }
                  }(this.state.value);
                  if (void 0 !== nodeType && 46 !== this.lookaheadCharCode()) {
                    const node = this.startNode();
                    return this.next(), this.finishNode(node, nodeType);
                  }
                  return this.tsParseTypeReference();
                }
              }
            }
            this.unexpected();
          }
          tsParseArrayTypeOrHigher() {
            let type = this.tsParseNonArrayType();
            for (; !this.hasPrecedingLineBreak() && this.eat(0); ) if (this.match(3)) {
              const node = this.startNodeAtNode(type);
              node.elementType = type, this.expect(3), type = this.finishNode(node, "TSArrayType");
            } else {
              const node = this.startNodeAtNode(type);
              node.objectType = type, node.indexType = this.tsParseType(), this.expect(3), type = this.finishNode(node, "TSIndexedAccessType");
            }
            return type;
          }
          tsParseTypeOperator() {
            const node = this.startNode(), operator = this.state.value;
            return this.next(), node.operator = operator, node.typeAnnotation = this.tsParseTypeOperatorOrHigher(), "readonly" === operator && this.tsCheckTypeAnnotationForReadOnly(node), this.finishNode(node, "TSTypeOperator");
          }
          tsCheckTypeAnnotationForReadOnly(node) {
            switch (node.typeAnnotation.type) {
              case "TSTupleType":
              case "TSArrayType":
                return;
              default:
                this.raise(TSErrors.UnexpectedReadonly, node);
            }
          }
          tsParseInferType() {
            const node = this.startNode();
            this.expectContextual(115);
            const typeParameter = this.startNode();
            return typeParameter.name = this.tsParseTypeParameterName(), typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType()), node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter"), this.finishNode(node, "TSInferType");
          }
          tsParseConstraintForInferType() {
            if (this.eat(81)) {
              const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());
              if (this.state.inDisallowConditionalTypesContext || !this.match(17)) return constraint;
            }
          }
          tsParseTypeOperatorOrHigher() {
            var token;
            return (token = this.state.type) >= 121 && token <= 123 && !this.state.containsEsc ? this.tsParseTypeOperator() : this.isContextual(115) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());
          }
          tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {
            const node = this.startNode(), hasLeadingOperator = this.eat(operator), types2 = [];
            do {
              types2.push(parseConstituentType());
            } while (this.eat(operator));
            return 1 !== types2.length || hasLeadingOperator ? (node.types = types2, this.finishNode(node, kind)) : types2[0];
          }
          tsParseIntersectionTypeOrHigher() {
            return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
          }
          tsParseUnionTypeOrHigher() {
            return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
          }
          tsIsStartOfFunctionType() {
            return !!this.match(47) || this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
          }
          tsSkipParameterStart() {
            if (tokenIsIdentifier(this.state.type) || this.match(78)) return this.next(), true;
            if (this.match(5)) {
              const { errors } = this.state, previousErrorCount = errors.length;
              try {
                return this.parseObjectLike(8, true), errors.length === previousErrorCount;
              } catch (_unused) {
                return false;
              }
            }
            if (this.match(0)) {
              this.next();
              const { errors } = this.state, previousErrorCount = errors.length;
              try {
                return super.parseBindingList(3, 93, 1), errors.length === previousErrorCount;
              } catch (_unused2) {
                return false;
              }
            }
            return false;
          }
          tsIsUnambiguouslyStartOfFunctionType() {
            if (this.next(), this.match(11) || this.match(21)) return true;
            if (this.tsSkipParameterStart()) {
              if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) return true;
              if (this.match(11) && (this.next(), this.match(19))) return true;
            }
            return false;
          }
          tsParseTypeOrTypePredicateAnnotation(returnToken) {
            return this.tsInType(() => {
              const t2 = this.startNode();
              this.expect(returnToken);
              const node = this.startNode(), asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
              if (asserts && this.match(78)) {
                let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();
                return "TSThisType" === thisTypePredicate.type ? (node.parameterName = thisTypePredicate, node.asserts = true, node.typeAnnotation = null, thisTypePredicate = this.finishNode(node, "TSTypePredicate")) : (this.resetStartLocationFromNode(thisTypePredicate, node), thisTypePredicate.asserts = true), t2.typeAnnotation = thisTypePredicate, this.finishNode(t2, "TSTypeAnnotation");
              }
              const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
              if (!typePredicateVariable) return asserts ? (node.parameterName = this.parseIdentifier(), node.asserts = asserts, node.typeAnnotation = null, t2.typeAnnotation = this.finishNode(node, "TSTypePredicate"), this.finishNode(t2, "TSTypeAnnotation")) : this.tsParseTypeAnnotation(false, t2);
              const type = this.tsParseTypeAnnotation(false);
              return node.parameterName = typePredicateVariable, node.typeAnnotation = type, node.asserts = asserts, t2.typeAnnotation = this.finishNode(node, "TSTypePredicate"), this.finishNode(t2, "TSTypeAnnotation");
            });
          }
          tsTryParseTypeOrTypePredicateAnnotation() {
            if (this.match(14)) return this.tsParseTypeOrTypePredicateAnnotation(14);
          }
          tsTryParseTypeAnnotation() {
            if (this.match(14)) return this.tsParseTypeAnnotation();
          }
          tsTryParseType() {
            return this.tsEatThenParseType(14);
          }
          tsParseTypePredicatePrefix() {
            const id = this.parseIdentifier();
            if (this.isContextual(116) && !this.hasPrecedingLineBreak()) return this.next(), id;
          }
          tsParseTypePredicateAsserts() {
            if (109 !== this.state.type) return false;
            const containsEsc = this.state.containsEsc;
            return this.next(), !(!tokenIsIdentifier(this.state.type) && !this.match(78)) && (containsEsc && this.raise(Errors.InvalidEscapedReservedWord, this.state.lastTokStartLoc, { reservedWord: "asserts" }), true);
          }
          tsParseTypeAnnotation(eatColon = true, t2 = this.startNode()) {
            return this.tsInType(() => {
              eatColon && this.expect(14), t2.typeAnnotation = this.tsParseType();
            }), this.finishNode(t2, "TSTypeAnnotation");
          }
          tsParseType() {
            assert(this.state.inType);
            const type = this.tsParseNonConditionalType();
            if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) return type;
            const node = this.startNodeAtNode(type);
            return node.checkType = type, node.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType()), this.expect(17), node.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType()), this.expect(14), node.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType()), this.finishNode(node, "TSConditionalType");
          }
          isAbstractConstructorSignature() {
            return this.isContextual(124) && 77 === this.lookahead().type;
          }
          tsParseNonConditionalType() {
            return this.tsIsStartOfFunctionType() ? this.tsParseFunctionOrConstructorType("TSFunctionType") : this.match(77) ? this.tsParseFunctionOrConstructorType("TSConstructorType") : this.isAbstractConstructorSignature() ? this.tsParseFunctionOrConstructorType("TSConstructorType", true) : this.tsParseUnionTypeOrHigher();
          }
          tsParseTypeAssertion() {
            this.getPluginOption("typescript", "disallowAmbiguousJSXLike") && this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);
            const node = this.startNode();
            return node.typeAnnotation = this.tsInType(() => (this.next(), this.match(75) ? this.tsParseTypeReference() : this.tsParseType())), this.expect(48), node.expression = this.parseMaybeUnary(), this.finishNode(node, "TSTypeAssertion");
          }
          tsParseHeritageClause(token) {
            const originalStartLoc = this.state.startLoc, delimitedList = this.tsParseDelimitedList("HeritageClauseElement", () => {
              const node = this.startNode();
              return node.expression = this.tsParseEntityName(), this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSExpressionWithTypeArguments");
            });
            return delimitedList.length || this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, { token }), delimitedList;
          }
          tsParseInterfaceDeclaration(node, properties = {}) {
            if (this.hasFollowingLineBreak()) return null;
            this.expectContextual(129), properties.declare && (node.declare = true), tokenIsIdentifier(this.state.type) ? (node.id = this.parseIdentifier(), this.checkIdentifier(node.id, 130)) : (node.id = null, this.raise(TSErrors.MissingInterfaceName, this.state.startLoc)), node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers), this.eat(81) && (node.extends = this.tsParseHeritageClause("extends"));
            const body = this.startNode();
            return body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this)), node.body = this.finishNode(body, "TSInterfaceBody"), this.finishNode(node, "TSInterfaceDeclaration");
          }
          tsParseTypeAliasDeclaration(node) {
            return node.id = this.parseIdentifier(), this.checkIdentifier(node.id, 2), node.typeAnnotation = this.tsInType(() => {
              if (node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers), this.expect(29), this.isContextual(114) && 16 !== this.lookahead().type) {
                const node2 = this.startNode();
                return this.next(), this.finishNode(node2, "TSIntrinsicKeyword");
              }
              return this.tsParseType();
            }), this.semicolon(), this.finishNode(node, "TSTypeAliasDeclaration");
          }
          tsInNoContext(cb) {
            const oldContext = this.state.context;
            this.state.context = [oldContext[0]];
            try {
              return cb();
            } finally {
              this.state.context = oldContext;
            }
          }
          tsInType(cb) {
            const oldInType = this.state.inType;
            this.state.inType = true;
            try {
              return cb();
            } finally {
              this.state.inType = oldInType;
            }
          }
          tsInDisallowConditionalTypesContext(cb) {
            const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
            this.state.inDisallowConditionalTypesContext = true;
            try {
              return cb();
            } finally {
              this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
            }
          }
          tsInAllowConditionalTypesContext(cb) {
            const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
            this.state.inDisallowConditionalTypesContext = false;
            try {
              return cb();
            } finally {
              this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
            }
          }
          tsEatThenParseType(token) {
            if (this.match(token)) return this.tsNextThenParseType();
          }
          tsExpectThenParseType(token) {
            return this.tsInType(() => (this.expect(token), this.tsParseType()));
          }
          tsNextThenParseType() {
            return this.tsInType(() => (this.next(), this.tsParseType()));
          }
          tsParseEnumMember() {
            const node = this.startNode();
            return node.id = this.match(134) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true), this.eat(29) && (node.initializer = super.parseMaybeAssignAllowIn()), this.finishNode(node, "TSEnumMember");
          }
          tsParseEnumDeclaration(node, properties = {}) {
            return properties.const && (node.const = true), properties.declare && (node.declare = true), this.expectContextual(126), node.id = this.parseIdentifier(), this.checkIdentifier(node.id, node.const ? 8971 : 8459), this.expect(5), node.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this)), this.expect(8), this.finishNode(node, "TSEnumDeclaration");
          }
          tsParseModuleBlock() {
            const node = this.startNode();
            return this.scope.enter(0), this.expect(5), super.parseBlockOrModuleBlockBody(node.body = [], void 0, true, 8), this.scope.exit(), this.finishNode(node, "TSModuleBlock");
          }
          tsParseModuleOrNamespaceDeclaration(node, nested = false) {
            if (node.id = this.parseIdentifier(), nested || this.checkIdentifier(node.id, 1024), this.eat(16)) {
              const inner = this.startNode();
              this.tsParseModuleOrNamespaceDeclaration(inner, true), node.body = inner;
            } else this.scope.enter(256), this.prodParam.enter(0), node.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit();
            return this.finishNode(node, "TSModuleDeclaration");
          }
          tsParseAmbientExternalModuleDeclaration(node) {
            return this.isContextual(112) ? (node.kind = "global", node.global = true, node.id = this.parseIdentifier()) : this.match(134) ? (node.kind = "module", node.id = super.parseStringLiteral(this.state.value)) : this.unexpected(), this.match(5) ? (this.scope.enter(256), this.prodParam.enter(0), node.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit()) : this.semicolon(), this.finishNode(node, "TSModuleDeclaration");
          }
          tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, isExport) {
            node.isExport = isExport || false, node.id = maybeDefaultIdentifier || this.parseIdentifier(), this.checkIdentifier(node.id, 4096), this.expect(29);
            const moduleReference = this.tsParseModuleReference();
            return "type" === node.importKind && "TSExternalModuleReference" !== moduleReference.type && this.raise(TSErrors.ImportAliasHasImportType, moduleReference), node.moduleReference = moduleReference, this.semicolon(), this.finishNode(node, "TSImportEqualsDeclaration");
          }
          tsIsExternalModuleReference() {
            return this.isContextual(119) && 40 === this.lookaheadCharCode();
          }
          tsParseModuleReference() {
            return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
          }
          tsParseExternalModuleReference() {
            const node = this.startNode();
            return this.expectContextual(119), this.expect(10), this.match(134) || this.unexpected(), node.expression = super.parseExprAtom(), this.expect(11), this.sawUnambiguousESM = true, this.finishNode(node, "TSExternalModuleReference");
          }
          tsLookAhead(f3) {
            const state = this.state.clone(), res = f3();
            return this.state = state, res;
          }
          tsTryParseAndCatch(f3) {
            const result = this.tryParse((abort) => f3() || abort());
            if (!result.aborted && result.node) return result.error && (this.state = result.failState), result.node;
          }
          tsTryParse(f3) {
            const state = this.state.clone(), result = f3();
            if (void 0 !== result && false !== result) return result;
            this.state = state;
          }
          tsTryParseDeclare(nany) {
            if (this.isLineTerminator()) return;
            let kind, startType = this.state.type;
            return this.isContextual(100) && (startType = 74, kind = "let"), this.tsInAmbientContext(() => {
              switch (startType) {
                case 68:
                  return nany.declare = true, super.parseFunctionStatement(nany, false, false);
                case 80:
                  return nany.declare = true, this.parseClass(nany, true, false);
                case 126:
                  return this.tsParseEnumDeclaration(nany, { declare: true });
                case 112:
                  return this.tsParseAmbientExternalModuleDeclaration(nany);
                case 75:
                case 74:
                  return this.match(75) && this.isLookaheadContextual("enum") ? (this.expect(75), this.tsParseEnumDeclaration(nany, { const: true, declare: true })) : (nany.declare = true, this.parseVarStatement(nany, kind || this.state.value, true));
                case 129: {
                  const result = this.tsParseInterfaceDeclaration(nany, { declare: true });
                  if (result) return result;
                }
                default:
                  if (tokenIsIdentifier(startType)) return this.tsParseDeclaration(nany, this.state.value, true, null);
              }
            });
          }
          tsTryParseExportDeclaration() {
            return this.tsParseDeclaration(this.startNode(), this.state.value, true, null);
          }
          tsParseExpressionStatement(node, expr, decorators) {
            switch (expr.name) {
              case "declare": {
                const declaration = this.tsTryParseDeclare(node);
                return declaration && (declaration.declare = true), declaration;
              }
              case "global":
                if (this.match(5)) {
                  this.scope.enter(256), this.prodParam.enter(0);
                  const mod = node;
                  return mod.kind = "global", node.global = true, mod.id = expr, mod.body = this.tsParseModuleBlock(), this.scope.exit(), this.prodParam.exit(), this.finishNode(mod, "TSModuleDeclaration");
                }
                break;
              default:
                return this.tsParseDeclaration(node, expr.name, false, decorators);
            }
          }
          tsParseDeclaration(node, value2, next, decorators) {
            switch (value2) {
              case "abstract":
                if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) return this.tsParseAbstractDeclaration(node, decorators);
                break;
              case "module":
                if (this.tsCheckLineTerminator(next)) {
                  if (this.match(134)) return this.tsParseAmbientExternalModuleDeclaration(node);
                  if (tokenIsIdentifier(this.state.type)) return node.kind = "module", this.tsParseModuleOrNamespaceDeclaration(node);
                }
                break;
              case "namespace":
                if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) return node.kind = "namespace", this.tsParseModuleOrNamespaceDeclaration(node);
                break;
              case "type":
                if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) return this.tsParseTypeAliasDeclaration(node);
            }
          }
          tsCheckLineTerminator(next) {
            return next ? !this.hasFollowingLineBreak() && (this.next(), true) : !this.isLineTerminator();
          }
          tsTryParseGenericAsyncArrowFunction(startLoc) {
            if (!this.match(47)) return;
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            this.state.maybeInArrowParameters = true;
            const res = this.tsTryParseAndCatch(() => {
              const node = this.startNodeAt(startLoc);
              return node.typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier), super.parseFunctionParams(node), node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation(), this.expect(19), node;
            });
            return this.state.maybeInArrowParameters = oldMaybeInArrowParameters, res ? super.parseArrowExpression(res, null, true) : void 0;
          }
          tsParseTypeArgumentsInExpression() {
            if (47 === this.reScan_lt()) return this.tsParseTypeArguments();
          }
          tsParseTypeArguments() {
            const node = this.startNode();
            return node.params = this.tsInType(() => this.tsInNoContext(() => (this.expect(47), this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this))))), 0 === node.params.length ? this.raise(TSErrors.EmptyTypeArguments, node) : this.state.inType || this.curContext() !== types.brace || this.reScan_lt_gt(), this.expect(48), this.finishNode(node, "TSTypeParameterInstantiation");
          }
          tsIsDeclarationStart() {
            return (token = this.state.type) >= 124 && token <= 130;
            var token;
          }
          isExportDefaultSpecifier() {
            return !this.tsIsDeclarationStart() && super.isExportDefaultSpecifier();
          }
          parseAssignableListItem(flags, decorators) {
            const startLoc = this.state.startLoc, modified = {};
            this.tsParseModifiers({ allowedModifiers: ["public", "private", "protected", "override", "readonly"] }, modified);
            const accessibility = modified.accessibility, override = modified.override, readonly = modified.readonly;
            4 & flags || !(accessibility || readonly || override) || this.raise(TSErrors.UnexpectedParameterModifier, startLoc);
            const left = this.parseMaybeDefault();
            2 & flags && this.parseFunctionParamType(left);
            const elt = this.parseMaybeDefault(left.loc.start, left);
            if (accessibility || readonly || override) {
              const pp = this.startNodeAt(startLoc);
              return decorators.length && (pp.decorators = decorators), accessibility && (pp.accessibility = accessibility), readonly && (pp.readonly = readonly), override && (pp.override = override), "Identifier" !== elt.type && "AssignmentPattern" !== elt.type && this.raise(TSErrors.UnsupportedParameterPropertyKind, pp), pp.parameter = elt, this.finishNode(pp, "TSParameterProperty");
            }
            return decorators.length && (left.decorators = decorators), elt;
          }
          isSimpleParameter(node) {
            return "TSParameterProperty" === node.type && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);
          }
          tsDisallowOptionalPattern(node) {
            for (const param of node.params) "Identifier" !== param.type && param.optional && !this.state.isAmbientContext && this.raise(TSErrors.PatternIsOptional, param);
          }
          setArrowFunctionParameters(node, params, trailingCommaLoc) {
            super.setArrowFunctionParameters(node, params, trailingCommaLoc), this.tsDisallowOptionalPattern(node);
          }
          parseFunctionBodyAndFinish(node, type, isMethod = false) {
            this.match(14) && (node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14));
            const bodilessType = "FunctionDeclaration" === type ? "TSDeclareFunction" : "ClassMethod" === type || "ClassPrivateMethod" === type ? "TSDeclareMethod" : void 0;
            return bodilessType && !this.match(5) && this.isLineTerminator() ? this.finishNode(node, bodilessType) : "TSDeclareFunction" === bodilessType && this.state.isAmbientContext && (this.raise(TSErrors.DeclareFunctionHasImplementation, node), node.declare) ? super.parseFunctionBodyAndFinish(node, bodilessType, isMethod) : (this.tsDisallowOptionalPattern(node), super.parseFunctionBodyAndFinish(node, type, isMethod));
          }
          registerFunctionStatementId(node) {
            !node.body && node.id ? this.checkIdentifier(node.id, 1024) : super.registerFunctionStatementId(node);
          }
          tsCheckForInvalidTypeCasts(items) {
            items.forEach((node) => {
              "TSTypeCastExpression" === (null == node ? void 0 : node.type) && this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);
            });
          }
          toReferencedList(exprList, isInParens) {
            return this.tsCheckForInvalidTypeCasts(exprList), exprList;
          }
          parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
            const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
            return "ArrayExpression" === node.type && this.tsCheckForInvalidTypeCasts(node.elements), node;
          }
          parseSubscript(base, startLoc, noCalls, state) {
            if (!this.hasPrecedingLineBreak() && this.match(35)) {
              this.state.canStartJSXElement = false, this.next();
              const nonNullExpression = this.startNodeAt(startLoc);
              return nonNullExpression.expression = base, this.finishNode(nonNullExpression, "TSNonNullExpression");
            }
            let isOptionalCall = false;
            if (this.match(18) && 60 === this.lookaheadCharCode()) {
              if (noCalls) return state.stop = true, base;
              state.optionalChainMember = isOptionalCall = true, this.next();
            }
            if (this.match(47) || this.match(51)) {
              let missingParenErrorLoc;
              const result = this.tsTryParseAndCatch(() => {
                if (!noCalls && this.atPossibleAsyncArrow(base)) {
                  const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startLoc);
                  if (asyncArrowFn) return asyncArrowFn;
                }
                const typeArguments = this.tsParseTypeArgumentsInExpression();
                if (!typeArguments) return;
                if (isOptionalCall && !this.match(10)) return void (missingParenErrorLoc = this.state.curPosition());
                if (tokenIsTemplate(this.state.type)) {
                  const result2 = super.parseTaggedTemplateExpression(base, startLoc, state);
                  return result2.typeParameters = typeArguments, result2;
                }
                if (!noCalls && this.eat(10)) {
                  const node2 = this.startNodeAt(startLoc);
                  return node2.callee = base, node2.arguments = this.parseCallExpressionArguments(11), this.tsCheckForInvalidTypeCasts(node2.arguments), node2.typeParameters = typeArguments, state.optionalChainMember && (node2.optional = isOptionalCall), this.finishCallExpression(node2, state.optionalChainMember);
                }
                const tokenType = this.state.type;
                if (48 === tokenType || 52 === tokenType || 10 !== tokenType && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak()) return;
                const node = this.startNodeAt(startLoc);
                return node.expression = base, node.typeParameters = typeArguments, this.finishNode(node, "TSInstantiationExpression");
              });
              if (missingParenErrorLoc && this.unexpected(missingParenErrorLoc, 10), result) return "TSInstantiationExpression" === result.type && (this.match(16) || this.match(18) && 40 !== this.lookaheadCharCode()) && this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, this.state.startLoc), result;
            }
            return super.parseSubscript(base, startLoc, noCalls, state);
          }
          parseNewCallee(node) {
            var _callee$extra;
            super.parseNewCallee(node);
            const { callee } = node;
            "TSInstantiationExpression" !== callee.type || null != (_callee$extra = callee.extra) && _callee$extra.parenthesized || (node.typeParameters = callee.typeParameters, node.callee = callee.expression);
          }
          parseExprOp(left, leftStartLoc, minPrec) {
            let isSatisfies;
            if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (isSatisfies = this.isContextual(120)))) {
              const node = this.startNodeAt(leftStartLoc);
              return node.expression = left, node.typeAnnotation = this.tsInType(() => (this.next(), this.match(75) ? (isSatisfies && this.raise(Errors.UnexpectedKeyword, this.state.startLoc, { keyword: "const" }), this.tsParseTypeReference()) : this.tsParseType())), this.finishNode(node, isSatisfies ? "TSSatisfiesExpression" : "TSAsExpression"), this.reScan_lt_gt(), this.parseExprOp(node, leftStartLoc, minPrec);
            }
            return super.parseExprOp(left, leftStartLoc, minPrec);
          }
          checkReservedWord(word, startLoc, checkKeywords, isBinding) {
            this.state.isAmbientContext || super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
          }
          checkImportReflection(node) {
            super.checkImportReflection(node), node.module && "value" !== node.importKind && this.raise(TSErrors.ImportReflectionHasImportType, node.specifiers[0].loc.start);
          }
          checkDuplicateExports() {
          }
          isPotentialImportPhase(isExport) {
            if (super.isPotentialImportPhase(isExport)) return true;
            if (this.isContextual(130)) {
              const ch = this.lookaheadCharCode();
              return isExport ? 123 === ch || 42 === ch : 61 !== ch;
            }
            return !isExport && this.isContextual(87);
          }
          applyImportPhase(node, isExport, phase, loc) {
            super.applyImportPhase(node, isExport, phase, loc), isExport ? node.exportKind = "type" === phase ? "type" : "value" : node.importKind = "type" === phase || "typeof" === phase ? phase : "value";
          }
          parseImport(node) {
            if (this.match(134)) return node.importKind = "value", super.parseImport(node);
            let importNode;
            if (tokenIsIdentifier(this.state.type) && 61 === this.lookaheadCharCode()) return node.importKind = "value", this.tsParseImportEqualsDeclaration(node);
            if (this.isContextual(130)) {
              const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);
              if (61 === this.lookaheadCharCode()) return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier);
              importNode = super.parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier);
            } else importNode = super.parseImport(node);
            return "type" === importNode.importKind && importNode.specifiers.length > 1 && "ImportDefaultSpecifier" === importNode.specifiers[0].type && this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode), importNode;
          }
          parseExport(node, decorators) {
            if (this.match(83)) {
              this.next();
              const nodeImportEquals = node;
              let maybeDefaultIdentifier = null;
              return this.isContextual(130) && this.isPotentialImportPhase(false) ? maybeDefaultIdentifier = this.parseMaybeImportPhase(nodeImportEquals, false) : nodeImportEquals.importKind = "value", this.tsParseImportEqualsDeclaration(nodeImportEquals, maybeDefaultIdentifier, true);
            }
            if (this.eat(29)) {
              const assign = node;
              return assign.expression = super.parseExpression(), this.semicolon(), this.sawUnambiguousESM = true, this.finishNode(assign, "TSExportAssignment");
            }
            if (this.eatContextual(93)) {
              const decl = node;
              return this.expectContextual(128), decl.id = this.parseIdentifier(), this.semicolon(), this.finishNode(decl, "TSNamespaceExportDeclaration");
            }
            return super.parseExport(node, decorators);
          }
          isAbstractClass() {
            return this.isContextual(124) && 80 === this.lookahead().type;
          }
          parseExportDefaultExpression() {
            if (this.isAbstractClass()) {
              const cls = this.startNode();
              return this.next(), cls.abstract = true, this.parseClass(cls, true, true);
            }
            if (this.match(129)) {
              const result = this.tsParseInterfaceDeclaration(this.startNode());
              if (result) return result;
            }
            return super.parseExportDefaultExpression();
          }
          parseVarStatement(node, kind, allowMissingInitializer = false) {
            const { isAmbientContext } = this.state, declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);
            if (!isAmbientContext) return declaration;
            for (const { id, init } of declaration.declarations) init && ("const" !== kind || id.typeAnnotation ? this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init) : isValidAmbientConstInitializer(init, this.hasPlugin("estree")) || this.raise(TSErrors.ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference, init));
            return declaration;
          }
          parseStatementContent(flags, decorators) {
            if (this.match(75) && this.isLookaheadContextual("enum")) {
              const node = this.startNode();
              return this.expect(75), this.tsParseEnumDeclaration(node, { const: true });
            }
            if (this.isContextual(126)) return this.tsParseEnumDeclaration(this.startNode());
            if (this.isContextual(129)) {
              const result = this.tsParseInterfaceDeclaration(this.startNode());
              if (result) return result;
            }
            return super.parseStatementContent(flags, decorators);
          }
          parseAccessModifier() {
            return this.tsParseModifier(["public", "protected", "private"]);
          }
          tsHasSomeModifiers(member, modifiers) {
            return modifiers.some((modifier) => tsIsAccessModifier(modifier) ? member.accessibility === modifier : !!member[modifier]);
          }
          tsIsStartOfStaticBlocks() {
            return this.isContextual(106) && 123 === this.lookaheadCharCode();
          }
          parseClassMember(classBody, member, state) {
            const modifiers = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
            this.tsParseModifiers({ allowedModifiers: modifiers, disallowedModifiers: ["in", "out"], stopOnStartOfClassStaticBlock: true, errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions }, member);
            const callParseClassMemberWithIsStatic = () => {
              this.tsIsStartOfStaticBlocks() ? (this.next(), this.next(), this.tsHasSomeModifiers(member, modifiers) && this.raise(TSErrors.StaticBlockCannotHaveModifier, this.state.curPosition()), super.parseClassStaticBlock(classBody, member)) : this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);
            };
            member.declare ? this.tsInAmbientContext(callParseClassMemberWithIsStatic) : callParseClassMemberWithIsStatic();
          }
          parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
            const idx = this.tsTryParseIndexSignature(member);
            if (idx) return classBody.body.push(idx), member.abstract && this.raise(TSErrors.IndexSignatureHasAbstract, member), member.accessibility && this.raise(TSErrors.IndexSignatureHasAccessibility, member, { modifier: member.accessibility }), member.declare && this.raise(TSErrors.IndexSignatureHasDeclare, member), void (member.override && this.raise(TSErrors.IndexSignatureHasOverride, member));
            !this.state.inAbstractClass && member.abstract && this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member), member.override && (state.hadSuperClass || this.raise(TSErrors.OverrideNotInSubClass, member)), super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
          }
          parsePostMemberNameModifiers(methodOrProp) {
            this.eat(17) && (methodOrProp.optional = true), methodOrProp.readonly && this.match(10) && this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp), methodOrProp.declare && this.match(10) && this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);
          }
          parseExpressionStatement(node, expr, decorators) {
            return ("Identifier" === expr.type ? this.tsParseExpressionStatement(node, expr, decorators) : void 0) || super.parseExpressionStatement(node, expr, decorators);
          }
          shouldParseExportDeclaration() {
            return !!this.tsIsDeclarationStart() || super.shouldParseExportDeclaration();
          }
          parseConditional(expr, startLoc, refExpressionErrors) {
            if (!this.state.maybeInArrowParameters || !this.match(17)) return super.parseConditional(expr, startLoc, refExpressionErrors);
            const result = this.tryParse(() => super.parseConditional(expr, startLoc));
            return result.node ? (result.error && (this.state = result.failState), result.node) : (result.error && super.setOptionalParametersError(refExpressionErrors, result.error), expr);
          }
          parseParenItem(node, startLoc) {
            const newNode = super.parseParenItem(node, startLoc);
            if (this.eat(17) && (newNode.optional = true, this.resetEndLocation(node)), this.match(14)) {
              const typeCastNode = this.startNodeAt(startLoc);
              return typeCastNode.expression = node, typeCastNode.typeAnnotation = this.tsParseTypeAnnotation(), this.finishNode(typeCastNode, "TSTypeCastExpression");
            }
            return node;
          }
          parseExportDeclaration(node) {
            if (!this.state.isAmbientContext && this.isContextual(125)) return this.tsInAmbientContext(() => this.parseExportDeclaration(node));
            const startLoc = this.state.startLoc, isDeclare = this.eatContextual(125);
            if (isDeclare && (this.isContextual(125) || !this.shouldParseExportDeclaration())) throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, this.state.startLoc);
            const declaration = tokenIsIdentifier(this.state.type) && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);
            return declaration ? (("TSInterfaceDeclaration" === declaration.type || "TSTypeAliasDeclaration" === declaration.type || isDeclare) && (node.exportKind = "type"), isDeclare && (this.resetStartLocation(declaration, startLoc), declaration.declare = true), declaration) : null;
          }
          parseClassId(node, isStatement, optionalId, bindingType) {
            if ((!isStatement || optionalId) && this.isContextual(113)) return;
            super.parseClassId(node, isStatement, optionalId, node.declare ? 1024 : 8331);
            const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
            typeParameters && (node.typeParameters = typeParameters);
          }
          parseClassPropertyAnnotation(node) {
            node.optional || (this.eat(35) ? node.definite = true : this.eat(17) && (node.optional = true));
            const type = this.tsTryParseTypeAnnotation();
            type && (node.typeAnnotation = type);
          }
          parseClassProperty(node) {
            if (this.parseClassPropertyAnnotation(node), this.state.isAmbientContext && (!node.readonly || node.typeAnnotation) && this.match(29) && this.raise(TSErrors.DeclareClassFieldHasInitializer, this.state.startLoc), node.abstract && this.match(29)) {
              const { key } = node;
              this.raise(TSErrors.AbstractPropertyHasInitializer, this.state.startLoc, { propertyName: "Identifier" !== key.type || node.computed ? `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]` : key.name });
            }
            return super.parseClassProperty(node);
          }
          parseClassPrivateProperty(node) {
            return node.abstract && this.raise(TSErrors.PrivateElementHasAbstract, node), node.accessibility && this.raise(TSErrors.PrivateElementHasAccessibility, node, { modifier: node.accessibility }), this.parseClassPropertyAnnotation(node), super.parseClassPrivateProperty(node);
          }
          parseClassAccessorProperty(node) {
            return this.parseClassPropertyAnnotation(node), node.optional && this.raise(TSErrors.AccessorCannotBeOptional, node), super.parseClassAccessorProperty(node);
          }
          pushClassMethod(classBody, method, isGenerator2, isAsync, isConstructor, allowsDirectSuper) {
            const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
            typeParameters && isConstructor && this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);
            const { declare = false, kind } = method;
            !declare || "get" !== kind && "set" !== kind || this.raise(TSErrors.DeclareAccessor, method, { kind }), typeParameters && (method.typeParameters = typeParameters), super.pushClassMethod(classBody, method, isGenerator2, isAsync, isConstructor, allowsDirectSuper);
          }
          pushClassPrivateMethod(classBody, method, isGenerator2, isAsync) {
            const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
            typeParameters && (method.typeParameters = typeParameters), super.pushClassPrivateMethod(classBody, method, isGenerator2, isAsync);
          }
          declareClassPrivateMethodInScope(node, kind) {
            "TSDeclareMethod" !== node.type && ("MethodDefinition" !== node.type || hasOwnProperty.call(node.value, "body")) && super.declareClassPrivateMethodInScope(node, kind);
          }
          parseClassSuper(node) {
            super.parseClassSuper(node), node.superClass && (this.match(47) || this.match(51)) && (node.superTypeParameters = this.tsParseTypeArgumentsInExpression()), this.eatContextual(113) && (node.implements = this.tsParseHeritageClause("implements"));
          }
          parseObjPropValue(prop, startLoc, isGenerator2, isAsync, isPattern, isAccessor, refExpressionErrors) {
            const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
            return typeParameters && (prop.typeParameters = typeParameters), super.parseObjPropValue(prop, startLoc, isGenerator2, isAsync, isPattern, isAccessor, refExpressionErrors);
          }
          parseFunctionParams(node, isConstructor) {
            const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
            typeParameters && (node.typeParameters = typeParameters), super.parseFunctionParams(node, isConstructor);
          }
          parseVarId(decl, kind) {
            super.parseVarId(decl, kind), "Identifier" === decl.id.type && !this.hasPrecedingLineBreak() && this.eat(35) && (decl.definite = true);
            const type = this.tsTryParseTypeAnnotation();
            type && (decl.id.typeAnnotation = type, this.resetEndLocation(decl.id));
          }
          parseAsyncArrowFromCallExpression(node, call) {
            return this.match(14) && (node.returnType = this.tsParseTypeAnnotation()), super.parseAsyncArrowFromCallExpression(node, call);
          }
          parseMaybeAssign(refExpressionErrors, afterLeftParse) {
            var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2;
            let state, jsx, typeCast, typeParameters;
            if (this.hasPlugin("jsx") && (this.match(143) || this.match(47))) {
              if (state = this.state.clone(), jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state), !jsx.error) return jsx.node;
              const { context } = this.state, currentContext = context[context.length - 1];
              currentContext !== types.j_oTag && currentContext !== types.j_expr || context.pop();
            }
            if (!(null != (_jsx = jsx) && _jsx.error || this.match(47))) return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
            state && state !== this.state || (state = this.state.clone());
            const arrow = this.tryParse((abort) => {
              var _expr$extra, _typeParameters;
              typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);
              const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
              return ("ArrowFunctionExpression" !== expr.type || null != (_expr$extra = expr.extra) && _expr$extra.parenthesized) && abort(), 0 !== (null == (_typeParameters = typeParameters) ? void 0 : _typeParameters.params.length) && this.resetStartLocationFromNode(expr, typeParameters), expr.typeParameters = typeParameters, expr;
            }, state);
            if (!arrow.error && !arrow.aborted) return typeParameters && this.reportReservedArrowTypeParam(typeParameters), arrow.node;
            if (!jsx && (assert(!this.hasPlugin("jsx")), typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state), !typeCast.error)) return typeCast.node;
            if (null != (_jsx2 = jsx) && _jsx2.node) return this.state = jsx.failState, jsx.node;
            if (arrow.node) return this.state = arrow.failState, typeParameters && this.reportReservedArrowTypeParam(typeParameters), arrow.node;
            if (null != (_typeCast = typeCast) && _typeCast.node) return this.state = typeCast.failState, typeCast.node;
            throw (null == (_jsx3 = jsx) ? void 0 : _jsx3.error) || arrow.error || (null == (_typeCast2 = typeCast) ? void 0 : _typeCast2.error);
          }
          reportReservedArrowTypeParam(node) {
            var _node$extra;
            1 !== node.params.length || node.params[0].constraint || null != (_node$extra = node.extra) && _node$extra.trailingComma || !this.getPluginOption("typescript", "disallowAmbiguousJSXLike") || this.raise(TSErrors.ReservedArrowTypeParam, node);
          }
          parseMaybeUnary(refExpressionErrors, sawUnary) {
            return !this.hasPlugin("jsx") && this.match(47) ? this.tsParseTypeAssertion() : super.parseMaybeUnary(refExpressionErrors, sawUnary);
          }
          parseArrow(node) {
            if (this.match(14)) {
              const result = this.tryParse((abort) => {
                const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
                return !this.canInsertSemicolon() && this.match(19) || abort(), returnType;
              });
              if (result.aborted) return;
              result.thrown || (result.error && (this.state = result.failState), node.returnType = result.node);
            }
            return super.parseArrow(node);
          }
          parseFunctionParamType(param) {
            this.eat(17) && (param.optional = true);
            const type = this.tsTryParseTypeAnnotation();
            return type && (param.typeAnnotation = type), this.resetEndLocation(param), param;
          }
          isAssignable(node, isBinding) {
            switch (node.type) {
              case "TSTypeCastExpression":
                return this.isAssignable(node.expression, isBinding);
              case "TSParameterProperty":
                return true;
              default:
                return super.isAssignable(node, isBinding);
            }
          }
          toAssignable(node, isLHS = false) {
            switch (node.type) {
              case "ParenthesizedExpression":
                this.toAssignableParenthesizedExpression(node, isLHS);
                break;
              case "TSAsExpression":
              case "TSSatisfiesExpression":
              case "TSNonNullExpression":
              case "TSTypeAssertion":
                isLHS ? this.expressionScope.recordArrowParameterBindingError(TSErrors.UnexpectedTypeCastInParameter, node) : this.raise(TSErrors.UnexpectedTypeCastInParameter, node), this.toAssignable(node.expression, isLHS);
                break;
              case "AssignmentExpression":
                isLHS || "TSTypeCastExpression" !== node.left.type || (node.left = this.typeCastToParameter(node.left));
              default:
                super.toAssignable(node, isLHS);
            }
          }
          toAssignableParenthesizedExpression(node, isLHS) {
            switch (node.expression.type) {
              case "TSAsExpression":
              case "TSSatisfiesExpression":
              case "TSNonNullExpression":
              case "TSTypeAssertion":
              case "ParenthesizedExpression":
                this.toAssignable(node.expression, isLHS);
                break;
              default:
                super.toAssignable(node, isLHS);
            }
          }
          checkToRestConversion(node, allowPattern) {
            switch (node.type) {
              case "TSAsExpression":
              case "TSSatisfiesExpression":
              case "TSTypeAssertion":
              case "TSNonNullExpression":
                this.checkToRestConversion(node.expression, false);
                break;
              default:
                super.checkToRestConversion(node, allowPattern);
            }
          }
          isValidLVal(type, isUnparenthesizedInAssign, binding) {
            switch (type) {
              case "TSTypeCastExpression":
                return true;
              case "TSParameterProperty":
                return "parameter";
              case "TSNonNullExpression":
              case "TSInstantiationExpression":
                return "expression";
              case "TSAsExpression":
              case "TSSatisfiesExpression":
              case "TSTypeAssertion":
                return (64 !== binding || !isUnparenthesizedInAssign) && ["expression", true];
              default:
                return super.isValidLVal(type, isUnparenthesizedInAssign, binding);
            }
          }
          parseBindingAtom() {
            return 78 === this.state.type ? this.parseIdentifier(true) : super.parseBindingAtom();
          }
          parseMaybeDecoratorArguments(expr) {
            if (this.match(47) || this.match(51)) {
              const typeArguments = this.tsParseTypeArgumentsInExpression();
              if (this.match(10)) {
                const call = super.parseMaybeDecoratorArguments(expr);
                return call.typeParameters = typeArguments, call;
              }
              this.unexpected(null, 10);
            }
            return super.parseMaybeDecoratorArguments(expr);
          }
          checkCommaAfterRest(close) {
            return this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close ? (this.next(), false) : super.checkCommaAfterRest(close);
          }
          isClassMethod() {
            return this.match(47) || super.isClassMethod();
          }
          isClassProperty() {
            return this.match(35) || this.match(14) || super.isClassProperty();
          }
          parseMaybeDefault(startLoc, left) {
            const node = super.parseMaybeDefault(startLoc, left);
            return "AssignmentPattern" === node.type && node.typeAnnotation && node.right.start < node.typeAnnotation.start && this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation), node;
          }
          getTokenFromCode(code2) {
            if (this.state.inType) {
              if (62 === code2) return void this.finishOp(48, 1);
              if (60 === code2) return void this.finishOp(47, 1);
            }
            super.getTokenFromCode(code2);
          }
          reScan_lt_gt() {
            const { type } = this.state;
            47 === type ? (this.state.pos -= 1, this.readToken_lt()) : 48 === type && (this.state.pos -= 1, this.readToken_gt());
          }
          reScan_lt() {
            const { type } = this.state;
            return 51 === type ? (this.state.pos -= 2, this.finishOp(47, 1), 47) : type;
          }
          toAssignableList(exprList, trailingCommaLoc, isLHS) {
            for (let i2 = 0; i2 < exprList.length; i2++) {
              const expr = exprList[i2];
              "TSTypeCastExpression" === (null == expr ? void 0 : expr.type) && (exprList[i2] = this.typeCastToParameter(expr));
            }
            super.toAssignableList(exprList, trailingCommaLoc, isLHS);
          }
          typeCastToParameter(node) {
            return node.expression.typeAnnotation = node.typeAnnotation, this.resetEndLocation(node.expression, node.typeAnnotation.loc.end), node.expression;
          }
          shouldParseArrow(params) {
            return this.match(14) ? params.every((expr) => this.isAssignable(expr, true)) : super.shouldParseArrow(params);
          }
          shouldParseAsyncArrow() {
            return this.match(14) || super.shouldParseAsyncArrow();
          }
          canHaveLeadingDecorator() {
            return super.canHaveLeadingDecorator() || this.isAbstractClass();
          }
          jsxParseOpeningElementAfterName(node) {
            if (this.match(47) || this.match(51)) {
              const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());
              typeArguments && (node.typeParameters = typeArguments);
            }
            return super.jsxParseOpeningElementAfterName(node);
          }
          getGetterSetterExpectedParamCount(method) {
            const baseCount = super.getGetterSetterExpectedParamCount(method), firstParam = this.getObjectOrClassMethodParams(method)[0];
            return firstParam && this.isThisParam(firstParam) ? baseCount + 1 : baseCount;
          }
          parseCatchClauseParam() {
            const param = super.parseCatchClauseParam(), type = this.tsTryParseTypeAnnotation();
            return type && (param.typeAnnotation = type, this.resetEndLocation(param)), param;
          }
          tsInAmbientContext(cb) {
            const { isAmbientContext: oldIsAmbientContext, strict: oldStrict } = this.state;
            this.state.isAmbientContext = true, this.state.strict = false;
            try {
              return cb();
            } finally {
              this.state.isAmbientContext = oldIsAmbientContext, this.state.strict = oldStrict;
            }
          }
          parseClass(node, isStatement, optionalId) {
            const oldInAbstractClass = this.state.inAbstractClass;
            this.state.inAbstractClass = !!node.abstract;
            try {
              return super.parseClass(node, isStatement, optionalId);
            } finally {
              this.state.inAbstractClass = oldInAbstractClass;
            }
          }
          tsParseAbstractDeclaration(node, decorators) {
            if (this.match(80)) return node.abstract = true, this.maybeTakeDecorators(decorators, this.parseClass(node, true, false));
            if (this.isContextual(129)) {
              if (!this.hasFollowingLineBreak()) return node.abstract = true, this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, node), this.tsParseInterfaceDeclaration(node);
            } else this.unexpected(null, 80);
          }
          parseMethod(node, isGenerator2, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {
            const method = super.parseMethod(node, isGenerator2, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
            if (method.abstract) {
              if (this.hasPlugin("estree") ? !!method.value.body : !!method.body) {
                const { key } = method;
                this.raise(TSErrors.AbstractMethodHasImplementation, method, { methodName: "Identifier" !== key.type || method.computed ? `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]` : key.name });
              }
            }
            return method;
          }
          tsParseTypeParameterName() {
            return this.parseIdentifier().name;
          }
          shouldParseAsAmbientContext() {
            return !!this.getPluginOption("typescript", "dts");
          }
          parse() {
            return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = true), super.parse();
          }
          getExpression() {
            return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = true), super.getExpression();
          }
          parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
            return !isString && isMaybeTypeOnly ? (this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport), this.finishNode(node, "ExportSpecifier")) : (node.exportKind = "value", super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));
          }
          parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
            return !importedIsString && isMaybeTypeOnly ? (this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport), this.finishNode(specifier, "ImportSpecifier")) : (specifier.importKind = "value", super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, isInTypeOnlyImport ? 4098 : 4096));
          }
          parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {
            const leftOfAsKey = isImport ? "imported" : "local", rightOfAsKey = isImport ? "local" : "exported";
            let rightOfAs, leftOfAs = node[leftOfAsKey], hasTypeSpecifier = false, canParseAsKeyword = true;
            const loc = leftOfAs.loc.start;
            if (this.isContextual(93)) {
              const firstAs = this.parseIdentifier();
              if (this.isContextual(93)) {
                const secondAs = this.parseIdentifier();
                tokenIsKeywordOrIdentifier(this.state.type) ? (hasTypeSpecifier = true, leftOfAs = firstAs, rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName(), canParseAsKeyword = false) : (rightOfAs = secondAs, canParseAsKeyword = false);
              } else tokenIsKeywordOrIdentifier(this.state.type) ? (canParseAsKeyword = false, rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName()) : (hasTypeSpecifier = true, leftOfAs = firstAs);
            } else tokenIsKeywordOrIdentifier(this.state.type) && (hasTypeSpecifier = true, isImport ? (leftOfAs = this.parseIdentifier(true), this.isContextual(93) || this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true)) : leftOfAs = this.parseModuleExportName());
            hasTypeSpecifier && isInTypeOnlyImportExport && this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, loc), node[leftOfAsKey] = leftOfAs, node[rightOfAsKey] = rightOfAs;
            node[isImport ? "importKind" : "exportKind"] = hasTypeSpecifier ? "type" : "value", canParseAsKeyword && this.eatContextual(93) && (node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName()), node[rightOfAsKey] || (node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey])), isImport && this.checkIdentifier(node[rightOfAsKey], hasTypeSpecifier ? 4098 : 4096);
          }
        }, v8intrinsic: (superClass) => class extends superClass {
          parseV8Intrinsic() {
            if (this.match(54)) {
              const v8IntrinsicStartLoc = this.state.startLoc, node = this.startNode();
              if (this.next(), tokenIsIdentifier(this.state.type)) {
                const name = this.parseIdentifierName(), identifier = this.createIdentifier(node, name);
                if (identifier.type = "V8IntrinsicIdentifier", this.match(10)) return identifier;
              }
              this.unexpected(v8IntrinsicStartLoc);
            }
          }
          parseExprAtom(refExpressionErrors) {
            return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);
          }
        }, placeholders: (superClass) => class extends superClass {
          parsePlaceholder(expectedNode) {
            if (this.match(133)) {
              const node = this.startNode();
              return this.next(), this.assertNoSpace(), node.name = super.parseIdentifier(true), this.assertNoSpace(), this.expect(133), this.finishPlaceholder(node, expectedNode);
            }
          }
          finishPlaceholder(node, expectedNode) {
            let placeholder = node;
            return placeholder.expectedNode && placeholder.type || (placeholder = this.finishNode(placeholder, "Placeholder")), placeholder.expectedNode = expectedNode, placeholder;
          }
          getTokenFromCode(code2) {
            37 === code2 && 37 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(133, 2) : super.getTokenFromCode(code2);
          }
          parseExprAtom(refExpressionErrors) {
            return this.parsePlaceholder("Expression") || super.parseExprAtom(refExpressionErrors);
          }
          parseIdentifier(liberal) {
            return this.parsePlaceholder("Identifier") || super.parseIdentifier(liberal);
          }
          checkReservedWord(word, startLoc, checkKeywords, isBinding) {
            void 0 !== word && super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
          }
          parseBindingAtom() {
            return this.parsePlaceholder("Pattern") || super.parseBindingAtom();
          }
          isValidLVal(type, isParenthesized, binding) {
            return "Placeholder" === type || super.isValidLVal(type, isParenthesized, binding);
          }
          toAssignable(node, isLHS) {
            node && "Placeholder" === node.type && "Expression" === node.expectedNode ? node.expectedNode = "Pattern" : super.toAssignable(node, isLHS);
          }
          chStartsBindingIdentifier(ch, pos) {
            if (super.chStartsBindingIdentifier(ch, pos)) return true;
            return 133 === this.lookahead().type;
          }
          verifyBreakContinue(node, isBreak) {
            node.label && "Placeholder" === node.label.type || super.verifyBreakContinue(node, isBreak);
          }
          parseExpressionStatement(node, expr) {
            var _expr$extra;
            if ("Placeholder" !== expr.type || null != (_expr$extra = expr.extra) && _expr$extra.parenthesized) return super.parseExpressionStatement(node, expr);
            if (this.match(14)) {
              const stmt = node;
              return stmt.label = this.finishPlaceholder(expr, "Identifier"), this.next(), stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration(), this.finishNode(stmt, "LabeledStatement");
            }
            this.semicolon();
            const stmtPlaceholder = node;
            return stmtPlaceholder.name = expr.name, this.finishPlaceholder(stmtPlaceholder, "Statement");
          }
          parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {
            return this.parsePlaceholder("BlockStatement") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);
          }
          parseFunctionId(requireId) {
            return this.parsePlaceholder("Identifier") || super.parseFunctionId(requireId);
          }
          parseClass(node, isStatement, optionalId) {
            const type = isStatement ? "ClassDeclaration" : "ClassExpression";
            this.next();
            const oldStrict = this.state.strict, placeholder = this.parsePlaceholder("Identifier");
            if (placeholder) {
              if (!(this.match(81) || this.match(133) || this.match(5))) {
                if (optionalId || !isStatement) return node.id = null, node.body = this.finishPlaceholder(placeholder, "ClassBody"), this.finishNode(node, type);
                throw this.raise(PlaceholderErrors.ClassNameIsRequired, this.state.startLoc);
              }
              node.id = placeholder;
            } else this.parseClassId(node, isStatement, optionalId);
            return super.parseClassSuper(node), node.body = this.parsePlaceholder("ClassBody") || super.parseClassBody(!!node.superClass, oldStrict), this.finishNode(node, type);
          }
          parseExport(node, decorators) {
            const placeholder = this.parsePlaceholder("Identifier");
            if (!placeholder) return super.parseExport(node, decorators);
            const node2 = node;
            if (!this.isContextual(98) && !this.match(12)) return node2.specifiers = [], node2.source = null, node2.declaration = this.finishPlaceholder(placeholder, "Declaration"), this.finishNode(node2, "ExportNamedDeclaration");
            this.expectPlugin("exportDefaultFrom");
            const specifier = this.startNode();
            return specifier.exported = placeholder, node2.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")], super.parseExport(node2, decorators);
          }
          isExportDefaultSpecifier() {
            if (this.match(65)) {
              const next = this.nextTokenStart();
              if (this.isUnparsedContextual(next, "from") && this.input.startsWith(tokenLabelName(133), this.nextTokenStartSince(next + 4))) return true;
            }
            return super.isExportDefaultSpecifier();
          }
          maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {
            var _specifiers;
            return !(null == (_specifiers = node.specifiers) || !_specifiers.length) || super.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);
          }
          checkExport(node) {
            const { specifiers } = node;
            null != specifiers && specifiers.length && (node.specifiers = specifiers.filter((node2) => "Placeholder" === node2.exported.type)), super.checkExport(node), node.specifiers = specifiers;
          }
          parseImport(node) {
            const placeholder = this.parsePlaceholder("Identifier");
            if (!placeholder) return super.parseImport(node);
            if (node.specifiers = [], !this.isContextual(98) && !this.match(12)) return node.source = this.finishPlaceholder(placeholder, "StringLiteral"), this.semicolon(), this.finishNode(node, "ImportDeclaration");
            const specifier = this.startNodeAtNode(placeholder);
            if (specifier.local = placeholder, node.specifiers.push(this.finishNode(specifier, "ImportDefaultSpecifier")), this.eat(12)) {
              this.maybeParseStarImportSpecifier(node) || this.parseNamedImportSpecifiers(node);
            }
            return this.expectContextual(98), node.source = this.parseImportSource(), this.semicolon(), this.finishNode(node, "ImportDeclaration");
          }
          parseImportSource() {
            return this.parsePlaceholder("StringLiteral") || super.parseImportSource();
          }
          assertNoSpace() {
            this.state.start > this.offsetToSourcePos(this.state.lastTokEndLoc.index) && this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);
          }
        } }, mixinPluginNames = Object.keys(mixinPlugins);
        class ExpressionParser extends LValParser {
          checkProto(prop, isRecord, protoRef, refExpressionErrors) {
            if ("SpreadElement" === prop.type || this.isObjectMethod(prop) || prop.computed || prop.shorthand) return;
            const key = prop.key;
            if ("__proto__" === ("Identifier" === key.type ? key.name : key.value)) {
              if (isRecord) return void this.raise(Errors.RecordNoProto, key);
              protoRef.used && (refExpressionErrors ? null === refExpressionErrors.doubleProtoLoc && (refExpressionErrors.doubleProtoLoc = key.loc.start) : this.raise(Errors.DuplicateProto, key)), protoRef.used = true;
            }
          }
          shouldExitDescending(expr, potentialArrowAt) {
            return "ArrowFunctionExpression" === expr.type && this.offsetToSourcePos(expr.start) === potentialArrowAt;
          }
          getExpression() {
            this.enterInitialScopes(), this.nextToken();
            const expr = this.parseExpression();
            return this.match(140) || this.unexpected(), this.finalizeRemainingComments(), expr.comments = this.comments, expr.errors = this.state.errors, this.options.tokens && (expr.tokens = this.tokens), expr;
          }
          parseExpression(disallowIn, refExpressionErrors) {
            return disallowIn ? this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors)) : this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));
          }
          parseExpressionBase(refExpressionErrors) {
            const startLoc = this.state.startLoc, expr = this.parseMaybeAssign(refExpressionErrors);
            if (this.match(12)) {
              const node = this.startNodeAt(startLoc);
              for (node.expressions = [expr]; this.eat(12); ) node.expressions.push(this.parseMaybeAssign(refExpressionErrors));
              return this.toReferencedList(node.expressions), this.finishNode(node, "SequenceExpression");
            }
            return expr;
          }
          parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
            return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
          }
          parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
            return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
          }
          setOptionalParametersError(refExpressionErrors, resultError) {
            var _resultError$loc;
            refExpressionErrors.optionalParametersLoc = null != (_resultError$loc = null == resultError ? void 0 : resultError.loc) ? _resultError$loc : this.state.startLoc;
          }
          parseMaybeAssign(refExpressionErrors, afterLeftParse) {
            const startLoc = this.state.startLoc;
            if (this.isContextual(108) && this.prodParam.hasYield) {
              let left2 = this.parseYield();
              return afterLeftParse && (left2 = afterLeftParse.call(this, left2, startLoc)), left2;
            }
            let ownExpressionErrors;
            refExpressionErrors ? ownExpressionErrors = false : (refExpressionErrors = new ExpressionErrors(), ownExpressionErrors = true);
            const { type } = this.state;
            (10 === type || tokenIsIdentifier(type)) && (this.state.potentialArrowAt = this.state.start);
            let left = this.parseMaybeConditional(refExpressionErrors);
            if (afterLeftParse && (left = afterLeftParse.call(this, left, startLoc)), (token = this.state.type) >= 29 && token <= 33) {
              const node = this.startNodeAt(startLoc), operator = this.state.value;
              if (node.operator = operator, this.match(29)) {
                this.toAssignable(left, true), node.left = left;
                const startIndex = startLoc.index;
                null != refExpressionErrors.doubleProtoLoc && refExpressionErrors.doubleProtoLoc.index >= startIndex && (refExpressionErrors.doubleProtoLoc = null), null != refExpressionErrors.shorthandAssignLoc && refExpressionErrors.shorthandAssignLoc.index >= startIndex && (refExpressionErrors.shorthandAssignLoc = null), null != refExpressionErrors.privateKeyLoc && refExpressionErrors.privateKeyLoc.index >= startIndex && (this.checkDestructuringPrivate(refExpressionErrors), refExpressionErrors.privateKeyLoc = null);
              } else node.left = left;
              return this.next(), node.right = this.parseMaybeAssign(), this.checkLVal(left, this.finishNode(node, "AssignmentExpression")), node;
            }
            var token;
            return ownExpressionErrors && this.checkExpressionErrors(refExpressionErrors, true), left;
          }
          parseMaybeConditional(refExpressionErrors) {
            const startLoc = this.state.startLoc, potentialArrowAt = this.state.potentialArrowAt, expr = this.parseExprOps(refExpressionErrors);
            return this.shouldExitDescending(expr, potentialArrowAt) ? expr : this.parseConditional(expr, startLoc, refExpressionErrors);
          }
          parseConditional(expr, startLoc, refExpressionErrors) {
            if (this.eat(17)) {
              const node = this.startNodeAt(startLoc);
              return node.test = expr, node.consequent = this.parseMaybeAssignAllowIn(), this.expect(14), node.alternate = this.parseMaybeAssign(), this.finishNode(node, "ConditionalExpression");
            }
            return expr;
          }
          parseMaybeUnaryOrPrivate(refExpressionErrors) {
            return this.match(139) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);
          }
          parseExprOps(refExpressionErrors) {
            const startLoc = this.state.startLoc, potentialArrowAt = this.state.potentialArrowAt, expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);
            return this.shouldExitDescending(expr, potentialArrowAt) ? expr : this.parseExprOp(expr, startLoc, -1);
          }
          parseExprOp(left, leftStartLoc, minPrec) {
            if (this.isPrivateName(left)) {
              const value2 = this.getPrivateNameSV(left);
              (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) && this.raise(Errors.PrivateInExpectedIn, left, { identifierName: value2 }), this.classScope.usePrivateName(value2, left.loc.start);
            }
            const op = this.state.type;
            if ((token = op) >= 39 && token <= 59 && (this.prodParam.hasIn || !this.match(58))) {
              let prec = tokenOperatorPrecedence(op);
              if (prec > minPrec) {
                if (39 === op) {
                  if (this.expectPlugin("pipelineOperator"), this.state.inFSharpPipelineDirectBody) return left;
                  this.checkPipelineAtInfixOperator(left, leftStartLoc);
                }
                const node = this.startNodeAt(leftStartLoc);
                node.left = left, node.operator = this.state.value;
                const logical = 41 === op || 42 === op, coalesce = 40 === op;
                if (coalesce && (prec = tokenOperatorPrecedence(42)), this.next(), 39 === op && this.hasPlugin(["pipelineOperator", { proposal: "minimal" }]) && 96 === this.state.type && this.prodParam.hasAwait) throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, this.state.startLoc);
                node.right = this.parseExprOpRightExpr(op, prec);
                const finishedNode = this.finishNode(node, logical || coalesce ? "LogicalExpression" : "BinaryExpression"), nextOp = this.state.type;
                if (coalesce && (41 === nextOp || 42 === nextOp) || logical && 40 === nextOp) throw this.raise(Errors.MixingCoalesceWithLogical, this.state.startLoc);
                return this.parseExprOp(finishedNode, leftStartLoc, minPrec);
              }
            }
            var token;
            return left;
          }
          parseExprOpRightExpr(op, prec) {
            const startLoc = this.state.startLoc;
            if (39 === op) switch (this.getPluginOption("pipelineOperator", "proposal")) {
              case "hack":
                return this.withTopicBindingContext(() => this.parseHackPipeBody());
              case "smart":
                return this.withTopicBindingContext(() => {
                  if (this.prodParam.hasYield && this.isContextual(108)) throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);
                  return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startLoc);
                });
              case "fsharp":
                return this.withSoloAwaitPermittingContext(() => this.parseFSharpPipelineBody(prec));
            }
            return this.parseExprOpBaseRightExpr(op, prec);
          }
          parseExprOpBaseRightExpr(op, prec) {
            const startLoc = this.state.startLoc;
            return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, 57 === op ? prec - 1 : prec);
          }
          parseHackPipeBody() {
            var _body$extra;
            const { startLoc } = this.state, body = this.parseMaybeAssign();
            return !UnparenthesizedPipeBodyDescriptions.has(body.type) || null != (_body$extra = body.extra) && _body$extra.parenthesized || this.raise(Errors.PipeUnparenthesizedBody, startLoc, { type: body.type }), this.topicReferenceWasUsedInCurrentContext() || this.raise(Errors.PipeTopicUnused, startLoc), body;
          }
          checkExponentialAfterUnary(node) {
            this.match(57) && this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);
          }
          parseMaybeUnary(refExpressionErrors, sawUnary) {
            const startLoc = this.state.startLoc, isAwait = this.isContextual(96);
            if (isAwait && this.recordAwaitIfAllowed()) {
              this.next();
              const expr2 = this.parseAwait(startLoc);
              return sawUnary || this.checkExponentialAfterUnary(expr2), expr2;
            }
            const update = this.match(34), node = this.startNode();
            if (token = this.state.type, tokenPrefixes[token]) {
              node.operator = this.state.value, node.prefix = true, this.match(72) && this.expectPlugin("throwExpressions");
              const isDelete = this.match(89);
              if (this.next(), node.argument = this.parseMaybeUnary(null, true), this.checkExpressionErrors(refExpressionErrors, true), this.state.strict && isDelete) {
                const arg = node.argument;
                "Identifier" === arg.type ? this.raise(Errors.StrictDelete, node) : this.hasPropertyAsPrivateName(arg) && this.raise(Errors.DeletePrivateField, node);
              }
              if (!update) return sawUnary || this.checkExponentialAfterUnary(node), this.finishNode(node, "UnaryExpression");
            }
            var token;
            const expr = this.parseUpdate(node, update, refExpressionErrors);
            if (isAwait) {
              const { type } = this.state;
              if ((this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54)) && !this.isAmbiguousAwait()) return this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc), this.parseAwait(startLoc);
            }
            return expr;
          }
          parseUpdate(node, update, refExpressionErrors) {
            if (update) {
              const updateExpressionNode = node;
              return this.checkLVal(updateExpressionNode.argument, this.finishNode(updateExpressionNode, "UpdateExpression")), node;
            }
            const startLoc = this.state.startLoc;
            let expr = this.parseExprSubscripts(refExpressionErrors);
            if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;
            for (; 34 === this.state.type && !this.canInsertSemicolon(); ) {
              const node2 = this.startNodeAt(startLoc);
              node2.operator = this.state.value, node2.prefix = false, node2.argument = expr, this.next(), this.checkLVal(expr, expr = this.finishNode(node2, "UpdateExpression"));
            }
            return expr;
          }
          parseExprSubscripts(refExpressionErrors) {
            const startLoc = this.state.startLoc, potentialArrowAt = this.state.potentialArrowAt, expr = this.parseExprAtom(refExpressionErrors);
            return this.shouldExitDescending(expr, potentialArrowAt) ? expr : this.parseSubscripts(expr, startLoc);
          }
          parseSubscripts(base, startLoc, noCalls) {
            const state = { optionalChainMember: false, maybeAsyncArrow: this.atPossibleAsyncArrow(base), stop: false };
            do {
              base = this.parseSubscript(base, startLoc, noCalls, state), state.maybeAsyncArrow = false;
            } while (!state.stop);
            return base;
          }
          parseSubscript(base, startLoc, noCalls, state) {
            const { type } = this.state;
            if (!noCalls && 15 === type) return this.parseBind(base, startLoc, noCalls, state);
            if (tokenIsTemplate(type)) return this.parseTaggedTemplateExpression(base, startLoc, state);
            let optional = false;
            if (18 === type) {
              if (noCalls && (this.raise(Errors.OptionalChainingNoNew, this.state.startLoc), 40 === this.lookaheadCharCode())) return state.stop = true, base;
              state.optionalChainMember = optional = true, this.next();
            }
            if (!noCalls && this.match(10)) return this.parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional);
            {
              const computed = this.eat(0);
              return computed || optional || this.eat(16) ? this.parseMember(base, startLoc, state, computed, optional) : (state.stop = true, base);
            }
          }
          parseMember(base, startLoc, state, computed, optional) {
            const node = this.startNodeAt(startLoc);
            return node.object = base, node.computed = computed, computed ? (node.property = this.parseExpression(), this.expect(3)) : this.match(139) ? ("Super" === base.type && this.raise(Errors.SuperPrivateField, startLoc), this.classScope.usePrivateName(this.state.value, this.state.startLoc), node.property = this.parsePrivateName()) : node.property = this.parseIdentifier(true), state.optionalChainMember ? (node.optional = optional, this.finishNode(node, "OptionalMemberExpression")) : this.finishNode(node, "MemberExpression");
          }
          parseBind(base, startLoc, noCalls, state) {
            const node = this.startNodeAt(startLoc);
            return node.object = base, this.next(), node.callee = this.parseNoCallExpr(), state.stop = true, this.parseSubscripts(this.finishNode(node, "BindExpression"), startLoc, noCalls);
          }
          parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional) {
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            let refExpressionErrors = null;
            this.state.maybeInArrowParameters = true, this.next();
            const node = this.startNodeAt(startLoc);
            node.callee = base;
            const { maybeAsyncArrow, optionalChainMember } = state;
            maybeAsyncArrow && (this.expressionScope.enter(new ArrowHeadParsingScope(2)), refExpressionErrors = new ExpressionErrors()), optionalChainMember && (node.optional = optional), node.arguments = optional ? this.parseCallExpressionArguments(11) : this.parseCallExpressionArguments(11, "Super" !== base.type, node, refExpressionErrors);
            let finishedNode = this.finishCallExpression(node, optionalChainMember);
            return maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional ? (state.stop = true, this.checkDestructuringPrivate(refExpressionErrors), this.expressionScope.validateAsPattern(), this.expressionScope.exit(), finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc), finishedNode)) : (maybeAsyncArrow && (this.checkExpressionErrors(refExpressionErrors, true), this.expressionScope.exit()), this.toReferencedArguments(finishedNode)), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, finishedNode;
          }
          toReferencedArguments(node, isParenthesizedExpr) {
            this.toReferencedListDeep(node.arguments, isParenthesizedExpr);
          }
          parseTaggedTemplateExpression(base, startLoc, state) {
            const node = this.startNodeAt(startLoc);
            return node.tag = base, node.quasi = this.parseTemplate(true), state.optionalChainMember && this.raise(Errors.OptionalChainingNoTemplate, startLoc), this.finishNode(node, "TaggedTemplateExpression");
          }
          atPossibleAsyncArrow(base) {
            return "Identifier" === base.type && "async" === base.name && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start == 5 && this.offsetToSourcePos(base.start) === this.state.potentialArrowAt;
          }
          finishCallExpression(node, optional) {
            if ("Import" === node.callee.type) if (0 === node.arguments.length || node.arguments.length > 2) this.raise(Errors.ImportCallArity, node);
            else for (const arg of node.arguments) "SpreadElement" === arg.type && this.raise(Errors.ImportCallSpreadArgument, arg);
            return this.finishNode(node, optional ? "OptionalCallExpression" : "CallExpression");
          }
          parseCallExpressionArguments(close, allowPlaceholder, nodeForExtra, refExpressionErrors) {
            const elts = [];
            let first = true;
            const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            for (this.state.inFSharpPipelineDirectBody = false; !this.eat(close); ) {
              if (first) first = false;
              else if (this.expect(12), this.match(close)) {
                nodeForExtra && this.addTrailingCommaExtraToNode(nodeForExtra), this.next();
                break;
              }
              elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));
            }
            return this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody, elts;
          }
          shouldParseAsyncArrow() {
            return this.match(19) && !this.canInsertSemicolon();
          }
          parseAsyncArrowFromCallExpression(node, call) {
            var _call$extra;
            return this.resetPreviousNodeTrailingComments(call), this.expect(19), this.parseArrowExpression(node, call.arguments, true, null == (_call$extra = call.extra) ? void 0 : _call$extra.trailingCommaLoc), call.innerComments && setInnerComments(node, call.innerComments), call.callee.trailingComments && setInnerComments(node, call.callee.trailingComments), node;
          }
          parseNoCallExpr() {
            const startLoc = this.state.startLoc;
            return this.parseSubscripts(this.parseExprAtom(), startLoc, true);
          }
          parseExprAtom(refExpressionErrors) {
            let node, decorators = null;
            const { type } = this.state;
            switch (type) {
              case 79:
                return this.parseSuper();
              case 83:
                return node = this.startNode(), this.next(), this.match(16) ? this.parseImportMetaProperty(node) : this.match(10) ? this.options.createImportExpressions ? this.parseImportCall(node) : this.finishNode(node, "Import") : (this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc), this.finishNode(node, "Import"));
              case 78:
                return node = this.startNode(), this.next(), this.finishNode(node, "ThisExpression");
              case 90:
                return this.parseDo(this.startNode(), false);
              case 56:
              case 31:
                return this.readRegexp(), this.parseRegExpLiteral(this.state.value);
              case 135:
                return this.parseNumericLiteral(this.state.value);
              case 136:
                return this.parseBigIntLiteral(this.state.value);
              case 134:
                return this.parseStringLiteral(this.state.value);
              case 84:
                return this.parseNullLiteral();
              case 85:
                return this.parseBooleanLiteral(true);
              case 86:
                return this.parseBooleanLiteral(false);
              case 10: {
                const canBeArrow = this.state.potentialArrowAt === this.state.start;
                return this.parseParenAndDistinguishExpression(canBeArrow);
              }
              case 2:
              case 1:
                return this.parseArrayLike(2 === this.state.type ? 4 : 3, false, true);
              case 0:
                return this.parseArrayLike(3, true, false, refExpressionErrors);
              case 6:
              case 7:
                return this.parseObjectLike(6 === this.state.type ? 9 : 8, false, true);
              case 5:
                return this.parseObjectLike(8, false, false, refExpressionErrors);
              case 68:
                return this.parseFunctionOrFunctionSent();
              case 26:
                decorators = this.parseDecorators();
              case 80:
                return this.parseClass(this.maybeTakeDecorators(decorators, this.startNode()), false);
              case 77:
                return this.parseNewOrNewTarget();
              case 25:
              case 24:
                return this.parseTemplate(false);
              case 15: {
                node = this.startNode(), this.next(), node.object = null;
                const callee = node.callee = this.parseNoCallExpr();
                if ("MemberExpression" === callee.type) return this.finishNode(node, "BindExpression");
                throw this.raise(Errors.UnsupportedBind, callee);
              }
              case 139:
                return this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, { identifierName: this.state.value }), this.parsePrivateName();
              case 33:
                return this.parseTopicReferenceThenEqualsSign(54, "%");
              case 32:
                return this.parseTopicReferenceThenEqualsSign(44, "^");
              case 37:
              case 38:
                return this.parseTopicReference("hack");
              case 44:
              case 54:
              case 27: {
                const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
                if (pipeProposal) return this.parseTopicReference(pipeProposal);
                this.unexpected();
                break;
              }
              case 47: {
                const lookaheadCh = this.input.codePointAt(this.nextTokenStart());
                isIdentifierStart(lookaheadCh) || 62 === lookaheadCh ? this.expectOnePlugin(["jsx", "flow", "typescript"]) : this.unexpected();
                break;
              }
              default:
                if (137 === type) return this.parseDecimalLiteral(this.state.value);
                if (tokenIsIdentifier(type)) {
                  if (this.isContextual(127) && 123 === this.lookaheadInLineCharCode()) return this.parseModuleExpression();
                  const canBeArrow = this.state.potentialArrowAt === this.state.start, containsEsc = this.state.containsEsc, id = this.parseIdentifier();
                  if (!containsEsc && "async" === id.name && !this.canInsertSemicolon()) {
                    const { type: type2 } = this.state;
                    if (68 === type2) return this.resetPreviousNodeTrailingComments(id), this.next(), this.parseAsyncFunctionExpression(this.startNodeAtNode(id));
                    if (tokenIsIdentifier(type2)) return 61 === this.lookaheadCharCode() ? this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id)) : id;
                    if (90 === type2) return this.resetPreviousNodeTrailingComments(id), this.parseDo(this.startNodeAtNode(id), true);
                  }
                  return canBeArrow && this.match(19) && !this.canInsertSemicolon() ? (this.next(), this.parseArrowExpression(this.startNodeAtNode(id), [id], false)) : id;
                }
                this.unexpected();
            }
          }
          parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {
            const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
            if (pipeProposal) return this.state.type = topicTokenType, this.state.value = topicTokenValue, this.state.pos--, this.state.end--, this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1), this.parseTopicReference(pipeProposal);
            this.unexpected();
          }
          parseTopicReference(pipeProposal) {
            const node = this.startNode(), startLoc = this.state.startLoc, tokenType = this.state.type;
            return this.next(), this.finishTopicReference(node, startLoc, pipeProposal, tokenType);
          }
          finishTopicReference(node, startLoc, pipeProposal, tokenType) {
            if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {
              const nodeType = "smart" === pipeProposal ? "PipelinePrimaryTopicReference" : "TopicReference";
              return this.topicReferenceIsAllowedInCurrentContext() || this.raise("smart" === pipeProposal ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, startLoc), this.registerTopicReference(), this.finishNode(node, nodeType);
            }
            throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, { token: tokenLabelName(tokenType) });
          }
          testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {
            switch (pipeProposal) {
              case "hack":
                return this.hasPlugin(["pipelineOperator", { topicToken: tokenLabelName(tokenType) }]);
              case "smart":
                return 27 === tokenType;
              default:
                throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);
            }
          }
          parseAsyncArrowUnaryFunction(node) {
            this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));
            const params = [this.parseIdentifier()];
            return this.prodParam.exit(), this.hasPrecedingLineBreak() && this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition()), this.expect(19), this.parseArrowExpression(node, params, true);
          }
          parseDo(node, isAsync) {
            this.expectPlugin("doExpressions"), isAsync && this.expectPlugin("asyncDoExpressions"), node.async = isAsync, this.next();
            const oldLabels = this.state.labels;
            return this.state.labels = [], isAsync ? (this.prodParam.enter(2), node.body = this.parseBlock(), this.prodParam.exit()) : node.body = this.parseBlock(), this.state.labels = oldLabels, this.finishNode(node, "DoExpression");
          }
          parseSuper() {
            const node = this.startNode();
            return this.next(), !this.match(10) || this.scope.allowDirectSuper || this.options.allowSuperOutsideMethod ? this.scope.allowSuper || this.options.allowSuperOutsideMethod || this.raise(Errors.UnexpectedSuper, node) : this.raise(Errors.SuperNotAllowed, node), this.match(10) || this.match(0) || this.match(16) || this.raise(Errors.UnsupportedSuper, node), this.finishNode(node, "Super");
          }
          parsePrivateName() {
            const node = this.startNode(), id = this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc, 1)), name = this.state.value;
            return this.next(), node.id = this.createIdentifier(id, name), this.finishNode(node, "PrivateName");
          }
          parseFunctionOrFunctionSent() {
            const node = this.startNode();
            if (this.next(), this.prodParam.hasYield && this.match(16)) {
              const meta = this.createIdentifier(this.startNodeAtNode(node), "function");
              return this.next(), this.match(103) ? this.expectPlugin("functionSent") : this.hasPlugin("functionSent") || this.unexpected(), this.parseMetaProperty(node, meta, "sent");
            }
            return this.parseFunction(node);
          }
          parseMetaProperty(node, meta, propertyName) {
            node.meta = meta;
            const containsEsc = this.state.containsEsc;
            return node.property = this.parseIdentifier(true), (node.property.name !== propertyName || containsEsc) && this.raise(Errors.UnsupportedMetaProperty, node.property, { target: meta.name, onlyValidPropertyName: propertyName }), this.finishNode(node, "MetaProperty");
          }
          parseImportMetaProperty(node) {
            const id = this.createIdentifier(this.startNodeAtNode(node), "import");
            if (this.next(), this.isContextual(101)) this.inModule || this.raise(Errors.ImportMetaOutsideModule, id), this.sawUnambiguousESM = true;
            else if (this.isContextual(105) || this.isContextual(97)) {
              const isSource = this.isContextual(105);
              if (isSource || this.unexpected(), this.expectPlugin(isSource ? "sourcePhaseImports" : "deferredImportEvaluation"), !this.options.createImportExpressions) throw this.raise(Errors.DynamicImportPhaseRequiresImportExpressions, this.state.startLoc, { phase: this.state.value });
              return this.next(), node.phase = isSource ? "source" : "defer", this.parseImportCall(node);
            }
            return this.parseMetaProperty(node, id, "meta");
          }
          parseLiteralAtNode(value2, type, node) {
            return this.addExtra(node, "rawValue", value2), this.addExtra(node, "raw", this.input.slice(this.offsetToSourcePos(node.start), this.state.end)), node.value = value2, this.next(), this.finishNode(node, type);
          }
          parseLiteral(value2, type) {
            const node = this.startNode();
            return this.parseLiteralAtNode(value2, type, node);
          }
          parseStringLiteral(value2) {
            return this.parseLiteral(value2, "StringLiteral");
          }
          parseNumericLiteral(value2) {
            return this.parseLiteral(value2, "NumericLiteral");
          }
          parseBigIntLiteral(value2) {
            return this.parseLiteral(value2, "BigIntLiteral");
          }
          parseDecimalLiteral(value2) {
            return this.parseLiteral(value2, "DecimalLiteral");
          }
          parseRegExpLiteral(value2) {
            const node = this.startNode();
            return this.addExtra(node, "raw", this.input.slice(this.offsetToSourcePos(node.start), this.state.end)), node.pattern = value2.pattern, node.flags = value2.flags, this.next(), this.finishNode(node, "RegExpLiteral");
          }
          parseBooleanLiteral(value2) {
            const node = this.startNode();
            return node.value = value2, this.next(), this.finishNode(node, "BooleanLiteral");
          }
          parseNullLiteral() {
            const node = this.startNode();
            return this.next(), this.finishNode(node, "NullLiteral");
          }
          parseParenAndDistinguishExpression(canBeArrow) {
            const startLoc = this.state.startLoc;
            let val;
            this.next(), this.expressionScope.enter(new ArrowHeadParsingScope(1));
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters, oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            this.state.maybeInArrowParameters = true, this.state.inFSharpPipelineDirectBody = false;
            const innerStartLoc = this.state.startLoc, exprList = [], refExpressionErrors = new ExpressionErrors();
            let spreadStartLoc, optionalCommaStartLoc, first = true;
            for (; !this.match(11); ) {
              if (first) first = false;
              else if (this.expect(12, null === refExpressionErrors.optionalParametersLoc ? null : refExpressionErrors.optionalParametersLoc), this.match(11)) {
                optionalCommaStartLoc = this.state.startLoc;
                break;
              }
              if (this.match(21)) {
                const spreadNodeStartLoc = this.state.startLoc;
                if (spreadStartLoc = this.state.startLoc, exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc)), !this.checkCommaAfterRest(41)) break;
              } else exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));
            }
            const innerEndLoc = this.state.lastTokEndLoc;
            this.expect(11), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
            let arrowNode = this.startNodeAt(startLoc);
            return canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode)) ? (this.checkDestructuringPrivate(refExpressionErrors), this.expressionScope.validateAsPattern(), this.expressionScope.exit(), this.parseArrowExpression(arrowNode, exprList, false), arrowNode) : (this.expressionScope.exit(), exprList.length || this.unexpected(this.state.lastTokStartLoc), optionalCommaStartLoc && this.unexpected(optionalCommaStartLoc), spreadStartLoc && this.unexpected(spreadStartLoc), this.checkExpressionErrors(refExpressionErrors, true), this.toReferencedListDeep(exprList, true), exprList.length > 1 ? (val = this.startNodeAt(innerStartLoc), val.expressions = exprList, this.finishNode(val, "SequenceExpression"), this.resetEndLocation(val, innerEndLoc)) : val = exprList[0], this.wrapParenthesis(startLoc, val));
          }
          wrapParenthesis(startLoc, expression) {
            if (!this.options.createParenthesizedExpressions) return this.addExtra(expression, "parenthesized", true), this.addExtra(expression, "parenStart", startLoc.index), this.takeSurroundingComments(expression, startLoc.index, this.state.lastTokEndLoc.index), expression;
            const parenExpression = this.startNodeAt(startLoc);
            return parenExpression.expression = expression, this.finishNode(parenExpression, "ParenthesizedExpression");
          }
          shouldParseArrow(params) {
            return !this.canInsertSemicolon();
          }
          parseArrow(node) {
            if (this.eat(19)) return node;
          }
          parseParenItem(node, startLoc) {
            return node;
          }
          parseNewOrNewTarget() {
            const node = this.startNode();
            if (this.next(), this.match(16)) {
              const meta = this.createIdentifier(this.startNodeAtNode(node), "new");
              this.next();
              const metaProp = this.parseMetaProperty(node, meta, "target");
              return this.scope.inNonArrowFunction || this.scope.inClass || this.options.allowNewTargetOutsideFunction || this.raise(Errors.UnexpectedNewTarget, metaProp), metaProp;
            }
            return this.parseNew(node);
          }
          parseNew(node) {
            if (this.parseNewCallee(node), this.eat(10)) {
              const args = this.parseExprList(11);
              this.toReferencedList(args), node.arguments = args;
            } else node.arguments = [];
            return this.finishNode(node, "NewExpression");
          }
          parseNewCallee(node) {
            const isImport = this.match(83), callee = this.parseNoCallExpr();
            node.callee = callee, !isImport || "Import" !== callee.type && "ImportExpression" !== callee.type || this.raise(Errors.ImportCallNotNewExpression, callee);
          }
          parseTemplateElement(isTagged) {
            const { start, startLoc, end, value: value2 } = this.state, elemStart = start + 1, elem = this.startNodeAt(createPositionWithColumnOffset(startLoc, 1));
            null === value2 && (isTagged || this.raise(Errors.InvalidEscapeSequenceTemplate, createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos, 1)));
            const isTail = this.match(24), endOffset = isTail ? -1 : -2, elemEnd = end + endOffset;
            elem.value = { raw: this.input.slice(elemStart, elemEnd).replace(/\r\n?/g, "\n"), cooked: null === value2 ? null : value2.slice(1, endOffset) }, elem.tail = isTail, this.next();
            const finishedNode = this.finishNode(elem, "TemplateElement");
            return this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset)), finishedNode;
          }
          parseTemplate(isTagged) {
            const node = this.startNode();
            let curElt = this.parseTemplateElement(isTagged);
            const quasis = [curElt], substitutions = [];
            for (; !curElt.tail; ) substitutions.push(this.parseTemplateSubstitution()), this.readTemplateContinuation(), quasis.push(curElt = this.parseTemplateElement(isTagged));
            return node.expressions = substitutions, node.quasis = quasis, this.finishNode(node, "TemplateLiteral");
          }
          parseTemplateSubstitution() {
            return this.parseExpression();
          }
          parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
            isRecord && this.expectPlugin("recordAndTuple");
            const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = false;
            const propHash = /* @__PURE__ */ Object.create(null);
            let first = true;
            const node = this.startNode();
            for (node.properties = [], this.next(); !this.match(close); ) {
              if (first) first = false;
              else if (this.expect(12), this.match(close)) {
                this.addTrailingCommaExtraToNode(node);
                break;
              }
              let prop;
              isPattern ? prop = this.parseBindingProperty() : (prop = this.parsePropertyDefinition(refExpressionErrors), this.checkProto(prop, isRecord, propHash, refExpressionErrors)), isRecord && !this.isObjectProperty(prop) && "SpreadElement" !== prop.type && this.raise(Errors.InvalidRecordProperty, prop), prop.shorthand && this.addExtra(prop, "shorthand", true), node.properties.push(prop);
            }
            this.next(), this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
            let type = "ObjectExpression";
            return isPattern ? type = "ObjectPattern" : isRecord && (type = "RecordExpression"), this.finishNode(node, type);
          }
          addTrailingCommaExtraToNode(node) {
            this.addExtra(node, "trailingComma", this.state.lastTokStartLoc.index), this.addExtra(node, "trailingCommaLoc", this.state.lastTokStartLoc, false);
          }
          maybeAsyncOrAccessorProp(prop) {
            return !prop.computed && "Identifier" === prop.key.type && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
          }
          parsePropertyDefinition(refExpressionErrors) {
            let decorators = [];
            if (this.match(26)) for (this.hasPlugin("decorators") && this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc); this.match(26); ) decorators.push(this.parseDecorator());
            const prop = this.startNode();
            let startLoc, isAsync = false, isAccessor = false;
            if (this.match(21)) return decorators.length && this.unexpected(), this.parseSpread();
            decorators.length && (prop.decorators = decorators, decorators = []), prop.method = false, refExpressionErrors && (startLoc = this.state.startLoc);
            let isGenerator2 = this.eat(55);
            this.parsePropertyNamePrefixOperator(prop);
            const containsEsc = this.state.containsEsc;
            if (this.parsePropertyName(prop, refExpressionErrors), !isGenerator2 && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
              const { key } = prop, keyName = key.name;
              "async" !== keyName || this.hasPrecedingLineBreak() || (isAsync = true, this.resetPreviousNodeTrailingComments(key), isGenerator2 = this.eat(55), this.parsePropertyName(prop)), "get" !== keyName && "set" !== keyName || (isAccessor = true, this.resetPreviousNodeTrailingComments(key), prop.kind = keyName, this.match(55) && (isGenerator2 = true, this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), { kind: keyName }), this.next()), this.parsePropertyName(prop));
            }
            return this.parseObjPropValue(prop, startLoc, isGenerator2, isAsync, false, isAccessor, refExpressionErrors);
          }
          getGetterSetterExpectedParamCount(method) {
            return "get" === method.kind ? 0 : 1;
          }
          getObjectOrClassMethodParams(method) {
            return method.params;
          }
          checkGetterSetterParams(method) {
            var _params;
            const paramCount = this.getGetterSetterExpectedParamCount(method), params = this.getObjectOrClassMethodParams(method);
            params.length !== paramCount && this.raise("get" === method.kind ? Errors.BadGetterArity : Errors.BadSetterArity, method), "set" === method.kind && "RestElement" === (null == (_params = params[params.length - 1]) ? void 0 : _params.type) && this.raise(Errors.BadSetterRestParameter, method);
          }
          parseObjectMethod(prop, isGenerator2, isAsync, isPattern, isAccessor) {
            if (isAccessor) {
              const finishedProp = this.parseMethod(prop, isGenerator2, false, false, false, "ObjectMethod");
              return this.checkGetterSetterParams(finishedProp), finishedProp;
            }
            if (isAsync || isGenerator2 || this.match(10)) return isPattern && this.unexpected(), prop.kind = "method", prop.method = true, this.parseMethod(prop, isGenerator2, isAsync, false, false, "ObjectMethod");
          }
          parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
            if (prop.shorthand = false, this.eat(14)) return prop.value = isPattern ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors), this.finishNode(prop, "ObjectProperty");
            if (!prop.computed && "Identifier" === prop.key.type) {
              if (this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false), isPattern) prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
              else if (this.match(29)) {
                const shorthandAssignLoc = this.state.startLoc;
                null != refExpressionErrors ? null === refExpressionErrors.shorthandAssignLoc && (refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc) : this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc), prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
              } else prop.value = cloneIdentifier(prop.key);
              return prop.shorthand = true, this.finishNode(prop, "ObjectProperty");
            }
          }
          parseObjPropValue(prop, startLoc, isGenerator2, isAsync, isPattern, isAccessor, refExpressionErrors) {
            const node = this.parseObjectMethod(prop, isGenerator2, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
            return node || this.unexpected(), node;
          }
          parsePropertyName(prop, refExpressionErrors) {
            if (this.eat(0)) prop.computed = true, prop.key = this.parseMaybeAssignAllowIn(), this.expect(3);
            else {
              const { type, value: value2 } = this.state;
              let key;
              if (tokenIsKeywordOrIdentifier(type)) key = this.parseIdentifier(true);
              else switch (type) {
                case 135:
                  key = this.parseNumericLiteral(value2);
                  break;
                case 134:
                  key = this.parseStringLiteral(value2);
                  break;
                case 136:
                  key = this.parseBigIntLiteral(value2);
                  break;
                case 139: {
                  const privateKeyLoc = this.state.startLoc;
                  null != refExpressionErrors ? null === refExpressionErrors.privateKeyLoc && (refExpressionErrors.privateKeyLoc = privateKeyLoc) : this.raise(Errors.UnexpectedPrivateField, privateKeyLoc), key = this.parsePrivateName();
                  break;
                }
                default:
                  if (137 === type) {
                    key = this.parseDecimalLiteral(value2);
                    break;
                  }
                  this.unexpected();
              }
              prop.key = key, 139 !== type && (prop.computed = false);
            }
          }
          initFunction(node, isAsync) {
            node.id = null, node.generator = false, node.async = isAsync;
          }
          parseMethod(node, isGenerator2, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
            this.initFunction(node, isAsync), node.generator = isGenerator2, this.scope.enter(18 | (inClassScope ? 64 : 0) | (allowDirectSuper ? 32 : 0)), this.prodParam.enter(functionFlags(isAsync, node.generator)), this.parseFunctionParams(node, isConstructor);
            const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);
            return this.prodParam.exit(), this.scope.exit(), finishedNode;
          }
          parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
            isTuple && this.expectPlugin("recordAndTuple");
            const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = false;
            const node = this.startNode();
            return this.next(), node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node), this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody, this.finishNode(node, isTuple ? "TupleExpression" : "ArrayExpression");
          }
          parseArrowExpression(node, params, isAsync, trailingCommaLoc) {
            this.scope.enter(6);
            let flags = functionFlags(isAsync, false);
            !this.match(5) && this.prodParam.hasIn && (flags |= 8), this.prodParam.enter(flags), this.initFunction(node, isAsync);
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            return params && (this.state.maybeInArrowParameters = true, this.setArrowFunctionParameters(node, params, trailingCommaLoc)), this.state.maybeInArrowParameters = false, this.parseFunctionBody(node, true), this.prodParam.exit(), this.scope.exit(), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, this.finishNode(node, "ArrowFunctionExpression");
          }
          setArrowFunctionParameters(node, params, trailingCommaLoc) {
            this.toAssignableList(params, trailingCommaLoc, false), node.params = params;
          }
          parseFunctionBodyAndFinish(node, type, isMethod = false) {
            return this.parseFunctionBody(node, false, isMethod), this.finishNode(node, type);
          }
          parseFunctionBody(node, allowExpression, isMethod = false) {
            const isExpression = allowExpression && !this.match(5);
            if (this.expressionScope.enter(newExpressionScope()), isExpression) node.body = this.parseMaybeAssign(), this.checkParams(node, false, allowExpression, false);
            else {
              const oldStrict = this.state.strict, oldLabels = this.state.labels;
              this.state.labels = [], this.prodParam.enter(4 | this.prodParam.currentFlags()), node.body = this.parseBlock(true, false, (hasStrictModeDirective) => {
                const nonSimple = !this.isSimpleParamList(node.params);
                hasStrictModeDirective && nonSimple && this.raise(Errors.IllegalLanguageModeDirective, "method" !== node.kind && "constructor" !== node.kind || !node.key ? node : node.key.loc.end);
                const strictModeChanged = !oldStrict && this.state.strict;
                this.checkParams(node, !(this.state.strict || allowExpression || isMethod || nonSimple), allowExpression, strictModeChanged), this.state.strict && node.id && this.checkIdentifier(node.id, 65, strictModeChanged);
              }), this.prodParam.exit(), this.state.labels = oldLabels;
            }
            this.expressionScope.exit();
          }
          isSimpleParameter(node) {
            return "Identifier" === node.type;
          }
          isSimpleParamList(params) {
            for (let i2 = 0, len = params.length; i2 < len; i2++) if (!this.isSimpleParameter(params[i2])) return false;
            return true;
          }
          checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
            const checkClashes = !allowDuplicates && /* @__PURE__ */ new Set(), formalParameters = { type: "FormalParameters" };
            for (const param of node.params) this.checkLVal(param, formalParameters, 5, checkClashes, strictModeChanged);
          }
          parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
            const elts = [];
            let first = true;
            for (; !this.eat(close); ) {
              if (first) first = false;
              else if (this.expect(12), this.match(close)) {
                nodeForExtra && this.addTrailingCommaExtraToNode(nodeForExtra), this.next();
                break;
              }
              elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
            }
            return elts;
          }
          parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
            let elt;
            if (this.match(12)) allowEmpty || this.raise(Errors.UnexpectedToken, this.state.curPosition(), { unexpected: "," }), elt = null;
            else if (this.match(21)) {
              const spreadNodeStartLoc = this.state.startLoc;
              elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartLoc);
            } else if (this.match(17)) {
              this.expectPlugin("partialApplication"), allowPlaceholder || this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);
              const node = this.startNode();
              this.next(), elt = this.finishNode(node, "ArgumentPlaceholder");
            } else elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);
            return elt;
          }
          parseIdentifier(liberal) {
            const node = this.startNode(), name = this.parseIdentifierName(liberal);
            return this.createIdentifier(node, name);
          }
          createIdentifier(node, name) {
            return node.name = name, node.loc.identifierName = name, this.finishNode(node, "Identifier");
          }
          parseIdentifierName(liberal) {
            let name;
            const { startLoc, type } = this.state;
            tokenIsKeywordOrIdentifier(type) ? name = this.state.value : this.unexpected();
            const tokenIsKeyword2 = type <= 92;
            return liberal ? tokenIsKeyword2 && this.replaceToken(132) : this.checkReservedWord(name, startLoc, tokenIsKeyword2, false), this.next(), name;
          }
          checkReservedWord(word, startLoc, checkKeywords, isBinding) {
            if (word.length > 10) return;
            if (!function(word2) {
              return reservedWordLikeSet.has(word2);
            }(word)) return;
            if (checkKeywords && function(word2) {
              return keywords.has(word2);
            }(word)) return void this.raise(Errors.UnexpectedKeyword, startLoc, { keyword: word });
            if ((this.state.strict ? isBinding ? isStrictBindReservedWord : isStrictReservedWord : isReservedWord)(word, this.inModule)) this.raise(Errors.UnexpectedReservedWord, startLoc, { reservedWord: word });
            else if ("yield" === word) {
              if (this.prodParam.hasYield) return void this.raise(Errors.YieldBindingIdentifier, startLoc);
            } else if ("await" === word) {
              if (this.prodParam.hasAwait) return void this.raise(Errors.AwaitBindingIdentifier, startLoc);
              if (this.scope.inStaticBlock) return void this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);
              this.expressionScope.recordAsyncArrowParametersError(startLoc);
            } else if ("arguments" === word && this.scope.inClassAndNotInNonArrowFunction) return void this.raise(Errors.ArgumentsInClass, startLoc);
          }
          recordAwaitIfAllowed() {
            const isAwaitAllowed = this.prodParam.hasAwait || this.options.allowAwaitOutsideFunction && !this.scope.inFunction;
            return isAwaitAllowed && !this.scope.inFunction && (this.state.hasTopLevelAwait = true), isAwaitAllowed;
          }
          parseAwait(startLoc) {
            const node = this.startNodeAt(startLoc);
            return this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, node), this.eat(55) && this.raise(Errors.ObsoleteAwaitStar, node), this.scope.inFunction || this.options.allowAwaitOutsideFunction || (this.isAmbiguousAwait() ? this.ambiguousScriptDifferentAst = true : this.sawUnambiguousESM = true), this.state.soloAwait || (node.argument = this.parseMaybeUnary(null, true)), this.finishNode(node, "AwaitExpression");
          }
          isAmbiguousAwait() {
            if (this.hasPrecedingLineBreak()) return true;
            const { type } = this.state;
            return 53 === type || 10 === type || 0 === type || tokenIsTemplate(type) || 102 === type && !this.state.containsEsc || 138 === type || 56 === type || this.hasPlugin("v8intrinsic") && 54 === type;
          }
          parseYield() {
            const node = this.startNode();
            this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, node), this.next();
            let delegating = false, argument = null;
            if (!this.hasPrecedingLineBreak()) switch (delegating = this.eat(55), this.state.type) {
              case 13:
              case 140:
              case 8:
              case 11:
              case 3:
              case 9:
              case 14:
              case 12:
                if (!delegating) break;
              default:
                argument = this.parseMaybeAssign();
            }
            return node.delegate = delegating, node.argument = argument, this.finishNode(node, "YieldExpression");
          }
          parseImportCall(node) {
            if (this.next(), node.source = this.parseMaybeAssignAllowIn(), node.options = null, this.eat(12) && !this.match(11) && (node.options = this.parseMaybeAssignAllowIn(), this.eat(12) && !this.match(11))) {
              do {
                this.parseMaybeAssignAllowIn();
              } while (this.eat(12) && !this.match(11));
              this.raise(Errors.ImportCallArity, node);
            }
            return this.expect(11), this.finishNode(node, "ImportExpression");
          }
          checkPipelineAtInfixOperator(left, leftStartLoc) {
            this.hasPlugin(["pipelineOperator", { proposal: "smart" }]) && "SequenceExpression" === left.type && this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);
          }
          parseSmartPipelineBodyInStyle(childExpr, startLoc) {
            if (this.isSimpleReference(childExpr)) {
              const bodyNode = this.startNodeAt(startLoc);
              return bodyNode.callee = childExpr, this.finishNode(bodyNode, "PipelineBareFunction");
            }
            {
              const bodyNode = this.startNodeAt(startLoc);
              return this.checkSmartPipeTopicBodyEarlyErrors(startLoc), bodyNode.expression = childExpr, this.finishNode(bodyNode, "PipelineTopicExpression");
            }
          }
          isSimpleReference(expression) {
            switch (expression.type) {
              case "MemberExpression":
                return !expression.computed && this.isSimpleReference(expression.object);
              case "Identifier":
                return true;
              default:
                return false;
            }
          }
          checkSmartPipeTopicBodyEarlyErrors(startLoc) {
            if (this.match(19)) throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);
            this.topicReferenceWasUsedInCurrentContext() || this.raise(Errors.PipelineTopicUnused, startLoc);
          }
          withTopicBindingContext(callback) {
            const outerContextTopicState = this.state.topicContext;
            this.state.topicContext = { maxNumOfResolvableTopics: 1, maxTopicIndex: null };
            try {
              return callback();
            } finally {
              this.state.topicContext = outerContextTopicState;
            }
          }
          withSmartMixTopicForbiddingContext(callback) {
            if (!this.hasPlugin(["pipelineOperator", { proposal: "smart" }])) return callback();
            {
              const outerContextTopicState = this.state.topicContext;
              this.state.topicContext = { maxNumOfResolvableTopics: 0, maxTopicIndex: null };
              try {
                return callback();
              } finally {
                this.state.topicContext = outerContextTopicState;
              }
            }
          }
          withSoloAwaitPermittingContext(callback) {
            const outerContextSoloAwaitState = this.state.soloAwait;
            this.state.soloAwait = true;
            try {
              return callback();
            } finally {
              this.state.soloAwait = outerContextSoloAwaitState;
            }
          }
          allowInAnd(callback) {
            const flags = this.prodParam.currentFlags();
            if (8 & ~flags) {
              this.prodParam.enter(8 | flags);
              try {
                return callback();
              } finally {
                this.prodParam.exit();
              }
            }
            return callback();
          }
          disallowInAnd(callback) {
            const flags = this.prodParam.currentFlags();
            if (8 & flags) {
              this.prodParam.enter(-9 & flags);
              try {
                return callback();
              } finally {
                this.prodParam.exit();
              }
            }
            return callback();
          }
          registerTopicReference() {
            this.state.topicContext.maxTopicIndex = 0;
          }
          topicReferenceIsAllowedInCurrentContext() {
            return this.state.topicContext.maxNumOfResolvableTopics >= 1;
          }
          topicReferenceWasUsedInCurrentContext() {
            return null != this.state.topicContext.maxTopicIndex && this.state.topicContext.maxTopicIndex >= 0;
          }
          parseFSharpPipelineBody(prec) {
            const startLoc = this.state.startLoc;
            this.state.potentialArrowAt = this.state.start;
            const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = true;
            const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, prec);
            return this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody, ret;
          }
          parseModuleExpression() {
            this.expectPlugin("moduleBlocks");
            const node = this.startNode();
            this.next(), this.match(5) || this.unexpected(null, 5);
            const program = this.startNodeAt(this.state.endLoc);
            this.next();
            const revertScopes = this.initializeScopes(true);
            this.enterInitialScopes();
            try {
              node.body = this.parseProgram(program, 8, "module");
            } finally {
              revertScopes();
            }
            return this.finishNode(node, "ModuleExpression");
          }
          parsePropertyNamePrefixOperator(prop) {
          }
        }
        const loopLabel = { kind: 1 }, switchLabel = { kind: 2 }, loneSurrogate = /[\uD800-\uDFFF]/u, keywordRelationalOperator = /in(?:stanceof)?/y;
        class StatementParser extends ExpressionParser {
          parseTopLevel(file, program) {
            return file.program = this.parseProgram(program), file.comments = this.comments, this.options.tokens && (file.tokens = function(tokens, input, startIndex) {
              for (let i2 = 0; i2 < tokens.length; i2++) {
                const token = tokens[i2], { type } = token;
                if ("number" == typeof type) {
                  if (139 === type) {
                    const { loc, start, value: value2, end } = token, hashEndPos = start + 1, hashEndLoc = createPositionWithColumnOffset(loc.start, 1);
                    tokens.splice(i2, 1, new Token({ type: getExportedToken(27), value: "#", start, end: hashEndPos, startLoc: loc.start, endLoc: hashEndLoc }), new Token({ type: getExportedToken(132), value: value2, start: hashEndPos, end, startLoc: hashEndLoc, endLoc: loc.end })), i2++;
                    continue;
                  }
                  if (tokenIsTemplate(type)) {
                    const { loc, start, value: value2, end } = token, backquoteEnd = start + 1, backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);
                    let startToken, templateValue, templateElementEnd, templateElementEndLoc, endToken;
                    startToken = 96 === input.charCodeAt(start - startIndex) ? new Token({ type: getExportedToken(22), value: "`", start, end: backquoteEnd, startLoc: loc.start, endLoc: backquoteEndLoc }) : new Token({ type: getExportedToken(8), value: "}", start, end: backquoteEnd, startLoc: loc.start, endLoc: backquoteEndLoc }), 24 === type ? (templateElementEnd = end - 1, templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1), templateValue = null === value2 ? null : value2.slice(1, -1), endToken = new Token({ type: getExportedToken(22), value: "`", start: templateElementEnd, end, startLoc: templateElementEndLoc, endLoc: loc.end })) : (templateElementEnd = end - 2, templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2), templateValue = null === value2 ? null : value2.slice(1, -2), endToken = new Token({ type: getExportedToken(23), value: "${", start: templateElementEnd, end, startLoc: templateElementEndLoc, endLoc: loc.end })), tokens.splice(i2, 1, startToken, new Token({ type: getExportedToken(20), value: templateValue, start: backquoteEnd, end: templateElementEnd, startLoc: backquoteEndLoc, endLoc: templateElementEndLoc }), endToken), i2 += 2;
                    continue;
                  }
                  token.type = getExportedToken(type);
                }
              }
              return tokens;
            }(this.tokens, this.input, this.startIndex)), this.finishNode(file, "File");
          }
          parseProgram(program, end = 140, sourceType = this.options.sourceType) {
            if (program.sourceType = sourceType, program.interpreter = this.parseInterpreterDirective(), this.parseBlockBody(program, true, true, end), this.inModule) {
              if (!this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) for (const [localName, at] of Array.from(this.scope.undefinedExports)) this.raise(Errors.ModuleExportUndefined, at, { localName });
              this.addExtra(program, "topLevelAwait", this.state.hasTopLevelAwait);
            }
            let finishedProgram;
            return finishedProgram = 140 === end ? this.finishNode(program, "Program") : this.finishNodeAt(program, "Program", createPositionWithColumnOffset(this.state.startLoc, -1)), finishedProgram;
          }
          stmtToDirective(stmt) {
            const directive = stmt;
            directive.type = "Directive", directive.value = directive.expression, delete directive.expression;
            const directiveLiteral = directive.value, expressionValue = directiveLiteral.value, raw2 = this.input.slice(this.offsetToSourcePos(directiveLiteral.start), this.offsetToSourcePos(directiveLiteral.end)), val = directiveLiteral.value = raw2.slice(1, -1);
            return this.addExtra(directiveLiteral, "raw", raw2), this.addExtra(directiveLiteral, "rawValue", val), this.addExtra(directiveLiteral, "expressionValue", expressionValue), directiveLiteral.type = "DirectiveLiteral", directive;
          }
          parseInterpreterDirective() {
            if (!this.match(28)) return null;
            const node = this.startNode();
            return node.value = this.state.value, this.next(), this.finishNode(node, "InterpreterDirective");
          }
          isLet() {
            return !!this.isContextual(100) && this.hasFollowingBindingAtom();
          }
          chStartsBindingIdentifier(ch, pos) {
            if (isIdentifierStart(ch)) {
              if (keywordRelationalOperator.lastIndex = pos, keywordRelationalOperator.test(this.input)) {
                const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);
                if (!isIdentifierChar(endCh) && 92 !== endCh) return false;
              }
              return true;
            }
            return 92 === ch;
          }
          chStartsBindingPattern(ch) {
            return 91 === ch || 123 === ch;
          }
          hasFollowingBindingAtom() {
            const next = this.nextTokenStart(), nextCh = this.codePointAtPos(next);
            return this.chStartsBindingPattern(nextCh) || this.chStartsBindingIdentifier(nextCh, next);
          }
          hasInLineFollowingBindingIdentifierOrBrace() {
            const next = this.nextTokenInLineStart(), nextCh = this.codePointAtPos(next);
            return 123 === nextCh || this.chStartsBindingIdentifier(nextCh, next);
          }
          startsUsingForOf() {
            const { type, containsEsc } = this.lookahead();
            return !(102 === type && !containsEsc) && (tokenIsIdentifier(type) && !this.hasFollowingLineBreak() ? (this.expectPlugin("explicitResourceManagement"), true) : void 0);
          }
          startsAwaitUsing() {
            let next = this.nextTokenInLineStart();
            if (this.isUnparsedContextual(next, "using")) {
              next = this.nextTokenInLineStartSince(next + 5);
              const nextCh = this.codePointAtPos(next);
              if (this.chStartsBindingIdentifier(nextCh, next)) return this.expectPlugin("explicitResourceManagement"), true;
            }
            return false;
          }
          parseModuleItem() {
            return this.parseStatementLike(15);
          }
          parseStatementListItem() {
            return this.parseStatementLike(6 | (!this.options.annexB || this.state.strict ? 0 : 8));
          }
          parseStatementOrSloppyAnnexBFunctionDeclaration(allowLabeledFunction = false) {
            let flags = 0;
            return this.options.annexB && !this.state.strict && (flags |= 4, allowLabeledFunction && (flags |= 8)), this.parseStatementLike(flags);
          }
          parseStatement() {
            return this.parseStatementLike(0);
          }
          parseStatementLike(flags) {
            let decorators = null;
            return this.match(26) && (decorators = this.parseDecorators(true)), this.parseStatementContent(flags, decorators);
          }
          parseStatementContent(flags, decorators) {
            const startType = this.state.type, node = this.startNode(), allowDeclaration = !!(2 & flags), allowFunctionDeclaration = !!(4 & flags), topLevel = 1 & flags;
            switch (startType) {
              case 60:
                return this.parseBreakContinueStatement(node, true);
              case 63:
                return this.parseBreakContinueStatement(node, false);
              case 64:
                return this.parseDebuggerStatement(node);
              case 90:
                return this.parseDoWhileStatement(node);
              case 91:
                return this.parseForStatement(node);
              case 68:
                if (46 === this.lookaheadCharCode()) break;
                return allowFunctionDeclaration || this.raise(this.state.strict ? Errors.StrictFunction : this.options.annexB ? Errors.SloppyFunctionAnnexB : Errors.SloppyFunction, this.state.startLoc), this.parseFunctionStatement(node, false, !allowDeclaration && allowFunctionDeclaration);
              case 80:
                return allowDeclaration || this.unexpected(), this.parseClass(this.maybeTakeDecorators(decorators, node), true);
              case 69:
                return this.parseIfStatement(node);
              case 70:
                return this.parseReturnStatement(node);
              case 71:
                return this.parseSwitchStatement(node);
              case 72:
                return this.parseThrowStatement(node);
              case 73:
                return this.parseTryStatement(node);
              case 96:
                if (!this.state.containsEsc && this.startsAwaitUsing()) return this.recordAwaitIfAllowed() ? allowDeclaration || this.raise(Errors.UnexpectedLexicalDeclaration, node) : this.raise(Errors.AwaitUsingNotInAsyncContext, node), this.next(), this.parseVarStatement(node, "await using");
                break;
              case 107:
                if (this.state.containsEsc || !this.hasInLineFollowingBindingIdentifierOrBrace()) break;
                return this.expectPlugin("explicitResourceManagement"), !this.scope.inModule && this.scope.inTopLevel ? this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc) : allowDeclaration || this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc), this.parseVarStatement(node, "using");
              case 100: {
                if (this.state.containsEsc) break;
                const next = this.nextTokenStart(), nextCh = this.codePointAtPos(next);
                if (91 !== nextCh) {
                  if (!allowDeclaration && this.hasFollowingLineBreak()) break;
                  if (!this.chStartsBindingIdentifier(nextCh, next) && 123 !== nextCh) break;
                }
              }
              case 75:
                allowDeclaration || this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);
              case 74: {
                const kind = this.state.value;
                return this.parseVarStatement(node, kind);
              }
              case 92:
                return this.parseWhileStatement(node);
              case 76:
                return this.parseWithStatement(node);
              case 5:
                return this.parseBlock();
              case 13:
                return this.parseEmptyStatement(node);
              case 83: {
                const nextTokenCharCode = this.lookaheadCharCode();
                if (40 === nextTokenCharCode || 46 === nextTokenCharCode) break;
              }
              case 82: {
                let result;
                return this.options.allowImportExportEverywhere || topLevel || this.raise(Errors.UnexpectedImportExport, this.state.startLoc), this.next(), 83 === startType ? (result = this.parseImport(node), "ImportDeclaration" !== result.type || result.importKind && "value" !== result.importKind || (this.sawUnambiguousESM = true)) : (result = this.parseExport(node, decorators), ("ExportNamedDeclaration" !== result.type || result.exportKind && "value" !== result.exportKind) && ("ExportAllDeclaration" !== result.type || result.exportKind && "value" !== result.exportKind) && "ExportDefaultDeclaration" !== result.type || (this.sawUnambiguousESM = true)), this.assertModuleNodeAllowed(result), result;
              }
              default:
                if (this.isAsyncFunction()) return allowDeclaration || this.raise(Errors.AsyncFunctionInSingleStatementContext, this.state.startLoc), this.next(), this.parseFunctionStatement(node, true, !allowDeclaration && allowFunctionDeclaration);
            }
            const maybeName = this.state.value, expr = this.parseExpression();
            return tokenIsIdentifier(startType) && "Identifier" === expr.type && this.eat(14) ? this.parseLabeledStatement(node, maybeName, expr, flags) : this.parseExpressionStatement(node, expr, decorators);
          }
          assertModuleNodeAllowed(node) {
            this.options.allowImportExportEverywhere || this.inModule || this.raise(Errors.ImportOutsideModule, node);
          }
          decoratorsEnabledBeforeExport() {
            return !!this.hasPlugin("decorators-legacy") || this.hasPlugin("decorators") && false !== this.getPluginOption("decorators", "decoratorsBeforeExport");
          }
          maybeTakeDecorators(maybeDecorators, classNode, exportNode) {
            return maybeDecorators && (classNode.decorators && classNode.decorators.length > 0 ? ("boolean" != typeof this.getPluginOption("decorators", "decoratorsBeforeExport") && this.raise(Errors.DecoratorsBeforeAfterExport, classNode.decorators[0]), classNode.decorators.unshift(...maybeDecorators)) : classNode.decorators = maybeDecorators, this.resetStartLocationFromNode(classNode, maybeDecorators[0]), exportNode && this.resetStartLocationFromNode(exportNode, classNode)), classNode;
          }
          canHaveLeadingDecorator() {
            return this.match(80);
          }
          parseDecorators(allowExport) {
            const decorators = [];
            do {
              decorators.push(this.parseDecorator());
            } while (this.match(26));
            if (this.match(82)) allowExport || this.unexpected(), this.decoratorsEnabledBeforeExport() || this.raise(Errors.DecoratorExportClass, this.state.startLoc);
            else if (!this.canHaveLeadingDecorator()) throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);
            return decorators;
          }
          parseDecorator() {
            this.expectOnePlugin(["decorators", "decorators-legacy"]);
            const node = this.startNode();
            if (this.next(), this.hasPlugin("decorators")) {
              const startLoc = this.state.startLoc;
              let expr;
              if (this.match(10)) {
                const startLoc2 = this.state.startLoc;
                this.next(), expr = this.parseExpression(), this.expect(11), expr = this.wrapParenthesis(startLoc2, expr);
                const paramsStartLoc = this.state.startLoc;
                node.expression = this.parseMaybeDecoratorArguments(expr), false === this.getPluginOption("decorators", "allowCallParenthesized") && node.expression !== expr && this.raise(Errors.DecoratorArgumentsOutsideParentheses, paramsStartLoc);
              } else {
                for (expr = this.parseIdentifier(false); this.eat(16); ) {
                  const node2 = this.startNodeAt(startLoc);
                  node2.object = expr, this.match(139) ? (this.classScope.usePrivateName(this.state.value, this.state.startLoc), node2.property = this.parsePrivateName()) : node2.property = this.parseIdentifier(true), node2.computed = false, expr = this.finishNode(node2, "MemberExpression");
                }
                node.expression = this.parseMaybeDecoratorArguments(expr);
              }
            } else node.expression = this.parseExprSubscripts();
            return this.finishNode(node, "Decorator");
          }
          parseMaybeDecoratorArguments(expr) {
            if (this.eat(10)) {
              const node = this.startNodeAtNode(expr);
              return node.callee = expr, node.arguments = this.parseCallExpressionArguments(11), this.toReferencedList(node.arguments), this.finishNode(node, "CallExpression");
            }
            return expr;
          }
          parseBreakContinueStatement(node, isBreak) {
            return this.next(), this.isLineTerminator() ? node.label = null : (node.label = this.parseIdentifier(), this.semicolon()), this.verifyBreakContinue(node, isBreak), this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
          }
          verifyBreakContinue(node, isBreak) {
            let i2;
            for (i2 = 0; i2 < this.state.labels.length; ++i2) {
              const lab = this.state.labels[i2];
              if (null == node.label || lab.name === node.label.name) {
                if (null != lab.kind && (isBreak || 1 === lab.kind)) break;
                if (node.label && isBreak) break;
              }
            }
            if (i2 === this.state.labels.length) {
              const type = isBreak ? "BreakStatement" : "ContinueStatement";
              this.raise(Errors.IllegalBreakContinue, node, { type });
            }
          }
          parseDebuggerStatement(node) {
            return this.next(), this.semicolon(), this.finishNode(node, "DebuggerStatement");
          }
          parseHeaderExpression() {
            this.expect(10);
            const val = this.parseExpression();
            return this.expect(11), val;
          }
          parseDoWhileStatement(node) {
            return this.next(), this.state.labels.push(loopLabel), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.state.labels.pop(), this.expect(92), node.test = this.parseHeaderExpression(), this.eat(13), this.finishNode(node, "DoWhileStatement");
          }
          parseForStatement(node) {
            this.next(), this.state.labels.push(loopLabel);
            let awaitAt = null;
            if (this.isContextual(96) && this.recordAwaitIfAllowed() && (awaitAt = this.state.startLoc, this.next()), this.scope.enter(0), this.expect(10), this.match(13)) return null !== awaitAt && this.unexpected(awaitAt), this.parseFor(node, null);
            const startsWithLet = this.isContextual(100);
            {
              const startsWithAwaitUsing = this.isContextual(96) && this.startsAwaitUsing(), starsWithUsingDeclaration = startsWithAwaitUsing || this.isContextual(107) && this.startsUsingForOf(), isLetOrUsing = startsWithLet && this.hasFollowingBindingAtom() || starsWithUsingDeclaration;
              if (this.match(74) || this.match(75) || isLetOrUsing) {
                const initNode = this.startNode();
                let kind;
                startsWithAwaitUsing ? (kind = "await using", this.recordAwaitIfAllowed() || this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc), this.next()) : kind = this.state.value, this.next(), this.parseVar(initNode, true, kind);
                const init2 = this.finishNode(initNode, "VariableDeclaration"), isForIn = this.match(58);
                return isForIn && starsWithUsingDeclaration && this.raise(Errors.ForInUsing, init2), (isForIn || this.isContextual(102)) && 1 === init2.declarations.length ? this.parseForIn(node, init2, awaitAt) : (null !== awaitAt && this.unexpected(awaitAt), this.parseFor(node, init2));
              }
            }
            const startsWithAsync = this.isContextual(95), refExpressionErrors = new ExpressionErrors(), init = this.parseExpression(true, refExpressionErrors), isForOf = this.isContextual(102);
            if (isForOf && (startsWithLet && this.raise(Errors.ForOfLet, init), null === awaitAt && startsWithAsync && "Identifier" === init.type && this.raise(Errors.ForOfAsync, init)), isForOf || this.match(58)) {
              this.checkDestructuringPrivate(refExpressionErrors), this.toAssignable(init, true);
              const type = isForOf ? "ForOfStatement" : "ForInStatement";
              return this.checkLVal(init, { type }), this.parseForIn(node, init, awaitAt);
            }
            return this.checkExpressionErrors(refExpressionErrors, true), null !== awaitAt && this.unexpected(awaitAt), this.parseFor(node, init);
          }
          parseFunctionStatement(node, isAsync, isHangingDeclaration) {
            return this.next(), this.parseFunction(node, 1 | (isHangingDeclaration ? 2 : 0) | (isAsync ? 8 : 0));
          }
          parseIfStatement(node) {
            return this.next(), node.test = this.parseHeaderExpression(), node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration(), node.alternate = this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null, this.finishNode(node, "IfStatement");
          }
          parseReturnStatement(node) {
            return this.prodParam.hasReturn || this.options.allowReturnOutsideFunction || this.raise(Errors.IllegalReturn, this.state.startLoc), this.next(), this.isLineTerminator() ? node.argument = null : (node.argument = this.parseExpression(), this.semicolon()), this.finishNode(node, "ReturnStatement");
          }
          parseSwitchStatement(node) {
            this.next(), node.discriminant = this.parseHeaderExpression();
            const cases = node.cases = [];
            let cur;
            this.expect(5), this.state.labels.push(switchLabel), this.scope.enter(0);
            for (let sawDefault; !this.match(8); ) if (this.match(61) || this.match(65)) {
              const isCase = this.match(61);
              cur && this.finishNode(cur, "SwitchCase"), cases.push(cur = this.startNode()), cur.consequent = [], this.next(), isCase ? cur.test = this.parseExpression() : (sawDefault && this.raise(Errors.MultipleDefaultsInSwitch, this.state.lastTokStartLoc), sawDefault = true, cur.test = null), this.expect(14);
            } else cur ? cur.consequent.push(this.parseStatementListItem()) : this.unexpected();
            return this.scope.exit(), cur && this.finishNode(cur, "SwitchCase"), this.next(), this.state.labels.pop(), this.finishNode(node, "SwitchStatement");
          }
          parseThrowStatement(node) {
            return this.next(), this.hasPrecedingLineBreak() && this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc), node.argument = this.parseExpression(), this.semicolon(), this.finishNode(node, "ThrowStatement");
          }
          parseCatchClauseParam() {
            const param = this.parseBindingAtom();
            return this.scope.enter(this.options.annexB && "Identifier" === param.type ? 8 : 0), this.checkLVal(param, { type: "CatchClause" }, 9), param;
          }
          parseTryStatement(node) {
            if (this.next(), node.block = this.parseBlock(), node.handler = null, this.match(62)) {
              const clause = this.startNode();
              this.next(), this.match(10) ? (this.expect(10), clause.param = this.parseCatchClauseParam(), this.expect(11)) : (clause.param = null, this.scope.enter(0)), clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false)), this.scope.exit(), node.handler = this.finishNode(clause, "CatchClause");
            }
            return node.finalizer = this.eat(67) ? this.parseBlock() : null, node.handler || node.finalizer || this.raise(Errors.NoCatchOrFinally, node), this.finishNode(node, "TryStatement");
          }
          parseVarStatement(node, kind, allowMissingInitializer = false) {
            return this.next(), this.parseVar(node, false, kind, allowMissingInitializer), this.semicolon(), this.finishNode(node, "VariableDeclaration");
          }
          parseWhileStatement(node) {
            return this.next(), node.test = this.parseHeaderExpression(), this.state.labels.push(loopLabel), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.state.labels.pop(), this.finishNode(node, "WhileStatement");
          }
          parseWithStatement(node) {
            return this.state.strict && this.raise(Errors.StrictWith, this.state.startLoc), this.next(), node.object = this.parseHeaderExpression(), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.finishNode(node, "WithStatement");
          }
          parseEmptyStatement(node) {
            return this.next(), this.finishNode(node, "EmptyStatement");
          }
          parseLabeledStatement(node, maybeName, expr, flags) {
            for (const label of this.state.labels) label.name === maybeName && this.raise(Errors.LabelRedeclaration, expr, { labelName: maybeName });
            const kind = (token = this.state.type) >= 90 && token <= 92 ? 1 : this.match(71) ? 2 : null;
            var token;
            for (let i2 = this.state.labels.length - 1; i2 >= 0; i2--) {
              const label = this.state.labels[i2];
              if (label.statementStart !== node.start) break;
              label.statementStart = this.sourceToOffsetPos(this.state.start), label.kind = kind;
            }
            return this.state.labels.push({ name: maybeName, kind, statementStart: this.sourceToOffsetPos(this.state.start) }), node.body = 8 & flags ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true) : this.parseStatement(), this.state.labels.pop(), node.label = expr, this.finishNode(node, "LabeledStatement");
          }
          parseExpressionStatement(node, expr, decorators) {
            return node.expression = expr, this.semicolon(), this.finishNode(node, "ExpressionStatement");
          }
          parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {
            const node = this.startNode();
            return allowDirectives && this.state.strictErrors.clear(), this.expect(5), createNewLexicalScope && this.scope.enter(0), this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse), createNewLexicalScope && this.scope.exit(), this.finishNode(node, "BlockStatement");
          }
          isValidDirective(stmt) {
            return "ExpressionStatement" === stmt.type && "StringLiteral" === stmt.expression.type && !stmt.expression.extra.parenthesized;
          }
          parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
            const body = node.body = [], directives = node.directives = [];
            this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : void 0, topLevel, end, afterBlockParse);
          }
          parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
            const oldStrict = this.state.strict;
            let hasStrictModeDirective = false, parsedNonDirective = false;
            for (; !this.match(end); ) {
              const stmt = topLevel ? this.parseModuleItem() : this.parseStatementListItem();
              if (directives && !parsedNonDirective) {
                if (this.isValidDirective(stmt)) {
                  const directive = this.stmtToDirective(stmt);
                  directives.push(directive), hasStrictModeDirective || "use strict" !== directive.value.value || (hasStrictModeDirective = true, this.setStrict(true));
                  continue;
                }
                parsedNonDirective = true, this.state.strictErrors.clear();
              }
              body.push(stmt);
            }
            null == afterBlockParse || afterBlockParse.call(this, hasStrictModeDirective), oldStrict || this.setStrict(false), this.next();
          }
          parseFor(node, init) {
            return node.init = init, this.semicolon(false), node.test = this.match(13) ? null : this.parseExpression(), this.semicolon(false), node.update = this.match(11) ? null : this.parseExpression(), this.expect(11), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.scope.exit(), this.state.labels.pop(), this.finishNode(node, "ForStatement");
          }
          parseForIn(node, init, awaitAt) {
            const isForIn = this.match(58);
            return this.next(), isForIn ? null !== awaitAt && this.unexpected(awaitAt) : node.await = null !== awaitAt, "VariableDeclaration" !== init.type || null == init.declarations[0].init || isForIn && this.options.annexB && !this.state.strict && "var" === init.kind && "Identifier" === init.declarations[0].id.type || this.raise(Errors.ForInOfLoopInitializer, init, { type: isForIn ? "ForInStatement" : "ForOfStatement" }), "AssignmentPattern" === init.type && this.raise(Errors.InvalidLhs, init, { ancestor: { type: "ForStatement" } }), node.left = init, node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn(), this.expect(11), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.scope.exit(), this.state.labels.pop(), this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
          }
          parseVar(node, isFor, kind, allowMissingInitializer = false) {
            const declarations = node.declarations = [];
            for (node.kind = kind; ; ) {
              const decl = this.startNode();
              if (this.parseVarId(decl, kind), decl.init = this.eat(29) ? isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn() : null, null !== decl.init || allowMissingInitializer || ("Identifier" === decl.id.type || isFor && (this.match(58) || this.isContextual(102)) ? "const" !== kind && "using" !== kind && "await using" !== kind || this.match(58) || this.isContextual(102) || this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, { kind }) : this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, { kind: "destructuring" })), declarations.push(this.finishNode(decl, "VariableDeclarator")), !this.eat(12)) break;
            }
            return node;
          }
          parseVarId(decl, kind) {
            const id = this.parseBindingAtom();
            "using" !== kind && "await using" !== kind || "ArrayPattern" !== id.type && "ObjectPattern" !== id.type || this.raise(Errors.UsingDeclarationHasBindingPattern, id.loc.start), this.checkLVal(id, { type: "VariableDeclarator" }, "var" === kind ? 5 : 8201), decl.id = id;
          }
          parseAsyncFunctionExpression(node) {
            return this.parseFunction(node, 8);
          }
          parseFunction(node, flags = 0) {
            const hangingDeclaration = 2 & flags, isDeclaration = !!(1 & flags), requireId = isDeclaration && !(4 & flags), isAsync = !!(8 & flags);
            this.initFunction(node, isAsync), this.match(55) && (hangingDeclaration && this.raise(Errors.GeneratorInSingleStatementContext, this.state.startLoc), this.next(), node.generator = true), isDeclaration && (node.id = this.parseFunctionId(requireId));
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            return this.state.maybeInArrowParameters = false, this.scope.enter(2), this.prodParam.enter(functionFlags(isAsync, node.generator)), isDeclaration || (node.id = this.parseFunctionId()), this.parseFunctionParams(node, false), this.withSmartMixTopicForbiddingContext(() => {
              this.parseFunctionBodyAndFinish(node, isDeclaration ? "FunctionDeclaration" : "FunctionExpression");
            }), this.prodParam.exit(), this.scope.exit(), isDeclaration && !hangingDeclaration && this.registerFunctionStatementId(node), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, node;
          }
          parseFunctionId(requireId) {
            return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;
          }
          parseFunctionParams(node, isConstructor) {
            this.expect(10), this.expressionScope.enter(new ExpressionScope(3)), node.params = this.parseBindingList(11, 41, 2 | (isConstructor ? 4 : 0)), this.expressionScope.exit();
          }
          registerFunctionStatementId(node) {
            node.id && this.scope.declareName(node.id.name, !this.options.annexB || this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? 5 : 8201 : 17, node.id.loc.start);
          }
          parseClass(node, isStatement, optionalId) {
            this.next();
            const oldStrict = this.state.strict;
            return this.state.strict = true, this.parseClassId(node, isStatement, optionalId), this.parseClassSuper(node), node.body = this.parseClassBody(!!node.superClass, oldStrict), this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
          }
          isClassProperty() {
            return this.match(29) || this.match(13) || this.match(8);
          }
          isClassMethod() {
            return this.match(10);
          }
          nameIsConstructor(key) {
            return "Identifier" === key.type && "constructor" === key.name || "StringLiteral" === key.type && "constructor" === key.value;
          }
          isNonstaticConstructor(method) {
            return !method.computed && !method.static && this.nameIsConstructor(method.key);
          }
          parseClassBody(hadSuperClass, oldStrict) {
            this.classScope.enter();
            const state = { hadConstructor: false, hadSuperClass };
            let decorators = [];
            const classBody = this.startNode();
            if (classBody.body = [], this.expect(5), this.withSmartMixTopicForbiddingContext(() => {
              for (; !this.match(8); ) {
                if (this.eat(13)) {
                  if (decorators.length > 0) throw this.raise(Errors.DecoratorSemicolon, this.state.lastTokEndLoc);
                  continue;
                }
                if (this.match(26)) {
                  decorators.push(this.parseDecorator());
                  continue;
                }
                const member = this.startNode();
                decorators.length && (member.decorators = decorators, this.resetStartLocationFromNode(member, decorators[0]), decorators = []), this.parseClassMember(classBody, member, state), "constructor" === member.kind && member.decorators && member.decorators.length > 0 && this.raise(Errors.DecoratorConstructor, member);
              }
            }), this.state.strict = oldStrict, this.next(), decorators.length) throw this.raise(Errors.TrailingDecorator, this.state.startLoc);
            return this.classScope.exit(), this.finishNode(classBody, "ClassBody");
          }
          parseClassMemberFromModifier(classBody, member) {
            const key = this.parseIdentifier(true);
            if (this.isClassMethod()) {
              const method = member;
              return method.kind = "method", method.computed = false, method.key = key, method.static = false, this.pushClassMethod(classBody, method, false, false, false, false), true;
            }
            if (this.isClassProperty()) {
              const prop = member;
              return prop.computed = false, prop.key = key, prop.static = false, classBody.body.push(this.parseClassProperty(prop)), true;
            }
            return this.resetPreviousNodeTrailingComments(key), false;
          }
          parseClassMember(classBody, member, state) {
            const isStatic = this.isContextual(106);
            if (isStatic) {
              if (this.parseClassMemberFromModifier(classBody, member)) return;
              if (this.eat(5)) return void this.parseClassStaticBlock(classBody, member);
            }
            this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
          }
          parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
            const publicMethod = member, privateMethod = member, publicProp = member, privateProp = member, accessorProp = member, method = publicMethod, publicMember = publicMethod;
            if (member.static = isStatic, this.parsePropertyNamePrefixOperator(member), this.eat(55)) {
              method.kind = "method";
              const isPrivateName = this.match(139);
              return this.parseClassElementName(method), isPrivateName ? void this.pushClassPrivateMethod(classBody, privateMethod, true, false) : (this.isNonstaticConstructor(publicMethod) && this.raise(Errors.ConstructorIsGenerator, publicMethod.key), void this.pushClassMethod(classBody, publicMethod, true, false, false, false));
            }
            const isContextual = !this.state.containsEsc && tokenIsIdentifier(this.state.type), key = this.parseClassElementName(member), maybeContextualKw = isContextual ? key.name : null, isPrivate = this.isPrivateName(key), maybeQuestionTokenStartLoc = this.state.startLoc;
            if (this.parsePostMemberNameModifiers(publicMember), this.isClassMethod()) {
              if (method.kind = "method", isPrivate) return void this.pushClassPrivateMethod(classBody, privateMethod, false, false);
              const isConstructor = this.isNonstaticConstructor(publicMethod);
              let allowsDirectSuper = false;
              isConstructor && (publicMethod.kind = "constructor", state.hadConstructor && !this.hasPlugin("typescript") && this.raise(Errors.DuplicateConstructor, key), isConstructor && this.hasPlugin("typescript") && member.override && this.raise(Errors.OverrideOnConstructor, key), state.hadConstructor = true, allowsDirectSuper = state.hadSuperClass), this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);
            } else if (this.isClassProperty()) isPrivate ? this.pushClassPrivateProperty(classBody, privateProp) : this.pushClassProperty(classBody, publicProp);
            else if ("async" !== maybeContextualKw || this.isLineTerminator()) if ("get" !== maybeContextualKw && "set" !== maybeContextualKw || this.match(55) && this.isLineTerminator()) if ("accessor" !== maybeContextualKw || this.isLineTerminator()) this.isLineTerminator() ? isPrivate ? this.pushClassPrivateProperty(classBody, privateProp) : this.pushClassProperty(classBody, publicProp) : this.unexpected();
            else {
              this.expectPlugin("decoratorAutoAccessors"), this.resetPreviousNodeTrailingComments(key);
              const isPrivate2 = this.match(139);
              this.parseClassElementName(publicProp), this.pushClassAccessorProperty(classBody, accessorProp, isPrivate2);
            }
            else {
              this.resetPreviousNodeTrailingComments(key), method.kind = maybeContextualKw;
              const isPrivate2 = this.match(139);
              this.parseClassElementName(publicMethod), isPrivate2 ? this.pushClassPrivateMethod(classBody, privateMethod, false, false) : (this.isNonstaticConstructor(publicMethod) && this.raise(Errors.ConstructorIsAccessor, publicMethod.key), this.pushClassMethod(classBody, publicMethod, false, false, false, false)), this.checkGetterSetterParams(publicMethod);
            }
            else {
              this.resetPreviousNodeTrailingComments(key);
              const isGenerator2 = this.eat(55);
              publicMember.optional && this.unexpected(maybeQuestionTokenStartLoc), method.kind = "method";
              const isPrivate2 = this.match(139);
              this.parseClassElementName(method), this.parsePostMemberNameModifiers(publicMember), isPrivate2 ? this.pushClassPrivateMethod(classBody, privateMethod, isGenerator2, true) : (this.isNonstaticConstructor(publicMethod) && this.raise(Errors.ConstructorIsAsync, publicMethod.key), this.pushClassMethod(classBody, publicMethod, isGenerator2, true, false, false));
            }
          }
          parseClassElementName(member) {
            const { type, value: value2 } = this.state;
            if (132 !== type && 134 !== type || !member.static || "prototype" !== value2 || this.raise(Errors.StaticPrototype, this.state.startLoc), 139 === type) {
              "constructor" === value2 && this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);
              const key = this.parsePrivateName();
              return member.key = key, key;
            }
            return this.parsePropertyName(member), member.key;
          }
          parseClassStaticBlock(classBody, member) {
            var _member$decorators;
            this.scope.enter(208);
            const oldLabels = this.state.labels;
            this.state.labels = [], this.prodParam.enter(0);
            const body = member.body = [];
            this.parseBlockOrModuleBlockBody(body, void 0, false, 8), this.prodParam.exit(), this.scope.exit(), this.state.labels = oldLabels, classBody.body.push(this.finishNode(member, "StaticBlock")), null != (_member$decorators = member.decorators) && _member$decorators.length && this.raise(Errors.DecoratorStaticBlock, member);
          }
          pushClassProperty(classBody, prop) {
            !prop.computed && this.nameIsConstructor(prop.key) && this.raise(Errors.ConstructorClassField, prop.key), classBody.body.push(this.parseClassProperty(prop));
          }
          pushClassPrivateProperty(classBody, prop) {
            const node = this.parseClassPrivateProperty(prop);
            classBody.body.push(node), this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
          }
          pushClassAccessorProperty(classBody, prop, isPrivate) {
            isPrivate || prop.computed || !this.nameIsConstructor(prop.key) || this.raise(Errors.ConstructorClassField, prop.key);
            const node = this.parseClassAccessorProperty(prop);
            classBody.body.push(node), isPrivate && this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
          }
          pushClassMethod(classBody, method, isGenerator2, isAsync, isConstructor, allowsDirectSuper) {
            classBody.body.push(this.parseMethod(method, isGenerator2, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true));
          }
          pushClassPrivateMethod(classBody, method, isGenerator2, isAsync) {
            const node = this.parseMethod(method, isGenerator2, isAsync, false, false, "ClassPrivateMethod", true);
            classBody.body.push(node);
            const kind = "get" === node.kind ? node.static ? 6 : 2 : "set" === node.kind ? node.static ? 5 : 1 : 0;
            this.declareClassPrivateMethodInScope(node, kind);
          }
          declareClassPrivateMethodInScope(node, kind) {
            this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);
          }
          parsePostMemberNameModifiers(methodOrProp) {
          }
          parseClassPrivateProperty(node) {
            return this.parseInitializer(node), this.semicolon(), this.finishNode(node, "ClassPrivateProperty");
          }
          parseClassProperty(node) {
            return this.parseInitializer(node), this.semicolon(), this.finishNode(node, "ClassProperty");
          }
          parseClassAccessorProperty(node) {
            return this.parseInitializer(node), this.semicolon(), this.finishNode(node, "ClassAccessorProperty");
          }
          parseInitializer(node) {
            this.scope.enter(80), this.expressionScope.enter(newExpressionScope()), this.prodParam.enter(0), node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null, this.expressionScope.exit(), this.prodParam.exit(), this.scope.exit();
          }
          parseClassId(node, isStatement, optionalId, bindingType = 8331) {
            if (tokenIsIdentifier(this.state.type)) node.id = this.parseIdentifier(), isStatement && this.declareNameFromIdentifier(node.id, bindingType);
            else {
              if (!optionalId && isStatement) throw this.raise(Errors.MissingClassName, this.state.startLoc);
              node.id = null;
            }
          }
          parseClassSuper(node) {
            node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
          }
          parseExport(node, decorators) {
            const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, true), hasDefault = this.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier), parseAfterDefault = !hasDefault || this.eat(12), hasStar = parseAfterDefault && this.eatExportStar(node), hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node), parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12)), isFromRequired = hasDefault || hasStar;
            if (hasStar && !hasNamespace) {
              if (hasDefault && this.unexpected(), decorators) throw this.raise(Errors.UnsupportedDecoratorExport, node);
              return this.parseExportFrom(node, true), this.finishNode(node, "ExportAllDeclaration");
            }
            const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);
            let hasDeclaration;
            if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers && this.unexpected(null, 5), hasNamespace && parseAfterNamespace && this.unexpected(null, 98), isFromRequired || hasSpecifiers) {
              if (hasDeclaration = false, decorators) throw this.raise(Errors.UnsupportedDecoratorExport, node);
              this.parseExportFrom(node, isFromRequired);
            } else hasDeclaration = this.maybeParseExportDeclaration(node);
            if (isFromRequired || hasSpecifiers || hasDeclaration) {
              var _node2$declaration;
              const node2 = node;
              if (this.checkExport(node2, true, false, !!node2.source), "ClassDeclaration" === (null == (_node2$declaration = node2.declaration) ? void 0 : _node2$declaration.type)) this.maybeTakeDecorators(decorators, node2.declaration, node2);
              else if (decorators) throw this.raise(Errors.UnsupportedDecoratorExport, node);
              return this.finishNode(node2, "ExportNamedDeclaration");
            }
            if (this.eat(65)) {
              const node2 = node, decl = this.parseExportDefaultExpression();
              if (node2.declaration = decl, "ClassDeclaration" === decl.type) this.maybeTakeDecorators(decorators, decl, node2);
              else if (decorators) throw this.raise(Errors.UnsupportedDecoratorExport, node);
              return this.checkExport(node2, true, true), this.finishNode(node2, "ExportDefaultDeclaration");
            }
            this.unexpected(null, 5);
          }
          eatExportStar(node) {
            return this.eat(55);
          }
          maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {
            if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {
              this.expectPlugin("exportDefaultFrom", null == maybeDefaultIdentifier ? void 0 : maybeDefaultIdentifier.loc.start);
              const id = maybeDefaultIdentifier || this.parseIdentifier(true), specifier = this.startNodeAtNode(id);
              return specifier.exported = id, node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")], true;
            }
            return false;
          }
          maybeParseExportNamespaceSpecifier(node) {
            if (this.isContextual(93)) {
              var _ref;
              null != (_ref = node).specifiers || (_ref.specifiers = []);
              const specifier = this.startNodeAt(this.state.lastTokStartLoc);
              return this.next(), specifier.exported = this.parseModuleExportName(), node.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier")), true;
            }
            return false;
          }
          maybeParseExportNamedSpecifiers(node) {
            if (this.match(5)) {
              const node2 = node;
              node2.specifiers || (node2.specifiers = []);
              const isTypeExport = "type" === node2.exportKind;
              return node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport)), node2.source = null, node2.declaration = null, this.hasPlugin("importAssertions") && (node2.assertions = []), true;
            }
            return false;
          }
          maybeParseExportDeclaration(node) {
            return !!this.shouldParseExportDeclaration() && (node.specifiers = [], node.source = null, this.hasPlugin("importAssertions") && (node.assertions = []), node.declaration = this.parseExportDeclaration(node), true);
          }
          isAsyncFunction() {
            if (!this.isContextual(95)) return false;
            const next = this.nextTokenInLineStart();
            return this.isUnparsedContextual(next, "function");
          }
          parseExportDefaultExpression() {
            const expr = this.startNode();
            if (this.match(68)) return this.next(), this.parseFunction(expr, 5);
            if (this.isAsyncFunction()) return this.next(), this.next(), this.parseFunction(expr, 13);
            if (this.match(80)) return this.parseClass(expr, true, true);
            if (this.match(26)) return this.hasPlugin("decorators") && true === this.getPluginOption("decorators", "decoratorsBeforeExport") && this.raise(Errors.DecoratorBeforeExport, this.state.startLoc), this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false), this.startNode()), true, true);
            if (this.match(75) || this.match(74) || this.isLet()) throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);
            const res = this.parseMaybeAssignAllowIn();
            return this.semicolon(), res;
          }
          parseExportDeclaration(node) {
            if (this.match(80)) {
              return this.parseClass(this.startNode(), true, false);
            }
            return this.parseStatementListItem();
          }
          isExportDefaultSpecifier() {
            const { type } = this.state;
            if (tokenIsIdentifier(type)) {
              if (95 === type && !this.state.containsEsc || 100 === type) return false;
              if ((130 === type || 129 === type) && !this.state.containsEsc) {
                const { type: nextType } = this.lookahead();
                if (tokenIsIdentifier(nextType) && 98 !== nextType || 5 === nextType) return this.expectOnePlugin(["flow", "typescript"]), false;
              }
            } else if (!this.match(65)) return false;
            const next = this.nextTokenStart(), hasFrom = this.isUnparsedContextual(next, "from");
            if (44 === this.input.charCodeAt(next) || tokenIsIdentifier(this.state.type) && hasFrom) return true;
            if (this.match(65) && hasFrom) {
              const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
              return 34 === nextAfterFrom || 39 === nextAfterFrom;
            }
            return false;
          }
          parseExportFrom(node, expect) {
            this.eatContextual(98) ? (node.source = this.parseImportSource(), this.checkExport(node), this.maybeParseImportAttributes(node), this.checkJSONModuleImport(node)) : expect && this.unexpected(), this.semicolon();
          }
          shouldParseExportDeclaration() {
            const { type } = this.state;
            return 26 === type && (this.expectOnePlugin(["decorators", "decorators-legacy"]), this.hasPlugin("decorators")) ? (true === this.getPluginOption("decorators", "decoratorsBeforeExport") && this.raise(Errors.DecoratorBeforeExport, this.state.startLoc), true) : this.isContextual(107) || this.isContextual(96) && this.startsAwaitUsing() ? (this.raise(Errors.UsingDeclarationExport, this.state.startLoc), true) : 74 === type || 75 === type || 68 === type || 80 === type || this.isLet() || this.isAsyncFunction();
          }
          checkExport(node, checkNames, isDefault, isFrom) {
            var _node$specifiers;
            if (checkNames) {
              if (isDefault) {
                if (this.checkDuplicateExports(node, "default"), this.hasPlugin("exportDefaultFrom")) {
                  var _declaration$extra;
                  const declaration = node.declaration;
                  "Identifier" !== declaration.type || "from" !== declaration.name || declaration.end - declaration.start != 4 || null != (_declaration$extra = declaration.extra) && _declaration$extra.parenthesized || this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);
                }
              } else if (null != (_node$specifiers = node.specifiers) && _node$specifiers.length) for (const specifier of node.specifiers) {
                const { exported } = specifier, exportName = "Identifier" === exported.type ? exported.name : exported.value;
                if (this.checkDuplicateExports(specifier, exportName), !isFrom && specifier.local) {
                  const { local } = specifier;
                  "Identifier" !== local.type ? this.raise(Errors.ExportBindingIsString, specifier, { localName: local.value, exportName }) : (this.checkReservedWord(local.name, local.loc.start, true, false), this.scope.checkLocalExport(local));
                }
              }
              else if (node.declaration) {
                const decl = node.declaration;
                if ("FunctionDeclaration" === decl.type || "ClassDeclaration" === decl.type) {
                  const { id } = decl;
                  if (!id) throw new Error("Assertion failure");
                  this.checkDuplicateExports(node, id.name);
                } else if ("VariableDeclaration" === decl.type) for (const declaration of decl.declarations) this.checkDeclaration(declaration.id);
              }
            }
          }
          checkDeclaration(node) {
            if ("Identifier" === node.type) this.checkDuplicateExports(node, node.name);
            else if ("ObjectPattern" === node.type) for (const prop of node.properties) this.checkDeclaration(prop);
            else if ("ArrayPattern" === node.type) for (const elem of node.elements) elem && this.checkDeclaration(elem);
            else "ObjectProperty" === node.type ? this.checkDeclaration(node.value) : "RestElement" === node.type ? this.checkDeclaration(node.argument) : "AssignmentPattern" === node.type && this.checkDeclaration(node.left);
          }
          checkDuplicateExports(node, exportName) {
            this.exportedIdentifiers.has(exportName) && ("default" === exportName ? this.raise(Errors.DuplicateDefaultExport, node) : this.raise(Errors.DuplicateExport, node, { exportName })), this.exportedIdentifiers.add(exportName);
          }
          parseExportSpecifiers(isInTypeExport) {
            const nodes = [];
            let first = true;
            for (this.expect(5); !this.eat(8); ) {
              if (first) first = false;
              else if (this.expect(12), this.eat(8)) break;
              const isMaybeTypeOnly = this.isContextual(130), isString = this.match(134), node = this.startNode();
              node.local = this.parseModuleExportName(), nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));
            }
            return nodes;
          }
          parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
            return this.eatContextual(93) ? node.exported = this.parseModuleExportName() : isString ? node.exported = cloneStringLiteral(node.local) : node.exported || (node.exported = cloneIdentifier(node.local)), this.finishNode(node, "ExportSpecifier");
          }
          parseModuleExportName() {
            if (this.match(134)) {
              const result = this.parseStringLiteral(this.state.value), surrogate = loneSurrogate.exec(result.value);
              return surrogate && this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, { surrogateCharCode: surrogate[0].charCodeAt(0) }), result;
            }
            return this.parseIdentifier(true);
          }
          isJSONModuleImport(node) {
            return null != node.assertions && node.assertions.some(({ key, value: value2 }) => "json" === value2.value && ("Identifier" === key.type ? "type" === key.name : "type" === key.value));
          }
          checkImportReflection(node) {
            const { specifiers } = node, singleBindingType = 1 === specifiers.length ? specifiers[0].type : null;
            if ("source" === node.phase) "ImportDefaultSpecifier" !== singleBindingType && this.raise(Errors.SourcePhaseImportRequiresDefault, specifiers[0].loc.start);
            else if ("defer" === node.phase) "ImportNamespaceSpecifier" !== singleBindingType && this.raise(Errors.DeferImportRequiresNamespace, specifiers[0].loc.start);
            else if (node.module) {
              var _node$assertions;
              "ImportDefaultSpecifier" !== singleBindingType && this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start), (null == (_node$assertions = node.assertions) ? void 0 : _node$assertions.length) > 0 && this.raise(Errors.ImportReflectionHasAssertion, specifiers[0].loc.start);
            }
          }
          checkJSONModuleImport(node) {
            if (this.isJSONModuleImport(node) && "ExportAllDeclaration" !== node.type) {
              const { specifiers } = node;
              if (null != specifiers) {
                const nonDefaultNamedSpecifier = specifiers.find((specifier) => {
                  let imported;
                  if ("ExportSpecifier" === specifier.type ? imported = specifier.local : "ImportSpecifier" === specifier.type && (imported = specifier.imported), void 0 !== imported) return "Identifier" === imported.type ? "default" !== imported.name : "default" !== imported.value;
                });
                void 0 !== nonDefaultNamedSpecifier && this.raise(Errors.ImportJSONBindingNotDefault, nonDefaultNamedSpecifier.loc.start);
              }
            }
          }
          isPotentialImportPhase(isExport) {
            return !isExport && (this.isContextual(105) || this.isContextual(97) || this.isContextual(127));
          }
          applyImportPhase(node, isExport, phase, loc) {
            isExport || ("module" === phase ? (this.expectPlugin("importReflection", loc), node.module = true) : this.hasPlugin("importReflection") && (node.module = false), "source" === phase ? (this.expectPlugin("sourcePhaseImports", loc), node.phase = "source") : "defer" === phase ? (this.expectPlugin("deferredImportEvaluation", loc), node.phase = "defer") : this.hasPlugin("sourcePhaseImports") && (node.phase = null));
          }
          parseMaybeImportPhase(node, isExport) {
            if (!this.isPotentialImportPhase(isExport)) return this.applyImportPhase(node, isExport, null), null;
            const phaseIdentifier = this.parseIdentifier(true), { type } = this.state;
            return (tokenIsKeywordOrIdentifier(type) ? 98 !== type || 102 === this.lookaheadCharCode() : 12 !== type) ? (this.resetPreviousIdentifierLeadingComments(phaseIdentifier), this.applyImportPhase(node, isExport, phaseIdentifier.name, phaseIdentifier.loc.start), null) : (this.applyImportPhase(node, isExport, null), phaseIdentifier);
          }
          isPrecedingIdImportPhase(phase) {
            const { type } = this.state;
            return tokenIsIdentifier(type) ? 98 !== type || 102 === this.lookaheadCharCode() : 12 !== type;
          }
          parseImport(node) {
            return this.match(134) ? this.parseImportSourceAndAttributes(node) : this.parseImportSpecifiersAndAfter(node, this.parseMaybeImportPhase(node, false));
          }
          parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier) {
            node.specifiers = [];
            const parseNext = !this.maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier) || this.eat(12), hasStar = parseNext && this.maybeParseStarImportSpecifier(node);
            return parseNext && !hasStar && this.parseNamedImportSpecifiers(node), this.expectContextual(98), this.parseImportSourceAndAttributes(node);
          }
          parseImportSourceAndAttributes(node) {
            return null != node.specifiers || (node.specifiers = []), node.source = this.parseImportSource(), this.maybeParseImportAttributes(node), this.checkImportReflection(node), this.checkJSONModuleImport(node), this.semicolon(), this.finishNode(node, "ImportDeclaration");
          }
          parseImportSource() {
            return this.match(134) || this.unexpected(), this.parseExprAtom();
          }
          parseImportSpecifierLocal(node, specifier, type) {
            specifier.local = this.parseIdentifier(), node.specifiers.push(this.finishImportSpecifier(specifier, type));
          }
          finishImportSpecifier(specifier, type, bindingType = 8201) {
            return this.checkLVal(specifier.local, { type }, bindingType), this.finishNode(specifier, type);
          }
          parseImportAttributes() {
            this.expect(5);
            const attrs = [], attrNames = /* @__PURE__ */ new Set();
            do {
              if (this.match(8)) break;
              const node = this.startNode(), keyName = this.state.value;
              if (attrNames.has(keyName) && this.raise(Errors.ModuleAttributesWithDuplicateKeys, this.state.startLoc, { key: keyName }), attrNames.add(keyName), this.match(134) ? node.key = this.parseStringLiteral(keyName) : node.key = this.parseIdentifier(true), this.expect(14), !this.match(134)) throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);
              node.value = this.parseStringLiteral(this.state.value), attrs.push(this.finishNode(node, "ImportAttribute"));
            } while (this.eat(12));
            return this.expect(8), attrs;
          }
          parseModuleAttributes() {
            const attrs = [], attributes = /* @__PURE__ */ new Set();
            do {
              const node = this.startNode();
              if (node.key = this.parseIdentifier(true), "type" !== node.key.name && this.raise(Errors.ModuleAttributeDifferentFromType, node.key), attributes.has(node.key.name) && this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, { key: node.key.name }), attributes.add(node.key.name), this.expect(14), !this.match(134)) throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);
              node.value = this.parseStringLiteral(this.state.value), attrs.push(this.finishNode(node, "ImportAttribute"));
            } while (this.eat(12));
            return attrs;
          }
          maybeParseImportAttributes(node) {
            let attributes;
            var useWith = false;
            if (this.match(76)) {
              if (this.hasPrecedingLineBreak() && 40 === this.lookaheadCharCode()) return;
              this.next(), attributes = this.hasPlugin("moduleAttributes") ? this.parseModuleAttributes() : this.parseImportAttributes(), useWith = true;
            } else this.isContextual(94) && !this.hasPrecedingLineBreak() ? (this.hasPlugin("deprecatedImportAssert") || this.hasPlugin("importAssertions") || this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc), this.hasPlugin("importAssertions") || this.addExtra(node, "deprecatedAssertSyntax", true), this.next(), attributes = this.parseImportAttributes()) : attributes = [];
            !useWith && this.hasPlugin("importAssertions") ? node.assertions = attributes : node.attributes = attributes;
          }
          maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier) {
            if (maybeDefaultIdentifier) {
              const specifier = this.startNodeAtNode(maybeDefaultIdentifier);
              return specifier.local = maybeDefaultIdentifier, node.specifiers.push(this.finishImportSpecifier(specifier, "ImportDefaultSpecifier")), true;
            }
            return !!tokenIsKeywordOrIdentifier(this.state.type) && (this.parseImportSpecifierLocal(node, this.startNode(), "ImportDefaultSpecifier"), true);
          }
          maybeParseStarImportSpecifier(node) {
            if (this.match(55)) {
              const specifier = this.startNode();
              return this.next(), this.expectContextual(93), this.parseImportSpecifierLocal(node, specifier, "ImportNamespaceSpecifier"), true;
            }
            return false;
          }
          parseNamedImportSpecifiers(node) {
            let first = true;
            for (this.expect(5); !this.eat(8); ) {
              if (first) first = false;
              else {
                if (this.eat(14)) throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);
                if (this.expect(12), this.eat(8)) break;
              }
              const specifier = this.startNode(), importedIsString = this.match(134), isMaybeTypeOnly = this.isContextual(130);
              specifier.imported = this.parseModuleExportName();
              const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, "type" === node.importKind || "typeof" === node.importKind, isMaybeTypeOnly, void 0);
              node.specifiers.push(importSpecifier);
            }
          }
          parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
            if (this.eatContextual(93)) specifier.local = this.parseIdentifier();
            else {
              const { imported } = specifier;
              if (importedIsString) throw this.raise(Errors.ImportBindingIsString, specifier, { importName: imported.value });
              this.checkReservedWord(imported.name, specifier.loc.start, true, true), specifier.local || (specifier.local = cloneIdentifier(imported));
            }
            return this.finishImportSpecifier(specifier, "ImportSpecifier", bindingType);
          }
          isThisParam(param) {
            return "Identifier" === param.type && "this" === param.name;
          }
        }
        class Parser extends StatementParser {
          constructor(options, input, pluginsMap) {
            super(options = function(opts) {
              const options2 = { sourceType: "script", sourceFilename: void 0, startIndex: 0, startColumn: 0, startLine: 1, allowAwaitOutsideFunction: false, allowReturnOutsideFunction: false, allowNewTargetOutsideFunction: false, allowImportExportEverywhere: false, allowSuperOutsideMethod: false, allowUndeclaredExports: false, plugins: [], strictMode: null, ranges: false, tokens: false, createImportExpressions: false, createParenthesizedExpressions: false, errorRecovery: false, attachComment: true, annexB: true };
              if (null == opts) return options2;
              if (null != opts.annexB && false !== opts.annexB) throw new Error("The `annexB` option can only be set to `false`.");
              for (const key of Object.keys(options2)) null != opts[key] && (options2[key] = opts[key]);
              if (1 === options2.startLine) null == opts.startIndex && options2.startColumn > 0 ? options2.startIndex = options2.startColumn : null == opts.startColumn && options2.startIndex > 0 && (options2.startColumn = options2.startIndex);
              else if ((null == opts.startColumn || null == opts.startIndex) && null != opts.startIndex) throw new Error("With a `startLine > 1` you must also specify `startIndex` and `startColumn`.");
              return options2;
            }(options), input), this.options = options, this.initializeScopes(), this.plugins = pluginsMap, this.filename = options.sourceFilename, this.startIndex = options.startIndex;
          }
          getScopeHandler() {
            return ScopeHandler;
          }
          parse() {
            this.enterInitialScopes();
            const file = this.startNode(), program = this.startNode();
            return this.nextToken(), file.errors = null, this.parseTopLevel(file, program), file.errors = this.state.errors, file.comments.length = this.state.commentsLen, file;
          }
        }
        const tokTypes = function(internalTokenTypes) {
          const tokenTypes2 = {};
          for (const typeName of Object.keys(internalTokenTypes)) tokenTypes2[typeName] = getExportedToken(internalTokenTypes[typeName]);
          return tokenTypes2;
        }(tt);
        function getParser(options, input) {
          let cls = Parser;
          const pluginsMap = /* @__PURE__ */ new Map();
          if (null != options && options.plugins) {
            for (const plugin of options.plugins) {
              let name, opts;
              "string" == typeof plugin ? name = plugin : [name, opts] = plugin, pluginsMap.has(name) || pluginsMap.set(name, opts || {});
            }
            !function(pluginsMap2) {
              if (pluginsMap2.has("decorators")) {
                if (pluginsMap2.has("decorators-legacy")) throw new Error("Cannot use the decorators and decorators-legacy plugin together");
                const decoratorsBeforeExport = pluginsMap2.get("decorators").decoratorsBeforeExport;
                if (null != decoratorsBeforeExport && "boolean" != typeof decoratorsBeforeExport) throw new Error("'decoratorsBeforeExport' must be a boolean, if specified.");
                const allowCallParenthesized = pluginsMap2.get("decorators").allowCallParenthesized;
                if (null != allowCallParenthesized && "boolean" != typeof allowCallParenthesized) throw new Error("'allowCallParenthesized' must be a boolean.");
              }
              if (pluginsMap2.has("flow") && pluginsMap2.has("typescript")) throw new Error("Cannot combine flow and typescript plugins.");
              if (pluginsMap2.has("placeholders") && pluginsMap2.has("v8intrinsic")) throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
              if (pluginsMap2.has("pipelineOperator")) {
                var _pluginsMap$get;
                const proposal = pluginsMap2.get("pipelineOperator").proposal;
                if (!PIPELINE_PROPOSALS.includes(proposal)) {
                  const proposalList = PIPELINE_PROPOSALS.map((p) => `"${p}"`).join(", ");
                  throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`);
                }
                const tupleSyntaxIsHash = "hash" === (null == (_pluginsMap$get = pluginsMap2.get("recordAndTuple")) ? void 0 : _pluginsMap$get.syntaxType);
                if ("hack" === proposal) {
                  if (pluginsMap2.has("placeholders")) throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
                  if (pluginsMap2.has("v8intrinsic")) throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
                  const topicToken = pluginsMap2.get("pipelineOperator").topicToken;
                  if (!TOPIC_TOKENS.includes(topicToken)) {
                    const tokenList = TOPIC_TOKENS.map((t2) => `"${t2}"`).join(", ");
                    throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`);
                  }
                  if ("#" === topicToken && tupleSyntaxIsHash) throw new Error(`Plugin conflict between \`["pipelineOperator", { proposal: "hack", topicToken: "#" }]\` and \`${JSON.stringify(["recordAndTuple", pluginsMap2.get("recordAndTuple")])}\`.`);
                } else if ("smart" === proposal && tupleSyntaxIsHash) throw new Error(`Plugin conflict between \`["pipelineOperator", { proposal: "smart" }]\` and \`${JSON.stringify(["recordAndTuple", pluginsMap2.get("recordAndTuple")])}\`.`);
              }
              if (pluginsMap2.has("moduleAttributes")) {
                if (pluginsMap2.has("deprecatedImportAssert") || pluginsMap2.has("importAssertions")) throw new Error("Cannot combine importAssertions, deprecatedImportAssert and moduleAttributes plugins.");
                if ("may-2020" !== pluginsMap2.get("moduleAttributes").version) throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.");
              }
              if (pluginsMap2.has("importAssertions") && pluginsMap2.has("deprecatedImportAssert")) throw new Error("Cannot combine importAssertions and deprecatedImportAssert plugins.");
              if (!pluginsMap2.has("deprecatedImportAssert") && pluginsMap2.has("importAttributes") && pluginsMap2.get("importAttributes").deprecatedAssertSyntax && pluginsMap2.set("deprecatedImportAssert", {}), pluginsMap2.has("recordAndTuple")) {
                const syntaxType = pluginsMap2.get("recordAndTuple").syntaxType;
                if (null != syntaxType) {
                  const RECORD_AND_TUPLE_SYNTAX_TYPES = ["hash", "bar"];
                  if (!RECORD_AND_TUPLE_SYNTAX_TYPES.includes(syntaxType)) throw new Error("The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES.map((p) => `'${p}'`).join(", "));
                }
              }
              if (pluginsMap2.has("asyncDoExpressions") && !pluginsMap2.has("doExpressions")) {
                const error = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
                throw error.missingPlugins = "doExpressions", error;
              }
              if (pluginsMap2.has("optionalChainingAssign") && "2023-07" !== pluginsMap2.get("optionalChainingAssign").version) throw new Error("The 'optionalChainingAssign' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is '2023-07'.");
            }(pluginsMap), cls = function(pluginsMap2) {
              const pluginList = [];
              for (const name of mixinPluginNames) pluginsMap2.has(name) && pluginList.push(name);
              const key = pluginList.join("|");
              let cls2 = parserClassCache.get(key);
              if (!cls2) {
                cls2 = Parser;
                for (const plugin of pluginList) cls2 = mixinPlugins[plugin](cls2);
                parserClassCache.set(key, cls2);
              }
              return cls2;
            }(pluginsMap);
          }
          return new cls(options, input, pluginsMap);
        }
        const parserClassCache = /* @__PURE__ */ new Map();
        exports2.parse = function(input, options) {
          var _options;
          if ("unambiguous" !== (null == (_options = options) ? void 0 : _options.sourceType)) return getParser(options, input).parse();
          options = Object.assign({}, options);
          try {
            options.sourceType = "module";
            const parser = getParser(options, input), ast = parser.parse();
            if (parser.sawUnambiguousESM) return ast;
            if (parser.ambiguousScriptDifferentAst) try {
              return options.sourceType = "script", getParser(options, input).parse();
            } catch (_unused) {
            }
            else ast.program.sourceType = "script";
            return ast;
          } catch (moduleError) {
            try {
              return options.sourceType = "script", getParser(options, input).parse();
            } catch (_unused2) {
            }
            throw moduleError;
          }
        }, exports2.parseExpression = function(input, options) {
          const parser = getParser(options, input);
          return parser.options.strictMode && (parser.state.strict = true), parser.getExpression();
        }, exports2.tokTypes = tokTypes;
      }, "./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-proposal-decorators/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), _pluginSyntaxDecorators = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-decorators@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-decorators/lib/index.js"), _helperCreateClassFeaturesPlugin = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/index.js"), _transformerLegacy = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-proposal-decorators/lib/transformer-legacy.js");
        exports2.default = (0, _helperPluginUtils.declare)((api, options) => {
          api.assertVersion(7);
          var { legacy } = options;
          const { version } = options;
          if (legacy || "legacy" === version) return { name: "proposal-decorators", inherits: _pluginSyntaxDecorators.default, visitor: _transformerLegacy.default };
          if (version && "2018-09" !== version && "2021-12" !== version && "2022-03" !== version && "2023-01" !== version && "2023-05" !== version && "2023-11" !== version) throw new Error("The '.version' option must be one of 'legacy', '2023-11', '2023-05', '2023-01', '2022-03', or '2021-12'.");
          return api.assertVersion("^7.0.2"), (0, _helperCreateClassFeaturesPlugin.createClassFeaturePlugin)({ name: "proposal-decorators", api, feature: _helperCreateClassFeaturesPlugin.FEATURES.decorators, inherits: _pluginSyntaxDecorators.default, decoratorVersion: version });
        });
      }, "./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-proposal-decorators/lib/transformer-legacy.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
        const buildClassDecorator = _core.template.statement("\n  DECORATOR(CLASS_REF = INNER) || CLASS_REF;\n"), buildClassPrototype = (0, _core.template)("\n  CLASS_REF.prototype;\n"), buildGetDescriptor = (0, _core.template)("\n    Object.getOwnPropertyDescriptor(TARGET, PROPERTY);\n"), buildGetObjectInitializer = (0, _core.template)("\n    (TEMP = Object.getOwnPropertyDescriptor(TARGET, PROPERTY), (TEMP = TEMP ? TEMP.value : undefined), {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        initializer: function(){\n            return TEMP;\n        }\n    })\n"), WARNING_CALLS = /* @__PURE__ */ new WeakSet();
        function applyEnsureOrdering(path9) {
          const identDecorators = (path9.isClass() ? [path9, ...path9.get("body.body")] : path9.get("properties")).reduce((acc, prop) => acc.concat(prop.node.decorators || []), []).filter((decorator) => !_core.types.isIdentifier(decorator.expression));
          if (0 !== identDecorators.length) return _core.types.sequenceExpression(identDecorators.map((decorator) => {
            const expression = decorator.expression, id = decorator.expression = path9.scope.generateDeclaredUidIdentifier("dec");
            return _core.types.assignmentExpression("=", id, expression);
          }).concat([path9.node]));
        }
        function hasClassDecorators(classNode) {
          var _classNode$decorators;
          return !(null == (_classNode$decorators = classNode.decorators) || !_classNode$decorators.length);
        }
        function hasMethodDecorators(body) {
          return body.some((node) => {
            var _node$decorators;
            return null == (_node$decorators = node.decorators) ? void 0 : _node$decorators.length;
          });
        }
        function applyTargetDecorators(path9, state, decoratedProps) {
          const name = path9.scope.generateDeclaredUidIdentifier(path9.isClass() ? "class" : "obj"), exprs = decoratedProps.reduce(function(acc, node) {
            let decorators = [];
            if (null != node.decorators && (decorators = node.decorators, node.decorators = null), 0 === decorators.length) return acc;
            if (node.computed) throw path9.buildCodeFrameError("Computed method/property decorators are not yet supported.");
            const property = _core.types.isLiteral(node.key) ? node.key : _core.types.stringLiteral(node.key.name), target = path9.isClass() && !node.static ? buildClassPrototype({ CLASS_REF: name }).expression : name;
            if (_core.types.isClassProperty(node, { static: false })) {
              const descriptor = path9.scope.generateDeclaredUidIdentifier("descriptor"), initializer = node.value ? _core.types.functionExpression(null, [], _core.types.blockStatement([_core.types.returnStatement(node.value)])) : _core.types.nullLiteral();
              node.value = _core.types.callExpression(state.addHelper("initializerWarningHelper"), [descriptor, _core.types.thisExpression()]), WARNING_CALLS.add(node.value), acc.push(_core.types.assignmentExpression("=", _core.types.cloneNode(descriptor), _core.types.callExpression(state.addHelper("applyDecoratedDescriptor"), [_core.types.cloneNode(target), _core.types.cloneNode(property), _core.types.arrayExpression(decorators.map((dec) => _core.types.cloneNode(dec.expression))), _core.types.objectExpression([_core.types.objectProperty(_core.types.identifier("configurable"), _core.types.booleanLiteral(true)), _core.types.objectProperty(_core.types.identifier("enumerable"), _core.types.booleanLiteral(true)), _core.types.objectProperty(_core.types.identifier("writable"), _core.types.booleanLiteral(true)), _core.types.objectProperty(_core.types.identifier("initializer"), initializer)])])));
            } else acc.push(_core.types.callExpression(state.addHelper("applyDecoratedDescriptor"), [_core.types.cloneNode(target), _core.types.cloneNode(property), _core.types.arrayExpression(decorators.map((dec) => _core.types.cloneNode(dec.expression))), _core.types.isObjectProperty(node) || _core.types.isClassProperty(node, { static: true }) ? buildGetObjectInitializer({ TEMP: path9.scope.generateDeclaredUidIdentifier("init"), TARGET: _core.types.cloneNode(target), PROPERTY: _core.types.cloneNode(property) }).expression : buildGetDescriptor({ TARGET: _core.types.cloneNode(target), PROPERTY: _core.types.cloneNode(property) }).expression, _core.types.cloneNode(target)]));
            return acc;
          }, []);
          return _core.types.sequenceExpression([_core.types.assignmentExpression("=", _core.types.cloneNode(name), path9.node), _core.types.sequenceExpression(exprs), _core.types.cloneNode(name)]);
        }
        function decoratedClassToExpression({ node, scope }) {
          if (!hasClassDecorators(node) && !hasMethodDecorators(node.body.body)) return;
          const ref = node.id ? _core.types.cloneNode(node.id) : scope.generateUidIdentifier("class");
          return _core.types.variableDeclaration("let", [_core.types.variableDeclarator(ref, _core.types.toExpression(node))]);
        }
        const visitor = { ExportDefaultDeclaration(path9) {
          const decl = path9.get("declaration");
          if (!decl.isClassDeclaration()) return;
          const replacement = decoratedClassToExpression(decl);
          if (replacement) {
            const [varDeclPath] = path9.replaceWithMultiple([replacement, _core.types.exportNamedDeclaration(null, [_core.types.exportSpecifier(_core.types.cloneNode(replacement.declarations[0].id), _core.types.identifier("default"))])]);
            decl.node.id || path9.scope.registerDeclaration(varDeclPath);
          }
        }, ClassDeclaration(path9) {
          const replacement = decoratedClassToExpression(path9);
          if (replacement) {
            const [newPath] = path9.replaceWith(replacement), decl = newPath.get("declarations.0"), id = decl.node.id, binding = path9.scope.getOwnBinding(id.name);
            binding.identifier = id, binding.path = decl;
          }
        }, ClassExpression(path9, state) {
          const decoratedClass = applyEnsureOrdering(path9) || function(classPath) {
            if (!hasClassDecorators(classPath.node)) return;
            const decorators = classPath.node.decorators || [];
            classPath.node.decorators = null;
            const name = classPath.scope.generateDeclaredUidIdentifier("class");
            return decorators.map((dec) => dec.expression).reverse().reduce(function(acc, decorator) {
              return buildClassDecorator({ CLASS_REF: _core.types.cloneNode(name), DECORATOR: _core.types.cloneNode(decorator), INNER: acc }).expression;
            }, classPath.node);
          }(path9) || function(path10, state2) {
            if (hasMethodDecorators(path10.node.body.body)) return applyTargetDecorators(path10, state2, path10.node.body.body);
          }(path9, state);
          decoratedClass && path9.replaceWith(decoratedClass);
        }, ObjectExpression(path9, state) {
          const decoratedObject = applyEnsureOrdering(path9) || function(path10, state2) {
            if (hasMethodDecorators(path10.node.properties)) return applyTargetDecorators(path10, state2, path10.node.properties.filter((prop) => "SpreadElement" !== prop.type));
          }(path9, state);
          decoratedObject && path9.replaceWith(decoratedObject);
        }, AssignmentExpression(path9, state) {
          WARNING_CALLS.has(path9.node.right) && path9.replaceWith(_core.types.callExpression(state.addHelper("initializerDefineProperty"), [_core.types.cloneNode(path9.get("left.object").node), _core.types.stringLiteral(path9.get("left.property").node.name || path9.get("left.property").node.value), _core.types.cloneNode(path9.get("right.arguments")[0].node), _core.types.cloneNode(path9.get("right.arguments")[1].node)]));
        }, CallExpression(path9, state) {
          3 === path9.node.arguments.length && WARNING_CALLS.has(path9.node.arguments[2]) && path9.node.callee.name === state.addHelper("defineProperty").name && path9.replaceWith(_core.types.callExpression(state.addHelper("initializerDefineProperty"), [_core.types.cloneNode(path9.get("arguments")[0].node), _core.types.cloneNode(path9.get("arguments")[1].node), _core.types.cloneNode(path9.get("arguments.2.arguments")[0].node), _core.types.cloneNode(path9.get("arguments.2.arguments")[1].node)]));
        } };
        exports2.default = visitor;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-decorators@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-decorators/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js");
        exports2.default = (0, _helperPluginUtils.declare)((api, options) => {
          api.assertVersion("^7.0.0-0 || >8.0.0-alpha <8.0.0-beta");
          let { version } = options;
          {
            const { legacy } = options;
            if (void 0 !== legacy) {
              if ("boolean" != typeof legacy) throw new Error(".legacy must be a boolean.");
              if (void 0 !== version) throw new Error("You can either use the .legacy or the .version option, not both.");
            }
            if (void 0 === version) version = legacy ? "legacy" : "2018-09";
            else if ("2023-11" !== version && "2023-05" !== version && "2023-01" !== version && "2022-03" !== version && "2021-12" !== version && "2018-09" !== version && "legacy" !== version) throw new Error("Unsupported decorators version: " + version);
            var { decoratorsBeforeExport } = options;
            if (void 0 === decoratorsBeforeExport) {
              if ("2021-12" === version || "2022-03" === version) decoratorsBeforeExport = false;
              else if ("2018-09" === version) throw new Error("The decorators plugin, when .version is '2018-09' or not specified, requires a 'decoratorsBeforeExport' option, whose value must be a boolean.");
            } else {
              if ("legacy" === version || "2022-03" === version || "2023-01" === version) throw new Error(`'decoratorsBeforeExport' can't be used with ${version} decorators.`);
              if ("boolean" != typeof decoratorsBeforeExport) throw new Error("'decoratorsBeforeExport' must be a boolean.");
            }
          }
          return { name: "syntax-decorators", manipulateOptions({ generatorOpts }, parserOpts) {
            "legacy" === version ? parserOpts.plugins.push("decorators-legacy") : "2023-01" === version || "2023-05" === version || "2023-11" === version ? parserOpts.plugins.push(["decorators", { allowCallParenthesized: false }], "decoratorAutoAccessors") : "2022-03" === version ? parserOpts.plugins.push(["decorators", { decoratorsBeforeExport: false, allowCallParenthesized: false }], "decoratorAutoAccessors") : "2021-12" === version ? (parserOpts.plugins.push(["decorators", { decoratorsBeforeExport }], "decoratorAutoAccessors"), generatorOpts.decoratorsBeforeExport = decoratorsBeforeExport) : "2018-09" === version && (parserOpts.plugins.push(["decorators", { decoratorsBeforeExport }]), generatorOpts.decoratorsBeforeExport = decoratorsBeforeExport);
          } };
        });
      }, "./node_modules/.pnpm/@babel+plugin-syntax-import-assertions@7.26.0_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-import-assertions/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js");
        exports2.default = (0, _helperPluginUtils.declare)((api) => {
          api.assertVersion(7);
          const isPlugin = (plugin, name) => "plugin" === name || Array.isArray(plugin) && "plugin" === plugin[0], options = (plugin) => Array.isArray(plugin) && plugin.length > 1 ? plugin[1] : {};
          return { name: "syntax-import-assertions", manipulateOptions(opts, { plugins }) {
            for (let i2 = 0; i2 < plugins.length; i2++) {
              const plugin = plugins[i2];
              if (isPlugin(plugin, "deprecatedImportAssert")) return;
              if (isPlugin(plugin, "importAttributes")) return void plugins.splice(i2, 1, "deprecatedImportAssert", ["importAttributes", Object.assign({}, options(plugin), { deprecatedAssertSyntax: true })]);
            }
            plugins.push("importAssertions");
          } };
        });
      }, "./node_modules/.pnpm/@babel+plugin-syntax-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-jsx/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js");
        exports2.default = (0, _helperPluginUtils.declare)((api) => (api.assertVersion(7), { name: "syntax-jsx", manipulateOptions(opts, parserOpts) {
          parserOpts.plugins.some((p) => "typescript" === (Array.isArray(p) ? p[0] : p)) || parserOpts.plugins.push("jsx");
        } }));
      }, "./node_modules/.pnpm/@babel+plugin-syntax-typescript@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-typescript/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), removePlugin = function(plugins, name) {
          const indices = [];
          plugins.forEach((plugin, i2) => {
            (Array.isArray(plugin) ? plugin[0] : plugin) === name && indices.unshift(i2);
          });
          for (const i2 of indices) plugins.splice(i2, 1);
        };
        exports2.default = (0, _helperPluginUtils.declare)((api, opts) => {
          api.assertVersion(7);
          const { disallowAmbiguousJSXLike, dts } = opts;
          var { isTSX } = opts;
          return { name: "syntax-typescript", manipulateOptions(opts2, parserOpts) {
            {
              const { plugins } = parserOpts;
              removePlugin(plugins, "flow"), removePlugin(plugins, "jsx"), plugins.push("objectRestSpread", "classProperties"), isTSX && plugins.push("jsx");
            }
            parserOpts.plugins.push(["typescript", { disallowAmbiguousJSXLike, dts }]);
          } };
        });
      }, "./node_modules/.pnpm/@babel+plugin-transform-export-namespace-from@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-transform-export-namespace-from/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
        exports2.default = (0, _helperPluginUtils.declare)((api) => (api.assertVersion(7), { name: "transform-export-namespace-from", manipulateOptions: (_2, parser) => parser.plugins.push("exportNamespaceFrom"), visitor: { ExportNamedDeclaration(path9) {
          var _exported$name;
          const { node, scope } = path9, { specifiers } = node, index = _core.types.isExportDefaultSpecifier(specifiers[0]) ? 1 : 0;
          if (!_core.types.isExportNamespaceSpecifier(specifiers[index])) return;
          const nodes = [];
          1 === index && nodes.push(_core.types.exportNamedDeclaration(null, [specifiers.shift()], node.source));
          const specifier = specifiers.shift(), { exported } = specifier, uid = scope.generateUidIdentifier(null != (_exported$name = exported.name) ? _exported$name : exported.value);
          nodes.push(_core.types.importDeclaration([_core.types.importNamespaceSpecifier(uid)], _core.types.cloneNode(node.source)), _core.types.exportNamedDeclaration(null, [_core.types.exportSpecifier(_core.types.cloneNode(uid), exported)])), node.specifiers.length >= 1 && nodes.push(node);
          const [importDeclaration] = path9.replaceWithMultiple(nodes);
          path9.scope.registerDeclaration(importDeclaration);
        } } }));
      }, "./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/dynamic-import.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.transformDynamicImport = function(path9, noInterop, file) {
          const buildRequire = noInterop ? requireNoInterop : requireInterop;
          path9.replaceWith((0, _helperModuleTransforms.buildDynamicImport)(path9.node, true, false, (specifier) => buildRequire(specifier, file)));
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _helperModuleTransforms = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/index.js");
        const requireNoInterop = (source) => _core.template.expression.ast`require(${source})`, requireInterop = (source, file) => _core.types.callExpression(file.addHelper("interopRequireWildcard"), [requireNoInterop(source)]);
      }, "./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/hooks.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.defineCommonJSHook = function(file, hook) {
          let hooks = file.get(commonJSHooksKey);
          hooks || file.set(commonJSHooksKey, hooks = []);
          hooks.push(hook);
        }, exports2.makeInvokers = function(file) {
          const hooks = file.get(commonJSHooksKey);
          return { getWrapperPayload: (...args) => findMap(hooks, (hook) => null == hook.getWrapperPayload ? void 0 : hook.getWrapperPayload(...args)), wrapReference: (...args) => findMap(hooks, (hook) => null == hook.wrapReference ? void 0 : hook.wrapReference(...args)), buildRequireWrapper: (...args) => findMap(hooks, (hook) => null == hook.buildRequireWrapper ? void 0 : hook.buildRequireWrapper(...args)) };
        };
        const commonJSHooksKey = "@babel/plugin-transform-modules-commonjs/customWrapperPlugin";
        function findMap(arr, cb) {
          if (arr) for (const el of arr) {
            const res = cb(el);
            if (null != res) return res;
          }
        }
      }, "./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0, Object.defineProperty(exports2, "defineCommonJSHook", { enumerable: true, get: function() {
          return _hooks.defineCommonJSHook;
        } });
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), _helperModuleTransforms = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/index.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _dynamicImport = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/dynamic-import.js"), _lazy = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/lazy.js"), _hooks = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/hooks.js");
        exports2.default = (0, _helperPluginUtils.declare)((api, options) => {
          var _api$assumption, _api$assumption2, _api$assumption3;
          api.assertVersion(7);
          const { strictNamespace = false, mjsStrictNamespace = strictNamespace, allowTopLevelThis, strict, strictMode, noInterop, importInterop, lazy = false, allowCommonJSExports = true, loose = false } = options, constantReexports = null != (_api$assumption = api.assumption("constantReexports")) ? _api$assumption : loose, enumerableModuleMeta = null != (_api$assumption2 = api.assumption("enumerableModuleMeta")) ? _api$assumption2 : loose, noIncompleteNsImportDetection = null != (_api$assumption3 = api.assumption("noIncompleteNsImportDetection")) && _api$assumption3;
          if (!("boolean" == typeof lazy || "function" == typeof lazy || Array.isArray(lazy) && lazy.every((item) => "string" == typeof item))) throw new Error(".lazy must be a boolean, array of strings, or a function");
          if ("boolean" != typeof strictNamespace) throw new Error(".strictNamespace must be a boolean, or undefined");
          if ("boolean" != typeof mjsStrictNamespace) throw new Error(".mjsStrictNamespace must be a boolean, or undefined");
          const getAssertion = (localName) => _core.template.expression.ast`
    (function(){
      throw new Error(
        "The CommonJS '" + "${localName}" + "' variable is not available in ES6 modules." +
        "Consider setting setting sourceType:script or sourceType:unambiguous in your " +
        "Babel config for this file.");
    })()
  `, moduleExportsVisitor = { ReferencedIdentifier(path9) {
            const localName = path9.node.name;
            if ("module" !== localName && "exports" !== localName) return;
            const localBinding = path9.scope.getBinding(localName);
            this.scope.getBinding(localName) !== localBinding || path9.parentPath.isObjectProperty({ value: path9.node }) && path9.parentPath.parentPath.isObjectPattern() || path9.parentPath.isAssignmentExpression({ left: path9.node }) || path9.isAssignmentExpression({ left: path9.node }) || path9.replaceWith(getAssertion(localName));
          }, UpdateExpression(path9) {
            const arg = path9.get("argument");
            if (!arg.isIdentifier()) return;
            const localName = arg.node.name;
            if ("module" !== localName && "exports" !== localName) return;
            const localBinding = path9.scope.getBinding(localName);
            this.scope.getBinding(localName) === localBinding && path9.replaceWith(_core.types.assignmentExpression(path9.node.operator[0] + "=", arg.node, getAssertion(localName)));
          }, AssignmentExpression(path9) {
            const left = path9.get("left");
            if (left.isIdentifier()) {
              const localName = left.node.name;
              if ("module" !== localName && "exports" !== localName) return;
              const localBinding = path9.scope.getBinding(localName);
              if (this.scope.getBinding(localName) !== localBinding) return;
              const right = path9.get("right");
              right.replaceWith(_core.types.sequenceExpression([right.node, getAssertion(localName)]));
            } else if (left.isPattern()) {
              const ids = left.getOuterBindingIdentifiers(), localName = Object.keys(ids).find((localName2) => ("module" === localName2 || "exports" === localName2) && this.scope.getBinding(localName2) === path9.scope.getBinding(localName2));
              if (localName) {
                const right = path9.get("right");
                right.replaceWith(_core.types.sequenceExpression([right.node, getAssertion(localName)]));
              }
            }
          } };
          return { name: "transform-modules-commonjs", pre() {
            this.file.set("@babel/plugin-transform-modules-*", "commonjs"), lazy && (0, _hooks.defineCommonJSHook)(this.file, (0, _lazy.lazyImportsHook)(lazy));
          }, visitor: { ["CallExpression" + (api.types.importExpression ? "|ImportExpression" : "")](path9) {
            if (!this.file.has("@babel/plugin-proposal-dynamic-import")) return;
            if (path9.isCallExpression() && !_core.types.isImport(path9.node.callee)) return;
            let { scope } = path9;
            do {
              scope.rename("require");
            } while (scope = scope.parent);
            (0, _dynamicImport.transformDynamicImport)(path9, noInterop, this.file);
          }, Program: { exit(path9, state) {
            if (!(0, _helperModuleTransforms.isModule)(path9)) return;
            path9.scope.rename("exports"), path9.scope.rename("module"), path9.scope.rename("require"), path9.scope.rename("__filename"), path9.scope.rename("__dirname"), allowCommonJSExports || path9.traverse(moduleExportsVisitor, { scope: path9.scope });
            let moduleName = (0, _helperModuleTransforms.getModuleName)(this.file.opts, options);
            moduleName && (moduleName = _core.types.stringLiteral(moduleName));
            const hooks = (0, _hooks.makeInvokers)(this.file), { meta, headers } = (0, _helperModuleTransforms.rewriteModuleStatementsAndPrepareHeader)(path9, { exportName: "exports", constantReexports, enumerableModuleMeta, strict, strictMode, allowTopLevelThis, noInterop, importInterop, wrapReference: hooks.wrapReference, getWrapperPayload: hooks.getWrapperPayload, esNamespaceOnly: "string" == typeof state.filename && /\.mjs$/.test(state.filename) ? mjsStrictNamespace : strictNamespace, noIncompleteNsImportDetection, filename: this.file.opts.filename });
            for (const [source, metadata] of meta.source) {
              const loadExpr = _core.types.callExpression(_core.types.identifier("require"), [_core.types.stringLiteral(source)]);
              let header;
              if ((0, _helperModuleTransforms.isSideEffectImport)(metadata)) {
                if (lazy && "function" === metadata.wrap) throw new Error("Assertion failure");
                header = _core.types.expressionStatement(loadExpr);
              } else {
                const init = (0, _helperModuleTransforms.wrapInterop)(path9, loadExpr, metadata.interop) || loadExpr;
                if (metadata.wrap) {
                  const res = hooks.buildRequireWrapper(metadata.name, init, metadata.wrap, metadata.referenced);
                  if (false === res) continue;
                  header = res;
                }
                null != header || (header = _core.template.statement.ast`
                var ${metadata.name} = ${init};
              `);
              }
              header.loc = metadata.loc, headers.push(header), headers.push(...(0, _helperModuleTransforms.buildNamespaceInitStatements)(meta, metadata, constantReexports, hooks.wrapReference));
            }
            (0, _helperModuleTransforms.ensureStatementsHoisted)(headers), path9.unshiftContainer("body", headers), path9.get("body").forEach((path10) => {
              headers.includes(path10.node) && path10.isVariableDeclaration() && path10.scope.registerDeclaration(path10);
            });
          } } } };
        });
      }, "./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/lazy.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.lazyImportsHook = void 0;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _helperModuleTransforms = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/index.js");
        exports2.lazyImportsHook = (lazy) => ({ name: "@babel/plugin-transform-modules-commonjs/lazy", version: "7.26.3", getWrapperPayload: (source, metadata) => (0, _helperModuleTransforms.isSideEffectImport)(metadata) || metadata.reexportAll ? null : true === lazy ? source.includes(".") ? null : "lazy/function" : Array.isArray(lazy) ? lazy.includes(source) ? "lazy/function" : null : "function" == typeof lazy ? lazy(source) ? "lazy/function" : null : void 0, buildRequireWrapper(name, init, payload, referenced) {
          if ("lazy/function" === payload) return !!referenced && _core.template.statement.ast`
        function ${name}() {
          const data = ${init};
          ${name} = function(){ return data; };
          return data;
        }
      `;
        }, wrapReference(ref, payload) {
          if ("lazy/function" === payload) return _core.types.callExpression(ref, []);
        } });
      }, "./node_modules/.pnpm/@babel+plugin-transform-nullish-coalescing-operator@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-transform-nullish-coalescing-operator/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
        exports2.default = (0, _helperPluginUtils.declare)((api, { loose = false }) => {
          var _api$assumption;
          api.assertVersion("^7.0.0-0 || >8.0.0-alpha <8.0.0-beta");
          const noDocumentAll = null != (_api$assumption = api.assumption("noDocumentAll")) ? _api$assumption : loose;
          return { name: "transform-nullish-coalescing-operator", manipulateOptions: (_2, parser) => parser.plugins.push("nullishCoalescingOperator"), visitor: { LogicalExpression(path9) {
            const { node, scope } = path9;
            if ("??" !== node.operator) return;
            let ref, assignment;
            if (scope.isStatic(node.left)) ref = node.left, assignment = _core.types.cloneNode(node.left);
            else {
              if (scope.path.isPattern()) return void path9.replaceWith(_core.template.statement.ast`(() => ${path9.node})()`);
              ref = scope.generateUidIdentifierBasedOnNode(node.left), scope.push({ id: _core.types.cloneNode(ref) }), assignment = _core.types.assignmentExpression("=", ref, node.left);
            }
            path9.replaceWith(_core.types.conditionalExpression(noDocumentAll ? _core.types.binaryExpression("!=", assignment, _core.types.nullLiteral()) : _core.types.logicalExpression("&&", _core.types.binaryExpression("!==", assignment, _core.types.nullLiteral()), _core.types.binaryExpression("!==", _core.types.cloneNode(ref), scope.buildUndefinedNode())), _core.types.cloneNode(ref), node.right));
          } } };
        });
      }, "./node_modules/.pnpm/@babel+plugin-transform-optional-chaining@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-transform-optional-chaining/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), helperSkipTransparentExpressionWrappers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.25.9/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js");
        function willPathCastToBoolean(path9) {
          const maybeWrapped = findOutermostTransparentParent(path9), { node, parentPath } = maybeWrapped;
          if (parentPath.isLogicalExpression()) {
            const { operator, right } = parentPath.node;
            if ("&&" === operator || "||" === operator || "??" === operator && node === right) return willPathCastToBoolean(parentPath);
          }
          if (parentPath.isSequenceExpression()) {
            const { expressions } = parentPath.node;
            return expressions[expressions.length - 1] !== node || willPathCastToBoolean(parentPath);
          }
          return parentPath.isConditional({ test: node }) || parentPath.isUnaryExpression({ operator: "!" }) || parentPath.isLoop({ test: node });
        }
        function findOutermostTransparentParent(path9) {
          let maybeWrapped = path9;
          return path9.findParent((p) => {
            if (!helperSkipTransparentExpressionWrappers.isTransparentExprWrapper(p.node)) return true;
            maybeWrapped = p;
          }), maybeWrapped;
        }
        function isSimpleMemberExpression(expression) {
          return expression = helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes(expression), core.types.isIdentifier(expression) || core.types.isSuper(expression) || core.types.isMemberExpression(expression) && !expression.computed && isSimpleMemberExpression(expression.object);
        }
        const NULLISH_CHECK = core.template.expression("%%check%% === null || %%ref%% === void 0"), NULLISH_CHECK_NO_DDA = core.template.expression("%%check%% == null"), NULLISH_CHECK_NEG = core.template.expression("%%check%% !== null && %%ref%% !== void 0"), NULLISH_CHECK_NO_DDA_NEG = core.template.expression("%%check%% != null");
        function transformOptionalChain(path9, { pureGetters, noDocumentAll }, replacementPath, ifNullish, wrapLast) {
          const { scope } = path9;
          if (scope.path.isPattern() && function(path10) {
            let optionalPath2 = path10;
            const { scope: scope2 } = path10;
            for (; optionalPath2.isOptionalMemberExpression() || optionalPath2.isOptionalCallExpression(); ) {
              const { node } = optionalPath2, childPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath2.isOptionalMemberExpression() ? optionalPath2.get("object") : optionalPath2.get("callee"));
              if (node.optional) return !scope2.isStatic(childPath.node);
              optionalPath2 = childPath;
            }
          }(path9)) return void replacementPath.replaceWith(core.template.expression.ast`(() => ${replacementPath.node})()`);
          const optionals = [];
          let optionalPath = path9;
          for (; optionalPath.isOptionalMemberExpression() || optionalPath.isOptionalCallExpression(); ) {
            const { node } = optionalPath;
            node.optional && optionals.push(node), optionalPath.isOptionalMemberExpression() ? (optionalPath.node.type = "MemberExpression", optionalPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.get("object"))) : optionalPath.isOptionalCallExpression() && (optionalPath.node.type = "CallExpression", optionalPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.get("callee")));
          }
          if (0 === optionals.length) return;
          const checks = [];
          let tmpVar;
          for (let i2 = optionals.length - 1; i2 >= 0; i2--) {
            const node = optionals[i2], isCall = core.types.isCallExpression(node), chainWithTypes = isCall ? node.callee : node.object, chain = helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes(chainWithTypes);
            let ref, check2;
            if (isCall && core.types.isIdentifier(chain, { name: "eval" }) ? (check2 = ref = chain, node.callee = core.types.sequenceExpression([core.types.numericLiteral(0), ref])) : pureGetters && isCall && isSimpleMemberExpression(chain) ? check2 = ref = node.callee : scope.isStatic(chain) ? check2 = ref = chainWithTypes : (tmpVar && !isCall || (tmpVar = scope.generateUidIdentifierBasedOnNode(chain), scope.push({ id: core.types.cloneNode(tmpVar) })), ref = tmpVar, check2 = core.types.assignmentExpression("=", core.types.cloneNode(tmpVar), chainWithTypes), isCall ? node.callee = ref : node.object = ref), isCall && core.types.isMemberExpression(chain)) if (pureGetters && isSimpleMemberExpression(chain)) node.callee = chainWithTypes;
            else {
              const { object } = chain;
              let context;
              if (core.types.isSuper(object)) context = core.types.thisExpression();
              else {
                const memoized = scope.maybeGenerateMemoised(object);
                memoized ? (context = memoized, chain.object = core.types.assignmentExpression("=", memoized, object)) : context = object;
              }
              node.arguments.unshift(core.types.cloneNode(context)), node.callee = core.types.memberExpression(node.callee, core.types.identifier("call"));
            }
            const data = { check: core.types.cloneNode(check2), ref: core.types.cloneNode(ref) };
            Object.defineProperty(data, "ref", { enumerable: false }), checks.push(data);
          }
          let result = replacementPath.node;
          wrapLast && (result = wrapLast(result));
          const ifNullishBoolean = core.types.isBooleanLiteral(ifNullish), ifNullishFalse = ifNullishBoolean && false === ifNullish.value, ifNullishVoid = !ifNullishBoolean && core.types.isUnaryExpression(ifNullish, { operator: "void" }), isEvaluationValueIgnored = core.types.isExpressionStatement(replacementPath.parent) && !replacementPath.isCompletionRecord() || core.types.isSequenceExpression(replacementPath.parent) && (arr = replacementPath.parent.expressions)[arr.length - 1] !== replacementPath.node;
          var arr;
          const tpl = ifNullishFalse ? noDocumentAll ? NULLISH_CHECK_NO_DDA_NEG : NULLISH_CHECK_NEG : noDocumentAll ? NULLISH_CHECK_NO_DDA : NULLISH_CHECK, logicalOp = ifNullishFalse ? "&&" : "||", check = checks.map(tpl).reduce((expr, check2) => core.types.logicalExpression(logicalOp, expr, check2));
          replacementPath.replaceWith(ifNullishBoolean || ifNullishVoid && isEvaluationValueIgnored ? core.types.logicalExpression(logicalOp, check, result) : core.types.conditionalExpression(check, ifNullish, result));
        }
        function transform3(path9, assumptions) {
          const { scope } = path9, maybeWrapped = findOutermostTransparentParent(path9), { parentPath } = maybeWrapped;
          if (parentPath.isUnaryExpression({ operator: "delete" })) transformOptionalChain(path9, assumptions, parentPath, core.types.booleanLiteral(true));
          else {
            let wrapLast;
            parentPath.isCallExpression({ callee: maybeWrapped.node }) && path9.isOptionalMemberExpression() && (wrapLast = (replacement) => {
              var _baseRef;
              const object = helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes(replacement.object);
              let baseRef;
              return assumptions.pureGetters && isSimpleMemberExpression(object) || (baseRef = scope.maybeGenerateMemoised(object), baseRef && (replacement.object = core.types.assignmentExpression("=", baseRef, object))), core.types.callExpression(core.types.memberExpression(replacement, core.types.identifier("bind")), [core.types.cloneNode(null != (_baseRef = baseRef) ? _baseRef : object)]);
            }), transformOptionalChain(path9, assumptions, path9, willPathCastToBoolean(maybeWrapped) ? core.types.booleanLiteral(false) : scope.buildUndefinedNode(), wrapLast);
          }
        }
        var index = helperPluginUtils.declare((api, options) => {
          var _api$assumption, _api$assumption2;
          api.assertVersion("^7.0.0-0 || >8.0.0-alpha <8.0.0-beta");
          const { loose = false } = options, noDocumentAll = null != (_api$assumption = api.assumption("noDocumentAll")) ? _api$assumption : loose, pureGetters = null != (_api$assumption2 = api.assumption("pureGetters")) ? _api$assumption2 : loose;
          return { name: "transform-optional-chaining", manipulateOptions: (_2, parser) => parser.plugins.push("optionalChaining"), visitor: { "OptionalCallExpression|OptionalMemberExpression"(path9) {
            transform3(path9, { noDocumentAll, pureGetters });
          } } };
        });
        exports2.default = index, exports2.transform = transform3, exports2.transformOptionalChain = transformOptionalChain;
      }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/const-enum.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(path9, t2) {
          const { name } = path9.node.id, parentIsExport = path9.parentPath.isExportNamedDeclaration();
          let isExported = parentIsExport;
          !isExported && t2.isProgram(path9.parent) && (isExported = path9.parent.body.some((stmt) => t2.isExportNamedDeclaration(stmt) && "type" !== stmt.exportKind && !stmt.source && stmt.specifiers.some((spec) => t2.isExportSpecifier(spec) && "type" !== spec.exportKind && spec.local.name === name)));
          const { enumValues: entries } = (0, _enum.translateEnumValues)(path9, t2);
          if (isExported) {
            const obj = t2.objectExpression(entries.map(([name2, value2]) => t2.objectProperty(t2.isValidIdentifier(name2) ? t2.identifier(name2) : t2.stringLiteral(name2), value2)));
            return void (path9.scope.hasOwnBinding(name) ? (parentIsExport ? path9.parentPath : path9).replaceWith(t2.expressionStatement(t2.callExpression(t2.memberExpression(t2.identifier("Object"), t2.identifier("assign")), [path9.node.id, obj]))) : (path9.replaceWith(t2.variableDeclaration("var", [t2.variableDeclarator(path9.node.id, obj)])), path9.scope.registerDeclaration(path9)));
          }
          const entriesMap = new Map(entries);
          path9.scope.path.traverse({ Scope(path10) {
            path10.scope.hasOwnBinding(name) && path10.skip();
          }, MemberExpression(path10) {
            if (!t2.isIdentifier(path10.node.object, { name })) return;
            let key;
            if (path10.node.computed) {
              if (!t2.isStringLiteral(path10.node.property)) return;
              key = path10.node.property.value;
            } else {
              if (!t2.isIdentifier(path10.node.property)) return;
              key = path10.node.property.name;
            }
            entriesMap.has(key) && path10.replaceWith(t2.cloneNode(entriesMap.get(key)));
          } }), path9.remove();
        };
        var _enum = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/enum.js");
      }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/enum.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(path9, t2) {
          const { node, parentPath } = path9;
          if (node.declare) return void path9.remove();
          const name = node.id.name, { fill, data, isPure } = function(path10, t3, id) {
            const { enumValues: x, data: data2, isPure: isPure2 } = translateEnumValues(path10, t3), assignments = x.map(([memberName, memberValue]) => buildEnumMember(isSyntacticallyString(memberValue), { ENUM: t3.cloneNode(id), NAME: memberName, VALUE: memberValue }));
            return { fill: { ID: t3.cloneNode(id), ASSIGNMENTS: assignments }, data: data2, isPure: isPure2 };
          }(path9, t2, node.id);
          switch (parentPath.type) {
            case "BlockStatement":
            case "ExportNamedDeclaration":
            case "Program": {
              const isGlobal = t2.isProgram(path9.parent), isSeen = function seen(parentPath2) {
                if (parentPath2.isExportDeclaration()) return seen(parentPath2.parentPath);
                return !!parentPath2.getData(name) || (parentPath2.setData(name, true), false);
              }(parentPath);
              let init = t2.objectExpression([]);
              (isSeen || isGlobal) && (init = t2.logicalExpression("||", t2.cloneNode(fill.ID), init));
              const enumIIFE = buildEnumWrapper(Object.assign({}, fill, { INIT: init }));
              if (isPure && (0, _helperAnnotateAsPure.default)(enumIIFE), isSeen) {
                (parentPath.isExportDeclaration() ? parentPath : path9).replaceWith(t2.expressionStatement(t2.assignmentExpression("=", t2.cloneNode(node.id), enumIIFE)));
              } else path9.scope.registerDeclaration(path9.replaceWith(t2.variableDeclaration(isGlobal ? "var" : "let", [t2.variableDeclarator(node.id, enumIIFE)]))[0]);
              ENUMS.set(path9.scope.getBindingIdentifier(name), data);
              break;
            }
            default:
              throw new Error(`Unexpected enum parent '${path9.parent.type}`);
          }
        }, exports2.isSyntacticallyString = isSyntacticallyString, exports2.translateEnumValues = translateEnumValues;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _assert = __webpack_require__2("assert"), _helperAnnotateAsPure = __webpack_require__2("./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.25.9/node_modules/@babel/helper-annotate-as-pure/lib/index.js"), _helperSkipTransparentExpressionWrappers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.25.9/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js");
        const ENUMS = /* @__PURE__ */ new WeakMap(), buildEnumWrapper = _core.template.expression("\n    (function (ID) {\n      ASSIGNMENTS;\n      return ID;\n    })(INIT)\n  ");
        const buildStringAssignment = (0, _core.template)('\n  ENUM["NAME"] = VALUE;\n'), buildNumericAssignment = (0, _core.template)('\n  ENUM[ENUM["NAME"] = VALUE] = "NAME";\n'), buildEnumMember = (isString, options) => (isString ? buildStringAssignment : buildNumericAssignment)(options);
        function isSyntacticallyString(expr) {
          switch ((expr = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes)(expr)).type) {
            case "BinaryExpression": {
              const left = expr.left, right = expr.right;
              return "+" === expr.operator && (isSyntacticallyString(left) || isSyntacticallyString(right));
            }
            case "TemplateLiteral":
            case "StringLiteral":
              return true;
          }
          return false;
        }
        function ReferencedIdentifier(expr, state) {
          const { seen, path: path9, t: t2 } = state, name = expr.node.name;
          seen.has(name) && !expr.scope.hasOwnBinding(name) && (expr.replaceWith(t2.memberExpression(t2.cloneNode(path9.node.id), t2.cloneNode(expr.node))), expr.skip());
        }
        const enumSelfReferenceVisitor = { ReferencedIdentifier };
        function translateEnumValues(path9, t2) {
          var _ENUMS$get;
          const bindingIdentifier = path9.scope.getBindingIdentifier(path9.node.id.name), seen = null != (_ENUMS$get = ENUMS.get(bindingIdentifier)) ? _ENUMS$get : /* @__PURE__ */ new Map();
          let lastName, constValue = -1, isPure = true;
          const enumValues = path9.get("members").map((memberPath) => {
            const member = memberPath.node, name = t2.isIdentifier(member.id) ? member.id.name : member.id.value, initializerPath = memberPath.get("initializer");
            let value2;
            if (member.initializer) constValue = computeConstantValue(initializerPath, seen), void 0 !== constValue ? (seen.set(name, constValue), _assert("number" == typeof constValue || "string" == typeof constValue), value2 = constValue === 1 / 0 || Number.isNaN(constValue) ? t2.identifier(String(constValue)) : constValue === -1 / 0 ? t2.unaryExpression("-", t2.identifier("Infinity")) : t2.valueToNode(constValue)) : (isPure && (isPure = initializerPath.isPure()), initializerPath.isReferencedIdentifier() ? ReferencedIdentifier(initializerPath, { t: t2, seen, path: path9 }) : initializerPath.traverse(enumSelfReferenceVisitor, { t: t2, seen, path: path9 }), value2 = initializerPath.node, seen.set(name, void 0));
            else if ("number" == typeof constValue) constValue += 1, value2 = t2.numericLiteral(constValue), seen.set(name, constValue);
            else {
              if ("string" == typeof constValue) throw path9.buildCodeFrameError("Enum member must have initializer.");
              {
                const lastRef = t2.memberExpression(t2.cloneNode(path9.node.id), t2.stringLiteral(lastName), true);
                value2 = t2.binaryExpression("+", t2.numericLiteral(1), lastRef), seen.set(name, void 0);
              }
            }
            return lastName = name, [name, value2];
          });
          return { isPure, data: seen, enumValues };
        }
        function computeConstantValue(path9, prevMembers, seen = /* @__PURE__ */ new Set()) {
          return evaluate(path9);
          function evaluate(path10) {
            const expr = path10.node;
            switch (expr.type) {
              case "MemberExpression":
              case "Identifier":
                return evaluateRef(path10, prevMembers, seen);
              case "StringLiteral":
              case "NumericLiteral":
                return expr.value;
              case "UnaryExpression":
                return function(path11) {
                  const value2 = evaluate(path11.get("argument"));
                  if (void 0 === value2) return;
                  switch (path11.node.operator) {
                    case "+":
                      return value2;
                    case "-":
                      return -value2;
                    case "~":
                      return ~value2;
                    default:
                      return;
                  }
                }(path10);
              case "BinaryExpression":
                return function(path11) {
                  const left = evaluate(path11.get("left"));
                  if (void 0 === left) return;
                  const right = evaluate(path11.get("right"));
                  if (void 0 === right) return;
                  switch (path11.node.operator) {
                    case "|":
                      return left | right;
                    case "&":
                      return left & right;
                    case ">>":
                      return left >> right;
                    case ">>>":
                      return left >>> right;
                    case "<<":
                      return left << right;
                    case "^":
                      return left ^ right;
                    case "*":
                      return left * right;
                    case "/":
                      return left / right;
                    case "+":
                      return left + right;
                    case "-":
                      return left - right;
                    case "%":
                      return left % right;
                    case "**":
                      return Math.pow(left, right);
                    default:
                      return;
                  }
                }(path10);
              case "ParenthesizedExpression":
                return evaluate(path10.get("expression"));
              case "TemplateLiteral": {
                if (1 === expr.quasis.length) return expr.quasis[0].value.cooked;
                const paths = path10.get("expressions"), quasis = expr.quasis;
                let str = "";
                for (let i2 = 0; i2 < quasis.length; i2++) if (str += quasis[i2].value.cooked, i2 + 1 < quasis.length) {
                  const value2 = evaluateRef(paths[i2], prevMembers, seen);
                  if (void 0 === value2) return;
                  str += value2;
                }
                return str;
              }
              default:
                return;
            }
          }
          function evaluateRef(path10, prevMembers2, seen2) {
            if (path10.isMemberExpression()) {
              const expr = path10.node, obj = expr.object, prop = expr.property;
              if (!_core.types.isIdentifier(obj) || (expr.computed ? !_core.types.isStringLiteral(prop) : !_core.types.isIdentifier(prop))) return;
              const bindingIdentifier = path10.scope.getBindingIdentifier(obj.name), data = ENUMS.get(bindingIdentifier);
              if (!data) return;
              return data.get(prop.computed ? prop.value : prop.name);
            }
            if (path10.isIdentifier()) {
              const name = path10.node.name;
              if (["Infinity", "NaN"].includes(name)) return Number(name);
              let value2 = null == prevMembers2 ? void 0 : prevMembers2.get(name);
              if (void 0 !== value2) return value2;
              if (seen2.has(path10.node)) return;
              return seen2.add(path10.node), value2 = computeConstantValue(path10.resolve(), prevMembers2, seen2), null == prevMembers2 || prevMembers2.set(name, value2), value2;
            }
          }
        }
      }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/global-types.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.GLOBAL_TYPES = void 0, exports2.isGlobalType = function({ scope }, name) {
          return !scope.hasBinding(name) && (!!GLOBAL_TYPES.get(scope).has(name) || (console.warn(`The exported identifier "${name}" is not declared in Babel's scope tracker
as a JavaScript value binding, and "@babel/plugin-transform-typescript"
never encountered it as a TypeScript type declaration.
It will be treated as a JavaScript value.

This problem is likely caused by another plugin injecting
"${name}" without registering it in the scope tracker. If you are the author
 of that plugin, please use "scope.registerDeclaration(declarationPath)".`), false));
        }, exports2.registerGlobalType = function(programScope, name) {
          GLOBAL_TYPES.get(programScope).add(name);
        };
        const GLOBAL_TYPES = exports2.GLOBAL_TYPES = /* @__PURE__ */ new WeakMap();
      }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), _pluginSyntaxTypescript = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-typescript@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-typescript/lib/index.js"), _helperCreateClassFeaturesPlugin = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/index.js"), _constEnum = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/const-enum.js"), _enum = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/enum.js"), _globalTypes = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/global-types.js"), _namespace = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/namespace.js");
        function isInType(path9) {
          switch (path9.parent.type) {
            case "TSTypeReference":
            case "TSExpressionWithTypeArguments":
            case "TSExpressionWithTypeArguments":
            case "TSTypeQuery":
              return true;
            case "TSQualifiedName":
              return "TSImportEqualsDeclaration" !== path9.parentPath.findParent((path10) => "TSQualifiedName" !== path10.type).type;
            case "ExportSpecifier":
              return "type" === path9.parent.exportKind || "type" === path9.parentPath.parent.exportKind;
            default:
              return false;
          }
        }
        const NEEDS_EXPLICIT_ESM = /* @__PURE__ */ new WeakMap(), PARSED_PARAMS = /* @__PURE__ */ new WeakSet();
        function safeRemove(path9) {
          const ids = path9.getBindingIdentifiers();
          for (const name of Object.keys(ids)) {
            const binding = path9.scope.getBinding(name);
            binding && binding.identifier === ids[name] && binding.scope.removeBinding(name);
          }
          path9.opts.noScope = true, path9.remove(), path9.opts.noScope = false;
        }
        function assertCjsTransformEnabled(path9, pass, wrong, suggestion, extra = "") {
          if ("commonjs" !== pass.file.get("@babel/plugin-transform-modules-*")) throw path9.buildCodeFrameError(`\`${wrong}\` is only supported when compiling modules to CommonJS.
Please consider using \`${suggestion}\`${extra}, or add @babel/plugin-transform-modules-commonjs to your Babel config.`);
        }
        exports2.default = (0, _helperPluginUtils.declare)((api, opts) => {
          const { types: t2, template } = api;
          api.assertVersion(7);
          const JSX_PRAGMA_REGEX = /\*?\s*@jsx((?:Frag)?)\s+(\S+)/, { allowNamespaces = true, jsxPragma = "React.createElement", jsxPragmaFrag = "React.Fragment", onlyRemoveTypeImports = false, optimizeConstEnums = false } = opts;
          var { allowDeclareFields = false } = opts;
          const classMemberVisitors = { field(path9) {
            const { node } = path9;
            if (!allowDeclareFields && node.declare) throw path9.buildCodeFrameError("The 'declare' modifier is only allowed when the 'allowDeclareFields' option of @babel/plugin-transform-typescript or @babel/preset-typescript is enabled.");
            if (node.declare) {
              if (node.value) throw path9.buildCodeFrameError("Fields with the 'declare' modifier cannot be initialized here, but only in the constructor");
              node.decorators || path9.remove();
            } else if (node.definite) {
              if (node.value) throw path9.buildCodeFrameError("Definitely assigned fields cannot be initialized here, but only in the constructor");
              allowDeclareFields || node.decorators || t2.isClassPrivateProperty(node) || path9.remove();
            } else node.abstract ? path9.remove() : allowDeclareFields || node.value || node.decorators || t2.isClassPrivateProperty(node) || path9.remove();
            node.accessibility && (node.accessibility = null), node.abstract && (node.abstract = null), node.readonly && (node.readonly = null), node.optional && (node.optional = null), node.typeAnnotation && (node.typeAnnotation = null), node.definite && (node.definite = null), node.declare && (node.declare = null), node.override && (node.override = null);
          }, method({ node }) {
            node.accessibility && (node.accessibility = null), node.abstract && (node.abstract = null), node.optional && (node.optional = null), node.override && (node.override = null);
          }, constructor(path9, classPath) {
            path9.node.accessibility && (path9.node.accessibility = null);
            const assigns = [], { scope } = path9;
            for (const paramPath of path9.get("params")) {
              const param = paramPath.node;
              if ("TSParameterProperty" === param.type) {
                const parameter = param.parameter;
                if (PARSED_PARAMS.has(parameter)) continue;
                let id;
                if (PARSED_PARAMS.add(parameter), t2.isIdentifier(parameter)) id = parameter;
                else {
                  if (!t2.isAssignmentPattern(parameter) || !t2.isIdentifier(parameter.left)) throw paramPath.buildCodeFrameError("Parameter properties can not be destructuring patterns.");
                  id = parameter.left;
                }
                assigns.push(template.statement.ast`
              this.${t2.cloneNode(id)} = ${t2.cloneNode(id)}
            `), paramPath.replaceWith(paramPath.get("parameter")), scope.registerBinding("param", paramPath);
              }
            }
            (0, _helperCreateClassFeaturesPlugin.injectInitialization)(classPath, path9, assigns);
          } };
          return { name: "transform-typescript", inherits: _pluginSyntaxTypescript.default, visitor: { Pattern: visitPattern, Identifier: visitPattern, RestElement: visitPattern, Program: { enter(path9, state) {
            const { file } = state;
            let fileJsxPragma = null, fileJsxPragmaFrag = null;
            const programScope = path9.scope;
            if (_globalTypes.GLOBAL_TYPES.has(programScope) || _globalTypes.GLOBAL_TYPES.set(programScope, /* @__PURE__ */ new Set()), file.ast.comments) for (const comment of file.ast.comments) {
              const jsxMatches = JSX_PRAGMA_REGEX.exec(comment.value);
              jsxMatches && (jsxMatches[1] ? fileJsxPragmaFrag = jsxMatches[2] : fileJsxPragma = jsxMatches[2]);
            }
            let pragmaImportName = fileJsxPragma || jsxPragma;
            pragmaImportName && ([pragmaImportName] = pragmaImportName.split("."));
            let pragmaFragImportName = fileJsxPragmaFrag || jsxPragmaFrag;
            pragmaFragImportName && ([pragmaFragImportName] = pragmaFragImportName.split("."));
            for (let stmt of path9.get("body")) if (stmt.isImportDeclaration()) {
              if (NEEDS_EXPLICIT_ESM.has(state.file.ast.program) || NEEDS_EXPLICIT_ESM.set(state.file.ast.program, true), "type" === stmt.node.importKind) {
                for (const specifier of stmt.node.specifiers) (0, _globalTypes.registerGlobalType)(programScope, specifier.local.name);
                stmt.remove();
                continue;
              }
              const importsToRemove = /* @__PURE__ */ new Set(), specifiersLength = stmt.node.specifiers.length, isAllSpecifiersElided = () => specifiersLength > 0 && specifiersLength === importsToRemove.size;
              for (const specifier of stmt.node.specifiers) if ("ImportSpecifier" === specifier.type && "type" === specifier.importKind) {
                (0, _globalTypes.registerGlobalType)(programScope, specifier.local.name);
                const binding = stmt.scope.getBinding(specifier.local.name);
                binding && importsToRemove.add(binding.path);
              }
              if (onlyRemoveTypeImports) NEEDS_EXPLICIT_ESM.set(path9.node, false);
              else {
                if (0 === stmt.node.specifiers.length) {
                  NEEDS_EXPLICIT_ESM.set(path9.node, false);
                  continue;
                }
                for (const specifier of stmt.node.specifiers) {
                  const binding = stmt.scope.getBinding(specifier.local.name);
                  binding && !importsToRemove.has(binding.path) && (isImportTypeOnly({ binding, programPath: path9, pragmaImportName, pragmaFragImportName }) ? importsToRemove.add(binding.path) : NEEDS_EXPLICIT_ESM.set(path9.node, false));
                }
              }
              if (isAllSpecifiersElided() && !onlyRemoveTypeImports) stmt.remove();
              else for (const importPath of importsToRemove) importPath.remove();
            } else if (stmt.isExportDeclaration() && (stmt = stmt.get("declaration")), stmt.isVariableDeclaration({ declare: true })) for (const name of Object.keys(stmt.getBindingIdentifiers())) (0, _globalTypes.registerGlobalType)(programScope, name);
            else (stmt.isTSTypeAliasDeclaration() || stmt.isTSDeclareFunction() && stmt.get("id").isIdentifier() || stmt.isTSInterfaceDeclaration() || stmt.isClassDeclaration({ declare: true }) || stmt.isTSEnumDeclaration({ declare: true }) || stmt.isTSModuleDeclaration({ declare: true }) && stmt.get("id").isIdentifier()) && (0, _globalTypes.registerGlobalType)(programScope, stmt.node.id.name);
          }, exit(path9) {
            "module" === path9.node.sourceType && NEEDS_EXPLICIT_ESM.get(path9.node) && path9.pushContainer("body", t2.exportNamedDeclaration());
          } }, ExportNamedDeclaration(path9, state) {
            if (NEEDS_EXPLICIT_ESM.has(state.file.ast.program) || NEEDS_EXPLICIT_ESM.set(state.file.ast.program, true), "type" !== path9.node.exportKind) if (path9.node.source && path9.node.specifiers.length > 0 && path9.node.specifiers.every((specifier) => "ExportSpecifier" === specifier.type && "type" === specifier.exportKind)) path9.remove();
            else if (!path9.node.source && path9.node.specifiers.length > 0 && path9.node.specifiers.every((specifier) => t2.isExportSpecifier(specifier) && (0, _globalTypes.isGlobalType)(path9, specifier.local.name))) path9.remove();
            else {
              if (t2.isTSModuleDeclaration(path9.node.declaration)) {
                const namespace = path9.node.declaration;
                if (!t2.isStringLiteral(namespace.id)) {
                  const id = (0, _namespace.getFirstIdentifier)(namespace.id);
                  if (path9.scope.hasOwnBinding(id.name)) path9.replaceWith(namespace);
                  else {
                    const [newExport] = path9.replaceWithMultiple([t2.exportNamedDeclaration(t2.variableDeclaration("let", [t2.variableDeclarator(t2.cloneNode(id))])), namespace]);
                    path9.scope.registerDeclaration(newExport);
                  }
                }
              }
              NEEDS_EXPLICIT_ESM.set(state.file.ast.program, false);
            }
            else path9.remove();
          }, ExportAllDeclaration(path9) {
            "type" === path9.node.exportKind && path9.remove();
          }, ExportSpecifier(path9) {
            (!path9.parent.source && (0, _globalTypes.isGlobalType)(path9, path9.node.local.name) || "type" === path9.node.exportKind) && path9.remove();
          }, ExportDefaultDeclaration(path9, state) {
            NEEDS_EXPLICIT_ESM.has(state.file.ast.program) || NEEDS_EXPLICIT_ESM.set(state.file.ast.program, true), t2.isIdentifier(path9.node.declaration) && (0, _globalTypes.isGlobalType)(path9, path9.node.declaration.name) ? path9.remove() : NEEDS_EXPLICIT_ESM.set(state.file.ast.program, false);
          }, TSDeclareFunction(path9) {
            safeRemove(path9);
          }, TSDeclareMethod(path9) {
            safeRemove(path9);
          }, VariableDeclaration(path9) {
            path9.node.declare && safeRemove(path9);
          }, VariableDeclarator({ node }) {
            node.definite && (node.definite = null);
          }, TSIndexSignature(path9) {
            path9.remove();
          }, ClassDeclaration(path9) {
            const { node } = path9;
            node.declare && safeRemove(path9);
          }, Class(path9) {
            const { node } = path9;
            node.typeParameters && (node.typeParameters = null), node.superTypeParameters && (node.superTypeParameters = null), node.implements && (node.implements = null), node.abstract && (node.abstract = null), path9.get("body.body").forEach((child) => {
              child.isClassMethod() || child.isClassPrivateMethod() ? "constructor" === child.node.kind ? classMemberVisitors.constructor(child, path9) : classMemberVisitors.method(child) : (child.isClassProperty() || child.isClassPrivateProperty() || child.isClassAccessorProperty()) && classMemberVisitors.field(child);
            });
          }, Function(path9) {
            const { node } = path9;
            node.typeParameters && (node.typeParameters = null), node.returnType && (node.returnType = null);
            const params = node.params;
            params.length > 0 && t2.isIdentifier(params[0], { name: "this" }) && params.shift();
          }, TSModuleDeclaration(path9) {
            (0, _namespace.default)(path9, allowNamespaces);
          }, TSInterfaceDeclaration(path9) {
            path9.remove();
          }, TSTypeAliasDeclaration(path9) {
            path9.remove();
          }, TSEnumDeclaration(path9) {
            optimizeConstEnums && path9.node.const ? (0, _constEnum.default)(path9, t2) : (0, _enum.default)(path9, t2);
          }, TSImportEqualsDeclaration(path9, pass) {
            const { id, moduleReference, isExport } = path9.node;
            let init, varKind;
            t2.isTSExternalModuleReference(moduleReference) ? (assertCjsTransformEnabled(path9, pass, `import ${id.name} = require(...);`, `import ${id.name} from '...';`, " alongside Typescript's --allowSyntheticDefaultImports option"), init = t2.callExpression(t2.identifier("require"), [moduleReference.expression]), varKind = "const") : (init = entityNameToExpr(moduleReference), varKind = "var");
            const newNode = t2.variableDeclaration(varKind, [t2.variableDeclarator(id, init)]);
            path9.replaceWith(isExport ? t2.exportNamedDeclaration(newNode) : newNode), path9.scope.registerDeclaration(path9);
          }, TSExportAssignment(path9, pass) {
            assertCjsTransformEnabled(path9, pass, "export = <value>;", "export default <value>;"), path9.replaceWith(template.statement.ast`module.exports = ${path9.node.expression}`);
          }, TSTypeAssertion(path9) {
            path9.replaceWith(path9.node.expression);
          }, ["TSAsExpression" + (t2.tsSatisfiesExpression ? "|TSSatisfiesExpression" : "")](path9) {
            let { node } = path9;
            do {
              node = node.expression;
            } while (t2.isTSAsExpression(node) || null != t2.isTSSatisfiesExpression && t2.isTSSatisfiesExpression(node));
            path9.replaceWith(node);
          }, [api.types.tsInstantiationExpression ? "TSNonNullExpression|TSInstantiationExpression" : "TSNonNullExpression"](path9) {
            path9.replaceWith(path9.node.expression);
          }, CallExpression(path9) {
            path9.node.typeParameters = null;
          }, OptionalCallExpression(path9) {
            path9.node.typeParameters = null;
          }, NewExpression(path9) {
            path9.node.typeParameters = null;
          }, JSXOpeningElement(path9) {
            path9.node.typeParameters = null;
          }, TaggedTemplateExpression(path9) {
            path9.node.typeParameters = null;
          } } };
          function entityNameToExpr(node) {
            return t2.isTSQualifiedName(node) ? t2.memberExpression(entityNameToExpr(node.left), node.right) : node;
          }
          function visitPattern({ node }) {
            node.typeAnnotation && (node.typeAnnotation = null), t2.isIdentifier(node) && node.optional && (node.optional = null);
          }
          function isImportTypeOnly({ binding, programPath, pragmaImportName, pragmaFragImportName }) {
            for (const path9 of binding.referencePaths) if (!isInType(path9)) return false;
            if (binding.identifier.name !== pragmaImportName && binding.identifier.name !== pragmaFragImportName) return true;
            let sourceFileHasJsx = false;
            return programPath.traverse({ "JSXElement|JSXFragment"(path9) {
              sourceFileHasJsx = true, path9.stop();
            } }), !sourceFileHasJsx;
          }
        });
      }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/namespace.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(path9, allowNamespaces) {
          if (path9.node.declare || "StringLiteral" === path9.node.id.type) return void path9.remove();
          if (!allowNamespaces) throw path9.get("id").buildCodeFrameError("Namespace not marked type-only declare. Non-declarative namespaces are only supported experimentally in Babel. To enable and review caveats see: https://babeljs.io/docs/en/babel-plugin-transform-typescript");
          const name = getFirstIdentifier(path9.node.id).name, value2 = handleNested(path9, path9.node);
          if (null === value2) {
            const program = path9.findParent((p) => p.isProgram());
            (0, _globalTypes.registerGlobalType)(program.scope, name), path9.remove();
          } else path9.scope.hasOwnBinding(name) ? path9.replaceWith(value2) : path9.scope.registerDeclaration(path9.replaceWithMultiple([getDeclaration(name), value2])[0]);
        }, exports2.getFirstIdentifier = getFirstIdentifier;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _globalTypes = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/global-types.js");
        function getFirstIdentifier(node) {
          return _core.types.isIdentifier(node) ? node : getFirstIdentifier(node.left);
        }
        function getDeclaration(name) {
          return _core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.identifier(name))]);
        }
        function getMemberExpression(name, itemName) {
          return _core.types.memberExpression(_core.types.identifier(name), _core.types.identifier(itemName));
        }
        function handleVariableDeclaration(node, name, hub) {
          if ("const" !== node.kind) throw hub.file.buildCodeFrameError(node, "Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript");
          const { declarations } = node;
          if (declarations.every((declarator) => _core.types.isIdentifier(declarator.id))) {
            for (const declarator of declarations) declarator.init = _core.types.assignmentExpression("=", getMemberExpression(name, declarator.id.name), declarator.init);
            return [node];
          }
          const bindingIdentifiers = _core.types.getBindingIdentifiers(node), assignments = [];
          for (const idName in bindingIdentifiers) assignments.push(_core.types.assignmentExpression("=", getMemberExpression(name, idName), _core.types.cloneNode(bindingIdentifiers[idName])));
          return [node, _core.types.expressionStatement(_core.types.sequenceExpression(assignments))];
        }
        function buildNestedAmbientModuleError(path9, node) {
          return path9.hub.buildError(node, "Ambient modules cannot be nested in other modules or namespaces.", Error);
        }
        function handleNested(path9, node, parentExport) {
          const names = /* @__PURE__ */ new Set(), realName = node.id, name = path9.scope.generateUid(realName.name), body = node.body;
          let namespaceTopLevel;
          node.id;
          namespaceTopLevel = _core.types.isTSModuleBlock(body) ? body.body : [_core.types.exportNamedDeclaration(body)];
          let isEmpty = true;
          for (let i2 = 0; i2 < namespaceTopLevel.length; i2++) {
            const subNode = namespaceTopLevel[i2];
            switch (subNode.type) {
              case "TSModuleDeclaration": {
                if (!_core.types.isIdentifier(subNode.id)) throw buildNestedAmbientModuleError(path9, subNode);
                const transformed = handleNested(path9, subNode);
                if (null !== transformed) {
                  isEmpty = false;
                  const moduleName = subNode.id.name;
                  names.has(moduleName) ? namespaceTopLevel[i2] = transformed : (names.add(moduleName), namespaceTopLevel.splice(i2++, 1, getDeclaration(moduleName), transformed));
                }
                continue;
              }
              case "TSEnumDeclaration":
              case "FunctionDeclaration":
              case "ClassDeclaration":
                isEmpty = false, names.add(subNode.id.name);
                continue;
              case "VariableDeclaration":
                isEmpty = false;
                for (const name2 in _core.types.getBindingIdentifiers(subNode)) names.add(name2);
                continue;
              default:
                isEmpty && (isEmpty = _core.types.isTypeScript(subNode));
                continue;
              case "ExportNamedDeclaration":
            }
            if (!("declare" in subNode.declaration) || !subNode.declaration.declare) switch (subNode.declaration.type) {
              case "TSEnumDeclaration":
              case "FunctionDeclaration":
              case "ClassDeclaration": {
                isEmpty = false;
                const itemName = subNode.declaration.id.name;
                names.add(itemName), namespaceTopLevel.splice(i2++, 1, subNode.declaration, _core.types.expressionStatement(_core.types.assignmentExpression("=", getMemberExpression(name, itemName), _core.types.identifier(itemName))));
                break;
              }
              case "VariableDeclaration": {
                isEmpty = false;
                const nodes = handleVariableDeclaration(subNode.declaration, name, path9.hub);
                namespaceTopLevel.splice(i2, nodes.length, ...nodes), i2 += nodes.length - 1;
                break;
              }
              case "TSModuleDeclaration": {
                if (!_core.types.isIdentifier(subNode.declaration.id)) throw buildNestedAmbientModuleError(path9, subNode.declaration);
                const transformed = handleNested(path9, subNode.declaration, _core.types.identifier(name));
                if (null !== transformed) {
                  isEmpty = false;
                  const moduleName = subNode.declaration.id.name;
                  names.has(moduleName) ? namespaceTopLevel[i2] = transformed : (names.add(moduleName), namespaceTopLevel.splice(i2++, 1, getDeclaration(moduleName), transformed));
                } else namespaceTopLevel.splice(i2, 1), i2--;
              }
            }
          }
          if (isEmpty) return null;
          let fallthroughValue = _core.types.objectExpression([]);
          if (parentExport) {
            const memberExpr = _core.types.memberExpression(parentExport, realName);
            fallthroughValue = _core.template.expression.ast`
      ${_core.types.cloneNode(memberExpr)} ||
        (${_core.types.cloneNode(memberExpr)} = ${fallthroughValue})
    `;
          }
          return _core.template.statement.ast`
    (function (${_core.types.identifier(name)}) {
      ${namespaceTopLevel}
    })(${realName} || (${_core.types.cloneNode(realName)} = ${fallthroughValue}));
  `;
        }
      }, "./node_modules/.pnpm/@babel+preset-typescript@7.26.0_@babel+core@7.26.0/node_modules/@babel/preset-typescript/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), transformTypeScript = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/index.js");
        __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-jsx/lib/index.js");
        var transformModulesCommonJS = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/index.js"), helperValidatorOption = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/index.js");
        function _interopDefault(e2) {
          return e2 && e2.__esModule ? e2 : { default: e2 };
        }
        var transformTypeScript__default = _interopDefault(transformTypeScript), transformModulesCommonJS__default = _interopDefault(transformModulesCommonJS);
        const v = new helperValidatorOption.OptionValidator("@babel/preset-typescript");
        var pluginRewriteTSImports = helperPluginUtils.declare(function({ types: t2, template }) {
          function maybeReplace(source, path9) {
            source && (t2.isStringLiteral(source) ? /[\\/]/.test(source.value) && (source.value = source.value.replace(/(\.[mc]?)ts$/, "$1js").replace(/\.tsx$/, ".js")) : path9.replaceWith(template.expression.ast`(${source} + "").replace(/([\\/].*\.[mc]?)tsx?$/, "$1js")`));
          }
          return { name: "preset-typescript/plugin-rewrite-ts-imports", visitor: { "ImportDeclaration|ExportAllDeclaration|ExportNamedDeclaration"(path9) {
            const node = path9.node;
            "value" === (t2.isImportDeclaration(node) ? node.importKind : node.exportKind) && maybeReplace(node.source, path9.get("source"));
          }, CallExpression(path9) {
            t2.isImport(path9.node.callee) && maybeReplace(path9.node.arguments[0], path9.get("arguments.0"));
          }, ImportExpression(path9) {
            maybeReplace(path9.node.source, path9.get("source"));
          } } };
        }), index = helperPluginUtils.declarePreset((api, opts) => {
          api.assertVersion(7);
          const { allExtensions, ignoreExtensions, allowNamespaces, disallowAmbiguousJSXLike, isTSX, jsxPragma, jsxPragmaFrag, onlyRemoveTypeImports, optimizeConstEnums, rewriteImportExtensions } = function(options = {}) {
            let { allowNamespaces: allowNamespaces2 = true, jsxPragma: jsxPragma2, onlyRemoveTypeImports: onlyRemoveTypeImports2 } = options;
            const TopLevelOptions_ignoreExtensions = "ignoreExtensions", TopLevelOptions_disallowAmbiguousJSXLike = "disallowAmbiguousJSXLike", TopLevelOptions_jsxPragmaFrag = "jsxPragmaFrag", TopLevelOptions_optimizeConstEnums = "optimizeConstEnums", TopLevelOptions_rewriteImportExtensions = "rewriteImportExtensions", TopLevelOptions_allExtensions = "allExtensions", TopLevelOptions_isTSX = "isTSX", jsxPragmaFrag2 = v.validateStringOption(TopLevelOptions_jsxPragmaFrag, options.jsxPragmaFrag, "React.Fragment");
            var allExtensions2 = v.validateBooleanOption(TopLevelOptions_allExtensions, options.allExtensions, false), isTSX2 = v.validateBooleanOption(TopLevelOptions_isTSX, options.isTSX, false);
            isTSX2 && v.invariant(allExtensions2, "isTSX:true requires allExtensions:true");
            const ignoreExtensions2 = v.validateBooleanOption(TopLevelOptions_ignoreExtensions, options.ignoreExtensions, false), disallowAmbiguousJSXLike2 = v.validateBooleanOption(TopLevelOptions_disallowAmbiguousJSXLike, options.disallowAmbiguousJSXLike, false);
            disallowAmbiguousJSXLike2 && v.invariant(allExtensions2, "disallowAmbiguousJSXLike:true requires allExtensions:true");
            const normalized = { ignoreExtensions: ignoreExtensions2, allowNamespaces: allowNamespaces2, disallowAmbiguousJSXLike: disallowAmbiguousJSXLike2, jsxPragma: jsxPragma2, jsxPragmaFrag: jsxPragmaFrag2, onlyRemoveTypeImports: onlyRemoveTypeImports2, optimizeConstEnums: v.validateBooleanOption(TopLevelOptions_optimizeConstEnums, options.optimizeConstEnums, false), rewriteImportExtensions: v.validateBooleanOption(TopLevelOptions_rewriteImportExtensions, options.rewriteImportExtensions, false) };
            return normalized.allExtensions = allExtensions2, normalized.isTSX = isTSX2, normalized;
          }(opts), pluginOptions = (disallowAmbiguousJSXLike2) => ({ allowDeclareFields: opts.allowDeclareFields, allowNamespaces, disallowAmbiguousJSXLike: disallowAmbiguousJSXLike2, jsxPragma, jsxPragmaFrag, onlyRemoveTypeImports, optimizeConstEnums }), getPlugins = (isTSX2, disallowAmbiguousJSXLike2) => [[transformTypeScript__default.default, Object.assign({ isTSX: isTSX2 }, pluginOptions(disallowAmbiguousJSXLike2))]];
          return { plugins: rewriteImportExtensions ? [pluginRewriteTSImports] : [], overrides: allExtensions || ignoreExtensions ? [{ plugins: getPlugins(isTSX, disallowAmbiguousJSXLike) }] : [{ test: /\.ts$/, plugins: getPlugins(false, false) }, { test: /\.mts$/, sourceType: "module", plugins: getPlugins(false, true) }, { test: /\.cts$/, sourceType: "unambiguous", plugins: [[transformModulesCommonJS__default.default, { allowTopLevelThis: true }], [transformTypeScript__default.default, pluginOptions(true)]] }, { test: /\.tsx$/, plugins: getPlugins(true, false) }] };
        });
        exports2.default = index;
      }, "./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/builder.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function createTemplateBuilder(formatter, defaultOpts) {
          const templateFnCache = /* @__PURE__ */ new WeakMap(), templateAstCache = /* @__PURE__ */ new WeakMap(), cachedOpts = defaultOpts || (0, _options.validate)(null);
          return Object.assign((tpl, ...args) => {
            if ("string" == typeof tpl) {
              if (args.length > 1) throw new Error("Unexpected extra params.");
              return extendedTrace((0, _string.default)(formatter, tpl, (0, _options.merge)(cachedOpts, (0, _options.validate)(args[0]))));
            }
            if (Array.isArray(tpl)) {
              let builder = templateFnCache.get(tpl);
              return builder || (builder = (0, _literal.default)(formatter, tpl, cachedOpts), templateFnCache.set(tpl, builder)), extendedTrace(builder(args));
            }
            if ("object" == typeof tpl && tpl) {
              if (args.length > 0) throw new Error("Unexpected extra params.");
              return createTemplateBuilder(formatter, (0, _options.merge)(cachedOpts, (0, _options.validate)(tpl)));
            }
            throw new Error("Unexpected template param " + typeof tpl);
          }, { ast: (tpl, ...args) => {
            if ("string" == typeof tpl) {
              if (args.length > 1) throw new Error("Unexpected extra params.");
              return (0, _string.default)(formatter, tpl, (0, _options.merge)((0, _options.merge)(cachedOpts, (0, _options.validate)(args[0])), NO_PLACEHOLDER))();
            }
            if (Array.isArray(tpl)) {
              let builder = templateAstCache.get(tpl);
              return builder || (builder = (0, _literal.default)(formatter, tpl, (0, _options.merge)(cachedOpts, NO_PLACEHOLDER)), templateAstCache.set(tpl, builder)), builder(args)();
            }
            throw new Error("Unexpected template param " + typeof tpl);
          } });
        };
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/options.js"), _string = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/string.js"), _literal = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/literal.js");
        const NO_PLACEHOLDER = (0, _options.validate)({ placeholderPattern: false });
        function extendedTrace(fn) {
          let rootStack = "";
          try {
            throw new Error();
          } catch (error) {
            error.stack && (rootStack = error.stack.split("\n").slice(3).join("\n"));
          }
          return (arg) => {
            try {
              return fn(arg);
            } catch (err) {
              throw err.stack += `
    =============
${rootStack}`, err;
            }
          };
        }
      }, "./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/formatters.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.statements = exports2.statement = exports2.smart = exports2.program = exports2.expression = void 0;
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { assertExpressionStatement } = _t;
        function makeStatementFormatter(fn) {
          return { code: (str) => `/* @babel/template */;
${str}`, validate: () => {
          }, unwrap: (ast) => fn(ast.program.body.slice(1)) };
        }
        exports2.smart = makeStatementFormatter((body) => body.length > 1 ? body : body[0]), exports2.statements = makeStatementFormatter((body) => body), exports2.statement = makeStatementFormatter((body) => {
          if (0 === body.length) throw new Error("Found nothing to return.");
          if (body.length > 1) throw new Error("Found multiple statements but wanted one");
          return body[0];
        });
        const expression = exports2.expression = { code: (str) => `(
${str}
)`, validate: (ast) => {
          if (ast.program.body.length > 1) throw new Error("Found multiple statements but wanted one");
          if (0 === expression.unwrap(ast).start) throw new Error("Parse result included parens.");
        }, unwrap: ({ program }) => {
          const [stmt] = program.body;
          return assertExpressionStatement(stmt), stmt.expression;
        } };
        exports2.program = { code: (str) => str, validate: () => {
        }, unwrap: (ast) => ast.program };
      }, "./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.statements = exports2.statement = exports2.smart = exports2.program = exports2.expression = exports2.default = void 0;
        var formatters = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/formatters.js"), _builder = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/builder.js");
        const smart = exports2.smart = (0, _builder.default)(formatters.smart), statement = exports2.statement = (0, _builder.default)(formatters.statement), statements = exports2.statements = (0, _builder.default)(formatters.statements), expression = exports2.expression = (0, _builder.default)(formatters.expression), program = exports2.program = (0, _builder.default)(formatters.program);
        exports2.default = Object.assign(smart.bind(void 0), { smart, statement, statements, expression, program, ast: smart.ast });
      }, "./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/literal.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(formatter, tpl, opts) {
          const { metadata, names } = function(formatter2, tpl2, opts2) {
            let prefix = "BABEL_TPL$";
            const raw2 = tpl2.join("");
            do {
              prefix = "$$" + prefix;
            } while (raw2.includes(prefix));
            const { names: names2, code } = function(tpl3, prefix2) {
              const names3 = [];
              let code2 = tpl3[0];
              for (let i2 = 1; i2 < tpl3.length; i2++) {
                const value2 = `${prefix2}${i2 - 1}`;
                names3.push(value2), code2 += value2 + tpl3[i2];
              }
              return { names: names3, code: code2 };
            }(tpl2, prefix), metadata2 = (0, _parse.default)(formatter2, formatter2.code(code), { parser: opts2.parser, placeholderWhitelist: new Set(names2.concat(opts2.placeholderWhitelist ? Array.from(opts2.placeholderWhitelist) : [])), placeholderPattern: opts2.placeholderPattern, preserveComments: opts2.preserveComments, syntacticPlaceholders: opts2.syntacticPlaceholders });
            return { metadata: metadata2, names: names2 };
          }(formatter, tpl, opts);
          return (arg) => {
            const defaultReplacements = {};
            return arg.forEach((replacement, i2) => {
              defaultReplacements[names[i2]] = replacement;
            }), (arg2) => {
              const replacements2 = (0, _options.normalizeReplacements)(arg2);
              return replacements2 && Object.keys(replacements2).forEach((key) => {
                if (hasOwnProperty.call(defaultReplacements, key)) throw new Error("Unexpected replacement overlap.");
              }), formatter.unwrap((0, _populate.default)(metadata, replacements2 ? Object.assign(replacements2, defaultReplacements) : defaultReplacements));
            };
          };
        };
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/options.js"), _parse = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/parse.js"), _populate = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/populate.js");
      }, "./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/options.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.merge = function(a2, b2) {
          const { placeholderWhitelist = a2.placeholderWhitelist, placeholderPattern = a2.placeholderPattern, preserveComments = a2.preserveComments, syntacticPlaceholders = a2.syntacticPlaceholders } = b2;
          return { parser: Object.assign({}, a2.parser, b2.parser), placeholderWhitelist, placeholderPattern, preserveComments, syntacticPlaceholders };
        }, exports2.normalizeReplacements = function(replacements2) {
          if (Array.isArray(replacements2)) return replacements2.reduce((acc, replacement, i2) => (acc["$" + i2] = replacement, acc), {});
          if ("object" == typeof replacements2 || null == replacements2) return replacements2 || void 0;
          throw new Error("Template replacements must be an array, object, null, or undefined");
        }, exports2.validate = function(opts) {
          if (null != opts && "object" != typeof opts) throw new Error("Unknown template options.");
          const _ref = opts || {}, { placeholderWhitelist, placeholderPattern, preserveComments, syntacticPlaceholders } = _ref, parser = function(r2, e2) {
            if (null == r2) return {};
            var t2 = {};
            for (var n2 in r2) if ({}.hasOwnProperty.call(r2, n2)) {
              if (e2.includes(n2)) continue;
              t2[n2] = r2[n2];
            }
            return t2;
          }(_ref, _excluded);
          if (null != placeholderWhitelist && !(placeholderWhitelist instanceof Set)) throw new Error("'.placeholderWhitelist' must be a Set, null, or undefined");
          if (null != placeholderPattern && !(placeholderPattern instanceof RegExp) && false !== placeholderPattern) throw new Error("'.placeholderPattern' must be a RegExp, false, null, or undefined");
          if (null != preserveComments && "boolean" != typeof preserveComments) throw new Error("'.preserveComments' must be a boolean, null, or undefined");
          if (null != syntacticPlaceholders && "boolean" != typeof syntacticPlaceholders) throw new Error("'.syntacticPlaceholders' must be a boolean, null, or undefined");
          if (true === syntacticPlaceholders && (null != placeholderWhitelist || null != placeholderPattern)) throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
          return { parser, placeholderWhitelist: placeholderWhitelist || void 0, placeholderPattern: null == placeholderPattern ? void 0 : placeholderPattern, preserveComments: null == preserveComments ? void 0 : preserveComments, syntacticPlaceholders: null == syntacticPlaceholders ? void 0 : syntacticPlaceholders };
        };
        const _excluded = ["placeholderWhitelist", "placeholderPattern", "preserveComments", "syntacticPlaceholders"];
      }, "./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/parse.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(formatter, code, opts) {
          const { placeholderWhitelist, placeholderPattern, preserveComments, syntacticPlaceholders } = opts, ast = function(code2, parserOpts, syntacticPlaceholders2) {
            const plugins = (parserOpts.plugins || []).slice();
            false !== syntacticPlaceholders2 && plugins.push("placeholders");
            parserOpts = Object.assign({ allowReturnOutsideFunction: true, allowSuperOutsideMethod: true, sourceType: "module" }, parserOpts, { plugins });
            try {
              return (0, _parser.parse)(code2, parserOpts);
            } catch (err) {
              const loc = err.loc;
              throw loc && (err.message += "\n" + (0, _codeFrame.codeFrameColumns)(code2, { start: loc }), err.code = "BABEL_TEMPLATE_PARSE_ERROR"), err;
            }
          }(code, opts.parser, syntacticPlaceholders);
          removePropertiesDeep(ast, { preserveComments }), formatter.validate(ast);
          const state = { syntactic: { placeholders: [], placeholderNames: /* @__PURE__ */ new Set() }, legacy: { placeholders: [], placeholderNames: /* @__PURE__ */ new Set() }, placeholderWhitelist, placeholderPattern, syntacticPlaceholders };
          return traverse(ast, placeholderVisitorHandler, state), Object.assign({ ast }, state.syntactic.placeholders.length ? state.syntactic : state.legacy);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _parser = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.26.3/node_modules/@babel/parser/lib/index.js"), _codeFrame = __webpack_require__2("./stubs/babel-codeframe.js");
        const { isCallExpression, isExpressionStatement, isFunction, isIdentifier: isIdentifier2, isJSXIdentifier, isNewExpression, isPlaceholder, isStatement, isStringLiteral, removePropertiesDeep, traverse } = _t, PATTERN = /^[_$A-Z0-9]+$/;
        function placeholderVisitorHandler(node, ancestors, state) {
          var _state$placeholderWhi;
          let name, hasSyntacticPlaceholders = state.syntactic.placeholders.length > 0;
          if (isPlaceholder(node)) {
            if (false === state.syntacticPlaceholders) throw new Error("%%foo%%-style placeholders can't be used when '.syntacticPlaceholders' is false.");
            name = node.name.name, hasSyntacticPlaceholders = true;
          } else {
            if (hasSyntacticPlaceholders || state.syntacticPlaceholders) return;
            if (isIdentifier2(node) || isJSXIdentifier(node)) name = node.name;
            else {
              if (!isStringLiteral(node)) return;
              name = node.value;
            }
          }
          if (hasSyntacticPlaceholders && (null != state.placeholderPattern || null != state.placeholderWhitelist)) throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
          if (!(hasSyntacticPlaceholders || false !== state.placeholderPattern && (state.placeholderPattern || PATTERN).test(name) || null != (_state$placeholderWhi = state.placeholderWhitelist) && _state$placeholderWhi.has(name))) return;
          ancestors = ancestors.slice();
          const { node: parent, key } = ancestors[ancestors.length - 1];
          let type;
          isStringLiteral(node) || isPlaceholder(node, { expectedNode: "StringLiteral" }) ? type = "string" : isNewExpression(parent) && "arguments" === key || isCallExpression(parent) && "arguments" === key || isFunction(parent) && "params" === key ? type = "param" : isExpressionStatement(parent) && !isPlaceholder(node) ? (type = "statement", ancestors = ancestors.slice(0, -1)) : type = isStatement(node) && isPlaceholder(node) ? "statement" : "other";
          const { placeholders, placeholderNames } = hasSyntacticPlaceholders ? state.syntactic : state.legacy;
          placeholders.push({ name, type, resolve: (ast) => function(ast2, ancestors2) {
            let parent2 = ast2;
            for (let i2 = 0; i2 < ancestors2.length - 1; i2++) {
              const { key: key3, index: index2 } = ancestors2[i2];
              parent2 = void 0 === index2 ? parent2[key3] : parent2[key3][index2];
            }
            const { key: key2, index } = ancestors2[ancestors2.length - 1];
            return { parent: parent2, key: key2, index };
          }(ast, ancestors), isDuplicate: placeholderNames.has(name) }), placeholderNames.add(name);
        }
      }, "./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/populate.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(metadata, replacements2) {
          const ast = cloneNode2(metadata.ast);
          replacements2 && (metadata.placeholders.forEach((placeholder) => {
            if (!hasOwnProperty.call(replacements2, placeholder.name)) {
              const placeholderName = placeholder.name;
              throw new Error(`Error: No substitution given for "${placeholderName}". If this is not meant to be a
            placeholder you may want to consider passing one of the following options to @babel/template:
            - { placeholderPattern: false, placeholderWhitelist: new Set(['${placeholderName}'])}
            - { placeholderPattern: /^${placeholderName}$/ }`);
            }
          }), Object.keys(replacements2).forEach((key) => {
            if (!metadata.placeholderNames.has(key)) throw new Error(`Unknown substitution "${key}" given`);
          }));
          return metadata.placeholders.slice().reverse().forEach((placeholder) => {
            try {
              !function(placeholder2, ast2, replacement) {
                placeholder2.isDuplicate && (Array.isArray(replacement) ? replacement = replacement.map((node) => cloneNode2(node)) : "object" == typeof replacement && (replacement = cloneNode2(replacement)));
                const { parent, key, index } = placeholder2.resolve(ast2);
                if ("string" === placeholder2.type) {
                  if ("string" == typeof replacement && (replacement = stringLiteral(replacement)), !replacement || !isStringLiteral(replacement)) throw new Error("Expected string substitution");
                } else if ("statement" === placeholder2.type) void 0 === index ? replacement ? Array.isArray(replacement) ? replacement = blockStatement(replacement) : "string" == typeof replacement ? replacement = expressionStatement(identifier(replacement)) : isStatement(replacement) || (replacement = expressionStatement(replacement)) : replacement = emptyStatement() : replacement && !Array.isArray(replacement) && ("string" == typeof replacement && (replacement = identifier(replacement)), isStatement(replacement) || (replacement = expressionStatement(replacement)));
                else if ("param" === placeholder2.type) {
                  if ("string" == typeof replacement && (replacement = identifier(replacement)), void 0 === index) throw new Error("Assertion failure.");
                } else if ("string" == typeof replacement && (replacement = identifier(replacement)), Array.isArray(replacement)) throw new Error("Cannot replace single expression with an array.");
                function set(parent2, key2, value2) {
                  const node = parent2[key2];
                  parent2[key2] = value2, "Identifier" !== node.type && "Placeholder" !== node.type || (node.typeAnnotation && (value2.typeAnnotation = node.typeAnnotation), node.optional && (value2.optional = node.optional), node.decorators && (value2.decorators = node.decorators));
                }
                if (void 0 === index) validate(parent, key, replacement), set(parent, key, replacement);
                else {
                  const items = parent[key].slice();
                  "statement" === placeholder2.type || "param" === placeholder2.type ? null == replacement ? items.splice(index, 1) : Array.isArray(replacement) ? items.splice(index, 1, ...replacement) : set(items, index, replacement) : set(items, index, replacement), validate(parent, key, items), parent[key] = items;
                }
              }(placeholder, ast, replacements2 && replacements2[placeholder.name] || null);
            } catch (e2) {
              throw e2.message = `@babel/template placeholder "${placeholder.name}": ${e2.message}`, e2;
            }
          }), ast;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { blockStatement, cloneNode: cloneNode2, emptyStatement, expressionStatement, identifier, isStatement, isStringLiteral, stringLiteral, validate } = _t;
      }, "./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/string.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(formatter, code, opts) {
          let metadata;
          return code = formatter.code(code), (arg) => {
            const replacements2 = (0, _options.normalizeReplacements)(arg);
            return metadata || (metadata = (0, _parse.default)(formatter, code, opts)), formatter.unwrap((0, _populate.default)(metadata, replacements2));
          };
        };
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/options.js"), _parse = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/parse.js"), _populate = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/populate.js");
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.clear = function() {
          clearPath(), clearScope();
        }, exports2.clearPath = clearPath, exports2.clearScope = clearScope, exports2.getCachedPaths = function(hub, parent) {
          var _pathsCache$get;
          return null == (_pathsCache$get = pathsCache.get(false ? null : nullHub)) ? void 0 : _pathsCache$get.get(parent);
        }, exports2.getOrCreateCachedPaths = function(hub, parent) {
          0;
          let parents = pathsCache.get(false ? null : nullHub);
          parents || pathsCache.set(false ? null : nullHub, parents = /* @__PURE__ */ new WeakMap());
          let paths = parents.get(parent);
          paths || parents.set(parent, paths = /* @__PURE__ */ new Map());
          return paths;
        }, exports2.scope = exports2.path = void 0;
        let pathsCache = exports2.path = /* @__PURE__ */ new WeakMap(), scope = exports2.scope = /* @__PURE__ */ new WeakMap();
        function clearPath() {
          exports2.path = pathsCache = /* @__PURE__ */ new WeakMap();
        }
        function clearScope() {
          exports2.scope = scope = /* @__PURE__ */ new WeakMap();
        }
        const nullHub = Object.freeze({});
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/context.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
        const { VISITOR_KEYS } = _t;
        exports2.default = class {
          constructor(scope, opts, state, parentPath) {
            this.queue = null, this.priorityQueue = null, this.parentPath = parentPath, this.scope = scope, this.state = state, this.opts = opts;
          }
          shouldVisit(node) {
            const opts = this.opts;
            if (opts.enter || opts.exit) return true;
            if (opts[node.type]) return true;
            const keys = VISITOR_KEYS[node.type];
            if (null == keys || !keys.length) return false;
            for (const key of keys) if (node[key]) return true;
            return false;
          }
          create(node, container, key, listKey) {
            return _index.default.get({ parentPath: this.parentPath, parent: node, container, key, listKey });
          }
          maybeQueue(path9, notPriority) {
            this.queue && (notPriority ? this.queue.push(path9) : this.priorityQueue.push(path9));
          }
          visitMultiple(container, parent, listKey) {
            if (0 === container.length) return false;
            const queue = [];
            for (let key = 0; key < container.length; key++) {
              const node = container[key];
              node && this.shouldVisit(node) && queue.push(this.create(parent, container, key, listKey));
            }
            return this.visitQueue(queue);
          }
          visitSingle(node, key) {
            return !!this.shouldVisit(node[key]) && this.visitQueue([this.create(node, node, key)]);
          }
          visitQueue(queue) {
            this.queue = queue, this.priorityQueue = [];
            const visited = /* @__PURE__ */ new WeakSet();
            let stop = false, visitIndex = 0;
            for (; visitIndex < queue.length; ) {
              const path9 = queue[visitIndex];
              if (visitIndex++, _context.resync.call(path9), 0 !== path9.contexts.length && path9.contexts[path9.contexts.length - 1] === this || _context.pushContext.call(path9, this), null === path9.key) continue;
              const { node } = path9;
              if (!visited.has(node)) {
                if (node && visited.add(node), path9.visit()) {
                  stop = true;
                  break;
                }
                if (this.priorityQueue.length && (stop = this.visitQueue(this.priorityQueue), this.priorityQueue = [], this.queue = queue, stop)) break;
              }
            }
            for (let i2 = 0; i2 < visitIndex; i2++) _context.popContext.call(queue[i2]);
            return this.queue = null, stop;
          }
          visit(node, key) {
            const nodes = node[key];
            return !!nodes && (Array.isArray(nodes) ? this.visitMultiple(nodes, node, key) : this.visitSingle(node, key));
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/hub.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        exports2.default = class {
          getCode() {
          }
          getScope() {
          }
          addHelper() {
            throw new Error("Helpers are not supported by the default hub.");
          }
          buildError(node, msg, Error2 = TypeError) {
            return new Error2(msg);
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "Hub", { enumerable: true, get: function() {
          return _hub.default;
        } }), Object.defineProperty(exports2, "NodePath", { enumerable: true, get: function() {
          return _index.default;
        } }), Object.defineProperty(exports2, "Scope", { enumerable: true, get: function() {
          return _index2.default;
        } }), exports2.visitors = exports2.default = void 0, __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
        var visitors = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/visitors.js");
        exports2.visitors = visitors;
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js"), _traverseNode = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/traverse-node.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/index.js"), _hub = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/hub.js");
        const { VISITOR_KEYS, removeProperties, traverseFast } = _t;
        function traverse(parent, opts = {}, scope, state, parentPath, visitSelf) {
          if (parent) {
            if (!opts.noScope && !scope && "Program" !== parent.type && "File" !== parent.type) throw new Error(`You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a ${parent.type} node without passing scope and parentPath.`);
            if (!parentPath && visitSelf) throw new Error("visitSelf can only be used when providing a NodePath.");
            VISITOR_KEYS[parent.type] && (visitors.explode(opts), (0, _traverseNode.traverseNode)(parent, opts, scope, state, parentPath, null, visitSelf));
          }
        }
        exports2.default = traverse;
        function hasDenylistedType(path9, state) {
          path9.node.type === state.type && (state.has = true, path9.stop());
        }
        traverse.visitors = visitors, traverse.verify = visitors.verify, traverse.explode = visitors.explode, traverse.cheap = function(node, enter) {
          traverseFast(node, enter);
        }, traverse.node = function(node, opts, scope, state, path9, skipKeys) {
          (0, _traverseNode.traverseNode)(node, opts, scope, state, path9, skipKeys);
        }, traverse.clearNode = function(node, opts) {
          removeProperties(node, opts);
        }, traverse.removeProperties = function(tree, opts) {
          return traverseFast(tree, traverse.clearNode, opts), tree;
        }, traverse.hasType = function(tree, type, denylistTypes) {
          if (null != denylistTypes && denylistTypes.includes(tree.type)) return false;
          if (tree.type === type) return true;
          const state = { has: false, type };
          return traverse(tree, { noScope: true, denylist: denylistTypes, enter: hasDenylistedType }, null, state), state.has;
        }, traverse.cache = cache;
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/ancestry.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.find = function(callback) {
          let path9 = this;
          do {
            if (callback(path9)) return path9;
          } while (path9 = path9.parentPath);
          return null;
        }, exports2.findParent = function(callback) {
          let path9 = this;
          for (; path9 = path9.parentPath; ) if (callback(path9)) return path9;
          return null;
        }, exports2.getAncestry = function() {
          let path9 = this;
          const paths = [];
          do {
            paths.push(path9);
          } while (path9 = path9.parentPath);
          return paths;
        }, exports2.getDeepestCommonAncestorFrom = function(paths, filter) {
          if (!paths.length) return this;
          if (1 === paths.length) return paths[0];
          let lastCommonIndex, lastCommon, minDepth = 1 / 0;
          const ancestries = paths.map((path9) => {
            const ancestry = [];
            do {
              ancestry.unshift(path9);
            } while ((path9 = path9.parentPath) && path9 !== this);
            return ancestry.length < minDepth && (minDepth = ancestry.length), ancestry;
          }), first = ancestries[0];
          depthLoop: for (let i2 = 0; i2 < minDepth; i2++) {
            const shouldMatch = first[i2];
            for (const ancestry of ancestries) if (ancestry[i2] !== shouldMatch) break depthLoop;
            lastCommonIndex = i2, lastCommon = shouldMatch;
          }
          if (lastCommon) return filter ? filter(lastCommon, lastCommonIndex, ancestries) : lastCommon;
          throw new Error("Couldn't find intersection");
        }, exports2.getEarliestCommonAncestorFrom = function(paths) {
          return this.getDeepestCommonAncestorFrom(paths, function(deepest, i2, ancestries) {
            let earliest;
            const keys = VISITOR_KEYS[deepest.type];
            for (const ancestry of ancestries) {
              const path9 = ancestry[i2 + 1];
              if (!earliest) {
                earliest = path9;
                continue;
              }
              if (path9.listKey && earliest.listKey === path9.listKey && path9.key < earliest.key) {
                earliest = path9;
                continue;
              }
              keys.indexOf(earliest.parentKey) > keys.indexOf(path9.parentKey) && (earliest = path9);
            }
            return earliest;
          });
        }, exports2.getFunctionParent = function() {
          return this.findParent((p) => p.isFunction());
        }, exports2.getStatementParent = function() {
          let path9 = this;
          do {
            if (!path9.parentPath || Array.isArray(path9.container) && path9.isStatement()) break;
            path9 = path9.parentPath;
          } while (path9);
          if (path9 && (path9.isProgram() || path9.isFile())) throw new Error("File/Program node, we can't possibly find a statement parent to this");
          return path9;
        }, exports2.inType = function(...candidateTypes) {
          let path9 = this;
          for (; path9; ) {
            for (const type of candidateTypes) if (path9.node.type === type) return true;
            path9 = path9.parentPath;
          }
          return false;
        }, exports2.isAncestor = function(maybeDescendant) {
          return maybeDescendant.isDescendant(this);
        }, exports2.isDescendant = function(maybeAncestor) {
          return !!this.findParent((parent) => parent === maybeAncestor);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { VISITOR_KEYS } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/comments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.addComment = function(type, content, line) {
          _addComment(this.node, type, content, line);
        }, exports2.addComments = function(type, comments) {
          _addComments(this.node, type, comments);
        }, exports2.shareCommentsWithSiblings = function() {
          if ("string" == typeof this.key) return;
          const node = this.node;
          if (!node) return;
          const trailing = node.trailingComments, leading = node.leadingComments;
          if (!trailing && !leading) return;
          const prev = this.getSibling(this.key - 1), next = this.getSibling(this.key + 1), hasPrev = Boolean(prev.node), hasNext = Boolean(next.node);
          hasPrev && (leading && prev.addComments("trailing", removeIfExisting(leading, prev.node.trailingComments)), trailing && !hasNext && prev.addComments("trailing", trailing));
          hasNext && (trailing && next.addComments("leading", removeIfExisting(trailing, next.node.leadingComments)), leading && !hasPrev && next.addComments("leading", leading));
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { addComment: _addComment, addComments: _addComments } = _t;
        function removeIfExisting(list, toRemove) {
          if (null == toRemove || !toRemove.length) return list;
          const set = new Set(toRemove);
          return list.filter((el) => !set.has(el));
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._call = _call, exports2._getQueueContexts = function() {
          let path9 = this, contexts = this.contexts;
          for (; !contexts.length && (path9 = path9.parentPath, path9); ) contexts = path9.contexts;
          return contexts;
        }, exports2._resyncKey = _resyncKey, exports2._resyncList = _resyncList, exports2._resyncParent = _resyncParent, exports2._resyncRemoved = function() {
          null != this.key && this.container && this.container[this.key] === this.node || _removal._markRemoved.call(this);
        }, exports2.call = call, exports2.isDenylisted = isDenylisted, exports2.popContext = function() {
          this.contexts.pop(), this.contexts.length > 0 ? this.setContext(this.contexts[this.contexts.length - 1]) : this.setContext(void 0);
        }, exports2.pushContext = function(context) {
          this.contexts.push(context), this.setContext(context);
        }, exports2.requeue = function(pathToQueue = this) {
          if (pathToQueue.removed) return;
          const contexts = this.contexts;
          for (const context of contexts) context.maybeQueue(pathToQueue);
        }, exports2.requeueComputedKeyAndDecorators = function() {
          const { context, node } = this;
          !t2.isPrivate(node) && node.computed && context.maybeQueue(this.get("key"));
          if (node.decorators) for (const decorator of this.get("decorators")) context.maybeQueue(decorator);
        }, exports2.resync = function() {
          if (this.removed) return;
          _resyncParent.call(this), _resyncList.call(this), _resyncKey.call(this);
        }, exports2.setContext = function(context) {
          null != this.skipKeys && (this.skipKeys = {});
          this._traverseFlags = 0, context && (this.context = context, this.state = context.state, this.opts = context.opts);
          return setScope.call(this), this;
        }, exports2.setKey = setKey, exports2.setScope = setScope, exports2.setup = function(parentPath, container, listKey, key) {
          this.listKey = listKey, this.container = container, this.parentPath = parentPath || this.parentPath, setKey.call(this, key);
        }, exports2.skip = function() {
          this.shouldSkip = true;
        }, exports2.skipKey = function(key) {
          null == this.skipKeys && (this.skipKeys = {});
          this.skipKeys[key] = true;
        }, exports2.stop = function() {
          this._traverseFlags |= _index.SHOULD_SKIP | _index.SHOULD_STOP;
        }, exports2.visit = function() {
          var _this$opts$shouldSkip, _this$opts;
          if (!this.node) return false;
          if (this.isDenylisted()) return false;
          if (null != (_this$opts$shouldSkip = (_this$opts = this.opts).shouldSkip) && _this$opts$shouldSkip.call(_this$opts, this)) return false;
          const currentContext = this.context;
          if (this.shouldSkip || call.call(this, "enter")) return this.debug("Skip..."), this.shouldStop;
          return restoreContext(this, currentContext), this.debug("Recursing into..."), this.shouldStop = (0, _traverseNode.traverseNode)(this.node, this.opts, this.scope, this.state, this, this.skipKeys), restoreContext(this, currentContext), call.call(this, "exit"), this.shouldStop;
        };
        var _traverseNode = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/traverse-node.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _removal = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/removal.js"), t2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        function call(key) {
          const opts = this.opts;
          return this.debug(key), !(!this.node || !_call.call(this, opts[key])) || !!this.node && _call.call(this, null == (_opts$this$node$type = opts[this.node.type]) ? void 0 : _opts$this$node$type[key]);
          var _opts$this$node$type;
        }
        function _call(fns) {
          if (!fns) return false;
          for (const fn of fns) {
            if (!fn) continue;
            const node = this.node;
            if (!node) return true;
            const ret = fn.call(this.state, this, this.state);
            if (ret && "object" == typeof ret && "function" == typeof ret.then) throw new Error("You appear to be using a plugin with an async traversal visitor, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
            if (ret) throw new Error(`Unexpected return value from visitor method ${fn}`);
            if (this.node !== node) return true;
            if (this._traverseFlags > 0) return true;
          }
          return false;
        }
        function isDenylisted() {
          var _this$opts$denylist;
          const denylist = null != (_this$opts$denylist = this.opts.denylist) ? _this$opts$denylist : this.opts.blacklist;
          return null == denylist ? void 0 : denylist.includes(this.node.type);
        }
        function restoreContext(path9, context) {
          path9.context !== context && (path9.context = context, path9.state = context.state, path9.opts = context.opts);
        }
        function setScope() {
          var _this$opts2, _this$scope;
          if (null != (_this$opts2 = this.opts) && _this$opts2.noScope) return;
          let target, path9 = this.parentPath;
          for ((("key" === this.key || "decorators" === this.listKey) && path9.isMethod() || "discriminant" === this.key && path9.isSwitchStatement()) && (path9 = path9.parentPath); path9 && !target; ) {
            var _path$opts;
            if (null != (_path$opts = path9.opts) && _path$opts.noScope) return;
            target = path9.scope, path9 = path9.parentPath;
          }
          this.scope = this.getScope(target), null == (_this$scope = this.scope) || _this$scope.init();
        }
        function _resyncParent() {
          this.parentPath && (this.parent = this.parentPath.node);
        }
        function _resyncKey() {
          if (this.container && this.node !== this.container[this.key]) {
            if (Array.isArray(this.container)) {
              for (let i2 = 0; i2 < this.container.length; i2++) if (this.container[i2] === this.node) return void setKey.call(this, i2);
            } else for (const key of Object.keys(this.container)) if (this.container[key] === this.node) return void setKey.call(this, key);
            this.key = null;
          }
        }
        function _resyncList() {
          if (!this.parent || !this.inList) return;
          const newContainer = this.parent[this.listKey];
          this.container !== newContainer && (this.container = newContainer || null);
        }
        function setKey(key) {
          var _this$node;
          this.key = key, this.node = this.container[this.key], this.type = null == (_this$node = this.node) ? void 0 : _this$node.type;
        }
        exports2.isBlacklisted = isDenylisted;
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/conversion.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.arrowFunctionToExpression = function({ allowInsertArrow = true, allowInsertArrowWithRest = allowInsertArrow, noNewArrows = !((_arguments$) => null == (_arguments$ = arguments[0]) ? void 0 : _arguments$.specCompliant)() } = {}) {
          if (!this.isArrowFunctionExpression()) throw this.buildCodeFrameError("Cannot convert non-arrow function to a function expression.");
          let self = this;
          var _self$ensureFunctionN;
          noNewArrows || (self = null != (_self$ensureFunctionN = self.ensureFunctionName(false)) ? _self$ensureFunctionN : self);
          const { thisBinding, fnPath: fn } = hoistFunctionEnvironment(self, noNewArrows, allowInsertArrow, allowInsertArrowWithRest);
          if (fn.ensureBlock(), function(path9, type) {
            path9.node.type = type;
          }(fn, "FunctionExpression"), !noNewArrows) {
            const checkBinding = thisBinding ? null : fn.scope.generateUidIdentifier("arrowCheckId");
            return checkBinding && fn.parentPath.scope.push({ id: checkBinding, init: objectExpression([]) }), fn.get("body").unshiftContainer("body", expressionStatement(callExpression(this.hub.addHelper("newArrowCheck"), [thisExpression(), identifier(checkBinding ? checkBinding.name : thisBinding)]))), fn.replaceWith(callExpression(memberExpression(fn.node, identifier("bind")), [checkBinding ? identifier(checkBinding.name) : thisExpression()])), fn.get("callee.object");
          }
          return fn;
        }, exports2.ensureBlock = function() {
          const body = this.get("body"), bodyNode = body.node;
          if (Array.isArray(body)) throw new Error("Can't convert array path to a block statement");
          if (!bodyNode) throw new Error("Can't convert node without a body");
          if (body.isBlockStatement()) return bodyNode;
          const statements = [];
          let key, listKey, stringPath = "body";
          body.isStatement() ? (listKey = "body", key = 0, statements.push(body.node)) : (stringPath += ".body.0", this.isFunction() ? (key = "argument", statements.push(returnStatement(body.node))) : (key = "expression", statements.push(expressionStatement(body.node))));
          this.node.body = blockStatement(statements);
          const parentPath = this.get(stringPath);
          return _context.setup.call(body, parentPath, listKey ? parentPath.node[listKey] : parentPath.node, listKey, key), this.node;
        }, exports2.ensureFunctionName = function(supportUnicodeId) {
          if (this.node.id) return this;
          const res = getFunctionName(this.node, this.parent);
          if (null == res) return this;
          let { name } = res;
          if (!supportUnicodeId && /[\uD800-\uDFFF]/.test(name)) return null;
          if (name.startsWith("get ") || name.startsWith("set ")) return null;
          name = toBindingIdentifierName(name.replace(/[/ ]/g, "_"));
          const id = identifier(name);
          inherits(id, res.originalNode);
          const state = { needsRename: false, name }, { scope } = this, binding = scope.getOwnBinding(name);
          binding ? "param" === binding.kind && (state.needsRename = true) : (scope.parent.hasBinding(name) || scope.hasGlobal(name)) && this.traverse(refersOuterBindingVisitor, state);
          if (!state.needsRename) return this.node.id = id, scope.getProgramParent().references[id.name] = true, this;
          if (scope.hasBinding(id.name) && !scope.hasGlobal(id.name)) return scope.rename(id.name), this.node.id = id, scope.getProgramParent().references[id.name] = true, this;
          if (!isFunction(this.node)) return null;
          const key = scope.generateUidIdentifier(id.name), params = [];
          for (let i2 = 0, len = function(node) {
            const count2 = node.params.findIndex((param) => isAssignmentPattern(param) || isRestElement(param));
            return -1 === count2 ? node.params.length : count2;
          }(this.node); i2 < len; i2++) params.push(scope.generateUidIdentifier("x"));
          const call = _template.default.expression.ast`
    (function (${key}) {
      function ${id}(${params}) {
        return ${cloneNode2(key)}.apply(this, arguments);
      }

      ${cloneNode2(id)}.toString = function () {
        return ${cloneNode2(key)}.toString();
      }

      return ${cloneNode2(id)};
    })(${toExpression(this.node)})
  `;
          return this.replaceWith(call)[0].get("arguments.0");
        }, exports2.splitExportDeclaration = function() {
          if (!this.isExportDeclaration() || this.isExportAllDeclaration()) throw new Error("Only default and named export declarations can be split.");
          if (this.isExportNamedDeclaration() && this.get("specifiers").length > 0) throw new Error("It doesn't make sense to split exported specifiers.");
          const declaration = this.get("declaration");
          if (this.isExportDefaultDeclaration()) {
            const standaloneDeclaration = declaration.isFunctionDeclaration() || declaration.isClassDeclaration(), exportExpr = declaration.isFunctionExpression() || declaration.isClassExpression(), scope = declaration.isScope() ? declaration.scope.parent : declaration.scope;
            let id = declaration.node.id, needBindingRegistration = false;
            id ? exportExpr && scope.hasBinding(id.name) && (needBindingRegistration = true, id = scope.generateUidIdentifier(id.name)) : (needBindingRegistration = true, id = scope.generateUidIdentifier("default"), (standaloneDeclaration || exportExpr) && (declaration.node.id = cloneNode2(id)));
            const updatedDeclaration = standaloneDeclaration ? declaration.node : variableDeclaration("var", [variableDeclarator(cloneNode2(id), declaration.node)]), updatedExportDeclaration = exportNamedDeclaration(null, [exportSpecifier(cloneNode2(id), identifier("default"))]);
            return this.insertAfter(updatedExportDeclaration), this.replaceWith(updatedDeclaration), needBindingRegistration && scope.registerDeclaration(this), this;
          }
          if (this.get("specifiers").length > 0) throw new Error("It doesn't make sense to split exported specifiers.");
          const bindingIdentifiers = declaration.getOuterBindingIdentifiers(), specifiers = Object.keys(bindingIdentifiers).map((name) => exportSpecifier(identifier(name), identifier(name))), aliasDeclar = exportNamedDeclaration(null, specifiers);
          return this.insertAfter(aliasDeclar), this.replaceWith(declaration.node), this;
        }, exports2.toComputedKey = function() {
          let key;
          if (this.isMemberExpression()) key = this.node.property;
          else {
            if (!this.isProperty() && !this.isMethod()) throw new ReferenceError("todo");
            key = this.node.key;
          }
          this.node.computed || isIdentifier2(key) && (key = stringLiteral(key.name));
          return key;
        }, exports2.unwrapFunctionEnvironment = function() {
          if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration()) throw this.buildCodeFrameError("Can only unwrap the environment of a function.");
          hoistFunctionEnvironment(this);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _template = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/index.js"), _visitors = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/visitors.js"), _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
        const { arrowFunctionExpression, assignmentExpression, binaryExpression, blockStatement, callExpression, conditionalExpression, expressionStatement, identifier, isIdentifier: isIdentifier2, jsxIdentifier, logicalExpression, LOGICAL_OPERATORS, memberExpression, metaProperty, numericLiteral, objectExpression, restElement, returnStatement, sequenceExpression, spreadElement, stringLiteral, super: _super, thisExpression, toExpression, unaryExpression, toBindingIdentifierName, isFunction, isAssignmentPattern, isRestElement, getFunctionName, cloneNode: cloneNode2, variableDeclaration, variableDeclarator, exportNamedDeclaration, exportSpecifier, inherits } = _t;
        exports2.arrowFunctionToShadowed = function() {
          this.isArrowFunctionExpression() && this.arrowFunctionToExpression();
        };
        const getSuperCallsVisitor = (0, _visitors.environmentVisitor)({ CallExpression(child, { allSuperCalls }) {
          child.get("callee").isSuper() && allSuperCalls.push(child);
        } });
        function hoistFunctionEnvironment(fnPath, noNewArrows = true, allowInsertArrow = true, allowInsertArrowWithRest = true) {
          let arrowParent, thisEnvFn = fnPath.findParent((p) => p.isArrowFunctionExpression() ? (null != arrowParent || (arrowParent = p), false) : p.isFunction() || p.isProgram() || p.isClassProperty({ static: false }) || p.isClassPrivateProperty({ static: false }));
          const inConstructor = thisEnvFn.isClassMethod({ kind: "constructor" });
          if (thisEnvFn.isClassProperty() || thisEnvFn.isClassPrivateProperty()) if (arrowParent) thisEnvFn = arrowParent;
          else {
            if (!allowInsertArrow) throw fnPath.buildCodeFrameError("Unable to transform arrow inside class property");
            fnPath.replaceWith(callExpression(arrowFunctionExpression([], toExpression(fnPath.node)), [])), thisEnvFn = fnPath.get("callee"), fnPath = thisEnvFn.get("body");
          }
          const { thisPaths, argumentsPaths, newTargetPaths, superProps, superCalls } = function(fnPath2) {
            const thisPaths2 = [], argumentsPaths2 = [], newTargetPaths2 = [], superProps2 = [], superCalls2 = [];
            return fnPath2.traverse(getScopeInformationVisitor, { thisPaths: thisPaths2, argumentsPaths: argumentsPaths2, newTargetPaths: newTargetPaths2, superProps: superProps2, superCalls: superCalls2 }), { thisPaths: thisPaths2, argumentsPaths: argumentsPaths2, newTargetPaths: newTargetPaths2, superProps: superProps2, superCalls: superCalls2 };
          }(fnPath);
          if (inConstructor && superCalls.length > 0) {
            if (!allowInsertArrow) throw superCalls[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super()` in an arrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
            if (!allowInsertArrowWithRest) throw superCalls[0].buildCodeFrameError("When using '@babel/plugin-transform-parameters', it's not possible to compile `super()` in an arrow function with default or rest parameters without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
            const allSuperCalls = [];
            thisEnvFn.traverse(getSuperCallsVisitor, { allSuperCalls });
            const superBinding = function(thisEnvFn2) {
              return getBinding(thisEnvFn2, "supercall", () => {
                const argsBinding = thisEnvFn2.scope.generateUidIdentifier("args");
                return arrowFunctionExpression([restElement(argsBinding)], callExpression(_super(), [spreadElement(identifier(argsBinding.name))]));
              });
            }(thisEnvFn);
            allSuperCalls.forEach((superCall) => {
              const callee = identifier(superBinding);
              callee.loc = superCall.node.callee.loc, superCall.get("callee").replaceWith(callee);
            });
          }
          if (argumentsPaths.length > 0) {
            const argumentsBinding = getBinding(thisEnvFn, "arguments", () => {
              const args = () => identifier("arguments");
              return thisEnvFn.scope.path.isProgram() ? conditionalExpression(binaryExpression("===", unaryExpression("typeof", args()), stringLiteral("undefined")), thisEnvFn.scope.buildUndefinedNode(), args()) : args();
            });
            argumentsPaths.forEach((argumentsChild) => {
              const argsRef = identifier(argumentsBinding);
              argsRef.loc = argumentsChild.node.loc, argumentsChild.replaceWith(argsRef);
            });
          }
          if (newTargetPaths.length > 0) {
            const newTargetBinding = getBinding(thisEnvFn, "newtarget", () => metaProperty(identifier("new"), identifier("target")));
            newTargetPaths.forEach((targetChild) => {
              const targetRef = identifier(newTargetBinding);
              targetRef.loc = targetChild.node.loc, targetChild.replaceWith(targetRef);
            });
          }
          if (superProps.length > 0) {
            if (!allowInsertArrow) throw superProps[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super.prop` in an arrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
            superProps.reduce((acc, superProp) => acc.concat(function(superProp2) {
              if (superProp2.parentPath.isAssignmentExpression() && "=" !== superProp2.parentPath.node.operator) {
                const assignmentPath = superProp2.parentPath, op = assignmentPath.node.operator.slice(0, -1), value2 = assignmentPath.node.right, isLogicalAssignment = function(op2) {
                  return LOGICAL_OPERATORS.includes(op2);
                }(op);
                if (superProp2.node.computed) {
                  const tmp = superProp2.scope.generateDeclaredUidIdentifier("tmp"), object = superProp2.node.object, property = superProp2.node.property;
                  assignmentPath.get("left").replaceWith(memberExpression(object, assignmentExpression("=", tmp, property), true)), assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier(tmp.name), true), value2));
                } else {
                  const object = superProp2.node.object, property = superProp2.node.property;
                  assignmentPath.get("left").replaceWith(memberExpression(object, property)), assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier(property.name)), value2));
                }
                return isLogicalAssignment ? assignmentPath.replaceWith(logicalExpression(op, assignmentPath.node.left, assignmentPath.node.right)) : assignmentPath.node.operator = "=", [assignmentPath.get("left"), assignmentPath.get("right").get("left")];
              }
              if (superProp2.parentPath.isUpdateExpression()) {
                const updateExpr = superProp2.parentPath, tmp = superProp2.scope.generateDeclaredUidIdentifier("tmp"), computedKey = superProp2.node.computed ? superProp2.scope.generateDeclaredUidIdentifier("prop") : null, parts = [assignmentExpression("=", tmp, memberExpression(superProp2.node.object, computedKey ? assignmentExpression("=", computedKey, superProp2.node.property) : superProp2.node.property, superProp2.node.computed)), assignmentExpression("=", memberExpression(superProp2.node.object, computedKey ? identifier(computedKey.name) : superProp2.node.property, superProp2.node.computed), binaryExpression(superProp2.parentPath.node.operator[0], identifier(tmp.name), numericLiteral(1)))];
                superProp2.parentPath.node.prefix || parts.push(identifier(tmp.name)), updateExpr.replaceWith(sequenceExpression(parts));
                return [updateExpr.get("expressions.0.right"), updateExpr.get("expressions.1.left")];
              }
              return [superProp2];
              function rightExpression(op, left, right) {
                return "=" === op ? assignmentExpression("=", left, right) : binaryExpression(op, left, right);
              }
            }(superProp)), []).forEach((superProp) => {
              const key = superProp.node.computed ? "" : superProp.get("property").node.name, superParentPath = superProp.parentPath, isAssignment = superParentPath.isAssignmentExpression({ left: superProp.node }), isCall = superParentPath.isCallExpression({ callee: superProp.node }), isTaggedTemplate = superParentPath.isTaggedTemplateExpression({ tag: superProp.node }), superBinding = function(thisEnvFn2, isAssignment2, propName) {
                const op = isAssignment2 ? "set" : "get";
                return getBinding(thisEnvFn2, `superprop_${op}:${propName || ""}`, () => {
                  const argsList = [];
                  let fnBody;
                  if (propName) fnBody = memberExpression(_super(), identifier(propName));
                  else {
                    const method = thisEnvFn2.scope.generateUidIdentifier("prop");
                    argsList.unshift(method), fnBody = memberExpression(_super(), identifier(method.name), true);
                  }
                  if (isAssignment2) {
                    const valueIdent = thisEnvFn2.scope.generateUidIdentifier("value");
                    argsList.push(valueIdent), fnBody = assignmentExpression("=", fnBody, identifier(valueIdent.name));
                  }
                  return arrowFunctionExpression(argsList, fnBody);
                });
              }(thisEnvFn, isAssignment, key), args = [];
              if (superProp.node.computed && args.push(superProp.get("property").node), isAssignment) {
                const value2 = superParentPath.node.right;
                args.push(value2);
              }
              const call = callExpression(identifier(superBinding), args);
              isCall ? (superParentPath.unshiftContainer("arguments", thisExpression()), superProp.replaceWith(memberExpression(call, identifier("call"))), thisPaths.push(superParentPath.get("arguments.0"))) : isAssignment ? superParentPath.replaceWith(call) : isTaggedTemplate ? (superProp.replaceWith(callExpression(memberExpression(call, identifier("bind"), false), [thisExpression()])), thisPaths.push(superProp.get("arguments.0"))) : superProp.replaceWith(call);
            });
          }
          let thisBinding;
          return (thisPaths.length > 0 || !noNewArrows) && (thisBinding = function(thisEnvFn2, inConstructor2) {
            return getBinding(thisEnvFn2, "this", (thisBinding2) => {
              if (!inConstructor2 || !hasSuperClass(thisEnvFn2)) return thisExpression();
              thisEnvFn2.traverse(assignSuperThisVisitor, { supers: /* @__PURE__ */ new WeakSet(), thisBinding: thisBinding2 });
            });
          }(thisEnvFn, inConstructor), (noNewArrows || inConstructor && hasSuperClass(thisEnvFn)) && (thisPaths.forEach((thisChild) => {
            const thisRef = thisChild.isJSX() ? jsxIdentifier(thisBinding) : identifier(thisBinding);
            thisRef.loc = thisChild.node.loc, thisChild.replaceWith(thisRef);
          }), noNewArrows || (thisBinding = null))), { thisBinding, fnPath };
        }
        function hasSuperClass(thisEnvFn) {
          return thisEnvFn.isClassMethod() && !!thisEnvFn.parentPath.parentPath.node.superClass;
        }
        const assignSuperThisVisitor = (0, _visitors.environmentVisitor)({ CallExpression(child, { supers, thisBinding }) {
          child.get("callee").isSuper() && (supers.has(child.node) || (supers.add(child.node), child.replaceWithMultiple([child.node, assignmentExpression("=", identifier(thisBinding), identifier("this"))])));
        } });
        function getBinding(thisEnvFn, key, init) {
          const cacheKey2 = "binding:" + key;
          let data = thisEnvFn.getData(cacheKey2);
          if (!data) {
            const id = thisEnvFn.scope.generateUidIdentifier(key);
            data = id.name, thisEnvFn.setData(cacheKey2, data), thisEnvFn.scope.push({ id, init: init(data) });
          }
          return data;
        }
        const getScopeInformationVisitor = (0, _visitors.environmentVisitor)({ ThisExpression(child, { thisPaths }) {
          thisPaths.push(child);
        }, JSXIdentifier(child, { thisPaths }) {
          "this" === child.node.name && (child.parentPath.isJSXMemberExpression({ object: child.node }) || child.parentPath.isJSXOpeningElement({ name: child.node })) && thisPaths.push(child);
        }, CallExpression(child, { superCalls }) {
          child.get("callee").isSuper() && superCalls.push(child);
        }, MemberExpression(child, { superProps }) {
          child.get("object").isSuper() && superProps.push(child);
        }, Identifier(child, { argumentsPaths }) {
          if (!child.isReferencedIdentifier({ name: "arguments" })) return;
          let curr = child.scope;
          do {
            if (curr.hasOwnBinding("arguments")) return void curr.rename("arguments");
            if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression()) break;
          } while (curr = curr.parent);
          argumentsPaths.push(child);
        }, MetaProperty(child, { newTargetPaths }) {
          child.get("meta").isIdentifier({ name: "new" }) && child.get("property").isIdentifier({ name: "target" }) && newTargetPaths.push(child);
        } });
        const refersOuterBindingVisitor = { "ReferencedIdentifier|BindingIdentifier"(path9, state) {
          path9.node.name === state.name && (state.needsRename = true, path9.stop());
        }, Scope(path9, state) {
          path9.scope.hasOwnBinding(state.name) && path9.skip();
        } };
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/evaluation.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.evaluate = function() {
          const state = { confident: true, deoptPath: null, seen: /* @__PURE__ */ new Map() };
          let value2 = evaluateCached(this, state);
          state.confident || (value2 = void 0);
          return { confident: state.confident, deopt: state.deoptPath, value: value2 };
        }, exports2.evaluateTruthy = function() {
          const res = this.evaluate();
          if (res.confident) return !!res.value;
        };
        const VALID_OBJECT_CALLEES = ["Number", "String", "Math"], VALID_IDENTIFIER_CALLEES = ["isFinite", "isNaN", "parseFloat", "parseInt", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", null, null], INVALID_METHODS = ["random"];
        function isValidObjectCallee(val) {
          return VALID_OBJECT_CALLEES.includes(val);
        }
        function deopt(path9, state) {
          state.confident && (state.deoptPath = path9, state.confident = false);
        }
        const Globals = /* @__PURE__ */ new Map([["undefined", void 0], ["Infinity", 1 / 0], ["NaN", NaN]]);
        function evaluateCached(path9, state) {
          const { node } = path9, { seen } = state;
          if (seen.has(node)) {
            const existing = seen.get(node);
            return existing.resolved ? existing.value : void deopt(path9, state);
          }
          {
            const item = { resolved: false };
            seen.set(node, item);
            const val = function(path10, state2) {
              if (!state2.confident) return;
              if (path10.isSequenceExpression()) {
                const exprs = path10.get("expressions");
                return evaluateCached(exprs[exprs.length - 1], state2);
              }
              if (path10.isStringLiteral() || path10.isNumericLiteral() || path10.isBooleanLiteral()) return path10.node.value;
              if (path10.isNullLiteral()) return null;
              if (path10.isTemplateLiteral()) return evaluateQuasis(path10, path10.node.quasis, state2);
              if (path10.isTaggedTemplateExpression() && path10.get("tag").isMemberExpression()) {
                const object = path10.get("tag.object"), { node: { name } } = object, property = path10.get("tag.property");
                if (object.isIdentifier() && "String" === name && !path10.scope.getBinding(name) && property.isIdentifier() && "raw" === property.node.name) return evaluateQuasis(path10, path10.node.quasi.quasis, state2, true);
              }
              if (path10.isConditionalExpression()) {
                const testResult = evaluateCached(path10.get("test"), state2);
                if (!state2.confident) return;
                return evaluateCached(testResult ? path10.get("consequent") : path10.get("alternate"), state2);
              }
              if (path10.isExpressionWrapper()) return evaluateCached(path10.get("expression"), state2);
              if (path10.isMemberExpression() && !path10.parentPath.isCallExpression({ callee: path10.node })) {
                const property = path10.get("property"), object = path10.get("object");
                if (object.isLiteral()) {
                  const value2 = object.node.value, type = typeof value2;
                  let key = null;
                  if (path10.node.computed) {
                    if (key = evaluateCached(property, state2), !state2.confident) return;
                  } else property.isIdentifier() && (key = property.node.name);
                  if (!("number" !== type && "string" !== type || null == key || "number" != typeof key && "string" != typeof key)) return value2[key];
                }
              }
              if (path10.isReferencedIdentifier()) {
                const binding = path10.scope.getBinding(path10.node.name);
                if (binding) {
                  if (binding.constantViolations.length > 0 || path10.node.start < binding.path.node.end) return void deopt(binding.path, state2);
                  if (binding.hasValue) return binding.value;
                }
                const name = path10.node.name;
                if (Globals.has(name)) return binding ? void deopt(binding.path, state2) : Globals.get(name);
                const resolved = path10.resolve();
                return resolved === path10 ? void deopt(path10, state2) : evaluateCached(resolved, state2);
              }
              if (path10.isUnaryExpression({ prefix: true })) {
                if ("void" === path10.node.operator) return;
                const argument = path10.get("argument");
                if ("typeof" === path10.node.operator && (argument.isFunction() || argument.isClass())) return "function";
                const arg = evaluateCached(argument, state2);
                if (!state2.confident) return;
                switch (path10.node.operator) {
                  case "!":
                    return !arg;
                  case "+":
                    return +arg;
                  case "-":
                    return -arg;
                  case "~":
                    return ~arg;
                  case "typeof":
                    return typeof arg;
                }
              }
              if (path10.isArrayExpression()) {
                const arr = [], elems = path10.get("elements");
                for (const elem of elems) {
                  const elemValue = elem.evaluate();
                  if (!elemValue.confident) return void deopt(elemValue.deopt, state2);
                  arr.push(elemValue.value);
                }
                return arr;
              }
              if (path10.isObjectExpression()) {
                const obj = {}, props = path10.get("properties");
                for (const prop of props) {
                  if (prop.isObjectMethod() || prop.isSpreadElement()) return void deopt(prop, state2);
                  const keyPath = prop.get("key");
                  let key;
                  if (prop.node.computed) {
                    if (key = keyPath.evaluate(), !key.confident) return void deopt(key.deopt, state2);
                    key = key.value;
                  } else key = keyPath.isIdentifier() ? keyPath.node.name : keyPath.node.value;
                  let value2 = prop.get("value").evaluate();
                  if (!value2.confident) return void deopt(value2.deopt, state2);
                  value2 = value2.value, obj[key] = value2;
                }
                return obj;
              }
              if (path10.isLogicalExpression()) {
                const wasConfident = state2.confident, left = evaluateCached(path10.get("left"), state2), leftConfident = state2.confident;
                state2.confident = wasConfident;
                const right = evaluateCached(path10.get("right"), state2), rightConfident = state2.confident;
                switch (path10.node.operator) {
                  case "||":
                    if (state2.confident = leftConfident && (!!left || rightConfident), !state2.confident) return;
                    return left || right;
                  case "&&":
                    if (state2.confident = leftConfident && (!left || rightConfident), !state2.confident) return;
                    return left && right;
                  case "??":
                    if (state2.confident = leftConfident && (null != left || rightConfident), !state2.confident) return;
                    return null != left ? left : right;
                }
              }
              if (path10.isBinaryExpression()) {
                const left = evaluateCached(path10.get("left"), state2);
                if (!state2.confident) return;
                const right = evaluateCached(path10.get("right"), state2);
                if (!state2.confident) return;
                switch (path10.node.operator) {
                  case "-":
                    return left - right;
                  case "+":
                    return left + right;
                  case "/":
                    return left / right;
                  case "*":
                    return left * right;
                  case "%":
                    return left % right;
                  case "**":
                    return Math.pow(left, right);
                  case "<":
                    return left < right;
                  case ">":
                    return left > right;
                  case "<=":
                    return left <= right;
                  case ">=":
                    return left >= right;
                  case "==":
                    return left == right;
                  case "!=":
                    return left != right;
                  case "===":
                    return left === right;
                  case "!==":
                    return left !== right;
                  case "|":
                    return left | right;
                  case "&":
                    return left & right;
                  case "^":
                    return left ^ right;
                  case "<<":
                    return left << right;
                  case ">>":
                    return left >> right;
                  case ">>>":
                    return left >>> right;
                }
              }
              if (path10.isCallExpression()) {
                const callee = path10.get("callee");
                let context, func;
                if (callee.isIdentifier() && !path10.scope.getBinding(callee.node.name) && (isValidObjectCallee(callee.node.name) || function(val2) {
                  return VALID_IDENTIFIER_CALLEES.includes(val2);
                }(callee.node.name)) && (func = global[callee.node.name]), callee.isMemberExpression()) {
                  const object = callee.get("object"), property = callee.get("property");
                  if (object.isIdentifier() && property.isIdentifier() && isValidObjectCallee(object.node.name) && !function(val2) {
                    return INVALID_METHODS.includes(val2);
                  }(property.node.name)) {
                    context = global[object.node.name];
                    const key = property.node.name;
                    hasOwnProperty.call(context, key) && (func = context[key]);
                  }
                  if (object.isLiteral() && property.isIdentifier()) {
                    const type = typeof object.node.value;
                    "string" !== type && "number" !== type || (context = object.node.value, func = context[property.node.name]);
                  }
                }
                if (func) {
                  const args = path10.get("arguments").map((arg) => evaluateCached(arg, state2));
                  if (!state2.confident) return;
                  return func.apply(context, args);
                }
              }
              deopt(path10, state2);
            }(path9, state);
            return state.confident && (item.resolved = true, item.value = val), val;
          }
        }
        function evaluateQuasis(path9, quasis, state, raw2 = false) {
          let str = "", i2 = 0;
          const exprs = path9.isTemplateLiteral() ? path9.get("expressions") : path9.get("quasi.expressions");
          for (const elem of quasis) {
            if (!state.confident) break;
            str += raw2 ? elem.value.raw : elem.value.cooked;
            const expr = exprs[i2++];
            expr && (str += String(evaluateCached(expr, state)));
          }
          if (state.confident) return str;
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/family.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._getKey = _getKey, exports2._getPattern = _getPattern, exports2.get = function(key, context = true) {
          true === context && (context = this.context);
          const parts = key.split(".");
          return 1 === parts.length ? _getKey.call(this, key, context) : _getPattern.call(this, parts, context);
        }, exports2.getAllNextSiblings = function() {
          let _key = this.key, sibling = this.getSibling(++_key);
          const siblings = [];
          for (; sibling.node; ) siblings.push(sibling), sibling = this.getSibling(++_key);
          return siblings;
        }, exports2.getAllPrevSiblings = function() {
          let _key = this.key, sibling = this.getSibling(--_key);
          const siblings = [];
          for (; sibling.node; ) siblings.push(sibling), sibling = this.getSibling(--_key);
          return siblings;
        }, exports2.getAssignmentIdentifiers = function() {
          return _getAssignmentIdentifiers(this.node);
        }, exports2.getBindingIdentifierPaths = function(duplicates = false, outerOnly = false) {
          const search = [this], ids = /* @__PURE__ */ Object.create(null);
          for (; search.length; ) {
            const id = search.shift();
            if (!id) continue;
            if (!id.node) continue;
            const keys = _getBindingIdentifiers.keys[id.node.type];
            if (id.isIdentifier()) if (duplicates) {
              (ids[id.node.name] = ids[id.node.name] || []).push(id);
            } else ids[id.node.name] = id;
            else if (id.isExportDeclaration()) {
              const declaration = id.get("declaration");
              declaration.isDeclaration() && search.push(declaration);
            } else {
              if (outerOnly) {
                if (id.isFunctionDeclaration()) {
                  search.push(id.get("id"));
                  continue;
                }
                if (id.isFunctionExpression()) continue;
              }
              if (keys) for (let i2 = 0; i2 < keys.length; i2++) {
                const key = keys[i2], child = id.get(key);
                Array.isArray(child) ? search.push(...child) : child.node && search.push(child);
              }
            }
          }
          return ids;
        }, exports2.getBindingIdentifiers = function(duplicates) {
          return _getBindingIdentifiers(this.node, duplicates);
        }, exports2.getCompletionRecords = function() {
          return _getCompletionRecords(this, { canHaveBreak: false, shouldPopulateBreak: false, inCaseClause: false }).map((r2) => r2.path);
        }, exports2.getNextSibling = function() {
          return this.getSibling(this.key + 1);
        }, exports2.getOpposite = function() {
          if ("left" === this.key) return this.getSibling("right");
          if ("right" === this.key) return this.getSibling("left");
          return null;
        }, exports2.getOuterBindingIdentifierPaths = function(duplicates = false) {
          return this.getBindingIdentifierPaths(duplicates, true);
        }, exports2.getOuterBindingIdentifiers = function(duplicates) {
          return _getOuterBindingIdentifiers(this.node, duplicates);
        }, exports2.getPrevSibling = function() {
          return this.getSibling(this.key - 1);
        }, exports2.getSibling = function(key) {
          return _index.default.get({ parentPath: this.parentPath, parent: this.parent, container: this.container, listKey: this.listKey, key }).setContext(this.context);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { getAssignmentIdentifiers: _getAssignmentIdentifiers, getBindingIdentifiers: _getBindingIdentifiers, getOuterBindingIdentifiers: _getOuterBindingIdentifiers, numericLiteral, unaryExpression } = _t, NORMAL_COMPLETION = 0, BREAK_COMPLETION = 1;
        function addCompletionRecords(path9, records, context) {
          return path9 && records.push(..._getCompletionRecords(path9, context)), records;
        }
        function normalCompletionToBreak(completions) {
          completions.forEach((c4) => {
            c4.type = BREAK_COMPLETION;
          });
        }
        function replaceBreakStatementInBreakCompletion(completions, reachable) {
          completions.forEach((c4) => {
            c4.path.isBreakStatement({ label: null }) && (reachable ? c4.path.replaceWith(unaryExpression("void", numericLiteral(0))) : c4.path.remove());
          });
        }
        function getStatementListCompletion(paths, context) {
          const completions = [];
          if (context.canHaveBreak) {
            let lastNormalCompletions = [];
            for (let i2 = 0; i2 < paths.length; i2++) {
              const path9 = paths[i2], newContext = Object.assign({}, context, { inCaseClause: false });
              path9.isBlockStatement() && (context.inCaseClause || context.shouldPopulateBreak) ? newContext.shouldPopulateBreak = true : newContext.shouldPopulateBreak = false;
              const statementCompletions = _getCompletionRecords(path9, newContext);
              if (statementCompletions.length > 0 && statementCompletions.every((c4) => c4.type === BREAK_COMPLETION)) {
                lastNormalCompletions.length > 0 && statementCompletions.every((c4) => c4.path.isBreakStatement({ label: null })) ? (normalCompletionToBreak(lastNormalCompletions), completions.push(...lastNormalCompletions), lastNormalCompletions.some((c4) => c4.path.isDeclaration()) && (completions.push(...statementCompletions), replaceBreakStatementInBreakCompletion(statementCompletions, true)), replaceBreakStatementInBreakCompletion(statementCompletions, false)) : (completions.push(...statementCompletions), context.shouldPopulateBreak || replaceBreakStatementInBreakCompletion(statementCompletions, true));
                break;
              }
              if (i2 === paths.length - 1) completions.push(...statementCompletions);
              else {
                lastNormalCompletions = [];
                for (let i3 = 0; i3 < statementCompletions.length; i3++) {
                  const c4 = statementCompletions[i3];
                  c4.type === BREAK_COMPLETION && completions.push(c4), c4.type === NORMAL_COMPLETION && lastNormalCompletions.push(c4);
                }
              }
            }
          } else if (paths.length) for (let i2 = paths.length - 1; i2 >= 0; i2--) {
            const pathCompletions = _getCompletionRecords(paths[i2], context);
            if (pathCompletions.length > 1 || 1 === pathCompletions.length && !pathCompletions[0].path.isVariableDeclaration()) {
              completions.push(...pathCompletions);
              break;
            }
          }
          return completions;
        }
        function _getCompletionRecords(path9, context) {
          let records = [];
          if (path9.isIfStatement()) records = addCompletionRecords(path9.get("consequent"), records, context), records = addCompletionRecords(path9.get("alternate"), records, context);
          else {
            if (path9.isDoExpression() || path9.isFor() || path9.isWhile() || path9.isLabeledStatement()) return addCompletionRecords(path9.get("body"), records, context);
            if (path9.isProgram() || path9.isBlockStatement()) return getStatementListCompletion(path9.get("body"), context);
            if (path9.isFunction()) return _getCompletionRecords(path9.get("body"), context);
            if (path9.isTryStatement()) records = addCompletionRecords(path9.get("block"), records, context), records = addCompletionRecords(path9.get("handler"), records, context);
            else {
              if (path9.isCatchClause()) return addCompletionRecords(path9.get("body"), records, context);
              if (path9.isSwitchStatement()) return function(cases, records2, context2) {
                let lastNormalCompletions = [];
                for (let i2 = 0; i2 < cases.length; i2++) {
                  const caseCompletions = _getCompletionRecords(cases[i2], context2), normalCompletions = [], breakCompletions = [];
                  for (const c4 of caseCompletions) c4.type === NORMAL_COMPLETION && normalCompletions.push(c4), c4.type === BREAK_COMPLETION && breakCompletions.push(c4);
                  normalCompletions.length && (lastNormalCompletions = normalCompletions), records2.push(...breakCompletions);
                }
                return records2.push(...lastNormalCompletions), records2;
              }(path9.get("cases"), records, context);
              if (path9.isSwitchCase()) return getStatementListCompletion(path9.get("consequent"), { canHaveBreak: true, shouldPopulateBreak: false, inCaseClause: true });
              path9.isBreakStatement() ? records.push(/* @__PURE__ */ function(path10) {
                return { type: BREAK_COMPLETION, path: path10 };
              }(path9)) : records.push(/* @__PURE__ */ function(path10) {
                return { type: NORMAL_COMPLETION, path: path10 };
              }(path9));
            }
          }
          return records;
        }
        function _getKey(key, context) {
          const node = this.node, container = node[key];
          return Array.isArray(container) ? container.map((_2, i2) => _index.default.get({ listKey: key, parentPath: this, parent: node, container, key: i2 }).setContext(context)) : _index.default.get({ parentPath: this, parent: node, container: node, key }).setContext(context);
        }
        function _getPattern(parts, context) {
          let path9 = this;
          for (const part of parts) path9 = "." === part ? path9.parentPath : Array.isArray(path9) ? path9[part] : path9.get(part, context);
          return path9;
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = exports2.SHOULD_STOP = exports2.SHOULD_SKIP = exports2.REMOVED = void 0;
        var virtualTypes = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/virtual-types.js"), _debug = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), t2 = _t, cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js"), _generator = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/index.js"), NodePath_ancestry = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/ancestry.js"), NodePath_inference = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/index.js"), NodePath_replacement = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/replacement.js"), NodePath_evaluation = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/evaluation.js"), NodePath_conversion = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/conversion.js"), NodePath_introspection = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/introspection.js"), _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js"), NodePath_context = _context, NodePath_removal = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/removal.js"), NodePath_modification = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/modification.js"), NodePath_family = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/family.js"), NodePath_comments = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/comments.js"), NodePath_virtual_types_validator = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js");
        const { validate } = _t, debug2 = _debug("babel"), NodePath_Final = (exports2.REMOVED = 1, exports2.SHOULD_STOP = 2, exports2.SHOULD_SKIP = 4, exports2.default = class NodePath {
          constructor(hub, parent) {
            this.contexts = [], this.state = null, this.opts = null, this._traverseFlags = 0, this.skipKeys = null, this.parentPath = null, this.container = null, this.listKey = null, this.key = null, this.node = null, this.type = null, this.parent = parent, this.hub = hub, this.data = null, this.context = null, this.scope = null;
          }
          get removed() {
            return (1 & this._traverseFlags) > 0;
          }
          set removed(v) {
            v ? this._traverseFlags |= 1 : this._traverseFlags &= -2;
          }
          get shouldStop() {
            return (2 & this._traverseFlags) > 0;
          }
          set shouldStop(v) {
            v ? this._traverseFlags |= 2 : this._traverseFlags &= -3;
          }
          get shouldSkip() {
            return (4 & this._traverseFlags) > 0;
          }
          set shouldSkip(v) {
            v ? this._traverseFlags |= 4 : this._traverseFlags &= -5;
          }
          static get({ hub, parentPath, parent, container, listKey, key }) {
            if (!hub && parentPath && (hub = parentPath.hub), !parent) throw new Error("To get a node path the parent needs to exist");
            const targetNode = container[key], paths = cache.getOrCreateCachedPaths(hub, parent);
            let path9 = paths.get(targetNode);
            return path9 || (path9 = new NodePath(hub, parent), targetNode && paths.set(targetNode, path9)), _context.setup.call(path9, parentPath, container, listKey, key), path9;
          }
          getScope(scope) {
            return this.isScope() ? new _index2.default(this) : scope;
          }
          setData(key, val) {
            return null == this.data && (this.data = /* @__PURE__ */ Object.create(null)), this.data[key] = val;
          }
          getData(key, def) {
            null == this.data && (this.data = /* @__PURE__ */ Object.create(null));
            let val = this.data[key];
            return void 0 === val && void 0 !== def && (val = this.data[key] = def), val;
          }
          hasNode() {
            return null != this.node;
          }
          buildCodeFrameError(msg, Error2 = SyntaxError) {
            return this.hub.buildError(this.node, msg, Error2);
          }
          traverse(visitor, state) {
            (0, _index.default)(this.node, visitor, this.scope, state, this);
          }
          set(key, node) {
            validate(this.node, key, node), this.node[key] = node;
          }
          getPathLocation() {
            const parts = [];
            let path9 = this;
            do {
              let key = path9.key;
              path9.inList && (key = `${path9.listKey}[${key}]`), parts.unshift(key);
            } while (path9 = path9.parentPath);
            return parts.join(".");
          }
          debug(message) {
            debug2.enabled && debug2(`${this.getPathLocation()} ${this.type}: ${message}`);
          }
          toString() {
            return (0, _generator.default)(this.node).code;
          }
          get inList() {
            return !!this.listKey;
          }
          set inList(inList) {
            inList || (this.listKey = null);
          }
          get parentKey() {
            return this.listKey || this.key;
          }
        }), methods = { findParent: NodePath_ancestry.findParent, find: NodePath_ancestry.find, getFunctionParent: NodePath_ancestry.getFunctionParent, getStatementParent: NodePath_ancestry.getStatementParent, getEarliestCommonAncestorFrom: NodePath_ancestry.getEarliestCommonAncestorFrom, getDeepestCommonAncestorFrom: NodePath_ancestry.getDeepestCommonAncestorFrom, getAncestry: NodePath_ancestry.getAncestry, isAncestor: NodePath_ancestry.isAncestor, isDescendant: NodePath_ancestry.isDescendant, inType: NodePath_ancestry.inType, getTypeAnnotation: NodePath_inference.getTypeAnnotation, isBaseType: NodePath_inference.isBaseType, couldBeBaseType: NodePath_inference.couldBeBaseType, baseTypeStrictlyMatches: NodePath_inference.baseTypeStrictlyMatches, isGenericType: NodePath_inference.isGenericType, replaceWithMultiple: NodePath_replacement.replaceWithMultiple, replaceWithSourceString: NodePath_replacement.replaceWithSourceString, replaceWith: NodePath_replacement.replaceWith, replaceExpressionWithStatements: NodePath_replacement.replaceExpressionWithStatements, replaceInline: NodePath_replacement.replaceInline, evaluateTruthy: NodePath_evaluation.evaluateTruthy, evaluate: NodePath_evaluation.evaluate, toComputedKey: NodePath_conversion.toComputedKey, ensureBlock: NodePath_conversion.ensureBlock, unwrapFunctionEnvironment: NodePath_conversion.unwrapFunctionEnvironment, arrowFunctionToExpression: NodePath_conversion.arrowFunctionToExpression, splitExportDeclaration: NodePath_conversion.splitExportDeclaration, ensureFunctionName: NodePath_conversion.ensureFunctionName, matchesPattern: NodePath_introspection.matchesPattern, isStatic: NodePath_introspection.isStatic, isNodeType: NodePath_introspection.isNodeType, canHaveVariableDeclarationOrExpression: NodePath_introspection.canHaveVariableDeclarationOrExpression, canSwapBetweenExpressionAndStatement: NodePath_introspection.canSwapBetweenExpressionAndStatement, isCompletionRecord: NodePath_introspection.isCompletionRecord, isStatementOrBlock: NodePath_introspection.isStatementOrBlock, referencesImport: NodePath_introspection.referencesImport, getSource: NodePath_introspection.getSource, willIMaybeExecuteBefore: NodePath_introspection.willIMaybeExecuteBefore, _guessExecutionStatusRelativeTo: NodePath_introspection._guessExecutionStatusRelativeTo, resolve: NodePath_introspection.resolve, isConstantExpression: NodePath_introspection.isConstantExpression, isInStrictMode: NodePath_introspection.isInStrictMode, isDenylisted: NodePath_context.isDenylisted, visit: NodePath_context.visit, skip: NodePath_context.skip, skipKey: NodePath_context.skipKey, stop: NodePath_context.stop, setContext: NodePath_context.setContext, requeue: NodePath_context.requeue, requeueComputedKeyAndDecorators: NodePath_context.requeueComputedKeyAndDecorators, remove: NodePath_removal.remove, insertBefore: NodePath_modification.insertBefore, insertAfter: NodePath_modification.insertAfter, unshiftContainer: NodePath_modification.unshiftContainer, pushContainer: NodePath_modification.pushContainer, getOpposite: NodePath_family.getOpposite, getCompletionRecords: NodePath_family.getCompletionRecords, getSibling: NodePath_family.getSibling, getPrevSibling: NodePath_family.getPrevSibling, getNextSibling: NodePath_family.getNextSibling, getAllNextSiblings: NodePath_family.getAllNextSiblings, getAllPrevSiblings: NodePath_family.getAllPrevSiblings, get: NodePath_family.get, getAssignmentIdentifiers: NodePath_family.getAssignmentIdentifiers, getBindingIdentifiers: NodePath_family.getBindingIdentifiers, getOuterBindingIdentifiers: NodePath_family.getOuterBindingIdentifiers, getBindingIdentifierPaths: NodePath_family.getBindingIdentifierPaths, getOuterBindingIdentifierPaths: NodePath_family.getOuterBindingIdentifierPaths, shareCommentsWithSiblings: NodePath_comments.shareCommentsWithSiblings, addComment: NodePath_comments.addComment, addComments: NodePath_comments.addComments };
        Object.assign(NodePath_Final.prototype, methods), NodePath_Final.prototype.arrowFunctionToShadowed = NodePath_conversion[String("arrowFunctionToShadowed")], Object.assign(NodePath_Final.prototype, { has: NodePath_introspection[String("has")], is: NodePath_introspection[String("is")], isnt: NodePath_introspection[String("isnt")], equals: NodePath_introspection[String("equals")], hoist: NodePath_modification[String("hoist")], updateSiblingKeys: NodePath_modification.updateSiblingKeys, call: NodePath_context.call, isBlacklisted: NodePath_context[String("isBlacklisted")], setScope: NodePath_context.setScope, resync: NodePath_context.resync, popContext: NodePath_context.popContext, pushContext: NodePath_context.pushContext, setup: NodePath_context.setup, setKey: NodePath_context.setKey }), NodePath_Final.prototype._guessExecutionStatusRelativeToDifferentFunctions = NodePath_introspection._guessExecutionStatusRelativeTo, NodePath_Final.prototype._guessExecutionStatusRelativeToDifferentFunctions = NodePath_introspection._guessExecutionStatusRelativeTo, Object.assign(NodePath_Final.prototype, { _getTypeAnnotation: NodePath_inference._getTypeAnnotation, _replaceWith: NodePath_replacement._replaceWith, _resolve: NodePath_introspection._resolve, _call: NodePath_context._call, _resyncParent: NodePath_context._resyncParent, _resyncKey: NodePath_context._resyncKey, _resyncList: NodePath_context._resyncList, _resyncRemoved: NodePath_context._resyncRemoved, _getQueueContexts: NodePath_context._getQueueContexts, _removeFromScope: NodePath_removal._removeFromScope, _callRemovalHooks: NodePath_removal._callRemovalHooks, _remove: NodePath_removal._remove, _markRemoved: NodePath_removal._markRemoved, _assertUnremoved: NodePath_removal._assertUnremoved, _containerInsert: NodePath_modification._containerInsert, _containerInsertBefore: NodePath_modification._containerInsertBefore, _containerInsertAfter: NodePath_modification._containerInsertAfter, _verifyNodeList: NodePath_modification._verifyNodeList, _getKey: NodePath_family._getKey, _getPattern: NodePath_family._getPattern });
        for (const type of t2.TYPES) {
          const typeKey = `is${type}`, fn = t2[typeKey];
          NodePath_Final.prototype[typeKey] = function(opts) {
            return fn(this.node, opts);
          }, NodePath_Final.prototype[`assert${type}`] = function(opts) {
            if (!fn(this.node, opts)) throw new TypeError(`Expected node path of type ${type}`);
          };
        }
        Object.assign(NodePath_Final.prototype, NodePath_virtual_types_validator);
        for (const type of Object.keys(virtualTypes)) "_" !== type[0] && (t2.TYPES.includes(type) || t2.TYPES.push(type));
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._getTypeAnnotation = _getTypeAnnotation, exports2.baseTypeStrictlyMatches = function(rightArg) {
          const left = this.getTypeAnnotation(), right = rightArg.getTypeAnnotation();
          if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left)) return right.type === left.type;
          return false;
        }, exports2.couldBeBaseType = function(name) {
          const type = this.getTypeAnnotation();
          if (isAnyTypeAnnotation(type)) return true;
          if (isUnionTypeAnnotation(type)) {
            for (const type2 of type.types) if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) return true;
            return false;
          }
          return _isBaseType(name, type, true);
        }, exports2.getTypeAnnotation = function() {
          let type = this.getData("typeAnnotation");
          if (null != type) return type;
          type = _getTypeAnnotation.call(this) || anyTypeAnnotation(), (isTypeAnnotation(type) || isTSTypeAnnotation(type)) && (type = type.typeAnnotation);
          return this.setData("typeAnnotation", type), type;
        }, exports2.isBaseType = function(baseName, soft) {
          return _isBaseType(baseName, this.getTypeAnnotation(), soft);
        }, exports2.isGenericType = function(genericName) {
          const type = this.getTypeAnnotation();
          if ("Array" === genericName && (isTSArrayType(type) || isArrayTypeAnnotation(type) || isTupleTypeAnnotation(type))) return true;
          return isGenericTypeAnnotation(type) && isIdentifier2(type.id, { name: genericName }) || isTSTypeReference(type) && isIdentifier2(type.typeName, { name: genericName });
        };
        var inferers = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/inferers.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { anyTypeAnnotation, isAnyTypeAnnotation, isArrayTypeAnnotation, isBooleanTypeAnnotation, isEmptyTypeAnnotation, isFlowBaseAnnotation, isGenericTypeAnnotation, isIdentifier: isIdentifier2, isMixedTypeAnnotation, isNumberTypeAnnotation, isStringTypeAnnotation, isTSArrayType, isTSTypeAnnotation, isTSTypeReference, isTupleTypeAnnotation, isTypeAnnotation, isUnionTypeAnnotation, isVoidTypeAnnotation, stringTypeAnnotation, voidTypeAnnotation } = _t;
        const typeAnnotationInferringNodes = /* @__PURE__ */ new WeakSet();
        function _getTypeAnnotation() {
          const node = this.node;
          if (node) {
            if (node.typeAnnotation) return node.typeAnnotation;
            if (!typeAnnotationInferringNodes.has(node)) {
              typeAnnotationInferringNodes.add(node);
              try {
                var _inferer;
                let inferer = inferers[node.type];
                if (inferer) return inferer.call(this, node);
                if (inferer = inferers[this.parentPath.type], null != (_inferer = inferer) && _inferer.validParent) return this.parentPath.getTypeAnnotation();
              } finally {
                typeAnnotationInferringNodes.delete(node);
              }
            }
          } else if ("init" === this.key && this.parentPath.isVariableDeclarator()) {
            const declar = this.parentPath.parentPath, declarParent = declar.parentPath;
            return "left" === declar.key && declarParent.isForInStatement() ? stringTypeAnnotation() : "left" === declar.key && declarParent.isForOfStatement() ? anyTypeAnnotation() : voidTypeAnnotation();
          }
        }
        function _isBaseType(baseName, type, soft) {
          if ("string" === baseName) return isStringTypeAnnotation(type);
          if ("number" === baseName) return isNumberTypeAnnotation(type);
          if ("boolean" === baseName) return isBooleanTypeAnnotation(type);
          if ("any" === baseName) return isAnyTypeAnnotation(type);
          if ("mixed" === baseName) return isMixedTypeAnnotation(type);
          if ("empty" === baseName) return isEmptyTypeAnnotation(type);
          if ("void" === baseName) return isVoidTypeAnnotation(type);
          if (soft) return false;
          throw new Error(`Unknown base type ${baseName}`);
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/inferer-reference.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          if (!this.isReferenced()) return;
          const binding = this.scope.getBinding(node.name);
          if (binding) return binding.identifier.typeAnnotation ? binding.identifier.typeAnnotation : function(binding2, path9, name) {
            const types = [], functionConstantViolations = [];
            let constantViolations = getConstantViolationsBefore(binding2, path9, functionConstantViolations);
            const testType = getConditionalAnnotation(binding2, path9, name);
            if (testType) {
              const testConstantViolations = getConstantViolationsBefore(binding2, testType.ifStatement);
              constantViolations = constantViolations.filter((path10) => !testConstantViolations.includes(path10)), types.push(testType.typeAnnotation);
            }
            if (constantViolations.length) {
              constantViolations.push(...functionConstantViolations);
              for (const violation of constantViolations) types.push(violation.getTypeAnnotation());
            }
            if (!types.length) return;
            return (0, _util.createUnionType)(types);
          }(binding, this, node.name);
          if ("undefined" === node.name) return voidTypeAnnotation();
          if ("NaN" === node.name || "Infinity" === node.name) return numberTypeAnnotation();
          node.name;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/util.js");
        const { BOOLEAN_NUMBER_BINARY_OPERATORS, createTypeAnnotationBasedOnTypeof, numberTypeAnnotation, voidTypeAnnotation } = _t;
        function getConstantViolationsBefore(binding, path9, functions) {
          const violations = binding.constantViolations.slice();
          return violations.unshift(binding.path), violations.filter((violation) => {
            const status = (violation = violation.resolve())._guessExecutionStatusRelativeTo(path9);
            return functions && "unknown" === status && functions.push(violation), "before" === status;
          });
        }
        function inferAnnotationFromBinaryExpression(name, path9) {
          const operator = path9.node.operator, right = path9.get("right").resolve(), left = path9.get("left").resolve();
          let target, typeofPath, typePath;
          if (left.isIdentifier({ name }) ? target = right : right.isIdentifier({ name }) && (target = left), target) return "===" === operator ? target.getTypeAnnotation() : BOOLEAN_NUMBER_BINARY_OPERATORS.includes(operator) ? numberTypeAnnotation() : void 0;
          if ("===" !== operator && "==" !== operator) return;
          if (left.isUnaryExpression({ operator: "typeof" }) ? (typeofPath = left, typePath = right) : right.isUnaryExpression({ operator: "typeof" }) && (typeofPath = right, typePath = left), !typeofPath) return;
          if (!typeofPath.get("argument").isIdentifier({ name })) return;
          if (typePath = typePath.resolve(), !typePath.isLiteral()) return;
          const typeValue = typePath.node.value;
          return "string" == typeof typeValue ? createTypeAnnotationBasedOnTypeof(typeValue) : void 0;
        }
        function getConditionalAnnotation(binding, path9, name) {
          const ifStatement = function(binding2, path10, name2) {
            let parentPath;
            for (; parentPath = path10.parentPath; ) {
              if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {
                if ("test" === path10.key) return;
                return parentPath;
              }
              if (parentPath.isFunction() && parentPath.parentPath.scope.getBinding(name2) !== binding2) return;
              path10 = parentPath;
            }
          }(binding, path9, name);
          if (!ifStatement) return;
          const paths = [ifStatement.get("test")], types = [];
          for (let i2 = 0; i2 < paths.length; i2++) {
            const path10 = paths[i2];
            if (path10.isLogicalExpression()) "&&" === path10.node.operator && (paths.push(path10.get("left")), paths.push(path10.get("right")));
            else if (path10.isBinaryExpression()) {
              const type = inferAnnotationFromBinaryExpression(name, path10);
              type && types.push(type);
            }
          }
          return types.length ? { typeAnnotation: (0, _util.createUnionType)(types), ifStatement } : getConditionalAnnotation(binding, ifStatement, name);
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/inferers.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ArrayExpression = ArrayExpression, exports2.AssignmentExpression = function() {
          return this.get("right").getTypeAnnotation();
        }, exports2.BinaryExpression = function(node) {
          const operator = node.operator;
          if (NUMBER_BINARY_OPERATORS.includes(operator)) return numberTypeAnnotation();
          if (BOOLEAN_BINARY_OPERATORS.includes(operator)) return booleanTypeAnnotation();
          if ("+" === operator) {
            const right = this.get("right"), left = this.get("left");
            return left.isBaseType("number") && right.isBaseType("number") ? numberTypeAnnotation() : left.isBaseType("string") || right.isBaseType("string") ? stringTypeAnnotation() : unionTypeAnnotation([stringTypeAnnotation(), numberTypeAnnotation()]);
          }
        }, exports2.BooleanLiteral = function() {
          return booleanTypeAnnotation();
        }, exports2.CallExpression = function() {
          const { callee } = this.node;
          if (isObjectKeys(callee)) return arrayTypeAnnotation(stringTypeAnnotation());
          if (isArrayFrom(callee) || isObjectValues(callee) || isIdentifier2(callee, { name: "Array" })) return arrayTypeAnnotation(anyTypeAnnotation());
          if (isObjectEntries(callee)) return arrayTypeAnnotation(tupleTypeAnnotation([stringTypeAnnotation(), anyTypeAnnotation()]));
          return resolveCall(this.get("callee"));
        }, exports2.ConditionalExpression = function() {
          const argumentTypes = [this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()];
          return (0, _util.createUnionType)(argumentTypes);
        }, exports2.ClassDeclaration = exports2.ClassExpression = exports2.FunctionDeclaration = exports2.ArrowFunctionExpression = exports2.FunctionExpression = function() {
          return genericTypeAnnotation(identifier("Function"));
        }, Object.defineProperty(exports2, "Identifier", { enumerable: true, get: function() {
          return _infererReference.default;
        } }), exports2.LogicalExpression = function() {
          const argumentTypes = [this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()];
          return (0, _util.createUnionType)(argumentTypes);
        }, exports2.NewExpression = function(node) {
          if ("Identifier" === node.callee.type) return genericTypeAnnotation(node.callee);
        }, exports2.NullLiteral = function() {
          return nullLiteralTypeAnnotation();
        }, exports2.NumericLiteral = function() {
          return numberTypeAnnotation();
        }, exports2.ObjectExpression = function() {
          return genericTypeAnnotation(identifier("Object"));
        }, exports2.ParenthesizedExpression = function() {
          return this.get("expression").getTypeAnnotation();
        }, exports2.RegExpLiteral = function() {
          return genericTypeAnnotation(identifier("RegExp"));
        }, exports2.RestElement = RestElement, exports2.SequenceExpression = function() {
          return this.get("expressions").pop().getTypeAnnotation();
        }, exports2.StringLiteral = function() {
          return stringTypeAnnotation();
        }, exports2.TSAsExpression = TSAsExpression, exports2.TSNonNullExpression = function() {
          return this.get("expression").getTypeAnnotation();
        }, exports2.TaggedTemplateExpression = function() {
          return resolveCall(this.get("tag"));
        }, exports2.TemplateLiteral = function() {
          return stringTypeAnnotation();
        }, exports2.TypeCastExpression = TypeCastExpression, exports2.UnaryExpression = function(node) {
          const operator = node.operator;
          if ("void" === operator) return voidTypeAnnotation();
          if (NUMBER_UNARY_OPERATORS.includes(operator)) return numberTypeAnnotation();
          if (STRING_UNARY_OPERATORS.includes(operator)) return stringTypeAnnotation();
          if (BOOLEAN_UNARY_OPERATORS.includes(operator)) return booleanTypeAnnotation();
        }, exports2.UpdateExpression = function(node) {
          const operator = node.operator;
          if ("++" === operator || "--" === operator) return numberTypeAnnotation();
        }, exports2.VariableDeclarator = function() {
          if (!this.get("id").isIdentifier()) return;
          return this.get("init").getTypeAnnotation();
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _infererReference = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/inferer-reference.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/util.js");
        const { BOOLEAN_BINARY_OPERATORS, BOOLEAN_UNARY_OPERATORS, NUMBER_BINARY_OPERATORS, NUMBER_UNARY_OPERATORS, STRING_UNARY_OPERATORS, anyTypeAnnotation, arrayTypeAnnotation, booleanTypeAnnotation, buildMatchMemberExpression, genericTypeAnnotation, identifier, nullLiteralTypeAnnotation, numberTypeAnnotation, stringTypeAnnotation, tupleTypeAnnotation, unionTypeAnnotation, voidTypeAnnotation, isIdentifier: isIdentifier2 } = _t;
        function TypeCastExpression(node) {
          return node.typeAnnotation;
        }
        function TSAsExpression(node) {
          return node.typeAnnotation;
        }
        function ArrayExpression() {
          return genericTypeAnnotation(identifier("Array"));
        }
        function RestElement() {
          return ArrayExpression();
        }
        TypeCastExpression.validParent = true, TSAsExpression.validParent = true, RestElement.validParent = true;
        const isArrayFrom = buildMatchMemberExpression("Array.from"), isObjectKeys = buildMatchMemberExpression("Object.keys"), isObjectValues = buildMatchMemberExpression("Object.values"), isObjectEntries = buildMatchMemberExpression("Object.entries");
        function resolveCall(callee) {
          if ((callee = callee.resolve()).isFunction()) {
            const { node } = callee;
            if (node.async) return node.generator ? genericTypeAnnotation(identifier("AsyncIterator")) : genericTypeAnnotation(identifier("Promise"));
            if (node.generator) return genericTypeAnnotation(identifier("Iterator"));
            if (callee.node.returnType) return callee.node.returnType;
          }
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/util.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.createUnionType = function(types) {
          if (types.every((v) => isFlowType(v))) return createFlowUnionType ? createFlowUnionType(types) : createUnionTypeAnnotation(types);
          if (types.every((v) => isTSType(v)) && createTSUnionType) return createTSUnionType(types);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { createFlowUnionType, createTSUnionType, createUnionTypeAnnotation, isFlowType, isTSType } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/introspection.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._guessExecutionStatusRelativeTo = function(target) {
          return _guessExecutionStatusRelativeToCached(this, target, /* @__PURE__ */ new Map());
        }, exports2._resolve = _resolve, exports2.canHaveVariableDeclarationOrExpression = function() {
          return ("init" === this.key || "left" === this.key) && this.parentPath.isFor();
        }, exports2.canSwapBetweenExpressionAndStatement = function(replacement) {
          if ("body" !== this.key || !this.parentPath.isArrowFunctionExpression()) return false;
          if (this.isExpression()) return isBlockStatement(replacement);
          if (this.isBlockStatement()) return isExpression(replacement);
          return false;
        }, exports2.getSource = function() {
          const node = this.node;
          if (node.end) {
            const code = this.hub.getCode();
            if (code) return code.slice(node.start, node.end);
          }
          return "";
        }, exports2.isCompletionRecord = function(allowInsideFunction) {
          let path9 = this, first = true;
          do {
            const { type, container } = path9;
            if (!first && (path9.isFunction() || "StaticBlock" === type)) return !!allowInsideFunction;
            if (first = false, Array.isArray(container) && path9.key !== container.length - 1) return false;
          } while ((path9 = path9.parentPath) && !path9.isProgram() && !path9.isDoExpression());
          return true;
        }, exports2.isConstantExpression = function() {
          if (this.isIdentifier()) {
            const binding = this.scope.getBinding(this.node.name);
            return !!binding && binding.constant;
          }
          if (this.isLiteral()) return !this.isRegExpLiteral() && (!this.isTemplateLiteral() || this.get("expressions").every((expression) => expression.isConstantExpression()));
          if (this.isUnaryExpression()) return "void" === this.node.operator && this.get("argument").isConstantExpression();
          if (this.isBinaryExpression()) {
            const { operator } = this.node;
            return "in" !== operator && "instanceof" !== operator && this.get("left").isConstantExpression() && this.get("right").isConstantExpression();
          }
          if (this.isMemberExpression()) return !this.node.computed && this.get("object").isIdentifier({ name: "Symbol" }) && !this.scope.hasBinding("Symbol", { noGlobals: true });
          if (this.isCallExpression()) return 1 === this.node.arguments.length && this.get("callee").matchesPattern("Symbol.for") && !this.scope.hasBinding("Symbol", { noGlobals: true }) && this.get("arguments")[0].isStringLiteral();
          return false;
        }, exports2.isInStrictMode = function() {
          const start = this.isProgram() ? this : this.parentPath;
          return !!start.find((path9) => {
            if (path9.isProgram({ sourceType: "module" })) return true;
            if (path9.isClass()) return true;
            if (path9.isArrowFunctionExpression() && !path9.get("body").isBlockStatement()) return false;
            let body;
            if (path9.isFunction()) body = path9.node.body;
            else {
              if (!path9.isProgram()) return false;
              body = path9.node;
            }
            for (const directive of body.directives) if ("use strict" === directive.value.value) return true;
          });
        }, exports2.isNodeType = function(type) {
          return isType(this.type, type);
        }, exports2.isStatementOrBlock = function() {
          return !this.parentPath.isLabeledStatement() && !isBlockStatement(this.container) && STATEMENT_OR_BLOCK_KEYS.includes(this.key);
        }, exports2.isStatic = function() {
          return this.scope.isStatic(this.node);
        }, exports2.matchesPattern = function(pattern, allowPartial) {
          return _matchesPattern(this.node, pattern, allowPartial);
        }, exports2.referencesImport = function(moduleSource, importName) {
          if (!this.isReferencedIdentifier()) {
            if (this.isJSXMemberExpression() && this.node.property.name === importName || (this.isMemberExpression() || this.isOptionalMemberExpression()) && (this.node.computed ? isStringLiteral(this.node.property, { value: importName }) : this.node.property.name === importName)) {
              const object = this.get("object");
              return object.isReferencedIdentifier() && object.referencesImport(moduleSource, "*");
            }
            return false;
          }
          const binding = this.scope.getBinding(this.node.name);
          if (!binding || "module" !== binding.kind) return false;
          const path9 = binding.path, parent = path9.parentPath;
          if (!parent.isImportDeclaration()) return false;
          if (parent.node.source.value !== moduleSource) return false;
          if (!importName) return true;
          if (path9.isImportDefaultSpecifier() && "default" === importName) return true;
          if (path9.isImportNamespaceSpecifier() && "*" === importName) return true;
          if (path9.isImportSpecifier() && isIdentifier2(path9.node.imported, { name: importName })) return true;
          return false;
        }, exports2.resolve = function(dangerous, resolved) {
          return _resolve.call(this, dangerous, resolved) || this;
        }, exports2.willIMaybeExecuteBefore = function(target) {
          return "after" !== this._guessExecutionStatusRelativeTo(target);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { STATEMENT_OR_BLOCK_KEYS, VISITOR_KEYS, isBlockStatement, isExpression, isIdentifier: isIdentifier2, isLiteral, isStringLiteral, isType, matchesPattern: _matchesPattern } = _t;
        function getOuterFunction(path9) {
          return path9.isProgram() ? path9 : (path9.parentPath.scope.getFunctionParent() || path9.parentPath.scope.getProgramParent()).path;
        }
        function isExecutionUncertain(type, key) {
          switch (type) {
            case "LogicalExpression":
            case "AssignmentPattern":
              return "right" === key;
            case "ConditionalExpression":
            case "IfStatement":
              return "consequent" === key || "alternate" === key;
            case "WhileStatement":
            case "DoWhileStatement":
            case "ForInStatement":
            case "ForOfStatement":
              return "body" === key;
            case "ForStatement":
              return "body" === key || "update" === key;
            case "SwitchStatement":
              return "cases" === key;
            case "TryStatement":
              return "handler" === key;
            case "OptionalMemberExpression":
              return "property" === key;
            case "OptionalCallExpression":
              return "arguments" === key;
            default:
              return false;
          }
        }
        function isExecutionUncertainInList(paths, maxIndex) {
          for (let i2 = 0; i2 < maxIndex; i2++) {
            const path9 = paths[i2];
            if (isExecutionUncertain(path9.parent.type, path9.parentKey)) return true;
          }
          return false;
        }
        exports2.has = function(key) {
          var _this$node;
          const val = null == (_this$node = this.node) ? void 0 : _this$node[key];
          return val && Array.isArray(val) ? !!val.length : !!val;
        }, exports2.is = exports2.has, exports2.isnt = function(key) {
          return !this.has(key);
        }, exports2.equals = function(key, value2) {
          return this.node[key] === value2;
        };
        const SYMBOL_CHECKING = Symbol();
        function _guessExecutionStatusRelativeToCached(base, target, cache) {
          const funcParent = { this: getOuterFunction(base), target: getOuterFunction(target) };
          if (funcParent.target.node !== funcParent.this.node) return function(base2, target2, cache2) {
            let cached, nodeMap = cache2.get(base2.node);
            if (nodeMap) {
              if (cached = nodeMap.get(target2.node)) return cached === SYMBOL_CHECKING ? "unknown" : cached;
            } else cache2.set(base2.node, nodeMap = /* @__PURE__ */ new Map());
            nodeMap.set(target2.node, SYMBOL_CHECKING);
            const result = function(base3, target3, cache3) {
              if (!target3.isFunctionDeclaration()) return "before" === _guessExecutionStatusRelativeToCached(base3, target3, cache3) ? "before" : "unknown";
              if (target3.parentPath.isExportDeclaration()) return "unknown";
              const binding = target3.scope.getBinding(target3.node.id.name);
              if (!binding.references) return "before";
              const referencePaths = binding.referencePaths;
              let allStatus;
              for (const path9 of referencePaths) {
                if (!!path9.find((path10) => path10.node === target3.node)) continue;
                if ("callee" !== path9.key || !path9.parentPath.isCallExpression()) return "unknown";
                const status = _guessExecutionStatusRelativeToCached(base3, path9, cache3);
                if (allStatus && allStatus !== status) return "unknown";
                allStatus = status;
              }
              return allStatus;
            }(base2, target2, cache2);
            return nodeMap.set(target2.node, result), result;
          }(base, funcParent.target, cache);
          const paths = { target: target.getAncestry(), this: base.getAncestry() };
          if (paths.target.includes(base)) return "after";
          if (paths.this.includes(target)) return "before";
          let commonPath;
          const commonIndex = { target: 0, this: 0 };
          for (; !commonPath && commonIndex.this < paths.this.length; ) {
            const path9 = paths.this[commonIndex.this];
            commonIndex.target = paths.target.indexOf(path9), commonIndex.target >= 0 ? commonPath = path9 : commonIndex.this++;
          }
          if (!commonPath) throw new Error("Internal Babel error - The two compared nodes don't appear to belong to the same program.");
          if (isExecutionUncertainInList(paths.this, commonIndex.this - 1) || isExecutionUncertainInList(paths.target, commonIndex.target - 1)) return "unknown";
          const divergence = { this: paths.this[commonIndex.this - 1], target: paths.target[commonIndex.target - 1] };
          if (divergence.target.listKey && divergence.this.listKey && divergence.target.container === divergence.this.container) return divergence.target.key > divergence.this.key ? "before" : "after";
          const keys = VISITOR_KEYS[commonPath.type], keyPosition_this = keys.indexOf(divergence.this.parentKey);
          return keys.indexOf(divergence.target.parentKey) > keyPosition_this ? "before" : "after";
        }
        function _resolve(dangerous, resolved) {
          var _resolved;
          if (null == (_resolved = resolved) || !_resolved.includes(this)) if ((resolved = resolved || []).push(this), this.isVariableDeclarator()) {
            if (this.get("id").isIdentifier()) return this.get("init").resolve(dangerous, resolved);
          } else if (this.isReferencedIdentifier()) {
            const binding = this.scope.getBinding(this.node.name);
            if (!binding) return;
            if (!binding.constant) return;
            if ("module" === binding.kind) return;
            if (binding.path !== this) {
              const ret = binding.path.resolve(dangerous, resolved);
              if (this.find((parent) => parent.node === ret.node)) return;
              return ret;
            }
          } else {
            if (this.isTypeCastExpression()) return this.get("expression").resolve(dangerous, resolved);
            if (dangerous && this.isMemberExpression()) {
              const targetKey = this.toComputedKey();
              if (!isLiteral(targetKey)) return;
              const targetName = targetKey.value, target = this.get("object").resolve(dangerous, resolved);
              if (target.isObjectExpression()) {
                const props = target.get("properties");
                for (const prop of props) {
                  if (!prop.isProperty()) continue;
                  const key = prop.get("key");
                  let match = prop.isnt("computed") && key.isIdentifier({ name: targetName });
                  if (match = match || key.isLiteral({ value: targetName }), match) return prop.get("value").resolve(dangerous, resolved);
                }
              } else if (target.isArrayExpression() && !isNaN(+targetName)) {
                const elem = target.get("elements")[targetName];
                if (elem) return elem.resolve(dangerous, resolved);
              }
            }
          }
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/hoister.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _t2 = _t;
        const { react } = _t, { cloneNode: cloneNode2, jsxExpressionContainer, variableDeclaration, variableDeclarator } = _t2, referenceVisitor = { ReferencedIdentifier(path9, state) {
          if (path9.isJSXIdentifier() && react.isCompatTag(path9.node.name) && !path9.parentPath.isJSXMemberExpression()) return;
          if ("this" === path9.node.name) {
            let scope = path9.scope;
            do {
              if (scope.path.isFunction() && !scope.path.isArrowFunctionExpression()) break;
            } while (scope = scope.parent);
            scope && state.breakOnScopePaths.push(scope.path);
          }
          const binding = path9.scope.getBinding(path9.node.name);
          if (binding) {
            for (const violation of binding.constantViolations) if (violation.scope !== binding.path.scope) return state.mutableBinding = true, void path9.stop();
            binding === state.scope.getBinding(path9.node.name) && (state.bindings[path9.node.name] = binding);
          }
        } };
        exports2.default = class {
          constructor(path9, scope) {
            this.breakOnScopePaths = void 0, this.bindings = void 0, this.mutableBinding = void 0, this.scopes = void 0, this.scope = void 0, this.path = void 0, this.attachAfter = void 0, this.breakOnScopePaths = [], this.bindings = {}, this.mutableBinding = false, this.scopes = [], this.scope = scope, this.path = path9, this.attachAfter = false;
          }
          isCompatibleScope(scope) {
            for (const key of Object.keys(this.bindings)) {
              const binding = this.bindings[key];
              if (!scope.bindingIdentifierEquals(key, binding.identifier)) return false;
            }
            return true;
          }
          getCompatibleScopes() {
            let scope = this.path.scope;
            do {
              if (!this.isCompatibleScope(scope)) break;
              if (this.scopes.push(scope), this.breakOnScopePaths.includes(scope.path)) break;
            } while (scope = scope.parent);
          }
          getAttachmentPath() {
            let path9 = this._getAttachmentPath();
            if (!path9) return;
            let targetScope = path9.scope;
            if (targetScope.path === path9 && (targetScope = path9.scope.parent), targetScope.path.isProgram() || targetScope.path.isFunction()) for (const name of Object.keys(this.bindings)) {
              if (!targetScope.hasOwnBinding(name)) continue;
              const binding = this.bindings[name];
              if ("param" === binding.kind || "params" === binding.path.parentKey) continue;
              if (this.getAttachmentParentForPath(binding.path).key >= path9.key) {
                this.attachAfter = true, path9 = binding.path;
                for (const violationPath of binding.constantViolations) this.getAttachmentParentForPath(violationPath).key > path9.key && (path9 = violationPath);
              }
            }
            return path9;
          }
          _getAttachmentPath() {
            const scope = this.scopes.pop();
            if (scope) {
              if (scope.path.isFunction()) {
                if (!this.hasOwnParamBindings(scope)) return this.getNextScopeAttachmentParent();
                {
                  if (this.scope === scope) return;
                  const bodies = scope.path.get("body").get("body");
                  for (let i2 = 0; i2 < bodies.length; i2++) if (!bodies[i2].node._blockHoist) return bodies[i2];
                }
              } else if (scope.path.isProgram()) return this.getNextScopeAttachmentParent();
            }
          }
          getNextScopeAttachmentParent() {
            const scope = this.scopes.pop();
            if (scope) return this.getAttachmentParentForPath(scope.path);
          }
          getAttachmentParentForPath(path9) {
            do {
              if (!path9.parentPath || Array.isArray(path9.container) && path9.isStatement()) return path9;
            } while (path9 = path9.parentPath);
          }
          hasOwnParamBindings(scope) {
            for (const name of Object.keys(this.bindings)) {
              if (!scope.hasOwnBinding(name)) continue;
              const binding = this.bindings[name];
              if ("param" === binding.kind && binding.constant) return true;
            }
            return false;
          }
          run() {
            if (this.path.traverse(referenceVisitor, this), this.mutableBinding) return;
            this.getCompatibleScopes();
            const attachTo = this.getAttachmentPath();
            if (!attachTo) return;
            if (attachTo.getFunctionParent() === this.path.getFunctionParent()) return;
            let uid = attachTo.scope.generateUidIdentifier("ref");
            const declarator = variableDeclarator(uid, this.path.node), insertFn = this.attachAfter ? "insertAfter" : "insertBefore", [attached] = attachTo[insertFn]([attachTo.isVariableDeclarator() ? declarator : variableDeclaration("var", [declarator])]), parent = this.path.parentPath;
            return parent.isJSXElement() && this.path.container === parent.node.children && (uid = jsxExpressionContainer(uid)), this.path.replaceWith(cloneNode2(uid)), attachTo.isVariableDeclarator() ? attached.get("init") : attached.get("declarations.0.init");
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/removal-hooks.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.hooks = void 0;
        exports2.hooks = [function(self, parent) {
          if ("test" === self.key && (parent.isWhile() || parent.isSwitchCase()) || "declaration" === self.key && parent.isExportDeclaration() || "body" === self.key && parent.isLabeledStatement() || "declarations" === self.listKey && parent.isVariableDeclaration() && 1 === parent.node.declarations.length || "expression" === self.key && parent.isExpressionStatement()) return parent.remove(), true;
        }, function(self, parent) {
          if (parent.isSequenceExpression() && 1 === parent.node.expressions.length) return parent.replaceWith(parent.node.expressions[0]), true;
        }, function(self, parent) {
          if (parent.isBinary()) return "left" === self.key ? parent.replaceWith(parent.node.right) : parent.replaceWith(parent.node.left), true;
        }, function(self, parent) {
          if (parent.isIfStatement() && "consequent" === self.key || "body" === self.key && (parent.isLoop() || parent.isArrowFunctionExpression())) return self.replaceWith({ type: "BlockStatement", body: [] }), true;
        }];
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isBindingIdentifier = function() {
          const { node, parent } = this, grandparent = this.parentPath.parent;
          return isIdentifier2(node) && isBinding(node, parent, grandparent);
        }, exports2.isBlockScoped = function() {
          return nodeIsBlockScoped(this.node);
        }, exports2.isExpression = function() {
          return this.isIdentifier() ? this.isReferencedIdentifier() : nodeIsExpression(this.node);
        }, exports2.isFlow = function() {
          const { node } = this;
          return !!nodeIsFlow(node) || (isImportDeclaration(node) ? "type" === node.importKind || "typeof" === node.importKind : isExportDeclaration(node) ? "type" === node.exportKind : !!isImportSpecifier(node) && ("type" === node.importKind || "typeof" === node.importKind));
        }, exports2.isForAwaitStatement = function() {
          return isForOfStatement(this.node, { await: true });
        }, exports2.isGenerated = function() {
          return !this.isUser();
        }, exports2.isPure = function(constantsOnly) {
          return this.scope.isPure(this.node, constantsOnly);
        }, exports2.isReferenced = function() {
          return nodeIsReferenced(this.node, this.parent);
        }, exports2.isReferencedIdentifier = function(opts) {
          const { node, parent } = this;
          if (!isIdentifier2(node, opts) && !isJSXMemberExpression(parent, opts)) {
            if (!isJSXIdentifier(node, opts)) return false;
            if (isCompatTag(node.name)) return false;
          }
          return nodeIsReferenced(node, parent, this.parentPath.parent);
        }, exports2.isReferencedMemberExpression = function() {
          const { node, parent } = this;
          return isMemberExpression(node) && nodeIsReferenced(node, parent);
        }, exports2.isRestProperty = function() {
          var _this$parentPath;
          return nodeIsRestElement(this.node) && (null == (_this$parentPath = this.parentPath) ? void 0 : _this$parentPath.isObjectPattern());
        }, exports2.isScope = function() {
          return nodeIsScope(this.node, this.parent);
        }, exports2.isSpreadProperty = function() {
          var _this$parentPath2;
          return nodeIsRestElement(this.node) && (null == (_this$parentPath2 = this.parentPath) ? void 0 : _this$parentPath2.isObjectExpression());
        }, exports2.isStatement = function() {
          const { node, parent } = this;
          if (nodeIsStatement(node)) {
            if (isVariableDeclaration(node)) {
              if (isForXStatement(parent, { left: node })) return false;
              if (isForStatement(parent, { init: node })) return false;
            }
            return true;
          }
          return false;
        }, exports2.isUser = function() {
          return this.node && !!this.node.loc;
        }, exports2.isVar = function() {
          return nodeIsVar(this.node);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { isBinding, isBlockScoped: nodeIsBlockScoped, isExportDeclaration, isExpression: nodeIsExpression, isFlow: nodeIsFlow, isForStatement, isForXStatement, isIdentifier: isIdentifier2, isImportDeclaration, isImportSpecifier, isJSXIdentifier, isJSXMemberExpression, isMemberExpression, isRestElement: nodeIsRestElement, isReferenced: nodeIsReferenced, isScope: nodeIsScope, isStatement: nodeIsStatement, isVar: nodeIsVar, isVariableDeclaration, react, isForOfStatement } = _t, { isCompatTag } = react;
        exports2.isExistentialTypeParam = function() {
          throw new Error("`path.isExistentialTypeParam` has been renamed to `path.isExistsTypeAnnotation()` in Babel 7.");
        }, exports2.isNumericLiteralTypeAnnotation = function() {
          throw new Error("`path.isNumericLiteralTypeAnnotation()` has been renamed to `path.isNumberLiteralTypeAnnotation()` in Babel 7.");
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/virtual-types.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.Var = exports2.User = exports2.Statement = exports2.SpreadProperty = exports2.Scope = exports2.RestProperty = exports2.ReferencedMemberExpression = exports2.ReferencedIdentifier = exports2.Referenced = exports2.Pure = exports2.NumericLiteralTypeAnnotation = exports2.Generated = exports2.ForAwaitStatement = exports2.Flow = exports2.Expression = exports2.ExistentialTypeParam = exports2.BlockScoped = exports2.BindingIdentifier = void 0;
        exports2.ReferencedIdentifier = ["Identifier", "JSXIdentifier"], exports2.ReferencedMemberExpression = ["MemberExpression"], exports2.BindingIdentifier = ["Identifier"], exports2.Statement = ["Statement"], exports2.Expression = ["Expression"], exports2.Scope = ["Scopable", "Pattern"], exports2.Referenced = null, exports2.BlockScoped = null, exports2.Var = ["VariableDeclaration"], exports2.User = null, exports2.Generated = null, exports2.Pure = null, exports2.Flow = ["Flow", "ImportDeclaration", "ExportDeclaration", "ImportSpecifier"], exports2.RestProperty = ["RestElement"], exports2.SpreadProperty = ["RestElement"], exports2.ExistentialTypeParam = ["ExistsTypeAnnotation"], exports2.NumericLiteralTypeAnnotation = ["NumberLiteralTypeAnnotation"], exports2.ForAwaitStatement = ["ForOfStatement"];
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/modification.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._containerInsert = _containerInsert, exports2._containerInsertAfter = _containerInsertAfter, exports2._containerInsertBefore = _containerInsertBefore, exports2._verifyNodeList = _verifyNodeList, exports2.insertAfter = function(nodes_) {
          if (_removal._assertUnremoved.call(this), this.isSequenceExpression()) return last(this.get("expressions")).insertAfter(nodes_);
          const nodes = _verifyNodeList.call(this, nodes_), { parentPath, parent } = this;
          if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) return parentPath.insertAfter(nodes.map((node) => isExpression(node) ? expressionStatement(node) : node));
          if (this.isNodeType("Expression") && !this.isJSXElement() && !parentPath.isJSXElement() || parentPath.isForStatement() && "init" === this.key) {
            const self = this;
            if (self.node) {
              const node = self.node;
              let { scope } = this;
              if (scope.path.isPattern()) return assertExpression(node), self.replaceWith(callExpression(arrowFunctionExpression([], node), [])), self.get("callee.body").insertAfter(nodes), [self];
              if (isHiddenInSequenceExpression(self)) nodes.unshift(node);
              else if (isCallExpression(node) && isSuper(node.callee)) nodes.unshift(node), nodes.push(thisExpression());
              else if (function(node2, scope2) {
                if (!isAssignmentExpression(node2) || !isIdentifier2(node2.left)) return false;
                const blockScope = scope2.getBlockParent();
                return blockScope.hasOwnBinding(node2.left.name) && blockScope.getOwnBinding(node2.left.name).constantViolations.length <= 1;
              }(node, scope)) nodes.unshift(node), nodes.push(cloneNode2(node.left));
              else if (scope.isPure(node, true)) nodes.push(node);
              else {
                parentPath.isMethod({ computed: true, key: node }) && (scope = scope.parent);
                const temp = scope.generateDeclaredUidIdentifier();
                nodes.unshift(expressionStatement(assignmentExpression("=", cloneNode2(temp), node))), nodes.push(expressionStatement(cloneNode2(temp)));
              }
            }
            return this.replaceExpressionWithStatements(nodes);
          }
          if (Array.isArray(this.container)) return _containerInsertAfter.call(this, nodes);
          if (this.isStatementOrBlock()) {
            const node = this.node, shouldInsertCurrentNode = node && (!this.isExpressionStatement() || null != node.expression);
            return this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : [])), this.pushContainer("body", nodes);
          }
          throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
        }, exports2.insertBefore = function(nodes_) {
          _removal._assertUnremoved.call(this);
          const nodes = _verifyNodeList.call(this, nodes_), { parentPath, parent } = this;
          if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) return parentPath.insertBefore(nodes);
          if (this.isNodeType("Expression") && !this.isJSXElement() || parentPath.isForStatement() && "init" === this.key) return this.node && nodes.push(this.node), this.replaceExpressionWithStatements(nodes);
          if (Array.isArray(this.container)) return _containerInsertBefore.call(this, nodes);
          if (this.isStatementOrBlock()) {
            const node = this.node, shouldInsertCurrentNode = node && (!this.isExpressionStatement() || null != node.expression);
            return this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : [])), this.unshiftContainer("body", nodes);
          }
          throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
        }, exports2.pushContainer = function(listKey, nodes) {
          _removal._assertUnremoved.call(this);
          const verifiedNodes = _verifyNodeList.call(this, nodes), container = this.node[listKey];
          return _index.default.get({ parentPath: this, parent: this.node, container, listKey, key: container.length }).setContext(this.context).replaceWithMultiple(verifiedNodes);
        }, exports2.unshiftContainer = function(listKey, nodes) {
          _removal._assertUnremoved.call(this), nodes = _verifyNodeList.call(this, nodes);
          const path9 = _index.default.get({ parentPath: this, parent: this.node, container: this.node[listKey], listKey, key: 0 }).setContext(this.context);
          return _containerInsertBefore.call(path9, nodes);
        }, exports2.updateSiblingKeys = updateSiblingKeys;
        var _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js"), _hoister = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/hoister.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js"), _removal = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/removal.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { arrowFunctionExpression, assertExpression, assignmentExpression, blockStatement, callExpression, cloneNode: cloneNode2, expressionStatement, isAssignmentExpression, isCallExpression, isExportNamedDeclaration, isExpression, isIdentifier: isIdentifier2, isSequenceExpression, isSuper, thisExpression } = _t;
        function _containerInsert(from, nodes) {
          updateSiblingKeys.call(this, from, nodes.length);
          const paths = [];
          this.container.splice(from, 0, ...nodes);
          for (let i2 = 0; i2 < nodes.length; i2++) {
            var _this$context;
            const to = from + i2, path9 = this.getSibling(to);
            paths.push(path9), null != (_this$context = this.context) && _this$context.queue && _context.pushContext.call(path9, this.context);
          }
          const contexts = _context._getQueueContexts.call(this);
          for (const path9 of paths) {
            _context.setScope.call(path9), path9.debug("Inserted.");
            for (const context of contexts) context.maybeQueue(path9, true);
          }
          return paths;
        }
        function _containerInsertBefore(nodes) {
          return _containerInsert.call(this, this.key, nodes);
        }
        function _containerInsertAfter(nodes) {
          return _containerInsert.call(this, this.key + 1, nodes);
        }
        const last = (arr) => arr[arr.length - 1];
        function isHiddenInSequenceExpression(path9) {
          return isSequenceExpression(path9.parent) && (last(path9.parent.expressions) !== path9.node || isHiddenInSequenceExpression(path9.parentPath));
        }
        function updateSiblingKeys(fromIndex, incrementBy) {
          if (!this.parent) return;
          const paths = (0, _cache.getCachedPaths)(this.hub, this.parent) || [];
          for (const [, path9] of paths) "number" == typeof path9.key && path9.container === this.container && path9.key >= fromIndex && (path9.key += incrementBy);
        }
        function _verifyNodeList(nodes) {
          if (!nodes) return [];
          Array.isArray(nodes) || (nodes = [nodes]);
          for (let i2 = 0; i2 < nodes.length; i2++) {
            const node = nodes[i2];
            let msg;
            if (node ? "object" != typeof node ? msg = "contains a non-object node" : node.type ? node instanceof _index.default && (msg = "has a NodePath when it expected a raw object") : msg = "without a type" : msg = "has falsy node", msg) {
              const type = Array.isArray(node) ? "array" : typeof node;
              throw new Error(`Node list ${msg} with the index of ${i2} and type of ${type}`);
            }
          }
          return nodes;
        }
        exports2.hoist = function(scope = this.scope) {
          return new _hoister.default(this, scope).run();
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/removal.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._assertUnremoved = _assertUnremoved, exports2._callRemovalHooks = _callRemovalHooks, exports2._markRemoved = _markRemoved, exports2._remove = _remove, exports2._removeFromScope = _removeFromScope, exports2.remove = function() {
          var _this$opts;
          if (_assertUnremoved.call(this), _context.resync.call(this), _callRemovalHooks.call(this)) return void _markRemoved.call(this);
          null != (_this$opts = this.opts) && _this$opts.noScope || _removeFromScope.call(this);
          this.shareCommentsWithSiblings(), _remove.call(this), _markRemoved.call(this);
        };
        var _removalHooks = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/removal-hooks.js"), _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js"), _replacement = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/replacement.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _modification = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/modification.js"), _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
        const { getBindingIdentifiers } = _t;
        function _removeFromScope() {
          const bindings = getBindingIdentifiers(this.node, false, false, true);
          Object.keys(bindings).forEach((name) => this.scope.removeBinding(name));
        }
        function _callRemovalHooks() {
          if (this.parentPath) {
            for (const fn of _removalHooks.hooks) if (fn(this, this.parentPath)) return true;
          }
        }
        function _remove() {
          Array.isArray(this.container) ? (this.container.splice(this.key, 1), _modification.updateSiblingKeys.call(this, this.key, -1)) : _replacement._replaceWith.call(this, null);
        }
        function _markRemoved() {
          this._traverseFlags |= _index.SHOULD_SKIP | _index.REMOVED, this.parent && (0, _cache.getCachedPaths)(this.hub, this.parent).delete(this.node), this.node = null;
        }
        function _assertUnremoved() {
          if (this.removed) throw this.buildCodeFrameError("NodePath has been removed so is read-only.");
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/replacement.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._replaceWith = _replaceWith, exports2.replaceExpressionWithStatements = function(nodes) {
          _context.resync.call(this);
          const declars = [], nodesAsSingleExpression = gatherSequenceExpressions(nodes, declars);
          if (nodesAsSingleExpression) {
            for (const id of declars) this.scope.push({ id });
            return this.replaceWith(nodesAsSingleExpression)[0].get("expressions");
          }
          const functionParent = this.getFunctionParent(), isParentAsync = null == functionParent ? void 0 : functionParent.node.async, isParentGenerator = null == functionParent ? void 0 : functionParent.node.generator, container = arrowFunctionExpression([], blockStatement(nodes));
          this.replaceWith(callExpression(container, []));
          const callee = this.get("callee");
          callee.get("body").scope.hoistVariables((id) => this.scope.push({ id }));
          const completionRecords = callee.getCompletionRecords();
          for (const path9 of completionRecords) {
            if (!path9.isExpressionStatement()) continue;
            const loop = path9.findParent((path10) => path10.isLoop());
            if (loop) {
              let uid = loop.getData("expressionReplacementReturnUid");
              uid ? uid = identifier(uid.name) : (uid = callee.scope.generateDeclaredUidIdentifier("ret"), callee.get("body").pushContainer("body", returnStatement(cloneNode2(uid))), loop.setData("expressionReplacementReturnUid", uid)), path9.get("expression").replaceWith(assignmentExpression("=", cloneNode2(uid), path9.node.expression));
            } else path9.replaceWith(returnStatement(path9.node.expression));
          }
          callee.arrowFunctionToExpression();
          const newCallee = callee, needToAwaitFunction = isParentAsync && _index.default.hasType(this.get("callee.body").node, "AwaitExpression", FUNCTION_TYPES), needToYieldFunction = isParentGenerator && _index.default.hasType(this.get("callee.body").node, "YieldExpression", FUNCTION_TYPES);
          needToAwaitFunction && (newCallee.set("async", true), needToYieldFunction || this.replaceWith(awaitExpression(this.node)));
          needToYieldFunction && (newCallee.set("generator", true), this.replaceWith(yieldExpression(this.node, true)));
          return newCallee.get("body.body");
        }, exports2.replaceInline = function(nodes) {
          if (_context.resync.call(this), Array.isArray(nodes)) {
            if (Array.isArray(this.container)) {
              nodes = _modification._verifyNodeList.call(this, nodes);
              const paths = _modification._containerInsertAfter.call(this, nodes);
              return this.remove(), paths;
            }
            return this.replaceWithMultiple(nodes);
          }
          return this.replaceWith(nodes);
        }, exports2.replaceWith = function(replacementPath) {
          if (_context.resync.call(this), this.removed) throw new Error("You can't replace this node, we've already removed it");
          let replacement = replacementPath instanceof _index2.default ? replacementPath.node : replacementPath;
          if (!replacement) throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");
          if (this.node === replacement) return [this];
          if (this.isProgram() && !isProgram(replacement)) throw new Error("You can only replace a Program root node with another Program node");
          if (Array.isArray(replacement)) throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
          if ("string" == typeof replacement) throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");
          let nodePath = "";
          this.isNodeType("Statement") && isExpression(replacement) && (this.canHaveVariableDeclarationOrExpression() || this.canSwapBetweenExpressionAndStatement(replacement) || this.parentPath.isExportDefaultDeclaration() || (replacement = expressionStatement(replacement), nodePath = "expression"));
          if (this.isNodeType("Expression") && isStatement(replacement) && !this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) return this.replaceExpressionWithStatements([replacement]);
          const oldNode = this.node;
          oldNode && (inheritsComments(replacement, oldNode), removeComments(oldNode));
          return _replaceWith.call(this, replacement), this.type = replacement.type, _context.setScope.call(this), this.requeue(), [nodePath ? this.get(nodePath) : this];
        }, exports2.replaceWithMultiple = function(nodes) {
          var _getCachedPaths;
          _context.resync.call(this), nodes = _modification._verifyNodeList.call(this, nodes), inheritLeadingComments(nodes[0], this.node), inheritTrailingComments(nodes[nodes.length - 1], this.node), null == (_getCachedPaths = (0, _cache.getCachedPaths)(this.hub, this.parent)) || _getCachedPaths.delete(this.node), this.node = this.container[this.key] = null;
          const paths = this.insertAfter(nodes);
          this.node ? this.requeue() : this.remove();
          return paths;
        }, exports2.replaceWithSourceString = function(replacement) {
          let ast;
          _context.resync.call(this);
          try {
            replacement = `(${replacement})`, ast = (0, _parser.parse)(replacement);
          } catch (err) {
            const loc = err.loc;
            throw loc && (err.message += " - make sure this is an expression.\n" + (0, _codeFrame.codeFrameColumns)(replacement, { start: { line: loc.line, column: loc.column + 1 } }), err.code = "BABEL_REPLACE_SOURCE_ERROR"), err;
          }
          const expressionAST = ast.program.body[0].expression;
          return _index.default.removeProperties(expressionAST), this.replaceWith(expressionAST);
        };
        var _codeFrame = __webpack_require__2("./stubs/babel-codeframe.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js"), _modification = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/modification.js"), _parser = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.26.3/node_modules/@babel/parser/lib/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
        const { FUNCTION_TYPES, arrowFunctionExpression, assignmentExpression, awaitExpression, blockStatement, buildUndefinedNode, callExpression, cloneNode: cloneNode2, conditionalExpression, expressionStatement, getBindingIdentifiers, identifier, inheritLeadingComments, inheritTrailingComments, inheritsComments, isBlockStatement, isEmptyStatement, isExpression, isExpressionStatement, isIfStatement, isProgram, isStatement, isVariableDeclaration, removeComments, returnStatement, sequenceExpression, validate, yieldExpression } = _t;
        function _replaceWith(node) {
          var _getCachedPaths2;
          if (!this.container) throw new ReferenceError("Container is falsy");
          this.inList ? validate(this.parent, this.key, [node]) : validate(this.parent, this.key, node), this.debug(`Replace with ${null == node ? void 0 : node.type}`), null == (_getCachedPaths2 = (0, _cache.getCachedPaths)(this.hub, this.parent)) || _getCachedPaths2.set(node, this).delete(this.node), this.node = this.container[this.key] = node;
        }
        function gatherSequenceExpressions(nodes, declars) {
          const exprs = [];
          let ensureLastUndefined = true;
          for (const node of nodes) if (isEmptyStatement(node) || (ensureLastUndefined = false), isExpression(node)) exprs.push(node);
          else if (isExpressionStatement(node)) exprs.push(node.expression);
          else if (isVariableDeclaration(node)) {
            if ("var" !== node.kind) return;
            for (const declar of node.declarations) {
              const bindings = getBindingIdentifiers(declar);
              for (const key of Object.keys(bindings)) declars.push(cloneNode2(bindings[key]));
              declar.init && exprs.push(assignmentExpression("=", declar.id, declar.init));
            }
            ensureLastUndefined = true;
          } else if (isIfStatement(node)) {
            const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], declars) : buildUndefinedNode(), alternate = node.alternate ? gatherSequenceExpressions([node.alternate], declars) : buildUndefinedNode();
            if (!consequent || !alternate) return;
            exprs.push(conditionalExpression(node.test, consequent, alternate));
          } else if (isBlockStatement(node)) {
            const body = gatherSequenceExpressions(node.body, declars);
            if (!body) return;
            exprs.push(body);
          } else {
            if (!isEmptyStatement(node)) return;
            0 === nodes.indexOf(node) && (ensureLastUndefined = true);
          }
          return ensureLastUndefined && exprs.push(buildUndefinedNode()), 1 === exprs.length ? exprs[0] : sequenceExpression(exprs);
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/binding.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        exports2.default = class {
          constructor({ identifier, scope, path: path9, kind }) {
            this.identifier = void 0, this.scope = void 0, this.path = void 0, this.kind = void 0, this.constantViolations = [], this.constant = true, this.referencePaths = [], this.referenced = false, this.references = 0, this.identifier = identifier, this.scope = scope, this.path = path9, this.kind = kind, "var" !== kind && "hoisted" !== kind || !function(path10) {
              for (let { parentPath, key } = path10; parentPath; { parentPath, key } = parentPath) {
                if (parentPath.isFunctionParent()) return false;
                if (parentPath.isWhile() || parentPath.isForXStatement() || parentPath.isForStatement() && "body" === key) return true;
              }
              return false;
            }(path9) || this.reassign(path9), this.clearValue();
          }
          deoptValue() {
            this.clearValue(), this.hasDeoptedValue = true;
          }
          setValue(value2) {
            this.hasDeoptedValue || (this.hasValue = true, this.value = value2);
          }
          clearValue() {
            this.hasDeoptedValue = false, this.hasValue = false, this.value = null;
          }
          reassign(path9) {
            this.constant = false, this.constantViolations.includes(path9) || this.constantViolations.push(path9);
          }
          reference(path9) {
            this.referencePaths.includes(path9) || (this.referenced = true, this.references++, this.referencePaths.push(path9));
          }
          dereference() {
            this.references--, this.referenced = !!this.references;
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _renamer = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/lib/renamer.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js"), _binding = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/binding.js"), _globals = __webpack_require__2("./node_modules/.pnpm/globals@11.12.0/node_modules/globals/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), t2 = _t, _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js"), _visitors = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/visitors.js");
        const { NOT_LOCAL_BINDING, assignmentExpression, callExpression, cloneNode: cloneNode2, getBindingIdentifiers, identifier, isArrayExpression, isBinary, isCallExpression, isClass, isClassBody, isClassDeclaration, isExportAllDeclaration, isExportDefaultDeclaration, isExportNamedDeclaration, isFunctionDeclaration, isIdentifier: isIdentifier2, isImportDeclaration, isLiteral, isMemberExpression, isMethod, isModuleSpecifier, isNullLiteral, isObjectExpression, isProperty, isPureish, isRegExpLiteral, isSuper, isTaggedTemplateExpression, isTemplateLiteral, isThisExpression, isUnaryExpression, isVariableDeclaration, expressionStatement, matchesPattern, memberExpression, numericLiteral, toIdentifier, variableDeclaration, variableDeclarator, isRecordExpression, isTupleExpression, isObjectProperty, isTopicReference, isMetaProperty, isPrivateName, isExportDeclaration, buildUndefinedNode, sequenceExpression } = _t;
        function gatherNodeParts(node, parts) {
          switch (null == node ? void 0 : node.type) {
            default:
              var _node$specifiers;
              if (isImportDeclaration(node) || isExportDeclaration(node)) if ((isExportAllDeclaration(node) || isExportNamedDeclaration(node) || isImportDeclaration(node)) && node.source) gatherNodeParts(node.source, parts);
              else if ((isExportNamedDeclaration(node) || isImportDeclaration(node)) && null != (_node$specifiers = node.specifiers) && _node$specifiers.length) for (const e2 of node.specifiers) gatherNodeParts(e2, parts);
              else (isExportDefaultDeclaration(node) || isExportNamedDeclaration(node)) && node.declaration && gatherNodeParts(node.declaration, parts);
              else isModuleSpecifier(node) ? gatherNodeParts(node.local, parts) : !isLiteral(node) || isNullLiteral(node) || isRegExpLiteral(node) || isTemplateLiteral(node) || parts.push(node.value);
              break;
            case "MemberExpression":
            case "OptionalMemberExpression":
            case "JSXMemberExpression":
              gatherNodeParts(node.object, parts), gatherNodeParts(node.property, parts);
              break;
            case "Identifier":
            case "JSXIdentifier":
              parts.push(node.name);
              break;
            case "CallExpression":
            case "OptionalCallExpression":
            case "NewExpression":
              gatherNodeParts(node.callee, parts);
              break;
            case "ObjectExpression":
            case "ObjectPattern":
              for (const e2 of node.properties) gatherNodeParts(e2, parts);
              break;
            case "SpreadElement":
            case "RestElement":
            case "UnaryExpression":
            case "UpdateExpression":
              gatherNodeParts(node.argument, parts);
              break;
            case "ObjectProperty":
            case "ObjectMethod":
            case "ClassProperty":
            case "ClassMethod":
            case "ClassPrivateProperty":
            case "ClassPrivateMethod":
              gatherNodeParts(node.key, parts);
              break;
            case "ThisExpression":
              parts.push("this");
              break;
            case "Super":
              parts.push("super");
              break;
            case "Import":
              parts.push("import");
              break;
            case "DoExpression":
              parts.push("do");
              break;
            case "YieldExpression":
              parts.push("yield"), gatherNodeParts(node.argument, parts);
              break;
            case "AwaitExpression":
              parts.push("await"), gatherNodeParts(node.argument, parts);
              break;
            case "AssignmentExpression":
              gatherNodeParts(node.left, parts);
              break;
            case "VariableDeclarator":
            case "FunctionExpression":
            case "FunctionDeclaration":
            case "ClassExpression":
            case "ClassDeclaration":
            case "PrivateName":
              gatherNodeParts(node.id, parts);
              break;
            case "ParenthesizedExpression":
              gatherNodeParts(node.expression, parts);
              break;
            case "MetaProperty":
              gatherNodeParts(node.meta, parts), gatherNodeParts(node.property, parts);
              break;
            case "JSXElement":
              gatherNodeParts(node.openingElement, parts);
              break;
            case "JSXOpeningElement":
              gatherNodeParts(node.name, parts);
              break;
            case "JSXFragment":
              gatherNodeParts(node.openingFragment, parts);
              break;
            case "JSXOpeningFragment":
              parts.push("Fragment");
              break;
            case "JSXNamespacedName":
              gatherNodeParts(node.namespace, parts), gatherNodeParts(node.name, parts);
          }
        }
        const collectorVisitor = { ForStatement(path9) {
          const declar = path9.get("init");
          if (declar.isVar()) {
            const { scope } = path9;
            (scope.getFunctionParent() || scope.getProgramParent()).registerBinding("var", declar);
          }
        }, Declaration(path9) {
          if (path9.isBlockScoped()) return;
          if (path9.isImportDeclaration()) return;
          if (path9.isExportDeclaration()) return;
          (path9.scope.getFunctionParent() || path9.scope.getProgramParent()).registerDeclaration(path9);
        }, ImportDeclaration(path9) {
          path9.scope.getBlockParent().registerDeclaration(path9);
        }, ReferencedIdentifier(path9, state) {
          state.references.push(path9);
        }, ForXStatement(path9, state) {
          const left = path9.get("left");
          if (left.isPattern() || left.isIdentifier()) state.constantViolations.push(path9);
          else if (left.isVar()) {
            const { scope } = path9;
            (scope.getFunctionParent() || scope.getProgramParent()).registerBinding("var", left);
          }
        }, ExportDeclaration: { exit(path9) {
          const { node, scope } = path9;
          if (isExportAllDeclaration(node)) return;
          const declar = node.declaration;
          if (isClassDeclaration(declar) || isFunctionDeclaration(declar)) {
            const id = declar.id;
            if (!id) return;
            const binding = scope.getBinding(id.name);
            null == binding || binding.reference(path9);
          } else if (isVariableDeclaration(declar)) for (const decl of declar.declarations) for (const name of Object.keys(getBindingIdentifiers(decl))) {
            const binding = scope.getBinding(name);
            null == binding || binding.reference(path9);
          }
        } }, LabeledStatement(path9) {
          path9.scope.getBlockParent().registerDeclaration(path9);
        }, AssignmentExpression(path9, state) {
          state.assignments.push(path9);
        }, UpdateExpression(path9, state) {
          state.constantViolations.push(path9);
        }, UnaryExpression(path9, state) {
          "delete" === path9.node.operator && state.constantViolations.push(path9);
        }, BlockScoped(path9) {
          let scope = path9.scope;
          scope.path === path9 && (scope = scope.parent);
          if (scope.getBlockParent().registerDeclaration(path9), path9.isClassDeclaration() && path9.node.id) {
            const name = path9.node.id.name;
            path9.scope.bindings[name] = path9.scope.parent.getBinding(name);
          }
        }, CatchClause(path9) {
          path9.scope.registerBinding("let", path9);
        }, Function(path9) {
          const params = path9.get("params");
          for (const param of params) path9.scope.registerBinding("param", param);
          path9.isFunctionExpression() && path9.node.id && !path9.node.id[NOT_LOCAL_BINDING] && path9.scope.registerBinding("local", path9.get("id"), path9);
        }, ClassExpression(path9) {
          path9.node.id && !path9.node.id[NOT_LOCAL_BINDING] && path9.scope.registerBinding("local", path9.get("id"), path9);
        }, TSTypeAnnotation(path9) {
          path9.skip();
        } };
        let uid = 0;
        class Scope {
          constructor(path9) {
            this.uid = void 0, this.path = void 0, this.block = void 0, this.inited = void 0, this.labels = void 0, this.bindings = void 0, this.references = void 0, this.globals = void 0, this.uids = void 0, this.data = void 0, this.crawling = void 0;
            const { node } = path9, cached = _cache.scope.get(node);
            if ((null == cached ? void 0 : cached.path) === path9) return cached;
            _cache.scope.set(node, this), this.uid = uid++, this.block = node, this.path = path9, this.labels = /* @__PURE__ */ new Map(), this.inited = false;
          }
          get parent() {
            var _parent;
            let parent, path9 = this.path;
            do {
              var _path;
              const shouldSkip = "key" === path9.key || "decorators" === path9.listKey;
              path9 = path9.parentPath, shouldSkip && path9.isMethod() && (path9 = path9.parentPath), null != (_path = path9) && _path.isScope() && (parent = path9);
            } while (path9 && !parent);
            return null == (_parent = parent) ? void 0 : _parent.scope;
          }
          generateDeclaredUidIdentifier(name) {
            const id = this.generateUidIdentifier(name);
            return this.push({ id }), cloneNode2(id);
          }
          generateUidIdentifier(name) {
            return identifier(this.generateUid(name));
          }
          generateUid(name = "temp") {
            let uid2;
            name = toIdentifier(name).replace(/^_+/, "").replace(/\d+$/g, "");
            let i2 = 1;
            do {
              uid2 = `_${name}`, i2 > 1 && (uid2 += i2), i2++;
            } while (this.hasLabel(uid2) || this.hasBinding(uid2) || this.hasGlobal(uid2) || this.hasReference(uid2));
            const program = this.getProgramParent();
            return program.references[uid2] = true, program.uids[uid2] = true, uid2;
          }
          generateUidBasedOnNode(node, defaultName) {
            const parts = [];
            gatherNodeParts(node, parts);
            let id = parts.join("$");
            return id = id.replace(/^_/, "") || defaultName || "ref", this.generateUid(id.slice(0, 20));
          }
          generateUidIdentifierBasedOnNode(node, defaultName) {
            return identifier(this.generateUidBasedOnNode(node, defaultName));
          }
          isStatic(node) {
            if (isThisExpression(node) || isSuper(node) || isTopicReference(node)) return true;
            if (isIdentifier2(node)) {
              const binding = this.getBinding(node.name);
              return binding ? binding.constant : this.hasBinding(node.name);
            }
            return false;
          }
          maybeGenerateMemoised(node, dontPush) {
            if (this.isStatic(node)) return null;
            {
              const id = this.generateUidIdentifierBasedOnNode(node);
              return dontPush ? id : (this.push({ id }), cloneNode2(id));
            }
          }
          checkBlockScopedCollisions(local, kind, name, id) {
            if ("param" === kind) return;
            if ("local" === local.kind) return;
            if ("let" === kind || "let" === local.kind || "const" === local.kind || "module" === local.kind || "param" === local.kind && "const" === kind) throw this.path.hub.buildError(id, `Duplicate declaration "${name}"`, TypeError);
          }
          rename(oldName, newName) {
            const binding = this.getBinding(oldName);
            if (binding) {
              newName || (newName = this.generateUidIdentifier(oldName).name);
              new _renamer.default(binding, oldName, newName).rename(arguments[2]);
            }
          }
          dump() {
            const sep = "-".repeat(60);
            console.log(sep);
            let scope = this;
            do {
              console.log("#", scope.block.type);
              for (const name of Object.keys(scope.bindings)) {
                const binding = scope.bindings[name];
                console.log(" -", name, { constant: binding.constant, references: binding.references, violations: binding.constantViolations.length, kind: binding.kind });
              }
            } while (scope = scope.parent);
            console.log(sep);
          }
          hasLabel(name) {
            return !!this.getLabel(name);
          }
          getLabel(name) {
            return this.labels.get(name);
          }
          registerLabel(path9) {
            this.labels.set(path9.node.label.name, path9);
          }
          registerDeclaration(path9) {
            if (path9.isLabeledStatement()) this.registerLabel(path9);
            else if (path9.isFunctionDeclaration()) this.registerBinding("hoisted", path9.get("id"), path9);
            else if (path9.isVariableDeclaration()) {
              const declarations = path9.get("declarations"), { kind } = path9.node;
              for (const declar of declarations) this.registerBinding("using" === kind || "await using" === kind ? "const" : kind, declar);
            } else if (path9.isClassDeclaration()) {
              if (path9.node.declare) return;
              this.registerBinding("let", path9);
            } else if (path9.isImportDeclaration()) {
              const isTypeDeclaration = "type" === path9.node.importKind || "typeof" === path9.node.importKind, specifiers = path9.get("specifiers");
              for (const specifier of specifiers) {
                const isTypeSpecifier = isTypeDeclaration || specifier.isImportSpecifier() && ("type" === specifier.node.importKind || "typeof" === specifier.node.importKind);
                this.registerBinding(isTypeSpecifier ? "unknown" : "module", specifier);
              }
            } else if (path9.isExportDeclaration()) {
              const declar = path9.get("declaration");
              (declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) && this.registerDeclaration(declar);
            } else this.registerBinding("unknown", path9);
          }
          buildUndefinedNode() {
            return buildUndefinedNode();
          }
          registerConstantViolation(path9) {
            const ids = path9.getAssignmentIdentifiers();
            for (const name of Object.keys(ids)) {
              var _this$getBinding;
              null == (_this$getBinding = this.getBinding(name)) || _this$getBinding.reassign(path9);
            }
          }
          registerBinding(kind, path9, bindingPath = path9) {
            if (!kind) throw new ReferenceError("no `kind`");
            if (path9.isVariableDeclaration()) {
              const declarators = path9.get("declarations");
              for (const declar of declarators) this.registerBinding(kind, declar);
              return;
            }
            const parent = this.getProgramParent(), ids = path9.getOuterBindingIdentifiers(true);
            for (const name of Object.keys(ids)) {
              parent.references[name] = true;
              for (const id of ids[name]) {
                const local = this.getOwnBinding(name);
                if (local) {
                  if (local.identifier === id) continue;
                  this.checkBlockScopedCollisions(local, kind, name, id);
                }
                local ? local.reassign(bindingPath) : this.bindings[name] = new _binding.default({ identifier: id, scope: this, path: bindingPath, kind });
              }
            }
          }
          addGlobal(node) {
            this.globals[node.name] = node;
          }
          hasUid(name) {
            let scope = this;
            do {
              if (scope.uids[name]) return true;
            } while (scope = scope.parent);
            return false;
          }
          hasGlobal(name) {
            let scope = this;
            do {
              if (scope.globals[name]) return true;
            } while (scope = scope.parent);
            return false;
          }
          hasReference(name) {
            return !!this.getProgramParent().references[name];
          }
          isPure(node, constantsOnly) {
            if (isIdentifier2(node)) {
              const binding = this.getBinding(node.name);
              return !!binding && (!constantsOnly || binding.constant);
            }
            if (isThisExpression(node) || isMetaProperty(node) || isTopicReference(node) || isPrivateName(node)) return true;
            var _node$decorators, _node$decorators2, _node$decorators3;
            if (isClass(node)) return !(node.superClass && !this.isPure(node.superClass, constantsOnly)) && (!((null == (_node$decorators = node.decorators) ? void 0 : _node$decorators.length) > 0) && this.isPure(node.body, constantsOnly));
            if (isClassBody(node)) {
              for (const method of node.body) if (!this.isPure(method, constantsOnly)) return false;
              return true;
            }
            if (isBinary(node)) return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);
            if (isArrayExpression(node) || isTupleExpression(node)) {
              for (const elem of node.elements) if (null !== elem && !this.isPure(elem, constantsOnly)) return false;
              return true;
            }
            if (isObjectExpression(node) || isRecordExpression(node)) {
              for (const prop of node.properties) if (!this.isPure(prop, constantsOnly)) return false;
              return true;
            }
            if (isMethod(node)) return !(node.computed && !this.isPure(node.key, constantsOnly)) && !((null == (_node$decorators2 = node.decorators) ? void 0 : _node$decorators2.length) > 0);
            if (isProperty(node)) return !(node.computed && !this.isPure(node.key, constantsOnly)) && (!((null == (_node$decorators3 = node.decorators) ? void 0 : _node$decorators3.length) > 0) && !((isObjectProperty(node) || node.static) && null !== node.value && !this.isPure(node.value, constantsOnly)));
            if (isUnaryExpression(node)) return this.isPure(node.argument, constantsOnly);
            if (isTemplateLiteral(node)) {
              for (const expression of node.expressions) if (!this.isPure(expression, constantsOnly)) return false;
              return true;
            }
            return isTaggedTemplateExpression(node) ? matchesPattern(node.tag, "String.raw") && !this.hasBinding("String", { noGlobals: true }) && this.isPure(node.quasi, constantsOnly) : isMemberExpression(node) ? !node.computed && isIdentifier2(node.object) && "Symbol" === node.object.name && isIdentifier2(node.property) && "for" !== node.property.name && !this.hasBinding("Symbol", { noGlobals: true }) : isCallExpression(node) ? matchesPattern(node.callee, "Symbol.for") && !this.hasBinding("Symbol", { noGlobals: true }) && 1 === node.arguments.length && t2.isStringLiteral(node.arguments[0]) : isPureish(node);
          }
          setData(key, val) {
            return this.data[key] = val;
          }
          getData(key) {
            let scope = this;
            do {
              const data = scope.data[key];
              if (null != data) return data;
            } while (scope = scope.parent);
          }
          removeData(key) {
            let scope = this;
            do {
              null != scope.data[key] && (scope.data[key] = null);
            } while (scope = scope.parent);
          }
          init() {
            this.inited || (this.inited = true, this.crawl());
          }
          crawl() {
            const path9 = this.path;
            this.references = /* @__PURE__ */ Object.create(null), this.bindings = /* @__PURE__ */ Object.create(null), this.globals = /* @__PURE__ */ Object.create(null), this.uids = /* @__PURE__ */ Object.create(null), this.data = /* @__PURE__ */ Object.create(null);
            let scope = this;
            do {
              if (scope.crawling) return;
              if (scope.path.isProgram()) break;
            } while (scope = scope.parent);
            const programParent = scope, state = { references: [], constantViolations: [], assignments: [] };
            if (this.crawling = true, "Program" !== path9.type && (0, _visitors.isExplodedVisitor)(collectorVisitor)) {
              for (const visit of collectorVisitor.enter) visit.call(state, path9, state);
              const typeVisitors = collectorVisitor[path9.type];
              if (typeVisitors) for (const visit of typeVisitors.enter) visit.call(state, path9, state);
            }
            path9.traverse(collectorVisitor, state), this.crawling = false;
            for (const path10 of state.assignments) {
              const ids = path10.getAssignmentIdentifiers();
              for (const name of Object.keys(ids)) path10.scope.getBinding(name) || programParent.addGlobal(ids[name]);
              path10.scope.registerConstantViolation(path10);
            }
            for (const ref of state.references) {
              const binding = ref.scope.getBinding(ref.node.name);
              binding ? binding.reference(ref) : programParent.addGlobal(ref.node);
            }
            for (const path10 of state.constantViolations) path10.scope.registerConstantViolation(path10);
          }
          push(opts) {
            let path9 = this.path;
            path9.isPattern() ? path9 = this.getPatternParent().path : path9.isBlockStatement() || path9.isProgram() || (path9 = this.getBlockParent().path), path9.isSwitchStatement() && (path9 = (this.getFunctionParent() || this.getProgramParent()).path);
            const { init, unique, kind = "var", id } = opts;
            if (!init && !unique && ("var" === kind || "let" === kind) && path9.isFunction() && !path9.node.name && isCallExpression(path9.parent, { callee: path9.node }) && path9.parent.arguments.length <= path9.node.params.length && isIdentifier2(id)) return path9.pushContainer("params", id), void path9.scope.registerBinding("param", path9.get("params")[path9.node.params.length - 1]);
            (path9.isLoop() || path9.isCatchClause() || path9.isFunction()) && (path9.ensureBlock(), path9 = path9.get("body"));
            const blockHoist = null == opts._blockHoist ? 2 : opts._blockHoist, dataKey = `declaration:${kind}:${blockHoist}`;
            let declarPath = !unique && path9.getData(dataKey);
            if (!declarPath) {
              const declar = variableDeclaration(kind, []);
              declar._blockHoist = blockHoist, [declarPath] = path9.unshiftContainer("body", [declar]), unique || path9.setData(dataKey, declarPath);
            }
            const declarator = variableDeclarator(id, init), len = declarPath.node.declarations.push(declarator);
            path9.scope.registerBinding(kind, declarPath.get("declarations")[len - 1]);
          }
          getProgramParent() {
            let scope = this;
            do {
              if (scope.path.isProgram()) return scope;
            } while (scope = scope.parent);
            throw new Error("Couldn't find a Program");
          }
          getFunctionParent() {
            let scope = this;
            do {
              if (scope.path.isFunctionParent()) return scope;
            } while (scope = scope.parent);
            return null;
          }
          getBlockParent() {
            let scope = this;
            do {
              if (scope.path.isBlockParent()) return scope;
            } while (scope = scope.parent);
            throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
          }
          getPatternParent() {
            let scope = this;
            do {
              if (!scope.path.isPattern()) return scope.getBlockParent();
            } while (scope = scope.parent.parent);
            throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
          }
          getAllBindings() {
            const ids = /* @__PURE__ */ Object.create(null);
            let scope = this;
            do {
              for (const key of Object.keys(scope.bindings)) key in ids == false && (ids[key] = scope.bindings[key]);
              scope = scope.parent;
            } while (scope);
            return ids;
          }
          bindingIdentifierEquals(name, node) {
            return this.getBindingIdentifier(name) === node;
          }
          getBinding(name) {
            let previousPath, scope = this;
            do {
              const binding = scope.getOwnBinding(name);
              var _previousPath;
              if (binding) {
                if (null == (_previousPath = previousPath) || !_previousPath.isPattern() || "param" === binding.kind || "local" === binding.kind) return binding;
              } else if (!binding && "arguments" === name && scope.path.isFunction() && !scope.path.isArrowFunctionExpression()) break;
              previousPath = scope.path;
            } while (scope = scope.parent);
          }
          getOwnBinding(name) {
            return this.bindings[name];
          }
          getBindingIdentifier(name) {
            var _this$getBinding2;
            return null == (_this$getBinding2 = this.getBinding(name)) ? void 0 : _this$getBinding2.identifier;
          }
          getOwnBindingIdentifier(name) {
            const binding = this.bindings[name];
            return null == binding ? void 0 : binding.identifier;
          }
          hasOwnBinding(name) {
            return !!this.getOwnBinding(name);
          }
          hasBinding(name, opts) {
            if (!name) return false;
            let noGlobals, noUids, scope = this;
            do {
              if (scope.hasOwnBinding(name)) return true;
            } while (scope = scope.parent);
            return "object" == typeof opts ? (noGlobals = opts.noGlobals, noUids = opts.noUids) : "boolean" == typeof opts && (noGlobals = opts), !(noUids || !this.hasUid(name)) || (!(noGlobals || !Scope.globals.includes(name)) || !(noGlobals || !Scope.contextVariables.includes(name)));
          }
          parentHasBinding(name, opts) {
            var _this$parent;
            return null == (_this$parent = this.parent) ? void 0 : _this$parent.hasBinding(name, opts);
          }
          moveBindingTo(name, scope) {
            const info = this.getBinding(name);
            info && (info.scope.removeOwnBinding(name), info.scope = scope, scope.bindings[name] = info);
          }
          removeOwnBinding(name) {
            delete this.bindings[name];
          }
          removeBinding(name) {
            var _this$getBinding3;
            null == (_this$getBinding3 = this.getBinding(name)) || _this$getBinding3.scope.removeOwnBinding(name);
            let scope = this;
            do {
              scope.uids[name] && (scope.uids[name] = false);
            } while (scope = scope.parent);
          }
          hoistVariables(emit = (id) => this.push({ id })) {
            this.crawl();
            const seen = /* @__PURE__ */ new Set();
            for (const name of Object.keys(this.bindings)) {
              const binding = this.bindings[name];
              if (!binding) continue;
              const { path: path9 } = binding;
              if (!path9.isVariableDeclarator()) continue;
              const { parent, parentPath } = path9;
              if ("var" !== parent.kind || seen.has(parent)) continue;
              let firstId;
              seen.add(path9.parent);
              const init = [];
              for (const decl of parent.declarations) {
                null != firstId || (firstId = decl.id), decl.init && init.push(assignmentExpression("=", decl.id, decl.init));
                const ids = Object.keys(getBindingIdentifiers(decl, false, true, true));
                for (const name2 of ids) emit(identifier(name2), null != decl.init);
              }
              if (parentPath.parentPath.isFor({ left: parent })) parentPath.replaceWith(firstId);
              else if (0 === init.length) parentPath.remove();
              else {
                const expr = 1 === init.length ? init[0] : sequenceExpression(init);
                parentPath.parentPath.isForStatement({ init: parent }) ? parentPath.replaceWith(expr) : parentPath.replaceWith(expressionStatement(expr));
              }
            }
          }
        }
        exports2.default = Scope, Scope.globals = Object.keys(_globals.builtin), Scope.contextVariables = ["arguments", "undefined", "Infinity", "NaN"], Scope.prototype._renameFromMap = function(map, oldName, newName, value2) {
          map[oldName] && (map[newName] = value2, map[oldName] = null);
        }, Scope.prototype.traverse = function(node, opts, state) {
          (0, _index.default)(node, opts, this, state, this.path);
        }, Scope.prototype._generateUid = function(name, i2) {
          let id = name;
          return i2 > 1 && (id += i2), `_${id}`;
        }, Scope.prototype.toArray = function(node, i2, arrayLikeIsIterable) {
          if (isIdentifier2(node)) {
            const binding = this.getBinding(node.name);
            if (null != binding && binding.constant && binding.path.isGenericType("Array")) return node;
          }
          if (isArrayExpression(node)) return node;
          if (isIdentifier2(node, { name: "arguments" })) return callExpression(memberExpression(memberExpression(memberExpression(identifier("Array"), identifier("prototype")), identifier("slice")), identifier("call")), [node]);
          let helperName;
          const args = [node];
          return true === i2 ? helperName = "toConsumableArray" : "number" == typeof i2 ? (args.push(numericLiteral(i2)), helperName = "slicedToArray") : helperName = "toArray", arrayLikeIsIterable && (args.unshift(this.path.hub.addHelper(helperName)), helperName = "maybeArrayLike"), callExpression(this.path.hub.addHelper(helperName), args);
        }, Scope.prototype.getAllBindingsOfKind = function(...kinds) {
          const ids = /* @__PURE__ */ Object.create(null);
          for (const kind of kinds) {
            let scope = this;
            do {
              for (const name of Object.keys(scope.bindings)) {
                const binding = scope.bindings[name];
                binding.kind === kind && (ids[name] = binding);
              }
              scope = scope.parent;
            } while (scope);
          }
          return ids;
        }, Object.defineProperties(Scope.prototype, { parentBlock: { configurable: true, enumerable: true, get() {
          return this.path.parent;
        } }, hub: { configurable: true, enumerable: true, get() {
          return this.path.hub;
        } } });
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/lib/renamer.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var t2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _t = t2, _traverseNode = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/traverse-node.js"), _visitors = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/visitors.js"), _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
        const { getAssignmentIdentifiers } = _t, renameVisitor = { ReferencedIdentifier({ node }, state) {
          node.name === state.oldName && (node.name = state.newName);
        }, Scope(path9, state) {
          path9.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier) || (path9.skip(), path9.isMethod() && (path9.requeueComputedKeyAndDecorators ? path9.requeueComputedKeyAndDecorators() : _context.requeueComputedKeyAndDecorators.call(path9)));
        }, ObjectProperty({ node, scope }, state) {
          const { name } = node.key;
          var _node$extra;
          !node.shorthand || name !== state.oldName && name !== state.newName || scope.getBindingIdentifier(name) !== state.binding.identifier || (node.shorthand = false, null != (_node$extra = node.extra) && _node$extra.shorthand && (node.extra.shorthand = false));
        }, "AssignmentExpression|Declaration|VariableDeclarator"(path9, state) {
          if (path9.isVariableDeclaration()) return;
          const ids = path9.isAssignmentExpression() ? getAssignmentIdentifiers(path9.node) : path9.getOuterBindingIdentifiers();
          for (const name in ids) name === state.oldName && (ids[name].name = state.newName);
        } };
        exports2.default = class {
          constructor(binding, oldName, newName) {
            this.newName = newName, this.oldName = oldName, this.binding = binding;
          }
          maybeConvertFromExportDeclaration(parentDeclar) {
            const maybeExportDeclar = parentDeclar.parentPath;
            if (maybeExportDeclar.isExportDeclaration()) {
              if (maybeExportDeclar.isExportDefaultDeclaration()) {
                const { declaration } = maybeExportDeclar.node;
                if (t2.isDeclaration(declaration) && !declaration.id) return;
              }
              maybeExportDeclar.isExportAllDeclaration() || maybeExportDeclar.splitExportDeclaration();
            }
          }
          maybeConvertFromClassFunctionDeclaration(path9) {
            return path9;
          }
          maybeConvertFromClassFunctionExpression(path9) {
            return path9;
          }
          rename() {
            const { binding, oldName, newName } = this, { scope, path: path9 } = binding, parentDeclar = path9.find((path10) => path10.isDeclaration() || path10.isFunctionExpression() || path10.isClassExpression());
            if (parentDeclar) {
              parentDeclar.getOuterBindingIdentifiers()[oldName] === binding.identifier && this.maybeConvertFromExportDeclaration(parentDeclar);
            }
            const blockToTraverse = arguments[0] || scope.block, skipKeys = { discriminant: true };
            t2.isMethod(blockToTraverse) && (blockToTraverse.computed && (skipKeys.key = true), t2.isObjectMethod(blockToTraverse) || (skipKeys.decorators = true)), (0, _traverseNode.traverseNode)(blockToTraverse, (0, _visitors.explode)(renameVisitor), scope, this, scope.path, skipKeys), arguments[0] || (scope.removeOwnBinding(oldName), scope.bindings[newName] = binding, this.binding.identifier.name = newName), parentDeclar && (this.maybeConvertFromClassFunctionDeclaration(path9), this.maybeConvertFromClassFunctionExpression(path9));
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/traverse-node.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.traverseNode = function(node, opts, scope, state, path9, skipKeys, visitSelf) {
          const keys = VISITOR_KEYS[node.type];
          if (!keys) return false;
          const context = new _context.default(scope, opts, state, path9);
          if (visitSelf) return (null == skipKeys || !skipKeys[path9.parentKey]) && context.visitQueue([path9]);
          for (const key of keys) if ((null == skipKeys || !skipKeys[key]) && context.visit(node, key)) return true;
          return false;
        };
        var _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/context.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        const { VISITOR_KEYS } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/visitors.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.environmentVisitor = function(visitor) {
          return merge([_environmentVisitor, visitor]);
        }, exports2.explode = explode$1, exports2.isExplodedVisitor = isExplodedVisitor, exports2.merge = merge, exports2.verify = verify$1;
        var virtualTypes = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/virtual-types.js"), virtualTypesValidators = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
        const { DEPRECATED_KEYS, DEPRECATED_ALIASES, FLIPPED_ALIAS_KEYS, TYPES, __internal__deprecationWarning: deprecationWarning } = _t;
        function isExplodedVisitor(visitor) {
          return null == visitor ? void 0 : visitor._exploded;
        }
        function explode$1(visitor) {
          if (isExplodedVisitor(visitor)) return visitor;
          visitor._exploded = true;
          for (const nodeType of Object.keys(visitor)) {
            if (shouldIgnoreKey(nodeType)) continue;
            const parts = nodeType.split("|");
            if (1 === parts.length) continue;
            const fns = visitor[nodeType];
            delete visitor[nodeType];
            for (const part of parts) visitor[part] = fns;
          }
          verify$1(visitor), delete visitor.__esModule, function(obj) {
            for (const key of Object.keys(obj)) {
              if (shouldIgnoreKey(key)) continue;
              const fns = obj[key];
              "function" == typeof fns && (obj[key] = { enter: fns });
            }
          }(visitor), ensureCallbackArrays(visitor);
          for (const nodeType of Object.keys(visitor)) {
            if (shouldIgnoreKey(nodeType)) continue;
            if (!(nodeType in virtualTypes)) continue;
            const fns = visitor[nodeType];
            for (const type of Object.keys(fns)) fns[type] = wrapCheck(nodeType, fns[type]);
            delete visitor[nodeType];
            const types = virtualTypes[nodeType];
            if (null !== types) for (const type of types) visitor[type] ? mergePair(visitor[type], fns) : visitor[type] = fns;
            else mergePair(visitor, fns);
          }
          for (const nodeType of Object.keys(visitor)) {
            if (shouldIgnoreKey(nodeType)) continue;
            let aliases = FLIPPED_ALIAS_KEYS[nodeType];
            if (nodeType in DEPRECATED_KEYS) {
              const deprecatedKey = DEPRECATED_KEYS[nodeType];
              deprecationWarning(nodeType, deprecatedKey, "Visitor "), aliases = [deprecatedKey];
            } else if (nodeType in DEPRECATED_ALIASES) {
              const deprecatedAlias = DEPRECATED_ALIASES[nodeType];
              deprecationWarning(nodeType, deprecatedAlias, "Visitor "), aliases = FLIPPED_ALIAS_KEYS[deprecatedAlias];
            }
            if (!aliases) continue;
            const fns = visitor[nodeType];
            delete visitor[nodeType];
            for (const alias of aliases) {
              const existing = visitor[alias];
              existing ? mergePair(existing, fns) : visitor[alias] = Object.assign({}, fns);
            }
          }
          for (const nodeType of Object.keys(visitor)) shouldIgnoreKey(nodeType) || ensureCallbackArrays(visitor[nodeType]);
          return visitor;
        }
        function verify$1(visitor) {
          if (!visitor._verified) {
            if ("function" == typeof visitor) throw new Error("You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Function }`?");
            for (const nodeType of Object.keys(visitor)) {
              if ("enter" !== nodeType && "exit" !== nodeType || validateVisitorMethods(nodeType, visitor[nodeType]), shouldIgnoreKey(nodeType)) continue;
              if (!TYPES.includes(nodeType)) throw new Error(`You gave us a visitor for the node type ${nodeType} but it's not a valid type in @babel/traverse 7.26.4`);
              const visitors = visitor[nodeType];
              if ("object" == typeof visitors) for (const visitorKey of Object.keys(visitors)) {
                if ("enter" !== visitorKey && "exit" !== visitorKey) throw new Error(`You passed \`traverse()\` a visitor object with the property ${nodeType} that has the invalid property ${visitorKey}`);
                validateVisitorMethods(`${nodeType}.${visitorKey}`, visitors[visitorKey]);
              }
            }
            visitor._verified = true;
          }
        }
        function validateVisitorMethods(path9, val) {
          const fns = [].concat(val);
          for (const fn of fns) if ("function" != typeof fn) throw new TypeError(`Non-function found defined in ${path9} with type ${typeof fn}`);
        }
        function merge(visitors, states = [], wrapper) {
          const mergedVisitor = { _verified: true, _exploded: true };
          Object.defineProperty(mergedVisitor, "_exploded", { enumerable: false }), Object.defineProperty(mergedVisitor, "_verified", { enumerable: false });
          for (let i2 = 0; i2 < visitors.length; i2++) {
            const visitor = explode$1(visitors[i2]), state = states[i2];
            let topVisitor = visitor;
            (state || wrapper) && (topVisitor = wrapWithStateOrWrapper(topVisitor, state, wrapper)), mergePair(mergedVisitor, topVisitor);
            for (const key of Object.keys(visitor)) {
              if (shouldIgnoreKey(key)) continue;
              let typeVisitor = visitor[key];
              (state || wrapper) && (typeVisitor = wrapWithStateOrWrapper(typeVisitor, state, wrapper));
              mergePair(mergedVisitor[key] || (mergedVisitor[key] = {}), typeVisitor);
            }
          }
          return mergedVisitor;
        }
        function wrapWithStateOrWrapper(oldVisitor, state, wrapper) {
          const newVisitor = {};
          for (const phase of ["enter", "exit"]) {
            let fns = oldVisitor[phase];
            Array.isArray(fns) && (fns = fns.map(function(fn) {
              let newFn = fn;
              return state && (newFn = function(path9) {
                fn.call(state, path9, state);
              }), wrapper && (newFn = wrapper(null == state ? void 0 : state.key, phase, newFn)), newFn !== fn && (newFn.toString = () => fn.toString()), newFn;
            }), newVisitor[phase] = fns);
          }
          return newVisitor;
        }
        function ensureCallbackArrays(obj) {
          obj.enter && !Array.isArray(obj.enter) && (obj.enter = [obj.enter]), obj.exit && !Array.isArray(obj.exit) && (obj.exit = [obj.exit]);
        }
        function wrapCheck(nodeType, fn) {
          const validator = virtualTypesValidators[`is${nodeType}`], newFn = function(path9) {
            if (validator.call(path9)) return fn.apply(this, arguments);
          };
          return newFn.toString = () => fn.toString(), newFn;
        }
        function shouldIgnoreKey(key) {
          return "_" === key[0] || ("enter" === key || "exit" === key || "shouldSkip" === key || ("denylist" === key || "noScope" === key || "skipKeys" === key || "blacklist" === key));
        }
        function mergePair(dest, src) {
          for (const phase of ["enter", "exit"]) src[phase] && (dest[phase] = [].concat(dest[phase] || [], src[phase]));
        }
        const _environmentVisitor = { FunctionParent(path9) {
          path9.isArrowFunctionExpression() || (path9.skip(), path9.isMethod() && (path9.requeueComputedKeyAndDecorators ? path9.requeueComputedKeyAndDecorators() : _context.requeueComputedKeyAndDecorators.call(path9)));
        }, Property(path9) {
          path9.isObjectProperty() || (path9.skip(), path9.requeueComputedKeyAndDecorators ? path9.requeueComputedKeyAndDecorators() : _context.requeueComputedKeyAndDecorators.call(path9));
        } };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/asserts/assertNode.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          if (!(0, _isNode.default)(node)) {
            var _node$type;
            const type = null != (_node$type = null == node ? void 0 : node.type) ? _node$type : JSON.stringify(node);
            throw new TypeError(`Not a valid node of type "${type}"`);
          }
        };
        var _isNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/asserts/generated/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.assertAccessor = function(node, opts) {
          assert("Accessor", node, opts);
        }, exports2.assertAnyTypeAnnotation = function(node, opts) {
          assert("AnyTypeAnnotation", node, opts);
        }, exports2.assertArgumentPlaceholder = function(node, opts) {
          assert("ArgumentPlaceholder", node, opts);
        }, exports2.assertArrayExpression = function(node, opts) {
          assert("ArrayExpression", node, opts);
        }, exports2.assertArrayPattern = function(node, opts) {
          assert("ArrayPattern", node, opts);
        }, exports2.assertArrayTypeAnnotation = function(node, opts) {
          assert("ArrayTypeAnnotation", node, opts);
        }, exports2.assertArrowFunctionExpression = function(node, opts) {
          assert("ArrowFunctionExpression", node, opts);
        }, exports2.assertAssignmentExpression = function(node, opts) {
          assert("AssignmentExpression", node, opts);
        }, exports2.assertAssignmentPattern = function(node, opts) {
          assert("AssignmentPattern", node, opts);
        }, exports2.assertAwaitExpression = function(node, opts) {
          assert("AwaitExpression", node, opts);
        }, exports2.assertBigIntLiteral = function(node, opts) {
          assert("BigIntLiteral", node, opts);
        }, exports2.assertBinary = function(node, opts) {
          assert("Binary", node, opts);
        }, exports2.assertBinaryExpression = function(node, opts) {
          assert("BinaryExpression", node, opts);
        }, exports2.assertBindExpression = function(node, opts) {
          assert("BindExpression", node, opts);
        }, exports2.assertBlock = function(node, opts) {
          assert("Block", node, opts);
        }, exports2.assertBlockParent = function(node, opts) {
          assert("BlockParent", node, opts);
        }, exports2.assertBlockStatement = function(node, opts) {
          assert("BlockStatement", node, opts);
        }, exports2.assertBooleanLiteral = function(node, opts) {
          assert("BooleanLiteral", node, opts);
        }, exports2.assertBooleanLiteralTypeAnnotation = function(node, opts) {
          assert("BooleanLiteralTypeAnnotation", node, opts);
        }, exports2.assertBooleanTypeAnnotation = function(node, opts) {
          assert("BooleanTypeAnnotation", node, opts);
        }, exports2.assertBreakStatement = function(node, opts) {
          assert("BreakStatement", node, opts);
        }, exports2.assertCallExpression = function(node, opts) {
          assert("CallExpression", node, opts);
        }, exports2.assertCatchClause = function(node, opts) {
          assert("CatchClause", node, opts);
        }, exports2.assertClass = function(node, opts) {
          assert("Class", node, opts);
        }, exports2.assertClassAccessorProperty = function(node, opts) {
          assert("ClassAccessorProperty", node, opts);
        }, exports2.assertClassBody = function(node, opts) {
          assert("ClassBody", node, opts);
        }, exports2.assertClassDeclaration = function(node, opts) {
          assert("ClassDeclaration", node, opts);
        }, exports2.assertClassExpression = function(node, opts) {
          assert("ClassExpression", node, opts);
        }, exports2.assertClassImplements = function(node, opts) {
          assert("ClassImplements", node, opts);
        }, exports2.assertClassMethod = function(node, opts) {
          assert("ClassMethod", node, opts);
        }, exports2.assertClassPrivateMethod = function(node, opts) {
          assert("ClassPrivateMethod", node, opts);
        }, exports2.assertClassPrivateProperty = function(node, opts) {
          assert("ClassPrivateProperty", node, opts);
        }, exports2.assertClassProperty = function(node, opts) {
          assert("ClassProperty", node, opts);
        }, exports2.assertCompletionStatement = function(node, opts) {
          assert("CompletionStatement", node, opts);
        }, exports2.assertConditional = function(node, opts) {
          assert("Conditional", node, opts);
        }, exports2.assertConditionalExpression = function(node, opts) {
          assert("ConditionalExpression", node, opts);
        }, exports2.assertContinueStatement = function(node, opts) {
          assert("ContinueStatement", node, opts);
        }, exports2.assertDebuggerStatement = function(node, opts) {
          assert("DebuggerStatement", node, opts);
        }, exports2.assertDecimalLiteral = function(node, opts) {
          assert("DecimalLiteral", node, opts);
        }, exports2.assertDeclaration = function(node, opts) {
          assert("Declaration", node, opts);
        }, exports2.assertDeclareClass = function(node, opts) {
          assert("DeclareClass", node, opts);
        }, exports2.assertDeclareExportAllDeclaration = function(node, opts) {
          assert("DeclareExportAllDeclaration", node, opts);
        }, exports2.assertDeclareExportDeclaration = function(node, opts) {
          assert("DeclareExportDeclaration", node, opts);
        }, exports2.assertDeclareFunction = function(node, opts) {
          assert("DeclareFunction", node, opts);
        }, exports2.assertDeclareInterface = function(node, opts) {
          assert("DeclareInterface", node, opts);
        }, exports2.assertDeclareModule = function(node, opts) {
          assert("DeclareModule", node, opts);
        }, exports2.assertDeclareModuleExports = function(node, opts) {
          assert("DeclareModuleExports", node, opts);
        }, exports2.assertDeclareOpaqueType = function(node, opts) {
          assert("DeclareOpaqueType", node, opts);
        }, exports2.assertDeclareTypeAlias = function(node, opts) {
          assert("DeclareTypeAlias", node, opts);
        }, exports2.assertDeclareVariable = function(node, opts) {
          assert("DeclareVariable", node, opts);
        }, exports2.assertDeclaredPredicate = function(node, opts) {
          assert("DeclaredPredicate", node, opts);
        }, exports2.assertDecorator = function(node, opts) {
          assert("Decorator", node, opts);
        }, exports2.assertDirective = function(node, opts) {
          assert("Directive", node, opts);
        }, exports2.assertDirectiveLiteral = function(node, opts) {
          assert("DirectiveLiteral", node, opts);
        }, exports2.assertDoExpression = function(node, opts) {
          assert("DoExpression", node, opts);
        }, exports2.assertDoWhileStatement = function(node, opts) {
          assert("DoWhileStatement", node, opts);
        }, exports2.assertEmptyStatement = function(node, opts) {
          assert("EmptyStatement", node, opts);
        }, exports2.assertEmptyTypeAnnotation = function(node, opts) {
          assert("EmptyTypeAnnotation", node, opts);
        }, exports2.assertEnumBody = function(node, opts) {
          assert("EnumBody", node, opts);
        }, exports2.assertEnumBooleanBody = function(node, opts) {
          assert("EnumBooleanBody", node, opts);
        }, exports2.assertEnumBooleanMember = function(node, opts) {
          assert("EnumBooleanMember", node, opts);
        }, exports2.assertEnumDeclaration = function(node, opts) {
          assert("EnumDeclaration", node, opts);
        }, exports2.assertEnumDefaultedMember = function(node, opts) {
          assert("EnumDefaultedMember", node, opts);
        }, exports2.assertEnumMember = function(node, opts) {
          assert("EnumMember", node, opts);
        }, exports2.assertEnumNumberBody = function(node, opts) {
          assert("EnumNumberBody", node, opts);
        }, exports2.assertEnumNumberMember = function(node, opts) {
          assert("EnumNumberMember", node, opts);
        }, exports2.assertEnumStringBody = function(node, opts) {
          assert("EnumStringBody", node, opts);
        }, exports2.assertEnumStringMember = function(node, opts) {
          assert("EnumStringMember", node, opts);
        }, exports2.assertEnumSymbolBody = function(node, opts) {
          assert("EnumSymbolBody", node, opts);
        }, exports2.assertExistsTypeAnnotation = function(node, opts) {
          assert("ExistsTypeAnnotation", node, opts);
        }, exports2.assertExportAllDeclaration = function(node, opts) {
          assert("ExportAllDeclaration", node, opts);
        }, exports2.assertExportDeclaration = function(node, opts) {
          assert("ExportDeclaration", node, opts);
        }, exports2.assertExportDefaultDeclaration = function(node, opts) {
          assert("ExportDefaultDeclaration", node, opts);
        }, exports2.assertExportDefaultSpecifier = function(node, opts) {
          assert("ExportDefaultSpecifier", node, opts);
        }, exports2.assertExportNamedDeclaration = function(node, opts) {
          assert("ExportNamedDeclaration", node, opts);
        }, exports2.assertExportNamespaceSpecifier = function(node, opts) {
          assert("ExportNamespaceSpecifier", node, opts);
        }, exports2.assertExportSpecifier = function(node, opts) {
          assert("ExportSpecifier", node, opts);
        }, exports2.assertExpression = function(node, opts) {
          assert("Expression", node, opts);
        }, exports2.assertExpressionStatement = function(node, opts) {
          assert("ExpressionStatement", node, opts);
        }, exports2.assertExpressionWrapper = function(node, opts) {
          assert("ExpressionWrapper", node, opts);
        }, exports2.assertFile = function(node, opts) {
          assert("File", node, opts);
        }, exports2.assertFlow = function(node, opts) {
          assert("Flow", node, opts);
        }, exports2.assertFlowBaseAnnotation = function(node, opts) {
          assert("FlowBaseAnnotation", node, opts);
        }, exports2.assertFlowDeclaration = function(node, opts) {
          assert("FlowDeclaration", node, opts);
        }, exports2.assertFlowPredicate = function(node, opts) {
          assert("FlowPredicate", node, opts);
        }, exports2.assertFlowType = function(node, opts) {
          assert("FlowType", node, opts);
        }, exports2.assertFor = function(node, opts) {
          assert("For", node, opts);
        }, exports2.assertForInStatement = function(node, opts) {
          assert("ForInStatement", node, opts);
        }, exports2.assertForOfStatement = function(node, opts) {
          assert("ForOfStatement", node, opts);
        }, exports2.assertForStatement = function(node, opts) {
          assert("ForStatement", node, opts);
        }, exports2.assertForXStatement = function(node, opts) {
          assert("ForXStatement", node, opts);
        }, exports2.assertFunction = function(node, opts) {
          assert("Function", node, opts);
        }, exports2.assertFunctionDeclaration = function(node, opts) {
          assert("FunctionDeclaration", node, opts);
        }, exports2.assertFunctionExpression = function(node, opts) {
          assert("FunctionExpression", node, opts);
        }, exports2.assertFunctionParent = function(node, opts) {
          assert("FunctionParent", node, opts);
        }, exports2.assertFunctionTypeAnnotation = function(node, opts) {
          assert("FunctionTypeAnnotation", node, opts);
        }, exports2.assertFunctionTypeParam = function(node, opts) {
          assert("FunctionTypeParam", node, opts);
        }, exports2.assertGenericTypeAnnotation = function(node, opts) {
          assert("GenericTypeAnnotation", node, opts);
        }, exports2.assertIdentifier = function(node, opts) {
          assert("Identifier", node, opts);
        }, exports2.assertIfStatement = function(node, opts) {
          assert("IfStatement", node, opts);
        }, exports2.assertImmutable = function(node, opts) {
          assert("Immutable", node, opts);
        }, exports2.assertImport = function(node, opts) {
          assert("Import", node, opts);
        }, exports2.assertImportAttribute = function(node, opts) {
          assert("ImportAttribute", node, opts);
        }, exports2.assertImportDeclaration = function(node, opts) {
          assert("ImportDeclaration", node, opts);
        }, exports2.assertImportDefaultSpecifier = function(node, opts) {
          assert("ImportDefaultSpecifier", node, opts);
        }, exports2.assertImportExpression = function(node, opts) {
          assert("ImportExpression", node, opts);
        }, exports2.assertImportNamespaceSpecifier = function(node, opts) {
          assert("ImportNamespaceSpecifier", node, opts);
        }, exports2.assertImportOrExportDeclaration = function(node, opts) {
          assert("ImportOrExportDeclaration", node, opts);
        }, exports2.assertImportSpecifier = function(node, opts) {
          assert("ImportSpecifier", node, opts);
        }, exports2.assertIndexedAccessType = function(node, opts) {
          assert("IndexedAccessType", node, opts);
        }, exports2.assertInferredPredicate = function(node, opts) {
          assert("InferredPredicate", node, opts);
        }, exports2.assertInterfaceDeclaration = function(node, opts) {
          assert("InterfaceDeclaration", node, opts);
        }, exports2.assertInterfaceExtends = function(node, opts) {
          assert("InterfaceExtends", node, opts);
        }, exports2.assertInterfaceTypeAnnotation = function(node, opts) {
          assert("InterfaceTypeAnnotation", node, opts);
        }, exports2.assertInterpreterDirective = function(node, opts) {
          assert("InterpreterDirective", node, opts);
        }, exports2.assertIntersectionTypeAnnotation = function(node, opts) {
          assert("IntersectionTypeAnnotation", node, opts);
        }, exports2.assertJSX = function(node, opts) {
          assert("JSX", node, opts);
        }, exports2.assertJSXAttribute = function(node, opts) {
          assert("JSXAttribute", node, opts);
        }, exports2.assertJSXClosingElement = function(node, opts) {
          assert("JSXClosingElement", node, opts);
        }, exports2.assertJSXClosingFragment = function(node, opts) {
          assert("JSXClosingFragment", node, opts);
        }, exports2.assertJSXElement = function(node, opts) {
          assert("JSXElement", node, opts);
        }, exports2.assertJSXEmptyExpression = function(node, opts) {
          assert("JSXEmptyExpression", node, opts);
        }, exports2.assertJSXExpressionContainer = function(node, opts) {
          assert("JSXExpressionContainer", node, opts);
        }, exports2.assertJSXFragment = function(node, opts) {
          assert("JSXFragment", node, opts);
        }, exports2.assertJSXIdentifier = function(node, opts) {
          assert("JSXIdentifier", node, opts);
        }, exports2.assertJSXMemberExpression = function(node, opts) {
          assert("JSXMemberExpression", node, opts);
        }, exports2.assertJSXNamespacedName = function(node, opts) {
          assert("JSXNamespacedName", node, opts);
        }, exports2.assertJSXOpeningElement = function(node, opts) {
          assert("JSXOpeningElement", node, opts);
        }, exports2.assertJSXOpeningFragment = function(node, opts) {
          assert("JSXOpeningFragment", node, opts);
        }, exports2.assertJSXSpreadAttribute = function(node, opts) {
          assert("JSXSpreadAttribute", node, opts);
        }, exports2.assertJSXSpreadChild = function(node, opts) {
          assert("JSXSpreadChild", node, opts);
        }, exports2.assertJSXText = function(node, opts) {
          assert("JSXText", node, opts);
        }, exports2.assertLVal = function(node, opts) {
          assert("LVal", node, opts);
        }, exports2.assertLabeledStatement = function(node, opts) {
          assert("LabeledStatement", node, opts);
        }, exports2.assertLiteral = function(node, opts) {
          assert("Literal", node, opts);
        }, exports2.assertLogicalExpression = function(node, opts) {
          assert("LogicalExpression", node, opts);
        }, exports2.assertLoop = function(node, opts) {
          assert("Loop", node, opts);
        }, exports2.assertMemberExpression = function(node, opts) {
          assert("MemberExpression", node, opts);
        }, exports2.assertMetaProperty = function(node, opts) {
          assert("MetaProperty", node, opts);
        }, exports2.assertMethod = function(node, opts) {
          assert("Method", node, opts);
        }, exports2.assertMiscellaneous = function(node, opts) {
          assert("Miscellaneous", node, opts);
        }, exports2.assertMixedTypeAnnotation = function(node, opts) {
          assert("MixedTypeAnnotation", node, opts);
        }, exports2.assertModuleDeclaration = function(node, opts) {
          (0, _deprecationWarning.default)("assertModuleDeclaration", "assertImportOrExportDeclaration"), assert("ModuleDeclaration", node, opts);
        }, exports2.assertModuleExpression = function(node, opts) {
          assert("ModuleExpression", node, opts);
        }, exports2.assertModuleSpecifier = function(node, opts) {
          assert("ModuleSpecifier", node, opts);
        }, exports2.assertNewExpression = function(node, opts) {
          assert("NewExpression", node, opts);
        }, exports2.assertNoop = function(node, opts) {
          assert("Noop", node, opts);
        }, exports2.assertNullLiteral = function(node, opts) {
          assert("NullLiteral", node, opts);
        }, exports2.assertNullLiteralTypeAnnotation = function(node, opts) {
          assert("NullLiteralTypeAnnotation", node, opts);
        }, exports2.assertNullableTypeAnnotation = function(node, opts) {
          assert("NullableTypeAnnotation", node, opts);
        }, exports2.assertNumberLiteral = function(node, opts) {
          (0, _deprecationWarning.default)("assertNumberLiteral", "assertNumericLiteral"), assert("NumberLiteral", node, opts);
        }, exports2.assertNumberLiteralTypeAnnotation = function(node, opts) {
          assert("NumberLiteralTypeAnnotation", node, opts);
        }, exports2.assertNumberTypeAnnotation = function(node, opts) {
          assert("NumberTypeAnnotation", node, opts);
        }, exports2.assertNumericLiteral = function(node, opts) {
          assert("NumericLiteral", node, opts);
        }, exports2.assertObjectExpression = function(node, opts) {
          assert("ObjectExpression", node, opts);
        }, exports2.assertObjectMember = function(node, opts) {
          assert("ObjectMember", node, opts);
        }, exports2.assertObjectMethod = function(node, opts) {
          assert("ObjectMethod", node, opts);
        }, exports2.assertObjectPattern = function(node, opts) {
          assert("ObjectPattern", node, opts);
        }, exports2.assertObjectProperty = function(node, opts) {
          assert("ObjectProperty", node, opts);
        }, exports2.assertObjectTypeAnnotation = function(node, opts) {
          assert("ObjectTypeAnnotation", node, opts);
        }, exports2.assertObjectTypeCallProperty = function(node, opts) {
          assert("ObjectTypeCallProperty", node, opts);
        }, exports2.assertObjectTypeIndexer = function(node, opts) {
          assert("ObjectTypeIndexer", node, opts);
        }, exports2.assertObjectTypeInternalSlot = function(node, opts) {
          assert("ObjectTypeInternalSlot", node, opts);
        }, exports2.assertObjectTypeProperty = function(node, opts) {
          assert("ObjectTypeProperty", node, opts);
        }, exports2.assertObjectTypeSpreadProperty = function(node, opts) {
          assert("ObjectTypeSpreadProperty", node, opts);
        }, exports2.assertOpaqueType = function(node, opts) {
          assert("OpaqueType", node, opts);
        }, exports2.assertOptionalCallExpression = function(node, opts) {
          assert("OptionalCallExpression", node, opts);
        }, exports2.assertOptionalIndexedAccessType = function(node, opts) {
          assert("OptionalIndexedAccessType", node, opts);
        }, exports2.assertOptionalMemberExpression = function(node, opts) {
          assert("OptionalMemberExpression", node, opts);
        }, exports2.assertParenthesizedExpression = function(node, opts) {
          assert("ParenthesizedExpression", node, opts);
        }, exports2.assertPattern = function(node, opts) {
          assert("Pattern", node, opts);
        }, exports2.assertPatternLike = function(node, opts) {
          assert("PatternLike", node, opts);
        }, exports2.assertPipelineBareFunction = function(node, opts) {
          assert("PipelineBareFunction", node, opts);
        }, exports2.assertPipelinePrimaryTopicReference = function(node, opts) {
          assert("PipelinePrimaryTopicReference", node, opts);
        }, exports2.assertPipelineTopicExpression = function(node, opts) {
          assert("PipelineTopicExpression", node, opts);
        }, exports2.assertPlaceholder = function(node, opts) {
          assert("Placeholder", node, opts);
        }, exports2.assertPrivate = function(node, opts) {
          assert("Private", node, opts);
        }, exports2.assertPrivateName = function(node, opts) {
          assert("PrivateName", node, opts);
        }, exports2.assertProgram = function(node, opts) {
          assert("Program", node, opts);
        }, exports2.assertProperty = function(node, opts) {
          assert("Property", node, opts);
        }, exports2.assertPureish = function(node, opts) {
          assert("Pureish", node, opts);
        }, exports2.assertQualifiedTypeIdentifier = function(node, opts) {
          assert("QualifiedTypeIdentifier", node, opts);
        }, exports2.assertRecordExpression = function(node, opts) {
          assert("RecordExpression", node, opts);
        }, exports2.assertRegExpLiteral = function(node, opts) {
          assert("RegExpLiteral", node, opts);
        }, exports2.assertRegexLiteral = function(node, opts) {
          (0, _deprecationWarning.default)("assertRegexLiteral", "assertRegExpLiteral"), assert("RegexLiteral", node, opts);
        }, exports2.assertRestElement = function(node, opts) {
          assert("RestElement", node, opts);
        }, exports2.assertRestProperty = function(node, opts) {
          (0, _deprecationWarning.default)("assertRestProperty", "assertRestElement"), assert("RestProperty", node, opts);
        }, exports2.assertReturnStatement = function(node, opts) {
          assert("ReturnStatement", node, opts);
        }, exports2.assertScopable = function(node, opts) {
          assert("Scopable", node, opts);
        }, exports2.assertSequenceExpression = function(node, opts) {
          assert("SequenceExpression", node, opts);
        }, exports2.assertSpreadElement = function(node, opts) {
          assert("SpreadElement", node, opts);
        }, exports2.assertSpreadProperty = function(node, opts) {
          (0, _deprecationWarning.default)("assertSpreadProperty", "assertSpreadElement"), assert("SpreadProperty", node, opts);
        }, exports2.assertStandardized = function(node, opts) {
          assert("Standardized", node, opts);
        }, exports2.assertStatement = function(node, opts) {
          assert("Statement", node, opts);
        }, exports2.assertStaticBlock = function(node, opts) {
          assert("StaticBlock", node, opts);
        }, exports2.assertStringLiteral = function(node, opts) {
          assert("StringLiteral", node, opts);
        }, exports2.assertStringLiteralTypeAnnotation = function(node, opts) {
          assert("StringLiteralTypeAnnotation", node, opts);
        }, exports2.assertStringTypeAnnotation = function(node, opts) {
          assert("StringTypeAnnotation", node, opts);
        }, exports2.assertSuper = function(node, opts) {
          assert("Super", node, opts);
        }, exports2.assertSwitchCase = function(node, opts) {
          assert("SwitchCase", node, opts);
        }, exports2.assertSwitchStatement = function(node, opts) {
          assert("SwitchStatement", node, opts);
        }, exports2.assertSymbolTypeAnnotation = function(node, opts) {
          assert("SymbolTypeAnnotation", node, opts);
        }, exports2.assertTSAnyKeyword = function(node, opts) {
          assert("TSAnyKeyword", node, opts);
        }, exports2.assertTSArrayType = function(node, opts) {
          assert("TSArrayType", node, opts);
        }, exports2.assertTSAsExpression = function(node, opts) {
          assert("TSAsExpression", node, opts);
        }, exports2.assertTSBaseType = function(node, opts) {
          assert("TSBaseType", node, opts);
        }, exports2.assertTSBigIntKeyword = function(node, opts) {
          assert("TSBigIntKeyword", node, opts);
        }, exports2.assertTSBooleanKeyword = function(node, opts) {
          assert("TSBooleanKeyword", node, opts);
        }, exports2.assertTSCallSignatureDeclaration = function(node, opts) {
          assert("TSCallSignatureDeclaration", node, opts);
        }, exports2.assertTSConditionalType = function(node, opts) {
          assert("TSConditionalType", node, opts);
        }, exports2.assertTSConstructSignatureDeclaration = function(node, opts) {
          assert("TSConstructSignatureDeclaration", node, opts);
        }, exports2.assertTSConstructorType = function(node, opts) {
          assert("TSConstructorType", node, opts);
        }, exports2.assertTSDeclareFunction = function(node, opts) {
          assert("TSDeclareFunction", node, opts);
        }, exports2.assertTSDeclareMethod = function(node, opts) {
          assert("TSDeclareMethod", node, opts);
        }, exports2.assertTSEntityName = function(node, opts) {
          assert("TSEntityName", node, opts);
        }, exports2.assertTSEnumDeclaration = function(node, opts) {
          assert("TSEnumDeclaration", node, opts);
        }, exports2.assertTSEnumMember = function(node, opts) {
          assert("TSEnumMember", node, opts);
        }, exports2.assertTSExportAssignment = function(node, opts) {
          assert("TSExportAssignment", node, opts);
        }, exports2.assertTSExpressionWithTypeArguments = function(node, opts) {
          assert("TSExpressionWithTypeArguments", node, opts);
        }, exports2.assertTSExternalModuleReference = function(node, opts) {
          assert("TSExternalModuleReference", node, opts);
        }, exports2.assertTSFunctionType = function(node, opts) {
          assert("TSFunctionType", node, opts);
        }, exports2.assertTSImportEqualsDeclaration = function(node, opts) {
          assert("TSImportEqualsDeclaration", node, opts);
        }, exports2.assertTSImportType = function(node, opts) {
          assert("TSImportType", node, opts);
        }, exports2.assertTSIndexSignature = function(node, opts) {
          assert("TSIndexSignature", node, opts);
        }, exports2.assertTSIndexedAccessType = function(node, opts) {
          assert("TSIndexedAccessType", node, opts);
        }, exports2.assertTSInferType = function(node, opts) {
          assert("TSInferType", node, opts);
        }, exports2.assertTSInstantiationExpression = function(node, opts) {
          assert("TSInstantiationExpression", node, opts);
        }, exports2.assertTSInterfaceBody = function(node, opts) {
          assert("TSInterfaceBody", node, opts);
        }, exports2.assertTSInterfaceDeclaration = function(node, opts) {
          assert("TSInterfaceDeclaration", node, opts);
        }, exports2.assertTSIntersectionType = function(node, opts) {
          assert("TSIntersectionType", node, opts);
        }, exports2.assertTSIntrinsicKeyword = function(node, opts) {
          assert("TSIntrinsicKeyword", node, opts);
        }, exports2.assertTSLiteralType = function(node, opts) {
          assert("TSLiteralType", node, opts);
        }, exports2.assertTSMappedType = function(node, opts) {
          assert("TSMappedType", node, opts);
        }, exports2.assertTSMethodSignature = function(node, opts) {
          assert("TSMethodSignature", node, opts);
        }, exports2.assertTSModuleBlock = function(node, opts) {
          assert("TSModuleBlock", node, opts);
        }, exports2.assertTSModuleDeclaration = function(node, opts) {
          assert("TSModuleDeclaration", node, opts);
        }, exports2.assertTSNamedTupleMember = function(node, opts) {
          assert("TSNamedTupleMember", node, opts);
        }, exports2.assertTSNamespaceExportDeclaration = function(node, opts) {
          assert("TSNamespaceExportDeclaration", node, opts);
        }, exports2.assertTSNeverKeyword = function(node, opts) {
          assert("TSNeverKeyword", node, opts);
        }, exports2.assertTSNonNullExpression = function(node, opts) {
          assert("TSNonNullExpression", node, opts);
        }, exports2.assertTSNullKeyword = function(node, opts) {
          assert("TSNullKeyword", node, opts);
        }, exports2.assertTSNumberKeyword = function(node, opts) {
          assert("TSNumberKeyword", node, opts);
        }, exports2.assertTSObjectKeyword = function(node, opts) {
          assert("TSObjectKeyword", node, opts);
        }, exports2.assertTSOptionalType = function(node, opts) {
          assert("TSOptionalType", node, opts);
        }, exports2.assertTSParameterProperty = function(node, opts) {
          assert("TSParameterProperty", node, opts);
        }, exports2.assertTSParenthesizedType = function(node, opts) {
          assert("TSParenthesizedType", node, opts);
        }, exports2.assertTSPropertySignature = function(node, opts) {
          assert("TSPropertySignature", node, opts);
        }, exports2.assertTSQualifiedName = function(node, opts) {
          assert("TSQualifiedName", node, opts);
        }, exports2.assertTSRestType = function(node, opts) {
          assert("TSRestType", node, opts);
        }, exports2.assertTSSatisfiesExpression = function(node, opts) {
          assert("TSSatisfiesExpression", node, opts);
        }, exports2.assertTSStringKeyword = function(node, opts) {
          assert("TSStringKeyword", node, opts);
        }, exports2.assertTSSymbolKeyword = function(node, opts) {
          assert("TSSymbolKeyword", node, opts);
        }, exports2.assertTSThisType = function(node, opts) {
          assert("TSThisType", node, opts);
        }, exports2.assertTSTupleType = function(node, opts) {
          assert("TSTupleType", node, opts);
        }, exports2.assertTSType = function(node, opts) {
          assert("TSType", node, opts);
        }, exports2.assertTSTypeAliasDeclaration = function(node, opts) {
          assert("TSTypeAliasDeclaration", node, opts);
        }, exports2.assertTSTypeAnnotation = function(node, opts) {
          assert("TSTypeAnnotation", node, opts);
        }, exports2.assertTSTypeAssertion = function(node, opts) {
          assert("TSTypeAssertion", node, opts);
        }, exports2.assertTSTypeElement = function(node, opts) {
          assert("TSTypeElement", node, opts);
        }, exports2.assertTSTypeLiteral = function(node, opts) {
          assert("TSTypeLiteral", node, opts);
        }, exports2.assertTSTypeOperator = function(node, opts) {
          assert("TSTypeOperator", node, opts);
        }, exports2.assertTSTypeParameter = function(node, opts) {
          assert("TSTypeParameter", node, opts);
        }, exports2.assertTSTypeParameterDeclaration = function(node, opts) {
          assert("TSTypeParameterDeclaration", node, opts);
        }, exports2.assertTSTypeParameterInstantiation = function(node, opts) {
          assert("TSTypeParameterInstantiation", node, opts);
        }, exports2.assertTSTypePredicate = function(node, opts) {
          assert("TSTypePredicate", node, opts);
        }, exports2.assertTSTypeQuery = function(node, opts) {
          assert("TSTypeQuery", node, opts);
        }, exports2.assertTSTypeReference = function(node, opts) {
          assert("TSTypeReference", node, opts);
        }, exports2.assertTSUndefinedKeyword = function(node, opts) {
          assert("TSUndefinedKeyword", node, opts);
        }, exports2.assertTSUnionType = function(node, opts) {
          assert("TSUnionType", node, opts);
        }, exports2.assertTSUnknownKeyword = function(node, opts) {
          assert("TSUnknownKeyword", node, opts);
        }, exports2.assertTSVoidKeyword = function(node, opts) {
          assert("TSVoidKeyword", node, opts);
        }, exports2.assertTaggedTemplateExpression = function(node, opts) {
          assert("TaggedTemplateExpression", node, opts);
        }, exports2.assertTemplateElement = function(node, opts) {
          assert("TemplateElement", node, opts);
        }, exports2.assertTemplateLiteral = function(node, opts) {
          assert("TemplateLiteral", node, opts);
        }, exports2.assertTerminatorless = function(node, opts) {
          assert("Terminatorless", node, opts);
        }, exports2.assertThisExpression = function(node, opts) {
          assert("ThisExpression", node, opts);
        }, exports2.assertThisTypeAnnotation = function(node, opts) {
          assert("ThisTypeAnnotation", node, opts);
        }, exports2.assertThrowStatement = function(node, opts) {
          assert("ThrowStatement", node, opts);
        }, exports2.assertTopicReference = function(node, opts) {
          assert("TopicReference", node, opts);
        }, exports2.assertTryStatement = function(node, opts) {
          assert("TryStatement", node, opts);
        }, exports2.assertTupleExpression = function(node, opts) {
          assert("TupleExpression", node, opts);
        }, exports2.assertTupleTypeAnnotation = function(node, opts) {
          assert("TupleTypeAnnotation", node, opts);
        }, exports2.assertTypeAlias = function(node, opts) {
          assert("TypeAlias", node, opts);
        }, exports2.assertTypeAnnotation = function(node, opts) {
          assert("TypeAnnotation", node, opts);
        }, exports2.assertTypeCastExpression = function(node, opts) {
          assert("TypeCastExpression", node, opts);
        }, exports2.assertTypeParameter = function(node, opts) {
          assert("TypeParameter", node, opts);
        }, exports2.assertTypeParameterDeclaration = function(node, opts) {
          assert("TypeParameterDeclaration", node, opts);
        }, exports2.assertTypeParameterInstantiation = function(node, opts) {
          assert("TypeParameterInstantiation", node, opts);
        }, exports2.assertTypeScript = function(node, opts) {
          assert("TypeScript", node, opts);
        }, exports2.assertTypeofTypeAnnotation = function(node, opts) {
          assert("TypeofTypeAnnotation", node, opts);
        }, exports2.assertUnaryExpression = function(node, opts) {
          assert("UnaryExpression", node, opts);
        }, exports2.assertUnaryLike = function(node, opts) {
          assert("UnaryLike", node, opts);
        }, exports2.assertUnionTypeAnnotation = function(node, opts) {
          assert("UnionTypeAnnotation", node, opts);
        }, exports2.assertUpdateExpression = function(node, opts) {
          assert("UpdateExpression", node, opts);
        }, exports2.assertUserWhitespacable = function(node, opts) {
          assert("UserWhitespacable", node, opts);
        }, exports2.assertV8IntrinsicIdentifier = function(node, opts) {
          assert("V8IntrinsicIdentifier", node, opts);
        }, exports2.assertVariableDeclaration = function(node, opts) {
          assert("VariableDeclaration", node, opts);
        }, exports2.assertVariableDeclarator = function(node, opts) {
          assert("VariableDeclarator", node, opts);
        }, exports2.assertVariance = function(node, opts) {
          assert("Variance", node, opts);
        }, exports2.assertVoidTypeAnnotation = function(node, opts) {
          assert("VoidTypeAnnotation", node, opts);
        }, exports2.assertWhile = function(node, opts) {
          assert("While", node, opts);
        }, exports2.assertWhileStatement = function(node, opts) {
          assert("WhileStatement", node, opts);
        }, exports2.assertWithStatement = function(node, opts) {
          assert("WithStatement", node, opts);
        }, exports2.assertYieldExpression = function(node, opts) {
          assert("YieldExpression", node, opts);
        };
        var _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/is.js"), _deprecationWarning = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/deprecationWarning.js");
        function assert(type, node, opts) {
          if (!(0, _is.default)(type, node, opts)) throw new Error(`Expected type "${type}" with option ${JSON.stringify(opts)}, but instead got "${node.type}".`);
        }
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(types) {
          const flattened = (0, _removeTypeDuplicates.default)(types);
          return 1 === flattened.length ? flattened[0] : (0, _index.unionTypeAnnotation)(flattened);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js"), _removeTypeDuplicates = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
        exports2.default = function(type) {
          switch (type) {
            case "string":
              return (0, _index.stringTypeAnnotation)();
            case "number":
              return (0, _index.numberTypeAnnotation)();
            case "undefined":
              return (0, _index.voidTypeAnnotation)();
            case "boolean":
              return (0, _index.booleanTypeAnnotation)();
            case "function":
              return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Function"));
            case "object":
              return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Object"));
            case "symbol":
              return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Symbol"));
            case "bigint":
              return (0, _index.anyTypeAnnotation)();
          }
          throw new Error("Invalid typeof value: " + type);
        };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.anyTypeAnnotation = function() {
          return { type: "AnyTypeAnnotation" };
        }, exports2.argumentPlaceholder = function() {
          return { type: "ArgumentPlaceholder" };
        }, exports2.arrayExpression = function(elements = []) {
          const node = { type: "ArrayExpression", elements }, defs = NODE_FIELDS.ArrayExpression;
          return validate(defs.elements, node, "elements", elements, 1), node;
        }, exports2.arrayPattern = function(elements) {
          const node = { type: "ArrayPattern", elements }, defs = NODE_FIELDS.ArrayPattern;
          return validate(defs.elements, node, "elements", elements, 1), node;
        }, exports2.arrayTypeAnnotation = function(elementType) {
          const node = { type: "ArrayTypeAnnotation", elementType }, defs = NODE_FIELDS.ArrayTypeAnnotation;
          return validate(defs.elementType, node, "elementType", elementType, 1), node;
        }, exports2.arrowFunctionExpression = function(params, body, async = false) {
          const node = { type: "ArrowFunctionExpression", params, body, async, expression: null }, defs = NODE_FIELDS.ArrowFunctionExpression;
          return validate(defs.params, node, "params", params, 1), validate(defs.body, node, "body", body, 1), validate(defs.async, node, "async", async), node;
        }, exports2.assignmentExpression = function(operator, left, right) {
          const node = { type: "AssignmentExpression", operator, left, right }, defs = NODE_FIELDS.AssignmentExpression;
          return validate(defs.operator, node, "operator", operator), validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), node;
        }, exports2.assignmentPattern = function(left, right) {
          const node = { type: "AssignmentPattern", left, right }, defs = NODE_FIELDS.AssignmentPattern;
          return validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), node;
        }, exports2.awaitExpression = function(argument) {
          const node = { type: "AwaitExpression", argument }, defs = NODE_FIELDS.AwaitExpression;
          return validate(defs.argument, node, "argument", argument, 1), node;
        }, exports2.bigIntLiteral = function(value2) {
          const node = { type: "BigIntLiteral", value: value2 }, defs = NODE_FIELDS.BigIntLiteral;
          return validate(defs.value, node, "value", value2), node;
        }, exports2.binaryExpression = function(operator, left, right) {
          const node = { type: "BinaryExpression", operator, left, right }, defs = NODE_FIELDS.BinaryExpression;
          return validate(defs.operator, node, "operator", operator), validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), node;
        }, exports2.bindExpression = function(object, callee) {
          const node = { type: "BindExpression", object, callee }, defs = NODE_FIELDS.BindExpression;
          return validate(defs.object, node, "object", object, 1), validate(defs.callee, node, "callee", callee, 1), node;
        }, exports2.blockStatement = function(body, directives = []) {
          const node = { type: "BlockStatement", body, directives }, defs = NODE_FIELDS.BlockStatement;
          return validate(defs.body, node, "body", body, 1), validate(defs.directives, node, "directives", directives, 1), node;
        }, exports2.booleanLiteral = function(value2) {
          const node = { type: "BooleanLiteral", value: value2 }, defs = NODE_FIELDS.BooleanLiteral;
          return validate(defs.value, node, "value", value2), node;
        }, exports2.booleanLiteralTypeAnnotation = function(value2) {
          const node = { type: "BooleanLiteralTypeAnnotation", value: value2 }, defs = NODE_FIELDS.BooleanLiteralTypeAnnotation;
          return validate(defs.value, node, "value", value2), node;
        }, exports2.booleanTypeAnnotation = function() {
          return { type: "BooleanTypeAnnotation" };
        }, exports2.breakStatement = function(label = null) {
          const node = { type: "BreakStatement", label }, defs = NODE_FIELDS.BreakStatement;
          return validate(defs.label, node, "label", label, 1), node;
        }, exports2.callExpression = function(callee, _arguments) {
          const node = { type: "CallExpression", callee, arguments: _arguments }, defs = NODE_FIELDS.CallExpression;
          return validate(defs.callee, node, "callee", callee, 1), validate(defs.arguments, node, "arguments", _arguments, 1), node;
        }, exports2.catchClause = function(param = null, body) {
          const node = { type: "CatchClause", param, body }, defs = NODE_FIELDS.CatchClause;
          return validate(defs.param, node, "param", param, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports2.classAccessorProperty = function(key, value2 = null, typeAnnotation = null, decorators = null, computed = false, _static = false) {
          const node = { type: "ClassAccessorProperty", key, value: value2, typeAnnotation, decorators, computed, static: _static }, defs = NODE_FIELDS.ClassAccessorProperty;
          return validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value2, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), validate(defs.decorators, node, "decorators", decorators, 1), validate(defs.computed, node, "computed", computed), validate(defs.static, node, "static", _static), node;
        }, exports2.classBody = function(body) {
          const node = { type: "ClassBody", body }, defs = NODE_FIELDS.ClassBody;
          return validate(defs.body, node, "body", body, 1), node;
        }, exports2.classDeclaration = function(id = null, superClass = null, body, decorators = null) {
          const node = { type: "ClassDeclaration", id, superClass, body, decorators }, defs = NODE_FIELDS.ClassDeclaration;
          return validate(defs.id, node, "id", id, 1), validate(defs.superClass, node, "superClass", superClass, 1), validate(defs.body, node, "body", body, 1), validate(defs.decorators, node, "decorators", decorators, 1), node;
        }, exports2.classExpression = function(id = null, superClass = null, body, decorators = null) {
          const node = { type: "ClassExpression", id, superClass, body, decorators }, defs = NODE_FIELDS.ClassExpression;
          return validate(defs.id, node, "id", id, 1), validate(defs.superClass, node, "superClass", superClass, 1), validate(defs.body, node, "body", body, 1), validate(defs.decorators, node, "decorators", decorators, 1), node;
        }, exports2.classImplements = function(id, typeParameters = null) {
          const node = { type: "ClassImplements", id, typeParameters }, defs = NODE_FIELDS.ClassImplements;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
        }, exports2.classMethod = function(kind = "method", key, params, body, computed = false, _static = false, generator = false, async = false) {
          const node = { type: "ClassMethod", kind, key, params, body, computed, static: _static, generator, async }, defs = NODE_FIELDS.ClassMethod;
          return validate(defs.kind, node, "kind", kind), validate(defs.key, node, "key", key, 1), validate(defs.params, node, "params", params, 1), validate(defs.body, node, "body", body, 1), validate(defs.computed, node, "computed", computed), validate(defs.static, node, "static", _static), validate(defs.generator, node, "generator", generator), validate(defs.async, node, "async", async), node;
        }, exports2.classPrivateMethod = function(kind = "method", key, params, body, _static = false) {
          const node = { type: "ClassPrivateMethod", kind, key, params, body, static: _static }, defs = NODE_FIELDS.ClassPrivateMethod;
          return validate(defs.kind, node, "kind", kind), validate(defs.key, node, "key", key, 1), validate(defs.params, node, "params", params, 1), validate(defs.body, node, "body", body, 1), validate(defs.static, node, "static", _static), node;
        }, exports2.classPrivateProperty = function(key, value2 = null, decorators = null, _static = false) {
          const node = { type: "ClassPrivateProperty", key, value: value2, decorators, static: _static }, defs = NODE_FIELDS.ClassPrivateProperty;
          return validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value2, 1), validate(defs.decorators, node, "decorators", decorators, 1), validate(defs.static, node, "static", _static), node;
        }, exports2.classProperty = function(key, value2 = null, typeAnnotation = null, decorators = null, computed = false, _static = false) {
          const node = { type: "ClassProperty", key, value: value2, typeAnnotation, decorators, computed, static: _static }, defs = NODE_FIELDS.ClassProperty;
          return validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value2, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), validate(defs.decorators, node, "decorators", decorators, 1), validate(defs.computed, node, "computed", computed), validate(defs.static, node, "static", _static), node;
        }, exports2.conditionalExpression = function(test, consequent, alternate) {
          const node = { type: "ConditionalExpression", test, consequent, alternate }, defs = NODE_FIELDS.ConditionalExpression;
          return validate(defs.test, node, "test", test, 1), validate(defs.consequent, node, "consequent", consequent, 1), validate(defs.alternate, node, "alternate", alternate, 1), node;
        }, exports2.continueStatement = function(label = null) {
          const node = { type: "ContinueStatement", label }, defs = NODE_FIELDS.ContinueStatement;
          return validate(defs.label, node, "label", label, 1), node;
        }, exports2.debuggerStatement = function() {
          return { type: "DebuggerStatement" };
        }, exports2.decimalLiteral = function(value2) {
          const node = { type: "DecimalLiteral", value: value2 }, defs = NODE_FIELDS.DecimalLiteral;
          return validate(defs.value, node, "value", value2), node;
        }, exports2.declareClass = function(id, typeParameters = null, _extends = null, body) {
          const node = { type: "DeclareClass", id, typeParameters, extends: _extends, body }, defs = NODE_FIELDS.DeclareClass;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.extends, node, "extends", _extends, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports2.declareExportAllDeclaration = function(source, attributes = null) {
          const node = { type: "DeclareExportAllDeclaration", source, attributes }, defs = NODE_FIELDS.DeclareExportAllDeclaration;
          return validate(defs.source, node, "source", source, 1), validate(defs.attributes, node, "attributes", attributes, 1), node;
        }, exports2.declareExportDeclaration = function(declaration = null, specifiers = null, source = null, attributes = null) {
          const node = { type: "DeclareExportDeclaration", declaration, specifiers, source, attributes }, defs = NODE_FIELDS.DeclareExportDeclaration;
          return validate(defs.declaration, node, "declaration", declaration, 1), validate(defs.specifiers, node, "specifiers", specifiers, 1), validate(defs.source, node, "source", source, 1), validate(defs.attributes, node, "attributes", attributes, 1), node;
        }, exports2.declareFunction = function(id) {
          const node = { type: "DeclareFunction", id }, defs = NODE_FIELDS.DeclareFunction;
          return validate(defs.id, node, "id", id, 1), node;
        }, exports2.declareInterface = function(id, typeParameters = null, _extends = null, body) {
          const node = { type: "DeclareInterface", id, typeParameters, extends: _extends, body }, defs = NODE_FIELDS.DeclareInterface;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.extends, node, "extends", _extends, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports2.declareModule = function(id, body, kind = null) {
          const node = { type: "DeclareModule", id, body, kind }, defs = NODE_FIELDS.DeclareModule;
          return validate(defs.id, node, "id", id, 1), validate(defs.body, node, "body", body, 1), validate(defs.kind, node, "kind", kind), node;
        }, exports2.declareModuleExports = function(typeAnnotation) {
          const node = { type: "DeclareModuleExports", typeAnnotation }, defs = NODE_FIELDS.DeclareModuleExports;
          return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports2.declareOpaqueType = function(id, typeParameters = null, supertype = null) {
          const node = { type: "DeclareOpaqueType", id, typeParameters, supertype }, defs = NODE_FIELDS.DeclareOpaqueType;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.supertype, node, "supertype", supertype, 1), node;
        }, exports2.declareTypeAlias = function(id, typeParameters = null, right) {
          const node = { type: "DeclareTypeAlias", id, typeParameters, right }, defs = NODE_FIELDS.DeclareTypeAlias;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.right, node, "right", right, 1), node;
        }, exports2.declareVariable = function(id) {
          const node = { type: "DeclareVariable", id }, defs = NODE_FIELDS.DeclareVariable;
          return validate(defs.id, node, "id", id, 1), node;
        }, exports2.declaredPredicate = function(value2) {
          const node = { type: "DeclaredPredicate", value: value2 }, defs = NODE_FIELDS.DeclaredPredicate;
          return validate(defs.value, node, "value", value2, 1), node;
        }, exports2.decorator = function(expression) {
          const node = { type: "Decorator", expression }, defs = NODE_FIELDS.Decorator;
          return validate(defs.expression, node, "expression", expression, 1), node;
        }, exports2.directive = function(value2) {
          const node = { type: "Directive", value: value2 }, defs = NODE_FIELDS.Directive;
          return validate(defs.value, node, "value", value2, 1), node;
        }, exports2.directiveLiteral = function(value2) {
          const node = { type: "DirectiveLiteral", value: value2 }, defs = NODE_FIELDS.DirectiveLiteral;
          return validate(defs.value, node, "value", value2), node;
        }, exports2.doExpression = function(body, async = false) {
          const node = { type: "DoExpression", body, async }, defs = NODE_FIELDS.DoExpression;
          return validate(defs.body, node, "body", body, 1), validate(defs.async, node, "async", async), node;
        }, exports2.doWhileStatement = function(test, body) {
          const node = { type: "DoWhileStatement", test, body }, defs = NODE_FIELDS.DoWhileStatement;
          return validate(defs.test, node, "test", test, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports2.emptyStatement = function() {
          return { type: "EmptyStatement" };
        }, exports2.emptyTypeAnnotation = function() {
          return { type: "EmptyTypeAnnotation" };
        }, exports2.enumBooleanBody = function(members) {
          const node = { type: "EnumBooleanBody", members, explicitType: null, hasUnknownMembers: null }, defs = NODE_FIELDS.EnumBooleanBody;
          return validate(defs.members, node, "members", members, 1), node;
        }, exports2.enumBooleanMember = function(id) {
          const node = { type: "EnumBooleanMember", id, init: null }, defs = NODE_FIELDS.EnumBooleanMember;
          return validate(defs.id, node, "id", id, 1), node;
        }, exports2.enumDeclaration = function(id, body) {
          const node = { type: "EnumDeclaration", id, body }, defs = NODE_FIELDS.EnumDeclaration;
          return validate(defs.id, node, "id", id, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports2.enumDefaultedMember = function(id) {
          const node = { type: "EnumDefaultedMember", id }, defs = NODE_FIELDS.EnumDefaultedMember;
          return validate(defs.id, node, "id", id, 1), node;
        }, exports2.enumNumberBody = function(members) {
          const node = { type: "EnumNumberBody", members, explicitType: null, hasUnknownMembers: null }, defs = NODE_FIELDS.EnumNumberBody;
          return validate(defs.members, node, "members", members, 1), node;
        }, exports2.enumNumberMember = function(id, init) {
          const node = { type: "EnumNumberMember", id, init }, defs = NODE_FIELDS.EnumNumberMember;
          return validate(defs.id, node, "id", id, 1), validate(defs.init, node, "init", init, 1), node;
        }, exports2.enumStringBody = function(members) {
          const node = { type: "EnumStringBody", members, explicitType: null, hasUnknownMembers: null }, defs = NODE_FIELDS.EnumStringBody;
          return validate(defs.members, node, "members", members, 1), node;
        }, exports2.enumStringMember = function(id, init) {
          const node = { type: "EnumStringMember", id, init }, defs = NODE_FIELDS.EnumStringMember;
          return validate(defs.id, node, "id", id, 1), validate(defs.init, node, "init", init, 1), node;
        }, exports2.enumSymbolBody = function(members) {
          const node = { type: "EnumSymbolBody", members, hasUnknownMembers: null }, defs = NODE_FIELDS.EnumSymbolBody;
          return validate(defs.members, node, "members", members, 1), node;
        }, exports2.existsTypeAnnotation = function() {
          return { type: "ExistsTypeAnnotation" };
        }, exports2.exportAllDeclaration = function(source) {
          const node = { type: "ExportAllDeclaration", source }, defs = NODE_FIELDS.ExportAllDeclaration;
          return validate(defs.source, node, "source", source, 1), node;
        }, exports2.exportDefaultDeclaration = function(declaration) {
          const node = { type: "ExportDefaultDeclaration", declaration }, defs = NODE_FIELDS.ExportDefaultDeclaration;
          return validate(defs.declaration, node, "declaration", declaration, 1), node;
        }, exports2.exportDefaultSpecifier = function(exported) {
          const node = { type: "ExportDefaultSpecifier", exported }, defs = NODE_FIELDS.ExportDefaultSpecifier;
          return validate(defs.exported, node, "exported", exported, 1), node;
        }, exports2.exportNamedDeclaration = function(declaration = null, specifiers = [], source = null) {
          const node = { type: "ExportNamedDeclaration", declaration, specifiers, source }, defs = NODE_FIELDS.ExportNamedDeclaration;
          return validate(defs.declaration, node, "declaration", declaration, 1), validate(defs.specifiers, node, "specifiers", specifiers, 1), validate(defs.source, node, "source", source, 1), node;
        }, exports2.exportNamespaceSpecifier = function(exported) {
          const node = { type: "ExportNamespaceSpecifier", exported }, defs = NODE_FIELDS.ExportNamespaceSpecifier;
          return validate(defs.exported, node, "exported", exported, 1), node;
        }, exports2.exportSpecifier = function(local, exported) {
          const node = { type: "ExportSpecifier", local, exported }, defs = NODE_FIELDS.ExportSpecifier;
          return validate(defs.local, node, "local", local, 1), validate(defs.exported, node, "exported", exported, 1), node;
        }, exports2.expressionStatement = function(expression) {
          const node = { type: "ExpressionStatement", expression }, defs = NODE_FIELDS.ExpressionStatement;
          return validate(defs.expression, node, "expression", expression, 1), node;
        }, exports2.file = function(program, comments = null, tokens = null) {
          const node = { type: "File", program, comments, tokens }, defs = NODE_FIELDS.File;
          return validate(defs.program, node, "program", program, 1), validate(defs.comments, node, "comments", comments, 1), validate(defs.tokens, node, "tokens", tokens), node;
        }, exports2.forInStatement = function(left, right, body) {
          const node = { type: "ForInStatement", left, right, body }, defs = NODE_FIELDS.ForInStatement;
          return validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports2.forOfStatement = function(left, right, body, _await = false) {
          const node = { type: "ForOfStatement", left, right, body, await: _await }, defs = NODE_FIELDS.ForOfStatement;
          return validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), validate(defs.body, node, "body", body, 1), validate(defs.await, node, "await", _await), node;
        }, exports2.forStatement = function(init = null, test = null, update = null, body) {
          const node = { type: "ForStatement", init, test, update, body }, defs = NODE_FIELDS.ForStatement;
          return validate(defs.init, node, "init", init, 1), validate(defs.test, node, "test", test, 1), validate(defs.update, node, "update", update, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports2.functionDeclaration = function(id = null, params, body, generator = false, async = false) {
          const node = { type: "FunctionDeclaration", id, params, body, generator, async }, defs = NODE_FIELDS.FunctionDeclaration;
          return validate(defs.id, node, "id", id, 1), validate(defs.params, node, "params", params, 1), validate(defs.body, node, "body", body, 1), validate(defs.generator, node, "generator", generator), validate(defs.async, node, "async", async), node;
        }, exports2.functionExpression = function(id = null, params, body, generator = false, async = false) {
          const node = { type: "FunctionExpression", id, params, body, generator, async }, defs = NODE_FIELDS.FunctionExpression;
          return validate(defs.id, node, "id", id, 1), validate(defs.params, node, "params", params, 1), validate(defs.body, node, "body", body, 1), validate(defs.generator, node, "generator", generator), validate(defs.async, node, "async", async), node;
        }, exports2.functionTypeAnnotation = function(typeParameters = null, params, rest = null, returnType) {
          const node = { type: "FunctionTypeAnnotation", typeParameters, params, rest, returnType }, defs = NODE_FIELDS.FunctionTypeAnnotation;
          return validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.params, node, "params", params, 1), validate(defs.rest, node, "rest", rest, 1), validate(defs.returnType, node, "returnType", returnType, 1), node;
        }, exports2.functionTypeParam = function(name = null, typeAnnotation) {
          const node = { type: "FunctionTypeParam", name, typeAnnotation }, defs = NODE_FIELDS.FunctionTypeParam;
          return validate(defs.name, node, "name", name, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports2.genericTypeAnnotation = function(id, typeParameters = null) {
          const node = { type: "GenericTypeAnnotation", id, typeParameters }, defs = NODE_FIELDS.GenericTypeAnnotation;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
        }, exports2.identifier = function(name) {
          const node = { type: "Identifier", name }, defs = NODE_FIELDS.Identifier;
          return validate(defs.name, node, "name", name), node;
        }, exports2.ifStatement = function(test, consequent, alternate = null) {
          const node = { type: "IfStatement", test, consequent, alternate }, defs = NODE_FIELDS.IfStatement;
          return validate(defs.test, node, "test", test, 1), validate(defs.consequent, node, "consequent", consequent, 1), validate(defs.alternate, node, "alternate", alternate, 1), node;
        }, exports2.import = function() {
          return { type: "Import" };
        }, exports2.importAttribute = function(key, value2) {
          const node = { type: "ImportAttribute", key, value: value2 }, defs = NODE_FIELDS.ImportAttribute;
          return validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value2, 1), node;
        }, exports2.importDeclaration = function(specifiers, source) {
          const node = { type: "ImportDeclaration", specifiers, source }, defs = NODE_FIELDS.ImportDeclaration;
          return validate(defs.specifiers, node, "specifiers", specifiers, 1), validate(defs.source, node, "source", source, 1), node;
        }, exports2.importDefaultSpecifier = function(local) {
          const node = { type: "ImportDefaultSpecifier", local }, defs = NODE_FIELDS.ImportDefaultSpecifier;
          return validate(defs.local, node, "local", local, 1), node;
        }, exports2.importExpression = function(source, options = null) {
          const node = { type: "ImportExpression", source, options }, defs = NODE_FIELDS.ImportExpression;
          return validate(defs.source, node, "source", source, 1), validate(defs.options, node, "options", options, 1), node;
        }, exports2.importNamespaceSpecifier = function(local) {
          const node = { type: "ImportNamespaceSpecifier", local }, defs = NODE_FIELDS.ImportNamespaceSpecifier;
          return validate(defs.local, node, "local", local, 1), node;
        }, exports2.importSpecifier = function(local, imported) {
          const node = { type: "ImportSpecifier", local, imported }, defs = NODE_FIELDS.ImportSpecifier;
          return validate(defs.local, node, "local", local, 1), validate(defs.imported, node, "imported", imported, 1), node;
        }, exports2.indexedAccessType = function(objectType, indexType) {
          const node = { type: "IndexedAccessType", objectType, indexType }, defs = NODE_FIELDS.IndexedAccessType;
          return validate(defs.objectType, node, "objectType", objectType, 1), validate(defs.indexType, node, "indexType", indexType, 1), node;
        }, exports2.inferredPredicate = function() {
          return { type: "InferredPredicate" };
        }, exports2.interfaceDeclaration = function(id, typeParameters = null, _extends = null, body) {
          const node = { type: "InterfaceDeclaration", id, typeParameters, extends: _extends, body }, defs = NODE_FIELDS.InterfaceDeclaration;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.extends, node, "extends", _extends, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports2.interfaceExtends = function(id, typeParameters = null) {
          const node = { type: "InterfaceExtends", id, typeParameters }, defs = NODE_FIELDS.InterfaceExtends;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
        }, exports2.interfaceTypeAnnotation = function(_extends = null, body) {
          const node = { type: "InterfaceTypeAnnotation", extends: _extends, body }, defs = NODE_FIELDS.InterfaceTypeAnnotation;
          return validate(defs.extends, node, "extends", _extends, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports2.interpreterDirective = function(value2) {
          const node = { type: "InterpreterDirective", value: value2 }, defs = NODE_FIELDS.InterpreterDirective;
          return validate(defs.value, node, "value", value2), node;
        }, exports2.intersectionTypeAnnotation = function(types) {
          const node = { type: "IntersectionTypeAnnotation", types }, defs = NODE_FIELDS.IntersectionTypeAnnotation;
          return validate(defs.types, node, "types", types, 1), node;
        }, exports2.jSXAttribute = exports2.jsxAttribute = function(name, value2 = null) {
          const node = { type: "JSXAttribute", name, value: value2 }, defs = NODE_FIELDS.JSXAttribute;
          return validate(defs.name, node, "name", name, 1), validate(defs.value, node, "value", value2, 1), node;
        }, exports2.jSXClosingElement = exports2.jsxClosingElement = function(name) {
          const node = { type: "JSXClosingElement", name }, defs = NODE_FIELDS.JSXClosingElement;
          return validate(defs.name, node, "name", name, 1), node;
        }, exports2.jSXClosingFragment = exports2.jsxClosingFragment = function() {
          return { type: "JSXClosingFragment" };
        }, exports2.jSXElement = exports2.jsxElement = function(openingElement, closingElement = null, children, selfClosing = null) {
          const node = { type: "JSXElement", openingElement, closingElement, children, selfClosing }, defs = NODE_FIELDS.JSXElement;
          return validate(defs.openingElement, node, "openingElement", openingElement, 1), validate(defs.closingElement, node, "closingElement", closingElement, 1), validate(defs.children, node, "children", children, 1), validate(defs.selfClosing, node, "selfClosing", selfClosing), node;
        }, exports2.jSXEmptyExpression = exports2.jsxEmptyExpression = function() {
          return { type: "JSXEmptyExpression" };
        }, exports2.jSXExpressionContainer = exports2.jsxExpressionContainer = function(expression) {
          const node = { type: "JSXExpressionContainer", expression }, defs = NODE_FIELDS.JSXExpressionContainer;
          return validate(defs.expression, node, "expression", expression, 1), node;
        }, exports2.jSXFragment = exports2.jsxFragment = function(openingFragment, closingFragment, children) {
          const node = { type: "JSXFragment", openingFragment, closingFragment, children }, defs = NODE_FIELDS.JSXFragment;
          return validate(defs.openingFragment, node, "openingFragment", openingFragment, 1), validate(defs.closingFragment, node, "closingFragment", closingFragment, 1), validate(defs.children, node, "children", children, 1), node;
        }, exports2.jSXIdentifier = exports2.jsxIdentifier = function(name) {
          const node = { type: "JSXIdentifier", name }, defs = NODE_FIELDS.JSXIdentifier;
          return validate(defs.name, node, "name", name), node;
        }, exports2.jSXMemberExpression = exports2.jsxMemberExpression = function(object, property) {
          const node = { type: "JSXMemberExpression", object, property }, defs = NODE_FIELDS.JSXMemberExpression;
          return validate(defs.object, node, "object", object, 1), validate(defs.property, node, "property", property, 1), node;
        }, exports2.jSXNamespacedName = exports2.jsxNamespacedName = function(namespace, name) {
          const node = { type: "JSXNamespacedName", namespace, name }, defs = NODE_FIELDS.JSXNamespacedName;
          return validate(defs.namespace, node, "namespace", namespace, 1), validate(defs.name, node, "name", name, 1), node;
        }, exports2.jSXOpeningElement = exports2.jsxOpeningElement = function(name, attributes, selfClosing = false) {
          const node = { type: "JSXOpeningElement", name, attributes, selfClosing }, defs = NODE_FIELDS.JSXOpeningElement;
          return validate(defs.name, node, "name", name, 1), validate(defs.attributes, node, "attributes", attributes, 1), validate(defs.selfClosing, node, "selfClosing", selfClosing), node;
        }, exports2.jSXOpeningFragment = exports2.jsxOpeningFragment = function() {
          return { type: "JSXOpeningFragment" };
        }, exports2.jSXSpreadAttribute = exports2.jsxSpreadAttribute = function(argument) {
          const node = { type: "JSXSpreadAttribute", argument }, defs = NODE_FIELDS.JSXSpreadAttribute;
          return validate(defs.argument, node, "argument", argument, 1), node;
        }, exports2.jSXSpreadChild = exports2.jsxSpreadChild = function(expression) {
          const node = { type: "JSXSpreadChild", expression }, defs = NODE_FIELDS.JSXSpreadChild;
          return validate(defs.expression, node, "expression", expression, 1), node;
        }, exports2.jSXText = exports2.jsxText = function(value2) {
          const node = { type: "JSXText", value: value2 }, defs = NODE_FIELDS.JSXText;
          return validate(defs.value, node, "value", value2), node;
        }, exports2.labeledStatement = function(label, body) {
          const node = { type: "LabeledStatement", label, body }, defs = NODE_FIELDS.LabeledStatement;
          return validate(defs.label, node, "label", label, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports2.logicalExpression = function(operator, left, right) {
          const node = { type: "LogicalExpression", operator, left, right }, defs = NODE_FIELDS.LogicalExpression;
          return validate(defs.operator, node, "operator", operator), validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), node;
        }, exports2.memberExpression = function(object, property, computed = false, optional = null) {
          const node = { type: "MemberExpression", object, property, computed, optional }, defs = NODE_FIELDS.MemberExpression;
          return validate(defs.object, node, "object", object, 1), validate(defs.property, node, "property", property, 1), validate(defs.computed, node, "computed", computed), validate(defs.optional, node, "optional", optional), node;
        }, exports2.metaProperty = function(meta, property) {
          const node = { type: "MetaProperty", meta, property }, defs = NODE_FIELDS.MetaProperty;
          return validate(defs.meta, node, "meta", meta, 1), validate(defs.property, node, "property", property, 1), node;
        }, exports2.mixedTypeAnnotation = function() {
          return { type: "MixedTypeAnnotation" };
        }, exports2.moduleExpression = function(body) {
          const node = { type: "ModuleExpression", body }, defs = NODE_FIELDS.ModuleExpression;
          return validate(defs.body, node, "body", body, 1), node;
        }, exports2.newExpression = function(callee, _arguments) {
          const node = { type: "NewExpression", callee, arguments: _arguments }, defs = NODE_FIELDS.NewExpression;
          return validate(defs.callee, node, "callee", callee, 1), validate(defs.arguments, node, "arguments", _arguments, 1), node;
        }, exports2.noop = function() {
          return { type: "Noop" };
        }, exports2.nullLiteral = function() {
          return { type: "NullLiteral" };
        }, exports2.nullLiteralTypeAnnotation = function() {
          return { type: "NullLiteralTypeAnnotation" };
        }, exports2.nullableTypeAnnotation = function(typeAnnotation) {
          const node = { type: "NullableTypeAnnotation", typeAnnotation }, defs = NODE_FIELDS.NullableTypeAnnotation;
          return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports2.numberLiteral = function(value2) {
          return (0, _deprecationWarning.default)("NumberLiteral", "NumericLiteral", "The node type "), numericLiteral(value2);
        }, exports2.numberLiteralTypeAnnotation = function(value2) {
          const node = { type: "NumberLiteralTypeAnnotation", value: value2 }, defs = NODE_FIELDS.NumberLiteralTypeAnnotation;
          return validate(defs.value, node, "value", value2), node;
        }, exports2.numberTypeAnnotation = function() {
          return { type: "NumberTypeAnnotation" };
        }, exports2.numericLiteral = numericLiteral, exports2.objectExpression = function(properties) {
          const node = { type: "ObjectExpression", properties }, defs = NODE_FIELDS.ObjectExpression;
          return validate(defs.properties, node, "properties", properties, 1), node;
        }, exports2.objectMethod = function(kind = "method", key, params, body, computed = false, generator = false, async = false) {
          const node = { type: "ObjectMethod", kind, key, params, body, computed, generator, async }, defs = NODE_FIELDS.ObjectMethod;
          return validate(defs.kind, node, "kind", kind), validate(defs.key, node, "key", key, 1), validate(defs.params, node, "params", params, 1), validate(defs.body, node, "body", body, 1), validate(defs.computed, node, "computed", computed), validate(defs.generator, node, "generator", generator), validate(defs.async, node, "async", async), node;
        }, exports2.objectPattern = function(properties) {
          const node = { type: "ObjectPattern", properties }, defs = NODE_FIELDS.ObjectPattern;
          return validate(defs.properties, node, "properties", properties, 1), node;
        }, exports2.objectProperty = function(key, value2, computed = false, shorthand = false, decorators = null) {
          const node = { type: "ObjectProperty", key, value: value2, computed, shorthand, decorators }, defs = NODE_FIELDS.ObjectProperty;
          return validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value2, 1), validate(defs.computed, node, "computed", computed), validate(defs.shorthand, node, "shorthand", shorthand), validate(defs.decorators, node, "decorators", decorators, 1), node;
        }, exports2.objectTypeAnnotation = function(properties, indexers = [], callProperties = [], internalSlots = [], exact = false) {
          const node = { type: "ObjectTypeAnnotation", properties, indexers, callProperties, internalSlots, exact }, defs = NODE_FIELDS.ObjectTypeAnnotation;
          return validate(defs.properties, node, "properties", properties, 1), validate(defs.indexers, node, "indexers", indexers, 1), validate(defs.callProperties, node, "callProperties", callProperties, 1), validate(defs.internalSlots, node, "internalSlots", internalSlots, 1), validate(defs.exact, node, "exact", exact), node;
        }, exports2.objectTypeCallProperty = function(value2) {
          const node = { type: "ObjectTypeCallProperty", value: value2, static: null }, defs = NODE_FIELDS.ObjectTypeCallProperty;
          return validate(defs.value, node, "value", value2, 1), node;
        }, exports2.objectTypeIndexer = function(id = null, key, value2, variance = null) {
          const node = { type: "ObjectTypeIndexer", id, key, value: value2, variance, static: null }, defs = NODE_FIELDS.ObjectTypeIndexer;
          return validate(defs.id, node, "id", id, 1), validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value2, 1), validate(defs.variance, node, "variance", variance, 1), node;
        }, exports2.objectTypeInternalSlot = function(id, value2, optional, _static, method) {
          const node = { type: "ObjectTypeInternalSlot", id, value: value2, optional, static: _static, method }, defs = NODE_FIELDS.ObjectTypeInternalSlot;
          return validate(defs.id, node, "id", id, 1), validate(defs.value, node, "value", value2, 1), validate(defs.optional, node, "optional", optional), validate(defs.static, node, "static", _static), validate(defs.method, node, "method", method), node;
        }, exports2.objectTypeProperty = function(key, value2, variance = null) {
          const node = { type: "ObjectTypeProperty", key, value: value2, variance, kind: null, method: null, optional: null, proto: null, static: null }, defs = NODE_FIELDS.ObjectTypeProperty;
          return validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value2, 1), validate(defs.variance, node, "variance", variance, 1), node;
        }, exports2.objectTypeSpreadProperty = function(argument) {
          const node = { type: "ObjectTypeSpreadProperty", argument }, defs = NODE_FIELDS.ObjectTypeSpreadProperty;
          return validate(defs.argument, node, "argument", argument, 1), node;
        }, exports2.opaqueType = function(id, typeParameters = null, supertype = null, impltype) {
          const node = { type: "OpaqueType", id, typeParameters, supertype, impltype }, defs = NODE_FIELDS.OpaqueType;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.supertype, node, "supertype", supertype, 1), validate(defs.impltype, node, "impltype", impltype, 1), node;
        }, exports2.optionalCallExpression = function(callee, _arguments, optional) {
          const node = { type: "OptionalCallExpression", callee, arguments: _arguments, optional }, defs = NODE_FIELDS.OptionalCallExpression;
          return validate(defs.callee, node, "callee", callee, 1), validate(defs.arguments, node, "arguments", _arguments, 1), validate(defs.optional, node, "optional", optional), node;
        }, exports2.optionalIndexedAccessType = function(objectType, indexType) {
          const node = { type: "OptionalIndexedAccessType", objectType, indexType, optional: null }, defs = NODE_FIELDS.OptionalIndexedAccessType;
          return validate(defs.objectType, node, "objectType", objectType, 1), validate(defs.indexType, node, "indexType", indexType, 1), node;
        }, exports2.optionalMemberExpression = function(object, property, computed = false, optional) {
          const node = { type: "OptionalMemberExpression", object, property, computed, optional }, defs = NODE_FIELDS.OptionalMemberExpression;
          return validate(defs.object, node, "object", object, 1), validate(defs.property, node, "property", property, 1), validate(defs.computed, node, "computed", computed), validate(defs.optional, node, "optional", optional), node;
        }, exports2.parenthesizedExpression = function(expression) {
          const node = { type: "ParenthesizedExpression", expression }, defs = NODE_FIELDS.ParenthesizedExpression;
          return validate(defs.expression, node, "expression", expression, 1), node;
        }, exports2.pipelineBareFunction = function(callee) {
          const node = { type: "PipelineBareFunction", callee }, defs = NODE_FIELDS.PipelineBareFunction;
          return validate(defs.callee, node, "callee", callee, 1), node;
        }, exports2.pipelinePrimaryTopicReference = function() {
          return { type: "PipelinePrimaryTopicReference" };
        }, exports2.pipelineTopicExpression = function(expression) {
          const node = { type: "PipelineTopicExpression", expression }, defs = NODE_FIELDS.PipelineTopicExpression;
          return validate(defs.expression, node, "expression", expression, 1), node;
        }, exports2.placeholder = function(expectedNode, name) {
          const node = { type: "Placeholder", expectedNode, name }, defs = NODE_FIELDS.Placeholder;
          return validate(defs.expectedNode, node, "expectedNode", expectedNode), validate(defs.name, node, "name", name, 1), node;
        }, exports2.privateName = function(id) {
          const node = { type: "PrivateName", id }, defs = NODE_FIELDS.PrivateName;
          return validate(defs.id, node, "id", id, 1), node;
        }, exports2.program = function(body, directives = [], sourceType = "script", interpreter = null) {
          const node = { type: "Program", body, directives, sourceType, interpreter }, defs = NODE_FIELDS.Program;
          return validate(defs.body, node, "body", body, 1), validate(defs.directives, node, "directives", directives, 1), validate(defs.sourceType, node, "sourceType", sourceType), validate(defs.interpreter, node, "interpreter", interpreter, 1), node;
        }, exports2.qualifiedTypeIdentifier = function(id, qualification) {
          const node = { type: "QualifiedTypeIdentifier", id, qualification }, defs = NODE_FIELDS.QualifiedTypeIdentifier;
          return validate(defs.id, node, "id", id, 1), validate(defs.qualification, node, "qualification", qualification, 1), node;
        }, exports2.recordExpression = function(properties) {
          const node = { type: "RecordExpression", properties }, defs = NODE_FIELDS.RecordExpression;
          return validate(defs.properties, node, "properties", properties, 1), node;
        }, exports2.regExpLiteral = regExpLiteral, exports2.regexLiteral = function(pattern, flags = "") {
          return (0, _deprecationWarning.default)("RegexLiteral", "RegExpLiteral", "The node type "), regExpLiteral(pattern, flags);
        }, exports2.restElement = restElement, exports2.restProperty = function(argument) {
          return (0, _deprecationWarning.default)("RestProperty", "RestElement", "The node type "), restElement(argument);
        }, exports2.returnStatement = function(argument = null) {
          const node = { type: "ReturnStatement", argument }, defs = NODE_FIELDS.ReturnStatement;
          return validate(defs.argument, node, "argument", argument, 1), node;
        }, exports2.sequenceExpression = function(expressions) {
          const node = { type: "SequenceExpression", expressions }, defs = NODE_FIELDS.SequenceExpression;
          return validate(defs.expressions, node, "expressions", expressions, 1), node;
        }, exports2.spreadElement = spreadElement, exports2.spreadProperty = function(argument) {
          return (0, _deprecationWarning.default)("SpreadProperty", "SpreadElement", "The node type "), spreadElement(argument);
        }, exports2.staticBlock = function(body) {
          const node = { type: "StaticBlock", body }, defs = NODE_FIELDS.StaticBlock;
          return validate(defs.body, node, "body", body, 1), node;
        }, exports2.stringLiteral = function(value2) {
          const node = { type: "StringLiteral", value: value2 }, defs = NODE_FIELDS.StringLiteral;
          return validate(defs.value, node, "value", value2), node;
        }, exports2.stringLiteralTypeAnnotation = function(value2) {
          const node = { type: "StringLiteralTypeAnnotation", value: value2 }, defs = NODE_FIELDS.StringLiteralTypeAnnotation;
          return validate(defs.value, node, "value", value2), node;
        }, exports2.stringTypeAnnotation = function() {
          return { type: "StringTypeAnnotation" };
        }, exports2.super = function() {
          return { type: "Super" };
        }, exports2.switchCase = function(test = null, consequent) {
          const node = { type: "SwitchCase", test, consequent }, defs = NODE_FIELDS.SwitchCase;
          return validate(defs.test, node, "test", test, 1), validate(defs.consequent, node, "consequent", consequent, 1), node;
        }, exports2.switchStatement = function(discriminant, cases) {
          const node = { type: "SwitchStatement", discriminant, cases }, defs = NODE_FIELDS.SwitchStatement;
          return validate(defs.discriminant, node, "discriminant", discriminant, 1), validate(defs.cases, node, "cases", cases, 1), node;
        }, exports2.symbolTypeAnnotation = function() {
          return { type: "SymbolTypeAnnotation" };
        }, exports2.taggedTemplateExpression = function(tag, quasi) {
          const node = { type: "TaggedTemplateExpression", tag, quasi }, defs = NODE_FIELDS.TaggedTemplateExpression;
          return validate(defs.tag, node, "tag", tag, 1), validate(defs.quasi, node, "quasi", quasi, 1), node;
        }, exports2.templateElement = function(value2, tail = false) {
          const node = { type: "TemplateElement", value: value2, tail }, defs = NODE_FIELDS.TemplateElement;
          return validate(defs.value, node, "value", value2), validate(defs.tail, node, "tail", tail), node;
        }, exports2.templateLiteral = function(quasis, expressions) {
          const node = { type: "TemplateLiteral", quasis, expressions }, defs = NODE_FIELDS.TemplateLiteral;
          return validate(defs.quasis, node, "quasis", quasis, 1), validate(defs.expressions, node, "expressions", expressions, 1), node;
        }, exports2.thisExpression = function() {
          return { type: "ThisExpression" };
        }, exports2.thisTypeAnnotation = function() {
          return { type: "ThisTypeAnnotation" };
        }, exports2.throwStatement = function(argument) {
          const node = { type: "ThrowStatement", argument }, defs = NODE_FIELDS.ThrowStatement;
          return validate(defs.argument, node, "argument", argument, 1), node;
        }, exports2.topicReference = function() {
          return { type: "TopicReference" };
        }, exports2.tryStatement = function(block, handler = null, finalizer = null) {
          const node = { type: "TryStatement", block, handler, finalizer }, defs = NODE_FIELDS.TryStatement;
          return validate(defs.block, node, "block", block, 1), validate(defs.handler, node, "handler", handler, 1), validate(defs.finalizer, node, "finalizer", finalizer, 1), node;
        }, exports2.tSAnyKeyword = exports2.tsAnyKeyword = function() {
          return { type: "TSAnyKeyword" };
        }, exports2.tSArrayType = exports2.tsArrayType = function(elementType) {
          const node = { type: "TSArrayType", elementType }, defs = NODE_FIELDS.TSArrayType;
          return validate(defs.elementType, node, "elementType", elementType, 1), node;
        }, exports2.tSAsExpression = exports2.tsAsExpression = function(expression, typeAnnotation) {
          const node = { type: "TSAsExpression", expression, typeAnnotation }, defs = NODE_FIELDS.TSAsExpression;
          return validate(defs.expression, node, "expression", expression, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports2.tSBigIntKeyword = exports2.tsBigIntKeyword = function() {
          return { type: "TSBigIntKeyword" };
        }, exports2.tSBooleanKeyword = exports2.tsBooleanKeyword = function() {
          return { type: "TSBooleanKeyword" };
        }, exports2.tSCallSignatureDeclaration = exports2.tsCallSignatureDeclaration = function(typeParameters = null, parameters, typeAnnotation = null) {
          const node = { type: "TSCallSignatureDeclaration", typeParameters, parameters, typeAnnotation }, defs = NODE_FIELDS.TSCallSignatureDeclaration;
          return validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.parameters, node, "parameters", parameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports2.tSConditionalType = exports2.tsConditionalType = function(checkType, extendsType, trueType, falseType) {
          const node = { type: "TSConditionalType", checkType, extendsType, trueType, falseType }, defs = NODE_FIELDS.TSConditionalType;
          return validate(defs.checkType, node, "checkType", checkType, 1), validate(defs.extendsType, node, "extendsType", extendsType, 1), validate(defs.trueType, node, "trueType", trueType, 1), validate(defs.falseType, node, "falseType", falseType, 1), node;
        }, exports2.tSConstructSignatureDeclaration = exports2.tsConstructSignatureDeclaration = function(typeParameters = null, parameters, typeAnnotation = null) {
          const node = { type: "TSConstructSignatureDeclaration", typeParameters, parameters, typeAnnotation }, defs = NODE_FIELDS.TSConstructSignatureDeclaration;
          return validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.parameters, node, "parameters", parameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports2.tSConstructorType = exports2.tsConstructorType = function(typeParameters = null, parameters, typeAnnotation = null) {
          const node = { type: "TSConstructorType", typeParameters, parameters, typeAnnotation }, defs = NODE_FIELDS.TSConstructorType;
          return validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.parameters, node, "parameters", parameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports2.tSDeclareFunction = exports2.tsDeclareFunction = function(id = null, typeParameters = null, params, returnType = null) {
          const node = { type: "TSDeclareFunction", id, typeParameters, params, returnType }, defs = NODE_FIELDS.TSDeclareFunction;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.params, node, "params", params, 1), validate(defs.returnType, node, "returnType", returnType, 1), node;
        }, exports2.tSDeclareMethod = exports2.tsDeclareMethod = function(decorators = null, key, typeParameters = null, params, returnType = null) {
          const node = { type: "TSDeclareMethod", decorators, key, typeParameters, params, returnType }, defs = NODE_FIELDS.TSDeclareMethod;
          return validate(defs.decorators, node, "decorators", decorators, 1), validate(defs.key, node, "key", key, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.params, node, "params", params, 1), validate(defs.returnType, node, "returnType", returnType, 1), node;
        }, exports2.tSEnumDeclaration = exports2.tsEnumDeclaration = function(id, members) {
          const node = { type: "TSEnumDeclaration", id, members }, defs = NODE_FIELDS.TSEnumDeclaration;
          return validate(defs.id, node, "id", id, 1), validate(defs.members, node, "members", members, 1), node;
        }, exports2.tSEnumMember = exports2.tsEnumMember = function(id, initializer = null) {
          const node = { type: "TSEnumMember", id, initializer }, defs = NODE_FIELDS.TSEnumMember;
          return validate(defs.id, node, "id", id, 1), validate(defs.initializer, node, "initializer", initializer, 1), node;
        }, exports2.tSExportAssignment = exports2.tsExportAssignment = function(expression) {
          const node = { type: "TSExportAssignment", expression }, defs = NODE_FIELDS.TSExportAssignment;
          return validate(defs.expression, node, "expression", expression, 1), node;
        }, exports2.tSExpressionWithTypeArguments = exports2.tsExpressionWithTypeArguments = function(expression, typeParameters = null) {
          const node = { type: "TSExpressionWithTypeArguments", expression, typeParameters }, defs = NODE_FIELDS.TSExpressionWithTypeArguments;
          return validate(defs.expression, node, "expression", expression, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
        }, exports2.tSExternalModuleReference = exports2.tsExternalModuleReference = function(expression) {
          const node = { type: "TSExternalModuleReference", expression }, defs = NODE_FIELDS.TSExternalModuleReference;
          return validate(defs.expression, node, "expression", expression, 1), node;
        }, exports2.tSFunctionType = exports2.tsFunctionType = function(typeParameters = null, parameters, typeAnnotation = null) {
          const node = { type: "TSFunctionType", typeParameters, parameters, typeAnnotation }, defs = NODE_FIELDS.TSFunctionType;
          return validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.parameters, node, "parameters", parameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports2.tSImportEqualsDeclaration = exports2.tsImportEqualsDeclaration = function(id, moduleReference) {
          const node = { type: "TSImportEqualsDeclaration", id, moduleReference, isExport: null }, defs = NODE_FIELDS.TSImportEqualsDeclaration;
          return validate(defs.id, node, "id", id, 1), validate(defs.moduleReference, node, "moduleReference", moduleReference, 1), node;
        }, exports2.tSImportType = exports2.tsImportType = function(argument, qualifier = null, typeParameters = null) {
          const node = { type: "TSImportType", argument, qualifier, typeParameters }, defs = NODE_FIELDS.TSImportType;
          return validate(defs.argument, node, "argument", argument, 1), validate(defs.qualifier, node, "qualifier", qualifier, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
        }, exports2.tSIndexSignature = exports2.tsIndexSignature = function(parameters, typeAnnotation = null) {
          const node = { type: "TSIndexSignature", parameters, typeAnnotation }, defs = NODE_FIELDS.TSIndexSignature;
          return validate(defs.parameters, node, "parameters", parameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports2.tSIndexedAccessType = exports2.tsIndexedAccessType = function(objectType, indexType) {
          const node = { type: "TSIndexedAccessType", objectType, indexType }, defs = NODE_FIELDS.TSIndexedAccessType;
          return validate(defs.objectType, node, "objectType", objectType, 1), validate(defs.indexType, node, "indexType", indexType, 1), node;
        }, exports2.tSInferType = exports2.tsInferType = function(typeParameter) {
          const node = { type: "TSInferType", typeParameter }, defs = NODE_FIELDS.TSInferType;
          return validate(defs.typeParameter, node, "typeParameter", typeParameter, 1), node;
        }, exports2.tSInstantiationExpression = exports2.tsInstantiationExpression = function(expression, typeParameters = null) {
          const node = { type: "TSInstantiationExpression", expression, typeParameters }, defs = NODE_FIELDS.TSInstantiationExpression;
          return validate(defs.expression, node, "expression", expression, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
        }, exports2.tSInterfaceBody = exports2.tsInterfaceBody = function(body) {
          const node = { type: "TSInterfaceBody", body }, defs = NODE_FIELDS.TSInterfaceBody;
          return validate(defs.body, node, "body", body, 1), node;
        }, exports2.tSInterfaceDeclaration = exports2.tsInterfaceDeclaration = function(id, typeParameters = null, _extends = null, body) {
          const node = { type: "TSInterfaceDeclaration", id, typeParameters, extends: _extends, body }, defs = NODE_FIELDS.TSInterfaceDeclaration;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.extends, node, "extends", _extends, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports2.tSIntersectionType = exports2.tsIntersectionType = function(types) {
          const node = { type: "TSIntersectionType", types }, defs = NODE_FIELDS.TSIntersectionType;
          return validate(defs.types, node, "types", types, 1), node;
        }, exports2.tSIntrinsicKeyword = exports2.tsIntrinsicKeyword = function() {
          return { type: "TSIntrinsicKeyword" };
        }, exports2.tSLiteralType = exports2.tsLiteralType = function(literal) {
          const node = { type: "TSLiteralType", literal }, defs = NODE_FIELDS.TSLiteralType;
          return validate(defs.literal, node, "literal", literal, 1), node;
        }, exports2.tSMappedType = exports2.tsMappedType = function(typeParameter, typeAnnotation = null, nameType = null) {
          const node = { type: "TSMappedType", typeParameter, typeAnnotation, nameType }, defs = NODE_FIELDS.TSMappedType;
          return validate(defs.typeParameter, node, "typeParameter", typeParameter, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), validate(defs.nameType, node, "nameType", nameType, 1), node;
        }, exports2.tSMethodSignature = exports2.tsMethodSignature = function(key, typeParameters = null, parameters, typeAnnotation = null) {
          const node = { type: "TSMethodSignature", key, typeParameters, parameters, typeAnnotation, kind: null }, defs = NODE_FIELDS.TSMethodSignature;
          return validate(defs.key, node, "key", key, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.parameters, node, "parameters", parameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports2.tSModuleBlock = exports2.tsModuleBlock = function(body) {
          const node = { type: "TSModuleBlock", body }, defs = NODE_FIELDS.TSModuleBlock;
          return validate(defs.body, node, "body", body, 1), node;
        }, exports2.tSModuleDeclaration = exports2.tsModuleDeclaration = function(id, body) {
          const node = { type: "TSModuleDeclaration", id, body, kind: null }, defs = NODE_FIELDS.TSModuleDeclaration;
          return validate(defs.id, node, "id", id, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports2.tSNamedTupleMember = exports2.tsNamedTupleMember = function(label, elementType, optional = false) {
          const node = { type: "TSNamedTupleMember", label, elementType, optional }, defs = NODE_FIELDS.TSNamedTupleMember;
          return validate(defs.label, node, "label", label, 1), validate(defs.elementType, node, "elementType", elementType, 1), validate(defs.optional, node, "optional", optional), node;
        }, exports2.tSNamespaceExportDeclaration = exports2.tsNamespaceExportDeclaration = function(id) {
          const node = { type: "TSNamespaceExportDeclaration", id }, defs = NODE_FIELDS.TSNamespaceExportDeclaration;
          return validate(defs.id, node, "id", id, 1), node;
        }, exports2.tSNeverKeyword = exports2.tsNeverKeyword = function() {
          return { type: "TSNeverKeyword" };
        }, exports2.tSNonNullExpression = exports2.tsNonNullExpression = function(expression) {
          const node = { type: "TSNonNullExpression", expression }, defs = NODE_FIELDS.TSNonNullExpression;
          return validate(defs.expression, node, "expression", expression, 1), node;
        }, exports2.tSNullKeyword = exports2.tsNullKeyword = function() {
          return { type: "TSNullKeyword" };
        }, exports2.tSNumberKeyword = exports2.tsNumberKeyword = function() {
          return { type: "TSNumberKeyword" };
        }, exports2.tSObjectKeyword = exports2.tsObjectKeyword = function() {
          return { type: "TSObjectKeyword" };
        }, exports2.tSOptionalType = exports2.tsOptionalType = function(typeAnnotation) {
          const node = { type: "TSOptionalType", typeAnnotation }, defs = NODE_FIELDS.TSOptionalType;
          return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports2.tSParameterProperty = exports2.tsParameterProperty = function(parameter) {
          const node = { type: "TSParameterProperty", parameter }, defs = NODE_FIELDS.TSParameterProperty;
          return validate(defs.parameter, node, "parameter", parameter, 1), node;
        }, exports2.tSParenthesizedType = exports2.tsParenthesizedType = function(typeAnnotation) {
          const node = { type: "TSParenthesizedType", typeAnnotation }, defs = NODE_FIELDS.TSParenthesizedType;
          return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports2.tSPropertySignature = exports2.tsPropertySignature = function(key, typeAnnotation = null) {
          const node = { type: "TSPropertySignature", key, typeAnnotation, kind: null }, defs = NODE_FIELDS.TSPropertySignature;
          return validate(defs.key, node, "key", key, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports2.tSQualifiedName = exports2.tsQualifiedName = function(left, right) {
          const node = { type: "TSQualifiedName", left, right }, defs = NODE_FIELDS.TSQualifiedName;
          return validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), node;
        }, exports2.tSRestType = exports2.tsRestType = function(typeAnnotation) {
          const node = { type: "TSRestType", typeAnnotation }, defs = NODE_FIELDS.TSRestType;
          return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports2.tSSatisfiesExpression = exports2.tsSatisfiesExpression = function(expression, typeAnnotation) {
          const node = { type: "TSSatisfiesExpression", expression, typeAnnotation }, defs = NODE_FIELDS.TSSatisfiesExpression;
          return validate(defs.expression, node, "expression", expression, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports2.tSStringKeyword = exports2.tsStringKeyword = function() {
          return { type: "TSStringKeyword" };
        }, exports2.tSSymbolKeyword = exports2.tsSymbolKeyword = function() {
          return { type: "TSSymbolKeyword" };
        }, exports2.tSThisType = exports2.tsThisType = function() {
          return { type: "TSThisType" };
        }, exports2.tSTupleType = exports2.tsTupleType = function(elementTypes) {
          const node = { type: "TSTupleType", elementTypes }, defs = NODE_FIELDS.TSTupleType;
          return validate(defs.elementTypes, node, "elementTypes", elementTypes, 1), node;
        }, exports2.tSTypeAliasDeclaration = exports2.tsTypeAliasDeclaration = function(id, typeParameters = null, typeAnnotation) {
          const node = { type: "TSTypeAliasDeclaration", id, typeParameters, typeAnnotation }, defs = NODE_FIELDS.TSTypeAliasDeclaration;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports2.tSTypeAnnotation = exports2.tsTypeAnnotation = function(typeAnnotation) {
          const node = { type: "TSTypeAnnotation", typeAnnotation }, defs = NODE_FIELDS.TSTypeAnnotation;
          return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports2.tSTypeAssertion = exports2.tsTypeAssertion = function(typeAnnotation, expression) {
          const node = { type: "TSTypeAssertion", typeAnnotation, expression }, defs = NODE_FIELDS.TSTypeAssertion;
          return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), validate(defs.expression, node, "expression", expression, 1), node;
        }, exports2.tSTypeLiteral = exports2.tsTypeLiteral = function(members) {
          const node = { type: "TSTypeLiteral", members }, defs = NODE_FIELDS.TSTypeLiteral;
          return validate(defs.members, node, "members", members, 1), node;
        }, exports2.tSTypeOperator = exports2.tsTypeOperator = function(typeAnnotation) {
          const node = { type: "TSTypeOperator", typeAnnotation, operator: null }, defs = NODE_FIELDS.TSTypeOperator;
          return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports2.tSTypeParameter = exports2.tsTypeParameter = function(constraint = null, _default = null, name) {
          const node = { type: "TSTypeParameter", constraint, default: _default, name }, defs = NODE_FIELDS.TSTypeParameter;
          return validate(defs.constraint, node, "constraint", constraint, 1), validate(defs.default, node, "default", _default, 1), validate(defs.name, node, "name", name), node;
        }, exports2.tSTypeParameterDeclaration = exports2.tsTypeParameterDeclaration = function(params) {
          const node = { type: "TSTypeParameterDeclaration", params }, defs = NODE_FIELDS.TSTypeParameterDeclaration;
          return validate(defs.params, node, "params", params, 1), node;
        }, exports2.tSTypeParameterInstantiation = exports2.tsTypeParameterInstantiation = function(params) {
          const node = { type: "TSTypeParameterInstantiation", params }, defs = NODE_FIELDS.TSTypeParameterInstantiation;
          return validate(defs.params, node, "params", params, 1), node;
        }, exports2.tSTypePredicate = exports2.tsTypePredicate = function(parameterName, typeAnnotation = null, asserts = null) {
          const node = { type: "TSTypePredicate", parameterName, typeAnnotation, asserts }, defs = NODE_FIELDS.TSTypePredicate;
          return validate(defs.parameterName, node, "parameterName", parameterName, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), validate(defs.asserts, node, "asserts", asserts), node;
        }, exports2.tSTypeQuery = exports2.tsTypeQuery = function(exprName, typeParameters = null) {
          const node = { type: "TSTypeQuery", exprName, typeParameters }, defs = NODE_FIELDS.TSTypeQuery;
          return validate(defs.exprName, node, "exprName", exprName, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
        }, exports2.tSTypeReference = exports2.tsTypeReference = function(typeName, typeParameters = null) {
          const node = { type: "TSTypeReference", typeName, typeParameters }, defs = NODE_FIELDS.TSTypeReference;
          return validate(defs.typeName, node, "typeName", typeName, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
        }, exports2.tSUndefinedKeyword = exports2.tsUndefinedKeyword = function() {
          return { type: "TSUndefinedKeyword" };
        }, exports2.tSUnionType = exports2.tsUnionType = function(types) {
          const node = { type: "TSUnionType", types }, defs = NODE_FIELDS.TSUnionType;
          return validate(defs.types, node, "types", types, 1), node;
        }, exports2.tSUnknownKeyword = exports2.tsUnknownKeyword = function() {
          return { type: "TSUnknownKeyword" };
        }, exports2.tSVoidKeyword = exports2.tsVoidKeyword = function() {
          return { type: "TSVoidKeyword" };
        }, exports2.tupleExpression = function(elements = []) {
          const node = { type: "TupleExpression", elements }, defs = NODE_FIELDS.TupleExpression;
          return validate(defs.elements, node, "elements", elements, 1), node;
        }, exports2.tupleTypeAnnotation = function(types) {
          const node = { type: "TupleTypeAnnotation", types }, defs = NODE_FIELDS.TupleTypeAnnotation;
          return validate(defs.types, node, "types", types, 1), node;
        }, exports2.typeAlias = function(id, typeParameters = null, right) {
          const node = { type: "TypeAlias", id, typeParameters, right }, defs = NODE_FIELDS.TypeAlias;
          return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.right, node, "right", right, 1), node;
        }, exports2.typeAnnotation = function(typeAnnotation) {
          const node = { type: "TypeAnnotation", typeAnnotation }, defs = NODE_FIELDS.TypeAnnotation;
          return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports2.typeCastExpression = function(expression, typeAnnotation) {
          const node = { type: "TypeCastExpression", expression, typeAnnotation }, defs = NODE_FIELDS.TypeCastExpression;
          return validate(defs.expression, node, "expression", expression, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
        }, exports2.typeParameter = function(bound = null, _default = null, variance = null) {
          const node = { type: "TypeParameter", bound, default: _default, variance, name: null }, defs = NODE_FIELDS.TypeParameter;
          return validate(defs.bound, node, "bound", bound, 1), validate(defs.default, node, "default", _default, 1), validate(defs.variance, node, "variance", variance, 1), node;
        }, exports2.typeParameterDeclaration = function(params) {
          const node = { type: "TypeParameterDeclaration", params }, defs = NODE_FIELDS.TypeParameterDeclaration;
          return validate(defs.params, node, "params", params, 1), node;
        }, exports2.typeParameterInstantiation = function(params) {
          const node = { type: "TypeParameterInstantiation", params }, defs = NODE_FIELDS.TypeParameterInstantiation;
          return validate(defs.params, node, "params", params, 1), node;
        }, exports2.typeofTypeAnnotation = function(argument) {
          const node = { type: "TypeofTypeAnnotation", argument }, defs = NODE_FIELDS.TypeofTypeAnnotation;
          return validate(defs.argument, node, "argument", argument, 1), node;
        }, exports2.unaryExpression = function(operator, argument, prefix = true) {
          const node = { type: "UnaryExpression", operator, argument, prefix }, defs = NODE_FIELDS.UnaryExpression;
          return validate(defs.operator, node, "operator", operator), validate(defs.argument, node, "argument", argument, 1), validate(defs.prefix, node, "prefix", prefix), node;
        }, exports2.unionTypeAnnotation = function(types) {
          const node = { type: "UnionTypeAnnotation", types }, defs = NODE_FIELDS.UnionTypeAnnotation;
          return validate(defs.types, node, "types", types, 1), node;
        }, exports2.updateExpression = function(operator, argument, prefix = false) {
          const node = { type: "UpdateExpression", operator, argument, prefix }, defs = NODE_FIELDS.UpdateExpression;
          return validate(defs.operator, node, "operator", operator), validate(defs.argument, node, "argument", argument, 1), validate(defs.prefix, node, "prefix", prefix), node;
        }, exports2.v8IntrinsicIdentifier = function(name) {
          const node = { type: "V8IntrinsicIdentifier", name }, defs = NODE_FIELDS.V8IntrinsicIdentifier;
          return validate(defs.name, node, "name", name), node;
        }, exports2.variableDeclaration = function(kind, declarations) {
          const node = { type: "VariableDeclaration", kind, declarations }, defs = NODE_FIELDS.VariableDeclaration;
          return validate(defs.kind, node, "kind", kind), validate(defs.declarations, node, "declarations", declarations, 1), node;
        }, exports2.variableDeclarator = function(id, init = null) {
          const node = { type: "VariableDeclarator", id, init }, defs = NODE_FIELDS.VariableDeclarator;
          return validate(defs.id, node, "id", id, 1), validate(defs.init, node, "init", init, 1), node;
        }, exports2.variance = function(kind) {
          const node = { type: "Variance", kind }, defs = NODE_FIELDS.Variance;
          return validate(defs.kind, node, "kind", kind), node;
        }, exports2.voidTypeAnnotation = function() {
          return { type: "VoidTypeAnnotation" };
        }, exports2.whileStatement = function(test, body) {
          const node = { type: "WhileStatement", test, body }, defs = NODE_FIELDS.WhileStatement;
          return validate(defs.test, node, "test", test, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports2.withStatement = function(object, body) {
          const node = { type: "WithStatement", object, body }, defs = NODE_FIELDS.WithStatement;
          return validate(defs.object, node, "object", object, 1), validate(defs.body, node, "body", body, 1), node;
        }, exports2.yieldExpression = function(argument = null, delegate = false) {
          const node = { type: "YieldExpression", argument, delegate }, defs = NODE_FIELDS.YieldExpression;
          return validate(defs.argument, node, "argument", argument, 1), validate(defs.delegate, node, "delegate", delegate), node;
        };
        var _validate = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/validate.js"), _deprecationWarning = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/deprecationWarning.js"), utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js");
        const { validateInternal: validate } = _validate, { NODE_FIELDS } = utils;
        function numericLiteral(value2) {
          const node = { type: "NumericLiteral", value: value2 }, defs = NODE_FIELDS.NumericLiteral;
          return validate(defs.value, node, "value", value2), node;
        }
        function regExpLiteral(pattern, flags = "") {
          const node = { type: "RegExpLiteral", pattern, flags }, defs = NODE_FIELDS.RegExpLiteral;
          return validate(defs.pattern, node, "pattern", pattern), validate(defs.flags, node, "flags", flags), node;
        }
        function restElement(argument) {
          const node = { type: "RestElement", argument }, defs = NODE_FIELDS.RestElement;
          return validate(defs.argument, node, "argument", argument, 1), node;
        }
        function spreadElement(argument) {
          const node = { type: "SpreadElement", argument }, defs = NODE_FIELDS.SpreadElement;
          return validate(defs.argument, node, "argument", argument, 1), node;
        }
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/uppercase.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "AnyTypeAnnotation", { enumerable: true, get: function() {
          return _index.anyTypeAnnotation;
        } }), Object.defineProperty(exports2, "ArgumentPlaceholder", { enumerable: true, get: function() {
          return _index.argumentPlaceholder;
        } }), Object.defineProperty(exports2, "ArrayExpression", { enumerable: true, get: function() {
          return _index.arrayExpression;
        } }), Object.defineProperty(exports2, "ArrayPattern", { enumerable: true, get: function() {
          return _index.arrayPattern;
        } }), Object.defineProperty(exports2, "ArrayTypeAnnotation", { enumerable: true, get: function() {
          return _index.arrayTypeAnnotation;
        } }), Object.defineProperty(exports2, "ArrowFunctionExpression", { enumerable: true, get: function() {
          return _index.arrowFunctionExpression;
        } }), Object.defineProperty(exports2, "AssignmentExpression", { enumerable: true, get: function() {
          return _index.assignmentExpression;
        } }), Object.defineProperty(exports2, "AssignmentPattern", { enumerable: true, get: function() {
          return _index.assignmentPattern;
        } }), Object.defineProperty(exports2, "AwaitExpression", { enumerable: true, get: function() {
          return _index.awaitExpression;
        } }), Object.defineProperty(exports2, "BigIntLiteral", { enumerable: true, get: function() {
          return _index.bigIntLiteral;
        } }), Object.defineProperty(exports2, "BinaryExpression", { enumerable: true, get: function() {
          return _index.binaryExpression;
        } }), Object.defineProperty(exports2, "BindExpression", { enumerable: true, get: function() {
          return _index.bindExpression;
        } }), Object.defineProperty(exports2, "BlockStatement", { enumerable: true, get: function() {
          return _index.blockStatement;
        } }), Object.defineProperty(exports2, "BooleanLiteral", { enumerable: true, get: function() {
          return _index.booleanLiteral;
        } }), Object.defineProperty(exports2, "BooleanLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _index.booleanLiteralTypeAnnotation;
        } }), Object.defineProperty(exports2, "BooleanTypeAnnotation", { enumerable: true, get: function() {
          return _index.booleanTypeAnnotation;
        } }), Object.defineProperty(exports2, "BreakStatement", { enumerable: true, get: function() {
          return _index.breakStatement;
        } }), Object.defineProperty(exports2, "CallExpression", { enumerable: true, get: function() {
          return _index.callExpression;
        } }), Object.defineProperty(exports2, "CatchClause", { enumerable: true, get: function() {
          return _index.catchClause;
        } }), Object.defineProperty(exports2, "ClassAccessorProperty", { enumerable: true, get: function() {
          return _index.classAccessorProperty;
        } }), Object.defineProperty(exports2, "ClassBody", { enumerable: true, get: function() {
          return _index.classBody;
        } }), Object.defineProperty(exports2, "ClassDeclaration", { enumerable: true, get: function() {
          return _index.classDeclaration;
        } }), Object.defineProperty(exports2, "ClassExpression", { enumerable: true, get: function() {
          return _index.classExpression;
        } }), Object.defineProperty(exports2, "ClassImplements", { enumerable: true, get: function() {
          return _index.classImplements;
        } }), Object.defineProperty(exports2, "ClassMethod", { enumerable: true, get: function() {
          return _index.classMethod;
        } }), Object.defineProperty(exports2, "ClassPrivateMethod", { enumerable: true, get: function() {
          return _index.classPrivateMethod;
        } }), Object.defineProperty(exports2, "ClassPrivateProperty", { enumerable: true, get: function() {
          return _index.classPrivateProperty;
        } }), Object.defineProperty(exports2, "ClassProperty", { enumerable: true, get: function() {
          return _index.classProperty;
        } }), Object.defineProperty(exports2, "ConditionalExpression", { enumerable: true, get: function() {
          return _index.conditionalExpression;
        } }), Object.defineProperty(exports2, "ContinueStatement", { enumerable: true, get: function() {
          return _index.continueStatement;
        } }), Object.defineProperty(exports2, "DebuggerStatement", { enumerable: true, get: function() {
          return _index.debuggerStatement;
        } }), Object.defineProperty(exports2, "DecimalLiteral", { enumerable: true, get: function() {
          return _index.decimalLiteral;
        } }), Object.defineProperty(exports2, "DeclareClass", { enumerable: true, get: function() {
          return _index.declareClass;
        } }), Object.defineProperty(exports2, "DeclareExportAllDeclaration", { enumerable: true, get: function() {
          return _index.declareExportAllDeclaration;
        } }), Object.defineProperty(exports2, "DeclareExportDeclaration", { enumerable: true, get: function() {
          return _index.declareExportDeclaration;
        } }), Object.defineProperty(exports2, "DeclareFunction", { enumerable: true, get: function() {
          return _index.declareFunction;
        } }), Object.defineProperty(exports2, "DeclareInterface", { enumerable: true, get: function() {
          return _index.declareInterface;
        } }), Object.defineProperty(exports2, "DeclareModule", { enumerable: true, get: function() {
          return _index.declareModule;
        } }), Object.defineProperty(exports2, "DeclareModuleExports", { enumerable: true, get: function() {
          return _index.declareModuleExports;
        } }), Object.defineProperty(exports2, "DeclareOpaqueType", { enumerable: true, get: function() {
          return _index.declareOpaqueType;
        } }), Object.defineProperty(exports2, "DeclareTypeAlias", { enumerable: true, get: function() {
          return _index.declareTypeAlias;
        } }), Object.defineProperty(exports2, "DeclareVariable", { enumerable: true, get: function() {
          return _index.declareVariable;
        } }), Object.defineProperty(exports2, "DeclaredPredicate", { enumerable: true, get: function() {
          return _index.declaredPredicate;
        } }), Object.defineProperty(exports2, "Decorator", { enumerable: true, get: function() {
          return _index.decorator;
        } }), Object.defineProperty(exports2, "Directive", { enumerable: true, get: function() {
          return _index.directive;
        } }), Object.defineProperty(exports2, "DirectiveLiteral", { enumerable: true, get: function() {
          return _index.directiveLiteral;
        } }), Object.defineProperty(exports2, "DoExpression", { enumerable: true, get: function() {
          return _index.doExpression;
        } }), Object.defineProperty(exports2, "DoWhileStatement", { enumerable: true, get: function() {
          return _index.doWhileStatement;
        } }), Object.defineProperty(exports2, "EmptyStatement", { enumerable: true, get: function() {
          return _index.emptyStatement;
        } }), Object.defineProperty(exports2, "EmptyTypeAnnotation", { enumerable: true, get: function() {
          return _index.emptyTypeAnnotation;
        } }), Object.defineProperty(exports2, "EnumBooleanBody", { enumerable: true, get: function() {
          return _index.enumBooleanBody;
        } }), Object.defineProperty(exports2, "EnumBooleanMember", { enumerable: true, get: function() {
          return _index.enumBooleanMember;
        } }), Object.defineProperty(exports2, "EnumDeclaration", { enumerable: true, get: function() {
          return _index.enumDeclaration;
        } }), Object.defineProperty(exports2, "EnumDefaultedMember", { enumerable: true, get: function() {
          return _index.enumDefaultedMember;
        } }), Object.defineProperty(exports2, "EnumNumberBody", { enumerable: true, get: function() {
          return _index.enumNumberBody;
        } }), Object.defineProperty(exports2, "EnumNumberMember", { enumerable: true, get: function() {
          return _index.enumNumberMember;
        } }), Object.defineProperty(exports2, "EnumStringBody", { enumerable: true, get: function() {
          return _index.enumStringBody;
        } }), Object.defineProperty(exports2, "EnumStringMember", { enumerable: true, get: function() {
          return _index.enumStringMember;
        } }), Object.defineProperty(exports2, "EnumSymbolBody", { enumerable: true, get: function() {
          return _index.enumSymbolBody;
        } }), Object.defineProperty(exports2, "ExistsTypeAnnotation", { enumerable: true, get: function() {
          return _index.existsTypeAnnotation;
        } }), Object.defineProperty(exports2, "ExportAllDeclaration", { enumerable: true, get: function() {
          return _index.exportAllDeclaration;
        } }), Object.defineProperty(exports2, "ExportDefaultDeclaration", { enumerable: true, get: function() {
          return _index.exportDefaultDeclaration;
        } }), Object.defineProperty(exports2, "ExportDefaultSpecifier", { enumerable: true, get: function() {
          return _index.exportDefaultSpecifier;
        } }), Object.defineProperty(exports2, "ExportNamedDeclaration", { enumerable: true, get: function() {
          return _index.exportNamedDeclaration;
        } }), Object.defineProperty(exports2, "ExportNamespaceSpecifier", { enumerable: true, get: function() {
          return _index.exportNamespaceSpecifier;
        } }), Object.defineProperty(exports2, "ExportSpecifier", { enumerable: true, get: function() {
          return _index.exportSpecifier;
        } }), Object.defineProperty(exports2, "ExpressionStatement", { enumerable: true, get: function() {
          return _index.expressionStatement;
        } }), Object.defineProperty(exports2, "File", { enumerable: true, get: function() {
          return _index.file;
        } }), Object.defineProperty(exports2, "ForInStatement", { enumerable: true, get: function() {
          return _index.forInStatement;
        } }), Object.defineProperty(exports2, "ForOfStatement", { enumerable: true, get: function() {
          return _index.forOfStatement;
        } }), Object.defineProperty(exports2, "ForStatement", { enumerable: true, get: function() {
          return _index.forStatement;
        } }), Object.defineProperty(exports2, "FunctionDeclaration", { enumerable: true, get: function() {
          return _index.functionDeclaration;
        } }), Object.defineProperty(exports2, "FunctionExpression", { enumerable: true, get: function() {
          return _index.functionExpression;
        } }), Object.defineProperty(exports2, "FunctionTypeAnnotation", { enumerable: true, get: function() {
          return _index.functionTypeAnnotation;
        } }), Object.defineProperty(exports2, "FunctionTypeParam", { enumerable: true, get: function() {
          return _index.functionTypeParam;
        } }), Object.defineProperty(exports2, "GenericTypeAnnotation", { enumerable: true, get: function() {
          return _index.genericTypeAnnotation;
        } }), Object.defineProperty(exports2, "Identifier", { enumerable: true, get: function() {
          return _index.identifier;
        } }), Object.defineProperty(exports2, "IfStatement", { enumerable: true, get: function() {
          return _index.ifStatement;
        } }), Object.defineProperty(exports2, "Import", { enumerable: true, get: function() {
          return _index.import;
        } }), Object.defineProperty(exports2, "ImportAttribute", { enumerable: true, get: function() {
          return _index.importAttribute;
        } }), Object.defineProperty(exports2, "ImportDeclaration", { enumerable: true, get: function() {
          return _index.importDeclaration;
        } }), Object.defineProperty(exports2, "ImportDefaultSpecifier", { enumerable: true, get: function() {
          return _index.importDefaultSpecifier;
        } }), Object.defineProperty(exports2, "ImportExpression", { enumerable: true, get: function() {
          return _index.importExpression;
        } }), Object.defineProperty(exports2, "ImportNamespaceSpecifier", { enumerable: true, get: function() {
          return _index.importNamespaceSpecifier;
        } }), Object.defineProperty(exports2, "ImportSpecifier", { enumerable: true, get: function() {
          return _index.importSpecifier;
        } }), Object.defineProperty(exports2, "IndexedAccessType", { enumerable: true, get: function() {
          return _index.indexedAccessType;
        } }), Object.defineProperty(exports2, "InferredPredicate", { enumerable: true, get: function() {
          return _index.inferredPredicate;
        } }), Object.defineProperty(exports2, "InterfaceDeclaration", { enumerable: true, get: function() {
          return _index.interfaceDeclaration;
        } }), Object.defineProperty(exports2, "InterfaceExtends", { enumerable: true, get: function() {
          return _index.interfaceExtends;
        } }), Object.defineProperty(exports2, "InterfaceTypeAnnotation", { enumerable: true, get: function() {
          return _index.interfaceTypeAnnotation;
        } }), Object.defineProperty(exports2, "InterpreterDirective", { enumerable: true, get: function() {
          return _index.interpreterDirective;
        } }), Object.defineProperty(exports2, "IntersectionTypeAnnotation", { enumerable: true, get: function() {
          return _index.intersectionTypeAnnotation;
        } }), Object.defineProperty(exports2, "JSXAttribute", { enumerable: true, get: function() {
          return _index.jsxAttribute;
        } }), Object.defineProperty(exports2, "JSXClosingElement", { enumerable: true, get: function() {
          return _index.jsxClosingElement;
        } }), Object.defineProperty(exports2, "JSXClosingFragment", { enumerable: true, get: function() {
          return _index.jsxClosingFragment;
        } }), Object.defineProperty(exports2, "JSXElement", { enumerable: true, get: function() {
          return _index.jsxElement;
        } }), Object.defineProperty(exports2, "JSXEmptyExpression", { enumerable: true, get: function() {
          return _index.jsxEmptyExpression;
        } }), Object.defineProperty(exports2, "JSXExpressionContainer", { enumerable: true, get: function() {
          return _index.jsxExpressionContainer;
        } }), Object.defineProperty(exports2, "JSXFragment", { enumerable: true, get: function() {
          return _index.jsxFragment;
        } }), Object.defineProperty(exports2, "JSXIdentifier", { enumerable: true, get: function() {
          return _index.jsxIdentifier;
        } }), Object.defineProperty(exports2, "JSXMemberExpression", { enumerable: true, get: function() {
          return _index.jsxMemberExpression;
        } }), Object.defineProperty(exports2, "JSXNamespacedName", { enumerable: true, get: function() {
          return _index.jsxNamespacedName;
        } }), Object.defineProperty(exports2, "JSXOpeningElement", { enumerable: true, get: function() {
          return _index.jsxOpeningElement;
        } }), Object.defineProperty(exports2, "JSXOpeningFragment", { enumerable: true, get: function() {
          return _index.jsxOpeningFragment;
        } }), Object.defineProperty(exports2, "JSXSpreadAttribute", { enumerable: true, get: function() {
          return _index.jsxSpreadAttribute;
        } }), Object.defineProperty(exports2, "JSXSpreadChild", { enumerable: true, get: function() {
          return _index.jsxSpreadChild;
        } }), Object.defineProperty(exports2, "JSXText", { enumerable: true, get: function() {
          return _index.jsxText;
        } }), Object.defineProperty(exports2, "LabeledStatement", { enumerable: true, get: function() {
          return _index.labeledStatement;
        } }), Object.defineProperty(exports2, "LogicalExpression", { enumerable: true, get: function() {
          return _index.logicalExpression;
        } }), Object.defineProperty(exports2, "MemberExpression", { enumerable: true, get: function() {
          return _index.memberExpression;
        } }), Object.defineProperty(exports2, "MetaProperty", { enumerable: true, get: function() {
          return _index.metaProperty;
        } }), Object.defineProperty(exports2, "MixedTypeAnnotation", { enumerable: true, get: function() {
          return _index.mixedTypeAnnotation;
        } }), Object.defineProperty(exports2, "ModuleExpression", { enumerable: true, get: function() {
          return _index.moduleExpression;
        } }), Object.defineProperty(exports2, "NewExpression", { enumerable: true, get: function() {
          return _index.newExpression;
        } }), Object.defineProperty(exports2, "Noop", { enumerable: true, get: function() {
          return _index.noop;
        } }), Object.defineProperty(exports2, "NullLiteral", { enumerable: true, get: function() {
          return _index.nullLiteral;
        } }), Object.defineProperty(exports2, "NullLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _index.nullLiteralTypeAnnotation;
        } }), Object.defineProperty(exports2, "NullableTypeAnnotation", { enumerable: true, get: function() {
          return _index.nullableTypeAnnotation;
        } }), Object.defineProperty(exports2, "NumberLiteral", { enumerable: true, get: function() {
          return _index.numberLiteral;
        } }), Object.defineProperty(exports2, "NumberLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _index.numberLiteralTypeAnnotation;
        } }), Object.defineProperty(exports2, "NumberTypeAnnotation", { enumerable: true, get: function() {
          return _index.numberTypeAnnotation;
        } }), Object.defineProperty(exports2, "NumericLiteral", { enumerable: true, get: function() {
          return _index.numericLiteral;
        } }), Object.defineProperty(exports2, "ObjectExpression", { enumerable: true, get: function() {
          return _index.objectExpression;
        } }), Object.defineProperty(exports2, "ObjectMethod", { enumerable: true, get: function() {
          return _index.objectMethod;
        } }), Object.defineProperty(exports2, "ObjectPattern", { enumerable: true, get: function() {
          return _index.objectPattern;
        } }), Object.defineProperty(exports2, "ObjectProperty", { enumerable: true, get: function() {
          return _index.objectProperty;
        } }), Object.defineProperty(exports2, "ObjectTypeAnnotation", { enumerable: true, get: function() {
          return _index.objectTypeAnnotation;
        } }), Object.defineProperty(exports2, "ObjectTypeCallProperty", { enumerable: true, get: function() {
          return _index.objectTypeCallProperty;
        } }), Object.defineProperty(exports2, "ObjectTypeIndexer", { enumerable: true, get: function() {
          return _index.objectTypeIndexer;
        } }), Object.defineProperty(exports2, "ObjectTypeInternalSlot", { enumerable: true, get: function() {
          return _index.objectTypeInternalSlot;
        } }), Object.defineProperty(exports2, "ObjectTypeProperty", { enumerable: true, get: function() {
          return _index.objectTypeProperty;
        } }), Object.defineProperty(exports2, "ObjectTypeSpreadProperty", { enumerable: true, get: function() {
          return _index.objectTypeSpreadProperty;
        } }), Object.defineProperty(exports2, "OpaqueType", { enumerable: true, get: function() {
          return _index.opaqueType;
        } }), Object.defineProperty(exports2, "OptionalCallExpression", { enumerable: true, get: function() {
          return _index.optionalCallExpression;
        } }), Object.defineProperty(exports2, "OptionalIndexedAccessType", { enumerable: true, get: function() {
          return _index.optionalIndexedAccessType;
        } }), Object.defineProperty(exports2, "OptionalMemberExpression", { enumerable: true, get: function() {
          return _index.optionalMemberExpression;
        } }), Object.defineProperty(exports2, "ParenthesizedExpression", { enumerable: true, get: function() {
          return _index.parenthesizedExpression;
        } }), Object.defineProperty(exports2, "PipelineBareFunction", { enumerable: true, get: function() {
          return _index.pipelineBareFunction;
        } }), Object.defineProperty(exports2, "PipelinePrimaryTopicReference", { enumerable: true, get: function() {
          return _index.pipelinePrimaryTopicReference;
        } }), Object.defineProperty(exports2, "PipelineTopicExpression", { enumerable: true, get: function() {
          return _index.pipelineTopicExpression;
        } }), Object.defineProperty(exports2, "Placeholder", { enumerable: true, get: function() {
          return _index.placeholder;
        } }), Object.defineProperty(exports2, "PrivateName", { enumerable: true, get: function() {
          return _index.privateName;
        } }), Object.defineProperty(exports2, "Program", { enumerable: true, get: function() {
          return _index.program;
        } }), Object.defineProperty(exports2, "QualifiedTypeIdentifier", { enumerable: true, get: function() {
          return _index.qualifiedTypeIdentifier;
        } }), Object.defineProperty(exports2, "RecordExpression", { enumerable: true, get: function() {
          return _index.recordExpression;
        } }), Object.defineProperty(exports2, "RegExpLiteral", { enumerable: true, get: function() {
          return _index.regExpLiteral;
        } }), Object.defineProperty(exports2, "RegexLiteral", { enumerable: true, get: function() {
          return _index.regexLiteral;
        } }), Object.defineProperty(exports2, "RestElement", { enumerable: true, get: function() {
          return _index.restElement;
        } }), Object.defineProperty(exports2, "RestProperty", { enumerable: true, get: function() {
          return _index.restProperty;
        } }), Object.defineProperty(exports2, "ReturnStatement", { enumerable: true, get: function() {
          return _index.returnStatement;
        } }), Object.defineProperty(exports2, "SequenceExpression", { enumerable: true, get: function() {
          return _index.sequenceExpression;
        } }), Object.defineProperty(exports2, "SpreadElement", { enumerable: true, get: function() {
          return _index.spreadElement;
        } }), Object.defineProperty(exports2, "SpreadProperty", { enumerable: true, get: function() {
          return _index.spreadProperty;
        } }), Object.defineProperty(exports2, "StaticBlock", { enumerable: true, get: function() {
          return _index.staticBlock;
        } }), Object.defineProperty(exports2, "StringLiteral", { enumerable: true, get: function() {
          return _index.stringLiteral;
        } }), Object.defineProperty(exports2, "StringLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _index.stringLiteralTypeAnnotation;
        } }), Object.defineProperty(exports2, "StringTypeAnnotation", { enumerable: true, get: function() {
          return _index.stringTypeAnnotation;
        } }), Object.defineProperty(exports2, "Super", { enumerable: true, get: function() {
          return _index.super;
        } }), Object.defineProperty(exports2, "SwitchCase", { enumerable: true, get: function() {
          return _index.switchCase;
        } }), Object.defineProperty(exports2, "SwitchStatement", { enumerable: true, get: function() {
          return _index.switchStatement;
        } }), Object.defineProperty(exports2, "SymbolTypeAnnotation", { enumerable: true, get: function() {
          return _index.symbolTypeAnnotation;
        } }), Object.defineProperty(exports2, "TSAnyKeyword", { enumerable: true, get: function() {
          return _index.tsAnyKeyword;
        } }), Object.defineProperty(exports2, "TSArrayType", { enumerable: true, get: function() {
          return _index.tsArrayType;
        } }), Object.defineProperty(exports2, "TSAsExpression", { enumerable: true, get: function() {
          return _index.tsAsExpression;
        } }), Object.defineProperty(exports2, "TSBigIntKeyword", { enumerable: true, get: function() {
          return _index.tsBigIntKeyword;
        } }), Object.defineProperty(exports2, "TSBooleanKeyword", { enumerable: true, get: function() {
          return _index.tsBooleanKeyword;
        } }), Object.defineProperty(exports2, "TSCallSignatureDeclaration", { enumerable: true, get: function() {
          return _index.tsCallSignatureDeclaration;
        } }), Object.defineProperty(exports2, "TSConditionalType", { enumerable: true, get: function() {
          return _index.tsConditionalType;
        } }), Object.defineProperty(exports2, "TSConstructSignatureDeclaration", { enumerable: true, get: function() {
          return _index.tsConstructSignatureDeclaration;
        } }), Object.defineProperty(exports2, "TSConstructorType", { enumerable: true, get: function() {
          return _index.tsConstructorType;
        } }), Object.defineProperty(exports2, "TSDeclareFunction", { enumerable: true, get: function() {
          return _index.tsDeclareFunction;
        } }), Object.defineProperty(exports2, "TSDeclareMethod", { enumerable: true, get: function() {
          return _index.tsDeclareMethod;
        } }), Object.defineProperty(exports2, "TSEnumDeclaration", { enumerable: true, get: function() {
          return _index.tsEnumDeclaration;
        } }), Object.defineProperty(exports2, "TSEnumMember", { enumerable: true, get: function() {
          return _index.tsEnumMember;
        } }), Object.defineProperty(exports2, "TSExportAssignment", { enumerable: true, get: function() {
          return _index.tsExportAssignment;
        } }), Object.defineProperty(exports2, "TSExpressionWithTypeArguments", { enumerable: true, get: function() {
          return _index.tsExpressionWithTypeArguments;
        } }), Object.defineProperty(exports2, "TSExternalModuleReference", { enumerable: true, get: function() {
          return _index.tsExternalModuleReference;
        } }), Object.defineProperty(exports2, "TSFunctionType", { enumerable: true, get: function() {
          return _index.tsFunctionType;
        } }), Object.defineProperty(exports2, "TSImportEqualsDeclaration", { enumerable: true, get: function() {
          return _index.tsImportEqualsDeclaration;
        } }), Object.defineProperty(exports2, "TSImportType", { enumerable: true, get: function() {
          return _index.tsImportType;
        } }), Object.defineProperty(exports2, "TSIndexSignature", { enumerable: true, get: function() {
          return _index.tsIndexSignature;
        } }), Object.defineProperty(exports2, "TSIndexedAccessType", { enumerable: true, get: function() {
          return _index.tsIndexedAccessType;
        } }), Object.defineProperty(exports2, "TSInferType", { enumerable: true, get: function() {
          return _index.tsInferType;
        } }), Object.defineProperty(exports2, "TSInstantiationExpression", { enumerable: true, get: function() {
          return _index.tsInstantiationExpression;
        } }), Object.defineProperty(exports2, "TSInterfaceBody", { enumerable: true, get: function() {
          return _index.tsInterfaceBody;
        } }), Object.defineProperty(exports2, "TSInterfaceDeclaration", { enumerable: true, get: function() {
          return _index.tsInterfaceDeclaration;
        } }), Object.defineProperty(exports2, "TSIntersectionType", { enumerable: true, get: function() {
          return _index.tsIntersectionType;
        } }), Object.defineProperty(exports2, "TSIntrinsicKeyword", { enumerable: true, get: function() {
          return _index.tsIntrinsicKeyword;
        } }), Object.defineProperty(exports2, "TSLiteralType", { enumerable: true, get: function() {
          return _index.tsLiteralType;
        } }), Object.defineProperty(exports2, "TSMappedType", { enumerable: true, get: function() {
          return _index.tsMappedType;
        } }), Object.defineProperty(exports2, "TSMethodSignature", { enumerable: true, get: function() {
          return _index.tsMethodSignature;
        } }), Object.defineProperty(exports2, "TSModuleBlock", { enumerable: true, get: function() {
          return _index.tsModuleBlock;
        } }), Object.defineProperty(exports2, "TSModuleDeclaration", { enumerable: true, get: function() {
          return _index.tsModuleDeclaration;
        } }), Object.defineProperty(exports2, "TSNamedTupleMember", { enumerable: true, get: function() {
          return _index.tsNamedTupleMember;
        } }), Object.defineProperty(exports2, "TSNamespaceExportDeclaration", { enumerable: true, get: function() {
          return _index.tsNamespaceExportDeclaration;
        } }), Object.defineProperty(exports2, "TSNeverKeyword", { enumerable: true, get: function() {
          return _index.tsNeverKeyword;
        } }), Object.defineProperty(exports2, "TSNonNullExpression", { enumerable: true, get: function() {
          return _index.tsNonNullExpression;
        } }), Object.defineProperty(exports2, "TSNullKeyword", { enumerable: true, get: function() {
          return _index.tsNullKeyword;
        } }), Object.defineProperty(exports2, "TSNumberKeyword", { enumerable: true, get: function() {
          return _index.tsNumberKeyword;
        } }), Object.defineProperty(exports2, "TSObjectKeyword", { enumerable: true, get: function() {
          return _index.tsObjectKeyword;
        } }), Object.defineProperty(exports2, "TSOptionalType", { enumerable: true, get: function() {
          return _index.tsOptionalType;
        } }), Object.defineProperty(exports2, "TSParameterProperty", { enumerable: true, get: function() {
          return _index.tsParameterProperty;
        } }), Object.defineProperty(exports2, "TSParenthesizedType", { enumerable: true, get: function() {
          return _index.tsParenthesizedType;
        } }), Object.defineProperty(exports2, "TSPropertySignature", { enumerable: true, get: function() {
          return _index.tsPropertySignature;
        } }), Object.defineProperty(exports2, "TSQualifiedName", { enumerable: true, get: function() {
          return _index.tsQualifiedName;
        } }), Object.defineProperty(exports2, "TSRestType", { enumerable: true, get: function() {
          return _index.tsRestType;
        } }), Object.defineProperty(exports2, "TSSatisfiesExpression", { enumerable: true, get: function() {
          return _index.tsSatisfiesExpression;
        } }), Object.defineProperty(exports2, "TSStringKeyword", { enumerable: true, get: function() {
          return _index.tsStringKeyword;
        } }), Object.defineProperty(exports2, "TSSymbolKeyword", { enumerable: true, get: function() {
          return _index.tsSymbolKeyword;
        } }), Object.defineProperty(exports2, "TSThisType", { enumerable: true, get: function() {
          return _index.tsThisType;
        } }), Object.defineProperty(exports2, "TSTupleType", { enumerable: true, get: function() {
          return _index.tsTupleType;
        } }), Object.defineProperty(exports2, "TSTypeAliasDeclaration", { enumerable: true, get: function() {
          return _index.tsTypeAliasDeclaration;
        } }), Object.defineProperty(exports2, "TSTypeAnnotation", { enumerable: true, get: function() {
          return _index.tsTypeAnnotation;
        } }), Object.defineProperty(exports2, "TSTypeAssertion", { enumerable: true, get: function() {
          return _index.tsTypeAssertion;
        } }), Object.defineProperty(exports2, "TSTypeLiteral", { enumerable: true, get: function() {
          return _index.tsTypeLiteral;
        } }), Object.defineProperty(exports2, "TSTypeOperator", { enumerable: true, get: function() {
          return _index.tsTypeOperator;
        } }), Object.defineProperty(exports2, "TSTypeParameter", { enumerable: true, get: function() {
          return _index.tsTypeParameter;
        } }), Object.defineProperty(exports2, "TSTypeParameterDeclaration", { enumerable: true, get: function() {
          return _index.tsTypeParameterDeclaration;
        } }), Object.defineProperty(exports2, "TSTypeParameterInstantiation", { enumerable: true, get: function() {
          return _index.tsTypeParameterInstantiation;
        } }), Object.defineProperty(exports2, "TSTypePredicate", { enumerable: true, get: function() {
          return _index.tsTypePredicate;
        } }), Object.defineProperty(exports2, "TSTypeQuery", { enumerable: true, get: function() {
          return _index.tsTypeQuery;
        } }), Object.defineProperty(exports2, "TSTypeReference", { enumerable: true, get: function() {
          return _index.tsTypeReference;
        } }), Object.defineProperty(exports2, "TSUndefinedKeyword", { enumerable: true, get: function() {
          return _index.tsUndefinedKeyword;
        } }), Object.defineProperty(exports2, "TSUnionType", { enumerable: true, get: function() {
          return _index.tsUnionType;
        } }), Object.defineProperty(exports2, "TSUnknownKeyword", { enumerable: true, get: function() {
          return _index.tsUnknownKeyword;
        } }), Object.defineProperty(exports2, "TSVoidKeyword", { enumerable: true, get: function() {
          return _index.tsVoidKeyword;
        } }), Object.defineProperty(exports2, "TaggedTemplateExpression", { enumerable: true, get: function() {
          return _index.taggedTemplateExpression;
        } }), Object.defineProperty(exports2, "TemplateElement", { enumerable: true, get: function() {
          return _index.templateElement;
        } }), Object.defineProperty(exports2, "TemplateLiteral", { enumerable: true, get: function() {
          return _index.templateLiteral;
        } }), Object.defineProperty(exports2, "ThisExpression", { enumerable: true, get: function() {
          return _index.thisExpression;
        } }), Object.defineProperty(exports2, "ThisTypeAnnotation", { enumerable: true, get: function() {
          return _index.thisTypeAnnotation;
        } }), Object.defineProperty(exports2, "ThrowStatement", { enumerable: true, get: function() {
          return _index.throwStatement;
        } }), Object.defineProperty(exports2, "TopicReference", { enumerable: true, get: function() {
          return _index.topicReference;
        } }), Object.defineProperty(exports2, "TryStatement", { enumerable: true, get: function() {
          return _index.tryStatement;
        } }), Object.defineProperty(exports2, "TupleExpression", { enumerable: true, get: function() {
          return _index.tupleExpression;
        } }), Object.defineProperty(exports2, "TupleTypeAnnotation", { enumerable: true, get: function() {
          return _index.tupleTypeAnnotation;
        } }), Object.defineProperty(exports2, "TypeAlias", { enumerable: true, get: function() {
          return _index.typeAlias;
        } }), Object.defineProperty(exports2, "TypeAnnotation", { enumerable: true, get: function() {
          return _index.typeAnnotation;
        } }), Object.defineProperty(exports2, "TypeCastExpression", { enumerable: true, get: function() {
          return _index.typeCastExpression;
        } }), Object.defineProperty(exports2, "TypeParameter", { enumerable: true, get: function() {
          return _index.typeParameter;
        } }), Object.defineProperty(exports2, "TypeParameterDeclaration", { enumerable: true, get: function() {
          return _index.typeParameterDeclaration;
        } }), Object.defineProperty(exports2, "TypeParameterInstantiation", { enumerable: true, get: function() {
          return _index.typeParameterInstantiation;
        } }), Object.defineProperty(exports2, "TypeofTypeAnnotation", { enumerable: true, get: function() {
          return _index.typeofTypeAnnotation;
        } }), Object.defineProperty(exports2, "UnaryExpression", { enumerable: true, get: function() {
          return _index.unaryExpression;
        } }), Object.defineProperty(exports2, "UnionTypeAnnotation", { enumerable: true, get: function() {
          return _index.unionTypeAnnotation;
        } }), Object.defineProperty(exports2, "UpdateExpression", { enumerable: true, get: function() {
          return _index.updateExpression;
        } }), Object.defineProperty(exports2, "V8IntrinsicIdentifier", { enumerable: true, get: function() {
          return _index.v8IntrinsicIdentifier;
        } }), Object.defineProperty(exports2, "VariableDeclaration", { enumerable: true, get: function() {
          return _index.variableDeclaration;
        } }), Object.defineProperty(exports2, "VariableDeclarator", { enumerable: true, get: function() {
          return _index.variableDeclarator;
        } }), Object.defineProperty(exports2, "Variance", { enumerable: true, get: function() {
          return _index.variance;
        } }), Object.defineProperty(exports2, "VoidTypeAnnotation", { enumerable: true, get: function() {
          return _index.voidTypeAnnotation;
        } }), Object.defineProperty(exports2, "WhileStatement", { enumerable: true, get: function() {
          return _index.whileStatement;
        } }), Object.defineProperty(exports2, "WithStatement", { enumerable: true, get: function() {
          return _index.withStatement;
        } }), Object.defineProperty(exports2, "YieldExpression", { enumerable: true, get: function() {
          return _index.yieldExpression;
        } });
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/productions.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.buildUndefinedNode = function() {
          return (0, _index.unaryExpression)("void", (0, _index.numericLiteral)(0), true);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/react/buildChildren.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          const elements = [];
          for (let i2 = 0; i2 < node.children.length; i2++) {
            let child = node.children[i2];
            (0, _index.isJSXText)(child) ? (0, _cleanJSXElementLiteralChild.default)(child, elements) : ((0, _index.isJSXExpressionContainer)(child) && (child = child.expression), (0, _index.isJSXEmptyExpression)(child) || elements.push(child));
          }
          return elements;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _cleanJSXElementLiteralChild = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(typeAnnotations) {
          const types = typeAnnotations.map((type) => (0, _index2.isTSTypeAnnotation)(type) ? type.typeAnnotation : type), flattened = (0, _removeTypeDuplicates.default)(types);
          return 1 === flattened.length ? flattened[0] : (0, _index.tsUnionType)(flattened);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js"), _removeTypeDuplicates = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/clone.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return (0, _cloneNode.default)(node, false);
        };
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneDeep.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return (0, _cloneNode.default)(node);
        };
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return (0, _cloneNode.default)(node, true, true);
        };
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, deep = true, withoutLoc = false) {
          return cloneNodeInternal(node, deep, withoutLoc, /* @__PURE__ */ new Map());
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
        const { hasOwn } = { hasOwn: Function.call.bind(Object.prototype.hasOwnProperty) };
        function cloneIfNode(obj, deep, withoutLoc, commentsCache) {
          return obj && "string" == typeof obj.type ? cloneNodeInternal(obj, deep, withoutLoc, commentsCache) : obj;
        }
        function cloneIfNodeOrArray(obj, deep, withoutLoc, commentsCache) {
          return Array.isArray(obj) ? obj.map((node) => cloneIfNode(node, deep, withoutLoc, commentsCache)) : cloneIfNode(obj, deep, withoutLoc, commentsCache);
        }
        function cloneNodeInternal(node, deep = true, withoutLoc = false, commentsCache) {
          if (!node) return node;
          const { type } = node, newNode = { type: node.type };
          if ((0, _index2.isIdentifier)(node)) newNode.name = node.name, hasOwn(node, "optional") && "boolean" == typeof node.optional && (newNode.optional = node.optional), hasOwn(node, "typeAnnotation") && (newNode.typeAnnotation = deep ? cloneIfNodeOrArray(node.typeAnnotation, true, withoutLoc, commentsCache) : node.typeAnnotation), hasOwn(node, "decorators") && (newNode.decorators = deep ? cloneIfNodeOrArray(node.decorators, true, withoutLoc, commentsCache) : node.decorators);
          else {
            if (!hasOwn(_index.NODE_FIELDS, type)) throw new Error(`Unknown node type: "${type}"`);
            for (const field of Object.keys(_index.NODE_FIELDS[type])) hasOwn(node, field) && (newNode[field] = deep ? (0, _index2.isFile)(node) && "comments" === field ? maybeCloneComments(node.comments, deep, withoutLoc, commentsCache) : cloneIfNodeOrArray(node[field], true, withoutLoc, commentsCache) : node[field]);
          }
          return hasOwn(node, "loc") && (newNode.loc = withoutLoc ? null : node.loc), hasOwn(node, "leadingComments") && (newNode.leadingComments = maybeCloneComments(node.leadingComments, deep, withoutLoc, commentsCache)), hasOwn(node, "innerComments") && (newNode.innerComments = maybeCloneComments(node.innerComments, deep, withoutLoc, commentsCache)), hasOwn(node, "trailingComments") && (newNode.trailingComments = maybeCloneComments(node.trailingComments, deep, withoutLoc, commentsCache)), hasOwn(node, "extra") && (newNode.extra = Object.assign({}, node.extra)), newNode;
        }
        function maybeCloneComments(comments, deep, withoutLoc, commentsCache) {
          return comments && deep ? comments.map((comment) => {
            const cache = commentsCache.get(comment);
            if (cache) return cache;
            const { type, value: value2, loc } = comment, ret = { type, value: value2, loc };
            return withoutLoc && (ret.loc = null), commentsCache.set(comment, ret), ret;
          }) : comments;
        }
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneWithoutLoc.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return (0, _cloneNode.default)(node, false, true);
        };
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/addComment.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, type, content, line) {
          return (0, _addComments.default)(node, type, [{ type: line ? "CommentLine" : "CommentBlock", value: content }]);
        };
        var _addComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/addComments.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/addComments.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, type, comments) {
          if (!comments || !node) return node;
          const key = `${type}Comments`;
          node[key] ? "leading" === type ? node[key] = comments.concat(node[key]) : node[key].push(...comments) : node[key] = comments;
          return node;
        };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritInnerComments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(child, parent) {
          (0, _inherit.default)("innerComments", child, parent);
        };
        var _inherit = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/inherit.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritLeadingComments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(child, parent) {
          (0, _inherit.default)("leadingComments", child, parent);
        };
        var _inherit = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/inherit.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritTrailingComments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(child, parent) {
          (0, _inherit.default)("trailingComments", child, parent);
        };
        var _inherit = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/inherit.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritsComments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(child, parent) {
          return (0, _inheritTrailingComments.default)(child, parent), (0, _inheritLeadingComments.default)(child, parent), (0, _inheritInnerComments.default)(child, parent), child;
        };
        var _inheritTrailingComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritTrailingComments.js"), _inheritLeadingComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritLeadingComments.js"), _inheritInnerComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritInnerComments.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/removeComments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return _index.COMMENT_KEYS.forEach((key) => {
            node[key] = null;
          }), node;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/generated/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.WHILE_TYPES = exports2.USERWHITESPACABLE_TYPES = exports2.UNARYLIKE_TYPES = exports2.TYPESCRIPT_TYPES = exports2.TSTYPE_TYPES = exports2.TSTYPEELEMENT_TYPES = exports2.TSENTITYNAME_TYPES = exports2.TSBASETYPE_TYPES = exports2.TERMINATORLESS_TYPES = exports2.STATEMENT_TYPES = exports2.STANDARDIZED_TYPES = exports2.SCOPABLE_TYPES = exports2.PUREISH_TYPES = exports2.PROPERTY_TYPES = exports2.PRIVATE_TYPES = exports2.PATTERN_TYPES = exports2.PATTERNLIKE_TYPES = exports2.OBJECTMEMBER_TYPES = exports2.MODULESPECIFIER_TYPES = exports2.MODULEDECLARATION_TYPES = exports2.MISCELLANEOUS_TYPES = exports2.METHOD_TYPES = exports2.LVAL_TYPES = exports2.LOOP_TYPES = exports2.LITERAL_TYPES = exports2.JSX_TYPES = exports2.IMPORTOREXPORTDECLARATION_TYPES = exports2.IMMUTABLE_TYPES = exports2.FUNCTION_TYPES = exports2.FUNCTIONPARENT_TYPES = exports2.FOR_TYPES = exports2.FORXSTATEMENT_TYPES = exports2.FLOW_TYPES = exports2.FLOWTYPE_TYPES = exports2.FLOWPREDICATE_TYPES = exports2.FLOWDECLARATION_TYPES = exports2.FLOWBASEANNOTATION_TYPES = exports2.EXPRESSION_TYPES = exports2.EXPRESSIONWRAPPER_TYPES = exports2.EXPORTDECLARATION_TYPES = exports2.ENUMMEMBER_TYPES = exports2.ENUMBODY_TYPES = exports2.DECLARATION_TYPES = exports2.CONDITIONAL_TYPES = exports2.COMPLETIONSTATEMENT_TYPES = exports2.CLASS_TYPES = exports2.BLOCK_TYPES = exports2.BLOCKPARENT_TYPES = exports2.BINARY_TYPES = exports2.ACCESSOR_TYPES = void 0;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
        exports2.STANDARDIZED_TYPES = _index.FLIPPED_ALIAS_KEYS.Standardized, exports2.EXPRESSION_TYPES = _index.FLIPPED_ALIAS_KEYS.Expression, exports2.BINARY_TYPES = _index.FLIPPED_ALIAS_KEYS.Binary, exports2.SCOPABLE_TYPES = _index.FLIPPED_ALIAS_KEYS.Scopable, exports2.BLOCKPARENT_TYPES = _index.FLIPPED_ALIAS_KEYS.BlockParent, exports2.BLOCK_TYPES = _index.FLIPPED_ALIAS_KEYS.Block, exports2.STATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS.Statement, exports2.TERMINATORLESS_TYPES = _index.FLIPPED_ALIAS_KEYS.Terminatorless, exports2.COMPLETIONSTATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS.CompletionStatement, exports2.CONDITIONAL_TYPES = _index.FLIPPED_ALIAS_KEYS.Conditional, exports2.LOOP_TYPES = _index.FLIPPED_ALIAS_KEYS.Loop, exports2.WHILE_TYPES = _index.FLIPPED_ALIAS_KEYS.While, exports2.EXPRESSIONWRAPPER_TYPES = _index.FLIPPED_ALIAS_KEYS.ExpressionWrapper, exports2.FOR_TYPES = _index.FLIPPED_ALIAS_KEYS.For, exports2.FORXSTATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS.ForXStatement, exports2.FUNCTION_TYPES = _index.FLIPPED_ALIAS_KEYS.Function, exports2.FUNCTIONPARENT_TYPES = _index.FLIPPED_ALIAS_KEYS.FunctionParent, exports2.PUREISH_TYPES = _index.FLIPPED_ALIAS_KEYS.Pureish, exports2.DECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS.Declaration, exports2.PATTERNLIKE_TYPES = _index.FLIPPED_ALIAS_KEYS.PatternLike, exports2.LVAL_TYPES = _index.FLIPPED_ALIAS_KEYS.LVal, exports2.TSENTITYNAME_TYPES = _index.FLIPPED_ALIAS_KEYS.TSEntityName, exports2.LITERAL_TYPES = _index.FLIPPED_ALIAS_KEYS.Literal, exports2.IMMUTABLE_TYPES = _index.FLIPPED_ALIAS_KEYS.Immutable, exports2.USERWHITESPACABLE_TYPES = _index.FLIPPED_ALIAS_KEYS.UserWhitespacable, exports2.METHOD_TYPES = _index.FLIPPED_ALIAS_KEYS.Method, exports2.OBJECTMEMBER_TYPES = _index.FLIPPED_ALIAS_KEYS.ObjectMember, exports2.PROPERTY_TYPES = _index.FLIPPED_ALIAS_KEYS.Property, exports2.UNARYLIKE_TYPES = _index.FLIPPED_ALIAS_KEYS.UnaryLike, exports2.PATTERN_TYPES = _index.FLIPPED_ALIAS_KEYS.Pattern, exports2.CLASS_TYPES = _index.FLIPPED_ALIAS_KEYS.Class;
        const IMPORTOREXPORTDECLARATION_TYPES = exports2.IMPORTOREXPORTDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS.ImportOrExportDeclaration;
        exports2.EXPORTDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS.ExportDeclaration, exports2.MODULESPECIFIER_TYPES = _index.FLIPPED_ALIAS_KEYS.ModuleSpecifier, exports2.ACCESSOR_TYPES = _index.FLIPPED_ALIAS_KEYS.Accessor, exports2.PRIVATE_TYPES = _index.FLIPPED_ALIAS_KEYS.Private, exports2.FLOW_TYPES = _index.FLIPPED_ALIAS_KEYS.Flow, exports2.FLOWTYPE_TYPES = _index.FLIPPED_ALIAS_KEYS.FlowType, exports2.FLOWBASEANNOTATION_TYPES = _index.FLIPPED_ALIAS_KEYS.FlowBaseAnnotation, exports2.FLOWDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS.FlowDeclaration, exports2.FLOWPREDICATE_TYPES = _index.FLIPPED_ALIAS_KEYS.FlowPredicate, exports2.ENUMBODY_TYPES = _index.FLIPPED_ALIAS_KEYS.EnumBody, exports2.ENUMMEMBER_TYPES = _index.FLIPPED_ALIAS_KEYS.EnumMember, exports2.JSX_TYPES = _index.FLIPPED_ALIAS_KEYS.JSX, exports2.MISCELLANEOUS_TYPES = _index.FLIPPED_ALIAS_KEYS.Miscellaneous, exports2.TYPESCRIPT_TYPES = _index.FLIPPED_ALIAS_KEYS.TypeScript, exports2.TSTYPEELEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS.TSTypeElement, exports2.TSTYPE_TYPES = _index.FLIPPED_ALIAS_KEYS.TSType, exports2.TSBASETYPE_TYPES = _index.FLIPPED_ALIAS_KEYS.TSBaseType, exports2.MODULEDECLARATION_TYPES = IMPORTOREXPORTDECLARATION_TYPES;
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.UPDATE_OPERATORS = exports2.UNARY_OPERATORS = exports2.STRING_UNARY_OPERATORS = exports2.STATEMENT_OR_BLOCK_KEYS = exports2.NUMBER_UNARY_OPERATORS = exports2.NUMBER_BINARY_OPERATORS = exports2.NOT_LOCAL_BINDING = exports2.LOGICAL_OPERATORS = exports2.INHERIT_KEYS = exports2.FOR_INIT_KEYS = exports2.FLATTENABLE_KEYS = exports2.EQUALITY_BINARY_OPERATORS = exports2.COMPARISON_BINARY_OPERATORS = exports2.COMMENT_KEYS = exports2.BOOLEAN_UNARY_OPERATORS = exports2.BOOLEAN_NUMBER_BINARY_OPERATORS = exports2.BOOLEAN_BINARY_OPERATORS = exports2.BLOCK_SCOPED_SYMBOL = exports2.BINARY_OPERATORS = exports2.ASSIGNMENT_OPERATORS = void 0;
        exports2.STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"], exports2.FLATTENABLE_KEYS = ["body", "expressions"], exports2.FOR_INIT_KEYS = ["left", "init"], exports2.COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];
        const LOGICAL_OPERATORS = exports2.LOGICAL_OPERATORS = ["||", "&&", "??"], BOOLEAN_NUMBER_BINARY_OPERATORS = (exports2.UPDATE_OPERATORS = ["++", "--"], exports2.BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="]), EQUALITY_BINARY_OPERATORS = exports2.EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="], COMPARISON_BINARY_OPERATORS = exports2.COMPARISON_BINARY_OPERATORS = [...EQUALITY_BINARY_OPERATORS, "in", "instanceof"], BOOLEAN_BINARY_OPERATORS = exports2.BOOLEAN_BINARY_OPERATORS = [...COMPARISON_BINARY_OPERATORS, ...BOOLEAN_NUMBER_BINARY_OPERATORS], NUMBER_BINARY_OPERATORS = exports2.NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"], BOOLEAN_UNARY_OPERATORS = (exports2.BINARY_OPERATORS = ["+", ...NUMBER_BINARY_OPERATORS, ...BOOLEAN_BINARY_OPERATORS, "|>"], exports2.ASSIGNMENT_OPERATORS = ["=", "+=", ...NUMBER_BINARY_OPERATORS.map((op) => op + "="), ...LOGICAL_OPERATORS.map((op) => op + "=")], exports2.BOOLEAN_UNARY_OPERATORS = ["delete", "!"]), NUMBER_UNARY_OPERATORS = exports2.NUMBER_UNARY_OPERATORS = ["+", "-", "~"], STRING_UNARY_OPERATORS = exports2.STRING_UNARY_OPERATORS = ["typeof"];
        exports2.UNARY_OPERATORS = ["void", "throw", ...BOOLEAN_UNARY_OPERATORS, ...NUMBER_UNARY_OPERATORS, ...STRING_UNARY_OPERATORS], exports2.INHERIT_KEYS = { optional: ["typeAnnotation", "typeParameters", "returnType"], force: ["start", "loc", "end"] }, exports2.BLOCK_SCOPED_SYMBOL = Symbol.for("var used to be block scoped"), exports2.NOT_LOCAL_BINDING = Symbol.for("should not be considered a local binding");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/ensureBlock.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, key = "body") {
          const result = (0, _toBlock.default)(node[key], node);
          return node[key] = result, result;
        };
        var _toBlock = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toBlock.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function gatherSequenceExpressions(nodes, declars) {
          const exprs = [];
          let ensureLastUndefined = true;
          for (const node of nodes) if ((0, _index.isEmptyStatement)(node) || (ensureLastUndefined = false), (0, _index.isExpression)(node)) exprs.push(node);
          else if ((0, _index.isExpressionStatement)(node)) exprs.push(node.expression);
          else if ((0, _index.isVariableDeclaration)(node)) {
            if ("var" !== node.kind) return;
            for (const declar of node.declarations) {
              const bindings = (0, _getBindingIdentifiers.default)(declar);
              for (const key of Object.keys(bindings)) declars.push({ kind: node.kind, id: (0, _cloneNode.default)(bindings[key]) });
              declar.init && exprs.push((0, _index2.assignmentExpression)("=", declar.id, declar.init));
            }
            ensureLastUndefined = true;
          } else if ((0, _index.isIfStatement)(node)) {
            const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], declars) : (0, _productions.buildUndefinedNode)(), alternate = node.alternate ? gatherSequenceExpressions([node.alternate], declars) : (0, _productions.buildUndefinedNode)();
            if (!consequent || !alternate) return;
            exprs.push((0, _index2.conditionalExpression)(node.test, consequent, alternate));
          } else if ((0, _index.isBlockStatement)(node)) {
            const body = gatherSequenceExpressions(node.body, declars);
            if (!body) return;
            exprs.push(body);
          } else {
            if (!(0, _index.isEmptyStatement)(node)) return;
            0 === nodes.indexOf(node) && (ensureLastUndefined = true);
          }
          ensureLastUndefined && exprs.push((0, _productions.buildUndefinedNode)());
          return 1 === exprs.length ? exprs[0] : (0, _index2.sequenceExpression)(exprs);
        };
        var _getBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js"), _productions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/productions.js"), _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toBindingIdentifierName.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(name) {
          "eval" !== (name = (0, _toIdentifier.default)(name)) && "arguments" !== name || (name = "_" + name);
          return name;
        };
        var _toIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toIdentifier.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toBlock.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, parent) {
          if ((0, _index.isBlockStatement)(node)) return node;
          let blockNodes = [];
          (0, _index.isEmptyStatement)(node) ? blockNodes = [] : ((0, _index.isStatement)(node) || (node = (0, _index.isFunction)(parent) ? (0, _index2.returnStatement)(node) : (0, _index2.expressionStatement)(node)), blockNodes = [node]);
          return (0, _index2.blockStatement)(blockNodes);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toComputedKey.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, key = node.key || node.property) {
          !node.computed && (0, _index.isIdentifier)(key) && (key = (0, _index2.stringLiteral)(key.name));
          return key;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toExpression.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
        exports2.default = function(node) {
          (0, _index.isExpressionStatement)(node) && (node = node.expression);
          if ((0, _index.isExpression)(node)) return node;
          (0, _index.isClass)(node) ? node.type = "ClassExpression" : (0, _index.isFunction)(node) && (node.type = "FunctionExpression");
          if (!(0, _index.isExpression)(node)) throw new Error(`cannot turn ${node.type} to an expression`);
          return node;
        };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toIdentifier.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(input) {
          input += "";
          let name = "";
          for (const c4 of input) name += (0, _helperValidatorIdentifier.isIdentifierChar)(c4.codePointAt(0)) ? c4 : "-";
          name = name.replace(/^[-0-9]+/, ""), name = name.replace(/[-\s]+(.)?/g, function(match, c4) {
            return c4 ? c4.toUpperCase() : "";
          }), (0, _isValidIdentifier.default)(name) || (name = `_${name}`);
          return name || "_";
        };
        var _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toKeyAlias.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = toKeyAlias;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js"), _removePropertiesDeep = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js");
        function toKeyAlias(node, key = node.key) {
          let alias;
          return "method" === node.kind ? toKeyAlias.increment() + "" : (alias = (0, _index.isIdentifier)(key) ? key.name : (0, _index.isStringLiteral)(key) ? JSON.stringify(key.value) : JSON.stringify((0, _removePropertiesDeep.default)((0, _cloneNode.default)(key))), node.computed && (alias = `[${alias}]`), node.static && (alias = `static:${alias}`), alias);
        }
        toKeyAlias.uid = 0, toKeyAlias.increment = function() {
          return toKeyAlias.uid >= Number.MAX_SAFE_INTEGER ? toKeyAlias.uid = 0 : toKeyAlias.uid++;
        };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toSequenceExpression.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        exports2.default = function(nodes, scope) {
          if (null == nodes || !nodes.length) return;
          const declars = [], result = (0, _gatherSequenceExpressions.default)(nodes, declars);
          if (!result) return;
          for (const declar of declars) scope.push(declar);
          return result;
        };
        var _gatherSequenceExpressions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toStatement.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
        exports2.default = function(node, ignore) {
          if ((0, _index.isStatement)(node)) return node;
          let newType, mustHaveId = false;
          if ((0, _index.isClass)(node)) mustHaveId = true, newType = "ClassDeclaration";
          else if ((0, _index.isFunction)(node)) mustHaveId = true, newType = "FunctionDeclaration";
          else if ((0, _index.isAssignmentExpression)(node)) return (0, _index2.expressionStatement)(node);
          mustHaveId && !node.id && (newType = false);
          if (!newType) {
            if (ignore) return false;
            throw new Error(`cannot turn ${node.type} to a statement`);
          }
          return node.type = newType, node;
        };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/valueToNode.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
        exports2.default = function valueToNode2(value2) {
          if (void 0 === value2) return (0, _index.identifier)("undefined");
          if (true === value2 || false === value2) return (0, _index.booleanLiteral)(value2);
          if (null === value2) return (0, _index.nullLiteral)();
          if ("string" == typeof value2) return (0, _index.stringLiteral)(value2);
          if ("number" == typeof value2) {
            let result;
            if (Number.isFinite(value2)) result = (0, _index.numericLiteral)(Math.abs(value2));
            else {
              let numerator;
              numerator = Number.isNaN(value2) ? (0, _index.numericLiteral)(0) : (0, _index.numericLiteral)(1), result = (0, _index.binaryExpression)("/", numerator, (0, _index.numericLiteral)(0));
            }
            return (value2 < 0 || Object.is(value2, -0)) && (result = (0, _index.unaryExpression)("-", result)), result;
          }
          if (function(value3) {
            return "[object RegExp]" === objectToString3(value3);
          }(value2)) {
            const pattern = value2.source, flags = /\/([a-z]*)$/.exec(value2.toString())[1];
            return (0, _index.regExpLiteral)(pattern, flags);
          }
          if (Array.isArray(value2)) return (0, _index.arrayExpression)(value2.map(valueToNode2));
          if (function(value3) {
            if ("object" != typeof value3 || null === value3 || "[object Object]" !== Object.prototype.toString.call(value3)) return false;
            const proto = Object.getPrototypeOf(value3);
            return null === proto || null === Object.getPrototypeOf(proto);
          }(value2)) {
            const props = [];
            for (const key of Object.keys(value2)) {
              let nodeKey;
              nodeKey = (0, _isValidIdentifier.default)(key) ? (0, _index.identifier)(key) : (0, _index.stringLiteral)(key), props.push((0, _index.objectProperty)(nodeKey, valueToNode2(value2[key])));
            }
            return (0, _index.objectExpression)(props);
          }
          throw new Error("don't know how to turn this value into a node");
        };
        const objectToString3 = Function.call.bind(Object.prototype.toString);
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/core.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.patternLikeCommon = exports2.importAttributes = exports2.functionTypeAnnotationCommon = exports2.functionDeclarationCommon = exports2.functionCommon = exports2.classMethodOrPropertyCommon = exports2.classMethodOrDeclareMethodCommon = void 0;
        var _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/is.js"), _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/index.js"), _helperStringParser = __webpack_require__2("./node_modules/.pnpm/@babel+helper-string-parser@7.25.9/node_modules/@babel/helper-string-parser/lib/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js"), _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js");
        const defineType = (0, _utils.defineAliasedType)("Standardized");
        defineType("ArrayExpression", { fields: { elements: { validate: (0, _utils.arrayOf)((0, _utils.assertNodeOrValueType)("null", "Expression", "SpreadElement")), default: process.env.BABEL_TYPES_8_BREAKING ? void 0 : [] } }, visitor: ["elements"], aliases: ["Expression"] }), defineType("AssignmentExpression", { fields: { operator: { validate: process.env.BABEL_TYPES_8_BREAKING ? Object.assign(function() {
          const identifier = (0, _utils.assertOneOf)(..._index.ASSIGNMENT_OPERATORS), pattern = (0, _utils.assertOneOf)("=");
          return function(node, key, val) {
            ((0, _is.default)("Pattern", node.left) ? pattern : identifier)(node, key, val);
          };
        }(), { type: "string" }) : (0, _utils.assertValueType)("string") }, left: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "MemberExpression", "OptionalMemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, _utils.assertNodeType)("LVal", "OptionalMemberExpression") }, right: { validate: (0, _utils.assertNodeType)("Expression") } }, builder: ["operator", "left", "right"], visitor: ["left", "right"], aliases: ["Expression"] }), defineType("BinaryExpression", { builder: ["operator", "left", "right"], fields: { operator: { validate: (0, _utils.assertOneOf)(..._index.BINARY_OPERATORS) }, left: { validate: function() {
          const expression = (0, _utils.assertNodeType)("Expression"), inOp = (0, _utils.assertNodeType)("Expression", "PrivateName");
          return Object.assign(function(node, key, val) {
            ("in" === node.operator ? inOp : expression)(node, key, val);
          }, { oneOfNodeTypes: ["Expression", "PrivateName"] });
        }() }, right: { validate: (0, _utils.assertNodeType)("Expression") } }, visitor: ["left", "right"], aliases: ["Binary", "Expression"] }), defineType("InterpreterDirective", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } } }), defineType("Directive", { visitor: ["value"], fields: { value: { validate: (0, _utils.assertNodeType)("DirectiveLiteral") } } }), defineType("DirectiveLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } } }), defineType("BlockStatement", { builder: ["body", "directives"], visitor: ["directives", "body"], fields: { directives: { validate: (0, _utils.arrayOfType)("Directive"), default: [] }, body: (0, _utils.validateArrayOfType)("Statement") }, aliases: ["Scopable", "BlockParent", "Block", "Statement"] }), defineType("BreakStatement", { visitor: ["label"], fields: { label: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true } }, aliases: ["Statement", "Terminatorless", "CompletionStatement"] }), defineType("CallExpression", { visitor: ["callee", "arguments", "typeParameters", "typeArguments"], builder: ["callee", "arguments"], aliases: ["Expression"], fields: Object.assign({ callee: { validate: (0, _utils.assertNodeType)("Expression", "Super", "V8IntrinsicIdentifier") }, arguments: (0, _utils.validateArrayOfType)("Expression", "SpreadElement", "ArgumentPlaceholder") }, process.env.BABEL_TYPES_8_BREAKING ? {} : { optional: { validate: (0, _utils.assertValueType)("boolean"), optional: true } }, { typeArguments: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"), optional: true } }) }), defineType("CatchClause", { visitor: ["param", "body"], fields: { param: { validate: (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern"), optional: true }, body: { validate: (0, _utils.assertNodeType)("BlockStatement") } }, aliases: ["Scopable", "BlockParent"] }), defineType("ConditionalExpression", { visitor: ["test", "consequent", "alternate"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression") }, consequent: { validate: (0, _utils.assertNodeType)("Expression") }, alternate: { validate: (0, _utils.assertNodeType)("Expression") } }, aliases: ["Expression", "Conditional"] }), defineType("ContinueStatement", { visitor: ["label"], fields: { label: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true } }, aliases: ["Statement", "Terminatorless", "CompletionStatement"] }), defineType("DebuggerStatement", { aliases: ["Statement"] }), defineType("DoWhileStatement", { builder: ["test", "body"], visitor: ["body", "test"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") } }, aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"] }), defineType("EmptyStatement", { aliases: ["Statement"] }), defineType("ExpressionStatement", { visitor: ["expression"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } }, aliases: ["Statement", "ExpressionWrapper"] }), defineType("File", { builder: ["program", "comments", "tokens"], visitor: ["program"], fields: { program: { validate: (0, _utils.assertNodeType)("Program") }, comments: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertEach)((0, _utils.assertNodeType)("CommentBlock", "CommentLine")) : Object.assign(() => {
        }, { each: { oneOfNodeTypes: ["CommentBlock", "CommentLine"] } }), optional: true }, tokens: { validate: (0, _utils.assertEach)(Object.assign(() => {
        }, { type: "any" })), optional: true } } }), defineType("ForInStatement", { visitor: ["left", "right", "body"], aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"], fields: { left: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("VariableDeclaration", "Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, _utils.assertNodeType)("VariableDeclaration", "LVal") }, right: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("ForStatement", { visitor: ["init", "test", "update", "body"], aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"], fields: { init: { validate: (0, _utils.assertNodeType)("VariableDeclaration", "Expression"), optional: true }, test: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, update: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, body: { validate: (0, _utils.assertNodeType)("Statement") } } });
        const functionCommon = () => ({ params: (0, _utils.validateArrayOfType)("Identifier", "Pattern", "RestElement"), generator: { default: false }, async: { default: false } });
        exports2.functionCommon = functionCommon;
        const functionTypeAnnotationCommon = () => ({ returnType: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"), optional: true } });
        exports2.functionTypeAnnotationCommon = functionTypeAnnotationCommon;
        const functionDeclarationCommon = () => Object.assign({}, functionCommon(), { declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, id: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true } });
        exports2.functionDeclarationCommon = functionDeclarationCommon, defineType("FunctionDeclaration", { builder: ["id", "params", "body", "generator", "async"], visitor: ["id", "typeParameters", "params", "returnType", "body"], fields: Object.assign({}, functionDeclarationCommon(), functionTypeAnnotationCommon(), { body: { validate: (0, _utils.assertNodeType)("BlockStatement") }, predicate: { validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"), optional: true } }), aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"], validate: process.env.BABEL_TYPES_8_BREAKING ? function() {
          const identifier = (0, _utils.assertNodeType)("Identifier");
          return function(parent, key, node) {
            (0, _is.default)("ExportDefaultDeclaration", parent) || identifier(node, "id", node.id);
          };
        }() : void 0 }), defineType("FunctionExpression", { inherits: "FunctionDeclaration", aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"], fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), { id: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true }, body: { validate: (0, _utils.assertNodeType)("BlockStatement") }, predicate: { validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"), optional: true } }) });
        const patternLikeCommon = () => ({ typeAnnotation: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, optional: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true } });
        exports2.patternLikeCommon = patternLikeCommon, defineType("Identifier", { builder: ["name"], visitor: ["typeAnnotation", "decorators"], aliases: ["Expression", "PatternLike", "LVal", "TSEntityName"], fields: Object.assign({}, patternLikeCommon(), { name: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function(node, key, val) {
          if (!(0, _isValidIdentifier.default)(val, false)) throw new TypeError(`"${val}" is not a valid identifier name`);
        }, { type: "string" })) : (0, _utils.assertValueType)("string") } }), validate: process.env.BABEL_TYPES_8_BREAKING ? function(parent, key, node) {
          const match = /\.(\w+)$/.exec(key);
          if (!match) return;
          const [, parentKey] = match, nonComp = { computed: false };
          if ("property" === parentKey) {
            if ((0, _is.default)("MemberExpression", parent, nonComp)) return;
            if ((0, _is.default)("OptionalMemberExpression", parent, nonComp)) return;
          } else if ("key" === parentKey) {
            if ((0, _is.default)("Property", parent, nonComp)) return;
            if ((0, _is.default)("Method", parent, nonComp)) return;
          } else if ("exported" === parentKey) {
            if ((0, _is.default)("ExportSpecifier", parent)) return;
          } else if ("imported" === parentKey) {
            if ((0, _is.default)("ImportSpecifier", parent, { imported: node })) return;
          } else if ("meta" === parentKey && (0, _is.default)("MetaProperty", parent, { meta: node })) return;
          if (((0, _helperValidatorIdentifier.isKeyword)(node.name) || (0, _helperValidatorIdentifier.isReservedWord)(node.name, false)) && "this" !== node.name) throw new TypeError(`"${node.name}" is not a valid identifier`);
        } : void 0 }), defineType("IfStatement", { visitor: ["test", "consequent", "alternate"], aliases: ["Statement", "Conditional"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression") }, consequent: { validate: (0, _utils.assertNodeType)("Statement") }, alternate: { optional: true, validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("LabeledStatement", { visitor: ["label", "body"], aliases: ["Statement"], fields: { label: { validate: (0, _utils.assertNodeType)("Identifier") }, body: { validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("StringLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("NumericLiteral", { builder: ["value"], deprecatedAlias: "NumberLiteral", fields: { value: { validate: (0, _utils.chain)((0, _utils.assertValueType)("number"), Object.assign(function(node, key, val) {
          if (1 / val < 0 || !Number.isFinite(val)) {
            new Error(`NumericLiterals must be non-negative finite numbers. You can use t.valueToNode(${val}) instead.`);
          }
        }, { type: "number" })) } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("NullLiteral", { aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("BooleanLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("boolean") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("RegExpLiteral", { builder: ["pattern", "flags"], deprecatedAlias: "RegexLiteral", aliases: ["Expression", "Pureish", "Literal"], fields: { pattern: { validate: (0, _utils.assertValueType)("string") }, flags: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function(node, key, val) {
          const invalid = /[^gimsuy]/.exec(val);
          if (invalid) throw new TypeError(`"${invalid[0]}" is not a valid RegExp flag`);
        }, { type: "string" })) : (0, _utils.assertValueType)("string"), default: "" } } }), defineType("LogicalExpression", { builder: ["operator", "left", "right"], visitor: ["left", "right"], aliases: ["Binary", "Expression"], fields: { operator: { validate: (0, _utils.assertOneOf)(..._index.LOGICAL_OPERATORS) }, left: { validate: (0, _utils.assertNodeType)("Expression") }, right: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("MemberExpression", { builder: ["object", "property", "computed", ...process.env.BABEL_TYPES_8_BREAKING ? [] : ["optional"]], visitor: ["object", "property"], aliases: ["Expression", "LVal"], fields: Object.assign({ object: { validate: (0, _utils.assertNodeType)("Expression", "Super") }, property: { validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "PrivateName"), computed = (0, _utils.assertNodeType)("Expression"), validator = function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          };
          return validator.oneOfNodeTypes = ["Expression", "Identifier", "PrivateName"], validator;
        }() }, computed: { default: false } }, process.env.BABEL_TYPES_8_BREAKING ? {} : { optional: { validate: (0, _utils.assertValueType)("boolean"), optional: true } }) }), defineType("NewExpression", { inherits: "CallExpression" }), defineType("Program", { visitor: ["directives", "body"], builder: ["body", "directives", "sourceType", "interpreter"], fields: { sourceType: { validate: (0, _utils.assertOneOf)("script", "module"), default: "script" }, interpreter: { validate: (0, _utils.assertNodeType)("InterpreterDirective"), default: null, optional: true }, directives: { validate: (0, _utils.arrayOfType)("Directive"), default: [] }, body: (0, _utils.validateArrayOfType)("Statement") }, aliases: ["Scopable", "BlockParent", "Block"] }), defineType("ObjectExpression", { visitor: ["properties"], aliases: ["Expression"], fields: { properties: (0, _utils.validateArrayOfType)("ObjectMethod", "ObjectProperty", "SpreadElement") } }), defineType("ObjectMethod", { builder: ["kind", "key", "params", "body", "computed", "generator", "async"], visitor: ["decorators", "key", "typeParameters", "params", "returnType", "body"], fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), { kind: Object.assign({ validate: (0, _utils.assertOneOf)("method", "get", "set") }, process.env.BABEL_TYPES_8_BREAKING ? {} : { default: "method" }), computed: { default: false }, key: { validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"), computed = (0, _utils.assertNodeType)("Expression"), validator = function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          };
          return validator.oneOfNodeTypes = ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"], validator;
        }() }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true }, body: { validate: (0, _utils.assertNodeType)("BlockStatement") } }), aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"] }), defineType("ObjectProperty", { builder: ["key", "value", "computed", "shorthand", ...process.env.BABEL_TYPES_8_BREAKING ? [] : ["decorators"]], fields: { computed: { default: false }, key: { validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName"), computed = (0, _utils.assertNodeType)("Expression");
          return Object.assign(function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          }, { oneOfNodeTypes: ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName"] });
        }() }, value: { validate: (0, _utils.assertNodeType)("Expression", "PatternLike") }, shorthand: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function(node, key, shorthand) {
          if (shorthand) {
            if (node.computed) throw new TypeError("Property shorthand of ObjectProperty cannot be true if computed is true");
            if (!(0, _is.default)("Identifier", node.key)) throw new TypeError("Property shorthand of ObjectProperty cannot be true if key is not an Identifier");
          }
        }, { type: "boolean" })) : (0, _utils.assertValueType)("boolean"), default: false }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true } }, visitor: ["key", "value", "decorators"], aliases: ["UserWhitespacable", "Property", "ObjectMember"], validate: process.env.BABEL_TYPES_8_BREAKING ? function() {
          const pattern = (0, _utils.assertNodeType)("Identifier", "Pattern", "TSAsExpression", "TSSatisfiesExpression", "TSNonNullExpression", "TSTypeAssertion"), expression = (0, _utils.assertNodeType)("Expression");
          return function(parent, key, node) {
            ((0, _is.default)("ObjectPattern", parent) ? pattern : expression)(node, "value", node.value);
          };
        }() : void 0 }), defineType("RestElement", { visitor: ["argument", "typeAnnotation"], builder: ["argument"], aliases: ["LVal", "PatternLike"], deprecatedAlias: "RestProperty", fields: Object.assign({}, patternLikeCommon(), { argument: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, _utils.assertNodeType)("LVal") } }), validate: process.env.BABEL_TYPES_8_BREAKING ? function(parent, key) {
          const match = /(\w+)\[(\d+)\]/.exec(key);
          if (!match) throw new Error("Internal Babel error: malformed key.");
          const [, listKey, index] = match;
          if (parent[listKey].length > +index + 1) throw new TypeError(`RestElement must be last element of ${listKey}`);
        } : void 0 }), defineType("ReturnStatement", { visitor: ["argument"], aliases: ["Statement", "Terminatorless", "CompletionStatement"], fields: { argument: { validate: (0, _utils.assertNodeType)("Expression"), optional: true } } }), defineType("SequenceExpression", { visitor: ["expressions"], fields: { expressions: (0, _utils.validateArrayOfType)("Expression") }, aliases: ["Expression"] }), defineType("ParenthesizedExpression", { visitor: ["expression"], aliases: ["Expression", "ExpressionWrapper"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("SwitchCase", { visitor: ["test", "consequent"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, consequent: (0, _utils.validateArrayOfType)("Statement") } }), defineType("SwitchStatement", { visitor: ["discriminant", "cases"], aliases: ["Statement", "BlockParent", "Scopable"], fields: { discriminant: { validate: (0, _utils.assertNodeType)("Expression") }, cases: (0, _utils.validateArrayOfType)("SwitchCase") } }), defineType("ThisExpression", { aliases: ["Expression"] }), defineType("ThrowStatement", { visitor: ["argument"], aliases: ["Statement", "Terminatorless", "CompletionStatement"], fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("TryStatement", { visitor: ["block", "handler", "finalizer"], aliases: ["Statement"], fields: { block: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertNodeType)("BlockStatement"), Object.assign(function(node) {
          if (!node.handler && !node.finalizer) throw new TypeError("TryStatement expects either a handler or finalizer, or both");
        }, { oneOfNodeTypes: ["BlockStatement"] })) : (0, _utils.assertNodeType)("BlockStatement") }, handler: { optional: true, validate: (0, _utils.assertNodeType)("CatchClause") }, finalizer: { optional: true, validate: (0, _utils.assertNodeType)("BlockStatement") } } }), defineType("UnaryExpression", { builder: ["operator", "argument", "prefix"], fields: { prefix: { default: true }, argument: { validate: (0, _utils.assertNodeType)("Expression") }, operator: { validate: (0, _utils.assertOneOf)(..._index.UNARY_OPERATORS) } }, visitor: ["argument"], aliases: ["UnaryLike", "Expression"] }), defineType("UpdateExpression", { builder: ["operator", "argument", "prefix"], fields: { prefix: { default: false }, argument: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "MemberExpression") : (0, _utils.assertNodeType)("Expression") }, operator: { validate: (0, _utils.assertOneOf)(..._index.UPDATE_OPERATORS) } }, visitor: ["argument"], aliases: ["Expression"] }), defineType("VariableDeclaration", { builder: ["kind", "declarations"], visitor: ["declarations"], aliases: ["Statement", "Declaration"], fields: { declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, kind: { validate: (0, _utils.assertOneOf)("var", "let", "const", "using", "await using") }, declarations: (0, _utils.validateArrayOfType)("VariableDeclarator") }, validate: process.env.BABEL_TYPES_8_BREAKING ? (() => {
          const withoutInit = (0, _utils.assertNodeType)("Identifier");
          return function(parent, key, node) {
            if ((0, _is.default)("ForXStatement", parent, { left: node })) {
              if (1 !== node.declarations.length) throw new TypeError(`Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`);
            } else node.declarations.forEach((decl) => {
              decl.init || withoutInit(decl, "id", decl.id);
            });
          };
        })() : void 0 }), defineType("VariableDeclarator", { visitor: ["id", "init"], fields: { id: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern") : (0, _utils.assertNodeType)("LVal") }, definite: { optional: true, validate: (0, _utils.assertValueType)("boolean") }, init: { optional: true, validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("WhileStatement", { visitor: ["test", "body"], aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("WithStatement", { visitor: ["object", "body"], aliases: ["Statement"], fields: { object: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("AssignmentPattern", { visitor: ["left", "right", "decorators"], builder: ["left", "right"], aliases: ["Pattern", "PatternLike", "LVal"], fields: Object.assign({}, patternLikeCommon(), { left: { validate: (0, _utils.assertNodeType)("Identifier", "ObjectPattern", "ArrayPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") }, right: { validate: (0, _utils.assertNodeType)("Expression") }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true } }) }), defineType("ArrayPattern", { visitor: ["elements", "typeAnnotation"], builder: ["elements"], aliases: ["Pattern", "PatternLike", "LVal"], fields: Object.assign({}, patternLikeCommon(), { elements: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)("null", "PatternLike", "LVal"))) } }) }), defineType("ArrowFunctionExpression", { builder: ["params", "body", "async"], visitor: ["typeParameters", "params", "returnType", "body"], aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"], fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), { expression: { validate: (0, _utils.assertValueType)("boolean") }, body: { validate: (0, _utils.assertNodeType)("BlockStatement", "Expression") }, predicate: { validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"), optional: true } }) }), defineType("ClassBody", { visitor: ["body"], fields: { body: (0, _utils.validateArrayOfType)("ClassMethod", "ClassPrivateMethod", "ClassProperty", "ClassPrivateProperty", "ClassAccessorProperty", "TSDeclareMethod", "TSIndexSignature", "StaticBlock") } }), defineType("ClassExpression", { builder: ["id", "superClass", "body", "decorators"], visitor: ["decorators", "id", "typeParameters", "superClass", "superTypeParameters", "mixins", "implements", "body"], aliases: ["Scopable", "Class", "Expression"], fields: { id: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"), optional: true }, body: { validate: (0, _utils.assertNodeType)("ClassBody") }, superClass: { optional: true, validate: (0, _utils.assertNodeType)("Expression") }, superTypeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"), optional: true }, implements: { validate: (0, _utils.arrayOfType)("TSExpressionWithTypeArguments", "ClassImplements"), optional: true }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true }, mixins: { validate: (0, _utils.assertNodeType)("InterfaceExtends"), optional: true } } }), defineType("ClassDeclaration", { inherits: "ClassExpression", aliases: ["Scopable", "Class", "Statement", "Declaration"], fields: { id: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"), optional: true }, body: { validate: (0, _utils.assertNodeType)("ClassBody") }, superClass: { optional: true, validate: (0, _utils.assertNodeType)("Expression") }, superTypeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"), optional: true }, implements: { validate: (0, _utils.arrayOfType)("TSExpressionWithTypeArguments", "ClassImplements"), optional: true }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true }, mixins: { validate: (0, _utils.assertNodeType)("InterfaceExtends"), optional: true }, declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, abstract: { validate: (0, _utils.assertValueType)("boolean"), optional: true } }, validate: process.env.BABEL_TYPES_8_BREAKING ? function() {
          const identifier = (0, _utils.assertNodeType)("Identifier");
          return function(parent, key, node) {
            (0, _is.default)("ExportDefaultDeclaration", parent) || identifier(node, "id", node.id);
          };
        }() : void 0 });
        const importAttributes = exports2.importAttributes = { attributes: { optional: true, validate: (0, _utils.arrayOfType)("ImportAttribute") }, assertions: { deprecated: true, optional: true, validate: (0, _utils.arrayOfType)("ImportAttribute") } };
        defineType("ExportAllDeclaration", { builder: ["source"], visitor: ["source", "attributes", "assertions"], aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"], fields: Object.assign({ source: { validate: (0, _utils.assertNodeType)("StringLiteral") }, exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value")) }, importAttributes) }), defineType("ExportDefaultDeclaration", { visitor: ["declaration"], aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"], fields: { declaration: (0, _utils.validateType)("TSDeclareFunction", "FunctionDeclaration", "ClassDeclaration", "Expression"), exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("value")) } }), defineType("ExportNamedDeclaration", { builder: ["declaration", "specifiers", "source"], visitor: process.env ? ["declaration", "specifiers", "source", "attributes"] : ["declaration", "specifiers", "source", "attributes", "assertions"], aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"], fields: Object.assign({ declaration: { optional: true, validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertNodeType)("Declaration"), Object.assign(function(node, key, val) {
          if (val && node.specifiers.length) throw new TypeError("Only declaration or specifiers is allowed on ExportNamedDeclaration");
          if (val && node.source) throw new TypeError("Cannot export a declaration from a source");
        }, { oneOfNodeTypes: ["Declaration"] })) : (0, _utils.assertNodeType)("Declaration") } }, importAttributes, { specifiers: { default: [], validate: (0, _utils.arrayOf)(function() {
          const sourced = (0, _utils.assertNodeType)("ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier"), sourceless = (0, _utils.assertNodeType)("ExportSpecifier");
          return process.env.BABEL_TYPES_8_BREAKING ? Object.assign(function(node, key, val) {
            (node.source ? sourced : sourceless)(node, key, val);
          }, { oneOfNodeTypes: ["ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier"] }) : sourced;
        }()) }, source: { validate: (0, _utils.assertNodeType)("StringLiteral"), optional: true }, exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value")) }) }), defineType("ExportSpecifier", { visitor: ["local", "exported"], aliases: ["ModuleSpecifier"], fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") }, exported: { validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral") }, exportKind: { validate: (0, _utils.assertOneOf)("type", "value"), optional: true } } }), defineType("ForOfStatement", { visitor: ["left", "right", "body"], builder: ["left", "right", "body", "await"], aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"], fields: { left: { validate: function() {
          if (!process.env.BABEL_TYPES_8_BREAKING) return (0, _utils.assertNodeType)("VariableDeclaration", "LVal");
          const declaration = (0, _utils.assertNodeType)("VariableDeclaration"), lval = (0, _utils.assertNodeType)("Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression");
          return Object.assign(function(node, key, val) {
            (0, _is.default)("VariableDeclaration", val) ? declaration(node, key, val) : lval(node, key, val);
          }, { oneOfNodeTypes: ["VariableDeclaration", "Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression"] });
        }() }, right: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") }, await: { default: false } } }), defineType("ImportDeclaration", { builder: ["specifiers", "source"], visitor: ["specifiers", "source", "attributes", "assertions"], aliases: ["Statement", "Declaration", "ImportOrExportDeclaration"], fields: Object.assign({}, importAttributes, { module: { optional: true, validate: (0, _utils.assertValueType)("boolean") }, phase: { default: null, validate: (0, _utils.assertOneOf)("source", "defer") }, specifiers: (0, _utils.validateArrayOfType)("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier"), source: { validate: (0, _utils.assertNodeType)("StringLiteral") }, importKind: { validate: (0, _utils.assertOneOf)("type", "typeof", "value"), optional: true } }) }), defineType("ImportDefaultSpecifier", { visitor: ["local"], aliases: ["ModuleSpecifier"], fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") } } }), defineType("ImportNamespaceSpecifier", { visitor: ["local"], aliases: ["ModuleSpecifier"], fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") } } }), defineType("ImportSpecifier", { visitor: ["imported", "local"], builder: ["local", "imported"], aliases: ["ModuleSpecifier"], fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") }, imported: { validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral") }, importKind: { validate: (0, _utils.assertOneOf)("type", "typeof", "value"), optional: true } } }), defineType("ImportExpression", { visitor: ["source", "options"], aliases: ["Expression"], fields: { phase: { default: null, validate: (0, _utils.assertOneOf)("source", "defer") }, source: { validate: (0, _utils.assertNodeType)("Expression") }, options: { validate: (0, _utils.assertNodeType)("Expression"), optional: true } } }), defineType("MetaProperty", { visitor: ["meta", "property"], aliases: ["Expression"], fields: { meta: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertNodeType)("Identifier"), Object.assign(function(node, key, val) {
          let property;
          switch (val.name) {
            case "function":
              property = "sent";
              break;
            case "new":
              property = "target";
              break;
            case "import":
              property = "meta";
          }
          if (!(0, _is.default)("Identifier", node.property, { name: property })) throw new TypeError("Unrecognised MetaProperty");
        }, { oneOfNodeTypes: ["Identifier"] })) : (0, _utils.assertNodeType)("Identifier") }, property: { validate: (0, _utils.assertNodeType)("Identifier") } } });
        const classMethodOrPropertyCommon = () => ({ abstract: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, accessibility: { validate: (0, _utils.assertOneOf)("public", "private", "protected"), optional: true }, static: { default: false }, override: { default: false }, computed: { default: false }, optional: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, key: { validate: (0, _utils.chain)(function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"), computed = (0, _utils.assertNodeType)("Expression");
          return function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          };
        }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression")) } });
        exports2.classMethodOrPropertyCommon = classMethodOrPropertyCommon;
        const classMethodOrDeclareMethodCommon = () => Object.assign({}, functionCommon(), classMethodOrPropertyCommon(), { params: (0, _utils.validateArrayOfType)("Identifier", "Pattern", "RestElement", "TSParameterProperty"), kind: { validate: (0, _utils.assertOneOf)("get", "set", "method", "constructor"), default: "method" }, access: { validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), (0, _utils.assertOneOf)("public", "private", "protected")), optional: true }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true } });
        exports2.classMethodOrDeclareMethodCommon = classMethodOrDeclareMethodCommon, defineType("ClassMethod", { aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"], builder: ["kind", "key", "params", "body", "computed", "static", "generator", "async"], visitor: ["decorators", "key", "typeParameters", "params", "returnType", "body"], fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), { body: { validate: (0, _utils.assertNodeType)("BlockStatement") } }) }), defineType("ObjectPattern", { visitor: ["properties", "typeAnnotation", "decorators"], builder: ["properties"], aliases: ["Pattern", "PatternLike", "LVal"], fields: Object.assign({}, patternLikeCommon(), { properties: (0, _utils.validateArrayOfType)("RestElement", "ObjectProperty") }) }), defineType("SpreadElement", { visitor: ["argument"], aliases: ["UnaryLike"], deprecatedAlias: "SpreadProperty", fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("Super", { aliases: ["Expression"] }), defineType("TaggedTemplateExpression", { visitor: ["tag", "typeParameters", "quasi"], builder: ["tag", "quasi"], aliases: ["Expression"], fields: { tag: { validate: (0, _utils.assertNodeType)("Expression") }, quasi: { validate: (0, _utils.assertNodeType)("TemplateLiteral") }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"), optional: true } } }), defineType("TemplateElement", { builder: ["value", "tail"], fields: { value: { validate: (0, _utils.chain)((0, _utils.assertShape)({ raw: { validate: (0, _utils.assertValueType)("string") }, cooked: { validate: (0, _utils.assertValueType)("string"), optional: true } }), function(node) {
          const raw2 = node.value.raw;
          let unterminatedCalled = false;
          const error = () => {
            throw new Error("Internal @babel/types error.");
          }, { str, firstInvalidLoc } = (0, _helperStringParser.readStringContents)("template", raw2, 0, 0, 0, { unterminated() {
            unterminatedCalled = true;
          }, strictNumericEscape: error, invalidEscapeSequence: error, numericSeparatorInEscapeSequence: error, unexpectedNumericSeparator: error, invalidDigit: error, invalidCodePoint: error });
          if (!unterminatedCalled) throw new Error("Invalid raw");
          node.value.cooked = firstInvalidLoc ? null : str;
        }) }, tail: { default: false } } }), defineType("TemplateLiteral", { visitor: ["quasis", "expressions"], aliases: ["Expression", "Literal"], fields: { quasis: (0, _utils.validateArrayOfType)("TemplateElement"), expressions: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "TSType")), function(node, key, val) {
          if (node.quasis.length !== val.length + 1) throw new TypeError(`Number of ${node.type} quasis should be exactly one more than the number of expressions.
Expected ${val.length + 1} quasis but got ${node.quasis.length}`);
        }) } } }), defineType("YieldExpression", { builder: ["argument", "delegate"], visitor: ["argument"], aliases: ["Expression", "Terminatorless"], fields: { delegate: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function(node, key, val) {
          if (val && !node.argument) throw new TypeError("Property delegate of YieldExpression cannot be true if there is no argument");
        }, { type: "boolean" })) : (0, _utils.assertValueType)("boolean"), default: false }, argument: { optional: true, validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("AwaitExpression", { builder: ["argument"], visitor: ["argument"], aliases: ["Expression", "Terminatorless"], fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("Import", { aliases: ["Expression"] }), defineType("BigIntLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("ExportNamespaceSpecifier", { visitor: ["exported"], aliases: ["ModuleSpecifier"], fields: { exported: { validate: (0, _utils.assertNodeType)("Identifier") } } }), defineType("OptionalMemberExpression", { builder: ["object", "property", "computed", "optional"], visitor: ["object", "property"], aliases: ["Expression"], fields: { object: { validate: (0, _utils.assertNodeType)("Expression") }, property: { validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier"), computed = (0, _utils.assertNodeType)("Expression");
          return Object.assign(function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          }, { oneOfNodeTypes: ["Expression", "Identifier"] });
        }() }, computed: { default: false }, optional: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)()) : (0, _utils.assertValueType)("boolean") } } }), defineType("OptionalCallExpression", { visitor: ["callee", "arguments", "typeParameters", "typeArguments"], builder: ["callee", "arguments", "optional"], aliases: ["Expression"], fields: { callee: { validate: (0, _utils.assertNodeType)("Expression") }, arguments: (0, _utils.validateArrayOfType)("Expression", "SpreadElement", "ArgumentPlaceholder"), optional: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)()) : (0, _utils.assertValueType)("boolean") }, typeArguments: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"), optional: true } } }), defineType("ClassProperty", { visitor: ["decorators", "key", "typeAnnotation", "value"], builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"], aliases: ["Property"], fields: Object.assign({}, classMethodOrPropertyCommon(), { value: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, definite: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, typeAnnotation: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true }, readonly: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, variance: { validate: (0, _utils.assertNodeType)("Variance"), optional: true } }) }), defineType("ClassAccessorProperty", { visitor: ["decorators", "key", "typeAnnotation", "value"], builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"], aliases: ["Property", "Accessor"], fields: Object.assign({}, classMethodOrPropertyCommon(), { key: { validate: (0, _utils.chain)(function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "PrivateName"), computed = (0, _utils.assertNodeType)("Expression");
          return function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          };
        }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression", "PrivateName")) }, value: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, definite: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, typeAnnotation: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true }, readonly: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, variance: { validate: (0, _utils.assertNodeType)("Variance"), optional: true } }) }), defineType("ClassPrivateProperty", { visitor: ["decorators", "key", "typeAnnotation", "value"], builder: ["key", "value", "decorators", "static"], aliases: ["Property", "Private"], fields: { key: { validate: (0, _utils.assertNodeType)("PrivateName") }, value: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, typeAnnotation: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true }, static: { validate: (0, _utils.assertValueType)("boolean"), default: false }, readonly: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, definite: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, variance: { validate: (0, _utils.assertNodeType)("Variance"), optional: true } } }), defineType("ClassPrivateMethod", { builder: ["kind", "key", "params", "body", "static"], visitor: ["decorators", "key", "typeParameters", "params", "returnType", "body"], aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method", "Private"], fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), { kind: { validate: (0, _utils.assertOneOf)("get", "set", "method"), default: "method" }, key: { validate: (0, _utils.assertNodeType)("PrivateName") }, body: { validate: (0, _utils.assertNodeType)("BlockStatement") } }) }), defineType("PrivateName", { visitor: ["id"], aliases: ["Private"], fields: { id: { validate: (0, _utils.assertNodeType)("Identifier") } } }), defineType("StaticBlock", { visitor: ["body"], fields: { body: (0, _utils.validateArrayOfType)("Statement") }, aliases: ["Scopable", "BlockParent", "FunctionParent"] });
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/deprecated-aliases.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.DEPRECATED_ALIASES = void 0;
        exports2.DEPRECATED_ALIASES = { ModuleDeclaration: "ImportOrExportDeclaration" };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/experimental.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js");
        (0, _utils.default)("ArgumentPlaceholder", {}), (0, _utils.default)("BindExpression", { visitor: ["object", "callee"], aliases: ["Expression"], fields: process.env.BABEL_TYPES_8_BREAKING ? { object: { validate: (0, _utils.assertNodeType)("Expression") }, callee: { validate: (0, _utils.assertNodeType)("Expression") } } : { object: { validate: Object.assign(() => {
        }, { oneOfNodeTypes: ["Expression"] }) }, callee: { validate: Object.assign(() => {
        }, { oneOfNodeTypes: ["Expression"] }) } } }), (0, _utils.default)("ImportAttribute", { visitor: ["key", "value"], fields: { key: { validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral") }, value: { validate: (0, _utils.assertNodeType)("StringLiteral") } } }), (0, _utils.default)("Decorator", { visitor: ["expression"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } } }), (0, _utils.default)("DoExpression", { visitor: ["body"], builder: ["body", "async"], aliases: ["Expression"], fields: { body: { validate: (0, _utils.assertNodeType)("BlockStatement") }, async: { validate: (0, _utils.assertValueType)("boolean"), default: false } } }), (0, _utils.default)("ExportDefaultSpecifier", { visitor: ["exported"], aliases: ["ModuleSpecifier"], fields: { exported: { validate: (0, _utils.assertNodeType)("Identifier") } } }), (0, _utils.default)("RecordExpression", { visitor: ["properties"], aliases: ["Expression"], fields: { properties: (0, _utils.validateArrayOfType)("ObjectProperty", "SpreadElement") } }), (0, _utils.default)("TupleExpression", { fields: { elements: { validate: (0, _utils.arrayOfType)("Expression", "SpreadElement"), default: [] } }, visitor: ["elements"], aliases: ["Expression"] }), (0, _utils.default)("DecimalLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), (0, _utils.default)("ModuleExpression", { visitor: ["body"], fields: { body: { validate: (0, _utils.assertNodeType)("Program") } }, aliases: ["Expression"] }), (0, _utils.default)("TopicReference", { aliases: ["Expression"] }), (0, _utils.default)("PipelineTopicExpression", { builder: ["expression"], visitor: ["expression"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } }, aliases: ["Expression"] }), (0, _utils.default)("PipelineBareFunction", { builder: ["callee"], visitor: ["callee"], fields: { callee: { validate: (0, _utils.assertNodeType)("Expression") } }, aliases: ["Expression"] }), (0, _utils.default)("PipelinePrimaryTopicReference", { aliases: ["Expression"] });
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/flow.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/core.js"), _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js");
        const defineType = (0, _utils.defineAliasedType)("Flow"), defineInterfaceishType = (name) => {
          const isDeclareClass = "DeclareClass" === name;
          defineType(name, { builder: ["id", "typeParameters", "extends", "body"], visitor: ["id", "typeParameters", "extends", ...isDeclareClass ? ["mixins", "implements"] : [], "body"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: Object.assign({ id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")) }, isDeclareClass ? { mixins: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")), implements: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ClassImplements")) } : {}, { body: (0, _utils.validateType)("ObjectTypeAnnotation") }) });
        };
        defineType("AnyTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ArrayTypeAnnotation", { visitor: ["elementType"], aliases: ["FlowType"], fields: { elementType: (0, _utils.validateType)("FlowType") } }), defineType("BooleanTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("BooleanLiteralTypeAnnotation", { builder: ["value"], aliases: ["FlowType"], fields: { value: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("NullLiteralTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ClassImplements", { visitor: ["id", "typeParameters"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation") } }), defineInterfaceishType("DeclareClass"), defineType("DeclareFunction", { visitor: ["id"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), predicate: (0, _utils.validateOptionalType)("DeclaredPredicate") } }), defineInterfaceishType("DeclareInterface"), defineType("DeclareModule", { builder: ["id", "body", "kind"], visitor: ["id", "body"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier", "StringLiteral"), body: (0, _utils.validateType)("BlockStatement"), kind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("CommonJS", "ES")) } }), defineType("DeclareModuleExports", { visitor: ["typeAnnotation"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { typeAnnotation: (0, _utils.validateType)("TypeAnnotation") } }), defineType("DeclareTypeAlias", { visitor: ["id", "typeParameters", "right"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), right: (0, _utils.validateType)("FlowType") } }), defineType("DeclareOpaqueType", { visitor: ["id", "typeParameters", "supertype"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), supertype: (0, _utils.validateOptionalType)("FlowType"), impltype: (0, _utils.validateOptionalType)("FlowType") } }), defineType("DeclareVariable", { visitor: ["id"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier") } }), defineType("DeclareExportDeclaration", { visitor: ["declaration", "specifiers", "source", "attributes"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: Object.assign({ declaration: (0, _utils.validateOptionalType)("Flow"), specifiers: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ExportSpecifier", "ExportNamespaceSpecifier")), source: (0, _utils.validateOptionalType)("StringLiteral"), default: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean")) }, _core.importAttributes) }), defineType("DeclareExportAllDeclaration", { visitor: ["source", "attributes"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: Object.assign({ source: (0, _utils.validateType)("StringLiteral"), exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value")) }, _core.importAttributes) }), defineType("DeclaredPredicate", { visitor: ["value"], aliases: ["FlowPredicate"], fields: { value: (0, _utils.validateType)("Flow") } }), defineType("ExistsTypeAnnotation", { aliases: ["FlowType"] }), defineType("FunctionTypeAnnotation", { visitor: ["typeParameters", "params", "rest", "returnType"], aliases: ["FlowType"], fields: { typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), params: (0, _utils.validateArrayOfType)("FunctionTypeParam"), rest: (0, _utils.validateOptionalType)("FunctionTypeParam"), this: (0, _utils.validateOptionalType)("FunctionTypeParam"), returnType: (0, _utils.validateType)("FlowType") } }), defineType("FunctionTypeParam", { visitor: ["name", "typeAnnotation"], fields: { name: (0, _utils.validateOptionalType)("Identifier"), typeAnnotation: (0, _utils.validateType)("FlowType"), optional: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean")) } }), defineType("GenericTypeAnnotation", { visitor: ["id", "typeParameters"], aliases: ["FlowType"], fields: { id: (0, _utils.validateType)("Identifier", "QualifiedTypeIdentifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation") } }), defineType("InferredPredicate", { aliases: ["FlowPredicate"] }), defineType("InterfaceExtends", { visitor: ["id", "typeParameters"], fields: { id: (0, _utils.validateType)("Identifier", "QualifiedTypeIdentifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation") } }), defineInterfaceishType("InterfaceDeclaration"), defineType("InterfaceTypeAnnotation", { visitor: ["extends", "body"], aliases: ["FlowType"], fields: { extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")), body: (0, _utils.validateType)("ObjectTypeAnnotation") } }), defineType("IntersectionTypeAnnotation", { visitor: ["types"], aliases: ["FlowType"], fields: { types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) } }), defineType("MixedTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("EmptyTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("NullableTypeAnnotation", { visitor: ["typeAnnotation"], aliases: ["FlowType"], fields: { typeAnnotation: (0, _utils.validateType)("FlowType") } }), defineType("NumberLiteralTypeAnnotation", { builder: ["value"], aliases: ["FlowType"], fields: { value: (0, _utils.validate)((0, _utils.assertValueType)("number")) } }), defineType("NumberTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ObjectTypeAnnotation", { visitor: ["properties", "indexers", "callProperties", "internalSlots"], aliases: ["FlowType"], builder: ["properties", "indexers", "callProperties", "internalSlots", "exact"], fields: { properties: (0, _utils.validate)((0, _utils.arrayOfType)("ObjectTypeProperty", "ObjectTypeSpreadProperty")), indexers: { validate: (0, _utils.arrayOfType)("ObjectTypeIndexer"), optional: true, default: [] }, callProperties: { validate: (0, _utils.arrayOfType)("ObjectTypeCallProperty"), optional: true, default: [] }, internalSlots: { validate: (0, _utils.arrayOfType)("ObjectTypeInternalSlot"), optional: true, default: [] }, exact: { validate: (0, _utils.assertValueType)("boolean"), default: false }, inexact: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean")) } }), defineType("ObjectTypeInternalSlot", { visitor: ["id", "value"], builder: ["id", "value", "optional", "static", "method"], aliases: ["UserWhitespacable"], fields: { id: (0, _utils.validateType)("Identifier"), value: (0, _utils.validateType)("FlowType"), optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), method: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("ObjectTypeCallProperty", { visitor: ["value"], aliases: ["UserWhitespacable"], fields: { value: (0, _utils.validateType)("FlowType"), static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("ObjectTypeIndexer", { visitor: ["variance", "id", "key", "value"], builder: ["id", "key", "value", "variance"], aliases: ["UserWhitespacable"], fields: { id: (0, _utils.validateOptionalType)("Identifier"), key: (0, _utils.validateType)("FlowType"), value: (0, _utils.validateType)("FlowType"), static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), variance: (0, _utils.validateOptionalType)("Variance") } }), defineType("ObjectTypeProperty", { visitor: ["key", "value", "variance"], aliases: ["UserWhitespacable"], fields: { key: (0, _utils.validateType)("Identifier", "StringLiteral"), value: (0, _utils.validateType)("FlowType"), kind: (0, _utils.validate)((0, _utils.assertOneOf)("init", "get", "set")), static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), proto: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), variance: (0, _utils.validateOptionalType)("Variance"), method: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("ObjectTypeSpreadProperty", { visitor: ["argument"], aliases: ["UserWhitespacable"], fields: { argument: (0, _utils.validateType)("FlowType") } }), defineType("OpaqueType", { visitor: ["id", "typeParameters", "supertype", "impltype"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), supertype: (0, _utils.validateOptionalType)("FlowType"), impltype: (0, _utils.validateType)("FlowType") } }), defineType("QualifiedTypeIdentifier", { visitor: ["qualification", "id"], builder: ["id", "qualification"], fields: { id: (0, _utils.validateType)("Identifier"), qualification: (0, _utils.validateType)("Identifier", "QualifiedTypeIdentifier") } }), defineType("StringLiteralTypeAnnotation", { builder: ["value"], aliases: ["FlowType"], fields: { value: (0, _utils.validate)((0, _utils.assertValueType)("string")) } }), defineType("StringTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("SymbolTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ThisTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("TupleTypeAnnotation", { visitor: ["types"], aliases: ["FlowType"], fields: { types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) } }), defineType("TypeofTypeAnnotation", { visitor: ["argument"], aliases: ["FlowType"], fields: { argument: (0, _utils.validateType)("FlowType") } }), defineType("TypeAlias", { visitor: ["id", "typeParameters", "right"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), right: (0, _utils.validateType)("FlowType") } }), defineType("TypeAnnotation", { visitor: ["typeAnnotation"], fields: { typeAnnotation: (0, _utils.validateType)("FlowType") } }), defineType("TypeCastExpression", { visitor: ["expression", "typeAnnotation"], aliases: ["ExpressionWrapper", "Expression"], fields: { expression: (0, _utils.validateType)("Expression"), typeAnnotation: (0, _utils.validateType)("TypeAnnotation") } }), defineType("TypeParameter", { visitor: ["bound", "default", "variance"], fields: { name: (0, _utils.validate)((0, _utils.assertValueType)("string")), bound: (0, _utils.validateOptionalType)("TypeAnnotation"), default: (0, _utils.validateOptionalType)("FlowType"), variance: (0, _utils.validateOptionalType)("Variance") } }), defineType("TypeParameterDeclaration", { visitor: ["params"], fields: { params: (0, _utils.validate)((0, _utils.arrayOfType)("TypeParameter")) } }), defineType("TypeParameterInstantiation", { visitor: ["params"], fields: { params: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) } }), defineType("UnionTypeAnnotation", { visitor: ["types"], aliases: ["FlowType"], fields: { types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) } }), defineType("Variance", { builder: ["kind"], fields: { kind: (0, _utils.validate)((0, _utils.assertOneOf)("minus", "plus")) } }), defineType("VoidTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("EnumDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "body"], fields: { id: (0, _utils.validateType)("Identifier"), body: (0, _utils.validateType)("EnumBooleanBody", "EnumNumberBody", "EnumStringBody", "EnumSymbolBody") } }), defineType("EnumBooleanBody", { aliases: ["EnumBody"], visitor: ["members"], fields: { explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), members: (0, _utils.validateArrayOfType)("EnumBooleanMember"), hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("EnumNumberBody", { aliases: ["EnumBody"], visitor: ["members"], fields: { explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), members: (0, _utils.validateArrayOfType)("EnumNumberMember"), hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("EnumStringBody", { aliases: ["EnumBody"], visitor: ["members"], fields: { explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), members: (0, _utils.validateArrayOfType)("EnumStringMember", "EnumDefaultedMember"), hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("EnumSymbolBody", { aliases: ["EnumBody"], visitor: ["members"], fields: { members: (0, _utils.validateArrayOfType)("EnumDefaultedMember"), hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("EnumBooleanMember", { aliases: ["EnumMember"], visitor: ["id"], fields: { id: (0, _utils.validateType)("Identifier"), init: (0, _utils.validateType)("BooleanLiteral") } }), defineType("EnumNumberMember", { aliases: ["EnumMember"], visitor: ["id", "init"], fields: { id: (0, _utils.validateType)("Identifier"), init: (0, _utils.validateType)("NumericLiteral") } }), defineType("EnumStringMember", { aliases: ["EnumMember"], visitor: ["id", "init"], fields: { id: (0, _utils.validateType)("Identifier"), init: (0, _utils.validateType)("StringLiteral") } }), defineType("EnumDefaultedMember", { aliases: ["EnumMember"], visitor: ["id"], fields: { id: (0, _utils.validateType)("Identifier") } }), defineType("IndexedAccessType", { visitor: ["objectType", "indexType"], aliases: ["FlowType"], fields: { objectType: (0, _utils.validateType)("FlowType"), indexType: (0, _utils.validateType)("FlowType") } }), defineType("OptionalIndexedAccessType", { visitor: ["objectType", "indexType"], aliases: ["FlowType"], fields: { objectType: (0, _utils.validateType)("FlowType"), indexType: (0, _utils.validateType)("FlowType"), optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } });
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "ALIAS_KEYS", { enumerable: true, get: function() {
          return _utils.ALIAS_KEYS;
        } }), Object.defineProperty(exports2, "BUILDER_KEYS", { enumerable: true, get: function() {
          return _utils.BUILDER_KEYS;
        } }), Object.defineProperty(exports2, "DEPRECATED_ALIASES", { enumerable: true, get: function() {
          return _deprecatedAliases.DEPRECATED_ALIASES;
        } }), Object.defineProperty(exports2, "DEPRECATED_KEYS", { enumerable: true, get: function() {
          return _utils.DEPRECATED_KEYS;
        } }), Object.defineProperty(exports2, "FLIPPED_ALIAS_KEYS", { enumerable: true, get: function() {
          return _utils.FLIPPED_ALIAS_KEYS;
        } }), Object.defineProperty(exports2, "NODE_FIELDS", { enumerable: true, get: function() {
          return _utils.NODE_FIELDS;
        } }), Object.defineProperty(exports2, "NODE_PARENT_VALIDATIONS", { enumerable: true, get: function() {
          return _utils.NODE_PARENT_VALIDATIONS;
        } }), Object.defineProperty(exports2, "PLACEHOLDERS", { enumerable: true, get: function() {
          return _placeholders.PLACEHOLDERS;
        } }), Object.defineProperty(exports2, "PLACEHOLDERS_ALIAS", { enumerable: true, get: function() {
          return _placeholders.PLACEHOLDERS_ALIAS;
        } }), Object.defineProperty(exports2, "PLACEHOLDERS_FLIPPED_ALIAS", { enumerable: true, get: function() {
          return _placeholders.PLACEHOLDERS_FLIPPED_ALIAS;
        } }), exports2.TYPES = void 0, Object.defineProperty(exports2, "VISITOR_KEYS", { enumerable: true, get: function() {
          return _utils.VISITOR_KEYS;
        } }), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/core.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/flow.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/jsx.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/misc.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/experimental.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/typescript.js");
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js"), _placeholders = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/placeholders.js"), _deprecatedAliases = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/deprecated-aliases.js");
        Object.keys(_deprecatedAliases.DEPRECATED_ALIASES).forEach((deprecatedAlias) => {
          _utils.FLIPPED_ALIAS_KEYS[deprecatedAlias] = _utils.FLIPPED_ALIAS_KEYS[_deprecatedAliases.DEPRECATED_ALIASES[deprecatedAlias]];
        });
        exports2.TYPES = [].concat(Object.keys(_utils.VISITOR_KEYS), Object.keys(_utils.FLIPPED_ALIAS_KEYS), Object.keys(_utils.DEPRECATED_KEYS));
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/jsx.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js");
        const defineType = (0, _utils.defineAliasedType)("JSX");
        defineType("JSXAttribute", { visitor: ["name", "value"], aliases: ["Immutable"], fields: { name: { validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXNamespacedName") }, value: { optional: true, validate: (0, _utils.assertNodeType)("JSXElement", "JSXFragment", "StringLiteral", "JSXExpressionContainer") } } }), defineType("JSXClosingElement", { visitor: ["name"], aliases: ["Immutable"], fields: { name: { validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName") } } }), defineType("JSXElement", { builder: ["openingElement", "closingElement", "children", "selfClosing"], visitor: ["openingElement", "children", "closingElement"], aliases: ["Immutable", "Expression"], fields: Object.assign({ openingElement: { validate: (0, _utils.assertNodeType)("JSXOpeningElement") }, closingElement: { optional: true, validate: (0, _utils.assertNodeType)("JSXClosingElement") }, children: (0, _utils.validateArrayOfType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment") }, { selfClosing: { validate: (0, _utils.assertValueType)("boolean"), optional: true } }) }), defineType("JSXEmptyExpression", {}), defineType("JSXExpressionContainer", { visitor: ["expression"], aliases: ["Immutable"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression", "JSXEmptyExpression") } } }), defineType("JSXSpreadChild", { visitor: ["expression"], aliases: ["Immutable"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("JSXIdentifier", { builder: ["name"], fields: { name: { validate: (0, _utils.assertValueType)("string") } } }), defineType("JSXMemberExpression", { visitor: ["object", "property"], fields: { object: { validate: (0, _utils.assertNodeType)("JSXMemberExpression", "JSXIdentifier") }, property: { validate: (0, _utils.assertNodeType)("JSXIdentifier") } } }), defineType("JSXNamespacedName", { visitor: ["namespace", "name"], fields: { namespace: { validate: (0, _utils.assertNodeType)("JSXIdentifier") }, name: { validate: (0, _utils.assertNodeType)("JSXIdentifier") } } }), defineType("JSXOpeningElement", { builder: ["name", "attributes", "selfClosing"], visitor: ["name", "attributes"], aliases: ["Immutable"], fields: { name: { validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName") }, selfClosing: { default: false }, attributes: (0, _utils.validateArrayOfType)("JSXAttribute", "JSXSpreadAttribute"), typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"), optional: true } } }), defineType("JSXSpreadAttribute", { visitor: ["argument"], fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("JSXText", { aliases: ["Immutable"], builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } } }), defineType("JSXFragment", { builder: ["openingFragment", "closingFragment", "children"], visitor: ["openingFragment", "children", "closingFragment"], aliases: ["Immutable", "Expression"], fields: { openingFragment: { validate: (0, _utils.assertNodeType)("JSXOpeningFragment") }, closingFragment: { validate: (0, _utils.assertNodeType)("JSXClosingFragment") }, children: (0, _utils.validateArrayOfType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment") } }), defineType("JSXOpeningFragment", { aliases: ["Immutable"] }), defineType("JSXClosingFragment", { aliases: ["Immutable"] });
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/misc.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js"), _placeholders = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/placeholders.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/core.js");
        const defineType = (0, _utils.defineAliasedType)("Miscellaneous");
        defineType("Noop", { visitor: [] }), defineType("Placeholder", { visitor: [], builder: ["expectedNode", "name"], fields: Object.assign({ name: { validate: (0, _utils.assertNodeType)("Identifier") }, expectedNode: { validate: (0, _utils.assertOneOf)(..._placeholders.PLACEHOLDERS) } }, (0, _core.patternLikeCommon)()) }), defineType("V8IntrinsicIdentifier", { builder: ["name"], fields: { name: { validate: (0, _utils.assertValueType)("string") } } });
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/placeholders.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.PLACEHOLDERS_FLIPPED_ALIAS = exports2.PLACEHOLDERS_ALIAS = exports2.PLACEHOLDERS = void 0;
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js");
        const PLACEHOLDERS = exports2.PLACEHOLDERS = ["Identifier", "StringLiteral", "Expression", "Statement", "Declaration", "BlockStatement", "ClassBody", "Pattern"], PLACEHOLDERS_ALIAS = exports2.PLACEHOLDERS_ALIAS = { Declaration: ["Statement"], Pattern: ["PatternLike", "LVal"] };
        for (const type of PLACEHOLDERS) {
          const alias = _utils.ALIAS_KEYS[type];
          null != alias && alias.length && (PLACEHOLDERS_ALIAS[type] = alias);
        }
        const PLACEHOLDERS_FLIPPED_ALIAS = exports2.PLACEHOLDERS_FLIPPED_ALIAS = {};
        Object.keys(PLACEHOLDERS_ALIAS).forEach((type) => {
          PLACEHOLDERS_ALIAS[type].forEach((alias) => {
            hasOwnProperty.call(PLACEHOLDERS_FLIPPED_ALIAS, alias) || (PLACEHOLDERS_FLIPPED_ALIAS[alias] = []), PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);
          });
        });
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/typescript.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/core.js"), _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/is.js");
        const defineType = (0, _utils.defineAliasedType)("TypeScript"), bool = (0, _utils.assertValueType)("boolean"), tSFunctionTypeAnnotationCommon = () => ({ returnType: { validate: (0, _utils.assertNodeType)("TSTypeAnnotation", "Noop"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TSTypeParameterDeclaration", "Noop"), optional: true } });
        defineType("TSParameterProperty", { aliases: ["LVal"], visitor: ["parameter"], fields: { accessibility: { validate: (0, _utils.assertOneOf)("public", "private", "protected"), optional: true }, readonly: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, parameter: { validate: (0, _utils.assertNodeType)("Identifier", "AssignmentPattern") }, override: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true } } }), defineType("TSDeclareFunction", { aliases: ["Statement", "Declaration"], visitor: ["id", "typeParameters", "params", "returnType"], fields: Object.assign({}, (0, _core.functionDeclarationCommon)(), tSFunctionTypeAnnotationCommon()) }), defineType("TSDeclareMethod", { visitor: ["decorators", "key", "typeParameters", "params", "returnType"], fields: Object.assign({}, (0, _core.classMethodOrDeclareMethodCommon)(), tSFunctionTypeAnnotationCommon()) }), defineType("TSQualifiedName", { aliases: ["TSEntityName"], visitor: ["left", "right"], fields: { left: (0, _utils.validateType)("TSEntityName"), right: (0, _utils.validateType)("Identifier") } });
        const signatureDeclarationCommon = () => ({ typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"), parameters: (0, _utils.validateArrayOfType)("ArrayPattern", "Identifier", "ObjectPattern", "RestElement"), typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation") }), callConstructSignatureDeclaration = { aliases: ["TSTypeElement"], visitor: ["typeParameters", "parameters", "typeAnnotation"], fields: signatureDeclarationCommon() };
        defineType("TSCallSignatureDeclaration", callConstructSignatureDeclaration), defineType("TSConstructSignatureDeclaration", callConstructSignatureDeclaration);
        const namedTypeElementCommon = () => ({ key: (0, _utils.validateType)("Expression"), computed: { default: false }, optional: (0, _utils.validateOptional)(bool) });
        defineType("TSPropertySignature", { aliases: ["TSTypeElement"], visitor: ["key", "typeAnnotation"], fields: Object.assign({}, namedTypeElementCommon(), { readonly: (0, _utils.validateOptional)(bool), typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"), kind: { validate: (0, _utils.assertOneOf)("get", "set") } }) }), defineType("TSMethodSignature", { aliases: ["TSTypeElement"], visitor: ["key", "typeParameters", "parameters", "typeAnnotation"], fields: Object.assign({}, signatureDeclarationCommon(), namedTypeElementCommon(), { kind: { validate: (0, _utils.assertOneOf)("method", "get", "set") } }) }), defineType("TSIndexSignature", { aliases: ["TSTypeElement"], visitor: ["parameters", "typeAnnotation"], fields: { readonly: (0, _utils.validateOptional)(bool), static: (0, _utils.validateOptional)(bool), parameters: (0, _utils.validateArrayOfType)("Identifier"), typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation") } });
        const tsKeywordTypes = ["TSAnyKeyword", "TSBooleanKeyword", "TSBigIntKeyword", "TSIntrinsicKeyword", "TSNeverKeyword", "TSNullKeyword", "TSNumberKeyword", "TSObjectKeyword", "TSStringKeyword", "TSSymbolKeyword", "TSUndefinedKeyword", "TSUnknownKeyword", "TSVoidKeyword"];
        for (const type of tsKeywordTypes) defineType(type, { aliases: ["TSType", "TSBaseType"], visitor: [], fields: {} });
        defineType("TSThisType", { aliases: ["TSType", "TSBaseType"], visitor: [], fields: {} });
        const fnOrCtrBase = { aliases: ["TSType"], visitor: ["typeParameters", "parameters", "typeAnnotation"] };
        defineType("TSFunctionType", Object.assign({}, fnOrCtrBase, { fields: signatureDeclarationCommon() })), defineType("TSConstructorType", Object.assign({}, fnOrCtrBase, { fields: Object.assign({}, signatureDeclarationCommon(), { abstract: (0, _utils.validateOptional)(bool) }) })), defineType("TSTypeReference", { aliases: ["TSType"], visitor: ["typeName", "typeParameters"], fields: { typeName: (0, _utils.validateType)("TSEntityName"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } }), defineType("TSTypePredicate", { aliases: ["TSType"], visitor: ["parameterName", "typeAnnotation"], builder: ["parameterName", "typeAnnotation", "asserts"], fields: { parameterName: (0, _utils.validateType)("Identifier", "TSThisType"), typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"), asserts: (0, _utils.validateOptional)(bool) } }), defineType("TSTypeQuery", { aliases: ["TSType"], visitor: ["exprName", "typeParameters"], fields: { exprName: (0, _utils.validateType)("TSEntityName", "TSImportType"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } }), defineType("TSTypeLiteral", { aliases: ["TSType"], visitor: ["members"], fields: { members: (0, _utils.validateArrayOfType)("TSTypeElement") } }), defineType("TSArrayType", { aliases: ["TSType"], visitor: ["elementType"], fields: { elementType: (0, _utils.validateType)("TSType") } }), defineType("TSTupleType", { aliases: ["TSType"], visitor: ["elementTypes"], fields: { elementTypes: (0, _utils.validateArrayOfType)("TSType", "TSNamedTupleMember") } }), defineType("TSOptionalType", { aliases: ["TSType"], visitor: ["typeAnnotation"], fields: { typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSRestType", { aliases: ["TSType"], visitor: ["typeAnnotation"], fields: { typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSNamedTupleMember", { visitor: ["label", "elementType"], builder: ["label", "elementType", "optional"], fields: { label: (0, _utils.validateType)("Identifier"), optional: { validate: bool, default: false }, elementType: (0, _utils.validateType)("TSType") } });
        const unionOrIntersection = { aliases: ["TSType"], visitor: ["types"], fields: { types: (0, _utils.validateArrayOfType)("TSType") } };
        defineType("TSUnionType", unionOrIntersection), defineType("TSIntersectionType", unionOrIntersection), defineType("TSConditionalType", { aliases: ["TSType"], visitor: ["checkType", "extendsType", "trueType", "falseType"], fields: { checkType: (0, _utils.validateType)("TSType"), extendsType: (0, _utils.validateType)("TSType"), trueType: (0, _utils.validateType)("TSType"), falseType: (0, _utils.validateType)("TSType") } }), defineType("TSInferType", { aliases: ["TSType"], visitor: ["typeParameter"], fields: { typeParameter: (0, _utils.validateType)("TSTypeParameter") } }), defineType("TSParenthesizedType", { aliases: ["TSType"], visitor: ["typeAnnotation"], fields: { typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSTypeOperator", { aliases: ["TSType"], visitor: ["typeAnnotation"], fields: { operator: (0, _utils.validate)((0, _utils.assertValueType)("string")), typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSIndexedAccessType", { aliases: ["TSType"], visitor: ["objectType", "indexType"], fields: { objectType: (0, _utils.validateType)("TSType"), indexType: (0, _utils.validateType)("TSType") } }), defineType("TSMappedType", { aliases: ["TSType"], visitor: ["typeParameter", "nameType", "typeAnnotation"], builder: ["typeParameter", "typeAnnotation", "nameType"], fields: Object.assign({}, { typeParameter: (0, _utils.validateType)("TSTypeParameter") }, { readonly: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")), optional: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")), typeAnnotation: (0, _utils.validateOptionalType)("TSType"), nameType: (0, _utils.validateOptionalType)("TSType") }) }), defineType("TSLiteralType", { aliases: ["TSType", "TSBaseType"], visitor: ["literal"], fields: { literal: { validate: function() {
          const unaryExpression = (0, _utils.assertNodeType)("NumericLiteral", "BigIntLiteral"), unaryOperator = (0, _utils.assertOneOf)("-"), literal = (0, _utils.assertNodeType)("NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral");
          function validator(parent, key, node) {
            (0, _is.default)("UnaryExpression", node) ? (unaryOperator(node, "operator", node.operator), unaryExpression(node, "argument", node.argument)) : literal(parent, key, node);
          }
          return validator.oneOfNodeTypes = ["NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral", "UnaryExpression"], validator;
        }() } } });
        defineType("TSExpressionWithTypeArguments", { aliases: ["TSType"], visitor: ["expression", "typeParameters"], fields: { expression: (0, _utils.validateType)("TSEntityName"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } }), defineType("TSInterfaceDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "typeParameters", "extends", "body"], fields: { declare: (0, _utils.validateOptional)(bool), id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"), extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("TSExpressionWithTypeArguments")), body: (0, _utils.validateType)("TSInterfaceBody") } }), defineType("TSInterfaceBody", { visitor: ["body"], fields: { body: (0, _utils.validateArrayOfType)("TSTypeElement") } }), defineType("TSTypeAliasDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "typeParameters", "typeAnnotation"], fields: { declare: (0, _utils.validateOptional)(bool), id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"), typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSInstantiationExpression", { aliases: ["Expression"], visitor: ["expression", "typeParameters"], fields: { expression: (0, _utils.validateType)("Expression"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } });
        const TSTypeExpression = { aliases: ["Expression", "LVal", "PatternLike"], visitor: ["expression", "typeAnnotation"], fields: { expression: (0, _utils.validateType)("Expression"), typeAnnotation: (0, _utils.validateType)("TSType") } };
        defineType("TSAsExpression", TSTypeExpression), defineType("TSSatisfiesExpression", TSTypeExpression), defineType("TSTypeAssertion", { aliases: ["Expression", "LVal", "PatternLike"], visitor: ["typeAnnotation", "expression"], fields: { typeAnnotation: (0, _utils.validateType)("TSType"), expression: (0, _utils.validateType)("Expression") } }), defineType("TSEnumDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "members"], fields: { declare: (0, _utils.validateOptional)(bool), const: (0, _utils.validateOptional)(bool), id: (0, _utils.validateType)("Identifier"), members: (0, _utils.validateArrayOfType)("TSEnumMember"), initializer: (0, _utils.validateOptionalType)("Expression") } }), defineType("TSEnumMember", { visitor: ["id", "initializer"], fields: { id: (0, _utils.validateType)("Identifier", "StringLiteral"), initializer: (0, _utils.validateOptionalType)("Expression") } }), defineType("TSModuleDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "body"], fields: Object.assign({ kind: { validate: (0, _utils.assertOneOf)("global", "module", "namespace") }, declare: (0, _utils.validateOptional)(bool) }, { global: (0, _utils.validateOptional)(bool) }, { id: (0, _utils.validateType)("Identifier", "StringLiteral"), body: (0, _utils.validateType)("TSModuleBlock", "TSModuleDeclaration") }) }), defineType("TSModuleBlock", { aliases: ["Scopable", "Block", "BlockParent", "FunctionParent"], visitor: ["body"], fields: { body: (0, _utils.validateArrayOfType)("Statement") } }), defineType("TSImportType", { aliases: ["TSType"], visitor: ["argument", "qualifier", "typeParameters"], fields: { argument: (0, _utils.validateType)("StringLiteral"), qualifier: (0, _utils.validateOptionalType)("TSEntityName"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation"), options: { validate: (0, _utils.assertNodeType)("Expression"), optional: true } } }), defineType("TSImportEqualsDeclaration", { aliases: ["Statement"], visitor: ["id", "moduleReference"], fields: { isExport: (0, _utils.validate)(bool), id: (0, _utils.validateType)("Identifier"), moduleReference: (0, _utils.validateType)("TSEntityName", "TSExternalModuleReference"), importKind: { validate: (0, _utils.assertOneOf)("type", "value"), optional: true } } }), defineType("TSExternalModuleReference", { visitor: ["expression"], fields: { expression: (0, _utils.validateType)("StringLiteral") } }), defineType("TSNonNullExpression", { aliases: ["Expression", "LVal", "PatternLike"], visitor: ["expression"], fields: { expression: (0, _utils.validateType)("Expression") } }), defineType("TSExportAssignment", { aliases: ["Statement"], visitor: ["expression"], fields: { expression: (0, _utils.validateType)("Expression") } }), defineType("TSNamespaceExportDeclaration", { aliases: ["Statement"], visitor: ["id"], fields: { id: (0, _utils.validateType)("Identifier") } }), defineType("TSTypeAnnotation", { visitor: ["typeAnnotation"], fields: { typeAnnotation: { validate: (0, _utils.assertNodeType)("TSType") } } }), defineType("TSTypeParameterInstantiation", { visitor: ["params"], fields: { params: (0, _utils.validateArrayOfType)("TSType") } }), defineType("TSTypeParameterDeclaration", { visitor: ["params"], fields: { params: (0, _utils.validateArrayOfType)("TSTypeParameter") } }), defineType("TSTypeParameter", { builder: ["constraint", "default", "name"], visitor: ["constraint", "default"], fields: { name: { validate: (0, _utils.assertValueType)("string") }, in: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, out: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, const: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, constraint: { validate: (0, _utils.assertNodeType)("TSType"), optional: true }, default: { validate: (0, _utils.assertNodeType)("TSType"), optional: true } } });
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.VISITOR_KEYS = exports2.NODE_PARENT_VALIDATIONS = exports2.NODE_FIELDS = exports2.FLIPPED_ALIAS_KEYS = exports2.DEPRECATED_KEYS = exports2.BUILDER_KEYS = exports2.ALIAS_KEYS = void 0, exports2.arrayOf = arrayOf, exports2.arrayOfType = arrayOfType, exports2.assertEach = assertEach, exports2.assertNodeOrValueType = function(...types) {
          function validate2(node, key, val) {
            for (const type of types) if (getType(val) === type || (0, _is.default)(type, val)) return void (0, _validate.validateChild)(node, key, val);
            throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(null == val ? void 0 : val.type)}`);
          }
          return validate2.oneOfNodeOrValueTypes = types, validate2;
        }, exports2.assertNodeType = assertNodeType, exports2.assertOneOf = function(...values) {
          function validate2(node, key, val) {
            if (!values.includes(val)) throw new TypeError(`Property ${key} expected value to be one of ${JSON.stringify(values)} but got ${JSON.stringify(val)}`);
          }
          return validate2.oneOf = values, validate2;
        }, exports2.assertOptionalChainStart = function() {
          return function(node) {
            var _current;
            let current = node;
            for (; node; ) {
              const { type } = current;
              if ("OptionalCallExpression" !== type) {
                if ("OptionalMemberExpression" !== type) break;
                if (current.optional) return;
                current = current.object;
              } else {
                if (current.optional) return;
                current = current.callee;
              }
            }
            throw new TypeError(`Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${null == (_current = current) ? void 0 : _current.type}`);
          };
        }, exports2.assertShape = function(shape) {
          function validate2(node, key, val) {
            const errors = [];
            for (const property of Object.keys(shape)) try {
              (0, _validate.validateField)(node, property, val[property], shape[property]);
            } catch (error) {
              if (error instanceof TypeError) {
                errors.push(error.message);
                continue;
              }
              throw error;
            }
            if (errors.length) throw new TypeError(`Property ${key} of ${node.type} expected to have the following:
${errors.join("\n")}`);
          }
          return validate2.shapeOf = shape, validate2;
        }, exports2.assertValueType = assertValueType, exports2.chain = chain, exports2.default = defineType, exports2.defineAliasedType = function(...aliases) {
          return (type, opts = {}) => {
            let defined = opts.aliases;
            var _store$opts$inherits$;
            defined || (opts.inherits && (defined = null == (_store$opts$inherits$ = store[opts.inherits].aliases) ? void 0 : _store$opts$inherits$.slice()), null != defined || (defined = []), opts.aliases = defined);
            const additional = aliases.filter((a2) => !defined.includes(a2));
            defined.unshift(...additional), defineType(type, opts);
          };
        }, exports2.validate = validate, exports2.validateArrayOfType = function(...typeNames) {
          return validate(arrayOfType(...typeNames));
        }, exports2.validateOptional = function(validate2) {
          return { validate: validate2, optional: true };
        }, exports2.validateOptionalType = function(...typeNames) {
          return { validate: assertNodeType(...typeNames), optional: true };
        }, exports2.validateType = function(...typeNames) {
          return validate(assertNodeType(...typeNames));
        };
        var _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/is.js"), _validate = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/validate.js");
        const VISITOR_KEYS = exports2.VISITOR_KEYS = {}, ALIAS_KEYS = exports2.ALIAS_KEYS = {}, FLIPPED_ALIAS_KEYS = exports2.FLIPPED_ALIAS_KEYS = {}, NODE_FIELDS = exports2.NODE_FIELDS = {}, BUILDER_KEYS = exports2.BUILDER_KEYS = {}, DEPRECATED_KEYS = exports2.DEPRECATED_KEYS = {}, NODE_PARENT_VALIDATIONS = exports2.NODE_PARENT_VALIDATIONS = {};
        function getType(val) {
          return Array.isArray(val) ? "array" : null === val ? "null" : typeof val;
        }
        function validate(validate2) {
          return { validate: validate2 };
        }
        function arrayOf(elementType) {
          return chain(assertValueType("array"), assertEach(elementType));
        }
        function arrayOfType(...typeNames) {
          return arrayOf(assertNodeType(...typeNames));
        }
        function assertEach(callback) {
          const childValidator = process.env.BABEL_TYPES_8_BREAKING ? _validate.validateChild : () => {
          };
          function validator(node, key, val) {
            if (Array.isArray(val)) for (let i2 = 0; i2 < val.length; i2++) {
              const subkey = `${key}[${i2}]`, v = val[i2];
              callback(node, subkey, v), childValidator(node, subkey, v);
            }
          }
          return validator.each = callback, validator;
        }
        function assertNodeType(...types) {
          function validate2(node, key, val) {
            for (const type of types) if ((0, _is.default)(type, val)) return void (0, _validate.validateChild)(node, key, val);
            throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(null == val ? void 0 : val.type)}`);
          }
          return validate2.oneOfNodeTypes = types, validate2;
        }
        function assertValueType(type) {
          function validate2(node, key, val) {
            if (!(getType(val) === type)) throw new TypeError(`Property ${key} expected type of ${type} but got ${getType(val)}`);
          }
          return validate2.type = type, validate2;
        }
        function chain(...fns) {
          function validate2(...args) {
            for (const fn of fns) fn(...args);
          }
          if (validate2.chainOf = fns, fns.length >= 2 && "type" in fns[0] && "array" === fns[0].type && !("each" in fns[1])) throw new Error('An assertValueType("array") validator can only be followed by an assertEach(...) validator.');
          return validate2;
        }
        const validTypeOpts = /* @__PURE__ */ new Set(["aliases", "builder", "deprecatedAlias", "fields", "inherits", "visitor", "validate"]), validFieldKeys = /* @__PURE__ */ new Set(["default", "optional", "deprecated", "validate"]), store = {};
        function defineType(type, opts = {}) {
          const inherits = opts.inherits && store[opts.inherits] || {};
          let fields = opts.fields;
          if (!fields && (fields = {}, inherits.fields)) {
            const keys = Object.getOwnPropertyNames(inherits.fields);
            for (const key of keys) {
              const field = inherits.fields[key], def = field.default;
              if (Array.isArray(def) ? def.length > 0 : def && "object" == typeof def) throw new Error("field defaults can only be primitives or empty arrays currently");
              fields[key] = { default: Array.isArray(def) ? [] : def, optional: field.optional, deprecated: field.deprecated, validate: field.validate };
            }
          }
          const visitor = opts.visitor || inherits.visitor || [], aliases = opts.aliases || inherits.aliases || [], builder = opts.builder || inherits.builder || opts.visitor || [];
          for (const k3 of Object.keys(opts)) if (!validTypeOpts.has(k3)) throw new Error(`Unknown type option "${k3}" on ${type}`);
          opts.deprecatedAlias && (DEPRECATED_KEYS[opts.deprecatedAlias] = type);
          for (const key of visitor.concat(builder)) fields[key] = fields[key] || {};
          for (const key of Object.keys(fields)) {
            const field = fields[key];
            void 0 === field.default || builder.includes(key) || (field.optional = true), void 0 === field.default ? field.default = null : field.validate || null == field.default || (field.validate = assertValueType(getType(field.default)));
            for (const k3 of Object.keys(field)) if (!validFieldKeys.has(k3)) throw new Error(`Unknown field key "${k3}" on ${type}.${key}`);
          }
          VISITOR_KEYS[type] = opts.visitor = visitor, BUILDER_KEYS[type] = opts.builder = builder, NODE_FIELDS[type] = opts.fields = fields, ALIAS_KEYS[type] = opts.aliases = aliases, aliases.forEach((alias) => {
            FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [], FLIPPED_ALIAS_KEYS[alias].push(type);
          }), opts.validate && (NODE_PARENT_VALIDATIONS[type] = opts.validate), store[type] = opts;
        }
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var _exportNames = { react: true, assertNode: true, createTypeAnnotationBasedOnTypeof: true, createUnionTypeAnnotation: true, createFlowUnionType: true, createTSUnionType: true, cloneNode: true, clone: true, cloneDeep: true, cloneDeepWithoutLoc: true, cloneWithoutLoc: true, addComment: true, addComments: true, inheritInnerComments: true, inheritLeadingComments: true, inheritsComments: true, inheritTrailingComments: true, removeComments: true, ensureBlock: true, toBindingIdentifierName: true, toBlock: true, toComputedKey: true, toExpression: true, toIdentifier: true, toKeyAlias: true, toStatement: true, valueToNode: true, appendToMemberExpression: true, inherits: true, prependToMemberExpression: true, removeProperties: true, removePropertiesDeep: true, removeTypeDuplicates: true, getAssignmentIdentifiers: true, getBindingIdentifiers: true, getOuterBindingIdentifiers: true, getFunctionName: true, traverse: true, traverseFast: true, shallowEqual: true, is: true, isBinding: true, isBlockScoped: true, isImmutable: true, isLet: true, isNode: true, isNodesEquivalent: true, isPlaceholderType: true, isReferenced: true, isScope: true, isSpecifierDefault: true, isType: true, isValidES3Identifier: true, isValidIdentifier: true, isVar: true, matchesPattern: true, validate: true, buildMatchMemberExpression: true, __internal__deprecationWarning: true };
        Object.defineProperty(exports2, "__internal__deprecationWarning", { enumerable: true, get: function() {
          return _deprecationWarning.default;
        } }), Object.defineProperty(exports2, "addComment", { enumerable: true, get: function() {
          return _addComment.default;
        } }), Object.defineProperty(exports2, "addComments", { enumerable: true, get: function() {
          return _addComments.default;
        } }), Object.defineProperty(exports2, "appendToMemberExpression", { enumerable: true, get: function() {
          return _appendToMemberExpression.default;
        } }), Object.defineProperty(exports2, "assertNode", { enumerable: true, get: function() {
          return _assertNode.default;
        } }), Object.defineProperty(exports2, "buildMatchMemberExpression", { enumerable: true, get: function() {
          return _buildMatchMemberExpression.default;
        } }), Object.defineProperty(exports2, "clone", { enumerable: true, get: function() {
          return _clone.default;
        } }), Object.defineProperty(exports2, "cloneDeep", { enumerable: true, get: function() {
          return _cloneDeep.default;
        } }), Object.defineProperty(exports2, "cloneDeepWithoutLoc", { enumerable: true, get: function() {
          return _cloneDeepWithoutLoc.default;
        } }), Object.defineProperty(exports2, "cloneNode", { enumerable: true, get: function() {
          return _cloneNode.default;
        } }), Object.defineProperty(exports2, "cloneWithoutLoc", { enumerable: true, get: function() {
          return _cloneWithoutLoc.default;
        } }), Object.defineProperty(exports2, "createFlowUnionType", { enumerable: true, get: function() {
          return _createFlowUnionType.default;
        } }), Object.defineProperty(exports2, "createTSUnionType", { enumerable: true, get: function() {
          return _createTSUnionType.default;
        } }), Object.defineProperty(exports2, "createTypeAnnotationBasedOnTypeof", { enumerable: true, get: function() {
          return _createTypeAnnotationBasedOnTypeof.default;
        } }), Object.defineProperty(exports2, "createUnionTypeAnnotation", { enumerable: true, get: function() {
          return _createFlowUnionType.default;
        } }), Object.defineProperty(exports2, "ensureBlock", { enumerable: true, get: function() {
          return _ensureBlock.default;
        } }), Object.defineProperty(exports2, "getAssignmentIdentifiers", { enumerable: true, get: function() {
          return _getAssignmentIdentifiers.default;
        } }), Object.defineProperty(exports2, "getBindingIdentifiers", { enumerable: true, get: function() {
          return _getBindingIdentifiers.default;
        } }), Object.defineProperty(exports2, "getFunctionName", { enumerable: true, get: function() {
          return _getFunctionName.default;
        } }), Object.defineProperty(exports2, "getOuterBindingIdentifiers", { enumerable: true, get: function() {
          return _getOuterBindingIdentifiers.default;
        } }), Object.defineProperty(exports2, "inheritInnerComments", { enumerable: true, get: function() {
          return _inheritInnerComments.default;
        } }), Object.defineProperty(exports2, "inheritLeadingComments", { enumerable: true, get: function() {
          return _inheritLeadingComments.default;
        } }), Object.defineProperty(exports2, "inheritTrailingComments", { enumerable: true, get: function() {
          return _inheritTrailingComments.default;
        } }), Object.defineProperty(exports2, "inherits", { enumerable: true, get: function() {
          return _inherits.default;
        } }), Object.defineProperty(exports2, "inheritsComments", { enumerable: true, get: function() {
          return _inheritsComments.default;
        } }), Object.defineProperty(exports2, "is", { enumerable: true, get: function() {
          return _is.default;
        } }), Object.defineProperty(exports2, "isBinding", { enumerable: true, get: function() {
          return _isBinding.default;
        } }), Object.defineProperty(exports2, "isBlockScoped", { enumerable: true, get: function() {
          return _isBlockScoped.default;
        } }), Object.defineProperty(exports2, "isImmutable", { enumerable: true, get: function() {
          return _isImmutable.default;
        } }), Object.defineProperty(exports2, "isLet", { enumerable: true, get: function() {
          return _isLet.default;
        } }), Object.defineProperty(exports2, "isNode", { enumerable: true, get: function() {
          return _isNode.default;
        } }), Object.defineProperty(exports2, "isNodesEquivalent", { enumerable: true, get: function() {
          return _isNodesEquivalent.default;
        } }), Object.defineProperty(exports2, "isPlaceholderType", { enumerable: true, get: function() {
          return _isPlaceholderType.default;
        } }), Object.defineProperty(exports2, "isReferenced", { enumerable: true, get: function() {
          return _isReferenced.default;
        } }), Object.defineProperty(exports2, "isScope", { enumerable: true, get: function() {
          return _isScope.default;
        } }), Object.defineProperty(exports2, "isSpecifierDefault", { enumerable: true, get: function() {
          return _isSpecifierDefault.default;
        } }), Object.defineProperty(exports2, "isType", { enumerable: true, get: function() {
          return _isType.default;
        } }), Object.defineProperty(exports2, "isValidES3Identifier", { enumerable: true, get: function() {
          return _isValidES3Identifier.default;
        } }), Object.defineProperty(exports2, "isValidIdentifier", { enumerable: true, get: function() {
          return _isValidIdentifier.default;
        } }), Object.defineProperty(exports2, "isVar", { enumerable: true, get: function() {
          return _isVar.default;
        } }), Object.defineProperty(exports2, "matchesPattern", { enumerable: true, get: function() {
          return _matchesPattern.default;
        } }), Object.defineProperty(exports2, "prependToMemberExpression", { enumerable: true, get: function() {
          return _prependToMemberExpression.default;
        } }), exports2.react = void 0, Object.defineProperty(exports2, "removeComments", { enumerable: true, get: function() {
          return _removeComments.default;
        } }), Object.defineProperty(exports2, "removeProperties", { enumerable: true, get: function() {
          return _removeProperties.default;
        } }), Object.defineProperty(exports2, "removePropertiesDeep", { enumerable: true, get: function() {
          return _removePropertiesDeep.default;
        } }), Object.defineProperty(exports2, "removeTypeDuplicates", { enumerable: true, get: function() {
          return _removeTypeDuplicates.default;
        } }), Object.defineProperty(exports2, "shallowEqual", { enumerable: true, get: function() {
          return _shallowEqual.default;
        } }), Object.defineProperty(exports2, "toBindingIdentifierName", { enumerable: true, get: function() {
          return _toBindingIdentifierName.default;
        } }), Object.defineProperty(exports2, "toBlock", { enumerable: true, get: function() {
          return _toBlock.default;
        } }), Object.defineProperty(exports2, "toComputedKey", { enumerable: true, get: function() {
          return _toComputedKey.default;
        } }), Object.defineProperty(exports2, "toExpression", { enumerable: true, get: function() {
          return _toExpression.default;
        } }), Object.defineProperty(exports2, "toIdentifier", { enumerable: true, get: function() {
          return _toIdentifier.default;
        } }), Object.defineProperty(exports2, "toKeyAlias", { enumerable: true, get: function() {
          return _toKeyAlias.default;
        } }), Object.defineProperty(exports2, "toStatement", { enumerable: true, get: function() {
          return _toStatement.default;
        } }), Object.defineProperty(exports2, "traverse", { enumerable: true, get: function() {
          return _traverse.default;
        } }), Object.defineProperty(exports2, "traverseFast", { enumerable: true, get: function() {
          return _traverseFast.default;
        } }), Object.defineProperty(exports2, "validate", { enumerable: true, get: function() {
          return _validate.default;
        } }), Object.defineProperty(exports2, "valueToNode", { enumerable: true, get: function() {
          return _valueToNode.default;
        } });
        var _isReactComponent = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/react/isReactComponent.js"), _isCompatTag = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/react/isCompatTag.js"), _buildChildren = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/react/buildChildren.js"), _assertNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/asserts/assertNode.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/asserts/generated/index.js");
        Object.keys(_index).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _index[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _index[key];
          } }));
        });
        var _createTypeAnnotationBasedOnTypeof = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js"), _createFlowUnionType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js"), _createTSUnionType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
        Object.keys(_index2).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _index2[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _index2[key];
          } }));
        });
        var _uppercase = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/uppercase.js");
        Object.keys(_uppercase).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _uppercase[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _uppercase[key];
          } }));
        });
        var _productions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/productions.js");
        Object.keys(_productions).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _productions[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _productions[key];
          } }));
        });
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js"), _clone = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/clone.js"), _cloneDeep = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneDeep.js"), _cloneDeepWithoutLoc = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js"), _cloneWithoutLoc = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneWithoutLoc.js"), _addComment = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/addComment.js"), _addComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/addComments.js"), _inheritInnerComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritInnerComments.js"), _inheritLeadingComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritLeadingComments.js"), _inheritsComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritsComments.js"), _inheritTrailingComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritTrailingComments.js"), _removeComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/removeComments.js"), _index3 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/generated/index.js");
        Object.keys(_index3).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _index3[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _index3[key];
          } }));
        });
        var _index4 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js");
        Object.keys(_index4).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _index4[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _index4[key];
          } }));
        });
        var _ensureBlock = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/ensureBlock.js"), _toBindingIdentifierName = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toBindingIdentifierName.js"), _toBlock = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toBlock.js"), _toComputedKey = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toComputedKey.js"), _toExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toExpression.js"), _toIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toIdentifier.js"), _toKeyAlias = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toKeyAlias.js"), _toStatement = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toStatement.js"), _valueToNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/valueToNode.js"), _index5 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
        Object.keys(_index5).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _index5[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _index5[key];
          } }));
        });
        var _appendToMemberExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/appendToMemberExpression.js"), _inherits = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/inherits.js"), _prependToMemberExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/prependToMemberExpression.js"), _removeProperties = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/removeProperties.js"), _removePropertiesDeep = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js"), _removeTypeDuplicates = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js"), _getAssignmentIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getAssignmentIdentifiers.js"), _getBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js"), _getOuterBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js"), _getFunctionName = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getFunctionName.js"), _traverse = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/traverse/traverse.js");
        Object.keys(_traverse).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _traverse[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _traverse[key];
          } }));
        });
        var _traverseFast = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/traverse/traverseFast.js"), _shallowEqual = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/shallowEqual.js"), _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/is.js"), _isBinding = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isBinding.js"), _isBlockScoped = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isBlockScoped.js"), _isImmutable = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isImmutable.js"), _isLet = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isLet.js"), _isNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isNode.js"), _isNodesEquivalent = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isNodesEquivalent.js"), _isPlaceholderType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isPlaceholderType.js"), _isReferenced = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isReferenced.js"), _isScope = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isScope.js"), _isSpecifierDefault = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isSpecifierDefault.js"), _isType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isType.js"), _isValidES3Identifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidES3Identifier.js"), _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _isVar = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isVar.js"), _matchesPattern = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/matchesPattern.js"), _validate = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/validate.js"), _buildMatchMemberExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js"), _index6 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
        Object.keys(_index6).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _index6[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _index6[key];
          } }));
        });
        var _deprecationWarning = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/deprecationWarning.js");
        exports2.react = { isReactComponent: _isReactComponent.default, isCompatTag: _isCompatTag.default, buildChildren: _buildChildren.default };
        exports2.toSequenceExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toSequenceExpression.js").default, process.env.BABEL_TYPES_8_BREAKING && console.warn("BABEL_TYPES_8_BREAKING is not supported anymore. Use the latest Babel 8.0.0 pre-release instead!");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/appendToMemberExpression.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(member, append, computed = false) {
          return member.object = (0, _index.memberExpression)(member.object, member.property, member.computed), member.property = append, member.computed = !!computed, member;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function removeTypeDuplicates(nodesIn) {
          const nodes = Array.from(nodesIn), generics = /* @__PURE__ */ new Map(), bases = /* @__PURE__ */ new Map(), typeGroups = /* @__PURE__ */ new Set(), types = [];
          for (let i2 = 0; i2 < nodes.length; i2++) {
            const node = nodes[i2];
            if (node && !types.includes(node)) {
              if ((0, _index.isAnyTypeAnnotation)(node)) return [node];
              if ((0, _index.isFlowBaseAnnotation)(node)) bases.set(node.type, node);
              else if ((0, _index.isUnionTypeAnnotation)(node)) typeGroups.has(node.types) || (nodes.push(...node.types), typeGroups.add(node.types));
              else if ((0, _index.isGenericTypeAnnotation)(node)) {
                const name = getQualifiedName(node.id);
                if (generics.has(name)) {
                  let existing = generics.get(name);
                  existing.typeParameters ? node.typeParameters && (existing.typeParameters.params.push(...node.typeParameters.params), existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params)) : existing = node.typeParameters;
                } else generics.set(name, node);
              } else types.push(node);
            }
          }
          for (const [, baseType] of bases) types.push(baseType);
          for (const [, genericName] of generics) types.push(genericName);
          return types;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
        function getQualifiedName(node) {
          return (0, _index.isIdentifier)(node) ? node.name : `${node.id.name}.${getQualifiedName(node.qualification)}`;
        }
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/inherits.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(child, parent) {
          if (!child || !parent) return child;
          for (const key of _index.INHERIT_KEYS.optional) null == child[key] && (child[key] = parent[key]);
          for (const key of Object.keys(parent)) "_" === key[0] && "__clone" !== key && (child[key] = parent[key]);
          for (const key of _index.INHERIT_KEYS.force) child[key] = parent[key];
          return (0, _inheritsComments.default)(child, parent), child;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js"), _inheritsComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritsComments.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/prependToMemberExpression.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(member, prepend) {
          if ((0, _index2.isSuper)(member.object)) throw new Error("Cannot prepend node to super property access (`super.foo`).");
          return member.object = (0, _index.memberExpression)(prepend, member.object), member;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/removeProperties.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, opts = {}) {
          const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;
          for (const key of map) null != node[key] && (node[key] = void 0);
          for (const key of Object.keys(node)) "_" === key[0] && null != node[key] && (node[key] = void 0);
          const symbols = Object.getOwnPropertySymbols(node);
          for (const sym of symbols) node[sym] = null;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js");
        const CLEAR_KEYS = ["tokens", "start", "end", "loc", "raw", "rawValue"], CLEAR_KEYS_PLUS_COMMENTS = [..._index.COMMENT_KEYS, "comments", ...CLEAR_KEYS];
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(tree, opts) {
          return (0, _traverseFast.default)(tree, _removeProperties.default, opts), tree;
        };
        var _traverseFast = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/traverse/traverseFast.js"), _removeProperties = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/removeProperties.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function removeTypeDuplicates(nodesIn) {
          const nodes = Array.from(nodesIn), generics = /* @__PURE__ */ new Map(), bases = /* @__PURE__ */ new Map(), typeGroups = /* @__PURE__ */ new Set(), types = [];
          for (let i2 = 0; i2 < nodes.length; i2++) {
            const node = nodes[i2];
            if (node && !types.includes(node)) {
              if ((0, _index.isTSAnyKeyword)(node)) return [node];
              if ((0, _index.isTSBaseType)(node)) bases.set(node.type, node);
              else if ((0, _index.isTSUnionType)(node)) typeGroups.has(node.types) || (nodes.push(...node.types), typeGroups.add(node.types));
              else if ((0, _index.isTSTypeReference)(node) && node.typeParameters) {
                const name = getQualifiedName(node.typeName);
                if (generics.has(name)) {
                  let existing = generics.get(name);
                  existing.typeParameters ? node.typeParameters && (existing.typeParameters.params.push(...node.typeParameters.params), existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params)) : existing = node.typeParameters;
                } else generics.set(name, node);
              } else types.push(node);
            }
          }
          for (const [, baseType] of bases) types.push(baseType);
          for (const [, genericName] of generics) types.push(genericName);
          return types;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
        function getQualifiedName(node) {
          return (0, _index.isIdentifier)(node) ? node.name : `${node.right.name}.${getQualifiedName(node.left)}`;
        }
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getAssignmentIdentifiers.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          const search = [].concat(node), ids = /* @__PURE__ */ Object.create(null);
          for (; search.length; ) {
            const id = search.pop();
            if (id) switch (id.type) {
              case "ArrayPattern":
                search.push(...id.elements);
                break;
              case "AssignmentExpression":
              case "AssignmentPattern":
              case "ForInStatement":
              case "ForOfStatement":
                search.push(id.left);
                break;
              case "ObjectPattern":
                search.push(...id.properties);
                break;
              case "ObjectProperty":
                search.push(id.value);
                break;
              case "RestElement":
              case "UpdateExpression":
                search.push(id.argument);
                break;
              case "UnaryExpression":
                "delete" === id.operator && search.push(id.argument);
                break;
              case "Identifier":
                ids[id.name] = id;
            }
          }
          return ids;
        };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = getBindingIdentifiers;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
        function getBindingIdentifiers(node, duplicates, outerOnly, newBindingsOnly) {
          const search = [].concat(node), ids = /* @__PURE__ */ Object.create(null);
          for (; search.length; ) {
            const id = search.shift();
            if (!id) continue;
            if (newBindingsOnly && ((0, _index.isAssignmentExpression)(id) || (0, _index.isUnaryExpression)(id) || (0, _index.isUpdateExpression)(id))) continue;
            if ((0, _index.isIdentifier)(id)) {
              if (duplicates) {
                (ids[id.name] = ids[id.name] || []).push(id);
              } else ids[id.name] = id;
              continue;
            }
            if ((0, _index.isExportDeclaration)(id) && !(0, _index.isExportAllDeclaration)(id)) {
              (0, _index.isDeclaration)(id.declaration) && search.push(id.declaration);
              continue;
            }
            if (outerOnly) {
              if ((0, _index.isFunctionDeclaration)(id)) {
                search.push(id.id);
                continue;
              }
              if ((0, _index.isFunctionExpression)(id)) continue;
            }
            const keys = getBindingIdentifiers.keys[id.type];
            if (keys) for (let i2 = 0; i2 < keys.length; i2++) {
              const nodes = id[keys[i2]];
              nodes && (Array.isArray(nodes) ? search.push(...nodes) : search.push(nodes));
            }
          }
          return ids;
        }
        getBindingIdentifiers.keys = { DeclareClass: ["id"], DeclareFunction: ["id"], DeclareModule: ["id"], DeclareVariable: ["id"], DeclareInterface: ["id"], DeclareTypeAlias: ["id"], DeclareOpaqueType: ["id"], InterfaceDeclaration: ["id"], TypeAlias: ["id"], OpaqueType: ["id"], CatchClause: ["param"], LabeledStatement: ["label"], UnaryExpression: ["argument"], AssignmentExpression: ["left"], ImportSpecifier: ["local"], ImportNamespaceSpecifier: ["local"], ImportDefaultSpecifier: ["local"], ImportDeclaration: ["specifiers"], ExportSpecifier: ["exported"], ExportNamespaceSpecifier: ["exported"], ExportDefaultSpecifier: ["exported"], FunctionDeclaration: ["id", "params"], FunctionExpression: ["id", "params"], ArrowFunctionExpression: ["params"], ObjectMethod: ["params"], ClassMethod: ["params"], ClassPrivateMethod: ["params"], ForInStatement: ["left"], ForOfStatement: ["left"], ClassDeclaration: ["id"], ClassExpression: ["id"], RestElement: ["argument"], UpdateExpression: ["argument"], ObjectProperty: ["value"], AssignmentPattern: ["left"], ArrayPattern: ["elements"], ObjectPattern: ["properties"], VariableDeclaration: ["declarations"], VariableDeclarator: ["id"] };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getFunctionName.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, parent) {
          if ("id" in node && node.id) return { name: node.id.name, originalNode: node.id };
          let id, prefix = "";
          (0, _index.isObjectProperty)(parent, { value: node }) ? id = getObjectMemberKey(parent) : (0, _index.isObjectMethod)(node) || (0, _index.isClassMethod)(node) ? (id = getObjectMemberKey(node), "get" === node.kind ? prefix = "get " : "set" === node.kind && (prefix = "set ")) : (0, _index.isVariableDeclarator)(parent, { init: node }) ? id = parent.id : (0, _index.isAssignmentExpression)(parent, { operator: "=", right: node }) && (id = parent.left);
          if (!id) return null;
          const name = (0, _index.isLiteral)(id) ? function(id2) {
            if ((0, _index.isNullLiteral)(id2)) return "null";
            if ((0, _index.isRegExpLiteral)(id2)) return `/${id2.pattern}/${id2.flags}`;
            if ((0, _index.isTemplateLiteral)(id2)) return id2.quasis.map((quasi) => quasi.value.raw).join("");
            if (void 0 !== id2.value) return String(id2.value);
            return null;
          }(id) : (0, _index.isIdentifier)(id) ? id.name : (0, _index.isPrivateName)(id) ? id.id.name : null;
          return null == name ? null : { name: prefix + name, originalNode: id };
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
        function getObjectMemberKey(node) {
          if (!node.computed || (0, _index.isLiteral)(node.key)) return node.key;
        }
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _getBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js");
        exports2.default = function(node, duplicates) {
          return (0, _getBindingIdentifiers.default)(node, duplicates, true);
        };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/traverse/traverse.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, handlers, state) {
          "function" == typeof handlers && (handlers = { enter: handlers });
          const { enter, exit } = handlers;
          traverseSimpleImpl(node, enter, exit, state, []);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
        function traverseSimpleImpl(node, enter, exit, state, ancestors) {
          const keys = _index.VISITOR_KEYS[node.type];
          if (keys) {
            enter && enter(node, ancestors, state);
            for (const key of keys) {
              const subNode = node[key];
              if (Array.isArray(subNode)) for (let i2 = 0; i2 < subNode.length; i2++) {
                const child = subNode[i2];
                child && (ancestors.push({ node, key, index: i2 }), traverseSimpleImpl(child, enter, exit, state, ancestors), ancestors.pop());
              }
              else subNode && (ancestors.push({ node, key }), traverseSimpleImpl(subNode, enter, exit, state, ancestors), ancestors.pop());
            }
            exit && exit(node, ancestors, state);
          }
        }
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/traverse/traverseFast.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function traverseFast(node, enter, opts) {
          if (!node) return;
          const keys = _index.VISITOR_KEYS[node.type];
          if (!keys) return;
          enter(node, opts = opts || {});
          for (const key of keys) {
            const subNode = node[key];
            if (Array.isArray(subNode)) for (const node2 of subNode) traverseFast(node2, enter, opts);
            else traverseFast(subNode, enter, opts);
          }
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/deprecationWarning.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(oldName, newName, prefix = "") {
          if (warnings.has(oldName)) return;
          warnings.add(oldName);
          const { internal, trace } = function(skip, length) {
            const { stackTraceLimit, prepareStackTrace } = Error;
            let stackTrace;
            if (Error.stackTraceLimit = 1 + skip + length, Error.prepareStackTrace = function(err, stack) {
              stackTrace = stack;
            }, new Error().stack, Error.stackTraceLimit = stackTraceLimit, Error.prepareStackTrace = prepareStackTrace, !stackTrace) return { internal: false, trace: "" };
            const shortStackTrace = stackTrace.slice(1 + skip, 1 + skip + length);
            return { internal: /[\\/]@babel[\\/]/.test(shortStackTrace[1].getFileName()), trace: shortStackTrace.map((frame) => `    at ${frame}`).join("\n") };
          }(1, 2);
          if (internal) return;
          console.warn(`${prefix}\`${oldName}\` has been deprecated, please migrate to \`${newName}\`
${trace}`);
        };
        const warnings = /* @__PURE__ */ new Set();
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/inherit.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(key, child, parent) {
          child && parent && (child[key] = Array.from(new Set([].concat(child[key], parent[key]).filter(Boolean))));
        };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(child, args) {
          const lines = child.value.split(/\r\n|\n|\r/);
          let lastNonEmptyLine = 0;
          for (let i2 = 0; i2 < lines.length; i2++) /[^ \t]/.exec(lines[i2]) && (lastNonEmptyLine = i2);
          let str = "";
          for (let i2 = 0; i2 < lines.length; i2++) {
            const line = lines[i2], isFirstLine = 0 === i2, isLastLine = i2 === lines.length - 1, isLastNonEmptyLine = i2 === lastNonEmptyLine;
            let trimmedLine = line.replace(/\t/g, " ");
            isFirstLine || (trimmedLine = trimmedLine.replace(/^ +/, "")), isLastLine || (trimmedLine = trimmedLine.replace(/ +$/, "")), trimmedLine && (isLastNonEmptyLine || (trimmedLine += " "), str += trimmedLine);
          }
          str && args.push((0, _index2.inherits)((0, _index.stringLiteral)(str), child));
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/shallowEqual.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(actual, expected) {
          const keys = Object.keys(expected);
          for (const key of keys) if (actual[key] !== expected[key]) return false;
          return true;
        };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(match, allowPartial) {
          const parts = match.split(".");
          return (member) => (0, _matchesPattern.default)(member, parts, allowPartial);
        };
        var _matchesPattern = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/matchesPattern.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isAccessor = function(node, opts) {
          if (!node) return false;
          if ("ClassAccessorProperty" !== node.type) return false;
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isAnyTypeAnnotation = function(node, opts) {
          return !!node && ("AnyTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isArgumentPlaceholder = function(node, opts) {
          return !!node && ("ArgumentPlaceholder" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isArrayExpression = function(node, opts) {
          return !!node && ("ArrayExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isArrayPattern = function(node, opts) {
          return !!node && ("ArrayPattern" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isArrayTypeAnnotation = function(node, opts) {
          return !!node && ("ArrayTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isArrowFunctionExpression = function(node, opts) {
          return !!node && ("ArrowFunctionExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isAssignmentExpression = function(node, opts) {
          return !!node && ("AssignmentExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isAssignmentPattern = function(node, opts) {
          return !!node && ("AssignmentPattern" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isAwaitExpression = function(node, opts) {
          return !!node && ("AwaitExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isBigIntLiteral = function(node, opts) {
          return !!node && ("BigIntLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isBinary = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "BinaryExpression":
            case "LogicalExpression":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isBinaryExpression = function(node, opts) {
          return !!node && ("BinaryExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isBindExpression = function(node, opts) {
          return !!node && ("BindExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isBlock = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "BlockStatement":
            case "Program":
            case "TSModuleBlock":
              break;
            case "Placeholder":
              if ("BlockStatement" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isBlockParent = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "BlockStatement":
            case "CatchClause":
            case "DoWhileStatement":
            case "ForInStatement":
            case "ForStatement":
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "Program":
            case "ObjectMethod":
            case "SwitchStatement":
            case "WhileStatement":
            case "ArrowFunctionExpression":
            case "ForOfStatement":
            case "ClassMethod":
            case "ClassPrivateMethod":
            case "StaticBlock":
            case "TSModuleBlock":
              break;
            case "Placeholder":
              if ("BlockStatement" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isBlockStatement = function(node, opts) {
          return !!node && ("BlockStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isBooleanLiteral = function(node, opts) {
          return !!node && ("BooleanLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isBooleanLiteralTypeAnnotation = function(node, opts) {
          return !!node && ("BooleanLiteralTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isBooleanTypeAnnotation = function(node, opts) {
          return !!node && ("BooleanTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isBreakStatement = function(node, opts) {
          return !!node && ("BreakStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isCallExpression = function(node, opts) {
          return !!node && ("CallExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isCatchClause = function(node, opts) {
          return !!node && ("CatchClause" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isClass = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ClassExpression":
            case "ClassDeclaration":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isClassAccessorProperty = function(node, opts) {
          return !!node && ("ClassAccessorProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isClassBody = function(node, opts) {
          return !!node && ("ClassBody" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isClassDeclaration = function(node, opts) {
          return !!node && ("ClassDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isClassExpression = function(node, opts) {
          return !!node && ("ClassExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isClassImplements = function(node, opts) {
          return !!node && ("ClassImplements" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isClassMethod = function(node, opts) {
          return !!node && ("ClassMethod" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isClassPrivateMethod = function(node, opts) {
          return !!node && ("ClassPrivateMethod" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isClassPrivateProperty = function(node, opts) {
          return !!node && ("ClassPrivateProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isClassProperty = function(node, opts) {
          return !!node && ("ClassProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isCompletionStatement = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "BreakStatement":
            case "ContinueStatement":
            case "ReturnStatement":
            case "ThrowStatement":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isConditional = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ConditionalExpression":
            case "IfStatement":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isConditionalExpression = function(node, opts) {
          return !!node && ("ConditionalExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isContinueStatement = function(node, opts) {
          return !!node && ("ContinueStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isDebuggerStatement = function(node, opts) {
          return !!node && ("DebuggerStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isDecimalLiteral = function(node, opts) {
          return !!node && ("DecimalLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isDeclaration = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "FunctionDeclaration":
            case "VariableDeclaration":
            case "ClassDeclaration":
            case "ExportAllDeclaration":
            case "ExportDefaultDeclaration":
            case "ExportNamedDeclaration":
            case "ImportDeclaration":
            case "DeclareClass":
            case "DeclareFunction":
            case "DeclareInterface":
            case "DeclareModule":
            case "DeclareModuleExports":
            case "DeclareTypeAlias":
            case "DeclareOpaqueType":
            case "DeclareVariable":
            case "DeclareExportDeclaration":
            case "DeclareExportAllDeclaration":
            case "InterfaceDeclaration":
            case "OpaqueType":
            case "TypeAlias":
            case "EnumDeclaration":
            case "TSDeclareFunction":
            case "TSInterfaceDeclaration":
            case "TSTypeAliasDeclaration":
            case "TSEnumDeclaration":
            case "TSModuleDeclaration":
              break;
            case "Placeholder":
              if ("Declaration" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isDeclareClass = function(node, opts) {
          return !!node && ("DeclareClass" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isDeclareExportAllDeclaration = function(node, opts) {
          return !!node && ("DeclareExportAllDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isDeclareExportDeclaration = function(node, opts) {
          return !!node && ("DeclareExportDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isDeclareFunction = function(node, opts) {
          return !!node && ("DeclareFunction" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isDeclareInterface = function(node, opts) {
          return !!node && ("DeclareInterface" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isDeclareModule = function(node, opts) {
          return !!node && ("DeclareModule" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isDeclareModuleExports = function(node, opts) {
          return !!node && ("DeclareModuleExports" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isDeclareOpaqueType = function(node, opts) {
          return !!node && ("DeclareOpaqueType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isDeclareTypeAlias = function(node, opts) {
          return !!node && ("DeclareTypeAlias" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isDeclareVariable = function(node, opts) {
          return !!node && ("DeclareVariable" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isDeclaredPredicate = function(node, opts) {
          return !!node && ("DeclaredPredicate" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isDecorator = function(node, opts) {
          return !!node && ("Decorator" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isDirective = function(node, opts) {
          return !!node && ("Directive" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isDirectiveLiteral = function(node, opts) {
          return !!node && ("DirectiveLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isDoExpression = function(node, opts) {
          return !!node && ("DoExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isDoWhileStatement = function(node, opts) {
          return !!node && ("DoWhileStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isEmptyStatement = function(node, opts) {
          return !!node && ("EmptyStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isEmptyTypeAnnotation = function(node, opts) {
          return !!node && ("EmptyTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isEnumBody = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "EnumBooleanBody":
            case "EnumNumberBody":
            case "EnumStringBody":
            case "EnumSymbolBody":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isEnumBooleanBody = function(node, opts) {
          return !!node && ("EnumBooleanBody" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isEnumBooleanMember = function(node, opts) {
          return !!node && ("EnumBooleanMember" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isEnumDeclaration = function(node, opts) {
          return !!node && ("EnumDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isEnumDefaultedMember = function(node, opts) {
          return !!node && ("EnumDefaultedMember" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isEnumMember = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "EnumBooleanMember":
            case "EnumNumberMember":
            case "EnumStringMember":
            case "EnumDefaultedMember":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isEnumNumberBody = function(node, opts) {
          return !!node && ("EnumNumberBody" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isEnumNumberMember = function(node, opts) {
          return !!node && ("EnumNumberMember" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isEnumStringBody = function(node, opts) {
          return !!node && ("EnumStringBody" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isEnumStringMember = function(node, opts) {
          return !!node && ("EnumStringMember" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isEnumSymbolBody = function(node, opts) {
          return !!node && ("EnumSymbolBody" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isExistsTypeAnnotation = function(node, opts) {
          return !!node && ("ExistsTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isExportAllDeclaration = function(node, opts) {
          return !!node && ("ExportAllDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isExportDeclaration = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ExportAllDeclaration":
            case "ExportDefaultDeclaration":
            case "ExportNamedDeclaration":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isExportDefaultDeclaration = function(node, opts) {
          return !!node && ("ExportDefaultDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isExportDefaultSpecifier = function(node, opts) {
          return !!node && ("ExportDefaultSpecifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isExportNamedDeclaration = function(node, opts) {
          return !!node && ("ExportNamedDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isExportNamespaceSpecifier = function(node, opts) {
          return !!node && ("ExportNamespaceSpecifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isExportSpecifier = function(node, opts) {
          return !!node && ("ExportSpecifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isExpression = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ArrayExpression":
            case "AssignmentExpression":
            case "BinaryExpression":
            case "CallExpression":
            case "ConditionalExpression":
            case "FunctionExpression":
            case "Identifier":
            case "StringLiteral":
            case "NumericLiteral":
            case "NullLiteral":
            case "BooleanLiteral":
            case "RegExpLiteral":
            case "LogicalExpression":
            case "MemberExpression":
            case "NewExpression":
            case "ObjectExpression":
            case "SequenceExpression":
            case "ParenthesizedExpression":
            case "ThisExpression":
            case "UnaryExpression":
            case "UpdateExpression":
            case "ArrowFunctionExpression":
            case "ClassExpression":
            case "ImportExpression":
            case "MetaProperty":
            case "Super":
            case "TaggedTemplateExpression":
            case "TemplateLiteral":
            case "YieldExpression":
            case "AwaitExpression":
            case "Import":
            case "BigIntLiteral":
            case "OptionalMemberExpression":
            case "OptionalCallExpression":
            case "TypeCastExpression":
            case "JSXElement":
            case "JSXFragment":
            case "BindExpression":
            case "DoExpression":
            case "RecordExpression":
            case "TupleExpression":
            case "DecimalLiteral":
            case "ModuleExpression":
            case "TopicReference":
            case "PipelineTopicExpression":
            case "PipelineBareFunction":
            case "PipelinePrimaryTopicReference":
            case "TSInstantiationExpression":
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSTypeAssertion":
            case "TSNonNullExpression":
              break;
            case "Placeholder":
              switch (node.expectedNode) {
                case "Expression":
                case "Identifier":
                case "StringLiteral":
                  break;
                default:
                  return false;
              }
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isExpressionStatement = function(node, opts) {
          return !!node && ("ExpressionStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isExpressionWrapper = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ExpressionStatement":
            case "ParenthesizedExpression":
            case "TypeCastExpression":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isFile = function(node, opts) {
          return !!node && ("File" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isFlow = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "AnyTypeAnnotation":
            case "ArrayTypeAnnotation":
            case "BooleanTypeAnnotation":
            case "BooleanLiteralTypeAnnotation":
            case "NullLiteralTypeAnnotation":
            case "ClassImplements":
            case "DeclareClass":
            case "DeclareFunction":
            case "DeclareInterface":
            case "DeclareModule":
            case "DeclareModuleExports":
            case "DeclareTypeAlias":
            case "DeclareOpaqueType":
            case "DeclareVariable":
            case "DeclareExportDeclaration":
            case "DeclareExportAllDeclaration":
            case "DeclaredPredicate":
            case "ExistsTypeAnnotation":
            case "FunctionTypeAnnotation":
            case "FunctionTypeParam":
            case "GenericTypeAnnotation":
            case "InferredPredicate":
            case "InterfaceExtends":
            case "InterfaceDeclaration":
            case "InterfaceTypeAnnotation":
            case "IntersectionTypeAnnotation":
            case "MixedTypeAnnotation":
            case "EmptyTypeAnnotation":
            case "NullableTypeAnnotation":
            case "NumberLiteralTypeAnnotation":
            case "NumberTypeAnnotation":
            case "ObjectTypeAnnotation":
            case "ObjectTypeInternalSlot":
            case "ObjectTypeCallProperty":
            case "ObjectTypeIndexer":
            case "ObjectTypeProperty":
            case "ObjectTypeSpreadProperty":
            case "OpaqueType":
            case "QualifiedTypeIdentifier":
            case "StringLiteralTypeAnnotation":
            case "StringTypeAnnotation":
            case "SymbolTypeAnnotation":
            case "ThisTypeAnnotation":
            case "TupleTypeAnnotation":
            case "TypeofTypeAnnotation":
            case "TypeAlias":
            case "TypeAnnotation":
            case "TypeCastExpression":
            case "TypeParameter":
            case "TypeParameterDeclaration":
            case "TypeParameterInstantiation":
            case "UnionTypeAnnotation":
            case "Variance":
            case "VoidTypeAnnotation":
            case "EnumDeclaration":
            case "EnumBooleanBody":
            case "EnumNumberBody":
            case "EnumStringBody":
            case "EnumSymbolBody":
            case "EnumBooleanMember":
            case "EnumNumberMember":
            case "EnumStringMember":
            case "EnumDefaultedMember":
            case "IndexedAccessType":
            case "OptionalIndexedAccessType":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isFlowBaseAnnotation = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "AnyTypeAnnotation":
            case "BooleanTypeAnnotation":
            case "NullLiteralTypeAnnotation":
            case "MixedTypeAnnotation":
            case "EmptyTypeAnnotation":
            case "NumberTypeAnnotation":
            case "StringTypeAnnotation":
            case "SymbolTypeAnnotation":
            case "ThisTypeAnnotation":
            case "VoidTypeAnnotation":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isFlowDeclaration = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "DeclareClass":
            case "DeclareFunction":
            case "DeclareInterface":
            case "DeclareModule":
            case "DeclareModuleExports":
            case "DeclareTypeAlias":
            case "DeclareOpaqueType":
            case "DeclareVariable":
            case "DeclareExportDeclaration":
            case "DeclareExportAllDeclaration":
            case "InterfaceDeclaration":
            case "OpaqueType":
            case "TypeAlias":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isFlowPredicate = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "DeclaredPredicate":
            case "InferredPredicate":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isFlowType = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "AnyTypeAnnotation":
            case "ArrayTypeAnnotation":
            case "BooleanTypeAnnotation":
            case "BooleanLiteralTypeAnnotation":
            case "NullLiteralTypeAnnotation":
            case "ExistsTypeAnnotation":
            case "FunctionTypeAnnotation":
            case "GenericTypeAnnotation":
            case "InterfaceTypeAnnotation":
            case "IntersectionTypeAnnotation":
            case "MixedTypeAnnotation":
            case "EmptyTypeAnnotation":
            case "NullableTypeAnnotation":
            case "NumberLiteralTypeAnnotation":
            case "NumberTypeAnnotation":
            case "ObjectTypeAnnotation":
            case "StringLiteralTypeAnnotation":
            case "StringTypeAnnotation":
            case "SymbolTypeAnnotation":
            case "ThisTypeAnnotation":
            case "TupleTypeAnnotation":
            case "TypeofTypeAnnotation":
            case "UnionTypeAnnotation":
            case "VoidTypeAnnotation":
            case "IndexedAccessType":
            case "OptionalIndexedAccessType":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isFor = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ForInStatement":
            case "ForStatement":
            case "ForOfStatement":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isForInStatement = function(node, opts) {
          return !!node && ("ForInStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isForOfStatement = function(node, opts) {
          return !!node && ("ForOfStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isForStatement = function(node, opts) {
          return !!node && ("ForStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isForXStatement = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ForInStatement":
            case "ForOfStatement":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isFunction = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "ObjectMethod":
            case "ArrowFunctionExpression":
            case "ClassMethod":
            case "ClassPrivateMethod":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isFunctionDeclaration = function(node, opts) {
          return !!node && ("FunctionDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isFunctionExpression = function(node, opts) {
          return !!node && ("FunctionExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isFunctionParent = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "ObjectMethod":
            case "ArrowFunctionExpression":
            case "ClassMethod":
            case "ClassPrivateMethod":
            case "StaticBlock":
            case "TSModuleBlock":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isFunctionTypeAnnotation = function(node, opts) {
          return !!node && ("FunctionTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isFunctionTypeParam = function(node, opts) {
          return !!node && ("FunctionTypeParam" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isGenericTypeAnnotation = function(node, opts) {
          return !!node && ("GenericTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isIdentifier = function(node, opts) {
          return !!node && ("Identifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isIfStatement = function(node, opts) {
          return !!node && ("IfStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isImmutable = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "StringLiteral":
            case "NumericLiteral":
            case "NullLiteral":
            case "BooleanLiteral":
            case "BigIntLiteral":
            case "JSXAttribute":
            case "JSXClosingElement":
            case "JSXElement":
            case "JSXExpressionContainer":
            case "JSXSpreadChild":
            case "JSXOpeningElement":
            case "JSXText":
            case "JSXFragment":
            case "JSXOpeningFragment":
            case "JSXClosingFragment":
            case "DecimalLiteral":
              break;
            case "Placeholder":
              if ("StringLiteral" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isImport = function(node, opts) {
          return !!node && ("Import" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isImportAttribute = function(node, opts) {
          return !!node && ("ImportAttribute" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isImportDeclaration = function(node, opts) {
          return !!node && ("ImportDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isImportDefaultSpecifier = function(node, opts) {
          return !!node && ("ImportDefaultSpecifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isImportExpression = function(node, opts) {
          return !!node && ("ImportExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isImportNamespaceSpecifier = function(node, opts) {
          return !!node && ("ImportNamespaceSpecifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isImportOrExportDeclaration = isImportOrExportDeclaration, exports2.isImportSpecifier = function(node, opts) {
          return !!node && ("ImportSpecifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isIndexedAccessType = function(node, opts) {
          return !!node && ("IndexedAccessType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isInferredPredicate = function(node, opts) {
          return !!node && ("InferredPredicate" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isInterfaceDeclaration = function(node, opts) {
          return !!node && ("InterfaceDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isInterfaceExtends = function(node, opts) {
          return !!node && ("InterfaceExtends" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isInterfaceTypeAnnotation = function(node, opts) {
          return !!node && ("InterfaceTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isInterpreterDirective = function(node, opts) {
          return !!node && ("InterpreterDirective" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isIntersectionTypeAnnotation = function(node, opts) {
          return !!node && ("IntersectionTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isJSX = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "JSXAttribute":
            case "JSXClosingElement":
            case "JSXElement":
            case "JSXEmptyExpression":
            case "JSXExpressionContainer":
            case "JSXSpreadChild":
            case "JSXIdentifier":
            case "JSXMemberExpression":
            case "JSXNamespacedName":
            case "JSXOpeningElement":
            case "JSXSpreadAttribute":
            case "JSXText":
            case "JSXFragment":
            case "JSXOpeningFragment":
            case "JSXClosingFragment":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isJSXAttribute = function(node, opts) {
          return !!node && ("JSXAttribute" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isJSXClosingElement = function(node, opts) {
          return !!node && ("JSXClosingElement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isJSXClosingFragment = function(node, opts) {
          return !!node && ("JSXClosingFragment" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isJSXElement = function(node, opts) {
          return !!node && ("JSXElement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isJSXEmptyExpression = function(node, opts) {
          return !!node && ("JSXEmptyExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isJSXExpressionContainer = function(node, opts) {
          return !!node && ("JSXExpressionContainer" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isJSXFragment = function(node, opts) {
          return !!node && ("JSXFragment" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isJSXIdentifier = function(node, opts) {
          return !!node && ("JSXIdentifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isJSXMemberExpression = function(node, opts) {
          return !!node && ("JSXMemberExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isJSXNamespacedName = function(node, opts) {
          return !!node && ("JSXNamespacedName" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isJSXOpeningElement = function(node, opts) {
          return !!node && ("JSXOpeningElement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isJSXOpeningFragment = function(node, opts) {
          return !!node && ("JSXOpeningFragment" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isJSXSpreadAttribute = function(node, opts) {
          return !!node && ("JSXSpreadAttribute" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isJSXSpreadChild = function(node, opts) {
          return !!node && ("JSXSpreadChild" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isJSXText = function(node, opts) {
          return !!node && ("JSXText" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isLVal = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "Identifier":
            case "MemberExpression":
            case "RestElement":
            case "AssignmentPattern":
            case "ArrayPattern":
            case "ObjectPattern":
            case "TSParameterProperty":
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSTypeAssertion":
            case "TSNonNullExpression":
              break;
            case "Placeholder":
              switch (node.expectedNode) {
                case "Pattern":
                case "Identifier":
                  break;
                default:
                  return false;
              }
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isLabeledStatement = function(node, opts) {
          return !!node && ("LabeledStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isLiteral = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "StringLiteral":
            case "NumericLiteral":
            case "NullLiteral":
            case "BooleanLiteral":
            case "RegExpLiteral":
            case "TemplateLiteral":
            case "BigIntLiteral":
            case "DecimalLiteral":
              break;
            case "Placeholder":
              if ("StringLiteral" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isLogicalExpression = function(node, opts) {
          return !!node && ("LogicalExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isLoop = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "DoWhileStatement":
            case "ForInStatement":
            case "ForStatement":
            case "WhileStatement":
            case "ForOfStatement":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isMemberExpression = function(node, opts) {
          return !!node && ("MemberExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isMetaProperty = function(node, opts) {
          return !!node && ("MetaProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isMethod = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ObjectMethod":
            case "ClassMethod":
            case "ClassPrivateMethod":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isMiscellaneous = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "Noop":
            case "Placeholder":
            case "V8IntrinsicIdentifier":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isMixedTypeAnnotation = function(node, opts) {
          return !!node && ("MixedTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isModuleDeclaration = function(node, opts) {
          return (0, _deprecationWarning.default)("isModuleDeclaration", "isImportOrExportDeclaration"), isImportOrExportDeclaration(node, opts);
        }, exports2.isModuleExpression = function(node, opts) {
          return !!node && ("ModuleExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isModuleSpecifier = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ExportSpecifier":
            case "ImportDefaultSpecifier":
            case "ImportNamespaceSpecifier":
            case "ImportSpecifier":
            case "ExportNamespaceSpecifier":
            case "ExportDefaultSpecifier":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isNewExpression = function(node, opts) {
          return !!node && ("NewExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isNoop = function(node, opts) {
          return !!node && ("Noop" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isNullLiteral = function(node, opts) {
          return !!node && ("NullLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isNullLiteralTypeAnnotation = function(node, opts) {
          return !!node && ("NullLiteralTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isNullableTypeAnnotation = function(node, opts) {
          return !!node && ("NullableTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isNumberLiteral = function(node, opts) {
          return (0, _deprecationWarning.default)("isNumberLiteral", "isNumericLiteral"), !!node && ("NumberLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isNumberLiteralTypeAnnotation = function(node, opts) {
          return !!node && ("NumberLiteralTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isNumberTypeAnnotation = function(node, opts) {
          return !!node && ("NumberTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isNumericLiteral = function(node, opts) {
          return !!node && ("NumericLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isObjectExpression = function(node, opts) {
          return !!node && ("ObjectExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isObjectMember = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ObjectMethod":
            case "ObjectProperty":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isObjectMethod = function(node, opts) {
          return !!node && ("ObjectMethod" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isObjectPattern = function(node, opts) {
          return !!node && ("ObjectPattern" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isObjectProperty = function(node, opts) {
          return !!node && ("ObjectProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isObjectTypeAnnotation = function(node, opts) {
          return !!node && ("ObjectTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isObjectTypeCallProperty = function(node, opts) {
          return !!node && ("ObjectTypeCallProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isObjectTypeIndexer = function(node, opts) {
          return !!node && ("ObjectTypeIndexer" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isObjectTypeInternalSlot = function(node, opts) {
          return !!node && ("ObjectTypeInternalSlot" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isObjectTypeProperty = function(node, opts) {
          return !!node && ("ObjectTypeProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isObjectTypeSpreadProperty = function(node, opts) {
          return !!node && ("ObjectTypeSpreadProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isOpaqueType = function(node, opts) {
          return !!node && ("OpaqueType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isOptionalCallExpression = function(node, opts) {
          return !!node && ("OptionalCallExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isOptionalIndexedAccessType = function(node, opts) {
          return !!node && ("OptionalIndexedAccessType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isOptionalMemberExpression = function(node, opts) {
          return !!node && ("OptionalMemberExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isParenthesizedExpression = function(node, opts) {
          return !!node && ("ParenthesizedExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isPattern = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "AssignmentPattern":
            case "ArrayPattern":
            case "ObjectPattern":
              break;
            case "Placeholder":
              if ("Pattern" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isPatternLike = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "Identifier":
            case "RestElement":
            case "AssignmentPattern":
            case "ArrayPattern":
            case "ObjectPattern":
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSTypeAssertion":
            case "TSNonNullExpression":
              break;
            case "Placeholder":
              switch (node.expectedNode) {
                case "Pattern":
                case "Identifier":
                  break;
                default:
                  return false;
              }
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isPipelineBareFunction = function(node, opts) {
          return !!node && ("PipelineBareFunction" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isPipelinePrimaryTopicReference = function(node, opts) {
          return !!node && ("PipelinePrimaryTopicReference" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isPipelineTopicExpression = function(node, opts) {
          return !!node && ("PipelineTopicExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isPlaceholder = function(node, opts) {
          return !!node && ("Placeholder" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isPrivate = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ClassPrivateProperty":
            case "ClassPrivateMethod":
            case "PrivateName":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isPrivateName = function(node, opts) {
          return !!node && ("PrivateName" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isProgram = function(node, opts) {
          return !!node && ("Program" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isProperty = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ObjectProperty":
            case "ClassProperty":
            case "ClassAccessorProperty":
            case "ClassPrivateProperty":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isPureish = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "StringLiteral":
            case "NumericLiteral":
            case "NullLiteral":
            case "BooleanLiteral":
            case "RegExpLiteral":
            case "ArrowFunctionExpression":
            case "BigIntLiteral":
            case "DecimalLiteral":
              break;
            case "Placeholder":
              if ("StringLiteral" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isQualifiedTypeIdentifier = function(node, opts) {
          return !!node && ("QualifiedTypeIdentifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isRecordExpression = function(node, opts) {
          return !!node && ("RecordExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isRegExpLiteral = function(node, opts) {
          return !!node && ("RegExpLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isRegexLiteral = function(node, opts) {
          return (0, _deprecationWarning.default)("isRegexLiteral", "isRegExpLiteral"), !!node && ("RegexLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isRestElement = function(node, opts) {
          return !!node && ("RestElement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isRestProperty = function(node, opts) {
          return (0, _deprecationWarning.default)("isRestProperty", "isRestElement"), !!node && ("RestProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isReturnStatement = function(node, opts) {
          return !!node && ("ReturnStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isScopable = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "BlockStatement":
            case "CatchClause":
            case "DoWhileStatement":
            case "ForInStatement":
            case "ForStatement":
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "Program":
            case "ObjectMethod":
            case "SwitchStatement":
            case "WhileStatement":
            case "ArrowFunctionExpression":
            case "ClassExpression":
            case "ClassDeclaration":
            case "ForOfStatement":
            case "ClassMethod":
            case "ClassPrivateMethod":
            case "StaticBlock":
            case "TSModuleBlock":
              break;
            case "Placeholder":
              if ("BlockStatement" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isSequenceExpression = function(node, opts) {
          return !!node && ("SequenceExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isSpreadElement = function(node, opts) {
          return !!node && ("SpreadElement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isSpreadProperty = function(node, opts) {
          return (0, _deprecationWarning.default)("isSpreadProperty", "isSpreadElement"), !!node && ("SpreadProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isStandardized = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ArrayExpression":
            case "AssignmentExpression":
            case "BinaryExpression":
            case "InterpreterDirective":
            case "Directive":
            case "DirectiveLiteral":
            case "BlockStatement":
            case "BreakStatement":
            case "CallExpression":
            case "CatchClause":
            case "ConditionalExpression":
            case "ContinueStatement":
            case "DebuggerStatement":
            case "DoWhileStatement":
            case "EmptyStatement":
            case "ExpressionStatement":
            case "File":
            case "ForInStatement":
            case "ForStatement":
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "Identifier":
            case "IfStatement":
            case "LabeledStatement":
            case "StringLiteral":
            case "NumericLiteral":
            case "NullLiteral":
            case "BooleanLiteral":
            case "RegExpLiteral":
            case "LogicalExpression":
            case "MemberExpression":
            case "NewExpression":
            case "Program":
            case "ObjectExpression":
            case "ObjectMethod":
            case "ObjectProperty":
            case "RestElement":
            case "ReturnStatement":
            case "SequenceExpression":
            case "ParenthesizedExpression":
            case "SwitchCase":
            case "SwitchStatement":
            case "ThisExpression":
            case "ThrowStatement":
            case "TryStatement":
            case "UnaryExpression":
            case "UpdateExpression":
            case "VariableDeclaration":
            case "VariableDeclarator":
            case "WhileStatement":
            case "WithStatement":
            case "AssignmentPattern":
            case "ArrayPattern":
            case "ArrowFunctionExpression":
            case "ClassBody":
            case "ClassExpression":
            case "ClassDeclaration":
            case "ExportAllDeclaration":
            case "ExportDefaultDeclaration":
            case "ExportNamedDeclaration":
            case "ExportSpecifier":
            case "ForOfStatement":
            case "ImportDeclaration":
            case "ImportDefaultSpecifier":
            case "ImportNamespaceSpecifier":
            case "ImportSpecifier":
            case "ImportExpression":
            case "MetaProperty":
            case "ClassMethod":
            case "ObjectPattern":
            case "SpreadElement":
            case "Super":
            case "TaggedTemplateExpression":
            case "TemplateElement":
            case "TemplateLiteral":
            case "YieldExpression":
            case "AwaitExpression":
            case "Import":
            case "BigIntLiteral":
            case "ExportNamespaceSpecifier":
            case "OptionalMemberExpression":
            case "OptionalCallExpression":
            case "ClassProperty":
            case "ClassAccessorProperty":
            case "ClassPrivateProperty":
            case "ClassPrivateMethod":
            case "PrivateName":
            case "StaticBlock":
              break;
            case "Placeholder":
              switch (node.expectedNode) {
                case "Identifier":
                case "StringLiteral":
                case "BlockStatement":
                case "ClassBody":
                  break;
                default:
                  return false;
              }
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isStatement = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "BlockStatement":
            case "BreakStatement":
            case "ContinueStatement":
            case "DebuggerStatement":
            case "DoWhileStatement":
            case "EmptyStatement":
            case "ExpressionStatement":
            case "ForInStatement":
            case "ForStatement":
            case "FunctionDeclaration":
            case "IfStatement":
            case "LabeledStatement":
            case "ReturnStatement":
            case "SwitchStatement":
            case "ThrowStatement":
            case "TryStatement":
            case "VariableDeclaration":
            case "WhileStatement":
            case "WithStatement":
            case "ClassDeclaration":
            case "ExportAllDeclaration":
            case "ExportDefaultDeclaration":
            case "ExportNamedDeclaration":
            case "ForOfStatement":
            case "ImportDeclaration":
            case "DeclareClass":
            case "DeclareFunction":
            case "DeclareInterface":
            case "DeclareModule":
            case "DeclareModuleExports":
            case "DeclareTypeAlias":
            case "DeclareOpaqueType":
            case "DeclareVariable":
            case "DeclareExportDeclaration":
            case "DeclareExportAllDeclaration":
            case "InterfaceDeclaration":
            case "OpaqueType":
            case "TypeAlias":
            case "EnumDeclaration":
            case "TSDeclareFunction":
            case "TSInterfaceDeclaration":
            case "TSTypeAliasDeclaration":
            case "TSEnumDeclaration":
            case "TSModuleDeclaration":
            case "TSImportEqualsDeclaration":
            case "TSExportAssignment":
            case "TSNamespaceExportDeclaration":
              break;
            case "Placeholder":
              switch (node.expectedNode) {
                case "Statement":
                case "Declaration":
                case "BlockStatement":
                  break;
                default:
                  return false;
              }
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isStaticBlock = function(node, opts) {
          return !!node && ("StaticBlock" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isStringLiteral = function(node, opts) {
          return !!node && ("StringLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isStringLiteralTypeAnnotation = function(node, opts) {
          return !!node && ("StringLiteralTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isStringTypeAnnotation = function(node, opts) {
          return !!node && ("StringTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isSuper = function(node, opts) {
          return !!node && ("Super" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isSwitchCase = function(node, opts) {
          return !!node && ("SwitchCase" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isSwitchStatement = function(node, opts) {
          return !!node && ("SwitchStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isSymbolTypeAnnotation = function(node, opts) {
          return !!node && ("SymbolTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSAnyKeyword = function(node, opts) {
          return !!node && ("TSAnyKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSArrayType = function(node, opts) {
          return !!node && ("TSArrayType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSAsExpression = function(node, opts) {
          return !!node && ("TSAsExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSBaseType = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "TSAnyKeyword":
            case "TSBooleanKeyword":
            case "TSBigIntKeyword":
            case "TSIntrinsicKeyword":
            case "TSNeverKeyword":
            case "TSNullKeyword":
            case "TSNumberKeyword":
            case "TSObjectKeyword":
            case "TSStringKeyword":
            case "TSSymbolKeyword":
            case "TSUndefinedKeyword":
            case "TSUnknownKeyword":
            case "TSVoidKeyword":
            case "TSThisType":
            case "TSLiteralType":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isTSBigIntKeyword = function(node, opts) {
          return !!node && ("TSBigIntKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSBooleanKeyword = function(node, opts) {
          return !!node && ("TSBooleanKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSCallSignatureDeclaration = function(node, opts) {
          return !!node && ("TSCallSignatureDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSConditionalType = function(node, opts) {
          return !!node && ("TSConditionalType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSConstructSignatureDeclaration = function(node, opts) {
          return !!node && ("TSConstructSignatureDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSConstructorType = function(node, opts) {
          return !!node && ("TSConstructorType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSDeclareFunction = function(node, opts) {
          return !!node && ("TSDeclareFunction" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSDeclareMethod = function(node, opts) {
          return !!node && ("TSDeclareMethod" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSEntityName = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "Identifier":
            case "TSQualifiedName":
              break;
            case "Placeholder":
              if ("Identifier" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isTSEnumDeclaration = function(node, opts) {
          return !!node && ("TSEnumDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSEnumMember = function(node, opts) {
          return !!node && ("TSEnumMember" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSExportAssignment = function(node, opts) {
          return !!node && ("TSExportAssignment" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSExpressionWithTypeArguments = function(node, opts) {
          return !!node && ("TSExpressionWithTypeArguments" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSExternalModuleReference = function(node, opts) {
          return !!node && ("TSExternalModuleReference" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSFunctionType = function(node, opts) {
          return !!node && ("TSFunctionType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSImportEqualsDeclaration = function(node, opts) {
          return !!node && ("TSImportEqualsDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSImportType = function(node, opts) {
          return !!node && ("TSImportType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSIndexSignature = function(node, opts) {
          return !!node && ("TSIndexSignature" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSIndexedAccessType = function(node, opts) {
          return !!node && ("TSIndexedAccessType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSInferType = function(node, opts) {
          return !!node && ("TSInferType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSInstantiationExpression = function(node, opts) {
          return !!node && ("TSInstantiationExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSInterfaceBody = function(node, opts) {
          return !!node && ("TSInterfaceBody" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSInterfaceDeclaration = function(node, opts) {
          return !!node && ("TSInterfaceDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSIntersectionType = function(node, opts) {
          return !!node && ("TSIntersectionType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSIntrinsicKeyword = function(node, opts) {
          return !!node && ("TSIntrinsicKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSLiteralType = function(node, opts) {
          return !!node && ("TSLiteralType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSMappedType = function(node, opts) {
          return !!node && ("TSMappedType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSMethodSignature = function(node, opts) {
          return !!node && ("TSMethodSignature" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSModuleBlock = function(node, opts) {
          return !!node && ("TSModuleBlock" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSModuleDeclaration = function(node, opts) {
          return !!node && ("TSModuleDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSNamedTupleMember = function(node, opts) {
          return !!node && ("TSNamedTupleMember" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSNamespaceExportDeclaration = function(node, opts) {
          return !!node && ("TSNamespaceExportDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSNeverKeyword = function(node, opts) {
          return !!node && ("TSNeverKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSNonNullExpression = function(node, opts) {
          return !!node && ("TSNonNullExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSNullKeyword = function(node, opts) {
          return !!node && ("TSNullKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSNumberKeyword = function(node, opts) {
          return !!node && ("TSNumberKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSObjectKeyword = function(node, opts) {
          return !!node && ("TSObjectKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSOptionalType = function(node, opts) {
          return !!node && ("TSOptionalType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSParameterProperty = function(node, opts) {
          return !!node && ("TSParameterProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSParenthesizedType = function(node, opts) {
          return !!node && ("TSParenthesizedType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSPropertySignature = function(node, opts) {
          return !!node && ("TSPropertySignature" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSQualifiedName = function(node, opts) {
          return !!node && ("TSQualifiedName" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSRestType = function(node, opts) {
          return !!node && ("TSRestType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSSatisfiesExpression = function(node, opts) {
          return !!node && ("TSSatisfiesExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSStringKeyword = function(node, opts) {
          return !!node && ("TSStringKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSSymbolKeyword = function(node, opts) {
          return !!node && ("TSSymbolKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSThisType = function(node, opts) {
          return !!node && ("TSThisType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSTupleType = function(node, opts) {
          return !!node && ("TSTupleType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSType = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "TSAnyKeyword":
            case "TSBooleanKeyword":
            case "TSBigIntKeyword":
            case "TSIntrinsicKeyword":
            case "TSNeverKeyword":
            case "TSNullKeyword":
            case "TSNumberKeyword":
            case "TSObjectKeyword":
            case "TSStringKeyword":
            case "TSSymbolKeyword":
            case "TSUndefinedKeyword":
            case "TSUnknownKeyword":
            case "TSVoidKeyword":
            case "TSThisType":
            case "TSFunctionType":
            case "TSConstructorType":
            case "TSTypeReference":
            case "TSTypePredicate":
            case "TSTypeQuery":
            case "TSTypeLiteral":
            case "TSArrayType":
            case "TSTupleType":
            case "TSOptionalType":
            case "TSRestType":
            case "TSUnionType":
            case "TSIntersectionType":
            case "TSConditionalType":
            case "TSInferType":
            case "TSParenthesizedType":
            case "TSTypeOperator":
            case "TSIndexedAccessType":
            case "TSMappedType":
            case "TSLiteralType":
            case "TSExpressionWithTypeArguments":
            case "TSImportType":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isTSTypeAliasDeclaration = function(node, opts) {
          return !!node && ("TSTypeAliasDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSTypeAnnotation = function(node, opts) {
          return !!node && ("TSTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSTypeAssertion = function(node, opts) {
          return !!node && ("TSTypeAssertion" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSTypeElement = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "TSCallSignatureDeclaration":
            case "TSConstructSignatureDeclaration":
            case "TSPropertySignature":
            case "TSMethodSignature":
            case "TSIndexSignature":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isTSTypeLiteral = function(node, opts) {
          return !!node && ("TSTypeLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSTypeOperator = function(node, opts) {
          return !!node && ("TSTypeOperator" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSTypeParameter = function(node, opts) {
          return !!node && ("TSTypeParameter" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSTypeParameterDeclaration = function(node, opts) {
          return !!node && ("TSTypeParameterDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSTypeParameterInstantiation = function(node, opts) {
          return !!node && ("TSTypeParameterInstantiation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSTypePredicate = function(node, opts) {
          return !!node && ("TSTypePredicate" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSTypeQuery = function(node, opts) {
          return !!node && ("TSTypeQuery" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSTypeReference = function(node, opts) {
          return !!node && ("TSTypeReference" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSUndefinedKeyword = function(node, opts) {
          return !!node && ("TSUndefinedKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSUnionType = function(node, opts) {
          return !!node && ("TSUnionType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSUnknownKeyword = function(node, opts) {
          return !!node && ("TSUnknownKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTSVoidKeyword = function(node, opts) {
          return !!node && ("TSVoidKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTaggedTemplateExpression = function(node, opts) {
          return !!node && ("TaggedTemplateExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTemplateElement = function(node, opts) {
          return !!node && ("TemplateElement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTemplateLiteral = function(node, opts) {
          return !!node && ("TemplateLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTerminatorless = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "BreakStatement":
            case "ContinueStatement":
            case "ReturnStatement":
            case "ThrowStatement":
            case "YieldExpression":
            case "AwaitExpression":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isThisExpression = function(node, opts) {
          return !!node && ("ThisExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isThisTypeAnnotation = function(node, opts) {
          return !!node && ("ThisTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isThrowStatement = function(node, opts) {
          return !!node && ("ThrowStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTopicReference = function(node, opts) {
          return !!node && ("TopicReference" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTryStatement = function(node, opts) {
          return !!node && ("TryStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTupleExpression = function(node, opts) {
          return !!node && ("TupleExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTupleTypeAnnotation = function(node, opts) {
          return !!node && ("TupleTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTypeAlias = function(node, opts) {
          return !!node && ("TypeAlias" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTypeAnnotation = function(node, opts) {
          return !!node && ("TypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTypeCastExpression = function(node, opts) {
          return !!node && ("TypeCastExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTypeParameter = function(node, opts) {
          return !!node && ("TypeParameter" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTypeParameterDeclaration = function(node, opts) {
          return !!node && ("TypeParameterDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTypeParameterInstantiation = function(node, opts) {
          return !!node && ("TypeParameterInstantiation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isTypeScript = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "TSParameterProperty":
            case "TSDeclareFunction":
            case "TSDeclareMethod":
            case "TSQualifiedName":
            case "TSCallSignatureDeclaration":
            case "TSConstructSignatureDeclaration":
            case "TSPropertySignature":
            case "TSMethodSignature":
            case "TSIndexSignature":
            case "TSAnyKeyword":
            case "TSBooleanKeyword":
            case "TSBigIntKeyword":
            case "TSIntrinsicKeyword":
            case "TSNeverKeyword":
            case "TSNullKeyword":
            case "TSNumberKeyword":
            case "TSObjectKeyword":
            case "TSStringKeyword":
            case "TSSymbolKeyword":
            case "TSUndefinedKeyword":
            case "TSUnknownKeyword":
            case "TSVoidKeyword":
            case "TSThisType":
            case "TSFunctionType":
            case "TSConstructorType":
            case "TSTypeReference":
            case "TSTypePredicate":
            case "TSTypeQuery":
            case "TSTypeLiteral":
            case "TSArrayType":
            case "TSTupleType":
            case "TSOptionalType":
            case "TSRestType":
            case "TSNamedTupleMember":
            case "TSUnionType":
            case "TSIntersectionType":
            case "TSConditionalType":
            case "TSInferType":
            case "TSParenthesizedType":
            case "TSTypeOperator":
            case "TSIndexedAccessType":
            case "TSMappedType":
            case "TSLiteralType":
            case "TSExpressionWithTypeArguments":
            case "TSInterfaceDeclaration":
            case "TSInterfaceBody":
            case "TSTypeAliasDeclaration":
            case "TSInstantiationExpression":
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSTypeAssertion":
            case "TSEnumDeclaration":
            case "TSEnumMember":
            case "TSModuleDeclaration":
            case "TSModuleBlock":
            case "TSImportType":
            case "TSImportEqualsDeclaration":
            case "TSExternalModuleReference":
            case "TSNonNullExpression":
            case "TSExportAssignment":
            case "TSNamespaceExportDeclaration":
            case "TSTypeAnnotation":
            case "TSTypeParameterInstantiation":
            case "TSTypeParameterDeclaration":
            case "TSTypeParameter":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isTypeofTypeAnnotation = function(node, opts) {
          return !!node && ("TypeofTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isUnaryExpression = function(node, opts) {
          return !!node && ("UnaryExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isUnaryLike = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "UnaryExpression":
            case "SpreadElement":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isUnionTypeAnnotation = function(node, opts) {
          return !!node && ("UnionTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isUpdateExpression = function(node, opts) {
          return !!node && ("UpdateExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isUserWhitespacable = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ObjectMethod":
            case "ObjectProperty":
            case "ObjectTypeInternalSlot":
            case "ObjectTypeCallProperty":
            case "ObjectTypeIndexer":
            case "ObjectTypeProperty":
            case "ObjectTypeSpreadProperty":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isV8IntrinsicIdentifier = function(node, opts) {
          return !!node && ("V8IntrinsicIdentifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isVariableDeclaration = function(node, opts) {
          return !!node && ("VariableDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isVariableDeclarator = function(node, opts) {
          return !!node && ("VariableDeclarator" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isVariance = function(node, opts) {
          return !!node && ("Variance" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isVoidTypeAnnotation = function(node, opts) {
          return !!node && ("VoidTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isWhile = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "DoWhileStatement":
            case "WhileStatement":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports2.isWhileStatement = function(node, opts) {
          return !!node && ("WhileStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isWithStatement = function(node, opts) {
          return !!node && ("WithStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports2.isYieldExpression = function(node, opts) {
          return !!node && ("YieldExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        };
        var _shallowEqual = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/shallowEqual.js"), _deprecationWarning = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/deprecationWarning.js");
        function isImportOrExportDeclaration(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ExportAllDeclaration":
            case "ExportDefaultDeclaration":
            case "ExportNamedDeclaration":
            case "ImportDeclaration":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/is.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(type, node, opts) {
          if (!node) return false;
          if (!(0, _isType.default)(node.type, type)) return !opts && "Placeholder" === node.type && type in _index.FLIPPED_ALIAS_KEYS && (0, _isPlaceholderType.default)(node.expectedNode, type);
          return void 0 === opts || (0, _shallowEqual.default)(node, opts);
        };
        var _shallowEqual = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/shallowEqual.js"), _isType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isType.js"), _isPlaceholderType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isPlaceholderType.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isBinding.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, parent, grandparent) {
          if (grandparent && "Identifier" === node.type && "ObjectProperty" === parent.type && "ObjectExpression" === grandparent.type) return false;
          const keys = _getBindingIdentifiers.default.keys[parent.type];
          if (keys) for (let i2 = 0; i2 < keys.length; i2++) {
            const val = parent[keys[i2]];
            if (Array.isArray(val)) {
              if (val.includes(node)) return true;
            } else if (val === node) return true;
          }
          return false;
        };
        var _getBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isBlockScoped.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return (0, _index.isFunctionDeclaration)(node) || (0, _index.isClassDeclaration)(node) || (0, _isLet.default)(node);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _isLet = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isLet.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isImmutable.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          if ((0, _isType.default)(node.type, "Immutable")) return true;
          if ((0, _index.isIdentifier)(node)) return "undefined" === node.name;
          return false;
        };
        var _isType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isType.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isLet.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return (0, _index.isVariableDeclaration)(node) && ("var" !== node.kind || node[_index2.BLOCK_SCOPED_SYMBOL]);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isNode.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return !(!node || !_index.VISITOR_KEYS[node.type]);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isNodesEquivalent.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function isNodesEquivalent(a2, b2) {
          if ("object" != typeof a2 || "object" != typeof b2 || null == a2 || null == b2) return a2 === b2;
          if (a2.type !== b2.type) return false;
          const fields = Object.keys(_index.NODE_FIELDS[a2.type] || a2.type), visitorKeys = _index.VISITOR_KEYS[a2.type];
          for (const field of fields) {
            const val_a = a2[field], val_b = b2[field];
            if (typeof val_a != typeof val_b) return false;
            if (null != val_a || null != val_b) {
              if (null == val_a || null == val_b) return false;
              if (Array.isArray(val_a)) {
                if (!Array.isArray(val_b)) return false;
                if (val_a.length !== val_b.length) return false;
                for (let i2 = 0; i2 < val_a.length; i2++) if (!isNodesEquivalent(val_a[i2], val_b[i2])) return false;
              } else if ("object" != typeof val_a || null != visitorKeys && visitorKeys.includes(field)) {
                if (!isNodesEquivalent(val_a, val_b)) return false;
              } else for (const key of Object.keys(val_a)) if (val_a[key] !== val_b[key]) return false;
            }
          }
          return true;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isPlaceholderType.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(placeholderType, targetType) {
          if (placeholderType === targetType) return true;
          const aliases = _index.PLACEHOLDERS_ALIAS[placeholderType];
          if (aliases) {
            for (const alias of aliases) if (targetType === alias) return true;
          }
          return false;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isReferenced.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, parent, grandparent) {
          switch (parent.type) {
            case "MemberExpression":
            case "OptionalMemberExpression":
              return parent.property === node ? !!parent.computed : parent.object === node;
            case "JSXMemberExpression":
              return parent.object === node;
            case "VariableDeclarator":
              return parent.init === node;
            case "ArrowFunctionExpression":
              return parent.body === node;
            case "PrivateName":
            case "LabeledStatement":
            case "CatchClause":
            case "RestElement":
            case "BreakStatement":
            case "ContinueStatement":
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "ExportNamespaceSpecifier":
            case "ExportDefaultSpecifier":
            case "ImportDefaultSpecifier":
            case "ImportNamespaceSpecifier":
            case "ImportSpecifier":
            case "ImportAttribute":
            case "JSXAttribute":
            case "ObjectPattern":
            case "ArrayPattern":
            case "MetaProperty":
              return false;
            case "ClassMethod":
            case "ClassPrivateMethod":
            case "ObjectMethod":
              return parent.key === node && !!parent.computed;
            case "ObjectProperty":
              return parent.key === node ? !!parent.computed : !grandparent || "ObjectPattern" !== grandparent.type;
            case "ClassProperty":
            case "ClassAccessorProperty":
            case "TSPropertySignature":
              return parent.key !== node || !!parent.computed;
            case "ClassPrivateProperty":
            case "ObjectTypeProperty":
              return parent.key !== node;
            case "ClassDeclaration":
            case "ClassExpression":
              return parent.superClass === node;
            case "AssignmentExpression":
            case "AssignmentPattern":
              return parent.right === node;
            case "ExportSpecifier":
              return (null == grandparent || !grandparent.source) && parent.local === node;
            case "TSEnumMember":
              return parent.id !== node;
          }
          return true;
        };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isScope.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, parent) {
          if ((0, _index.isBlockStatement)(node) && ((0, _index.isFunction)(parent) || (0, _index.isCatchClause)(parent))) return false;
          if ((0, _index.isPattern)(node) && ((0, _index.isFunction)(parent) || (0, _index.isCatchClause)(parent))) return true;
          return (0, _index.isScopable)(node);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isSpecifierDefault.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(specifier) {
          return (0, _index.isImportDefaultSpecifier)(specifier) || (0, _index.isIdentifier)(specifier.imported || specifier.exported, { name: "default" });
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isType.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(nodeType, targetType) {
          if (nodeType === targetType) return true;
          if (null == nodeType) return false;
          if (_index.ALIAS_KEYS[targetType]) return false;
          const aliases = _index.FLIPPED_ALIAS_KEYS[targetType];
          if (aliases) {
            if (aliases[0] === nodeType) return true;
            for (const alias of aliases) if (nodeType === alias) return true;
          }
          return false;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidES3Identifier.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(name) {
          return (0, _isValidIdentifier.default)(name) && !RESERVED_WORDS_ES3_ONLY.has(name);
        };
        var _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js");
        const RESERVED_WORDS_ES3_ONLY = /* @__PURE__ */ new Set(["abstract", "boolean", "byte", "char", "double", "enum", "final", "float", "goto", "implements", "int", "interface", "long", "native", "package", "private", "protected", "public", "short", "static", "synchronized", "throws", "transient", "volatile"]);
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(name, reserved = true) {
          if ("string" != typeof name) return false;
          if (reserved && ((0, _helperValidatorIdentifier.isKeyword)(name) || (0, _helperValidatorIdentifier.isStrictReservedWord)(name, true))) return false;
          return (0, _helperValidatorIdentifier.isIdentifierName)(name);
        };
        var _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isVar.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return (0, _index.isVariableDeclaration)(node, { kind: "var" }) && !node[_index2.BLOCK_SCOPED_SYMBOL];
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/matchesPattern.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(member, match, allowPartial) {
          if (!(0, _index.isMemberExpression)(member)) return false;
          const parts = Array.isArray(match) ? match : match.split("."), nodes = [];
          let node;
          for (node = member; (0, _index.isMemberExpression)(node); node = node.object) nodes.push(node.property);
          if (nodes.push(node), nodes.length < parts.length) return false;
          if (!allowPartial && nodes.length > parts.length) return false;
          for (let i2 = 0, j2 = nodes.length - 1; i2 < parts.length; i2++, j2--) {
            const node2 = nodes[j2];
            let value2;
            if ((0, _index.isIdentifier)(node2)) value2 = node2.name;
            else if ((0, _index.isStringLiteral)(node2)) value2 = node2.value;
            else {
              if (!(0, _index.isThisExpression)(node2)) return false;
              value2 = "this";
            }
            if (parts[i2] !== value2) return false;
          }
          return true;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/react/isCompatTag.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(tagName) {
          return !!tagName && /^[a-z]/.test(tagName);
        };
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/react/isReactComponent.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        const isReactComponent = (0, __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js").default)("React.Component");
        exports2.default = isReactComponent;
      }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/validate.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, key, val) {
          if (!node) return;
          const fields = _index.NODE_FIELDS[node.type];
          if (!fields) return;
          const field = fields[key];
          validateField(node, key, val, field), validateChild(node, key, val);
        }, exports2.validateChild = validateChild, exports2.validateField = validateField, exports2.validateInternal = function(field, node, key, val, maybeNode) {
          if (null == field || !field.validate) return;
          if (field.optional && null == val) return;
          if (field.validate(node, key, val), maybeNode) {
            var _NODE_PARENT_VALIDATI;
            const type = val.type;
            if (null == type) return;
            null == (_NODE_PARENT_VALIDATI = _index.NODE_PARENT_VALIDATIONS[type]) || _NODE_PARENT_VALIDATI.call(_index.NODE_PARENT_VALIDATIONS, node, key, val);
          }
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
        function validateField(node, key, val, field) {
          null != field && field.validate && (field.optional && null == val || field.validate(node, key, val));
        }
        function validateChild(node, key, val) {
          var _NODE_PARENT_VALIDATI2;
          const type = null == val ? void 0 : val.type;
          null != type && (null == (_NODE_PARENT_VALIDATI2 = _index.NODE_PARENT_VALIDATIONS[type]) || _NODE_PARENT_VALIDATI2.call(_index.NODE_PARENT_VALIDATIONS, node, key, val));
        }
      }, "./node_modules/.pnpm/json5@2.2.3/node_modules/json5/dist/index.mjs": (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        "use strict";
        __webpack_require__2.r(__webpack_exports__2), __webpack_require__2.d(__webpack_exports__2, { default: () => __WEBPACK_DEFAULT_EXPORT__ });
        var unicode = { Space_Separator: /[\u1680\u2000-\u200A\u202F\u205F\u3000]/, ID_Start: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/, ID_Continue: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/ }, util = { isSpaceSeparator: (c5) => "string" == typeof c5 && unicode.Space_Separator.test(c5), isIdStartChar: (c5) => "string" == typeof c5 && (c5 >= "a" && c5 <= "z" || c5 >= "A" && c5 <= "Z" || "$" === c5 || "_" === c5 || unicode.ID_Start.test(c5)), isIdContinueChar: (c5) => "string" == typeof c5 && (c5 >= "a" && c5 <= "z" || c5 >= "A" && c5 <= "Z" || c5 >= "0" && c5 <= "9" || "$" === c5 || "_" === c5 || "\u200C" === c5 || "\u200D" === c5 || unicode.ID_Continue.test(c5)), isDigit: (c5) => "string" == typeof c5 && /[0-9]/.test(c5), isHexDigit: (c5) => "string" == typeof c5 && /[0-9A-Fa-f]/.test(c5) };
        let source, parseState, stack, pos, line, column, token, key, root;
        function internalize(holder, name, reviver) {
          const value2 = holder[name];
          if (null != value2 && "object" == typeof value2) if (Array.isArray(value2)) for (let i2 = 0; i2 < value2.length; i2++) {
            const key2 = String(i2), replacement = internalize(value2, key2, reviver);
            void 0 === replacement ? delete value2[key2] : Object.defineProperty(value2, key2, { value: replacement, writable: true, enumerable: true, configurable: true });
          }
          else for (const key2 in value2) {
            const replacement = internalize(value2, key2, reviver);
            void 0 === replacement ? delete value2[key2] : Object.defineProperty(value2, key2, { value: replacement, writable: true, enumerable: true, configurable: true });
          }
          return reviver.call(holder, name, value2);
        }
        let lexState, buffer, doubleQuote, sign, c4;
        function lex() {
          for (lexState = "default", buffer = "", doubleQuote = false, sign = 1; ; ) {
            c4 = peek();
            const token2 = lexStates[lexState]();
            if (token2) return token2;
          }
        }
        function peek() {
          if (source[pos]) return String.fromCodePoint(source.codePointAt(pos));
        }
        function read() {
          const c5 = peek();
          return "\n" === c5 ? (line++, column = 0) : c5 ? column += c5.length : column++, c5 && (pos += c5.length), c5;
        }
        const lexStates = { default() {
          switch (c4) {
            case "	":
            case "\v":
            case "\f":
            case " ":
            case "\xA0":
            case "\uFEFF":
            case "\n":
            case "\r":
            case "\u2028":
            case "\u2029":
              return void read();
            case "/":
              return read(), void (lexState = "comment");
            case void 0:
              return read(), newToken("eof");
          }
          if (!util.isSpaceSeparator(c4)) return lexStates[parseState]();
          read();
        }, comment() {
          switch (c4) {
            case "*":
              return read(), void (lexState = "multiLineComment");
            case "/":
              return read(), void (lexState = "singleLineComment");
          }
          throw invalidChar(read());
        }, multiLineComment() {
          switch (c4) {
            case "*":
              return read(), void (lexState = "multiLineCommentAsterisk");
            case void 0:
              throw invalidChar(read());
          }
          read();
        }, multiLineCommentAsterisk() {
          switch (c4) {
            case "*":
              return void read();
            case "/":
              return read(), void (lexState = "default");
            case void 0:
              throw invalidChar(read());
          }
          read(), lexState = "multiLineComment";
        }, singleLineComment() {
          switch (c4) {
            case "\n":
            case "\r":
            case "\u2028":
            case "\u2029":
              return read(), void (lexState = "default");
            case void 0:
              return read(), newToken("eof");
          }
          read();
        }, value() {
          switch (c4) {
            case "{":
            case "[":
              return newToken("punctuator", read());
            case "n":
              return read(), literal("ull"), newToken("null", null);
            case "t":
              return read(), literal("rue"), newToken("boolean", true);
            case "f":
              return read(), literal("alse"), newToken("boolean", false);
            case "-":
            case "+":
              return "-" === read() && (sign = -1), void (lexState = "sign");
            case ".":
              return buffer = read(), void (lexState = "decimalPointLeading");
            case "0":
              return buffer = read(), void (lexState = "zero");
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
              return buffer = read(), void (lexState = "decimalInteger");
            case "I":
              return read(), literal("nfinity"), newToken("numeric", 1 / 0);
            case "N":
              return read(), literal("aN"), newToken("numeric", NaN);
            case '"':
            case "'":
              return doubleQuote = '"' === read(), buffer = "", void (lexState = "string");
          }
          throw invalidChar(read());
        }, identifierNameStartEscape() {
          if ("u" !== c4) throw invalidChar(read());
          read();
          const u3 = unicodeEscape();
          switch (u3) {
            case "$":
            case "_":
              break;
            default:
              if (!util.isIdStartChar(u3)) throw invalidIdentifier();
          }
          buffer += u3, lexState = "identifierName";
        }, identifierName() {
          switch (c4) {
            case "$":
            case "_":
            case "\u200C":
            case "\u200D":
              return void (buffer += read());
            case "\\":
              return read(), void (lexState = "identifierNameEscape");
          }
          if (!util.isIdContinueChar(c4)) return newToken("identifier", buffer);
          buffer += read();
        }, identifierNameEscape() {
          if ("u" !== c4) throw invalidChar(read());
          read();
          const u3 = unicodeEscape();
          switch (u3) {
            case "$":
            case "_":
            case "\u200C":
            case "\u200D":
              break;
            default:
              if (!util.isIdContinueChar(u3)) throw invalidIdentifier();
          }
          buffer += u3, lexState = "identifierName";
        }, sign() {
          switch (c4) {
            case ".":
              return buffer = read(), void (lexState = "decimalPointLeading");
            case "0":
              return buffer = read(), void (lexState = "zero");
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
              return buffer = read(), void (lexState = "decimalInteger");
            case "I":
              return read(), literal("nfinity"), newToken("numeric", sign * (1 / 0));
            case "N":
              return read(), literal("aN"), newToken("numeric", NaN);
          }
          throw invalidChar(read());
        }, zero() {
          switch (c4) {
            case ".":
              return buffer += read(), void (lexState = "decimalPoint");
            case "e":
            case "E":
              return buffer += read(), void (lexState = "decimalExponent");
            case "x":
            case "X":
              return buffer += read(), void (lexState = "hexadecimal");
          }
          return newToken("numeric", 0 * sign);
        }, decimalInteger() {
          switch (c4) {
            case ".":
              return buffer += read(), void (lexState = "decimalPoint");
            case "e":
            case "E":
              return buffer += read(), void (lexState = "decimalExponent");
          }
          if (!util.isDigit(c4)) return newToken("numeric", sign * Number(buffer));
          buffer += read();
        }, decimalPointLeading() {
          if (util.isDigit(c4)) return buffer += read(), void (lexState = "decimalFraction");
          throw invalidChar(read());
        }, decimalPoint() {
          switch (c4) {
            case "e":
            case "E":
              return buffer += read(), void (lexState = "decimalExponent");
          }
          return util.isDigit(c4) ? (buffer += read(), void (lexState = "decimalFraction")) : newToken("numeric", sign * Number(buffer));
        }, decimalFraction() {
          switch (c4) {
            case "e":
            case "E":
              return buffer += read(), void (lexState = "decimalExponent");
          }
          if (!util.isDigit(c4)) return newToken("numeric", sign * Number(buffer));
          buffer += read();
        }, decimalExponent() {
          switch (c4) {
            case "+":
            case "-":
              return buffer += read(), void (lexState = "decimalExponentSign");
          }
          if (util.isDigit(c4)) return buffer += read(), void (lexState = "decimalExponentInteger");
          throw invalidChar(read());
        }, decimalExponentSign() {
          if (util.isDigit(c4)) return buffer += read(), void (lexState = "decimalExponentInteger");
          throw invalidChar(read());
        }, decimalExponentInteger() {
          if (!util.isDigit(c4)) return newToken("numeric", sign * Number(buffer));
          buffer += read();
        }, hexadecimal() {
          if (util.isHexDigit(c4)) return buffer += read(), void (lexState = "hexadecimalInteger");
          throw invalidChar(read());
        }, hexadecimalInteger() {
          if (!util.isHexDigit(c4)) return newToken("numeric", sign * Number(buffer));
          buffer += read();
        }, string() {
          switch (c4) {
            case "\\":
              return read(), void (buffer += function() {
                switch (peek()) {
                  case "b":
                    return read(), "\b";
                  case "f":
                    return read(), "\f";
                  case "n":
                    return read(), "\n";
                  case "r":
                    return read(), "\r";
                  case "t":
                    return read(), "	";
                  case "v":
                    return read(), "\v";
                  case "0":
                    if (read(), util.isDigit(peek())) throw invalidChar(read());
                    return "\0";
                  case "x":
                    return read(), function() {
                      let buffer2 = "", c5 = peek();
                      if (!util.isHexDigit(c5)) throw invalidChar(read());
                      if (buffer2 += read(), c5 = peek(), !util.isHexDigit(c5)) throw invalidChar(read());
                      return buffer2 += read(), String.fromCodePoint(parseInt(buffer2, 16));
                    }();
                  case "u":
                    return read(), unicodeEscape();
                  case "\n":
                  case "\u2028":
                  case "\u2029":
                    return read(), "";
                  case "\r":
                    return read(), "\n" === peek() && read(), "";
                  case "1":
                  case "2":
                  case "3":
                  case "4":
                  case "5":
                  case "6":
                  case "7":
                  case "8":
                  case "9":
                  case void 0:
                    throw invalidChar(read());
                }
                return read();
              }());
            case '"':
              return doubleQuote ? (read(), newToken("string", buffer)) : void (buffer += read());
            case "'":
              return doubleQuote ? void (buffer += read()) : (read(), newToken("string", buffer));
            case "\n":
            case "\r":
              throw invalidChar(read());
            case "\u2028":
            case "\u2029":
              !function(c5) {
                console.warn(`JSON5: '${formatChar(c5)}' in strings is not valid ECMAScript; consider escaping`);
              }(c4);
              break;
            case void 0:
              throw invalidChar(read());
          }
          buffer += read();
        }, start() {
          switch (c4) {
            case "{":
            case "[":
              return newToken("punctuator", read());
          }
          lexState = "value";
        }, beforePropertyName() {
          switch (c4) {
            case "$":
            case "_":
              return buffer = read(), void (lexState = "identifierName");
            case "\\":
              return read(), void (lexState = "identifierNameStartEscape");
            case "}":
              return newToken("punctuator", read());
            case '"':
            case "'":
              return doubleQuote = '"' === read(), void (lexState = "string");
          }
          if (util.isIdStartChar(c4)) return buffer += read(), void (lexState = "identifierName");
          throw invalidChar(read());
        }, afterPropertyName() {
          if (":" === c4) return newToken("punctuator", read());
          throw invalidChar(read());
        }, beforePropertyValue() {
          lexState = "value";
        }, afterPropertyValue() {
          switch (c4) {
            case ",":
            case "}":
              return newToken("punctuator", read());
          }
          throw invalidChar(read());
        }, beforeArrayValue() {
          if ("]" === c4) return newToken("punctuator", read());
          lexState = "value";
        }, afterArrayValue() {
          switch (c4) {
            case ",":
            case "]":
              return newToken("punctuator", read());
          }
          throw invalidChar(read());
        }, end() {
          throw invalidChar(read());
        } };
        function newToken(type, value2) {
          return { type, value: value2, line, column };
        }
        function literal(s) {
          for (const c5 of s) {
            if (peek() !== c5) throw invalidChar(read());
            read();
          }
        }
        function unicodeEscape() {
          let buffer2 = "", count2 = 4;
          for (; count2-- > 0; ) {
            const c5 = peek();
            if (!util.isHexDigit(c5)) throw invalidChar(read());
            buffer2 += read();
          }
          return String.fromCodePoint(parseInt(buffer2, 16));
        }
        const parseStates = { start() {
          if ("eof" === token.type) throw invalidEOF();
          push();
        }, beforePropertyName() {
          switch (token.type) {
            case "identifier":
            case "string":
              return key = token.value, void (parseState = "afterPropertyName");
            case "punctuator":
              return void pop();
            case "eof":
              throw invalidEOF();
          }
        }, afterPropertyName() {
          if ("eof" === token.type) throw invalidEOF();
          parseState = "beforePropertyValue";
        }, beforePropertyValue() {
          if ("eof" === token.type) throw invalidEOF();
          push();
        }, beforeArrayValue() {
          if ("eof" === token.type) throw invalidEOF();
          "punctuator" !== token.type || "]" !== token.value ? push() : pop();
        }, afterPropertyValue() {
          if ("eof" === token.type) throw invalidEOF();
          switch (token.value) {
            case ",":
              return void (parseState = "beforePropertyName");
            case "}":
              pop();
          }
        }, afterArrayValue() {
          if ("eof" === token.type) throw invalidEOF();
          switch (token.value) {
            case ",":
              return void (parseState = "beforeArrayValue");
            case "]":
              pop();
          }
        }, end() {
        } };
        function push() {
          let value2;
          switch (token.type) {
            case "punctuator":
              switch (token.value) {
                case "{":
                  value2 = {};
                  break;
                case "[":
                  value2 = [];
              }
              break;
            case "null":
            case "boolean":
            case "numeric":
            case "string":
              value2 = token.value;
          }
          if (void 0 === root) root = value2;
          else {
            const parent = stack[stack.length - 1];
            Array.isArray(parent) ? parent.push(value2) : Object.defineProperty(parent, key, { value: value2, writable: true, enumerable: true, configurable: true });
          }
          if (null !== value2 && "object" == typeof value2) stack.push(value2), parseState = Array.isArray(value2) ? "beforeArrayValue" : "beforePropertyName";
          else {
            const current = stack[stack.length - 1];
            parseState = null == current ? "end" : Array.isArray(current) ? "afterArrayValue" : "afterPropertyValue";
          }
        }
        function pop() {
          stack.pop();
          const current = stack[stack.length - 1];
          parseState = null == current ? "end" : Array.isArray(current) ? "afterArrayValue" : "afterPropertyValue";
        }
        function invalidChar(c5) {
          return syntaxError(void 0 === c5 ? `JSON5: invalid end of input at ${line}:${column}` : `JSON5: invalid character '${formatChar(c5)}' at ${line}:${column}`);
        }
        function invalidEOF() {
          return syntaxError(`JSON5: invalid end of input at ${line}:${column}`);
        }
        function invalidIdentifier() {
          return column -= 5, syntaxError(`JSON5: invalid identifier character at ${line}:${column}`);
        }
        function formatChar(c5) {
          const replacements2 = { "'": "\\'", '"': '\\"', "\\": "\\\\", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "	": "\\t", "\v": "\\v", "\0": "\\0", "\u2028": "\\u2028", "\u2029": "\\u2029" };
          if (replacements2[c5]) return replacements2[c5];
          if (c5 < " ") {
            const hexString = c5.charCodeAt(0).toString(16);
            return "\\x" + ("00" + hexString).substring(hexString.length);
          }
          return c5;
        }
        function syntaxError(message) {
          const err = new SyntaxError(message);
          return err.lineNumber = line, err.columnNumber = column, err;
        }
        const JSON5 = { parse: function(text, reviver) {
          source = String(text), parseState = "start", stack = [], pos = 0, line = 1, column = 0, token = void 0, key = void 0, root = void 0;
          do {
            token = lex(), parseStates[parseState]();
          } while ("eof" !== token.type);
          return "function" == typeof reviver ? internalize({ "": root }, "", reviver) : root;
        }, stringify: function(value2, replacer, space) {
          const stack2 = [];
          let propertyList, replacerFunc, quote, indent = "", gap = "";
          if (null == replacer || "object" != typeof replacer || Array.isArray(replacer) || (space = replacer.space, quote = replacer.quote, replacer = replacer.replacer), "function" == typeof replacer) replacerFunc = replacer;
          else if (Array.isArray(replacer)) {
            propertyList = [];
            for (const v of replacer) {
              let item;
              "string" == typeof v ? item = v : ("number" == typeof v || v instanceof String || v instanceof Number) && (item = String(v)), void 0 !== item && propertyList.indexOf(item) < 0 && propertyList.push(item);
            }
          }
          return space instanceof Number ? space = Number(space) : space instanceof String && (space = String(space)), "number" == typeof space ? space > 0 && (space = Math.min(10, Math.floor(space)), gap = "          ".substr(0, space)) : "string" == typeof space && (gap = space.substr(0, 10)), serializeProperty("", { "": value2 });
          function serializeProperty(key2, holder) {
            let value3 = holder[key2];
            switch (null != value3 && ("function" == typeof value3.toJSON5 ? value3 = value3.toJSON5(key2) : "function" == typeof value3.toJSON && (value3 = value3.toJSON(key2))), replacerFunc && (value3 = replacerFunc.call(holder, key2, value3)), value3 instanceof Number ? value3 = Number(value3) : value3 instanceof String ? value3 = String(value3) : value3 instanceof Boolean && (value3 = value3.valueOf()), value3) {
              case null:
                return "null";
              case true:
                return "true";
              case false:
                return "false";
            }
            return "string" == typeof value3 ? quoteString2(value3) : "number" == typeof value3 ? String(value3) : "object" == typeof value3 ? Array.isArray(value3) ? function(value4) {
              if (stack2.indexOf(value4) >= 0) throw TypeError("Converting circular structure to JSON5");
              stack2.push(value4);
              let stepback = indent;
              indent += gap;
              let final, partial = [];
              for (let i2 = 0; i2 < value4.length; i2++) {
                const propertyString = serializeProperty(String(i2), value4);
                partial.push(void 0 !== propertyString ? propertyString : "null");
              }
              if (0 === partial.length) final = "[]";
              else if ("" === gap) {
                final = "[" + partial.join(",") + "]";
              } else {
                let separator = ",\n" + indent, properties = partial.join(separator);
                final = "[\n" + indent + properties + ",\n" + stepback + "]";
              }
              return stack2.pop(), indent = stepback, final;
            }(value3) : function(value4) {
              if (stack2.indexOf(value4) >= 0) throw TypeError("Converting circular structure to JSON5");
              stack2.push(value4);
              let stepback = indent;
              indent += gap;
              let final, keys = propertyList || Object.keys(value4), partial = [];
              for (const key3 of keys) {
                const propertyString = serializeProperty(key3, value4);
                if (void 0 !== propertyString) {
                  let member = serializeKey(key3) + ":";
                  "" !== gap && (member += " "), member += propertyString, partial.push(member);
                }
              }
              if (0 === partial.length) final = "{}";
              else {
                let properties;
                if ("" === gap) properties = partial.join(","), final = "{" + properties + "}";
                else {
                  let separator = ",\n" + indent;
                  properties = partial.join(separator), final = "{\n" + indent + properties + ",\n" + stepback + "}";
                }
              }
              return stack2.pop(), indent = stepback, final;
            }(value3) : void 0;
          }
          function quoteString2(value3) {
            const quotes = { "'": 0.1, '"': 0.2 }, replacements2 = { "'": "\\'", '"': '\\"', "\\": "\\\\", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "	": "\\t", "\v": "\\v", "\0": "\\0", "\u2028": "\\u2028", "\u2029": "\\u2029" };
            let product = "";
            for (let i2 = 0; i2 < value3.length; i2++) {
              const c5 = value3[i2];
              switch (c5) {
                case "'":
                case '"':
                  quotes[c5]++, product += c5;
                  continue;
                case "\0":
                  if (util.isDigit(value3[i2 + 1])) {
                    product += "\\x00";
                    continue;
                  }
              }
              if (replacements2[c5]) product += replacements2[c5];
              else if (c5 < " ") {
                let hexString = c5.charCodeAt(0).toString(16);
                product += "\\x" + ("00" + hexString).substring(hexString.length);
              } else product += c5;
            }
            const quoteChar = quote || Object.keys(quotes).reduce((a2, b2) => quotes[a2] < quotes[b2] ? a2 : b2);
            return product = product.replace(new RegExp(quoteChar, "g"), replacements2[quoteChar]), quoteChar + product + quoteChar;
          }
          function serializeKey(key2) {
            if (0 === key2.length) return quoteString2(key2);
            const firstChar = String.fromCodePoint(key2.codePointAt(0));
            if (!util.isIdStartChar(firstChar)) return quoteString2(key2);
            for (let i2 = firstChar.length; i2 < key2.length; i2++) if (!util.isIdContinueChar(String.fromCodePoint(key2.codePointAt(i2)))) return quoteString2(key2);
            return key2;
          }
        } };
        const __WEBPACK_DEFAULT_EXPORT__ = JSON5;
      }, "./node_modules/.pnpm/@babel+preset-typescript@7.26.0_@babel+core@7.26.0/node_modules/@babel/preset-typescript/package.json": (module2) => {
        "use strict";
        module2.exports = JSON.parse('{"name":"@babel/preset-typescript","version":"7.26.0","description":"Babel preset for TypeScript.","repository":{"type":"git","url":"https://github.com/babel/babel.git","directory":"packages/babel-preset-typescript"},"license":"MIT","publishConfig":{"access":"public"},"main":"./lib/index.js","keywords":["babel-preset","typescript"],"dependencies":{"@babel/helper-plugin-utils":"^7.25.9","@babel/helper-validator-option":"^7.25.9","@babel/plugin-syntax-jsx":"^7.25.9","@babel/plugin-transform-modules-commonjs":"^7.25.9","@babel/plugin-transform-typescript":"^7.25.9"},"peerDependencies":{"@babel/core":"^7.0.0-0"},"devDependencies":{"@babel/core":"^7.26.0","@babel/helper-plugin-test-runner":"^7.25.9"},"homepage":"https://babel.dev/docs/en/next/babel-preset-typescript","bugs":"https://github.com/babel/babel/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3A%22area%3A%20typescript%22+is%3Aopen","engines":{"node":">=6.9.0"},"author":"The Babel Team (https://babel.dev/team)","type":"commonjs"}');
      }, "./node_modules/.pnpm/globals@11.12.0/node_modules/globals/globals.json": (module2) => {
        "use strict";
        module2.exports = JSON.parse('{"builtin":{"Array":false,"ArrayBuffer":false,"Atomics":false,"BigInt":false,"BigInt64Array":false,"BigUint64Array":false,"Boolean":false,"constructor":false,"DataView":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Float32Array":false,"Float64Array":false,"Function":false,"globalThis":false,"hasOwnProperty":false,"Infinity":false,"Int16Array":false,"Int32Array":false,"Int8Array":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Map":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"Promise":false,"propertyIsEnumerable":false,"Proxy":false,"RangeError":false,"ReferenceError":false,"Reflect":false,"RegExp":false,"Set":false,"SharedArrayBuffer":false,"String":false,"Symbol":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"Uint16Array":false,"Uint32Array":false,"Uint8Array":false,"Uint8ClampedArray":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false,"WeakMap":false,"WeakSet":false},"es5":{"Array":false,"Boolean":false,"constructor":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Function":false,"hasOwnProperty":false,"Infinity":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"propertyIsEnumerable":false,"RangeError":false,"ReferenceError":false,"RegExp":false,"String":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false},"es2015":{"Array":false,"ArrayBuffer":false,"Boolean":false,"constructor":false,"DataView":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Float32Array":false,"Float64Array":false,"Function":false,"hasOwnProperty":false,"Infinity":false,"Int16Array":false,"Int32Array":false,"Int8Array":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Map":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"Promise":false,"propertyIsEnumerable":false,"Proxy":false,"RangeError":false,"ReferenceError":false,"Reflect":false,"RegExp":false,"Set":false,"String":false,"Symbol":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"Uint16Array":false,"Uint32Array":false,"Uint8Array":false,"Uint8ClampedArray":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false,"WeakMap":false,"WeakSet":false},"es2017":{"Array":false,"ArrayBuffer":false,"Atomics":false,"Boolean":false,"constructor":false,"DataView":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Float32Array":false,"Float64Array":false,"Function":false,"hasOwnProperty":false,"Infinity":false,"Int16Array":false,"Int32Array":false,"Int8Array":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Map":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"Promise":false,"propertyIsEnumerable":false,"Proxy":false,"RangeError":false,"ReferenceError":false,"Reflect":false,"RegExp":false,"Set":false,"SharedArrayBuffer":false,"String":false,"Symbol":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"Uint16Array":false,"Uint32Array":false,"Uint8Array":false,"Uint8ClampedArray":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false,"WeakMap":false,"WeakSet":false},"browser":{"AbortController":false,"AbortSignal":false,"addEventListener":false,"alert":false,"AnalyserNode":false,"Animation":false,"AnimationEffectReadOnly":false,"AnimationEffectTiming":false,"AnimationEffectTimingReadOnly":false,"AnimationEvent":false,"AnimationPlaybackEvent":false,"AnimationTimeline":false,"applicationCache":false,"ApplicationCache":false,"ApplicationCacheErrorEvent":false,"atob":false,"Attr":false,"Audio":false,"AudioBuffer":false,"AudioBufferSourceNode":false,"AudioContext":false,"AudioDestinationNode":false,"AudioListener":false,"AudioNode":false,"AudioParam":false,"AudioProcessingEvent":false,"AudioScheduledSourceNode":false,"AudioWorkletGlobalScope ":false,"AudioWorkletNode":false,"AudioWorkletProcessor":false,"BarProp":false,"BaseAudioContext":false,"BatteryManager":false,"BeforeUnloadEvent":false,"BiquadFilterNode":false,"Blob":false,"BlobEvent":false,"blur":false,"BroadcastChannel":false,"btoa":false,"BudgetService":false,"ByteLengthQueuingStrategy":false,"Cache":false,"caches":false,"CacheStorage":false,"cancelAnimationFrame":false,"cancelIdleCallback":false,"CanvasCaptureMediaStreamTrack":false,"CanvasGradient":false,"CanvasPattern":false,"CanvasRenderingContext2D":false,"ChannelMergerNode":false,"ChannelSplitterNode":false,"CharacterData":false,"clearInterval":false,"clearTimeout":false,"clientInformation":false,"ClipboardEvent":false,"close":false,"closed":false,"CloseEvent":false,"Comment":false,"CompositionEvent":false,"confirm":false,"console":false,"ConstantSourceNode":false,"ConvolverNode":false,"CountQueuingStrategy":false,"createImageBitmap":false,"Credential":false,"CredentialsContainer":false,"crypto":false,"Crypto":false,"CryptoKey":false,"CSS":false,"CSSConditionRule":false,"CSSFontFaceRule":false,"CSSGroupingRule":false,"CSSImportRule":false,"CSSKeyframeRule":false,"CSSKeyframesRule":false,"CSSMediaRule":false,"CSSNamespaceRule":false,"CSSPageRule":false,"CSSRule":false,"CSSRuleList":false,"CSSStyleDeclaration":false,"CSSStyleRule":false,"CSSStyleSheet":false,"CSSSupportsRule":false,"CustomElementRegistry":false,"customElements":false,"CustomEvent":false,"DataTransfer":false,"DataTransferItem":false,"DataTransferItemList":false,"defaultstatus":false,"defaultStatus":false,"DelayNode":false,"DeviceMotionEvent":false,"DeviceOrientationEvent":false,"devicePixelRatio":false,"dispatchEvent":false,"document":false,"Document":false,"DocumentFragment":false,"DocumentType":false,"DOMError":false,"DOMException":false,"DOMImplementation":false,"DOMMatrix":false,"DOMMatrixReadOnly":false,"DOMParser":false,"DOMPoint":false,"DOMPointReadOnly":false,"DOMQuad":false,"DOMRect":false,"DOMRectReadOnly":false,"DOMStringList":false,"DOMStringMap":false,"DOMTokenList":false,"DragEvent":false,"DynamicsCompressorNode":false,"Element":false,"ErrorEvent":false,"event":false,"Event":false,"EventSource":false,"EventTarget":false,"external":false,"fetch":false,"File":false,"FileList":false,"FileReader":false,"find":false,"focus":false,"FocusEvent":false,"FontFace":false,"FontFaceSetLoadEvent":false,"FormData":false,"frameElement":false,"frames":false,"GainNode":false,"Gamepad":false,"GamepadButton":false,"GamepadEvent":false,"getComputedStyle":false,"getSelection":false,"HashChangeEvent":false,"Headers":false,"history":false,"History":false,"HTMLAllCollection":false,"HTMLAnchorElement":false,"HTMLAreaElement":false,"HTMLAudioElement":false,"HTMLBaseElement":false,"HTMLBodyElement":false,"HTMLBRElement":false,"HTMLButtonElement":false,"HTMLCanvasElement":false,"HTMLCollection":false,"HTMLContentElement":false,"HTMLDataElement":false,"HTMLDataListElement":false,"HTMLDetailsElement":false,"HTMLDialogElement":false,"HTMLDirectoryElement":false,"HTMLDivElement":false,"HTMLDListElement":false,"HTMLDocument":false,"HTMLElement":false,"HTMLEmbedElement":false,"HTMLFieldSetElement":false,"HTMLFontElement":false,"HTMLFormControlsCollection":false,"HTMLFormElement":false,"HTMLFrameElement":false,"HTMLFrameSetElement":false,"HTMLHeadElement":false,"HTMLHeadingElement":false,"HTMLHRElement":false,"HTMLHtmlElement":false,"HTMLIFrameElement":false,"HTMLImageElement":false,"HTMLInputElement":false,"HTMLLabelElement":false,"HTMLLegendElement":false,"HTMLLIElement":false,"HTMLLinkElement":false,"HTMLMapElement":false,"HTMLMarqueeElement":false,"HTMLMediaElement":false,"HTMLMenuElement":false,"HTMLMetaElement":false,"HTMLMeterElement":false,"HTMLModElement":false,"HTMLObjectElement":false,"HTMLOListElement":false,"HTMLOptGroupElement":false,"HTMLOptionElement":false,"HTMLOptionsCollection":false,"HTMLOutputElement":false,"HTMLParagraphElement":false,"HTMLParamElement":false,"HTMLPictureElement":false,"HTMLPreElement":false,"HTMLProgressElement":false,"HTMLQuoteElement":false,"HTMLScriptElement":false,"HTMLSelectElement":false,"HTMLShadowElement":false,"HTMLSlotElement":false,"HTMLSourceElement":false,"HTMLSpanElement":false,"HTMLStyleElement":false,"HTMLTableCaptionElement":false,"HTMLTableCellElement":false,"HTMLTableColElement":false,"HTMLTableElement":false,"HTMLTableRowElement":false,"HTMLTableSectionElement":false,"HTMLTemplateElement":false,"HTMLTextAreaElement":false,"HTMLTimeElement":false,"HTMLTitleElement":false,"HTMLTrackElement":false,"HTMLUListElement":false,"HTMLUnknownElement":false,"HTMLVideoElement":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"IdleDeadline":false,"IIRFilterNode":false,"Image":false,"ImageBitmap":false,"ImageBitmapRenderingContext":false,"ImageCapture":false,"ImageData":false,"indexedDB":false,"innerHeight":false,"innerWidth":false,"InputEvent":false,"IntersectionObserver":false,"IntersectionObserverEntry":false,"Intl":false,"isSecureContext":false,"KeyboardEvent":false,"KeyframeEffect":false,"KeyframeEffectReadOnly":false,"length":false,"localStorage":false,"location":true,"Location":false,"locationbar":false,"matchMedia":false,"MediaDeviceInfo":false,"MediaDevices":false,"MediaElementAudioSourceNode":false,"MediaEncryptedEvent":false,"MediaError":false,"MediaKeyMessageEvent":false,"MediaKeySession":false,"MediaKeyStatusMap":false,"MediaKeySystemAccess":false,"MediaList":false,"MediaQueryList":false,"MediaQueryListEvent":false,"MediaRecorder":false,"MediaSettingsRange":false,"MediaSource":false,"MediaStream":false,"MediaStreamAudioDestinationNode":false,"MediaStreamAudioSourceNode":false,"MediaStreamEvent":false,"MediaStreamTrack":false,"MediaStreamTrackEvent":false,"menubar":false,"MessageChannel":false,"MessageEvent":false,"MessagePort":false,"MIDIAccess":false,"MIDIConnectionEvent":false,"MIDIInput":false,"MIDIInputMap":false,"MIDIMessageEvent":false,"MIDIOutput":false,"MIDIOutputMap":false,"MIDIPort":false,"MimeType":false,"MimeTypeArray":false,"MouseEvent":false,"moveBy":false,"moveTo":false,"MutationEvent":false,"MutationObserver":false,"MutationRecord":false,"name":false,"NamedNodeMap":false,"NavigationPreloadManager":false,"navigator":false,"Navigator":false,"NetworkInformation":false,"Node":false,"NodeFilter":false,"NodeIterator":false,"NodeList":false,"Notification":false,"OfflineAudioCompletionEvent":false,"OfflineAudioContext":false,"offscreenBuffering":false,"OffscreenCanvas":true,"onabort":true,"onafterprint":true,"onanimationend":true,"onanimationiteration":true,"onanimationstart":true,"onappinstalled":true,"onauxclick":true,"onbeforeinstallprompt":true,"onbeforeprint":true,"onbeforeunload":true,"onblur":true,"oncancel":true,"oncanplay":true,"oncanplaythrough":true,"onchange":true,"onclick":true,"onclose":true,"oncontextmenu":true,"oncuechange":true,"ondblclick":true,"ondevicemotion":true,"ondeviceorientation":true,"ondeviceorientationabsolute":true,"ondrag":true,"ondragend":true,"ondragenter":true,"ondragleave":true,"ondragover":true,"ondragstart":true,"ondrop":true,"ondurationchange":true,"onemptied":true,"onended":true,"onerror":true,"onfocus":true,"ongotpointercapture":true,"onhashchange":true,"oninput":true,"oninvalid":true,"onkeydown":true,"onkeypress":true,"onkeyup":true,"onlanguagechange":true,"onload":true,"onloadeddata":true,"onloadedmetadata":true,"onloadstart":true,"onlostpointercapture":true,"onmessage":true,"onmessageerror":true,"onmousedown":true,"onmouseenter":true,"onmouseleave":true,"onmousemove":true,"onmouseout":true,"onmouseover":true,"onmouseup":true,"onmousewheel":true,"onoffline":true,"ononline":true,"onpagehide":true,"onpageshow":true,"onpause":true,"onplay":true,"onplaying":true,"onpointercancel":true,"onpointerdown":true,"onpointerenter":true,"onpointerleave":true,"onpointermove":true,"onpointerout":true,"onpointerover":true,"onpointerup":true,"onpopstate":true,"onprogress":true,"onratechange":true,"onrejectionhandled":true,"onreset":true,"onresize":true,"onscroll":true,"onsearch":true,"onseeked":true,"onseeking":true,"onselect":true,"onstalled":true,"onstorage":true,"onsubmit":true,"onsuspend":true,"ontimeupdate":true,"ontoggle":true,"ontransitionend":true,"onunhandledrejection":true,"onunload":true,"onvolumechange":true,"onwaiting":true,"onwheel":true,"open":false,"openDatabase":false,"opener":false,"Option":false,"origin":false,"OscillatorNode":false,"outerHeight":false,"outerWidth":false,"PageTransitionEvent":false,"pageXOffset":false,"pageYOffset":false,"PannerNode":false,"parent":false,"Path2D":false,"PaymentAddress":false,"PaymentRequest":false,"PaymentRequestUpdateEvent":false,"PaymentResponse":false,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceLongTaskTiming":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceNavigationTiming":false,"PerformanceObserver":false,"PerformanceObserverEntryList":false,"PerformancePaintTiming":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"PeriodicWave":false,"Permissions":false,"PermissionStatus":false,"personalbar":false,"PhotoCapabilities":false,"Plugin":false,"PluginArray":false,"PointerEvent":false,"PopStateEvent":false,"postMessage":false,"Presentation":false,"PresentationAvailability":false,"PresentationConnection":false,"PresentationConnectionAvailableEvent":false,"PresentationConnectionCloseEvent":false,"PresentationConnectionList":false,"PresentationReceiver":false,"PresentationRequest":false,"print":false,"ProcessingInstruction":false,"ProgressEvent":false,"PromiseRejectionEvent":false,"prompt":false,"PushManager":false,"PushSubscription":false,"PushSubscriptionOptions":false,"queueMicrotask":false,"RadioNodeList":false,"Range":false,"ReadableStream":false,"registerProcessor":false,"RemotePlayback":false,"removeEventListener":false,"Request":false,"requestAnimationFrame":false,"requestIdleCallback":false,"resizeBy":false,"ResizeObserver":false,"ResizeObserverEntry":false,"resizeTo":false,"Response":false,"RTCCertificate":false,"RTCDataChannel":false,"RTCDataChannelEvent":false,"RTCDtlsTransport":false,"RTCIceCandidate":false,"RTCIceGatherer":false,"RTCIceTransport":false,"RTCPeerConnection":false,"RTCPeerConnectionIceEvent":false,"RTCRtpContributingSource":false,"RTCRtpReceiver":false,"RTCRtpSender":false,"RTCSctpTransport":false,"RTCSessionDescription":false,"RTCStatsReport":false,"RTCTrackEvent":false,"screen":false,"Screen":false,"screenLeft":false,"ScreenOrientation":false,"screenTop":false,"screenX":false,"screenY":false,"ScriptProcessorNode":false,"scroll":false,"scrollbars":false,"scrollBy":false,"scrollTo":false,"scrollX":false,"scrollY":false,"SecurityPolicyViolationEvent":false,"Selection":false,"self":false,"ServiceWorker":false,"ServiceWorkerContainer":false,"ServiceWorkerRegistration":false,"sessionStorage":false,"setInterval":false,"setTimeout":false,"ShadowRoot":false,"SharedWorker":false,"SourceBuffer":false,"SourceBufferList":false,"speechSynthesis":false,"SpeechSynthesisEvent":false,"SpeechSynthesisUtterance":false,"StaticRange":false,"status":false,"statusbar":false,"StereoPannerNode":false,"stop":false,"Storage":false,"StorageEvent":false,"StorageManager":false,"styleMedia":false,"StyleSheet":false,"StyleSheetList":false,"SubtleCrypto":false,"SVGAElement":false,"SVGAngle":false,"SVGAnimatedAngle":false,"SVGAnimatedBoolean":false,"SVGAnimatedEnumeration":false,"SVGAnimatedInteger":false,"SVGAnimatedLength":false,"SVGAnimatedLengthList":false,"SVGAnimatedNumber":false,"SVGAnimatedNumberList":false,"SVGAnimatedPreserveAspectRatio":false,"SVGAnimatedRect":false,"SVGAnimatedString":false,"SVGAnimatedTransformList":false,"SVGAnimateElement":false,"SVGAnimateMotionElement":false,"SVGAnimateTransformElement":false,"SVGAnimationElement":false,"SVGCircleElement":false,"SVGClipPathElement":false,"SVGComponentTransferFunctionElement":false,"SVGDefsElement":false,"SVGDescElement":false,"SVGDiscardElement":false,"SVGElement":false,"SVGEllipseElement":false,"SVGFEBlendElement":false,"SVGFEColorMatrixElement":false,"SVGFEComponentTransferElement":false,"SVGFECompositeElement":false,"SVGFEConvolveMatrixElement":false,"SVGFEDiffuseLightingElement":false,"SVGFEDisplacementMapElement":false,"SVGFEDistantLightElement":false,"SVGFEDropShadowElement":false,"SVGFEFloodElement":false,"SVGFEFuncAElement":false,"SVGFEFuncBElement":false,"SVGFEFuncGElement":false,"SVGFEFuncRElement":false,"SVGFEGaussianBlurElement":false,"SVGFEImageElement":false,"SVGFEMergeElement":false,"SVGFEMergeNodeElement":false,"SVGFEMorphologyElement":false,"SVGFEOffsetElement":false,"SVGFEPointLightElement":false,"SVGFESpecularLightingElement":false,"SVGFESpotLightElement":false,"SVGFETileElement":false,"SVGFETurbulenceElement":false,"SVGFilterElement":false,"SVGForeignObjectElement":false,"SVGGElement":false,"SVGGeometryElement":false,"SVGGradientElement":false,"SVGGraphicsElement":false,"SVGImageElement":false,"SVGLength":false,"SVGLengthList":false,"SVGLinearGradientElement":false,"SVGLineElement":false,"SVGMarkerElement":false,"SVGMaskElement":false,"SVGMatrix":false,"SVGMetadataElement":false,"SVGMPathElement":false,"SVGNumber":false,"SVGNumberList":false,"SVGPathElement":false,"SVGPatternElement":false,"SVGPoint":false,"SVGPointList":false,"SVGPolygonElement":false,"SVGPolylineElement":false,"SVGPreserveAspectRatio":false,"SVGRadialGradientElement":false,"SVGRect":false,"SVGRectElement":false,"SVGScriptElement":false,"SVGSetElement":false,"SVGStopElement":false,"SVGStringList":false,"SVGStyleElement":false,"SVGSVGElement":false,"SVGSwitchElement":false,"SVGSymbolElement":false,"SVGTextContentElement":false,"SVGTextElement":false,"SVGTextPathElement":false,"SVGTextPositioningElement":false,"SVGTitleElement":false,"SVGTransform":false,"SVGTransformList":false,"SVGTSpanElement":false,"SVGUnitTypes":false,"SVGUseElement":false,"SVGViewElement":false,"TaskAttributionTiming":false,"Text":false,"TextDecoder":false,"TextEncoder":false,"TextEvent":false,"TextMetrics":false,"TextTrack":false,"TextTrackCue":false,"TextTrackCueList":false,"TextTrackList":false,"TimeRanges":false,"toolbar":false,"top":false,"Touch":false,"TouchEvent":false,"TouchList":false,"TrackEvent":false,"TransitionEvent":false,"TreeWalker":false,"UIEvent":false,"URL":false,"URLSearchParams":false,"ValidityState":false,"visualViewport":false,"VisualViewport":false,"VTTCue":false,"WaveShaperNode":false,"WebAssembly":false,"WebGL2RenderingContext":false,"WebGLActiveInfo":false,"WebGLBuffer":false,"WebGLContextEvent":false,"WebGLFramebuffer":false,"WebGLProgram":false,"WebGLQuery":false,"WebGLRenderbuffer":false,"WebGLRenderingContext":false,"WebGLSampler":false,"WebGLShader":false,"WebGLShaderPrecisionFormat":false,"WebGLSync":false,"WebGLTexture":false,"WebGLTransformFeedback":false,"WebGLUniformLocation":false,"WebGLVertexArrayObject":false,"WebSocket":false,"WheelEvent":false,"window":false,"Window":false,"Worker":false,"WritableStream":false,"XMLDocument":false,"XMLHttpRequest":false,"XMLHttpRequestEventTarget":false,"XMLHttpRequestUpload":false,"XMLSerializer":false,"XPathEvaluator":false,"XPathExpression":false,"XPathResult":false,"XSLTProcessor":false},"worker":{"addEventListener":false,"applicationCache":false,"atob":false,"Blob":false,"BroadcastChannel":false,"btoa":false,"Cache":false,"caches":false,"clearInterval":false,"clearTimeout":false,"close":true,"console":false,"fetch":false,"FileReaderSync":false,"FormData":false,"Headers":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"ImageData":false,"importScripts":true,"indexedDB":false,"location":false,"MessageChannel":false,"MessagePort":false,"name":false,"navigator":false,"Notification":false,"onclose":true,"onconnect":true,"onerror":true,"onlanguagechange":true,"onmessage":true,"onoffline":true,"ononline":true,"onrejectionhandled":true,"onunhandledrejection":true,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"postMessage":true,"Promise":false,"queueMicrotask":false,"removeEventListener":false,"Request":false,"Response":false,"self":true,"ServiceWorkerRegistration":false,"setInterval":false,"setTimeout":false,"TextDecoder":false,"TextEncoder":false,"URL":false,"URLSearchParams":false,"WebSocket":false,"Worker":false,"WorkerGlobalScope":false,"XMLHttpRequest":false},"node":{"__dirname":false,"__filename":false,"Buffer":false,"clearImmediate":false,"clearInterval":false,"clearTimeout":false,"console":false,"exports":true,"global":false,"Intl":false,"module":false,"process":false,"queueMicrotask":false,"require":false,"setImmediate":false,"setInterval":false,"setTimeout":false,"TextDecoder":false,"TextEncoder":false,"URL":false,"URLSearchParams":false},"commonjs":{"exports":true,"global":false,"module":false,"require":false},"amd":{"define":false,"require":false},"mocha":{"after":false,"afterEach":false,"before":false,"beforeEach":false,"context":false,"describe":false,"it":false,"mocha":false,"run":false,"setup":false,"specify":false,"suite":false,"suiteSetup":false,"suiteTeardown":false,"teardown":false,"test":false,"xcontext":false,"xdescribe":false,"xit":false,"xspecify":false},"jasmine":{"afterAll":false,"afterEach":false,"beforeAll":false,"beforeEach":false,"describe":false,"expect":false,"fail":false,"fdescribe":false,"fit":false,"it":false,"jasmine":false,"pending":false,"runs":false,"spyOn":false,"spyOnProperty":false,"waits":false,"waitsFor":false,"xdescribe":false,"xit":false},"jest":{"afterAll":false,"afterEach":false,"beforeAll":false,"beforeEach":false,"describe":false,"expect":false,"fdescribe":false,"fit":false,"it":false,"jest":false,"pit":false,"require":false,"test":false,"xdescribe":false,"xit":false,"xtest":false},"qunit":{"asyncTest":false,"deepEqual":false,"equal":false,"expect":false,"module":false,"notDeepEqual":false,"notEqual":false,"notOk":false,"notPropEqual":false,"notStrictEqual":false,"ok":false,"propEqual":false,"QUnit":false,"raises":false,"start":false,"stop":false,"strictEqual":false,"test":false,"throws":false},"phantomjs":{"console":true,"exports":true,"phantom":true,"require":true,"WebPage":true},"couch":{"emit":false,"exports":false,"getRow":false,"log":false,"module":false,"provides":false,"require":false,"respond":false,"send":false,"start":false,"sum":false},"rhino":{"defineClass":false,"deserialize":false,"gc":false,"help":false,"importClass":false,"importPackage":false,"java":false,"load":false,"loadClass":false,"Packages":false,"print":false,"quit":false,"readFile":false,"readUrl":false,"runCommand":false,"seal":false,"serialize":false,"spawn":false,"sync":false,"toint32":false,"version":false},"nashorn":{"__DIR__":false,"__FILE__":false,"__LINE__":false,"com":false,"edu":false,"exit":false,"java":false,"Java":false,"javafx":false,"JavaImporter":false,"javax":false,"JSAdapter":false,"load":false,"loadWithNewGlobal":false,"org":false,"Packages":false,"print":false,"quit":false},"wsh":{"ActiveXObject":true,"Enumerator":true,"GetObject":true,"ScriptEngine":true,"ScriptEngineBuildVersion":true,"ScriptEngineMajorVersion":true,"ScriptEngineMinorVersion":true,"VBArray":true,"WScript":true,"WSH":true,"XDomainRequest":true},"jquery":{"$":false,"jQuery":false},"yui":{"YAHOO":false,"YAHOO_config":false,"YUI":false,"YUI_config":false},"shelljs":{"cat":false,"cd":false,"chmod":false,"config":false,"cp":false,"dirs":false,"echo":false,"env":false,"error":false,"exec":false,"exit":false,"find":false,"grep":false,"ln":false,"ls":false,"mkdir":false,"mv":false,"popd":false,"pushd":false,"pwd":false,"rm":false,"sed":false,"set":false,"target":false,"tempdir":false,"test":false,"touch":false,"which":false},"prototypejs":{"$":false,"$$":false,"$A":false,"$break":false,"$continue":false,"$F":false,"$H":false,"$R":false,"$w":false,"Abstract":false,"Ajax":false,"Autocompleter":false,"Builder":false,"Class":false,"Control":false,"Draggable":false,"Draggables":false,"Droppables":false,"Effect":false,"Element":false,"Enumerable":false,"Event":false,"Field":false,"Form":false,"Hash":false,"Insertion":false,"ObjectRange":false,"PeriodicalExecuter":false,"Position":false,"Prototype":false,"Scriptaculous":false,"Selector":false,"Sortable":false,"SortableObserver":false,"Sound":false,"Template":false,"Toggle":false,"Try":false},"meteor":{"_":false,"$":false,"Accounts":false,"AccountsClient":false,"AccountsCommon":false,"AccountsServer":false,"App":false,"Assets":false,"Blaze":false,"check":false,"Cordova":false,"DDP":false,"DDPRateLimiter":false,"DDPServer":false,"Deps":false,"EJSON":false,"Email":false,"HTTP":false,"Log":false,"Match":false,"Meteor":false,"Mongo":false,"MongoInternals":false,"Npm":false,"Package":false,"Plugin":false,"process":false,"Random":false,"ReactiveDict":false,"ReactiveVar":false,"Router":false,"ServiceConfiguration":false,"Session":false,"share":false,"Spacebars":false,"Template":false,"Tinytest":false,"Tracker":false,"UI":false,"Utils":false,"WebApp":false,"WebAppInternals":false},"mongo":{"_isWindows":false,"_rand":false,"BulkWriteResult":false,"cat":false,"cd":false,"connect":false,"db":false,"getHostName":false,"getMemInfo":false,"hostname":false,"ISODate":false,"listFiles":false,"load":false,"ls":false,"md5sumFile":false,"mkdir":false,"Mongo":false,"NumberInt":false,"NumberLong":false,"ObjectId":false,"PlanCache":false,"print":false,"printjson":false,"pwd":false,"quit":false,"removeFile":false,"rs":false,"sh":false,"UUID":false,"version":false,"WriteResult":false},"applescript":{"$":false,"Application":false,"Automation":false,"console":false,"delay":false,"Library":false,"ObjC":false,"ObjectSpecifier":false,"Path":false,"Progress":false,"Ref":false},"serviceworker":{"addEventListener":false,"applicationCache":false,"atob":false,"Blob":false,"BroadcastChannel":false,"btoa":false,"Cache":false,"caches":false,"CacheStorage":false,"clearInterval":false,"clearTimeout":false,"Client":false,"clients":false,"Clients":false,"close":true,"console":false,"ExtendableEvent":false,"ExtendableMessageEvent":false,"fetch":false,"FetchEvent":false,"FileReaderSync":false,"FormData":false,"Headers":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"ImageData":false,"importScripts":false,"indexedDB":false,"location":false,"MessageChannel":false,"MessagePort":false,"name":false,"navigator":false,"Notification":false,"onclose":true,"onconnect":true,"onerror":true,"onfetch":true,"oninstall":true,"onlanguagechange":true,"onmessage":true,"onmessageerror":true,"onnotificationclick":true,"onnotificationclose":true,"onoffline":true,"ononline":true,"onpush":true,"onpushsubscriptionchange":true,"onrejectionhandled":true,"onsync":true,"onunhandledrejection":true,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"postMessage":true,"Promise":false,"queueMicrotask":false,"registration":false,"removeEventListener":false,"Request":false,"Response":false,"self":false,"ServiceWorker":false,"ServiceWorkerContainer":false,"ServiceWorkerGlobalScope":false,"ServiceWorkerMessageEvent":false,"ServiceWorkerRegistration":false,"setInterval":false,"setTimeout":false,"skipWaiting":false,"TextDecoder":false,"TextEncoder":false,"URL":false,"URLSearchParams":false,"WebSocket":false,"WindowClient":false,"Worker":false,"WorkerGlobalScope":false,"XMLHttpRequest":false},"atomtest":{"advanceClock":false,"fakeClearInterval":false,"fakeClearTimeout":false,"fakeSetInterval":false,"fakeSetTimeout":false,"resetTimeouts":false,"waitsForPromise":false},"embertest":{"andThen":false,"click":false,"currentPath":false,"currentRouteName":false,"currentURL":false,"fillIn":false,"find":false,"findAll":false,"findWithAssert":false,"keyEvent":false,"pauseTest":false,"resumeTest":false,"triggerEvent":false,"visit":false,"wait":false},"protractor":{"$":false,"$$":false,"browser":false,"by":false,"By":false,"DartObject":false,"element":false,"protractor":false},"shared-node-browser":{"clearInterval":false,"clearTimeout":false,"console":false,"setInterval":false,"setTimeout":false,"URL":false,"URLSearchParams":false},"webextensions":{"browser":false,"chrome":false,"opr":false},"greasemonkey":{"cloneInto":false,"createObjectIn":false,"exportFunction":false,"GM":false,"GM_addStyle":false,"GM_deleteValue":false,"GM_getResourceText":false,"GM_getResourceURL":false,"GM_getValue":false,"GM_info":false,"GM_listValues":false,"GM_log":false,"GM_openInTab":false,"GM_registerMenuCommand":false,"GM_setClipboard":false,"GM_setValue":false,"GM_xmlhttpRequest":false,"unsafeWindow":false},"devtools":{"$":false,"$_":false,"$$":false,"$0":false,"$1":false,"$2":false,"$3":false,"$4":false,"$x":false,"chrome":false,"clear":false,"copy":false,"debug":false,"dir":false,"dirxml":false,"getEventListeners":false,"inspect":false,"keys":false,"monitor":false,"monitorEvents":false,"profile":false,"profileEnd":false,"queryObjects":false,"table":false,"undebug":false,"unmonitor":false,"unmonitorEvents":false,"values":false}}');
      } }, __webpack_module_cache__ = {};
      function __webpack_require__(moduleId) {
        var cachedModule = __webpack_module_cache__[moduleId];
        if (void 0 !== cachedModule) return cachedModule.exports;
        var module2 = __webpack_module_cache__[moduleId] = { exports: {} };
        return __webpack_modules__[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__), module2.exports;
      }
      __webpack_require__.d = (exports2, definition) => {
        for (var key in definition) __webpack_require__.o(definition, key) && !__webpack_require__.o(exports2, key) && Object.defineProperty(exports2, key, { enumerable: true, get: definition[key] });
      }, __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop), __webpack_require__.r = (exports2) => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(exports2, "__esModule", { value: true });
      };
      var __webpack_exports__ = {};
      (() => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, { default: () => transform3 });
        var lib = __webpack_require__("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), external_url_ = __webpack_require__("url"), template_lib = __webpack_require__("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/index.js");
        function TransformImportMetaPlugin(_ctx, opts) {
          return { name: "transform-import-meta", visitor: { Program(path9) {
            const metas = [];
            if (path9.traverse({ MemberExpression(memberExpPath) {
              const { node } = memberExpPath;
              "MetaProperty" === node.object.type && "import" === node.object.meta.name && "meta" === node.object.property.name && "Identifier" === node.property.type && "url" === node.property.name && metas.push(memberExpPath);
            } }), 0 !== metas.length) for (const meta of metas) meta.replaceWith(template_lib.smart.ast`${opts.filename ? JSON.stringify((0, external_url_.pathToFileURL)(opts.filename)) : "require('url').pathToFileURL(__filename).toString()"}`);
          } } };
        }
        function importMetaEnvPlugin({ template, types }) {
          return { name: "@import-meta-env/babel", visitor: { Identifier(path9) {
            if (!types.isIdentifier(path9)) return;
            if (!types.isMemberExpression(path9.parentPath) && !types.isOptionalMemberExpression(path9.parentPath)) return;
            if (!types.isMemberExpression(path9.parentPath.node)) return;
            const parentNode = path9.parentPath.node;
            if (!types.isMetaProperty(parentNode.object)) return;
            const parentNodeObjMeta = parentNode.object;
            "import" === parentNodeObjMeta.meta.name && "meta" === parentNodeObjMeta.property.name && "env" === parentNode.property.name && path9.parentPath.replaceWith(template.expression.ast("process.env"));
          } } };
        }
        function transform3(opts) {
          var _a, _b, _c, _d, _e, _f;
          const _opts = Object.assign(Object.assign({ babelrc: false, configFile: false, compact: false, retainLines: "boolean" != typeof opts.retainLines || opts.retainLines, filename: "", cwd: "/" }, opts.babel), { plugins: [[__webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/index.js"), { allowTopLevelThis: true }], [__webpack_require__("./node_modules/.pnpm/babel-plugin-dynamic-import-node@2.3.3/node_modules/babel-plugin-dynamic-import-node/lib/index.js"), { noInterop: true }], [TransformImportMetaPlugin, { filename: opts.filename }], [__webpack_require__("./node_modules/.pnpm/@babel+plugin-syntax-class-properties@7.12.13_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-class-properties/lib/index.js")], [__webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-export-namespace-from@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-transform-export-namespace-from/lib/index.js")], [importMetaEnvPlugin]] });
          opts.ts && (_opts.plugins.push([__webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/index.js"), { allowDeclareFields: true }]), _opts.plugins.unshift([__webpack_require__("./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2_@babel+core@7.26.0_@babel+traverse@7.26.4/node_modules/babel-plugin-transform-typescript-metadata/lib/plugin.js")], [__webpack_require__("./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-proposal-decorators/lib/index.js"), { legacy: true }]), _opts.plugins.push(__webpack_require__("./node_modules/.pnpm/babel-plugin-parameter-decorator@1.0.16/node_modules/babel-plugin-parameter-decorator/lib/index.js")), _opts.plugins.push(__webpack_require__("./node_modules/.pnpm/@babel+plugin-syntax-import-assertions@7.26.0_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-import-assertions/lib/index.js"))), opts.legacy && (_opts.plugins.push(__webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-nullish-coalescing-operator@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-transform-nullish-coalescing-operator/lib/index.js")), _opts.plugins.push(__webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-optional-chaining@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-transform-optional-chaining/lib/index.js"))), opts.babel && Array.isArray(opts.babel.plugins) && (null === (_a = _opts.plugins) || void 0 === _a || _a.push(...opts.babel.plugins));
          try {
            return { code: (null === (_b = (0, lib.transformSync)(opts.source, _opts)) || void 0 === _b ? void 0 : _b.code) || "" };
          } catch (error) {
            return { error, code: "exports.__JITI_ERROR__ = " + JSON.stringify({ filename: opts.filename, line: (null === (_c = error.loc) || void 0 === _c ? void 0 : _c.line) || 0, column: (null === (_d = error.loc) || void 0 === _d ? void 0 : _d.column) || 0, code: null === (_e = error.code) || void 0 === _e ? void 0 : _e.replace("BABEL_", "").replace("PARSE_ERROR", "ParseError"), message: null === (_f = error.message) || void 0 === _f ? void 0 : _f.replace("/: ", "").replace(/\(.+\)\s*$/, "") }) };
          }
        }
      })(), module.exports = __webpack_exports__.default;
    })();
  }
});

// ../../.yarn/cache/jiti-npm-1.21.7-82fc9937d6-77b61989c7.zip/node_modules/jiti/lib/index.js
var require_lib4 = __commonJS({
  "../../.yarn/cache/jiti-npm-1.21.7-82fc9937d6-77b61989c7.zip/node_modules/jiti/lib/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    function onError(err) {
      throw err;
    }
    module.exports = function jiti2(filename, opts) {
      const jiti3 = require_jiti();
      opts = { onError, ...opts };
      if (!opts.transform) {
        opts.transform = require_babel();
      }
      return jiti3(filename, opts);
    };
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/utils/shallowEqual.js
var require_shallowEqual = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/utils/shallowEqual.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = shallowEqual;
    function shallowEqual(actual, expected) {
      const keys = Object.keys(expected);
      for (const key of keys) {
        if (actual[key] !== expected[key]) {
          return false;
        }
      }
      return true;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/utils/deprecationWarning.js
var require_deprecationWarning = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/utils/deprecationWarning.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = deprecationWarning;
    var warnings = /* @__PURE__ */ new Set();
    function deprecationWarning(oldName, newName, prefix = "") {
      if (warnings.has(oldName)) return;
      warnings.add(oldName);
      const {
        internal,
        trace
      } = captureShortStackTrace(1, 2);
      if (internal) {
        return;
      }
      console.warn(`${prefix}\`${oldName}\` has been deprecated, please migrate to \`${newName}\`
${trace}`);
    }
    function captureShortStackTrace(skip, length) {
      const {
        stackTraceLimit,
        prepareStackTrace
      } = Error;
      let stackTrace;
      Error.stackTraceLimit = 1 + skip + length;
      Error.prepareStackTrace = function(err, stack) {
        stackTrace = stack;
      };
      new Error().stack;
      Error.stackTraceLimit = stackTraceLimit;
      Error.prepareStackTrace = prepareStackTrace;
      if (!stackTrace) return {
        internal: false,
        trace: ""
      };
      const shortStackTrace = stackTrace.slice(1 + skip, 1 + skip + length);
      return {
        internal: /[\\/]@babel[\\/]/.test(shortStackTrace[1].getFileName()),
        trace: shortStackTrace.map((frame) => `    at ${frame}`).join("\n")
      };
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/generated/index.js
var require_generated = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/generated/index.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isAccessor = isAccessor;
    exports.isAnyTypeAnnotation = isAnyTypeAnnotation;
    exports.isArgumentPlaceholder = isArgumentPlaceholder;
    exports.isArrayExpression = isArrayExpression;
    exports.isArrayPattern = isArrayPattern;
    exports.isArrayTypeAnnotation = isArrayTypeAnnotation;
    exports.isArrowFunctionExpression = isArrowFunctionExpression;
    exports.isAssignmentExpression = isAssignmentExpression;
    exports.isAssignmentPattern = isAssignmentPattern;
    exports.isAwaitExpression = isAwaitExpression;
    exports.isBigIntLiteral = isBigIntLiteral;
    exports.isBinary = isBinary;
    exports.isBinaryExpression = isBinaryExpression;
    exports.isBindExpression = isBindExpression;
    exports.isBlock = isBlock;
    exports.isBlockParent = isBlockParent;
    exports.isBlockStatement = isBlockStatement;
    exports.isBooleanLiteral = isBooleanLiteral;
    exports.isBooleanLiteralTypeAnnotation = isBooleanLiteralTypeAnnotation;
    exports.isBooleanTypeAnnotation = isBooleanTypeAnnotation;
    exports.isBreakStatement = isBreakStatement;
    exports.isCallExpression = isCallExpression;
    exports.isCatchClause = isCatchClause;
    exports.isClass = isClass;
    exports.isClassAccessorProperty = isClassAccessorProperty;
    exports.isClassBody = isClassBody;
    exports.isClassDeclaration = isClassDeclaration;
    exports.isClassExpression = isClassExpression;
    exports.isClassImplements = isClassImplements;
    exports.isClassMethod = isClassMethod;
    exports.isClassPrivateMethod = isClassPrivateMethod;
    exports.isClassPrivateProperty = isClassPrivateProperty;
    exports.isClassProperty = isClassProperty;
    exports.isCompletionStatement = isCompletionStatement;
    exports.isConditional = isConditional;
    exports.isConditionalExpression = isConditionalExpression;
    exports.isContinueStatement = isContinueStatement;
    exports.isDebuggerStatement = isDebuggerStatement;
    exports.isDecimalLiteral = isDecimalLiteral;
    exports.isDeclaration = isDeclaration;
    exports.isDeclareClass = isDeclareClass;
    exports.isDeclareExportAllDeclaration = isDeclareExportAllDeclaration;
    exports.isDeclareExportDeclaration = isDeclareExportDeclaration;
    exports.isDeclareFunction = isDeclareFunction;
    exports.isDeclareInterface = isDeclareInterface;
    exports.isDeclareModule = isDeclareModule;
    exports.isDeclareModuleExports = isDeclareModuleExports;
    exports.isDeclareOpaqueType = isDeclareOpaqueType;
    exports.isDeclareTypeAlias = isDeclareTypeAlias;
    exports.isDeclareVariable = isDeclareVariable;
    exports.isDeclaredPredicate = isDeclaredPredicate;
    exports.isDecorator = isDecorator;
    exports.isDirective = isDirective;
    exports.isDirectiveLiteral = isDirectiveLiteral;
    exports.isDoExpression = isDoExpression;
    exports.isDoWhileStatement = isDoWhileStatement;
    exports.isEmptyStatement = isEmptyStatement;
    exports.isEmptyTypeAnnotation = isEmptyTypeAnnotation;
    exports.isEnumBody = isEnumBody;
    exports.isEnumBooleanBody = isEnumBooleanBody;
    exports.isEnumBooleanMember = isEnumBooleanMember;
    exports.isEnumDeclaration = isEnumDeclaration;
    exports.isEnumDefaultedMember = isEnumDefaultedMember;
    exports.isEnumMember = isEnumMember;
    exports.isEnumNumberBody = isEnumNumberBody;
    exports.isEnumNumberMember = isEnumNumberMember;
    exports.isEnumStringBody = isEnumStringBody;
    exports.isEnumStringMember = isEnumStringMember;
    exports.isEnumSymbolBody = isEnumSymbolBody;
    exports.isExistsTypeAnnotation = isExistsTypeAnnotation;
    exports.isExportAllDeclaration = isExportAllDeclaration;
    exports.isExportDeclaration = isExportDeclaration;
    exports.isExportDefaultDeclaration = isExportDefaultDeclaration;
    exports.isExportDefaultSpecifier = isExportDefaultSpecifier;
    exports.isExportNamedDeclaration = isExportNamedDeclaration;
    exports.isExportNamespaceSpecifier = isExportNamespaceSpecifier;
    exports.isExportSpecifier = isExportSpecifier;
    exports.isExpression = isExpression;
    exports.isExpressionStatement = isExpressionStatement;
    exports.isExpressionWrapper = isExpressionWrapper;
    exports.isFile = isFile;
    exports.isFlow = isFlow;
    exports.isFlowBaseAnnotation = isFlowBaseAnnotation;
    exports.isFlowDeclaration = isFlowDeclaration;
    exports.isFlowPredicate = isFlowPredicate;
    exports.isFlowType = isFlowType;
    exports.isFor = isFor;
    exports.isForInStatement = isForInStatement;
    exports.isForOfStatement = isForOfStatement;
    exports.isForStatement = isForStatement;
    exports.isForXStatement = isForXStatement;
    exports.isFunction = isFunction;
    exports.isFunctionDeclaration = isFunctionDeclaration;
    exports.isFunctionExpression = isFunctionExpression;
    exports.isFunctionParent = isFunctionParent;
    exports.isFunctionTypeAnnotation = isFunctionTypeAnnotation;
    exports.isFunctionTypeParam = isFunctionTypeParam;
    exports.isGenericTypeAnnotation = isGenericTypeAnnotation;
    exports.isIdentifier = isIdentifier2;
    exports.isIfStatement = isIfStatement;
    exports.isImmutable = isImmutable;
    exports.isImport = isImport;
    exports.isImportAttribute = isImportAttribute;
    exports.isImportDeclaration = isImportDeclaration;
    exports.isImportDefaultSpecifier = isImportDefaultSpecifier;
    exports.isImportExpression = isImportExpression;
    exports.isImportNamespaceSpecifier = isImportNamespaceSpecifier;
    exports.isImportOrExportDeclaration = isImportOrExportDeclaration;
    exports.isImportSpecifier = isImportSpecifier;
    exports.isIndexedAccessType = isIndexedAccessType;
    exports.isInferredPredicate = isInferredPredicate;
    exports.isInterfaceDeclaration = isInterfaceDeclaration;
    exports.isInterfaceExtends = isInterfaceExtends;
    exports.isInterfaceTypeAnnotation = isInterfaceTypeAnnotation;
    exports.isInterpreterDirective = isInterpreterDirective;
    exports.isIntersectionTypeAnnotation = isIntersectionTypeAnnotation;
    exports.isJSX = isJSX;
    exports.isJSXAttribute = isJSXAttribute;
    exports.isJSXClosingElement = isJSXClosingElement;
    exports.isJSXClosingFragment = isJSXClosingFragment;
    exports.isJSXElement = isJSXElement;
    exports.isJSXEmptyExpression = isJSXEmptyExpression;
    exports.isJSXExpressionContainer = isJSXExpressionContainer;
    exports.isJSXFragment = isJSXFragment;
    exports.isJSXIdentifier = isJSXIdentifier;
    exports.isJSXMemberExpression = isJSXMemberExpression;
    exports.isJSXNamespacedName = isJSXNamespacedName;
    exports.isJSXOpeningElement = isJSXOpeningElement;
    exports.isJSXOpeningFragment = isJSXOpeningFragment;
    exports.isJSXSpreadAttribute = isJSXSpreadAttribute;
    exports.isJSXSpreadChild = isJSXSpreadChild;
    exports.isJSXText = isJSXText;
    exports.isLVal = isLVal;
    exports.isLabeledStatement = isLabeledStatement;
    exports.isLiteral = isLiteral;
    exports.isLogicalExpression = isLogicalExpression;
    exports.isLoop = isLoop;
    exports.isMemberExpression = isMemberExpression;
    exports.isMetaProperty = isMetaProperty;
    exports.isMethod = isMethod;
    exports.isMiscellaneous = isMiscellaneous;
    exports.isMixedTypeAnnotation = isMixedTypeAnnotation;
    exports.isModuleDeclaration = isModuleDeclaration;
    exports.isModuleExpression = isModuleExpression;
    exports.isModuleSpecifier = isModuleSpecifier;
    exports.isNewExpression = isNewExpression;
    exports.isNoop = isNoop;
    exports.isNullLiteral = isNullLiteral;
    exports.isNullLiteralTypeAnnotation = isNullLiteralTypeAnnotation;
    exports.isNullableTypeAnnotation = isNullableTypeAnnotation;
    exports.isNumberLiteral = isNumberLiteral;
    exports.isNumberLiteralTypeAnnotation = isNumberLiteralTypeAnnotation;
    exports.isNumberTypeAnnotation = isNumberTypeAnnotation;
    exports.isNumericLiteral = isNumericLiteral;
    exports.isObjectExpression = isObjectExpression;
    exports.isObjectMember = isObjectMember;
    exports.isObjectMethod = isObjectMethod;
    exports.isObjectPattern = isObjectPattern;
    exports.isObjectProperty = isObjectProperty;
    exports.isObjectTypeAnnotation = isObjectTypeAnnotation;
    exports.isObjectTypeCallProperty = isObjectTypeCallProperty;
    exports.isObjectTypeIndexer = isObjectTypeIndexer;
    exports.isObjectTypeInternalSlot = isObjectTypeInternalSlot;
    exports.isObjectTypeProperty = isObjectTypeProperty;
    exports.isObjectTypeSpreadProperty = isObjectTypeSpreadProperty;
    exports.isOpaqueType = isOpaqueType;
    exports.isOptionalCallExpression = isOptionalCallExpression;
    exports.isOptionalIndexedAccessType = isOptionalIndexedAccessType;
    exports.isOptionalMemberExpression = isOptionalMemberExpression;
    exports.isParenthesizedExpression = isParenthesizedExpression;
    exports.isPattern = isPattern;
    exports.isPatternLike = isPatternLike;
    exports.isPipelineBareFunction = isPipelineBareFunction;
    exports.isPipelinePrimaryTopicReference = isPipelinePrimaryTopicReference;
    exports.isPipelineTopicExpression = isPipelineTopicExpression;
    exports.isPlaceholder = isPlaceholder;
    exports.isPrivate = isPrivate;
    exports.isPrivateName = isPrivateName;
    exports.isProgram = isProgram;
    exports.isProperty = isProperty;
    exports.isPureish = isPureish;
    exports.isQualifiedTypeIdentifier = isQualifiedTypeIdentifier;
    exports.isRecordExpression = isRecordExpression;
    exports.isRegExpLiteral = isRegExpLiteral;
    exports.isRegexLiteral = isRegexLiteral;
    exports.isRestElement = isRestElement;
    exports.isRestProperty = isRestProperty;
    exports.isReturnStatement = isReturnStatement;
    exports.isScopable = isScopable;
    exports.isSequenceExpression = isSequenceExpression;
    exports.isSpreadElement = isSpreadElement;
    exports.isSpreadProperty = isSpreadProperty;
    exports.isStandardized = isStandardized;
    exports.isStatement = isStatement;
    exports.isStaticBlock = isStaticBlock;
    exports.isStringLiteral = isStringLiteral;
    exports.isStringLiteralTypeAnnotation = isStringLiteralTypeAnnotation;
    exports.isStringTypeAnnotation = isStringTypeAnnotation;
    exports.isSuper = isSuper;
    exports.isSwitchCase = isSwitchCase;
    exports.isSwitchStatement = isSwitchStatement;
    exports.isSymbolTypeAnnotation = isSymbolTypeAnnotation;
    exports.isTSAnyKeyword = isTSAnyKeyword;
    exports.isTSArrayType = isTSArrayType;
    exports.isTSAsExpression = isTSAsExpression;
    exports.isTSBaseType = isTSBaseType;
    exports.isTSBigIntKeyword = isTSBigIntKeyword;
    exports.isTSBooleanKeyword = isTSBooleanKeyword;
    exports.isTSCallSignatureDeclaration = isTSCallSignatureDeclaration;
    exports.isTSConditionalType = isTSConditionalType;
    exports.isTSConstructSignatureDeclaration = isTSConstructSignatureDeclaration;
    exports.isTSConstructorType = isTSConstructorType;
    exports.isTSDeclareFunction = isTSDeclareFunction;
    exports.isTSDeclareMethod = isTSDeclareMethod;
    exports.isTSEntityName = isTSEntityName;
    exports.isTSEnumBody = isTSEnumBody;
    exports.isTSEnumDeclaration = isTSEnumDeclaration;
    exports.isTSEnumMember = isTSEnumMember;
    exports.isTSExportAssignment = isTSExportAssignment;
    exports.isTSExpressionWithTypeArguments = isTSExpressionWithTypeArguments;
    exports.isTSExternalModuleReference = isTSExternalModuleReference;
    exports.isTSFunctionType = isTSFunctionType;
    exports.isTSImportEqualsDeclaration = isTSImportEqualsDeclaration;
    exports.isTSImportType = isTSImportType;
    exports.isTSIndexSignature = isTSIndexSignature;
    exports.isTSIndexedAccessType = isTSIndexedAccessType;
    exports.isTSInferType = isTSInferType;
    exports.isTSInstantiationExpression = isTSInstantiationExpression;
    exports.isTSInterfaceBody = isTSInterfaceBody;
    exports.isTSInterfaceDeclaration = isTSInterfaceDeclaration;
    exports.isTSIntersectionType = isTSIntersectionType;
    exports.isTSIntrinsicKeyword = isTSIntrinsicKeyword;
    exports.isTSLiteralType = isTSLiteralType;
    exports.isTSMappedType = isTSMappedType;
    exports.isTSMethodSignature = isTSMethodSignature;
    exports.isTSModuleBlock = isTSModuleBlock;
    exports.isTSModuleDeclaration = isTSModuleDeclaration;
    exports.isTSNamedTupleMember = isTSNamedTupleMember;
    exports.isTSNamespaceExportDeclaration = isTSNamespaceExportDeclaration;
    exports.isTSNeverKeyword = isTSNeverKeyword;
    exports.isTSNonNullExpression = isTSNonNullExpression;
    exports.isTSNullKeyword = isTSNullKeyword;
    exports.isTSNumberKeyword = isTSNumberKeyword;
    exports.isTSObjectKeyword = isTSObjectKeyword;
    exports.isTSOptionalType = isTSOptionalType;
    exports.isTSParameterProperty = isTSParameterProperty;
    exports.isTSParenthesizedType = isTSParenthesizedType;
    exports.isTSPropertySignature = isTSPropertySignature;
    exports.isTSQualifiedName = isTSQualifiedName;
    exports.isTSRestType = isTSRestType;
    exports.isTSSatisfiesExpression = isTSSatisfiesExpression;
    exports.isTSStringKeyword = isTSStringKeyword;
    exports.isTSSymbolKeyword = isTSSymbolKeyword;
    exports.isTSTemplateLiteralType = isTSTemplateLiteralType;
    exports.isTSThisType = isTSThisType;
    exports.isTSTupleType = isTSTupleType;
    exports.isTSType = isTSType;
    exports.isTSTypeAliasDeclaration = isTSTypeAliasDeclaration;
    exports.isTSTypeAnnotation = isTSTypeAnnotation;
    exports.isTSTypeAssertion = isTSTypeAssertion;
    exports.isTSTypeElement = isTSTypeElement;
    exports.isTSTypeLiteral = isTSTypeLiteral;
    exports.isTSTypeOperator = isTSTypeOperator;
    exports.isTSTypeParameter = isTSTypeParameter;
    exports.isTSTypeParameterDeclaration = isTSTypeParameterDeclaration;
    exports.isTSTypeParameterInstantiation = isTSTypeParameterInstantiation;
    exports.isTSTypePredicate = isTSTypePredicate;
    exports.isTSTypeQuery = isTSTypeQuery;
    exports.isTSTypeReference = isTSTypeReference;
    exports.isTSUndefinedKeyword = isTSUndefinedKeyword;
    exports.isTSUnionType = isTSUnionType;
    exports.isTSUnknownKeyword = isTSUnknownKeyword;
    exports.isTSVoidKeyword = isTSVoidKeyword;
    exports.isTaggedTemplateExpression = isTaggedTemplateExpression;
    exports.isTemplateElement = isTemplateElement;
    exports.isTemplateLiteral = isTemplateLiteral;
    exports.isTerminatorless = isTerminatorless;
    exports.isThisExpression = isThisExpression;
    exports.isThisTypeAnnotation = isThisTypeAnnotation;
    exports.isThrowStatement = isThrowStatement;
    exports.isTopicReference = isTopicReference;
    exports.isTryStatement = isTryStatement;
    exports.isTupleExpression = isTupleExpression;
    exports.isTupleTypeAnnotation = isTupleTypeAnnotation;
    exports.isTypeAlias = isTypeAlias;
    exports.isTypeAnnotation = isTypeAnnotation;
    exports.isTypeCastExpression = isTypeCastExpression;
    exports.isTypeParameter = isTypeParameter;
    exports.isTypeParameterDeclaration = isTypeParameterDeclaration;
    exports.isTypeParameterInstantiation = isTypeParameterInstantiation;
    exports.isTypeScript = isTypeScript;
    exports.isTypeofTypeAnnotation = isTypeofTypeAnnotation;
    exports.isUnaryExpression = isUnaryExpression;
    exports.isUnaryLike = isUnaryLike;
    exports.isUnionTypeAnnotation = isUnionTypeAnnotation;
    exports.isUpdateExpression = isUpdateExpression;
    exports.isUserWhitespacable = isUserWhitespacable;
    exports.isV8IntrinsicIdentifier = isV8IntrinsicIdentifier;
    exports.isVariableDeclaration = isVariableDeclaration;
    exports.isVariableDeclarator = isVariableDeclarator;
    exports.isVariance = isVariance;
    exports.isVoidTypeAnnotation = isVoidTypeAnnotation;
    exports.isWhile = isWhile;
    exports.isWhileStatement = isWhileStatement;
    exports.isWithStatement = isWithStatement;
    exports.isYieldExpression = isYieldExpression;
    var _shallowEqual = require_shallowEqual();
    var _deprecationWarning = require_deprecationWarning();
    function isArrayExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "ArrayExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isAssignmentExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "AssignmentExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isBinaryExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "BinaryExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isInterpreterDirective(node, opts) {
      if (!node) return false;
      if (node.type !== "InterpreterDirective") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isDirective(node, opts) {
      if (!node) return false;
      if (node.type !== "Directive") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isDirectiveLiteral(node, opts) {
      if (!node) return false;
      if (node.type !== "DirectiveLiteral") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isBlockStatement(node, opts) {
      if (!node) return false;
      if (node.type !== "BlockStatement") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isBreakStatement(node, opts) {
      if (!node) return false;
      if (node.type !== "BreakStatement") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isCallExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "CallExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isCatchClause(node, opts) {
      if (!node) return false;
      if (node.type !== "CatchClause") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isConditionalExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "ConditionalExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isContinueStatement(node, opts) {
      if (!node) return false;
      if (node.type !== "ContinueStatement") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isDebuggerStatement(node, opts) {
      if (!node) return false;
      if (node.type !== "DebuggerStatement") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isDoWhileStatement(node, opts) {
      if (!node) return false;
      if (node.type !== "DoWhileStatement") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isEmptyStatement(node, opts) {
      if (!node) return false;
      if (node.type !== "EmptyStatement") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isExpressionStatement(node, opts) {
      if (!node) return false;
      if (node.type !== "ExpressionStatement") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isFile(node, opts) {
      if (!node) return false;
      if (node.type !== "File") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isForInStatement(node, opts) {
      if (!node) return false;
      if (node.type !== "ForInStatement") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isForStatement(node, opts) {
      if (!node) return false;
      if (node.type !== "ForStatement") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isFunctionDeclaration(node, opts) {
      if (!node) return false;
      if (node.type !== "FunctionDeclaration") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isFunctionExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "FunctionExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isIdentifier2(node, opts) {
      if (!node) return false;
      if (node.type !== "Identifier") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isIfStatement(node, opts) {
      if (!node) return false;
      if (node.type !== "IfStatement") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isLabeledStatement(node, opts) {
      if (!node) return false;
      if (node.type !== "LabeledStatement") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isStringLiteral(node, opts) {
      if (!node) return false;
      if (node.type !== "StringLiteral") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isNumericLiteral(node, opts) {
      if (!node) return false;
      if (node.type !== "NumericLiteral") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isNullLiteral(node, opts) {
      if (!node) return false;
      if (node.type !== "NullLiteral") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isBooleanLiteral(node, opts) {
      if (!node) return false;
      if (node.type !== "BooleanLiteral") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isRegExpLiteral(node, opts) {
      if (!node) return false;
      if (node.type !== "RegExpLiteral") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isLogicalExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "LogicalExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isMemberExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "MemberExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isNewExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "NewExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isProgram(node, opts) {
      if (!node) return false;
      if (node.type !== "Program") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isObjectExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "ObjectExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isObjectMethod(node, opts) {
      if (!node) return false;
      if (node.type !== "ObjectMethod") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isObjectProperty(node, opts) {
      if (!node) return false;
      if (node.type !== "ObjectProperty") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isRestElement(node, opts) {
      if (!node) return false;
      if (node.type !== "RestElement") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isReturnStatement(node, opts) {
      if (!node) return false;
      if (node.type !== "ReturnStatement") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isSequenceExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "SequenceExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isParenthesizedExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "ParenthesizedExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isSwitchCase(node, opts) {
      if (!node) return false;
      if (node.type !== "SwitchCase") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isSwitchStatement(node, opts) {
      if (!node) return false;
      if (node.type !== "SwitchStatement") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isThisExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "ThisExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isThrowStatement(node, opts) {
      if (!node) return false;
      if (node.type !== "ThrowStatement") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTryStatement(node, opts) {
      if (!node) return false;
      if (node.type !== "TryStatement") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isUnaryExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "UnaryExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isUpdateExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "UpdateExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isVariableDeclaration(node, opts) {
      if (!node) return false;
      if (node.type !== "VariableDeclaration") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isVariableDeclarator(node, opts) {
      if (!node) return false;
      if (node.type !== "VariableDeclarator") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isWhileStatement(node, opts) {
      if (!node) return false;
      if (node.type !== "WhileStatement") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isWithStatement(node, opts) {
      if (!node) return false;
      if (node.type !== "WithStatement") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isAssignmentPattern(node, opts) {
      if (!node) return false;
      if (node.type !== "AssignmentPattern") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isArrayPattern(node, opts) {
      if (!node) return false;
      if (node.type !== "ArrayPattern") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isArrowFunctionExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "ArrowFunctionExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isClassBody(node, opts) {
      if (!node) return false;
      if (node.type !== "ClassBody") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isClassExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "ClassExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isClassDeclaration(node, opts) {
      if (!node) return false;
      if (node.type !== "ClassDeclaration") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isExportAllDeclaration(node, opts) {
      if (!node) return false;
      if (node.type !== "ExportAllDeclaration") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isExportDefaultDeclaration(node, opts) {
      if (!node) return false;
      if (node.type !== "ExportDefaultDeclaration") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isExportNamedDeclaration(node, opts) {
      if (!node) return false;
      if (node.type !== "ExportNamedDeclaration") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isExportSpecifier(node, opts) {
      if (!node) return false;
      if (node.type !== "ExportSpecifier") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isForOfStatement(node, opts) {
      if (!node) return false;
      if (node.type !== "ForOfStatement") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isImportDeclaration(node, opts) {
      if (!node) return false;
      if (node.type !== "ImportDeclaration") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isImportDefaultSpecifier(node, opts) {
      if (!node) return false;
      if (node.type !== "ImportDefaultSpecifier") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isImportNamespaceSpecifier(node, opts) {
      if (!node) return false;
      if (node.type !== "ImportNamespaceSpecifier") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isImportSpecifier(node, opts) {
      if (!node) return false;
      if (node.type !== "ImportSpecifier") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isImportExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "ImportExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isMetaProperty(node, opts) {
      if (!node) return false;
      if (node.type !== "MetaProperty") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isClassMethod(node, opts) {
      if (!node) return false;
      if (node.type !== "ClassMethod") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isObjectPattern(node, opts) {
      if (!node) return false;
      if (node.type !== "ObjectPattern") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isSpreadElement(node, opts) {
      if (!node) return false;
      if (node.type !== "SpreadElement") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isSuper(node, opts) {
      if (!node) return false;
      if (node.type !== "Super") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTaggedTemplateExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "TaggedTemplateExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTemplateElement(node, opts) {
      if (!node) return false;
      if (node.type !== "TemplateElement") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTemplateLiteral(node, opts) {
      if (!node) return false;
      if (node.type !== "TemplateLiteral") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isYieldExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "YieldExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isAwaitExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "AwaitExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isImport(node, opts) {
      if (!node) return false;
      if (node.type !== "Import") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isBigIntLiteral(node, opts) {
      if (!node) return false;
      if (node.type !== "BigIntLiteral") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isExportNamespaceSpecifier(node, opts) {
      if (!node) return false;
      if (node.type !== "ExportNamespaceSpecifier") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isOptionalMemberExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "OptionalMemberExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isOptionalCallExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "OptionalCallExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isClassProperty(node, opts) {
      if (!node) return false;
      if (node.type !== "ClassProperty") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isClassAccessorProperty(node, opts) {
      if (!node) return false;
      if (node.type !== "ClassAccessorProperty") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isClassPrivateProperty(node, opts) {
      if (!node) return false;
      if (node.type !== "ClassPrivateProperty") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isClassPrivateMethod(node, opts) {
      if (!node) return false;
      if (node.type !== "ClassPrivateMethod") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isPrivateName(node, opts) {
      if (!node) return false;
      if (node.type !== "PrivateName") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isStaticBlock(node, opts) {
      if (!node) return false;
      if (node.type !== "StaticBlock") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isAnyTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "AnyTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isArrayTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "ArrayTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isBooleanTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "BooleanTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isBooleanLiteralTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "BooleanLiteralTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isNullLiteralTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "NullLiteralTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isClassImplements(node, opts) {
      if (!node) return false;
      if (node.type !== "ClassImplements") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isDeclareClass(node, opts) {
      if (!node) return false;
      if (node.type !== "DeclareClass") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isDeclareFunction(node, opts) {
      if (!node) return false;
      if (node.type !== "DeclareFunction") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isDeclareInterface(node, opts) {
      if (!node) return false;
      if (node.type !== "DeclareInterface") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isDeclareModule(node, opts) {
      if (!node) return false;
      if (node.type !== "DeclareModule") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isDeclareModuleExports(node, opts) {
      if (!node) return false;
      if (node.type !== "DeclareModuleExports") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isDeclareTypeAlias(node, opts) {
      if (!node) return false;
      if (node.type !== "DeclareTypeAlias") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isDeclareOpaqueType(node, opts) {
      if (!node) return false;
      if (node.type !== "DeclareOpaqueType") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isDeclareVariable(node, opts) {
      if (!node) return false;
      if (node.type !== "DeclareVariable") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isDeclareExportDeclaration(node, opts) {
      if (!node) return false;
      if (node.type !== "DeclareExportDeclaration") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isDeclareExportAllDeclaration(node, opts) {
      if (!node) return false;
      if (node.type !== "DeclareExportAllDeclaration") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isDeclaredPredicate(node, opts) {
      if (!node) return false;
      if (node.type !== "DeclaredPredicate") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isExistsTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "ExistsTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isFunctionTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "FunctionTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isFunctionTypeParam(node, opts) {
      if (!node) return false;
      if (node.type !== "FunctionTypeParam") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isGenericTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "GenericTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isInferredPredicate(node, opts) {
      if (!node) return false;
      if (node.type !== "InferredPredicate") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isInterfaceExtends(node, opts) {
      if (!node) return false;
      if (node.type !== "InterfaceExtends") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isInterfaceDeclaration(node, opts) {
      if (!node) return false;
      if (node.type !== "InterfaceDeclaration") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isInterfaceTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "InterfaceTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isIntersectionTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "IntersectionTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isMixedTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "MixedTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isEmptyTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "EmptyTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isNullableTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "NullableTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isNumberLiteralTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "NumberLiteralTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isNumberTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "NumberTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isObjectTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "ObjectTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isObjectTypeInternalSlot(node, opts) {
      if (!node) return false;
      if (node.type !== "ObjectTypeInternalSlot") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isObjectTypeCallProperty(node, opts) {
      if (!node) return false;
      if (node.type !== "ObjectTypeCallProperty") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isObjectTypeIndexer(node, opts) {
      if (!node) return false;
      if (node.type !== "ObjectTypeIndexer") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isObjectTypeProperty(node, opts) {
      if (!node) return false;
      if (node.type !== "ObjectTypeProperty") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isObjectTypeSpreadProperty(node, opts) {
      if (!node) return false;
      if (node.type !== "ObjectTypeSpreadProperty") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isOpaqueType(node, opts) {
      if (!node) return false;
      if (node.type !== "OpaqueType") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isQualifiedTypeIdentifier(node, opts) {
      if (!node) return false;
      if (node.type !== "QualifiedTypeIdentifier") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isStringLiteralTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "StringLiteralTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isStringTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "StringTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isSymbolTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "SymbolTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isThisTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "ThisTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTupleTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "TupleTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTypeofTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "TypeofTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTypeAlias(node, opts) {
      if (!node) return false;
      if (node.type !== "TypeAlias") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "TypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTypeCastExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "TypeCastExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTypeParameter(node, opts) {
      if (!node) return false;
      if (node.type !== "TypeParameter") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTypeParameterDeclaration(node, opts) {
      if (!node) return false;
      if (node.type !== "TypeParameterDeclaration") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTypeParameterInstantiation(node, opts) {
      if (!node) return false;
      if (node.type !== "TypeParameterInstantiation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isUnionTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "UnionTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isVariance(node, opts) {
      if (!node) return false;
      if (node.type !== "Variance") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isVoidTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "VoidTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isEnumDeclaration(node, opts) {
      if (!node) return false;
      if (node.type !== "EnumDeclaration") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isEnumBooleanBody(node, opts) {
      if (!node) return false;
      if (node.type !== "EnumBooleanBody") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isEnumNumberBody(node, opts) {
      if (!node) return false;
      if (node.type !== "EnumNumberBody") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isEnumStringBody(node, opts) {
      if (!node) return false;
      if (node.type !== "EnumStringBody") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isEnumSymbolBody(node, opts) {
      if (!node) return false;
      if (node.type !== "EnumSymbolBody") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isEnumBooleanMember(node, opts) {
      if (!node) return false;
      if (node.type !== "EnumBooleanMember") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isEnumNumberMember(node, opts) {
      if (!node) return false;
      if (node.type !== "EnumNumberMember") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isEnumStringMember(node, opts) {
      if (!node) return false;
      if (node.type !== "EnumStringMember") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isEnumDefaultedMember(node, opts) {
      if (!node) return false;
      if (node.type !== "EnumDefaultedMember") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isIndexedAccessType(node, opts) {
      if (!node) return false;
      if (node.type !== "IndexedAccessType") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isOptionalIndexedAccessType(node, opts) {
      if (!node) return false;
      if (node.type !== "OptionalIndexedAccessType") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isJSXAttribute(node, opts) {
      if (!node) return false;
      if (node.type !== "JSXAttribute") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isJSXClosingElement(node, opts) {
      if (!node) return false;
      if (node.type !== "JSXClosingElement") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isJSXElement(node, opts) {
      if (!node) return false;
      if (node.type !== "JSXElement") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isJSXEmptyExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "JSXEmptyExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isJSXExpressionContainer(node, opts) {
      if (!node) return false;
      if (node.type !== "JSXExpressionContainer") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isJSXSpreadChild(node, opts) {
      if (!node) return false;
      if (node.type !== "JSXSpreadChild") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isJSXIdentifier(node, opts) {
      if (!node) return false;
      if (node.type !== "JSXIdentifier") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isJSXMemberExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "JSXMemberExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isJSXNamespacedName(node, opts) {
      if (!node) return false;
      if (node.type !== "JSXNamespacedName") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isJSXOpeningElement(node, opts) {
      if (!node) return false;
      if (node.type !== "JSXOpeningElement") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isJSXSpreadAttribute(node, opts) {
      if (!node) return false;
      if (node.type !== "JSXSpreadAttribute") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isJSXText(node, opts) {
      if (!node) return false;
      if (node.type !== "JSXText") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isJSXFragment(node, opts) {
      if (!node) return false;
      if (node.type !== "JSXFragment") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isJSXOpeningFragment(node, opts) {
      if (!node) return false;
      if (node.type !== "JSXOpeningFragment") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isJSXClosingFragment(node, opts) {
      if (!node) return false;
      if (node.type !== "JSXClosingFragment") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isNoop(node, opts) {
      if (!node) return false;
      if (node.type !== "Noop") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isPlaceholder(node, opts) {
      if (!node) return false;
      if (node.type !== "Placeholder") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isV8IntrinsicIdentifier(node, opts) {
      if (!node) return false;
      if (node.type !== "V8IntrinsicIdentifier") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isArgumentPlaceholder(node, opts) {
      if (!node) return false;
      if (node.type !== "ArgumentPlaceholder") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isBindExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "BindExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isImportAttribute(node, opts) {
      if (!node) return false;
      if (node.type !== "ImportAttribute") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isDecorator(node, opts) {
      if (!node) return false;
      if (node.type !== "Decorator") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isDoExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "DoExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isExportDefaultSpecifier(node, opts) {
      if (!node) return false;
      if (node.type !== "ExportDefaultSpecifier") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isRecordExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "RecordExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTupleExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "TupleExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isDecimalLiteral(node, opts) {
      if (!node) return false;
      if (node.type !== "DecimalLiteral") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isModuleExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "ModuleExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTopicReference(node, opts) {
      if (!node) return false;
      if (node.type !== "TopicReference") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isPipelineTopicExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "PipelineTopicExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isPipelineBareFunction(node, opts) {
      if (!node) return false;
      if (node.type !== "PipelineBareFunction") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isPipelinePrimaryTopicReference(node, opts) {
      if (!node) return false;
      if (node.type !== "PipelinePrimaryTopicReference") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSParameterProperty(node, opts) {
      if (!node) return false;
      if (node.type !== "TSParameterProperty") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSDeclareFunction(node, opts) {
      if (!node) return false;
      if (node.type !== "TSDeclareFunction") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSDeclareMethod(node, opts) {
      if (!node) return false;
      if (node.type !== "TSDeclareMethod") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSQualifiedName(node, opts) {
      if (!node) return false;
      if (node.type !== "TSQualifiedName") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSCallSignatureDeclaration(node, opts) {
      if (!node) return false;
      if (node.type !== "TSCallSignatureDeclaration") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSConstructSignatureDeclaration(node, opts) {
      if (!node) return false;
      if (node.type !== "TSConstructSignatureDeclaration") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSPropertySignature(node, opts) {
      if (!node) return false;
      if (node.type !== "TSPropertySignature") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSMethodSignature(node, opts) {
      if (!node) return false;
      if (node.type !== "TSMethodSignature") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSIndexSignature(node, opts) {
      if (!node) return false;
      if (node.type !== "TSIndexSignature") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSAnyKeyword(node, opts) {
      if (!node) return false;
      if (node.type !== "TSAnyKeyword") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSBooleanKeyword(node, opts) {
      if (!node) return false;
      if (node.type !== "TSBooleanKeyword") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSBigIntKeyword(node, opts) {
      if (!node) return false;
      if (node.type !== "TSBigIntKeyword") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSIntrinsicKeyword(node, opts) {
      if (!node) return false;
      if (node.type !== "TSIntrinsicKeyword") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSNeverKeyword(node, opts) {
      if (!node) return false;
      if (node.type !== "TSNeverKeyword") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSNullKeyword(node, opts) {
      if (!node) return false;
      if (node.type !== "TSNullKeyword") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSNumberKeyword(node, opts) {
      if (!node) return false;
      if (node.type !== "TSNumberKeyword") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSObjectKeyword(node, opts) {
      if (!node) return false;
      if (node.type !== "TSObjectKeyword") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSStringKeyword(node, opts) {
      if (!node) return false;
      if (node.type !== "TSStringKeyword") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSSymbolKeyword(node, opts) {
      if (!node) return false;
      if (node.type !== "TSSymbolKeyword") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSUndefinedKeyword(node, opts) {
      if (!node) return false;
      if (node.type !== "TSUndefinedKeyword") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSUnknownKeyword(node, opts) {
      if (!node) return false;
      if (node.type !== "TSUnknownKeyword") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSVoidKeyword(node, opts) {
      if (!node) return false;
      if (node.type !== "TSVoidKeyword") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSThisType(node, opts) {
      if (!node) return false;
      if (node.type !== "TSThisType") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSFunctionType(node, opts) {
      if (!node) return false;
      if (node.type !== "TSFunctionType") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSConstructorType(node, opts) {
      if (!node) return false;
      if (node.type !== "TSConstructorType") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSTypeReference(node, opts) {
      if (!node) return false;
      if (node.type !== "TSTypeReference") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSTypePredicate(node, opts) {
      if (!node) return false;
      if (node.type !== "TSTypePredicate") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSTypeQuery(node, opts) {
      if (!node) return false;
      if (node.type !== "TSTypeQuery") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSTypeLiteral(node, opts) {
      if (!node) return false;
      if (node.type !== "TSTypeLiteral") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSArrayType(node, opts) {
      if (!node) return false;
      if (node.type !== "TSArrayType") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSTupleType(node, opts) {
      if (!node) return false;
      if (node.type !== "TSTupleType") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSOptionalType(node, opts) {
      if (!node) return false;
      if (node.type !== "TSOptionalType") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSRestType(node, opts) {
      if (!node) return false;
      if (node.type !== "TSRestType") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSNamedTupleMember(node, opts) {
      if (!node) return false;
      if (node.type !== "TSNamedTupleMember") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSUnionType(node, opts) {
      if (!node) return false;
      if (node.type !== "TSUnionType") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSIntersectionType(node, opts) {
      if (!node) return false;
      if (node.type !== "TSIntersectionType") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSConditionalType(node, opts) {
      if (!node) return false;
      if (node.type !== "TSConditionalType") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSInferType(node, opts) {
      if (!node) return false;
      if (node.type !== "TSInferType") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSParenthesizedType(node, opts) {
      if (!node) return false;
      if (node.type !== "TSParenthesizedType") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSTypeOperator(node, opts) {
      if (!node) return false;
      if (node.type !== "TSTypeOperator") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSIndexedAccessType(node, opts) {
      if (!node) return false;
      if (node.type !== "TSIndexedAccessType") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSMappedType(node, opts) {
      if (!node) return false;
      if (node.type !== "TSMappedType") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSTemplateLiteralType(node, opts) {
      if (!node) return false;
      if (node.type !== "TSTemplateLiteralType") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSLiteralType(node, opts) {
      if (!node) return false;
      if (node.type !== "TSLiteralType") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSExpressionWithTypeArguments(node, opts) {
      if (!node) return false;
      if (node.type !== "TSExpressionWithTypeArguments") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSInterfaceDeclaration(node, opts) {
      if (!node) return false;
      if (node.type !== "TSInterfaceDeclaration") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSInterfaceBody(node, opts) {
      if (!node) return false;
      if (node.type !== "TSInterfaceBody") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSTypeAliasDeclaration(node, opts) {
      if (!node) return false;
      if (node.type !== "TSTypeAliasDeclaration") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSInstantiationExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "TSInstantiationExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSAsExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "TSAsExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSSatisfiesExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "TSSatisfiesExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSTypeAssertion(node, opts) {
      if (!node) return false;
      if (node.type !== "TSTypeAssertion") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSEnumBody(node, opts) {
      if (!node) return false;
      if (node.type !== "TSEnumBody") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSEnumDeclaration(node, opts) {
      if (!node) return false;
      if (node.type !== "TSEnumDeclaration") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSEnumMember(node, opts) {
      if (!node) return false;
      if (node.type !== "TSEnumMember") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSModuleDeclaration(node, opts) {
      if (!node) return false;
      if (node.type !== "TSModuleDeclaration") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSModuleBlock(node, opts) {
      if (!node) return false;
      if (node.type !== "TSModuleBlock") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSImportType(node, opts) {
      if (!node) return false;
      if (node.type !== "TSImportType") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSImportEqualsDeclaration(node, opts) {
      if (!node) return false;
      if (node.type !== "TSImportEqualsDeclaration") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSExternalModuleReference(node, opts) {
      if (!node) return false;
      if (node.type !== "TSExternalModuleReference") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSNonNullExpression(node, opts) {
      if (!node) return false;
      if (node.type !== "TSNonNullExpression") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSExportAssignment(node, opts) {
      if (!node) return false;
      if (node.type !== "TSExportAssignment") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSNamespaceExportDeclaration(node, opts) {
      if (!node) return false;
      if (node.type !== "TSNamespaceExportDeclaration") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSTypeAnnotation(node, opts) {
      if (!node) return false;
      if (node.type !== "TSTypeAnnotation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSTypeParameterInstantiation(node, opts) {
      if (!node) return false;
      if (node.type !== "TSTypeParameterInstantiation") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSTypeParameterDeclaration(node, opts) {
      if (!node) return false;
      if (node.type !== "TSTypeParameterDeclaration") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSTypeParameter(node, opts) {
      if (!node) return false;
      if (node.type !== "TSTypeParameter") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isStandardized(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "ArrayExpression":
        case "AssignmentExpression":
        case "BinaryExpression":
        case "InterpreterDirective":
        case "Directive":
        case "DirectiveLiteral":
        case "BlockStatement":
        case "BreakStatement":
        case "CallExpression":
        case "CatchClause":
        case "ConditionalExpression":
        case "ContinueStatement":
        case "DebuggerStatement":
        case "DoWhileStatement":
        case "EmptyStatement":
        case "ExpressionStatement":
        case "File":
        case "ForInStatement":
        case "ForStatement":
        case "FunctionDeclaration":
        case "FunctionExpression":
        case "Identifier":
        case "IfStatement":
        case "LabeledStatement":
        case "StringLiteral":
        case "NumericLiteral":
        case "NullLiteral":
        case "BooleanLiteral":
        case "RegExpLiteral":
        case "LogicalExpression":
        case "MemberExpression":
        case "NewExpression":
        case "Program":
        case "ObjectExpression":
        case "ObjectMethod":
        case "ObjectProperty":
        case "RestElement":
        case "ReturnStatement":
        case "SequenceExpression":
        case "ParenthesizedExpression":
        case "SwitchCase":
        case "SwitchStatement":
        case "ThisExpression":
        case "ThrowStatement":
        case "TryStatement":
        case "UnaryExpression":
        case "UpdateExpression":
        case "VariableDeclaration":
        case "VariableDeclarator":
        case "WhileStatement":
        case "WithStatement":
        case "AssignmentPattern":
        case "ArrayPattern":
        case "ArrowFunctionExpression":
        case "ClassBody":
        case "ClassExpression":
        case "ClassDeclaration":
        case "ExportAllDeclaration":
        case "ExportDefaultDeclaration":
        case "ExportNamedDeclaration":
        case "ExportSpecifier":
        case "ForOfStatement":
        case "ImportDeclaration":
        case "ImportDefaultSpecifier":
        case "ImportNamespaceSpecifier":
        case "ImportSpecifier":
        case "ImportExpression":
        case "MetaProperty":
        case "ClassMethod":
        case "ObjectPattern":
        case "SpreadElement":
        case "Super":
        case "TaggedTemplateExpression":
        case "TemplateElement":
        case "TemplateLiteral":
        case "YieldExpression":
        case "AwaitExpression":
        case "Import":
        case "BigIntLiteral":
        case "ExportNamespaceSpecifier":
        case "OptionalMemberExpression":
        case "OptionalCallExpression":
        case "ClassProperty":
        case "ClassAccessorProperty":
        case "ClassPrivateProperty":
        case "ClassPrivateMethod":
        case "PrivateName":
        case "StaticBlock":
          break;
        case "Placeholder":
          switch (node.expectedNode) {
            case "Identifier":
            case "StringLiteral":
            case "BlockStatement":
            case "ClassBody":
              break;
            default:
              return false;
          }
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isExpression(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "ArrayExpression":
        case "AssignmentExpression":
        case "BinaryExpression":
        case "CallExpression":
        case "ConditionalExpression":
        case "FunctionExpression":
        case "Identifier":
        case "StringLiteral":
        case "NumericLiteral":
        case "NullLiteral":
        case "BooleanLiteral":
        case "RegExpLiteral":
        case "LogicalExpression":
        case "MemberExpression":
        case "NewExpression":
        case "ObjectExpression":
        case "SequenceExpression":
        case "ParenthesizedExpression":
        case "ThisExpression":
        case "UnaryExpression":
        case "UpdateExpression":
        case "ArrowFunctionExpression":
        case "ClassExpression":
        case "ImportExpression":
        case "MetaProperty":
        case "Super":
        case "TaggedTemplateExpression":
        case "TemplateLiteral":
        case "YieldExpression":
        case "AwaitExpression":
        case "Import":
        case "BigIntLiteral":
        case "OptionalMemberExpression":
        case "OptionalCallExpression":
        case "TypeCastExpression":
        case "JSXElement":
        case "JSXFragment":
        case "BindExpression":
        case "DoExpression":
        case "RecordExpression":
        case "TupleExpression":
        case "DecimalLiteral":
        case "ModuleExpression":
        case "TopicReference":
        case "PipelineTopicExpression":
        case "PipelineBareFunction":
        case "PipelinePrimaryTopicReference":
        case "TSInstantiationExpression":
        case "TSAsExpression":
        case "TSSatisfiesExpression":
        case "TSTypeAssertion":
        case "TSNonNullExpression":
          break;
        case "Placeholder":
          switch (node.expectedNode) {
            case "Expression":
            case "Identifier":
            case "StringLiteral":
              break;
            default:
              return false;
          }
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isBinary(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "BinaryExpression":
        case "LogicalExpression":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isScopable(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "BlockStatement":
        case "CatchClause":
        case "DoWhileStatement":
        case "ForInStatement":
        case "ForStatement":
        case "FunctionDeclaration":
        case "FunctionExpression":
        case "Program":
        case "ObjectMethod":
        case "SwitchStatement":
        case "WhileStatement":
        case "ArrowFunctionExpression":
        case "ClassExpression":
        case "ClassDeclaration":
        case "ForOfStatement":
        case "ClassMethod":
        case "ClassPrivateMethod":
        case "StaticBlock":
        case "TSModuleBlock":
          break;
        case "Placeholder":
          if (node.expectedNode === "BlockStatement") break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isBlockParent(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "BlockStatement":
        case "CatchClause":
        case "DoWhileStatement":
        case "ForInStatement":
        case "ForStatement":
        case "FunctionDeclaration":
        case "FunctionExpression":
        case "Program":
        case "ObjectMethod":
        case "SwitchStatement":
        case "WhileStatement":
        case "ArrowFunctionExpression":
        case "ForOfStatement":
        case "ClassMethod":
        case "ClassPrivateMethod":
        case "StaticBlock":
        case "TSModuleBlock":
          break;
        case "Placeholder":
          if (node.expectedNode === "BlockStatement") break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isBlock(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "BlockStatement":
        case "Program":
        case "TSModuleBlock":
          break;
        case "Placeholder":
          if (node.expectedNode === "BlockStatement") break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isStatement(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "BlockStatement":
        case "BreakStatement":
        case "ContinueStatement":
        case "DebuggerStatement":
        case "DoWhileStatement":
        case "EmptyStatement":
        case "ExpressionStatement":
        case "ForInStatement":
        case "ForStatement":
        case "FunctionDeclaration":
        case "IfStatement":
        case "LabeledStatement":
        case "ReturnStatement":
        case "SwitchStatement":
        case "ThrowStatement":
        case "TryStatement":
        case "VariableDeclaration":
        case "WhileStatement":
        case "WithStatement":
        case "ClassDeclaration":
        case "ExportAllDeclaration":
        case "ExportDefaultDeclaration":
        case "ExportNamedDeclaration":
        case "ForOfStatement":
        case "ImportDeclaration":
        case "DeclareClass":
        case "DeclareFunction":
        case "DeclareInterface":
        case "DeclareModule":
        case "DeclareModuleExports":
        case "DeclareTypeAlias":
        case "DeclareOpaqueType":
        case "DeclareVariable":
        case "DeclareExportDeclaration":
        case "DeclareExportAllDeclaration":
        case "InterfaceDeclaration":
        case "OpaqueType":
        case "TypeAlias":
        case "EnumDeclaration":
        case "TSDeclareFunction":
        case "TSInterfaceDeclaration":
        case "TSTypeAliasDeclaration":
        case "TSEnumDeclaration":
        case "TSModuleDeclaration":
        case "TSImportEqualsDeclaration":
        case "TSExportAssignment":
        case "TSNamespaceExportDeclaration":
          break;
        case "Placeholder":
          switch (node.expectedNode) {
            case "Statement":
            case "Declaration":
            case "BlockStatement":
              break;
            default:
              return false;
          }
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTerminatorless(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "BreakStatement":
        case "ContinueStatement":
        case "ReturnStatement":
        case "ThrowStatement":
        case "YieldExpression":
        case "AwaitExpression":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isCompletionStatement(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "BreakStatement":
        case "ContinueStatement":
        case "ReturnStatement":
        case "ThrowStatement":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isConditional(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "ConditionalExpression":
        case "IfStatement":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isLoop(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "DoWhileStatement":
        case "ForInStatement":
        case "ForStatement":
        case "WhileStatement":
        case "ForOfStatement":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isWhile(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "DoWhileStatement":
        case "WhileStatement":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isExpressionWrapper(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "ExpressionStatement":
        case "ParenthesizedExpression":
        case "TypeCastExpression":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isFor(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "ForInStatement":
        case "ForStatement":
        case "ForOfStatement":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isForXStatement(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "ForInStatement":
        case "ForOfStatement":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isFunction(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "FunctionDeclaration":
        case "FunctionExpression":
        case "ObjectMethod":
        case "ArrowFunctionExpression":
        case "ClassMethod":
        case "ClassPrivateMethod":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isFunctionParent(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "FunctionDeclaration":
        case "FunctionExpression":
        case "ObjectMethod":
        case "ArrowFunctionExpression":
        case "ClassMethod":
        case "ClassPrivateMethod":
        case "StaticBlock":
        case "TSModuleBlock":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isPureish(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "FunctionDeclaration":
        case "FunctionExpression":
        case "StringLiteral":
        case "NumericLiteral":
        case "NullLiteral":
        case "BooleanLiteral":
        case "RegExpLiteral":
        case "ArrowFunctionExpression":
        case "BigIntLiteral":
        case "DecimalLiteral":
          break;
        case "Placeholder":
          if (node.expectedNode === "StringLiteral") break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isDeclaration(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "FunctionDeclaration":
        case "VariableDeclaration":
        case "ClassDeclaration":
        case "ExportAllDeclaration":
        case "ExportDefaultDeclaration":
        case "ExportNamedDeclaration":
        case "ImportDeclaration":
        case "DeclareClass":
        case "DeclareFunction":
        case "DeclareInterface":
        case "DeclareModule":
        case "DeclareModuleExports":
        case "DeclareTypeAlias":
        case "DeclareOpaqueType":
        case "DeclareVariable":
        case "DeclareExportDeclaration":
        case "DeclareExportAllDeclaration":
        case "InterfaceDeclaration":
        case "OpaqueType":
        case "TypeAlias":
        case "EnumDeclaration":
        case "TSDeclareFunction":
        case "TSInterfaceDeclaration":
        case "TSTypeAliasDeclaration":
        case "TSEnumDeclaration":
        case "TSModuleDeclaration":
        case "TSImportEqualsDeclaration":
          break;
        case "Placeholder":
          if (node.expectedNode === "Declaration") break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isPatternLike(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "Identifier":
        case "RestElement":
        case "AssignmentPattern":
        case "ArrayPattern":
        case "ObjectPattern":
        case "TSAsExpression":
        case "TSSatisfiesExpression":
        case "TSTypeAssertion":
        case "TSNonNullExpression":
          break;
        case "Placeholder":
          switch (node.expectedNode) {
            case "Pattern":
            case "Identifier":
              break;
            default:
              return false;
          }
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isLVal(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "Identifier":
        case "MemberExpression":
        case "RestElement":
        case "AssignmentPattern":
        case "ArrayPattern":
        case "ObjectPattern":
        case "TSParameterProperty":
        case "TSAsExpression":
        case "TSSatisfiesExpression":
        case "TSTypeAssertion":
        case "TSNonNullExpression":
          break;
        case "Placeholder":
          switch (node.expectedNode) {
            case "Pattern":
            case "Identifier":
              break;
            default:
              return false;
          }
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSEntityName(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "Identifier":
        case "TSQualifiedName":
          break;
        case "Placeholder":
          if (node.expectedNode === "Identifier") break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isLiteral(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "StringLiteral":
        case "NumericLiteral":
        case "NullLiteral":
        case "BooleanLiteral":
        case "RegExpLiteral":
        case "TemplateLiteral":
        case "BigIntLiteral":
        case "DecimalLiteral":
          break;
        case "Placeholder":
          if (node.expectedNode === "StringLiteral") break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isImmutable(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "StringLiteral":
        case "NumericLiteral":
        case "NullLiteral":
        case "BooleanLiteral":
        case "BigIntLiteral":
        case "JSXAttribute":
        case "JSXClosingElement":
        case "JSXElement":
        case "JSXExpressionContainer":
        case "JSXSpreadChild":
        case "JSXOpeningElement":
        case "JSXText":
        case "JSXFragment":
        case "JSXOpeningFragment":
        case "JSXClosingFragment":
        case "DecimalLiteral":
          break;
        case "Placeholder":
          if (node.expectedNode === "StringLiteral") break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isUserWhitespacable(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "ObjectMethod":
        case "ObjectProperty":
        case "ObjectTypeInternalSlot":
        case "ObjectTypeCallProperty":
        case "ObjectTypeIndexer":
        case "ObjectTypeProperty":
        case "ObjectTypeSpreadProperty":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isMethod(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "ObjectMethod":
        case "ClassMethod":
        case "ClassPrivateMethod":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isObjectMember(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "ObjectMethod":
        case "ObjectProperty":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isProperty(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "ObjectProperty":
        case "ClassProperty":
        case "ClassAccessorProperty":
        case "ClassPrivateProperty":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isUnaryLike(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "UnaryExpression":
        case "SpreadElement":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isPattern(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "AssignmentPattern":
        case "ArrayPattern":
        case "ObjectPattern":
          break;
        case "Placeholder":
          if (node.expectedNode === "Pattern") break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isClass(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "ClassExpression":
        case "ClassDeclaration":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isImportOrExportDeclaration(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "ExportAllDeclaration":
        case "ExportDefaultDeclaration":
        case "ExportNamedDeclaration":
        case "ImportDeclaration":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isExportDeclaration(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "ExportAllDeclaration":
        case "ExportDefaultDeclaration":
        case "ExportNamedDeclaration":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isModuleSpecifier(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "ExportSpecifier":
        case "ImportDefaultSpecifier":
        case "ImportNamespaceSpecifier":
        case "ImportSpecifier":
        case "ExportNamespaceSpecifier":
        case "ExportDefaultSpecifier":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isAccessor(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "ClassAccessorProperty":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isPrivate(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "ClassPrivateProperty":
        case "ClassPrivateMethod":
        case "PrivateName":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isFlow(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "AnyTypeAnnotation":
        case "ArrayTypeAnnotation":
        case "BooleanTypeAnnotation":
        case "BooleanLiteralTypeAnnotation":
        case "NullLiteralTypeAnnotation":
        case "ClassImplements":
        case "DeclareClass":
        case "DeclareFunction":
        case "DeclareInterface":
        case "DeclareModule":
        case "DeclareModuleExports":
        case "DeclareTypeAlias":
        case "DeclareOpaqueType":
        case "DeclareVariable":
        case "DeclareExportDeclaration":
        case "DeclareExportAllDeclaration":
        case "DeclaredPredicate":
        case "ExistsTypeAnnotation":
        case "FunctionTypeAnnotation":
        case "FunctionTypeParam":
        case "GenericTypeAnnotation":
        case "InferredPredicate":
        case "InterfaceExtends":
        case "InterfaceDeclaration":
        case "InterfaceTypeAnnotation":
        case "IntersectionTypeAnnotation":
        case "MixedTypeAnnotation":
        case "EmptyTypeAnnotation":
        case "NullableTypeAnnotation":
        case "NumberLiteralTypeAnnotation":
        case "NumberTypeAnnotation":
        case "ObjectTypeAnnotation":
        case "ObjectTypeInternalSlot":
        case "ObjectTypeCallProperty":
        case "ObjectTypeIndexer":
        case "ObjectTypeProperty":
        case "ObjectTypeSpreadProperty":
        case "OpaqueType":
        case "QualifiedTypeIdentifier":
        case "StringLiteralTypeAnnotation":
        case "StringTypeAnnotation":
        case "SymbolTypeAnnotation":
        case "ThisTypeAnnotation":
        case "TupleTypeAnnotation":
        case "TypeofTypeAnnotation":
        case "TypeAlias":
        case "TypeAnnotation":
        case "TypeCastExpression":
        case "TypeParameter":
        case "TypeParameterDeclaration":
        case "TypeParameterInstantiation":
        case "UnionTypeAnnotation":
        case "Variance":
        case "VoidTypeAnnotation":
        case "EnumDeclaration":
        case "EnumBooleanBody":
        case "EnumNumberBody":
        case "EnumStringBody":
        case "EnumSymbolBody":
        case "EnumBooleanMember":
        case "EnumNumberMember":
        case "EnumStringMember":
        case "EnumDefaultedMember":
        case "IndexedAccessType":
        case "OptionalIndexedAccessType":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isFlowType(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "AnyTypeAnnotation":
        case "ArrayTypeAnnotation":
        case "BooleanTypeAnnotation":
        case "BooleanLiteralTypeAnnotation":
        case "NullLiteralTypeAnnotation":
        case "ExistsTypeAnnotation":
        case "FunctionTypeAnnotation":
        case "GenericTypeAnnotation":
        case "InterfaceTypeAnnotation":
        case "IntersectionTypeAnnotation":
        case "MixedTypeAnnotation":
        case "EmptyTypeAnnotation":
        case "NullableTypeAnnotation":
        case "NumberLiteralTypeAnnotation":
        case "NumberTypeAnnotation":
        case "ObjectTypeAnnotation":
        case "StringLiteralTypeAnnotation":
        case "StringTypeAnnotation":
        case "SymbolTypeAnnotation":
        case "ThisTypeAnnotation":
        case "TupleTypeAnnotation":
        case "TypeofTypeAnnotation":
        case "UnionTypeAnnotation":
        case "VoidTypeAnnotation":
        case "IndexedAccessType":
        case "OptionalIndexedAccessType":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isFlowBaseAnnotation(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "AnyTypeAnnotation":
        case "BooleanTypeAnnotation":
        case "NullLiteralTypeAnnotation":
        case "MixedTypeAnnotation":
        case "EmptyTypeAnnotation":
        case "NumberTypeAnnotation":
        case "StringTypeAnnotation":
        case "SymbolTypeAnnotation":
        case "ThisTypeAnnotation":
        case "VoidTypeAnnotation":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isFlowDeclaration(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "DeclareClass":
        case "DeclareFunction":
        case "DeclareInterface":
        case "DeclareModule":
        case "DeclareModuleExports":
        case "DeclareTypeAlias":
        case "DeclareOpaqueType":
        case "DeclareVariable":
        case "DeclareExportDeclaration":
        case "DeclareExportAllDeclaration":
        case "InterfaceDeclaration":
        case "OpaqueType":
        case "TypeAlias":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isFlowPredicate(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "DeclaredPredicate":
        case "InferredPredicate":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isEnumBody(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "EnumBooleanBody":
        case "EnumNumberBody":
        case "EnumStringBody":
        case "EnumSymbolBody":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isEnumMember(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "EnumBooleanMember":
        case "EnumNumberMember":
        case "EnumStringMember":
        case "EnumDefaultedMember":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isJSX(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "JSXAttribute":
        case "JSXClosingElement":
        case "JSXElement":
        case "JSXEmptyExpression":
        case "JSXExpressionContainer":
        case "JSXSpreadChild":
        case "JSXIdentifier":
        case "JSXMemberExpression":
        case "JSXNamespacedName":
        case "JSXOpeningElement":
        case "JSXSpreadAttribute":
        case "JSXText":
        case "JSXFragment":
        case "JSXOpeningFragment":
        case "JSXClosingFragment":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isMiscellaneous(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "Noop":
        case "Placeholder":
        case "V8IntrinsicIdentifier":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTypeScript(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "TSParameterProperty":
        case "TSDeclareFunction":
        case "TSDeclareMethod":
        case "TSQualifiedName":
        case "TSCallSignatureDeclaration":
        case "TSConstructSignatureDeclaration":
        case "TSPropertySignature":
        case "TSMethodSignature":
        case "TSIndexSignature":
        case "TSAnyKeyword":
        case "TSBooleanKeyword":
        case "TSBigIntKeyword":
        case "TSIntrinsicKeyword":
        case "TSNeverKeyword":
        case "TSNullKeyword":
        case "TSNumberKeyword":
        case "TSObjectKeyword":
        case "TSStringKeyword":
        case "TSSymbolKeyword":
        case "TSUndefinedKeyword":
        case "TSUnknownKeyword":
        case "TSVoidKeyword":
        case "TSThisType":
        case "TSFunctionType":
        case "TSConstructorType":
        case "TSTypeReference":
        case "TSTypePredicate":
        case "TSTypeQuery":
        case "TSTypeLiteral":
        case "TSArrayType":
        case "TSTupleType":
        case "TSOptionalType":
        case "TSRestType":
        case "TSNamedTupleMember":
        case "TSUnionType":
        case "TSIntersectionType":
        case "TSConditionalType":
        case "TSInferType":
        case "TSParenthesizedType":
        case "TSTypeOperator":
        case "TSIndexedAccessType":
        case "TSMappedType":
        case "TSTemplateLiteralType":
        case "TSLiteralType":
        case "TSExpressionWithTypeArguments":
        case "TSInterfaceDeclaration":
        case "TSInterfaceBody":
        case "TSTypeAliasDeclaration":
        case "TSInstantiationExpression":
        case "TSAsExpression":
        case "TSSatisfiesExpression":
        case "TSTypeAssertion":
        case "TSEnumBody":
        case "TSEnumDeclaration":
        case "TSEnumMember":
        case "TSModuleDeclaration":
        case "TSModuleBlock":
        case "TSImportType":
        case "TSImportEqualsDeclaration":
        case "TSExternalModuleReference":
        case "TSNonNullExpression":
        case "TSExportAssignment":
        case "TSNamespaceExportDeclaration":
        case "TSTypeAnnotation":
        case "TSTypeParameterInstantiation":
        case "TSTypeParameterDeclaration":
        case "TSTypeParameter":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSTypeElement(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "TSCallSignatureDeclaration":
        case "TSConstructSignatureDeclaration":
        case "TSPropertySignature":
        case "TSMethodSignature":
        case "TSIndexSignature":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSType(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "TSAnyKeyword":
        case "TSBooleanKeyword":
        case "TSBigIntKeyword":
        case "TSIntrinsicKeyword":
        case "TSNeverKeyword":
        case "TSNullKeyword":
        case "TSNumberKeyword":
        case "TSObjectKeyword":
        case "TSStringKeyword":
        case "TSSymbolKeyword":
        case "TSUndefinedKeyword":
        case "TSUnknownKeyword":
        case "TSVoidKeyword":
        case "TSThisType":
        case "TSFunctionType":
        case "TSConstructorType":
        case "TSTypeReference":
        case "TSTypePredicate":
        case "TSTypeQuery":
        case "TSTypeLiteral":
        case "TSArrayType":
        case "TSTupleType":
        case "TSOptionalType":
        case "TSRestType":
        case "TSUnionType":
        case "TSIntersectionType":
        case "TSConditionalType":
        case "TSInferType":
        case "TSParenthesizedType":
        case "TSTypeOperator":
        case "TSIndexedAccessType":
        case "TSMappedType":
        case "TSTemplateLiteralType":
        case "TSLiteralType":
        case "TSExpressionWithTypeArguments":
        case "TSImportType":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isTSBaseType(node, opts) {
      if (!node) return false;
      switch (node.type) {
        case "TSAnyKeyword":
        case "TSBooleanKeyword":
        case "TSBigIntKeyword":
        case "TSIntrinsicKeyword":
        case "TSNeverKeyword":
        case "TSNullKeyword":
        case "TSNumberKeyword":
        case "TSObjectKeyword":
        case "TSStringKeyword":
        case "TSSymbolKeyword":
        case "TSUndefinedKeyword":
        case "TSUnknownKeyword":
        case "TSVoidKeyword":
        case "TSThisType":
        case "TSTemplateLiteralType":
        case "TSLiteralType":
          break;
        default:
          return false;
      }
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isNumberLiteral(node, opts) {
      (0, _deprecationWarning.default)("isNumberLiteral", "isNumericLiteral");
      if (!node) return false;
      if (node.type !== "NumberLiteral") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isRegexLiteral(node, opts) {
      (0, _deprecationWarning.default)("isRegexLiteral", "isRegExpLiteral");
      if (!node) return false;
      if (node.type !== "RegexLiteral") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isRestProperty(node, opts) {
      (0, _deprecationWarning.default)("isRestProperty", "isRestElement");
      if (!node) return false;
      if (node.type !== "RestProperty") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isSpreadProperty(node, opts) {
      (0, _deprecationWarning.default)("isSpreadProperty", "isSpreadElement");
      if (!node) return false;
      if (node.type !== "SpreadProperty") return false;
      return opts == null || (0, _shallowEqual.default)(node, opts);
    }
    function isModuleDeclaration(node, opts) {
      (0, _deprecationWarning.default)("isModuleDeclaration", "isImportOrExportDeclaration");
      return isImportOrExportDeclaration(node, opts);
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/matchesPattern.js
var require_matchesPattern = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/matchesPattern.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = matchesPattern;
    var _index = require_generated();
    function matchesPattern(member, match, allowPartial) {
      if (!(0, _index.isMemberExpression)(member)) return false;
      const parts = Array.isArray(match) ? match : match.split(".");
      const nodes = [];
      let node;
      for (node = member; (0, _index.isMemberExpression)(node); node = node.object) {
        nodes.push(node.property);
      }
      nodes.push(node);
      if (nodes.length < parts.length) return false;
      if (!allowPartial && nodes.length > parts.length) return false;
      for (let i2 = 0, j2 = nodes.length - 1; i2 < parts.length; i2++, j2--) {
        const node2 = nodes[j2];
        let value2;
        if ((0, _index.isIdentifier)(node2)) {
          value2 = node2.name;
        } else if ((0, _index.isStringLiteral)(node2)) {
          value2 = node2.value;
        } else if ((0, _index.isThisExpression)(node2)) {
          value2 = "this";
        } else {
          return false;
        }
        if (parts[i2] !== value2) return false;
      }
      return true;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js
var require_buildMatchMemberExpression = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = buildMatchMemberExpression;
    var _matchesPattern = require_matchesPattern();
    function buildMatchMemberExpression(match, allowPartial) {
      const parts = match.split(".");
      return (member) => (0, _matchesPattern.default)(member, parts, allowPartial);
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/react/isReactComponent.js
var require_isReactComponent = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/react/isReactComponent.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _buildMatchMemberExpression = require_buildMatchMemberExpression();
    var isReactComponent = (0, _buildMatchMemberExpression.default)("React.Component");
    var _default = exports.default = isReactComponent;
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/react/isCompatTag.js
var require_isCompatTag = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/react/isCompatTag.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isCompatTag;
    function isCompatTag(tagName) {
      return !!tagName && /^[a-z]/.test(tagName);
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isType.js
var require_isType = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isType.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isType;
    var _index = require_definitions();
    function isType(nodeType, targetType) {
      if (nodeType === targetType) return true;
      if (nodeType == null) return false;
      if (_index.ALIAS_KEYS[targetType]) return false;
      const aliases = _index.FLIPPED_ALIAS_KEYS[targetType];
      if (aliases) {
        if (aliases[0] === nodeType) return true;
        for (const alias of aliases) {
          if (nodeType === alias) return true;
        }
      }
      return false;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isPlaceholderType.js
var require_isPlaceholderType = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isPlaceholderType.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isPlaceholderType;
    var _index = require_definitions();
    function isPlaceholderType(placeholderType, targetType) {
      if (placeholderType === targetType) return true;
      const aliases = _index.PLACEHOLDERS_ALIAS[placeholderType];
      if (aliases) {
        for (const alias of aliases) {
          if (targetType === alias) return true;
        }
      }
      return false;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/is.js
var require_is = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/is.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = is;
    var _shallowEqual = require_shallowEqual();
    var _isType = require_isType();
    var _isPlaceholderType = require_isPlaceholderType();
    var _index = require_definitions();
    function is(type, node, opts) {
      if (!node) return false;
      const matches = (0, _isType.default)(node.type, type);
      if (!matches) {
        if (!opts && node.type === "Placeholder" && type in _index.FLIPPED_ALIAS_KEYS) {
          return (0, _isPlaceholderType.default)(node.expectedNode, type);
        }
        return false;
      }
      if (opts === void 0) {
        return true;
      } else {
        return (0, _shallowEqual.default)(node, opts);
      }
    }
  }
});

// ../../.yarn/cache/@babel-helper-validator-identifier-npm-7.25.9-56d19794d1-4fc6f83017.zip/node_modules/@babel/helper-validator-identifier/lib/identifier.js
var require_identifier2 = __commonJS({
  "../../.yarn/cache/@babel-helper-validator-identifier-npm-7.25.9-56d19794d1-4fc6f83017.zip/node_modules/@babel/helper-validator-identifier/lib/identifier.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isIdentifierChar = isIdentifierChar;
    exports.isIdentifierName = isIdentifierName;
    exports.isIdentifierStart = isIdentifierStart;
    var nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
    var nonASCIIidentifierChars = "\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0897-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65";
    var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
    var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
    nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
    var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 4, 51, 13, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 39, 27, 10, 22, 251, 41, 7, 1, 17, 2, 60, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 31, 9, 2, 0, 3, 0, 2, 37, 2, 0, 26, 0, 2, 0, 45, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 200, 32, 32, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 26, 3994, 6, 582, 6842, 29, 1763, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 433, 44, 212, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 42, 9, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 229, 29, 3, 0, 496, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];
    var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 7, 9, 32, 4, 318, 1, 80, 3, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 68, 8, 2, 0, 3, 0, 2, 3, 2, 4, 2, 0, 15, 1, 83, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 7, 19, 58, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 343, 9, 54, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 10, 5350, 0, 7, 14, 11465, 27, 2343, 9, 87, 9, 39, 4, 60, 6, 26, 9, 535, 9, 470, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4178, 9, 519, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 245, 1, 2, 9, 726, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
    function isInAstralSet(code, set) {
      let pos = 65536;
      for (let i2 = 0, length = set.length; i2 < length; i2 += 2) {
        pos += set[i2];
        if (pos > code) return false;
        pos += set[i2 + 1];
        if (pos >= code) return true;
      }
      return false;
    }
    function isIdentifierStart(code) {
      if (code < 65) return code === 36;
      if (code <= 90) return true;
      if (code < 97) return code === 95;
      if (code <= 122) return true;
      if (code <= 65535) {
        return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
      }
      return isInAstralSet(code, astralIdentifierStartCodes);
    }
    function isIdentifierChar(code) {
      if (code < 48) return code === 36;
      if (code < 58) return true;
      if (code < 65) return false;
      if (code <= 90) return true;
      if (code < 97) return code === 95;
      if (code <= 122) return true;
      if (code <= 65535) {
        return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
      }
      return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
    }
    function isIdentifierName(name) {
      let isFirst = true;
      for (let i2 = 0; i2 < name.length; i2++) {
        let cp = name.charCodeAt(i2);
        if ((cp & 64512) === 55296 && i2 + 1 < name.length) {
          const trail = name.charCodeAt(++i2);
          if ((trail & 64512) === 56320) {
            cp = 65536 + ((cp & 1023) << 10) + (trail & 1023);
          }
        }
        if (isFirst) {
          isFirst = false;
          if (!isIdentifierStart(cp)) {
            return false;
          }
        } else if (!isIdentifierChar(cp)) {
          return false;
        }
      }
      return !isFirst;
    }
  }
});

// ../../.yarn/cache/@babel-helper-validator-identifier-npm-7.25.9-56d19794d1-4fc6f83017.zip/node_modules/@babel/helper-validator-identifier/lib/keyword.js
var require_keyword2 = __commonJS({
  "../../.yarn/cache/@babel-helper-validator-identifier-npm-7.25.9-56d19794d1-4fc6f83017.zip/node_modules/@babel/helper-validator-identifier/lib/keyword.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isKeyword = isKeyword;
    exports.isReservedWord = isReservedWord;
    exports.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord;
    exports.isStrictBindReservedWord = isStrictBindReservedWord;
    exports.isStrictReservedWord = isStrictReservedWord;
    var reservedWords = {
      keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
      strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
      strictBind: ["eval", "arguments"]
    };
    var keywords = new Set(reservedWords.keyword);
    var reservedWordsStrictSet = new Set(reservedWords.strict);
    var reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
    function isReservedWord(word, inModule) {
      return inModule && word === "await" || word === "enum";
    }
    function isStrictReservedWord(word, inModule) {
      return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
    }
    function isStrictBindOnlyReservedWord(word) {
      return reservedWordsStrictBindSet.has(word);
    }
    function isStrictBindReservedWord(word, inModule) {
      return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
    }
    function isKeyword(word) {
      return keywords.has(word);
    }
  }
});

// ../../.yarn/cache/@babel-helper-validator-identifier-npm-7.25.9-56d19794d1-4fc6f83017.zip/node_modules/@babel/helper-validator-identifier/lib/index.js
var require_lib5 = __commonJS({
  "../../.yarn/cache/@babel-helper-validator-identifier-npm-7.25.9-56d19794d1-4fc6f83017.zip/node_modules/@babel/helper-validator-identifier/lib/index.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "isIdentifierChar", {
      enumerable: true,
      get: function() {
        return _identifier.isIdentifierChar;
      }
    });
    Object.defineProperty(exports, "isIdentifierName", {
      enumerable: true,
      get: function() {
        return _identifier.isIdentifierName;
      }
    });
    Object.defineProperty(exports, "isIdentifierStart", {
      enumerable: true,
      get: function() {
        return _identifier.isIdentifierStart;
      }
    });
    Object.defineProperty(exports, "isKeyword", {
      enumerable: true,
      get: function() {
        return _keyword.isKeyword;
      }
    });
    Object.defineProperty(exports, "isReservedWord", {
      enumerable: true,
      get: function() {
        return _keyword.isReservedWord;
      }
    });
    Object.defineProperty(exports, "isStrictBindOnlyReservedWord", {
      enumerable: true,
      get: function() {
        return _keyword.isStrictBindOnlyReservedWord;
      }
    });
    Object.defineProperty(exports, "isStrictBindReservedWord", {
      enumerable: true,
      get: function() {
        return _keyword.isStrictBindReservedWord;
      }
    });
    Object.defineProperty(exports, "isStrictReservedWord", {
      enumerable: true,
      get: function() {
        return _keyword.isStrictReservedWord;
      }
    });
    var _identifier = require_identifier2();
    var _keyword = require_keyword2();
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isValidIdentifier.js
var require_isValidIdentifier = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isValidIdentifier.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isValidIdentifier;
    var _helperValidatorIdentifier = require_lib5();
    function isValidIdentifier(name, reserved = true) {
      if (typeof name !== "string") return false;
      if (reserved) {
        if ((0, _helperValidatorIdentifier.isKeyword)(name) || (0, _helperValidatorIdentifier.isStrictReservedWord)(name, true)) {
          return false;
        }
      }
      return (0, _helperValidatorIdentifier.isIdentifierName)(name);
    }
  }
});

// ../../.yarn/cache/@babel-helper-string-parser-npm-7.25.9-dbfd15121a-7244b45d8e.zip/node_modules/@babel/helper-string-parser/lib/index.js
var require_lib6 = __commonJS({
  "../../.yarn/cache/@babel-helper-string-parser-npm-7.25.9-dbfd15121a-7244b45d8e.zip/node_modules/@babel/helper-string-parser/lib/index.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.readCodePoint = readCodePoint;
    exports.readInt = readInt;
    exports.readStringContents = readStringContents;
    var _isDigit = function isDigit(code) {
      return code >= 48 && code <= 57;
    };
    var forbiddenNumericSeparatorSiblings = {
      decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]),
      hex: /* @__PURE__ */ new Set([46, 88, 95, 120])
    };
    var isAllowedNumericSeparatorSibling = {
      bin: (ch) => ch === 48 || ch === 49,
      oct: (ch) => ch >= 48 && ch <= 55,
      dec: (ch) => ch >= 48 && ch <= 57,
      hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102
    };
    function readStringContents(type, input, pos, lineStart, curLine, errors) {
      const initialPos = pos;
      const initialLineStart = lineStart;
      const initialCurLine = curLine;
      let out = "";
      let firstInvalidLoc = null;
      let chunkStart = pos;
      const {
        length
      } = input;
      for (; ; ) {
        if (pos >= length) {
          errors.unterminated(initialPos, initialLineStart, initialCurLine);
          out += input.slice(chunkStart, pos);
          break;
        }
        const ch = input.charCodeAt(pos);
        if (isStringEnd(type, ch, input, pos)) {
          out += input.slice(chunkStart, pos);
          break;
        }
        if (ch === 92) {
          out += input.slice(chunkStart, pos);
          const res = readEscapedChar(input, pos, lineStart, curLine, type === "template", errors);
          if (res.ch === null && !firstInvalidLoc) {
            firstInvalidLoc = {
              pos,
              lineStart,
              curLine
            };
          } else {
            out += res.ch;
          }
          ({
            pos,
            lineStart,
            curLine
          } = res);
          chunkStart = pos;
        } else if (ch === 8232 || ch === 8233) {
          ++pos;
          ++curLine;
          lineStart = pos;
        } else if (ch === 10 || ch === 13) {
          if (type === "template") {
            out += input.slice(chunkStart, pos) + "\n";
            ++pos;
            if (ch === 13 && input.charCodeAt(pos) === 10) {
              ++pos;
            }
            ++curLine;
            chunkStart = lineStart = pos;
          } else {
            errors.unterminated(initialPos, initialLineStart, initialCurLine);
          }
        } else {
          ++pos;
        }
      }
      return {
        pos,
        str: out,
        firstInvalidLoc,
        lineStart,
        curLine,
        containsInvalid: !!firstInvalidLoc
      };
    }
    function isStringEnd(type, ch, input, pos) {
      if (type === "template") {
        return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;
      }
      return ch === (type === "double" ? 34 : 39);
    }
    function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
      const throwOnInvalid = !inTemplate;
      pos++;
      const res = (ch2) => ({
        pos,
        ch: ch2,
        lineStart,
        curLine
      });
      const ch = input.charCodeAt(pos++);
      switch (ch) {
        case 110:
          return res("\n");
        case 114:
          return res("\r");
        case 120: {
          let code;
          ({
            code,
            pos
          } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors));
          return res(code === null ? null : String.fromCharCode(code));
        }
        case 117: {
          let code;
          ({
            code,
            pos
          } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors));
          return res(code === null ? null : String.fromCodePoint(code));
        }
        case 116:
          return res("	");
        case 98:
          return res("\b");
        case 118:
          return res("\v");
        case 102:
          return res("\f");
        case 13:
          if (input.charCodeAt(pos) === 10) {
            ++pos;
          }
        case 10:
          lineStart = pos;
          ++curLine;
        case 8232:
        case 8233:
          return res("");
        case 56:
        case 57:
          if (inTemplate) {
            return res(null);
          } else {
            errors.strictNumericEscape(pos - 1, lineStart, curLine);
          }
        default:
          if (ch >= 48 && ch <= 55) {
            const startPos = pos - 1;
            const match = /^[0-7]+/.exec(input.slice(startPos, pos + 2));
            let octalStr = match[0];
            let octal = parseInt(octalStr, 8);
            if (octal > 255) {
              octalStr = octalStr.slice(0, -1);
              octal = parseInt(octalStr, 8);
            }
            pos += octalStr.length - 1;
            const next = input.charCodeAt(pos);
            if (octalStr !== "0" || next === 56 || next === 57) {
              if (inTemplate) {
                return res(null);
              } else {
                errors.strictNumericEscape(startPos, lineStart, curLine);
              }
            }
            return res(String.fromCharCode(octal));
          }
          return res(String.fromCharCode(ch));
      }
    }
    function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
      const initialPos = pos;
      let n2;
      ({
        n: n2,
        pos
      } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid));
      if (n2 === null) {
        if (throwOnInvalid) {
          errors.invalidEscapeSequence(initialPos, lineStart, curLine);
        } else {
          pos = initialPos - 1;
        }
      }
      return {
        code: n2,
        pos
      };
    }
    function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {
      const start = pos;
      const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;
      const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
      let invalid = false;
      let total = 0;
      for (let i2 = 0, e2 = len == null ? Infinity : len; i2 < e2; ++i2) {
        const code = input.charCodeAt(pos);
        let val;
        if (code === 95 && allowNumSeparator !== "bail") {
          const prev = input.charCodeAt(pos - 1);
          const next = input.charCodeAt(pos + 1);
          if (!allowNumSeparator) {
            if (bailOnError) return {
              n: null,
              pos
            };
            errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
          } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
            if (bailOnError) return {
              n: null,
              pos
            };
            errors.unexpectedNumericSeparator(pos, lineStart, curLine);
          }
          ++pos;
          continue;
        }
        if (code >= 97) {
          val = code - 97 + 10;
        } else if (code >= 65) {
          val = code - 65 + 10;
        } else if (_isDigit(code)) {
          val = code - 48;
        } else {
          val = Infinity;
        }
        if (val >= radix) {
          if (val <= 9 && bailOnError) {
            return {
              n: null,
              pos
            };
          } else if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {
            val = 0;
          } else if (forceLen) {
            val = 0;
            invalid = true;
          } else {
            break;
          }
        }
        ++pos;
        total = total * radix + val;
      }
      if (pos === start || len != null && pos - start !== len || invalid) {
        return {
          n: null,
          pos
        };
      }
      return {
        n: total,
        pos
      };
    }
    function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
      const ch = input.charCodeAt(pos);
      let code;
      if (ch === 123) {
        ++pos;
        ({
          code,
          pos
        } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors));
        ++pos;
        if (code !== null && code > 1114111) {
          if (throwOnInvalid) {
            errors.invalidCodePoint(pos, lineStart, curLine);
          } else {
            return {
              code: null,
              pos
            };
          }
        }
      } else {
        ({
          code,
          pos
        } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
      }
      return {
        code,
        pos
      };
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/constants/index.js
var require_constants = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/constants/index.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UPDATE_OPERATORS = exports.UNARY_OPERATORS = exports.STRING_UNARY_OPERATORS = exports.STATEMENT_OR_BLOCK_KEYS = exports.NUMBER_UNARY_OPERATORS = exports.NUMBER_BINARY_OPERATORS = exports.NOT_LOCAL_BINDING = exports.LOGICAL_OPERATORS = exports.INHERIT_KEYS = exports.FOR_INIT_KEYS = exports.FLATTENABLE_KEYS = exports.EQUALITY_BINARY_OPERATORS = exports.COMPARISON_BINARY_OPERATORS = exports.COMMENT_KEYS = exports.BOOLEAN_UNARY_OPERATORS = exports.BOOLEAN_NUMBER_BINARY_OPERATORS = exports.BOOLEAN_BINARY_OPERATORS = exports.BLOCK_SCOPED_SYMBOL = exports.BINARY_OPERATORS = exports.ASSIGNMENT_OPERATORS = void 0;
    var STATEMENT_OR_BLOCK_KEYS = exports.STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];
    var FLATTENABLE_KEYS = exports.FLATTENABLE_KEYS = ["body", "expressions"];
    var FOR_INIT_KEYS = exports.FOR_INIT_KEYS = ["left", "init"];
    var COMMENT_KEYS = exports.COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];
    var LOGICAL_OPERATORS = exports.LOGICAL_OPERATORS = ["||", "&&", "??"];
    var UPDATE_OPERATORS = exports.UPDATE_OPERATORS = ["++", "--"];
    var BOOLEAN_NUMBER_BINARY_OPERATORS = exports.BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];
    var EQUALITY_BINARY_OPERATORS = exports.EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];
    var COMPARISON_BINARY_OPERATORS = exports.COMPARISON_BINARY_OPERATORS = [...EQUALITY_BINARY_OPERATORS, "in", "instanceof"];
    var BOOLEAN_BINARY_OPERATORS = exports.BOOLEAN_BINARY_OPERATORS = [...COMPARISON_BINARY_OPERATORS, ...BOOLEAN_NUMBER_BINARY_OPERATORS];
    var NUMBER_BINARY_OPERATORS = exports.NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"];
    var BINARY_OPERATORS = exports.BINARY_OPERATORS = ["+", ...NUMBER_BINARY_OPERATORS, ...BOOLEAN_BINARY_OPERATORS, "|>"];
    var ASSIGNMENT_OPERATORS = exports.ASSIGNMENT_OPERATORS = ["=", "+=", ...NUMBER_BINARY_OPERATORS.map((op) => op + "="), ...LOGICAL_OPERATORS.map((op) => op + "=")];
    var BOOLEAN_UNARY_OPERATORS = exports.BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
    var NUMBER_UNARY_OPERATORS = exports.NUMBER_UNARY_OPERATORS = ["+", "-", "~"];
    var STRING_UNARY_OPERATORS = exports.STRING_UNARY_OPERATORS = ["typeof"];
    var UNARY_OPERATORS = exports.UNARY_OPERATORS = ["void", "throw", ...BOOLEAN_UNARY_OPERATORS, ...NUMBER_UNARY_OPERATORS, ...STRING_UNARY_OPERATORS];
    var INHERIT_KEYS = exports.INHERIT_KEYS = {
      optional: ["typeAnnotation", "typeParameters", "returnType"],
      force: ["start", "loc", "end"]
    };
    var BLOCK_SCOPED_SYMBOL = exports.BLOCK_SCOPED_SYMBOL = Symbol.for("var used to be block scoped");
    var NOT_LOCAL_BINDING = exports.NOT_LOCAL_BINDING = Symbol.for("should not be considered a local binding");
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/definitions/utils.js
var require_utils = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/definitions/utils.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.VISITOR_KEYS = exports.NODE_PARENT_VALIDATIONS = exports.NODE_FIELDS = exports.FLIPPED_ALIAS_KEYS = exports.DEPRECATED_KEYS = exports.BUILDER_KEYS = exports.ALIAS_KEYS = void 0;
    exports.arrayOf = arrayOf;
    exports.arrayOfType = arrayOfType;
    exports.assertEach = assertEach;
    exports.assertNodeOrValueType = assertNodeOrValueType;
    exports.assertNodeType = assertNodeType;
    exports.assertOneOf = assertOneOf;
    exports.assertOptionalChainStart = assertOptionalChainStart;
    exports.assertShape = assertShape;
    exports.assertValueType = assertValueType;
    exports.chain = chain;
    exports.default = defineType;
    exports.defineAliasedType = defineAliasedType;
    exports.validate = validate;
    exports.validateArrayOfType = validateArrayOfType;
    exports.validateOptional = validateOptional;
    exports.validateOptionalType = validateOptionalType;
    exports.validateType = validateType;
    var _is = require_is();
    var _validate = require_validate();
    var VISITOR_KEYS = exports.VISITOR_KEYS = {};
    var ALIAS_KEYS = exports.ALIAS_KEYS = {};
    var FLIPPED_ALIAS_KEYS = exports.FLIPPED_ALIAS_KEYS = {};
    var NODE_FIELDS = exports.NODE_FIELDS = {};
    var BUILDER_KEYS = exports.BUILDER_KEYS = {};
    var DEPRECATED_KEYS = exports.DEPRECATED_KEYS = {};
    var NODE_PARENT_VALIDATIONS = exports.NODE_PARENT_VALIDATIONS = {};
    function getType(val) {
      if (Array.isArray(val)) {
        return "array";
      } else if (val === null) {
        return "null";
      } else {
        return typeof val;
      }
    }
    function validate(validate2) {
      return {
        validate: validate2
      };
    }
    function validateType(...typeNames) {
      return validate(assertNodeType(...typeNames));
    }
    function validateOptional(validate2) {
      return {
        validate: validate2,
        optional: true
      };
    }
    function validateOptionalType(...typeNames) {
      return {
        validate: assertNodeType(...typeNames),
        optional: true
      };
    }
    function arrayOf(elementType) {
      return chain(assertValueType("array"), assertEach(elementType));
    }
    function arrayOfType(...typeNames) {
      return arrayOf(assertNodeType(...typeNames));
    }
    function validateArrayOfType(...typeNames) {
      return validate(arrayOfType(...typeNames));
    }
    function assertEach(callback) {
      const childValidator = process.env.BABEL_TYPES_8_BREAKING ? _validate.validateChild : () => {
      };
      function validator(node, key, val) {
        if (!Array.isArray(val)) return;
        for (let i2 = 0; i2 < val.length; i2++) {
          const subkey = `${key}[${i2}]`;
          const v = val[i2];
          callback(node, subkey, v);
          childValidator(node, subkey, v);
        }
      }
      validator.each = callback;
      return validator;
    }
    function assertOneOf(...values) {
      function validate2(node, key, val) {
        if (!values.includes(val)) {
          throw new TypeError(`Property ${key} expected value to be one of ${JSON.stringify(values)} but got ${JSON.stringify(val)}`);
        }
      }
      validate2.oneOf = values;
      return validate2;
    }
    function assertNodeType(...types) {
      function validate2(node, key, val) {
        for (const type of types) {
          if ((0, _is.default)(type, val)) {
            (0, _validate.validateChild)(node, key, val);
            return;
          }
        }
        throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val == null ? void 0 : val.type)}`);
      }
      validate2.oneOfNodeTypes = types;
      return validate2;
    }
    function assertNodeOrValueType(...types) {
      function validate2(node, key, val) {
        for (const type of types) {
          if (getType(val) === type || (0, _is.default)(type, val)) {
            (0, _validate.validateChild)(node, key, val);
            return;
          }
        }
        throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val == null ? void 0 : val.type)}`);
      }
      validate2.oneOfNodeOrValueTypes = types;
      return validate2;
    }
    function assertValueType(type) {
      function validate2(node, key, val) {
        const valid = getType(val) === type;
        if (!valid) {
          throw new TypeError(`Property ${key} expected type of ${type} but got ${getType(val)}`);
        }
      }
      validate2.type = type;
      return validate2;
    }
    function assertShape(shape) {
      function validate2(node, key, val) {
        const errors = [];
        for (const property of Object.keys(shape)) {
          try {
            (0, _validate.validateField)(node, property, val[property], shape[property]);
          } catch (error) {
            if (error instanceof TypeError) {
              errors.push(error.message);
              continue;
            }
            throw error;
          }
        }
        if (errors.length) {
          throw new TypeError(`Property ${key} of ${node.type} expected to have the following:
${errors.join("\n")}`);
        }
      }
      validate2.shapeOf = shape;
      return validate2;
    }
    function assertOptionalChainStart() {
      function validate2(node) {
        var _current;
        let current = node;
        while (node) {
          const {
            type
          } = current;
          if (type === "OptionalCallExpression") {
            if (current.optional) return;
            current = current.callee;
            continue;
          }
          if (type === "OptionalMemberExpression") {
            if (current.optional) return;
            current = current.object;
            continue;
          }
          break;
        }
        throw new TypeError(`Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${(_current = current) == null ? void 0 : _current.type}`);
      }
      return validate2;
    }
    function chain(...fns) {
      function validate2(...args) {
        for (const fn of fns) {
          fn(...args);
        }
      }
      validate2.chainOf = fns;
      if (fns.length >= 2 && "type" in fns[0] && fns[0].type === "array" && !("each" in fns[1])) {
        throw new Error(`An assertValueType("array") validator can only be followed by an assertEach(...) validator.`);
      }
      return validate2;
    }
    var validTypeOpts = /* @__PURE__ */ new Set(["aliases", "builder", "deprecatedAlias", "fields", "inherits", "visitor", "validate"]);
    var validFieldKeys = /* @__PURE__ */ new Set(["default", "optional", "deprecated", "validate"]);
    var store = {};
    function defineAliasedType(...aliases) {
      return (type, opts = {}) => {
        let defined = opts.aliases;
        if (!defined) {
          var _store$opts$inherits$, _defined;
          if (opts.inherits) defined = (_store$opts$inherits$ = store[opts.inherits].aliases) == null ? void 0 : _store$opts$inherits$.slice();
          (_defined = defined) != null ? _defined : defined = [];
          opts.aliases = defined;
        }
        const additional = aliases.filter((a2) => !defined.includes(a2));
        defined.unshift(...additional);
        defineType(type, opts);
      };
    }
    function defineType(type, opts = {}) {
      const inherits = opts.inherits && store[opts.inherits] || {};
      let fields = opts.fields;
      if (!fields) {
        fields = {};
        if (inherits.fields) {
          const keys = Object.getOwnPropertyNames(inherits.fields);
          for (const key of keys) {
            const field = inherits.fields[key];
            const def = field.default;
            if (Array.isArray(def) ? def.length > 0 : def && typeof def === "object") {
              throw new Error("field defaults can only be primitives or empty arrays currently");
            }
            fields[key] = {
              default: Array.isArray(def) ? [] : def,
              optional: field.optional,
              deprecated: field.deprecated,
              validate: field.validate
            };
          }
        }
      }
      const visitor = opts.visitor || inherits.visitor || [];
      const aliases = opts.aliases || inherits.aliases || [];
      const builder = opts.builder || inherits.builder || opts.visitor || [];
      for (const k3 of Object.keys(opts)) {
        if (!validTypeOpts.has(k3)) {
          throw new Error(`Unknown type option "${k3}" on ${type}`);
        }
      }
      if (opts.deprecatedAlias) {
        DEPRECATED_KEYS[opts.deprecatedAlias] = type;
      }
      for (const key of visitor.concat(builder)) {
        fields[key] = fields[key] || {};
      }
      for (const key of Object.keys(fields)) {
        const field = fields[key];
        if (field.default !== void 0 && !builder.includes(key)) {
          field.optional = true;
        }
        if (field.default === void 0) {
          field.default = null;
        } else if (!field.validate && field.default != null) {
          field.validate = assertValueType(getType(field.default));
        }
        for (const k3 of Object.keys(field)) {
          if (!validFieldKeys.has(k3)) {
            throw new Error(`Unknown field key "${k3}" on ${type}.${key}`);
          }
        }
      }
      VISITOR_KEYS[type] = opts.visitor = visitor;
      BUILDER_KEYS[type] = opts.builder = builder;
      NODE_FIELDS[type] = opts.fields = fields;
      ALIAS_KEYS[type] = opts.aliases = aliases;
      aliases.forEach((alias) => {
        FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];
        FLIPPED_ALIAS_KEYS[alias].push(type);
      });
      if (opts.validate) {
        NODE_PARENT_VALIDATIONS[type] = opts.validate;
      }
      store[type] = opts;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/definitions/core.js
var require_core2 = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/definitions/core.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.patternLikeCommon = exports.importAttributes = exports.functionTypeAnnotationCommon = exports.functionDeclarationCommon = exports.functionCommon = exports.classMethodOrPropertyCommon = exports.classMethodOrDeclareMethodCommon = void 0;
    var _is = require_is();
    var _isValidIdentifier = require_isValidIdentifier();
    var _helperValidatorIdentifier = require_lib5();
    var _helperStringParser = require_lib6();
    var _index = require_constants();
    var _utils = require_utils();
    var defineType = (0, _utils.defineAliasedType)("Standardized");
    defineType("ArrayExpression", {
      fields: {
        elements: {
          validate: (0, _utils.arrayOf)((0, _utils.assertNodeOrValueType)("null", "Expression", "SpreadElement")),
          default: !process.env.BABEL_TYPES_8_BREAKING ? [] : void 0
        }
      },
      visitor: ["elements"],
      aliases: ["Expression"]
    });
    defineType("AssignmentExpression", {
      fields: {
        operator: {
          validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertValueType)("string") : Object.assign(function() {
            const identifier = (0, _utils.assertOneOf)(..._index.ASSIGNMENT_OPERATORS);
            const pattern = (0, _utils.assertOneOf)("=");
            return function(node, key, val) {
              const validator = (0, _is.default)("Pattern", node.left) ? pattern : identifier;
              validator(node, key, val);
            };
          }(), {
            type: "string"
          })
        },
        left: {
          validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("LVal", "OptionalMemberExpression") : (0, _utils.assertNodeType)("Identifier", "MemberExpression", "OptionalMemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression")
        },
        right: {
          validate: (0, _utils.assertNodeType)("Expression")
        }
      },
      builder: ["operator", "left", "right"],
      visitor: ["left", "right"],
      aliases: ["Expression"]
    });
    defineType("BinaryExpression", {
      builder: ["operator", "left", "right"],
      fields: {
        operator: {
          validate: (0, _utils.assertOneOf)(..._index.BINARY_OPERATORS)
        },
        left: {
          validate: function() {
            const expression = (0, _utils.assertNodeType)("Expression");
            const inOp = (0, _utils.assertNodeType)("Expression", "PrivateName");
            const validator = Object.assign(function(node, key, val) {
              const validator2 = node.operator === "in" ? inOp : expression;
              validator2(node, key, val);
            }, {
              oneOfNodeTypes: ["Expression", "PrivateName"]
            });
            return validator;
          }()
        },
        right: {
          validate: (0, _utils.assertNodeType)("Expression")
        }
      },
      visitor: ["left", "right"],
      aliases: ["Binary", "Expression"]
    });
    defineType("InterpreterDirective", {
      builder: ["value"],
      fields: {
        value: {
          validate: (0, _utils.assertValueType)("string")
        }
      }
    });
    defineType("Directive", {
      visitor: ["value"],
      fields: {
        value: {
          validate: (0, _utils.assertNodeType)("DirectiveLiteral")
        }
      }
    });
    defineType("DirectiveLiteral", {
      builder: ["value"],
      fields: {
        value: {
          validate: (0, _utils.assertValueType)("string")
        }
      }
    });
    defineType("BlockStatement", {
      builder: ["body", "directives"],
      visitor: ["directives", "body"],
      fields: {
        directives: {
          validate: (0, _utils.arrayOfType)("Directive"),
          default: []
        },
        body: (0, _utils.validateArrayOfType)("Statement")
      },
      aliases: ["Scopable", "BlockParent", "Block", "Statement"]
    });
    defineType("BreakStatement", {
      visitor: ["label"],
      fields: {
        label: {
          validate: (0, _utils.assertNodeType)("Identifier"),
          optional: true
        }
      },
      aliases: ["Statement", "Terminatorless", "CompletionStatement"]
    });
    defineType("CallExpression", {
      visitor: ["callee", "arguments", "typeParameters", "typeArguments"],
      builder: ["callee", "arguments"],
      aliases: ["Expression"],
      fields: Object.assign({
        callee: {
          validate: (0, _utils.assertNodeType)("Expression", "Super", "V8IntrinsicIdentifier")
        },
        arguments: (0, _utils.validateArrayOfType)("Expression", "SpreadElement", "ArgumentPlaceholder"),
        typeArguments: {
          validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"),
          optional: true
        }
      }, {
        optional: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        },
        typeParameters: {
          validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"),
          optional: true
        }
      }, process.env.BABEL_TYPES_8_BREAKING ? {} : {
        optional: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        }
      })
    });
    defineType("CatchClause", {
      visitor: ["param", "body"],
      fields: {
        param: {
          validate: (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern"),
          optional: true
        },
        body: {
          validate: (0, _utils.assertNodeType)("BlockStatement")
        }
      },
      aliases: ["Scopable", "BlockParent"]
    });
    defineType("ConditionalExpression", {
      visitor: ["test", "consequent", "alternate"],
      fields: {
        test: {
          validate: (0, _utils.assertNodeType)("Expression")
        },
        consequent: {
          validate: (0, _utils.assertNodeType)("Expression")
        },
        alternate: {
          validate: (0, _utils.assertNodeType)("Expression")
        }
      },
      aliases: ["Expression", "Conditional"]
    });
    defineType("ContinueStatement", {
      visitor: ["label"],
      fields: {
        label: {
          validate: (0, _utils.assertNodeType)("Identifier"),
          optional: true
        }
      },
      aliases: ["Statement", "Terminatorless", "CompletionStatement"]
    });
    defineType("DebuggerStatement", {
      aliases: ["Statement"]
    });
    defineType("DoWhileStatement", {
      builder: ["test", "body"],
      visitor: ["body", "test"],
      fields: {
        test: {
          validate: (0, _utils.assertNodeType)("Expression")
        },
        body: {
          validate: (0, _utils.assertNodeType)("Statement")
        }
      },
      aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]
    });
    defineType("EmptyStatement", {
      aliases: ["Statement"]
    });
    defineType("ExpressionStatement", {
      visitor: ["expression"],
      fields: {
        expression: {
          validate: (0, _utils.assertNodeType)("Expression")
        }
      },
      aliases: ["Statement", "ExpressionWrapper"]
    });
    defineType("File", {
      builder: ["program", "comments", "tokens"],
      visitor: ["program"],
      fields: {
        program: {
          validate: (0, _utils.assertNodeType)("Program")
        },
        comments: {
          validate: !process.env.BABEL_TYPES_8_BREAKING ? Object.assign(() => {
          }, {
            each: {
              oneOfNodeTypes: ["CommentBlock", "CommentLine"]
            }
          }) : (0, _utils.assertEach)((0, _utils.assertNodeType)("CommentBlock", "CommentLine")),
          optional: true
        },
        tokens: {
          validate: (0, _utils.assertEach)(Object.assign(() => {
          }, {
            type: "any"
          })),
          optional: true
        }
      }
    });
    defineType("ForInStatement", {
      visitor: ["left", "right", "body"],
      aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
      fields: {
        left: {
          validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("VariableDeclaration", "LVal") : (0, _utils.assertNodeType)("VariableDeclaration", "Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression")
        },
        right: {
          validate: (0, _utils.assertNodeType)("Expression")
        },
        body: {
          validate: (0, _utils.assertNodeType)("Statement")
        }
      }
    });
    defineType("ForStatement", {
      visitor: ["init", "test", "update", "body"],
      aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"],
      fields: {
        init: {
          validate: (0, _utils.assertNodeType)("VariableDeclaration", "Expression"),
          optional: true
        },
        test: {
          validate: (0, _utils.assertNodeType)("Expression"),
          optional: true
        },
        update: {
          validate: (0, _utils.assertNodeType)("Expression"),
          optional: true
        },
        body: {
          validate: (0, _utils.assertNodeType)("Statement")
        }
      }
    });
    var functionCommon = () => ({
      params: (0, _utils.validateArrayOfType)("Identifier", "Pattern", "RestElement"),
      generator: {
        default: false
      },
      async: {
        default: false
      }
    });
    exports.functionCommon = functionCommon;
    var functionTypeAnnotationCommon = () => ({
      returnType: {
        validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
        optional: true
      },
      typeParameters: {
        validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
        optional: true
      }
    });
    exports.functionTypeAnnotationCommon = functionTypeAnnotationCommon;
    var functionDeclarationCommon = () => Object.assign({}, functionCommon(), {
      declare: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      id: {
        validate: (0, _utils.assertNodeType)("Identifier"),
        optional: true
      }
    });
    exports.functionDeclarationCommon = functionDeclarationCommon;
    defineType("FunctionDeclaration", {
      builder: ["id", "params", "body", "generator", "async"],
      visitor: ["id", "typeParameters", "params", "predicate", "returnType", "body"],
      fields: Object.assign({}, functionDeclarationCommon(), functionTypeAnnotationCommon(), {
        body: {
          validate: (0, _utils.assertNodeType)("BlockStatement")
        },
        predicate: {
          validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
          optional: true
        }
      }),
      aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"],
      validate: !process.env.BABEL_TYPES_8_BREAKING ? void 0 : function() {
        const identifier = (0, _utils.assertNodeType)("Identifier");
        return function(parent, key, node) {
          if (!(0, _is.default)("ExportDefaultDeclaration", parent)) {
            identifier(node, "id", node.id);
          }
        };
      }()
    });
    defineType("FunctionExpression", {
      inherits: "FunctionDeclaration",
      aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
      fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {
        id: {
          validate: (0, _utils.assertNodeType)("Identifier"),
          optional: true
        },
        body: {
          validate: (0, _utils.assertNodeType)("BlockStatement")
        },
        predicate: {
          validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
          optional: true
        }
      })
    });
    var patternLikeCommon = () => ({
      typeAnnotation: {
        validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
        optional: true
      },
      optional: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      decorators: {
        validate: (0, _utils.arrayOfType)("Decorator"),
        optional: true
      }
    });
    exports.patternLikeCommon = patternLikeCommon;
    defineType("Identifier", {
      builder: ["name"],
      visitor: ["typeAnnotation", "decorators"],
      aliases: ["Expression", "PatternLike", "LVal", "TSEntityName"],
      fields: Object.assign({}, patternLikeCommon(), {
        name: {
          validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function(node, key, val) {
            if (!(0, _isValidIdentifier.default)(val, false)) {
              throw new TypeError(`"${val}" is not a valid identifier name`);
            }
          }, {
            type: "string"
          })) : (0, _utils.assertValueType)("string")
        }
      }),
      validate: process.env.BABEL_TYPES_8_BREAKING ? function(parent, key, node) {
        const match = /\.(\w+)$/.exec(key);
        if (!match) return;
        const [, parentKey] = match;
        const nonComp = {
          computed: false
        };
        if (parentKey === "property") {
          if ((0, _is.default)("MemberExpression", parent, nonComp)) return;
          if ((0, _is.default)("OptionalMemberExpression", parent, nonComp)) return;
        } else if (parentKey === "key") {
          if ((0, _is.default)("Property", parent, nonComp)) return;
          if ((0, _is.default)("Method", parent, nonComp)) return;
        } else if (parentKey === "exported") {
          if ((0, _is.default)("ExportSpecifier", parent)) return;
        } else if (parentKey === "imported") {
          if ((0, _is.default)("ImportSpecifier", parent, {
            imported: node
          })) return;
        } else if (parentKey === "meta") {
          if ((0, _is.default)("MetaProperty", parent, {
            meta: node
          })) return;
        }
        if (((0, _helperValidatorIdentifier.isKeyword)(node.name) || (0, _helperValidatorIdentifier.isReservedWord)(node.name, false)) && node.name !== "this") {
          throw new TypeError(`"${node.name}" is not a valid identifier`);
        }
      } : void 0
    });
    defineType("IfStatement", {
      visitor: ["test", "consequent", "alternate"],
      aliases: ["Statement", "Conditional"],
      fields: {
        test: {
          validate: (0, _utils.assertNodeType)("Expression")
        },
        consequent: {
          validate: (0, _utils.assertNodeType)("Statement")
        },
        alternate: {
          optional: true,
          validate: (0, _utils.assertNodeType)("Statement")
        }
      }
    });
    defineType("LabeledStatement", {
      visitor: ["label", "body"],
      aliases: ["Statement"],
      fields: {
        label: {
          validate: (0, _utils.assertNodeType)("Identifier")
        },
        body: {
          validate: (0, _utils.assertNodeType)("Statement")
        }
      }
    });
    defineType("StringLiteral", {
      builder: ["value"],
      fields: {
        value: {
          validate: (0, _utils.assertValueType)("string")
        }
      },
      aliases: ["Expression", "Pureish", "Literal", "Immutable"]
    });
    defineType("NumericLiteral", {
      builder: ["value"],
      deprecatedAlias: "NumberLiteral",
      fields: {
        value: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)("number"), Object.assign(function(node, key, val) {
            if (1 / val < 0 || !Number.isFinite(val)) {
              const error = new Error(`NumericLiterals must be non-negative finite numbers. You can use t.valueToNode(${val}) instead.`);
              {
              }
            }
          }, {
            type: "number"
          }))
        }
      },
      aliases: ["Expression", "Pureish", "Literal", "Immutable"]
    });
    defineType("NullLiteral", {
      aliases: ["Expression", "Pureish", "Literal", "Immutable"]
    });
    defineType("BooleanLiteral", {
      builder: ["value"],
      fields: {
        value: {
          validate: (0, _utils.assertValueType)("boolean")
        }
      },
      aliases: ["Expression", "Pureish", "Literal", "Immutable"]
    });
    defineType("RegExpLiteral", {
      builder: ["pattern", "flags"],
      deprecatedAlias: "RegexLiteral",
      aliases: ["Expression", "Pureish", "Literal"],
      fields: {
        pattern: {
          validate: (0, _utils.assertValueType)("string")
        },
        flags: {
          validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function(node, key, val) {
            const invalid = /[^gimsuy]/.exec(val);
            if (invalid) {
              throw new TypeError(`"${invalid[0]}" is not a valid RegExp flag`);
            }
          }, {
            type: "string"
          })) : (0, _utils.assertValueType)("string"),
          default: ""
        }
      }
    });
    defineType("LogicalExpression", {
      builder: ["operator", "left", "right"],
      visitor: ["left", "right"],
      aliases: ["Binary", "Expression"],
      fields: {
        operator: {
          validate: (0, _utils.assertOneOf)(..._index.LOGICAL_OPERATORS)
        },
        left: {
          validate: (0, _utils.assertNodeType)("Expression")
        },
        right: {
          validate: (0, _utils.assertNodeType)("Expression")
        }
      }
    });
    defineType("MemberExpression", {
      builder: ["object", "property", "computed", ...!process.env.BABEL_TYPES_8_BREAKING ? ["optional"] : []],
      visitor: ["object", "property"],
      aliases: ["Expression", "LVal"],
      fields: Object.assign({
        object: {
          validate: (0, _utils.assertNodeType)("Expression", "Super")
        },
        property: {
          validate: function() {
            const normal = (0, _utils.assertNodeType)("Identifier", "PrivateName");
            const computed = (0, _utils.assertNodeType)("Expression");
            const validator = function(node, key, val) {
              const validator2 = node.computed ? computed : normal;
              validator2(node, key, val);
            };
            validator.oneOfNodeTypes = ["Expression", "Identifier", "PrivateName"];
            return validator;
          }()
        },
        computed: {
          default: false
        }
      }, !process.env.BABEL_TYPES_8_BREAKING ? {
        optional: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        }
      } : {})
    });
    defineType("NewExpression", {
      inherits: "CallExpression"
    });
    defineType("Program", {
      visitor: ["directives", "body"],
      builder: ["body", "directives", "sourceType", "interpreter"],
      fields: {
        sourceType: {
          validate: (0, _utils.assertOneOf)("script", "module"),
          default: "script"
        },
        interpreter: {
          validate: (0, _utils.assertNodeType)("InterpreterDirective"),
          default: null,
          optional: true
        },
        directives: {
          validate: (0, _utils.arrayOfType)("Directive"),
          default: []
        },
        body: (0, _utils.validateArrayOfType)("Statement")
      },
      aliases: ["Scopable", "BlockParent", "Block"]
    });
    defineType("ObjectExpression", {
      visitor: ["properties"],
      aliases: ["Expression"],
      fields: {
        properties: (0, _utils.validateArrayOfType)("ObjectMethod", "ObjectProperty", "SpreadElement")
      }
    });
    defineType("ObjectMethod", {
      builder: ["kind", "key", "params", "body", "computed", "generator", "async"],
      visitor: ["decorators", "key", "typeParameters", "params", "returnType", "body"],
      fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {
        kind: Object.assign({
          validate: (0, _utils.assertOneOf)("method", "get", "set")
        }, !process.env.BABEL_TYPES_8_BREAKING ? {
          default: "method"
        } : {}),
        computed: {
          default: false
        },
        key: {
          validate: function() {
            const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral");
            const computed = (0, _utils.assertNodeType)("Expression");
            const validator = function(node, key, val) {
              const validator2 = node.computed ? computed : normal;
              validator2(node, key, val);
            };
            validator.oneOfNodeTypes = ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"];
            return validator;
          }()
        },
        decorators: {
          validate: (0, _utils.arrayOfType)("Decorator"),
          optional: true
        },
        body: {
          validate: (0, _utils.assertNodeType)("BlockStatement")
        }
      }),
      aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"]
    });
    defineType("ObjectProperty", {
      builder: ["key", "value", "computed", "shorthand", ...!process.env.BABEL_TYPES_8_BREAKING ? ["decorators"] : []],
      fields: {
        computed: {
          default: false
        },
        key: {
          validate: function() {
            const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName");
            const computed = (0, _utils.assertNodeType)("Expression");
            const validator = Object.assign(function(node, key, val) {
              const validator2 = node.computed ? computed : normal;
              validator2(node, key, val);
            }, {
              oneOfNodeTypes: ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName"]
            });
            return validator;
          }()
        },
        value: {
          validate: (0, _utils.assertNodeType)("Expression", "PatternLike")
        },
        shorthand: {
          validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function(node, key, shorthand) {
            if (!shorthand) return;
            if (node.computed) {
              throw new TypeError("Property shorthand of ObjectProperty cannot be true if computed is true");
            }
            if (!(0, _is.default)("Identifier", node.key)) {
              throw new TypeError("Property shorthand of ObjectProperty cannot be true if key is not an Identifier");
            }
          }, {
            type: "boolean"
          })) : (0, _utils.assertValueType)("boolean"),
          default: false
        },
        decorators: {
          validate: (0, _utils.arrayOfType)("Decorator"),
          optional: true
        }
      },
      visitor: ["key", "value", "decorators"],
      aliases: ["UserWhitespacable", "Property", "ObjectMember"],
      validate: !process.env.BABEL_TYPES_8_BREAKING ? void 0 : function() {
        const pattern = (0, _utils.assertNodeType)("Identifier", "Pattern", "TSAsExpression", "TSSatisfiesExpression", "TSNonNullExpression", "TSTypeAssertion");
        const expression = (0, _utils.assertNodeType)("Expression");
        return function(parent, key, node) {
          const validator = (0, _is.default)("ObjectPattern", parent) ? pattern : expression;
          validator(node, "value", node.value);
        };
      }()
    });
    defineType("RestElement", {
      visitor: ["argument", "typeAnnotation"],
      builder: ["argument"],
      aliases: ["LVal", "PatternLike"],
      deprecatedAlias: "RestProperty",
      fields: Object.assign({}, patternLikeCommon(), {
        argument: {
          validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("LVal") : (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression")
        }
      }),
      validate: process.env.BABEL_TYPES_8_BREAKING ? function(parent, key) {
        const match = /(\w+)\[(\d+)\]/.exec(key);
        if (!match) throw new Error("Internal Babel error: malformed key.");
        const [, listKey, index] = match;
        if (parent[listKey].length > +index + 1) {
          throw new TypeError(`RestElement must be last element of ${listKey}`);
        }
      } : void 0
    });
    defineType("ReturnStatement", {
      visitor: ["argument"],
      aliases: ["Statement", "Terminatorless", "CompletionStatement"],
      fields: {
        argument: {
          validate: (0, _utils.assertNodeType)("Expression"),
          optional: true
        }
      }
    });
    defineType("SequenceExpression", {
      visitor: ["expressions"],
      fields: {
        expressions: (0, _utils.validateArrayOfType)("Expression")
      },
      aliases: ["Expression"]
    });
    defineType("ParenthesizedExpression", {
      visitor: ["expression"],
      aliases: ["Expression", "ExpressionWrapper"],
      fields: {
        expression: {
          validate: (0, _utils.assertNodeType)("Expression")
        }
      }
    });
    defineType("SwitchCase", {
      visitor: ["test", "consequent"],
      fields: {
        test: {
          validate: (0, _utils.assertNodeType)("Expression"),
          optional: true
        },
        consequent: (0, _utils.validateArrayOfType)("Statement")
      }
    });
    defineType("SwitchStatement", {
      visitor: ["discriminant", "cases"],
      aliases: ["Statement", "BlockParent", "Scopable"],
      fields: {
        discriminant: {
          validate: (0, _utils.assertNodeType)("Expression")
        },
        cases: (0, _utils.validateArrayOfType)("SwitchCase")
      }
    });
    defineType("ThisExpression", {
      aliases: ["Expression"]
    });
    defineType("ThrowStatement", {
      visitor: ["argument"],
      aliases: ["Statement", "Terminatorless", "CompletionStatement"],
      fields: {
        argument: {
          validate: (0, _utils.assertNodeType)("Expression")
        }
      }
    });
    defineType("TryStatement", {
      visitor: ["block", "handler", "finalizer"],
      aliases: ["Statement"],
      fields: {
        block: {
          validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertNodeType)("BlockStatement"), Object.assign(function(node) {
            if (!node.handler && !node.finalizer) {
              throw new TypeError("TryStatement expects either a handler or finalizer, or both");
            }
          }, {
            oneOfNodeTypes: ["BlockStatement"]
          })) : (0, _utils.assertNodeType)("BlockStatement")
        },
        handler: {
          optional: true,
          validate: (0, _utils.assertNodeType)("CatchClause")
        },
        finalizer: {
          optional: true,
          validate: (0, _utils.assertNodeType)("BlockStatement")
        }
      }
    });
    defineType("UnaryExpression", {
      builder: ["operator", "argument", "prefix"],
      fields: {
        prefix: {
          default: true
        },
        argument: {
          validate: (0, _utils.assertNodeType)("Expression")
        },
        operator: {
          validate: (0, _utils.assertOneOf)(..._index.UNARY_OPERATORS)
        }
      },
      visitor: ["argument"],
      aliases: ["UnaryLike", "Expression"]
    });
    defineType("UpdateExpression", {
      builder: ["operator", "argument", "prefix"],
      fields: {
        prefix: {
          default: false
        },
        argument: {
          validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Expression") : (0, _utils.assertNodeType)("Identifier", "MemberExpression")
        },
        operator: {
          validate: (0, _utils.assertOneOf)(..._index.UPDATE_OPERATORS)
        }
      },
      visitor: ["argument"],
      aliases: ["Expression"]
    });
    defineType("VariableDeclaration", {
      builder: ["kind", "declarations"],
      visitor: ["declarations"],
      aliases: ["Statement", "Declaration"],
      fields: {
        declare: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        },
        kind: {
          validate: (0, _utils.assertOneOf)("var", "let", "const", "using", "await using")
        },
        declarations: (0, _utils.validateArrayOfType)("VariableDeclarator")
      },
      validate: process.env.BABEL_TYPES_8_BREAKING ? (() => {
        const withoutInit = (0, _utils.assertNodeType)("Identifier");
        return function(parent, key, node) {
          if ((0, _is.default)("ForXStatement", parent, {
            left: node
          })) {
            if (node.declarations.length !== 1) {
              throw new TypeError(`Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`);
            }
          } else {
            node.declarations.forEach((decl) => {
              if (!decl.init) withoutInit(decl, "id", decl.id);
            });
          }
        };
      })() : void 0
    });
    defineType("VariableDeclarator", {
      visitor: ["id", "init"],
      fields: {
        id: {
          validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("LVal") : (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern")
        },
        definite: {
          optional: true,
          validate: (0, _utils.assertValueType)("boolean")
        },
        init: {
          optional: true,
          validate: (0, _utils.assertNodeType)("Expression")
        }
      }
    });
    defineType("WhileStatement", {
      visitor: ["test", "body"],
      aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"],
      fields: {
        test: {
          validate: (0, _utils.assertNodeType)("Expression")
        },
        body: {
          validate: (0, _utils.assertNodeType)("Statement")
        }
      }
    });
    defineType("WithStatement", {
      visitor: ["object", "body"],
      aliases: ["Statement"],
      fields: {
        object: {
          validate: (0, _utils.assertNodeType)("Expression")
        },
        body: {
          validate: (0, _utils.assertNodeType)("Statement")
        }
      }
    });
    defineType("AssignmentPattern", {
      visitor: ["left", "right", "decorators"],
      builder: ["left", "right"],
      aliases: ["Pattern", "PatternLike", "LVal"],
      fields: Object.assign({}, patternLikeCommon(), {
        left: {
          validate: (0, _utils.assertNodeType)("Identifier", "ObjectPattern", "ArrayPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression")
        },
        right: {
          validate: (0, _utils.assertNodeType)("Expression")
        },
        decorators: {
          validate: (0, _utils.arrayOfType)("Decorator"),
          optional: true
        }
      })
    });
    defineType("ArrayPattern", {
      visitor: ["elements", "typeAnnotation"],
      builder: ["elements"],
      aliases: ["Pattern", "PatternLike", "LVal"],
      fields: Object.assign({}, patternLikeCommon(), {
        elements: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)("null", "PatternLike", "LVal")))
        }
      })
    });
    defineType("ArrowFunctionExpression", {
      builder: ["params", "body", "async"],
      visitor: ["typeParameters", "params", "predicate", "returnType", "body"],
      aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
      fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {
        expression: {
          validate: (0, _utils.assertValueType)("boolean")
        },
        body: {
          validate: (0, _utils.assertNodeType)("BlockStatement", "Expression")
        },
        predicate: {
          validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
          optional: true
        }
      })
    });
    defineType("ClassBody", {
      visitor: ["body"],
      fields: {
        body: (0, _utils.validateArrayOfType)("ClassMethod", "ClassPrivateMethod", "ClassProperty", "ClassPrivateProperty", "ClassAccessorProperty", "TSDeclareMethod", "TSIndexSignature", "StaticBlock")
      }
    });
    defineType("ClassExpression", {
      builder: ["id", "superClass", "body", "decorators"],
      visitor: ["decorators", "id", "typeParameters", "superClass", "superTypeParameters", "mixins", "implements", "body"],
      aliases: ["Scopable", "Class", "Expression"],
      fields: {
        id: {
          validate: (0, _utils.assertNodeType)("Identifier"),
          optional: true
        },
        typeParameters: {
          validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
          optional: true
        },
        body: {
          validate: (0, _utils.assertNodeType)("ClassBody")
        },
        superClass: {
          optional: true,
          validate: (0, _utils.assertNodeType)("Expression")
        },
        ["superTypeParameters"]: {
          validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
          optional: true
        },
        implements: {
          validate: (0, _utils.arrayOfType)("TSExpressionWithTypeArguments", "ClassImplements"),
          optional: true
        },
        decorators: {
          validate: (0, _utils.arrayOfType)("Decorator"),
          optional: true
        },
        mixins: {
          validate: (0, _utils.assertNodeType)("InterfaceExtends"),
          optional: true
        }
      }
    });
    defineType("ClassDeclaration", {
      inherits: "ClassExpression",
      aliases: ["Scopable", "Class", "Statement", "Declaration"],
      fields: {
        id: {
          validate: (0, _utils.assertNodeType)("Identifier"),
          optional: true
        },
        typeParameters: {
          validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
          optional: true
        },
        body: {
          validate: (0, _utils.assertNodeType)("ClassBody")
        },
        superClass: {
          optional: true,
          validate: (0, _utils.assertNodeType)("Expression")
        },
        ["superTypeParameters"]: {
          validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
          optional: true
        },
        implements: {
          validate: (0, _utils.arrayOfType)("TSExpressionWithTypeArguments", "ClassImplements"),
          optional: true
        },
        decorators: {
          validate: (0, _utils.arrayOfType)("Decorator"),
          optional: true
        },
        mixins: {
          validate: (0, _utils.assertNodeType)("InterfaceExtends"),
          optional: true
        },
        declare: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        },
        abstract: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        }
      },
      validate: !process.env.BABEL_TYPES_8_BREAKING ? void 0 : function() {
        const identifier = (0, _utils.assertNodeType)("Identifier");
        return function(parent, key, node) {
          if (!(0, _is.default)("ExportDefaultDeclaration", parent)) {
            identifier(node, "id", node.id);
          }
        };
      }()
    });
    var importAttributes = exports.importAttributes = {
      attributes: {
        optional: true,
        validate: (0, _utils.arrayOfType)("ImportAttribute")
      },
      assertions: {
        deprecated: true,
        optional: true,
        validate: (0, _utils.arrayOfType)("ImportAttribute")
      }
    };
    defineType("ExportAllDeclaration", {
      builder: ["source"],
      visitor: ["source", "attributes", "assertions"],
      aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"],
      fields: Object.assign({
        source: {
          validate: (0, _utils.assertNodeType)("StringLiteral")
        },
        exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value"))
      }, importAttributes)
    });
    defineType("ExportDefaultDeclaration", {
      visitor: ["declaration"],
      aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"],
      fields: {
        declaration: (0, _utils.validateType)("TSDeclareFunction", "FunctionDeclaration", "ClassDeclaration", "Expression"),
        exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("value"))
      }
    });
    defineType("ExportNamedDeclaration", {
      builder: ["declaration", "specifiers", "source"],
      visitor: process.env ? ["declaration", "specifiers", "source", "attributes"] : ["declaration", "specifiers", "source", "attributes", "assertions"],
      aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"],
      fields: Object.assign({
        declaration: {
          optional: true,
          validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertNodeType)("Declaration"), Object.assign(function(node, key, val) {
            if (val && node.specifiers.length) {
              throw new TypeError("Only declaration or specifiers is allowed on ExportNamedDeclaration");
            }
            if (val && node.source) {
              throw new TypeError("Cannot export a declaration from a source");
            }
          }, {
            oneOfNodeTypes: ["Declaration"]
          })) : (0, _utils.assertNodeType)("Declaration")
        }
      }, importAttributes, {
        specifiers: {
          default: [],
          validate: (0, _utils.arrayOf)(function() {
            const sourced = (0, _utils.assertNodeType)("ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier");
            const sourceless = (0, _utils.assertNodeType)("ExportSpecifier");
            if (!process.env.BABEL_TYPES_8_BREAKING) return sourced;
            return Object.assign(function(node, key, val) {
              const validator = node.source ? sourced : sourceless;
              validator(node, key, val);
            }, {
              oneOfNodeTypes: ["ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier"]
            });
          }())
        },
        source: {
          validate: (0, _utils.assertNodeType)("StringLiteral"),
          optional: true
        },
        exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value"))
      })
    });
    defineType("ExportSpecifier", {
      visitor: ["local", "exported"],
      aliases: ["ModuleSpecifier"],
      fields: {
        local: {
          validate: (0, _utils.assertNodeType)("Identifier")
        },
        exported: {
          validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral")
        },
        exportKind: {
          validate: (0, _utils.assertOneOf)("type", "value"),
          optional: true
        }
      }
    });
    defineType("ForOfStatement", {
      visitor: ["left", "right", "body"],
      builder: ["left", "right", "body", "await"],
      aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
      fields: {
        left: {
          validate: function() {
            if (!process.env.BABEL_TYPES_8_BREAKING) {
              return (0, _utils.assertNodeType)("VariableDeclaration", "LVal");
            }
            const declaration = (0, _utils.assertNodeType)("VariableDeclaration");
            const lval = (0, _utils.assertNodeType)("Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression");
            return Object.assign(function(node, key, val) {
              if ((0, _is.default)("VariableDeclaration", val)) {
                declaration(node, key, val);
              } else {
                lval(node, key, val);
              }
            }, {
              oneOfNodeTypes: ["VariableDeclaration", "Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression"]
            });
          }()
        },
        right: {
          validate: (0, _utils.assertNodeType)("Expression")
        },
        body: {
          validate: (0, _utils.assertNodeType)("Statement")
        },
        await: {
          default: false
        }
      }
    });
    defineType("ImportDeclaration", {
      builder: ["specifiers", "source"],
      visitor: ["specifiers", "source", "attributes", "assertions"],
      aliases: ["Statement", "Declaration", "ImportOrExportDeclaration"],
      fields: Object.assign({}, importAttributes, {
        module: {
          optional: true,
          validate: (0, _utils.assertValueType)("boolean")
        },
        phase: {
          default: null,
          validate: (0, _utils.assertOneOf)("source", "defer")
        },
        specifiers: (0, _utils.validateArrayOfType)("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier"),
        source: {
          validate: (0, _utils.assertNodeType)("StringLiteral")
        },
        importKind: {
          validate: (0, _utils.assertOneOf)("type", "typeof", "value"),
          optional: true
        }
      })
    });
    defineType("ImportDefaultSpecifier", {
      visitor: ["local"],
      aliases: ["ModuleSpecifier"],
      fields: {
        local: {
          validate: (0, _utils.assertNodeType)("Identifier")
        }
      }
    });
    defineType("ImportNamespaceSpecifier", {
      visitor: ["local"],
      aliases: ["ModuleSpecifier"],
      fields: {
        local: {
          validate: (0, _utils.assertNodeType)("Identifier")
        }
      }
    });
    defineType("ImportSpecifier", {
      visitor: ["imported", "local"],
      builder: ["local", "imported"],
      aliases: ["ModuleSpecifier"],
      fields: {
        local: {
          validate: (0, _utils.assertNodeType)("Identifier")
        },
        imported: {
          validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral")
        },
        importKind: {
          validate: (0, _utils.assertOneOf)("type", "typeof", "value"),
          optional: true
        }
      }
    });
    defineType("ImportExpression", {
      visitor: ["source", "options"],
      aliases: ["Expression"],
      fields: {
        phase: {
          default: null,
          validate: (0, _utils.assertOneOf)("source", "defer")
        },
        source: {
          validate: (0, _utils.assertNodeType)("Expression")
        },
        options: {
          validate: (0, _utils.assertNodeType)("Expression"),
          optional: true
        }
      }
    });
    defineType("MetaProperty", {
      visitor: ["meta", "property"],
      aliases: ["Expression"],
      fields: {
        meta: {
          validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertNodeType)("Identifier"), Object.assign(function(node, key, val) {
            let property;
            switch (val.name) {
              case "function":
                property = "sent";
                break;
              case "new":
                property = "target";
                break;
              case "import":
                property = "meta";
                break;
            }
            if (!(0, _is.default)("Identifier", node.property, {
              name: property
            })) {
              throw new TypeError("Unrecognised MetaProperty");
            }
          }, {
            oneOfNodeTypes: ["Identifier"]
          })) : (0, _utils.assertNodeType)("Identifier")
        },
        property: {
          validate: (0, _utils.assertNodeType)("Identifier")
        }
      }
    });
    var classMethodOrPropertyCommon = () => ({
      abstract: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      accessibility: {
        validate: (0, _utils.assertOneOf)("public", "private", "protected"),
        optional: true
      },
      static: {
        default: false
      },
      override: {
        default: false
      },
      computed: {
        default: false
      },
      optional: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      key: {
        validate: (0, _utils.chain)(function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral");
          const computed = (0, _utils.assertNodeType)("Expression");
          return function(node, key, val) {
            const validator = node.computed ? computed : normal;
            validator(node, key, val);
          };
        }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression"))
      }
    });
    exports.classMethodOrPropertyCommon = classMethodOrPropertyCommon;
    var classMethodOrDeclareMethodCommon = () => Object.assign({}, functionCommon(), classMethodOrPropertyCommon(), {
      params: (0, _utils.validateArrayOfType)("Identifier", "Pattern", "RestElement", "TSParameterProperty"),
      kind: {
        validate: (0, _utils.assertOneOf)("get", "set", "method", "constructor"),
        default: "method"
      },
      access: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), (0, _utils.assertOneOf)("public", "private", "protected")),
        optional: true
      },
      decorators: {
        validate: (0, _utils.arrayOfType)("Decorator"),
        optional: true
      }
    });
    exports.classMethodOrDeclareMethodCommon = classMethodOrDeclareMethodCommon;
    defineType("ClassMethod", {
      aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"],
      builder: ["kind", "key", "params", "body", "computed", "static", "generator", "async"],
      visitor: ["decorators", "key", "typeParameters", "params", "returnType", "body"],
      fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), {
        body: {
          validate: (0, _utils.assertNodeType)("BlockStatement")
        }
      })
    });
    defineType("ObjectPattern", {
      visitor: ["properties", "typeAnnotation", "decorators"],
      builder: ["properties"],
      aliases: ["Pattern", "PatternLike", "LVal"],
      fields: Object.assign({}, patternLikeCommon(), {
        properties: (0, _utils.validateArrayOfType)("RestElement", "ObjectProperty")
      })
    });
    defineType("SpreadElement", {
      visitor: ["argument"],
      aliases: ["UnaryLike"],
      deprecatedAlias: "SpreadProperty",
      fields: {
        argument: {
          validate: (0, _utils.assertNodeType)("Expression")
        }
      }
    });
    defineType("Super", {
      aliases: ["Expression"]
    });
    defineType("TaggedTemplateExpression", {
      visitor: ["tag", "typeParameters", "quasi"],
      builder: ["tag", "quasi"],
      aliases: ["Expression"],
      fields: {
        tag: {
          validate: (0, _utils.assertNodeType)("Expression")
        },
        quasi: {
          validate: (0, _utils.assertNodeType)("TemplateLiteral")
        },
        ["typeParameters"]: {
          validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
          optional: true
        }
      }
    });
    defineType("TemplateElement", {
      builder: ["value", "tail"],
      fields: {
        value: {
          validate: (0, _utils.chain)((0, _utils.assertShape)({
            raw: {
              validate: (0, _utils.assertValueType)("string")
            },
            cooked: {
              validate: (0, _utils.assertValueType)("string"),
              optional: true
            }
          }), function templateElementCookedValidator(node) {
            const raw2 = node.value.raw;
            let unterminatedCalled = false;
            const error = () => {
              throw new Error("Internal @babel/types error.");
            };
            const {
              str,
              firstInvalidLoc
            } = (0, _helperStringParser.readStringContents)("template", raw2, 0, 0, 0, {
              unterminated() {
                unterminatedCalled = true;
              },
              strictNumericEscape: error,
              invalidEscapeSequence: error,
              numericSeparatorInEscapeSequence: error,
              unexpectedNumericSeparator: error,
              invalidDigit: error,
              invalidCodePoint: error
            });
            if (!unterminatedCalled) throw new Error("Invalid raw");
            node.value.cooked = firstInvalidLoc ? null : str;
          })
        },
        tail: {
          default: false
        }
      }
    });
    defineType("TemplateLiteral", {
      visitor: ["quasis", "expressions"],
      aliases: ["Expression", "Literal"],
      fields: {
        quasis: (0, _utils.validateArrayOfType)("TemplateElement"),
        expressions: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "TSType")), function(node, key, val) {
            if (node.quasis.length !== val.length + 1) {
              throw new TypeError(`Number of ${node.type} quasis should be exactly one more than the number of expressions.
Expected ${val.length + 1} quasis but got ${node.quasis.length}`);
            }
          })
        }
      }
    });
    defineType("YieldExpression", {
      builder: ["argument", "delegate"],
      visitor: ["argument"],
      aliases: ["Expression", "Terminatorless"],
      fields: {
        delegate: {
          validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function(node, key, val) {
            if (val && !node.argument) {
              throw new TypeError("Property delegate of YieldExpression cannot be true if there is no argument");
            }
          }, {
            type: "boolean"
          })) : (0, _utils.assertValueType)("boolean"),
          default: false
        },
        argument: {
          optional: true,
          validate: (0, _utils.assertNodeType)("Expression")
        }
      }
    });
    defineType("AwaitExpression", {
      builder: ["argument"],
      visitor: ["argument"],
      aliases: ["Expression", "Terminatorless"],
      fields: {
        argument: {
          validate: (0, _utils.assertNodeType)("Expression")
        }
      }
    });
    defineType("Import", {
      aliases: ["Expression"]
    });
    defineType("BigIntLiteral", {
      builder: ["value"],
      fields: {
        value: {
          validate: (0, _utils.assertValueType)("string")
        }
      },
      aliases: ["Expression", "Pureish", "Literal", "Immutable"]
    });
    defineType("ExportNamespaceSpecifier", {
      visitor: ["exported"],
      aliases: ["ModuleSpecifier"],
      fields: {
        exported: {
          validate: (0, _utils.assertNodeType)("Identifier")
        }
      }
    });
    defineType("OptionalMemberExpression", {
      builder: ["object", "property", "computed", "optional"],
      visitor: ["object", "property"],
      aliases: ["Expression"],
      fields: {
        object: {
          validate: (0, _utils.assertNodeType)("Expression")
        },
        property: {
          validate: function() {
            const normal = (0, _utils.assertNodeType)("Identifier");
            const computed = (0, _utils.assertNodeType)("Expression");
            const validator = Object.assign(function(node, key, val) {
              const validator2 = node.computed ? computed : normal;
              validator2(node, key, val);
            }, {
              oneOfNodeTypes: ["Expression", "Identifier"]
            });
            return validator;
          }()
        },
        computed: {
          default: false
        },
        optional: {
          validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertValueType)("boolean") : (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)())
        }
      }
    });
    defineType("OptionalCallExpression", {
      visitor: ["callee", "arguments", "typeParameters", "typeArguments"],
      builder: ["callee", "arguments", "optional"],
      aliases: ["Expression"],
      fields: Object.assign({
        callee: {
          validate: (0, _utils.assertNodeType)("Expression")
        },
        arguments: (0, _utils.validateArrayOfType)("Expression", "SpreadElement", "ArgumentPlaceholder"),
        optional: {
          validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertValueType)("boolean") : (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)())
        },
        typeArguments: {
          validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"),
          optional: true
        }
      }, {
        typeParameters: {
          validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"),
          optional: true
        }
      })
    });
    defineType("ClassProperty", {
      visitor: ["decorators", "variance", "key", "typeAnnotation", "value"],
      builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"],
      aliases: ["Property"],
      fields: Object.assign({}, classMethodOrPropertyCommon(), {
        value: {
          validate: (0, _utils.assertNodeType)("Expression"),
          optional: true
        },
        definite: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        },
        typeAnnotation: {
          validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
          optional: true
        },
        decorators: {
          validate: (0, _utils.arrayOfType)("Decorator"),
          optional: true
        },
        readonly: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        },
        declare: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        },
        variance: {
          validate: (0, _utils.assertNodeType)("Variance"),
          optional: true
        }
      })
    });
    defineType("ClassAccessorProperty", {
      visitor: ["decorators", "key", "typeAnnotation", "value"],
      builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"],
      aliases: ["Property", "Accessor"],
      fields: Object.assign({}, classMethodOrPropertyCommon(), {
        key: {
          validate: (0, _utils.chain)(function() {
            const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "PrivateName");
            const computed = (0, _utils.assertNodeType)("Expression");
            return function(node, key, val) {
              const validator = node.computed ? computed : normal;
              validator(node, key, val);
            };
          }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression", "PrivateName"))
        },
        value: {
          validate: (0, _utils.assertNodeType)("Expression"),
          optional: true
        },
        definite: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        },
        typeAnnotation: {
          validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
          optional: true
        },
        decorators: {
          validate: (0, _utils.arrayOfType)("Decorator"),
          optional: true
        },
        readonly: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        },
        declare: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        },
        variance: {
          validate: (0, _utils.assertNodeType)("Variance"),
          optional: true
        }
      })
    });
    defineType("ClassPrivateProperty", {
      visitor: ["decorators", "variance", "key", "typeAnnotation", "value"],
      builder: ["key", "value", "decorators", "static"],
      aliases: ["Property", "Private"],
      fields: {
        key: {
          validate: (0, _utils.assertNodeType)("PrivateName")
        },
        value: {
          validate: (0, _utils.assertNodeType)("Expression"),
          optional: true
        },
        typeAnnotation: {
          validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
          optional: true
        },
        decorators: {
          validate: (0, _utils.arrayOfType)("Decorator"),
          optional: true
        },
        static: {
          validate: (0, _utils.assertValueType)("boolean"),
          default: false
        },
        readonly: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        },
        optional: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        },
        definite: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        },
        variance: {
          validate: (0, _utils.assertNodeType)("Variance"),
          optional: true
        }
      }
    });
    defineType("ClassPrivateMethod", {
      builder: ["kind", "key", "params", "body", "static"],
      visitor: ["decorators", "key", "typeParameters", "params", "returnType", "body"],
      aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method", "Private"],
      fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), {
        kind: {
          validate: (0, _utils.assertOneOf)("get", "set", "method"),
          default: "method"
        },
        key: {
          validate: (0, _utils.assertNodeType)("PrivateName")
        },
        body: {
          validate: (0, _utils.assertNodeType)("BlockStatement")
        }
      })
    });
    defineType("PrivateName", {
      visitor: ["id"],
      aliases: ["Private"],
      fields: {
        id: {
          validate: (0, _utils.assertNodeType)("Identifier")
        }
      }
    });
    defineType("StaticBlock", {
      visitor: ["body"],
      fields: {
        body: (0, _utils.validateArrayOfType)("Statement")
      },
      aliases: ["Scopable", "BlockParent", "FunctionParent"]
    });
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/definitions/flow.js
var require_flow = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/definitions/flow.js"() {
    "use strict";
    init_esm_shims();
    var _core = require_core2();
    var _utils = require_utils();
    var defineType = (0, _utils.defineAliasedType)("Flow");
    var defineInterfaceishType = (name) => {
      const isDeclareClass = name === "DeclareClass";
      defineType(name, {
        builder: ["id", "typeParameters", "extends", "body"],
        visitor: ["id", "typeParameters", "extends", ...isDeclareClass ? ["mixins", "implements"] : [], "body"],
        aliases: ["FlowDeclaration", "Statement", "Declaration"],
        fields: Object.assign({
          id: (0, _utils.validateType)("Identifier"),
          typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
          extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends"))
        }, isDeclareClass ? {
          mixins: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")),
          implements: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ClassImplements"))
        } : {}, {
          body: (0, _utils.validateType)("ObjectTypeAnnotation")
        })
      });
    };
    defineType("AnyTypeAnnotation", {
      aliases: ["FlowType", "FlowBaseAnnotation"]
    });
    defineType("ArrayTypeAnnotation", {
      visitor: ["elementType"],
      aliases: ["FlowType"],
      fields: {
        elementType: (0, _utils.validateType)("FlowType")
      }
    });
    defineType("BooleanTypeAnnotation", {
      aliases: ["FlowType", "FlowBaseAnnotation"]
    });
    defineType("BooleanLiteralTypeAnnotation", {
      builder: ["value"],
      aliases: ["FlowType"],
      fields: {
        value: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
      }
    });
    defineType("NullLiteralTypeAnnotation", {
      aliases: ["FlowType", "FlowBaseAnnotation"]
    });
    defineType("ClassImplements", {
      visitor: ["id", "typeParameters"],
      fields: {
        id: (0, _utils.validateType)("Identifier"),
        typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")
      }
    });
    defineInterfaceishType("DeclareClass");
    defineType("DeclareFunction", {
      builder: ["id"],
      visitor: ["id", "predicate"],
      aliases: ["FlowDeclaration", "Statement", "Declaration"],
      fields: {
        id: (0, _utils.validateType)("Identifier"),
        predicate: (0, _utils.validateOptionalType)("DeclaredPredicate")
      }
    });
    defineInterfaceishType("DeclareInterface");
    defineType("DeclareModule", {
      builder: ["id", "body", "kind"],
      visitor: ["id", "body"],
      aliases: ["FlowDeclaration", "Statement", "Declaration"],
      fields: {
        id: (0, _utils.validateType)("Identifier", "StringLiteral"),
        body: (0, _utils.validateType)("BlockStatement"),
        kind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("CommonJS", "ES"))
      }
    });
    defineType("DeclareModuleExports", {
      visitor: ["typeAnnotation"],
      aliases: ["FlowDeclaration", "Statement", "Declaration"],
      fields: {
        typeAnnotation: (0, _utils.validateType)("TypeAnnotation")
      }
    });
    defineType("DeclareTypeAlias", {
      visitor: ["id", "typeParameters", "right"],
      aliases: ["FlowDeclaration", "Statement", "Declaration"],
      fields: {
        id: (0, _utils.validateType)("Identifier"),
        typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
        right: (0, _utils.validateType)("FlowType")
      }
    });
    defineType("DeclareOpaqueType", {
      visitor: ["id", "typeParameters", "supertype"],
      aliases: ["FlowDeclaration", "Statement", "Declaration"],
      fields: {
        id: (0, _utils.validateType)("Identifier"),
        typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
        supertype: (0, _utils.validateOptionalType)("FlowType"),
        impltype: (0, _utils.validateOptionalType)("FlowType")
      }
    });
    defineType("DeclareVariable", {
      visitor: ["id"],
      aliases: ["FlowDeclaration", "Statement", "Declaration"],
      fields: {
        id: (0, _utils.validateType)("Identifier")
      }
    });
    defineType("DeclareExportDeclaration", {
      visitor: ["declaration", "specifiers", "source", "attributes"],
      aliases: ["FlowDeclaration", "Statement", "Declaration"],
      fields: Object.assign({
        declaration: (0, _utils.validateOptionalType)("Flow"),
        specifiers: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ExportSpecifier", "ExportNamespaceSpecifier")),
        source: (0, _utils.validateOptionalType)("StringLiteral"),
        default: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))
      }, _core.importAttributes)
    });
    defineType("DeclareExportAllDeclaration", {
      visitor: ["source", "attributes"],
      aliases: ["FlowDeclaration", "Statement", "Declaration"],
      fields: Object.assign({
        source: (0, _utils.validateType)("StringLiteral"),
        exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value"))
      }, _core.importAttributes)
    });
    defineType("DeclaredPredicate", {
      visitor: ["value"],
      aliases: ["FlowPredicate"],
      fields: {
        value: (0, _utils.validateType)("Flow")
      }
    });
    defineType("ExistsTypeAnnotation", {
      aliases: ["FlowType"]
    });
    defineType("FunctionTypeAnnotation", {
      builder: ["typeParameters", "params", "rest", "returnType"],
      visitor: ["typeParameters", "this", "params", "rest", "returnType"],
      aliases: ["FlowType"],
      fields: {
        typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
        params: (0, _utils.validateArrayOfType)("FunctionTypeParam"),
        rest: (0, _utils.validateOptionalType)("FunctionTypeParam"),
        this: (0, _utils.validateOptionalType)("FunctionTypeParam"),
        returnType: (0, _utils.validateType)("FlowType")
      }
    });
    defineType("FunctionTypeParam", {
      visitor: ["name", "typeAnnotation"],
      fields: {
        name: (0, _utils.validateOptionalType)("Identifier"),
        typeAnnotation: (0, _utils.validateType)("FlowType"),
        optional: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))
      }
    });
    defineType("GenericTypeAnnotation", {
      visitor: ["id", "typeParameters"],
      aliases: ["FlowType"],
      fields: {
        id: (0, _utils.validateType)("Identifier", "QualifiedTypeIdentifier"),
        typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")
      }
    });
    defineType("InferredPredicate", {
      aliases: ["FlowPredicate"]
    });
    defineType("InterfaceExtends", {
      visitor: ["id", "typeParameters"],
      fields: {
        id: (0, _utils.validateType)("Identifier", "QualifiedTypeIdentifier"),
        typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")
      }
    });
    defineInterfaceishType("InterfaceDeclaration");
    defineType("InterfaceTypeAnnotation", {
      visitor: ["extends", "body"],
      aliases: ["FlowType"],
      fields: {
        extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")),
        body: (0, _utils.validateType)("ObjectTypeAnnotation")
      }
    });
    defineType("IntersectionTypeAnnotation", {
      visitor: ["types"],
      aliases: ["FlowType"],
      fields: {
        types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
      }
    });
    defineType("MixedTypeAnnotation", {
      aliases: ["FlowType", "FlowBaseAnnotation"]
    });
    defineType("EmptyTypeAnnotation", {
      aliases: ["FlowType", "FlowBaseAnnotation"]
    });
    defineType("NullableTypeAnnotation", {
      visitor: ["typeAnnotation"],
      aliases: ["FlowType"],
      fields: {
        typeAnnotation: (0, _utils.validateType)("FlowType")
      }
    });
    defineType("NumberLiteralTypeAnnotation", {
      builder: ["value"],
      aliases: ["FlowType"],
      fields: {
        value: (0, _utils.validate)((0, _utils.assertValueType)("number"))
      }
    });
    defineType("NumberTypeAnnotation", {
      aliases: ["FlowType", "FlowBaseAnnotation"]
    });
    defineType("ObjectTypeAnnotation", {
      visitor: ["properties", "indexers", "callProperties", "internalSlots"],
      aliases: ["FlowType"],
      builder: ["properties", "indexers", "callProperties", "internalSlots", "exact"],
      fields: {
        properties: (0, _utils.validate)((0, _utils.arrayOfType)("ObjectTypeProperty", "ObjectTypeSpreadProperty")),
        indexers: {
          validate: (0, _utils.arrayOfType)("ObjectTypeIndexer"),
          optional: true,
          default: []
        },
        callProperties: {
          validate: (0, _utils.arrayOfType)("ObjectTypeCallProperty"),
          optional: true,
          default: []
        },
        internalSlots: {
          validate: (0, _utils.arrayOfType)("ObjectTypeInternalSlot"),
          optional: true,
          default: []
        },
        exact: {
          validate: (0, _utils.assertValueType)("boolean"),
          default: false
        },
        inexact: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))
      }
    });
    defineType("ObjectTypeInternalSlot", {
      visitor: ["id", "value"],
      builder: ["id", "value", "optional", "static", "method"],
      aliases: ["UserWhitespacable"],
      fields: {
        id: (0, _utils.validateType)("Identifier"),
        value: (0, _utils.validateType)("FlowType"),
        optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
        static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
        method: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
      }
    });
    defineType("ObjectTypeCallProperty", {
      visitor: ["value"],
      aliases: ["UserWhitespacable"],
      fields: {
        value: (0, _utils.validateType)("FlowType"),
        static: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
      }
    });
    defineType("ObjectTypeIndexer", {
      visitor: ["variance", "id", "key", "value"],
      builder: ["id", "key", "value", "variance"],
      aliases: ["UserWhitespacable"],
      fields: {
        id: (0, _utils.validateOptionalType)("Identifier"),
        key: (0, _utils.validateType)("FlowType"),
        value: (0, _utils.validateType)("FlowType"),
        static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
        variance: (0, _utils.validateOptionalType)("Variance")
      }
    });
    defineType("ObjectTypeProperty", {
      visitor: ["key", "value", "variance"],
      aliases: ["UserWhitespacable"],
      fields: {
        key: (0, _utils.validateType)("Identifier", "StringLiteral"),
        value: (0, _utils.validateType)("FlowType"),
        kind: (0, _utils.validate)((0, _utils.assertOneOf)("init", "get", "set")),
        static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
        proto: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
        optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
        variance: (0, _utils.validateOptionalType)("Variance"),
        method: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
      }
    });
    defineType("ObjectTypeSpreadProperty", {
      visitor: ["argument"],
      aliases: ["UserWhitespacable"],
      fields: {
        argument: (0, _utils.validateType)("FlowType")
      }
    });
    defineType("OpaqueType", {
      visitor: ["id", "typeParameters", "supertype", "impltype"],
      aliases: ["FlowDeclaration", "Statement", "Declaration"],
      fields: {
        id: (0, _utils.validateType)("Identifier"),
        typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
        supertype: (0, _utils.validateOptionalType)("FlowType"),
        impltype: (0, _utils.validateType)("FlowType")
      }
    });
    defineType("QualifiedTypeIdentifier", {
      visitor: ["qualification", "id"],
      builder: ["id", "qualification"],
      fields: {
        id: (0, _utils.validateType)("Identifier"),
        qualification: (0, _utils.validateType)("Identifier", "QualifiedTypeIdentifier")
      }
    });
    defineType("StringLiteralTypeAnnotation", {
      builder: ["value"],
      aliases: ["FlowType"],
      fields: {
        value: (0, _utils.validate)((0, _utils.assertValueType)("string"))
      }
    });
    defineType("StringTypeAnnotation", {
      aliases: ["FlowType", "FlowBaseAnnotation"]
    });
    defineType("SymbolTypeAnnotation", {
      aliases: ["FlowType", "FlowBaseAnnotation"]
    });
    defineType("ThisTypeAnnotation", {
      aliases: ["FlowType", "FlowBaseAnnotation"]
    });
    defineType("TupleTypeAnnotation", {
      visitor: ["types"],
      aliases: ["FlowType"],
      fields: {
        types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
      }
    });
    defineType("TypeofTypeAnnotation", {
      visitor: ["argument"],
      aliases: ["FlowType"],
      fields: {
        argument: (0, _utils.validateType)("FlowType")
      }
    });
    defineType("TypeAlias", {
      visitor: ["id", "typeParameters", "right"],
      aliases: ["FlowDeclaration", "Statement", "Declaration"],
      fields: {
        id: (0, _utils.validateType)("Identifier"),
        typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
        right: (0, _utils.validateType)("FlowType")
      }
    });
    defineType("TypeAnnotation", {
      visitor: ["typeAnnotation"],
      fields: {
        typeAnnotation: (0, _utils.validateType)("FlowType")
      }
    });
    defineType("TypeCastExpression", {
      visitor: ["expression", "typeAnnotation"],
      aliases: ["ExpressionWrapper", "Expression"],
      fields: {
        expression: (0, _utils.validateType)("Expression"),
        typeAnnotation: (0, _utils.validateType)("TypeAnnotation")
      }
    });
    defineType("TypeParameter", {
      visitor: ["bound", "default", "variance"],
      fields: {
        name: (0, _utils.validate)((0, _utils.assertValueType)("string")),
        bound: (0, _utils.validateOptionalType)("TypeAnnotation"),
        default: (0, _utils.validateOptionalType)("FlowType"),
        variance: (0, _utils.validateOptionalType)("Variance")
      }
    });
    defineType("TypeParameterDeclaration", {
      visitor: ["params"],
      fields: {
        params: (0, _utils.validate)((0, _utils.arrayOfType)("TypeParameter"))
      }
    });
    defineType("TypeParameterInstantiation", {
      visitor: ["params"],
      fields: {
        params: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
      }
    });
    defineType("UnionTypeAnnotation", {
      visitor: ["types"],
      aliases: ["FlowType"],
      fields: {
        types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
      }
    });
    defineType("Variance", {
      builder: ["kind"],
      fields: {
        kind: (0, _utils.validate)((0, _utils.assertOneOf)("minus", "plus"))
      }
    });
    defineType("VoidTypeAnnotation", {
      aliases: ["FlowType", "FlowBaseAnnotation"]
    });
    defineType("EnumDeclaration", {
      aliases: ["Statement", "Declaration"],
      visitor: ["id", "body"],
      fields: {
        id: (0, _utils.validateType)("Identifier"),
        body: (0, _utils.validateType)("EnumBooleanBody", "EnumNumberBody", "EnumStringBody", "EnumSymbolBody")
      }
    });
    defineType("EnumBooleanBody", {
      aliases: ["EnumBody"],
      visitor: ["members"],
      fields: {
        explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
        members: (0, _utils.validateArrayOfType)("EnumBooleanMember"),
        hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
      }
    });
    defineType("EnumNumberBody", {
      aliases: ["EnumBody"],
      visitor: ["members"],
      fields: {
        explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
        members: (0, _utils.validateArrayOfType)("EnumNumberMember"),
        hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
      }
    });
    defineType("EnumStringBody", {
      aliases: ["EnumBody"],
      visitor: ["members"],
      fields: {
        explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
        members: (0, _utils.validateArrayOfType)("EnumStringMember", "EnumDefaultedMember"),
        hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
      }
    });
    defineType("EnumSymbolBody", {
      aliases: ["EnumBody"],
      visitor: ["members"],
      fields: {
        members: (0, _utils.validateArrayOfType)("EnumDefaultedMember"),
        hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
      }
    });
    defineType("EnumBooleanMember", {
      aliases: ["EnumMember"],
      builder: ["id"],
      visitor: ["id", "init"],
      fields: {
        id: (0, _utils.validateType)("Identifier"),
        init: (0, _utils.validateType)("BooleanLiteral")
      }
    });
    defineType("EnumNumberMember", {
      aliases: ["EnumMember"],
      visitor: ["id", "init"],
      fields: {
        id: (0, _utils.validateType)("Identifier"),
        init: (0, _utils.validateType)("NumericLiteral")
      }
    });
    defineType("EnumStringMember", {
      aliases: ["EnumMember"],
      visitor: ["id", "init"],
      fields: {
        id: (0, _utils.validateType)("Identifier"),
        init: (0, _utils.validateType)("StringLiteral")
      }
    });
    defineType("EnumDefaultedMember", {
      aliases: ["EnumMember"],
      visitor: ["id"],
      fields: {
        id: (0, _utils.validateType)("Identifier")
      }
    });
    defineType("IndexedAccessType", {
      visitor: ["objectType", "indexType"],
      aliases: ["FlowType"],
      fields: {
        objectType: (0, _utils.validateType)("FlowType"),
        indexType: (0, _utils.validateType)("FlowType")
      }
    });
    defineType("OptionalIndexedAccessType", {
      visitor: ["objectType", "indexType"],
      aliases: ["FlowType"],
      fields: {
        objectType: (0, _utils.validateType)("FlowType"),
        indexType: (0, _utils.validateType)("FlowType"),
        optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
      }
    });
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/definitions/jsx.js
var require_jsx = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/definitions/jsx.js"() {
    "use strict";
    init_esm_shims();
    var _utils = require_utils();
    var defineType = (0, _utils.defineAliasedType)("JSX");
    defineType("JSXAttribute", {
      visitor: ["name", "value"],
      aliases: ["Immutable"],
      fields: {
        name: {
          validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXNamespacedName")
        },
        value: {
          optional: true,
          validate: (0, _utils.assertNodeType)("JSXElement", "JSXFragment", "StringLiteral", "JSXExpressionContainer")
        }
      }
    });
    defineType("JSXClosingElement", {
      visitor: ["name"],
      aliases: ["Immutable"],
      fields: {
        name: {
          validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName")
        }
      }
    });
    defineType("JSXElement", {
      builder: ["openingElement", "closingElement", "children", "selfClosing"],
      visitor: ["openingElement", "children", "closingElement"],
      aliases: ["Immutable", "Expression"],
      fields: Object.assign({
        openingElement: {
          validate: (0, _utils.assertNodeType)("JSXOpeningElement")
        },
        closingElement: {
          optional: true,
          validate: (0, _utils.assertNodeType)("JSXClosingElement")
        },
        children: (0, _utils.validateArrayOfType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")
      }, {
        selfClosing: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        }
      })
    });
    defineType("JSXEmptyExpression", {});
    defineType("JSXExpressionContainer", {
      visitor: ["expression"],
      aliases: ["Immutable"],
      fields: {
        expression: {
          validate: (0, _utils.assertNodeType)("Expression", "JSXEmptyExpression")
        }
      }
    });
    defineType("JSXSpreadChild", {
      visitor: ["expression"],
      aliases: ["Immutable"],
      fields: {
        expression: {
          validate: (0, _utils.assertNodeType)("Expression")
        }
      }
    });
    defineType("JSXIdentifier", {
      builder: ["name"],
      fields: {
        name: {
          validate: (0, _utils.assertValueType)("string")
        }
      }
    });
    defineType("JSXMemberExpression", {
      visitor: ["object", "property"],
      fields: {
        object: {
          validate: (0, _utils.assertNodeType)("JSXMemberExpression", "JSXIdentifier")
        },
        property: {
          validate: (0, _utils.assertNodeType)("JSXIdentifier")
        }
      }
    });
    defineType("JSXNamespacedName", {
      visitor: ["namespace", "name"],
      fields: {
        namespace: {
          validate: (0, _utils.assertNodeType)("JSXIdentifier")
        },
        name: {
          validate: (0, _utils.assertNodeType)("JSXIdentifier")
        }
      }
    });
    defineType("JSXOpeningElement", {
      builder: ["name", "attributes", "selfClosing"],
      visitor: ["name", "typeParameters", "typeArguments", "attributes"],
      aliases: ["Immutable"],
      fields: Object.assign({
        name: {
          validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName")
        },
        selfClosing: {
          default: false
        },
        attributes: (0, _utils.validateArrayOfType)("JSXAttribute", "JSXSpreadAttribute"),
        typeArguments: {
          validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"),
          optional: true
        }
      }, {
        typeParameters: {
          validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"),
          optional: true
        }
      })
    });
    defineType("JSXSpreadAttribute", {
      visitor: ["argument"],
      fields: {
        argument: {
          validate: (0, _utils.assertNodeType)("Expression")
        }
      }
    });
    defineType("JSXText", {
      aliases: ["Immutable"],
      builder: ["value"],
      fields: {
        value: {
          validate: (0, _utils.assertValueType)("string")
        }
      }
    });
    defineType("JSXFragment", {
      builder: ["openingFragment", "closingFragment", "children"],
      visitor: ["openingFragment", "children", "closingFragment"],
      aliases: ["Immutable", "Expression"],
      fields: {
        openingFragment: {
          validate: (0, _utils.assertNodeType)("JSXOpeningFragment")
        },
        closingFragment: {
          validate: (0, _utils.assertNodeType)("JSXClosingFragment")
        },
        children: (0, _utils.validateArrayOfType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")
      }
    });
    defineType("JSXOpeningFragment", {
      aliases: ["Immutable"]
    });
    defineType("JSXClosingFragment", {
      aliases: ["Immutable"]
    });
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/definitions/placeholders.js
var require_placeholders = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/definitions/placeholders.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PLACEHOLDERS_FLIPPED_ALIAS = exports.PLACEHOLDERS_ALIAS = exports.PLACEHOLDERS = void 0;
    var _utils = require_utils();
    var PLACEHOLDERS = exports.PLACEHOLDERS = ["Identifier", "StringLiteral", "Expression", "Statement", "Declaration", "BlockStatement", "ClassBody", "Pattern"];
    var PLACEHOLDERS_ALIAS = exports.PLACEHOLDERS_ALIAS = {
      Declaration: ["Statement"],
      Pattern: ["PatternLike", "LVal"]
    };
    for (const type of PLACEHOLDERS) {
      const alias = _utils.ALIAS_KEYS[type];
      if (alias != null && alias.length) PLACEHOLDERS_ALIAS[type] = alias;
    }
    var PLACEHOLDERS_FLIPPED_ALIAS = exports.PLACEHOLDERS_FLIPPED_ALIAS = {};
    Object.keys(PLACEHOLDERS_ALIAS).forEach((type) => {
      PLACEHOLDERS_ALIAS[type].forEach((alias) => {
        if (!hasOwnProperty.call(PLACEHOLDERS_FLIPPED_ALIAS, alias)) {
          PLACEHOLDERS_FLIPPED_ALIAS[alias] = [];
        }
        PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);
      });
    });
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/definitions/misc.js
var require_misc = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/definitions/misc.js"() {
    "use strict";
    init_esm_shims();
    var _utils = require_utils();
    var _placeholders = require_placeholders();
    var _core = require_core2();
    var defineType = (0, _utils.defineAliasedType)("Miscellaneous");
    {
      defineType("Noop", {
        visitor: []
      });
    }
    defineType("Placeholder", {
      visitor: [],
      builder: ["expectedNode", "name"],
      fields: Object.assign({
        name: {
          validate: (0, _utils.assertNodeType)("Identifier")
        },
        expectedNode: {
          validate: (0, _utils.assertOneOf)(..._placeholders.PLACEHOLDERS)
        }
      }, (0, _core.patternLikeCommon)())
    });
    defineType("V8IntrinsicIdentifier", {
      builder: ["name"],
      fields: {
        name: {
          validate: (0, _utils.assertValueType)("string")
        }
      }
    });
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/definitions/experimental.js
var require_experimental = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/definitions/experimental.js"() {
    "use strict";
    init_esm_shims();
    var _utils = require_utils();
    (0, _utils.default)("ArgumentPlaceholder", {});
    (0, _utils.default)("BindExpression", {
      visitor: ["object", "callee"],
      aliases: ["Expression"],
      fields: !process.env.BABEL_TYPES_8_BREAKING ? {
        object: {
          validate: Object.assign(() => {
          }, {
            oneOfNodeTypes: ["Expression"]
          })
        },
        callee: {
          validate: Object.assign(() => {
          }, {
            oneOfNodeTypes: ["Expression"]
          })
        }
      } : {
        object: {
          validate: (0, _utils.assertNodeType)("Expression")
        },
        callee: {
          validate: (0, _utils.assertNodeType)("Expression")
        }
      }
    });
    (0, _utils.default)("ImportAttribute", {
      visitor: ["key", "value"],
      fields: {
        key: {
          validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral")
        },
        value: {
          validate: (0, _utils.assertNodeType)("StringLiteral")
        }
      }
    });
    (0, _utils.default)("Decorator", {
      visitor: ["expression"],
      fields: {
        expression: {
          validate: (0, _utils.assertNodeType)("Expression")
        }
      }
    });
    (0, _utils.default)("DoExpression", {
      visitor: ["body"],
      builder: ["body", "async"],
      aliases: ["Expression"],
      fields: {
        body: {
          validate: (0, _utils.assertNodeType)("BlockStatement")
        },
        async: {
          validate: (0, _utils.assertValueType)("boolean"),
          default: false
        }
      }
    });
    (0, _utils.default)("ExportDefaultSpecifier", {
      visitor: ["exported"],
      aliases: ["ModuleSpecifier"],
      fields: {
        exported: {
          validate: (0, _utils.assertNodeType)("Identifier")
        }
      }
    });
    (0, _utils.default)("RecordExpression", {
      visitor: ["properties"],
      aliases: ["Expression"],
      fields: {
        properties: (0, _utils.validateArrayOfType)("ObjectProperty", "SpreadElement")
      }
    });
    (0, _utils.default)("TupleExpression", {
      fields: {
        elements: {
          validate: (0, _utils.arrayOfType)("Expression", "SpreadElement"),
          default: []
        }
      },
      visitor: ["elements"],
      aliases: ["Expression"]
    });
    {
      (0, _utils.default)("DecimalLiteral", {
        builder: ["value"],
        fields: {
          value: {
            validate: (0, _utils.assertValueType)("string")
          }
        },
        aliases: ["Expression", "Pureish", "Literal", "Immutable"]
      });
    }
    (0, _utils.default)("ModuleExpression", {
      visitor: ["body"],
      fields: {
        body: {
          validate: (0, _utils.assertNodeType)("Program")
        }
      },
      aliases: ["Expression"]
    });
    (0, _utils.default)("TopicReference", {
      aliases: ["Expression"]
    });
    (0, _utils.default)("PipelineTopicExpression", {
      builder: ["expression"],
      visitor: ["expression"],
      fields: {
        expression: {
          validate: (0, _utils.assertNodeType)("Expression")
        }
      },
      aliases: ["Expression"]
    });
    (0, _utils.default)("PipelineBareFunction", {
      builder: ["callee"],
      visitor: ["callee"],
      fields: {
        callee: {
          validate: (0, _utils.assertNodeType)("Expression")
        }
      },
      aliases: ["Expression"]
    });
    (0, _utils.default)("PipelinePrimaryTopicReference", {
      aliases: ["Expression"]
    });
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/definitions/typescript.js
var require_typescript2 = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/definitions/typescript.js"() {
    "use strict";
    init_esm_shims();
    var _utils = require_utils();
    var _core = require_core2();
    var _is = require_is();
    var defineType = (0, _utils.defineAliasedType)("TypeScript");
    var bool = (0, _utils.assertValueType)("boolean");
    var tSFunctionTypeAnnotationCommon = () => ({
      returnType: {
        validate: (0, _utils.assertNodeType)("TSTypeAnnotation", "Noop"),
        optional: true
      },
      typeParameters: {
        validate: (0, _utils.assertNodeType)("TSTypeParameterDeclaration", "Noop"),
        optional: true
      }
    });
    defineType("TSParameterProperty", {
      aliases: ["LVal"],
      visitor: ["parameter"],
      fields: {
        accessibility: {
          validate: (0, _utils.assertOneOf)("public", "private", "protected"),
          optional: true
        },
        readonly: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        },
        parameter: {
          validate: (0, _utils.assertNodeType)("Identifier", "AssignmentPattern")
        },
        override: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        },
        decorators: {
          validate: (0, _utils.arrayOfType)("Decorator"),
          optional: true
        }
      }
    });
    defineType("TSDeclareFunction", {
      aliases: ["Statement", "Declaration"],
      visitor: ["id", "typeParameters", "params", "returnType"],
      fields: Object.assign({}, (0, _core.functionDeclarationCommon)(), tSFunctionTypeAnnotationCommon())
    });
    defineType("TSDeclareMethod", {
      visitor: ["decorators", "key", "typeParameters", "params", "returnType"],
      fields: Object.assign({}, (0, _core.classMethodOrDeclareMethodCommon)(), tSFunctionTypeAnnotationCommon())
    });
    defineType("TSQualifiedName", {
      aliases: ["TSEntityName"],
      visitor: ["left", "right"],
      fields: {
        left: (0, _utils.validateType)("TSEntityName"),
        right: (0, _utils.validateType)("Identifier")
      }
    });
    var signatureDeclarationCommon = () => ({
      typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),
      ["parameters"]: (0, _utils.validateArrayOfType)("ArrayPattern", "Identifier", "ObjectPattern", "RestElement"),
      ["typeAnnotation"]: (0, _utils.validateOptionalType)("TSTypeAnnotation")
    });
    var callConstructSignatureDeclaration = {
      aliases: ["TSTypeElement"],
      visitor: ["typeParameters", "parameters", "typeAnnotation"],
      fields: signatureDeclarationCommon()
    };
    defineType("TSCallSignatureDeclaration", callConstructSignatureDeclaration);
    defineType("TSConstructSignatureDeclaration", callConstructSignatureDeclaration);
    var namedTypeElementCommon = () => ({
      key: (0, _utils.validateType)("Expression"),
      computed: {
        default: false
      },
      optional: (0, _utils.validateOptional)(bool)
    });
    defineType("TSPropertySignature", {
      aliases: ["TSTypeElement"],
      visitor: ["key", "typeAnnotation"],
      fields: Object.assign({}, namedTypeElementCommon(), {
        readonly: (0, _utils.validateOptional)(bool),
        typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"),
        kind: {
          optional: true,
          validate: (0, _utils.assertOneOf)("get", "set")
        }
      })
    });
    defineType("TSMethodSignature", {
      aliases: ["TSTypeElement"],
      visitor: ["key", "typeParameters", "parameters", "typeAnnotation"],
      fields: Object.assign({}, signatureDeclarationCommon(), namedTypeElementCommon(), {
        kind: {
          validate: (0, _utils.assertOneOf)("method", "get", "set")
        }
      })
    });
    defineType("TSIndexSignature", {
      aliases: ["TSTypeElement"],
      visitor: ["parameters", "typeAnnotation"],
      fields: {
        readonly: (0, _utils.validateOptional)(bool),
        static: (0, _utils.validateOptional)(bool),
        parameters: (0, _utils.validateArrayOfType)("Identifier"),
        typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation")
      }
    });
    var tsKeywordTypes = ["TSAnyKeyword", "TSBooleanKeyword", "TSBigIntKeyword", "TSIntrinsicKeyword", "TSNeverKeyword", "TSNullKeyword", "TSNumberKeyword", "TSObjectKeyword", "TSStringKeyword", "TSSymbolKeyword", "TSUndefinedKeyword", "TSUnknownKeyword", "TSVoidKeyword"];
    for (const type of tsKeywordTypes) {
      defineType(type, {
        aliases: ["TSType", "TSBaseType"],
        visitor: [],
        fields: {}
      });
    }
    defineType("TSThisType", {
      aliases: ["TSType", "TSBaseType"],
      visitor: [],
      fields: {}
    });
    var fnOrCtrBase = {
      aliases: ["TSType"],
      visitor: ["typeParameters", "parameters", "typeAnnotation"]
    };
    defineType("TSFunctionType", Object.assign({}, fnOrCtrBase, {
      fields: signatureDeclarationCommon()
    }));
    defineType("TSConstructorType", Object.assign({}, fnOrCtrBase, {
      fields: Object.assign({}, signatureDeclarationCommon(), {
        abstract: (0, _utils.validateOptional)(bool)
      })
    }));
    defineType("TSTypeReference", {
      aliases: ["TSType"],
      visitor: ["typeName", "typeParameters"],
      fields: {
        typeName: (0, _utils.validateType)("TSEntityName"),
        ["typeParameters"]: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
      }
    });
    defineType("TSTypePredicate", {
      aliases: ["TSType"],
      visitor: ["parameterName", "typeAnnotation"],
      builder: ["parameterName", "typeAnnotation", "asserts"],
      fields: {
        parameterName: (0, _utils.validateType)("Identifier", "TSThisType"),
        typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"),
        asserts: (0, _utils.validateOptional)(bool)
      }
    });
    defineType("TSTypeQuery", {
      aliases: ["TSType"],
      visitor: ["exprName", "typeParameters"],
      fields: {
        exprName: (0, _utils.validateType)("TSEntityName", "TSImportType"),
        ["typeParameters"]: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
      }
    });
    defineType("TSTypeLiteral", {
      aliases: ["TSType"],
      visitor: ["members"],
      fields: {
        members: (0, _utils.validateArrayOfType)("TSTypeElement")
      }
    });
    defineType("TSArrayType", {
      aliases: ["TSType"],
      visitor: ["elementType"],
      fields: {
        elementType: (0, _utils.validateType)("TSType")
      }
    });
    defineType("TSTupleType", {
      aliases: ["TSType"],
      visitor: ["elementTypes"],
      fields: {
        elementTypes: (0, _utils.validateArrayOfType)("TSType", "TSNamedTupleMember")
      }
    });
    defineType("TSOptionalType", {
      aliases: ["TSType"],
      visitor: ["typeAnnotation"],
      fields: {
        typeAnnotation: (0, _utils.validateType)("TSType")
      }
    });
    defineType("TSRestType", {
      aliases: ["TSType"],
      visitor: ["typeAnnotation"],
      fields: {
        typeAnnotation: (0, _utils.validateType)("TSType")
      }
    });
    defineType("TSNamedTupleMember", {
      visitor: ["label", "elementType"],
      builder: ["label", "elementType", "optional"],
      fields: {
        label: (0, _utils.validateType)("Identifier"),
        optional: {
          validate: bool,
          default: false
        },
        elementType: (0, _utils.validateType)("TSType")
      }
    });
    var unionOrIntersection = {
      aliases: ["TSType"],
      visitor: ["types"],
      fields: {
        types: (0, _utils.validateArrayOfType)("TSType")
      }
    };
    defineType("TSUnionType", unionOrIntersection);
    defineType("TSIntersectionType", unionOrIntersection);
    defineType("TSConditionalType", {
      aliases: ["TSType"],
      visitor: ["checkType", "extendsType", "trueType", "falseType"],
      fields: {
        checkType: (0, _utils.validateType)("TSType"),
        extendsType: (0, _utils.validateType)("TSType"),
        trueType: (0, _utils.validateType)("TSType"),
        falseType: (0, _utils.validateType)("TSType")
      }
    });
    defineType("TSInferType", {
      aliases: ["TSType"],
      visitor: ["typeParameter"],
      fields: {
        typeParameter: (0, _utils.validateType)("TSTypeParameter")
      }
    });
    defineType("TSParenthesizedType", {
      aliases: ["TSType"],
      visitor: ["typeAnnotation"],
      fields: {
        typeAnnotation: (0, _utils.validateType)("TSType")
      }
    });
    defineType("TSTypeOperator", {
      aliases: ["TSType"],
      visitor: ["typeAnnotation"],
      fields: {
        operator: (0, _utils.validate)((0, _utils.assertValueType)("string")),
        typeAnnotation: (0, _utils.validateType)("TSType")
      }
    });
    defineType("TSIndexedAccessType", {
      aliases: ["TSType"],
      visitor: ["objectType", "indexType"],
      fields: {
        objectType: (0, _utils.validateType)("TSType"),
        indexType: (0, _utils.validateType)("TSType")
      }
    });
    defineType("TSMappedType", {
      aliases: ["TSType"],
      visitor: ["typeParameter", "nameType", "typeAnnotation"],
      builder: ["typeParameter", "typeAnnotation", "nameType"],
      fields: Object.assign({}, {
        typeParameter: (0, _utils.validateType)("TSTypeParameter")
      }, {
        readonly: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")),
        optional: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")),
        typeAnnotation: (0, _utils.validateOptionalType)("TSType"),
        nameType: (0, _utils.validateOptionalType)("TSType")
      })
    });
    defineType("TSTemplateLiteralType", {
      aliases: ["TSType", "TSBaseType"],
      visitor: ["quasis", "types"],
      fields: {
        quasis: (0, _utils.validateArrayOfType)("TemplateElement"),
        types: {
          validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSType")), function(node, key, val) {
            if (node.quasis.length !== val.length + 1) {
              throw new TypeError(`Number of ${node.type} quasis should be exactly one more than the number of types.
Expected ${val.length + 1} quasis but got ${node.quasis.length}`);
            }
          })
        }
      }
    });
    defineType("TSLiteralType", {
      aliases: ["TSType", "TSBaseType"],
      visitor: ["literal"],
      fields: {
        literal: {
          validate: function() {
            const unaryExpression = (0, _utils.assertNodeType)("NumericLiteral", "BigIntLiteral");
            const unaryOperator = (0, _utils.assertOneOf)("-");
            const literal = (0, _utils.assertNodeType)("NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral");
            function validator(parent, key, node) {
              if ((0, _is.default)("UnaryExpression", node)) {
                unaryOperator(node, "operator", node.operator);
                unaryExpression(node, "argument", node.argument);
              } else {
                literal(parent, key, node);
              }
            }
            validator.oneOfNodeTypes = ["NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral", "UnaryExpression"];
            return validator;
          }()
        }
      }
    });
    {
      defineType("TSExpressionWithTypeArguments", {
        aliases: ["TSType"],
        visitor: ["expression", "typeParameters"],
        fields: {
          expression: (0, _utils.validateType)("TSEntityName"),
          typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
        }
      });
    }
    defineType("TSInterfaceDeclaration", {
      aliases: ["Statement", "Declaration"],
      visitor: ["id", "typeParameters", "extends", "body"],
      fields: {
        declare: (0, _utils.validateOptional)(bool),
        id: (0, _utils.validateType)("Identifier"),
        typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),
        extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("TSExpressionWithTypeArguments")),
        body: (0, _utils.validateType)("TSInterfaceBody")
      }
    });
    defineType("TSInterfaceBody", {
      visitor: ["body"],
      fields: {
        body: (0, _utils.validateArrayOfType)("TSTypeElement")
      }
    });
    defineType("TSTypeAliasDeclaration", {
      aliases: ["Statement", "Declaration"],
      visitor: ["id", "typeParameters", "typeAnnotation"],
      fields: {
        declare: (0, _utils.validateOptional)(bool),
        id: (0, _utils.validateType)("Identifier"),
        typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),
        typeAnnotation: (0, _utils.validateType)("TSType")
      }
    });
    defineType("TSInstantiationExpression", {
      aliases: ["Expression"],
      visitor: ["expression", "typeParameters"],
      fields: {
        expression: (0, _utils.validateType)("Expression"),
        ["typeParameters"]: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
      }
    });
    var TSTypeExpression = {
      aliases: ["Expression", "LVal", "PatternLike"],
      visitor: ["expression", "typeAnnotation"],
      fields: {
        expression: (0, _utils.validateType)("Expression"),
        typeAnnotation: (0, _utils.validateType)("TSType")
      }
    };
    defineType("TSAsExpression", TSTypeExpression);
    defineType("TSSatisfiesExpression", TSTypeExpression);
    defineType("TSTypeAssertion", {
      aliases: ["Expression", "LVal", "PatternLike"],
      visitor: ["typeAnnotation", "expression"],
      fields: {
        typeAnnotation: (0, _utils.validateType)("TSType"),
        expression: (0, _utils.validateType)("Expression")
      }
    });
    defineType("TSEnumBody", {
      visitor: ["members"],
      fields: {
        members: (0, _utils.validateArrayOfType)("TSEnumMember")
      }
    });
    {
      defineType("TSEnumDeclaration", {
        aliases: ["Statement", "Declaration"],
        visitor: ["id", "members"],
        fields: {
          declare: (0, _utils.validateOptional)(bool),
          const: (0, _utils.validateOptional)(bool),
          id: (0, _utils.validateType)("Identifier"),
          members: (0, _utils.validateArrayOfType)("TSEnumMember"),
          initializer: (0, _utils.validateOptionalType)("Expression"),
          body: (0, _utils.validateOptionalType)("TSEnumBody")
        }
      });
    }
    defineType("TSEnumMember", {
      visitor: ["id", "initializer"],
      fields: {
        id: (0, _utils.validateType)("Identifier", "StringLiteral"),
        initializer: (0, _utils.validateOptionalType)("Expression")
      }
    });
    defineType("TSModuleDeclaration", {
      aliases: ["Statement", "Declaration"],
      visitor: ["id", "body"],
      fields: Object.assign({
        kind: {
          validate: (0, _utils.assertOneOf)("global", "module", "namespace")
        },
        declare: (0, _utils.validateOptional)(bool)
      }, {
        global: (0, _utils.validateOptional)(bool)
      }, {
        id: (0, _utils.validateType)("Identifier", "StringLiteral"),
        body: (0, _utils.validateType)("TSModuleBlock", "TSModuleDeclaration")
      })
    });
    defineType("TSModuleBlock", {
      aliases: ["Scopable", "Block", "BlockParent", "FunctionParent"],
      visitor: ["body"],
      fields: {
        body: (0, _utils.validateArrayOfType)("Statement")
      }
    });
    defineType("TSImportType", {
      aliases: ["TSType"],
      builder: ["argument", "qualifier", "typeParameters"],
      visitor: ["argument", "options", "qualifier", "typeParameters"],
      fields: {
        argument: (0, _utils.validateType)("StringLiteral"),
        qualifier: (0, _utils.validateOptionalType)("TSEntityName"),
        ["typeParameters"]: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation"),
        options: {
          validate: (0, _utils.assertNodeType)("Expression"),
          optional: true
        }
      }
    });
    defineType("TSImportEqualsDeclaration", {
      aliases: ["Statement", "Declaration"],
      visitor: ["id", "moduleReference"],
      fields: Object.assign({}, {
        isExport: (0, _utils.validate)(bool)
      }, {
        id: (0, _utils.validateType)("Identifier"),
        moduleReference: (0, _utils.validateType)("TSEntityName", "TSExternalModuleReference"),
        importKind: {
          validate: (0, _utils.assertOneOf)("type", "value"),
          optional: true
        }
      })
    });
    defineType("TSExternalModuleReference", {
      visitor: ["expression"],
      fields: {
        expression: (0, _utils.validateType)("StringLiteral")
      }
    });
    defineType("TSNonNullExpression", {
      aliases: ["Expression", "LVal", "PatternLike"],
      visitor: ["expression"],
      fields: {
        expression: (0, _utils.validateType)("Expression")
      }
    });
    defineType("TSExportAssignment", {
      aliases: ["Statement"],
      visitor: ["expression"],
      fields: {
        expression: (0, _utils.validateType)("Expression")
      }
    });
    defineType("TSNamespaceExportDeclaration", {
      aliases: ["Statement"],
      visitor: ["id"],
      fields: {
        id: (0, _utils.validateType)("Identifier")
      }
    });
    defineType("TSTypeAnnotation", {
      visitor: ["typeAnnotation"],
      fields: {
        typeAnnotation: {
          validate: (0, _utils.assertNodeType)("TSType")
        }
      }
    });
    defineType("TSTypeParameterInstantiation", {
      visitor: ["params"],
      fields: {
        params: (0, _utils.validateArrayOfType)("TSType")
      }
    });
    defineType("TSTypeParameterDeclaration", {
      visitor: ["params"],
      fields: {
        params: (0, _utils.validateArrayOfType)("TSTypeParameter")
      }
    });
    defineType("TSTypeParameter", {
      builder: ["constraint", "default", "name"],
      visitor: ["constraint", "default"],
      fields: {
        name: {
          validate: (0, _utils.assertValueType)("string")
        },
        in: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        },
        out: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        },
        const: {
          validate: (0, _utils.assertValueType)("boolean"),
          optional: true
        },
        constraint: {
          validate: (0, _utils.assertNodeType)("TSType"),
          optional: true
        },
        default: {
          validate: (0, _utils.assertNodeType)("TSType"),
          optional: true
        }
      }
    });
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/definitions/deprecated-aliases.js
var require_deprecated_aliases = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/definitions/deprecated-aliases.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DEPRECATED_ALIASES = void 0;
    var DEPRECATED_ALIASES = exports.DEPRECATED_ALIASES = {
      ModuleDeclaration: "ImportOrExportDeclaration"
    };
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/definitions/index.js
var require_definitions = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/definitions/index.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "ALIAS_KEYS", {
      enumerable: true,
      get: function() {
        return _utils.ALIAS_KEYS;
      }
    });
    Object.defineProperty(exports, "BUILDER_KEYS", {
      enumerable: true,
      get: function() {
        return _utils.BUILDER_KEYS;
      }
    });
    Object.defineProperty(exports, "DEPRECATED_ALIASES", {
      enumerable: true,
      get: function() {
        return _deprecatedAliases.DEPRECATED_ALIASES;
      }
    });
    Object.defineProperty(exports, "DEPRECATED_KEYS", {
      enumerable: true,
      get: function() {
        return _utils.DEPRECATED_KEYS;
      }
    });
    Object.defineProperty(exports, "FLIPPED_ALIAS_KEYS", {
      enumerable: true,
      get: function() {
        return _utils.FLIPPED_ALIAS_KEYS;
      }
    });
    Object.defineProperty(exports, "NODE_FIELDS", {
      enumerable: true,
      get: function() {
        return _utils.NODE_FIELDS;
      }
    });
    Object.defineProperty(exports, "NODE_PARENT_VALIDATIONS", {
      enumerable: true,
      get: function() {
        return _utils.NODE_PARENT_VALIDATIONS;
      }
    });
    Object.defineProperty(exports, "PLACEHOLDERS", {
      enumerable: true,
      get: function() {
        return _placeholders.PLACEHOLDERS;
      }
    });
    Object.defineProperty(exports, "PLACEHOLDERS_ALIAS", {
      enumerable: true,
      get: function() {
        return _placeholders.PLACEHOLDERS_ALIAS;
      }
    });
    Object.defineProperty(exports, "PLACEHOLDERS_FLIPPED_ALIAS", {
      enumerable: true,
      get: function() {
        return _placeholders.PLACEHOLDERS_FLIPPED_ALIAS;
      }
    });
    exports.TYPES = void 0;
    Object.defineProperty(exports, "VISITOR_KEYS", {
      enumerable: true,
      get: function() {
        return _utils.VISITOR_KEYS;
      }
    });
    require_core2();
    require_flow();
    require_jsx();
    require_misc();
    require_experimental();
    require_typescript2();
    var _utils = require_utils();
    var _placeholders = require_placeholders();
    var _deprecatedAliases = require_deprecated_aliases();
    Object.keys(_deprecatedAliases.DEPRECATED_ALIASES).forEach((deprecatedAlias) => {
      _utils.FLIPPED_ALIAS_KEYS[deprecatedAlias] = _utils.FLIPPED_ALIAS_KEYS[_deprecatedAliases.DEPRECATED_ALIASES[deprecatedAlias]];
    });
    var TYPES = exports.TYPES = [].concat(Object.keys(_utils.VISITOR_KEYS), Object.keys(_utils.FLIPPED_ALIAS_KEYS), Object.keys(_utils.DEPRECATED_KEYS));
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/validate.js
var require_validate = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/validate.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = validate;
    exports.validateChild = validateChild;
    exports.validateField = validateField;
    exports.validateInternal = validateInternal;
    var _index = require_definitions();
    function validate(node, key, val) {
      if (!node) return;
      const fields = _index.NODE_FIELDS[node.type];
      if (!fields) return;
      const field = fields[key];
      validateField(node, key, val, field);
      validateChild(node, key, val);
    }
    function validateInternal(field, node, key, val, maybeNode) {
      if (!(field != null && field.validate)) return;
      if (field.optional && val == null) return;
      field.validate(node, key, val);
      if (maybeNode) {
        var _NODE_PARENT_VALIDATI;
        const type = val.type;
        if (type == null) return;
        (_NODE_PARENT_VALIDATI = _index.NODE_PARENT_VALIDATIONS[type]) == null || _NODE_PARENT_VALIDATI.call(_index.NODE_PARENT_VALIDATIONS, node, key, val);
      }
    }
    function validateField(node, key, val, field) {
      if (!(field != null && field.validate)) return;
      if (field.optional && val == null) return;
      field.validate(node, key, val);
    }
    function validateChild(node, key, val) {
      var _NODE_PARENT_VALIDATI2;
      const type = val == null ? void 0 : val.type;
      if (type == null) return;
      (_NODE_PARENT_VALIDATI2 = _index.NODE_PARENT_VALIDATIONS[type]) == null || _NODE_PARENT_VALIDATI2.call(_index.NODE_PARENT_VALIDATIONS, node, key, val);
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/builders/generated/lowercase.js
var require_lowercase = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/builders/generated/lowercase.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.anyTypeAnnotation = anyTypeAnnotation;
    exports.argumentPlaceholder = argumentPlaceholder;
    exports.arrayExpression = arrayExpression;
    exports.arrayPattern = arrayPattern;
    exports.arrayTypeAnnotation = arrayTypeAnnotation;
    exports.arrowFunctionExpression = arrowFunctionExpression;
    exports.assignmentExpression = assignmentExpression;
    exports.assignmentPattern = assignmentPattern;
    exports.awaitExpression = awaitExpression;
    exports.bigIntLiteral = bigIntLiteral;
    exports.binaryExpression = binaryExpression;
    exports.bindExpression = bindExpression;
    exports.blockStatement = blockStatement;
    exports.booleanLiteral = booleanLiteral;
    exports.booleanLiteralTypeAnnotation = booleanLiteralTypeAnnotation;
    exports.booleanTypeAnnotation = booleanTypeAnnotation;
    exports.breakStatement = breakStatement;
    exports.callExpression = callExpression;
    exports.catchClause = catchClause;
    exports.classAccessorProperty = classAccessorProperty;
    exports.classBody = classBody;
    exports.classDeclaration = classDeclaration;
    exports.classExpression = classExpression;
    exports.classImplements = classImplements;
    exports.classMethod = classMethod;
    exports.classPrivateMethod = classPrivateMethod;
    exports.classPrivateProperty = classPrivateProperty;
    exports.classProperty = classProperty;
    exports.conditionalExpression = conditionalExpression;
    exports.continueStatement = continueStatement;
    exports.debuggerStatement = debuggerStatement;
    exports.decimalLiteral = decimalLiteral;
    exports.declareClass = declareClass;
    exports.declareExportAllDeclaration = declareExportAllDeclaration;
    exports.declareExportDeclaration = declareExportDeclaration;
    exports.declareFunction = declareFunction;
    exports.declareInterface = declareInterface;
    exports.declareModule = declareModule;
    exports.declareModuleExports = declareModuleExports;
    exports.declareOpaqueType = declareOpaqueType;
    exports.declareTypeAlias = declareTypeAlias;
    exports.declareVariable = declareVariable;
    exports.declaredPredicate = declaredPredicate;
    exports.decorator = decorator;
    exports.directive = directive;
    exports.directiveLiteral = directiveLiteral;
    exports.doExpression = doExpression;
    exports.doWhileStatement = doWhileStatement;
    exports.emptyStatement = emptyStatement;
    exports.emptyTypeAnnotation = emptyTypeAnnotation;
    exports.enumBooleanBody = enumBooleanBody;
    exports.enumBooleanMember = enumBooleanMember;
    exports.enumDeclaration = enumDeclaration;
    exports.enumDefaultedMember = enumDefaultedMember;
    exports.enumNumberBody = enumNumberBody;
    exports.enumNumberMember = enumNumberMember;
    exports.enumStringBody = enumStringBody;
    exports.enumStringMember = enumStringMember;
    exports.enumSymbolBody = enumSymbolBody;
    exports.existsTypeAnnotation = existsTypeAnnotation;
    exports.exportAllDeclaration = exportAllDeclaration;
    exports.exportDefaultDeclaration = exportDefaultDeclaration;
    exports.exportDefaultSpecifier = exportDefaultSpecifier;
    exports.exportNamedDeclaration = exportNamedDeclaration;
    exports.exportNamespaceSpecifier = exportNamespaceSpecifier;
    exports.exportSpecifier = exportSpecifier;
    exports.expressionStatement = expressionStatement;
    exports.file = file;
    exports.forInStatement = forInStatement;
    exports.forOfStatement = forOfStatement;
    exports.forStatement = forStatement;
    exports.functionDeclaration = functionDeclaration;
    exports.functionExpression = functionExpression;
    exports.functionTypeAnnotation = functionTypeAnnotation;
    exports.functionTypeParam = functionTypeParam;
    exports.genericTypeAnnotation = genericTypeAnnotation;
    exports.identifier = identifier;
    exports.ifStatement = ifStatement;
    exports.import = _import;
    exports.importAttribute = importAttribute;
    exports.importDeclaration = importDeclaration;
    exports.importDefaultSpecifier = importDefaultSpecifier;
    exports.importExpression = importExpression;
    exports.importNamespaceSpecifier = importNamespaceSpecifier;
    exports.importSpecifier = importSpecifier;
    exports.indexedAccessType = indexedAccessType;
    exports.inferredPredicate = inferredPredicate;
    exports.interfaceDeclaration = interfaceDeclaration;
    exports.interfaceExtends = interfaceExtends;
    exports.interfaceTypeAnnotation = interfaceTypeAnnotation;
    exports.interpreterDirective = interpreterDirective;
    exports.intersectionTypeAnnotation = intersectionTypeAnnotation;
    exports.jSXAttribute = exports.jsxAttribute = jsxAttribute;
    exports.jSXClosingElement = exports.jsxClosingElement = jsxClosingElement;
    exports.jSXClosingFragment = exports.jsxClosingFragment = jsxClosingFragment;
    exports.jSXElement = exports.jsxElement = jsxElement;
    exports.jSXEmptyExpression = exports.jsxEmptyExpression = jsxEmptyExpression;
    exports.jSXExpressionContainer = exports.jsxExpressionContainer = jsxExpressionContainer;
    exports.jSXFragment = exports.jsxFragment = jsxFragment;
    exports.jSXIdentifier = exports.jsxIdentifier = jsxIdentifier;
    exports.jSXMemberExpression = exports.jsxMemberExpression = jsxMemberExpression;
    exports.jSXNamespacedName = exports.jsxNamespacedName = jsxNamespacedName;
    exports.jSXOpeningElement = exports.jsxOpeningElement = jsxOpeningElement;
    exports.jSXOpeningFragment = exports.jsxOpeningFragment = jsxOpeningFragment;
    exports.jSXSpreadAttribute = exports.jsxSpreadAttribute = jsxSpreadAttribute;
    exports.jSXSpreadChild = exports.jsxSpreadChild = jsxSpreadChild;
    exports.jSXText = exports.jsxText = jsxText;
    exports.labeledStatement = labeledStatement;
    exports.logicalExpression = logicalExpression;
    exports.memberExpression = memberExpression;
    exports.metaProperty = metaProperty;
    exports.mixedTypeAnnotation = mixedTypeAnnotation;
    exports.moduleExpression = moduleExpression;
    exports.newExpression = newExpression;
    exports.noop = noop3;
    exports.nullLiteral = nullLiteral;
    exports.nullLiteralTypeAnnotation = nullLiteralTypeAnnotation;
    exports.nullableTypeAnnotation = nullableTypeAnnotation;
    exports.numberLiteral = NumberLiteral;
    exports.numberLiteralTypeAnnotation = numberLiteralTypeAnnotation;
    exports.numberTypeAnnotation = numberTypeAnnotation;
    exports.numericLiteral = numericLiteral;
    exports.objectExpression = objectExpression;
    exports.objectMethod = objectMethod;
    exports.objectPattern = objectPattern;
    exports.objectProperty = objectProperty;
    exports.objectTypeAnnotation = objectTypeAnnotation;
    exports.objectTypeCallProperty = objectTypeCallProperty;
    exports.objectTypeIndexer = objectTypeIndexer;
    exports.objectTypeInternalSlot = objectTypeInternalSlot;
    exports.objectTypeProperty = objectTypeProperty;
    exports.objectTypeSpreadProperty = objectTypeSpreadProperty;
    exports.opaqueType = opaqueType;
    exports.optionalCallExpression = optionalCallExpression;
    exports.optionalIndexedAccessType = optionalIndexedAccessType;
    exports.optionalMemberExpression = optionalMemberExpression;
    exports.parenthesizedExpression = parenthesizedExpression;
    exports.pipelineBareFunction = pipelineBareFunction;
    exports.pipelinePrimaryTopicReference = pipelinePrimaryTopicReference;
    exports.pipelineTopicExpression = pipelineTopicExpression;
    exports.placeholder = placeholder;
    exports.privateName = privateName;
    exports.program = program;
    exports.qualifiedTypeIdentifier = qualifiedTypeIdentifier;
    exports.recordExpression = recordExpression;
    exports.regExpLiteral = regExpLiteral;
    exports.regexLiteral = RegexLiteral;
    exports.restElement = restElement;
    exports.restProperty = RestProperty;
    exports.returnStatement = returnStatement;
    exports.sequenceExpression = sequenceExpression;
    exports.spreadElement = spreadElement;
    exports.spreadProperty = SpreadProperty;
    exports.staticBlock = staticBlock;
    exports.stringLiteral = stringLiteral;
    exports.stringLiteralTypeAnnotation = stringLiteralTypeAnnotation;
    exports.stringTypeAnnotation = stringTypeAnnotation;
    exports.super = _super;
    exports.switchCase = switchCase;
    exports.switchStatement = switchStatement;
    exports.symbolTypeAnnotation = symbolTypeAnnotation;
    exports.taggedTemplateExpression = taggedTemplateExpression;
    exports.templateElement = templateElement;
    exports.templateLiteral = templateLiteral;
    exports.thisExpression = thisExpression;
    exports.thisTypeAnnotation = thisTypeAnnotation;
    exports.throwStatement = throwStatement;
    exports.topicReference = topicReference;
    exports.tryStatement = tryStatement;
    exports.tSAnyKeyword = exports.tsAnyKeyword = tsAnyKeyword;
    exports.tSArrayType = exports.tsArrayType = tsArrayType;
    exports.tSAsExpression = exports.tsAsExpression = tsAsExpression;
    exports.tSBigIntKeyword = exports.tsBigIntKeyword = tsBigIntKeyword;
    exports.tSBooleanKeyword = exports.tsBooleanKeyword = tsBooleanKeyword;
    exports.tSCallSignatureDeclaration = exports.tsCallSignatureDeclaration = tsCallSignatureDeclaration;
    exports.tSConditionalType = exports.tsConditionalType = tsConditionalType;
    exports.tSConstructSignatureDeclaration = exports.tsConstructSignatureDeclaration = tsConstructSignatureDeclaration;
    exports.tSConstructorType = exports.tsConstructorType = tsConstructorType;
    exports.tSDeclareFunction = exports.tsDeclareFunction = tsDeclareFunction;
    exports.tSDeclareMethod = exports.tsDeclareMethod = tsDeclareMethod;
    exports.tSEnumBody = exports.tsEnumBody = tsEnumBody;
    exports.tSEnumDeclaration = exports.tsEnumDeclaration = tsEnumDeclaration;
    exports.tSEnumMember = exports.tsEnumMember = tsEnumMember;
    exports.tSExportAssignment = exports.tsExportAssignment = tsExportAssignment;
    exports.tSExpressionWithTypeArguments = exports.tsExpressionWithTypeArguments = tsExpressionWithTypeArguments;
    exports.tSExternalModuleReference = exports.tsExternalModuleReference = tsExternalModuleReference;
    exports.tSFunctionType = exports.tsFunctionType = tsFunctionType;
    exports.tSImportEqualsDeclaration = exports.tsImportEqualsDeclaration = tsImportEqualsDeclaration;
    exports.tSImportType = exports.tsImportType = tsImportType;
    exports.tSIndexSignature = exports.tsIndexSignature = tsIndexSignature;
    exports.tSIndexedAccessType = exports.tsIndexedAccessType = tsIndexedAccessType;
    exports.tSInferType = exports.tsInferType = tsInferType;
    exports.tSInstantiationExpression = exports.tsInstantiationExpression = tsInstantiationExpression;
    exports.tSInterfaceBody = exports.tsInterfaceBody = tsInterfaceBody;
    exports.tSInterfaceDeclaration = exports.tsInterfaceDeclaration = tsInterfaceDeclaration;
    exports.tSIntersectionType = exports.tsIntersectionType = tsIntersectionType;
    exports.tSIntrinsicKeyword = exports.tsIntrinsicKeyword = tsIntrinsicKeyword;
    exports.tSLiteralType = exports.tsLiteralType = tsLiteralType;
    exports.tSMappedType = exports.tsMappedType = tsMappedType;
    exports.tSMethodSignature = exports.tsMethodSignature = tsMethodSignature;
    exports.tSModuleBlock = exports.tsModuleBlock = tsModuleBlock;
    exports.tSModuleDeclaration = exports.tsModuleDeclaration = tsModuleDeclaration;
    exports.tSNamedTupleMember = exports.tsNamedTupleMember = tsNamedTupleMember;
    exports.tSNamespaceExportDeclaration = exports.tsNamespaceExportDeclaration = tsNamespaceExportDeclaration;
    exports.tSNeverKeyword = exports.tsNeverKeyword = tsNeverKeyword;
    exports.tSNonNullExpression = exports.tsNonNullExpression = tsNonNullExpression;
    exports.tSNullKeyword = exports.tsNullKeyword = tsNullKeyword;
    exports.tSNumberKeyword = exports.tsNumberKeyword = tsNumberKeyword;
    exports.tSObjectKeyword = exports.tsObjectKeyword = tsObjectKeyword;
    exports.tSOptionalType = exports.tsOptionalType = tsOptionalType;
    exports.tSParameterProperty = exports.tsParameterProperty = tsParameterProperty;
    exports.tSParenthesizedType = exports.tsParenthesizedType = tsParenthesizedType;
    exports.tSPropertySignature = exports.tsPropertySignature = tsPropertySignature;
    exports.tSQualifiedName = exports.tsQualifiedName = tsQualifiedName;
    exports.tSRestType = exports.tsRestType = tsRestType;
    exports.tSSatisfiesExpression = exports.tsSatisfiesExpression = tsSatisfiesExpression;
    exports.tSStringKeyword = exports.tsStringKeyword = tsStringKeyword;
    exports.tSSymbolKeyword = exports.tsSymbolKeyword = tsSymbolKeyword;
    exports.tSTemplateLiteralType = exports.tsTemplateLiteralType = tsTemplateLiteralType;
    exports.tSThisType = exports.tsThisType = tsThisType;
    exports.tSTupleType = exports.tsTupleType = tsTupleType;
    exports.tSTypeAliasDeclaration = exports.tsTypeAliasDeclaration = tsTypeAliasDeclaration;
    exports.tSTypeAnnotation = exports.tsTypeAnnotation = tsTypeAnnotation;
    exports.tSTypeAssertion = exports.tsTypeAssertion = tsTypeAssertion;
    exports.tSTypeLiteral = exports.tsTypeLiteral = tsTypeLiteral;
    exports.tSTypeOperator = exports.tsTypeOperator = tsTypeOperator;
    exports.tSTypeParameter = exports.tsTypeParameter = tsTypeParameter;
    exports.tSTypeParameterDeclaration = exports.tsTypeParameterDeclaration = tsTypeParameterDeclaration;
    exports.tSTypeParameterInstantiation = exports.tsTypeParameterInstantiation = tsTypeParameterInstantiation;
    exports.tSTypePredicate = exports.tsTypePredicate = tsTypePredicate;
    exports.tSTypeQuery = exports.tsTypeQuery = tsTypeQuery;
    exports.tSTypeReference = exports.tsTypeReference = tsTypeReference;
    exports.tSUndefinedKeyword = exports.tsUndefinedKeyword = tsUndefinedKeyword;
    exports.tSUnionType = exports.tsUnionType = tsUnionType;
    exports.tSUnknownKeyword = exports.tsUnknownKeyword = tsUnknownKeyword;
    exports.tSVoidKeyword = exports.tsVoidKeyword = tsVoidKeyword;
    exports.tupleExpression = tupleExpression;
    exports.tupleTypeAnnotation = tupleTypeAnnotation;
    exports.typeAlias = typeAlias;
    exports.typeAnnotation = typeAnnotation;
    exports.typeCastExpression = typeCastExpression;
    exports.typeParameter = typeParameter;
    exports.typeParameterDeclaration = typeParameterDeclaration;
    exports.typeParameterInstantiation = typeParameterInstantiation;
    exports.typeofTypeAnnotation = typeofTypeAnnotation;
    exports.unaryExpression = unaryExpression;
    exports.unionTypeAnnotation = unionTypeAnnotation;
    exports.updateExpression = updateExpression;
    exports.v8IntrinsicIdentifier = v8IntrinsicIdentifier;
    exports.variableDeclaration = variableDeclaration;
    exports.variableDeclarator = variableDeclarator;
    exports.variance = variance;
    exports.voidTypeAnnotation = voidTypeAnnotation;
    exports.whileStatement = whileStatement;
    exports.withStatement = withStatement;
    exports.yieldExpression = yieldExpression;
    var _validate = require_validate();
    var _deprecationWarning = require_deprecationWarning();
    var utils = require_utils();
    var {
      validateInternal: validate
    } = _validate;
    var {
      NODE_FIELDS
    } = utils;
    function arrayExpression(elements = []) {
      const node = {
        type: "ArrayExpression",
        elements
      };
      const defs = NODE_FIELDS.ArrayExpression;
      validate(defs.elements, node, "elements", elements, 1);
      return node;
    }
    function assignmentExpression(operator, left, right) {
      const node = {
        type: "AssignmentExpression",
        operator,
        left,
        right
      };
      const defs = NODE_FIELDS.AssignmentExpression;
      validate(defs.operator, node, "operator", operator);
      validate(defs.left, node, "left", left, 1);
      validate(defs.right, node, "right", right, 1);
      return node;
    }
    function binaryExpression(operator, left, right) {
      const node = {
        type: "BinaryExpression",
        operator,
        left,
        right
      };
      const defs = NODE_FIELDS.BinaryExpression;
      validate(defs.operator, node, "operator", operator);
      validate(defs.left, node, "left", left, 1);
      validate(defs.right, node, "right", right, 1);
      return node;
    }
    function interpreterDirective(value2) {
      const node = {
        type: "InterpreterDirective",
        value: value2
      };
      const defs = NODE_FIELDS.InterpreterDirective;
      validate(defs.value, node, "value", value2);
      return node;
    }
    function directive(value2) {
      const node = {
        type: "Directive",
        value: value2
      };
      const defs = NODE_FIELDS.Directive;
      validate(defs.value, node, "value", value2, 1);
      return node;
    }
    function directiveLiteral(value2) {
      const node = {
        type: "DirectiveLiteral",
        value: value2
      };
      const defs = NODE_FIELDS.DirectiveLiteral;
      validate(defs.value, node, "value", value2);
      return node;
    }
    function blockStatement(body, directives = []) {
      const node = {
        type: "BlockStatement",
        body,
        directives
      };
      const defs = NODE_FIELDS.BlockStatement;
      validate(defs.body, node, "body", body, 1);
      validate(defs.directives, node, "directives", directives, 1);
      return node;
    }
    function breakStatement(label = null) {
      const node = {
        type: "BreakStatement",
        label
      };
      const defs = NODE_FIELDS.BreakStatement;
      validate(defs.label, node, "label", label, 1);
      return node;
    }
    function callExpression(callee, _arguments) {
      const node = {
        type: "CallExpression",
        callee,
        arguments: _arguments
      };
      const defs = NODE_FIELDS.CallExpression;
      validate(defs.callee, node, "callee", callee, 1);
      validate(defs.arguments, node, "arguments", _arguments, 1);
      return node;
    }
    function catchClause(param = null, body) {
      const node = {
        type: "CatchClause",
        param,
        body
      };
      const defs = NODE_FIELDS.CatchClause;
      validate(defs.param, node, "param", param, 1);
      validate(defs.body, node, "body", body, 1);
      return node;
    }
    function conditionalExpression(test, consequent, alternate) {
      const node = {
        type: "ConditionalExpression",
        test,
        consequent,
        alternate
      };
      const defs = NODE_FIELDS.ConditionalExpression;
      validate(defs.test, node, "test", test, 1);
      validate(defs.consequent, node, "consequent", consequent, 1);
      validate(defs.alternate, node, "alternate", alternate, 1);
      return node;
    }
    function continueStatement(label = null) {
      const node = {
        type: "ContinueStatement",
        label
      };
      const defs = NODE_FIELDS.ContinueStatement;
      validate(defs.label, node, "label", label, 1);
      return node;
    }
    function debuggerStatement() {
      return {
        type: "DebuggerStatement"
      };
    }
    function doWhileStatement(test, body) {
      const node = {
        type: "DoWhileStatement",
        test,
        body
      };
      const defs = NODE_FIELDS.DoWhileStatement;
      validate(defs.test, node, "test", test, 1);
      validate(defs.body, node, "body", body, 1);
      return node;
    }
    function emptyStatement() {
      return {
        type: "EmptyStatement"
      };
    }
    function expressionStatement(expression) {
      const node = {
        type: "ExpressionStatement",
        expression
      };
      const defs = NODE_FIELDS.ExpressionStatement;
      validate(defs.expression, node, "expression", expression, 1);
      return node;
    }
    function file(program2, comments = null, tokens = null) {
      const node = {
        type: "File",
        program: program2,
        comments,
        tokens
      };
      const defs = NODE_FIELDS.File;
      validate(defs.program, node, "program", program2, 1);
      validate(defs.comments, node, "comments", comments, 1);
      validate(defs.tokens, node, "tokens", tokens);
      return node;
    }
    function forInStatement(left, right, body) {
      const node = {
        type: "ForInStatement",
        left,
        right,
        body
      };
      const defs = NODE_FIELDS.ForInStatement;
      validate(defs.left, node, "left", left, 1);
      validate(defs.right, node, "right", right, 1);
      validate(defs.body, node, "body", body, 1);
      return node;
    }
    function forStatement(init = null, test = null, update = null, body) {
      const node = {
        type: "ForStatement",
        init,
        test,
        update,
        body
      };
      const defs = NODE_FIELDS.ForStatement;
      validate(defs.init, node, "init", init, 1);
      validate(defs.test, node, "test", test, 1);
      validate(defs.update, node, "update", update, 1);
      validate(defs.body, node, "body", body, 1);
      return node;
    }
    function functionDeclaration(id = null, params, body, generator = false, async = false) {
      const node = {
        type: "FunctionDeclaration",
        id,
        params,
        body,
        generator,
        async
      };
      const defs = NODE_FIELDS.FunctionDeclaration;
      validate(defs.id, node, "id", id, 1);
      validate(defs.params, node, "params", params, 1);
      validate(defs.body, node, "body", body, 1);
      validate(defs.generator, node, "generator", generator);
      validate(defs.async, node, "async", async);
      return node;
    }
    function functionExpression(id = null, params, body, generator = false, async = false) {
      const node = {
        type: "FunctionExpression",
        id,
        params,
        body,
        generator,
        async
      };
      const defs = NODE_FIELDS.FunctionExpression;
      validate(defs.id, node, "id", id, 1);
      validate(defs.params, node, "params", params, 1);
      validate(defs.body, node, "body", body, 1);
      validate(defs.generator, node, "generator", generator);
      validate(defs.async, node, "async", async);
      return node;
    }
    function identifier(name) {
      const node = {
        type: "Identifier",
        name
      };
      const defs = NODE_FIELDS.Identifier;
      validate(defs.name, node, "name", name);
      return node;
    }
    function ifStatement(test, consequent, alternate = null) {
      const node = {
        type: "IfStatement",
        test,
        consequent,
        alternate
      };
      const defs = NODE_FIELDS.IfStatement;
      validate(defs.test, node, "test", test, 1);
      validate(defs.consequent, node, "consequent", consequent, 1);
      validate(defs.alternate, node, "alternate", alternate, 1);
      return node;
    }
    function labeledStatement(label, body) {
      const node = {
        type: "LabeledStatement",
        label,
        body
      };
      const defs = NODE_FIELDS.LabeledStatement;
      validate(defs.label, node, "label", label, 1);
      validate(defs.body, node, "body", body, 1);
      return node;
    }
    function stringLiteral(value2) {
      const node = {
        type: "StringLiteral",
        value: value2
      };
      const defs = NODE_FIELDS.StringLiteral;
      validate(defs.value, node, "value", value2);
      return node;
    }
    function numericLiteral(value2) {
      const node = {
        type: "NumericLiteral",
        value: value2
      };
      const defs = NODE_FIELDS.NumericLiteral;
      validate(defs.value, node, "value", value2);
      return node;
    }
    function nullLiteral() {
      return {
        type: "NullLiteral"
      };
    }
    function booleanLiteral(value2) {
      const node = {
        type: "BooleanLiteral",
        value: value2
      };
      const defs = NODE_FIELDS.BooleanLiteral;
      validate(defs.value, node, "value", value2);
      return node;
    }
    function regExpLiteral(pattern, flags = "") {
      const node = {
        type: "RegExpLiteral",
        pattern,
        flags
      };
      const defs = NODE_FIELDS.RegExpLiteral;
      validate(defs.pattern, node, "pattern", pattern);
      validate(defs.flags, node, "flags", flags);
      return node;
    }
    function logicalExpression(operator, left, right) {
      const node = {
        type: "LogicalExpression",
        operator,
        left,
        right
      };
      const defs = NODE_FIELDS.LogicalExpression;
      validate(defs.operator, node, "operator", operator);
      validate(defs.left, node, "left", left, 1);
      validate(defs.right, node, "right", right, 1);
      return node;
    }
    function memberExpression(object, property, computed = false, optional = null) {
      const node = {
        type: "MemberExpression",
        object,
        property,
        computed,
        optional
      };
      const defs = NODE_FIELDS.MemberExpression;
      validate(defs.object, node, "object", object, 1);
      validate(defs.property, node, "property", property, 1);
      validate(defs.computed, node, "computed", computed);
      validate(defs.optional, node, "optional", optional);
      return node;
    }
    function newExpression(callee, _arguments) {
      const node = {
        type: "NewExpression",
        callee,
        arguments: _arguments
      };
      const defs = NODE_FIELDS.NewExpression;
      validate(defs.callee, node, "callee", callee, 1);
      validate(defs.arguments, node, "arguments", _arguments, 1);
      return node;
    }
    function program(body, directives = [], sourceType = "script", interpreter = null) {
      const node = {
        type: "Program",
        body,
        directives,
        sourceType,
        interpreter
      };
      const defs = NODE_FIELDS.Program;
      validate(defs.body, node, "body", body, 1);
      validate(defs.directives, node, "directives", directives, 1);
      validate(defs.sourceType, node, "sourceType", sourceType);
      validate(defs.interpreter, node, "interpreter", interpreter, 1);
      return node;
    }
    function objectExpression(properties) {
      const node = {
        type: "ObjectExpression",
        properties
      };
      const defs = NODE_FIELDS.ObjectExpression;
      validate(defs.properties, node, "properties", properties, 1);
      return node;
    }
    function objectMethod(kind = "method", key, params, body, computed = false, generator = false, async = false) {
      const node = {
        type: "ObjectMethod",
        kind,
        key,
        params,
        body,
        computed,
        generator,
        async
      };
      const defs = NODE_FIELDS.ObjectMethod;
      validate(defs.kind, node, "kind", kind);
      validate(defs.key, node, "key", key, 1);
      validate(defs.params, node, "params", params, 1);
      validate(defs.body, node, "body", body, 1);
      validate(defs.computed, node, "computed", computed);
      validate(defs.generator, node, "generator", generator);
      validate(defs.async, node, "async", async);
      return node;
    }
    function objectProperty(key, value2, computed = false, shorthand = false, decorators = null) {
      const node = {
        type: "ObjectProperty",
        key,
        value: value2,
        computed,
        shorthand,
        decorators
      };
      const defs = NODE_FIELDS.ObjectProperty;
      validate(defs.key, node, "key", key, 1);
      validate(defs.value, node, "value", value2, 1);
      validate(defs.computed, node, "computed", computed);
      validate(defs.shorthand, node, "shorthand", shorthand);
      validate(defs.decorators, node, "decorators", decorators, 1);
      return node;
    }
    function restElement(argument) {
      const node = {
        type: "RestElement",
        argument
      };
      const defs = NODE_FIELDS.RestElement;
      validate(defs.argument, node, "argument", argument, 1);
      return node;
    }
    function returnStatement(argument = null) {
      const node = {
        type: "ReturnStatement",
        argument
      };
      const defs = NODE_FIELDS.ReturnStatement;
      validate(defs.argument, node, "argument", argument, 1);
      return node;
    }
    function sequenceExpression(expressions) {
      const node = {
        type: "SequenceExpression",
        expressions
      };
      const defs = NODE_FIELDS.SequenceExpression;
      validate(defs.expressions, node, "expressions", expressions, 1);
      return node;
    }
    function parenthesizedExpression(expression) {
      const node = {
        type: "ParenthesizedExpression",
        expression
      };
      const defs = NODE_FIELDS.ParenthesizedExpression;
      validate(defs.expression, node, "expression", expression, 1);
      return node;
    }
    function switchCase(test = null, consequent) {
      const node = {
        type: "SwitchCase",
        test,
        consequent
      };
      const defs = NODE_FIELDS.SwitchCase;
      validate(defs.test, node, "test", test, 1);
      validate(defs.consequent, node, "consequent", consequent, 1);
      return node;
    }
    function switchStatement(discriminant, cases) {
      const node = {
        type: "SwitchStatement",
        discriminant,
        cases
      };
      const defs = NODE_FIELDS.SwitchStatement;
      validate(defs.discriminant, node, "discriminant", discriminant, 1);
      validate(defs.cases, node, "cases", cases, 1);
      return node;
    }
    function thisExpression() {
      return {
        type: "ThisExpression"
      };
    }
    function throwStatement(argument) {
      const node = {
        type: "ThrowStatement",
        argument
      };
      const defs = NODE_FIELDS.ThrowStatement;
      validate(defs.argument, node, "argument", argument, 1);
      return node;
    }
    function tryStatement(block, handler = null, finalizer = null) {
      const node = {
        type: "TryStatement",
        block,
        handler,
        finalizer
      };
      const defs = NODE_FIELDS.TryStatement;
      validate(defs.block, node, "block", block, 1);
      validate(defs.handler, node, "handler", handler, 1);
      validate(defs.finalizer, node, "finalizer", finalizer, 1);
      return node;
    }
    function unaryExpression(operator, argument, prefix = true) {
      const node = {
        type: "UnaryExpression",
        operator,
        argument,
        prefix
      };
      const defs = NODE_FIELDS.UnaryExpression;
      validate(defs.operator, node, "operator", operator);
      validate(defs.argument, node, "argument", argument, 1);
      validate(defs.prefix, node, "prefix", prefix);
      return node;
    }
    function updateExpression(operator, argument, prefix = false) {
      const node = {
        type: "UpdateExpression",
        operator,
        argument,
        prefix
      };
      const defs = NODE_FIELDS.UpdateExpression;
      validate(defs.operator, node, "operator", operator);
      validate(defs.argument, node, "argument", argument, 1);
      validate(defs.prefix, node, "prefix", prefix);
      return node;
    }
    function variableDeclaration(kind, declarations) {
      const node = {
        type: "VariableDeclaration",
        kind,
        declarations
      };
      const defs = NODE_FIELDS.VariableDeclaration;
      validate(defs.kind, node, "kind", kind);
      validate(defs.declarations, node, "declarations", declarations, 1);
      return node;
    }
    function variableDeclarator(id, init = null) {
      const node = {
        type: "VariableDeclarator",
        id,
        init
      };
      const defs = NODE_FIELDS.VariableDeclarator;
      validate(defs.id, node, "id", id, 1);
      validate(defs.init, node, "init", init, 1);
      return node;
    }
    function whileStatement(test, body) {
      const node = {
        type: "WhileStatement",
        test,
        body
      };
      const defs = NODE_FIELDS.WhileStatement;
      validate(defs.test, node, "test", test, 1);
      validate(defs.body, node, "body", body, 1);
      return node;
    }
    function withStatement(object, body) {
      const node = {
        type: "WithStatement",
        object,
        body
      };
      const defs = NODE_FIELDS.WithStatement;
      validate(defs.object, node, "object", object, 1);
      validate(defs.body, node, "body", body, 1);
      return node;
    }
    function assignmentPattern(left, right) {
      const node = {
        type: "AssignmentPattern",
        left,
        right
      };
      const defs = NODE_FIELDS.AssignmentPattern;
      validate(defs.left, node, "left", left, 1);
      validate(defs.right, node, "right", right, 1);
      return node;
    }
    function arrayPattern(elements) {
      const node = {
        type: "ArrayPattern",
        elements
      };
      const defs = NODE_FIELDS.ArrayPattern;
      validate(defs.elements, node, "elements", elements, 1);
      return node;
    }
    function arrowFunctionExpression(params, body, async = false) {
      const node = {
        type: "ArrowFunctionExpression",
        params,
        body,
        async,
        expression: null
      };
      const defs = NODE_FIELDS.ArrowFunctionExpression;
      validate(defs.params, node, "params", params, 1);
      validate(defs.body, node, "body", body, 1);
      validate(defs.async, node, "async", async);
      return node;
    }
    function classBody(body) {
      const node = {
        type: "ClassBody",
        body
      };
      const defs = NODE_FIELDS.ClassBody;
      validate(defs.body, node, "body", body, 1);
      return node;
    }
    function classExpression(id = null, superClass = null, body, decorators = null) {
      const node = {
        type: "ClassExpression",
        id,
        superClass,
        body,
        decorators
      };
      const defs = NODE_FIELDS.ClassExpression;
      validate(defs.id, node, "id", id, 1);
      validate(defs.superClass, node, "superClass", superClass, 1);
      validate(defs.body, node, "body", body, 1);
      validate(defs.decorators, node, "decorators", decorators, 1);
      return node;
    }
    function classDeclaration(id = null, superClass = null, body, decorators = null) {
      const node = {
        type: "ClassDeclaration",
        id,
        superClass,
        body,
        decorators
      };
      const defs = NODE_FIELDS.ClassDeclaration;
      validate(defs.id, node, "id", id, 1);
      validate(defs.superClass, node, "superClass", superClass, 1);
      validate(defs.body, node, "body", body, 1);
      validate(defs.decorators, node, "decorators", decorators, 1);
      return node;
    }
    function exportAllDeclaration(source) {
      const node = {
        type: "ExportAllDeclaration",
        source
      };
      const defs = NODE_FIELDS.ExportAllDeclaration;
      validate(defs.source, node, "source", source, 1);
      return node;
    }
    function exportDefaultDeclaration(declaration) {
      const node = {
        type: "ExportDefaultDeclaration",
        declaration
      };
      const defs = NODE_FIELDS.ExportDefaultDeclaration;
      validate(defs.declaration, node, "declaration", declaration, 1);
      return node;
    }
    function exportNamedDeclaration(declaration = null, specifiers = [], source = null) {
      const node = {
        type: "ExportNamedDeclaration",
        declaration,
        specifiers,
        source
      };
      const defs = NODE_FIELDS.ExportNamedDeclaration;
      validate(defs.declaration, node, "declaration", declaration, 1);
      validate(defs.specifiers, node, "specifiers", specifiers, 1);
      validate(defs.source, node, "source", source, 1);
      return node;
    }
    function exportSpecifier(local, exported) {
      const node = {
        type: "ExportSpecifier",
        local,
        exported
      };
      const defs = NODE_FIELDS.ExportSpecifier;
      validate(defs.local, node, "local", local, 1);
      validate(defs.exported, node, "exported", exported, 1);
      return node;
    }
    function forOfStatement(left, right, body, _await = false) {
      const node = {
        type: "ForOfStatement",
        left,
        right,
        body,
        await: _await
      };
      const defs = NODE_FIELDS.ForOfStatement;
      validate(defs.left, node, "left", left, 1);
      validate(defs.right, node, "right", right, 1);
      validate(defs.body, node, "body", body, 1);
      validate(defs.await, node, "await", _await);
      return node;
    }
    function importDeclaration(specifiers, source) {
      const node = {
        type: "ImportDeclaration",
        specifiers,
        source
      };
      const defs = NODE_FIELDS.ImportDeclaration;
      validate(defs.specifiers, node, "specifiers", specifiers, 1);
      validate(defs.source, node, "source", source, 1);
      return node;
    }
    function importDefaultSpecifier(local) {
      const node = {
        type: "ImportDefaultSpecifier",
        local
      };
      const defs = NODE_FIELDS.ImportDefaultSpecifier;
      validate(defs.local, node, "local", local, 1);
      return node;
    }
    function importNamespaceSpecifier(local) {
      const node = {
        type: "ImportNamespaceSpecifier",
        local
      };
      const defs = NODE_FIELDS.ImportNamespaceSpecifier;
      validate(defs.local, node, "local", local, 1);
      return node;
    }
    function importSpecifier(local, imported) {
      const node = {
        type: "ImportSpecifier",
        local,
        imported
      };
      const defs = NODE_FIELDS.ImportSpecifier;
      validate(defs.local, node, "local", local, 1);
      validate(defs.imported, node, "imported", imported, 1);
      return node;
    }
    function importExpression(source, options = null) {
      const node = {
        type: "ImportExpression",
        source,
        options
      };
      const defs = NODE_FIELDS.ImportExpression;
      validate(defs.source, node, "source", source, 1);
      validate(defs.options, node, "options", options, 1);
      return node;
    }
    function metaProperty(meta, property) {
      const node = {
        type: "MetaProperty",
        meta,
        property
      };
      const defs = NODE_FIELDS.MetaProperty;
      validate(defs.meta, node, "meta", meta, 1);
      validate(defs.property, node, "property", property, 1);
      return node;
    }
    function classMethod(kind = "method", key, params, body, computed = false, _static = false, generator = false, async = false) {
      const node = {
        type: "ClassMethod",
        kind,
        key,
        params,
        body,
        computed,
        static: _static,
        generator,
        async
      };
      const defs = NODE_FIELDS.ClassMethod;
      validate(defs.kind, node, "kind", kind);
      validate(defs.key, node, "key", key, 1);
      validate(defs.params, node, "params", params, 1);
      validate(defs.body, node, "body", body, 1);
      validate(defs.computed, node, "computed", computed);
      validate(defs.static, node, "static", _static);
      validate(defs.generator, node, "generator", generator);
      validate(defs.async, node, "async", async);
      return node;
    }
    function objectPattern(properties) {
      const node = {
        type: "ObjectPattern",
        properties
      };
      const defs = NODE_FIELDS.ObjectPattern;
      validate(defs.properties, node, "properties", properties, 1);
      return node;
    }
    function spreadElement(argument) {
      const node = {
        type: "SpreadElement",
        argument
      };
      const defs = NODE_FIELDS.SpreadElement;
      validate(defs.argument, node, "argument", argument, 1);
      return node;
    }
    function _super() {
      return {
        type: "Super"
      };
    }
    function taggedTemplateExpression(tag, quasi) {
      const node = {
        type: "TaggedTemplateExpression",
        tag,
        quasi
      };
      const defs = NODE_FIELDS.TaggedTemplateExpression;
      validate(defs.tag, node, "tag", tag, 1);
      validate(defs.quasi, node, "quasi", quasi, 1);
      return node;
    }
    function templateElement(value2, tail = false) {
      const node = {
        type: "TemplateElement",
        value: value2,
        tail
      };
      const defs = NODE_FIELDS.TemplateElement;
      validate(defs.value, node, "value", value2);
      validate(defs.tail, node, "tail", tail);
      return node;
    }
    function templateLiteral(quasis, expressions) {
      const node = {
        type: "TemplateLiteral",
        quasis,
        expressions
      };
      const defs = NODE_FIELDS.TemplateLiteral;
      validate(defs.quasis, node, "quasis", quasis, 1);
      validate(defs.expressions, node, "expressions", expressions, 1);
      return node;
    }
    function yieldExpression(argument = null, delegate = false) {
      const node = {
        type: "YieldExpression",
        argument,
        delegate
      };
      const defs = NODE_FIELDS.YieldExpression;
      validate(defs.argument, node, "argument", argument, 1);
      validate(defs.delegate, node, "delegate", delegate);
      return node;
    }
    function awaitExpression(argument) {
      const node = {
        type: "AwaitExpression",
        argument
      };
      const defs = NODE_FIELDS.AwaitExpression;
      validate(defs.argument, node, "argument", argument, 1);
      return node;
    }
    function _import() {
      return {
        type: "Import"
      };
    }
    function bigIntLiteral(value2) {
      const node = {
        type: "BigIntLiteral",
        value: value2
      };
      const defs = NODE_FIELDS.BigIntLiteral;
      validate(defs.value, node, "value", value2);
      return node;
    }
    function exportNamespaceSpecifier(exported) {
      const node = {
        type: "ExportNamespaceSpecifier",
        exported
      };
      const defs = NODE_FIELDS.ExportNamespaceSpecifier;
      validate(defs.exported, node, "exported", exported, 1);
      return node;
    }
    function optionalMemberExpression(object, property, computed = false, optional) {
      const node = {
        type: "OptionalMemberExpression",
        object,
        property,
        computed,
        optional
      };
      const defs = NODE_FIELDS.OptionalMemberExpression;
      validate(defs.object, node, "object", object, 1);
      validate(defs.property, node, "property", property, 1);
      validate(defs.computed, node, "computed", computed);
      validate(defs.optional, node, "optional", optional);
      return node;
    }
    function optionalCallExpression(callee, _arguments, optional) {
      const node = {
        type: "OptionalCallExpression",
        callee,
        arguments: _arguments,
        optional
      };
      const defs = NODE_FIELDS.OptionalCallExpression;
      validate(defs.callee, node, "callee", callee, 1);
      validate(defs.arguments, node, "arguments", _arguments, 1);
      validate(defs.optional, node, "optional", optional);
      return node;
    }
    function classProperty(key, value2 = null, typeAnnotation2 = null, decorators = null, computed = false, _static = false) {
      const node = {
        type: "ClassProperty",
        key,
        value: value2,
        typeAnnotation: typeAnnotation2,
        decorators,
        computed,
        static: _static
      };
      const defs = NODE_FIELDS.ClassProperty;
      validate(defs.key, node, "key", key, 1);
      validate(defs.value, node, "value", value2, 1);
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      validate(defs.decorators, node, "decorators", decorators, 1);
      validate(defs.computed, node, "computed", computed);
      validate(defs.static, node, "static", _static);
      return node;
    }
    function classAccessorProperty(key, value2 = null, typeAnnotation2 = null, decorators = null, computed = false, _static = false) {
      const node = {
        type: "ClassAccessorProperty",
        key,
        value: value2,
        typeAnnotation: typeAnnotation2,
        decorators,
        computed,
        static: _static
      };
      const defs = NODE_FIELDS.ClassAccessorProperty;
      validate(defs.key, node, "key", key, 1);
      validate(defs.value, node, "value", value2, 1);
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      validate(defs.decorators, node, "decorators", decorators, 1);
      validate(defs.computed, node, "computed", computed);
      validate(defs.static, node, "static", _static);
      return node;
    }
    function classPrivateProperty(key, value2 = null, decorators = null, _static = false) {
      const node = {
        type: "ClassPrivateProperty",
        key,
        value: value2,
        decorators,
        static: _static
      };
      const defs = NODE_FIELDS.ClassPrivateProperty;
      validate(defs.key, node, "key", key, 1);
      validate(defs.value, node, "value", value2, 1);
      validate(defs.decorators, node, "decorators", decorators, 1);
      validate(defs.static, node, "static", _static);
      return node;
    }
    function classPrivateMethod(kind = "method", key, params, body, _static = false) {
      const node = {
        type: "ClassPrivateMethod",
        kind,
        key,
        params,
        body,
        static: _static
      };
      const defs = NODE_FIELDS.ClassPrivateMethod;
      validate(defs.kind, node, "kind", kind);
      validate(defs.key, node, "key", key, 1);
      validate(defs.params, node, "params", params, 1);
      validate(defs.body, node, "body", body, 1);
      validate(defs.static, node, "static", _static);
      return node;
    }
    function privateName(id) {
      const node = {
        type: "PrivateName",
        id
      };
      const defs = NODE_FIELDS.PrivateName;
      validate(defs.id, node, "id", id, 1);
      return node;
    }
    function staticBlock(body) {
      const node = {
        type: "StaticBlock",
        body
      };
      const defs = NODE_FIELDS.StaticBlock;
      validate(defs.body, node, "body", body, 1);
      return node;
    }
    function anyTypeAnnotation() {
      return {
        type: "AnyTypeAnnotation"
      };
    }
    function arrayTypeAnnotation(elementType) {
      const node = {
        type: "ArrayTypeAnnotation",
        elementType
      };
      const defs = NODE_FIELDS.ArrayTypeAnnotation;
      validate(defs.elementType, node, "elementType", elementType, 1);
      return node;
    }
    function booleanTypeAnnotation() {
      return {
        type: "BooleanTypeAnnotation"
      };
    }
    function booleanLiteralTypeAnnotation(value2) {
      const node = {
        type: "BooleanLiteralTypeAnnotation",
        value: value2
      };
      const defs = NODE_FIELDS.BooleanLiteralTypeAnnotation;
      validate(defs.value, node, "value", value2);
      return node;
    }
    function nullLiteralTypeAnnotation() {
      return {
        type: "NullLiteralTypeAnnotation"
      };
    }
    function classImplements(id, typeParameters = null) {
      const node = {
        type: "ClassImplements",
        id,
        typeParameters
      };
      const defs = NODE_FIELDS.ClassImplements;
      validate(defs.id, node, "id", id, 1);
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      return node;
    }
    function declareClass(id, typeParameters = null, _extends = null, body) {
      const node = {
        type: "DeclareClass",
        id,
        typeParameters,
        extends: _extends,
        body
      };
      const defs = NODE_FIELDS.DeclareClass;
      validate(defs.id, node, "id", id, 1);
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      validate(defs.extends, node, "extends", _extends, 1);
      validate(defs.body, node, "body", body, 1);
      return node;
    }
    function declareFunction(id) {
      const node = {
        type: "DeclareFunction",
        id
      };
      const defs = NODE_FIELDS.DeclareFunction;
      validate(defs.id, node, "id", id, 1);
      return node;
    }
    function declareInterface(id, typeParameters = null, _extends = null, body) {
      const node = {
        type: "DeclareInterface",
        id,
        typeParameters,
        extends: _extends,
        body
      };
      const defs = NODE_FIELDS.DeclareInterface;
      validate(defs.id, node, "id", id, 1);
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      validate(defs.extends, node, "extends", _extends, 1);
      validate(defs.body, node, "body", body, 1);
      return node;
    }
    function declareModule(id, body, kind = null) {
      const node = {
        type: "DeclareModule",
        id,
        body,
        kind
      };
      const defs = NODE_FIELDS.DeclareModule;
      validate(defs.id, node, "id", id, 1);
      validate(defs.body, node, "body", body, 1);
      validate(defs.kind, node, "kind", kind);
      return node;
    }
    function declareModuleExports(typeAnnotation2) {
      const node = {
        type: "DeclareModuleExports",
        typeAnnotation: typeAnnotation2
      };
      const defs = NODE_FIELDS.DeclareModuleExports;
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      return node;
    }
    function declareTypeAlias(id, typeParameters = null, right) {
      const node = {
        type: "DeclareTypeAlias",
        id,
        typeParameters,
        right
      };
      const defs = NODE_FIELDS.DeclareTypeAlias;
      validate(defs.id, node, "id", id, 1);
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      validate(defs.right, node, "right", right, 1);
      return node;
    }
    function declareOpaqueType(id, typeParameters = null, supertype = null) {
      const node = {
        type: "DeclareOpaqueType",
        id,
        typeParameters,
        supertype
      };
      const defs = NODE_FIELDS.DeclareOpaqueType;
      validate(defs.id, node, "id", id, 1);
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      validate(defs.supertype, node, "supertype", supertype, 1);
      return node;
    }
    function declareVariable(id) {
      const node = {
        type: "DeclareVariable",
        id
      };
      const defs = NODE_FIELDS.DeclareVariable;
      validate(defs.id, node, "id", id, 1);
      return node;
    }
    function declareExportDeclaration(declaration = null, specifiers = null, source = null, attributes = null) {
      const node = {
        type: "DeclareExportDeclaration",
        declaration,
        specifiers,
        source,
        attributes
      };
      const defs = NODE_FIELDS.DeclareExportDeclaration;
      validate(defs.declaration, node, "declaration", declaration, 1);
      validate(defs.specifiers, node, "specifiers", specifiers, 1);
      validate(defs.source, node, "source", source, 1);
      validate(defs.attributes, node, "attributes", attributes, 1);
      return node;
    }
    function declareExportAllDeclaration(source, attributes = null) {
      const node = {
        type: "DeclareExportAllDeclaration",
        source,
        attributes
      };
      const defs = NODE_FIELDS.DeclareExportAllDeclaration;
      validate(defs.source, node, "source", source, 1);
      validate(defs.attributes, node, "attributes", attributes, 1);
      return node;
    }
    function declaredPredicate(value2) {
      const node = {
        type: "DeclaredPredicate",
        value: value2
      };
      const defs = NODE_FIELDS.DeclaredPredicate;
      validate(defs.value, node, "value", value2, 1);
      return node;
    }
    function existsTypeAnnotation() {
      return {
        type: "ExistsTypeAnnotation"
      };
    }
    function functionTypeAnnotation(typeParameters = null, params, rest = null, returnType) {
      const node = {
        type: "FunctionTypeAnnotation",
        typeParameters,
        params,
        rest,
        returnType
      };
      const defs = NODE_FIELDS.FunctionTypeAnnotation;
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      validate(defs.params, node, "params", params, 1);
      validate(defs.rest, node, "rest", rest, 1);
      validate(defs.returnType, node, "returnType", returnType, 1);
      return node;
    }
    function functionTypeParam(name = null, typeAnnotation2) {
      const node = {
        type: "FunctionTypeParam",
        name,
        typeAnnotation: typeAnnotation2
      };
      const defs = NODE_FIELDS.FunctionTypeParam;
      validate(defs.name, node, "name", name, 1);
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      return node;
    }
    function genericTypeAnnotation(id, typeParameters = null) {
      const node = {
        type: "GenericTypeAnnotation",
        id,
        typeParameters
      };
      const defs = NODE_FIELDS.GenericTypeAnnotation;
      validate(defs.id, node, "id", id, 1);
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      return node;
    }
    function inferredPredicate() {
      return {
        type: "InferredPredicate"
      };
    }
    function interfaceExtends(id, typeParameters = null) {
      const node = {
        type: "InterfaceExtends",
        id,
        typeParameters
      };
      const defs = NODE_FIELDS.InterfaceExtends;
      validate(defs.id, node, "id", id, 1);
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      return node;
    }
    function interfaceDeclaration(id, typeParameters = null, _extends = null, body) {
      const node = {
        type: "InterfaceDeclaration",
        id,
        typeParameters,
        extends: _extends,
        body
      };
      const defs = NODE_FIELDS.InterfaceDeclaration;
      validate(defs.id, node, "id", id, 1);
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      validate(defs.extends, node, "extends", _extends, 1);
      validate(defs.body, node, "body", body, 1);
      return node;
    }
    function interfaceTypeAnnotation(_extends = null, body) {
      const node = {
        type: "InterfaceTypeAnnotation",
        extends: _extends,
        body
      };
      const defs = NODE_FIELDS.InterfaceTypeAnnotation;
      validate(defs.extends, node, "extends", _extends, 1);
      validate(defs.body, node, "body", body, 1);
      return node;
    }
    function intersectionTypeAnnotation(types) {
      const node = {
        type: "IntersectionTypeAnnotation",
        types
      };
      const defs = NODE_FIELDS.IntersectionTypeAnnotation;
      validate(defs.types, node, "types", types, 1);
      return node;
    }
    function mixedTypeAnnotation() {
      return {
        type: "MixedTypeAnnotation"
      };
    }
    function emptyTypeAnnotation() {
      return {
        type: "EmptyTypeAnnotation"
      };
    }
    function nullableTypeAnnotation(typeAnnotation2) {
      const node = {
        type: "NullableTypeAnnotation",
        typeAnnotation: typeAnnotation2
      };
      const defs = NODE_FIELDS.NullableTypeAnnotation;
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      return node;
    }
    function numberLiteralTypeAnnotation(value2) {
      const node = {
        type: "NumberLiteralTypeAnnotation",
        value: value2
      };
      const defs = NODE_FIELDS.NumberLiteralTypeAnnotation;
      validate(defs.value, node, "value", value2);
      return node;
    }
    function numberTypeAnnotation() {
      return {
        type: "NumberTypeAnnotation"
      };
    }
    function objectTypeAnnotation(properties, indexers = [], callProperties = [], internalSlots = [], exact = false) {
      const node = {
        type: "ObjectTypeAnnotation",
        properties,
        indexers,
        callProperties,
        internalSlots,
        exact
      };
      const defs = NODE_FIELDS.ObjectTypeAnnotation;
      validate(defs.properties, node, "properties", properties, 1);
      validate(defs.indexers, node, "indexers", indexers, 1);
      validate(defs.callProperties, node, "callProperties", callProperties, 1);
      validate(defs.internalSlots, node, "internalSlots", internalSlots, 1);
      validate(defs.exact, node, "exact", exact);
      return node;
    }
    function objectTypeInternalSlot(id, value2, optional, _static, method) {
      const node = {
        type: "ObjectTypeInternalSlot",
        id,
        value: value2,
        optional,
        static: _static,
        method
      };
      const defs = NODE_FIELDS.ObjectTypeInternalSlot;
      validate(defs.id, node, "id", id, 1);
      validate(defs.value, node, "value", value2, 1);
      validate(defs.optional, node, "optional", optional);
      validate(defs.static, node, "static", _static);
      validate(defs.method, node, "method", method);
      return node;
    }
    function objectTypeCallProperty(value2) {
      const node = {
        type: "ObjectTypeCallProperty",
        value: value2,
        static: null
      };
      const defs = NODE_FIELDS.ObjectTypeCallProperty;
      validate(defs.value, node, "value", value2, 1);
      return node;
    }
    function objectTypeIndexer(id = null, key, value2, variance2 = null) {
      const node = {
        type: "ObjectTypeIndexer",
        id,
        key,
        value: value2,
        variance: variance2,
        static: null
      };
      const defs = NODE_FIELDS.ObjectTypeIndexer;
      validate(defs.id, node, "id", id, 1);
      validate(defs.key, node, "key", key, 1);
      validate(defs.value, node, "value", value2, 1);
      validate(defs.variance, node, "variance", variance2, 1);
      return node;
    }
    function objectTypeProperty(key, value2, variance2 = null) {
      const node = {
        type: "ObjectTypeProperty",
        key,
        value: value2,
        variance: variance2,
        kind: null,
        method: null,
        optional: null,
        proto: null,
        static: null
      };
      const defs = NODE_FIELDS.ObjectTypeProperty;
      validate(defs.key, node, "key", key, 1);
      validate(defs.value, node, "value", value2, 1);
      validate(defs.variance, node, "variance", variance2, 1);
      return node;
    }
    function objectTypeSpreadProperty(argument) {
      const node = {
        type: "ObjectTypeSpreadProperty",
        argument
      };
      const defs = NODE_FIELDS.ObjectTypeSpreadProperty;
      validate(defs.argument, node, "argument", argument, 1);
      return node;
    }
    function opaqueType(id, typeParameters = null, supertype = null, impltype) {
      const node = {
        type: "OpaqueType",
        id,
        typeParameters,
        supertype,
        impltype
      };
      const defs = NODE_FIELDS.OpaqueType;
      validate(defs.id, node, "id", id, 1);
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      validate(defs.supertype, node, "supertype", supertype, 1);
      validate(defs.impltype, node, "impltype", impltype, 1);
      return node;
    }
    function qualifiedTypeIdentifier(id, qualification) {
      const node = {
        type: "QualifiedTypeIdentifier",
        id,
        qualification
      };
      const defs = NODE_FIELDS.QualifiedTypeIdentifier;
      validate(defs.id, node, "id", id, 1);
      validate(defs.qualification, node, "qualification", qualification, 1);
      return node;
    }
    function stringLiteralTypeAnnotation(value2) {
      const node = {
        type: "StringLiteralTypeAnnotation",
        value: value2
      };
      const defs = NODE_FIELDS.StringLiteralTypeAnnotation;
      validate(defs.value, node, "value", value2);
      return node;
    }
    function stringTypeAnnotation() {
      return {
        type: "StringTypeAnnotation"
      };
    }
    function symbolTypeAnnotation() {
      return {
        type: "SymbolTypeAnnotation"
      };
    }
    function thisTypeAnnotation() {
      return {
        type: "ThisTypeAnnotation"
      };
    }
    function tupleTypeAnnotation(types) {
      const node = {
        type: "TupleTypeAnnotation",
        types
      };
      const defs = NODE_FIELDS.TupleTypeAnnotation;
      validate(defs.types, node, "types", types, 1);
      return node;
    }
    function typeofTypeAnnotation(argument) {
      const node = {
        type: "TypeofTypeAnnotation",
        argument
      };
      const defs = NODE_FIELDS.TypeofTypeAnnotation;
      validate(defs.argument, node, "argument", argument, 1);
      return node;
    }
    function typeAlias(id, typeParameters = null, right) {
      const node = {
        type: "TypeAlias",
        id,
        typeParameters,
        right
      };
      const defs = NODE_FIELDS.TypeAlias;
      validate(defs.id, node, "id", id, 1);
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      validate(defs.right, node, "right", right, 1);
      return node;
    }
    function typeAnnotation(typeAnnotation2) {
      const node = {
        type: "TypeAnnotation",
        typeAnnotation: typeAnnotation2
      };
      const defs = NODE_FIELDS.TypeAnnotation;
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      return node;
    }
    function typeCastExpression(expression, typeAnnotation2) {
      const node = {
        type: "TypeCastExpression",
        expression,
        typeAnnotation: typeAnnotation2
      };
      const defs = NODE_FIELDS.TypeCastExpression;
      validate(defs.expression, node, "expression", expression, 1);
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      return node;
    }
    function typeParameter(bound = null, _default = null, variance2 = null) {
      const node = {
        type: "TypeParameter",
        bound,
        default: _default,
        variance: variance2,
        name: null
      };
      const defs = NODE_FIELDS.TypeParameter;
      validate(defs.bound, node, "bound", bound, 1);
      validate(defs.default, node, "default", _default, 1);
      validate(defs.variance, node, "variance", variance2, 1);
      return node;
    }
    function typeParameterDeclaration(params) {
      const node = {
        type: "TypeParameterDeclaration",
        params
      };
      const defs = NODE_FIELDS.TypeParameterDeclaration;
      validate(defs.params, node, "params", params, 1);
      return node;
    }
    function typeParameterInstantiation(params) {
      const node = {
        type: "TypeParameterInstantiation",
        params
      };
      const defs = NODE_FIELDS.TypeParameterInstantiation;
      validate(defs.params, node, "params", params, 1);
      return node;
    }
    function unionTypeAnnotation(types) {
      const node = {
        type: "UnionTypeAnnotation",
        types
      };
      const defs = NODE_FIELDS.UnionTypeAnnotation;
      validate(defs.types, node, "types", types, 1);
      return node;
    }
    function variance(kind) {
      const node = {
        type: "Variance",
        kind
      };
      const defs = NODE_FIELDS.Variance;
      validate(defs.kind, node, "kind", kind);
      return node;
    }
    function voidTypeAnnotation() {
      return {
        type: "VoidTypeAnnotation"
      };
    }
    function enumDeclaration(id, body) {
      const node = {
        type: "EnumDeclaration",
        id,
        body
      };
      const defs = NODE_FIELDS.EnumDeclaration;
      validate(defs.id, node, "id", id, 1);
      validate(defs.body, node, "body", body, 1);
      return node;
    }
    function enumBooleanBody(members) {
      const node = {
        type: "EnumBooleanBody",
        members,
        explicitType: null,
        hasUnknownMembers: null
      };
      const defs = NODE_FIELDS.EnumBooleanBody;
      validate(defs.members, node, "members", members, 1);
      return node;
    }
    function enumNumberBody(members) {
      const node = {
        type: "EnumNumberBody",
        members,
        explicitType: null,
        hasUnknownMembers: null
      };
      const defs = NODE_FIELDS.EnumNumberBody;
      validate(defs.members, node, "members", members, 1);
      return node;
    }
    function enumStringBody(members) {
      const node = {
        type: "EnumStringBody",
        members,
        explicitType: null,
        hasUnknownMembers: null
      };
      const defs = NODE_FIELDS.EnumStringBody;
      validate(defs.members, node, "members", members, 1);
      return node;
    }
    function enumSymbolBody(members) {
      const node = {
        type: "EnumSymbolBody",
        members,
        hasUnknownMembers: null
      };
      const defs = NODE_FIELDS.EnumSymbolBody;
      validate(defs.members, node, "members", members, 1);
      return node;
    }
    function enumBooleanMember(id) {
      const node = {
        type: "EnumBooleanMember",
        id,
        init: null
      };
      const defs = NODE_FIELDS.EnumBooleanMember;
      validate(defs.id, node, "id", id, 1);
      return node;
    }
    function enumNumberMember(id, init) {
      const node = {
        type: "EnumNumberMember",
        id,
        init
      };
      const defs = NODE_FIELDS.EnumNumberMember;
      validate(defs.id, node, "id", id, 1);
      validate(defs.init, node, "init", init, 1);
      return node;
    }
    function enumStringMember(id, init) {
      const node = {
        type: "EnumStringMember",
        id,
        init
      };
      const defs = NODE_FIELDS.EnumStringMember;
      validate(defs.id, node, "id", id, 1);
      validate(defs.init, node, "init", init, 1);
      return node;
    }
    function enumDefaultedMember(id) {
      const node = {
        type: "EnumDefaultedMember",
        id
      };
      const defs = NODE_FIELDS.EnumDefaultedMember;
      validate(defs.id, node, "id", id, 1);
      return node;
    }
    function indexedAccessType(objectType, indexType) {
      const node = {
        type: "IndexedAccessType",
        objectType,
        indexType
      };
      const defs = NODE_FIELDS.IndexedAccessType;
      validate(defs.objectType, node, "objectType", objectType, 1);
      validate(defs.indexType, node, "indexType", indexType, 1);
      return node;
    }
    function optionalIndexedAccessType(objectType, indexType) {
      const node = {
        type: "OptionalIndexedAccessType",
        objectType,
        indexType,
        optional: null
      };
      const defs = NODE_FIELDS.OptionalIndexedAccessType;
      validate(defs.objectType, node, "objectType", objectType, 1);
      validate(defs.indexType, node, "indexType", indexType, 1);
      return node;
    }
    function jsxAttribute(name, value2 = null) {
      const node = {
        type: "JSXAttribute",
        name,
        value: value2
      };
      const defs = NODE_FIELDS.JSXAttribute;
      validate(defs.name, node, "name", name, 1);
      validate(defs.value, node, "value", value2, 1);
      return node;
    }
    function jsxClosingElement(name) {
      const node = {
        type: "JSXClosingElement",
        name
      };
      const defs = NODE_FIELDS.JSXClosingElement;
      validate(defs.name, node, "name", name, 1);
      return node;
    }
    function jsxElement(openingElement, closingElement = null, children, selfClosing = null) {
      const node = {
        type: "JSXElement",
        openingElement,
        closingElement,
        children,
        selfClosing
      };
      const defs = NODE_FIELDS.JSXElement;
      validate(defs.openingElement, node, "openingElement", openingElement, 1);
      validate(defs.closingElement, node, "closingElement", closingElement, 1);
      validate(defs.children, node, "children", children, 1);
      validate(defs.selfClosing, node, "selfClosing", selfClosing);
      return node;
    }
    function jsxEmptyExpression() {
      return {
        type: "JSXEmptyExpression"
      };
    }
    function jsxExpressionContainer(expression) {
      const node = {
        type: "JSXExpressionContainer",
        expression
      };
      const defs = NODE_FIELDS.JSXExpressionContainer;
      validate(defs.expression, node, "expression", expression, 1);
      return node;
    }
    function jsxSpreadChild(expression) {
      const node = {
        type: "JSXSpreadChild",
        expression
      };
      const defs = NODE_FIELDS.JSXSpreadChild;
      validate(defs.expression, node, "expression", expression, 1);
      return node;
    }
    function jsxIdentifier(name) {
      const node = {
        type: "JSXIdentifier",
        name
      };
      const defs = NODE_FIELDS.JSXIdentifier;
      validate(defs.name, node, "name", name);
      return node;
    }
    function jsxMemberExpression(object, property) {
      const node = {
        type: "JSXMemberExpression",
        object,
        property
      };
      const defs = NODE_FIELDS.JSXMemberExpression;
      validate(defs.object, node, "object", object, 1);
      validate(defs.property, node, "property", property, 1);
      return node;
    }
    function jsxNamespacedName(namespace, name) {
      const node = {
        type: "JSXNamespacedName",
        namespace,
        name
      };
      const defs = NODE_FIELDS.JSXNamespacedName;
      validate(defs.namespace, node, "namespace", namespace, 1);
      validate(defs.name, node, "name", name, 1);
      return node;
    }
    function jsxOpeningElement(name, attributes, selfClosing = false) {
      const node = {
        type: "JSXOpeningElement",
        name,
        attributes,
        selfClosing
      };
      const defs = NODE_FIELDS.JSXOpeningElement;
      validate(defs.name, node, "name", name, 1);
      validate(defs.attributes, node, "attributes", attributes, 1);
      validate(defs.selfClosing, node, "selfClosing", selfClosing);
      return node;
    }
    function jsxSpreadAttribute(argument) {
      const node = {
        type: "JSXSpreadAttribute",
        argument
      };
      const defs = NODE_FIELDS.JSXSpreadAttribute;
      validate(defs.argument, node, "argument", argument, 1);
      return node;
    }
    function jsxText(value2) {
      const node = {
        type: "JSXText",
        value: value2
      };
      const defs = NODE_FIELDS.JSXText;
      validate(defs.value, node, "value", value2);
      return node;
    }
    function jsxFragment(openingFragment, closingFragment, children) {
      const node = {
        type: "JSXFragment",
        openingFragment,
        closingFragment,
        children
      };
      const defs = NODE_FIELDS.JSXFragment;
      validate(defs.openingFragment, node, "openingFragment", openingFragment, 1);
      validate(defs.closingFragment, node, "closingFragment", closingFragment, 1);
      validate(defs.children, node, "children", children, 1);
      return node;
    }
    function jsxOpeningFragment() {
      return {
        type: "JSXOpeningFragment"
      };
    }
    function jsxClosingFragment() {
      return {
        type: "JSXClosingFragment"
      };
    }
    function noop3() {
      return {
        type: "Noop"
      };
    }
    function placeholder(expectedNode, name) {
      const node = {
        type: "Placeholder",
        expectedNode,
        name
      };
      const defs = NODE_FIELDS.Placeholder;
      validate(defs.expectedNode, node, "expectedNode", expectedNode);
      validate(defs.name, node, "name", name, 1);
      return node;
    }
    function v8IntrinsicIdentifier(name) {
      const node = {
        type: "V8IntrinsicIdentifier",
        name
      };
      const defs = NODE_FIELDS.V8IntrinsicIdentifier;
      validate(defs.name, node, "name", name);
      return node;
    }
    function argumentPlaceholder() {
      return {
        type: "ArgumentPlaceholder"
      };
    }
    function bindExpression(object, callee) {
      const node = {
        type: "BindExpression",
        object,
        callee
      };
      const defs = NODE_FIELDS.BindExpression;
      validate(defs.object, node, "object", object, 1);
      validate(defs.callee, node, "callee", callee, 1);
      return node;
    }
    function importAttribute(key, value2) {
      const node = {
        type: "ImportAttribute",
        key,
        value: value2
      };
      const defs = NODE_FIELDS.ImportAttribute;
      validate(defs.key, node, "key", key, 1);
      validate(defs.value, node, "value", value2, 1);
      return node;
    }
    function decorator(expression) {
      const node = {
        type: "Decorator",
        expression
      };
      const defs = NODE_FIELDS.Decorator;
      validate(defs.expression, node, "expression", expression, 1);
      return node;
    }
    function doExpression(body, async = false) {
      const node = {
        type: "DoExpression",
        body,
        async
      };
      const defs = NODE_FIELDS.DoExpression;
      validate(defs.body, node, "body", body, 1);
      validate(defs.async, node, "async", async);
      return node;
    }
    function exportDefaultSpecifier(exported) {
      const node = {
        type: "ExportDefaultSpecifier",
        exported
      };
      const defs = NODE_FIELDS.ExportDefaultSpecifier;
      validate(defs.exported, node, "exported", exported, 1);
      return node;
    }
    function recordExpression(properties) {
      const node = {
        type: "RecordExpression",
        properties
      };
      const defs = NODE_FIELDS.RecordExpression;
      validate(defs.properties, node, "properties", properties, 1);
      return node;
    }
    function tupleExpression(elements = []) {
      const node = {
        type: "TupleExpression",
        elements
      };
      const defs = NODE_FIELDS.TupleExpression;
      validate(defs.elements, node, "elements", elements, 1);
      return node;
    }
    function decimalLiteral(value2) {
      const node = {
        type: "DecimalLiteral",
        value: value2
      };
      const defs = NODE_FIELDS.DecimalLiteral;
      validate(defs.value, node, "value", value2);
      return node;
    }
    function moduleExpression(body) {
      const node = {
        type: "ModuleExpression",
        body
      };
      const defs = NODE_FIELDS.ModuleExpression;
      validate(defs.body, node, "body", body, 1);
      return node;
    }
    function topicReference() {
      return {
        type: "TopicReference"
      };
    }
    function pipelineTopicExpression(expression) {
      const node = {
        type: "PipelineTopicExpression",
        expression
      };
      const defs = NODE_FIELDS.PipelineTopicExpression;
      validate(defs.expression, node, "expression", expression, 1);
      return node;
    }
    function pipelineBareFunction(callee) {
      const node = {
        type: "PipelineBareFunction",
        callee
      };
      const defs = NODE_FIELDS.PipelineBareFunction;
      validate(defs.callee, node, "callee", callee, 1);
      return node;
    }
    function pipelinePrimaryTopicReference() {
      return {
        type: "PipelinePrimaryTopicReference"
      };
    }
    function tsParameterProperty(parameter) {
      const node = {
        type: "TSParameterProperty",
        parameter
      };
      const defs = NODE_FIELDS.TSParameterProperty;
      validate(defs.parameter, node, "parameter", parameter, 1);
      return node;
    }
    function tsDeclareFunction(id = null, typeParameters = null, params, returnType = null) {
      const node = {
        type: "TSDeclareFunction",
        id,
        typeParameters,
        params,
        returnType
      };
      const defs = NODE_FIELDS.TSDeclareFunction;
      validate(defs.id, node, "id", id, 1);
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      validate(defs.params, node, "params", params, 1);
      validate(defs.returnType, node, "returnType", returnType, 1);
      return node;
    }
    function tsDeclareMethod(decorators = null, key, typeParameters = null, params, returnType = null) {
      const node = {
        type: "TSDeclareMethod",
        decorators,
        key,
        typeParameters,
        params,
        returnType
      };
      const defs = NODE_FIELDS.TSDeclareMethod;
      validate(defs.decorators, node, "decorators", decorators, 1);
      validate(defs.key, node, "key", key, 1);
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      validate(defs.params, node, "params", params, 1);
      validate(defs.returnType, node, "returnType", returnType, 1);
      return node;
    }
    function tsQualifiedName(left, right) {
      const node = {
        type: "TSQualifiedName",
        left,
        right
      };
      const defs = NODE_FIELDS.TSQualifiedName;
      validate(defs.left, node, "left", left, 1);
      validate(defs.right, node, "right", right, 1);
      return node;
    }
    function tsCallSignatureDeclaration(typeParameters = null, parameters, typeAnnotation2 = null) {
      const node = {
        type: "TSCallSignatureDeclaration",
        typeParameters,
        parameters,
        typeAnnotation: typeAnnotation2
      };
      const defs = NODE_FIELDS.TSCallSignatureDeclaration;
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      validate(defs.parameters, node, "parameters", parameters, 1);
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      return node;
    }
    function tsConstructSignatureDeclaration(typeParameters = null, parameters, typeAnnotation2 = null) {
      const node = {
        type: "TSConstructSignatureDeclaration",
        typeParameters,
        parameters,
        typeAnnotation: typeAnnotation2
      };
      const defs = NODE_FIELDS.TSConstructSignatureDeclaration;
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      validate(defs.parameters, node, "parameters", parameters, 1);
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      return node;
    }
    function tsPropertySignature(key, typeAnnotation2 = null) {
      const node = {
        type: "TSPropertySignature",
        key,
        typeAnnotation: typeAnnotation2
      };
      const defs = NODE_FIELDS.TSPropertySignature;
      validate(defs.key, node, "key", key, 1);
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      return node;
    }
    function tsMethodSignature(key, typeParameters = null, parameters, typeAnnotation2 = null) {
      const node = {
        type: "TSMethodSignature",
        key,
        typeParameters,
        parameters,
        typeAnnotation: typeAnnotation2,
        kind: null
      };
      const defs = NODE_FIELDS.TSMethodSignature;
      validate(defs.key, node, "key", key, 1);
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      validate(defs.parameters, node, "parameters", parameters, 1);
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      return node;
    }
    function tsIndexSignature(parameters, typeAnnotation2 = null) {
      const node = {
        type: "TSIndexSignature",
        parameters,
        typeAnnotation: typeAnnotation2
      };
      const defs = NODE_FIELDS.TSIndexSignature;
      validate(defs.parameters, node, "parameters", parameters, 1);
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      return node;
    }
    function tsAnyKeyword() {
      return {
        type: "TSAnyKeyword"
      };
    }
    function tsBooleanKeyword() {
      return {
        type: "TSBooleanKeyword"
      };
    }
    function tsBigIntKeyword() {
      return {
        type: "TSBigIntKeyword"
      };
    }
    function tsIntrinsicKeyword() {
      return {
        type: "TSIntrinsicKeyword"
      };
    }
    function tsNeverKeyword() {
      return {
        type: "TSNeverKeyword"
      };
    }
    function tsNullKeyword() {
      return {
        type: "TSNullKeyword"
      };
    }
    function tsNumberKeyword() {
      return {
        type: "TSNumberKeyword"
      };
    }
    function tsObjectKeyword() {
      return {
        type: "TSObjectKeyword"
      };
    }
    function tsStringKeyword() {
      return {
        type: "TSStringKeyword"
      };
    }
    function tsSymbolKeyword() {
      return {
        type: "TSSymbolKeyword"
      };
    }
    function tsUndefinedKeyword() {
      return {
        type: "TSUndefinedKeyword"
      };
    }
    function tsUnknownKeyword() {
      return {
        type: "TSUnknownKeyword"
      };
    }
    function tsVoidKeyword() {
      return {
        type: "TSVoidKeyword"
      };
    }
    function tsThisType() {
      return {
        type: "TSThisType"
      };
    }
    function tsFunctionType(typeParameters = null, parameters, typeAnnotation2 = null) {
      const node = {
        type: "TSFunctionType",
        typeParameters,
        parameters,
        typeAnnotation: typeAnnotation2
      };
      const defs = NODE_FIELDS.TSFunctionType;
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      validate(defs.parameters, node, "parameters", parameters, 1);
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      return node;
    }
    function tsConstructorType(typeParameters = null, parameters, typeAnnotation2 = null) {
      const node = {
        type: "TSConstructorType",
        typeParameters,
        parameters,
        typeAnnotation: typeAnnotation2
      };
      const defs = NODE_FIELDS.TSConstructorType;
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      validate(defs.parameters, node, "parameters", parameters, 1);
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      return node;
    }
    function tsTypeReference(typeName, typeParameters = null) {
      const node = {
        type: "TSTypeReference",
        typeName,
        typeParameters
      };
      const defs = NODE_FIELDS.TSTypeReference;
      validate(defs.typeName, node, "typeName", typeName, 1);
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      return node;
    }
    function tsTypePredicate(parameterName, typeAnnotation2 = null, asserts = null) {
      const node = {
        type: "TSTypePredicate",
        parameterName,
        typeAnnotation: typeAnnotation2,
        asserts
      };
      const defs = NODE_FIELDS.TSTypePredicate;
      validate(defs.parameterName, node, "parameterName", parameterName, 1);
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      validate(defs.asserts, node, "asserts", asserts);
      return node;
    }
    function tsTypeQuery(exprName, typeParameters = null) {
      const node = {
        type: "TSTypeQuery",
        exprName,
        typeParameters
      };
      const defs = NODE_FIELDS.TSTypeQuery;
      validate(defs.exprName, node, "exprName", exprName, 1);
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      return node;
    }
    function tsTypeLiteral(members) {
      const node = {
        type: "TSTypeLiteral",
        members
      };
      const defs = NODE_FIELDS.TSTypeLiteral;
      validate(defs.members, node, "members", members, 1);
      return node;
    }
    function tsArrayType(elementType) {
      const node = {
        type: "TSArrayType",
        elementType
      };
      const defs = NODE_FIELDS.TSArrayType;
      validate(defs.elementType, node, "elementType", elementType, 1);
      return node;
    }
    function tsTupleType(elementTypes) {
      const node = {
        type: "TSTupleType",
        elementTypes
      };
      const defs = NODE_FIELDS.TSTupleType;
      validate(defs.elementTypes, node, "elementTypes", elementTypes, 1);
      return node;
    }
    function tsOptionalType(typeAnnotation2) {
      const node = {
        type: "TSOptionalType",
        typeAnnotation: typeAnnotation2
      };
      const defs = NODE_FIELDS.TSOptionalType;
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      return node;
    }
    function tsRestType(typeAnnotation2) {
      const node = {
        type: "TSRestType",
        typeAnnotation: typeAnnotation2
      };
      const defs = NODE_FIELDS.TSRestType;
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      return node;
    }
    function tsNamedTupleMember(label, elementType, optional = false) {
      const node = {
        type: "TSNamedTupleMember",
        label,
        elementType,
        optional
      };
      const defs = NODE_FIELDS.TSNamedTupleMember;
      validate(defs.label, node, "label", label, 1);
      validate(defs.elementType, node, "elementType", elementType, 1);
      validate(defs.optional, node, "optional", optional);
      return node;
    }
    function tsUnionType(types) {
      const node = {
        type: "TSUnionType",
        types
      };
      const defs = NODE_FIELDS.TSUnionType;
      validate(defs.types, node, "types", types, 1);
      return node;
    }
    function tsIntersectionType(types) {
      const node = {
        type: "TSIntersectionType",
        types
      };
      const defs = NODE_FIELDS.TSIntersectionType;
      validate(defs.types, node, "types", types, 1);
      return node;
    }
    function tsConditionalType(checkType, extendsType, trueType, falseType) {
      const node = {
        type: "TSConditionalType",
        checkType,
        extendsType,
        trueType,
        falseType
      };
      const defs = NODE_FIELDS.TSConditionalType;
      validate(defs.checkType, node, "checkType", checkType, 1);
      validate(defs.extendsType, node, "extendsType", extendsType, 1);
      validate(defs.trueType, node, "trueType", trueType, 1);
      validate(defs.falseType, node, "falseType", falseType, 1);
      return node;
    }
    function tsInferType(typeParameter2) {
      const node = {
        type: "TSInferType",
        typeParameter: typeParameter2
      };
      const defs = NODE_FIELDS.TSInferType;
      validate(defs.typeParameter, node, "typeParameter", typeParameter2, 1);
      return node;
    }
    function tsParenthesizedType(typeAnnotation2) {
      const node = {
        type: "TSParenthesizedType",
        typeAnnotation: typeAnnotation2
      };
      const defs = NODE_FIELDS.TSParenthesizedType;
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      return node;
    }
    function tsTypeOperator(typeAnnotation2) {
      const node = {
        type: "TSTypeOperator",
        typeAnnotation: typeAnnotation2,
        operator: null
      };
      const defs = NODE_FIELDS.TSTypeOperator;
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      return node;
    }
    function tsIndexedAccessType(objectType, indexType) {
      const node = {
        type: "TSIndexedAccessType",
        objectType,
        indexType
      };
      const defs = NODE_FIELDS.TSIndexedAccessType;
      validate(defs.objectType, node, "objectType", objectType, 1);
      validate(defs.indexType, node, "indexType", indexType, 1);
      return node;
    }
    function tsMappedType(typeParameter2, typeAnnotation2 = null, nameType = null) {
      const node = {
        type: "TSMappedType",
        typeParameter: typeParameter2,
        typeAnnotation: typeAnnotation2,
        nameType
      };
      const defs = NODE_FIELDS.TSMappedType;
      validate(defs.typeParameter, node, "typeParameter", typeParameter2, 1);
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      validate(defs.nameType, node, "nameType", nameType, 1);
      return node;
    }
    function tsTemplateLiteralType(quasis, types) {
      const node = {
        type: "TSTemplateLiteralType",
        quasis,
        types
      };
      const defs = NODE_FIELDS.TSTemplateLiteralType;
      validate(defs.quasis, node, "quasis", quasis, 1);
      validate(defs.types, node, "types", types, 1);
      return node;
    }
    function tsLiteralType(literal) {
      const node = {
        type: "TSLiteralType",
        literal
      };
      const defs = NODE_FIELDS.TSLiteralType;
      validate(defs.literal, node, "literal", literal, 1);
      return node;
    }
    function tsExpressionWithTypeArguments(expression, typeParameters = null) {
      const node = {
        type: "TSExpressionWithTypeArguments",
        expression,
        typeParameters
      };
      const defs = NODE_FIELDS.TSExpressionWithTypeArguments;
      validate(defs.expression, node, "expression", expression, 1);
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      return node;
    }
    function tsInterfaceDeclaration(id, typeParameters = null, _extends = null, body) {
      const node = {
        type: "TSInterfaceDeclaration",
        id,
        typeParameters,
        extends: _extends,
        body
      };
      const defs = NODE_FIELDS.TSInterfaceDeclaration;
      validate(defs.id, node, "id", id, 1);
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      validate(defs.extends, node, "extends", _extends, 1);
      validate(defs.body, node, "body", body, 1);
      return node;
    }
    function tsInterfaceBody(body) {
      const node = {
        type: "TSInterfaceBody",
        body
      };
      const defs = NODE_FIELDS.TSInterfaceBody;
      validate(defs.body, node, "body", body, 1);
      return node;
    }
    function tsTypeAliasDeclaration(id, typeParameters = null, typeAnnotation2) {
      const node = {
        type: "TSTypeAliasDeclaration",
        id,
        typeParameters,
        typeAnnotation: typeAnnotation2
      };
      const defs = NODE_FIELDS.TSTypeAliasDeclaration;
      validate(defs.id, node, "id", id, 1);
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      return node;
    }
    function tsInstantiationExpression(expression, typeParameters = null) {
      const node = {
        type: "TSInstantiationExpression",
        expression,
        typeParameters
      };
      const defs = NODE_FIELDS.TSInstantiationExpression;
      validate(defs.expression, node, "expression", expression, 1);
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      return node;
    }
    function tsAsExpression(expression, typeAnnotation2) {
      const node = {
        type: "TSAsExpression",
        expression,
        typeAnnotation: typeAnnotation2
      };
      const defs = NODE_FIELDS.TSAsExpression;
      validate(defs.expression, node, "expression", expression, 1);
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      return node;
    }
    function tsSatisfiesExpression(expression, typeAnnotation2) {
      const node = {
        type: "TSSatisfiesExpression",
        expression,
        typeAnnotation: typeAnnotation2
      };
      const defs = NODE_FIELDS.TSSatisfiesExpression;
      validate(defs.expression, node, "expression", expression, 1);
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      return node;
    }
    function tsTypeAssertion(typeAnnotation2, expression) {
      const node = {
        type: "TSTypeAssertion",
        typeAnnotation: typeAnnotation2,
        expression
      };
      const defs = NODE_FIELDS.TSTypeAssertion;
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      validate(defs.expression, node, "expression", expression, 1);
      return node;
    }
    function tsEnumBody(members) {
      const node = {
        type: "TSEnumBody",
        members
      };
      const defs = NODE_FIELDS.TSEnumBody;
      validate(defs.members, node, "members", members, 1);
      return node;
    }
    function tsEnumDeclaration(id, members) {
      const node = {
        type: "TSEnumDeclaration",
        id,
        members
      };
      const defs = NODE_FIELDS.TSEnumDeclaration;
      validate(defs.id, node, "id", id, 1);
      validate(defs.members, node, "members", members, 1);
      return node;
    }
    function tsEnumMember(id, initializer = null) {
      const node = {
        type: "TSEnumMember",
        id,
        initializer
      };
      const defs = NODE_FIELDS.TSEnumMember;
      validate(defs.id, node, "id", id, 1);
      validate(defs.initializer, node, "initializer", initializer, 1);
      return node;
    }
    function tsModuleDeclaration(id, body) {
      const node = {
        type: "TSModuleDeclaration",
        id,
        body,
        kind: null
      };
      const defs = NODE_FIELDS.TSModuleDeclaration;
      validate(defs.id, node, "id", id, 1);
      validate(defs.body, node, "body", body, 1);
      return node;
    }
    function tsModuleBlock(body) {
      const node = {
        type: "TSModuleBlock",
        body
      };
      const defs = NODE_FIELDS.TSModuleBlock;
      validate(defs.body, node, "body", body, 1);
      return node;
    }
    function tsImportType(argument, qualifier = null, typeParameters = null) {
      const node = {
        type: "TSImportType",
        argument,
        qualifier,
        typeParameters
      };
      const defs = NODE_FIELDS.TSImportType;
      validate(defs.argument, node, "argument", argument, 1);
      validate(defs.qualifier, node, "qualifier", qualifier, 1);
      validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);
      return node;
    }
    function tsImportEqualsDeclaration(id, moduleReference) {
      const node = {
        type: "TSImportEqualsDeclaration",
        id,
        moduleReference,
        isExport: null
      };
      const defs = NODE_FIELDS.TSImportEqualsDeclaration;
      validate(defs.id, node, "id", id, 1);
      validate(defs.moduleReference, node, "moduleReference", moduleReference, 1);
      return node;
    }
    function tsExternalModuleReference(expression) {
      const node = {
        type: "TSExternalModuleReference",
        expression
      };
      const defs = NODE_FIELDS.TSExternalModuleReference;
      validate(defs.expression, node, "expression", expression, 1);
      return node;
    }
    function tsNonNullExpression(expression) {
      const node = {
        type: "TSNonNullExpression",
        expression
      };
      const defs = NODE_FIELDS.TSNonNullExpression;
      validate(defs.expression, node, "expression", expression, 1);
      return node;
    }
    function tsExportAssignment(expression) {
      const node = {
        type: "TSExportAssignment",
        expression
      };
      const defs = NODE_FIELDS.TSExportAssignment;
      validate(defs.expression, node, "expression", expression, 1);
      return node;
    }
    function tsNamespaceExportDeclaration(id) {
      const node = {
        type: "TSNamespaceExportDeclaration",
        id
      };
      const defs = NODE_FIELDS.TSNamespaceExportDeclaration;
      validate(defs.id, node, "id", id, 1);
      return node;
    }
    function tsTypeAnnotation(typeAnnotation2) {
      const node = {
        type: "TSTypeAnnotation",
        typeAnnotation: typeAnnotation2
      };
      const defs = NODE_FIELDS.TSTypeAnnotation;
      validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation2, 1);
      return node;
    }
    function tsTypeParameterInstantiation(params) {
      const node = {
        type: "TSTypeParameterInstantiation",
        params
      };
      const defs = NODE_FIELDS.TSTypeParameterInstantiation;
      validate(defs.params, node, "params", params, 1);
      return node;
    }
    function tsTypeParameterDeclaration(params) {
      const node = {
        type: "TSTypeParameterDeclaration",
        params
      };
      const defs = NODE_FIELDS.TSTypeParameterDeclaration;
      validate(defs.params, node, "params", params, 1);
      return node;
    }
    function tsTypeParameter(constraint = null, _default = null, name) {
      const node = {
        type: "TSTypeParameter",
        constraint,
        default: _default,
        name
      };
      const defs = NODE_FIELDS.TSTypeParameter;
      validate(defs.constraint, node, "constraint", constraint, 1);
      validate(defs.default, node, "default", _default, 1);
      validate(defs.name, node, "name", name);
      return node;
    }
    function NumberLiteral(value2) {
      (0, _deprecationWarning.default)("NumberLiteral", "NumericLiteral", "The node type ");
      return numericLiteral(value2);
    }
    function RegexLiteral(pattern, flags = "") {
      (0, _deprecationWarning.default)("RegexLiteral", "RegExpLiteral", "The node type ");
      return regExpLiteral(pattern, flags);
    }
    function RestProperty(argument) {
      (0, _deprecationWarning.default)("RestProperty", "RestElement", "The node type ");
      return restElement(argument);
    }
    function SpreadProperty(argument) {
      (0, _deprecationWarning.default)("SpreadProperty", "SpreadElement", "The node type ");
      return spreadElement(argument);
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/builders/generated/uppercase.js
var require_uppercase = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/builders/generated/uppercase.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "AnyTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.anyTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "ArgumentPlaceholder", {
      enumerable: true,
      get: function() {
        return _lowercase.argumentPlaceholder;
      }
    });
    Object.defineProperty(exports, "ArrayExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.arrayExpression;
      }
    });
    Object.defineProperty(exports, "ArrayPattern", {
      enumerable: true,
      get: function() {
        return _lowercase.arrayPattern;
      }
    });
    Object.defineProperty(exports, "ArrayTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.arrayTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "ArrowFunctionExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.arrowFunctionExpression;
      }
    });
    Object.defineProperty(exports, "AssignmentExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.assignmentExpression;
      }
    });
    Object.defineProperty(exports, "AssignmentPattern", {
      enumerable: true,
      get: function() {
        return _lowercase.assignmentPattern;
      }
    });
    Object.defineProperty(exports, "AwaitExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.awaitExpression;
      }
    });
    Object.defineProperty(exports, "BigIntLiteral", {
      enumerable: true,
      get: function() {
        return _lowercase.bigIntLiteral;
      }
    });
    Object.defineProperty(exports, "BinaryExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.binaryExpression;
      }
    });
    Object.defineProperty(exports, "BindExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.bindExpression;
      }
    });
    Object.defineProperty(exports, "BlockStatement", {
      enumerable: true,
      get: function() {
        return _lowercase.blockStatement;
      }
    });
    Object.defineProperty(exports, "BooleanLiteral", {
      enumerable: true,
      get: function() {
        return _lowercase.booleanLiteral;
      }
    });
    Object.defineProperty(exports, "BooleanLiteralTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.booleanLiteralTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "BooleanTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.booleanTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "BreakStatement", {
      enumerable: true,
      get: function() {
        return _lowercase.breakStatement;
      }
    });
    Object.defineProperty(exports, "CallExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.callExpression;
      }
    });
    Object.defineProperty(exports, "CatchClause", {
      enumerable: true,
      get: function() {
        return _lowercase.catchClause;
      }
    });
    Object.defineProperty(exports, "ClassAccessorProperty", {
      enumerable: true,
      get: function() {
        return _lowercase.classAccessorProperty;
      }
    });
    Object.defineProperty(exports, "ClassBody", {
      enumerable: true,
      get: function() {
        return _lowercase.classBody;
      }
    });
    Object.defineProperty(exports, "ClassDeclaration", {
      enumerable: true,
      get: function() {
        return _lowercase.classDeclaration;
      }
    });
    Object.defineProperty(exports, "ClassExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.classExpression;
      }
    });
    Object.defineProperty(exports, "ClassImplements", {
      enumerable: true,
      get: function() {
        return _lowercase.classImplements;
      }
    });
    Object.defineProperty(exports, "ClassMethod", {
      enumerable: true,
      get: function() {
        return _lowercase.classMethod;
      }
    });
    Object.defineProperty(exports, "ClassPrivateMethod", {
      enumerable: true,
      get: function() {
        return _lowercase.classPrivateMethod;
      }
    });
    Object.defineProperty(exports, "ClassPrivateProperty", {
      enumerable: true,
      get: function() {
        return _lowercase.classPrivateProperty;
      }
    });
    Object.defineProperty(exports, "ClassProperty", {
      enumerable: true,
      get: function() {
        return _lowercase.classProperty;
      }
    });
    Object.defineProperty(exports, "ConditionalExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.conditionalExpression;
      }
    });
    Object.defineProperty(exports, "ContinueStatement", {
      enumerable: true,
      get: function() {
        return _lowercase.continueStatement;
      }
    });
    Object.defineProperty(exports, "DebuggerStatement", {
      enumerable: true,
      get: function() {
        return _lowercase.debuggerStatement;
      }
    });
    Object.defineProperty(exports, "DecimalLiteral", {
      enumerable: true,
      get: function() {
        return _lowercase.decimalLiteral;
      }
    });
    Object.defineProperty(exports, "DeclareClass", {
      enumerable: true,
      get: function() {
        return _lowercase.declareClass;
      }
    });
    Object.defineProperty(exports, "DeclareExportAllDeclaration", {
      enumerable: true,
      get: function() {
        return _lowercase.declareExportAllDeclaration;
      }
    });
    Object.defineProperty(exports, "DeclareExportDeclaration", {
      enumerable: true,
      get: function() {
        return _lowercase.declareExportDeclaration;
      }
    });
    Object.defineProperty(exports, "DeclareFunction", {
      enumerable: true,
      get: function() {
        return _lowercase.declareFunction;
      }
    });
    Object.defineProperty(exports, "DeclareInterface", {
      enumerable: true,
      get: function() {
        return _lowercase.declareInterface;
      }
    });
    Object.defineProperty(exports, "DeclareModule", {
      enumerable: true,
      get: function() {
        return _lowercase.declareModule;
      }
    });
    Object.defineProperty(exports, "DeclareModuleExports", {
      enumerable: true,
      get: function() {
        return _lowercase.declareModuleExports;
      }
    });
    Object.defineProperty(exports, "DeclareOpaqueType", {
      enumerable: true,
      get: function() {
        return _lowercase.declareOpaqueType;
      }
    });
    Object.defineProperty(exports, "DeclareTypeAlias", {
      enumerable: true,
      get: function() {
        return _lowercase.declareTypeAlias;
      }
    });
    Object.defineProperty(exports, "DeclareVariable", {
      enumerable: true,
      get: function() {
        return _lowercase.declareVariable;
      }
    });
    Object.defineProperty(exports, "DeclaredPredicate", {
      enumerable: true,
      get: function() {
        return _lowercase.declaredPredicate;
      }
    });
    Object.defineProperty(exports, "Decorator", {
      enumerable: true,
      get: function() {
        return _lowercase.decorator;
      }
    });
    Object.defineProperty(exports, "Directive", {
      enumerable: true,
      get: function() {
        return _lowercase.directive;
      }
    });
    Object.defineProperty(exports, "DirectiveLiteral", {
      enumerable: true,
      get: function() {
        return _lowercase.directiveLiteral;
      }
    });
    Object.defineProperty(exports, "DoExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.doExpression;
      }
    });
    Object.defineProperty(exports, "DoWhileStatement", {
      enumerable: true,
      get: function() {
        return _lowercase.doWhileStatement;
      }
    });
    Object.defineProperty(exports, "EmptyStatement", {
      enumerable: true,
      get: function() {
        return _lowercase.emptyStatement;
      }
    });
    Object.defineProperty(exports, "EmptyTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.emptyTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "EnumBooleanBody", {
      enumerable: true,
      get: function() {
        return _lowercase.enumBooleanBody;
      }
    });
    Object.defineProperty(exports, "EnumBooleanMember", {
      enumerable: true,
      get: function() {
        return _lowercase.enumBooleanMember;
      }
    });
    Object.defineProperty(exports, "EnumDeclaration", {
      enumerable: true,
      get: function() {
        return _lowercase.enumDeclaration;
      }
    });
    Object.defineProperty(exports, "EnumDefaultedMember", {
      enumerable: true,
      get: function() {
        return _lowercase.enumDefaultedMember;
      }
    });
    Object.defineProperty(exports, "EnumNumberBody", {
      enumerable: true,
      get: function() {
        return _lowercase.enumNumberBody;
      }
    });
    Object.defineProperty(exports, "EnumNumberMember", {
      enumerable: true,
      get: function() {
        return _lowercase.enumNumberMember;
      }
    });
    Object.defineProperty(exports, "EnumStringBody", {
      enumerable: true,
      get: function() {
        return _lowercase.enumStringBody;
      }
    });
    Object.defineProperty(exports, "EnumStringMember", {
      enumerable: true,
      get: function() {
        return _lowercase.enumStringMember;
      }
    });
    Object.defineProperty(exports, "EnumSymbolBody", {
      enumerable: true,
      get: function() {
        return _lowercase.enumSymbolBody;
      }
    });
    Object.defineProperty(exports, "ExistsTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.existsTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "ExportAllDeclaration", {
      enumerable: true,
      get: function() {
        return _lowercase.exportAllDeclaration;
      }
    });
    Object.defineProperty(exports, "ExportDefaultDeclaration", {
      enumerable: true,
      get: function() {
        return _lowercase.exportDefaultDeclaration;
      }
    });
    Object.defineProperty(exports, "ExportDefaultSpecifier", {
      enumerable: true,
      get: function() {
        return _lowercase.exportDefaultSpecifier;
      }
    });
    Object.defineProperty(exports, "ExportNamedDeclaration", {
      enumerable: true,
      get: function() {
        return _lowercase.exportNamedDeclaration;
      }
    });
    Object.defineProperty(exports, "ExportNamespaceSpecifier", {
      enumerable: true,
      get: function() {
        return _lowercase.exportNamespaceSpecifier;
      }
    });
    Object.defineProperty(exports, "ExportSpecifier", {
      enumerable: true,
      get: function() {
        return _lowercase.exportSpecifier;
      }
    });
    Object.defineProperty(exports, "ExpressionStatement", {
      enumerable: true,
      get: function() {
        return _lowercase.expressionStatement;
      }
    });
    Object.defineProperty(exports, "File", {
      enumerable: true,
      get: function() {
        return _lowercase.file;
      }
    });
    Object.defineProperty(exports, "ForInStatement", {
      enumerable: true,
      get: function() {
        return _lowercase.forInStatement;
      }
    });
    Object.defineProperty(exports, "ForOfStatement", {
      enumerable: true,
      get: function() {
        return _lowercase.forOfStatement;
      }
    });
    Object.defineProperty(exports, "ForStatement", {
      enumerable: true,
      get: function() {
        return _lowercase.forStatement;
      }
    });
    Object.defineProperty(exports, "FunctionDeclaration", {
      enumerable: true,
      get: function() {
        return _lowercase.functionDeclaration;
      }
    });
    Object.defineProperty(exports, "FunctionExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.functionExpression;
      }
    });
    Object.defineProperty(exports, "FunctionTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.functionTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "FunctionTypeParam", {
      enumerable: true,
      get: function() {
        return _lowercase.functionTypeParam;
      }
    });
    Object.defineProperty(exports, "GenericTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.genericTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "Identifier", {
      enumerable: true,
      get: function() {
        return _lowercase.identifier;
      }
    });
    Object.defineProperty(exports, "IfStatement", {
      enumerable: true,
      get: function() {
        return _lowercase.ifStatement;
      }
    });
    Object.defineProperty(exports, "Import", {
      enumerable: true,
      get: function() {
        return _lowercase.import;
      }
    });
    Object.defineProperty(exports, "ImportAttribute", {
      enumerable: true,
      get: function() {
        return _lowercase.importAttribute;
      }
    });
    Object.defineProperty(exports, "ImportDeclaration", {
      enumerable: true,
      get: function() {
        return _lowercase.importDeclaration;
      }
    });
    Object.defineProperty(exports, "ImportDefaultSpecifier", {
      enumerable: true,
      get: function() {
        return _lowercase.importDefaultSpecifier;
      }
    });
    Object.defineProperty(exports, "ImportExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.importExpression;
      }
    });
    Object.defineProperty(exports, "ImportNamespaceSpecifier", {
      enumerable: true,
      get: function() {
        return _lowercase.importNamespaceSpecifier;
      }
    });
    Object.defineProperty(exports, "ImportSpecifier", {
      enumerable: true,
      get: function() {
        return _lowercase.importSpecifier;
      }
    });
    Object.defineProperty(exports, "IndexedAccessType", {
      enumerable: true,
      get: function() {
        return _lowercase.indexedAccessType;
      }
    });
    Object.defineProperty(exports, "InferredPredicate", {
      enumerable: true,
      get: function() {
        return _lowercase.inferredPredicate;
      }
    });
    Object.defineProperty(exports, "InterfaceDeclaration", {
      enumerable: true,
      get: function() {
        return _lowercase.interfaceDeclaration;
      }
    });
    Object.defineProperty(exports, "InterfaceExtends", {
      enumerable: true,
      get: function() {
        return _lowercase.interfaceExtends;
      }
    });
    Object.defineProperty(exports, "InterfaceTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.interfaceTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "InterpreterDirective", {
      enumerable: true,
      get: function() {
        return _lowercase.interpreterDirective;
      }
    });
    Object.defineProperty(exports, "IntersectionTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.intersectionTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "JSXAttribute", {
      enumerable: true,
      get: function() {
        return _lowercase.jsxAttribute;
      }
    });
    Object.defineProperty(exports, "JSXClosingElement", {
      enumerable: true,
      get: function() {
        return _lowercase.jsxClosingElement;
      }
    });
    Object.defineProperty(exports, "JSXClosingFragment", {
      enumerable: true,
      get: function() {
        return _lowercase.jsxClosingFragment;
      }
    });
    Object.defineProperty(exports, "JSXElement", {
      enumerable: true,
      get: function() {
        return _lowercase.jsxElement;
      }
    });
    Object.defineProperty(exports, "JSXEmptyExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.jsxEmptyExpression;
      }
    });
    Object.defineProperty(exports, "JSXExpressionContainer", {
      enumerable: true,
      get: function() {
        return _lowercase.jsxExpressionContainer;
      }
    });
    Object.defineProperty(exports, "JSXFragment", {
      enumerable: true,
      get: function() {
        return _lowercase.jsxFragment;
      }
    });
    Object.defineProperty(exports, "JSXIdentifier", {
      enumerable: true,
      get: function() {
        return _lowercase.jsxIdentifier;
      }
    });
    Object.defineProperty(exports, "JSXMemberExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.jsxMemberExpression;
      }
    });
    Object.defineProperty(exports, "JSXNamespacedName", {
      enumerable: true,
      get: function() {
        return _lowercase.jsxNamespacedName;
      }
    });
    Object.defineProperty(exports, "JSXOpeningElement", {
      enumerable: true,
      get: function() {
        return _lowercase.jsxOpeningElement;
      }
    });
    Object.defineProperty(exports, "JSXOpeningFragment", {
      enumerable: true,
      get: function() {
        return _lowercase.jsxOpeningFragment;
      }
    });
    Object.defineProperty(exports, "JSXSpreadAttribute", {
      enumerable: true,
      get: function() {
        return _lowercase.jsxSpreadAttribute;
      }
    });
    Object.defineProperty(exports, "JSXSpreadChild", {
      enumerable: true,
      get: function() {
        return _lowercase.jsxSpreadChild;
      }
    });
    Object.defineProperty(exports, "JSXText", {
      enumerable: true,
      get: function() {
        return _lowercase.jsxText;
      }
    });
    Object.defineProperty(exports, "LabeledStatement", {
      enumerable: true,
      get: function() {
        return _lowercase.labeledStatement;
      }
    });
    Object.defineProperty(exports, "LogicalExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.logicalExpression;
      }
    });
    Object.defineProperty(exports, "MemberExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.memberExpression;
      }
    });
    Object.defineProperty(exports, "MetaProperty", {
      enumerable: true,
      get: function() {
        return _lowercase.metaProperty;
      }
    });
    Object.defineProperty(exports, "MixedTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.mixedTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "ModuleExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.moduleExpression;
      }
    });
    Object.defineProperty(exports, "NewExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.newExpression;
      }
    });
    Object.defineProperty(exports, "Noop", {
      enumerable: true,
      get: function() {
        return _lowercase.noop;
      }
    });
    Object.defineProperty(exports, "NullLiteral", {
      enumerable: true,
      get: function() {
        return _lowercase.nullLiteral;
      }
    });
    Object.defineProperty(exports, "NullLiteralTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.nullLiteralTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "NullableTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.nullableTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "NumberLiteral", {
      enumerable: true,
      get: function() {
        return _lowercase.numberLiteral;
      }
    });
    Object.defineProperty(exports, "NumberLiteralTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.numberLiteralTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "NumberTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.numberTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "NumericLiteral", {
      enumerable: true,
      get: function() {
        return _lowercase.numericLiteral;
      }
    });
    Object.defineProperty(exports, "ObjectExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.objectExpression;
      }
    });
    Object.defineProperty(exports, "ObjectMethod", {
      enumerable: true,
      get: function() {
        return _lowercase.objectMethod;
      }
    });
    Object.defineProperty(exports, "ObjectPattern", {
      enumerable: true,
      get: function() {
        return _lowercase.objectPattern;
      }
    });
    Object.defineProperty(exports, "ObjectProperty", {
      enumerable: true,
      get: function() {
        return _lowercase.objectProperty;
      }
    });
    Object.defineProperty(exports, "ObjectTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.objectTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "ObjectTypeCallProperty", {
      enumerable: true,
      get: function() {
        return _lowercase.objectTypeCallProperty;
      }
    });
    Object.defineProperty(exports, "ObjectTypeIndexer", {
      enumerable: true,
      get: function() {
        return _lowercase.objectTypeIndexer;
      }
    });
    Object.defineProperty(exports, "ObjectTypeInternalSlot", {
      enumerable: true,
      get: function() {
        return _lowercase.objectTypeInternalSlot;
      }
    });
    Object.defineProperty(exports, "ObjectTypeProperty", {
      enumerable: true,
      get: function() {
        return _lowercase.objectTypeProperty;
      }
    });
    Object.defineProperty(exports, "ObjectTypeSpreadProperty", {
      enumerable: true,
      get: function() {
        return _lowercase.objectTypeSpreadProperty;
      }
    });
    Object.defineProperty(exports, "OpaqueType", {
      enumerable: true,
      get: function() {
        return _lowercase.opaqueType;
      }
    });
    Object.defineProperty(exports, "OptionalCallExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.optionalCallExpression;
      }
    });
    Object.defineProperty(exports, "OptionalIndexedAccessType", {
      enumerable: true,
      get: function() {
        return _lowercase.optionalIndexedAccessType;
      }
    });
    Object.defineProperty(exports, "OptionalMemberExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.optionalMemberExpression;
      }
    });
    Object.defineProperty(exports, "ParenthesizedExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.parenthesizedExpression;
      }
    });
    Object.defineProperty(exports, "PipelineBareFunction", {
      enumerable: true,
      get: function() {
        return _lowercase.pipelineBareFunction;
      }
    });
    Object.defineProperty(exports, "PipelinePrimaryTopicReference", {
      enumerable: true,
      get: function() {
        return _lowercase.pipelinePrimaryTopicReference;
      }
    });
    Object.defineProperty(exports, "PipelineTopicExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.pipelineTopicExpression;
      }
    });
    Object.defineProperty(exports, "Placeholder", {
      enumerable: true,
      get: function() {
        return _lowercase.placeholder;
      }
    });
    Object.defineProperty(exports, "PrivateName", {
      enumerable: true,
      get: function() {
        return _lowercase.privateName;
      }
    });
    Object.defineProperty(exports, "Program", {
      enumerable: true,
      get: function() {
        return _lowercase.program;
      }
    });
    Object.defineProperty(exports, "QualifiedTypeIdentifier", {
      enumerable: true,
      get: function() {
        return _lowercase.qualifiedTypeIdentifier;
      }
    });
    Object.defineProperty(exports, "RecordExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.recordExpression;
      }
    });
    Object.defineProperty(exports, "RegExpLiteral", {
      enumerable: true,
      get: function() {
        return _lowercase.regExpLiteral;
      }
    });
    Object.defineProperty(exports, "RegexLiteral", {
      enumerable: true,
      get: function() {
        return _lowercase.regexLiteral;
      }
    });
    Object.defineProperty(exports, "RestElement", {
      enumerable: true,
      get: function() {
        return _lowercase.restElement;
      }
    });
    Object.defineProperty(exports, "RestProperty", {
      enumerable: true,
      get: function() {
        return _lowercase.restProperty;
      }
    });
    Object.defineProperty(exports, "ReturnStatement", {
      enumerable: true,
      get: function() {
        return _lowercase.returnStatement;
      }
    });
    Object.defineProperty(exports, "SequenceExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.sequenceExpression;
      }
    });
    Object.defineProperty(exports, "SpreadElement", {
      enumerable: true,
      get: function() {
        return _lowercase.spreadElement;
      }
    });
    Object.defineProperty(exports, "SpreadProperty", {
      enumerable: true,
      get: function() {
        return _lowercase.spreadProperty;
      }
    });
    Object.defineProperty(exports, "StaticBlock", {
      enumerable: true,
      get: function() {
        return _lowercase.staticBlock;
      }
    });
    Object.defineProperty(exports, "StringLiteral", {
      enumerable: true,
      get: function() {
        return _lowercase.stringLiteral;
      }
    });
    Object.defineProperty(exports, "StringLiteralTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.stringLiteralTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "StringTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.stringTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "Super", {
      enumerable: true,
      get: function() {
        return _lowercase.super;
      }
    });
    Object.defineProperty(exports, "SwitchCase", {
      enumerable: true,
      get: function() {
        return _lowercase.switchCase;
      }
    });
    Object.defineProperty(exports, "SwitchStatement", {
      enumerable: true,
      get: function() {
        return _lowercase.switchStatement;
      }
    });
    Object.defineProperty(exports, "SymbolTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.symbolTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "TSAnyKeyword", {
      enumerable: true,
      get: function() {
        return _lowercase.tsAnyKeyword;
      }
    });
    Object.defineProperty(exports, "TSArrayType", {
      enumerable: true,
      get: function() {
        return _lowercase.tsArrayType;
      }
    });
    Object.defineProperty(exports, "TSAsExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.tsAsExpression;
      }
    });
    Object.defineProperty(exports, "TSBigIntKeyword", {
      enumerable: true,
      get: function() {
        return _lowercase.tsBigIntKeyword;
      }
    });
    Object.defineProperty(exports, "TSBooleanKeyword", {
      enumerable: true,
      get: function() {
        return _lowercase.tsBooleanKeyword;
      }
    });
    Object.defineProperty(exports, "TSCallSignatureDeclaration", {
      enumerable: true,
      get: function() {
        return _lowercase.tsCallSignatureDeclaration;
      }
    });
    Object.defineProperty(exports, "TSConditionalType", {
      enumerable: true,
      get: function() {
        return _lowercase.tsConditionalType;
      }
    });
    Object.defineProperty(exports, "TSConstructSignatureDeclaration", {
      enumerable: true,
      get: function() {
        return _lowercase.tsConstructSignatureDeclaration;
      }
    });
    Object.defineProperty(exports, "TSConstructorType", {
      enumerable: true,
      get: function() {
        return _lowercase.tsConstructorType;
      }
    });
    Object.defineProperty(exports, "TSDeclareFunction", {
      enumerable: true,
      get: function() {
        return _lowercase.tsDeclareFunction;
      }
    });
    Object.defineProperty(exports, "TSDeclareMethod", {
      enumerable: true,
      get: function() {
        return _lowercase.tsDeclareMethod;
      }
    });
    Object.defineProperty(exports, "TSEnumBody", {
      enumerable: true,
      get: function() {
        return _lowercase.tsEnumBody;
      }
    });
    Object.defineProperty(exports, "TSEnumDeclaration", {
      enumerable: true,
      get: function() {
        return _lowercase.tsEnumDeclaration;
      }
    });
    Object.defineProperty(exports, "TSEnumMember", {
      enumerable: true,
      get: function() {
        return _lowercase.tsEnumMember;
      }
    });
    Object.defineProperty(exports, "TSExportAssignment", {
      enumerable: true,
      get: function() {
        return _lowercase.tsExportAssignment;
      }
    });
    Object.defineProperty(exports, "TSExpressionWithTypeArguments", {
      enumerable: true,
      get: function() {
        return _lowercase.tsExpressionWithTypeArguments;
      }
    });
    Object.defineProperty(exports, "TSExternalModuleReference", {
      enumerable: true,
      get: function() {
        return _lowercase.tsExternalModuleReference;
      }
    });
    Object.defineProperty(exports, "TSFunctionType", {
      enumerable: true,
      get: function() {
        return _lowercase.tsFunctionType;
      }
    });
    Object.defineProperty(exports, "TSImportEqualsDeclaration", {
      enumerable: true,
      get: function() {
        return _lowercase.tsImportEqualsDeclaration;
      }
    });
    Object.defineProperty(exports, "TSImportType", {
      enumerable: true,
      get: function() {
        return _lowercase.tsImportType;
      }
    });
    Object.defineProperty(exports, "TSIndexSignature", {
      enumerable: true,
      get: function() {
        return _lowercase.tsIndexSignature;
      }
    });
    Object.defineProperty(exports, "TSIndexedAccessType", {
      enumerable: true,
      get: function() {
        return _lowercase.tsIndexedAccessType;
      }
    });
    Object.defineProperty(exports, "TSInferType", {
      enumerable: true,
      get: function() {
        return _lowercase.tsInferType;
      }
    });
    Object.defineProperty(exports, "TSInstantiationExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.tsInstantiationExpression;
      }
    });
    Object.defineProperty(exports, "TSInterfaceBody", {
      enumerable: true,
      get: function() {
        return _lowercase.tsInterfaceBody;
      }
    });
    Object.defineProperty(exports, "TSInterfaceDeclaration", {
      enumerable: true,
      get: function() {
        return _lowercase.tsInterfaceDeclaration;
      }
    });
    Object.defineProperty(exports, "TSIntersectionType", {
      enumerable: true,
      get: function() {
        return _lowercase.tsIntersectionType;
      }
    });
    Object.defineProperty(exports, "TSIntrinsicKeyword", {
      enumerable: true,
      get: function() {
        return _lowercase.tsIntrinsicKeyword;
      }
    });
    Object.defineProperty(exports, "TSLiteralType", {
      enumerable: true,
      get: function() {
        return _lowercase.tsLiteralType;
      }
    });
    Object.defineProperty(exports, "TSMappedType", {
      enumerable: true,
      get: function() {
        return _lowercase.tsMappedType;
      }
    });
    Object.defineProperty(exports, "TSMethodSignature", {
      enumerable: true,
      get: function() {
        return _lowercase.tsMethodSignature;
      }
    });
    Object.defineProperty(exports, "TSModuleBlock", {
      enumerable: true,
      get: function() {
        return _lowercase.tsModuleBlock;
      }
    });
    Object.defineProperty(exports, "TSModuleDeclaration", {
      enumerable: true,
      get: function() {
        return _lowercase.tsModuleDeclaration;
      }
    });
    Object.defineProperty(exports, "TSNamedTupleMember", {
      enumerable: true,
      get: function() {
        return _lowercase.tsNamedTupleMember;
      }
    });
    Object.defineProperty(exports, "TSNamespaceExportDeclaration", {
      enumerable: true,
      get: function() {
        return _lowercase.tsNamespaceExportDeclaration;
      }
    });
    Object.defineProperty(exports, "TSNeverKeyword", {
      enumerable: true,
      get: function() {
        return _lowercase.tsNeverKeyword;
      }
    });
    Object.defineProperty(exports, "TSNonNullExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.tsNonNullExpression;
      }
    });
    Object.defineProperty(exports, "TSNullKeyword", {
      enumerable: true,
      get: function() {
        return _lowercase.tsNullKeyword;
      }
    });
    Object.defineProperty(exports, "TSNumberKeyword", {
      enumerable: true,
      get: function() {
        return _lowercase.tsNumberKeyword;
      }
    });
    Object.defineProperty(exports, "TSObjectKeyword", {
      enumerable: true,
      get: function() {
        return _lowercase.tsObjectKeyword;
      }
    });
    Object.defineProperty(exports, "TSOptionalType", {
      enumerable: true,
      get: function() {
        return _lowercase.tsOptionalType;
      }
    });
    Object.defineProperty(exports, "TSParameterProperty", {
      enumerable: true,
      get: function() {
        return _lowercase.tsParameterProperty;
      }
    });
    Object.defineProperty(exports, "TSParenthesizedType", {
      enumerable: true,
      get: function() {
        return _lowercase.tsParenthesizedType;
      }
    });
    Object.defineProperty(exports, "TSPropertySignature", {
      enumerable: true,
      get: function() {
        return _lowercase.tsPropertySignature;
      }
    });
    Object.defineProperty(exports, "TSQualifiedName", {
      enumerable: true,
      get: function() {
        return _lowercase.tsQualifiedName;
      }
    });
    Object.defineProperty(exports, "TSRestType", {
      enumerable: true,
      get: function() {
        return _lowercase.tsRestType;
      }
    });
    Object.defineProperty(exports, "TSSatisfiesExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.tsSatisfiesExpression;
      }
    });
    Object.defineProperty(exports, "TSStringKeyword", {
      enumerable: true,
      get: function() {
        return _lowercase.tsStringKeyword;
      }
    });
    Object.defineProperty(exports, "TSSymbolKeyword", {
      enumerable: true,
      get: function() {
        return _lowercase.tsSymbolKeyword;
      }
    });
    Object.defineProperty(exports, "TSTemplateLiteralType", {
      enumerable: true,
      get: function() {
        return _lowercase.tsTemplateLiteralType;
      }
    });
    Object.defineProperty(exports, "TSThisType", {
      enumerable: true,
      get: function() {
        return _lowercase.tsThisType;
      }
    });
    Object.defineProperty(exports, "TSTupleType", {
      enumerable: true,
      get: function() {
        return _lowercase.tsTupleType;
      }
    });
    Object.defineProperty(exports, "TSTypeAliasDeclaration", {
      enumerable: true,
      get: function() {
        return _lowercase.tsTypeAliasDeclaration;
      }
    });
    Object.defineProperty(exports, "TSTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.tsTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "TSTypeAssertion", {
      enumerable: true,
      get: function() {
        return _lowercase.tsTypeAssertion;
      }
    });
    Object.defineProperty(exports, "TSTypeLiteral", {
      enumerable: true,
      get: function() {
        return _lowercase.tsTypeLiteral;
      }
    });
    Object.defineProperty(exports, "TSTypeOperator", {
      enumerable: true,
      get: function() {
        return _lowercase.tsTypeOperator;
      }
    });
    Object.defineProperty(exports, "TSTypeParameter", {
      enumerable: true,
      get: function() {
        return _lowercase.tsTypeParameter;
      }
    });
    Object.defineProperty(exports, "TSTypeParameterDeclaration", {
      enumerable: true,
      get: function() {
        return _lowercase.tsTypeParameterDeclaration;
      }
    });
    Object.defineProperty(exports, "TSTypeParameterInstantiation", {
      enumerable: true,
      get: function() {
        return _lowercase.tsTypeParameterInstantiation;
      }
    });
    Object.defineProperty(exports, "TSTypePredicate", {
      enumerable: true,
      get: function() {
        return _lowercase.tsTypePredicate;
      }
    });
    Object.defineProperty(exports, "TSTypeQuery", {
      enumerable: true,
      get: function() {
        return _lowercase.tsTypeQuery;
      }
    });
    Object.defineProperty(exports, "TSTypeReference", {
      enumerable: true,
      get: function() {
        return _lowercase.tsTypeReference;
      }
    });
    Object.defineProperty(exports, "TSUndefinedKeyword", {
      enumerable: true,
      get: function() {
        return _lowercase.tsUndefinedKeyword;
      }
    });
    Object.defineProperty(exports, "TSUnionType", {
      enumerable: true,
      get: function() {
        return _lowercase.tsUnionType;
      }
    });
    Object.defineProperty(exports, "TSUnknownKeyword", {
      enumerable: true,
      get: function() {
        return _lowercase.tsUnknownKeyword;
      }
    });
    Object.defineProperty(exports, "TSVoidKeyword", {
      enumerable: true,
      get: function() {
        return _lowercase.tsVoidKeyword;
      }
    });
    Object.defineProperty(exports, "TaggedTemplateExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.taggedTemplateExpression;
      }
    });
    Object.defineProperty(exports, "TemplateElement", {
      enumerable: true,
      get: function() {
        return _lowercase.templateElement;
      }
    });
    Object.defineProperty(exports, "TemplateLiteral", {
      enumerable: true,
      get: function() {
        return _lowercase.templateLiteral;
      }
    });
    Object.defineProperty(exports, "ThisExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.thisExpression;
      }
    });
    Object.defineProperty(exports, "ThisTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.thisTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "ThrowStatement", {
      enumerable: true,
      get: function() {
        return _lowercase.throwStatement;
      }
    });
    Object.defineProperty(exports, "TopicReference", {
      enumerable: true,
      get: function() {
        return _lowercase.topicReference;
      }
    });
    Object.defineProperty(exports, "TryStatement", {
      enumerable: true,
      get: function() {
        return _lowercase.tryStatement;
      }
    });
    Object.defineProperty(exports, "TupleExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.tupleExpression;
      }
    });
    Object.defineProperty(exports, "TupleTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.tupleTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "TypeAlias", {
      enumerable: true,
      get: function() {
        return _lowercase.typeAlias;
      }
    });
    Object.defineProperty(exports, "TypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.typeAnnotation;
      }
    });
    Object.defineProperty(exports, "TypeCastExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.typeCastExpression;
      }
    });
    Object.defineProperty(exports, "TypeParameter", {
      enumerable: true,
      get: function() {
        return _lowercase.typeParameter;
      }
    });
    Object.defineProperty(exports, "TypeParameterDeclaration", {
      enumerable: true,
      get: function() {
        return _lowercase.typeParameterDeclaration;
      }
    });
    Object.defineProperty(exports, "TypeParameterInstantiation", {
      enumerable: true,
      get: function() {
        return _lowercase.typeParameterInstantiation;
      }
    });
    Object.defineProperty(exports, "TypeofTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.typeofTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "UnaryExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.unaryExpression;
      }
    });
    Object.defineProperty(exports, "UnionTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.unionTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "UpdateExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.updateExpression;
      }
    });
    Object.defineProperty(exports, "V8IntrinsicIdentifier", {
      enumerable: true,
      get: function() {
        return _lowercase.v8IntrinsicIdentifier;
      }
    });
    Object.defineProperty(exports, "VariableDeclaration", {
      enumerable: true,
      get: function() {
        return _lowercase.variableDeclaration;
      }
    });
    Object.defineProperty(exports, "VariableDeclarator", {
      enumerable: true,
      get: function() {
        return _lowercase.variableDeclarator;
      }
    });
    Object.defineProperty(exports, "Variance", {
      enumerable: true,
      get: function() {
        return _lowercase.variance;
      }
    });
    Object.defineProperty(exports, "VoidTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _lowercase.voidTypeAnnotation;
      }
    });
    Object.defineProperty(exports, "WhileStatement", {
      enumerable: true,
      get: function() {
        return _lowercase.whileStatement;
      }
    });
    Object.defineProperty(exports, "WithStatement", {
      enumerable: true,
      get: function() {
        return _lowercase.withStatement;
      }
    });
    Object.defineProperty(exports, "YieldExpression", {
      enumerable: true,
      get: function() {
        return _lowercase.yieldExpression;
      }
    });
    var _lowercase = require_lowercase();
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/builders/generated/index.js
var require_generated2 = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/builders/generated/index.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _lowercase = require_lowercase();
    Object.keys(_lowercase).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _lowercase[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _lowercase[key];
        }
      });
    });
    var _uppercase = require_uppercase();
    Object.keys(_uppercase).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports && exports[key] === _uppercase[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _uppercase[key];
        }
      });
    });
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js
var require_cleanJSXElementLiteralChild = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = cleanJSXElementLiteralChild;
    var _index = require_generated2();
    var _index2 = require_lib7();
    function cleanJSXElementLiteralChild(child, args) {
      const lines = child.value.split(/\r\n|\n|\r/);
      let lastNonEmptyLine = 0;
      for (let i2 = 0; i2 < lines.length; i2++) {
        if (/[^ \t]/.exec(lines[i2])) {
          lastNonEmptyLine = i2;
        }
      }
      let str = "";
      for (let i2 = 0; i2 < lines.length; i2++) {
        const line = lines[i2];
        const isFirstLine = i2 === 0;
        const isLastLine = i2 === lines.length - 1;
        const isLastNonEmptyLine = i2 === lastNonEmptyLine;
        let trimmedLine = line.replace(/\t/g, " ");
        if (!isFirstLine) {
          trimmedLine = trimmedLine.replace(/^ +/, "");
        }
        if (!isLastLine) {
          trimmedLine = trimmedLine.replace(/ +$/, "");
        }
        if (trimmedLine) {
          if (!isLastNonEmptyLine) {
            trimmedLine += " ";
          }
          str += trimmedLine;
        }
      }
      if (str) args.push((0, _index2.inherits)((0, _index.stringLiteral)(str), child));
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/builders/react/buildChildren.js
var require_buildChildren = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/builders/react/buildChildren.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = buildChildren;
    var _index = require_generated();
    var _cleanJSXElementLiteralChild = require_cleanJSXElementLiteralChild();
    function buildChildren(node) {
      const elements = [];
      for (let i2 = 0; i2 < node.children.length; i2++) {
        let child = node.children[i2];
        if ((0, _index.isJSXText)(child)) {
          (0, _cleanJSXElementLiteralChild.default)(child, elements);
          continue;
        }
        if ((0, _index.isJSXExpressionContainer)(child)) child = child.expression;
        if ((0, _index.isJSXEmptyExpression)(child)) continue;
        elements.push(child);
      }
      return elements;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isNode.js
var require_isNode = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isNode.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isNode;
    var _index = require_definitions();
    function isNode(node) {
      return !!(node && _index.VISITOR_KEYS[node.type]);
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/asserts/assertNode.js
var require_assertNode = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/asserts/assertNode.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = assertNode;
    var _isNode = require_isNode();
    function assertNode(node) {
      if (!(0, _isNode.default)(node)) {
        var _node$type;
        const type = (_node$type = node == null ? void 0 : node.type) != null ? _node$type : JSON.stringify(node);
        throw new TypeError(`Not a valid node of type "${type}"`);
      }
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/asserts/generated/index.js
var require_generated3 = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/asserts/generated/index.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.assertAccessor = assertAccessor;
    exports.assertAnyTypeAnnotation = assertAnyTypeAnnotation;
    exports.assertArgumentPlaceholder = assertArgumentPlaceholder;
    exports.assertArrayExpression = assertArrayExpression;
    exports.assertArrayPattern = assertArrayPattern;
    exports.assertArrayTypeAnnotation = assertArrayTypeAnnotation;
    exports.assertArrowFunctionExpression = assertArrowFunctionExpression;
    exports.assertAssignmentExpression = assertAssignmentExpression;
    exports.assertAssignmentPattern = assertAssignmentPattern;
    exports.assertAwaitExpression = assertAwaitExpression;
    exports.assertBigIntLiteral = assertBigIntLiteral;
    exports.assertBinary = assertBinary;
    exports.assertBinaryExpression = assertBinaryExpression;
    exports.assertBindExpression = assertBindExpression;
    exports.assertBlock = assertBlock;
    exports.assertBlockParent = assertBlockParent;
    exports.assertBlockStatement = assertBlockStatement;
    exports.assertBooleanLiteral = assertBooleanLiteral;
    exports.assertBooleanLiteralTypeAnnotation = assertBooleanLiteralTypeAnnotation;
    exports.assertBooleanTypeAnnotation = assertBooleanTypeAnnotation;
    exports.assertBreakStatement = assertBreakStatement;
    exports.assertCallExpression = assertCallExpression;
    exports.assertCatchClause = assertCatchClause;
    exports.assertClass = assertClass;
    exports.assertClassAccessorProperty = assertClassAccessorProperty;
    exports.assertClassBody = assertClassBody;
    exports.assertClassDeclaration = assertClassDeclaration;
    exports.assertClassExpression = assertClassExpression;
    exports.assertClassImplements = assertClassImplements;
    exports.assertClassMethod = assertClassMethod;
    exports.assertClassPrivateMethod = assertClassPrivateMethod;
    exports.assertClassPrivateProperty = assertClassPrivateProperty;
    exports.assertClassProperty = assertClassProperty;
    exports.assertCompletionStatement = assertCompletionStatement;
    exports.assertConditional = assertConditional;
    exports.assertConditionalExpression = assertConditionalExpression;
    exports.assertContinueStatement = assertContinueStatement;
    exports.assertDebuggerStatement = assertDebuggerStatement;
    exports.assertDecimalLiteral = assertDecimalLiteral;
    exports.assertDeclaration = assertDeclaration;
    exports.assertDeclareClass = assertDeclareClass;
    exports.assertDeclareExportAllDeclaration = assertDeclareExportAllDeclaration;
    exports.assertDeclareExportDeclaration = assertDeclareExportDeclaration;
    exports.assertDeclareFunction = assertDeclareFunction;
    exports.assertDeclareInterface = assertDeclareInterface;
    exports.assertDeclareModule = assertDeclareModule;
    exports.assertDeclareModuleExports = assertDeclareModuleExports;
    exports.assertDeclareOpaqueType = assertDeclareOpaqueType;
    exports.assertDeclareTypeAlias = assertDeclareTypeAlias;
    exports.assertDeclareVariable = assertDeclareVariable;
    exports.assertDeclaredPredicate = assertDeclaredPredicate;
    exports.assertDecorator = assertDecorator;
    exports.assertDirective = assertDirective;
    exports.assertDirectiveLiteral = assertDirectiveLiteral;
    exports.assertDoExpression = assertDoExpression;
    exports.assertDoWhileStatement = assertDoWhileStatement;
    exports.assertEmptyStatement = assertEmptyStatement;
    exports.assertEmptyTypeAnnotation = assertEmptyTypeAnnotation;
    exports.assertEnumBody = assertEnumBody;
    exports.assertEnumBooleanBody = assertEnumBooleanBody;
    exports.assertEnumBooleanMember = assertEnumBooleanMember;
    exports.assertEnumDeclaration = assertEnumDeclaration;
    exports.assertEnumDefaultedMember = assertEnumDefaultedMember;
    exports.assertEnumMember = assertEnumMember;
    exports.assertEnumNumberBody = assertEnumNumberBody;
    exports.assertEnumNumberMember = assertEnumNumberMember;
    exports.assertEnumStringBody = assertEnumStringBody;
    exports.assertEnumStringMember = assertEnumStringMember;
    exports.assertEnumSymbolBody = assertEnumSymbolBody;
    exports.assertExistsTypeAnnotation = assertExistsTypeAnnotation;
    exports.assertExportAllDeclaration = assertExportAllDeclaration;
    exports.assertExportDeclaration = assertExportDeclaration;
    exports.assertExportDefaultDeclaration = assertExportDefaultDeclaration;
    exports.assertExportDefaultSpecifier = assertExportDefaultSpecifier;
    exports.assertExportNamedDeclaration = assertExportNamedDeclaration;
    exports.assertExportNamespaceSpecifier = assertExportNamespaceSpecifier;
    exports.assertExportSpecifier = assertExportSpecifier;
    exports.assertExpression = assertExpression;
    exports.assertExpressionStatement = assertExpressionStatement;
    exports.assertExpressionWrapper = assertExpressionWrapper;
    exports.assertFile = assertFile;
    exports.assertFlow = assertFlow;
    exports.assertFlowBaseAnnotation = assertFlowBaseAnnotation;
    exports.assertFlowDeclaration = assertFlowDeclaration;
    exports.assertFlowPredicate = assertFlowPredicate;
    exports.assertFlowType = assertFlowType;
    exports.assertFor = assertFor;
    exports.assertForInStatement = assertForInStatement;
    exports.assertForOfStatement = assertForOfStatement;
    exports.assertForStatement = assertForStatement;
    exports.assertForXStatement = assertForXStatement;
    exports.assertFunction = assertFunction;
    exports.assertFunctionDeclaration = assertFunctionDeclaration;
    exports.assertFunctionExpression = assertFunctionExpression;
    exports.assertFunctionParent = assertFunctionParent;
    exports.assertFunctionTypeAnnotation = assertFunctionTypeAnnotation;
    exports.assertFunctionTypeParam = assertFunctionTypeParam;
    exports.assertGenericTypeAnnotation = assertGenericTypeAnnotation;
    exports.assertIdentifier = assertIdentifier;
    exports.assertIfStatement = assertIfStatement;
    exports.assertImmutable = assertImmutable;
    exports.assertImport = assertImport;
    exports.assertImportAttribute = assertImportAttribute;
    exports.assertImportDeclaration = assertImportDeclaration;
    exports.assertImportDefaultSpecifier = assertImportDefaultSpecifier;
    exports.assertImportExpression = assertImportExpression;
    exports.assertImportNamespaceSpecifier = assertImportNamespaceSpecifier;
    exports.assertImportOrExportDeclaration = assertImportOrExportDeclaration;
    exports.assertImportSpecifier = assertImportSpecifier;
    exports.assertIndexedAccessType = assertIndexedAccessType;
    exports.assertInferredPredicate = assertInferredPredicate;
    exports.assertInterfaceDeclaration = assertInterfaceDeclaration;
    exports.assertInterfaceExtends = assertInterfaceExtends;
    exports.assertInterfaceTypeAnnotation = assertInterfaceTypeAnnotation;
    exports.assertInterpreterDirective = assertInterpreterDirective;
    exports.assertIntersectionTypeAnnotation = assertIntersectionTypeAnnotation;
    exports.assertJSX = assertJSX;
    exports.assertJSXAttribute = assertJSXAttribute;
    exports.assertJSXClosingElement = assertJSXClosingElement;
    exports.assertJSXClosingFragment = assertJSXClosingFragment;
    exports.assertJSXElement = assertJSXElement;
    exports.assertJSXEmptyExpression = assertJSXEmptyExpression;
    exports.assertJSXExpressionContainer = assertJSXExpressionContainer;
    exports.assertJSXFragment = assertJSXFragment;
    exports.assertJSXIdentifier = assertJSXIdentifier;
    exports.assertJSXMemberExpression = assertJSXMemberExpression;
    exports.assertJSXNamespacedName = assertJSXNamespacedName;
    exports.assertJSXOpeningElement = assertJSXOpeningElement;
    exports.assertJSXOpeningFragment = assertJSXOpeningFragment;
    exports.assertJSXSpreadAttribute = assertJSXSpreadAttribute;
    exports.assertJSXSpreadChild = assertJSXSpreadChild;
    exports.assertJSXText = assertJSXText;
    exports.assertLVal = assertLVal;
    exports.assertLabeledStatement = assertLabeledStatement;
    exports.assertLiteral = assertLiteral;
    exports.assertLogicalExpression = assertLogicalExpression;
    exports.assertLoop = assertLoop;
    exports.assertMemberExpression = assertMemberExpression;
    exports.assertMetaProperty = assertMetaProperty;
    exports.assertMethod = assertMethod;
    exports.assertMiscellaneous = assertMiscellaneous;
    exports.assertMixedTypeAnnotation = assertMixedTypeAnnotation;
    exports.assertModuleDeclaration = assertModuleDeclaration;
    exports.assertModuleExpression = assertModuleExpression;
    exports.assertModuleSpecifier = assertModuleSpecifier;
    exports.assertNewExpression = assertNewExpression;
    exports.assertNoop = assertNoop;
    exports.assertNullLiteral = assertNullLiteral;
    exports.assertNullLiteralTypeAnnotation = assertNullLiteralTypeAnnotation;
    exports.assertNullableTypeAnnotation = assertNullableTypeAnnotation;
    exports.assertNumberLiteral = assertNumberLiteral;
    exports.assertNumberLiteralTypeAnnotation = assertNumberLiteralTypeAnnotation;
    exports.assertNumberTypeAnnotation = assertNumberTypeAnnotation;
    exports.assertNumericLiteral = assertNumericLiteral;
    exports.assertObjectExpression = assertObjectExpression;
    exports.assertObjectMember = assertObjectMember;
    exports.assertObjectMethod = assertObjectMethod;
    exports.assertObjectPattern = assertObjectPattern;
    exports.assertObjectProperty = assertObjectProperty;
    exports.assertObjectTypeAnnotation = assertObjectTypeAnnotation;
    exports.assertObjectTypeCallProperty = assertObjectTypeCallProperty;
    exports.assertObjectTypeIndexer = assertObjectTypeIndexer;
    exports.assertObjectTypeInternalSlot = assertObjectTypeInternalSlot;
    exports.assertObjectTypeProperty = assertObjectTypeProperty;
    exports.assertObjectTypeSpreadProperty = assertObjectTypeSpreadProperty;
    exports.assertOpaqueType = assertOpaqueType;
    exports.assertOptionalCallExpression = assertOptionalCallExpression;
    exports.assertOptionalIndexedAccessType = assertOptionalIndexedAccessType;
    exports.assertOptionalMemberExpression = assertOptionalMemberExpression;
    exports.assertParenthesizedExpression = assertParenthesizedExpression;
    exports.assertPattern = assertPattern;
    exports.assertPatternLike = assertPatternLike;
    exports.assertPipelineBareFunction = assertPipelineBareFunction;
    exports.assertPipelinePrimaryTopicReference = assertPipelinePrimaryTopicReference;
    exports.assertPipelineTopicExpression = assertPipelineTopicExpression;
    exports.assertPlaceholder = assertPlaceholder;
    exports.assertPrivate = assertPrivate;
    exports.assertPrivateName = assertPrivateName;
    exports.assertProgram = assertProgram;
    exports.assertProperty = assertProperty;
    exports.assertPureish = assertPureish;
    exports.assertQualifiedTypeIdentifier = assertQualifiedTypeIdentifier;
    exports.assertRecordExpression = assertRecordExpression;
    exports.assertRegExpLiteral = assertRegExpLiteral;
    exports.assertRegexLiteral = assertRegexLiteral;
    exports.assertRestElement = assertRestElement;
    exports.assertRestProperty = assertRestProperty;
    exports.assertReturnStatement = assertReturnStatement;
    exports.assertScopable = assertScopable;
    exports.assertSequenceExpression = assertSequenceExpression;
    exports.assertSpreadElement = assertSpreadElement;
    exports.assertSpreadProperty = assertSpreadProperty;
    exports.assertStandardized = assertStandardized;
    exports.assertStatement = assertStatement;
    exports.assertStaticBlock = assertStaticBlock;
    exports.assertStringLiteral = assertStringLiteral;
    exports.assertStringLiteralTypeAnnotation = assertStringLiteralTypeAnnotation;
    exports.assertStringTypeAnnotation = assertStringTypeAnnotation;
    exports.assertSuper = assertSuper;
    exports.assertSwitchCase = assertSwitchCase;
    exports.assertSwitchStatement = assertSwitchStatement;
    exports.assertSymbolTypeAnnotation = assertSymbolTypeAnnotation;
    exports.assertTSAnyKeyword = assertTSAnyKeyword;
    exports.assertTSArrayType = assertTSArrayType;
    exports.assertTSAsExpression = assertTSAsExpression;
    exports.assertTSBaseType = assertTSBaseType;
    exports.assertTSBigIntKeyword = assertTSBigIntKeyword;
    exports.assertTSBooleanKeyword = assertTSBooleanKeyword;
    exports.assertTSCallSignatureDeclaration = assertTSCallSignatureDeclaration;
    exports.assertTSConditionalType = assertTSConditionalType;
    exports.assertTSConstructSignatureDeclaration = assertTSConstructSignatureDeclaration;
    exports.assertTSConstructorType = assertTSConstructorType;
    exports.assertTSDeclareFunction = assertTSDeclareFunction;
    exports.assertTSDeclareMethod = assertTSDeclareMethod;
    exports.assertTSEntityName = assertTSEntityName;
    exports.assertTSEnumBody = assertTSEnumBody;
    exports.assertTSEnumDeclaration = assertTSEnumDeclaration;
    exports.assertTSEnumMember = assertTSEnumMember;
    exports.assertTSExportAssignment = assertTSExportAssignment;
    exports.assertTSExpressionWithTypeArguments = assertTSExpressionWithTypeArguments;
    exports.assertTSExternalModuleReference = assertTSExternalModuleReference;
    exports.assertTSFunctionType = assertTSFunctionType;
    exports.assertTSImportEqualsDeclaration = assertTSImportEqualsDeclaration;
    exports.assertTSImportType = assertTSImportType;
    exports.assertTSIndexSignature = assertTSIndexSignature;
    exports.assertTSIndexedAccessType = assertTSIndexedAccessType;
    exports.assertTSInferType = assertTSInferType;
    exports.assertTSInstantiationExpression = assertTSInstantiationExpression;
    exports.assertTSInterfaceBody = assertTSInterfaceBody;
    exports.assertTSInterfaceDeclaration = assertTSInterfaceDeclaration;
    exports.assertTSIntersectionType = assertTSIntersectionType;
    exports.assertTSIntrinsicKeyword = assertTSIntrinsicKeyword;
    exports.assertTSLiteralType = assertTSLiteralType;
    exports.assertTSMappedType = assertTSMappedType;
    exports.assertTSMethodSignature = assertTSMethodSignature;
    exports.assertTSModuleBlock = assertTSModuleBlock;
    exports.assertTSModuleDeclaration = assertTSModuleDeclaration;
    exports.assertTSNamedTupleMember = assertTSNamedTupleMember;
    exports.assertTSNamespaceExportDeclaration = assertTSNamespaceExportDeclaration;
    exports.assertTSNeverKeyword = assertTSNeverKeyword;
    exports.assertTSNonNullExpression = assertTSNonNullExpression;
    exports.assertTSNullKeyword = assertTSNullKeyword;
    exports.assertTSNumberKeyword = assertTSNumberKeyword;
    exports.assertTSObjectKeyword = assertTSObjectKeyword;
    exports.assertTSOptionalType = assertTSOptionalType;
    exports.assertTSParameterProperty = assertTSParameterProperty;
    exports.assertTSParenthesizedType = assertTSParenthesizedType;
    exports.assertTSPropertySignature = assertTSPropertySignature;
    exports.assertTSQualifiedName = assertTSQualifiedName;
    exports.assertTSRestType = assertTSRestType;
    exports.assertTSSatisfiesExpression = assertTSSatisfiesExpression;
    exports.assertTSStringKeyword = assertTSStringKeyword;
    exports.assertTSSymbolKeyword = assertTSSymbolKeyword;
    exports.assertTSTemplateLiteralType = assertTSTemplateLiteralType;
    exports.assertTSThisType = assertTSThisType;
    exports.assertTSTupleType = assertTSTupleType;
    exports.assertTSType = assertTSType;
    exports.assertTSTypeAliasDeclaration = assertTSTypeAliasDeclaration;
    exports.assertTSTypeAnnotation = assertTSTypeAnnotation;
    exports.assertTSTypeAssertion = assertTSTypeAssertion;
    exports.assertTSTypeElement = assertTSTypeElement;
    exports.assertTSTypeLiteral = assertTSTypeLiteral;
    exports.assertTSTypeOperator = assertTSTypeOperator;
    exports.assertTSTypeParameter = assertTSTypeParameter;
    exports.assertTSTypeParameterDeclaration = assertTSTypeParameterDeclaration;
    exports.assertTSTypeParameterInstantiation = assertTSTypeParameterInstantiation;
    exports.assertTSTypePredicate = assertTSTypePredicate;
    exports.assertTSTypeQuery = assertTSTypeQuery;
    exports.assertTSTypeReference = assertTSTypeReference;
    exports.assertTSUndefinedKeyword = assertTSUndefinedKeyword;
    exports.assertTSUnionType = assertTSUnionType;
    exports.assertTSUnknownKeyword = assertTSUnknownKeyword;
    exports.assertTSVoidKeyword = assertTSVoidKeyword;
    exports.assertTaggedTemplateExpression = assertTaggedTemplateExpression;
    exports.assertTemplateElement = assertTemplateElement;
    exports.assertTemplateLiteral = assertTemplateLiteral;
    exports.assertTerminatorless = assertTerminatorless;
    exports.assertThisExpression = assertThisExpression;
    exports.assertThisTypeAnnotation = assertThisTypeAnnotation;
    exports.assertThrowStatement = assertThrowStatement;
    exports.assertTopicReference = assertTopicReference;
    exports.assertTryStatement = assertTryStatement;
    exports.assertTupleExpression = assertTupleExpression;
    exports.assertTupleTypeAnnotation = assertTupleTypeAnnotation;
    exports.assertTypeAlias = assertTypeAlias;
    exports.assertTypeAnnotation = assertTypeAnnotation;
    exports.assertTypeCastExpression = assertTypeCastExpression;
    exports.assertTypeParameter = assertTypeParameter;
    exports.assertTypeParameterDeclaration = assertTypeParameterDeclaration;
    exports.assertTypeParameterInstantiation = assertTypeParameterInstantiation;
    exports.assertTypeScript = assertTypeScript;
    exports.assertTypeofTypeAnnotation = assertTypeofTypeAnnotation;
    exports.assertUnaryExpression = assertUnaryExpression;
    exports.assertUnaryLike = assertUnaryLike;
    exports.assertUnionTypeAnnotation = assertUnionTypeAnnotation;
    exports.assertUpdateExpression = assertUpdateExpression;
    exports.assertUserWhitespacable = assertUserWhitespacable;
    exports.assertV8IntrinsicIdentifier = assertV8IntrinsicIdentifier;
    exports.assertVariableDeclaration = assertVariableDeclaration;
    exports.assertVariableDeclarator = assertVariableDeclarator;
    exports.assertVariance = assertVariance;
    exports.assertVoidTypeAnnotation = assertVoidTypeAnnotation;
    exports.assertWhile = assertWhile;
    exports.assertWhileStatement = assertWhileStatement;
    exports.assertWithStatement = assertWithStatement;
    exports.assertYieldExpression = assertYieldExpression;
    var _is = require_is();
    var _deprecationWarning = require_deprecationWarning();
    function assert(type, node, opts) {
      if (!(0, _is.default)(type, node, opts)) {
        throw new Error(`Expected type "${type}" with option ${JSON.stringify(opts)}, but instead got "${node.type}".`);
      }
    }
    function assertArrayExpression(node, opts) {
      assert("ArrayExpression", node, opts);
    }
    function assertAssignmentExpression(node, opts) {
      assert("AssignmentExpression", node, opts);
    }
    function assertBinaryExpression(node, opts) {
      assert("BinaryExpression", node, opts);
    }
    function assertInterpreterDirective(node, opts) {
      assert("InterpreterDirective", node, opts);
    }
    function assertDirective(node, opts) {
      assert("Directive", node, opts);
    }
    function assertDirectiveLiteral(node, opts) {
      assert("DirectiveLiteral", node, opts);
    }
    function assertBlockStatement(node, opts) {
      assert("BlockStatement", node, opts);
    }
    function assertBreakStatement(node, opts) {
      assert("BreakStatement", node, opts);
    }
    function assertCallExpression(node, opts) {
      assert("CallExpression", node, opts);
    }
    function assertCatchClause(node, opts) {
      assert("CatchClause", node, opts);
    }
    function assertConditionalExpression(node, opts) {
      assert("ConditionalExpression", node, opts);
    }
    function assertContinueStatement(node, opts) {
      assert("ContinueStatement", node, opts);
    }
    function assertDebuggerStatement(node, opts) {
      assert("DebuggerStatement", node, opts);
    }
    function assertDoWhileStatement(node, opts) {
      assert("DoWhileStatement", node, opts);
    }
    function assertEmptyStatement(node, opts) {
      assert("EmptyStatement", node, opts);
    }
    function assertExpressionStatement(node, opts) {
      assert("ExpressionStatement", node, opts);
    }
    function assertFile(node, opts) {
      assert("File", node, opts);
    }
    function assertForInStatement(node, opts) {
      assert("ForInStatement", node, opts);
    }
    function assertForStatement(node, opts) {
      assert("ForStatement", node, opts);
    }
    function assertFunctionDeclaration(node, opts) {
      assert("FunctionDeclaration", node, opts);
    }
    function assertFunctionExpression(node, opts) {
      assert("FunctionExpression", node, opts);
    }
    function assertIdentifier(node, opts) {
      assert("Identifier", node, opts);
    }
    function assertIfStatement(node, opts) {
      assert("IfStatement", node, opts);
    }
    function assertLabeledStatement(node, opts) {
      assert("LabeledStatement", node, opts);
    }
    function assertStringLiteral(node, opts) {
      assert("StringLiteral", node, opts);
    }
    function assertNumericLiteral(node, opts) {
      assert("NumericLiteral", node, opts);
    }
    function assertNullLiteral(node, opts) {
      assert("NullLiteral", node, opts);
    }
    function assertBooleanLiteral(node, opts) {
      assert("BooleanLiteral", node, opts);
    }
    function assertRegExpLiteral(node, opts) {
      assert("RegExpLiteral", node, opts);
    }
    function assertLogicalExpression(node, opts) {
      assert("LogicalExpression", node, opts);
    }
    function assertMemberExpression(node, opts) {
      assert("MemberExpression", node, opts);
    }
    function assertNewExpression(node, opts) {
      assert("NewExpression", node, opts);
    }
    function assertProgram(node, opts) {
      assert("Program", node, opts);
    }
    function assertObjectExpression(node, opts) {
      assert("ObjectExpression", node, opts);
    }
    function assertObjectMethod(node, opts) {
      assert("ObjectMethod", node, opts);
    }
    function assertObjectProperty(node, opts) {
      assert("ObjectProperty", node, opts);
    }
    function assertRestElement(node, opts) {
      assert("RestElement", node, opts);
    }
    function assertReturnStatement(node, opts) {
      assert("ReturnStatement", node, opts);
    }
    function assertSequenceExpression(node, opts) {
      assert("SequenceExpression", node, opts);
    }
    function assertParenthesizedExpression(node, opts) {
      assert("ParenthesizedExpression", node, opts);
    }
    function assertSwitchCase(node, opts) {
      assert("SwitchCase", node, opts);
    }
    function assertSwitchStatement(node, opts) {
      assert("SwitchStatement", node, opts);
    }
    function assertThisExpression(node, opts) {
      assert("ThisExpression", node, opts);
    }
    function assertThrowStatement(node, opts) {
      assert("ThrowStatement", node, opts);
    }
    function assertTryStatement(node, opts) {
      assert("TryStatement", node, opts);
    }
    function assertUnaryExpression(node, opts) {
      assert("UnaryExpression", node, opts);
    }
    function assertUpdateExpression(node, opts) {
      assert("UpdateExpression", node, opts);
    }
    function assertVariableDeclaration(node, opts) {
      assert("VariableDeclaration", node, opts);
    }
    function assertVariableDeclarator(node, opts) {
      assert("VariableDeclarator", node, opts);
    }
    function assertWhileStatement(node, opts) {
      assert("WhileStatement", node, opts);
    }
    function assertWithStatement(node, opts) {
      assert("WithStatement", node, opts);
    }
    function assertAssignmentPattern(node, opts) {
      assert("AssignmentPattern", node, opts);
    }
    function assertArrayPattern(node, opts) {
      assert("ArrayPattern", node, opts);
    }
    function assertArrowFunctionExpression(node, opts) {
      assert("ArrowFunctionExpression", node, opts);
    }
    function assertClassBody(node, opts) {
      assert("ClassBody", node, opts);
    }
    function assertClassExpression(node, opts) {
      assert("ClassExpression", node, opts);
    }
    function assertClassDeclaration(node, opts) {
      assert("ClassDeclaration", node, opts);
    }
    function assertExportAllDeclaration(node, opts) {
      assert("ExportAllDeclaration", node, opts);
    }
    function assertExportDefaultDeclaration(node, opts) {
      assert("ExportDefaultDeclaration", node, opts);
    }
    function assertExportNamedDeclaration(node, opts) {
      assert("ExportNamedDeclaration", node, opts);
    }
    function assertExportSpecifier(node, opts) {
      assert("ExportSpecifier", node, opts);
    }
    function assertForOfStatement(node, opts) {
      assert("ForOfStatement", node, opts);
    }
    function assertImportDeclaration(node, opts) {
      assert("ImportDeclaration", node, opts);
    }
    function assertImportDefaultSpecifier(node, opts) {
      assert("ImportDefaultSpecifier", node, opts);
    }
    function assertImportNamespaceSpecifier(node, opts) {
      assert("ImportNamespaceSpecifier", node, opts);
    }
    function assertImportSpecifier(node, opts) {
      assert("ImportSpecifier", node, opts);
    }
    function assertImportExpression(node, opts) {
      assert("ImportExpression", node, opts);
    }
    function assertMetaProperty(node, opts) {
      assert("MetaProperty", node, opts);
    }
    function assertClassMethod(node, opts) {
      assert("ClassMethod", node, opts);
    }
    function assertObjectPattern(node, opts) {
      assert("ObjectPattern", node, opts);
    }
    function assertSpreadElement(node, opts) {
      assert("SpreadElement", node, opts);
    }
    function assertSuper(node, opts) {
      assert("Super", node, opts);
    }
    function assertTaggedTemplateExpression(node, opts) {
      assert("TaggedTemplateExpression", node, opts);
    }
    function assertTemplateElement(node, opts) {
      assert("TemplateElement", node, opts);
    }
    function assertTemplateLiteral(node, opts) {
      assert("TemplateLiteral", node, opts);
    }
    function assertYieldExpression(node, opts) {
      assert("YieldExpression", node, opts);
    }
    function assertAwaitExpression(node, opts) {
      assert("AwaitExpression", node, opts);
    }
    function assertImport(node, opts) {
      assert("Import", node, opts);
    }
    function assertBigIntLiteral(node, opts) {
      assert("BigIntLiteral", node, opts);
    }
    function assertExportNamespaceSpecifier(node, opts) {
      assert("ExportNamespaceSpecifier", node, opts);
    }
    function assertOptionalMemberExpression(node, opts) {
      assert("OptionalMemberExpression", node, opts);
    }
    function assertOptionalCallExpression(node, opts) {
      assert("OptionalCallExpression", node, opts);
    }
    function assertClassProperty(node, opts) {
      assert("ClassProperty", node, opts);
    }
    function assertClassAccessorProperty(node, opts) {
      assert("ClassAccessorProperty", node, opts);
    }
    function assertClassPrivateProperty(node, opts) {
      assert("ClassPrivateProperty", node, opts);
    }
    function assertClassPrivateMethod(node, opts) {
      assert("ClassPrivateMethod", node, opts);
    }
    function assertPrivateName(node, opts) {
      assert("PrivateName", node, opts);
    }
    function assertStaticBlock(node, opts) {
      assert("StaticBlock", node, opts);
    }
    function assertAnyTypeAnnotation(node, opts) {
      assert("AnyTypeAnnotation", node, opts);
    }
    function assertArrayTypeAnnotation(node, opts) {
      assert("ArrayTypeAnnotation", node, opts);
    }
    function assertBooleanTypeAnnotation(node, opts) {
      assert("BooleanTypeAnnotation", node, opts);
    }
    function assertBooleanLiteralTypeAnnotation(node, opts) {
      assert("BooleanLiteralTypeAnnotation", node, opts);
    }
    function assertNullLiteralTypeAnnotation(node, opts) {
      assert("NullLiteralTypeAnnotation", node, opts);
    }
    function assertClassImplements(node, opts) {
      assert("ClassImplements", node, opts);
    }
    function assertDeclareClass(node, opts) {
      assert("DeclareClass", node, opts);
    }
    function assertDeclareFunction(node, opts) {
      assert("DeclareFunction", node, opts);
    }
    function assertDeclareInterface(node, opts) {
      assert("DeclareInterface", node, opts);
    }
    function assertDeclareModule(node, opts) {
      assert("DeclareModule", node, opts);
    }
    function assertDeclareModuleExports(node, opts) {
      assert("DeclareModuleExports", node, opts);
    }
    function assertDeclareTypeAlias(node, opts) {
      assert("DeclareTypeAlias", node, opts);
    }
    function assertDeclareOpaqueType(node, opts) {
      assert("DeclareOpaqueType", node, opts);
    }
    function assertDeclareVariable(node, opts) {
      assert("DeclareVariable", node, opts);
    }
    function assertDeclareExportDeclaration(node, opts) {
      assert("DeclareExportDeclaration", node, opts);
    }
    function assertDeclareExportAllDeclaration(node, opts) {
      assert("DeclareExportAllDeclaration", node, opts);
    }
    function assertDeclaredPredicate(node, opts) {
      assert("DeclaredPredicate", node, opts);
    }
    function assertExistsTypeAnnotation(node, opts) {
      assert("ExistsTypeAnnotation", node, opts);
    }
    function assertFunctionTypeAnnotation(node, opts) {
      assert("FunctionTypeAnnotation", node, opts);
    }
    function assertFunctionTypeParam(node, opts) {
      assert("FunctionTypeParam", node, opts);
    }
    function assertGenericTypeAnnotation(node, opts) {
      assert("GenericTypeAnnotation", node, opts);
    }
    function assertInferredPredicate(node, opts) {
      assert("InferredPredicate", node, opts);
    }
    function assertInterfaceExtends(node, opts) {
      assert("InterfaceExtends", node, opts);
    }
    function assertInterfaceDeclaration(node, opts) {
      assert("InterfaceDeclaration", node, opts);
    }
    function assertInterfaceTypeAnnotation(node, opts) {
      assert("InterfaceTypeAnnotation", node, opts);
    }
    function assertIntersectionTypeAnnotation(node, opts) {
      assert("IntersectionTypeAnnotation", node, opts);
    }
    function assertMixedTypeAnnotation(node, opts) {
      assert("MixedTypeAnnotation", node, opts);
    }
    function assertEmptyTypeAnnotation(node, opts) {
      assert("EmptyTypeAnnotation", node, opts);
    }
    function assertNullableTypeAnnotation(node, opts) {
      assert("NullableTypeAnnotation", node, opts);
    }
    function assertNumberLiteralTypeAnnotation(node, opts) {
      assert("NumberLiteralTypeAnnotation", node, opts);
    }
    function assertNumberTypeAnnotation(node, opts) {
      assert("NumberTypeAnnotation", node, opts);
    }
    function assertObjectTypeAnnotation(node, opts) {
      assert("ObjectTypeAnnotation", node, opts);
    }
    function assertObjectTypeInternalSlot(node, opts) {
      assert("ObjectTypeInternalSlot", node, opts);
    }
    function assertObjectTypeCallProperty(node, opts) {
      assert("ObjectTypeCallProperty", node, opts);
    }
    function assertObjectTypeIndexer(node, opts) {
      assert("ObjectTypeIndexer", node, opts);
    }
    function assertObjectTypeProperty(node, opts) {
      assert("ObjectTypeProperty", node, opts);
    }
    function assertObjectTypeSpreadProperty(node, opts) {
      assert("ObjectTypeSpreadProperty", node, opts);
    }
    function assertOpaqueType(node, opts) {
      assert("OpaqueType", node, opts);
    }
    function assertQualifiedTypeIdentifier(node, opts) {
      assert("QualifiedTypeIdentifier", node, opts);
    }
    function assertStringLiteralTypeAnnotation(node, opts) {
      assert("StringLiteralTypeAnnotation", node, opts);
    }
    function assertStringTypeAnnotation(node, opts) {
      assert("StringTypeAnnotation", node, opts);
    }
    function assertSymbolTypeAnnotation(node, opts) {
      assert("SymbolTypeAnnotation", node, opts);
    }
    function assertThisTypeAnnotation(node, opts) {
      assert("ThisTypeAnnotation", node, opts);
    }
    function assertTupleTypeAnnotation(node, opts) {
      assert("TupleTypeAnnotation", node, opts);
    }
    function assertTypeofTypeAnnotation(node, opts) {
      assert("TypeofTypeAnnotation", node, opts);
    }
    function assertTypeAlias(node, opts) {
      assert("TypeAlias", node, opts);
    }
    function assertTypeAnnotation(node, opts) {
      assert("TypeAnnotation", node, opts);
    }
    function assertTypeCastExpression(node, opts) {
      assert("TypeCastExpression", node, opts);
    }
    function assertTypeParameter(node, opts) {
      assert("TypeParameter", node, opts);
    }
    function assertTypeParameterDeclaration(node, opts) {
      assert("TypeParameterDeclaration", node, opts);
    }
    function assertTypeParameterInstantiation(node, opts) {
      assert("TypeParameterInstantiation", node, opts);
    }
    function assertUnionTypeAnnotation(node, opts) {
      assert("UnionTypeAnnotation", node, opts);
    }
    function assertVariance(node, opts) {
      assert("Variance", node, opts);
    }
    function assertVoidTypeAnnotation(node, opts) {
      assert("VoidTypeAnnotation", node, opts);
    }
    function assertEnumDeclaration(node, opts) {
      assert("EnumDeclaration", node, opts);
    }
    function assertEnumBooleanBody(node, opts) {
      assert("EnumBooleanBody", node, opts);
    }
    function assertEnumNumberBody(node, opts) {
      assert("EnumNumberBody", node, opts);
    }
    function assertEnumStringBody(node, opts) {
      assert("EnumStringBody", node, opts);
    }
    function assertEnumSymbolBody(node, opts) {
      assert("EnumSymbolBody", node, opts);
    }
    function assertEnumBooleanMember(node, opts) {
      assert("EnumBooleanMember", node, opts);
    }
    function assertEnumNumberMember(node, opts) {
      assert("EnumNumberMember", node, opts);
    }
    function assertEnumStringMember(node, opts) {
      assert("EnumStringMember", node, opts);
    }
    function assertEnumDefaultedMember(node, opts) {
      assert("EnumDefaultedMember", node, opts);
    }
    function assertIndexedAccessType(node, opts) {
      assert("IndexedAccessType", node, opts);
    }
    function assertOptionalIndexedAccessType(node, opts) {
      assert("OptionalIndexedAccessType", node, opts);
    }
    function assertJSXAttribute(node, opts) {
      assert("JSXAttribute", node, opts);
    }
    function assertJSXClosingElement(node, opts) {
      assert("JSXClosingElement", node, opts);
    }
    function assertJSXElement(node, opts) {
      assert("JSXElement", node, opts);
    }
    function assertJSXEmptyExpression(node, opts) {
      assert("JSXEmptyExpression", node, opts);
    }
    function assertJSXExpressionContainer(node, opts) {
      assert("JSXExpressionContainer", node, opts);
    }
    function assertJSXSpreadChild(node, opts) {
      assert("JSXSpreadChild", node, opts);
    }
    function assertJSXIdentifier(node, opts) {
      assert("JSXIdentifier", node, opts);
    }
    function assertJSXMemberExpression(node, opts) {
      assert("JSXMemberExpression", node, opts);
    }
    function assertJSXNamespacedName(node, opts) {
      assert("JSXNamespacedName", node, opts);
    }
    function assertJSXOpeningElement(node, opts) {
      assert("JSXOpeningElement", node, opts);
    }
    function assertJSXSpreadAttribute(node, opts) {
      assert("JSXSpreadAttribute", node, opts);
    }
    function assertJSXText(node, opts) {
      assert("JSXText", node, opts);
    }
    function assertJSXFragment(node, opts) {
      assert("JSXFragment", node, opts);
    }
    function assertJSXOpeningFragment(node, opts) {
      assert("JSXOpeningFragment", node, opts);
    }
    function assertJSXClosingFragment(node, opts) {
      assert("JSXClosingFragment", node, opts);
    }
    function assertNoop(node, opts) {
      assert("Noop", node, opts);
    }
    function assertPlaceholder(node, opts) {
      assert("Placeholder", node, opts);
    }
    function assertV8IntrinsicIdentifier(node, opts) {
      assert("V8IntrinsicIdentifier", node, opts);
    }
    function assertArgumentPlaceholder(node, opts) {
      assert("ArgumentPlaceholder", node, opts);
    }
    function assertBindExpression(node, opts) {
      assert("BindExpression", node, opts);
    }
    function assertImportAttribute(node, opts) {
      assert("ImportAttribute", node, opts);
    }
    function assertDecorator(node, opts) {
      assert("Decorator", node, opts);
    }
    function assertDoExpression(node, opts) {
      assert("DoExpression", node, opts);
    }
    function assertExportDefaultSpecifier(node, opts) {
      assert("ExportDefaultSpecifier", node, opts);
    }
    function assertRecordExpression(node, opts) {
      assert("RecordExpression", node, opts);
    }
    function assertTupleExpression(node, opts) {
      assert("TupleExpression", node, opts);
    }
    function assertDecimalLiteral(node, opts) {
      assert("DecimalLiteral", node, opts);
    }
    function assertModuleExpression(node, opts) {
      assert("ModuleExpression", node, opts);
    }
    function assertTopicReference(node, opts) {
      assert("TopicReference", node, opts);
    }
    function assertPipelineTopicExpression(node, opts) {
      assert("PipelineTopicExpression", node, opts);
    }
    function assertPipelineBareFunction(node, opts) {
      assert("PipelineBareFunction", node, opts);
    }
    function assertPipelinePrimaryTopicReference(node, opts) {
      assert("PipelinePrimaryTopicReference", node, opts);
    }
    function assertTSParameterProperty(node, opts) {
      assert("TSParameterProperty", node, opts);
    }
    function assertTSDeclareFunction(node, opts) {
      assert("TSDeclareFunction", node, opts);
    }
    function assertTSDeclareMethod(node, opts) {
      assert("TSDeclareMethod", node, opts);
    }
    function assertTSQualifiedName(node, opts) {
      assert("TSQualifiedName", node, opts);
    }
    function assertTSCallSignatureDeclaration(node, opts) {
      assert("TSCallSignatureDeclaration", node, opts);
    }
    function assertTSConstructSignatureDeclaration(node, opts) {
      assert("TSConstructSignatureDeclaration", node, opts);
    }
    function assertTSPropertySignature(node, opts) {
      assert("TSPropertySignature", node, opts);
    }
    function assertTSMethodSignature(node, opts) {
      assert("TSMethodSignature", node, opts);
    }
    function assertTSIndexSignature(node, opts) {
      assert("TSIndexSignature", node, opts);
    }
    function assertTSAnyKeyword(node, opts) {
      assert("TSAnyKeyword", node, opts);
    }
    function assertTSBooleanKeyword(node, opts) {
      assert("TSBooleanKeyword", node, opts);
    }
    function assertTSBigIntKeyword(node, opts) {
      assert("TSBigIntKeyword", node, opts);
    }
    function assertTSIntrinsicKeyword(node, opts) {
      assert("TSIntrinsicKeyword", node, opts);
    }
    function assertTSNeverKeyword(node, opts) {
      assert("TSNeverKeyword", node, opts);
    }
    function assertTSNullKeyword(node, opts) {
      assert("TSNullKeyword", node, opts);
    }
    function assertTSNumberKeyword(node, opts) {
      assert("TSNumberKeyword", node, opts);
    }
    function assertTSObjectKeyword(node, opts) {
      assert("TSObjectKeyword", node, opts);
    }
    function assertTSStringKeyword(node, opts) {
      assert("TSStringKeyword", node, opts);
    }
    function assertTSSymbolKeyword(node, opts) {
      assert("TSSymbolKeyword", node, opts);
    }
    function assertTSUndefinedKeyword(node, opts) {
      assert("TSUndefinedKeyword", node, opts);
    }
    function assertTSUnknownKeyword(node, opts) {
      assert("TSUnknownKeyword", node, opts);
    }
    function assertTSVoidKeyword(node, opts) {
      assert("TSVoidKeyword", node, opts);
    }
    function assertTSThisType(node, opts) {
      assert("TSThisType", node, opts);
    }
    function assertTSFunctionType(node, opts) {
      assert("TSFunctionType", node, opts);
    }
    function assertTSConstructorType(node, opts) {
      assert("TSConstructorType", node, opts);
    }
    function assertTSTypeReference(node, opts) {
      assert("TSTypeReference", node, opts);
    }
    function assertTSTypePredicate(node, opts) {
      assert("TSTypePredicate", node, opts);
    }
    function assertTSTypeQuery(node, opts) {
      assert("TSTypeQuery", node, opts);
    }
    function assertTSTypeLiteral(node, opts) {
      assert("TSTypeLiteral", node, opts);
    }
    function assertTSArrayType(node, opts) {
      assert("TSArrayType", node, opts);
    }
    function assertTSTupleType(node, opts) {
      assert("TSTupleType", node, opts);
    }
    function assertTSOptionalType(node, opts) {
      assert("TSOptionalType", node, opts);
    }
    function assertTSRestType(node, opts) {
      assert("TSRestType", node, opts);
    }
    function assertTSNamedTupleMember(node, opts) {
      assert("TSNamedTupleMember", node, opts);
    }
    function assertTSUnionType(node, opts) {
      assert("TSUnionType", node, opts);
    }
    function assertTSIntersectionType(node, opts) {
      assert("TSIntersectionType", node, opts);
    }
    function assertTSConditionalType(node, opts) {
      assert("TSConditionalType", node, opts);
    }
    function assertTSInferType(node, opts) {
      assert("TSInferType", node, opts);
    }
    function assertTSParenthesizedType(node, opts) {
      assert("TSParenthesizedType", node, opts);
    }
    function assertTSTypeOperator(node, opts) {
      assert("TSTypeOperator", node, opts);
    }
    function assertTSIndexedAccessType(node, opts) {
      assert("TSIndexedAccessType", node, opts);
    }
    function assertTSMappedType(node, opts) {
      assert("TSMappedType", node, opts);
    }
    function assertTSTemplateLiteralType(node, opts) {
      assert("TSTemplateLiteralType", node, opts);
    }
    function assertTSLiteralType(node, opts) {
      assert("TSLiteralType", node, opts);
    }
    function assertTSExpressionWithTypeArguments(node, opts) {
      assert("TSExpressionWithTypeArguments", node, opts);
    }
    function assertTSInterfaceDeclaration(node, opts) {
      assert("TSInterfaceDeclaration", node, opts);
    }
    function assertTSInterfaceBody(node, opts) {
      assert("TSInterfaceBody", node, opts);
    }
    function assertTSTypeAliasDeclaration(node, opts) {
      assert("TSTypeAliasDeclaration", node, opts);
    }
    function assertTSInstantiationExpression(node, opts) {
      assert("TSInstantiationExpression", node, opts);
    }
    function assertTSAsExpression(node, opts) {
      assert("TSAsExpression", node, opts);
    }
    function assertTSSatisfiesExpression(node, opts) {
      assert("TSSatisfiesExpression", node, opts);
    }
    function assertTSTypeAssertion(node, opts) {
      assert("TSTypeAssertion", node, opts);
    }
    function assertTSEnumBody(node, opts) {
      assert("TSEnumBody", node, opts);
    }
    function assertTSEnumDeclaration(node, opts) {
      assert("TSEnumDeclaration", node, opts);
    }
    function assertTSEnumMember(node, opts) {
      assert("TSEnumMember", node, opts);
    }
    function assertTSModuleDeclaration(node, opts) {
      assert("TSModuleDeclaration", node, opts);
    }
    function assertTSModuleBlock(node, opts) {
      assert("TSModuleBlock", node, opts);
    }
    function assertTSImportType(node, opts) {
      assert("TSImportType", node, opts);
    }
    function assertTSImportEqualsDeclaration(node, opts) {
      assert("TSImportEqualsDeclaration", node, opts);
    }
    function assertTSExternalModuleReference(node, opts) {
      assert("TSExternalModuleReference", node, opts);
    }
    function assertTSNonNullExpression(node, opts) {
      assert("TSNonNullExpression", node, opts);
    }
    function assertTSExportAssignment(node, opts) {
      assert("TSExportAssignment", node, opts);
    }
    function assertTSNamespaceExportDeclaration(node, opts) {
      assert("TSNamespaceExportDeclaration", node, opts);
    }
    function assertTSTypeAnnotation(node, opts) {
      assert("TSTypeAnnotation", node, opts);
    }
    function assertTSTypeParameterInstantiation(node, opts) {
      assert("TSTypeParameterInstantiation", node, opts);
    }
    function assertTSTypeParameterDeclaration(node, opts) {
      assert("TSTypeParameterDeclaration", node, opts);
    }
    function assertTSTypeParameter(node, opts) {
      assert("TSTypeParameter", node, opts);
    }
    function assertStandardized(node, opts) {
      assert("Standardized", node, opts);
    }
    function assertExpression(node, opts) {
      assert("Expression", node, opts);
    }
    function assertBinary(node, opts) {
      assert("Binary", node, opts);
    }
    function assertScopable(node, opts) {
      assert("Scopable", node, opts);
    }
    function assertBlockParent(node, opts) {
      assert("BlockParent", node, opts);
    }
    function assertBlock(node, opts) {
      assert("Block", node, opts);
    }
    function assertStatement(node, opts) {
      assert("Statement", node, opts);
    }
    function assertTerminatorless(node, opts) {
      assert("Terminatorless", node, opts);
    }
    function assertCompletionStatement(node, opts) {
      assert("CompletionStatement", node, opts);
    }
    function assertConditional(node, opts) {
      assert("Conditional", node, opts);
    }
    function assertLoop(node, opts) {
      assert("Loop", node, opts);
    }
    function assertWhile(node, opts) {
      assert("While", node, opts);
    }
    function assertExpressionWrapper(node, opts) {
      assert("ExpressionWrapper", node, opts);
    }
    function assertFor(node, opts) {
      assert("For", node, opts);
    }
    function assertForXStatement(node, opts) {
      assert("ForXStatement", node, opts);
    }
    function assertFunction(node, opts) {
      assert("Function", node, opts);
    }
    function assertFunctionParent(node, opts) {
      assert("FunctionParent", node, opts);
    }
    function assertPureish(node, opts) {
      assert("Pureish", node, opts);
    }
    function assertDeclaration(node, opts) {
      assert("Declaration", node, opts);
    }
    function assertPatternLike(node, opts) {
      assert("PatternLike", node, opts);
    }
    function assertLVal(node, opts) {
      assert("LVal", node, opts);
    }
    function assertTSEntityName(node, opts) {
      assert("TSEntityName", node, opts);
    }
    function assertLiteral(node, opts) {
      assert("Literal", node, opts);
    }
    function assertImmutable(node, opts) {
      assert("Immutable", node, opts);
    }
    function assertUserWhitespacable(node, opts) {
      assert("UserWhitespacable", node, opts);
    }
    function assertMethod(node, opts) {
      assert("Method", node, opts);
    }
    function assertObjectMember(node, opts) {
      assert("ObjectMember", node, opts);
    }
    function assertProperty(node, opts) {
      assert("Property", node, opts);
    }
    function assertUnaryLike(node, opts) {
      assert("UnaryLike", node, opts);
    }
    function assertPattern(node, opts) {
      assert("Pattern", node, opts);
    }
    function assertClass(node, opts) {
      assert("Class", node, opts);
    }
    function assertImportOrExportDeclaration(node, opts) {
      assert("ImportOrExportDeclaration", node, opts);
    }
    function assertExportDeclaration(node, opts) {
      assert("ExportDeclaration", node, opts);
    }
    function assertModuleSpecifier(node, opts) {
      assert("ModuleSpecifier", node, opts);
    }
    function assertAccessor(node, opts) {
      assert("Accessor", node, opts);
    }
    function assertPrivate(node, opts) {
      assert("Private", node, opts);
    }
    function assertFlow(node, opts) {
      assert("Flow", node, opts);
    }
    function assertFlowType(node, opts) {
      assert("FlowType", node, opts);
    }
    function assertFlowBaseAnnotation(node, opts) {
      assert("FlowBaseAnnotation", node, opts);
    }
    function assertFlowDeclaration(node, opts) {
      assert("FlowDeclaration", node, opts);
    }
    function assertFlowPredicate(node, opts) {
      assert("FlowPredicate", node, opts);
    }
    function assertEnumBody(node, opts) {
      assert("EnumBody", node, opts);
    }
    function assertEnumMember(node, opts) {
      assert("EnumMember", node, opts);
    }
    function assertJSX(node, opts) {
      assert("JSX", node, opts);
    }
    function assertMiscellaneous(node, opts) {
      assert("Miscellaneous", node, opts);
    }
    function assertTypeScript(node, opts) {
      assert("TypeScript", node, opts);
    }
    function assertTSTypeElement(node, opts) {
      assert("TSTypeElement", node, opts);
    }
    function assertTSType(node, opts) {
      assert("TSType", node, opts);
    }
    function assertTSBaseType(node, opts) {
      assert("TSBaseType", node, opts);
    }
    function assertNumberLiteral(node, opts) {
      (0, _deprecationWarning.default)("assertNumberLiteral", "assertNumericLiteral");
      assert("NumberLiteral", node, opts);
    }
    function assertRegexLiteral(node, opts) {
      (0, _deprecationWarning.default)("assertRegexLiteral", "assertRegExpLiteral");
      assert("RegexLiteral", node, opts);
    }
    function assertRestProperty(node, opts) {
      (0, _deprecationWarning.default)("assertRestProperty", "assertRestElement");
      assert("RestProperty", node, opts);
    }
    function assertSpreadProperty(node, opts) {
      (0, _deprecationWarning.default)("assertSpreadProperty", "assertSpreadElement");
      assert("SpreadProperty", node, opts);
    }
    function assertModuleDeclaration(node, opts) {
      (0, _deprecationWarning.default)("assertModuleDeclaration", "assertImportOrExportDeclaration");
      assert("ModuleDeclaration", node, opts);
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js
var require_createTypeAnnotationBasedOnTypeof = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _index = require_generated2();
    var _default = exports.default = createTypeAnnotationBasedOnTypeof;
    function createTypeAnnotationBasedOnTypeof(type) {
      switch (type) {
        case "string":
          return (0, _index.stringTypeAnnotation)();
        case "number":
          return (0, _index.numberTypeAnnotation)();
        case "undefined":
          return (0, _index.voidTypeAnnotation)();
        case "boolean":
          return (0, _index.booleanTypeAnnotation)();
        case "function":
          return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Function"));
        case "object":
          return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Object"));
        case "symbol":
          return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Symbol"));
        case "bigint":
          return (0, _index.anyTypeAnnotation)();
      }
      throw new Error("Invalid typeof value: " + type);
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js
var require_removeTypeDuplicates = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = removeTypeDuplicates;
    var _index = require_generated();
    function getQualifiedName(node) {
      return (0, _index.isIdentifier)(node) ? node.name : `${node.id.name}.${getQualifiedName(node.qualification)}`;
    }
    function removeTypeDuplicates(nodesIn) {
      const nodes = Array.from(nodesIn);
      const generics = /* @__PURE__ */ new Map();
      const bases = /* @__PURE__ */ new Map();
      const typeGroups = /* @__PURE__ */ new Set();
      const types = [];
      for (let i2 = 0; i2 < nodes.length; i2++) {
        const node = nodes[i2];
        if (!node) continue;
        if (types.includes(node)) {
          continue;
        }
        if ((0, _index.isAnyTypeAnnotation)(node)) {
          return [node];
        }
        if ((0, _index.isFlowBaseAnnotation)(node)) {
          bases.set(node.type, node);
          continue;
        }
        if ((0, _index.isUnionTypeAnnotation)(node)) {
          if (!typeGroups.has(node.types)) {
            nodes.push(...node.types);
            typeGroups.add(node.types);
          }
          continue;
        }
        if ((0, _index.isGenericTypeAnnotation)(node)) {
          const name = getQualifiedName(node.id);
          if (generics.has(name)) {
            let existing = generics.get(name);
            if (existing.typeParameters) {
              if (node.typeParameters) {
                existing.typeParameters.params.push(...node.typeParameters.params);
                existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params);
              }
            } else {
              existing = node.typeParameters;
            }
          } else {
            generics.set(name, node);
          }
          continue;
        }
        types.push(node);
      }
      for (const [, baseType] of bases) {
        types.push(baseType);
      }
      for (const [, genericName] of generics) {
        types.push(genericName);
      }
      return types;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js
var require_createFlowUnionType = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = createFlowUnionType;
    var _index = require_generated2();
    var _removeTypeDuplicates = require_removeTypeDuplicates();
    function createFlowUnionType(types) {
      const flattened = (0, _removeTypeDuplicates.default)(types);
      if (flattened.length === 1) {
        return flattened[0];
      } else {
        return (0, _index.unionTypeAnnotation)(flattened);
      }
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js
var require_removeTypeDuplicates2 = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = removeTypeDuplicates;
    var _index = require_generated();
    function getQualifiedName(node) {
      return (0, _index.isIdentifier)(node) ? node.name : (0, _index.isThisExpression)(node) ? "this" : `${node.right.name}.${getQualifiedName(node.left)}`;
    }
    function removeTypeDuplicates(nodesIn) {
      const nodes = Array.from(nodesIn);
      const generics = /* @__PURE__ */ new Map();
      const bases = /* @__PURE__ */ new Map();
      const typeGroups = /* @__PURE__ */ new Set();
      const types = [];
      for (let i2 = 0; i2 < nodes.length; i2++) {
        const node = nodes[i2];
        if (!node) continue;
        if (types.includes(node)) {
          continue;
        }
        if ((0, _index.isTSAnyKeyword)(node)) {
          return [node];
        }
        if ((0, _index.isTSBaseType)(node)) {
          bases.set(node.type, node);
          continue;
        }
        if ((0, _index.isTSUnionType)(node)) {
          if (!typeGroups.has(node.types)) {
            nodes.push(...node.types);
            typeGroups.add(node.types);
          }
          continue;
        }
        const typeArgumentsKey = "typeParameters";
        if ((0, _index.isTSTypeReference)(node) && node[typeArgumentsKey]) {
          const typeArguments = node[typeArgumentsKey];
          const name = getQualifiedName(node.typeName);
          if (generics.has(name)) {
            let existing = generics.get(name);
            const existingTypeArguments = existing[typeArgumentsKey];
            if (existingTypeArguments) {
              existingTypeArguments.params.push(...typeArguments.params);
              existingTypeArguments.params = removeTypeDuplicates(existingTypeArguments.params);
            } else {
              existing = typeArguments;
            }
          } else {
            generics.set(name, node);
          }
          continue;
        }
        types.push(node);
      }
      for (const [, baseType] of bases) {
        types.push(baseType);
      }
      for (const [, genericName] of generics) {
        types.push(genericName);
      }
      return types;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js
var require_createTSUnionType = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = createTSUnionType;
    var _index = require_generated2();
    var _removeTypeDuplicates = require_removeTypeDuplicates2();
    var _index2 = require_generated();
    function createTSUnionType(typeAnnotations) {
      const types = typeAnnotations.map((type) => {
        return (0, _index2.isTSTypeAnnotation)(type) ? type.typeAnnotation : type;
      });
      const flattened = (0, _removeTypeDuplicates.default)(types);
      if (flattened.length === 1) {
        return flattened[0];
      } else {
        return (0, _index.tsUnionType)(flattened);
      }
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/builders/productions.js
var require_productions = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/builders/productions.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.buildUndefinedNode = buildUndefinedNode;
    var _index = require_generated2();
    function buildUndefinedNode() {
      return (0, _index.unaryExpression)("void", (0, _index.numericLiteral)(0), true);
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/clone/cloneNode.js
var require_cloneNode = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/clone/cloneNode.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = cloneNode2;
    var _index = require_definitions();
    var _index2 = require_generated();
    var {
      hasOwn
    } = {
      hasOwn: Function.call.bind(Object.prototype.hasOwnProperty)
    };
    function cloneIfNode(obj, deep, withoutLoc, commentsCache) {
      if (obj && typeof obj.type === "string") {
        return cloneNodeInternal(obj, deep, withoutLoc, commentsCache);
      }
      return obj;
    }
    function cloneIfNodeOrArray(obj, deep, withoutLoc, commentsCache) {
      if (Array.isArray(obj)) {
        return obj.map((node) => cloneIfNode(node, deep, withoutLoc, commentsCache));
      }
      return cloneIfNode(obj, deep, withoutLoc, commentsCache);
    }
    function cloneNode2(node, deep = true, withoutLoc = false) {
      return cloneNodeInternal(node, deep, withoutLoc, /* @__PURE__ */ new Map());
    }
    function cloneNodeInternal(node, deep = true, withoutLoc = false, commentsCache) {
      if (!node) return node;
      const {
        type
      } = node;
      const newNode = {
        type: node.type
      };
      if ((0, _index2.isIdentifier)(node)) {
        newNode.name = node.name;
        if (hasOwn(node, "optional") && typeof node.optional === "boolean") {
          newNode.optional = node.optional;
        }
        if (hasOwn(node, "typeAnnotation")) {
          newNode.typeAnnotation = deep ? cloneIfNodeOrArray(node.typeAnnotation, true, withoutLoc, commentsCache) : node.typeAnnotation;
        }
        if (hasOwn(node, "decorators")) {
          newNode.decorators = deep ? cloneIfNodeOrArray(node.decorators, true, withoutLoc, commentsCache) : node.decorators;
        }
      } else if (!hasOwn(_index.NODE_FIELDS, type)) {
        throw new Error(`Unknown node type: "${type}"`);
      } else {
        for (const field of Object.keys(_index.NODE_FIELDS[type])) {
          if (hasOwn(node, field)) {
            if (deep) {
              newNode[field] = (0, _index2.isFile)(node) && field === "comments" ? maybeCloneComments(node.comments, deep, withoutLoc, commentsCache) : cloneIfNodeOrArray(node[field], true, withoutLoc, commentsCache);
            } else {
              newNode[field] = node[field];
            }
          }
        }
      }
      if (hasOwn(node, "loc")) {
        if (withoutLoc) {
          newNode.loc = null;
        } else {
          newNode.loc = node.loc;
        }
      }
      if (hasOwn(node, "leadingComments")) {
        newNode.leadingComments = maybeCloneComments(node.leadingComments, deep, withoutLoc, commentsCache);
      }
      if (hasOwn(node, "innerComments")) {
        newNode.innerComments = maybeCloneComments(node.innerComments, deep, withoutLoc, commentsCache);
      }
      if (hasOwn(node, "trailingComments")) {
        newNode.trailingComments = maybeCloneComments(node.trailingComments, deep, withoutLoc, commentsCache);
      }
      if (hasOwn(node, "extra")) {
        newNode.extra = Object.assign({}, node.extra);
      }
      return newNode;
    }
    function maybeCloneComments(comments, deep, withoutLoc, commentsCache) {
      if (!comments || !deep) {
        return comments;
      }
      return comments.map((comment) => {
        const cache = commentsCache.get(comment);
        if (cache) return cache;
        const {
          type,
          value: value2,
          loc
        } = comment;
        const ret = {
          type,
          value: value2,
          loc
        };
        if (withoutLoc) {
          ret.loc = null;
        }
        commentsCache.set(comment, ret);
        return ret;
      });
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/clone/clone.js
var require_clone = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/clone/clone.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = clone;
    var _cloneNode = require_cloneNode();
    function clone(node) {
      return (0, _cloneNode.default)(node, false);
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/clone/cloneDeep.js
var require_cloneDeep = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/clone/cloneDeep.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = cloneDeep;
    var _cloneNode = require_cloneNode();
    function cloneDeep(node) {
      return (0, _cloneNode.default)(node);
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js
var require_cloneDeepWithoutLoc = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = cloneDeepWithoutLoc;
    var _cloneNode = require_cloneNode();
    function cloneDeepWithoutLoc(node) {
      return (0, _cloneNode.default)(node, true, true);
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/clone/cloneWithoutLoc.js
var require_cloneWithoutLoc = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/clone/cloneWithoutLoc.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = cloneWithoutLoc;
    var _cloneNode = require_cloneNode();
    function cloneWithoutLoc(node) {
      return (0, _cloneNode.default)(node, false, true);
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/comments/addComments.js
var require_addComments = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/comments/addComments.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = addComments;
    function addComments(node, type, comments) {
      if (!comments || !node) return node;
      const key = `${type}Comments`;
      if (node[key]) {
        if (type === "leading") {
          node[key] = comments.concat(node[key]);
        } else {
          node[key].push(...comments);
        }
      } else {
        node[key] = comments;
      }
      return node;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/comments/addComment.js
var require_addComment = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/comments/addComment.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = addComment;
    var _addComments = require_addComments();
    function addComment(node, type, content, line) {
      return (0, _addComments.default)(node, type, [{
        type: line ? "CommentLine" : "CommentBlock",
        value: content
      }]);
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/utils/inherit.js
var require_inherit = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/utils/inherit.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = inherit;
    function inherit(key, child, parent) {
      if (child && parent) {
        child[key] = Array.from(new Set([].concat(child[key], parent[key]).filter(Boolean)));
      }
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/comments/inheritInnerComments.js
var require_inheritInnerComments = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/comments/inheritInnerComments.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = inheritInnerComments;
    var _inherit = require_inherit();
    function inheritInnerComments(child, parent) {
      (0, _inherit.default)("innerComments", child, parent);
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/comments/inheritLeadingComments.js
var require_inheritLeadingComments = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/comments/inheritLeadingComments.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = inheritLeadingComments;
    var _inherit = require_inherit();
    function inheritLeadingComments(child, parent) {
      (0, _inherit.default)("leadingComments", child, parent);
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/comments/inheritTrailingComments.js
var require_inheritTrailingComments = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/comments/inheritTrailingComments.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = inheritTrailingComments;
    var _inherit = require_inherit();
    function inheritTrailingComments(child, parent) {
      (0, _inherit.default)("trailingComments", child, parent);
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/comments/inheritsComments.js
var require_inheritsComments = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/comments/inheritsComments.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = inheritsComments;
    var _inheritTrailingComments = require_inheritTrailingComments();
    var _inheritLeadingComments = require_inheritLeadingComments();
    var _inheritInnerComments = require_inheritInnerComments();
    function inheritsComments(child, parent) {
      (0, _inheritTrailingComments.default)(child, parent);
      (0, _inheritLeadingComments.default)(child, parent);
      (0, _inheritInnerComments.default)(child, parent);
      return child;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/comments/removeComments.js
var require_removeComments = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/comments/removeComments.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = removeComments;
    var _index = require_constants();
    function removeComments(node) {
      _index.COMMENT_KEYS.forEach((key) => {
        node[key] = null;
      });
      return node;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/constants/generated/index.js
var require_generated4 = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/constants/generated/index.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WHILE_TYPES = exports.USERWHITESPACABLE_TYPES = exports.UNARYLIKE_TYPES = exports.TYPESCRIPT_TYPES = exports.TSTYPE_TYPES = exports.TSTYPEELEMENT_TYPES = exports.TSENTITYNAME_TYPES = exports.TSBASETYPE_TYPES = exports.TERMINATORLESS_TYPES = exports.STATEMENT_TYPES = exports.STANDARDIZED_TYPES = exports.SCOPABLE_TYPES = exports.PUREISH_TYPES = exports.PROPERTY_TYPES = exports.PRIVATE_TYPES = exports.PATTERN_TYPES = exports.PATTERNLIKE_TYPES = exports.OBJECTMEMBER_TYPES = exports.MODULESPECIFIER_TYPES = exports.MODULEDECLARATION_TYPES = exports.MISCELLANEOUS_TYPES = exports.METHOD_TYPES = exports.LVAL_TYPES = exports.LOOP_TYPES = exports.LITERAL_TYPES = exports.JSX_TYPES = exports.IMPORTOREXPORTDECLARATION_TYPES = exports.IMMUTABLE_TYPES = exports.FUNCTION_TYPES = exports.FUNCTIONPARENT_TYPES = exports.FOR_TYPES = exports.FORXSTATEMENT_TYPES = exports.FLOW_TYPES = exports.FLOWTYPE_TYPES = exports.FLOWPREDICATE_TYPES = exports.FLOWDECLARATION_TYPES = exports.FLOWBASEANNOTATION_TYPES = exports.EXPRESSION_TYPES = exports.EXPRESSIONWRAPPER_TYPES = exports.EXPORTDECLARATION_TYPES = exports.ENUMMEMBER_TYPES = exports.ENUMBODY_TYPES = exports.DECLARATION_TYPES = exports.CONDITIONAL_TYPES = exports.COMPLETIONSTATEMENT_TYPES = exports.CLASS_TYPES = exports.BLOCK_TYPES = exports.BLOCKPARENT_TYPES = exports.BINARY_TYPES = exports.ACCESSOR_TYPES = void 0;
    var _index = require_definitions();
    var STANDARDIZED_TYPES = exports.STANDARDIZED_TYPES = _index.FLIPPED_ALIAS_KEYS["Standardized"];
    var EXPRESSION_TYPES = exports.EXPRESSION_TYPES = _index.FLIPPED_ALIAS_KEYS["Expression"];
    var BINARY_TYPES = exports.BINARY_TYPES = _index.FLIPPED_ALIAS_KEYS["Binary"];
    var SCOPABLE_TYPES = exports.SCOPABLE_TYPES = _index.FLIPPED_ALIAS_KEYS["Scopable"];
    var BLOCKPARENT_TYPES = exports.BLOCKPARENT_TYPES = _index.FLIPPED_ALIAS_KEYS["BlockParent"];
    var BLOCK_TYPES = exports.BLOCK_TYPES = _index.FLIPPED_ALIAS_KEYS["Block"];
    var STATEMENT_TYPES = exports.STATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS["Statement"];
    var TERMINATORLESS_TYPES = exports.TERMINATORLESS_TYPES = _index.FLIPPED_ALIAS_KEYS["Terminatorless"];
    var COMPLETIONSTATEMENT_TYPES = exports.COMPLETIONSTATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS["CompletionStatement"];
    var CONDITIONAL_TYPES = exports.CONDITIONAL_TYPES = _index.FLIPPED_ALIAS_KEYS["Conditional"];
    var LOOP_TYPES = exports.LOOP_TYPES = _index.FLIPPED_ALIAS_KEYS["Loop"];
    var WHILE_TYPES = exports.WHILE_TYPES = _index.FLIPPED_ALIAS_KEYS["While"];
    var EXPRESSIONWRAPPER_TYPES = exports.EXPRESSIONWRAPPER_TYPES = _index.FLIPPED_ALIAS_KEYS["ExpressionWrapper"];
    var FOR_TYPES = exports.FOR_TYPES = _index.FLIPPED_ALIAS_KEYS["For"];
    var FORXSTATEMENT_TYPES = exports.FORXSTATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS["ForXStatement"];
    var FUNCTION_TYPES = exports.FUNCTION_TYPES = _index.FLIPPED_ALIAS_KEYS["Function"];
    var FUNCTIONPARENT_TYPES = exports.FUNCTIONPARENT_TYPES = _index.FLIPPED_ALIAS_KEYS["FunctionParent"];
    var PUREISH_TYPES = exports.PUREISH_TYPES = _index.FLIPPED_ALIAS_KEYS["Pureish"];
    var DECLARATION_TYPES = exports.DECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS["Declaration"];
    var PATTERNLIKE_TYPES = exports.PATTERNLIKE_TYPES = _index.FLIPPED_ALIAS_KEYS["PatternLike"];
    var LVAL_TYPES = exports.LVAL_TYPES = _index.FLIPPED_ALIAS_KEYS["LVal"];
    var TSENTITYNAME_TYPES = exports.TSENTITYNAME_TYPES = _index.FLIPPED_ALIAS_KEYS["TSEntityName"];
    var LITERAL_TYPES = exports.LITERAL_TYPES = _index.FLIPPED_ALIAS_KEYS["Literal"];
    var IMMUTABLE_TYPES = exports.IMMUTABLE_TYPES = _index.FLIPPED_ALIAS_KEYS["Immutable"];
    var USERWHITESPACABLE_TYPES = exports.USERWHITESPACABLE_TYPES = _index.FLIPPED_ALIAS_KEYS["UserWhitespacable"];
    var METHOD_TYPES = exports.METHOD_TYPES = _index.FLIPPED_ALIAS_KEYS["Method"];
    var OBJECTMEMBER_TYPES = exports.OBJECTMEMBER_TYPES = _index.FLIPPED_ALIAS_KEYS["ObjectMember"];
    var PROPERTY_TYPES = exports.PROPERTY_TYPES = _index.FLIPPED_ALIAS_KEYS["Property"];
    var UNARYLIKE_TYPES = exports.UNARYLIKE_TYPES = _index.FLIPPED_ALIAS_KEYS["UnaryLike"];
    var PATTERN_TYPES = exports.PATTERN_TYPES = _index.FLIPPED_ALIAS_KEYS["Pattern"];
    var CLASS_TYPES = exports.CLASS_TYPES = _index.FLIPPED_ALIAS_KEYS["Class"];
    var IMPORTOREXPORTDECLARATION_TYPES = exports.IMPORTOREXPORTDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS["ImportOrExportDeclaration"];
    var EXPORTDECLARATION_TYPES = exports.EXPORTDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS["ExportDeclaration"];
    var MODULESPECIFIER_TYPES = exports.MODULESPECIFIER_TYPES = _index.FLIPPED_ALIAS_KEYS["ModuleSpecifier"];
    var ACCESSOR_TYPES = exports.ACCESSOR_TYPES = _index.FLIPPED_ALIAS_KEYS["Accessor"];
    var PRIVATE_TYPES = exports.PRIVATE_TYPES = _index.FLIPPED_ALIAS_KEYS["Private"];
    var FLOW_TYPES = exports.FLOW_TYPES = _index.FLIPPED_ALIAS_KEYS["Flow"];
    var FLOWTYPE_TYPES = exports.FLOWTYPE_TYPES = _index.FLIPPED_ALIAS_KEYS["FlowType"];
    var FLOWBASEANNOTATION_TYPES = exports.FLOWBASEANNOTATION_TYPES = _index.FLIPPED_ALIAS_KEYS["FlowBaseAnnotation"];
    var FLOWDECLARATION_TYPES = exports.FLOWDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS["FlowDeclaration"];
    var FLOWPREDICATE_TYPES = exports.FLOWPREDICATE_TYPES = _index.FLIPPED_ALIAS_KEYS["FlowPredicate"];
    var ENUMBODY_TYPES = exports.ENUMBODY_TYPES = _index.FLIPPED_ALIAS_KEYS["EnumBody"];
    var ENUMMEMBER_TYPES = exports.ENUMMEMBER_TYPES = _index.FLIPPED_ALIAS_KEYS["EnumMember"];
    var JSX_TYPES = exports.JSX_TYPES = _index.FLIPPED_ALIAS_KEYS["JSX"];
    var MISCELLANEOUS_TYPES = exports.MISCELLANEOUS_TYPES = _index.FLIPPED_ALIAS_KEYS["Miscellaneous"];
    var TYPESCRIPT_TYPES = exports.TYPESCRIPT_TYPES = _index.FLIPPED_ALIAS_KEYS["TypeScript"];
    var TSTYPEELEMENT_TYPES = exports.TSTYPEELEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS["TSTypeElement"];
    var TSTYPE_TYPES = exports.TSTYPE_TYPES = _index.FLIPPED_ALIAS_KEYS["TSType"];
    var TSBASETYPE_TYPES = exports.TSBASETYPE_TYPES = _index.FLIPPED_ALIAS_KEYS["TSBaseType"];
    var MODULEDECLARATION_TYPES = exports.MODULEDECLARATION_TYPES = IMPORTOREXPORTDECLARATION_TYPES;
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/converters/toBlock.js
var require_toBlock = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/converters/toBlock.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = toBlock;
    var _index = require_generated();
    var _index2 = require_generated2();
    function toBlock(node, parent) {
      if ((0, _index.isBlockStatement)(node)) {
        return node;
      }
      let blockNodes = [];
      if ((0, _index.isEmptyStatement)(node)) {
        blockNodes = [];
      } else {
        if (!(0, _index.isStatement)(node)) {
          if ((0, _index.isFunction)(parent)) {
            node = (0, _index2.returnStatement)(node);
          } else {
            node = (0, _index2.expressionStatement)(node);
          }
        }
        blockNodes = [node];
      }
      return (0, _index2.blockStatement)(blockNodes);
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/converters/ensureBlock.js
var require_ensureBlock = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/converters/ensureBlock.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = ensureBlock;
    var _toBlock = require_toBlock();
    function ensureBlock(node, key = "body") {
      const result = (0, _toBlock.default)(node[key], node);
      node[key] = result;
      return result;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/converters/toIdentifier.js
var require_toIdentifier = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/converters/toIdentifier.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = toIdentifier;
    var _isValidIdentifier = require_isValidIdentifier();
    var _helperValidatorIdentifier = require_lib5();
    function toIdentifier(input) {
      input = input + "";
      let name = "";
      for (const c4 of input) {
        name += (0, _helperValidatorIdentifier.isIdentifierChar)(c4.codePointAt(0)) ? c4 : "-";
      }
      name = name.replace(/^[-0-9]+/, "");
      name = name.replace(/[-\s]+(.)?/g, function(match, c4) {
        return c4 ? c4.toUpperCase() : "";
      });
      if (!(0, _isValidIdentifier.default)(name)) {
        name = `_${name}`;
      }
      return name || "_";
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/converters/toBindingIdentifierName.js
var require_toBindingIdentifierName = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/converters/toBindingIdentifierName.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = toBindingIdentifierName;
    var _toIdentifier = require_toIdentifier();
    function toBindingIdentifierName(name) {
      name = (0, _toIdentifier.default)(name);
      if (name === "eval" || name === "arguments") name = "_" + name;
      return name;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/converters/toComputedKey.js
var require_toComputedKey = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/converters/toComputedKey.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = toComputedKey;
    var _index = require_generated();
    var _index2 = require_generated2();
    function toComputedKey(node, key = node.key || node.property) {
      if (!node.computed && (0, _index.isIdentifier)(key)) key = (0, _index2.stringLiteral)(key.name);
      return key;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/converters/toExpression.js
var require_toExpression = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/converters/toExpression.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _index = require_generated();
    var _default = exports.default = toExpression;
    function toExpression(node) {
      if ((0, _index.isExpressionStatement)(node)) {
        node = node.expression;
      }
      if ((0, _index.isExpression)(node)) {
        return node;
      }
      if ((0, _index.isClass)(node)) {
        node.type = "ClassExpression";
      } else if ((0, _index.isFunction)(node)) {
        node.type = "FunctionExpression";
      }
      if (!(0, _index.isExpression)(node)) {
        throw new Error(`cannot turn ${node.type} to an expression`);
      }
      return node;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/traverse/traverseFast.js
var require_traverseFast = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/traverse/traverseFast.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = traverseFast;
    var _index = require_definitions();
    function traverseFast(node, enter, opts) {
      if (!node) return;
      const keys = _index.VISITOR_KEYS[node.type];
      if (!keys) return;
      opts = opts || {};
      enter(node, opts);
      for (const key of keys) {
        const subNode = node[key];
        if (Array.isArray(subNode)) {
          for (const node2 of subNode) {
            traverseFast(node2, enter, opts);
          }
        } else {
          traverseFast(subNode, enter, opts);
        }
      }
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/modifications/removeProperties.js
var require_removeProperties = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/modifications/removeProperties.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = removeProperties;
    var _index = require_constants();
    var CLEAR_KEYS = ["tokens", "start", "end", "loc", "raw", "rawValue"];
    var CLEAR_KEYS_PLUS_COMMENTS = [..._index.COMMENT_KEYS, "comments", ...CLEAR_KEYS];
    function removeProperties(node, opts = {}) {
      const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;
      for (const key of map) {
        if (node[key] != null) node[key] = void 0;
      }
      for (const key of Object.keys(node)) {
        if (key[0] === "_" && node[key] != null) node[key] = void 0;
      }
      const symbols = Object.getOwnPropertySymbols(node);
      for (const sym of symbols) {
        node[sym] = null;
      }
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js
var require_removePropertiesDeep = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = removePropertiesDeep;
    var _traverseFast = require_traverseFast();
    var _removeProperties = require_removeProperties();
    function removePropertiesDeep(tree, opts) {
      (0, _traverseFast.default)(tree, _removeProperties.default, opts);
      return tree;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/converters/toKeyAlias.js
var require_toKeyAlias = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/converters/toKeyAlias.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = toKeyAlias;
    var _index = require_generated();
    var _cloneNode = require_cloneNode();
    var _removePropertiesDeep = require_removePropertiesDeep();
    function toKeyAlias(node, key = node.key) {
      let alias;
      if (node.kind === "method") {
        return toKeyAlias.increment() + "";
      } else if ((0, _index.isIdentifier)(key)) {
        alias = key.name;
      } else if ((0, _index.isStringLiteral)(key)) {
        alias = JSON.stringify(key.value);
      } else {
        alias = JSON.stringify((0, _removePropertiesDeep.default)((0, _cloneNode.default)(key)));
      }
      if (node.computed) {
        alias = `[${alias}]`;
      }
      if (node.static) {
        alias = `static:${alias}`;
      }
      return alias;
    }
    toKeyAlias.uid = 0;
    toKeyAlias.increment = function() {
      if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {
        return toKeyAlias.uid = 0;
      } else {
        return toKeyAlias.uid++;
      }
    };
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/converters/toStatement.js
var require_toStatement = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/converters/toStatement.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _index = require_generated();
    var _index2 = require_generated2();
    var _default = exports.default = toStatement;
    function toStatement(node, ignore) {
      if ((0, _index.isStatement)(node)) {
        return node;
      }
      let mustHaveId = false;
      let newType;
      if ((0, _index.isClass)(node)) {
        mustHaveId = true;
        newType = "ClassDeclaration";
      } else if ((0, _index.isFunction)(node)) {
        mustHaveId = true;
        newType = "FunctionDeclaration";
      } else if ((0, _index.isAssignmentExpression)(node)) {
        return (0, _index2.expressionStatement)(node);
      }
      if (mustHaveId && !node.id) {
        newType = false;
      }
      if (!newType) {
        if (ignore) {
          return false;
        } else {
          throw new Error(`cannot turn ${node.type} to a statement`);
        }
      }
      node.type = newType;
      return node;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/converters/valueToNode.js
var require_valueToNode = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/converters/valueToNode.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _isValidIdentifier = require_isValidIdentifier();
    var _index = require_generated2();
    var _default = exports.default = valueToNode2;
    var objectToString3 = Function.call.bind(Object.prototype.toString);
    function isRegExp(value2) {
      return objectToString3(value2) === "[object RegExp]";
    }
    function isPlainObject2(value2) {
      if (typeof value2 !== "object" || value2 === null || Object.prototype.toString.call(value2) !== "[object Object]") {
        return false;
      }
      const proto = Object.getPrototypeOf(value2);
      return proto === null || Object.getPrototypeOf(proto) === null;
    }
    function valueToNode2(value2) {
      if (value2 === void 0) {
        return (0, _index.identifier)("undefined");
      }
      if (value2 === true || value2 === false) {
        return (0, _index.booleanLiteral)(value2);
      }
      if (value2 === null) {
        return (0, _index.nullLiteral)();
      }
      if (typeof value2 === "string") {
        return (0, _index.stringLiteral)(value2);
      }
      if (typeof value2 === "number") {
        let result;
        if (Number.isFinite(value2)) {
          result = (0, _index.numericLiteral)(Math.abs(value2));
        } else {
          let numerator;
          if (Number.isNaN(value2)) {
            numerator = (0, _index.numericLiteral)(0);
          } else {
            numerator = (0, _index.numericLiteral)(1);
          }
          result = (0, _index.binaryExpression)("/", numerator, (0, _index.numericLiteral)(0));
        }
        if (value2 < 0 || Object.is(value2, -0)) {
          result = (0, _index.unaryExpression)("-", result);
        }
        return result;
      }
      if (isRegExp(value2)) {
        const pattern = value2.source;
        const flags = /\/([a-z]*)$/.exec(value2.toString())[1];
        return (0, _index.regExpLiteral)(pattern, flags);
      }
      if (Array.isArray(value2)) {
        return (0, _index.arrayExpression)(value2.map(valueToNode2));
      }
      if (isPlainObject2(value2)) {
        const props = [];
        for (const key of Object.keys(value2)) {
          let nodeKey;
          if ((0, _isValidIdentifier.default)(key)) {
            nodeKey = (0, _index.identifier)(key);
          } else {
            nodeKey = (0, _index.stringLiteral)(key);
          }
          props.push((0, _index.objectProperty)(nodeKey, valueToNode2(value2[key])));
        }
        return (0, _index.objectExpression)(props);
      }
      throw new Error("don't know how to turn this value into a node");
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/modifications/appendToMemberExpression.js
var require_appendToMemberExpression = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/modifications/appendToMemberExpression.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = appendToMemberExpression;
    var _index = require_generated2();
    function appendToMemberExpression(member, append, computed = false) {
      member.object = (0, _index.memberExpression)(member.object, member.property, member.computed);
      member.property = append;
      member.computed = !!computed;
      return member;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/modifications/inherits.js
var require_inherits = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/modifications/inherits.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = inherits;
    var _index = require_constants();
    var _inheritsComments = require_inheritsComments();
    function inherits(child, parent) {
      if (!child || !parent) return child;
      for (const key of _index.INHERIT_KEYS.optional) {
        if (child[key] == null) {
          child[key] = parent[key];
        }
      }
      for (const key of Object.keys(parent)) {
        if (key[0] === "_" && key !== "__clone") {
          child[key] = parent[key];
        }
      }
      for (const key of _index.INHERIT_KEYS.force) {
        child[key] = parent[key];
      }
      (0, _inheritsComments.default)(child, parent);
      return child;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/modifications/prependToMemberExpression.js
var require_prependToMemberExpression = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/modifications/prependToMemberExpression.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = prependToMemberExpression;
    var _index = require_generated2();
    var _index2 = require_lib7();
    function prependToMemberExpression(member, prepend) {
      if ((0, _index2.isSuper)(member.object)) {
        throw new Error("Cannot prepend node to super property access (`super.foo`).");
      }
      member.object = (0, _index.memberExpression)(prepend, member.object);
      return member;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/retrievers/getAssignmentIdentifiers.js
var require_getAssignmentIdentifiers = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/retrievers/getAssignmentIdentifiers.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = getAssignmentIdentifiers;
    function getAssignmentIdentifiers(node) {
      const search = [].concat(node);
      const ids = /* @__PURE__ */ Object.create(null);
      while (search.length) {
        const id = search.pop();
        if (!id) continue;
        switch (id.type) {
          case "ArrayPattern":
            search.push(...id.elements);
            break;
          case "AssignmentExpression":
          case "AssignmentPattern":
          case "ForInStatement":
          case "ForOfStatement":
            search.push(id.left);
            break;
          case "ObjectPattern":
            search.push(...id.properties);
            break;
          case "ObjectProperty":
            search.push(id.value);
            break;
          case "RestElement":
          case "UpdateExpression":
            search.push(id.argument);
            break;
          case "UnaryExpression":
            if (id.operator === "delete") {
              search.push(id.argument);
            }
            break;
          case "Identifier":
            ids[id.name] = id;
            break;
          default:
            break;
        }
      }
      return ids;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js
var require_getBindingIdentifiers = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = getBindingIdentifiers;
    var _index = require_generated();
    function getBindingIdentifiers(node, duplicates, outerOnly, newBindingsOnly) {
      const search = [].concat(node);
      const ids = /* @__PURE__ */ Object.create(null);
      while (search.length) {
        const id = search.shift();
        if (!id) continue;
        if (newBindingsOnly && ((0, _index.isAssignmentExpression)(id) || (0, _index.isUnaryExpression)(id) || (0, _index.isUpdateExpression)(id))) {
          continue;
        }
        if ((0, _index.isIdentifier)(id)) {
          if (duplicates) {
            const _ids = ids[id.name] = ids[id.name] || [];
            _ids.push(id);
          } else {
            ids[id.name] = id;
          }
          continue;
        }
        if ((0, _index.isExportDeclaration)(id) && !(0, _index.isExportAllDeclaration)(id)) {
          if ((0, _index.isDeclaration)(id.declaration)) {
            search.push(id.declaration);
          }
          continue;
        }
        if (outerOnly) {
          if ((0, _index.isFunctionDeclaration)(id)) {
            search.push(id.id);
            continue;
          }
          if ((0, _index.isFunctionExpression)(id)) {
            continue;
          }
        }
        const keys2 = getBindingIdentifiers.keys[id.type];
        if (keys2) {
          for (let i2 = 0; i2 < keys2.length; i2++) {
            const key = keys2[i2];
            const nodes = id[key];
            if (nodes) {
              if (Array.isArray(nodes)) {
                search.push(...nodes);
              } else {
                search.push(nodes);
              }
            }
          }
        }
      }
      return ids;
    }
    var keys = {
      DeclareClass: ["id"],
      DeclareFunction: ["id"],
      DeclareModule: ["id"],
      DeclareVariable: ["id"],
      DeclareInterface: ["id"],
      DeclareTypeAlias: ["id"],
      DeclareOpaqueType: ["id"],
      InterfaceDeclaration: ["id"],
      TypeAlias: ["id"],
      OpaqueType: ["id"],
      CatchClause: ["param"],
      LabeledStatement: ["label"],
      UnaryExpression: ["argument"],
      AssignmentExpression: ["left"],
      ImportSpecifier: ["local"],
      ImportNamespaceSpecifier: ["local"],
      ImportDefaultSpecifier: ["local"],
      ImportDeclaration: ["specifiers"],
      TSImportEqualsDeclaration: ["id"],
      ExportSpecifier: ["exported"],
      ExportNamespaceSpecifier: ["exported"],
      ExportDefaultSpecifier: ["exported"],
      FunctionDeclaration: ["id", "params"],
      FunctionExpression: ["id", "params"],
      ArrowFunctionExpression: ["params"],
      ObjectMethod: ["params"],
      ClassMethod: ["params"],
      ClassPrivateMethod: ["params"],
      ForInStatement: ["left"],
      ForOfStatement: ["left"],
      ClassDeclaration: ["id"],
      ClassExpression: ["id"],
      RestElement: ["argument"],
      UpdateExpression: ["argument"],
      ObjectProperty: ["value"],
      AssignmentPattern: ["left"],
      ArrayPattern: ["elements"],
      ObjectPattern: ["properties"],
      VariableDeclaration: ["declarations"],
      VariableDeclarator: ["id"]
    };
    getBindingIdentifiers.keys = keys;
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js
var require_getOuterBindingIdentifiers = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _getBindingIdentifiers = require_getBindingIdentifiers();
    var _default = exports.default = getOuterBindingIdentifiers;
    function getOuterBindingIdentifiers(node, duplicates) {
      return (0, _getBindingIdentifiers.default)(node, duplicates, true);
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/retrievers/getFunctionName.js
var require_getFunctionName = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/retrievers/getFunctionName.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = getFunctionName;
    var _index = require_generated();
    function getNameFromLiteralId(id) {
      if ((0, _index.isNullLiteral)(id)) {
        return "null";
      }
      if ((0, _index.isRegExpLiteral)(id)) {
        return `/${id.pattern}/${id.flags}`;
      }
      if ((0, _index.isTemplateLiteral)(id)) {
        return id.quasis.map((quasi) => quasi.value.raw).join("");
      }
      if (id.value !== void 0) {
        return String(id.value);
      }
      return null;
    }
    function getObjectMemberKey(node) {
      if (!node.computed || (0, _index.isLiteral)(node.key)) {
        return node.key;
      }
    }
    function getFunctionName(node, parent) {
      if ("id" in node && node.id) {
        return {
          name: node.id.name,
          originalNode: node.id
        };
      }
      let prefix = "";
      let id;
      if ((0, _index.isObjectProperty)(parent, {
        value: node
      })) {
        id = getObjectMemberKey(parent);
      } else if ((0, _index.isObjectMethod)(node) || (0, _index.isClassMethod)(node)) {
        id = getObjectMemberKey(node);
        if (node.kind === "get") prefix = "get ";
        else if (node.kind === "set") prefix = "set ";
      } else if ((0, _index.isVariableDeclarator)(parent, {
        init: node
      })) {
        id = parent.id;
      } else if ((0, _index.isAssignmentExpression)(parent, {
        operator: "=",
        right: node
      })) {
        id = parent.left;
      }
      if (!id) return null;
      const name = (0, _index.isLiteral)(id) ? getNameFromLiteralId(id) : (0, _index.isIdentifier)(id) ? id.name : (0, _index.isPrivateName)(id) ? id.id.name : null;
      if (name == null) return null;
      return {
        name: prefix + name,
        originalNode: id
      };
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/traverse/traverse.js
var require_traverse = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/traverse/traverse.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = traverse;
    var _index = require_definitions();
    function traverse(node, handlers, state) {
      if (typeof handlers === "function") {
        handlers = {
          enter: handlers
        };
      }
      const {
        enter,
        exit
      } = handlers;
      traverseSimpleImpl(node, enter, exit, state, []);
    }
    function traverseSimpleImpl(node, enter, exit, state, ancestors) {
      const keys = _index.VISITOR_KEYS[node.type];
      if (!keys) return;
      if (enter) enter(node, ancestors, state);
      for (const key of keys) {
        const subNode = node[key];
        if (Array.isArray(subNode)) {
          for (let i2 = 0; i2 < subNode.length; i2++) {
            const child = subNode[i2];
            if (!child) continue;
            ancestors.push({
              node,
              key,
              index: i2
            });
            traverseSimpleImpl(child, enter, exit, state, ancestors);
            ancestors.pop();
          }
        } else if (subNode) {
          ancestors.push({
            node,
            key
          });
          traverseSimpleImpl(subNode, enter, exit, state, ancestors);
          ancestors.pop();
        }
      }
      if (exit) exit(node, ancestors, state);
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isBinding.js
var require_isBinding = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isBinding.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isBinding;
    var _getBindingIdentifiers = require_getBindingIdentifiers();
    function isBinding(node, parent, grandparent) {
      if (grandparent && node.type === "Identifier" && parent.type === "ObjectProperty" && grandparent.type === "ObjectExpression") {
        return false;
      }
      const keys = _getBindingIdentifiers.default.keys[parent.type];
      if (keys) {
        for (let i2 = 0; i2 < keys.length; i2++) {
          const key = keys[i2];
          const val = parent[key];
          if (Array.isArray(val)) {
            if (val.includes(node)) return true;
          } else {
            if (val === node) return true;
          }
        }
      }
      return false;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isLet.js
var require_isLet = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isLet.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isLet;
    var _index = require_generated();
    var _index2 = require_constants();
    function isLet(node) {
      return (0, _index.isVariableDeclaration)(node) && (node.kind !== "var" || node[_index2.BLOCK_SCOPED_SYMBOL]);
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isBlockScoped.js
var require_isBlockScoped = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isBlockScoped.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isBlockScoped;
    var _index = require_generated();
    var _isLet = require_isLet();
    function isBlockScoped(node) {
      return (0, _index.isFunctionDeclaration)(node) || (0, _index.isClassDeclaration)(node) || (0, _isLet.default)(node);
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isImmutable.js
var require_isImmutable = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isImmutable.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isImmutable;
    var _isType = require_isType();
    var _index = require_generated();
    function isImmutable(node) {
      if ((0, _isType.default)(node.type, "Immutable")) return true;
      if ((0, _index.isIdentifier)(node)) {
        if (node.name === "undefined") {
          return true;
        } else {
          return false;
        }
      }
      return false;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isNodesEquivalent.js
var require_isNodesEquivalent = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isNodesEquivalent.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isNodesEquivalent;
    var _index = require_definitions();
    function isNodesEquivalent(a2, b2) {
      if (typeof a2 !== "object" || typeof b2 !== "object" || a2 == null || b2 == null) {
        return a2 === b2;
      }
      if (a2.type !== b2.type) {
        return false;
      }
      const fields = Object.keys(_index.NODE_FIELDS[a2.type] || a2.type);
      const visitorKeys = _index.VISITOR_KEYS[a2.type];
      for (const field of fields) {
        const val_a = a2[field];
        const val_b = b2[field];
        if (typeof val_a !== typeof val_b) {
          return false;
        }
        if (val_a == null && val_b == null) {
          continue;
        } else if (val_a == null || val_b == null) {
          return false;
        }
        if (Array.isArray(val_a)) {
          if (!Array.isArray(val_b)) {
            return false;
          }
          if (val_a.length !== val_b.length) {
            return false;
          }
          for (let i2 = 0; i2 < val_a.length; i2++) {
            if (!isNodesEquivalent(val_a[i2], val_b[i2])) {
              return false;
            }
          }
          continue;
        }
        if (typeof val_a === "object" && !(visitorKeys != null && visitorKeys.includes(field))) {
          for (const key of Object.keys(val_a)) {
            if (val_a[key] !== val_b[key]) {
              return false;
            }
          }
          continue;
        }
        if (!isNodesEquivalent(val_a, val_b)) {
          return false;
        }
      }
      return true;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isReferenced.js
var require_isReferenced = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isReferenced.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isReferenced;
    function isReferenced(node, parent, grandparent) {
      switch (parent.type) {
        case "MemberExpression":
        case "OptionalMemberExpression":
          if (parent.property === node) {
            return !!parent.computed;
          }
          return parent.object === node;
        case "JSXMemberExpression":
          return parent.object === node;
        case "VariableDeclarator":
          return parent.init === node;
        case "ArrowFunctionExpression":
          return parent.body === node;
        case "PrivateName":
          return false;
        case "ClassMethod":
        case "ClassPrivateMethod":
        case "ObjectMethod":
          if (parent.key === node) {
            return !!parent.computed;
          }
          return false;
        case "ObjectProperty":
          if (parent.key === node) {
            return !!parent.computed;
          }
          return !grandparent || grandparent.type !== "ObjectPattern";
        case "ClassProperty":
        case "ClassAccessorProperty":
          if (parent.key === node) {
            return !!parent.computed;
          }
          return true;
        case "ClassPrivateProperty":
          return parent.key !== node;
        case "ClassDeclaration":
        case "ClassExpression":
          return parent.superClass === node;
        case "AssignmentExpression":
          return parent.right === node;
        case "AssignmentPattern":
          return parent.right === node;
        case "LabeledStatement":
          return false;
        case "CatchClause":
          return false;
        case "RestElement":
          return false;
        case "BreakStatement":
        case "ContinueStatement":
          return false;
        case "FunctionDeclaration":
        case "FunctionExpression":
          return false;
        case "ExportNamespaceSpecifier":
        case "ExportDefaultSpecifier":
          return false;
        case "ExportSpecifier":
          if (grandparent != null && grandparent.source) {
            return false;
          }
          return parent.local === node;
        case "ImportDefaultSpecifier":
        case "ImportNamespaceSpecifier":
        case "ImportSpecifier":
          return false;
        case "ImportAttribute":
          return false;
        case "JSXAttribute":
          return false;
        case "ObjectPattern":
        case "ArrayPattern":
          return false;
        case "MetaProperty":
          return false;
        case "ObjectTypeProperty":
          return parent.key !== node;
        case "TSEnumMember":
          return parent.id !== node;
        case "TSPropertySignature":
          if (parent.key === node) {
            return !!parent.computed;
          }
          return true;
      }
      return true;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isScope.js
var require_isScope = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isScope.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isScope;
    var _index = require_generated();
    function isScope(node, parent) {
      if ((0, _index.isBlockStatement)(node) && ((0, _index.isFunction)(parent) || (0, _index.isCatchClause)(parent))) {
        return false;
      }
      if ((0, _index.isPattern)(node) && ((0, _index.isFunction)(parent) || (0, _index.isCatchClause)(parent))) {
        return true;
      }
      return (0, _index.isScopable)(node);
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isSpecifierDefault.js
var require_isSpecifierDefault = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isSpecifierDefault.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isSpecifierDefault;
    var _index = require_generated();
    function isSpecifierDefault(specifier) {
      return (0, _index.isImportDefaultSpecifier)(specifier) || (0, _index.isIdentifier)(specifier.imported || specifier.exported, {
        name: "default"
      });
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isValidES3Identifier.js
var require_isValidES3Identifier = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isValidES3Identifier.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isValidES3Identifier;
    var _isValidIdentifier = require_isValidIdentifier();
    var RESERVED_WORDS_ES3_ONLY = /* @__PURE__ */ new Set(["abstract", "boolean", "byte", "char", "double", "enum", "final", "float", "goto", "implements", "int", "interface", "long", "native", "package", "private", "protected", "public", "short", "static", "synchronized", "throws", "transient", "volatile"]);
    function isValidES3Identifier(name) {
      return (0, _isValidIdentifier.default)(name) && !RESERVED_WORDS_ES3_ONLY.has(name);
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isVar.js
var require_isVar = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/validators/isVar.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isVar;
    var _index = require_generated();
    var _index2 = require_constants();
    function isVar(node) {
      return (0, _index.isVariableDeclaration)(node, {
        kind: "var"
      }) && !node[_index2.BLOCK_SCOPED_SYMBOL];
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js
var require_gatherSequenceExpressions = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = gatherSequenceExpressions;
    var _getBindingIdentifiers = require_getBindingIdentifiers();
    var _index = require_generated();
    var _index2 = require_generated2();
    var _productions = require_productions();
    var _cloneNode = require_cloneNode();
    function gatherSequenceExpressions(nodes, declars) {
      const exprs = [];
      let ensureLastUndefined = true;
      for (const node of nodes) {
        if (!(0, _index.isEmptyStatement)(node)) {
          ensureLastUndefined = false;
        }
        if ((0, _index.isExpression)(node)) {
          exprs.push(node);
        } else if ((0, _index.isExpressionStatement)(node)) {
          exprs.push(node.expression);
        } else if ((0, _index.isVariableDeclaration)(node)) {
          if (node.kind !== "var") return;
          for (const declar of node.declarations) {
            const bindings = (0, _getBindingIdentifiers.default)(declar);
            for (const key of Object.keys(bindings)) {
              declars.push({
                kind: node.kind,
                id: (0, _cloneNode.default)(bindings[key])
              });
            }
            if (declar.init) {
              exprs.push((0, _index2.assignmentExpression)("=", declar.id, declar.init));
            }
          }
          ensureLastUndefined = true;
        } else if ((0, _index.isIfStatement)(node)) {
          const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], declars) : (0, _productions.buildUndefinedNode)();
          const alternate = node.alternate ? gatherSequenceExpressions([node.alternate], declars) : (0, _productions.buildUndefinedNode)();
          if (!consequent || !alternate) return;
          exprs.push((0, _index2.conditionalExpression)(node.test, consequent, alternate));
        } else if ((0, _index.isBlockStatement)(node)) {
          const body = gatherSequenceExpressions(node.body, declars);
          if (!body) return;
          exprs.push(body);
        } else if ((0, _index.isEmptyStatement)(node)) {
          if (nodes.indexOf(node) === 0) {
            ensureLastUndefined = true;
          }
        } else {
          return;
        }
      }
      if (ensureLastUndefined) {
        exprs.push((0, _productions.buildUndefinedNode)());
      }
      if (exprs.length === 1) {
        return exprs[0];
      } else {
        return (0, _index2.sequenceExpression)(exprs);
      }
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/converters/toSequenceExpression.js
var require_toSequenceExpression = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/converters/toSequenceExpression.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = toSequenceExpression;
    var _gatherSequenceExpressions = require_gatherSequenceExpressions();
    function toSequenceExpression(nodes, scope) {
      if (!(nodes != null && nodes.length)) return;
      const declars = [];
      const result = (0, _gatherSequenceExpressions.default)(nodes, declars);
      if (!result) return;
      for (const declar of declars) {
        scope.push(declar);
      }
      return result;
    }
  }
});

// ../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/index.js
var require_lib7 = __commonJS({
  "../../.yarn/cache/@babel-types-npm-7.26.9-ddb6db0c78-999c56269b.zip/node_modules/@babel/types/lib/index.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {
      react: true,
      assertNode: true,
      createTypeAnnotationBasedOnTypeof: true,
      createUnionTypeAnnotation: true,
      createFlowUnionType: true,
      createTSUnionType: true,
      cloneNode: true,
      clone: true,
      cloneDeep: true,
      cloneDeepWithoutLoc: true,
      cloneWithoutLoc: true,
      addComment: true,
      addComments: true,
      inheritInnerComments: true,
      inheritLeadingComments: true,
      inheritsComments: true,
      inheritTrailingComments: true,
      removeComments: true,
      ensureBlock: true,
      toBindingIdentifierName: true,
      toBlock: true,
      toComputedKey: true,
      toExpression: true,
      toIdentifier: true,
      toKeyAlias: true,
      toStatement: true,
      valueToNode: true,
      appendToMemberExpression: true,
      inherits: true,
      prependToMemberExpression: true,
      removeProperties: true,
      removePropertiesDeep: true,
      removeTypeDuplicates: true,
      getAssignmentIdentifiers: true,
      getBindingIdentifiers: true,
      getOuterBindingIdentifiers: true,
      getFunctionName: true,
      traverse: true,
      traverseFast: true,
      shallowEqual: true,
      is: true,
      isBinding: true,
      isBlockScoped: true,
      isImmutable: true,
      isLet: true,
      isNode: true,
      isNodesEquivalent: true,
      isPlaceholderType: true,
      isReferenced: true,
      isScope: true,
      isSpecifierDefault: true,
      isType: true,
      isValidES3Identifier: true,
      isValidIdentifier: true,
      isVar: true,
      matchesPattern: true,
      validate: true,
      buildMatchMemberExpression: true,
      __internal__deprecationWarning: true
    };
    Object.defineProperty(exports, "__internal__deprecationWarning", {
      enumerable: true,
      get: function() {
        return _deprecationWarning.default;
      }
    });
    Object.defineProperty(exports, "addComment", {
      enumerable: true,
      get: function() {
        return _addComment.default;
      }
    });
    Object.defineProperty(exports, "addComments", {
      enumerable: true,
      get: function() {
        return _addComments.default;
      }
    });
    Object.defineProperty(exports, "appendToMemberExpression", {
      enumerable: true,
      get: function() {
        return _appendToMemberExpression.default;
      }
    });
    Object.defineProperty(exports, "assertNode", {
      enumerable: true,
      get: function() {
        return _assertNode.default;
      }
    });
    Object.defineProperty(exports, "buildMatchMemberExpression", {
      enumerable: true,
      get: function() {
        return _buildMatchMemberExpression.default;
      }
    });
    Object.defineProperty(exports, "clone", {
      enumerable: true,
      get: function() {
        return _clone.default;
      }
    });
    Object.defineProperty(exports, "cloneDeep", {
      enumerable: true,
      get: function() {
        return _cloneDeep.default;
      }
    });
    Object.defineProperty(exports, "cloneDeepWithoutLoc", {
      enumerable: true,
      get: function() {
        return _cloneDeepWithoutLoc.default;
      }
    });
    Object.defineProperty(exports, "cloneNode", {
      enumerable: true,
      get: function() {
        return _cloneNode.default;
      }
    });
    Object.defineProperty(exports, "cloneWithoutLoc", {
      enumerable: true,
      get: function() {
        return _cloneWithoutLoc.default;
      }
    });
    Object.defineProperty(exports, "createFlowUnionType", {
      enumerable: true,
      get: function() {
        return _createFlowUnionType.default;
      }
    });
    Object.defineProperty(exports, "createTSUnionType", {
      enumerable: true,
      get: function() {
        return _createTSUnionType.default;
      }
    });
    Object.defineProperty(exports, "createTypeAnnotationBasedOnTypeof", {
      enumerable: true,
      get: function() {
        return _createTypeAnnotationBasedOnTypeof.default;
      }
    });
    Object.defineProperty(exports, "createUnionTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _createFlowUnionType.default;
      }
    });
    Object.defineProperty(exports, "ensureBlock", {
      enumerable: true,
      get: function() {
        return _ensureBlock.default;
      }
    });
    Object.defineProperty(exports, "getAssignmentIdentifiers", {
      enumerable: true,
      get: function() {
        return _getAssignmentIdentifiers.default;
      }
    });
    Object.defineProperty(exports, "getBindingIdentifiers", {
      enumerable: true,
      get: function() {
        return _getBindingIdentifiers.default;
      }
    });
    Object.defineProperty(exports, "getFunctionName", {
      enumerable: true,
      get: function() {
        return _getFunctionName.default;
      }
    });
    Object.defineProperty(exports, "getOuterBindingIdentifiers", {
      enumerable: true,
      get: function() {
        return _getOuterBindingIdentifiers.default;
      }
    });
    Object.defineProperty(exports, "inheritInnerComments", {
      enumerable: true,
      get: function() {
        return _inheritInnerComments.default;
      }
    });
    Object.defineProperty(exports, "inheritLeadingComments", {
      enumerable: true,
      get: function() {
        return _inheritLeadingComments.default;
      }
    });
    Object.defineProperty(exports, "inheritTrailingComments", {
      enumerable: true,
      get: function() {
        return _inheritTrailingComments.default;
      }
    });
    Object.defineProperty(exports, "inherits", {
      enumerable: true,
      get: function() {
        return _inherits.default;
      }
    });
    Object.defineProperty(exports, "inheritsComments", {
      enumerable: true,
      get: function() {
        return _inheritsComments.default;
      }
    });
    Object.defineProperty(exports, "is", {
      enumerable: true,
      get: function() {
        return _is.default;
      }
    });
    Object.defineProperty(exports, "isBinding", {
      enumerable: true,
      get: function() {
        return _isBinding.default;
      }
    });
    Object.defineProperty(exports, "isBlockScoped", {
      enumerable: true,
      get: function() {
        return _isBlockScoped.default;
      }
    });
    Object.defineProperty(exports, "isImmutable", {
      enumerable: true,
      get: function() {
        return _isImmutable.default;
      }
    });
    Object.defineProperty(exports, "isLet", {
      enumerable: true,
      get: function() {
        return _isLet.default;
      }
    });
    Object.defineProperty(exports, "isNode", {
      enumerable: true,
      get: function() {
        return _isNode.default;
      }
    });
    Object.defineProperty(exports, "isNodesEquivalent", {
      enumerable: true,
      get: function() {
        return _isNodesEquivalent.default;
      }
    });
    Object.defineProperty(exports, "isPlaceholderType", {
      enumerable: true,
      get: function() {
        return _isPlaceholderType.default;
      }
    });
    Object.defineProperty(exports, "isReferenced", {
      enumerable: true,
      get: function() {
        return _isReferenced.default;
      }
    });
    Object.defineProperty(exports, "isScope", {
      enumerable: true,
      get: function() {
        return _isScope.default;
      }
    });
    Object.defineProperty(exports, "isSpecifierDefault", {
      enumerable: true,
      get: function() {
        return _isSpecifierDefault.default;
      }
    });
    Object.defineProperty(exports, "isType", {
      enumerable: true,
      get: function() {
        return _isType.default;
      }
    });
    Object.defineProperty(exports, "isValidES3Identifier", {
      enumerable: true,
      get: function() {
        return _isValidES3Identifier.default;
      }
    });
    Object.defineProperty(exports, "isValidIdentifier", {
      enumerable: true,
      get: function() {
        return _isValidIdentifier.default;
      }
    });
    Object.defineProperty(exports, "isVar", {
      enumerable: true,
      get: function() {
        return _isVar.default;
      }
    });
    Object.defineProperty(exports, "matchesPattern", {
      enumerable: true,
      get: function() {
        return _matchesPattern.default;
      }
    });
    Object.defineProperty(exports, "prependToMemberExpression", {
      enumerable: true,
      get: function() {
        return _prependToMemberExpression.default;
      }
    });
    exports.react = void 0;
    Object.defineProperty(exports, "removeComments", {
      enumerable: true,
      get: function() {
        return _removeComments.default;
      }
    });
    Object.defineProperty(exports, "removeProperties", {
      enumerable: true,
      get: function() {
        return _removeProperties.default;
      }
    });
    Object.defineProperty(exports, "removePropertiesDeep", {
      enumerable: true,
      get: function() {
        return _removePropertiesDeep.default;
      }
    });
    Object.defineProperty(exports, "removeTypeDuplicates", {
      enumerable: true,
      get: function() {
        return _removeTypeDuplicates.default;
      }
    });
    Object.defineProperty(exports, "shallowEqual", {
      enumerable: true,
      get: function() {
        return _shallowEqual.default;
      }
    });
    Object.defineProperty(exports, "toBindingIdentifierName", {
      enumerable: true,
      get: function() {
        return _toBindingIdentifierName.default;
      }
    });
    Object.defineProperty(exports, "toBlock", {
      enumerable: true,
      get: function() {
        return _toBlock.default;
      }
    });
    Object.defineProperty(exports, "toComputedKey", {
      enumerable: true,
      get: function() {
        return _toComputedKey.default;
      }
    });
    Object.defineProperty(exports, "toExpression", {
      enumerable: true,
      get: function() {
        return _toExpression.default;
      }
    });
    Object.defineProperty(exports, "toIdentifier", {
      enumerable: true,
      get: function() {
        return _toIdentifier.default;
      }
    });
    Object.defineProperty(exports, "toKeyAlias", {
      enumerable: true,
      get: function() {
        return _toKeyAlias.default;
      }
    });
    Object.defineProperty(exports, "toStatement", {
      enumerable: true,
      get: function() {
        return _toStatement.default;
      }
    });
    Object.defineProperty(exports, "traverse", {
      enumerable: true,
      get: function() {
        return _traverse.default;
      }
    });
    Object.defineProperty(exports, "traverseFast", {
      enumerable: true,
      get: function() {
        return _traverseFast.default;
      }
    });
    Object.defineProperty(exports, "validate", {
      enumerable: true,
      get: function() {
        return _validate.default;
      }
    });
    Object.defineProperty(exports, "valueToNode", {
      enumerable: true,
      get: function() {
        return _valueToNode.default;
      }
    });
    var _isReactComponent = require_isReactComponent();
    var _isCompatTag = require_isCompatTag();
    var _buildChildren = require_buildChildren();
    var _assertNode = require_assertNode();
    var _index = require_generated3();
    Object.keys(_index).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _index[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index[key];
        }
      });
    });
    var _createTypeAnnotationBasedOnTypeof = require_createTypeAnnotationBasedOnTypeof();
    var _createFlowUnionType = require_createFlowUnionType();
    var _createTSUnionType = require_createTSUnionType();
    var _productions = require_productions();
    Object.keys(_productions).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _productions[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _productions[key];
        }
      });
    });
    var _index2 = require_generated2();
    Object.keys(_index2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _index2[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index2[key];
        }
      });
    });
    var _cloneNode = require_cloneNode();
    var _clone = require_clone();
    var _cloneDeep = require_cloneDeep();
    var _cloneDeepWithoutLoc = require_cloneDeepWithoutLoc();
    var _cloneWithoutLoc = require_cloneWithoutLoc();
    var _addComment = require_addComment();
    var _addComments = require_addComments();
    var _inheritInnerComments = require_inheritInnerComments();
    var _inheritLeadingComments = require_inheritLeadingComments();
    var _inheritsComments = require_inheritsComments();
    var _inheritTrailingComments = require_inheritTrailingComments();
    var _removeComments = require_removeComments();
    var _index3 = require_generated4();
    Object.keys(_index3).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _index3[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index3[key];
        }
      });
    });
    var _index4 = require_constants();
    Object.keys(_index4).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _index4[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index4[key];
        }
      });
    });
    var _ensureBlock = require_ensureBlock();
    var _toBindingIdentifierName = require_toBindingIdentifierName();
    var _toBlock = require_toBlock();
    var _toComputedKey = require_toComputedKey();
    var _toExpression = require_toExpression();
    var _toIdentifier = require_toIdentifier();
    var _toKeyAlias = require_toKeyAlias();
    var _toStatement = require_toStatement();
    var _valueToNode = require_valueToNode();
    var _index5 = require_definitions();
    Object.keys(_index5).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _index5[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index5[key];
        }
      });
    });
    var _appendToMemberExpression = require_appendToMemberExpression();
    var _inherits = require_inherits();
    var _prependToMemberExpression = require_prependToMemberExpression();
    var _removeProperties = require_removeProperties();
    var _removePropertiesDeep = require_removePropertiesDeep();
    var _removeTypeDuplicates = require_removeTypeDuplicates();
    var _getAssignmentIdentifiers = require_getAssignmentIdentifiers();
    var _getBindingIdentifiers = require_getBindingIdentifiers();
    var _getOuterBindingIdentifiers = require_getOuterBindingIdentifiers();
    var _getFunctionName = require_getFunctionName();
    var _traverse = require_traverse();
    Object.keys(_traverse).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _traverse[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _traverse[key];
        }
      });
    });
    var _traverseFast = require_traverseFast();
    var _shallowEqual = require_shallowEqual();
    var _is = require_is();
    var _isBinding = require_isBinding();
    var _isBlockScoped = require_isBlockScoped();
    var _isImmutable = require_isImmutable();
    var _isLet = require_isLet();
    var _isNode = require_isNode();
    var _isNodesEquivalent = require_isNodesEquivalent();
    var _isPlaceholderType = require_isPlaceholderType();
    var _isReferenced = require_isReferenced();
    var _isScope = require_isScope();
    var _isSpecifierDefault = require_isSpecifierDefault();
    var _isType = require_isType();
    var _isValidES3Identifier = require_isValidES3Identifier();
    var _isValidIdentifier = require_isValidIdentifier();
    var _isVar = require_isVar();
    var _matchesPattern = require_matchesPattern();
    var _validate = require_validate();
    var _buildMatchMemberExpression = require_buildMatchMemberExpression();
    var _index6 = require_generated();
    Object.keys(_index6).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _index6[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index6[key];
        }
      });
    });
    var _deprecationWarning = require_deprecationWarning();
    var _toSequenceExpression = require_toSequenceExpression();
    var react = exports.react = {
      isReactComponent: _isReactComponent.default,
      isCompatTag: _isCompatTag.default,
      buildChildren: _buildChildren.default
    };
    {
      exports.toSequenceExpression = _toSequenceExpression.default;
    }
    if (process.env.BABEL_TYPES_8_BREAKING) {
      console.warn("BABEL_TYPES_8_BREAKING is not supported anymore. Use the latest Babel 8.0.0 pre-release instead!");
    }
  }
});

// ../../.yarn/__virtual__/typia-virtual-93fdc6e779/0/cache/typia-npm-8.0.4-b2444b63f3-1028a8a121.zip/node_modules/typia/lib/internal/_validateReport.js
var require_validateReport = __commonJS({
  "../../.yarn/__virtual__/typia-virtual-93fdc6e779/0/cache/typia-npm-8.0.4-b2444b63f3-1028a8a121.zip/node_modules/typia/lib/internal/_validateReport.js"(exports) {
    "use strict";
    init_esm_shims();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports._validateReport = void 0;
    var _validateReport2 = (array) => {
      const reportable = (path9) => {
        if (array.length === 0)
          return true;
        const last = array[array.length - 1].path;
        return path9.length > last.length || last.substring(0, path9.length) !== path9;
      };
      return (exceptable, error) => {
        if (exceptable && reportable(error.path))
          array.push(error);
        return false;
      };
    };
    exports._validateReport = _validateReport2;
  }
});

// ../../.yarn/cache/isexe-npm-2.0.0-ac27b2c17a-228cfa503f.zip/node_modules/isexe/windows.js
var require_windows = __commonJS({
  "../../.yarn/cache/isexe-npm-2.0.0-ac27b2c17a-228cfa503f.zip/node_modules/isexe/windows.js"(exports, module) {
    "use strict";
    init_esm_shims();
    module.exports = isexe;
    isexe.sync = sync;
    var fs4 = __require("fs");
    function checkPathExt(path9, options) {
      var pathext = options.pathExt !== void 0 ? options.pathExt : process.env.PATHEXT;
      if (!pathext) {
        return true;
      }
      pathext = pathext.split(";");
      if (pathext.indexOf("") !== -1) {
        return true;
      }
      for (var i2 = 0; i2 < pathext.length; i2++) {
        var p = pathext[i2].toLowerCase();
        if (p && path9.substr(-p.length).toLowerCase() === p) {
          return true;
        }
      }
      return false;
    }
    function checkStat(stat, path9, options) {
      if (!stat.isSymbolicLink() && !stat.isFile()) {
        return false;
      }
      return checkPathExt(path9, options);
    }
    function isexe(path9, options, cb) {
      fs4.stat(path9, function(er, stat) {
        cb(er, er ? false : checkStat(stat, path9, options));
      });
    }
    function sync(path9, options) {
      return checkStat(fs4.statSync(path9), path9, options);
    }
  }
});

// ../../.yarn/cache/isexe-npm-2.0.0-ac27b2c17a-228cfa503f.zip/node_modules/isexe/mode.js
var require_mode = __commonJS({
  "../../.yarn/cache/isexe-npm-2.0.0-ac27b2c17a-228cfa503f.zip/node_modules/isexe/mode.js"(exports, module) {
    "use strict";
    init_esm_shims();
    module.exports = isexe;
    isexe.sync = sync;
    var fs4 = __require("fs");
    function isexe(path9, options, cb) {
      fs4.stat(path9, function(er, stat) {
        cb(er, er ? false : checkStat(stat, options));
      });
    }
    function sync(path9, options) {
      return checkStat(fs4.statSync(path9), options);
    }
    function checkStat(stat, options) {
      return stat.isFile() && checkMode(stat, options);
    }
    function checkMode(stat, options) {
      var mod = stat.mode;
      var uid = stat.uid;
      var gid = stat.gid;
      var myUid = options.uid !== void 0 ? options.uid : process.getuid && process.getuid();
      var myGid = options.gid !== void 0 ? options.gid : process.getgid && process.getgid();
      var u3 = parseInt("100", 8);
      var g2 = parseInt("010", 8);
      var o3 = parseInt("001", 8);
      var ug = u3 | g2;
      var ret = mod & o3 || mod & g2 && gid === myGid || mod & u3 && uid === myUid || mod & ug && myUid === 0;
      return ret;
    }
  }
});

// ../../.yarn/cache/isexe-npm-2.0.0-ac27b2c17a-228cfa503f.zip/node_modules/isexe/index.js
var require_isexe = __commonJS({
  "../../.yarn/cache/isexe-npm-2.0.0-ac27b2c17a-228cfa503f.zip/node_modules/isexe/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var fs4 = __require("fs");
    var core;
    if (process.platform === "win32" || global.TESTING_WINDOWS) {
      core = require_windows();
    } else {
      core = require_mode();
    }
    module.exports = isexe;
    isexe.sync = sync;
    function isexe(path9, options, cb) {
      if (typeof options === "function") {
        cb = options;
        options = {};
      }
      if (!cb) {
        if (typeof Promise !== "function") {
          throw new TypeError("callback not provided");
        }
        return new Promise(function(resolve, reject) {
          isexe(path9, options || {}, function(er, is) {
            if (er) {
              reject(er);
            } else {
              resolve(is);
            }
          });
        });
      }
      core(path9, options || {}, function(er, is) {
        if (er) {
          if (er.code === "EACCES" || options && options.ignoreErrors) {
            er = null;
            is = false;
          }
        }
        cb(er, is);
      });
    }
    function sync(path9, options) {
      try {
        return core.sync(path9, options || {});
      } catch (er) {
        if (options && options.ignoreErrors || er.code === "EACCES") {
          return false;
        } else {
          throw er;
        }
      }
    }
  }
});

// ../../.yarn/cache/which-npm-2.0.2-d807c43e6d-66522872a7.zip/node_modules/which/which.js
var require_which = __commonJS({
  "../../.yarn/cache/which-npm-2.0.2-d807c43e6d-66522872a7.zip/node_modules/which/which.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var isWindows = process.platform === "win32" || process.env.OSTYPE === "cygwin" || process.env.OSTYPE === "msys";
    var path9 = __require("path");
    var COLON = isWindows ? ";" : ":";
    var isexe = require_isexe();
    var getNotFoundError = (cmd) => Object.assign(new Error(`not found: ${cmd}`), { code: "ENOENT" });
    var getPathInfo = (cmd, opt) => {
      const colon = opt.colon || COLON;
      const pathEnv = cmd.match(/\//) || isWindows && cmd.match(/\\/) ? [""] : [
        // windows always checks the cwd first
        ...isWindows ? [process.cwd()] : [],
        ...(opt.path || process.env.PATH || /* istanbul ignore next: very unusual */
        "").split(colon)
      ];
      const pathExtExe = isWindows ? opt.pathExt || process.env.PATHEXT || ".EXE;.CMD;.BAT;.COM" : "";
      const pathExt = isWindows ? pathExtExe.split(colon) : [""];
      if (isWindows) {
        if (cmd.indexOf(".") !== -1 && pathExt[0] !== "")
          pathExt.unshift("");
      }
      return {
        pathEnv,
        pathExt,
        pathExtExe
      };
    };
    var which = (cmd, opt, cb) => {
      if (typeof opt === "function") {
        cb = opt;
        opt = {};
      }
      if (!opt)
        opt = {};
      const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
      const found = [];
      const step = (i2) => new Promise((resolve, reject) => {
        if (i2 === pathEnv.length)
          return opt.all && found.length ? resolve(found) : reject(getNotFoundError(cmd));
        const ppRaw = pathEnv[i2];
        const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
        const pCmd = path9.join(pathPart, cmd);
        const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
        resolve(subStep(p, i2, 0));
      });
      const subStep = (p, i2, ii) => new Promise((resolve, reject) => {
        if (ii === pathExt.length)
          return resolve(step(i2 + 1));
        const ext = pathExt[ii];
        isexe(p + ext, { pathExt: pathExtExe }, (er, is) => {
          if (!er && is) {
            if (opt.all)
              found.push(p + ext);
            else
              return resolve(p + ext);
          }
          return resolve(subStep(p, i2, ii + 1));
        });
      });
      return cb ? step(0).then((res) => cb(null, res), cb) : step(0);
    };
    var whichSync = (cmd, opt) => {
      opt = opt || {};
      const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
      const found = [];
      for (let i2 = 0; i2 < pathEnv.length; i2++) {
        const ppRaw = pathEnv[i2];
        const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
        const pCmd = path9.join(pathPart, cmd);
        const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
        for (let j2 = 0; j2 < pathExt.length; j2++) {
          const cur = p + pathExt[j2];
          try {
            const is = isexe.sync(cur, { pathExt: pathExtExe });
            if (is) {
              if (opt.all)
                found.push(cur);
              else
                return cur;
            }
          } catch (ex) {
          }
        }
      }
      if (opt.all && found.length)
        return found;
      if (opt.nothrow)
        return null;
      throw getNotFoundError(cmd);
    };
    module.exports = which;
    which.sync = whichSync;
  }
});

// ../../.yarn/cache/path-key-npm-3.1.1-8ebd671694-748c43efd5.zip/node_modules/path-key/index.js
var require_path_key = __commonJS({
  "../../.yarn/cache/path-key-npm-3.1.1-8ebd671694-748c43efd5.zip/node_modules/path-key/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var pathKey2 = (options = {}) => {
      const environment = options.env || process.env;
      const platform2 = options.platform || process.platform;
      if (platform2 !== "win32") {
        return "PATH";
      }
      return Object.keys(environment).reverse().find((key) => key.toUpperCase() === "PATH") || "Path";
    };
    module.exports = pathKey2;
    module.exports.default = pathKey2;
  }
});

// ../../.yarn/cache/cross-spawn-npm-7.0.3-68b62748dc-5738c31238.zip/node_modules/cross-spawn/lib/util/resolveCommand.js
var require_resolveCommand = __commonJS({
  "../../.yarn/cache/cross-spawn-npm-7.0.3-68b62748dc-5738c31238.zip/node_modules/cross-spawn/lib/util/resolveCommand.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var path9 = __require("path");
    var which = require_which();
    var getPathKey = require_path_key();
    function resolveCommandAttempt(parsed, withoutPathExt) {
      const env = parsed.options.env || process.env;
      const cwd = process.cwd();
      const hasCustomCwd = parsed.options.cwd != null;
      const shouldSwitchCwd = hasCustomCwd && process.chdir !== void 0 && !process.chdir.disabled;
      if (shouldSwitchCwd) {
        try {
          process.chdir(parsed.options.cwd);
        } catch (err) {
        }
      }
      let resolved;
      try {
        resolved = which.sync(parsed.command, {
          path: env[getPathKey({ env })],
          pathExt: withoutPathExt ? path9.delimiter : void 0
        });
      } catch (e2) {
      } finally {
        if (shouldSwitchCwd) {
          process.chdir(cwd);
        }
      }
      if (resolved) {
        resolved = path9.resolve(hasCustomCwd ? parsed.options.cwd : "", resolved);
      }
      return resolved;
    }
    function resolveCommand(parsed) {
      return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);
    }
    module.exports = resolveCommand;
  }
});

// ../../.yarn/cache/cross-spawn-npm-7.0.3-68b62748dc-5738c31238.zip/node_modules/cross-spawn/lib/util/escape.js
var require_escape = __commonJS({
  "../../.yarn/cache/cross-spawn-npm-7.0.3-68b62748dc-5738c31238.zip/node_modules/cross-spawn/lib/util/escape.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var metaCharsRegExp = /([()\][%!^"`<>&|;, *?])/g;
    function escapeCommand(arg) {
      arg = arg.replace(metaCharsRegExp, "^$1");
      return arg;
    }
    function escapeArgument(arg, doubleEscapeMetaChars) {
      arg = `${arg}`;
      arg = arg.replace(/(\\*)"/g, '$1$1\\"');
      arg = arg.replace(/(\\*)$/, "$1$1");
      arg = `"${arg}"`;
      arg = arg.replace(metaCharsRegExp, "^$1");
      if (doubleEscapeMetaChars) {
        arg = arg.replace(metaCharsRegExp, "^$1");
      }
      return arg;
    }
    module.exports.command = escapeCommand;
    module.exports.argument = escapeArgument;
  }
});

// ../../.yarn/cache/shebang-regex-npm-3.0.0-3546f0eb25-1dbed0726d.zip/node_modules/shebang-regex/index.js
var require_shebang_regex = __commonJS({
  "../../.yarn/cache/shebang-regex-npm-3.0.0-3546f0eb25-1dbed0726d.zip/node_modules/shebang-regex/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    module.exports = /^#!(.*)/;
  }
});

// ../../.yarn/cache/shebang-command-npm-2.0.0-214b03022e-a41692e7d8.zip/node_modules/shebang-command/index.js
var require_shebang_command = __commonJS({
  "../../.yarn/cache/shebang-command-npm-2.0.0-214b03022e-a41692e7d8.zip/node_modules/shebang-command/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var shebangRegex = require_shebang_regex();
    module.exports = (string = "") => {
      const match = string.match(shebangRegex);
      if (!match) {
        return null;
      }
      const [path9, argument] = match[0].replace(/#! ?/, "").split(" ");
      const binary = path9.split("/").pop();
      if (binary === "env") {
        return argument;
      }
      return argument ? `${binary} ${argument}` : binary;
    };
  }
});

// ../../.yarn/cache/cross-spawn-npm-7.0.3-68b62748dc-5738c31238.zip/node_modules/cross-spawn/lib/util/readShebang.js
var require_readShebang = __commonJS({
  "../../.yarn/cache/cross-spawn-npm-7.0.3-68b62748dc-5738c31238.zip/node_modules/cross-spawn/lib/util/readShebang.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var fs4 = __require("fs");
    var shebangCommand = require_shebang_command();
    function readShebang(command) {
      const size = 150;
      const buffer = Buffer.alloc(size);
      let fd;
      try {
        fd = fs4.openSync(command, "r");
        fs4.readSync(fd, buffer, 0, size, 0);
        fs4.closeSync(fd);
      } catch (e2) {
      }
      return shebangCommand(buffer.toString());
    }
    module.exports = readShebang;
  }
});

// ../../.yarn/cache/cross-spawn-npm-7.0.3-68b62748dc-5738c31238.zip/node_modules/cross-spawn/lib/parse.js
var require_parse = __commonJS({
  "../../.yarn/cache/cross-spawn-npm-7.0.3-68b62748dc-5738c31238.zip/node_modules/cross-spawn/lib/parse.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var path9 = __require("path");
    var resolveCommand = require_resolveCommand();
    var escape2 = require_escape();
    var readShebang = require_readShebang();
    var isWin = process.platform === "win32";
    var isExecutableRegExp = /\.(?:com|exe)$/i;
    var isCmdShimRegExp = /node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;
    function detectShebang(parsed) {
      parsed.file = resolveCommand(parsed);
      const shebang = parsed.file && readShebang(parsed.file);
      if (shebang) {
        parsed.args.unshift(parsed.file);
        parsed.command = shebang;
        return resolveCommand(parsed);
      }
      return parsed.file;
    }
    function parseNonShell(parsed) {
      if (!isWin) {
        return parsed;
      }
      const commandFile = detectShebang(parsed);
      const needsShell = !isExecutableRegExp.test(commandFile);
      if (parsed.options.forceShell || needsShell) {
        const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);
        parsed.command = path9.normalize(parsed.command);
        parsed.command = escape2.command(parsed.command);
        parsed.args = parsed.args.map((arg) => escape2.argument(arg, needsDoubleEscapeMetaChars));
        const shellCommand = [parsed.command].concat(parsed.args).join(" ");
        parsed.args = ["/d", "/s", "/c", `"${shellCommand}"`];
        parsed.command = process.env.comspec || "cmd.exe";
        parsed.options.windowsVerbatimArguments = true;
      }
      return parsed;
    }
    function parse(command, args, options) {
      if (args && !Array.isArray(args)) {
        options = args;
        args = null;
      }
      args = args ? args.slice(0) : [];
      options = Object.assign({}, options);
      const parsed = {
        command,
        args,
        options,
        file: void 0,
        original: {
          command,
          args
        }
      };
      return options.shell ? parsed : parseNonShell(parsed);
    }
    module.exports = parse;
  }
});

// ../../.yarn/cache/cross-spawn-npm-7.0.3-68b62748dc-5738c31238.zip/node_modules/cross-spawn/lib/enoent.js
var require_enoent = __commonJS({
  "../../.yarn/cache/cross-spawn-npm-7.0.3-68b62748dc-5738c31238.zip/node_modules/cross-spawn/lib/enoent.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var isWin = process.platform === "win32";
    function notFoundError(original, syscall) {
      return Object.assign(new Error(`${syscall} ${original.command} ENOENT`), {
        code: "ENOENT",
        errno: "ENOENT",
        syscall: `${syscall} ${original.command}`,
        path: original.command,
        spawnargs: original.args
      });
    }
    function hookChildProcess(cp, parsed) {
      if (!isWin) {
        return;
      }
      const originalEmit = cp.emit;
      cp.emit = function(name, arg1) {
        if (name === "exit") {
          const err = verifyENOENT(arg1, parsed, "spawn");
          if (err) {
            return originalEmit.call(cp, "error", err);
          }
        }
        return originalEmit.apply(cp, arguments);
      };
    }
    function verifyENOENT(status, parsed) {
      if (isWin && status === 1 && !parsed.file) {
        return notFoundError(parsed.original, "spawn");
      }
      return null;
    }
    function verifyENOENTSync(status, parsed) {
      if (isWin && status === 1 && !parsed.file) {
        return notFoundError(parsed.original, "spawnSync");
      }
      return null;
    }
    module.exports = {
      hookChildProcess,
      verifyENOENT,
      verifyENOENTSync,
      notFoundError
    };
  }
});

// ../../.yarn/cache/cross-spawn-npm-7.0.3-68b62748dc-5738c31238.zip/node_modules/cross-spawn/index.js
var require_cross_spawn = __commonJS({
  "../../.yarn/cache/cross-spawn-npm-7.0.3-68b62748dc-5738c31238.zip/node_modules/cross-spawn/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var cp = __require("child_process");
    var parse = require_parse();
    var enoent = require_enoent();
    function spawn2(command, args, options) {
      const parsed = parse(command, args, options);
      const spawned = cp.spawn(parsed.command, parsed.args, parsed.options);
      enoent.hookChildProcess(spawned, parsed);
      return spawned;
    }
    function spawnSync2(command, args, options) {
      const parsed = parse(command, args, options);
      const result = cp.spawnSync(parsed.command, parsed.args, parsed.options);
      result.error = result.error || enoent.verifyENOENTSync(result.status, parsed);
      return result;
    }
    module.exports = spawn2;
    module.exports.spawn = spawn2;
    module.exports.sync = spawnSync2;
    module.exports._parse = parse;
    module.exports._enoent = enoent;
  }
});

// ../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/constants.js
var require_constants2 = __commonJS({
  "../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/constants.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var BINARY_TYPES = ["nodebuffer", "arraybuffer", "fragments"];
    var hasBlob = typeof Blob !== "undefined";
    if (hasBlob) BINARY_TYPES.push("blob");
    module.exports = {
      BINARY_TYPES,
      EMPTY_BUFFER: Buffer.alloc(0),
      GUID: "258EAFA5-E914-47DA-95CA-C5AB0DC85B11",
      hasBlob,
      kForOnEventAttribute: Symbol("kIsForOnEventAttribute"),
      kListener: Symbol("kListener"),
      kStatusCode: Symbol("status-code"),
      kWebSocket: Symbol("websocket"),
      NOOP: () => {
      }
    };
  }
});

// ../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/buffer-util.js
var require_buffer_util = __commonJS({
  "../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/buffer-util.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var { EMPTY_BUFFER } = require_constants2();
    var FastBuffer = Buffer[Symbol.species];
    function concat(list, totalLength) {
      if (list.length === 0) return EMPTY_BUFFER;
      if (list.length === 1) return list[0];
      const target = Buffer.allocUnsafe(totalLength);
      let offset = 0;
      for (let i2 = 0; i2 < list.length; i2++) {
        const buf = list[i2];
        target.set(buf, offset);
        offset += buf.length;
      }
      if (offset < totalLength) {
        return new FastBuffer(target.buffer, target.byteOffset, offset);
      }
      return target;
    }
    function _mask(source, mask, output, offset, length) {
      for (let i2 = 0; i2 < length; i2++) {
        output[offset + i2] = source[i2] ^ mask[i2 & 3];
      }
    }
    function _unmask(buffer, mask) {
      for (let i2 = 0; i2 < buffer.length; i2++) {
        buffer[i2] ^= mask[i2 & 3];
      }
    }
    function toArrayBuffer(buf) {
      if (buf.length === buf.buffer.byteLength) {
        return buf.buffer;
      }
      return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.length);
    }
    function toBuffer(data) {
      toBuffer.readOnly = true;
      if (Buffer.isBuffer(data)) return data;
      let buf;
      if (data instanceof ArrayBuffer) {
        buf = new FastBuffer(data);
      } else if (ArrayBuffer.isView(data)) {
        buf = new FastBuffer(data.buffer, data.byteOffset, data.byteLength);
      } else {
        buf = Buffer.from(data);
        toBuffer.readOnly = false;
      }
      return buf;
    }
    module.exports = {
      concat,
      mask: _mask,
      toArrayBuffer,
      toBuffer,
      unmask: _unmask
    };
    if (!process.env.WS_NO_BUFFER_UTIL) {
      try {
        const bufferUtil = __require("bufferutil");
        module.exports.mask = function(source, mask, output, offset, length) {
          if (length < 48) _mask(source, mask, output, offset, length);
          else bufferUtil.mask(source, mask, output, offset, length);
        };
        module.exports.unmask = function(buffer, mask) {
          if (buffer.length < 32) _unmask(buffer, mask);
          else bufferUtil.unmask(buffer, mask);
        };
      } catch (e2) {
      }
    }
  }
});

// ../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/limiter.js
var require_limiter = __commonJS({
  "../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/limiter.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var kDone = Symbol("kDone");
    var kRun = Symbol("kRun");
    var Limiter = class {
      /**
       * Creates a new `Limiter`.
       *
       * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed
       *     to run concurrently
       */
      constructor(concurrency) {
        this[kDone] = () => {
          this.pending--;
          this[kRun]();
        };
        this.concurrency = concurrency || Infinity;
        this.jobs = [];
        this.pending = 0;
      }
      /**
       * Adds a job to the queue.
       *
       * @param {Function} job The job to run
       * @public
       */
      add(job) {
        this.jobs.push(job);
        this[kRun]();
      }
      /**
       * Removes a job from the queue and runs it if possible.
       *
       * @private
       */
      [kRun]() {
        if (this.pending === this.concurrency) return;
        if (this.jobs.length) {
          const job = this.jobs.shift();
          this.pending++;
          job(this[kDone]);
        }
      }
    };
    module.exports = Limiter;
  }
});

// ../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/permessage-deflate.js
var require_permessage_deflate = __commonJS({
  "../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/permessage-deflate.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var zlib = __require("zlib");
    var bufferUtil = require_buffer_util();
    var Limiter = require_limiter();
    var { kStatusCode } = require_constants2();
    var FastBuffer = Buffer[Symbol.species];
    var TRAILER = Buffer.from([0, 0, 255, 255]);
    var kPerMessageDeflate = Symbol("permessage-deflate");
    var kTotalLength = Symbol("total-length");
    var kCallback = Symbol("callback");
    var kBuffers = Symbol("buffers");
    var kError = Symbol("error");
    var zlibLimiter;
    var PerMessageDeflate = class {
      /**
       * Creates a PerMessageDeflate instance.
       *
       * @param {Object} [options] Configuration options
       * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support
       *     for, or request, a custom client window size
       * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/
       *     acknowledge disabling of client context takeover
       * @param {Number} [options.concurrencyLimit=10] The number of concurrent
       *     calls to zlib
       * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the
       *     use of a custom server window size
       * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept
       *     disabling of server context takeover
       * @param {Number} [options.threshold=1024] Size (in bytes) below which
       *     messages should not be compressed if context takeover is disabled
       * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on
       *     deflate
       * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on
       *     inflate
       * @param {Boolean} [isServer=false] Create the instance in either server or
       *     client mode
       * @param {Number} [maxPayload=0] The maximum allowed message length
       */
      constructor(options, isServer, maxPayload) {
        this._maxPayload = maxPayload | 0;
        this._options = options || {};
        this._threshold = this._options.threshold !== void 0 ? this._options.threshold : 1024;
        this._isServer = !!isServer;
        this._deflate = null;
        this._inflate = null;
        this.params = null;
        if (!zlibLimiter) {
          const concurrency = this._options.concurrencyLimit !== void 0 ? this._options.concurrencyLimit : 10;
          zlibLimiter = new Limiter(concurrency);
        }
      }
      /**
       * @type {String}
       */
      static get extensionName() {
        return "permessage-deflate";
      }
      /**
       * Create an extension negotiation offer.
       *
       * @return {Object} Extension parameters
       * @public
       */
      offer() {
        const params = {};
        if (this._options.serverNoContextTakeover) {
          params.server_no_context_takeover = true;
        }
        if (this._options.clientNoContextTakeover) {
          params.client_no_context_takeover = true;
        }
        if (this._options.serverMaxWindowBits) {
          params.server_max_window_bits = this._options.serverMaxWindowBits;
        }
        if (this._options.clientMaxWindowBits) {
          params.client_max_window_bits = this._options.clientMaxWindowBits;
        } else if (this._options.clientMaxWindowBits == null) {
          params.client_max_window_bits = true;
        }
        return params;
      }
      /**
       * Accept an extension negotiation offer/response.
       *
       * @param {Array} configurations The extension negotiation offers/reponse
       * @return {Object} Accepted configuration
       * @public
       */
      accept(configurations) {
        configurations = this.normalizeParams(configurations);
        this.params = this._isServer ? this.acceptAsServer(configurations) : this.acceptAsClient(configurations);
        return this.params;
      }
      /**
       * Releases all resources used by the extension.
       *
       * @public
       */
      cleanup() {
        if (this._inflate) {
          this._inflate.close();
          this._inflate = null;
        }
        if (this._deflate) {
          const callback = this._deflate[kCallback];
          this._deflate.close();
          this._deflate = null;
          if (callback) {
            callback(
              new Error(
                "The deflate stream was closed while data was being processed"
              )
            );
          }
        }
      }
      /**
       *  Accept an extension negotiation offer.
       *
       * @param {Array} offers The extension negotiation offers
       * @return {Object} Accepted configuration
       * @private
       */
      acceptAsServer(offers) {
        const opts = this._options;
        const accepted = offers.find((params) => {
          if (opts.serverNoContextTakeover === false && params.server_no_context_takeover || params.server_max_window_bits && (opts.serverMaxWindowBits === false || typeof opts.serverMaxWindowBits === "number" && opts.serverMaxWindowBits > params.server_max_window_bits) || typeof opts.clientMaxWindowBits === "number" && !params.client_max_window_bits) {
            return false;
          }
          return true;
        });
        if (!accepted) {
          throw new Error("None of the extension offers can be accepted");
        }
        if (opts.serverNoContextTakeover) {
          accepted.server_no_context_takeover = true;
        }
        if (opts.clientNoContextTakeover) {
          accepted.client_no_context_takeover = true;
        }
        if (typeof opts.serverMaxWindowBits === "number") {
          accepted.server_max_window_bits = opts.serverMaxWindowBits;
        }
        if (typeof opts.clientMaxWindowBits === "number") {
          accepted.client_max_window_bits = opts.clientMaxWindowBits;
        } else if (accepted.client_max_window_bits === true || opts.clientMaxWindowBits === false) {
          delete accepted.client_max_window_bits;
        }
        return accepted;
      }
      /**
       * Accept the extension negotiation response.
       *
       * @param {Array} response The extension negotiation response
       * @return {Object} Accepted configuration
       * @private
       */
      acceptAsClient(response) {
        const params = response[0];
        if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {
          throw new Error('Unexpected parameter "client_no_context_takeover"');
        }
        if (!params.client_max_window_bits) {
          if (typeof this._options.clientMaxWindowBits === "number") {
            params.client_max_window_bits = this._options.clientMaxWindowBits;
          }
        } else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits === "number" && params.client_max_window_bits > this._options.clientMaxWindowBits) {
          throw new Error(
            'Unexpected or invalid parameter "client_max_window_bits"'
          );
        }
        return params;
      }
      /**
       * Normalize parameters.
       *
       * @param {Array} configurations The extension negotiation offers/reponse
       * @return {Array} The offers/response with normalized parameters
       * @private
       */
      normalizeParams(configurations) {
        configurations.forEach((params) => {
          Object.keys(params).forEach((key) => {
            let value2 = params[key];
            if (value2.length > 1) {
              throw new Error(`Parameter "${key}" must have only a single value`);
            }
            value2 = value2[0];
            if (key === "client_max_window_bits") {
              if (value2 !== true) {
                const num = +value2;
                if (!Number.isInteger(num) || num < 8 || num > 15) {
                  throw new TypeError(
                    `Invalid value for parameter "${key}": ${value2}`
                  );
                }
                value2 = num;
              } else if (!this._isServer) {
                throw new TypeError(
                  `Invalid value for parameter "${key}": ${value2}`
                );
              }
            } else if (key === "server_max_window_bits") {
              const num = +value2;
              if (!Number.isInteger(num) || num < 8 || num > 15) {
                throw new TypeError(
                  `Invalid value for parameter "${key}": ${value2}`
                );
              }
              value2 = num;
            } else if (key === "client_no_context_takeover" || key === "server_no_context_takeover") {
              if (value2 !== true) {
                throw new TypeError(
                  `Invalid value for parameter "${key}": ${value2}`
                );
              }
            } else {
              throw new Error(`Unknown parameter "${key}"`);
            }
            params[key] = value2;
          });
        });
        return configurations;
      }
      /**
       * Decompress data. Concurrency limited.
       *
       * @param {Buffer} data Compressed data
       * @param {Boolean} fin Specifies whether or not this is the last fragment
       * @param {Function} callback Callback
       * @public
       */
      decompress(data, fin, callback) {
        zlibLimiter.add((done) => {
          this._decompress(data, fin, (err, result) => {
            done();
            callback(err, result);
          });
        });
      }
      /**
       * Compress data. Concurrency limited.
       *
       * @param {(Buffer|String)} data Data to compress
       * @param {Boolean} fin Specifies whether or not this is the last fragment
       * @param {Function} callback Callback
       * @public
       */
      compress(data, fin, callback) {
        zlibLimiter.add((done) => {
          this._compress(data, fin, (err, result) => {
            done();
            callback(err, result);
          });
        });
      }
      /**
       * Decompress data.
       *
       * @param {Buffer} data Compressed data
       * @param {Boolean} fin Specifies whether or not this is the last fragment
       * @param {Function} callback Callback
       * @private
       */
      _decompress(data, fin, callback) {
        const endpoint = this._isServer ? "client" : "server";
        if (!this._inflate) {
          const key = `${endpoint}_max_window_bits`;
          const windowBits = typeof this.params[key] !== "number" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];
          this._inflate = zlib.createInflateRaw({
            ...this._options.zlibInflateOptions,
            windowBits
          });
          this._inflate[kPerMessageDeflate] = this;
          this._inflate[kTotalLength] = 0;
          this._inflate[kBuffers] = [];
          this._inflate.on("error", inflateOnError);
          this._inflate.on("data", inflateOnData);
        }
        this._inflate[kCallback] = callback;
        this._inflate.write(data);
        if (fin) this._inflate.write(TRAILER);
        this._inflate.flush(() => {
          const err = this._inflate[kError];
          if (err) {
            this._inflate.close();
            this._inflate = null;
            callback(err);
            return;
          }
          const data2 = bufferUtil.concat(
            this._inflate[kBuffers],
            this._inflate[kTotalLength]
          );
          if (this._inflate._readableState.endEmitted) {
            this._inflate.close();
            this._inflate = null;
          } else {
            this._inflate[kTotalLength] = 0;
            this._inflate[kBuffers] = [];
            if (fin && this.params[`${endpoint}_no_context_takeover`]) {
              this._inflate.reset();
            }
          }
          callback(null, data2);
        });
      }
      /**
       * Compress data.
       *
       * @param {(Buffer|String)} data Data to compress
       * @param {Boolean} fin Specifies whether or not this is the last fragment
       * @param {Function} callback Callback
       * @private
       */
      _compress(data, fin, callback) {
        const endpoint = this._isServer ? "server" : "client";
        if (!this._deflate) {
          const key = `${endpoint}_max_window_bits`;
          const windowBits = typeof this.params[key] !== "number" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];
          this._deflate = zlib.createDeflateRaw({
            ...this._options.zlibDeflateOptions,
            windowBits
          });
          this._deflate[kTotalLength] = 0;
          this._deflate[kBuffers] = [];
          this._deflate.on("data", deflateOnData);
        }
        this._deflate[kCallback] = callback;
        this._deflate.write(data);
        this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {
          if (!this._deflate) {
            return;
          }
          let data2 = bufferUtil.concat(
            this._deflate[kBuffers],
            this._deflate[kTotalLength]
          );
          if (fin) {
            data2 = new FastBuffer(data2.buffer, data2.byteOffset, data2.length - 4);
          }
          this._deflate[kCallback] = null;
          this._deflate[kTotalLength] = 0;
          this._deflate[kBuffers] = [];
          if (fin && this.params[`${endpoint}_no_context_takeover`]) {
            this._deflate.reset();
          }
          callback(null, data2);
        });
      }
    };
    module.exports = PerMessageDeflate;
    function deflateOnData(chunk) {
      this[kBuffers].push(chunk);
      this[kTotalLength] += chunk.length;
    }
    function inflateOnData(chunk) {
      this[kTotalLength] += chunk.length;
      if (this[kPerMessageDeflate]._maxPayload < 1 || this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload) {
        this[kBuffers].push(chunk);
        return;
      }
      this[kError] = new RangeError("Max payload size exceeded");
      this[kError].code = "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH";
      this[kError][kStatusCode] = 1009;
      this.removeListener("data", inflateOnData);
      this.reset();
    }
    function inflateOnError(err) {
      this[kPerMessageDeflate]._inflate = null;
      err[kStatusCode] = 1007;
      this[kCallback](err);
    }
  }
});

// ../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/validation.js
var require_validation = __commonJS({
  "../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/validation.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var { isUtf8 } = __require("buffer");
    var { hasBlob } = require_constants2();
    var tokenChars = [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      // 0 - 15
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      // 16 - 31
      0,
      1,
      0,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      1,
      1,
      0,
      1,
      1,
      0,
      // 32 - 47
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      // 48 - 63
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      // 64 - 79
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      1,
      1,
      // 80 - 95
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      // 96 - 111
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      1,
      0,
      1,
      0
      // 112 - 127
    ];
    function isValidStatusCode(code) {
      return code >= 1e3 && code <= 1014 && code !== 1004 && code !== 1005 && code !== 1006 || code >= 3e3 && code <= 4999;
    }
    function _isValidUTF8(buf) {
      const len = buf.length;
      let i2 = 0;
      while (i2 < len) {
        if ((buf[i2] & 128) === 0) {
          i2++;
        } else if ((buf[i2] & 224) === 192) {
          if (i2 + 1 === len || (buf[i2 + 1] & 192) !== 128 || (buf[i2] & 254) === 192) {
            return false;
          }
          i2 += 2;
        } else if ((buf[i2] & 240) === 224) {
          if (i2 + 2 >= len || (buf[i2 + 1] & 192) !== 128 || (buf[i2 + 2] & 192) !== 128 || buf[i2] === 224 && (buf[i2 + 1] & 224) === 128 || // Overlong
          buf[i2] === 237 && (buf[i2 + 1] & 224) === 160) {
            return false;
          }
          i2 += 3;
        } else if ((buf[i2] & 248) === 240) {
          if (i2 + 3 >= len || (buf[i2 + 1] & 192) !== 128 || (buf[i2 + 2] & 192) !== 128 || (buf[i2 + 3] & 192) !== 128 || buf[i2] === 240 && (buf[i2 + 1] & 240) === 128 || // Overlong
          buf[i2] === 244 && buf[i2 + 1] > 143 || buf[i2] > 244) {
            return false;
          }
          i2 += 4;
        } else {
          return false;
        }
      }
      return true;
    }
    function isBlob(value2) {
      return hasBlob && typeof value2 === "object" && typeof value2.arrayBuffer === "function" && typeof value2.type === "string" && typeof value2.stream === "function" && (value2[Symbol.toStringTag] === "Blob" || value2[Symbol.toStringTag] === "File");
    }
    module.exports = {
      isBlob,
      isValidStatusCode,
      isValidUTF8: _isValidUTF8,
      tokenChars
    };
    if (isUtf8) {
      module.exports.isValidUTF8 = function(buf) {
        return buf.length < 24 ? _isValidUTF8(buf) : isUtf8(buf);
      };
    } else if (!process.env.WS_NO_UTF_8_VALIDATE) {
      try {
        const isValidUTF8 = __require("utf-8-validate");
        module.exports.isValidUTF8 = function(buf) {
          return buf.length < 32 ? _isValidUTF8(buf) : isValidUTF8(buf);
        };
      } catch (e2) {
      }
    }
  }
});

// ../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/receiver.js
var require_receiver = __commonJS({
  "../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/receiver.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var { Writable: Writable4 } = __require("stream");
    var PerMessageDeflate = require_permessage_deflate();
    var {
      BINARY_TYPES,
      EMPTY_BUFFER,
      kStatusCode,
      kWebSocket
    } = require_constants2();
    var { concat, toArrayBuffer, unmask } = require_buffer_util();
    var { isValidStatusCode, isValidUTF8 } = require_validation();
    var FastBuffer = Buffer[Symbol.species];
    var GET_INFO = 0;
    var GET_PAYLOAD_LENGTH_16 = 1;
    var GET_PAYLOAD_LENGTH_64 = 2;
    var GET_MASK = 3;
    var GET_DATA = 4;
    var INFLATING = 5;
    var DEFER_EVENT = 6;
    var Receiver2 = class extends Writable4 {
      /**
       * Creates a Receiver instance.
       *
       * @param {Object} [options] Options object
       * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether
       *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted
       *     multiple times in the same tick
       * @param {String} [options.binaryType=nodebuffer] The type for binary data
       * @param {Object} [options.extensions] An object containing the negotiated
       *     extensions
       * @param {Boolean} [options.isServer=false] Specifies whether to operate in
       *     client or server mode
       * @param {Number} [options.maxPayload=0] The maximum allowed message length
       * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
       *     not to skip UTF-8 validation for text and close messages
       */
      constructor(options = {}) {
        super();
        this._allowSynchronousEvents = options.allowSynchronousEvents !== void 0 ? options.allowSynchronousEvents : true;
        this._binaryType = options.binaryType || BINARY_TYPES[0];
        this._extensions = options.extensions || {};
        this._isServer = !!options.isServer;
        this._maxPayload = options.maxPayload | 0;
        this._skipUTF8Validation = !!options.skipUTF8Validation;
        this[kWebSocket] = void 0;
        this._bufferedBytes = 0;
        this._buffers = [];
        this._compressed = false;
        this._payloadLength = 0;
        this._mask = void 0;
        this._fragmented = 0;
        this._masked = false;
        this._fin = false;
        this._opcode = 0;
        this._totalPayloadLength = 0;
        this._messageLength = 0;
        this._fragments = [];
        this._errored = false;
        this._loop = false;
        this._state = GET_INFO;
      }
      /**
       * Implements `Writable.prototype._write()`.
       *
       * @param {Buffer} chunk The chunk of data to write
       * @param {String} encoding The character encoding of `chunk`
       * @param {Function} cb Callback
       * @private
       */
      _write(chunk, encoding, cb) {
        if (this._opcode === 8 && this._state == GET_INFO) return cb();
        this._bufferedBytes += chunk.length;
        this._buffers.push(chunk);
        this.startLoop(cb);
      }
      /**
       * Consumes `n` bytes from the buffered data.
       *
       * @param {Number} n The number of bytes to consume
       * @return {Buffer} The consumed bytes
       * @private
       */
      consume(n2) {
        this._bufferedBytes -= n2;
        if (n2 === this._buffers[0].length) return this._buffers.shift();
        if (n2 < this._buffers[0].length) {
          const buf = this._buffers[0];
          this._buffers[0] = new FastBuffer(
            buf.buffer,
            buf.byteOffset + n2,
            buf.length - n2
          );
          return new FastBuffer(buf.buffer, buf.byteOffset, n2);
        }
        const dst = Buffer.allocUnsafe(n2);
        do {
          const buf = this._buffers[0];
          const offset = dst.length - n2;
          if (n2 >= buf.length) {
            dst.set(this._buffers.shift(), offset);
          } else {
            dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n2), offset);
            this._buffers[0] = new FastBuffer(
              buf.buffer,
              buf.byteOffset + n2,
              buf.length - n2
            );
          }
          n2 -= buf.length;
        } while (n2 > 0);
        return dst;
      }
      /**
       * Starts the parsing loop.
       *
       * @param {Function} cb Callback
       * @private
       */
      startLoop(cb) {
        this._loop = true;
        do {
          switch (this._state) {
            case GET_INFO:
              this.getInfo(cb);
              break;
            case GET_PAYLOAD_LENGTH_16:
              this.getPayloadLength16(cb);
              break;
            case GET_PAYLOAD_LENGTH_64:
              this.getPayloadLength64(cb);
              break;
            case GET_MASK:
              this.getMask();
              break;
            case GET_DATA:
              this.getData(cb);
              break;
            case INFLATING:
            case DEFER_EVENT:
              this._loop = false;
              return;
          }
        } while (this._loop);
        if (!this._errored) cb();
      }
      /**
       * Reads the first two bytes of a frame.
       *
       * @param {Function} cb Callback
       * @private
       */
      getInfo(cb) {
        if (this._bufferedBytes < 2) {
          this._loop = false;
          return;
        }
        const buf = this.consume(2);
        if ((buf[0] & 48) !== 0) {
          const error = this.createError(
            RangeError,
            "RSV2 and RSV3 must be clear",
            true,
            1002,
            "WS_ERR_UNEXPECTED_RSV_2_3"
          );
          cb(error);
          return;
        }
        const compressed = (buf[0] & 64) === 64;
        if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {
          const error = this.createError(
            RangeError,
            "RSV1 must be clear",
            true,
            1002,
            "WS_ERR_UNEXPECTED_RSV_1"
          );
          cb(error);
          return;
        }
        this._fin = (buf[0] & 128) === 128;
        this._opcode = buf[0] & 15;
        this._payloadLength = buf[1] & 127;
        if (this._opcode === 0) {
          if (compressed) {
            const error = this.createError(
              RangeError,
              "RSV1 must be clear",
              true,
              1002,
              "WS_ERR_UNEXPECTED_RSV_1"
            );
            cb(error);
            return;
          }
          if (!this._fragmented) {
            const error = this.createError(
              RangeError,
              "invalid opcode 0",
              true,
              1002,
              "WS_ERR_INVALID_OPCODE"
            );
            cb(error);
            return;
          }
          this._opcode = this._fragmented;
        } else if (this._opcode === 1 || this._opcode === 2) {
          if (this._fragmented) {
            const error = this.createError(
              RangeError,
              `invalid opcode ${this._opcode}`,
              true,
              1002,
              "WS_ERR_INVALID_OPCODE"
            );
            cb(error);
            return;
          }
          this._compressed = compressed;
        } else if (this._opcode > 7 && this._opcode < 11) {
          if (!this._fin) {
            const error = this.createError(
              RangeError,
              "FIN must be set",
              true,
              1002,
              "WS_ERR_EXPECTED_FIN"
            );
            cb(error);
            return;
          }
          if (compressed) {
            const error = this.createError(
              RangeError,
              "RSV1 must be clear",
              true,
              1002,
              "WS_ERR_UNEXPECTED_RSV_1"
            );
            cb(error);
            return;
          }
          if (this._payloadLength > 125 || this._opcode === 8 && this._payloadLength === 1) {
            const error = this.createError(
              RangeError,
              `invalid payload length ${this._payloadLength}`,
              true,
              1002,
              "WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH"
            );
            cb(error);
            return;
          }
        } else {
          const error = this.createError(
            RangeError,
            `invalid opcode ${this._opcode}`,
            true,
            1002,
            "WS_ERR_INVALID_OPCODE"
          );
          cb(error);
          return;
        }
        if (!this._fin && !this._fragmented) this._fragmented = this._opcode;
        this._masked = (buf[1] & 128) === 128;
        if (this._isServer) {
          if (!this._masked) {
            const error = this.createError(
              RangeError,
              "MASK must be set",
              true,
              1002,
              "WS_ERR_EXPECTED_MASK"
            );
            cb(error);
            return;
          }
        } else if (this._masked) {
          const error = this.createError(
            RangeError,
            "MASK must be clear",
            true,
            1002,
            "WS_ERR_UNEXPECTED_MASK"
          );
          cb(error);
          return;
        }
        if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;
        else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;
        else this.haveLength(cb);
      }
      /**
       * Gets extended payload length (7+16).
       *
       * @param {Function} cb Callback
       * @private
       */
      getPayloadLength16(cb) {
        if (this._bufferedBytes < 2) {
          this._loop = false;
          return;
        }
        this._payloadLength = this.consume(2).readUInt16BE(0);
        this.haveLength(cb);
      }
      /**
       * Gets extended payload length (7+64).
       *
       * @param {Function} cb Callback
       * @private
       */
      getPayloadLength64(cb) {
        if (this._bufferedBytes < 8) {
          this._loop = false;
          return;
        }
        const buf = this.consume(8);
        const num = buf.readUInt32BE(0);
        if (num > Math.pow(2, 53 - 32) - 1) {
          const error = this.createError(
            RangeError,
            "Unsupported WebSocket frame: payload length > 2^53 - 1",
            false,
            1009,
            "WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH"
          );
          cb(error);
          return;
        }
        this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);
        this.haveLength(cb);
      }
      /**
       * Payload length has been read.
       *
       * @param {Function} cb Callback
       * @private
       */
      haveLength(cb) {
        if (this._payloadLength && this._opcode < 8) {
          this._totalPayloadLength += this._payloadLength;
          if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {
            const error = this.createError(
              RangeError,
              "Max payload size exceeded",
              false,
              1009,
              "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH"
            );
            cb(error);
            return;
          }
        }
        if (this._masked) this._state = GET_MASK;
        else this._state = GET_DATA;
      }
      /**
       * Reads mask bytes.
       *
       * @private
       */
      getMask() {
        if (this._bufferedBytes < 4) {
          this._loop = false;
          return;
        }
        this._mask = this.consume(4);
        this._state = GET_DATA;
      }
      /**
       * Reads data bytes.
       *
       * @param {Function} cb Callback
       * @private
       */
      getData(cb) {
        let data = EMPTY_BUFFER;
        if (this._payloadLength) {
          if (this._bufferedBytes < this._payloadLength) {
            this._loop = false;
            return;
          }
          data = this.consume(this._payloadLength);
          if (this._masked && (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0) {
            unmask(data, this._mask);
          }
        }
        if (this._opcode > 7) {
          this.controlMessage(data, cb);
          return;
        }
        if (this._compressed) {
          this._state = INFLATING;
          this.decompress(data, cb);
          return;
        }
        if (data.length) {
          this._messageLength = this._totalPayloadLength;
          this._fragments.push(data);
        }
        this.dataMessage(cb);
      }
      /**
       * Decompresses data.
       *
       * @param {Buffer} data Compressed data
       * @param {Function} cb Callback
       * @private
       */
      decompress(data, cb) {
        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
        perMessageDeflate.decompress(data, this._fin, (err, buf) => {
          if (err) return cb(err);
          if (buf.length) {
            this._messageLength += buf.length;
            if (this._messageLength > this._maxPayload && this._maxPayload > 0) {
              const error = this.createError(
                RangeError,
                "Max payload size exceeded",
                false,
                1009,
                "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH"
              );
              cb(error);
              return;
            }
            this._fragments.push(buf);
          }
          this.dataMessage(cb);
          if (this._state === GET_INFO) this.startLoop(cb);
        });
      }
      /**
       * Handles a data message.
       *
       * @param {Function} cb Callback
       * @private
       */
      dataMessage(cb) {
        if (!this._fin) {
          this._state = GET_INFO;
          return;
        }
        const messageLength = this._messageLength;
        const fragments = this._fragments;
        this._totalPayloadLength = 0;
        this._messageLength = 0;
        this._fragmented = 0;
        this._fragments = [];
        if (this._opcode === 2) {
          let data;
          if (this._binaryType === "nodebuffer") {
            data = concat(fragments, messageLength);
          } else if (this._binaryType === "arraybuffer") {
            data = toArrayBuffer(concat(fragments, messageLength));
          } else if (this._binaryType === "blob") {
            data = new Blob(fragments);
          } else {
            data = fragments;
          }
          if (this._allowSynchronousEvents) {
            this.emit("message", data, true);
            this._state = GET_INFO;
          } else {
            this._state = DEFER_EVENT;
            setImmediate(() => {
              this.emit("message", data, true);
              this._state = GET_INFO;
              this.startLoop(cb);
            });
          }
        } else {
          const buf = concat(fragments, messageLength);
          if (!this._skipUTF8Validation && !isValidUTF8(buf)) {
            const error = this.createError(
              Error,
              "invalid UTF-8 sequence",
              true,
              1007,
              "WS_ERR_INVALID_UTF8"
            );
            cb(error);
            return;
          }
          if (this._state === INFLATING || this._allowSynchronousEvents) {
            this.emit("message", buf, false);
            this._state = GET_INFO;
          } else {
            this._state = DEFER_EVENT;
            setImmediate(() => {
              this.emit("message", buf, false);
              this._state = GET_INFO;
              this.startLoop(cb);
            });
          }
        }
      }
      /**
       * Handles a control message.
       *
       * @param {Buffer} data Data to handle
       * @return {(Error|RangeError|undefined)} A possible error
       * @private
       */
      controlMessage(data, cb) {
        if (this._opcode === 8) {
          if (data.length === 0) {
            this._loop = false;
            this.emit("conclude", 1005, EMPTY_BUFFER);
            this.end();
          } else {
            const code = data.readUInt16BE(0);
            if (!isValidStatusCode(code)) {
              const error = this.createError(
                RangeError,
                `invalid status code ${code}`,
                true,
                1002,
                "WS_ERR_INVALID_CLOSE_CODE"
              );
              cb(error);
              return;
            }
            const buf = new FastBuffer(
              data.buffer,
              data.byteOffset + 2,
              data.length - 2
            );
            if (!this._skipUTF8Validation && !isValidUTF8(buf)) {
              const error = this.createError(
                Error,
                "invalid UTF-8 sequence",
                true,
                1007,
                "WS_ERR_INVALID_UTF8"
              );
              cb(error);
              return;
            }
            this._loop = false;
            this.emit("conclude", code, buf);
            this.end();
          }
          this._state = GET_INFO;
          return;
        }
        if (this._allowSynchronousEvents) {
          this.emit(this._opcode === 9 ? "ping" : "pong", data);
          this._state = GET_INFO;
        } else {
          this._state = DEFER_EVENT;
          setImmediate(() => {
            this.emit(this._opcode === 9 ? "ping" : "pong", data);
            this._state = GET_INFO;
            this.startLoop(cb);
          });
        }
      }
      /**
       * Builds an error object.
       *
       * @param {function(new:Error|RangeError)} ErrorCtor The error constructor
       * @param {String} message The error message
       * @param {Boolean} prefix Specifies whether or not to add a default prefix to
       *     `message`
       * @param {Number} statusCode The status code
       * @param {String} errorCode The exposed error code
       * @return {(Error|RangeError)} The error
       * @private
       */
      createError(ErrorCtor, message, prefix, statusCode, errorCode) {
        this._loop = false;
        this._errored = true;
        const err = new ErrorCtor(
          prefix ? `Invalid WebSocket frame: ${message}` : message
        );
        Error.captureStackTrace(err, this.createError);
        err.code = errorCode;
        err[kStatusCode] = statusCode;
        return err;
      }
    };
    module.exports = Receiver2;
  }
});

// ../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/sender.js
var require_sender = __commonJS({
  "../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/sender.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var { Duplex: Duplex4 } = __require("stream");
    var { randomFillSync } = __require("crypto");
    var PerMessageDeflate = require_permessage_deflate();
    var { EMPTY_BUFFER, kWebSocket, NOOP } = require_constants2();
    var { isBlob, isValidStatusCode } = require_validation();
    var { mask: applyMask, toBuffer } = require_buffer_util();
    var kByteLength = Symbol("kByteLength");
    var maskBuffer = Buffer.alloc(4);
    var RANDOM_POOL_SIZE = 8 * 1024;
    var randomPool;
    var randomPoolPointer = RANDOM_POOL_SIZE;
    var DEFAULT = 0;
    var DEFLATING = 1;
    var GET_BLOB_DATA = 2;
    var Sender2 = class _Sender {
      /**
       * Creates a Sender instance.
       *
       * @param {Duplex} socket The connection socket
       * @param {Object} [extensions] An object containing the negotiated extensions
       * @param {Function} [generateMask] The function used to generate the masking
       *     key
       */
      constructor(socket, extensions, generateMask) {
        this._extensions = extensions || {};
        if (generateMask) {
          this._generateMask = generateMask;
          this._maskBuffer = Buffer.alloc(4);
        }
        this._socket = socket;
        this._firstFragment = true;
        this._compress = false;
        this._bufferedBytes = 0;
        this._queue = [];
        this._state = DEFAULT;
        this.onerror = NOOP;
        this[kWebSocket] = void 0;
      }
      /**
       * Frames a piece of data according to the HyBi WebSocket protocol.
       *
       * @param {(Buffer|String)} data The data to frame
       * @param {Object} options Options object
       * @param {Boolean} [options.fin=false] Specifies whether or not to set the
       *     FIN bit
       * @param {Function} [options.generateMask] The function used to generate the
       *     masking key
       * @param {Boolean} [options.mask=false] Specifies whether or not to mask
       *     `data`
       * @param {Buffer} [options.maskBuffer] The buffer used to store the masking
       *     key
       * @param {Number} options.opcode The opcode
       * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
       *     modified
       * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
       *     RSV1 bit
       * @return {(Buffer|String)[]} The framed data
       * @public
       */
      static frame(data, options) {
        let mask;
        let merge = false;
        let offset = 2;
        let skipMasking = false;
        if (options.mask) {
          mask = options.maskBuffer || maskBuffer;
          if (options.generateMask) {
            options.generateMask(mask);
          } else {
            if (randomPoolPointer === RANDOM_POOL_SIZE) {
              if (randomPool === void 0) {
                randomPool = Buffer.alloc(RANDOM_POOL_SIZE);
              }
              randomFillSync(randomPool, 0, RANDOM_POOL_SIZE);
              randomPoolPointer = 0;
            }
            mask[0] = randomPool[randomPoolPointer++];
            mask[1] = randomPool[randomPoolPointer++];
            mask[2] = randomPool[randomPoolPointer++];
            mask[3] = randomPool[randomPoolPointer++];
          }
          skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;
          offset = 6;
        }
        let dataLength;
        if (typeof data === "string") {
          if ((!options.mask || skipMasking) && options[kByteLength] !== void 0) {
            dataLength = options[kByteLength];
          } else {
            data = Buffer.from(data);
            dataLength = data.length;
          }
        } else {
          dataLength = data.length;
          merge = options.mask && options.readOnly && !skipMasking;
        }
        let payloadLength = dataLength;
        if (dataLength >= 65536) {
          offset += 8;
          payloadLength = 127;
        } else if (dataLength > 125) {
          offset += 2;
          payloadLength = 126;
        }
        const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);
        target[0] = options.fin ? options.opcode | 128 : options.opcode;
        if (options.rsv1) target[0] |= 64;
        target[1] = payloadLength;
        if (payloadLength === 126) {
          target.writeUInt16BE(dataLength, 2);
        } else if (payloadLength === 127) {
          target[2] = target[3] = 0;
          target.writeUIntBE(dataLength, 4, 6);
        }
        if (!options.mask) return [target, data];
        target[1] |= 128;
        target[offset - 4] = mask[0];
        target[offset - 3] = mask[1];
        target[offset - 2] = mask[2];
        target[offset - 1] = mask[3];
        if (skipMasking) return [target, data];
        if (merge) {
          applyMask(data, mask, target, offset, dataLength);
          return [target];
        }
        applyMask(data, mask, data, 0, dataLength);
        return [target, data];
      }
      /**
       * Sends a close message to the other peer.
       *
       * @param {Number} [code] The status code component of the body
       * @param {(String|Buffer)} [data] The message component of the body
       * @param {Boolean} [mask=false] Specifies whether or not to mask the message
       * @param {Function} [cb] Callback
       * @public
       */
      close(code, data, mask, cb) {
        let buf;
        if (code === void 0) {
          buf = EMPTY_BUFFER;
        } else if (typeof code !== "number" || !isValidStatusCode(code)) {
          throw new TypeError("First argument must be a valid error code number");
        } else if (data === void 0 || !data.length) {
          buf = Buffer.allocUnsafe(2);
          buf.writeUInt16BE(code, 0);
        } else {
          const length = Buffer.byteLength(data);
          if (length > 123) {
            throw new RangeError("The message must not be greater than 123 bytes");
          }
          buf = Buffer.allocUnsafe(2 + length);
          buf.writeUInt16BE(code, 0);
          if (typeof data === "string") {
            buf.write(data, 2);
          } else {
            buf.set(data, 2);
          }
        }
        const options = {
          [kByteLength]: buf.length,
          fin: true,
          generateMask: this._generateMask,
          mask,
          maskBuffer: this._maskBuffer,
          opcode: 8,
          readOnly: false,
          rsv1: false
        };
        if (this._state !== DEFAULT) {
          this.enqueue([this.dispatch, buf, false, options, cb]);
        } else {
          this.sendFrame(_Sender.frame(buf, options), cb);
        }
      }
      /**
       * Sends a ping message to the other peer.
       *
       * @param {*} data The message to send
       * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
       * @param {Function} [cb] Callback
       * @public
       */
      ping(data, mask, cb) {
        let byteLength;
        let readOnly;
        if (typeof data === "string") {
          byteLength = Buffer.byteLength(data);
          readOnly = false;
        } else if (isBlob(data)) {
          byteLength = data.size;
          readOnly = false;
        } else {
          data = toBuffer(data);
          byteLength = data.length;
          readOnly = toBuffer.readOnly;
        }
        if (byteLength > 125) {
          throw new RangeError("The data size must not be greater than 125 bytes");
        }
        const options = {
          [kByteLength]: byteLength,
          fin: true,
          generateMask: this._generateMask,
          mask,
          maskBuffer: this._maskBuffer,
          opcode: 9,
          readOnly,
          rsv1: false
        };
        if (isBlob(data)) {
          if (this._state !== DEFAULT) {
            this.enqueue([this.getBlobData, data, false, options, cb]);
          } else {
            this.getBlobData(data, false, options, cb);
          }
        } else if (this._state !== DEFAULT) {
          this.enqueue([this.dispatch, data, false, options, cb]);
        } else {
          this.sendFrame(_Sender.frame(data, options), cb);
        }
      }
      /**
       * Sends a pong message to the other peer.
       *
       * @param {*} data The message to send
       * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
       * @param {Function} [cb] Callback
       * @public
       */
      pong(data, mask, cb) {
        let byteLength;
        let readOnly;
        if (typeof data === "string") {
          byteLength = Buffer.byteLength(data);
          readOnly = false;
        } else if (isBlob(data)) {
          byteLength = data.size;
          readOnly = false;
        } else {
          data = toBuffer(data);
          byteLength = data.length;
          readOnly = toBuffer.readOnly;
        }
        if (byteLength > 125) {
          throw new RangeError("The data size must not be greater than 125 bytes");
        }
        const options = {
          [kByteLength]: byteLength,
          fin: true,
          generateMask: this._generateMask,
          mask,
          maskBuffer: this._maskBuffer,
          opcode: 10,
          readOnly,
          rsv1: false
        };
        if (isBlob(data)) {
          if (this._state !== DEFAULT) {
            this.enqueue([this.getBlobData, data, false, options, cb]);
          } else {
            this.getBlobData(data, false, options, cb);
          }
        } else if (this._state !== DEFAULT) {
          this.enqueue([this.dispatch, data, false, options, cb]);
        } else {
          this.sendFrame(_Sender.frame(data, options), cb);
        }
      }
      /**
       * Sends a data message to the other peer.
       *
       * @param {*} data The message to send
       * @param {Object} options Options object
       * @param {Boolean} [options.binary=false] Specifies whether `data` is binary
       *     or text
       * @param {Boolean} [options.compress=false] Specifies whether or not to
       *     compress `data`
       * @param {Boolean} [options.fin=false] Specifies whether the fragment is the
       *     last one
       * @param {Boolean} [options.mask=false] Specifies whether or not to mask
       *     `data`
       * @param {Function} [cb] Callback
       * @public
       */
      send(data, options, cb) {
        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
        let opcode = options.binary ? 2 : 1;
        let rsv1 = options.compress;
        let byteLength;
        let readOnly;
        if (typeof data === "string") {
          byteLength = Buffer.byteLength(data);
          readOnly = false;
        } else if (isBlob(data)) {
          byteLength = data.size;
          readOnly = false;
        } else {
          data = toBuffer(data);
          byteLength = data.length;
          readOnly = toBuffer.readOnly;
        }
        if (this._firstFragment) {
          this._firstFragment = false;
          if (rsv1 && perMessageDeflate && perMessageDeflate.params[perMessageDeflate._isServer ? "server_no_context_takeover" : "client_no_context_takeover"]) {
            rsv1 = byteLength >= perMessageDeflate._threshold;
          }
          this._compress = rsv1;
        } else {
          rsv1 = false;
          opcode = 0;
        }
        if (options.fin) this._firstFragment = true;
        const opts = {
          [kByteLength]: byteLength,
          fin: options.fin,
          generateMask: this._generateMask,
          mask: options.mask,
          maskBuffer: this._maskBuffer,
          opcode,
          readOnly,
          rsv1
        };
        if (isBlob(data)) {
          if (this._state !== DEFAULT) {
            this.enqueue([this.getBlobData, data, this._compress, opts, cb]);
          } else {
            this.getBlobData(data, this._compress, opts, cb);
          }
        } else if (this._state !== DEFAULT) {
          this.enqueue([this.dispatch, data, this._compress, opts, cb]);
        } else {
          this.dispatch(data, this._compress, opts, cb);
        }
      }
      /**
       * Gets the contents of a blob as binary data.
       *
       * @param {Blob} blob The blob
       * @param {Boolean} [compress=false] Specifies whether or not to compress
       *     the data
       * @param {Object} options Options object
       * @param {Boolean} [options.fin=false] Specifies whether or not to set the
       *     FIN bit
       * @param {Function} [options.generateMask] The function used to generate the
       *     masking key
       * @param {Boolean} [options.mask=false] Specifies whether or not to mask
       *     `data`
       * @param {Buffer} [options.maskBuffer] The buffer used to store the masking
       *     key
       * @param {Number} options.opcode The opcode
       * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
       *     modified
       * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
       *     RSV1 bit
       * @param {Function} [cb] Callback
       * @private
       */
      getBlobData(blob, compress, options, cb) {
        this._bufferedBytes += options[kByteLength];
        this._state = GET_BLOB_DATA;
        blob.arrayBuffer().then((arrayBuffer) => {
          if (this._socket.destroyed) {
            const err = new Error(
              "The socket was closed while the blob was being read"
            );
            process.nextTick(callCallbacks, this, err, cb);
            return;
          }
          this._bufferedBytes -= options[kByteLength];
          const data = toBuffer(arrayBuffer);
          if (!compress) {
            this._state = DEFAULT;
            this.sendFrame(_Sender.frame(data, options), cb);
            this.dequeue();
          } else {
            this.dispatch(data, compress, options, cb);
          }
        }).catch((err) => {
          process.nextTick(onError, this, err, cb);
        });
      }
      /**
       * Dispatches a message.
       *
       * @param {(Buffer|String)} data The message to send
       * @param {Boolean} [compress=false] Specifies whether or not to compress
       *     `data`
       * @param {Object} options Options object
       * @param {Boolean} [options.fin=false] Specifies whether or not to set the
       *     FIN bit
       * @param {Function} [options.generateMask] The function used to generate the
       *     masking key
       * @param {Boolean} [options.mask=false] Specifies whether or not to mask
       *     `data`
       * @param {Buffer} [options.maskBuffer] The buffer used to store the masking
       *     key
       * @param {Number} options.opcode The opcode
       * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
       *     modified
       * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
       *     RSV1 bit
       * @param {Function} [cb] Callback
       * @private
       */
      dispatch(data, compress, options, cb) {
        if (!compress) {
          this.sendFrame(_Sender.frame(data, options), cb);
          return;
        }
        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
        this._bufferedBytes += options[kByteLength];
        this._state = DEFLATING;
        perMessageDeflate.compress(data, options.fin, (_2, buf) => {
          if (this._socket.destroyed) {
            const err = new Error(
              "The socket was closed while data was being compressed"
            );
            callCallbacks(this, err, cb);
            return;
          }
          this._bufferedBytes -= options[kByteLength];
          this._state = DEFAULT;
          options.readOnly = false;
          this.sendFrame(_Sender.frame(buf, options), cb);
          this.dequeue();
        });
      }
      /**
       * Executes queued send operations.
       *
       * @private
       */
      dequeue() {
        while (this._state === DEFAULT && this._queue.length) {
          const params = this._queue.shift();
          this._bufferedBytes -= params[3][kByteLength];
          Reflect.apply(params[0], this, params.slice(1));
        }
      }
      /**
       * Enqueues a send operation.
       *
       * @param {Array} params Send operation parameters.
       * @private
       */
      enqueue(params) {
        this._bufferedBytes += params[3][kByteLength];
        this._queue.push(params);
      }
      /**
       * Sends a frame.
       *
       * @param {(Buffer | String)[]} list The frame to send
       * @param {Function} [cb] Callback
       * @private
       */
      sendFrame(list, cb) {
        if (list.length === 2) {
          this._socket.cork();
          this._socket.write(list[0]);
          this._socket.write(list[1], cb);
          this._socket.uncork();
        } else {
          this._socket.write(list[0], cb);
        }
      }
    };
    module.exports = Sender2;
    function callCallbacks(sender, err, cb) {
      if (typeof cb === "function") cb(err);
      for (let i2 = 0; i2 < sender._queue.length; i2++) {
        const params = sender._queue[i2];
        const callback = params[params.length - 1];
        if (typeof callback === "function") callback(err);
      }
    }
    function onError(sender, err, cb) {
      callCallbacks(sender, err, cb);
      sender.onerror(err);
    }
  }
});

// ../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/event-target.js
var require_event_target = __commonJS({
  "../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/event-target.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var { kForOnEventAttribute, kListener } = require_constants2();
    var kCode = Symbol("kCode");
    var kData = Symbol("kData");
    var kError = Symbol("kError");
    var kMessage = Symbol("kMessage");
    var kReason = Symbol("kReason");
    var kTarget = Symbol("kTarget");
    var kType = Symbol("kType");
    var kWasClean = Symbol("kWasClean");
    var Event2 = class {
      /**
       * Create a new `Event`.
       *
       * @param {String} type The name of the event
       * @throws {TypeError} If the `type` argument is not specified
       */
      constructor(type) {
        this[kTarget] = null;
        this[kType] = type;
      }
      /**
       * @type {*}
       */
      get target() {
        return this[kTarget];
      }
      /**
       * @type {String}
       */
      get type() {
        return this[kType];
      }
    };
    Object.defineProperty(Event2.prototype, "target", { enumerable: true });
    Object.defineProperty(Event2.prototype, "type", { enumerable: true });
    var CloseEvent2 = class extends Event2 {
      /**
       * Create a new `CloseEvent`.
       *
       * @param {String} type The name of the event
       * @param {Object} [options] A dictionary object that allows for setting
       *     attributes via object members of the same name
       * @param {Number} [options.code=0] The status code explaining why the
       *     connection was closed
       * @param {String} [options.reason=''] A human-readable string explaining why
       *     the connection was closed
       * @param {Boolean} [options.wasClean=false] Indicates whether or not the
       *     connection was cleanly closed
       */
      constructor(type, options = {}) {
        super(type);
        this[kCode] = options.code === void 0 ? 0 : options.code;
        this[kReason] = options.reason === void 0 ? "" : options.reason;
        this[kWasClean] = options.wasClean === void 0 ? false : options.wasClean;
      }
      /**
       * @type {Number}
       */
      get code() {
        return this[kCode];
      }
      /**
       * @type {String}
       */
      get reason() {
        return this[kReason];
      }
      /**
       * @type {Boolean}
       */
      get wasClean() {
        return this[kWasClean];
      }
    };
    Object.defineProperty(CloseEvent2.prototype, "code", { enumerable: true });
    Object.defineProperty(CloseEvent2.prototype, "reason", { enumerable: true });
    Object.defineProperty(CloseEvent2.prototype, "wasClean", { enumerable: true });
    var ErrorEvent2 = class extends Event2 {
      /**
       * Create a new `ErrorEvent`.
       *
       * @param {String} type The name of the event
       * @param {Object} [options] A dictionary object that allows for setting
       *     attributes via object members of the same name
       * @param {*} [options.error=null] The error that generated this event
       * @param {String} [options.message=''] The error message
       */
      constructor(type, options = {}) {
        super(type);
        this[kError] = options.error === void 0 ? null : options.error;
        this[kMessage] = options.message === void 0 ? "" : options.message;
      }
      /**
       * @type {*}
       */
      get error() {
        return this[kError];
      }
      /**
       * @type {String}
       */
      get message() {
        return this[kMessage];
      }
    };
    Object.defineProperty(ErrorEvent2.prototype, "error", { enumerable: true });
    Object.defineProperty(ErrorEvent2.prototype, "message", { enumerable: true });
    var MessageEvent2 = class extends Event2 {
      /**
       * Create a new `MessageEvent`.
       *
       * @param {String} type The name of the event
       * @param {Object} [options] A dictionary object that allows for setting
       *     attributes via object members of the same name
       * @param {*} [options.data=null] The message content
       */
      constructor(type, options = {}) {
        super(type);
        this[kData] = options.data === void 0 ? null : options.data;
      }
      /**
       * @type {*}
       */
      get data() {
        return this[kData];
      }
    };
    Object.defineProperty(MessageEvent2.prototype, "data", { enumerable: true });
    var EventTarget = {
      /**
       * Register an event listener.
       *
       * @param {String} type A string representing the event type to listen for
       * @param {(Function|Object)} handler The listener to add
       * @param {Object} [options] An options object specifies characteristics about
       *     the event listener
       * @param {Boolean} [options.once=false] A `Boolean` indicating that the
       *     listener should be invoked at most once after being added. If `true`,
       *     the listener would be automatically removed when invoked.
       * @public
       */
      addEventListener(type, handler, options = {}) {
        for (const listener of this.listeners(type)) {
          if (!options[kForOnEventAttribute] && listener[kListener] === handler && !listener[kForOnEventAttribute]) {
            return;
          }
        }
        let wrapper;
        if (type === "message") {
          wrapper = function onMessage2(data, isBinary) {
            const event = new MessageEvent2("message", {
              data: isBinary ? data : data.toString()
            });
            event[kTarget] = this;
            callListener(handler, this, event);
          };
        } else if (type === "close") {
          wrapper = function onClose(code, message) {
            const event = new CloseEvent2("close", {
              code,
              reason: message.toString(),
              wasClean: this._closeFrameReceived && this._closeFrameSent
            });
            event[kTarget] = this;
            callListener(handler, this, event);
          };
        } else if (type === "error") {
          wrapper = function onError(error) {
            const event = new ErrorEvent2("error", {
              error,
              message: error.message
            });
            event[kTarget] = this;
            callListener(handler, this, event);
          };
        } else if (type === "open") {
          wrapper = function onOpen() {
            const event = new Event2("open");
            event[kTarget] = this;
            callListener(handler, this, event);
          };
        } else {
          return;
        }
        wrapper[kForOnEventAttribute] = !!options[kForOnEventAttribute];
        wrapper[kListener] = handler;
        if (options.once) {
          this.once(type, wrapper);
        } else {
          this.on(type, wrapper);
        }
      },
      /**
       * Remove an event listener.
       *
       * @param {String} type A string representing the event type to remove
       * @param {(Function|Object)} handler The listener to remove
       * @public
       */
      removeEventListener(type, handler) {
        for (const listener of this.listeners(type)) {
          if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {
            this.removeListener(type, listener);
            break;
          }
        }
      }
    };
    module.exports = {
      CloseEvent: CloseEvent2,
      ErrorEvent: ErrorEvent2,
      Event: Event2,
      EventTarget,
      MessageEvent: MessageEvent2
    };
    function callListener(listener, thisArg, event) {
      if (typeof listener === "object" && listener.handleEvent) {
        listener.handleEvent.call(listener, event);
      } else {
        listener.call(thisArg, event);
      }
    }
  }
});

// ../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/extension.js
var require_extension = __commonJS({
  "../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/extension.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var { tokenChars } = require_validation();
    function push(dest, name, elem) {
      if (dest[name] === void 0) dest[name] = [elem];
      else dest[name].push(elem);
    }
    function parse(header) {
      const offers = /* @__PURE__ */ Object.create(null);
      let params = /* @__PURE__ */ Object.create(null);
      let mustUnescape = false;
      let isEscaping = false;
      let inQuotes = false;
      let extensionName;
      let paramName;
      let start = -1;
      let code = -1;
      let end = -1;
      let i2 = 0;
      for (; i2 < header.length; i2++) {
        code = header.charCodeAt(i2);
        if (extensionName === void 0) {
          if (end === -1 && tokenChars[code] === 1) {
            if (start === -1) start = i2;
          } else if (i2 !== 0 && (code === 32 || code === 9)) {
            if (end === -1 && start !== -1) end = i2;
          } else if (code === 59 || code === 44) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i2}`);
            }
            if (end === -1) end = i2;
            const name = header.slice(start, end);
            if (code === 44) {
              push(offers, name, params);
              params = /* @__PURE__ */ Object.create(null);
            } else {
              extensionName = name;
            }
            start = end = -1;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i2}`);
          }
        } else if (paramName === void 0) {
          if (end === -1 && tokenChars[code] === 1) {
            if (start === -1) start = i2;
          } else if (code === 32 || code === 9) {
            if (end === -1 && start !== -1) end = i2;
          } else if (code === 59 || code === 44) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i2}`);
            }
            if (end === -1) end = i2;
            push(params, header.slice(start, end), true);
            if (code === 44) {
              push(offers, extensionName, params);
              params = /* @__PURE__ */ Object.create(null);
              extensionName = void 0;
            }
            start = end = -1;
          } else if (code === 61 && start !== -1 && end === -1) {
            paramName = header.slice(start, i2);
            start = end = -1;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i2}`);
          }
        } else {
          if (isEscaping) {
            if (tokenChars[code] !== 1) {
              throw new SyntaxError(`Unexpected character at index ${i2}`);
            }
            if (start === -1) start = i2;
            else if (!mustUnescape) mustUnescape = true;
            isEscaping = false;
          } else if (inQuotes) {
            if (tokenChars[code] === 1) {
              if (start === -1) start = i2;
            } else if (code === 34 && start !== -1) {
              inQuotes = false;
              end = i2;
            } else if (code === 92) {
              isEscaping = true;
            } else {
              throw new SyntaxError(`Unexpected character at index ${i2}`);
            }
          } else if (code === 34 && header.charCodeAt(i2 - 1) === 61) {
            inQuotes = true;
          } else if (end === -1 && tokenChars[code] === 1) {
            if (start === -1) start = i2;
          } else if (start !== -1 && (code === 32 || code === 9)) {
            if (end === -1) end = i2;
          } else if (code === 59 || code === 44) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i2}`);
            }
            if (end === -1) end = i2;
            let value2 = header.slice(start, end);
            if (mustUnescape) {
              value2 = value2.replace(/\\/g, "");
              mustUnescape = false;
            }
            push(params, paramName, value2);
            if (code === 44) {
              push(offers, extensionName, params);
              params = /* @__PURE__ */ Object.create(null);
              extensionName = void 0;
            }
            paramName = void 0;
            start = end = -1;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i2}`);
          }
        }
      }
      if (start === -1 || inQuotes || code === 32 || code === 9) {
        throw new SyntaxError("Unexpected end of input");
      }
      if (end === -1) end = i2;
      const token = header.slice(start, end);
      if (extensionName === void 0) {
        push(offers, token, params);
      } else {
        if (paramName === void 0) {
          push(params, token, true);
        } else if (mustUnescape) {
          push(params, paramName, token.replace(/\\/g, ""));
        } else {
          push(params, paramName, token);
        }
        push(offers, extensionName, params);
      }
      return offers;
    }
    function format2(extensions) {
      return Object.keys(extensions).map((extension) => {
        let configurations = extensions[extension];
        if (!Array.isArray(configurations)) configurations = [configurations];
        return configurations.map((params) => {
          return [extension].concat(
            Object.keys(params).map((k3) => {
              let values = params[k3];
              if (!Array.isArray(values)) values = [values];
              return values.map((v) => v === true ? k3 : `${k3}=${v}`).join("; ");
            })
          ).join("; ");
        }).join(", ");
      }).join(", ");
    }
    module.exports = { format: format2, parse };
  }
});

// ../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/websocket.js
var require_websocket = __commonJS({
  "../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/websocket.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var EventEmitter2 = __require("events");
    var https = __require("https");
    var http = __require("http");
    var net = __require("net");
    var tls = __require("tls");
    var { randomBytes, createHash } = __require("crypto");
    var { Duplex: Duplex4, Readable: Readable5 } = __require("stream");
    var { URL: URL2 } = __require("url");
    var PerMessageDeflate = require_permessage_deflate();
    var Receiver2 = require_receiver();
    var Sender2 = require_sender();
    var { isBlob } = require_validation();
    var {
      BINARY_TYPES,
      EMPTY_BUFFER,
      GUID,
      kForOnEventAttribute,
      kListener,
      kStatusCode,
      kWebSocket,
      NOOP
    } = require_constants2();
    var {
      EventTarget: { addEventListener: addEventListener2, removeEventListener }
    } = require_event_target();
    var { format: format2, parse } = require_extension();
    var { toBuffer } = require_buffer_util();
    var closeTimeout = 30 * 1e3;
    var kAborted = Symbol("kAborted");
    var protocolVersions = [8, 13];
    var readyStates = ["CONNECTING", "OPEN", "CLOSING", "CLOSED"];
    var subprotocolRegex = /^[!#$%&'*+\-.0-9A-Z^_`|a-z~]+$/;
    var WebSocket2 = class _WebSocket extends EventEmitter2 {
      /**
       * Create a new `WebSocket`.
       *
       * @param {(String|URL)} address The URL to which to connect
       * @param {(String|String[])} [protocols] The subprotocols
       * @param {Object} [options] Connection options
       */
      constructor(address, protocols, options) {
        super();
        this._binaryType = BINARY_TYPES[0];
        this._closeCode = 1006;
        this._closeFrameReceived = false;
        this._closeFrameSent = false;
        this._closeMessage = EMPTY_BUFFER;
        this._closeTimer = null;
        this._errorEmitted = false;
        this._extensions = {};
        this._paused = false;
        this._protocol = "";
        this._readyState = _WebSocket.CONNECTING;
        this._receiver = null;
        this._sender = null;
        this._socket = null;
        if (address !== null) {
          this._bufferedAmount = 0;
          this._isServer = false;
          this._redirects = 0;
          if (protocols === void 0) {
            protocols = [];
          } else if (!Array.isArray(protocols)) {
            if (typeof protocols === "object" && protocols !== null) {
              options = protocols;
              protocols = [];
            } else {
              protocols = [protocols];
            }
          }
          initAsClient(this, address, protocols, options);
        } else {
          this._autoPong = options.autoPong;
          this._isServer = true;
        }
      }
      /**
       * For historical reasons, the custom "nodebuffer" type is used by the default
       * instead of "blob".
       *
       * @type {String}
       */
      get binaryType() {
        return this._binaryType;
      }
      set binaryType(type) {
        if (!BINARY_TYPES.includes(type)) return;
        this._binaryType = type;
        if (this._receiver) this._receiver._binaryType = type;
      }
      /**
       * @type {Number}
       */
      get bufferedAmount() {
        if (!this._socket) return this._bufferedAmount;
        return this._socket._writableState.length + this._sender._bufferedBytes;
      }
      /**
       * @type {String}
       */
      get extensions() {
        return Object.keys(this._extensions).join();
      }
      /**
       * @type {Boolean}
       */
      get isPaused() {
        return this._paused;
      }
      /**
       * @type {Function}
       */
      /* istanbul ignore next */
      get onclose() {
        return null;
      }
      /**
       * @type {Function}
       */
      /* istanbul ignore next */
      get onerror() {
        return null;
      }
      /**
       * @type {Function}
       */
      /* istanbul ignore next */
      get onopen() {
        return null;
      }
      /**
       * @type {Function}
       */
      /* istanbul ignore next */
      get onmessage() {
        return null;
      }
      /**
       * @type {String}
       */
      get protocol() {
        return this._protocol;
      }
      /**
       * @type {Number}
       */
      get readyState() {
        return this._readyState;
      }
      /**
       * @type {String}
       */
      get url() {
        return this._url;
      }
      /**
       * Set up the socket and the internal resources.
       *
       * @param {Duplex} socket The network socket between the server and client
       * @param {Buffer} head The first packet of the upgraded stream
       * @param {Object} options Options object
       * @param {Boolean} [options.allowSynchronousEvents=false] Specifies whether
       *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted
       *     multiple times in the same tick
       * @param {Function} [options.generateMask] The function used to generate the
       *     masking key
       * @param {Number} [options.maxPayload=0] The maximum allowed message size
       * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
       *     not to skip UTF-8 validation for text and close messages
       * @private
       */
      setSocket(socket, head, options) {
        const receiver = new Receiver2({
          allowSynchronousEvents: options.allowSynchronousEvents,
          binaryType: this.binaryType,
          extensions: this._extensions,
          isServer: this._isServer,
          maxPayload: options.maxPayload,
          skipUTF8Validation: options.skipUTF8Validation
        });
        const sender = new Sender2(socket, this._extensions, options.generateMask);
        this._receiver = receiver;
        this._sender = sender;
        this._socket = socket;
        receiver[kWebSocket] = this;
        sender[kWebSocket] = this;
        socket[kWebSocket] = this;
        receiver.on("conclude", receiverOnConclude);
        receiver.on("drain", receiverOnDrain);
        receiver.on("error", receiverOnError);
        receiver.on("message", receiverOnMessage);
        receiver.on("ping", receiverOnPing);
        receiver.on("pong", receiverOnPong);
        sender.onerror = senderOnError;
        if (socket.setTimeout) socket.setTimeout(0);
        if (socket.setNoDelay) socket.setNoDelay();
        if (head.length > 0) socket.unshift(head);
        socket.on("close", socketOnClose);
        socket.on("data", socketOnData);
        socket.on("end", socketOnEnd);
        socket.on("error", socketOnError);
        this._readyState = _WebSocket.OPEN;
        this.emit("open");
      }
      /**
       * Emit the `'close'` event.
       *
       * @private
       */
      emitClose() {
        if (!this._socket) {
          this._readyState = _WebSocket.CLOSED;
          this.emit("close", this._closeCode, this._closeMessage);
          return;
        }
        if (this._extensions[PerMessageDeflate.extensionName]) {
          this._extensions[PerMessageDeflate.extensionName].cleanup();
        }
        this._receiver.removeAllListeners();
        this._readyState = _WebSocket.CLOSED;
        this.emit("close", this._closeCode, this._closeMessage);
      }
      /**
       * Start a closing handshake.
       *
       *          +----------+   +-----------+   +----------+
       *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -
       *    |     +----------+   +-----------+   +----------+     |
       *          +----------+   +-----------+         |
       * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING
       *          +----------+   +-----------+   |
       *    |           |                        |   +---+        |
       *                +------------------------+-->|fin| - - - -
       *    |         +---+                      |   +---+
       *     - - - - -|fin|<---------------------+
       *              +---+
       *
       * @param {Number} [code] Status code explaining why the connection is closing
       * @param {(String|Buffer)} [data] The reason why the connection is
       *     closing
       * @public
       */
      close(code, data) {
        if (this.readyState === _WebSocket.CLOSED) return;
        if (this.readyState === _WebSocket.CONNECTING) {
          const msg = "WebSocket was closed before the connection was established";
          abortHandshake(this, this._req, msg);
          return;
        }
        if (this.readyState === _WebSocket.CLOSING) {
          if (this._closeFrameSent && (this._closeFrameReceived || this._receiver._writableState.errorEmitted)) {
            this._socket.end();
          }
          return;
        }
        this._readyState = _WebSocket.CLOSING;
        this._sender.close(code, data, !this._isServer, (err) => {
          if (err) return;
          this._closeFrameSent = true;
          if (this._closeFrameReceived || this._receiver._writableState.errorEmitted) {
            this._socket.end();
          }
        });
        setCloseTimer(this);
      }
      /**
       * Pause the socket.
       *
       * @public
       */
      pause() {
        if (this.readyState === _WebSocket.CONNECTING || this.readyState === _WebSocket.CLOSED) {
          return;
        }
        this._paused = true;
        this._socket.pause();
      }
      /**
       * Send a ping.
       *
       * @param {*} [data] The data to send
       * @param {Boolean} [mask] Indicates whether or not to mask `data`
       * @param {Function} [cb] Callback which is executed when the ping is sent
       * @public
       */
      ping(data, mask, cb) {
        if (this.readyState === _WebSocket.CONNECTING) {
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        }
        if (typeof data === "function") {
          cb = data;
          data = mask = void 0;
        } else if (typeof mask === "function") {
          cb = mask;
          mask = void 0;
        }
        if (typeof data === "number") data = data.toString();
        if (this.readyState !== _WebSocket.OPEN) {
          sendAfterClose(this, data, cb);
          return;
        }
        if (mask === void 0) mask = !this._isServer;
        this._sender.ping(data || EMPTY_BUFFER, mask, cb);
      }
      /**
       * Send a pong.
       *
       * @param {*} [data] The data to send
       * @param {Boolean} [mask] Indicates whether or not to mask `data`
       * @param {Function} [cb] Callback which is executed when the pong is sent
       * @public
       */
      pong(data, mask, cb) {
        if (this.readyState === _WebSocket.CONNECTING) {
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        }
        if (typeof data === "function") {
          cb = data;
          data = mask = void 0;
        } else if (typeof mask === "function") {
          cb = mask;
          mask = void 0;
        }
        if (typeof data === "number") data = data.toString();
        if (this.readyState !== _WebSocket.OPEN) {
          sendAfterClose(this, data, cb);
          return;
        }
        if (mask === void 0) mask = !this._isServer;
        this._sender.pong(data || EMPTY_BUFFER, mask, cb);
      }
      /**
       * Resume the socket.
       *
       * @public
       */
      resume() {
        if (this.readyState === _WebSocket.CONNECTING || this.readyState === _WebSocket.CLOSED) {
          return;
        }
        this._paused = false;
        if (!this._receiver._writableState.needDrain) this._socket.resume();
      }
      /**
       * Send a data message.
       *
       * @param {*} data The message to send
       * @param {Object} [options] Options object
       * @param {Boolean} [options.binary] Specifies whether `data` is binary or
       *     text
       * @param {Boolean} [options.compress] Specifies whether or not to compress
       *     `data`
       * @param {Boolean} [options.fin=true] Specifies whether the fragment is the
       *     last one
       * @param {Boolean} [options.mask] Specifies whether or not to mask `data`
       * @param {Function} [cb] Callback which is executed when data is written out
       * @public
       */
      send(data, options, cb) {
        if (this.readyState === _WebSocket.CONNECTING) {
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        }
        if (typeof options === "function") {
          cb = options;
          options = {};
        }
        if (typeof data === "number") data = data.toString();
        if (this.readyState !== _WebSocket.OPEN) {
          sendAfterClose(this, data, cb);
          return;
        }
        const opts = {
          binary: typeof data !== "string",
          mask: !this._isServer,
          compress: true,
          fin: true,
          ...options
        };
        if (!this._extensions[PerMessageDeflate.extensionName]) {
          opts.compress = false;
        }
        this._sender.send(data || EMPTY_BUFFER, opts, cb);
      }
      /**
       * Forcibly close the connection.
       *
       * @public
       */
      terminate() {
        if (this.readyState === _WebSocket.CLOSED) return;
        if (this.readyState === _WebSocket.CONNECTING) {
          const msg = "WebSocket was closed before the connection was established";
          abortHandshake(this, this._req, msg);
          return;
        }
        if (this._socket) {
          this._readyState = _WebSocket.CLOSING;
          this._socket.destroy();
        }
      }
    };
    Object.defineProperty(WebSocket2, "CONNECTING", {
      enumerable: true,
      value: readyStates.indexOf("CONNECTING")
    });
    Object.defineProperty(WebSocket2.prototype, "CONNECTING", {
      enumerable: true,
      value: readyStates.indexOf("CONNECTING")
    });
    Object.defineProperty(WebSocket2, "OPEN", {
      enumerable: true,
      value: readyStates.indexOf("OPEN")
    });
    Object.defineProperty(WebSocket2.prototype, "OPEN", {
      enumerable: true,
      value: readyStates.indexOf("OPEN")
    });
    Object.defineProperty(WebSocket2, "CLOSING", {
      enumerable: true,
      value: readyStates.indexOf("CLOSING")
    });
    Object.defineProperty(WebSocket2.prototype, "CLOSING", {
      enumerable: true,
      value: readyStates.indexOf("CLOSING")
    });
    Object.defineProperty(WebSocket2, "CLOSED", {
      enumerable: true,
      value: readyStates.indexOf("CLOSED")
    });
    Object.defineProperty(WebSocket2.prototype, "CLOSED", {
      enumerable: true,
      value: readyStates.indexOf("CLOSED")
    });
    [
      "binaryType",
      "bufferedAmount",
      "extensions",
      "isPaused",
      "protocol",
      "readyState",
      "url"
    ].forEach((property) => {
      Object.defineProperty(WebSocket2.prototype, property, { enumerable: true });
    });
    ["open", "error", "close", "message"].forEach((method) => {
      Object.defineProperty(WebSocket2.prototype, `on${method}`, {
        enumerable: true,
        get() {
          for (const listener of this.listeners(method)) {
            if (listener[kForOnEventAttribute]) return listener[kListener];
          }
          return null;
        },
        set(handler) {
          for (const listener of this.listeners(method)) {
            if (listener[kForOnEventAttribute]) {
              this.removeListener(method, listener);
              break;
            }
          }
          if (typeof handler !== "function") return;
          this.addEventListener(method, handler, {
            [kForOnEventAttribute]: true
          });
        }
      });
    });
    WebSocket2.prototype.addEventListener = addEventListener2;
    WebSocket2.prototype.removeEventListener = removeEventListener;
    module.exports = WebSocket2;
    function initAsClient(websocket, address, protocols, options) {
      const opts = {
        allowSynchronousEvents: true,
        autoPong: true,
        protocolVersion: protocolVersions[1],
        maxPayload: 100 * 1024 * 1024,
        skipUTF8Validation: false,
        perMessageDeflate: true,
        followRedirects: false,
        maxRedirects: 10,
        ...options,
        socketPath: void 0,
        hostname: void 0,
        protocol: void 0,
        timeout: void 0,
        method: "GET",
        host: void 0,
        path: void 0,
        port: void 0
      };
      websocket._autoPong = opts.autoPong;
      if (!protocolVersions.includes(opts.protocolVersion)) {
        throw new RangeError(
          `Unsupported protocol version: ${opts.protocolVersion} (supported versions: ${protocolVersions.join(", ")})`
        );
      }
      let parsedUrl;
      if (address instanceof URL2) {
        parsedUrl = address;
      } else {
        try {
          parsedUrl = new URL2(address);
        } catch (e2) {
          throw new SyntaxError(`Invalid URL: ${address}`);
        }
      }
      if (parsedUrl.protocol === "http:") {
        parsedUrl.protocol = "ws:";
      } else if (parsedUrl.protocol === "https:") {
        parsedUrl.protocol = "wss:";
      }
      websocket._url = parsedUrl.href;
      const isSecure = parsedUrl.protocol === "wss:";
      const isIpcUrl = parsedUrl.protocol === "ws+unix:";
      let invalidUrlMessage;
      if (parsedUrl.protocol !== "ws:" && !isSecure && !isIpcUrl) {
        invalidUrlMessage = `The URL's protocol must be one of "ws:", "wss:", "http:", "https", or "ws+unix:"`;
      } else if (isIpcUrl && !parsedUrl.pathname) {
        invalidUrlMessage = "The URL's pathname is empty";
      } else if (parsedUrl.hash) {
        invalidUrlMessage = "The URL contains a fragment identifier";
      }
      if (invalidUrlMessage) {
        const err = new SyntaxError(invalidUrlMessage);
        if (websocket._redirects === 0) {
          throw err;
        } else {
          emitErrorAndClose(websocket, err);
          return;
        }
      }
      const defaultPort = isSecure ? 443 : 80;
      const key = randomBytes(16).toString("base64");
      const request = isSecure ? https.request : http.request;
      const protocolSet = /* @__PURE__ */ new Set();
      let perMessageDeflate;
      opts.createConnection = opts.createConnection || (isSecure ? tlsConnect : netConnect);
      opts.defaultPort = opts.defaultPort || defaultPort;
      opts.port = parsedUrl.port || defaultPort;
      opts.host = parsedUrl.hostname.startsWith("[") ? parsedUrl.hostname.slice(1, -1) : parsedUrl.hostname;
      opts.headers = {
        ...opts.headers,
        "Sec-WebSocket-Version": opts.protocolVersion,
        "Sec-WebSocket-Key": key,
        Connection: "Upgrade",
        Upgrade: "websocket"
      };
      opts.path = parsedUrl.pathname + parsedUrl.search;
      opts.timeout = opts.handshakeTimeout;
      if (opts.perMessageDeflate) {
        perMessageDeflate = new PerMessageDeflate(
          opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},
          false,
          opts.maxPayload
        );
        opts.headers["Sec-WebSocket-Extensions"] = format2({
          [PerMessageDeflate.extensionName]: perMessageDeflate.offer()
        });
      }
      if (protocols.length) {
        for (const protocol of protocols) {
          if (typeof protocol !== "string" || !subprotocolRegex.test(protocol) || protocolSet.has(protocol)) {
            throw new SyntaxError(
              "An invalid or duplicated subprotocol was specified"
            );
          }
          protocolSet.add(protocol);
        }
        opts.headers["Sec-WebSocket-Protocol"] = protocols.join(",");
      }
      if (opts.origin) {
        if (opts.protocolVersion < 13) {
          opts.headers["Sec-WebSocket-Origin"] = opts.origin;
        } else {
          opts.headers.Origin = opts.origin;
        }
      }
      if (parsedUrl.username || parsedUrl.password) {
        opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;
      }
      if (isIpcUrl) {
        const parts = opts.path.split(":");
        opts.socketPath = parts[0];
        opts.path = parts[1];
      }
      let req;
      if (opts.followRedirects) {
        if (websocket._redirects === 0) {
          websocket._originalIpc = isIpcUrl;
          websocket._originalSecure = isSecure;
          websocket._originalHostOrSocketPath = isIpcUrl ? opts.socketPath : parsedUrl.host;
          const headers = options && options.headers;
          options = { ...options, headers: {} };
          if (headers) {
            for (const [key2, value2] of Object.entries(headers)) {
              options.headers[key2.toLowerCase()] = value2;
            }
          }
        } else if (websocket.listenerCount("redirect") === 0) {
          const isSameHost = isIpcUrl ? websocket._originalIpc ? opts.socketPath === websocket._originalHostOrSocketPath : false : websocket._originalIpc ? false : parsedUrl.host === websocket._originalHostOrSocketPath;
          if (!isSameHost || websocket._originalSecure && !isSecure) {
            delete opts.headers.authorization;
            delete opts.headers.cookie;
            if (!isSameHost) delete opts.headers.host;
            opts.auth = void 0;
          }
        }
        if (opts.auth && !options.headers.authorization) {
          options.headers.authorization = "Basic " + Buffer.from(opts.auth).toString("base64");
        }
        req = websocket._req = request(opts);
        if (websocket._redirects) {
          websocket.emit("redirect", websocket.url, req);
        }
      } else {
        req = websocket._req = request(opts);
      }
      if (opts.timeout) {
        req.on("timeout", () => {
          abortHandshake(websocket, req, "Opening handshake has timed out");
        });
      }
      req.on("error", (err) => {
        if (req === null || req[kAborted]) return;
        req = websocket._req = null;
        emitErrorAndClose(websocket, err);
      });
      req.on("response", (res) => {
        const location = res.headers.location;
        const statusCode = res.statusCode;
        if (location && opts.followRedirects && statusCode >= 300 && statusCode < 400) {
          if (++websocket._redirects > opts.maxRedirects) {
            abortHandshake(websocket, req, "Maximum redirects exceeded");
            return;
          }
          req.abort();
          let addr;
          try {
            addr = new URL2(location, address);
          } catch (e2) {
            const err = new SyntaxError(`Invalid URL: ${location}`);
            emitErrorAndClose(websocket, err);
            return;
          }
          initAsClient(websocket, addr, protocols, options);
        } else if (!websocket.emit("unexpected-response", req, res)) {
          abortHandshake(
            websocket,
            req,
            `Unexpected server response: ${res.statusCode}`
          );
        }
      });
      req.on("upgrade", (res, socket, head) => {
        websocket.emit("upgrade", res);
        if (websocket.readyState !== WebSocket2.CONNECTING) return;
        req = websocket._req = null;
        const upgrade = res.headers.upgrade;
        if (upgrade === void 0 || upgrade.toLowerCase() !== "websocket") {
          abortHandshake(websocket, socket, "Invalid Upgrade header");
          return;
        }
        const digest = createHash("sha1").update(key + GUID).digest("base64");
        if (res.headers["sec-websocket-accept"] !== digest) {
          abortHandshake(websocket, socket, "Invalid Sec-WebSocket-Accept header");
          return;
        }
        const serverProt = res.headers["sec-websocket-protocol"];
        let protError;
        if (serverProt !== void 0) {
          if (!protocolSet.size) {
            protError = "Server sent a subprotocol but none was requested";
          } else if (!protocolSet.has(serverProt)) {
            protError = "Server sent an invalid subprotocol";
          }
        } else if (protocolSet.size) {
          protError = "Server sent no subprotocol";
        }
        if (protError) {
          abortHandshake(websocket, socket, protError);
          return;
        }
        if (serverProt) websocket._protocol = serverProt;
        const secWebSocketExtensions = res.headers["sec-websocket-extensions"];
        if (secWebSocketExtensions !== void 0) {
          if (!perMessageDeflate) {
            const message = "Server sent a Sec-WebSocket-Extensions header but no extension was requested";
            abortHandshake(websocket, socket, message);
            return;
          }
          let extensions;
          try {
            extensions = parse(secWebSocketExtensions);
          } catch (err) {
            const message = "Invalid Sec-WebSocket-Extensions header";
            abortHandshake(websocket, socket, message);
            return;
          }
          const extensionNames = Object.keys(extensions);
          if (extensionNames.length !== 1 || extensionNames[0] !== PerMessageDeflate.extensionName) {
            const message = "Server indicated an extension that was not requested";
            abortHandshake(websocket, socket, message);
            return;
          }
          try {
            perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);
          } catch (err) {
            const message = "Invalid Sec-WebSocket-Extensions header";
            abortHandshake(websocket, socket, message);
            return;
          }
          websocket._extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
        }
        websocket.setSocket(socket, head, {
          allowSynchronousEvents: opts.allowSynchronousEvents,
          generateMask: opts.generateMask,
          maxPayload: opts.maxPayload,
          skipUTF8Validation: opts.skipUTF8Validation
        });
      });
      if (opts.finishRequest) {
        opts.finishRequest(req, websocket);
      } else {
        req.end();
      }
    }
    function emitErrorAndClose(websocket, err) {
      websocket._readyState = WebSocket2.CLOSING;
      websocket._errorEmitted = true;
      websocket.emit("error", err);
      websocket.emitClose();
    }
    function netConnect(options) {
      options.path = options.socketPath;
      return net.connect(options);
    }
    function tlsConnect(options) {
      options.path = void 0;
      if (!options.servername && options.servername !== "") {
        options.servername = net.isIP(options.host) ? "" : options.host;
      }
      return tls.connect(options);
    }
    function abortHandshake(websocket, stream, message) {
      websocket._readyState = WebSocket2.CLOSING;
      const err = new Error(message);
      Error.captureStackTrace(err, abortHandshake);
      if (stream.setHeader) {
        stream[kAborted] = true;
        stream.abort();
        if (stream.socket && !stream.socket.destroyed) {
          stream.socket.destroy();
        }
        process.nextTick(emitErrorAndClose, websocket, err);
      } else {
        stream.destroy(err);
        stream.once("error", websocket.emit.bind(websocket, "error"));
        stream.once("close", websocket.emitClose.bind(websocket));
      }
    }
    function sendAfterClose(websocket, data, cb) {
      if (data) {
        const length = isBlob(data) ? data.size : toBuffer(data).length;
        if (websocket._socket) websocket._sender._bufferedBytes += length;
        else websocket._bufferedAmount += length;
      }
      if (cb) {
        const err = new Error(
          `WebSocket is not open: readyState ${websocket.readyState} (${readyStates[websocket.readyState]})`
        );
        process.nextTick(cb, err);
      }
    }
    function receiverOnConclude(code, reason) {
      const websocket = this[kWebSocket];
      websocket._closeFrameReceived = true;
      websocket._closeMessage = reason;
      websocket._closeCode = code;
      if (websocket._socket[kWebSocket] === void 0) return;
      websocket._socket.removeListener("data", socketOnData);
      process.nextTick(resume, websocket._socket);
      if (code === 1005) websocket.close();
      else websocket.close(code, reason);
    }
    function receiverOnDrain() {
      const websocket = this[kWebSocket];
      if (!websocket.isPaused) websocket._socket.resume();
    }
    function receiverOnError(err) {
      const websocket = this[kWebSocket];
      if (websocket._socket[kWebSocket] !== void 0) {
        websocket._socket.removeListener("data", socketOnData);
        process.nextTick(resume, websocket._socket);
        websocket.close(err[kStatusCode]);
      }
      if (!websocket._errorEmitted) {
        websocket._errorEmitted = true;
        websocket.emit("error", err);
      }
    }
    function receiverOnFinish() {
      this[kWebSocket].emitClose();
    }
    function receiverOnMessage(data, isBinary) {
      this[kWebSocket].emit("message", data, isBinary);
    }
    function receiverOnPing(data) {
      const websocket = this[kWebSocket];
      if (websocket._autoPong) websocket.pong(data, !this._isServer, NOOP);
      websocket.emit("ping", data);
    }
    function receiverOnPong(data) {
      this[kWebSocket].emit("pong", data);
    }
    function resume(stream) {
      stream.resume();
    }
    function senderOnError(err) {
      const websocket = this[kWebSocket];
      if (websocket.readyState === WebSocket2.CLOSED) return;
      if (websocket.readyState === WebSocket2.OPEN) {
        websocket._readyState = WebSocket2.CLOSING;
        setCloseTimer(websocket);
      }
      this._socket.end();
      if (!websocket._errorEmitted) {
        websocket._errorEmitted = true;
        websocket.emit("error", err);
      }
    }
    function setCloseTimer(websocket) {
      websocket._closeTimer = setTimeout(
        websocket._socket.destroy.bind(websocket._socket),
        closeTimeout
      );
    }
    function socketOnClose() {
      const websocket = this[kWebSocket];
      this.removeListener("close", socketOnClose);
      this.removeListener("data", socketOnData);
      this.removeListener("end", socketOnEnd);
      websocket._readyState = WebSocket2.CLOSING;
      let chunk;
      if (!this._readableState.endEmitted && !websocket._closeFrameReceived && !websocket._receiver._writableState.errorEmitted && (chunk = websocket._socket.read()) !== null) {
        websocket._receiver.write(chunk);
      }
      websocket._receiver.end();
      this[kWebSocket] = void 0;
      clearTimeout(websocket._closeTimer);
      if (websocket._receiver._writableState.finished || websocket._receiver._writableState.errorEmitted) {
        websocket.emitClose();
      } else {
        websocket._receiver.on("error", receiverOnFinish);
        websocket._receiver.on("finish", receiverOnFinish);
      }
    }
    function socketOnData(chunk) {
      if (!this[kWebSocket]._receiver.write(chunk)) {
        this.pause();
      }
    }
    function socketOnEnd() {
      const websocket = this[kWebSocket];
      websocket._readyState = WebSocket2.CLOSING;
      websocket._receiver.end();
      this.end();
    }
    function socketOnError() {
      const websocket = this[kWebSocket];
      this.removeListener("error", socketOnError);
      this.on("error", NOOP);
      if (websocket) {
        websocket._readyState = WebSocket2.CLOSING;
        this.destroy();
      }
    }
  }
});

// ../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/stream.js
var require_stream = __commonJS({
  "../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/stream.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var WebSocket2 = require_websocket();
    var { Duplex: Duplex4 } = __require("stream");
    function emitClose(stream) {
      stream.emit("close");
    }
    function duplexOnEnd() {
      if (!this.destroyed && this._writableState.finished) {
        this.destroy();
      }
    }
    function duplexOnError(err) {
      this.removeListener("error", duplexOnError);
      this.destroy();
      if (this.listenerCount("error") === 0) {
        this.emit("error", err);
      }
    }
    function createWebSocketStream2(ws, options) {
      let terminateOnDestroy = true;
      const duplex2 = new Duplex4({
        ...options,
        autoDestroy: false,
        emitClose: false,
        objectMode: false,
        writableObjectMode: false
      });
      ws.on("message", function message(msg, isBinary) {
        const data = !isBinary && duplex2._readableState.objectMode ? msg.toString() : msg;
        if (!duplex2.push(data)) ws.pause();
      });
      ws.once("error", function error(err) {
        if (duplex2.destroyed) return;
        terminateOnDestroy = false;
        duplex2.destroy(err);
      });
      ws.once("close", function close() {
        if (duplex2.destroyed) return;
        duplex2.push(null);
      });
      duplex2._destroy = function(err, callback) {
        if (ws.readyState === ws.CLOSED) {
          callback(err);
          process.nextTick(emitClose, duplex2);
          return;
        }
        let called = false;
        ws.once("error", function error(err2) {
          called = true;
          callback(err2);
        });
        ws.once("close", function close() {
          if (!called) callback(err);
          process.nextTick(emitClose, duplex2);
        });
        if (terminateOnDestroy) ws.terminate();
      };
      duplex2._final = function(callback) {
        if (ws.readyState === ws.CONNECTING) {
          ws.once("open", function open() {
            duplex2._final(callback);
          });
          return;
        }
        if (ws._socket === null) return;
        if (ws._socket._writableState.finished) {
          callback();
          if (duplex2._readableState.endEmitted) duplex2.destroy();
        } else {
          ws._socket.once("finish", function finish() {
            callback();
          });
          ws.close();
        }
      };
      duplex2._read = function() {
        if (ws.isPaused) ws.resume();
      };
      duplex2._write = function(chunk, encoding, callback) {
        if (ws.readyState === ws.CONNECTING) {
          ws.once("open", function open() {
            duplex2._write(chunk, encoding, callback);
          });
          return;
        }
        ws.send(chunk, callback);
      };
      duplex2.on("end", duplexOnEnd);
      duplex2.on("error", duplexOnError);
      return duplex2;
    }
    module.exports = createWebSocketStream2;
  }
});

// ../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/subprotocol.js
var require_subprotocol = __commonJS({
  "../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/subprotocol.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var { tokenChars } = require_validation();
    function parse(header) {
      const protocols = /* @__PURE__ */ new Set();
      let start = -1;
      let end = -1;
      let i2 = 0;
      for (i2; i2 < header.length; i2++) {
        const code = header.charCodeAt(i2);
        if (end === -1 && tokenChars[code] === 1) {
          if (start === -1) start = i2;
        } else if (i2 !== 0 && (code === 32 || code === 9)) {
          if (end === -1 && start !== -1) end = i2;
        } else if (code === 44) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i2}`);
          }
          if (end === -1) end = i2;
          const protocol2 = header.slice(start, end);
          if (protocols.has(protocol2)) {
            throw new SyntaxError(`The "${protocol2}" subprotocol is duplicated`);
          }
          protocols.add(protocol2);
          start = end = -1;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i2}`);
        }
      }
      if (start === -1 || end !== -1) {
        throw new SyntaxError("Unexpected end of input");
      }
      const protocol = header.slice(start, i2);
      if (protocols.has(protocol)) {
        throw new SyntaxError(`The "${protocol}" subprotocol is duplicated`);
      }
      protocols.add(protocol);
      return protocols;
    }
    module.exports = { parse };
  }
});

// ../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/websocket-server.js
var require_websocket_server = __commonJS({
  "../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/lib/websocket-server.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var EventEmitter2 = __require("events");
    var http = __require("http");
    var { Duplex: Duplex4 } = __require("stream");
    var { createHash } = __require("crypto");
    var extension = require_extension();
    var PerMessageDeflate = require_permessage_deflate();
    var subprotocol = require_subprotocol();
    var WebSocket2 = require_websocket();
    var { GUID, kWebSocket } = require_constants2();
    var keyRegex = /^[+/0-9A-Za-z]{22}==$/;
    var RUNNING = 0;
    var CLOSING = 1;
    var CLOSED = 2;
    var WebSocketServer2 = class extends EventEmitter2 {
      /**
       * Create a `WebSocketServer` instance.
       *
       * @param {Object} options Configuration options
       * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether
       *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted
       *     multiple times in the same tick
       * @param {Boolean} [options.autoPong=true] Specifies whether or not to
       *     automatically send a pong in response to a ping
       * @param {Number} [options.backlog=511] The maximum length of the queue of
       *     pending connections
       * @param {Boolean} [options.clientTracking=true] Specifies whether or not to
       *     track clients
       * @param {Function} [options.handleProtocols] A hook to handle protocols
       * @param {String} [options.host] The hostname where to bind the server
       * @param {Number} [options.maxPayload=104857600] The maximum allowed message
       *     size
       * @param {Boolean} [options.noServer=false] Enable no server mode
       * @param {String} [options.path] Accept only connections matching this path
       * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable
       *     permessage-deflate
       * @param {Number} [options.port] The port where to bind the server
       * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S
       *     server to use
       * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
       *     not to skip UTF-8 validation for text and close messages
       * @param {Function} [options.verifyClient] A hook to reject connections
       * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`
       *     class to use. It must be the `WebSocket` class or class that extends it
       * @param {Function} [callback] A listener for the `listening` event
       */
      constructor(options, callback) {
        super();
        options = {
          allowSynchronousEvents: true,
          autoPong: true,
          maxPayload: 100 * 1024 * 1024,
          skipUTF8Validation: false,
          perMessageDeflate: false,
          handleProtocols: null,
          clientTracking: true,
          verifyClient: null,
          noServer: false,
          backlog: null,
          // use default (511 as implemented in net.js)
          server: null,
          host: null,
          path: null,
          port: null,
          WebSocket: WebSocket2,
          ...options
        };
        if (options.port == null && !options.server && !options.noServer || options.port != null && (options.server || options.noServer) || options.server && options.noServer) {
          throw new TypeError(
            'One and only one of the "port", "server", or "noServer" options must be specified'
          );
        }
        if (options.port != null) {
          this._server = http.createServer((req, res) => {
            const body = http.STATUS_CODES[426];
            res.writeHead(426, {
              "Content-Length": body.length,
              "Content-Type": "text/plain"
            });
            res.end(body);
          });
          this._server.listen(
            options.port,
            options.host,
            options.backlog,
            callback
          );
        } else if (options.server) {
          this._server = options.server;
        }
        if (this._server) {
          const emitConnection = this.emit.bind(this, "connection");
          this._removeListeners = addListeners(this._server, {
            listening: this.emit.bind(this, "listening"),
            error: this.emit.bind(this, "error"),
            upgrade: (req, socket, head) => {
              this.handleUpgrade(req, socket, head, emitConnection);
            }
          });
        }
        if (options.perMessageDeflate === true) options.perMessageDeflate = {};
        if (options.clientTracking) {
          this.clients = /* @__PURE__ */ new Set();
          this._shouldEmitClose = false;
        }
        this.options = options;
        this._state = RUNNING;
      }
      /**
       * Returns the bound address, the address family name, and port of the server
       * as reported by the operating system if listening on an IP socket.
       * If the server is listening on a pipe or UNIX domain socket, the name is
       * returned as a string.
       *
       * @return {(Object|String|null)} The address of the server
       * @public
       */
      address() {
        if (this.options.noServer) {
          throw new Error('The server is operating in "noServer" mode');
        }
        if (!this._server) return null;
        return this._server.address();
      }
      /**
       * Stop the server from accepting new connections and emit the `'close'` event
       * when all existing connections are closed.
       *
       * @param {Function} [cb] A one-time listener for the `'close'` event
       * @public
       */
      close(cb) {
        if (this._state === CLOSED) {
          if (cb) {
            this.once("close", () => {
              cb(new Error("The server is not running"));
            });
          }
          process.nextTick(emitClose, this);
          return;
        }
        if (cb) this.once("close", cb);
        if (this._state === CLOSING) return;
        this._state = CLOSING;
        if (this.options.noServer || this.options.server) {
          if (this._server) {
            this._removeListeners();
            this._removeListeners = this._server = null;
          }
          if (this.clients) {
            if (!this.clients.size) {
              process.nextTick(emitClose, this);
            } else {
              this._shouldEmitClose = true;
            }
          } else {
            process.nextTick(emitClose, this);
          }
        } else {
          const server = this._server;
          this._removeListeners();
          this._removeListeners = this._server = null;
          server.close(() => {
            emitClose(this);
          });
        }
      }
      /**
       * See if a given request should be handled by this server instance.
       *
       * @param {http.IncomingMessage} req Request object to inspect
       * @return {Boolean} `true` if the request is valid, else `false`
       * @public
       */
      shouldHandle(req) {
        if (this.options.path) {
          const index = req.url.indexOf("?");
          const pathname = index !== -1 ? req.url.slice(0, index) : req.url;
          if (pathname !== this.options.path) return false;
        }
        return true;
      }
      /**
       * Handle a HTTP Upgrade request.
       *
       * @param {http.IncomingMessage} req The request object
       * @param {Duplex} socket The network socket between the server and client
       * @param {Buffer} head The first packet of the upgraded stream
       * @param {Function} cb Callback
       * @public
       */
      handleUpgrade(req, socket, head, cb) {
        socket.on("error", socketOnError);
        const key = req.headers["sec-websocket-key"];
        const upgrade = req.headers.upgrade;
        const version = +req.headers["sec-websocket-version"];
        if (req.method !== "GET") {
          const message = "Invalid HTTP method";
          abortHandshakeOrEmitwsClientError(this, req, socket, 405, message);
          return;
        }
        if (upgrade === void 0 || upgrade.toLowerCase() !== "websocket") {
          const message = "Invalid Upgrade header";
          abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
          return;
        }
        if (key === void 0 || !keyRegex.test(key)) {
          const message = "Missing or invalid Sec-WebSocket-Key header";
          abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
          return;
        }
        if (version !== 8 && version !== 13) {
          const message = "Missing or invalid Sec-WebSocket-Version header";
          abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
          return;
        }
        if (!this.shouldHandle(req)) {
          abortHandshake(socket, 400);
          return;
        }
        const secWebSocketProtocol = req.headers["sec-websocket-protocol"];
        let protocols = /* @__PURE__ */ new Set();
        if (secWebSocketProtocol !== void 0) {
          try {
            protocols = subprotocol.parse(secWebSocketProtocol);
          } catch (err) {
            const message = "Invalid Sec-WebSocket-Protocol header";
            abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
            return;
          }
        }
        const secWebSocketExtensions = req.headers["sec-websocket-extensions"];
        const extensions = {};
        if (this.options.perMessageDeflate && secWebSocketExtensions !== void 0) {
          const perMessageDeflate = new PerMessageDeflate(
            this.options.perMessageDeflate,
            true,
            this.options.maxPayload
          );
          try {
            const offers = extension.parse(secWebSocketExtensions);
            if (offers[PerMessageDeflate.extensionName]) {
              perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);
              extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
            }
          } catch (err) {
            const message = "Invalid or unacceptable Sec-WebSocket-Extensions header";
            abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
            return;
          }
        }
        if (this.options.verifyClient) {
          const info = {
            origin: req.headers[`${version === 8 ? "sec-websocket-origin" : "origin"}`],
            secure: !!(req.socket.authorized || req.socket.encrypted),
            req
          };
          if (this.options.verifyClient.length === 2) {
            this.options.verifyClient(info, (verified, code, message, headers) => {
              if (!verified) {
                return abortHandshake(socket, code || 401, message, headers);
              }
              this.completeUpgrade(
                extensions,
                key,
                protocols,
                req,
                socket,
                head,
                cb
              );
            });
            return;
          }
          if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);
        }
        this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);
      }
      /**
       * Upgrade the connection to WebSocket.
       *
       * @param {Object} extensions The accepted extensions
       * @param {String} key The value of the `Sec-WebSocket-Key` header
       * @param {Set} protocols The subprotocols
       * @param {http.IncomingMessage} req The request object
       * @param {Duplex} socket The network socket between the server and client
       * @param {Buffer} head The first packet of the upgraded stream
       * @param {Function} cb Callback
       * @throws {Error} If called more than once with the same socket
       * @private
       */
      completeUpgrade(extensions, key, protocols, req, socket, head, cb) {
        if (!socket.readable || !socket.writable) return socket.destroy();
        if (socket[kWebSocket]) {
          throw new Error(
            "server.handleUpgrade() was called more than once with the same socket, possibly due to a misconfiguration"
          );
        }
        if (this._state > RUNNING) return abortHandshake(socket, 503);
        const digest = createHash("sha1").update(key + GUID).digest("base64");
        const headers = [
          "HTTP/1.1 101 Switching Protocols",
          "Upgrade: websocket",
          "Connection: Upgrade",
          `Sec-WebSocket-Accept: ${digest}`
        ];
        const ws = new this.options.WebSocket(null, void 0, this.options);
        if (protocols.size) {
          const protocol = this.options.handleProtocols ? this.options.handleProtocols(protocols, req) : protocols.values().next().value;
          if (protocol) {
            headers.push(`Sec-WebSocket-Protocol: ${protocol}`);
            ws._protocol = protocol;
          }
        }
        if (extensions[PerMessageDeflate.extensionName]) {
          const params = extensions[PerMessageDeflate.extensionName].params;
          const value2 = extension.format({
            [PerMessageDeflate.extensionName]: [params]
          });
          headers.push(`Sec-WebSocket-Extensions: ${value2}`);
          ws._extensions = extensions;
        }
        this.emit("headers", headers, req);
        socket.write(headers.concat("\r\n").join("\r\n"));
        socket.removeListener("error", socketOnError);
        ws.setSocket(socket, head, {
          allowSynchronousEvents: this.options.allowSynchronousEvents,
          maxPayload: this.options.maxPayload,
          skipUTF8Validation: this.options.skipUTF8Validation
        });
        if (this.clients) {
          this.clients.add(ws);
          ws.on("close", () => {
            this.clients.delete(ws);
            if (this._shouldEmitClose && !this.clients.size) {
              process.nextTick(emitClose, this);
            }
          });
        }
        cb(ws, req);
      }
    };
    module.exports = WebSocketServer2;
    function addListeners(server, map) {
      for (const event of Object.keys(map)) server.on(event, map[event]);
      return function removeListeners() {
        for (const event of Object.keys(map)) {
          server.removeListener(event, map[event]);
        }
      };
    }
    function emitClose(server) {
      server._state = CLOSED;
      server.emit("close");
    }
    function socketOnError() {
      this.destroy();
    }
    function abortHandshake(socket, code, message, headers) {
      message = message || http.STATUS_CODES[code];
      headers = {
        Connection: "close",
        "Content-Type": "text/html",
        "Content-Length": Buffer.byteLength(message),
        ...headers
      };
      socket.once("finish", socket.destroy);
      socket.end(
        `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\r
` + Object.keys(headers).map((h2) => `${h2}: ${headers[h2]}`).join("\r\n") + "\r\n\r\n" + message
      );
    }
    function abortHandshakeOrEmitwsClientError(server, req, socket, code, message) {
      if (server.listenerCount("wsClientError")) {
        const err = new Error(message);
        Error.captureStackTrace(err, abortHandshakeOrEmitwsClientError);
        server.emit("wsClientError", err, socket, req);
      } else {
        abortHandshake(socket, code, message);
      }
    }
  }
});

// ../../.yarn/cache/picocolors-npm-1.1.1-b0c45fa35e-e2e3e8170a.zip/node_modules/picocolors/picocolors.js
var require_picocolors2 = __commonJS({
  "../../.yarn/cache/picocolors-npm-1.1.1-b0c45fa35e-e2e3e8170a.zip/node_modules/picocolors/picocolors.js"(exports, module) {
    "use strict";
    init_esm_shims();
    var p = process || {};
    var argv = p.argv || [];
    var env = p.env || {};
    var isColorSupported = !(!!env.NO_COLOR || argv.includes("--no-color")) && (!!env.FORCE_COLOR || argv.includes("--color") || p.platform === "win32" || (p.stdout || {}).isTTY && env.TERM !== "dumb" || !!env.CI);
    var formatter = (open, close, replace = open) => (input) => {
      let string = "" + input, index = string.indexOf(close, open.length);
      return ~index ? open + replaceClose(string, close, replace, index) + close : open + string + close;
    };
    var replaceClose = (string, close, replace, index) => {
      let result = "", cursor = 0;
      do {
        result += string.substring(cursor, index) + replace;
        cursor = index + close.length;
        index = string.indexOf(close, cursor);
      } while (~index);
      return result + string.substring(cursor);
    };
    var createColors = (enabled = isColorSupported) => {
      let f3 = enabled ? formatter : () => String;
      return {
        isColorSupported: enabled,
        reset: f3("\x1B[0m", "\x1B[0m"),
        bold: f3("\x1B[1m", "\x1B[22m", "\x1B[22m\x1B[1m"),
        dim: f3("\x1B[2m", "\x1B[22m", "\x1B[22m\x1B[2m"),
        italic: f3("\x1B[3m", "\x1B[23m"),
        underline: f3("\x1B[4m", "\x1B[24m"),
        inverse: f3("\x1B[7m", "\x1B[27m"),
        hidden: f3("\x1B[8m", "\x1B[28m"),
        strikethrough: f3("\x1B[9m", "\x1B[29m"),
        black: f3("\x1B[30m", "\x1B[39m"),
        red: f3("\x1B[31m", "\x1B[39m"),
        green: f3("\x1B[32m", "\x1B[39m"),
        yellow: f3("\x1B[33m", "\x1B[39m"),
        blue: f3("\x1B[34m", "\x1B[39m"),
        magenta: f3("\x1B[35m", "\x1B[39m"),
        cyan: f3("\x1B[36m", "\x1B[39m"),
        white: f3("\x1B[37m", "\x1B[39m"),
        gray: f3("\x1B[90m", "\x1B[39m"),
        bgBlack: f3("\x1B[40m", "\x1B[49m"),
        bgRed: f3("\x1B[41m", "\x1B[49m"),
        bgGreen: f3("\x1B[42m", "\x1B[49m"),
        bgYellow: f3("\x1B[43m", "\x1B[49m"),
        bgBlue: f3("\x1B[44m", "\x1B[49m"),
        bgMagenta: f3("\x1B[45m", "\x1B[49m"),
        bgCyan: f3("\x1B[46m", "\x1B[49m"),
        bgWhite: f3("\x1B[47m", "\x1B[49m"),
        blackBright: f3("\x1B[90m", "\x1B[39m"),
        redBright: f3("\x1B[91m", "\x1B[39m"),
        greenBright: f3("\x1B[92m", "\x1B[39m"),
        yellowBright: f3("\x1B[93m", "\x1B[39m"),
        blueBright: f3("\x1B[94m", "\x1B[39m"),
        magentaBright: f3("\x1B[95m", "\x1B[39m"),
        cyanBright: f3("\x1B[96m", "\x1B[39m"),
        whiteBright: f3("\x1B[97m", "\x1B[39m"),
        bgBlackBright: f3("\x1B[100m", "\x1B[49m"),
        bgRedBright: f3("\x1B[101m", "\x1B[49m"),
        bgGreenBright: f3("\x1B[102m", "\x1B[49m"),
        bgYellowBright: f3("\x1B[103m", "\x1B[49m"),
        bgBlueBright: f3("\x1B[104m", "\x1B[49m"),
        bgMagentaBright: f3("\x1B[105m", "\x1B[49m"),
        bgCyanBright: f3("\x1B[106m", "\x1B[49m"),
        bgWhiteBright: f3("\x1B[107m", "\x1B[49m")
      };
    };
    module.exports = createColors();
    module.exports.createColors = createColors;
  }
});

// src/cli/index.ts
init_esm_shims();

// ../../.yarn/__virtual__/clipanion-virtual-3a24346dfa/0/cache/clipanion-npm-4.0.0-rc.4-8228e3d944-047b415b59.zip/node_modules/clipanion/lib/advanced/index.mjs
init_esm_shims();

// ../../.yarn/__virtual__/clipanion-virtual-3a24346dfa/0/cache/clipanion-npm-4.0.0-rc.4-8228e3d944-047b415b59.zip/node_modules/clipanion/lib/advanced/Command.mjs
init_esm_shims();

// ../../.yarn/__virtual__/clipanion-virtual-3a24346dfa/0/cache/clipanion-npm-4.0.0-rc.4-8228e3d944-047b415b59.zip/node_modules/clipanion/lib/advanced/options/utils.mjs
init_esm_shims();

// ../../.yarn/__virtual__/clipanion-virtual-3a24346dfa/0/cache/clipanion-npm-4.0.0-rc.4-8228e3d944-047b415b59.zip/node_modules/clipanion/lib/errors.mjs
init_esm_shims();

// ../../.yarn/__virtual__/clipanion-virtual-3a24346dfa/0/cache/clipanion-npm-4.0.0-rc.4-8228e3d944-047b415b59.zip/node_modules/clipanion/lib/constants.mjs
init_esm_shims();
var SpecialToken;
(function(SpecialToken2) {
  SpecialToken2["StartOfInput"] = "\0";
  SpecialToken2["EndOfInput"] = "";
  SpecialToken2["EndOfPartialInput"] = "";
})(SpecialToken || (SpecialToken = {}));
var NodeType;
(function(NodeType2) {
  NodeType2[NodeType2["InitialNode"] = 0] = "InitialNode";
  NodeType2[NodeType2["SuccessNode"] = 1] = "SuccessNode";
  NodeType2[NodeType2["ErrorNode"] = 2] = "ErrorNode";
  NodeType2[NodeType2["CustomNode"] = 3] = "CustomNode";
})(NodeType || (NodeType = {}));
var HELP_COMMAND_INDEX = -1;
var HELP_REGEX = /^(-h|--help)(?:=([0-9]+))?$/;
var OPTION_REGEX = /^(--[a-z]+(?:-[a-z]+)*|-[a-zA-Z]+)$/;
var BATCH_REGEX = /^-[a-zA-Z]{2,}$/;
var BINDING_REGEX = /^([^=]+)=([\s\S]*)$/;
var IS_DEBUG = process.env.DEBUG_CLI === `1`;

// ../../.yarn/__virtual__/clipanion-virtual-3a24346dfa/0/cache/clipanion-npm-4.0.0-rc.4-8228e3d944-047b415b59.zip/node_modules/clipanion/lib/errors.mjs
var UsageError = class extends Error {
  constructor(message) {
    super(message);
    this.clipanion = { type: `usage` };
    this.name = `UsageError`;
  }
};
var UnknownSyntaxError = class extends Error {
  constructor(input, candidates) {
    super();
    this.input = input;
    this.candidates = candidates;
    this.clipanion = { type: `none` };
    this.name = `UnknownSyntaxError`;
    if (this.candidates.length === 0) {
      this.message = `Command not found, but we're not sure what's the alternative.`;
    } else if (this.candidates.every((candidate) => candidate.reason !== null && candidate.reason === candidates[0].reason)) {
      const [{ reason }] = this.candidates;
      this.message = `${reason}

${this.candidates.map(({ usage }) => `$ ${usage}`).join(`
`)}`;
    } else if (this.candidates.length === 1) {
      const [{ usage }] = this.candidates;
      this.message = `Command not found; did you mean:

$ ${usage}
${whileRunning(input)}`;
    } else {
      this.message = `Command not found; did you mean one of:

${this.candidates.map(({ usage }, index) => {
        return `${`${index}.`.padStart(4)} ${usage}`;
      }).join(`
`)}

${whileRunning(input)}`;
    }
  }
};
var AmbiguousSyntaxError = class extends Error {
  constructor(input, usages) {
    super();
    this.input = input;
    this.usages = usages;
    this.clipanion = { type: `none` };
    this.name = `AmbiguousSyntaxError`;
    this.message = `Cannot find which to pick amongst the following alternatives:

${this.usages.map((usage, index) => {
      return `${`${index}.`.padStart(4)} ${usage}`;
    }).join(`
`)}

${whileRunning(input)}`;
  }
};
var whileRunning = (input) => `While running ${input.filter((token) => {
  return token !== SpecialToken.EndOfInput && token !== SpecialToken.EndOfPartialInput;
}).map((token) => {
  const json = JSON.stringify(token);
  if (token.match(/\s/) || token.length === 0 || json !== `"${token}"`) {
    return json;
  } else {
    return token;
  }
}).join(` `)}`;

// ../../.yarn/__virtual__/clipanion-virtual-3a24346dfa/0/cache/clipanion-npm-4.0.0-rc.4-8228e3d944-047b415b59.zip/node_modules/clipanion/lib/advanced/options/utils.mjs
var isOptionSymbol = Symbol(`clipanion/isOption`);
function makeCommandOption(spec) {
  return { ...spec, [isOptionSymbol]: true };
}
function rerouteArguments(a2, b2) {
  if (typeof a2 === `undefined`)
    return [a2, b2];
  if (typeof a2 === `object` && a2 !== null && !Array.isArray(a2)) {
    return [void 0, a2];
  } else {
    return [a2, b2];
  }
}
function cleanValidationError(message, { mergeName = false } = {}) {
  const match = message.match(/^([^:]+): (.*)$/m);
  if (!match)
    return `validation failed`;
  let [, path9, line] = match;
  if (mergeName)
    line = line[0].toLowerCase() + line.slice(1);
  line = path9 !== `.` || !mergeName ? `${path9.replace(/^\.(\[|$)/, `$1`)}: ${line}` : `: ${line}`;
  return line;
}
function formatError(message, errors) {
  if (errors.length === 1) {
    return new UsageError(`${message}${cleanValidationError(errors[0], { mergeName: true })}`);
  } else {
    return new UsageError(`${message}:
${errors.map((error) => `
- ${cleanValidationError(error)}`).join(``)}`);
  }
}
function applyValidator(name, value2, validator) {
  if (typeof validator === `undefined`)
    return value2;
  const errors = [];
  const coercions = [];
  const coercion = (v) => {
    const orig = value2;
    value2 = v;
    return coercion.bind(null, orig);
  };
  const check = validator(value2, { errors, coercions, coercion });
  if (!check)
    throw formatError(`Invalid value for ${name}`, errors);
  for (const [, op] of coercions)
    op();
  return value2;
}

// ../../.yarn/__virtual__/clipanion-virtual-3a24346dfa/0/cache/clipanion-npm-4.0.0-rc.4-8228e3d944-047b415b59.zip/node_modules/clipanion/lib/advanced/Command.mjs
var Command = class {
  constructor() {
    this.help = false;
  }
  /**
   * Defines the usage information for the given command.
   */
  static Usage(usage) {
    return usage;
  }
  /**
   * Standard error handler which will simply rethrow the error. Can be used
   * to add custom logic to handle errors from the command or simply return
   * the parent class error handling.
   */
  async catch(error) {
    throw error;
  }
  async validateAndExecute() {
    const commandClass = this.constructor;
    const cascade = commandClass.schema;
    if (Array.isArray(cascade)) {
      const { isDict, isUnknown, applyCascade } = await import("./lib-AYUPV6FY.js");
      const schema = applyCascade(isDict(isUnknown()), cascade);
      const errors = [];
      const coercions = [];
      const check = schema(this, { errors, coercions });
      if (!check)
        throw formatError(`Invalid option schema`, errors);
      for (const [, op] of coercions) {
        op();
      }
    } else if (cascade != null) {
      throw new Error(`Invalid command schema`);
    }
    const exitCode = await this.execute();
    if (typeof exitCode !== `undefined`) {
      return exitCode;
    } else {
      return 0;
    }
  }
};
Command.isOption = isOptionSymbol;
Command.Default = [];

// ../../.yarn/__virtual__/clipanion-virtual-3a24346dfa/0/cache/clipanion-npm-4.0.0-rc.4-8228e3d944-047b415b59.zip/node_modules/clipanion/lib/advanced/Cli.mjs
init_esm_shims();

// ../../.yarn/__virtual__/clipanion-virtual-3a24346dfa/0/cache/clipanion-npm-4.0.0-rc.4-8228e3d944-047b415b59.zip/node_modules/clipanion/lib/platform/node.mjs
init_esm_shims();
import tty from "tty";
function getDefaultColorDepth() {
  if (tty && `getColorDepth` in tty.WriteStream.prototype)
    return tty.WriteStream.prototype.getColorDepth();
  if (process.env.FORCE_COLOR === `0`)
    return 1;
  if (process.env.FORCE_COLOR === `1`)
    return 8;
  if (typeof process.stdout !== `undefined` && process.stdout.isTTY)
    return 8;
  return 1;
}
var gContextStorage;
function getCaptureActivator(context) {
  let contextStorage = gContextStorage;
  if (typeof contextStorage === `undefined`) {
    if (context.stdout === process.stdout && context.stderr === process.stderr)
      return null;
    const { AsyncLocalStorage: LazyAsyncLocalStorage } = __require("async_hooks");
    contextStorage = gContextStorage = new LazyAsyncLocalStorage();
    const origStdoutWrite = process.stdout._write;
    process.stdout._write = function(chunk, encoding, cb) {
      const context2 = contextStorage.getStore();
      if (typeof context2 === `undefined`)
        return origStdoutWrite.call(this, chunk, encoding, cb);
      return context2.stdout.write(chunk, encoding, cb);
    };
    const origStderrWrite = process.stderr._write;
    process.stderr._write = function(chunk, encoding, cb) {
      const context2 = contextStorage.getStore();
      if (typeof context2 === `undefined`)
        return origStderrWrite.call(this, chunk, encoding, cb);
      return context2.stderr.write(chunk, encoding, cb);
    };
  }
  return (fn) => {
    return contextStorage.run(context, fn);
  };
}

// ../../.yarn/__virtual__/clipanion-virtual-3a24346dfa/0/cache/clipanion-npm-4.0.0-rc.4-8228e3d944-047b415b59.zip/node_modules/clipanion/lib/core.mjs
init_esm_shims();
function debug(str) {
  if (IS_DEBUG) {
    console.log(str);
  }
}
var basicHelpState = {
  candidateUsage: null,
  requiredOptions: [],
  errorMessage: null,
  ignoreOptions: false,
  path: [],
  positionals: [],
  options: [],
  remainder: null,
  selectedIndex: HELP_COMMAND_INDEX,
  tokens: []
};
function makeStateMachine() {
  const stateMachine = {
    nodes: []
  };
  for (let t2 = 0; t2 < NodeType.CustomNode; ++t2)
    stateMachine.nodes.push(makeNode());
  return stateMachine;
}
function makeAnyOfMachine(inputs) {
  const output = makeStateMachine();
  const heads = [];
  let offset = output.nodes.length;
  for (const input of inputs) {
    heads.push(offset);
    for (let t2 = 0; t2 < input.nodes.length; ++t2)
      if (!isTerminalNode(t2))
        output.nodes.push(cloneNode(input.nodes[t2], offset));
    offset += input.nodes.length - NodeType.CustomNode + 1;
  }
  for (const head of heads)
    registerShortcut(output, NodeType.InitialNode, head);
  return output;
}
function injectNode(machine, node) {
  machine.nodes.push(node);
  return machine.nodes.length - 1;
}
function simplifyMachine(input) {
  const visited = /* @__PURE__ */ new Set();
  const process10 = (node) => {
    if (visited.has(node))
      return;
    visited.add(node);
    const nodeDef = input.nodes[node];
    for (const transitions of Object.values(nodeDef.statics))
      for (const { to } of transitions)
        process10(to);
    for (const [, { to }] of nodeDef.dynamics)
      process10(to);
    for (const { to } of nodeDef.shortcuts)
      process10(to);
    const shortcuts = new Set(nodeDef.shortcuts.map(({ to }) => to));
    while (nodeDef.shortcuts.length > 0) {
      const { to } = nodeDef.shortcuts.shift();
      const toDef = input.nodes[to];
      for (const [segment, transitions] of Object.entries(toDef.statics)) {
        const store = !Object.prototype.hasOwnProperty.call(nodeDef.statics, segment) ? nodeDef.statics[segment] = [] : nodeDef.statics[segment];
        for (const transition of transitions) {
          if (!store.some(({ to: to2 }) => transition.to === to2)) {
            store.push(transition);
          }
        }
      }
      for (const [test, transition] of toDef.dynamics)
        if (!nodeDef.dynamics.some(([otherTest, { to: to2 }]) => test === otherTest && transition.to === to2))
          nodeDef.dynamics.push([test, transition]);
      for (const transition of toDef.shortcuts) {
        if (!shortcuts.has(transition.to)) {
          nodeDef.shortcuts.push(transition);
          shortcuts.add(transition.to);
        }
      }
    }
  };
  process10(NodeType.InitialNode);
}
function debugMachine(machine, { prefix = `` } = {}) {
  if (IS_DEBUG) {
    debug(`${prefix}Nodes are:`);
    for (let t2 = 0; t2 < machine.nodes.length; ++t2) {
      debug(`${prefix}  ${t2}: ${JSON.stringify(machine.nodes[t2])}`);
    }
  }
}
function runMachineInternal(machine, input, partial = false) {
  debug(`Running a vm on ${JSON.stringify(input)}`);
  let branches = [{
    node: NodeType.InitialNode,
    state: {
      candidateUsage: null,
      requiredOptions: [],
      errorMessage: null,
      ignoreOptions: false,
      options: [],
      path: [],
      positionals: [],
      remainder: null,
      selectedIndex: null,
      tokens: []
    }
  }];
  debugMachine(machine, { prefix: `  ` });
  const tokens = [SpecialToken.StartOfInput, ...input];
  for (let t2 = 0; t2 < tokens.length; ++t2) {
    const segment = tokens[t2];
    const isEOI = segment === SpecialToken.EndOfInput || segment === SpecialToken.EndOfPartialInput;
    const segmentIndex = t2 - 1;
    debug(`  Processing ${JSON.stringify(segment)}`);
    const nextBranches = [];
    for (const { node, state } of branches) {
      debug(`    Current node is ${node}`);
      const nodeDef = machine.nodes[node];
      if (node === NodeType.ErrorNode) {
        nextBranches.push({ node, state });
        continue;
      }
      console.assert(nodeDef.shortcuts.length === 0, `Shortcuts should have been eliminated by now`);
      const hasExactMatch = Object.prototype.hasOwnProperty.call(nodeDef.statics, segment);
      if (!partial || t2 < tokens.length - 1 || hasExactMatch) {
        if (hasExactMatch) {
          const transitions = nodeDef.statics[segment];
          for (const { to, reducer } of transitions) {
            nextBranches.push({ node: to, state: typeof reducer !== `undefined` ? execute(reducers, reducer, state, segment, segmentIndex) : state });
            debug(`      Static transition to ${to} found`);
          }
        } else {
          debug(`      No static transition found`);
        }
      } else {
        let hasMatches = false;
        for (const candidate of Object.keys(nodeDef.statics)) {
          if (!candidate.startsWith(segment))
            continue;
          if (segment === candidate) {
            for (const { to, reducer } of nodeDef.statics[candidate]) {
              nextBranches.push({ node: to, state: typeof reducer !== `undefined` ? execute(reducers, reducer, state, segment, segmentIndex) : state });
              debug(`      Static transition to ${to} found`);
            }
          } else {
            for (const { to } of nodeDef.statics[candidate]) {
              nextBranches.push({ node: to, state: { ...state, remainder: candidate.slice(segment.length) } });
              debug(`      Static transition to ${to} found (partial match)`);
            }
          }
          hasMatches = true;
        }
        if (!hasMatches) {
          debug(`      No partial static transition found`);
        }
      }
      if (!isEOI) {
        for (const [test, { to, reducer }] of nodeDef.dynamics) {
          if (execute(tests, test, state, segment, segmentIndex)) {
            nextBranches.push({ node: to, state: typeof reducer !== `undefined` ? execute(reducers, reducer, state, segment, segmentIndex) : state });
            debug(`      Dynamic transition to ${to} found (via ${test})`);
          }
        }
      }
    }
    if (nextBranches.length === 0 && isEOI && input.length === 1) {
      return [{
        node: NodeType.InitialNode,
        state: basicHelpState
      }];
    }
    if (nextBranches.length === 0) {
      throw new UnknownSyntaxError(input, branches.filter(({ node }) => {
        return node !== NodeType.ErrorNode;
      }).map(({ state }) => {
        return { usage: state.candidateUsage, reason: null };
      }));
    }
    if (nextBranches.every(({ node }) => node === NodeType.ErrorNode)) {
      throw new UnknownSyntaxError(input, nextBranches.map(({ state }) => {
        return { usage: state.candidateUsage, reason: state.errorMessage };
      }));
    }
    branches = trimSmallerBranches(nextBranches);
  }
  if (branches.length > 0) {
    debug(`  Results:`);
    for (const branch of branches) {
      debug(`    - ${branch.node} -> ${JSON.stringify(branch.state)}`);
    }
  } else {
    debug(`  No results`);
  }
  return branches;
}
function runMachine(machine, input, { endToken = SpecialToken.EndOfInput } = {}) {
  const branches = runMachineInternal(machine, [...input, endToken]);
  return selectBestState(input, branches.map(({ state }) => {
    return state;
  }));
}
function trimSmallerBranches(branches) {
  let maxPathSize = 0;
  for (const { state } of branches)
    if (state.path.length > maxPathSize)
      maxPathSize = state.path.length;
  return branches.filter(({ state }) => {
    return state.path.length === maxPathSize;
  });
}
function selectBestState(input, states) {
  const terminalStates = states.filter((state) => {
    return state.selectedIndex !== null;
  });
  if (terminalStates.length === 0)
    throw new Error();
  const requiredOptionsSetStates = terminalStates.filter((state) => state.selectedIndex === HELP_COMMAND_INDEX || state.requiredOptions.every((names) => names.some((name) => state.options.find((opt) => opt.name === name))));
  if (requiredOptionsSetStates.length === 0) {
    throw new UnknownSyntaxError(input, terminalStates.map((state) => ({
      usage: state.candidateUsage,
      reason: null
    })));
  }
  let maxPathSize = 0;
  for (const state of requiredOptionsSetStates)
    if (state.path.length > maxPathSize)
      maxPathSize = state.path.length;
  const bestPathBranches = requiredOptionsSetStates.filter((state) => {
    return state.path.length === maxPathSize;
  });
  const getPositionalCount = (state) => state.positionals.filter(({ extra }) => {
    return !extra;
  }).length + state.options.length;
  const statesWithPositionalCount = bestPathBranches.map((state) => {
    return { state, positionalCount: getPositionalCount(state) };
  });
  let maxPositionalCount = 0;
  for (const { positionalCount } of statesWithPositionalCount)
    if (positionalCount > maxPositionalCount)
      maxPositionalCount = positionalCount;
  const bestPositionalStates = statesWithPositionalCount.filter(({ positionalCount }) => {
    return positionalCount === maxPositionalCount;
  }).map(({ state }) => {
    return state;
  });
  const fixedStates = aggregateHelpStates(bestPositionalStates);
  if (fixedStates.length > 1)
    throw new AmbiguousSyntaxError(input, fixedStates.map((state) => state.candidateUsage));
  return fixedStates[0];
}
function aggregateHelpStates(states) {
  const notHelps = [];
  const helps = [];
  for (const state of states) {
    if (state.selectedIndex === HELP_COMMAND_INDEX) {
      helps.push(state);
    } else {
      notHelps.push(state);
    }
  }
  if (helps.length > 0) {
    notHelps.push({
      ...basicHelpState,
      path: findCommonPrefix(...helps.map((state) => state.path)),
      options: helps.reduce((options, state) => options.concat(state.options), [])
    });
  }
  return notHelps;
}
function findCommonPrefix(firstPath, secondPath, ...rest) {
  if (secondPath === void 0)
    return Array.from(firstPath);
  return findCommonPrefix(firstPath.filter((segment, i2) => segment === secondPath[i2]), ...rest);
}
function makeNode() {
  return {
    dynamics: [],
    shortcuts: [],
    statics: {}
  };
}
function isTerminalNode(node) {
  return node === NodeType.SuccessNode || node === NodeType.ErrorNode;
}
function cloneTransition(input, offset = 0) {
  const to = !isTerminalNode(input.to) ? input.to >= NodeType.CustomNode ? input.to + offset - NodeType.CustomNode + 1 : input.to + offset : input.to;
  return {
    to,
    reducer: input.reducer
  };
}
function cloneNode(input, offset = 0) {
  const output = makeNode();
  for (const [test, transition] of input.dynamics)
    output.dynamics.push([test, cloneTransition(transition, offset)]);
  for (const transition of input.shortcuts)
    output.shortcuts.push(cloneTransition(transition, offset));
  for (const [segment, transitions] of Object.entries(input.statics))
    output.statics[segment] = transitions.map((transition) => cloneTransition(transition, offset));
  return output;
}
function registerDynamic(machine, from, test, to, reducer) {
  machine.nodes[from].dynamics.push([
    test,
    { to, reducer }
  ]);
}
function registerShortcut(machine, from, to, reducer) {
  machine.nodes[from].shortcuts.push({ to, reducer });
}
function registerStatic(machine, from, test, to, reducer) {
  const store = !Object.prototype.hasOwnProperty.call(machine.nodes[from].statics, test) ? machine.nodes[from].statics[test] = [] : machine.nodes[from].statics[test];
  store.push({ to, reducer });
}
function execute(store, callback, state, segment, segmentIndex) {
  if (Array.isArray(callback)) {
    const [name, ...args] = callback;
    return store[name](state, segment, segmentIndex, ...args);
  } else {
    return store[callback](state, segment, segmentIndex);
  }
}
var tests = {
  always: () => {
    return true;
  },
  isOptionLike: (state, segment) => {
    return !state.ignoreOptions && (segment !== `-` && segment.startsWith(`-`));
  },
  isNotOptionLike: (state, segment) => {
    return state.ignoreOptions || segment === `-` || !segment.startsWith(`-`);
  },
  isOption: (state, segment, segmentIndex, name) => {
    return !state.ignoreOptions && segment === name;
  },
  isBatchOption: (state, segment, segmentIndex, names) => {
    return !state.ignoreOptions && BATCH_REGEX.test(segment) && [...segment.slice(1)].every((name) => names.has(`-${name}`));
  },
  isBoundOption: (state, segment, segmentIndex, names, options) => {
    const optionParsing = segment.match(BINDING_REGEX);
    return !state.ignoreOptions && !!optionParsing && OPTION_REGEX.test(optionParsing[1]) && names.has(optionParsing[1]) && options.filter((opt) => opt.nameSet.includes(optionParsing[1])).every((opt) => opt.allowBinding);
  },
  isNegatedOption: (state, segment, segmentIndex, name) => {
    return !state.ignoreOptions && segment === `--no-${name.slice(2)}`;
  },
  isHelp: (state, segment) => {
    return !state.ignoreOptions && HELP_REGEX.test(segment);
  },
  isUnsupportedOption: (state, segment, segmentIndex, names) => {
    return !state.ignoreOptions && segment.startsWith(`-`) && OPTION_REGEX.test(segment) && !names.has(segment);
  },
  isInvalidOption: (state, segment) => {
    return !state.ignoreOptions && segment.startsWith(`-`) && !OPTION_REGEX.test(segment);
  }
};
var reducers = {
  setCandidateState: (state, segment, segmentIndex, candidateState) => {
    return { ...state, ...candidateState };
  },
  setSelectedIndex: (state, segment, segmentIndex, index) => {
    return { ...state, selectedIndex: index };
  },
  pushBatch: (state, segment, segmentIndex, names) => {
    const options = state.options.slice();
    const tokens = state.tokens.slice();
    for (let t2 = 1; t2 < segment.length; ++t2) {
      const name = names.get(`-${segment[t2]}`);
      const slice = t2 === 1 ? [0, 2] : [t2, t2 + 1];
      options.push({ name, value: true });
      tokens.push({ segmentIndex, type: `option`, option: name, slice });
    }
    return { ...state, options, tokens };
  },
  pushBound: (state, segment, segmentIndex) => {
    const [, name, value2] = segment.match(BINDING_REGEX);
    const options = state.options.concat({ name, value: value2 });
    const tokens = state.tokens.concat([
      { segmentIndex, type: `option`, slice: [0, name.length], option: name },
      { segmentIndex, type: `assign`, slice: [name.length, name.length + 1] },
      { segmentIndex, type: `value`, slice: [name.length + 1, name.length + value2.length + 1] }
    ]);
    return { ...state, options, tokens };
  },
  pushPath: (state, segment, segmentIndex) => {
    const path9 = state.path.concat(segment);
    const tokens = state.tokens.concat({ segmentIndex, type: `path` });
    return { ...state, path: path9, tokens };
  },
  pushPositional: (state, segment, segmentIndex) => {
    const positionals = state.positionals.concat({ value: segment, extra: false });
    const tokens = state.tokens.concat({ segmentIndex, type: `positional` });
    return { ...state, positionals, tokens };
  },
  pushExtra: (state, segment, segmentIndex) => {
    const positionals = state.positionals.concat({ value: segment, extra: true });
    const tokens = state.tokens.concat({ segmentIndex, type: `positional` });
    return { ...state, positionals, tokens };
  },
  pushExtraNoLimits: (state, segment, segmentIndex) => {
    const positionals = state.positionals.concat({ value: segment, extra: NoLimits });
    const tokens = state.tokens.concat({ segmentIndex, type: `positional` });
    return { ...state, positionals, tokens };
  },
  pushTrue: (state, segment, segmentIndex, name) => {
    const options = state.options.concat({ name, value: true });
    const tokens = state.tokens.concat({ segmentIndex, type: `option`, option: name });
    return { ...state, options, tokens };
  },
  pushFalse: (state, segment, segmentIndex, name) => {
    const options = state.options.concat({ name, value: false });
    const tokens = state.tokens.concat({ segmentIndex, type: `option`, option: name });
    return { ...state, options, tokens };
  },
  pushUndefined: (state, segment, segmentIndex, name) => {
    const options = state.options.concat({ name: segment, value: void 0 });
    const tokens = state.tokens.concat({ segmentIndex, type: `option`, option: segment });
    return { ...state, options, tokens };
  },
  pushStringValue: (state, segment, segmentIndex) => {
    var _a;
    const lastOption = state.options[state.options.length - 1];
    const options = state.options.slice();
    const tokens = state.tokens.concat({ segmentIndex, type: `value` });
    lastOption.value = ((_a = lastOption.value) !== null && _a !== void 0 ? _a : []).concat([segment]);
    return { ...state, options, tokens };
  },
  setStringValue: (state, segment, segmentIndex) => {
    const lastOption = state.options[state.options.length - 1];
    const options = state.options.slice();
    const tokens = state.tokens.concat({ segmentIndex, type: `value` });
    lastOption.value = segment;
    return { ...state, options, tokens };
  },
  inhibateOptions: (state) => {
    return { ...state, ignoreOptions: true };
  },
  useHelp: (state, segment, segmentIndex, command) => {
    const [
      ,
      /* name */
      ,
      index
    ] = segment.match(HELP_REGEX);
    if (typeof index !== `undefined`) {
      return { ...state, options: [{ name: `-c`, value: String(command) }, { name: `-i`, value: index }] };
    } else {
      return { ...state, options: [{ name: `-c`, value: String(command) }] };
    }
  },
  setError: (state, segment, segmentIndex, errorMessage) => {
    if (segment === SpecialToken.EndOfInput || segment === SpecialToken.EndOfPartialInput) {
      return { ...state, errorMessage: `${errorMessage}.` };
    } else {
      return { ...state, errorMessage: `${errorMessage} ("${segment}").` };
    }
  },
  setOptionArityError: (state, segment) => {
    const lastOption = state.options[state.options.length - 1];
    return { ...state, errorMessage: `Not enough arguments to option ${lastOption.name}.` };
  }
};
var NoLimits = Symbol();
var CommandBuilder = class {
  constructor(cliIndex, cliOpts) {
    this.allOptionNames = /* @__PURE__ */ new Map();
    this.arity = { leading: [], trailing: [], extra: [], proxy: false };
    this.options = [];
    this.paths = [];
    this.cliIndex = cliIndex;
    this.cliOpts = cliOpts;
  }
  addPath(path9) {
    this.paths.push(path9);
  }
  setArity({ leading = this.arity.leading, trailing = this.arity.trailing, extra = this.arity.extra, proxy = this.arity.proxy }) {
    Object.assign(this.arity, { leading, trailing, extra, proxy });
  }
  addPositional({ name = `arg`, required = true } = {}) {
    if (!required && this.arity.extra === NoLimits)
      throw new Error(`Optional parameters cannot be declared when using .rest() or .proxy()`);
    if (!required && this.arity.trailing.length > 0)
      throw new Error(`Optional parameters cannot be declared after the required trailing positional arguments`);
    if (!required && this.arity.extra !== NoLimits) {
      this.arity.extra.push(name);
    } else if (this.arity.extra !== NoLimits && this.arity.extra.length === 0) {
      this.arity.leading.push(name);
    } else {
      this.arity.trailing.push(name);
    }
  }
  addRest({ name = `arg`, required = 0 } = {}) {
    if (this.arity.extra === NoLimits)
      throw new Error(`Infinite lists cannot be declared multiple times in the same command`);
    if (this.arity.trailing.length > 0)
      throw new Error(`Infinite lists cannot be declared after the required trailing positional arguments`);
    for (let t2 = 0; t2 < required; ++t2)
      this.addPositional({ name });
    this.arity.extra = NoLimits;
  }
  addProxy({ required = 0 } = {}) {
    this.addRest({ required });
    this.arity.proxy = true;
  }
  addOption({ names: nameSet, description, arity = 0, hidden: hidden2 = false, required = false, allowBinding = true }) {
    if (!allowBinding && arity > 1)
      throw new Error(`The arity cannot be higher than 1 when the option only supports the --arg=value syntax`);
    if (!Number.isInteger(arity))
      throw new Error(`The arity must be an integer, got ${arity}`);
    if (arity < 0)
      throw new Error(`The arity must be positive, got ${arity}`);
    const preferredName = nameSet.reduce((longestName, name) => {
      return name.length > longestName.length ? name : longestName;
    }, ``);
    for (const name of nameSet)
      this.allOptionNames.set(name, preferredName);
    this.options.push({ preferredName, nameSet, description, arity, hidden: hidden2, required, allowBinding });
  }
  setContext(context) {
    this.context = context;
  }
  usage({ detailed = true, inlineOptions = true } = {}) {
    const segments = [this.cliOpts.binaryName];
    const detailedOptionList = [];
    if (this.paths.length > 0)
      segments.push(...this.paths[0]);
    if (detailed) {
      for (const { preferredName, nameSet, arity, hidden: hidden2, description, required } of this.options) {
        if (hidden2)
          continue;
        const args = [];
        for (let t2 = 0; t2 < arity; ++t2)
          args.push(` #${t2}`);
        const definition = `${nameSet.join(`,`)}${args.join(``)}`;
        if (!inlineOptions && description) {
          detailedOptionList.push({ preferredName, nameSet, definition, description, required });
        } else {
          segments.push(required ? `<${definition}>` : `[${definition}]`);
        }
      }
      segments.push(...this.arity.leading.map((name) => `<${name}>`));
      if (this.arity.extra === NoLimits)
        segments.push(`...`);
      else
        segments.push(...this.arity.extra.map((name) => `[${name}]`));
      segments.push(...this.arity.trailing.map((name) => `<${name}>`));
    }
    const usage = segments.join(` `);
    return { usage, options: detailedOptionList };
  }
  compile() {
    if (typeof this.context === `undefined`)
      throw new Error(`Assertion failed: No context attached`);
    const machine = makeStateMachine();
    let firstNode = NodeType.InitialNode;
    const candidateUsage = this.usage().usage;
    const requiredOptions = this.options.filter((opt) => opt.required).map((opt) => opt.nameSet);
    firstNode = injectNode(machine, makeNode());
    registerStatic(machine, NodeType.InitialNode, SpecialToken.StartOfInput, firstNode, [`setCandidateState`, { candidateUsage, requiredOptions }]);
    const positionalArgument = this.arity.proxy ? `always` : `isNotOptionLike`;
    const paths = this.paths.length > 0 ? this.paths : [[]];
    for (const path9 of paths) {
      let lastPathNode = firstNode;
      if (path9.length > 0) {
        const optionPathNode = injectNode(machine, makeNode());
        registerShortcut(machine, lastPathNode, optionPathNode);
        this.registerOptions(machine, optionPathNode);
        lastPathNode = optionPathNode;
      }
      for (let t2 = 0; t2 < path9.length; ++t2) {
        const nextPathNode = injectNode(machine, makeNode());
        registerStatic(machine, lastPathNode, path9[t2], nextPathNode, `pushPath`);
        lastPathNode = nextPathNode;
        if (t2 + 1 < path9.length) {
          const helpNode = injectNode(machine, makeNode());
          registerDynamic(machine, lastPathNode, `isHelp`, helpNode, [`useHelp`, this.cliIndex]);
          registerStatic(machine, helpNode, SpecialToken.EndOfInput, NodeType.SuccessNode, [`setSelectedIndex`, HELP_COMMAND_INDEX]);
        }
      }
      if (this.arity.leading.length > 0 || !this.arity.proxy) {
        const helpNode = injectNode(machine, makeNode());
        registerDynamic(machine, lastPathNode, `isHelp`, helpNode, [`useHelp`, this.cliIndex]);
        registerDynamic(machine, helpNode, `always`, helpNode, `pushExtra`);
        registerStatic(machine, helpNode, SpecialToken.EndOfInput, NodeType.SuccessNode, [`setSelectedIndex`, HELP_COMMAND_INDEX]);
        this.registerOptions(machine, lastPathNode);
      }
      if (this.arity.leading.length > 0) {
        registerStatic(machine, lastPathNode, SpecialToken.EndOfInput, NodeType.ErrorNode, [`setError`, `Not enough positional arguments`]);
        registerStatic(machine, lastPathNode, SpecialToken.EndOfPartialInput, NodeType.SuccessNode, [`setSelectedIndex`, this.cliIndex]);
      }
      let lastLeadingNode = lastPathNode;
      for (let t2 = 0; t2 < this.arity.leading.length; ++t2) {
        const nextLeadingNode = injectNode(machine, makeNode());
        if (!this.arity.proxy || t2 + 1 !== this.arity.leading.length)
          this.registerOptions(machine, nextLeadingNode);
        if (this.arity.trailing.length > 0 || t2 + 1 !== this.arity.leading.length) {
          registerStatic(machine, nextLeadingNode, SpecialToken.EndOfInput, NodeType.ErrorNode, [`setError`, `Not enough positional arguments`]);
          registerStatic(machine, nextLeadingNode, SpecialToken.EndOfPartialInput, NodeType.SuccessNode, [`setSelectedIndex`, this.cliIndex]);
        }
        registerDynamic(machine, lastLeadingNode, `isNotOptionLike`, nextLeadingNode, `pushPositional`);
        lastLeadingNode = nextLeadingNode;
      }
      let lastExtraNode = lastLeadingNode;
      if (this.arity.extra === NoLimits || this.arity.extra.length > 0) {
        const extraShortcutNode = injectNode(machine, makeNode());
        registerShortcut(machine, lastLeadingNode, extraShortcutNode);
        if (this.arity.extra === NoLimits) {
          const extraNode = injectNode(machine, makeNode());
          if (!this.arity.proxy)
            this.registerOptions(machine, extraNode);
          registerDynamic(machine, lastLeadingNode, positionalArgument, extraNode, `pushExtraNoLimits`);
          registerDynamic(machine, extraNode, positionalArgument, extraNode, `pushExtraNoLimits`);
          registerShortcut(machine, extraNode, extraShortcutNode);
        } else {
          for (let t2 = 0; t2 < this.arity.extra.length; ++t2) {
            const nextExtraNode = injectNode(machine, makeNode());
            if (!this.arity.proxy || t2 > 0)
              this.registerOptions(machine, nextExtraNode);
            registerDynamic(machine, lastExtraNode, positionalArgument, nextExtraNode, `pushExtra`);
            registerShortcut(machine, nextExtraNode, extraShortcutNode);
            lastExtraNode = nextExtraNode;
          }
        }
        lastExtraNode = extraShortcutNode;
      }
      if (this.arity.trailing.length > 0) {
        registerStatic(machine, lastExtraNode, SpecialToken.EndOfInput, NodeType.ErrorNode, [`setError`, `Not enough positional arguments`]);
        registerStatic(machine, lastExtraNode, SpecialToken.EndOfPartialInput, NodeType.SuccessNode, [`setSelectedIndex`, this.cliIndex]);
      }
      let lastTrailingNode = lastExtraNode;
      for (let t2 = 0; t2 < this.arity.trailing.length; ++t2) {
        const nextTrailingNode = injectNode(machine, makeNode());
        if (!this.arity.proxy)
          this.registerOptions(machine, nextTrailingNode);
        if (t2 + 1 < this.arity.trailing.length) {
          registerStatic(machine, nextTrailingNode, SpecialToken.EndOfInput, NodeType.ErrorNode, [`setError`, `Not enough positional arguments`]);
          registerStatic(machine, nextTrailingNode, SpecialToken.EndOfPartialInput, NodeType.SuccessNode, [`setSelectedIndex`, this.cliIndex]);
        }
        registerDynamic(machine, lastTrailingNode, `isNotOptionLike`, nextTrailingNode, `pushPositional`);
        lastTrailingNode = nextTrailingNode;
      }
      registerDynamic(machine, lastTrailingNode, positionalArgument, NodeType.ErrorNode, [`setError`, `Extraneous positional argument`]);
      registerStatic(machine, lastTrailingNode, SpecialToken.EndOfInput, NodeType.SuccessNode, [`setSelectedIndex`, this.cliIndex]);
      registerStatic(machine, lastTrailingNode, SpecialToken.EndOfPartialInput, NodeType.SuccessNode, [`setSelectedIndex`, this.cliIndex]);
    }
    return {
      machine,
      context: this.context
    };
  }
  registerOptions(machine, node) {
    registerDynamic(machine, node, [`isOption`, `--`], node, `inhibateOptions`);
    registerDynamic(machine, node, [`isBatchOption`, this.allOptionNames], node, [`pushBatch`, this.allOptionNames]);
    registerDynamic(machine, node, [`isBoundOption`, this.allOptionNames, this.options], node, `pushBound`);
    registerDynamic(machine, node, [`isUnsupportedOption`, this.allOptionNames], NodeType.ErrorNode, [`setError`, `Unsupported option name`]);
    registerDynamic(machine, node, [`isInvalidOption`], NodeType.ErrorNode, [`setError`, `Invalid option name`]);
    for (const option of this.options) {
      if (option.arity === 0) {
        for (const name of option.nameSet) {
          registerDynamic(machine, node, [`isOption`, name], node, [`pushTrue`, option.preferredName]);
          if (name.startsWith(`--`) && !name.startsWith(`--no-`)) {
            registerDynamic(machine, node, [`isNegatedOption`, name], node, [`pushFalse`, option.preferredName]);
          }
        }
      } else {
        let lastNode = injectNode(machine, makeNode());
        for (const name of option.nameSet)
          registerDynamic(machine, node, [`isOption`, name], lastNode, [`pushUndefined`, option.preferredName]);
        for (let t2 = 0; t2 < option.arity; ++t2) {
          const nextNode = injectNode(machine, makeNode());
          registerStatic(machine, lastNode, SpecialToken.EndOfInput, NodeType.ErrorNode, `setOptionArityError`);
          registerStatic(machine, lastNode, SpecialToken.EndOfPartialInput, NodeType.ErrorNode, `setOptionArityError`);
          registerDynamic(machine, lastNode, `isOptionLike`, NodeType.ErrorNode, `setOptionArityError`);
          const action = option.arity === 1 ? `setStringValue` : `pushStringValue`;
          registerDynamic(machine, lastNode, `isNotOptionLike`, nextNode, action);
          lastNode = nextNode;
        }
        registerShortcut(machine, lastNode, node);
      }
    }
  }
};
var CliBuilder = class _CliBuilder {
  static build(cbs, opts = {}) {
    return new _CliBuilder(opts).commands(cbs).compile();
  }
  constructor({ binaryName = `...` } = {}) {
    this.builders = [];
    this.opts = { binaryName };
  }
  getBuilderByIndex(n2) {
    if (!(n2 >= 0 && n2 < this.builders.length))
      throw new Error(`Assertion failed: Out-of-bound command index (${n2})`);
    return this.builders[n2];
  }
  commands(cbs) {
    for (const cb of cbs)
      cb(this.command());
    return this;
  }
  command() {
    const builder = new CommandBuilder(this.builders.length, this.opts);
    this.builders.push(builder);
    return builder;
  }
  compile() {
    const machines = [];
    const contexts = [];
    for (const builder of this.builders) {
      const { machine: machine2, context } = builder.compile();
      machines.push(machine2);
      contexts.push(context);
    }
    const machine = makeAnyOfMachine(machines);
    simplifyMachine(machine);
    return {
      machine,
      contexts,
      process: (input, { partial } = {}) => {
        const endToken = partial ? SpecialToken.EndOfPartialInput : SpecialToken.EndOfInput;
        return runMachine(machine, input, { endToken });
      }
    };
  }
};

// ../../.yarn/__virtual__/clipanion-virtual-3a24346dfa/0/cache/clipanion-npm-4.0.0-rc.4-8228e3d944-047b415b59.zip/node_modules/clipanion/lib/format.mjs
init_esm_shims();
var MAX_LINE_LENGTH = 80;
var richLine = Array(MAX_LINE_LENGTH).fill(`\u2501`);
for (let t2 = 0; t2 <= 24; ++t2)
  richLine[richLine.length - t2] = `\x1B[38;5;${232 + t2}m\u2501`;
var richFormat = {
  header: (str) => `\x1B[1m\u2501\u2501\u2501 ${str}${str.length < MAX_LINE_LENGTH - 5 ? ` ${richLine.slice(str.length + 5).join(``)}` : `:`}\x1B[0m`,
  bold: (str) => `\x1B[1m${str}\x1B[22m`,
  error: (str) => `\x1B[31m\x1B[1m${str}\x1B[22m\x1B[39m`,
  code: (str) => `\x1B[36m${str}\x1B[39m`
};
var textFormat = {
  header: (str) => str,
  bold: (str) => str,
  error: (str) => str,
  code: (str) => str
};
function dedent(text) {
  const lines = text.split(`
`);
  const nonEmptyLines = lines.filter((line) => line.match(/\S/));
  const indent = nonEmptyLines.length > 0 ? nonEmptyLines.reduce((minLength, line) => Math.min(minLength, line.length - line.trimStart().length), Number.MAX_VALUE) : 0;
  return lines.map((line) => line.slice(indent).trimRight()).join(`
`);
}
function formatMarkdownish(text, { format: format2, paragraphs }) {
  text = text.replace(/\r\n?/g, `
`);
  text = dedent(text);
  text = text.replace(/^\n+|\n+$/g, ``);
  text = text.replace(/^(\s*)-([^\n]*?)\n+/gm, `$1-$2

`);
  text = text.replace(/\n(\n)?\n*/g, ($0, $1) => $1 ? $1 : ` `);
  if (paragraphs) {
    text = text.split(/\n/).map((paragraph) => {
      const bulletMatch = paragraph.match(/^\s*[*-][\t ]+(.*)/);
      if (!bulletMatch)
        return paragraph.match(/(.{1,80})(?: |$)/g).join(`
`);
      const indent = paragraph.length - paragraph.trimStart().length;
      return bulletMatch[1].match(new RegExp(`(.{1,${78 - indent}})(?: |$)`, `g`)).map((line, index) => {
        return ` `.repeat(indent) + (index === 0 ? `- ` : `  `) + line;
      }).join(`
`);
    }).join(`

`);
  }
  text = text.replace(/(`+)((?:.|[\n])*?)\1/g, ($0, $1, $22) => {
    return format2.code($1 + $22 + $1);
  });
  text = text.replace(/(\*\*)((?:.|[\n])*?)\1/g, ($0, $1, $22) => {
    return format2.bold($1 + $22 + $1);
  });
  return text ? `${text}
` : ``;
}

// ../../.yarn/__virtual__/clipanion-virtual-3a24346dfa/0/cache/clipanion-npm-4.0.0-rc.4-8228e3d944-047b415b59.zip/node_modules/clipanion/lib/advanced/HelpCommand.mjs
init_esm_shims();
var HelpCommand = class _HelpCommand extends Command {
  static from(state, contexts) {
    const command = new _HelpCommand(contexts);
    command.path = state.path;
    for (const opt of state.options) {
      switch (opt.name) {
        case `-c`:
          {
            command.commands.push(Number(opt.value));
          }
          break;
        case `-i`:
          {
            command.index = Number(opt.value);
          }
          break;
      }
    }
    return command;
  }
  constructor(contexts) {
    super();
    this.contexts = contexts;
    this.commands = [];
  }
  async execute() {
    let commands = this.commands;
    if (typeof this.index !== `undefined` && this.index >= 0 && this.index < commands.length)
      commands = [commands[this.index]];
    if (commands.length === 0) {
      this.context.stdout.write(this.cli.usage());
    } else if (commands.length === 1) {
      this.context.stdout.write(this.cli.usage(this.contexts[commands[0]].commandClass, { detailed: true }));
    } else if (commands.length > 1) {
      this.context.stdout.write(`Multiple commands match your selection:
`);
      this.context.stdout.write(`
`);
      let index = 0;
      for (const command of this.commands)
        this.context.stdout.write(this.cli.usage(this.contexts[command].commandClass, { prefix: `${index++}. `.padStart(5) }));
      this.context.stdout.write(`
`);
      this.context.stdout.write(`Run again with -h=<index> to see the longer details of any of those commands.
`);
    }
  }
};

// ../../.yarn/__virtual__/clipanion-virtual-3a24346dfa/0/cache/clipanion-npm-4.0.0-rc.4-8228e3d944-047b415b59.zip/node_modules/clipanion/lib/advanced/Cli.mjs
var errorCommandSymbol = Symbol(`clipanion/errorCommand`);
var Cli = class _Cli {
  /**
   * Creates a new Cli and registers all commands passed as parameters.
   *
   * @param commandClasses The Commands to register
   * @returns The created `Cli` instance
   */
  static from(commandClasses, options = {}) {
    const cli2 = new _Cli(options);
    const resolvedCommandClasses = Array.isArray(commandClasses) ? commandClasses : [commandClasses];
    for (const commandClass of resolvedCommandClasses)
      cli2.register(commandClass);
    return cli2;
  }
  constructor({ binaryLabel, binaryName: binaryNameOpt = `...`, binaryVersion, enableCapture = false, enableColors } = {}) {
    this.registrations = /* @__PURE__ */ new Map();
    this.builder = new CliBuilder({ binaryName: binaryNameOpt });
    this.binaryLabel = binaryLabel;
    this.binaryName = binaryNameOpt;
    this.binaryVersion = binaryVersion;
    this.enableCapture = enableCapture;
    this.enableColors = enableColors;
  }
  /**
   * Registers a command inside the CLI.
   */
  register(commandClass) {
    var _a;
    if (this.registrations.has(commandClass))
      throw new RangeError(`${commandClass.name} has already been registered`);
    const specs = /* @__PURE__ */ new Map();
    const command = new commandClass();
    for (const key in command) {
      const value2 = command[key];
      if (typeof value2 === `object` && value2 !== null && value2[Command.isOption]) {
        specs.set(key, value2);
      }
    }
    const builder = this.builder.command();
    const index = builder.cliIndex;
    const paths = (_a = commandClass.paths) !== null && _a !== void 0 ? _a : command.paths;
    if (typeof paths !== `undefined`)
      for (const path9 of paths)
        builder.addPath(path9);
    this.registrations.set(commandClass, { specs, builder, index });
    for (const [key, { definition }] of specs.entries())
      definition(builder, key);
    builder.setContext({
      commandClass
    });
  }
  process(opts, contextArg) {
    const { input, context: userContext, partial } = typeof opts === `object` && Array.isArray(opts) ? { input: opts, context: contextArg } : opts;
    const { contexts, process: process10 } = this.builder.compile();
    const state = process10(input, { partial });
    const context = {
      ..._Cli.defaultContext,
      ...userContext
    };
    switch (state.selectedIndex) {
      case HELP_COMMAND_INDEX: {
        const command = HelpCommand.from(state, contexts);
        command.context = context;
        command.tokens = state.tokens;
        return command;
      }
      default:
        {
          const { commandClass } = contexts[state.selectedIndex];
          const record = this.registrations.get(commandClass);
          if (typeof record === `undefined`)
            throw new Error(`Assertion failed: Expected the command class to have been registered.`);
          const command = new commandClass();
          command.context = context;
          command.tokens = state.tokens;
          command.path = state.path;
          try {
            for (const [key, { transformer }] of record.specs.entries())
              command[key] = transformer(record.builder, key, state, context);
            return command;
          } catch (error) {
            error[errorCommandSymbol] = command;
            throw error;
          }
        }
        break;
    }
  }
  async run(input, userContext) {
    var _a, _b;
    let command;
    const context = {
      ..._Cli.defaultContext,
      ...userContext
    };
    const colored = (_a = this.enableColors) !== null && _a !== void 0 ? _a : context.colorDepth > 1;
    if (!Array.isArray(input)) {
      command = input;
    } else {
      try {
        command = this.process(input, context);
      } catch (error) {
        context.stdout.write(this.error(error, { colored }));
        return 1;
      }
    }
    if (command.help) {
      context.stdout.write(this.usage(command, { colored, detailed: true }));
      return 0;
    }
    command.context = context;
    command.cli = {
      binaryLabel: this.binaryLabel,
      binaryName: this.binaryName,
      binaryVersion: this.binaryVersion,
      enableCapture: this.enableCapture,
      enableColors: this.enableColors,
      definitions: () => this.definitions(),
      definition: (command2) => this.definition(command2),
      error: (error, opts) => this.error(error, opts),
      format: (colored2) => this.format(colored2),
      process: (input2, subContext) => this.process(input2, { ...context, ...subContext }),
      run: (input2, subContext) => this.run(input2, { ...context, ...subContext }),
      usage: (command2, opts) => this.usage(command2, opts)
    };
    const activate = this.enableCapture ? (_b = getCaptureActivator(context)) !== null && _b !== void 0 ? _b : noopCaptureActivator : noopCaptureActivator;
    let exitCode;
    try {
      exitCode = await activate(() => command.validateAndExecute().catch((error) => command.catch(error).then(() => 0)));
    } catch (error) {
      context.stdout.write(this.error(error, { colored, command }));
      return 1;
    }
    return exitCode;
  }
  async runExit(input, context) {
    process.exitCode = await this.run(input, context);
  }
  definition(commandClass, { colored = false } = {}) {
    if (!commandClass.usage)
      return null;
    const { usage: path9 } = this.getUsageByRegistration(commandClass, { detailed: false });
    const { usage, options } = this.getUsageByRegistration(commandClass, { detailed: true, inlineOptions: false });
    const category = typeof commandClass.usage.category !== `undefined` ? formatMarkdownish(commandClass.usage.category, { format: this.format(colored), paragraphs: false }) : void 0;
    const description = typeof commandClass.usage.description !== `undefined` ? formatMarkdownish(commandClass.usage.description, { format: this.format(colored), paragraphs: false }) : void 0;
    const details = typeof commandClass.usage.details !== `undefined` ? formatMarkdownish(commandClass.usage.details, { format: this.format(colored), paragraphs: true }) : void 0;
    const examples = typeof commandClass.usage.examples !== `undefined` ? commandClass.usage.examples.map(([label, cli2]) => [formatMarkdownish(label, { format: this.format(colored), paragraphs: false }), cli2.replace(/\$0/g, this.binaryName)]) : void 0;
    return { path: path9, usage, category, description, details, examples, options };
  }
  definitions({ colored = false } = {}) {
    const data = [];
    for (const commandClass of this.registrations.keys()) {
      const usage = this.definition(commandClass, { colored });
      if (!usage)
        continue;
      data.push(usage);
    }
    return data;
  }
  usage(command = null, { colored, detailed = false, prefix = `$ ` } = {}) {
    var _a;
    if (command === null) {
      for (const commandClass2 of this.registrations.keys()) {
        const paths = commandClass2.paths;
        const isDocumented = typeof commandClass2.usage !== `undefined`;
        const isExclusivelyDefault = !paths || paths.length === 0 || paths.length === 1 && paths[0].length === 0;
        const isDefault = isExclusivelyDefault || ((_a = paths === null || paths === void 0 ? void 0 : paths.some((path9) => path9.length === 0)) !== null && _a !== void 0 ? _a : false);
        if (isDefault) {
          if (command) {
            command = null;
            break;
          } else {
            command = commandClass2;
          }
        } else {
          if (isDocumented) {
            command = null;
            continue;
          }
        }
      }
      if (command) {
        detailed = true;
      }
    }
    const commandClass = command !== null && command instanceof Command ? command.constructor : command;
    let result = ``;
    if (!commandClass) {
      const commandsByCategories = /* @__PURE__ */ new Map();
      for (const [commandClass2, { index }] of this.registrations.entries()) {
        if (typeof commandClass2.usage === `undefined`)
          continue;
        const category = typeof commandClass2.usage.category !== `undefined` ? formatMarkdownish(commandClass2.usage.category, { format: this.format(colored), paragraphs: false }) : null;
        let categoryCommands = commandsByCategories.get(category);
        if (typeof categoryCommands === `undefined`)
          commandsByCategories.set(category, categoryCommands = []);
        const { usage } = this.getUsageByIndex(index);
        categoryCommands.push({ commandClass: commandClass2, usage });
      }
      const categoryNames = Array.from(commandsByCategories.keys()).sort((a2, b2) => {
        if (a2 === null)
          return -1;
        if (b2 === null)
          return 1;
        return a2.localeCompare(b2, `en`, { usage: `sort`, caseFirst: `upper` });
      });
      const hasLabel = typeof this.binaryLabel !== `undefined`;
      const hasVersion = typeof this.binaryVersion !== `undefined`;
      if (hasLabel || hasVersion) {
        if (hasLabel && hasVersion)
          result += `${this.format(colored).header(`${this.binaryLabel} - ${this.binaryVersion}`)}

`;
        else if (hasLabel)
          result += `${this.format(colored).header(`${this.binaryLabel}`)}
`;
        else
          result += `${this.format(colored).header(`${this.binaryVersion}`)}
`;
        result += `  ${this.format(colored).bold(prefix)}${this.binaryName} <command>
`;
      } else {
        result += `${this.format(colored).bold(prefix)}${this.binaryName} <command>
`;
      }
      for (const categoryName of categoryNames) {
        const commands = commandsByCategories.get(categoryName).slice().sort((a2, b2) => {
          return a2.usage.localeCompare(b2.usage, `en`, { usage: `sort`, caseFirst: `upper` });
        });
        const header = categoryName !== null ? categoryName.trim() : `General commands`;
        result += `
`;
        result += `${this.format(colored).header(`${header}`)}
`;
        for (const { commandClass: commandClass2, usage } of commands) {
          const doc = commandClass2.usage.description || `undocumented`;
          result += `
`;
          result += `  ${this.format(colored).bold(usage)}
`;
          result += `    ${formatMarkdownish(doc, { format: this.format(colored), paragraphs: false })}`;
        }
      }
      result += `
`;
      result += formatMarkdownish(`You can also print more details about any of these commands by calling them with the \`-h,--help\` flag right after the command name.`, { format: this.format(colored), paragraphs: true });
    } else {
      if (!detailed) {
        const { usage } = this.getUsageByRegistration(commandClass);
        result += `${this.format(colored).bold(prefix)}${usage}
`;
      } else {
        const { description = ``, details = ``, examples = [] } = commandClass.usage || {};
        if (description !== ``) {
          result += formatMarkdownish(description, { format: this.format(colored), paragraphs: false }).replace(/^./, ($0) => $0.toUpperCase());
          result += `
`;
        }
        if (details !== `` || examples.length > 0) {
          result += `${this.format(colored).header(`Usage`)}
`;
          result += `
`;
        }
        const { usage, options } = this.getUsageByRegistration(commandClass, { inlineOptions: false });
        result += `${this.format(colored).bold(prefix)}${usage}
`;
        if (options.length > 0) {
          result += `
`;
          result += `${this.format(colored).header(`Options`)}
`;
          const maxDefinitionLength = options.reduce((length, option) => {
            return Math.max(length, option.definition.length);
          }, 0);
          result += `
`;
          for (const { definition, description: description2 } of options) {
            result += `  ${this.format(colored).bold(definition.padEnd(maxDefinitionLength))}    ${formatMarkdownish(description2, { format: this.format(colored), paragraphs: false })}`;
          }
        }
        if (details !== ``) {
          result += `
`;
          result += `${this.format(colored).header(`Details`)}
`;
          result += `
`;
          result += formatMarkdownish(details, { format: this.format(colored), paragraphs: true });
        }
        if (examples.length > 0) {
          result += `
`;
          result += `${this.format(colored).header(`Examples`)}
`;
          for (const [description2, example] of examples) {
            result += `
`;
            result += formatMarkdownish(description2, { format: this.format(colored), paragraphs: false });
            result += `${example.replace(/^/m, `  ${this.format(colored).bold(prefix)}`).replace(/\$0/g, this.binaryName)}
`;
          }
        }
      }
    }
    return result;
  }
  error(error, _a) {
    var _b;
    var { colored, command = (_b = error[errorCommandSymbol]) !== null && _b !== void 0 ? _b : null } = _a === void 0 ? {} : _a;
    if (!error || typeof error !== `object` || !(`stack` in error))
      error = new Error(`Execution failed with a non-error rejection (rejected value: ${JSON.stringify(error)})`);
    let result = ``;
    let name = error.name.replace(/([a-z])([A-Z])/g, `$1 $2`);
    if (name === `Error`)
      name = `Internal Error`;
    result += `${this.format(colored).error(name)}: ${error.message}
`;
    const meta = error.clipanion;
    if (typeof meta !== `undefined`) {
      if (meta.type === `usage`) {
        result += `
`;
        result += this.usage(command);
      }
    } else {
      if (error.stack) {
        result += `${error.stack.replace(/^.*\n/, ``)}
`;
      }
    }
    return result;
  }
  format(colored) {
    var _a;
    return ((_a = colored !== null && colored !== void 0 ? colored : this.enableColors) !== null && _a !== void 0 ? _a : _Cli.defaultContext.colorDepth > 1) ? richFormat : textFormat;
  }
  getUsageByRegistration(klass, opts) {
    const record = this.registrations.get(klass);
    if (typeof record === `undefined`)
      throw new Error(`Assertion failed: Unregistered command`);
    return this.getUsageByIndex(record.index, opts);
  }
  getUsageByIndex(n2, opts) {
    return this.builder.getBuilderByIndex(n2).usage(opts);
  }
};
Cli.defaultContext = {
  env: process.env,
  stdin: process.stdin,
  stdout: process.stdout,
  stderr: process.stderr,
  colorDepth: getDefaultColorDepth()
};
function noopCaptureActivator(fn) {
  return fn();
}

// ../../.yarn/__virtual__/clipanion-virtual-3a24346dfa/0/cache/clipanion-npm-4.0.0-rc.4-8228e3d944-047b415b59.zip/node_modules/clipanion/lib/advanced/options/Proxy.mjs
init_esm_shims();
function Proxy(opts = {}) {
  return makeCommandOption({
    definition(builder, key) {
      var _a;
      builder.addProxy({
        name: (_a = opts.name) !== null && _a !== void 0 ? _a : key,
        required: opts.required
      });
    },
    transformer(builder, key, state) {
      return state.positionals.map(({ value: value2 }) => value2);
    }
  });
}

// ../../.yarn/__virtual__/clipanion-virtual-3a24346dfa/0/cache/clipanion-npm-4.0.0-rc.4-8228e3d944-047b415b59.zip/node_modules/clipanion/lib/advanced/options/index.mjs
var options_exports = {};
__export(options_exports, {
  Array: () => Array2,
  Boolean: () => Boolean2,
  Counter: () => Counter,
  Proxy: () => Proxy,
  Rest: () => Rest,
  String: () => String2,
  applyValidator: () => applyValidator,
  cleanValidationError: () => cleanValidationError,
  formatError: () => formatError,
  isOptionSymbol: () => isOptionSymbol,
  makeCommandOption: () => makeCommandOption,
  rerouteArguments: () => rerouteArguments
});
init_esm_shims();

// ../../.yarn/__virtual__/clipanion-virtual-3a24346dfa/0/cache/clipanion-npm-4.0.0-rc.4-8228e3d944-047b415b59.zip/node_modules/clipanion/lib/advanced/options/Array.mjs
init_esm_shims();
function Array2(descriptor, initialValueBase, optsBase) {
  const [initialValue, opts] = rerouteArguments(initialValueBase, optsBase !== null && optsBase !== void 0 ? optsBase : {});
  const { arity = 1 } = opts;
  const optNames = descriptor.split(`,`);
  const nameSet = new Set(optNames);
  return makeCommandOption({
    definition(builder) {
      builder.addOption({
        names: optNames,
        arity,
        hidden: opts === null || opts === void 0 ? void 0 : opts.hidden,
        description: opts === null || opts === void 0 ? void 0 : opts.description,
        required: opts.required
      });
    },
    transformer(builder, key, state) {
      let usedName;
      let currentValue = typeof initialValue !== `undefined` ? [...initialValue] : void 0;
      for (const { name, value: value2 } of state.options) {
        if (!nameSet.has(name))
          continue;
        usedName = name;
        currentValue = currentValue !== null && currentValue !== void 0 ? currentValue : [];
        currentValue.push(value2);
      }
      if (typeof currentValue !== `undefined`) {
        return applyValidator(usedName !== null && usedName !== void 0 ? usedName : key, currentValue, opts.validator);
      } else {
        return currentValue;
      }
    }
  });
}

// ../../.yarn/__virtual__/clipanion-virtual-3a24346dfa/0/cache/clipanion-npm-4.0.0-rc.4-8228e3d944-047b415b59.zip/node_modules/clipanion/lib/advanced/options/Boolean.mjs
init_esm_shims();
function Boolean2(descriptor, initialValueBase, optsBase) {
  const [initialValue, opts] = rerouteArguments(initialValueBase, optsBase !== null && optsBase !== void 0 ? optsBase : {});
  const optNames = descriptor.split(`,`);
  const nameSet = new Set(optNames);
  return makeCommandOption({
    definition(builder) {
      builder.addOption({
        names: optNames,
        allowBinding: false,
        arity: 0,
        hidden: opts.hidden,
        description: opts.description,
        required: opts.required
      });
    },
    transformer(builer, key, state) {
      let currentValue = initialValue;
      for (const { name, value: value2 } of state.options) {
        if (!nameSet.has(name))
          continue;
        currentValue = value2;
      }
      return currentValue;
    }
  });
}

// ../../.yarn/__virtual__/clipanion-virtual-3a24346dfa/0/cache/clipanion-npm-4.0.0-rc.4-8228e3d944-047b415b59.zip/node_modules/clipanion/lib/advanced/options/Counter.mjs
init_esm_shims();
function Counter(descriptor, initialValueBase, optsBase) {
  const [initialValue, opts] = rerouteArguments(initialValueBase, optsBase !== null && optsBase !== void 0 ? optsBase : {});
  const optNames = descriptor.split(`,`);
  const nameSet = new Set(optNames);
  return makeCommandOption({
    definition(builder) {
      builder.addOption({
        names: optNames,
        allowBinding: false,
        arity: 0,
        hidden: opts.hidden,
        description: opts.description,
        required: opts.required
      });
    },
    transformer(builder, key, state) {
      let currentValue = initialValue;
      for (const { name, value: value2 } of state.options) {
        if (!nameSet.has(name))
          continue;
        currentValue !== null && currentValue !== void 0 ? currentValue : currentValue = 0;
        if (!value2) {
          currentValue = 0;
        } else {
          currentValue += 1;
        }
      }
      return currentValue;
    }
  });
}

// ../../.yarn/__virtual__/clipanion-virtual-3a24346dfa/0/cache/clipanion-npm-4.0.0-rc.4-8228e3d944-047b415b59.zip/node_modules/clipanion/lib/advanced/options/Rest.mjs
init_esm_shims();
function Rest(opts = {}) {
  return makeCommandOption({
    definition(builder, key) {
      var _a;
      builder.addRest({
        name: (_a = opts.name) !== null && _a !== void 0 ? _a : key,
        required: opts.required
      });
    },
    transformer(builder, key, state) {
      const isRestPositional = (index) => {
        const positional = state.positionals[index];
        if (positional.extra === NoLimits)
          return true;
        if (positional.extra === false && index < builder.arity.leading.length)
          return true;
        return false;
      };
      let count2 = 0;
      while (count2 < state.positionals.length && isRestPositional(count2))
        count2 += 1;
      return state.positionals.splice(0, count2).map(({ value: value2 }) => value2);
    }
  });
}

// ../../.yarn/__virtual__/clipanion-virtual-3a24346dfa/0/cache/clipanion-npm-4.0.0-rc.4-8228e3d944-047b415b59.zip/node_modules/clipanion/lib/advanced/options/String.mjs
init_esm_shims();
function StringOption(descriptor, initialValueBase, optsBase) {
  const [initialValue, opts] = rerouteArguments(initialValueBase, optsBase !== null && optsBase !== void 0 ? optsBase : {});
  const { arity = 1 } = opts;
  const optNames = descriptor.split(`,`);
  const nameSet = new Set(optNames);
  return makeCommandOption({
    definition(builder) {
      builder.addOption({
        names: optNames,
        arity: opts.tolerateBoolean ? 0 : arity,
        hidden: opts.hidden,
        description: opts.description,
        required: opts.required
      });
    },
    transformer(builder, key, state, context) {
      let usedName;
      let currentValue = initialValue;
      if (typeof opts.env !== `undefined` && context.env[opts.env]) {
        usedName = opts.env;
        currentValue = context.env[opts.env];
      }
      for (const { name, value: value2 } of state.options) {
        if (!nameSet.has(name))
          continue;
        usedName = name;
        currentValue = value2;
      }
      if (typeof currentValue === `string`) {
        return applyValidator(usedName !== null && usedName !== void 0 ? usedName : key, currentValue, opts.validator);
      } else {
        return currentValue;
      }
    }
  });
}
function StringPositional(opts = {}) {
  const { required = true } = opts;
  return makeCommandOption({
    definition(builder, key) {
      var _a;
      builder.addPositional({
        name: (_a = opts.name) !== null && _a !== void 0 ? _a : key,
        required: opts.required
      });
    },
    transformer(builder, key, state) {
      var _a;
      for (let i2 = 0; i2 < state.positionals.length; ++i2) {
        if (state.positionals[i2].extra === NoLimits)
          continue;
        if (required && state.positionals[i2].extra === true)
          continue;
        if (!required && state.positionals[i2].extra === false)
          continue;
        const [positional] = state.positionals.splice(i2, 1);
        return applyValidator((_a = opts.name) !== null && _a !== void 0 ? _a : key, positional.value, opts.validator);
      }
      return void 0;
    }
  });
}
function String2(descriptor, ...args) {
  if (typeof descriptor === `string`) {
    return StringOption(descriptor, ...args);
  } else {
    return StringPositional(descriptor);
  }
}

// src/cli/commands/BuildCommand.ts
init_esm_shims();

// ../../.yarn/cache/@clack-prompts-npm-0.10.0-3e287f8b9b-f5dc45e50b.zip/node_modules/@clack/prompts/dist/index.mjs
init_esm_shims();

// ../../.yarn/cache/@clack-core-npm-0.4.1-a2c1d4c220-60c59e2d00.zip/node_modules/@clack/core/dist/index.mjs
init_esm_shims();
var import_sisteransi = __toESM(require_src(), 1);
import { stdin as $, stdout as j } from "node:process";
import * as f from "node:readline";
function J({ onlyFirst: t2 = false } = {}) {
  const F2 = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?(?:\\u0007|\\u001B\\u005C|\\u009C))", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))"].join("|");
  return new RegExp(F2, t2 ? void 0 : "g");
}
var Q = J();
function O(t2) {
  return t2 && t2.__esModule && Object.prototype.hasOwnProperty.call(t2, "default") ? t2.default : t2;
}
var P = { exports: {} };
(function(t2) {
  var u3 = {};
  t2.exports = u3, u3.eastAsianWidth = function(e2) {
    var s = e2.charCodeAt(0), i2 = e2.length == 2 ? e2.charCodeAt(1) : 0, D2 = s;
    return 55296 <= s && s <= 56319 && 56320 <= i2 && i2 <= 57343 && (s &= 1023, i2 &= 1023, D2 = s << 10 | i2, D2 += 65536), D2 == 12288 || 65281 <= D2 && D2 <= 65376 || 65504 <= D2 && D2 <= 65510 ? "F" : D2 == 8361 || 65377 <= D2 && D2 <= 65470 || 65474 <= D2 && D2 <= 65479 || 65482 <= D2 && D2 <= 65487 || 65490 <= D2 && D2 <= 65495 || 65498 <= D2 && D2 <= 65500 || 65512 <= D2 && D2 <= 65518 ? "H" : 4352 <= D2 && D2 <= 4447 || 4515 <= D2 && D2 <= 4519 || 4602 <= D2 && D2 <= 4607 || 9001 <= D2 && D2 <= 9002 || 11904 <= D2 && D2 <= 11929 || 11931 <= D2 && D2 <= 12019 || 12032 <= D2 && D2 <= 12245 || 12272 <= D2 && D2 <= 12283 || 12289 <= D2 && D2 <= 12350 || 12353 <= D2 && D2 <= 12438 || 12441 <= D2 && D2 <= 12543 || 12549 <= D2 && D2 <= 12589 || 12593 <= D2 && D2 <= 12686 || 12688 <= D2 && D2 <= 12730 || 12736 <= D2 && D2 <= 12771 || 12784 <= D2 && D2 <= 12830 || 12832 <= D2 && D2 <= 12871 || 12880 <= D2 && D2 <= 13054 || 13056 <= D2 && D2 <= 19903 || 19968 <= D2 && D2 <= 42124 || 42128 <= D2 && D2 <= 42182 || 43360 <= D2 && D2 <= 43388 || 44032 <= D2 && D2 <= 55203 || 55216 <= D2 && D2 <= 55238 || 55243 <= D2 && D2 <= 55291 || 63744 <= D2 && D2 <= 64255 || 65040 <= D2 && D2 <= 65049 || 65072 <= D2 && D2 <= 65106 || 65108 <= D2 && D2 <= 65126 || 65128 <= D2 && D2 <= 65131 || 110592 <= D2 && D2 <= 110593 || 127488 <= D2 && D2 <= 127490 || 127504 <= D2 && D2 <= 127546 || 127552 <= D2 && D2 <= 127560 || 127568 <= D2 && D2 <= 127569 || 131072 <= D2 && D2 <= 194367 || 177984 <= D2 && D2 <= 196605 || 196608 <= D2 && D2 <= 262141 ? "W" : 32 <= D2 && D2 <= 126 || 162 <= D2 && D2 <= 163 || 165 <= D2 && D2 <= 166 || D2 == 172 || D2 == 175 || 10214 <= D2 && D2 <= 10221 || 10629 <= D2 && D2 <= 10630 ? "Na" : D2 == 161 || D2 == 164 || 167 <= D2 && D2 <= 168 || D2 == 170 || 173 <= D2 && D2 <= 174 || 176 <= D2 && D2 <= 180 || 182 <= D2 && D2 <= 186 || 188 <= D2 && D2 <= 191 || D2 == 198 || D2 == 208 || 215 <= D2 && D2 <= 216 || 222 <= D2 && D2 <= 225 || D2 == 230 || 232 <= D2 && D2 <= 234 || 236 <= D2 && D2 <= 237 || D2 == 240 || 242 <= D2 && D2 <= 243 || 247 <= D2 && D2 <= 250 || D2 == 252 || D2 == 254 || D2 == 257 || D2 == 273 || D2 == 275 || D2 == 283 || 294 <= D2 && D2 <= 295 || D2 == 299 || 305 <= D2 && D2 <= 307 || D2 == 312 || 319 <= D2 && D2 <= 322 || D2 == 324 || 328 <= D2 && D2 <= 331 || D2 == 333 || 338 <= D2 && D2 <= 339 || 358 <= D2 && D2 <= 359 || D2 == 363 || D2 == 462 || D2 == 464 || D2 == 466 || D2 == 468 || D2 == 470 || D2 == 472 || D2 == 474 || D2 == 476 || D2 == 593 || D2 == 609 || D2 == 708 || D2 == 711 || 713 <= D2 && D2 <= 715 || D2 == 717 || D2 == 720 || 728 <= D2 && D2 <= 731 || D2 == 733 || D2 == 735 || 768 <= D2 && D2 <= 879 || 913 <= D2 && D2 <= 929 || 931 <= D2 && D2 <= 937 || 945 <= D2 && D2 <= 961 || 963 <= D2 && D2 <= 969 || D2 == 1025 || 1040 <= D2 && D2 <= 1103 || D2 == 1105 || D2 == 8208 || 8211 <= D2 && D2 <= 8214 || 8216 <= D2 && D2 <= 8217 || 8220 <= D2 && D2 <= 8221 || 8224 <= D2 && D2 <= 8226 || 8228 <= D2 && D2 <= 8231 || D2 == 8240 || 8242 <= D2 && D2 <= 8243 || D2 == 8245 || D2 == 8251 || D2 == 8254 || D2 == 8308 || D2 == 8319 || 8321 <= D2 && D2 <= 8324 || D2 == 8364 || D2 == 8451 || D2 == 8453 || D2 == 8457 || D2 == 8467 || D2 == 8470 || 8481 <= D2 && D2 <= 8482 || D2 == 8486 || D2 == 8491 || 8531 <= D2 && D2 <= 8532 || 8539 <= D2 && D2 <= 8542 || 8544 <= D2 && D2 <= 8555 || 8560 <= D2 && D2 <= 8569 || D2 == 8585 || 8592 <= D2 && D2 <= 8601 || 8632 <= D2 && D2 <= 8633 || D2 == 8658 || D2 == 8660 || D2 == 8679 || D2 == 8704 || 8706 <= D2 && D2 <= 8707 || 8711 <= D2 && D2 <= 8712 || D2 == 8715 || D2 == 8719 || D2 == 8721 || D2 == 8725 || D2 == 8730 || 8733 <= D2 && D2 <= 8736 || D2 == 8739 || D2 == 8741 || 8743 <= D2 && D2 <= 8748 || D2 == 8750 || 8756 <= D2 && D2 <= 8759 || 8764 <= D2 && D2 <= 8765 || D2 == 8776 || D2 == 8780 || D2 == 8786 || 8800 <= D2 && D2 <= 8801 || 8804 <= D2 && D2 <= 8807 || 8810 <= D2 && D2 <= 8811 || 8814 <= D2 && D2 <= 8815 || 8834 <= D2 && D2 <= 8835 || 8838 <= D2 && D2 <= 8839 || D2 == 8853 || D2 == 8857 || D2 == 8869 || D2 == 8895 || D2 == 8978 || 9312 <= D2 && D2 <= 9449 || 9451 <= D2 && D2 <= 9547 || 9552 <= D2 && D2 <= 9587 || 9600 <= D2 && D2 <= 9615 || 9618 <= D2 && D2 <= 9621 || 9632 <= D2 && D2 <= 9633 || 9635 <= D2 && D2 <= 9641 || 9650 <= D2 && D2 <= 9651 || 9654 <= D2 && D2 <= 9655 || 9660 <= D2 && D2 <= 9661 || 9664 <= D2 && D2 <= 9665 || 9670 <= D2 && D2 <= 9672 || D2 == 9675 || 9678 <= D2 && D2 <= 9681 || 9698 <= D2 && D2 <= 9701 || D2 == 9711 || 9733 <= D2 && D2 <= 9734 || D2 == 9737 || 9742 <= D2 && D2 <= 9743 || 9748 <= D2 && D2 <= 9749 || D2 == 9756 || D2 == 9758 || D2 == 9792 || D2 == 9794 || 9824 <= D2 && D2 <= 9825 || 9827 <= D2 && D2 <= 9829 || 9831 <= D2 && D2 <= 9834 || 9836 <= D2 && D2 <= 9837 || D2 == 9839 || 9886 <= D2 && D2 <= 9887 || 9918 <= D2 && D2 <= 9919 || 9924 <= D2 && D2 <= 9933 || 9935 <= D2 && D2 <= 9953 || D2 == 9955 || 9960 <= D2 && D2 <= 9983 || D2 == 10045 || D2 == 10071 || 10102 <= D2 && D2 <= 10111 || 11093 <= D2 && D2 <= 11097 || 12872 <= D2 && D2 <= 12879 || 57344 <= D2 && D2 <= 63743 || 65024 <= D2 && D2 <= 65039 || D2 == 65533 || 127232 <= D2 && D2 <= 127242 || 127248 <= D2 && D2 <= 127277 || 127280 <= D2 && D2 <= 127337 || 127344 <= D2 && D2 <= 127386 || 917760 <= D2 && D2 <= 917999 || 983040 <= D2 && D2 <= 1048573 || 1048576 <= D2 && D2 <= 1114109 ? "A" : "N";
  }, u3.characterLength = function(e2) {
    var s = this.eastAsianWidth(e2);
    return s == "F" || s == "W" || s == "A" ? 2 : 1;
  };
  function F2(e2) {
    return e2.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]|[^\uD800-\uDFFF]/g) || [];
  }
  u3.length = function(e2) {
    for (var s = F2(e2), i2 = 0, D2 = 0; D2 < s.length; D2++) i2 = i2 + this.characterLength(s[D2]);
    return i2;
  }, u3.slice = function(e2, s, i2) {
    textLen = u3.length(e2), s = s || 0, i2 = i2 || 1, s < 0 && (s = textLen + s), i2 < 0 && (i2 = textLen + i2);
    for (var D2 = "", C2 = 0, o3 = F2(e2), E = 0; E < o3.length; E++) {
      var a2 = o3[E], n2 = u3.length(a2);
      if (C2 >= s - (n2 == 2 ? 1 : 0)) if (C2 + n2 <= i2) D2 += a2;
      else break;
      C2 += n2;
    }
    return D2;
  };
})(P);
var X = P.exports;
var DD = O(X);
var uD = function() {
  return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|(?:\uD83E\uDDD1\uD83C\uDFFF\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFC-\uDFFF])|\uD83D\uDC68(?:\uD83C\uDFFB(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|[\u2695\u2696\u2708]\uFE0F|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))?|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])\uFE0F|\u200D(?:(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D[\uDC66\uDC67])|\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC)?|(?:\uD83D\uDC69(?:\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC69(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83E\uDDD1(?:\u200D(?:\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDE36\u200D\uD83C\uDF2B|\uD83C\uDFF3\uFE0F\u200D\u26A7|\uD83D\uDC3B\u200D\u2744|(?:(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\uD83C\uDFF4\u200D\u2620|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])\u200D[\u2640\u2642]|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u2600-\u2604\u260E\u2611\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26B0\u26B1\u26C8\u26CF\u26D1\u26D3\u26E9\u26F0\u26F1\u26F4\u26F7\u26F8\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u3030\u303D\u3297\u3299]|\uD83C[\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]|\uD83D[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3])\uFE0F|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDE35\u200D\uD83D\uDCAB|\uD83D\uDE2E\u200D\uD83D\uDCA8|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83E\uDDD1(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83D\uDC69(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83D\uDC08\u200D\u2B1B|\u2764\uFE0F\u200D(?:\uD83D\uDD25|\uD83E\uDE79)|\uD83D\uDC41\uFE0F|\uD83C\uDFF3\uFE0F|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|[#\*0-9]\uFE0F\u20E3|\u2764\uFE0F|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|\uD83C\uDFF4|(?:[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270C\u270D]|\uD83D[\uDD74\uDD90])(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC08\uDC15\uDC3B\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE2E\uDE35\uDE36\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5]|\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD]|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF]|[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0D\uDD0E\uDD10-\uDD17\uDD1D\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78\uDD7A-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCB\uDDD0\uDDE0-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6]|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26A7\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5-\uDED7\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDD77\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
};
var FD = O(uD);
var m = 10;
var L = (t2 = 0) => (u3) => `\x1B[${u3 + t2}m`;
var N = (t2 = 0) => (u3) => `\x1B[${38 + t2};5;${u3}m`;
var I = (t2 = 0) => (u3, F2, e2) => `\x1B[${38 + t2};2;${u3};${F2};${e2}m`;
var r = { modifier: { reset: [0, 0], bold: [1, 22], dim: [2, 22], italic: [3, 23], underline: [4, 24], overline: [53, 55], inverse: [7, 27], hidden: [8, 28], strikethrough: [9, 29] }, color: { black: [30, 39], red: [31, 39], green: [32, 39], yellow: [33, 39], blue: [34, 39], magenta: [35, 39], cyan: [36, 39], white: [37, 39], blackBright: [90, 39], gray: [90, 39], grey: [90, 39], redBright: [91, 39], greenBright: [92, 39], yellowBright: [93, 39], blueBright: [94, 39], magentaBright: [95, 39], cyanBright: [96, 39], whiteBright: [97, 39] }, bgColor: { bgBlack: [40, 49], bgRed: [41, 49], bgGreen: [42, 49], bgYellow: [43, 49], bgBlue: [44, 49], bgMagenta: [45, 49], bgCyan: [46, 49], bgWhite: [47, 49], bgBlackBright: [100, 49], bgGray: [100, 49], bgGrey: [100, 49], bgRedBright: [101, 49], bgGreenBright: [102, 49], bgYellowBright: [103, 49], bgBlueBright: [104, 49], bgMagentaBright: [105, 49], bgCyanBright: [106, 49], bgWhiteBright: [107, 49] } };
Object.keys(r.modifier);
var tD = Object.keys(r.color);
var eD = Object.keys(r.bgColor);
[...tD, ...eD];
function sD() {
  const t2 = /* @__PURE__ */ new Map();
  for (const [u3, F2] of Object.entries(r)) {
    for (const [e2, s] of Object.entries(F2)) r[e2] = { open: `\x1B[${s[0]}m`, close: `\x1B[${s[1]}m` }, F2[e2] = r[e2], t2.set(s[0], s[1]);
    Object.defineProperty(r, u3, { value: F2, enumerable: false });
  }
  return Object.defineProperty(r, "codes", { value: t2, enumerable: false }), r.color.close = "\x1B[39m", r.bgColor.close = "\x1B[49m", r.color.ansi = L(), r.color.ansi256 = N(), r.color.ansi16m = I(), r.bgColor.ansi = L(m), r.bgColor.ansi256 = N(m), r.bgColor.ansi16m = I(m), Object.defineProperties(r, { rgbToAnsi256: { value: (u3, F2, e2) => u3 === F2 && F2 === e2 ? u3 < 8 ? 16 : u3 > 248 ? 231 : Math.round((u3 - 8) / 247 * 24) + 232 : 16 + 36 * Math.round(u3 / 255 * 5) + 6 * Math.round(F2 / 255 * 5) + Math.round(e2 / 255 * 5), enumerable: false }, hexToRgb: { value: (u3) => {
    const F2 = /[a-f\d]{6}|[a-f\d]{3}/i.exec(u3.toString(16));
    if (!F2) return [0, 0, 0];
    let [e2] = F2;
    e2.length === 3 && (e2 = [...e2].map((i2) => i2 + i2).join(""));
    const s = Number.parseInt(e2, 16);
    return [s >> 16 & 255, s >> 8 & 255, s & 255];
  }, enumerable: false }, hexToAnsi256: { value: (u3) => r.rgbToAnsi256(...r.hexToRgb(u3)), enumerable: false }, ansi256ToAnsi: { value: (u3) => {
    if (u3 < 8) return 30 + u3;
    if (u3 < 16) return 90 + (u3 - 8);
    let F2, e2, s;
    if (u3 >= 232) F2 = ((u3 - 232) * 10 + 8) / 255, e2 = F2, s = F2;
    else {
      u3 -= 16;
      const C2 = u3 % 36;
      F2 = Math.floor(u3 / 36) / 5, e2 = Math.floor(C2 / 6) / 5, s = C2 % 6 / 5;
    }
    const i2 = Math.max(F2, e2, s) * 2;
    if (i2 === 0) return 30;
    let D2 = 30 + (Math.round(s) << 2 | Math.round(e2) << 1 | Math.round(F2));
    return i2 === 2 && (D2 += 60), D2;
  }, enumerable: false }, rgbToAnsi: { value: (u3, F2, e2) => r.ansi256ToAnsi(r.rgbToAnsi256(u3, F2, e2)), enumerable: false }, hexToAnsi: { value: (u3) => r.ansi256ToAnsi(r.hexToAnsi256(u3)), enumerable: false } }), r;
}
var iD = sD();
var rD = "]";
var y = `${rD}8;;`;
var aD = ["up", "down", "left", "right", "space", "enter", "cancel"];
var c = { actions: new Set(aD), aliases: /* @__PURE__ */ new Map([["k", "up"], ["j", "down"], ["h", "left"], ["l", "right"], ["", "cancel"], ["escape", "cancel"]]) };
function k(t2, u3) {
  if (typeof t2 == "string") return c.aliases.get(t2) === u3;
  for (const F2 of t2) if (F2 !== void 0 && k(F2, u3)) return true;
  return false;
}
var xD = globalThis.process.platform.startsWith("win");
var S = Symbol("clack:cancel");
function cD({ input: t2 = $, output: u3 = j, overwrite: F2 = true, hideCursor: e2 = true } = {}) {
  const s = f.createInterface({ input: t2, output: u3, prompt: "", tabSize: 1 });
  f.emitKeypressEvents(t2, s), t2.isTTY && t2.setRawMode(true);
  const i2 = (D2, { name: C2, sequence: o3 }) => {
    const E = String(D2);
    if (k([E, C2, o3], "cancel")) {
      e2 && u3.write(import_sisteransi.cursor.show), process.exit(0);
      return;
    }
    if (!F2) return;
    const a2 = C2 === "return" ? 0 : -1, n2 = C2 === "return" ? -1 : 0;
    f.moveCursor(u3, a2, n2, () => {
      f.clearLine(u3, 1, () => {
        t2.once("keypress", i2);
      });
    });
  };
  return e2 && u3.write(import_sisteransi.cursor.hide), t2.once("keypress", i2), () => {
    t2.off("keypress", i2), e2 && u3.write(import_sisteransi.cursor.show), t2.isTTY && !xD && t2.setRawMode(false), s.terminal = false, s.close();
  };
}

// ../../.yarn/cache/@clack-prompts-npm-0.10.0-3e287f8b9b-f5dc45e50b.zip/node_modules/@clack/prompts/dist/index.mjs
var import_picocolors = __toESM(require_picocolors(), 1);
var import_sisteransi2 = __toESM(require_src(), 1);
import g from "node:process";
function ce() {
  return g.platform !== "win32" ? g.env.TERM !== "linux" : !!g.env.CI || !!g.env.WT_SESSION || !!g.env.TERMINUS_SUBLIME || g.env.ConEmuTask === "{cmd::Cmder}" || g.env.TERM_PROGRAM === "Terminus-Sublime" || g.env.TERM_PROGRAM === "vscode" || g.env.TERM === "xterm-256color" || g.env.TERM === "alacritty" || g.env.TERMINAL_EMULATOR === "JetBrains-JediTerm";
}
var V = ce();
var u = (t2, n2) => V ? t2 : n2;
var le = u("\u25C6", "*");
var L2 = u("\u25A0", "x");
var W = u("\u25B2", "x");
var C = u("\u25C7", "o");
var ue = u("\u250C", "T");
var o = u("\u2502", "|");
var d = u("\u2514", "\u2014");
var k2 = u("\u25CF", ">");
var P2 = u("\u25CB", " ");
var A = u("\u25FB", "[\u2022]");
var T = u("\u25FC", "[+]");
var F = u("\u25FB", "[ ]");
var $e = u("\u25AA", "\u2022");
var _ = u("\u2500", "-");
var me = u("\u256E", "+");
var de = u("\u251C", "+");
var pe = u("\u256F", "+");
var q = u("\u25CF", "\u2022");
var D = u("\u25C6", "*");
var U = u("\u25B2", "!");
var K = u("\u25A0", "x");
var f2 = { message: (t2 = "", { symbol: n2 = import_picocolors.default.gray(o) } = {}) => {
  const s = [`${import_picocolors.default.gray(o)}`];
  if (t2) {
    const [r2, ...i2] = t2.split(`
`);
    s.push(`${n2}  ${r2}`, ...i2.map((a2) => `${import_picocolors.default.gray(o)}  ${a2}`));
  }
  process.stdout.write(`${s.join(`
`)}
`);
}, info: (t2) => {
  f2.message(t2, { symbol: import_picocolors.default.blue(q) });
}, success: (t2) => {
  f2.message(t2, { symbol: import_picocolors.default.green(D) });
}, step: (t2) => {
  f2.message(t2, { symbol: import_picocolors.default.green(C) });
}, warn: (t2) => {
  f2.message(t2, { symbol: import_picocolors.default.yellow(U) });
}, warning: (t2) => {
  f2.warn(t2);
}, error: (t2) => {
  f2.message(t2, { symbol: import_picocolors.default.red(K) });
} };
var J2 = `${import_picocolors.default.gray(o)}  `;
var Y = ({ indicator: t2 = "dots" } = {}) => {
  const n2 = V ? ["\u25D2", "\u25D0", "\u25D3", "\u25D1"] : ["\u2022", "o", "O", "0"], s = V ? 80 : 120, r2 = process.env.CI === "true";
  let i2, a2, c4 = false, l2 = "", $3, p = performance.now();
  const M = (m2) => {
    const h2 = m2 > 1 ? "Something went wrong" : "Canceled";
    c4 && N2(h2, m2);
  }, v = () => M(2), x = () => M(1), j2 = () => {
    process.on("uncaughtExceptionMonitor", v), process.on("unhandledRejection", v), process.on("SIGINT", x), process.on("SIGTERM", x), process.on("exit", M);
  }, E = () => {
    process.removeListener("uncaughtExceptionMonitor", v), process.removeListener("unhandledRejection", v), process.removeListener("SIGINT", x), process.removeListener("SIGTERM", x), process.removeListener("exit", M);
  }, O2 = () => {
    if ($3 === void 0) return;
    r2 && process.stdout.write(`
`);
    const m2 = $3.split(`
`);
    process.stdout.write(import_sisteransi2.cursor.move(-999, m2.length - 1)), process.stdout.write(import_sisteransi2.erase.down(m2.length));
  }, R = (m2) => m2.replace(/\.+$/, ""), G = (m2) => {
    const h2 = (performance.now() - m2) / 1e3, y2 = Math.floor(h2 / 60), I2 = Math.floor(h2 % 60);
    return y2 > 0 ? `[${y2}m ${I2}s]` : `[${I2}s]`;
  }, H = (m2 = "") => {
    c4 = true, i2 = cD(), l2 = R(m2), p = performance.now(), process.stdout.write(`${import_picocolors.default.gray(o)}
`);
    let h2 = 0, y2 = 0;
    j2(), a2 = setInterval(() => {
      if (r2 && l2 === $3) return;
      O2(), $3 = l2;
      const I2 = import_picocolors.default.magenta(n2[h2]);
      if (r2) process.stdout.write(`${I2}  ${l2}...`);
      else if (t2 === "timer") process.stdout.write(`${I2}  ${l2} ${G(p)}`);
      else {
        const z = ".".repeat(Math.floor(y2)).slice(0, 3);
        process.stdout.write(`${I2}  ${l2}${z}`);
      }
      h2 = h2 + 1 < n2.length ? h2 + 1 : 0, y2 = y2 < n2.length ? y2 + 0.125 : 0;
    }, s);
  }, N2 = (m2 = "", h2 = 0) => {
    c4 = false, clearInterval(a2), O2();
    const y2 = h2 === 0 ? import_picocolors.default.green(C) : h2 === 1 ? import_picocolors.default.red(L2) : import_picocolors.default.red(W);
    l2 = R(m2 ?? l2), t2 === "timer" ? process.stdout.write(`${y2}  ${l2} ${G(p)}
`) : process.stdout.write(`${y2}  ${l2}
`), E(), i2();
  };
  return { start: H, stop: N2, message: (m2 = "") => {
    l2 = R(m2 ?? l2);
  } };
};
var Te = async (t2) => {
  for (const n2 of t2) {
    if (n2.enabled === false) continue;
    const s = Y();
    s.start(n2.title);
    const r2 = await n2.task(s.message);
    s.stop(r2 || n2.title);
  }
};

// src/cli/commands/BuildCommand.ts
import { getPackageRoot as getPackageRoot4 } from "@granite-js/utils";

// src/config/loadConfig.ts
init_esm_shims();
var import_cosmiconfig = __toESM(require_dist(), 1);
import { getPackageRoot } from "@granite-js/utils";

// ../../.yarn/__virtual__/cosmiconfig-typescript-loader-virtual-2f1fb2d612/0/cache/cosmiconfig-typescript-loader-npm-5.1.0-81c399fbcb-9c87ade7b0.zip/node_modules/cosmiconfig-typescript-loader/dist/esm/index.mjs
init_esm_shims();

// ../../.yarn/__virtual__/cosmiconfig-typescript-loader-virtual-2f1fb2d612/0/cache/cosmiconfig-typescript-loader-npm-5.1.0-81c399fbcb-9c87ade7b0.zip/node_modules/cosmiconfig-typescript-loader/dist/esm/loader.mjs
init_esm_shims();
var import_jiti = __toESM(require_lib4(), 1);

// ../../.yarn/__virtual__/cosmiconfig-typescript-loader-virtual-2f1fb2d612/0/cache/cosmiconfig-typescript-loader-npm-5.1.0-81c399fbcb-9c87ade7b0.zip/node_modules/cosmiconfig-typescript-loader/dist/esm/typescript-compile-error.mjs
init_esm_shims();
var TypeScriptCompileError = class _TypeScriptCompileError extends Error {
  constructor(message) {
    super(message);
    this.name = this.constructor.name;
    Object.setPrototypeOf(this, new.target.prototype);
  }
  static fromError(error) {
    const message = `TypeScriptLoader failed to compile TypeScript:
${error.message}`;
    const newError = new _TypeScriptCompileError(message);
    newError.stack = error.stack;
    return newError;
  }
};

// ../../.yarn/__virtual__/cosmiconfig-typescript-loader-virtual-2f1fb2d612/0/cache/cosmiconfig-typescript-loader-npm-5.1.0-81c399fbcb-9c87ade7b0.zip/node_modules/cosmiconfig-typescript-loader/dist/esm/loader.mjs
function TypeScriptLoader(options) {
  const loader = (0, import_jiti.default)("", { interopDefault: true, ...options });
  return (path9) => {
    try {
      const result = loader(path9);
      return result.default || result;
    } catch (error) {
      if (error instanceof Error) {
        throw TypeScriptCompileError.fromError(error);
      }
      throw error;
    }
  };
}

// src/config/loadConfig.ts
var loadConfig = async () => {
  const explorer = (0, import_cosmiconfig.cosmiconfig)("granite", {
    searchPlaces: ["granite.config.ts", "granite.config.mts", "granite.config.js", "granite.config.cjs"],
    loaders: {
      ".ts": TypeScriptLoader(),
      ".mts": TypeScriptLoader()
    }
  });
  const result = await explorer.search(getPackageRoot());
  const config = await result?.config;
  return config;
};

// src/runPrebuildToBuild.ts
init_esm_shims();
import fs2 from "fs";
import path7 from "path";
import { fileURLToPath as fileURLToPath3 } from "url";
import { transform } from "@babel/core";
import { getPackageRoot as getPackageRoot3 } from "@granite-js/utils";

// ../../.yarn/cache/uuidv7-npm-1.0.2-36affe4cb7-882187a3b6.zip/node_modules/uuidv7/dist/index.js
init_esm_shims();
var DIGITS = "0123456789abcdef";
var UUID = class _UUID {
  /** @param bytes - The 16-byte byte array representation. */
  constructor(bytes) {
    this.bytes = bytes;
  }
  /**
   * Creates an object from the internal representation, a 16-byte byte array
   * containing the binary UUID representation in the big-endian byte order.
   *
   * This method does NOT shallow-copy the argument, and thus the created object
   * holds the reference to the underlying buffer.
   *
   * @throws TypeError if the length of the argument is not 16.
   */
  static ofInner(bytes) {
    if (bytes.length !== 16) {
      throw new TypeError("not 128-bit length");
    } else {
      return new _UUID(bytes);
    }
  }
  /**
   * Builds a byte array from UUIDv7 field values.
   *
   * @param unixTsMs - A 48-bit `unix_ts_ms` field value.
   * @param randA - A 12-bit `rand_a` field value.
   * @param randBHi - The higher 30 bits of 62-bit `rand_b` field value.
   * @param randBLo - The lower 32 bits of 62-bit `rand_b` field value.
   * @throws RangeError if any field value is out of the specified range.
   */
  static fromFieldsV7(unixTsMs, randA, randBHi, randBLo) {
    if (!Number.isInteger(unixTsMs) || !Number.isInteger(randA) || !Number.isInteger(randBHi) || !Number.isInteger(randBLo) || unixTsMs < 0 || randA < 0 || randBHi < 0 || randBLo < 0 || unixTsMs > 281474976710655 || randA > 4095 || randBHi > 1073741823 || randBLo > 4294967295) {
      throw new RangeError("invalid field value");
    }
    const bytes = new Uint8Array(16);
    bytes[0] = unixTsMs / 2 ** 40;
    bytes[1] = unixTsMs / 2 ** 32;
    bytes[2] = unixTsMs / 2 ** 24;
    bytes[3] = unixTsMs / 2 ** 16;
    bytes[4] = unixTsMs / 2 ** 8;
    bytes[5] = unixTsMs;
    bytes[6] = 112 | randA >>> 8;
    bytes[7] = randA;
    bytes[8] = 128 | randBHi >>> 24;
    bytes[9] = randBHi >>> 16;
    bytes[10] = randBHi >>> 8;
    bytes[11] = randBHi;
    bytes[12] = randBLo >>> 24;
    bytes[13] = randBLo >>> 16;
    bytes[14] = randBLo >>> 8;
    bytes[15] = randBLo;
    return new _UUID(bytes);
  }
  /**
   * Builds a byte array from a string representation.
   *
   * This method accepts the following formats:
   *
   * - 32-digit hexadecimal format without hyphens: `0189dcd553117d408db09496a2eef37b`
   * - 8-4-4-4-12 hyphenated format: `0189dcd5-5311-7d40-8db0-9496a2eef37b`
   * - Hyphenated format with surrounding braces: `{0189dcd5-5311-7d40-8db0-9496a2eef37b}`
   * - RFC 9562 URN format: `urn:uuid:0189dcd5-5311-7d40-8db0-9496a2eef37b`
   *
   * Leading and trailing whitespaces represents an error.
   *
   * @throws SyntaxError if the argument could not parse as a valid UUID string.
   */
  static parse(uuid) {
    var _a, _b, _c, _d;
    let hex = void 0;
    switch (uuid.length) {
      case 32:
        hex = (_a = /^[0-9a-f]{32}$/i.exec(uuid)) === null || _a === void 0 ? void 0 : _a[0];
        break;
      case 36:
        hex = (_b = /^([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{12})$/i.exec(uuid)) === null || _b === void 0 ? void 0 : _b.slice(1, 6).join("");
        break;
      case 38:
        hex = (_c = /^\{([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{12})\}$/i.exec(uuid)) === null || _c === void 0 ? void 0 : _c.slice(1, 6).join("");
        break;
      case 45:
        hex = (_d = /^urn:uuid:([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{12})$/i.exec(uuid)) === null || _d === void 0 ? void 0 : _d.slice(1, 6).join("");
        break;
      default:
        break;
    }
    if (hex) {
      const inner = new Uint8Array(16);
      for (let i2 = 0; i2 < 16; i2 += 4) {
        const n2 = parseInt(hex.substring(2 * i2, 2 * i2 + 8), 16);
        inner[i2 + 0] = n2 >>> 24;
        inner[i2 + 1] = n2 >>> 16;
        inner[i2 + 2] = n2 >>> 8;
        inner[i2 + 3] = n2;
      }
      return new _UUID(inner);
    } else {
      throw new SyntaxError("could not parse UUID string");
    }
  }
  /**
   * @returns The 8-4-4-4-12 canonical hexadecimal string representation
   * (`0189dcd5-5311-7d40-8db0-9496a2eef37b`).
   */
  toString() {
    let text = "";
    for (let i2 = 0; i2 < this.bytes.length; i2++) {
      text += DIGITS.charAt(this.bytes[i2] >>> 4);
      text += DIGITS.charAt(this.bytes[i2] & 15);
      if (i2 === 3 || i2 === 5 || i2 === 7 || i2 === 9) {
        text += "-";
      }
    }
    return text;
  }
  /**
   * @returns The 32-digit hexadecimal representation without hyphens
   * (`0189dcd553117d408db09496a2eef37b`).
   */
  toHex() {
    let text = "";
    for (let i2 = 0; i2 < this.bytes.length; i2++) {
      text += DIGITS.charAt(this.bytes[i2] >>> 4);
      text += DIGITS.charAt(this.bytes[i2] & 15);
    }
    return text;
  }
  /** @returns The 8-4-4-4-12 canonical hexadecimal string representation. */
  toJSON() {
    return this.toString();
  }
  /**
   * Reports the variant field value of the UUID or, if appropriate, "NIL" or
   * "MAX".
   *
   * For convenience, this method reports "NIL" or "MAX" if `this` represents
   * the Nil or Max UUID, although the Nil and Max UUIDs are technically
   * subsumed under the variants `0b0` and `0b111`, respectively.
   */
  getVariant() {
    const n2 = this.bytes[8] >>> 4;
    if (n2 < 0) {
      throw new Error("unreachable");
    } else if (n2 <= 7) {
      return this.bytes.every((e2) => e2 === 0) ? "NIL" : "VAR_0";
    } else if (n2 <= 11) {
      return "VAR_10";
    } else if (n2 <= 13) {
      return "VAR_110";
    } else if (n2 <= 15) {
      return this.bytes.every((e2) => e2 === 255) ? "MAX" : "VAR_RESERVED";
    } else {
      throw new Error("unreachable");
    }
  }
  /**
   * Returns the version field value of the UUID or `undefined` if the UUID does
   * not have the variant field value of `0b10`.
   */
  getVersion() {
    return this.getVariant() === "VAR_10" ? this.bytes[6] >>> 4 : void 0;
  }
  /** Creates an object from `this`. */
  clone() {
    return new _UUID(this.bytes.slice(0));
  }
  /** Returns true if `this` is equivalent to `other`. */
  equals(other) {
    return this.compareTo(other) === 0;
  }
  /**
   * Returns a negative integer, zero, or positive integer if `this` is less
   * than, equal to, or greater than `other`, respectively.
   */
  compareTo(other) {
    for (let i2 = 0; i2 < 16; i2++) {
      const diff = this.bytes[i2] - other.bytes[i2];
      if (diff !== 0) {
        return Math.sign(diff);
      }
    }
    return 0;
  }
};
var V7Generator = class {
  /**
   * Creates a generator object with the default random number generator, or
   * with the specified one if passed as an argument. The specified random
   * number generator should be cryptographically strong and securely seeded.
   */
  constructor(randomNumberGenerator) {
    this.timestamp = 0;
    this.counter = 0;
    this.random = randomNumberGenerator !== null && randomNumberGenerator !== void 0 ? randomNumberGenerator : getDefaultRandom();
  }
  /**
   * Generates a new UUIDv7 object from the current timestamp, or resets the
   * generator upon significant timestamp rollback.
   *
   * This method returns a monotonically increasing UUID by reusing the previous
   * timestamp even if the up-to-date timestamp is smaller than the immediately
   * preceding UUID's. However, when such a clock rollback is considered
   * significant (i.e., by more than ten seconds), this method resets the
   * generator and returns a new UUID based on the given timestamp, breaking the
   * increasing order of UUIDs.
   *
   * See {@link generateOrAbort} for the other mode of generation and
   * {@link generateOrResetCore} for the low-level primitive.
   */
  generate() {
    return this.generateOrResetCore(Date.now(), 1e4);
  }
  /**
   * Generates a new UUIDv7 object from the current timestamp, or returns
   * `undefined` upon significant timestamp rollback.
   *
   * This method returns a monotonically increasing UUID by reusing the previous
   * timestamp even if the up-to-date timestamp is smaller than the immediately
   * preceding UUID's. However, when such a clock rollback is considered
   * significant (i.e., by more than ten seconds), this method aborts and
   * returns `undefined` immediately.
   *
   * See {@link generate} for the other mode of generation and
   * {@link generateOrAbortCore} for the low-level primitive.
   */
  generateOrAbort() {
    return this.generateOrAbortCore(Date.now(), 1e4);
  }
  /**
   * Generates a new UUIDv7 object from the `unixTsMs` passed, or resets the
   * generator upon significant timestamp rollback.
   *
   * This method is equivalent to {@link generate} except that it takes a custom
   * timestamp and clock rollback allowance.
   *
   * @param rollbackAllowance - The amount of `unixTsMs` rollback that is
   * considered significant. A suggested value is `10_000` (milliseconds).
   * @throws RangeError if `unixTsMs` is not a 48-bit positive integer.
   */
  generateOrResetCore(unixTsMs, rollbackAllowance) {
    let value2 = this.generateOrAbortCore(unixTsMs, rollbackAllowance);
    if (value2 === void 0) {
      this.timestamp = 0;
      value2 = this.generateOrAbortCore(unixTsMs, rollbackAllowance);
    }
    return value2;
  }
  /**
   * Generates a new UUIDv7 object from the `unixTsMs` passed, or returns
   * `undefined` upon significant timestamp rollback.
   *
   * This method is equivalent to {@link generateOrAbort} except that it takes a
   * custom timestamp and clock rollback allowance.
   *
   * @param rollbackAllowance - The amount of `unixTsMs` rollback that is
   * considered significant. A suggested value is `10_000` (milliseconds).
   * @throws RangeError if `unixTsMs` is not a 48-bit positive integer.
   */
  generateOrAbortCore(unixTsMs, rollbackAllowance) {
    const MAX_COUNTER = 4398046511103;
    if (!Number.isInteger(unixTsMs) || unixTsMs < 1 || unixTsMs > 281474976710655) {
      throw new RangeError("`unixTsMs` must be a 48-bit positive integer");
    } else if (rollbackAllowance < 0 || rollbackAllowance > 281474976710655) {
      throw new RangeError("`rollbackAllowance` out of reasonable range");
    }
    if (unixTsMs > this.timestamp) {
      this.timestamp = unixTsMs;
      this.resetCounter();
    } else if (unixTsMs + rollbackAllowance >= this.timestamp) {
      this.counter++;
      if (this.counter > MAX_COUNTER) {
        this.timestamp++;
        this.resetCounter();
      }
    } else {
      return void 0;
    }
    return UUID.fromFieldsV7(this.timestamp, Math.trunc(this.counter / 2 ** 30), this.counter & 2 ** 30 - 1, this.random.nextUint32());
  }
  /** Initializes the counter at a 42-bit random integer. */
  resetCounter() {
    this.counter = this.random.nextUint32() * 1024 + (this.random.nextUint32() & 1023);
  }
  /**
   * Generates a new UUIDv4 object utilizing the random number generator inside.
   *
   * @internal
   */
  generateV4() {
    const bytes = new Uint8Array(Uint32Array.of(this.random.nextUint32(), this.random.nextUint32(), this.random.nextUint32(), this.random.nextUint32()).buffer);
    bytes[6] = 64 | bytes[6] >>> 4;
    bytes[8] = 128 | bytes[8] >>> 2;
    return UUID.ofInner(bytes);
  }
};
var getDefaultRandom = () => {
  if (typeof crypto !== "undefined" && typeof crypto.getRandomValues !== "undefined") {
    return new BufferedCryptoRandom();
  } else {
    if (typeof UUIDV7_DENY_WEAK_RNG !== "undefined" && UUIDV7_DENY_WEAK_RNG) {
      throw new Error("no cryptographically strong RNG available");
    }
    return {
      nextUint32: () => Math.trunc(Math.random() * 65536) * 65536 + Math.trunc(Math.random() * 65536)
    };
  }
};
var BufferedCryptoRandom = class {
  constructor() {
    this.buffer = new Uint32Array(8);
    this.cursor = 65535;
  }
  nextUint32() {
    if (this.cursor >= this.buffer.length) {
      crypto.getRandomValues(this.buffer);
      this.cursor = 0;
    }
    return this.buffer[this.cursor++];
  }
};
var defaultGenerator;
var uuidv7 = () => uuidv7obj().toString();
var uuidv7obj = () => (defaultGenerator || (defaultGenerator = new V7Generator())).generate();

// src/babel.ts
init_esm_shims();
var t = __toESM(require_lib7(), 1);
function babelJsonReplacementPlugin(_2, opts) {
  const json = opts.json;
  return {
    name: "babel-json-replacement-plugin",
    visitor: {
      MemberExpression(path9) {
        const { node } = path9;
        if (t.isIdentifier(node.object, { name: opts.identifierName }) && t.isIdentifier(node.property) && node.property.name in json) {
          path9.replaceWith(t.valueToNode(json[node.property.name]));
        }
      }
    }
  };
}

// src/plugins/appsInTossWeb.ts
init_esm_shims();
var __typia_transform__validateReport = __toESM(require_validateReport(), 1);
import fs from "fs";
import path6 from "path";
import { createArtifact, collectDependencyVersions, appsInTossAppJson } from "@apps-in-toss/plugins";
import { isBuildFailure, isBuildSuccess } from "@granite-js/plugin-core";
import { getPackageRoot as getPackageRoot2 } from "@granite-js/utils";

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/index.js
init_esm_shims();

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/methods/create.js
init_esm_shims();

// ../../.yarn/cache/is-plain-obj-npm-4.1.0-51de366897-32130d651d.zip/node_modules/is-plain-obj/index.js
init_esm_shims();
function isPlainObject(value2) {
  if (typeof value2 !== "object" || value2 === null) {
    return false;
  }
  const prototype = Object.getPrototypeOf(value2);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value2) && !(Symbol.iterator in value2);
}

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/methods/parameters.js
init_esm_shims();

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/arguments/file-url.js
init_esm_shims();
import { fileURLToPath } from "node:url";
var safeNormalizeFileUrl = (file, name) => {
  const fileString = normalizeFileUrl(normalizeDenoExecPath(file));
  if (typeof fileString !== "string") {
    throw new TypeError(`${name} must be a string or a file URL: ${fileString}.`);
  }
  return fileString;
};
var normalizeDenoExecPath = (file) => isDenoExecPath(file) ? file.toString() : file;
var isDenoExecPath = (file) => typeof file !== "string" && file && Object.getPrototypeOf(file) === String.prototype;
var normalizeFileUrl = (file) => file instanceof URL ? fileURLToPath(file) : file;

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/methods/parameters.js
var normalizeParameters = (rawFile, rawArguments = [], rawOptions = {}) => {
  const filePath = safeNormalizeFileUrl(rawFile, "First argument");
  const [commandArguments, options] = isPlainObject(rawArguments) ? [[], rawArguments] : [rawArguments, rawOptions];
  if (!Array.isArray(commandArguments)) {
    throw new TypeError(`Second argument must be either an array of arguments or an options object: ${commandArguments}`);
  }
  if (commandArguments.some((commandArgument) => typeof commandArgument === "object" && commandArgument !== null)) {
    throw new TypeError(`Second argument must be an array of strings: ${commandArguments}`);
  }
  const normalizedArguments = commandArguments.map(String);
  const nullByteArgument = normalizedArguments.find((normalizedArgument) => normalizedArgument.includes("\0"));
  if (nullByteArgument !== void 0) {
    throw new TypeError(`Arguments cannot contain null bytes ("\\0"): ${nullByteArgument}`);
  }
  if (!isPlainObject(options)) {
    throw new TypeError(`Last argument must be an options object: ${options}`);
  }
  return [filePath, normalizedArguments, options];
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/methods/template.js
init_esm_shims();
import { ChildProcess } from "node:child_process";

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/utils/uint-array.js
init_esm_shims();
import { StringDecoder } from "node:string_decoder";
var { toString: objectToString } = Object.prototype;
var isArrayBuffer = (value2) => objectToString.call(value2) === "[object ArrayBuffer]";
var isUint8Array = (value2) => objectToString.call(value2) === "[object Uint8Array]";
var bufferToUint8Array = (buffer) => new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
var textEncoder = new TextEncoder();
var stringToUint8Array = (string) => textEncoder.encode(string);
var textDecoder = new TextDecoder();
var uint8ArrayToString = (uint8Array) => textDecoder.decode(uint8Array);
var joinToString = (uint8ArraysOrStrings, encoding) => {
  const strings = uint8ArraysToStrings(uint8ArraysOrStrings, encoding);
  return strings.join("");
};
var uint8ArraysToStrings = (uint8ArraysOrStrings, encoding) => {
  if (encoding === "utf8" && uint8ArraysOrStrings.every((uint8ArrayOrString) => typeof uint8ArrayOrString === "string")) {
    return uint8ArraysOrStrings;
  }
  const decoder = new StringDecoder(encoding);
  const strings = uint8ArraysOrStrings.map((uint8ArrayOrString) => typeof uint8ArrayOrString === "string" ? stringToUint8Array(uint8ArrayOrString) : uint8ArrayOrString).map((uint8Array) => decoder.write(uint8Array));
  const finalString = decoder.end();
  return finalString === "" ? strings : [...strings, finalString];
};
var joinToUint8Array = (uint8ArraysOrStrings) => {
  if (uint8ArraysOrStrings.length === 1 && isUint8Array(uint8ArraysOrStrings[0])) {
    return uint8ArraysOrStrings[0];
  }
  return concatUint8Arrays(stringsToUint8Arrays(uint8ArraysOrStrings));
};
var stringsToUint8Arrays = (uint8ArraysOrStrings) => uint8ArraysOrStrings.map((uint8ArrayOrString) => typeof uint8ArrayOrString === "string" ? stringToUint8Array(uint8ArrayOrString) : uint8ArrayOrString);
var concatUint8Arrays = (uint8Arrays) => {
  const result = new Uint8Array(getJoinLength(uint8Arrays));
  let index = 0;
  for (const uint8Array of uint8Arrays) {
    result.set(uint8Array, index);
    index += uint8Array.length;
  }
  return result;
};
var getJoinLength = (uint8Arrays) => {
  let joinLength = 0;
  for (const uint8Array of uint8Arrays) {
    joinLength += uint8Array.length;
  }
  return joinLength;
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/methods/template.js
var isTemplateString = (templates) => Array.isArray(templates) && Array.isArray(templates.raw);
var parseTemplates = (templates, expressions) => {
  let tokens = [];
  for (const [index, template] of templates.entries()) {
    tokens = parseTemplate({
      templates,
      expressions,
      tokens,
      index,
      template
    });
  }
  if (tokens.length === 0) {
    throw new TypeError("Template script must not be empty");
  }
  const [file, ...commandArguments] = tokens;
  return [file, commandArguments, {}];
};
var parseTemplate = ({ templates, expressions, tokens, index, template }) => {
  if (template === void 0) {
    throw new TypeError(`Invalid backslash sequence: ${templates.raw[index]}`);
  }
  const { nextTokens, leadingWhitespaces, trailingWhitespaces } = splitByWhitespaces(template, templates.raw[index]);
  const newTokens = concatTokens(tokens, nextTokens, leadingWhitespaces);
  if (index === expressions.length) {
    return newTokens;
  }
  const expression = expressions[index];
  const expressionTokens = Array.isArray(expression) ? expression.map((expression2) => parseExpression(expression2)) : [parseExpression(expression)];
  return concatTokens(newTokens, expressionTokens, trailingWhitespaces);
};
var splitByWhitespaces = (template, rawTemplate) => {
  if (rawTemplate.length === 0) {
    return { nextTokens: [], leadingWhitespaces: false, trailingWhitespaces: false };
  }
  const nextTokens = [];
  let templateStart = 0;
  const leadingWhitespaces = DELIMITERS.has(rawTemplate[0]);
  for (let templateIndex = 0, rawIndex = 0; templateIndex < template.length; templateIndex += 1, rawIndex += 1) {
    const rawCharacter = rawTemplate[rawIndex];
    if (DELIMITERS.has(rawCharacter)) {
      if (templateStart !== templateIndex) {
        nextTokens.push(template.slice(templateStart, templateIndex));
      }
      templateStart = templateIndex + 1;
    } else if (rawCharacter === "\\") {
      const nextRawCharacter = rawTemplate[rawIndex + 1];
      if (nextRawCharacter === "\n") {
        templateIndex -= 1;
        rawIndex += 1;
      } else if (nextRawCharacter === "u" && rawTemplate[rawIndex + 2] === "{") {
        rawIndex = rawTemplate.indexOf("}", rawIndex + 3);
      } else {
        rawIndex += ESCAPE_LENGTH[nextRawCharacter] ?? 1;
      }
    }
  }
  const trailingWhitespaces = templateStart === template.length;
  if (!trailingWhitespaces) {
    nextTokens.push(template.slice(templateStart));
  }
  return { nextTokens, leadingWhitespaces, trailingWhitespaces };
};
var DELIMITERS = /* @__PURE__ */ new Set([" ", "	", "\r", "\n"]);
var ESCAPE_LENGTH = { x: 3, u: 5 };
var concatTokens = (tokens, nextTokens, isSeparated) => isSeparated || tokens.length === 0 || nextTokens.length === 0 ? [...tokens, ...nextTokens] : [
  ...tokens.slice(0, -1),
  `${tokens.at(-1)}${nextTokens[0]}`,
  ...nextTokens.slice(1)
];
var parseExpression = (expression) => {
  const typeOfExpression = typeof expression;
  if (typeOfExpression === "string") {
    return expression;
  }
  if (typeOfExpression === "number") {
    return String(expression);
  }
  if (isPlainObject(expression) && ("stdout" in expression || "isMaxBuffer" in expression)) {
    return getSubprocessResult(expression);
  }
  if (expression instanceof ChildProcess || Object.prototype.toString.call(expression) === "[object Promise]") {
    throw new TypeError("Unexpected subprocess in template expression. Please use ${await subprocess} instead of ${subprocess}.");
  }
  throw new TypeError(`Unexpected "${typeOfExpression}" in template expression`);
};
var getSubprocessResult = ({ stdout }) => {
  if (typeof stdout === "string") {
    return stdout;
  }
  if (isUint8Array(stdout)) {
    return uint8ArrayToString(stdout);
  }
  if (stdout === void 0) {
    throw new TypeError(`Missing result.stdout in template expression. This is probably due to the previous subprocess' "stdout" option.`);
  }
  throw new TypeError(`Unexpected "${typeof stdout}" stdout in template expression`);
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/methods/main-sync.js
init_esm_shims();
import { spawnSync } from "node:child_process";

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/arguments/command.js
init_esm_shims();

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/verbose/start.js
init_esm_shims();

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/verbose/values.js
init_esm_shims();

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/arguments/specific.js
init_esm_shims();
import { debuglog } from "node:util";

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/utils/standard-stream.js
init_esm_shims();
import process2 from "node:process";
var isStandardStream = (stream) => STANDARD_STREAMS.includes(stream);
var STANDARD_STREAMS = [process2.stdin, process2.stdout, process2.stderr];
var STANDARD_STREAMS_ALIASES = ["stdin", "stdout", "stderr"];
var getStreamName = (fdNumber) => STANDARD_STREAMS_ALIASES[fdNumber] ?? `stdio[${fdNumber}]`;

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/arguments/specific.js
var normalizeFdSpecificOptions = (options) => {
  const optionsCopy = { ...options };
  for (const optionName of FD_SPECIFIC_OPTIONS) {
    optionsCopy[optionName] = normalizeFdSpecificOption(options, optionName);
  }
  return optionsCopy;
};
var normalizeFdSpecificOption = (options, optionName) => {
  const optionBaseArray = Array.from({ length: getStdioLength(options) + 1 });
  const optionArray = normalizeFdSpecificValue(options[optionName], optionBaseArray, optionName);
  return addDefaultValue(optionArray, optionName);
};
var getStdioLength = ({ stdio }) => Array.isArray(stdio) ? Math.max(stdio.length, STANDARD_STREAMS_ALIASES.length) : STANDARD_STREAMS_ALIASES.length;
var normalizeFdSpecificValue = (optionValue, optionArray, optionName) => isPlainObject(optionValue) ? normalizeOptionObject(optionValue, optionArray, optionName) : optionArray.fill(optionValue);
var normalizeOptionObject = (optionValue, optionArray, optionName) => {
  for (const fdName of Object.keys(optionValue).sort(compareFdName)) {
    for (const fdNumber of parseFdName(fdName, optionName, optionArray)) {
      optionArray[fdNumber] = optionValue[fdName];
    }
  }
  return optionArray;
};
var compareFdName = (fdNameA, fdNameB) => getFdNameOrder(fdNameA) < getFdNameOrder(fdNameB) ? 1 : -1;
var getFdNameOrder = (fdName) => {
  if (fdName === "stdout" || fdName === "stderr") {
    return 0;
  }
  return fdName === "all" ? 2 : 1;
};
var parseFdName = (fdName, optionName, optionArray) => {
  if (fdName === "ipc") {
    return [optionArray.length - 1];
  }
  const fdNumber = parseFd(fdName);
  if (fdNumber === void 0 || fdNumber === 0) {
    throw new TypeError(`"${optionName}.${fdName}" is invalid.
It must be "${optionName}.stdout", "${optionName}.stderr", "${optionName}.all", "${optionName}.ipc", or "${optionName}.fd3", "${optionName}.fd4" (and so on).`);
  }
  if (fdNumber >= optionArray.length) {
    throw new TypeError(`"${optionName}.${fdName}" is invalid: that file descriptor does not exist.
Please set the "stdio" option to ensure that file descriptor exists.`);
  }
  return fdNumber === "all" ? [1, 2] : [fdNumber];
};
var parseFd = (fdName) => {
  if (fdName === "all") {
    return fdName;
  }
  if (STANDARD_STREAMS_ALIASES.includes(fdName)) {
    return STANDARD_STREAMS_ALIASES.indexOf(fdName);
  }
  const regexpResult = FD_REGEXP.exec(fdName);
  if (regexpResult !== null) {
    return Number(regexpResult[1]);
  }
};
var FD_REGEXP = /^fd(\d+)$/;
var addDefaultValue = (optionArray, optionName) => optionArray.map((optionValue) => optionValue === void 0 ? DEFAULT_OPTIONS[optionName] : optionValue);
var verboseDefault = debuglog("execa").enabled ? "full" : "none";
var DEFAULT_OPTIONS = {
  lines: false,
  buffer: true,
  maxBuffer: 1e3 * 1e3 * 100,
  verbose: verboseDefault,
  stripFinalNewline: true
};
var FD_SPECIFIC_OPTIONS = ["lines", "buffer", "maxBuffer", "verbose", "stripFinalNewline"];
var getFdSpecificValue = (optionArray, fdNumber) => fdNumber === "ipc" ? optionArray.at(-1) : optionArray[fdNumber];

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/verbose/values.js
var isVerbose = ({ verbose }, fdNumber) => getFdVerbose(verbose, fdNumber) !== "none";
var isFullVerbose = ({ verbose }, fdNumber) => !["none", "short"].includes(getFdVerbose(verbose, fdNumber));
var getVerboseFunction = ({ verbose }, fdNumber) => {
  const fdVerbose = getFdVerbose(verbose, fdNumber);
  return isVerboseFunction(fdVerbose) ? fdVerbose : void 0;
};
var getFdVerbose = (verbose, fdNumber) => fdNumber === void 0 ? getFdGenericVerbose(verbose) : getFdSpecificValue(verbose, fdNumber);
var getFdGenericVerbose = (verbose) => verbose.find((fdVerbose) => isVerboseFunction(fdVerbose)) ?? VERBOSE_VALUES.findLast((fdVerbose) => verbose.includes(fdVerbose));
var isVerboseFunction = (fdVerbose) => typeof fdVerbose === "function";
var VERBOSE_VALUES = ["none", "short", "full"];

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/verbose/log.js
init_esm_shims();
import { inspect } from "node:util";

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/arguments/escape.js
init_esm_shims();
import { platform } from "node:process";
import { stripVTControlCharacters } from "node:util";
var joinCommand = (filePath, rawArguments) => {
  const fileAndArguments = [filePath, ...rawArguments];
  const command = fileAndArguments.join(" ");
  const escapedCommand = fileAndArguments.map((fileAndArgument) => quoteString(escapeControlCharacters(fileAndArgument))).join(" ");
  return { command, escapedCommand };
};
var escapeLines = (lines) => stripVTControlCharacters(lines).split("\n").map((line) => escapeControlCharacters(line)).join("\n");
var escapeControlCharacters = (line) => line.replaceAll(SPECIAL_CHAR_REGEXP, (character) => escapeControlCharacter(character));
var escapeControlCharacter = (character) => {
  const commonEscape = COMMON_ESCAPES[character];
  if (commonEscape !== void 0) {
    return commonEscape;
  }
  const codepoint = character.codePointAt(0);
  const codepointHex = codepoint.toString(16);
  return codepoint <= ASTRAL_START ? `\\u${codepointHex.padStart(4, "0")}` : `\\U${codepointHex}`;
};
var getSpecialCharRegExp = () => {
  try {
    return new RegExp("\\p{Separator}|\\p{Other}", "gu");
  } catch {
    return /[\s\u0000-\u001F\u007F-\u009F\u00AD]/g;
  }
};
var SPECIAL_CHAR_REGEXP = getSpecialCharRegExp();
var COMMON_ESCAPES = {
  " ": " ",
  "\b": "\\b",
  "\f": "\\f",
  "\n": "\\n",
  "\r": "\\r",
  "	": "\\t"
};
var ASTRAL_START = 65535;
var quoteString = (escapedArgument) => {
  if (NO_ESCAPE_REGEXP.test(escapedArgument)) {
    return escapedArgument;
  }
  return platform === "win32" ? `"${escapedArgument.replaceAll('"', '""')}"` : `'${escapedArgument.replaceAll("'", "'\\''")}'`;
};
var NO_ESCAPE_REGEXP = /^[\w./-]+$/;

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/verbose/default.js
init_esm_shims();

// ../../.yarn/cache/figures-npm-6.1.0-e7a1ebaaa8-9159df4264.zip/node_modules/figures/index.js
init_esm_shims();

// ../../.yarn/cache/is-unicode-supported-npm-2.1.0-0cc9ffef12-a0f53e9a7c.zip/node_modules/is-unicode-supported/index.js
init_esm_shims();
import process3 from "node:process";
function isUnicodeSupported() {
  const { env } = process3;
  const { TERM, TERM_PROGRAM } = env;
  if (process3.platform !== "win32") {
    return TERM !== "linux";
  }
  return Boolean(env.WT_SESSION) || Boolean(env.TERMINUS_SUBLIME) || env.ConEmuTask === "{cmd::Cmder}" || TERM_PROGRAM === "Terminus-Sublime" || TERM_PROGRAM === "vscode" || TERM === "xterm-256color" || TERM === "alacritty" || TERM === "rxvt-unicode" || TERM === "rxvt-unicode-256color" || env.TERMINAL_EMULATOR === "JetBrains-JediTerm";
}

// ../../.yarn/cache/figures-npm-6.1.0-e7a1ebaaa8-9159df4264.zip/node_modules/figures/index.js
var common = {
  circleQuestionMark: "(?)",
  questionMarkPrefix: "(?)",
  square: "\u2588",
  squareDarkShade: "\u2593",
  squareMediumShade: "\u2592",
  squareLightShade: "\u2591",
  squareTop: "\u2580",
  squareBottom: "\u2584",
  squareLeft: "\u258C",
  squareRight: "\u2590",
  squareCenter: "\u25A0",
  bullet: "\u25CF",
  dot: "\u2024",
  ellipsis: "\u2026",
  pointerSmall: "\u203A",
  triangleUp: "\u25B2",
  triangleUpSmall: "\u25B4",
  triangleDown: "\u25BC",
  triangleDownSmall: "\u25BE",
  triangleLeftSmall: "\u25C2",
  triangleRightSmall: "\u25B8",
  home: "\u2302",
  heart: "\u2665",
  musicNote: "\u266A",
  musicNoteBeamed: "\u266B",
  arrowUp: "\u2191",
  arrowDown: "\u2193",
  arrowLeft: "\u2190",
  arrowRight: "\u2192",
  arrowLeftRight: "\u2194",
  arrowUpDown: "\u2195",
  almostEqual: "\u2248",
  notEqual: "\u2260",
  lessOrEqual: "\u2264",
  greaterOrEqual: "\u2265",
  identical: "\u2261",
  infinity: "\u221E",
  subscriptZero: "\u2080",
  subscriptOne: "\u2081",
  subscriptTwo: "\u2082",
  subscriptThree: "\u2083",
  subscriptFour: "\u2084",
  subscriptFive: "\u2085",
  subscriptSix: "\u2086",
  subscriptSeven: "\u2087",
  subscriptEight: "\u2088",
  subscriptNine: "\u2089",
  oneHalf: "\xBD",
  oneThird: "\u2153",
  oneQuarter: "\xBC",
  oneFifth: "\u2155",
  oneSixth: "\u2159",
  oneEighth: "\u215B",
  twoThirds: "\u2154",
  twoFifths: "\u2156",
  threeQuarters: "\xBE",
  threeFifths: "\u2157",
  threeEighths: "\u215C",
  fourFifths: "\u2158",
  fiveSixths: "\u215A",
  fiveEighths: "\u215D",
  sevenEighths: "\u215E",
  line: "\u2500",
  lineBold: "\u2501",
  lineDouble: "\u2550",
  lineDashed0: "\u2504",
  lineDashed1: "\u2505",
  lineDashed2: "\u2508",
  lineDashed3: "\u2509",
  lineDashed4: "\u254C",
  lineDashed5: "\u254D",
  lineDashed6: "\u2574",
  lineDashed7: "\u2576",
  lineDashed8: "\u2578",
  lineDashed9: "\u257A",
  lineDashed10: "\u257C",
  lineDashed11: "\u257E",
  lineDashed12: "\u2212",
  lineDashed13: "\u2013",
  lineDashed14: "\u2010",
  lineDashed15: "\u2043",
  lineVertical: "\u2502",
  lineVerticalBold: "\u2503",
  lineVerticalDouble: "\u2551",
  lineVerticalDashed0: "\u2506",
  lineVerticalDashed1: "\u2507",
  lineVerticalDashed2: "\u250A",
  lineVerticalDashed3: "\u250B",
  lineVerticalDashed4: "\u254E",
  lineVerticalDashed5: "\u254F",
  lineVerticalDashed6: "\u2575",
  lineVerticalDashed7: "\u2577",
  lineVerticalDashed8: "\u2579",
  lineVerticalDashed9: "\u257B",
  lineVerticalDashed10: "\u257D",
  lineVerticalDashed11: "\u257F",
  lineDownLeft: "\u2510",
  lineDownLeftArc: "\u256E",
  lineDownBoldLeftBold: "\u2513",
  lineDownBoldLeft: "\u2512",
  lineDownLeftBold: "\u2511",
  lineDownDoubleLeftDouble: "\u2557",
  lineDownDoubleLeft: "\u2556",
  lineDownLeftDouble: "\u2555",
  lineDownRight: "\u250C",
  lineDownRightArc: "\u256D",
  lineDownBoldRightBold: "\u250F",
  lineDownBoldRight: "\u250E",
  lineDownRightBold: "\u250D",
  lineDownDoubleRightDouble: "\u2554",
  lineDownDoubleRight: "\u2553",
  lineDownRightDouble: "\u2552",
  lineUpLeft: "\u2518",
  lineUpLeftArc: "\u256F",
  lineUpBoldLeftBold: "\u251B",
  lineUpBoldLeft: "\u251A",
  lineUpLeftBold: "\u2519",
  lineUpDoubleLeftDouble: "\u255D",
  lineUpDoubleLeft: "\u255C",
  lineUpLeftDouble: "\u255B",
  lineUpRight: "\u2514",
  lineUpRightArc: "\u2570",
  lineUpBoldRightBold: "\u2517",
  lineUpBoldRight: "\u2516",
  lineUpRightBold: "\u2515",
  lineUpDoubleRightDouble: "\u255A",
  lineUpDoubleRight: "\u2559",
  lineUpRightDouble: "\u2558",
  lineUpDownLeft: "\u2524",
  lineUpBoldDownBoldLeftBold: "\u252B",
  lineUpBoldDownBoldLeft: "\u2528",
  lineUpDownLeftBold: "\u2525",
  lineUpBoldDownLeftBold: "\u2529",
  lineUpDownBoldLeftBold: "\u252A",
  lineUpDownBoldLeft: "\u2527",
  lineUpBoldDownLeft: "\u2526",
  lineUpDoubleDownDoubleLeftDouble: "\u2563",
  lineUpDoubleDownDoubleLeft: "\u2562",
  lineUpDownLeftDouble: "\u2561",
  lineUpDownRight: "\u251C",
  lineUpBoldDownBoldRightBold: "\u2523",
  lineUpBoldDownBoldRight: "\u2520",
  lineUpDownRightBold: "\u251D",
  lineUpBoldDownRightBold: "\u2521",
  lineUpDownBoldRightBold: "\u2522",
  lineUpDownBoldRight: "\u251F",
  lineUpBoldDownRight: "\u251E",
  lineUpDoubleDownDoubleRightDouble: "\u2560",
  lineUpDoubleDownDoubleRight: "\u255F",
  lineUpDownRightDouble: "\u255E",
  lineDownLeftRight: "\u252C",
  lineDownBoldLeftBoldRightBold: "\u2533",
  lineDownLeftBoldRightBold: "\u252F",
  lineDownBoldLeftRight: "\u2530",
  lineDownBoldLeftBoldRight: "\u2531",
  lineDownBoldLeftRightBold: "\u2532",
  lineDownLeftRightBold: "\u252E",
  lineDownLeftBoldRight: "\u252D",
  lineDownDoubleLeftDoubleRightDouble: "\u2566",
  lineDownDoubleLeftRight: "\u2565",
  lineDownLeftDoubleRightDouble: "\u2564",
  lineUpLeftRight: "\u2534",
  lineUpBoldLeftBoldRightBold: "\u253B",
  lineUpLeftBoldRightBold: "\u2537",
  lineUpBoldLeftRight: "\u2538",
  lineUpBoldLeftBoldRight: "\u2539",
  lineUpBoldLeftRightBold: "\u253A",
  lineUpLeftRightBold: "\u2536",
  lineUpLeftBoldRight: "\u2535",
  lineUpDoubleLeftDoubleRightDouble: "\u2569",
  lineUpDoubleLeftRight: "\u2568",
  lineUpLeftDoubleRightDouble: "\u2567",
  lineUpDownLeftRight: "\u253C",
  lineUpBoldDownBoldLeftBoldRightBold: "\u254B",
  lineUpDownBoldLeftBoldRightBold: "\u2548",
  lineUpBoldDownLeftBoldRightBold: "\u2547",
  lineUpBoldDownBoldLeftRightBold: "\u254A",
  lineUpBoldDownBoldLeftBoldRight: "\u2549",
  lineUpBoldDownLeftRight: "\u2540",
  lineUpDownBoldLeftRight: "\u2541",
  lineUpDownLeftBoldRight: "\u253D",
  lineUpDownLeftRightBold: "\u253E",
  lineUpBoldDownBoldLeftRight: "\u2542",
  lineUpDownLeftBoldRightBold: "\u253F",
  lineUpBoldDownLeftBoldRight: "\u2543",
  lineUpBoldDownLeftRightBold: "\u2544",
  lineUpDownBoldLeftBoldRight: "\u2545",
  lineUpDownBoldLeftRightBold: "\u2546",
  lineUpDoubleDownDoubleLeftDoubleRightDouble: "\u256C",
  lineUpDoubleDownDoubleLeftRight: "\u256B",
  lineUpDownLeftDoubleRightDouble: "\u256A",
  lineCross: "\u2573",
  lineBackslash: "\u2572",
  lineSlash: "\u2571"
};
var specialMainSymbols = {
  tick: "\u2714",
  info: "\u2139",
  warning: "\u26A0",
  cross: "\u2718",
  squareSmall: "\u25FB",
  squareSmallFilled: "\u25FC",
  circle: "\u25EF",
  circleFilled: "\u25C9",
  circleDotted: "\u25CC",
  circleDouble: "\u25CE",
  circleCircle: "\u24DE",
  circleCross: "\u24E7",
  circlePipe: "\u24BE",
  radioOn: "\u25C9",
  radioOff: "\u25EF",
  checkboxOn: "\u2612",
  checkboxOff: "\u2610",
  checkboxCircleOn: "\u24E7",
  checkboxCircleOff: "\u24BE",
  pointer: "\u276F",
  triangleUpOutline: "\u25B3",
  triangleLeft: "\u25C0",
  triangleRight: "\u25B6",
  lozenge: "\u25C6",
  lozengeOutline: "\u25C7",
  hamburger: "\u2630",
  smiley: "\u32E1",
  mustache: "\u0DF4",
  star: "\u2605",
  play: "\u25B6",
  nodejs: "\u2B22",
  oneSeventh: "\u2150",
  oneNinth: "\u2151",
  oneTenth: "\u2152"
};
var specialFallbackSymbols = {
  tick: "\u221A",
  info: "i",
  warning: "\u203C",
  cross: "\xD7",
  squareSmall: "\u25A1",
  squareSmallFilled: "\u25A0",
  circle: "( )",
  circleFilled: "(*)",
  circleDotted: "( )",
  circleDouble: "( )",
  circleCircle: "(\u25CB)",
  circleCross: "(\xD7)",
  circlePipe: "(\u2502)",
  radioOn: "(*)",
  radioOff: "( )",
  checkboxOn: "[\xD7]",
  checkboxOff: "[ ]",
  checkboxCircleOn: "(\xD7)",
  checkboxCircleOff: "( )",
  pointer: ">",
  triangleUpOutline: "\u2206",
  triangleLeft: "\u25C4",
  triangleRight: "\u25BA",
  lozenge: "\u2666",
  lozengeOutline: "\u25CA",
  hamburger: "\u2261",
  smiley: "\u263A",
  mustache: "\u250C\u2500\u2510",
  star: "\u2736",
  play: "\u25BA",
  nodejs: "\u2666",
  oneSeventh: "1/7",
  oneNinth: "1/9",
  oneTenth: "1/10"
};
var mainSymbols = { ...common, ...specialMainSymbols };
var fallbackSymbols = { ...common, ...specialFallbackSymbols };
var shouldUseMain = isUnicodeSupported();
var figures = shouldUseMain ? mainSymbols : fallbackSymbols;
var figures_default = figures;
var replacements = Object.entries(specialMainSymbols);

// ../../.yarn/cache/yoctocolors-npm-2.1.1-ca4c9ba8db-85903f7fa9.zip/node_modules/yoctocolors/base.js
init_esm_shims();
import tty2 from "node:tty";
var hasColors = tty2?.WriteStream?.prototype?.hasColors?.() ?? false;
var format = (open, close) => {
  if (!hasColors) {
    return (input) => input;
  }
  const openCode = `\x1B[${open}m`;
  const closeCode = `\x1B[${close}m`;
  return (input) => {
    const string = input + "";
    let index = string.indexOf(closeCode);
    if (index === -1) {
      return openCode + string + closeCode;
    }
    let result = openCode;
    let lastIndex = 0;
    while (index !== -1) {
      result += string.slice(lastIndex, index) + openCode;
      lastIndex = index + closeCode.length;
      index = string.indexOf(closeCode, lastIndex);
    }
    result += string.slice(lastIndex) + closeCode;
    return result;
  };
};
var reset = format(0, 0);
var bold = format(1, 22);
var dim = format(2, 22);
var italic = format(3, 23);
var underline = format(4, 24);
var overline = format(53, 55);
var inverse = format(7, 27);
var hidden = format(8, 28);
var strikethrough = format(9, 29);
var black = format(30, 39);
var red = format(31, 39);
var green = format(32, 39);
var yellow = format(33, 39);
var blue = format(34, 39);
var magenta = format(35, 39);
var cyan = format(36, 39);
var white = format(37, 39);
var gray = format(90, 39);
var bgBlack = format(40, 49);
var bgRed = format(41, 49);
var bgGreen = format(42, 49);
var bgYellow = format(43, 49);
var bgBlue = format(44, 49);
var bgMagenta = format(45, 49);
var bgCyan = format(46, 49);
var bgWhite = format(47, 49);
var bgGray = format(100, 49);
var redBright = format(91, 39);
var greenBright = format(92, 39);
var yellowBright = format(93, 39);
var blueBright = format(94, 39);
var magentaBright = format(95, 39);
var cyanBright = format(96, 39);
var whiteBright = format(97, 39);
var bgRedBright = format(101, 49);
var bgGreenBright = format(102, 49);
var bgYellowBright = format(103, 49);
var bgBlueBright = format(104, 49);
var bgMagentaBright = format(105, 49);
var bgCyanBright = format(106, 49);
var bgWhiteBright = format(107, 49);

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/verbose/default.js
var defaultVerboseFunction = ({
  type,
  message,
  timestamp,
  piped,
  commandId,
  result: { failed = false } = {},
  options: { reject = true }
}) => {
  const timestampString = serializeTimestamp(timestamp);
  const icon = ICONS[type]({ failed, reject, piped });
  const color = COLORS[type]({ reject });
  return `${gray(`[${timestampString}]`)} ${gray(`[${commandId}]`)} ${color(icon)} ${color(message)}`;
};
var serializeTimestamp = (timestamp) => `${padField(timestamp.getHours(), 2)}:${padField(timestamp.getMinutes(), 2)}:${padField(timestamp.getSeconds(), 2)}.${padField(timestamp.getMilliseconds(), 3)}`;
var padField = (field, padding) => String(field).padStart(padding, "0");
var getFinalIcon = ({ failed, reject }) => {
  if (!failed) {
    return figures_default.tick;
  }
  return reject ? figures_default.cross : figures_default.warning;
};
var ICONS = {
  command: ({ piped }) => piped ? "|" : "$",
  output: () => " ",
  ipc: () => "*",
  error: getFinalIcon,
  duration: getFinalIcon
};
var identity = (string) => string;
var COLORS = {
  command: () => bold,
  output: () => identity,
  ipc: () => identity,
  error: ({ reject }) => reject ? redBright : yellowBright,
  duration: () => gray
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/verbose/custom.js
init_esm_shims();
var applyVerboseOnLines = (printedLines, verboseInfo, fdNumber) => {
  const verboseFunction = getVerboseFunction(verboseInfo, fdNumber);
  return printedLines.map(({ verboseLine, verboseObject }) => applyVerboseFunction(verboseLine, verboseObject, verboseFunction)).filter((printedLine) => printedLine !== void 0).map((printedLine) => appendNewline(printedLine)).join("");
};
var applyVerboseFunction = (verboseLine, verboseObject, verboseFunction) => {
  if (verboseFunction === void 0) {
    return verboseLine;
  }
  const printedLine = verboseFunction(verboseLine, verboseObject);
  if (typeof printedLine === "string") {
    return printedLine;
  }
};
var appendNewline = (printedLine) => printedLine.endsWith("\n") ? printedLine : `${printedLine}
`;

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/verbose/log.js
var verboseLog = ({ type, verboseMessage, fdNumber, verboseInfo, result }) => {
  const verboseObject = getVerboseObject({ type, result, verboseInfo });
  const printedLines = getPrintedLines(verboseMessage, verboseObject);
  const finalLines = applyVerboseOnLines(printedLines, verboseInfo, fdNumber);
  if (finalLines !== "") {
    console.warn(finalLines.slice(0, -1));
  }
};
var getVerboseObject = ({
  type,
  result,
  verboseInfo: { escapedCommand, commandId, rawOptions: { piped = false, ...options } }
}) => ({
  type,
  escapedCommand,
  commandId: `${commandId}`,
  timestamp: /* @__PURE__ */ new Date(),
  piped,
  result,
  options
});
var getPrintedLines = (verboseMessage, verboseObject) => verboseMessage.split("\n").map((message) => getPrintedLine({ ...verboseObject, message }));
var getPrintedLine = (verboseObject) => {
  const verboseLine = defaultVerboseFunction(verboseObject);
  return { verboseLine, verboseObject };
};
var serializeVerboseMessage = (message) => {
  const messageString = typeof message === "string" ? message : inspect(message);
  const escapedMessage = escapeLines(messageString);
  return escapedMessage.replaceAll("	", " ".repeat(TAB_SIZE));
};
var TAB_SIZE = 2;

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/verbose/start.js
var logCommand = (escapedCommand, verboseInfo) => {
  if (!isVerbose(verboseInfo)) {
    return;
  }
  verboseLog({
    type: "command",
    verboseMessage: escapedCommand,
    verboseInfo
  });
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/verbose/info.js
init_esm_shims();
var getVerboseInfo = (verbose, escapedCommand, rawOptions) => {
  validateVerbose(verbose);
  const commandId = getCommandId(verbose);
  return {
    verbose,
    escapedCommand,
    commandId,
    rawOptions
  };
};
var getCommandId = (verbose) => isVerbose({ verbose }) ? COMMAND_ID++ : void 0;
var COMMAND_ID = 0n;
var validateVerbose = (verbose) => {
  for (const fdVerbose of verbose) {
    if (fdVerbose === false) {
      throw new TypeError(`The "verbose: false" option was renamed to "verbose: 'none'".`);
    }
    if (fdVerbose === true) {
      throw new TypeError(`The "verbose: true" option was renamed to "verbose: 'short'".`);
    }
    if (!VERBOSE_VALUES.includes(fdVerbose) && !isVerboseFunction(fdVerbose)) {
      const allowedValues = VERBOSE_VALUES.map((allowedValue) => `'${allowedValue}'`).join(", ");
      throw new TypeError(`The "verbose" option must not be ${fdVerbose}. Allowed values are: ${allowedValues} or a function.`);
    }
  }
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/return/duration.js
init_esm_shims();
import { hrtime } from "node:process";
var getStartTime = () => hrtime.bigint();
var getDurationMs = (startTime) => Number(hrtime.bigint() - startTime) / 1e6;

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/arguments/command.js
var handleCommand = (filePath, rawArguments, rawOptions) => {
  const startTime = getStartTime();
  const { command, escapedCommand } = joinCommand(filePath, rawArguments);
  const verbose = normalizeFdSpecificOption(rawOptions, "verbose");
  const verboseInfo = getVerboseInfo(verbose, escapedCommand, { ...rawOptions });
  logCommand(escapedCommand, verboseInfo);
  return {
    command,
    escapedCommand,
    startTime,
    verboseInfo
  };
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/arguments/options.js
init_esm_shims();
var import_cross_spawn = __toESM(require_cross_spawn(), 1);
import path5 from "node:path";
import process6 from "node:process";

// ../../.yarn/cache/npm-run-path-npm-6.0.0-e1f8e169a9-b223c8a0dc.zip/node_modules/npm-run-path/index.js
init_esm_shims();
import process4 from "node:process";
import path2 from "node:path";

// ../../.yarn/cache/path-key-npm-4.0.0-9f9fba604f-794efeef32.zip/node_modules/path-key/index.js
init_esm_shims();
function pathKey(options = {}) {
  const {
    env = process.env,
    platform: platform2 = process.platform
  } = options;
  if (platform2 !== "win32") {
    return "PATH";
  }
  return Object.keys(env).reverse().find((key) => key.toUpperCase() === "PATH") || "Path";
}

// ../../.yarn/cache/unicorn-magic-npm-0.3.0-872250a85b-0a32a997d6.zip/node_modules/unicorn-magic/node.js
init_esm_shims();
import { promisify } from "node:util";
import { execFile as execFileCallback, execFileSync as execFileSyncOriginal } from "node:child_process";
import path from "node:path";
import { fileURLToPath as fileURLToPath2 } from "node:url";
var execFileOriginal = promisify(execFileCallback);
function toPath(urlOrPath) {
  return urlOrPath instanceof URL ? fileURLToPath2(urlOrPath) : urlOrPath;
}
function traversePathUp(startPath) {
  return {
    *[Symbol.iterator]() {
      let currentPath = path.resolve(toPath(startPath));
      let previousPath;
      while (previousPath !== currentPath) {
        yield currentPath;
        previousPath = currentPath;
        currentPath = path.resolve(currentPath, "..");
      }
    }
  };
}
var TEN_MEGABYTES_IN_BYTES = 10 * 1024 * 1024;

// ../../.yarn/cache/npm-run-path-npm-6.0.0-e1f8e169a9-b223c8a0dc.zip/node_modules/npm-run-path/index.js
var npmRunPath = ({
  cwd = process4.cwd(),
  path: pathOption = process4.env[pathKey()],
  preferLocal = true,
  execPath: execPath2 = process4.execPath,
  addExecPath = true
} = {}) => {
  const cwdPath = path2.resolve(toPath(cwd));
  const result = [];
  const pathParts = pathOption.split(path2.delimiter);
  if (preferLocal) {
    applyPreferLocal(result, pathParts, cwdPath);
  }
  if (addExecPath) {
    applyExecPath(result, pathParts, execPath2, cwdPath);
  }
  return pathOption === "" || pathOption === path2.delimiter ? `${result.join(path2.delimiter)}${pathOption}` : [...result, pathOption].join(path2.delimiter);
};
var applyPreferLocal = (result, pathParts, cwdPath) => {
  for (const directory of traversePathUp(cwdPath)) {
    const pathPart = path2.join(directory, "node_modules/.bin");
    if (!pathParts.includes(pathPart)) {
      result.push(pathPart);
    }
  }
};
var applyExecPath = (result, pathParts, execPath2, cwdPath) => {
  const pathPart = path2.resolve(cwdPath, toPath(execPath2), "..");
  if (!pathParts.includes(pathPart)) {
    result.push(pathPart);
  }
};
var npmRunPathEnv = ({ env = process4.env, ...options } = {}) => {
  env = { ...env };
  const pathName = pathKey({ env });
  options.path = env[pathName];
  env[pathName] = npmRunPath(options);
  return env;
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/terminate/kill.js
init_esm_shims();
import { setTimeout as setTimeout2 } from "node:timers/promises";

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/return/final-error.js
init_esm_shims();
var getFinalError = (originalError, message, isSync) => {
  const ErrorClass = isSync ? ExecaSyncError : ExecaError;
  const options = originalError instanceof DiscardedError ? {} : { cause: originalError };
  return new ErrorClass(message, options);
};
var DiscardedError = class extends Error {
};
var setErrorName = (ErrorClass, value2) => {
  Object.defineProperty(ErrorClass.prototype, "name", {
    value: value2,
    writable: true,
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ErrorClass.prototype, execaErrorSymbol, {
    value: true,
    writable: false,
    enumerable: false,
    configurable: false
  });
};
var isExecaError = (error) => isErrorInstance(error) && execaErrorSymbol in error;
var execaErrorSymbol = Symbol("isExecaError");
var isErrorInstance = (value2) => Object.prototype.toString.call(value2) === "[object Error]";
var ExecaError = class extends Error {
};
setErrorName(ExecaError, ExecaError.name);
var ExecaSyncError = class extends Error {
};
setErrorName(ExecaSyncError, ExecaSyncError.name);

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/terminate/signal.js
init_esm_shims();
import { constants as constants3 } from "node:os";

// ../../.yarn/cache/human-signals-npm-8.0.0-b46b2106fd-e4dac4f7d3.zip/node_modules/human-signals/build/src/main.js
init_esm_shims();
import { constants as constants2 } from "node:os";

// ../../.yarn/cache/human-signals-npm-8.0.0-b46b2106fd-e4dac4f7d3.zip/node_modules/human-signals/build/src/realtime.js
init_esm_shims();
var getRealtimeSignals = () => {
  const length = SIGRTMAX - SIGRTMIN + 1;
  return Array.from({ length }, getRealtimeSignal);
};
var getRealtimeSignal = (value2, index) => ({
  name: `SIGRT${index + 1}`,
  number: SIGRTMIN + index,
  action: "terminate",
  description: "Application-specific signal (realtime)",
  standard: "posix"
});
var SIGRTMIN = 34;
var SIGRTMAX = 64;

// ../../.yarn/cache/human-signals-npm-8.0.0-b46b2106fd-e4dac4f7d3.zip/node_modules/human-signals/build/src/signals.js
init_esm_shims();
import { constants } from "node:os";

// ../../.yarn/cache/human-signals-npm-8.0.0-b46b2106fd-e4dac4f7d3.zip/node_modules/human-signals/build/src/core.js
init_esm_shims();
var SIGNALS = [
  {
    name: "SIGHUP",
    number: 1,
    action: "terminate",
    description: "Terminal closed",
    standard: "posix"
  },
  {
    name: "SIGINT",
    number: 2,
    action: "terminate",
    description: "User interruption with CTRL-C",
    standard: "ansi"
  },
  {
    name: "SIGQUIT",
    number: 3,
    action: "core",
    description: "User interruption with CTRL-\\",
    standard: "posix"
  },
  {
    name: "SIGILL",
    number: 4,
    action: "core",
    description: "Invalid machine instruction",
    standard: "ansi"
  },
  {
    name: "SIGTRAP",
    number: 5,
    action: "core",
    description: "Debugger breakpoint",
    standard: "posix"
  },
  {
    name: "SIGABRT",
    number: 6,
    action: "core",
    description: "Aborted",
    standard: "ansi"
  },
  {
    name: "SIGIOT",
    number: 6,
    action: "core",
    description: "Aborted",
    standard: "bsd"
  },
  {
    name: "SIGBUS",
    number: 7,
    action: "core",
    description: "Bus error due to misaligned, non-existing address or paging error",
    standard: "bsd"
  },
  {
    name: "SIGEMT",
    number: 7,
    action: "terminate",
    description: "Command should be emulated but is not implemented",
    standard: "other"
  },
  {
    name: "SIGFPE",
    number: 8,
    action: "core",
    description: "Floating point arithmetic error",
    standard: "ansi"
  },
  {
    name: "SIGKILL",
    number: 9,
    action: "terminate",
    description: "Forced termination",
    standard: "posix",
    forced: true
  },
  {
    name: "SIGUSR1",
    number: 10,
    action: "terminate",
    description: "Application-specific signal",
    standard: "posix"
  },
  {
    name: "SIGSEGV",
    number: 11,
    action: "core",
    description: "Segmentation fault",
    standard: "ansi"
  },
  {
    name: "SIGUSR2",
    number: 12,
    action: "terminate",
    description: "Application-specific signal",
    standard: "posix"
  },
  {
    name: "SIGPIPE",
    number: 13,
    action: "terminate",
    description: "Broken pipe or socket",
    standard: "posix"
  },
  {
    name: "SIGALRM",
    number: 14,
    action: "terminate",
    description: "Timeout or timer",
    standard: "posix"
  },
  {
    name: "SIGTERM",
    number: 15,
    action: "terminate",
    description: "Termination",
    standard: "ansi"
  },
  {
    name: "SIGSTKFLT",
    number: 16,
    action: "terminate",
    description: "Stack is empty or overflowed",
    standard: "other"
  },
  {
    name: "SIGCHLD",
    number: 17,
    action: "ignore",
    description: "Child process terminated, paused or unpaused",
    standard: "posix"
  },
  {
    name: "SIGCLD",
    number: 17,
    action: "ignore",
    description: "Child process terminated, paused or unpaused",
    standard: "other"
  },
  {
    name: "SIGCONT",
    number: 18,
    action: "unpause",
    description: "Unpaused",
    standard: "posix",
    forced: true
  },
  {
    name: "SIGSTOP",
    number: 19,
    action: "pause",
    description: "Paused",
    standard: "posix",
    forced: true
  },
  {
    name: "SIGTSTP",
    number: 20,
    action: "pause",
    description: 'Paused using CTRL-Z or "suspend"',
    standard: "posix"
  },
  {
    name: "SIGTTIN",
    number: 21,
    action: "pause",
    description: "Background process cannot read terminal input",
    standard: "posix"
  },
  {
    name: "SIGBREAK",
    number: 21,
    action: "terminate",
    description: "User interruption with CTRL-BREAK",
    standard: "other"
  },
  {
    name: "SIGTTOU",
    number: 22,
    action: "pause",
    description: "Background process cannot write to terminal output",
    standard: "posix"
  },
  {
    name: "SIGURG",
    number: 23,
    action: "ignore",
    description: "Socket received out-of-band data",
    standard: "bsd"
  },
  {
    name: "SIGXCPU",
    number: 24,
    action: "core",
    description: "Process timed out",
    standard: "bsd"
  },
  {
    name: "SIGXFSZ",
    number: 25,
    action: "core",
    description: "File too big",
    standard: "bsd"
  },
  {
    name: "SIGVTALRM",
    number: 26,
    action: "terminate",
    description: "Timeout or timer",
    standard: "bsd"
  },
  {
    name: "SIGPROF",
    number: 27,
    action: "terminate",
    description: "Timeout or timer",
    standard: "bsd"
  },
  {
    name: "SIGWINCH",
    number: 28,
    action: "ignore",
    description: "Terminal window size changed",
    standard: "bsd"
  },
  {
    name: "SIGIO",
    number: 29,
    action: "terminate",
    description: "I/O is available",
    standard: "other"
  },
  {
    name: "SIGPOLL",
    number: 29,
    action: "terminate",
    description: "Watched event",
    standard: "other"
  },
  {
    name: "SIGINFO",
    number: 29,
    action: "ignore",
    description: "Request for process information",
    standard: "other"
  },
  {
    name: "SIGPWR",
    number: 30,
    action: "terminate",
    description: "Device running out of power",
    standard: "systemv"
  },
  {
    name: "SIGSYS",
    number: 31,
    action: "core",
    description: "Invalid system call",
    standard: "other"
  },
  {
    name: "SIGUNUSED",
    number: 31,
    action: "terminate",
    description: "Invalid system call",
    standard: "other"
  }
];

// ../../.yarn/cache/human-signals-npm-8.0.0-b46b2106fd-e4dac4f7d3.zip/node_modules/human-signals/build/src/signals.js
var getSignals = () => {
  const realtimeSignals = getRealtimeSignals();
  const signals2 = [...SIGNALS, ...realtimeSignals].map(normalizeSignal);
  return signals2;
};
var normalizeSignal = ({
  name,
  number: defaultNumber,
  description,
  action,
  forced = false,
  standard
}) => {
  const {
    signals: { [name]: constantSignal }
  } = constants;
  const supported = constantSignal !== void 0;
  const number = supported ? constantSignal : defaultNumber;
  return { name, number, description, supported, action, forced, standard };
};

// ../../.yarn/cache/human-signals-npm-8.0.0-b46b2106fd-e4dac4f7d3.zip/node_modules/human-signals/build/src/main.js
var getSignalsByName = () => {
  const signals2 = getSignals();
  return Object.fromEntries(signals2.map(getSignalByName));
};
var getSignalByName = ({
  name,
  number,
  description,
  supported,
  action,
  forced,
  standard
}) => [name, { name, number, description, supported, action, forced, standard }];
var signalsByName = getSignalsByName();
var getSignalsByNumber = () => {
  const signals2 = getSignals();
  const length = SIGRTMAX + 1;
  const signalsA = Array.from(
    { length },
    (value2, number) => getSignalByNumber(number, signals2)
  );
  return Object.assign({}, ...signalsA);
};
var getSignalByNumber = (number, signals2) => {
  const signal = findSignalByNumber(number, signals2);
  if (signal === void 0) {
    return {};
  }
  const { name, description, supported, action, forced, standard } = signal;
  return {
    [number]: {
      name,
      number,
      description,
      supported,
      action,
      forced,
      standard
    }
  };
};
var findSignalByNumber = (number, signals2) => {
  const signal = signals2.find(({ name }) => constants2.signals[name] === number);
  if (signal !== void 0) {
    return signal;
  }
  return signals2.find((signalA) => signalA.number === number);
};
var signalsByNumber = getSignalsByNumber();

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/terminate/signal.js
var normalizeKillSignal = (killSignal) => {
  const optionName = "option `killSignal`";
  if (killSignal === 0) {
    throw new TypeError(`Invalid ${optionName}: 0 cannot be used.`);
  }
  return normalizeSignal2(killSignal, optionName);
};
var normalizeSignalArgument = (signal) => signal === 0 ? signal : normalizeSignal2(signal, "`subprocess.kill()`'s argument");
var normalizeSignal2 = (signalNameOrInteger, optionName) => {
  if (Number.isInteger(signalNameOrInteger)) {
    return normalizeSignalInteger(signalNameOrInteger, optionName);
  }
  if (typeof signalNameOrInteger === "string") {
    return normalizeSignalName(signalNameOrInteger, optionName);
  }
  throw new TypeError(`Invalid ${optionName} ${String(signalNameOrInteger)}: it must be a string or an integer.
${getAvailableSignals()}`);
};
var normalizeSignalInteger = (signalInteger, optionName) => {
  if (signalsIntegerToName.has(signalInteger)) {
    return signalsIntegerToName.get(signalInteger);
  }
  throw new TypeError(`Invalid ${optionName} ${signalInteger}: this signal integer does not exist.
${getAvailableSignals()}`);
};
var getSignalsIntegerToName = () => new Map(Object.entries(constants3.signals).reverse().map(([signalName, signalInteger]) => [signalInteger, signalName]));
var signalsIntegerToName = getSignalsIntegerToName();
var normalizeSignalName = (signalName, optionName) => {
  if (signalName in constants3.signals) {
    return signalName;
  }
  if (signalName.toUpperCase() in constants3.signals) {
    throw new TypeError(`Invalid ${optionName} '${signalName}': please rename it to '${signalName.toUpperCase()}'.`);
  }
  throw new TypeError(`Invalid ${optionName} '${signalName}': this signal name does not exist.
${getAvailableSignals()}`);
};
var getAvailableSignals = () => `Available signal names: ${getAvailableSignalNames()}.
Available signal numbers: ${getAvailableSignalIntegers()}.`;
var getAvailableSignalNames = () => Object.keys(constants3.signals).sort().map((signalName) => `'${signalName}'`).join(", ");
var getAvailableSignalIntegers = () => [...new Set(Object.values(constants3.signals).sort((signalInteger, signalIntegerTwo) => signalInteger - signalIntegerTwo))].join(", ");
var getSignalDescription = (signal) => signalsByName[signal].description;

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/terminate/kill.js
var normalizeForceKillAfterDelay = (forceKillAfterDelay) => {
  if (forceKillAfterDelay === false) {
    return forceKillAfterDelay;
  }
  if (forceKillAfterDelay === true) {
    return DEFAULT_FORCE_KILL_TIMEOUT;
  }
  if (!Number.isFinite(forceKillAfterDelay) || forceKillAfterDelay < 0) {
    throw new TypeError(`Expected the \`forceKillAfterDelay\` option to be a non-negative integer, got \`${forceKillAfterDelay}\` (${typeof forceKillAfterDelay})`);
  }
  return forceKillAfterDelay;
};
var DEFAULT_FORCE_KILL_TIMEOUT = 1e3 * 5;
var subprocessKill = ({ kill, options: { forceKillAfterDelay, killSignal }, onInternalError, context, controller }, signalOrError, errorArgument) => {
  const { signal, error } = parseKillArguments(signalOrError, errorArgument, killSignal);
  emitKillError(error, onInternalError);
  const killResult = kill(signal);
  setKillTimeout({
    kill,
    signal,
    forceKillAfterDelay,
    killSignal,
    killResult,
    context,
    controller
  });
  return killResult;
};
var parseKillArguments = (signalOrError, errorArgument, killSignal) => {
  const [signal = killSignal, error] = isErrorInstance(signalOrError) ? [void 0, signalOrError] : [signalOrError, errorArgument];
  if (typeof signal !== "string" && !Number.isInteger(signal)) {
    throw new TypeError(`The first argument must be an error instance or a signal name string/integer: ${String(signal)}`);
  }
  if (error !== void 0 && !isErrorInstance(error)) {
    throw new TypeError(`The second argument is optional. If specified, it must be an error instance: ${error}`);
  }
  return { signal: normalizeSignalArgument(signal), error };
};
var emitKillError = (error, onInternalError) => {
  if (error !== void 0) {
    onInternalError.reject(error);
  }
};
var setKillTimeout = async ({ kill, signal, forceKillAfterDelay, killSignal, killResult, context, controller }) => {
  if (signal === killSignal && killResult) {
    killOnTimeout({
      kill,
      forceKillAfterDelay,
      context,
      controllerSignal: controller.signal
    });
  }
};
var killOnTimeout = async ({ kill, forceKillAfterDelay, context, controllerSignal }) => {
  if (forceKillAfterDelay === false) {
    return;
  }
  try {
    await setTimeout2(forceKillAfterDelay, void 0, { signal: controllerSignal });
    if (kill("SIGKILL")) {
      context.isForcefullyTerminated ??= true;
    }
  } catch {
  }
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/terminate/cancel.js
init_esm_shims();

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/utils/abort-signal.js
init_esm_shims();
import { once } from "node:events";
var onAbortedSignal = async (mainSignal, stopSignal) => {
  if (!mainSignal.aborted) {
    await once(mainSignal, "abort", { signal: stopSignal });
  }
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/terminate/cancel.js
var validateCancelSignal = ({ cancelSignal }) => {
  if (cancelSignal !== void 0 && Object.prototype.toString.call(cancelSignal) !== "[object AbortSignal]") {
    throw new Error(`The \`cancelSignal\` option must be an AbortSignal: ${String(cancelSignal)}`);
  }
};
var throwOnCancel = ({ subprocess, cancelSignal, gracefulCancel, context, controller }) => cancelSignal === void 0 || gracefulCancel ? [] : [terminateOnCancel(subprocess, cancelSignal, context, controller)];
var terminateOnCancel = async (subprocess, cancelSignal, context, { signal }) => {
  await onAbortedSignal(cancelSignal, signal);
  context.terminationReason ??= "cancel";
  subprocess.kill();
  throw cancelSignal.reason;
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/terminate/graceful.js
init_esm_shims();

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/ipc/graceful.js
init_esm_shims();
import { scheduler as scheduler2 } from "node:timers/promises";

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/ipc/send.js
init_esm_shims();
import { promisify as promisify2 } from "node:util";

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/ipc/validation.js
init_esm_shims();
var validateIpcMethod = ({ methodName, isSubprocess, ipc, isConnected: isConnected2 }) => {
  validateIpcOption(methodName, isSubprocess, ipc);
  validateConnection(methodName, isSubprocess, isConnected2);
};
var validateIpcOption = (methodName, isSubprocess, ipc) => {
  if (!ipc) {
    throw new Error(`${getMethodName(methodName, isSubprocess)} can only be used if the \`ipc\` option is \`true\`.`);
  }
};
var validateConnection = (methodName, isSubprocess, isConnected2) => {
  if (!isConnected2) {
    throw new Error(`${getMethodName(methodName, isSubprocess)} cannot be used: the ${getOtherProcessName(isSubprocess)} has already exited or disconnected.`);
  }
};
var throwOnEarlyDisconnect = (isSubprocess) => {
  throw new Error(`${getMethodName("getOneMessage", isSubprocess)} could not complete: the ${getOtherProcessName(isSubprocess)} exited or disconnected.`);
};
var throwOnStrictDeadlockError = (isSubprocess) => {
  throw new Error(`${getMethodName("sendMessage", isSubprocess)} failed: the ${getOtherProcessName(isSubprocess)} is sending a message too, instead of listening to incoming messages.
This can be fixed by both sending a message and listening to incoming messages at the same time:

const [receivedMessage] = await Promise.all([
	${getMethodName("getOneMessage", isSubprocess)},
	${getMethodName("sendMessage", isSubprocess, "message, {strict: true}")},
]);`);
};
var getStrictResponseError = (error, isSubprocess) => new Error(`${getMethodName("sendMessage", isSubprocess)} failed when sending an acknowledgment response to the ${getOtherProcessName(isSubprocess)}.`, { cause: error });
var throwOnMissingStrict = (isSubprocess) => {
  throw new Error(`${getMethodName("sendMessage", isSubprocess)} failed: the ${getOtherProcessName(isSubprocess)} is not listening to incoming messages.`);
};
var throwOnStrictDisconnect = (isSubprocess) => {
  throw new Error(`${getMethodName("sendMessage", isSubprocess)} failed: the ${getOtherProcessName(isSubprocess)} exited without listening to incoming messages.`);
};
var getAbortDisconnectError = () => new Error(`\`cancelSignal\` aborted: the ${getOtherProcessName(true)} disconnected.`);
var throwOnMissingParent = () => {
  throw new Error("`getCancelSignal()` cannot be used without setting the `cancelSignal` subprocess option.");
};
var handleEpipeError = ({ error, methodName, isSubprocess }) => {
  if (error.code === "EPIPE") {
    throw new Error(`${getMethodName(methodName, isSubprocess)} cannot be used: the ${getOtherProcessName(isSubprocess)} is disconnecting.`, { cause: error });
  }
};
var handleSerializationError = ({ error, methodName, isSubprocess, message }) => {
  if (isSerializationError(error)) {
    throw new Error(`${getMethodName(methodName, isSubprocess)}'s argument type is invalid: the message cannot be serialized: ${String(message)}.`, { cause: error });
  }
};
var isSerializationError = ({ code, message }) => SERIALIZATION_ERROR_CODES.has(code) || SERIALIZATION_ERROR_MESSAGES.some((serializationErrorMessage) => message.includes(serializationErrorMessage));
var SERIALIZATION_ERROR_CODES = /* @__PURE__ */ new Set([
  // Message is `undefined`
  "ERR_MISSING_ARGS",
  // Message is a function, a bigint, a symbol
  "ERR_INVALID_ARG_TYPE"
]);
var SERIALIZATION_ERROR_MESSAGES = [
  // Message is a promise or a proxy, with `serialization: 'advanced'`
  "could not be cloned",
  // Message has cycles, with `serialization: 'json'`
  "circular structure",
  // Message has cycles inside toJSON(), with `serialization: 'json'`
  "call stack size exceeded"
];
var getMethodName = (methodName, isSubprocess, parameters = "") => methodName === "cancelSignal" ? "`cancelSignal`'s `controller.abort()`" : `${getNamespaceName(isSubprocess)}${methodName}(${parameters})`;
var getNamespaceName = (isSubprocess) => isSubprocess ? "" : "subprocess.";
var getOtherProcessName = (isSubprocess) => isSubprocess ? "parent process" : "subprocess";
var disconnect = (anyProcess) => {
  if (anyProcess.connected) {
    anyProcess.disconnect();
  }
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/ipc/outgoing.js
init_esm_shims();

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/utils/deferred.js
init_esm_shims();
var createDeferred = () => {
  const methods = {};
  const promise = new Promise((resolve, reject) => {
    Object.assign(methods, { resolve, reject });
  });
  return Object.assign(promise, methods);
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/arguments/fd-options.js
init_esm_shims();
var getToStream = (destination, to = "stdin") => {
  const isWritable = true;
  const { options, fileDescriptors } = SUBPROCESS_OPTIONS.get(destination);
  const fdNumber = getFdNumber(fileDescriptors, to, isWritable);
  const destinationStream = destination.stdio[fdNumber];
  if (destinationStream === null) {
    throw new TypeError(getInvalidStdioOptionMessage(fdNumber, to, options, isWritable));
  }
  return destinationStream;
};
var getFromStream = (source, from = "stdout") => {
  const isWritable = false;
  const { options, fileDescriptors } = SUBPROCESS_OPTIONS.get(source);
  const fdNumber = getFdNumber(fileDescriptors, from, isWritable);
  const sourceStream = fdNumber === "all" ? source.all : source.stdio[fdNumber];
  if (sourceStream === null || sourceStream === void 0) {
    throw new TypeError(getInvalidStdioOptionMessage(fdNumber, from, options, isWritable));
  }
  return sourceStream;
};
var SUBPROCESS_OPTIONS = /* @__PURE__ */ new WeakMap();
var getFdNumber = (fileDescriptors, fdName, isWritable) => {
  const fdNumber = parseFdNumber(fdName, isWritable);
  validateFdNumber(fdNumber, fdName, isWritable, fileDescriptors);
  return fdNumber;
};
var parseFdNumber = (fdName, isWritable) => {
  const fdNumber = parseFd(fdName);
  if (fdNumber !== void 0) {
    return fdNumber;
  }
  const { validOptions, defaultValue } = isWritable ? { validOptions: '"stdin"', defaultValue: "stdin" } : { validOptions: '"stdout", "stderr", "all"', defaultValue: "stdout" };
  throw new TypeError(`"${getOptionName(isWritable)}" must not be "${fdName}".
It must be ${validOptions} or "fd3", "fd4" (and so on).
It is optional and defaults to "${defaultValue}".`);
};
var validateFdNumber = (fdNumber, fdName, isWritable, fileDescriptors) => {
  const fileDescriptor = fileDescriptors[getUsedDescriptor(fdNumber)];
  if (fileDescriptor === void 0) {
    throw new TypeError(`"${getOptionName(isWritable)}" must not be ${fdName}. That file descriptor does not exist.
Please set the "stdio" option to ensure that file descriptor exists.`);
  }
  if (fileDescriptor.direction === "input" && !isWritable) {
    throw new TypeError(`"${getOptionName(isWritable)}" must not be ${fdName}. It must be a readable stream, not writable.`);
  }
  if (fileDescriptor.direction !== "input" && isWritable) {
    throw new TypeError(`"${getOptionName(isWritable)}" must not be ${fdName}. It must be a writable stream, not readable.`);
  }
};
var getInvalidStdioOptionMessage = (fdNumber, fdName, options, isWritable) => {
  if (fdNumber === "all" && !options.all) {
    return `The "all" option must be true to use "from: 'all'".`;
  }
  const { optionName, optionValue } = getInvalidStdioOption(fdNumber, options);
  return `The "${optionName}: ${serializeOptionValue(optionValue)}" option is incompatible with using "${getOptionName(isWritable)}: ${serializeOptionValue(fdName)}".
Please set this option with "pipe" instead.`;
};
var getInvalidStdioOption = (fdNumber, { stdin, stdout, stderr, stdio }) => {
  const usedDescriptor = getUsedDescriptor(fdNumber);
  if (usedDescriptor === 0 && stdin !== void 0) {
    return { optionName: "stdin", optionValue: stdin };
  }
  if (usedDescriptor === 1 && stdout !== void 0) {
    return { optionName: "stdout", optionValue: stdout };
  }
  if (usedDescriptor === 2 && stderr !== void 0) {
    return { optionName: "stderr", optionValue: stderr };
  }
  return { optionName: `stdio[${usedDescriptor}]`, optionValue: stdio[usedDescriptor] };
};
var getUsedDescriptor = (fdNumber) => fdNumber === "all" ? 1 : fdNumber;
var getOptionName = (isWritable) => isWritable ? "to" : "from";
var serializeOptionValue = (value2) => {
  if (typeof value2 === "string") {
    return `'${value2}'`;
  }
  return typeof value2 === "number" ? `${value2}` : "Stream";
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/ipc/strict.js
init_esm_shims();
import { once as once3 } from "node:events";

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/utils/max-listeners.js
init_esm_shims();
import { addAbortListener } from "node:events";
var incrementMaxListeners = (eventEmitter, maxListenersIncrement, signal) => {
  const maxListeners = eventEmitter.getMaxListeners();
  if (maxListeners === 0 || maxListeners === Number.POSITIVE_INFINITY) {
    return;
  }
  eventEmitter.setMaxListeners(maxListeners + maxListenersIncrement);
  addAbortListener(signal, () => {
    eventEmitter.setMaxListeners(eventEmitter.getMaxListeners() - maxListenersIncrement);
  });
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/ipc/forward.js
init_esm_shims();
import { EventEmitter } from "node:events";

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/ipc/incoming.js
init_esm_shims();
import { once as once2 } from "node:events";
import { scheduler } from "node:timers/promises";

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/ipc/reference.js
init_esm_shims();
var addReference = (channel, reference) => {
  if (reference) {
    addReferenceCount(channel);
  }
};
var addReferenceCount = (channel) => {
  channel.refCounted();
};
var removeReference = (channel, reference) => {
  if (reference) {
    removeReferenceCount(channel);
  }
};
var removeReferenceCount = (channel) => {
  channel.unrefCounted();
};
var undoAddedReferences = (channel, isSubprocess) => {
  if (isSubprocess) {
    removeReferenceCount(channel);
    removeReferenceCount(channel);
  }
};
var redoAddedReferences = (channel, isSubprocess) => {
  if (isSubprocess) {
    addReferenceCount(channel);
    addReferenceCount(channel);
  }
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/ipc/incoming.js
var onMessage = async ({ anyProcess, channel, isSubprocess, ipcEmitter }, wrappedMessage) => {
  if (handleStrictResponse(wrappedMessage) || handleAbort(wrappedMessage)) {
    return;
  }
  if (!INCOMING_MESSAGES.has(anyProcess)) {
    INCOMING_MESSAGES.set(anyProcess, []);
  }
  const incomingMessages = INCOMING_MESSAGES.get(anyProcess);
  incomingMessages.push(wrappedMessage);
  if (incomingMessages.length > 1) {
    return;
  }
  while (incomingMessages.length > 0) {
    await waitForOutgoingMessages(anyProcess, ipcEmitter, wrappedMessage);
    await scheduler.yield();
    const message = await handleStrictRequest({
      wrappedMessage: incomingMessages[0],
      anyProcess,
      channel,
      isSubprocess,
      ipcEmitter
    });
    incomingMessages.shift();
    ipcEmitter.emit("message", message);
    ipcEmitter.emit("message:done");
  }
};
var onDisconnect = async ({ anyProcess, channel, isSubprocess, ipcEmitter, boundOnMessage }) => {
  abortOnDisconnect();
  const incomingMessages = INCOMING_MESSAGES.get(anyProcess);
  while (incomingMessages?.length > 0) {
    await once2(ipcEmitter, "message:done");
  }
  anyProcess.removeListener("message", boundOnMessage);
  redoAddedReferences(channel, isSubprocess);
  ipcEmitter.connected = false;
  ipcEmitter.emit("disconnect");
};
var INCOMING_MESSAGES = /* @__PURE__ */ new WeakMap();

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/ipc/forward.js
var getIpcEmitter = (anyProcess, channel, isSubprocess) => {
  if (IPC_EMITTERS.has(anyProcess)) {
    return IPC_EMITTERS.get(anyProcess);
  }
  const ipcEmitter = new EventEmitter();
  ipcEmitter.connected = true;
  IPC_EMITTERS.set(anyProcess, ipcEmitter);
  forwardEvents({
    ipcEmitter,
    anyProcess,
    channel,
    isSubprocess
  });
  return ipcEmitter;
};
var IPC_EMITTERS = /* @__PURE__ */ new WeakMap();
var forwardEvents = ({ ipcEmitter, anyProcess, channel, isSubprocess }) => {
  const boundOnMessage = onMessage.bind(void 0, {
    anyProcess,
    channel,
    isSubprocess,
    ipcEmitter
  });
  anyProcess.on("message", boundOnMessage);
  anyProcess.once("disconnect", onDisconnect.bind(void 0, {
    anyProcess,
    channel,
    isSubprocess,
    ipcEmitter,
    boundOnMessage
  }));
  undoAddedReferences(channel, isSubprocess);
};
var isConnected = (anyProcess) => {
  const ipcEmitter = IPC_EMITTERS.get(anyProcess);
  return ipcEmitter === void 0 ? anyProcess.channel !== null : ipcEmitter.connected;
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/ipc/strict.js
var handleSendStrict = ({ anyProcess, channel, isSubprocess, message, strict }) => {
  if (!strict) {
    return message;
  }
  const ipcEmitter = getIpcEmitter(anyProcess, channel, isSubprocess);
  const hasListeners = hasMessageListeners(anyProcess, ipcEmitter);
  return {
    id: count++,
    type: REQUEST_TYPE,
    message,
    hasListeners
  };
};
var count = 0n;
var validateStrictDeadlock = (outgoingMessages, wrappedMessage) => {
  if (wrappedMessage?.type !== REQUEST_TYPE || wrappedMessage.hasListeners) {
    return;
  }
  for (const { id } of outgoingMessages) {
    if (id !== void 0) {
      STRICT_RESPONSES[id].resolve({ isDeadlock: true, hasListeners: false });
    }
  }
};
var handleStrictRequest = async ({ wrappedMessage, anyProcess, channel, isSubprocess, ipcEmitter }) => {
  if (wrappedMessage?.type !== REQUEST_TYPE || !anyProcess.connected) {
    return wrappedMessage;
  }
  const { id, message } = wrappedMessage;
  const response = { id, type: RESPONSE_TYPE, message: hasMessageListeners(anyProcess, ipcEmitter) };
  try {
    await sendMessage({
      anyProcess,
      channel,
      isSubprocess,
      ipc: true
    }, response);
  } catch (error) {
    ipcEmitter.emit("strict:error", error);
  }
  return message;
};
var handleStrictResponse = (wrappedMessage) => {
  if (wrappedMessage?.type !== RESPONSE_TYPE) {
    return false;
  }
  const { id, message: hasListeners } = wrappedMessage;
  STRICT_RESPONSES[id]?.resolve({ isDeadlock: false, hasListeners });
  return true;
};
var waitForStrictResponse = async (wrappedMessage, anyProcess, isSubprocess) => {
  if (wrappedMessage?.type !== REQUEST_TYPE) {
    return;
  }
  const deferred = createDeferred();
  STRICT_RESPONSES[wrappedMessage.id] = deferred;
  const controller = new AbortController();
  try {
    const { isDeadlock, hasListeners } = await Promise.race([
      deferred,
      throwOnDisconnect(anyProcess, isSubprocess, controller)
    ]);
    if (isDeadlock) {
      throwOnStrictDeadlockError(isSubprocess);
    }
    if (!hasListeners) {
      throwOnMissingStrict(isSubprocess);
    }
  } finally {
    controller.abort();
    delete STRICT_RESPONSES[wrappedMessage.id];
  }
};
var STRICT_RESPONSES = {};
var throwOnDisconnect = async (anyProcess, isSubprocess, { signal }) => {
  incrementMaxListeners(anyProcess, 1, signal);
  await once3(anyProcess, "disconnect", { signal });
  throwOnStrictDisconnect(isSubprocess);
};
var REQUEST_TYPE = "execa:ipc:request";
var RESPONSE_TYPE = "execa:ipc:response";

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/ipc/outgoing.js
var startSendMessage = (anyProcess, wrappedMessage, strict) => {
  if (!OUTGOING_MESSAGES.has(anyProcess)) {
    OUTGOING_MESSAGES.set(anyProcess, /* @__PURE__ */ new Set());
  }
  const outgoingMessages = OUTGOING_MESSAGES.get(anyProcess);
  const onMessageSent = createDeferred();
  const id = strict ? wrappedMessage.id : void 0;
  const outgoingMessage = { onMessageSent, id };
  outgoingMessages.add(outgoingMessage);
  return { outgoingMessages, outgoingMessage };
};
var endSendMessage = ({ outgoingMessages, outgoingMessage }) => {
  outgoingMessages.delete(outgoingMessage);
  outgoingMessage.onMessageSent.resolve();
};
var waitForOutgoingMessages = async (anyProcess, ipcEmitter, wrappedMessage) => {
  while (!hasMessageListeners(anyProcess, ipcEmitter) && OUTGOING_MESSAGES.get(anyProcess)?.size > 0) {
    const outgoingMessages = [...OUTGOING_MESSAGES.get(anyProcess)];
    validateStrictDeadlock(outgoingMessages, wrappedMessage);
    await Promise.all(outgoingMessages.map(({ onMessageSent }) => onMessageSent));
  }
};
var OUTGOING_MESSAGES = /* @__PURE__ */ new WeakMap();
var hasMessageListeners = (anyProcess, ipcEmitter) => ipcEmitter.listenerCount("message") > getMinListenerCount(anyProcess);
var getMinListenerCount = (anyProcess) => SUBPROCESS_OPTIONS.has(anyProcess) && !getFdSpecificValue(SUBPROCESS_OPTIONS.get(anyProcess).options.buffer, "ipc") ? 1 : 0;

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/ipc/send.js
var sendMessage = ({ anyProcess, channel, isSubprocess, ipc }, message, { strict = false } = {}) => {
  const methodName = "sendMessage";
  validateIpcMethod({
    methodName,
    isSubprocess,
    ipc,
    isConnected: anyProcess.connected
  });
  return sendMessageAsync({
    anyProcess,
    channel,
    methodName,
    isSubprocess,
    message,
    strict
  });
};
var sendMessageAsync = async ({ anyProcess, channel, methodName, isSubprocess, message, strict }) => {
  const wrappedMessage = handleSendStrict({
    anyProcess,
    channel,
    isSubprocess,
    message,
    strict
  });
  const outgoingMessagesState = startSendMessage(anyProcess, wrappedMessage, strict);
  try {
    await sendOneMessage({
      anyProcess,
      methodName,
      isSubprocess,
      wrappedMessage,
      message
    });
  } catch (error) {
    disconnect(anyProcess);
    throw error;
  } finally {
    endSendMessage(outgoingMessagesState);
  }
};
var sendOneMessage = async ({ anyProcess, methodName, isSubprocess, wrappedMessage, message }) => {
  const sendMethod = getSendMethod(anyProcess);
  try {
    await Promise.all([
      waitForStrictResponse(wrappedMessage, anyProcess, isSubprocess),
      sendMethod(wrappedMessage)
    ]);
  } catch (error) {
    handleEpipeError({ error, methodName, isSubprocess });
    handleSerializationError({
      error,
      methodName,
      isSubprocess,
      message
    });
    throw error;
  }
};
var getSendMethod = (anyProcess) => {
  if (PROCESS_SEND_METHODS.has(anyProcess)) {
    return PROCESS_SEND_METHODS.get(anyProcess);
  }
  const sendMethod = promisify2(anyProcess.send.bind(anyProcess));
  PROCESS_SEND_METHODS.set(anyProcess, sendMethod);
  return sendMethod;
};
var PROCESS_SEND_METHODS = /* @__PURE__ */ new WeakMap();

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/ipc/graceful.js
var sendAbort = (subprocess, message) => {
  const methodName = "cancelSignal";
  validateConnection(methodName, false, subprocess.connected);
  return sendOneMessage({
    anyProcess: subprocess,
    methodName,
    isSubprocess: false,
    wrappedMessage: { type: GRACEFUL_CANCEL_TYPE, message },
    message
  });
};
var getCancelSignal = async ({ anyProcess, channel, isSubprocess, ipc }) => {
  await startIpc({
    anyProcess,
    channel,
    isSubprocess,
    ipc
  });
  return cancelController.signal;
};
var startIpc = async ({ anyProcess, channel, isSubprocess, ipc }) => {
  if (cancelListening) {
    return;
  }
  cancelListening = true;
  if (!ipc) {
    throwOnMissingParent();
    return;
  }
  if (channel === null) {
    abortOnDisconnect();
    return;
  }
  getIpcEmitter(anyProcess, channel, isSubprocess);
  await scheduler2.yield();
};
var cancelListening = false;
var handleAbort = (wrappedMessage) => {
  if (wrappedMessage?.type !== GRACEFUL_CANCEL_TYPE) {
    return false;
  }
  cancelController.abort(wrappedMessage.message);
  return true;
};
var GRACEFUL_CANCEL_TYPE = "execa:ipc:cancel";
var abortOnDisconnect = () => {
  cancelController.abort(getAbortDisconnectError());
};
var cancelController = new AbortController();

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/terminate/graceful.js
var validateGracefulCancel = ({ gracefulCancel, cancelSignal, ipc, serialization }) => {
  if (!gracefulCancel) {
    return;
  }
  if (cancelSignal === void 0) {
    throw new Error("The `cancelSignal` option must be defined when setting the `gracefulCancel` option.");
  }
  if (!ipc) {
    throw new Error("The `ipc` option cannot be false when setting the `gracefulCancel` option.");
  }
  if (serialization === "json") {
    throw new Error("The `serialization` option cannot be 'json' when setting the `gracefulCancel` option.");
  }
};
var throwOnGracefulCancel = ({
  subprocess,
  cancelSignal,
  gracefulCancel,
  forceKillAfterDelay,
  context,
  controller
}) => gracefulCancel ? [sendOnAbort({
  subprocess,
  cancelSignal,
  forceKillAfterDelay,
  context,
  controller
})] : [];
var sendOnAbort = async ({ subprocess, cancelSignal, forceKillAfterDelay, context, controller: { signal } }) => {
  await onAbortedSignal(cancelSignal, signal);
  const reason = getReason(cancelSignal);
  await sendAbort(subprocess, reason);
  killOnTimeout({
    kill: subprocess.kill,
    forceKillAfterDelay,
    context,
    controllerSignal: signal
  });
  context.terminationReason ??= "gracefulCancel";
  throw cancelSignal.reason;
};
var getReason = ({ reason }) => {
  if (!(reason instanceof DOMException)) {
    return reason;
  }
  const error = new Error(reason.message);
  Object.defineProperty(error, "stack", {
    value: reason.stack,
    enumerable: false,
    configurable: true,
    writable: true
  });
  return error;
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/terminate/timeout.js
init_esm_shims();
import { setTimeout as setTimeout3 } from "node:timers/promises";
var validateTimeout = ({ timeout }) => {
  if (timeout !== void 0 && (!Number.isFinite(timeout) || timeout < 0)) {
    throw new TypeError(`Expected the \`timeout\` option to be a non-negative integer, got \`${timeout}\` (${typeof timeout})`);
  }
};
var throwOnTimeout = (subprocess, timeout, context, controller) => timeout === 0 || timeout === void 0 ? [] : [killAfterTimeout(subprocess, timeout, context, controller)];
var killAfterTimeout = async (subprocess, timeout, context, { signal }) => {
  await setTimeout3(timeout, void 0, { signal });
  context.terminationReason ??= "timeout";
  subprocess.kill();
  throw new DiscardedError();
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/methods/node.js
init_esm_shims();
import { execPath, execArgv } from "node:process";
import path3 from "node:path";
var mapNode = ({ options }) => {
  if (options.node === false) {
    throw new TypeError('The "node" option cannot be false with `execaNode()`.');
  }
  return { options: { ...options, node: true } };
};
var handleNodeOption = (file, commandArguments, {
  node: shouldHandleNode = false,
  nodePath = execPath,
  nodeOptions = execArgv.filter((nodeOption) => !nodeOption.startsWith("--inspect")),
  cwd,
  execPath: formerNodePath,
  ...options
}) => {
  if (formerNodePath !== void 0) {
    throw new TypeError('The "execPath" option has been removed. Please use the "nodePath" option instead.');
  }
  const normalizedNodePath = safeNormalizeFileUrl(nodePath, 'The "nodePath" option');
  const resolvedNodePath = path3.resolve(cwd, normalizedNodePath);
  const newOptions = {
    ...options,
    nodePath: resolvedNodePath,
    node: shouldHandleNode,
    cwd
  };
  if (!shouldHandleNode) {
    return [file, commandArguments, newOptions];
  }
  if (path3.basename(file, ".exe") === "node") {
    throw new TypeError('When the "node" option is true, the first argument does not need to be "node".');
  }
  return [
    resolvedNodePath,
    [...nodeOptions, file, ...commandArguments],
    { ipc: true, ...newOptions, shell: false }
  ];
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/ipc/ipc-input.js
init_esm_shims();
import { serialize } from "node:v8";
var validateIpcInputOption = ({ ipcInput, ipc, serialization }) => {
  if (ipcInput === void 0) {
    return;
  }
  if (!ipc) {
    throw new Error("The `ipcInput` option cannot be set unless the `ipc` option is `true`.");
  }
  validateIpcInput[serialization](ipcInput);
};
var validateAdvancedInput = (ipcInput) => {
  try {
    serialize(ipcInput);
  } catch (error) {
    throw new Error("The `ipcInput` option is not serializable with a structured clone.", { cause: error });
  }
};
var validateJsonInput = (ipcInput) => {
  try {
    JSON.stringify(ipcInput);
  } catch (error) {
    throw new Error("The `ipcInput` option is not serializable with JSON.", { cause: error });
  }
};
var validateIpcInput = {
  advanced: validateAdvancedInput,
  json: validateJsonInput
};
var sendIpcInput = async (subprocess, ipcInput) => {
  if (ipcInput === void 0) {
    return;
  }
  await subprocess.sendMessage(ipcInput);
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/arguments/encoding-option.js
init_esm_shims();
var validateEncoding = ({ encoding }) => {
  if (ENCODINGS.has(encoding)) {
    return;
  }
  const correctEncoding = getCorrectEncoding(encoding);
  if (correctEncoding !== void 0) {
    throw new TypeError(`Invalid option \`encoding: ${serializeEncoding(encoding)}\`.
Please rename it to ${serializeEncoding(correctEncoding)}.`);
  }
  const correctEncodings = [...ENCODINGS].map((correctEncoding2) => serializeEncoding(correctEncoding2)).join(", ");
  throw new TypeError(`Invalid option \`encoding: ${serializeEncoding(encoding)}\`.
Please rename it to one of: ${correctEncodings}.`);
};
var TEXT_ENCODINGS = /* @__PURE__ */ new Set(["utf8", "utf16le"]);
var BINARY_ENCODINGS = /* @__PURE__ */ new Set(["buffer", "hex", "base64", "base64url", "latin1", "ascii"]);
var ENCODINGS = /* @__PURE__ */ new Set([...TEXT_ENCODINGS, ...BINARY_ENCODINGS]);
var getCorrectEncoding = (encoding) => {
  if (encoding === null) {
    return "buffer";
  }
  if (typeof encoding !== "string") {
    return;
  }
  const lowerEncoding = encoding.toLowerCase();
  if (lowerEncoding in ENCODING_ALIASES) {
    return ENCODING_ALIASES[lowerEncoding];
  }
  if (ENCODINGS.has(lowerEncoding)) {
    return lowerEncoding;
  }
};
var ENCODING_ALIASES = {
  // eslint-disable-next-line unicorn/text-encoding-identifier-case
  "utf-8": "utf8",
  "utf-16le": "utf16le",
  "ucs-2": "utf16le",
  ucs2: "utf16le",
  binary: "latin1"
};
var serializeEncoding = (encoding) => typeof encoding === "string" ? `"${encoding}"` : String(encoding);

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/arguments/cwd.js
init_esm_shims();
import { statSync } from "node:fs";
import path4 from "node:path";
import process5 from "node:process";
var normalizeCwd = (cwd = getDefaultCwd()) => {
  const cwdString = safeNormalizeFileUrl(cwd, 'The "cwd" option');
  return path4.resolve(cwdString);
};
var getDefaultCwd = () => {
  try {
    return process5.cwd();
  } catch (error) {
    error.message = `The current directory does not exist.
${error.message}`;
    throw error;
  }
};
var fixCwdError = (originalMessage, cwd) => {
  if (cwd === getDefaultCwd()) {
    return originalMessage;
  }
  let cwdStat;
  try {
    cwdStat = statSync(cwd);
  } catch (error) {
    return `The "cwd" option is invalid: ${cwd}.
${error.message}
${originalMessage}`;
  }
  if (!cwdStat.isDirectory()) {
    return `The "cwd" option is not a directory: ${cwd}.
${originalMessage}`;
  }
  return originalMessage;
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/arguments/options.js
var normalizeOptions = (filePath, rawArguments, rawOptions) => {
  rawOptions.cwd = normalizeCwd(rawOptions.cwd);
  const [processedFile, processedArguments, processedOptions] = handleNodeOption(filePath, rawArguments, rawOptions);
  const { command: file, args: commandArguments, options: initialOptions } = import_cross_spawn.default._parse(processedFile, processedArguments, processedOptions);
  const fdOptions = normalizeFdSpecificOptions(initialOptions);
  const options = addDefaultOptions(fdOptions);
  validateTimeout(options);
  validateEncoding(options);
  validateIpcInputOption(options);
  validateCancelSignal(options);
  validateGracefulCancel(options);
  options.shell = normalizeFileUrl(options.shell);
  options.env = getEnv(options);
  options.killSignal = normalizeKillSignal(options.killSignal);
  options.forceKillAfterDelay = normalizeForceKillAfterDelay(options.forceKillAfterDelay);
  options.lines = options.lines.map((lines, fdNumber) => lines && !BINARY_ENCODINGS.has(options.encoding) && options.buffer[fdNumber]);
  if (process6.platform === "win32" && path5.basename(file, ".exe") === "cmd") {
    commandArguments.unshift("/q");
  }
  return { file, commandArguments, options };
};
var addDefaultOptions = ({
  extendEnv = true,
  preferLocal = false,
  cwd,
  localDir: localDirectory = cwd,
  encoding = "utf8",
  reject = true,
  cleanup = true,
  all = false,
  windowsHide = true,
  killSignal = "SIGTERM",
  forceKillAfterDelay = true,
  gracefulCancel = false,
  ipcInput,
  ipc = ipcInput !== void 0 || gracefulCancel,
  serialization = "advanced",
  ...options
}) => ({
  ...options,
  extendEnv,
  preferLocal,
  cwd,
  localDirectory,
  encoding,
  reject,
  cleanup,
  all,
  windowsHide,
  killSignal,
  forceKillAfterDelay,
  gracefulCancel,
  ipcInput,
  ipc,
  serialization
});
var getEnv = ({ env: envOption, extendEnv, preferLocal, node, localDirectory, nodePath }) => {
  const env = extendEnv ? { ...process6.env, ...envOption } : envOption;
  if (preferLocal || node) {
    return npmRunPathEnv({
      env,
      cwd: localDirectory,
      execPath: nodePath,
      preferLocal,
      addExecPath: node
    });
  }
  return env;
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/return/result.js
init_esm_shims();

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/return/message.js
init_esm_shims();
import { inspect as inspect2 } from "node:util";

// ../../.yarn/cache/strip-final-newline-npm-4.0.0-58f1711ab6-b0cf2b62d5.zip/node_modules/strip-final-newline/index.js
init_esm_shims();
function stripFinalNewline(input) {
  if (typeof input === "string") {
    return stripFinalNewlineString(input);
  }
  if (!(ArrayBuffer.isView(input) && input.BYTES_PER_ELEMENT === 1)) {
    throw new Error("Input must be a string or a Uint8Array");
  }
  return stripFinalNewlineBinary(input);
}
var stripFinalNewlineString = (input) => input.at(-1) === LF ? input.slice(0, input.at(-2) === CR ? -2 : -1) : input;
var stripFinalNewlineBinary = (input) => input.at(-1) === LF_BINARY ? input.subarray(0, input.at(-2) === CR_BINARY ? -2 : -1) : input;
var LF = "\n";
var LF_BINARY = LF.codePointAt(0);
var CR = "\r";
var CR_BINARY = CR.codePointAt(0);

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/io/max-buffer.js
init_esm_shims();

// ../../.yarn/cache/get-stream-npm-9.0.1-8cc24b7ed5-d70e73857f.zip/node_modules/get-stream/source/index.js
init_esm_shims();
import { on } from "node:events";
import { finished } from "node:stream/promises";

// ../../.yarn/cache/get-stream-npm-9.0.1-8cc24b7ed5-d70e73857f.zip/node_modules/get-stream/source/stream.js
init_esm_shims();

// ../../.yarn/cache/is-stream-npm-4.0.1-23102b4145-2706c7f19b.zip/node_modules/is-stream/index.js
init_esm_shims();
function isStream(stream, { checkOpen = true } = {}) {
  return stream !== null && typeof stream === "object" && (stream.writable || stream.readable || !checkOpen || stream.writable === void 0 && stream.readable === void 0) && typeof stream.pipe === "function";
}
function isWritableStream(stream, { checkOpen = true } = {}) {
  return isStream(stream, { checkOpen }) && (stream.writable || !checkOpen) && typeof stream.write === "function" && typeof stream.end === "function" && typeof stream.writable === "boolean" && typeof stream.writableObjectMode === "boolean" && typeof stream.destroy === "function" && typeof stream.destroyed === "boolean";
}
function isReadableStream(stream, { checkOpen = true } = {}) {
  return isStream(stream, { checkOpen }) && (stream.readable || !checkOpen) && typeof stream.read === "function" && typeof stream.readable === "boolean" && typeof stream.readableObjectMode === "boolean" && typeof stream.destroy === "function" && typeof stream.destroyed === "boolean";
}
function isDuplexStream(stream, options) {
  return isWritableStream(stream, options) && isReadableStream(stream, options);
}

// ../../.yarn/cache/@sec-ant-readable-stream-npm-0.4.1-9a375010be-64e9e9cf16.zip/node_modules/@sec-ant/readable-stream/dist/ponyfill/index.js
init_esm_shims();

// ../../.yarn/cache/@sec-ant-readable-stream-npm-0.4.1-9a375010be-64e9e9cf16.zip/node_modules/@sec-ant/readable-stream/dist/ponyfill/asyncIterator.js
init_esm_shims();
var a = Object.getPrototypeOf(
  Object.getPrototypeOf(
    /* istanbul ignore next */
    async function* () {
    }
  ).prototype
);
var c2 = class {
  #t;
  #n;
  #r = false;
  #e = void 0;
  constructor(e2, t2) {
    this.#t = e2, this.#n = t2;
  }
  next() {
    const e2 = () => this.#s();
    return this.#e = this.#e ? this.#e.then(e2, e2) : e2(), this.#e;
  }
  return(e2) {
    const t2 = () => this.#i(e2);
    return this.#e ? this.#e.then(t2, t2) : t2();
  }
  async #s() {
    if (this.#r)
      return {
        done: true,
        value: void 0
      };
    let e2;
    try {
      e2 = await this.#t.read();
    } catch (t2) {
      throw this.#e = void 0, this.#r = true, this.#t.releaseLock(), t2;
    }
    return e2.done && (this.#e = void 0, this.#r = true, this.#t.releaseLock()), e2;
  }
  async #i(e2) {
    if (this.#r)
      return {
        done: true,
        value: e2
      };
    if (this.#r = true, !this.#n) {
      const t2 = this.#t.cancel(e2);
      return this.#t.releaseLock(), await t2, {
        done: true,
        value: e2
      };
    }
    return this.#t.releaseLock(), {
      done: true,
      value: e2
    };
  }
};
var n = Symbol();
function i() {
  return this[n].next();
}
Object.defineProperty(i, "name", { value: "next" });
function o2(r2) {
  return this[n].return(r2);
}
Object.defineProperty(o2, "name", { value: "return" });
var u2 = Object.create(a, {
  next: {
    enumerable: true,
    configurable: true,
    writable: true,
    value: i
  },
  return: {
    enumerable: true,
    configurable: true,
    writable: true,
    value: o2
  }
});
function h({ preventCancel: r2 = false } = {}) {
  const e2 = this.getReader(), t2 = new c2(
    e2,
    r2
  ), s = Object.create(u2);
  return s[n] = t2, s;
}

// ../../.yarn/cache/@sec-ant-readable-stream-npm-0.4.1-9a375010be-64e9e9cf16.zip/node_modules/@sec-ant/readable-stream/dist/ponyfill/fromAnyIterable.js
init_esm_shims();

// ../../.yarn/cache/get-stream-npm-9.0.1-8cc24b7ed5-d70e73857f.zip/node_modules/get-stream/source/stream.js
var getAsyncIterable = (stream) => {
  if (isReadableStream(stream, { checkOpen: false }) && nodeImports.on !== void 0) {
    return getStreamIterable(stream);
  }
  if (typeof stream?.[Symbol.asyncIterator] === "function") {
    return stream;
  }
  if (toString.call(stream) === "[object ReadableStream]") {
    return h.call(stream);
  }
  throw new TypeError("The first argument must be a Readable, a ReadableStream, or an async iterable.");
};
var { toString } = Object.prototype;
var getStreamIterable = async function* (stream) {
  const controller = new AbortController();
  const state = {};
  handleStreamEnd(stream, controller, state);
  try {
    for await (const [chunk] of nodeImports.on(stream, "data", { signal: controller.signal })) {
      yield chunk;
    }
  } catch (error) {
    if (state.error !== void 0) {
      throw state.error;
    } else if (!controller.signal.aborted) {
      throw error;
    }
  } finally {
    stream.destroy();
  }
};
var handleStreamEnd = async (stream, controller, state) => {
  try {
    await nodeImports.finished(stream, {
      cleanup: true,
      readable: true,
      writable: false,
      error: false
    });
  } catch (error) {
    state.error = error;
  } finally {
    controller.abort();
  }
};
var nodeImports = {};

// ../../.yarn/cache/get-stream-npm-9.0.1-8cc24b7ed5-d70e73857f.zip/node_modules/get-stream/source/exports.js
init_esm_shims();

// ../../.yarn/cache/get-stream-npm-9.0.1-8cc24b7ed5-d70e73857f.zip/node_modules/get-stream/source/array.js
init_esm_shims();

// ../../.yarn/cache/get-stream-npm-9.0.1-8cc24b7ed5-d70e73857f.zip/node_modules/get-stream/source/contents.js
init_esm_shims();
var getStreamContents = async (stream, { init, convertChunk, getSize, truncateChunk, addChunk, getFinalChunk, finalize }, { maxBuffer = Number.POSITIVE_INFINITY } = {}) => {
  const asyncIterable = getAsyncIterable(stream);
  const state = init();
  state.length = 0;
  try {
    for await (const chunk of asyncIterable) {
      const chunkType = getChunkType(chunk);
      const convertedChunk = convertChunk[chunkType](chunk, state);
      appendChunk({
        convertedChunk,
        state,
        getSize,
        truncateChunk,
        addChunk,
        maxBuffer
      });
    }
    appendFinalChunk({
      state,
      convertChunk,
      getSize,
      truncateChunk,
      addChunk,
      getFinalChunk,
      maxBuffer
    });
    return finalize(state);
  } catch (error) {
    const normalizedError = typeof error === "object" && error !== null ? error : new Error(error);
    normalizedError.bufferedData = finalize(state);
    throw normalizedError;
  }
};
var appendFinalChunk = ({ state, getSize, truncateChunk, addChunk, getFinalChunk, maxBuffer }) => {
  const convertedChunk = getFinalChunk(state);
  if (convertedChunk !== void 0) {
    appendChunk({
      convertedChunk,
      state,
      getSize,
      truncateChunk,
      addChunk,
      maxBuffer
    });
  }
};
var appendChunk = ({ convertedChunk, state, getSize, truncateChunk, addChunk, maxBuffer }) => {
  const chunkSize = getSize(convertedChunk);
  const newLength = state.length + chunkSize;
  if (newLength <= maxBuffer) {
    addNewChunk(convertedChunk, state, addChunk, newLength);
    return;
  }
  const truncatedChunk = truncateChunk(convertedChunk, maxBuffer - state.length);
  if (truncatedChunk !== void 0) {
    addNewChunk(truncatedChunk, state, addChunk, maxBuffer);
  }
  throw new MaxBufferError();
};
var addNewChunk = (convertedChunk, state, addChunk, newLength) => {
  state.contents = addChunk(convertedChunk, state, newLength);
  state.length = newLength;
};
var getChunkType = (chunk) => {
  const typeOfChunk = typeof chunk;
  if (typeOfChunk === "string") {
    return "string";
  }
  if (typeOfChunk !== "object" || chunk === null) {
    return "others";
  }
  if (globalThis.Buffer?.isBuffer(chunk)) {
    return "buffer";
  }
  const prototypeName = objectToString2.call(chunk);
  if (prototypeName === "[object ArrayBuffer]") {
    return "arrayBuffer";
  }
  if (prototypeName === "[object DataView]") {
    return "dataView";
  }
  if (Number.isInteger(chunk.byteLength) && Number.isInteger(chunk.byteOffset) && objectToString2.call(chunk.buffer) === "[object ArrayBuffer]") {
    return "typedArray";
  }
  return "others";
};
var { toString: objectToString2 } = Object.prototype;
var MaxBufferError = class extends Error {
  name = "MaxBufferError";
  constructor() {
    super("maxBuffer exceeded");
  }
};

// ../../.yarn/cache/get-stream-npm-9.0.1-8cc24b7ed5-d70e73857f.zip/node_modules/get-stream/source/utils.js
init_esm_shims();
var identity2 = (value2) => value2;
var noop = () => void 0;
var getContentsProperty = ({ contents }) => contents;
var throwObjectStream = (chunk) => {
  throw new Error(`Streams in object mode are not supported: ${String(chunk)}`);
};
var getLengthProperty = (convertedChunk) => convertedChunk.length;

// ../../.yarn/cache/get-stream-npm-9.0.1-8cc24b7ed5-d70e73857f.zip/node_modules/get-stream/source/array.js
async function getStreamAsArray(stream, options) {
  return getStreamContents(stream, arrayMethods, options);
}
var initArray = () => ({ contents: [] });
var increment = () => 1;
var addArrayChunk = (convertedChunk, { contents }) => {
  contents.push(convertedChunk);
  return contents;
};
var arrayMethods = {
  init: initArray,
  convertChunk: {
    string: identity2,
    buffer: identity2,
    arrayBuffer: identity2,
    dataView: identity2,
    typedArray: identity2,
    others: identity2
  },
  getSize: increment,
  truncateChunk: noop,
  addChunk: addArrayChunk,
  getFinalChunk: noop,
  finalize: getContentsProperty
};

// ../../.yarn/cache/get-stream-npm-9.0.1-8cc24b7ed5-d70e73857f.zip/node_modules/get-stream/source/array-buffer.js
init_esm_shims();
async function getStreamAsArrayBuffer(stream, options) {
  return getStreamContents(stream, arrayBufferMethods, options);
}
var initArrayBuffer = () => ({ contents: new ArrayBuffer(0) });
var useTextEncoder = (chunk) => textEncoder2.encode(chunk);
var textEncoder2 = new TextEncoder();
var useUint8Array = (chunk) => new Uint8Array(chunk);
var useUint8ArrayWithOffset = (chunk) => new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength);
var truncateArrayBufferChunk = (convertedChunk, chunkSize) => convertedChunk.slice(0, chunkSize);
var addArrayBufferChunk = (convertedChunk, { contents, length: previousLength }, length) => {
  const newContents = hasArrayBufferResize() ? resizeArrayBuffer(contents, length) : resizeArrayBufferSlow(contents, length);
  new Uint8Array(newContents).set(convertedChunk, previousLength);
  return newContents;
};
var resizeArrayBufferSlow = (contents, length) => {
  if (length <= contents.byteLength) {
    return contents;
  }
  const arrayBuffer = new ArrayBuffer(getNewContentsLength(length));
  new Uint8Array(arrayBuffer).set(new Uint8Array(contents), 0);
  return arrayBuffer;
};
var resizeArrayBuffer = (contents, length) => {
  if (length <= contents.maxByteLength) {
    contents.resize(length);
    return contents;
  }
  const arrayBuffer = new ArrayBuffer(length, { maxByteLength: getNewContentsLength(length) });
  new Uint8Array(arrayBuffer).set(new Uint8Array(contents), 0);
  return arrayBuffer;
};
var getNewContentsLength = (length) => SCALE_FACTOR ** Math.ceil(Math.log(length) / Math.log(SCALE_FACTOR));
var SCALE_FACTOR = 2;
var finalizeArrayBuffer = ({ contents, length }) => hasArrayBufferResize() ? contents : contents.slice(0, length);
var hasArrayBufferResize = () => "resize" in ArrayBuffer.prototype;
var arrayBufferMethods = {
  init: initArrayBuffer,
  convertChunk: {
    string: useTextEncoder,
    buffer: useUint8Array,
    arrayBuffer: useUint8Array,
    dataView: useUint8ArrayWithOffset,
    typedArray: useUint8ArrayWithOffset,
    others: throwObjectStream
  },
  getSize: getLengthProperty,
  truncateChunk: truncateArrayBufferChunk,
  addChunk: addArrayBufferChunk,
  getFinalChunk: noop,
  finalize: finalizeArrayBuffer
};

// ../../.yarn/cache/get-stream-npm-9.0.1-8cc24b7ed5-d70e73857f.zip/node_modules/get-stream/source/string.js
init_esm_shims();
async function getStreamAsString(stream, options) {
  return getStreamContents(stream, stringMethods, options);
}
var initString = () => ({ contents: "", textDecoder: new TextDecoder() });
var useTextDecoder = (chunk, { textDecoder: textDecoder2 }) => textDecoder2.decode(chunk, { stream: true });
var addStringChunk = (convertedChunk, { contents }) => contents + convertedChunk;
var truncateStringChunk = (convertedChunk, chunkSize) => convertedChunk.slice(0, chunkSize);
var getFinalStringChunk = ({ textDecoder: textDecoder2 }) => {
  const finalChunk = textDecoder2.decode();
  return finalChunk === "" ? void 0 : finalChunk;
};
var stringMethods = {
  init: initString,
  convertChunk: {
    string: identity2,
    buffer: useTextDecoder,
    arrayBuffer: useTextDecoder,
    dataView: useTextDecoder,
    typedArray: useTextDecoder,
    others: throwObjectStream
  },
  getSize: getLengthProperty,
  truncateChunk: truncateStringChunk,
  addChunk: addStringChunk,
  getFinalChunk: getFinalStringChunk,
  finalize: getContentsProperty
};

// ../../.yarn/cache/get-stream-npm-9.0.1-8cc24b7ed5-d70e73857f.zip/node_modules/get-stream/source/index.js
Object.assign(nodeImports, { on, finished });

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/io/max-buffer.js
var handleMaxBuffer = ({ error, stream, readableObjectMode, lines, encoding, fdNumber }) => {
  if (!(error instanceof MaxBufferError)) {
    throw error;
  }
  if (fdNumber === "all") {
    return error;
  }
  const unit = getMaxBufferUnit(readableObjectMode, lines, encoding);
  error.maxBufferInfo = { fdNumber, unit };
  stream.destroy();
  throw error;
};
var getMaxBufferUnit = (readableObjectMode, lines, encoding) => {
  if (readableObjectMode) {
    return "objects";
  }
  if (lines) {
    return "lines";
  }
  if (encoding === "buffer") {
    return "bytes";
  }
  return "characters";
};
var checkIpcMaxBuffer = (subprocess, ipcOutput, maxBuffer) => {
  if (ipcOutput.length !== maxBuffer) {
    return;
  }
  const error = new MaxBufferError();
  error.maxBufferInfo = { fdNumber: "ipc" };
  throw error;
};
var getMaxBufferMessage = (error, maxBuffer) => {
  const { streamName, threshold, unit } = getMaxBufferInfo(error, maxBuffer);
  return `Command's ${streamName} was larger than ${threshold} ${unit}`;
};
var getMaxBufferInfo = (error, maxBuffer) => {
  if (error?.maxBufferInfo === void 0) {
    return { streamName: "output", threshold: maxBuffer[1], unit: "bytes" };
  }
  const { maxBufferInfo: { fdNumber, unit } } = error;
  delete error.maxBufferInfo;
  const threshold = getFdSpecificValue(maxBuffer, fdNumber);
  if (fdNumber === "ipc") {
    return { streamName: "IPC output", threshold, unit: "messages" };
  }
  return { streamName: getStreamName(fdNumber), threshold, unit };
};
var isMaxBufferSync = (resultError, output, maxBuffer) => resultError?.code === "ENOBUFS" && output !== null && output.some((result) => result !== null && result.length > getMaxBufferSync(maxBuffer));
var truncateMaxBufferSync = (result, isMaxBuffer, maxBuffer) => {
  if (!isMaxBuffer) {
    return result;
  }
  const maxBufferValue = getMaxBufferSync(maxBuffer);
  return result.length > maxBufferValue ? result.slice(0, maxBufferValue) : result;
};
var getMaxBufferSync = ([, stdoutMaxBuffer]) => stdoutMaxBuffer;

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/return/message.js
var createMessages = ({
  stdio,
  all,
  ipcOutput,
  originalError,
  signal,
  signalDescription,
  exitCode,
  escapedCommand,
  timedOut,
  isCanceled,
  isGracefullyCanceled,
  isMaxBuffer,
  isForcefullyTerminated,
  forceKillAfterDelay,
  killSignal,
  maxBuffer,
  timeout,
  cwd
}) => {
  const errorCode = originalError?.code;
  const prefix = getErrorPrefix({
    originalError,
    timedOut,
    timeout,
    isMaxBuffer,
    maxBuffer,
    errorCode,
    signal,
    signalDescription,
    exitCode,
    isCanceled,
    isGracefullyCanceled,
    isForcefullyTerminated,
    forceKillAfterDelay,
    killSignal
  });
  const originalMessage = getOriginalMessage(originalError, cwd);
  const suffix = originalMessage === void 0 ? "" : `
${originalMessage}`;
  const shortMessage = `${prefix}: ${escapedCommand}${suffix}`;
  const messageStdio = all === void 0 ? [stdio[2], stdio[1]] : [all];
  const message = [
    shortMessage,
    ...messageStdio,
    ...stdio.slice(3),
    ipcOutput.map((ipcMessage) => serializeIpcMessage(ipcMessage)).join("\n")
  ].map((messagePart) => escapeLines(stripFinalNewline(serializeMessagePart(messagePart)))).filter(Boolean).join("\n\n");
  return { originalMessage, shortMessage, message };
};
var getErrorPrefix = ({
  originalError,
  timedOut,
  timeout,
  isMaxBuffer,
  maxBuffer,
  errorCode,
  signal,
  signalDescription,
  exitCode,
  isCanceled,
  isGracefullyCanceled,
  isForcefullyTerminated,
  forceKillAfterDelay,
  killSignal
}) => {
  const forcefulSuffix = getForcefulSuffix(isForcefullyTerminated, forceKillAfterDelay);
  if (timedOut) {
    return `Command timed out after ${timeout} milliseconds${forcefulSuffix}`;
  }
  if (isGracefullyCanceled) {
    if (signal === void 0) {
      return `Command was gracefully canceled with exit code ${exitCode}`;
    }
    return isForcefullyTerminated ? `Command was gracefully canceled${forcefulSuffix}` : `Command was gracefully canceled with ${signal} (${signalDescription})`;
  }
  if (isCanceled) {
    return `Command was canceled${forcefulSuffix}`;
  }
  if (isMaxBuffer) {
    return `${getMaxBufferMessage(originalError, maxBuffer)}${forcefulSuffix}`;
  }
  if (errorCode !== void 0) {
    return `Command failed with ${errorCode}${forcefulSuffix}`;
  }
  if (isForcefullyTerminated) {
    return `Command was killed with ${killSignal} (${getSignalDescription(killSignal)})${forcefulSuffix}`;
  }
  if (signal !== void 0) {
    return `Command was killed with ${signal} (${signalDescription})`;
  }
  if (exitCode !== void 0) {
    return `Command failed with exit code ${exitCode}`;
  }
  return "Command failed";
};
var getForcefulSuffix = (isForcefullyTerminated, forceKillAfterDelay) => isForcefullyTerminated ? ` and was forcefully terminated after ${forceKillAfterDelay} milliseconds` : "";
var getOriginalMessage = (originalError, cwd) => {
  if (originalError instanceof DiscardedError) {
    return;
  }
  const originalMessage = isExecaError(originalError) ? originalError.originalMessage : String(originalError?.message ?? originalError);
  const escapedOriginalMessage = escapeLines(fixCwdError(originalMessage, cwd));
  return escapedOriginalMessage === "" ? void 0 : escapedOriginalMessage;
};
var serializeIpcMessage = (ipcMessage) => typeof ipcMessage === "string" ? ipcMessage : inspect2(ipcMessage);
var serializeMessagePart = (messagePart) => Array.isArray(messagePart) ? messagePart.map((messageItem) => stripFinalNewline(serializeMessageItem(messageItem))).filter(Boolean).join("\n") : serializeMessageItem(messagePart);
var serializeMessageItem = (messageItem) => {
  if (typeof messageItem === "string") {
    return messageItem;
  }
  if (isUint8Array(messageItem)) {
    return uint8ArrayToString(messageItem);
  }
  return "";
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/return/result.js
var makeSuccessResult = ({
  command,
  escapedCommand,
  stdio,
  all,
  ipcOutput,
  options: { cwd },
  startTime
}) => omitUndefinedProperties({
  command,
  escapedCommand,
  cwd,
  durationMs: getDurationMs(startTime),
  failed: false,
  timedOut: false,
  isCanceled: false,
  isGracefullyCanceled: false,
  isTerminated: false,
  isMaxBuffer: false,
  isForcefullyTerminated: false,
  exitCode: 0,
  stdout: stdio[1],
  stderr: stdio[2],
  all,
  stdio,
  ipcOutput,
  pipedFrom: []
});
var makeEarlyError = ({
  error,
  command,
  escapedCommand,
  fileDescriptors,
  options,
  startTime,
  isSync
}) => makeError({
  error,
  command,
  escapedCommand,
  startTime,
  timedOut: false,
  isCanceled: false,
  isGracefullyCanceled: false,
  isMaxBuffer: false,
  isForcefullyTerminated: false,
  stdio: Array.from({ length: fileDescriptors.length }),
  ipcOutput: [],
  options,
  isSync
});
var makeError = ({
  error: originalError,
  command,
  escapedCommand,
  startTime,
  timedOut,
  isCanceled,
  isGracefullyCanceled,
  isMaxBuffer,
  isForcefullyTerminated,
  exitCode: rawExitCode,
  signal: rawSignal,
  stdio,
  all,
  ipcOutput,
  options: {
    timeoutDuration,
    timeout = timeoutDuration,
    forceKillAfterDelay,
    killSignal,
    cwd,
    maxBuffer
  },
  isSync
}) => {
  const { exitCode, signal, signalDescription } = normalizeExitPayload(rawExitCode, rawSignal);
  const { originalMessage, shortMessage, message } = createMessages({
    stdio,
    all,
    ipcOutput,
    originalError,
    signal,
    signalDescription,
    exitCode,
    escapedCommand,
    timedOut,
    isCanceled,
    isGracefullyCanceled,
    isMaxBuffer,
    isForcefullyTerminated,
    forceKillAfterDelay,
    killSignal,
    maxBuffer,
    timeout,
    cwd
  });
  const error = getFinalError(originalError, message, isSync);
  Object.assign(error, getErrorProperties({
    error,
    command,
    escapedCommand,
    startTime,
    timedOut,
    isCanceled,
    isGracefullyCanceled,
    isMaxBuffer,
    isForcefullyTerminated,
    exitCode,
    signal,
    signalDescription,
    stdio,
    all,
    ipcOutput,
    cwd,
    originalMessage,
    shortMessage
  }));
  return error;
};
var getErrorProperties = ({
  error,
  command,
  escapedCommand,
  startTime,
  timedOut,
  isCanceled,
  isGracefullyCanceled,
  isMaxBuffer,
  isForcefullyTerminated,
  exitCode,
  signal,
  signalDescription,
  stdio,
  all,
  ipcOutput,
  cwd,
  originalMessage,
  shortMessage
}) => omitUndefinedProperties({
  shortMessage,
  originalMessage,
  command,
  escapedCommand,
  cwd,
  durationMs: getDurationMs(startTime),
  failed: true,
  timedOut,
  isCanceled,
  isGracefullyCanceled,
  isTerminated: signal !== void 0,
  isMaxBuffer,
  isForcefullyTerminated,
  exitCode,
  signal,
  signalDescription,
  code: error.cause?.code,
  stdout: stdio[1],
  stderr: stdio[2],
  all,
  stdio,
  ipcOutput,
  pipedFrom: []
});
var omitUndefinedProperties = (result) => Object.fromEntries(Object.entries(result).filter(([, value2]) => value2 !== void 0));
var normalizeExitPayload = (rawExitCode, rawSignal) => {
  const exitCode = rawExitCode === null ? void 0 : rawExitCode;
  const signal = rawSignal === null ? void 0 : rawSignal;
  const signalDescription = signal === void 0 ? void 0 : getSignalDescription(rawSignal);
  return { exitCode, signal, signalDescription };
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/return/reject.js
init_esm_shims();

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/verbose/complete.js
init_esm_shims();

// ../../.yarn/cache/pretty-ms-npm-9.1.0-7aaefe768a-fd111aad88.zip/node_modules/pretty-ms/index.js
init_esm_shims();

// ../../.yarn/cache/parse-ms-npm-4.0.0-b4b6d3fb16-a7900f4f1e.zip/node_modules/parse-ms/index.js
init_esm_shims();
var toZeroIfInfinity = (value2) => Number.isFinite(value2) ? value2 : 0;
function parseNumber(milliseconds) {
  return {
    days: Math.trunc(milliseconds / 864e5),
    hours: Math.trunc(milliseconds / 36e5 % 24),
    minutes: Math.trunc(milliseconds / 6e4 % 60),
    seconds: Math.trunc(milliseconds / 1e3 % 60),
    milliseconds: Math.trunc(milliseconds % 1e3),
    microseconds: Math.trunc(toZeroIfInfinity(milliseconds * 1e3) % 1e3),
    nanoseconds: Math.trunc(toZeroIfInfinity(milliseconds * 1e6) % 1e3)
  };
}
function parseBigint(milliseconds) {
  return {
    days: milliseconds / 86400000n,
    hours: milliseconds / 3600000n % 24n,
    minutes: milliseconds / 60000n % 60n,
    seconds: milliseconds / 1000n % 60n,
    milliseconds: milliseconds % 1000n,
    microseconds: 0n,
    nanoseconds: 0n
  };
}
function parseMilliseconds(milliseconds) {
  switch (typeof milliseconds) {
    case "number": {
      if (Number.isFinite(milliseconds)) {
        return parseNumber(milliseconds);
      }
      break;
    }
    case "bigint": {
      return parseBigint(milliseconds);
    }
  }
  throw new TypeError("Expected a finite number or bigint");
}

// ../../.yarn/cache/pretty-ms-npm-9.1.0-7aaefe768a-fd111aad88.zip/node_modules/pretty-ms/index.js
var isZero = (value2) => value2 === 0 || value2 === 0n;
var pluralize = (word, count2) => count2 === 1 || count2 === 1n ? word : `${word}s`;
var SECOND_ROUNDING_EPSILON = 1e-7;
var ONE_DAY_IN_MILLISECONDS = 24n * 60n * 60n * 1000n;
function prettyMilliseconds(milliseconds, options) {
  const isBigInt = typeof milliseconds === "bigint";
  if (!isBigInt && !Number.isFinite(milliseconds)) {
    throw new TypeError("Expected a finite number or bigint");
  }
  options = { ...options };
  const sign = milliseconds < 0 ? "-" : "";
  milliseconds = milliseconds < 0 ? -milliseconds : milliseconds;
  if (options.colonNotation) {
    options.compact = false;
    options.formatSubMilliseconds = false;
    options.separateMilliseconds = false;
    options.verbose = false;
  }
  if (options.compact) {
    options.unitCount = 1;
    options.secondsDecimalDigits = 0;
    options.millisecondsDecimalDigits = 0;
  }
  let result = [];
  const floorDecimals = (value2, decimalDigits) => {
    const flooredInterimValue = Math.floor(value2 * 10 ** decimalDigits + SECOND_ROUNDING_EPSILON);
    const flooredValue = Math.round(flooredInterimValue) / 10 ** decimalDigits;
    return flooredValue.toFixed(decimalDigits);
  };
  const add = (value2, long, short, valueString) => {
    if ((result.length === 0 || !options.colonNotation) && isZero(value2) && !(options.colonNotation && short === "m")) {
      return;
    }
    valueString ??= String(value2);
    if (options.colonNotation) {
      const wholeDigits = valueString.includes(".") ? valueString.split(".")[0].length : valueString.length;
      const minLength = result.length > 0 ? 2 : 1;
      valueString = "0".repeat(Math.max(0, minLength - wholeDigits)) + valueString;
    } else {
      valueString += options.verbose ? " " + pluralize(long, value2) : short;
    }
    result.push(valueString);
  };
  const parsed = parseMilliseconds(milliseconds);
  const days = BigInt(parsed.days);
  add(days / 365n, "year", "y");
  add(days % 365n, "day", "d");
  add(Number(parsed.hours), "hour", "h");
  add(Number(parsed.minutes), "minute", "m");
  if (options.separateMilliseconds || options.formatSubMilliseconds || !options.colonNotation && milliseconds < 1e3) {
    const seconds = Number(parsed.seconds);
    const milliseconds2 = Number(parsed.milliseconds);
    const microseconds = Number(parsed.microseconds);
    const nanoseconds = Number(parsed.nanoseconds);
    add(seconds, "second", "s");
    if (options.formatSubMilliseconds) {
      add(milliseconds2, "millisecond", "ms");
      add(microseconds, "microsecond", "\xB5s");
      add(nanoseconds, "nanosecond", "ns");
    } else {
      const millisecondsAndBelow = milliseconds2 + microseconds / 1e3 + nanoseconds / 1e6;
      const millisecondsDecimalDigits = typeof options.millisecondsDecimalDigits === "number" ? options.millisecondsDecimalDigits : 0;
      const roundedMilliseconds = millisecondsAndBelow >= 1 ? Math.round(millisecondsAndBelow) : Math.ceil(millisecondsAndBelow);
      const millisecondsString = millisecondsDecimalDigits ? millisecondsAndBelow.toFixed(millisecondsDecimalDigits) : roundedMilliseconds;
      add(
        Number.parseFloat(millisecondsString),
        "millisecond",
        "ms",
        millisecondsString
      );
    }
  } else {
    const seconds = (isBigInt ? Number(milliseconds % ONE_DAY_IN_MILLISECONDS) : milliseconds) / 1e3 % 60;
    const secondsDecimalDigits = typeof options.secondsDecimalDigits === "number" ? options.secondsDecimalDigits : 1;
    const secondsFixed = floorDecimals(seconds, secondsDecimalDigits);
    const secondsString = options.keepDecimalsOnWholeSeconds ? secondsFixed : secondsFixed.replace(/\.0+$/, "");
    add(Number.parseFloat(secondsString), "second", "s", secondsString);
  }
  if (result.length === 0) {
    return sign + "0" + (options.verbose ? " milliseconds" : "ms");
  }
  const separator = options.colonNotation ? ":" : " ";
  if (typeof options.unitCount === "number") {
    result = result.slice(0, Math.max(options.unitCount, 1));
  }
  return sign + result.join(separator);
}

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/verbose/error.js
init_esm_shims();
var logError = (result, verboseInfo) => {
  if (result.failed) {
    verboseLog({
      type: "error",
      verboseMessage: result.shortMessage,
      verboseInfo,
      result
    });
  }
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/verbose/complete.js
var logResult = (result, verboseInfo) => {
  if (!isVerbose(verboseInfo)) {
    return;
  }
  logError(result, verboseInfo);
  logDuration(result, verboseInfo);
};
var logDuration = (result, verboseInfo) => {
  const verboseMessage = `(done in ${prettyMilliseconds(result.durationMs)})`;
  verboseLog({
    type: "duration",
    verboseMessage,
    verboseInfo,
    result
  });
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/return/reject.js
var handleResult = (result, verboseInfo, { reject }) => {
  logResult(result, verboseInfo);
  if (result.failed && reject) {
    throw result;
  }
  return result;
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/stdio/handle-sync.js
init_esm_shims();
import { readFileSync as readFileSync2 } from "node:fs";

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/stdio/handle.js
init_esm_shims();

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/transform/normalize.js
init_esm_shims();

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/stdio/type.js
init_esm_shims();
var getStdioItemType = (value2, optionName) => {
  if (isAsyncGenerator(value2)) {
    return "asyncGenerator";
  }
  if (isSyncGenerator(value2)) {
    return "generator";
  }
  if (isUrl(value2)) {
    return "fileUrl";
  }
  if (isFilePathObject(value2)) {
    return "filePath";
  }
  if (isWebStream(value2)) {
    return "webStream";
  }
  if (isStream(value2, { checkOpen: false })) {
    return "native";
  }
  if (isUint8Array(value2)) {
    return "uint8Array";
  }
  if (isAsyncIterableObject(value2)) {
    return "asyncIterable";
  }
  if (isIterableObject(value2)) {
    return "iterable";
  }
  if (isTransformStream(value2)) {
    return getTransformStreamType({ transform: value2 }, optionName);
  }
  if (isTransformOptions(value2)) {
    return getTransformObjectType(value2, optionName);
  }
  return "native";
};
var getTransformObjectType = (value2, optionName) => {
  if (isDuplexStream(value2.transform, { checkOpen: false })) {
    return getDuplexType(value2, optionName);
  }
  if (isTransformStream(value2.transform)) {
    return getTransformStreamType(value2, optionName);
  }
  return getGeneratorObjectType(value2, optionName);
};
var getDuplexType = (value2, optionName) => {
  validateNonGeneratorType(value2, optionName, "Duplex stream");
  return "duplex";
};
var getTransformStreamType = (value2, optionName) => {
  validateNonGeneratorType(value2, optionName, "web TransformStream");
  return "webTransform";
};
var validateNonGeneratorType = ({ final, binary, objectMode }, optionName, typeName) => {
  checkUndefinedOption(final, `${optionName}.final`, typeName);
  checkUndefinedOption(binary, `${optionName}.binary`, typeName);
  checkBooleanOption(objectMode, `${optionName}.objectMode`);
};
var checkUndefinedOption = (value2, optionName, typeName) => {
  if (value2 !== void 0) {
    throw new TypeError(`The \`${optionName}\` option can only be defined when using a generator, not a ${typeName}.`);
  }
};
var getGeneratorObjectType = ({ transform: transform3, final, binary, objectMode }, optionName) => {
  if (transform3 !== void 0 && !isGenerator(transform3)) {
    throw new TypeError(`The \`${optionName}.transform\` option must be a generator, a Duplex stream or a web TransformStream.`);
  }
  if (isDuplexStream(final, { checkOpen: false })) {
    throw new TypeError(`The \`${optionName}.final\` option must not be a Duplex stream.`);
  }
  if (isTransformStream(final)) {
    throw new TypeError(`The \`${optionName}.final\` option must not be a web TransformStream.`);
  }
  if (final !== void 0 && !isGenerator(final)) {
    throw new TypeError(`The \`${optionName}.final\` option must be a generator.`);
  }
  checkBooleanOption(binary, `${optionName}.binary`);
  checkBooleanOption(objectMode, `${optionName}.objectMode`);
  return isAsyncGenerator(transform3) || isAsyncGenerator(final) ? "asyncGenerator" : "generator";
};
var checkBooleanOption = (value2, optionName) => {
  if (value2 !== void 0 && typeof value2 !== "boolean") {
    throw new TypeError(`The \`${optionName}\` option must use a boolean.`);
  }
};
var isGenerator = (value2) => isAsyncGenerator(value2) || isSyncGenerator(value2);
var isAsyncGenerator = (value2) => Object.prototype.toString.call(value2) === "[object AsyncGeneratorFunction]";
var isSyncGenerator = (value2) => Object.prototype.toString.call(value2) === "[object GeneratorFunction]";
var isTransformOptions = (value2) => isPlainObject(value2) && (value2.transform !== void 0 || value2.final !== void 0);
var isUrl = (value2) => Object.prototype.toString.call(value2) === "[object URL]";
var isRegularUrl = (value2) => isUrl(value2) && value2.protocol !== "file:";
var isFilePathObject = (value2) => isPlainObject(value2) && Object.keys(value2).length > 0 && Object.keys(value2).every((key) => FILE_PATH_KEYS.has(key)) && isFilePathString(value2.file);
var FILE_PATH_KEYS = /* @__PURE__ */ new Set(["file", "append"]);
var isFilePathString = (file) => typeof file === "string";
var isUnknownStdioString = (type, value2) => type === "native" && typeof value2 === "string" && !KNOWN_STDIO_STRINGS.has(value2);
var KNOWN_STDIO_STRINGS = /* @__PURE__ */ new Set(["ipc", "ignore", "inherit", "overlapped", "pipe"]);
var isReadableStream2 = (value2) => Object.prototype.toString.call(value2) === "[object ReadableStream]";
var isWritableStream2 = (value2) => Object.prototype.toString.call(value2) === "[object WritableStream]";
var isWebStream = (value2) => isReadableStream2(value2) || isWritableStream2(value2);
var isTransformStream = (value2) => isReadableStream2(value2?.readable) && isWritableStream2(value2?.writable);
var isAsyncIterableObject = (value2) => isObject(value2) && typeof value2[Symbol.asyncIterator] === "function";
var isIterableObject = (value2) => isObject(value2) && typeof value2[Symbol.iterator] === "function";
var isObject = (value2) => typeof value2 === "object" && value2 !== null;
var TRANSFORM_TYPES = /* @__PURE__ */ new Set(["generator", "asyncGenerator", "duplex", "webTransform"]);
var FILE_TYPES = /* @__PURE__ */ new Set(["fileUrl", "filePath", "fileNumber"]);
var SPECIAL_DUPLICATE_TYPES_SYNC = /* @__PURE__ */ new Set(["fileUrl", "filePath"]);
var SPECIAL_DUPLICATE_TYPES = /* @__PURE__ */ new Set([...SPECIAL_DUPLICATE_TYPES_SYNC, "webStream", "nodeStream"]);
var FORBID_DUPLICATE_TYPES = /* @__PURE__ */ new Set(["webTransform", "duplex"]);
var TYPE_TO_MESSAGE = {
  generator: "a generator",
  asyncGenerator: "an async generator",
  fileUrl: "a file URL",
  filePath: "a file path string",
  fileNumber: "a file descriptor number",
  webStream: "a web stream",
  nodeStream: "a Node.js stream",
  webTransform: "a web TransformStream",
  duplex: "a Duplex stream",
  native: "any value",
  iterable: "an iterable",
  asyncIterable: "an async iterable",
  string: "a string",
  uint8Array: "a Uint8Array"
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/transform/object-mode.js
init_esm_shims();
var getTransformObjectModes = (objectMode, index, newTransforms, direction) => direction === "output" ? getOutputObjectModes(objectMode, index, newTransforms) : getInputObjectModes(objectMode, index, newTransforms);
var getOutputObjectModes = (objectMode, index, newTransforms) => {
  const writableObjectMode = index !== 0 && newTransforms[index - 1].value.readableObjectMode;
  const readableObjectMode = objectMode ?? writableObjectMode;
  return { writableObjectMode, readableObjectMode };
};
var getInputObjectModes = (objectMode, index, newTransforms) => {
  const writableObjectMode = index === 0 ? objectMode === true : newTransforms[index - 1].value.readableObjectMode;
  const readableObjectMode = index !== newTransforms.length - 1 && (objectMode ?? writableObjectMode);
  return { writableObjectMode, readableObjectMode };
};
var getFdObjectMode = (stdioItems, direction) => {
  const lastTransform = stdioItems.findLast(({ type }) => TRANSFORM_TYPES.has(type));
  if (lastTransform === void 0) {
    return false;
  }
  return direction === "input" ? lastTransform.value.writableObjectMode : lastTransform.value.readableObjectMode;
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/transform/normalize.js
var normalizeTransforms = (stdioItems, optionName, direction, options) => [
  ...stdioItems.filter(({ type }) => !TRANSFORM_TYPES.has(type)),
  ...getTransforms(stdioItems, optionName, direction, options)
];
var getTransforms = (stdioItems, optionName, direction, { encoding }) => {
  const transforms = stdioItems.filter(({ type }) => TRANSFORM_TYPES.has(type));
  const newTransforms = Array.from({ length: transforms.length });
  for (const [index, stdioItem] of Object.entries(transforms)) {
    newTransforms[index] = normalizeTransform({
      stdioItem,
      index: Number(index),
      newTransforms,
      optionName,
      direction,
      encoding
    });
  }
  return sortTransforms(newTransforms, direction);
};
var normalizeTransform = ({ stdioItem, stdioItem: { type }, index, newTransforms, optionName, direction, encoding }) => {
  if (type === "duplex") {
    return normalizeDuplex({ stdioItem, optionName });
  }
  if (type === "webTransform") {
    return normalizeTransformStream({
      stdioItem,
      index,
      newTransforms,
      direction
    });
  }
  return normalizeGenerator({
    stdioItem,
    index,
    newTransforms,
    direction,
    encoding
  });
};
var normalizeDuplex = ({
  stdioItem,
  stdioItem: {
    value: {
      transform: transform3,
      transform: { writableObjectMode, readableObjectMode },
      objectMode = readableObjectMode
    }
  },
  optionName
}) => {
  if (objectMode && !readableObjectMode) {
    throw new TypeError(`The \`${optionName}.objectMode\` option can only be \`true\` if \`new Duplex({objectMode: true})\` is used.`);
  }
  if (!objectMode && readableObjectMode) {
    throw new TypeError(`The \`${optionName}.objectMode\` option cannot be \`false\` if \`new Duplex({objectMode: true})\` is used.`);
  }
  return {
    ...stdioItem,
    value: { transform: transform3, writableObjectMode, readableObjectMode }
  };
};
var normalizeTransformStream = ({ stdioItem, stdioItem: { value: value2 }, index, newTransforms, direction }) => {
  const { transform: transform3, objectMode } = isPlainObject(value2) ? value2 : { transform: value2 };
  const { writableObjectMode, readableObjectMode } = getTransformObjectModes(objectMode, index, newTransforms, direction);
  return {
    ...stdioItem,
    value: { transform: transform3, writableObjectMode, readableObjectMode }
  };
};
var normalizeGenerator = ({ stdioItem, stdioItem: { value: value2 }, index, newTransforms, direction, encoding }) => {
  const {
    transform: transform3,
    final,
    binary: binaryOption = false,
    preserveNewlines = false,
    objectMode
  } = isPlainObject(value2) ? value2 : { transform: value2 };
  const binary = binaryOption || BINARY_ENCODINGS.has(encoding);
  const { writableObjectMode, readableObjectMode } = getTransformObjectModes(objectMode, index, newTransforms, direction);
  return {
    ...stdioItem,
    value: {
      transform: transform3,
      final,
      binary,
      preserveNewlines,
      writableObjectMode,
      readableObjectMode
    }
  };
};
var sortTransforms = (newTransforms, direction) => direction === "input" ? newTransforms.reverse() : newTransforms;

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/stdio/direction.js
init_esm_shims();
import process7 from "node:process";
var getStreamDirection = (stdioItems, fdNumber, optionName) => {
  const directions = stdioItems.map((stdioItem) => getStdioItemDirection(stdioItem, fdNumber));
  if (directions.includes("input") && directions.includes("output")) {
    throw new TypeError(`The \`${optionName}\` option must not be an array of both readable and writable values.`);
  }
  return directions.find(Boolean) ?? DEFAULT_DIRECTION;
};
var getStdioItemDirection = ({ type, value: value2 }, fdNumber) => KNOWN_DIRECTIONS[fdNumber] ?? guessStreamDirection[type](value2);
var KNOWN_DIRECTIONS = ["input", "output", "output"];
var anyDirection = () => void 0;
var alwaysInput = () => "input";
var guessStreamDirection = {
  generator: anyDirection,
  asyncGenerator: anyDirection,
  fileUrl: anyDirection,
  filePath: anyDirection,
  iterable: alwaysInput,
  asyncIterable: alwaysInput,
  uint8Array: alwaysInput,
  webStream: (value2) => isWritableStream2(value2) ? "output" : "input",
  nodeStream(value2) {
    if (!isReadableStream(value2, { checkOpen: false })) {
      return "output";
    }
    return isWritableStream(value2, { checkOpen: false }) ? void 0 : "input";
  },
  webTransform: anyDirection,
  duplex: anyDirection,
  native(value2) {
    const standardStreamDirection = getStandardStreamDirection(value2);
    if (standardStreamDirection !== void 0) {
      return standardStreamDirection;
    }
    if (isStream(value2, { checkOpen: false })) {
      return guessStreamDirection.nodeStream(value2);
    }
  }
};
var getStandardStreamDirection = (value2) => {
  if ([0, process7.stdin].includes(value2)) {
    return "input";
  }
  if ([1, 2, process7.stdout, process7.stderr].includes(value2)) {
    return "output";
  }
};
var DEFAULT_DIRECTION = "output";

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/stdio/stdio-option.js
init_esm_shims();

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/ipc/array.js
init_esm_shims();
var normalizeIpcStdioArray = (stdioArray, ipc) => ipc && !stdioArray.includes("ipc") ? [...stdioArray, "ipc"] : stdioArray;

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/stdio/stdio-option.js
var normalizeStdioOption = ({ stdio, ipc, buffer, ...options }, verboseInfo, isSync) => {
  const stdioArray = getStdioArray(stdio, options).map((stdioOption, fdNumber) => addDefaultValue2(stdioOption, fdNumber));
  return isSync ? normalizeStdioSync(stdioArray, buffer, verboseInfo) : normalizeIpcStdioArray(stdioArray, ipc);
};
var getStdioArray = (stdio, options) => {
  if (stdio === void 0) {
    return STANDARD_STREAMS_ALIASES.map((alias) => options[alias]);
  }
  if (hasAlias(options)) {
    throw new Error(`It's not possible to provide \`stdio\` in combination with one of ${STANDARD_STREAMS_ALIASES.map((alias) => `\`${alias}\``).join(", ")}`);
  }
  if (typeof stdio === "string") {
    return [stdio, stdio, stdio];
  }
  if (!Array.isArray(stdio)) {
    throw new TypeError(`Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof stdio}\``);
  }
  const length = Math.max(stdio.length, STANDARD_STREAMS_ALIASES.length);
  return Array.from({ length }, (_2, fdNumber) => stdio[fdNumber]);
};
var hasAlias = (options) => STANDARD_STREAMS_ALIASES.some((alias) => options[alias] !== void 0);
var addDefaultValue2 = (stdioOption, fdNumber) => {
  if (Array.isArray(stdioOption)) {
    return stdioOption.map((item) => addDefaultValue2(item, fdNumber));
  }
  if (stdioOption === null || stdioOption === void 0) {
    return fdNumber >= STANDARD_STREAMS_ALIASES.length ? "ignore" : "pipe";
  }
  return stdioOption;
};
var normalizeStdioSync = (stdioArray, buffer, verboseInfo) => stdioArray.map((stdioOption, fdNumber) => !buffer[fdNumber] && fdNumber !== 0 && !isFullVerbose(verboseInfo, fdNumber) && isOutputPipeOnly(stdioOption) ? "ignore" : stdioOption);
var isOutputPipeOnly = (stdioOption) => stdioOption === "pipe" || Array.isArray(stdioOption) && stdioOption.every((item) => item === "pipe");

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/stdio/native.js
init_esm_shims();
import { readFileSync } from "node:fs";
import tty3 from "node:tty";
var handleNativeStream = ({ stdioItem, stdioItem: { type }, isStdioArray, fdNumber, direction, isSync }) => {
  if (!isStdioArray || type !== "native") {
    return stdioItem;
  }
  return isSync ? handleNativeStreamSync({ stdioItem, fdNumber, direction }) : handleNativeStreamAsync({ stdioItem, fdNumber });
};
var handleNativeStreamSync = ({ stdioItem, stdioItem: { value: value2, optionName }, fdNumber, direction }) => {
  const targetFd = getTargetFd({
    value: value2,
    optionName,
    fdNumber,
    direction
  });
  if (targetFd !== void 0) {
    return targetFd;
  }
  if (isStream(value2, { checkOpen: false })) {
    throw new TypeError(`The \`${optionName}: Stream\` option cannot both be an array and include a stream with synchronous methods.`);
  }
  return stdioItem;
};
var getTargetFd = ({ value: value2, optionName, fdNumber, direction }) => {
  const targetFdNumber = getTargetFdNumber(value2, fdNumber);
  if (targetFdNumber === void 0) {
    return;
  }
  if (direction === "output") {
    return { type: "fileNumber", value: targetFdNumber, optionName };
  }
  if (tty3.isatty(targetFdNumber)) {
    throw new TypeError(`The \`${optionName}: ${serializeOptionValue(value2)}\` option is invalid: it cannot be a TTY with synchronous methods.`);
  }
  return { type: "uint8Array", value: bufferToUint8Array(readFileSync(targetFdNumber)), optionName };
};
var getTargetFdNumber = (value2, fdNumber) => {
  if (value2 === "inherit") {
    return fdNumber;
  }
  if (typeof value2 === "number") {
    return value2;
  }
  const standardStreamIndex = STANDARD_STREAMS.indexOf(value2);
  if (standardStreamIndex !== -1) {
    return standardStreamIndex;
  }
};
var handleNativeStreamAsync = ({ stdioItem, stdioItem: { value: value2, optionName }, fdNumber }) => {
  if (value2 === "inherit") {
    return { type: "nodeStream", value: getStandardStream(fdNumber, value2, optionName), optionName };
  }
  if (typeof value2 === "number") {
    return { type: "nodeStream", value: getStandardStream(value2, value2, optionName), optionName };
  }
  if (isStream(value2, { checkOpen: false })) {
    return { type: "nodeStream", value: value2, optionName };
  }
  return stdioItem;
};
var getStandardStream = (fdNumber, value2, optionName) => {
  const standardStream = STANDARD_STREAMS[fdNumber];
  if (standardStream === void 0) {
    throw new TypeError(`The \`${optionName}: ${value2}\` option is invalid: no such standard stream.`);
  }
  return standardStream;
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/stdio/input-option.js
init_esm_shims();
var handleInputOptions = ({ input, inputFile }, fdNumber) => fdNumber === 0 ? [
  ...handleInputOption(input),
  ...handleInputFileOption(inputFile)
] : [];
var handleInputOption = (input) => input === void 0 ? [] : [{
  type: getInputType(input),
  value: input,
  optionName: "input"
}];
var getInputType = (input) => {
  if (isReadableStream(input, { checkOpen: false })) {
    return "nodeStream";
  }
  if (typeof input === "string") {
    return "string";
  }
  if (isUint8Array(input)) {
    return "uint8Array";
  }
  throw new Error("The `input` option must be a string, a Uint8Array or a Node.js Readable stream.");
};
var handleInputFileOption = (inputFile) => inputFile === void 0 ? [] : [{
  ...getInputFileType(inputFile),
  optionName: "inputFile"
}];
var getInputFileType = (inputFile) => {
  if (isUrl(inputFile)) {
    return { type: "fileUrl", value: inputFile };
  }
  if (isFilePathString(inputFile)) {
    return { type: "filePath", value: { file: inputFile } };
  }
  throw new Error("The `inputFile` option must be a file path string or a file URL.");
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/stdio/duplicate.js
init_esm_shims();
var filterDuplicates = (stdioItems) => stdioItems.filter((stdioItemOne, indexOne) => stdioItems.every((stdioItemTwo, indexTwo) => stdioItemOne.value !== stdioItemTwo.value || indexOne >= indexTwo || stdioItemOne.type === "generator" || stdioItemOne.type === "asyncGenerator"));
var getDuplicateStream = ({ stdioItem: { type, value: value2, optionName }, direction, fileDescriptors, isSync }) => {
  const otherStdioItems = getOtherStdioItems(fileDescriptors, type);
  if (otherStdioItems.length === 0) {
    return;
  }
  if (isSync) {
    validateDuplicateStreamSync({
      otherStdioItems,
      type,
      value: value2,
      optionName,
      direction
    });
    return;
  }
  if (SPECIAL_DUPLICATE_TYPES.has(type)) {
    return getDuplicateStreamInstance({
      otherStdioItems,
      type,
      value: value2,
      optionName,
      direction
    });
  }
  if (FORBID_DUPLICATE_TYPES.has(type)) {
    validateDuplicateTransform({
      otherStdioItems,
      type,
      value: value2,
      optionName
    });
  }
};
var getOtherStdioItems = (fileDescriptors, type) => fileDescriptors.flatMap(({ direction, stdioItems }) => stdioItems.filter((stdioItem) => stdioItem.type === type).map((stdioItem) => ({ ...stdioItem, direction })));
var validateDuplicateStreamSync = ({ otherStdioItems, type, value: value2, optionName, direction }) => {
  if (SPECIAL_DUPLICATE_TYPES_SYNC.has(type)) {
    getDuplicateStreamInstance({
      otherStdioItems,
      type,
      value: value2,
      optionName,
      direction
    });
  }
};
var getDuplicateStreamInstance = ({ otherStdioItems, type, value: value2, optionName, direction }) => {
  const duplicateStdioItems = otherStdioItems.filter((stdioItem) => hasSameValue(stdioItem, value2));
  if (duplicateStdioItems.length === 0) {
    return;
  }
  const differentStdioItem = duplicateStdioItems.find((stdioItem) => stdioItem.direction !== direction);
  throwOnDuplicateStream(differentStdioItem, optionName, type);
  return direction === "output" ? duplicateStdioItems[0].stream : void 0;
};
var hasSameValue = ({ type, value: value2 }, secondValue) => {
  if (type === "filePath") {
    return value2.file === secondValue.file;
  }
  if (type === "fileUrl") {
    return value2.href === secondValue.href;
  }
  return value2 === secondValue;
};
var validateDuplicateTransform = ({ otherStdioItems, type, value: value2, optionName }) => {
  const duplicateStdioItem = otherStdioItems.find(({ value: { transform: transform3 } }) => transform3 === value2.transform);
  throwOnDuplicateStream(duplicateStdioItem, optionName, type);
};
var throwOnDuplicateStream = (stdioItem, optionName, type) => {
  if (stdioItem !== void 0) {
    throw new TypeError(`The \`${stdioItem.optionName}\` and \`${optionName}\` options must not target ${TYPE_TO_MESSAGE[type]} that is the same.`);
  }
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/stdio/handle.js
var handleStdio = (addProperties3, options, verboseInfo, isSync) => {
  const stdio = normalizeStdioOption(options, verboseInfo, isSync);
  const initialFileDescriptors = stdio.map((stdioOption, fdNumber) => getFileDescriptor({
    stdioOption,
    fdNumber,
    options,
    isSync
  }));
  const fileDescriptors = getFinalFileDescriptors({
    initialFileDescriptors,
    addProperties: addProperties3,
    options,
    isSync
  });
  options.stdio = fileDescriptors.map(({ stdioItems }) => forwardStdio(stdioItems));
  return fileDescriptors;
};
var getFileDescriptor = ({ stdioOption, fdNumber, options, isSync }) => {
  const optionName = getStreamName(fdNumber);
  const { stdioItems: initialStdioItems, isStdioArray } = initializeStdioItems({
    stdioOption,
    fdNumber,
    options,
    optionName
  });
  const direction = getStreamDirection(initialStdioItems, fdNumber, optionName);
  const stdioItems = initialStdioItems.map((stdioItem) => handleNativeStream({
    stdioItem,
    isStdioArray,
    fdNumber,
    direction,
    isSync
  }));
  const normalizedStdioItems = normalizeTransforms(stdioItems, optionName, direction, options);
  const objectMode = getFdObjectMode(normalizedStdioItems, direction);
  validateFileObjectMode(normalizedStdioItems, objectMode);
  return { direction, objectMode, stdioItems: normalizedStdioItems };
};
var initializeStdioItems = ({ stdioOption, fdNumber, options, optionName }) => {
  const values = Array.isArray(stdioOption) ? stdioOption : [stdioOption];
  const initialStdioItems = [
    ...values.map((value2) => initializeStdioItem(value2, optionName)),
    ...handleInputOptions(options, fdNumber)
  ];
  const stdioItems = filterDuplicates(initialStdioItems);
  const isStdioArray = stdioItems.length > 1;
  validateStdioArray(stdioItems, isStdioArray, optionName);
  validateStreams(stdioItems);
  return { stdioItems, isStdioArray };
};
var initializeStdioItem = (value2, optionName) => ({
  type: getStdioItemType(value2, optionName),
  value: value2,
  optionName
});
var validateStdioArray = (stdioItems, isStdioArray, optionName) => {
  if (stdioItems.length === 0) {
    throw new TypeError(`The \`${optionName}\` option must not be an empty array.`);
  }
  if (!isStdioArray) {
    return;
  }
  for (const { value: value2, optionName: optionName2 } of stdioItems) {
    if (INVALID_STDIO_ARRAY_OPTIONS.has(value2)) {
      throw new Error(`The \`${optionName2}\` option must not include \`${value2}\`.`);
    }
  }
};
var INVALID_STDIO_ARRAY_OPTIONS = /* @__PURE__ */ new Set(["ignore", "ipc"]);
var validateStreams = (stdioItems) => {
  for (const stdioItem of stdioItems) {
    validateFileStdio(stdioItem);
  }
};
var validateFileStdio = ({ type, value: value2, optionName }) => {
  if (isRegularUrl(value2)) {
    throw new TypeError(`The \`${optionName}: URL\` option must use the \`file:\` scheme.
For example, you can use the \`pathToFileURL()\` method of the \`url\` core module.`);
  }
  if (isUnknownStdioString(type, value2)) {
    throw new TypeError(`The \`${optionName}: { file: '...' }\` option must be used instead of \`${optionName}: '...'\`.`);
  }
};
var validateFileObjectMode = (stdioItems, objectMode) => {
  if (!objectMode) {
    return;
  }
  const fileStdioItem = stdioItems.find(({ type }) => FILE_TYPES.has(type));
  if (fileStdioItem !== void 0) {
    throw new TypeError(`The \`${fileStdioItem.optionName}\` option cannot use both files and transforms in objectMode.`);
  }
};
var getFinalFileDescriptors = ({ initialFileDescriptors, addProperties: addProperties3, options, isSync }) => {
  const fileDescriptors = [];
  try {
    for (const fileDescriptor of initialFileDescriptors) {
      fileDescriptors.push(getFinalFileDescriptor({
        fileDescriptor,
        fileDescriptors,
        addProperties: addProperties3,
        options,
        isSync
      }));
    }
    return fileDescriptors;
  } catch (error) {
    cleanupCustomStreams(fileDescriptors);
    throw error;
  }
};
var getFinalFileDescriptor = ({
  fileDescriptor: { direction, objectMode, stdioItems },
  fileDescriptors,
  addProperties: addProperties3,
  options,
  isSync
}) => {
  const finalStdioItems = stdioItems.map((stdioItem) => addStreamProperties({
    stdioItem,
    addProperties: addProperties3,
    direction,
    options,
    fileDescriptors,
    isSync
  }));
  return { direction, objectMode, stdioItems: finalStdioItems };
};
var addStreamProperties = ({ stdioItem, addProperties: addProperties3, direction, options, fileDescriptors, isSync }) => {
  const duplicateStream = getDuplicateStream({
    stdioItem,
    direction,
    fileDescriptors,
    isSync
  });
  if (duplicateStream !== void 0) {
    return { ...stdioItem, stream: duplicateStream };
  }
  return {
    ...stdioItem,
    ...addProperties3[direction][stdioItem.type](stdioItem, options)
  };
};
var cleanupCustomStreams = (fileDescriptors) => {
  for (const { stdioItems } of fileDescriptors) {
    for (const { stream } of stdioItems) {
      if (stream !== void 0 && !isStandardStream(stream)) {
        stream.destroy();
      }
    }
  }
};
var forwardStdio = (stdioItems) => {
  if (stdioItems.length > 1) {
    return stdioItems.some(({ value: value3 }) => value3 === "overlapped") ? "overlapped" : "pipe";
  }
  const [{ type, value: value2 }] = stdioItems;
  return type === "native" ? value2 : "pipe";
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/stdio/handle-sync.js
var handleStdioSync = (options, verboseInfo) => handleStdio(addPropertiesSync, options, verboseInfo, true);
var forbiddenIfSync = ({ type, optionName }) => {
  throwInvalidSyncValue(optionName, TYPE_TO_MESSAGE[type]);
};
var forbiddenNativeIfSync = ({ optionName, value: value2 }) => {
  if (value2 === "ipc" || value2 === "overlapped") {
    throwInvalidSyncValue(optionName, `"${value2}"`);
  }
  return {};
};
var throwInvalidSyncValue = (optionName, value2) => {
  throw new TypeError(`The \`${optionName}\` option cannot be ${value2} with synchronous methods.`);
};
var addProperties = {
  generator() {
  },
  asyncGenerator: forbiddenIfSync,
  webStream: forbiddenIfSync,
  nodeStream: forbiddenIfSync,
  webTransform: forbiddenIfSync,
  duplex: forbiddenIfSync,
  asyncIterable: forbiddenIfSync,
  native: forbiddenNativeIfSync
};
var addPropertiesSync = {
  input: {
    ...addProperties,
    fileUrl: ({ value: value2 }) => ({ contents: [bufferToUint8Array(readFileSync2(value2))] }),
    filePath: ({ value: { file } }) => ({ contents: [bufferToUint8Array(readFileSync2(file))] }),
    fileNumber: forbiddenIfSync,
    iterable: ({ value: value2 }) => ({ contents: [...value2] }),
    string: ({ value: value2 }) => ({ contents: [value2] }),
    uint8Array: ({ value: value2 }) => ({ contents: [value2] })
  },
  output: {
    ...addProperties,
    fileUrl: ({ value: value2 }) => ({ path: value2 }),
    filePath: ({ value: { file, append } }) => ({ path: file, append }),
    fileNumber: ({ value: value2 }) => ({ path: value2 }),
    iterable: forbiddenIfSync,
    string: forbiddenIfSync,
    uint8Array: forbiddenIfSync
  }
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/io/strip-newline.js
init_esm_shims();
var stripNewline = (value2, { stripFinalNewline: stripFinalNewline2 }, fdNumber) => getStripFinalNewline(stripFinalNewline2, fdNumber) && value2 !== void 0 && !Array.isArray(value2) ? stripFinalNewline(value2) : value2;
var getStripFinalNewline = (stripFinalNewline2, fdNumber) => fdNumber === "all" ? stripFinalNewline2[1] || stripFinalNewline2[2] : stripFinalNewline2[fdNumber];

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/io/input-sync.js
init_esm_shims();

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/transform/generator.js
init_esm_shims();
import { Transform, getDefaultHighWaterMark } from "node:stream";

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/transform/split.js
init_esm_shims();
var getSplitLinesGenerator = (binary, preserveNewlines, skipped, state) => binary || skipped ? void 0 : initializeSplitLines(preserveNewlines, state);
var splitLinesSync = (chunk, preserveNewlines, objectMode) => objectMode ? chunk.flatMap((item) => splitLinesItemSync(item, preserveNewlines)) : splitLinesItemSync(chunk, preserveNewlines);
var splitLinesItemSync = (chunk, preserveNewlines) => {
  const { transform: transform3, final } = initializeSplitLines(preserveNewlines, {});
  return [...transform3(chunk), ...final()];
};
var initializeSplitLines = (preserveNewlines, state) => {
  state.previousChunks = "";
  return {
    transform: splitGenerator.bind(void 0, state, preserveNewlines),
    final: linesFinal.bind(void 0, state)
  };
};
var splitGenerator = function* (state, preserveNewlines, chunk) {
  if (typeof chunk !== "string") {
    yield chunk;
    return;
  }
  let { previousChunks } = state;
  let start = -1;
  for (let end = 0; end < chunk.length; end += 1) {
    if (chunk[end] === "\n") {
      const newlineLength = getNewlineLength(chunk, end, preserveNewlines, state);
      let line = chunk.slice(start + 1, end + 1 - newlineLength);
      if (previousChunks.length > 0) {
        line = concatString(previousChunks, line);
        previousChunks = "";
      }
      yield line;
      start = end;
    }
  }
  if (start !== chunk.length - 1) {
    previousChunks = concatString(previousChunks, chunk.slice(start + 1));
  }
  state.previousChunks = previousChunks;
};
var getNewlineLength = (chunk, end, preserveNewlines, state) => {
  if (preserveNewlines) {
    return 0;
  }
  state.isWindowsNewline = end !== 0 && chunk[end - 1] === "\r";
  return state.isWindowsNewline ? 2 : 1;
};
var linesFinal = function* ({ previousChunks }) {
  if (previousChunks.length > 0) {
    yield previousChunks;
  }
};
var getAppendNewlineGenerator = ({ binary, preserveNewlines, readableObjectMode, state }) => binary || preserveNewlines || readableObjectMode ? void 0 : { transform: appendNewlineGenerator.bind(void 0, state) };
var appendNewlineGenerator = function* ({ isWindowsNewline = false }, chunk) {
  const { unixNewline, windowsNewline, LF: LF2, concatBytes } = typeof chunk === "string" ? linesStringInfo : linesUint8ArrayInfo;
  if (chunk.at(-1) === LF2) {
    yield chunk;
    return;
  }
  const newline = isWindowsNewline ? windowsNewline : unixNewline;
  yield concatBytes(chunk, newline);
};
var concatString = (firstChunk, secondChunk) => `${firstChunk}${secondChunk}`;
var linesStringInfo = {
  windowsNewline: "\r\n",
  unixNewline: "\n",
  LF: "\n",
  concatBytes: concatString
};
var concatUint8Array = (firstChunk, secondChunk) => {
  const chunk = new Uint8Array(firstChunk.length + secondChunk.length);
  chunk.set(firstChunk, 0);
  chunk.set(secondChunk, firstChunk.length);
  return chunk;
};
var linesUint8ArrayInfo = {
  windowsNewline: new Uint8Array([13, 10]),
  unixNewline: new Uint8Array([10]),
  LF: 10,
  concatBytes: concatUint8Array
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/transform/validate.js
init_esm_shims();
import { Buffer as Buffer2 } from "node:buffer";
var getValidateTransformInput = (writableObjectMode, optionName) => writableObjectMode ? void 0 : validateStringTransformInput.bind(void 0, optionName);
var validateStringTransformInput = function* (optionName, chunk) {
  if (typeof chunk !== "string" && !isUint8Array(chunk) && !Buffer2.isBuffer(chunk)) {
    throw new TypeError(`The \`${optionName}\` option's transform must use "objectMode: true" to receive as input: ${typeof chunk}.`);
  }
  yield chunk;
};
var getValidateTransformReturn = (readableObjectMode, optionName) => readableObjectMode ? validateObjectTransformReturn.bind(void 0, optionName) : validateStringTransformReturn.bind(void 0, optionName);
var validateObjectTransformReturn = function* (optionName, chunk) {
  validateEmptyReturn(optionName, chunk);
  yield chunk;
};
var validateStringTransformReturn = function* (optionName, chunk) {
  validateEmptyReturn(optionName, chunk);
  if (typeof chunk !== "string" && !isUint8Array(chunk)) {
    throw new TypeError(`The \`${optionName}\` option's function must yield a string or an Uint8Array, not ${typeof chunk}.`);
  }
  yield chunk;
};
var validateEmptyReturn = (optionName, chunk) => {
  if (chunk === null || chunk === void 0) {
    throw new TypeError(`The \`${optionName}\` option's function must not call \`yield ${chunk}\`.
Instead, \`yield\` should either be called with a value, or not be called at all. For example:
  if (condition) { yield value; }`);
  }
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/transform/encoding-transform.js
init_esm_shims();
import { Buffer as Buffer3 } from "node:buffer";
import { StringDecoder as StringDecoder2 } from "node:string_decoder";
var getEncodingTransformGenerator = (binary, encoding, skipped) => {
  if (skipped) {
    return;
  }
  if (binary) {
    return { transform: encodingUint8ArrayGenerator.bind(void 0, new TextEncoder()) };
  }
  const stringDecoder = new StringDecoder2(encoding);
  return {
    transform: encodingStringGenerator.bind(void 0, stringDecoder),
    final: encodingStringFinal.bind(void 0, stringDecoder)
  };
};
var encodingUint8ArrayGenerator = function* (textEncoder3, chunk) {
  if (Buffer3.isBuffer(chunk)) {
    yield bufferToUint8Array(chunk);
  } else if (typeof chunk === "string") {
    yield textEncoder3.encode(chunk);
  } else {
    yield chunk;
  }
};
var encodingStringGenerator = function* (stringDecoder, chunk) {
  yield isUint8Array(chunk) ? stringDecoder.write(chunk) : chunk;
};
var encodingStringFinal = function* (stringDecoder) {
  const lastChunk = stringDecoder.end();
  if (lastChunk !== "") {
    yield lastChunk;
  }
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/transform/run-async.js
init_esm_shims();
import { callbackify } from "node:util";
var pushChunks = callbackify(async (getChunks, state, getChunksArguments, transformStream) => {
  state.currentIterable = getChunks(...getChunksArguments);
  try {
    for await (const chunk of state.currentIterable) {
      transformStream.push(chunk);
    }
  } finally {
    delete state.currentIterable;
  }
});
var transformChunk = async function* (chunk, generators, index) {
  if (index === generators.length) {
    yield chunk;
    return;
  }
  const { transform: transform3 = identityGenerator } = generators[index];
  for await (const transformedChunk of transform3(chunk)) {
    yield* transformChunk(transformedChunk, generators, index + 1);
  }
};
var finalChunks = async function* (generators) {
  for (const [index, { final }] of Object.entries(generators)) {
    yield* generatorFinalChunks(final, Number(index), generators);
  }
};
var generatorFinalChunks = async function* (final, index, generators) {
  if (final === void 0) {
    return;
  }
  for await (const finalChunk of final()) {
    yield* transformChunk(finalChunk, generators, index + 1);
  }
};
var destroyTransform = callbackify(async ({ currentIterable }, error) => {
  if (currentIterable !== void 0) {
    await (error ? currentIterable.throw(error) : currentIterable.return());
    return;
  }
  if (error) {
    throw error;
  }
});
var identityGenerator = function* (chunk) {
  yield chunk;
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/transform/run-sync.js
init_esm_shims();
var pushChunksSync = (getChunksSync, getChunksArguments, transformStream, done) => {
  try {
    for (const chunk of getChunksSync(...getChunksArguments)) {
      transformStream.push(chunk);
    }
    done();
  } catch (error) {
    done(error);
  }
};
var runTransformSync = (generators, chunks) => [
  ...chunks.flatMap((chunk) => [...transformChunkSync(chunk, generators, 0)]),
  ...finalChunksSync(generators)
];
var transformChunkSync = function* (chunk, generators, index) {
  if (index === generators.length) {
    yield chunk;
    return;
  }
  const { transform: transform3 = identityGenerator2 } = generators[index];
  for (const transformedChunk of transform3(chunk)) {
    yield* transformChunkSync(transformedChunk, generators, index + 1);
  }
};
var finalChunksSync = function* (generators) {
  for (const [index, { final }] of Object.entries(generators)) {
    yield* generatorFinalChunksSync(final, Number(index), generators);
  }
};
var generatorFinalChunksSync = function* (final, index, generators) {
  if (final === void 0) {
    return;
  }
  for (const finalChunk of final()) {
    yield* transformChunkSync(finalChunk, generators, index + 1);
  }
};
var identityGenerator2 = function* (chunk) {
  yield chunk;
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/transform/generator.js
var generatorToStream = ({
  value: value2,
  value: { transform: transform3, final, writableObjectMode, readableObjectMode },
  optionName
}, { encoding }) => {
  const state = {};
  const generators = addInternalGenerators(value2, encoding, optionName);
  const transformAsync = isAsyncGenerator(transform3);
  const finalAsync = isAsyncGenerator(final);
  const transformMethod = transformAsync ? pushChunks.bind(void 0, transformChunk, state) : pushChunksSync.bind(void 0, transformChunkSync);
  const finalMethod = transformAsync || finalAsync ? pushChunks.bind(void 0, finalChunks, state) : pushChunksSync.bind(void 0, finalChunksSync);
  const destroyMethod = transformAsync || finalAsync ? destroyTransform.bind(void 0, state) : void 0;
  const stream = new Transform({
    writableObjectMode,
    writableHighWaterMark: getDefaultHighWaterMark(writableObjectMode),
    readableObjectMode,
    readableHighWaterMark: getDefaultHighWaterMark(readableObjectMode),
    transform(chunk, encoding2, done) {
      transformMethod([chunk, generators, 0], this, done);
    },
    flush(done) {
      finalMethod([generators], this, done);
    },
    destroy: destroyMethod
  });
  return { stream };
};
var runGeneratorsSync = (chunks, stdioItems, encoding, isInput) => {
  const generators = stdioItems.filter(({ type }) => type === "generator");
  const reversedGenerators = isInput ? generators.reverse() : generators;
  for (const { value: value2, optionName } of reversedGenerators) {
    const generators2 = addInternalGenerators(value2, encoding, optionName);
    chunks = runTransformSync(generators2, chunks);
  }
  return chunks;
};
var addInternalGenerators = ({ transform: transform3, final, binary, writableObjectMode, readableObjectMode, preserveNewlines }, encoding, optionName) => {
  const state = {};
  return [
    { transform: getValidateTransformInput(writableObjectMode, optionName) },
    getEncodingTransformGenerator(binary, encoding, writableObjectMode),
    getSplitLinesGenerator(binary, preserveNewlines, writableObjectMode, state),
    { transform: transform3, final },
    { transform: getValidateTransformReturn(readableObjectMode, optionName) },
    getAppendNewlineGenerator({
      binary,
      preserveNewlines,
      readableObjectMode,
      state
    })
  ].filter(Boolean);
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/io/input-sync.js
var addInputOptionsSync = (fileDescriptors, options) => {
  for (const fdNumber of getInputFdNumbers(fileDescriptors)) {
    addInputOptionSync(fileDescriptors, fdNumber, options);
  }
};
var getInputFdNumbers = (fileDescriptors) => new Set(Object.entries(fileDescriptors).filter(([, { direction }]) => direction === "input").map(([fdNumber]) => Number(fdNumber)));
var addInputOptionSync = (fileDescriptors, fdNumber, options) => {
  const { stdioItems } = fileDescriptors[fdNumber];
  const allStdioItems = stdioItems.filter(({ contents }) => contents !== void 0);
  if (allStdioItems.length === 0) {
    return;
  }
  if (fdNumber !== 0) {
    const [{ type, optionName }] = allStdioItems;
    throw new TypeError(`Only the \`stdin\` option, not \`${optionName}\`, can be ${TYPE_TO_MESSAGE[type]} with synchronous methods.`);
  }
  const allContents = allStdioItems.map(({ contents }) => contents);
  const transformedContents = allContents.map((contents) => applySingleInputGeneratorsSync(contents, stdioItems));
  options.input = joinToUint8Array(transformedContents);
};
var applySingleInputGeneratorsSync = (contents, stdioItems) => {
  const newContents = runGeneratorsSync(contents, stdioItems, "utf8", true);
  validateSerializable(newContents);
  return joinToUint8Array(newContents);
};
var validateSerializable = (newContents) => {
  const invalidItem = newContents.find((item) => typeof item !== "string" && !isUint8Array(item));
  if (invalidItem !== void 0) {
    throw new TypeError(`The \`stdin\` option is invalid: when passing objects as input, a transform must be used to serialize them to strings or Uint8Arrays: ${invalidItem}.`);
  }
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/io/output-sync.js
init_esm_shims();
import { writeFileSync, appendFileSync } from "node:fs";

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/verbose/output.js
init_esm_shims();
var shouldLogOutput = ({ stdioItems, encoding, verboseInfo, fdNumber }) => fdNumber !== "all" && isFullVerbose(verboseInfo, fdNumber) && !BINARY_ENCODINGS.has(encoding) && fdUsesVerbose(fdNumber) && (stdioItems.some(({ type, value: value2 }) => type === "native" && PIPED_STDIO_VALUES.has(value2)) || stdioItems.every(({ type }) => TRANSFORM_TYPES.has(type)));
var fdUsesVerbose = (fdNumber) => fdNumber === 1 || fdNumber === 2;
var PIPED_STDIO_VALUES = /* @__PURE__ */ new Set(["pipe", "overlapped"]);
var logLines = async (linesIterable, stream, fdNumber, verboseInfo) => {
  for await (const line of linesIterable) {
    if (!isPipingStream(stream)) {
      logLine(line, fdNumber, verboseInfo);
    }
  }
};
var logLinesSync = (linesArray, fdNumber, verboseInfo) => {
  for (const line of linesArray) {
    logLine(line, fdNumber, verboseInfo);
  }
};
var isPipingStream = (stream) => stream._readableState.pipes.length > 0;
var logLine = (line, fdNumber, verboseInfo) => {
  const verboseMessage = serializeVerboseMessage(line);
  verboseLog({
    type: "output",
    verboseMessage,
    fdNumber,
    verboseInfo
  });
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/io/output-sync.js
var transformOutputSync = ({ fileDescriptors, syncResult: { output }, options, isMaxBuffer, verboseInfo }) => {
  if (output === null) {
    return { output: Array.from({ length: 3 }) };
  }
  const state = {};
  const outputFiles = /* @__PURE__ */ new Set([]);
  const transformedOutput = output.map((result, fdNumber) => transformOutputResultSync({
    result,
    fileDescriptors,
    fdNumber,
    state,
    outputFiles,
    isMaxBuffer,
    verboseInfo
  }, options));
  return { output: transformedOutput, ...state };
};
var transformOutputResultSync = ({ result, fileDescriptors, fdNumber, state, outputFiles, isMaxBuffer, verboseInfo }, { buffer, encoding, lines, stripFinalNewline: stripFinalNewline2, maxBuffer }) => {
  if (result === null) {
    return;
  }
  const truncatedResult = truncateMaxBufferSync(result, isMaxBuffer, maxBuffer);
  const uint8ArrayResult = bufferToUint8Array(truncatedResult);
  const { stdioItems, objectMode } = fileDescriptors[fdNumber];
  const chunks = runOutputGeneratorsSync([uint8ArrayResult], stdioItems, encoding, state);
  const { serializedResult, finalResult = serializedResult } = serializeChunks({
    chunks,
    objectMode,
    encoding,
    lines,
    stripFinalNewline: stripFinalNewline2,
    fdNumber
  });
  logOutputSync({
    serializedResult,
    fdNumber,
    state,
    verboseInfo,
    encoding,
    stdioItems,
    objectMode
  });
  const returnedResult = buffer[fdNumber] ? finalResult : void 0;
  try {
    if (state.error === void 0) {
      writeToFiles(serializedResult, stdioItems, outputFiles);
    }
    return returnedResult;
  } catch (error) {
    state.error = error;
    return returnedResult;
  }
};
var runOutputGeneratorsSync = (chunks, stdioItems, encoding, state) => {
  try {
    return runGeneratorsSync(chunks, stdioItems, encoding, false);
  } catch (error) {
    state.error = error;
    return chunks;
  }
};
var serializeChunks = ({ chunks, objectMode, encoding, lines, stripFinalNewline: stripFinalNewline2, fdNumber }) => {
  if (objectMode) {
    return { serializedResult: chunks };
  }
  if (encoding === "buffer") {
    return { serializedResult: joinToUint8Array(chunks) };
  }
  const serializedResult = joinToString(chunks, encoding);
  if (lines[fdNumber]) {
    return { serializedResult, finalResult: splitLinesSync(serializedResult, !stripFinalNewline2[fdNumber], objectMode) };
  }
  return { serializedResult };
};
var logOutputSync = ({ serializedResult, fdNumber, state, verboseInfo, encoding, stdioItems, objectMode }) => {
  if (!shouldLogOutput({
    stdioItems,
    encoding,
    verboseInfo,
    fdNumber
  })) {
    return;
  }
  const linesArray = splitLinesSync(serializedResult, false, objectMode);
  try {
    logLinesSync(linesArray, fdNumber, verboseInfo);
  } catch (error) {
    state.error ??= error;
  }
};
var writeToFiles = (serializedResult, stdioItems, outputFiles) => {
  for (const { path: path9, append } of stdioItems.filter(({ type }) => FILE_TYPES.has(type))) {
    const pathString = typeof path9 === "string" ? path9 : path9.toString();
    if (append || outputFiles.has(pathString)) {
      appendFileSync(path9, serializedResult);
    } else {
      outputFiles.add(pathString);
      writeFileSync(path9, serializedResult);
    }
  }
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/resolve/all-sync.js
init_esm_shims();
var getAllSync = ([, stdout, stderr], options) => {
  if (!options.all) {
    return;
  }
  if (stdout === void 0) {
    return stderr;
  }
  if (stderr === void 0) {
    return stdout;
  }
  if (Array.isArray(stdout)) {
    return Array.isArray(stderr) ? [...stdout, ...stderr] : [...stdout, stripNewline(stderr, options, "all")];
  }
  if (Array.isArray(stderr)) {
    return [stripNewline(stdout, options, "all"), ...stderr];
  }
  if (isUint8Array(stdout) && isUint8Array(stderr)) {
    return concatUint8Arrays([stdout, stderr]);
  }
  return `${stdout}${stderr}`;
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/resolve/exit-sync.js
init_esm_shims();

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/resolve/exit-async.js
init_esm_shims();
import { once as once4 } from "node:events";
var waitForExit = async (subprocess, context) => {
  const [exitCode, signal] = await waitForExitOrError(subprocess);
  context.isForcefullyTerminated ??= false;
  return [exitCode, signal];
};
var waitForExitOrError = async (subprocess) => {
  const [spawnPayload, exitPayload] = await Promise.allSettled([
    once4(subprocess, "spawn"),
    once4(subprocess, "exit")
  ]);
  if (spawnPayload.status === "rejected") {
    return [];
  }
  return exitPayload.status === "rejected" ? waitForSubprocessExit(subprocess) : exitPayload.value;
};
var waitForSubprocessExit = async (subprocess) => {
  try {
    return await once4(subprocess, "exit");
  } catch {
    return waitForSubprocessExit(subprocess);
  }
};
var waitForSuccessfulExit = async (exitPromise) => {
  const [exitCode, signal] = await exitPromise;
  if (!isSubprocessErrorExit(exitCode, signal) && isFailedExit(exitCode, signal)) {
    throw new DiscardedError();
  }
  return [exitCode, signal];
};
var isSubprocessErrorExit = (exitCode, signal) => exitCode === void 0 && signal === void 0;
var isFailedExit = (exitCode, signal) => exitCode !== 0 || signal !== null;

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/resolve/exit-sync.js
var getExitResultSync = ({ error, status: exitCode, signal, output }, { maxBuffer }) => {
  const resultError = getResultError(error, exitCode, signal);
  const timedOut = resultError?.code === "ETIMEDOUT";
  const isMaxBuffer = isMaxBufferSync(resultError, output, maxBuffer);
  return {
    resultError,
    exitCode,
    signal,
    timedOut,
    isMaxBuffer
  };
};
var getResultError = (error, exitCode, signal) => {
  if (error !== void 0) {
    return error;
  }
  return isFailedExit(exitCode, signal) ? new DiscardedError() : void 0;
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/methods/main-sync.js
var execaCoreSync = (rawFile, rawArguments, rawOptions) => {
  const { file, commandArguments, command, escapedCommand, startTime, verboseInfo, options, fileDescriptors } = handleSyncArguments(rawFile, rawArguments, rawOptions);
  const result = spawnSubprocessSync({
    file,
    commandArguments,
    options,
    command,
    escapedCommand,
    verboseInfo,
    fileDescriptors,
    startTime
  });
  return handleResult(result, verboseInfo, options);
};
var handleSyncArguments = (rawFile, rawArguments, rawOptions) => {
  const { command, escapedCommand, startTime, verboseInfo } = handleCommand(rawFile, rawArguments, rawOptions);
  const syncOptions = normalizeSyncOptions(rawOptions);
  const { file, commandArguments, options } = normalizeOptions(rawFile, rawArguments, syncOptions);
  validateSyncOptions(options);
  const fileDescriptors = handleStdioSync(options, verboseInfo);
  return {
    file,
    commandArguments,
    command,
    escapedCommand,
    startTime,
    verboseInfo,
    options,
    fileDescriptors
  };
};
var normalizeSyncOptions = (options) => options.node && !options.ipc ? { ...options, ipc: false } : options;
var validateSyncOptions = ({ ipc, ipcInput, detached, cancelSignal }) => {
  if (ipcInput) {
    throwInvalidSyncOption("ipcInput");
  }
  if (ipc) {
    throwInvalidSyncOption("ipc: true");
  }
  if (detached) {
    throwInvalidSyncOption("detached: true");
  }
  if (cancelSignal) {
    throwInvalidSyncOption("cancelSignal");
  }
};
var throwInvalidSyncOption = (value2) => {
  throw new TypeError(`The "${value2}" option cannot be used with synchronous methods.`);
};
var spawnSubprocessSync = ({ file, commandArguments, options, command, escapedCommand, verboseInfo, fileDescriptors, startTime }) => {
  const syncResult = runSubprocessSync({
    file,
    commandArguments,
    options,
    command,
    escapedCommand,
    fileDescriptors,
    startTime
  });
  if (syncResult.failed) {
    return syncResult;
  }
  const { resultError, exitCode, signal, timedOut, isMaxBuffer } = getExitResultSync(syncResult, options);
  const { output, error = resultError } = transformOutputSync({
    fileDescriptors,
    syncResult,
    options,
    isMaxBuffer,
    verboseInfo
  });
  const stdio = output.map((stdioOutput, fdNumber) => stripNewline(stdioOutput, options, fdNumber));
  const all = stripNewline(getAllSync(output, options), options, "all");
  return getSyncResult({
    error,
    exitCode,
    signal,
    timedOut,
    isMaxBuffer,
    stdio,
    all,
    options,
    command,
    escapedCommand,
    startTime
  });
};
var runSubprocessSync = ({ file, commandArguments, options, command, escapedCommand, fileDescriptors, startTime }) => {
  try {
    addInputOptionsSync(fileDescriptors, options);
    const normalizedOptions = normalizeSpawnSyncOptions(options);
    return spawnSync(file, commandArguments, normalizedOptions);
  } catch (error) {
    return makeEarlyError({
      error,
      command,
      escapedCommand,
      fileDescriptors,
      options,
      startTime,
      isSync: true
    });
  }
};
var normalizeSpawnSyncOptions = ({ encoding, maxBuffer, ...options }) => ({ ...options, encoding: "buffer", maxBuffer: getMaxBufferSync(maxBuffer) });
var getSyncResult = ({ error, exitCode, signal, timedOut, isMaxBuffer, stdio, all, options, command, escapedCommand, startTime }) => error === void 0 ? makeSuccessResult({
  command,
  escapedCommand,
  stdio,
  all,
  ipcOutput: [],
  options,
  startTime
}) : makeError({
  error,
  command,
  escapedCommand,
  timedOut,
  isCanceled: false,
  isGracefullyCanceled: false,
  isMaxBuffer,
  isForcefullyTerminated: false,
  exitCode,
  signal,
  stdio,
  all,
  ipcOutput: [],
  options,
  startTime,
  isSync: true
});

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/methods/main-async.js
init_esm_shims();
import { setMaxListeners } from "node:events";
import { spawn } from "node:child_process";

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/ipc/methods.js
init_esm_shims();
import process8 from "node:process";

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/ipc/get-one.js
init_esm_shims();
import { once as once5, on as on2 } from "node:events";
var getOneMessage = ({ anyProcess, channel, isSubprocess, ipc }, { reference = true, filter } = {}) => {
  validateIpcMethod({
    methodName: "getOneMessage",
    isSubprocess,
    ipc,
    isConnected: isConnected(anyProcess)
  });
  return getOneMessageAsync({
    anyProcess,
    channel,
    isSubprocess,
    filter,
    reference
  });
};
var getOneMessageAsync = async ({ anyProcess, channel, isSubprocess, filter, reference }) => {
  addReference(channel, reference);
  const ipcEmitter = getIpcEmitter(anyProcess, channel, isSubprocess);
  const controller = new AbortController();
  try {
    return await Promise.race([
      getMessage(ipcEmitter, filter, controller),
      throwOnDisconnect2(ipcEmitter, isSubprocess, controller),
      throwOnStrictError(ipcEmitter, isSubprocess, controller)
    ]);
  } catch (error) {
    disconnect(anyProcess);
    throw error;
  } finally {
    controller.abort();
    removeReference(channel, reference);
  }
};
var getMessage = async (ipcEmitter, filter, { signal }) => {
  if (filter === void 0) {
    const [message] = await once5(ipcEmitter, "message", { signal });
    return message;
  }
  for await (const [message] of on2(ipcEmitter, "message", { signal })) {
    if (filter(message)) {
      return message;
    }
  }
};
var throwOnDisconnect2 = async (ipcEmitter, isSubprocess, { signal }) => {
  await once5(ipcEmitter, "disconnect", { signal });
  throwOnEarlyDisconnect(isSubprocess);
};
var throwOnStrictError = async (ipcEmitter, isSubprocess, { signal }) => {
  const [error] = await once5(ipcEmitter, "strict:error", { signal });
  throw getStrictResponseError(error, isSubprocess);
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/ipc/get-each.js
init_esm_shims();
import { once as once6, on as on3 } from "node:events";
var getEachMessage = ({ anyProcess, channel, isSubprocess, ipc }, { reference = true } = {}) => loopOnMessages({
  anyProcess,
  channel,
  isSubprocess,
  ipc,
  shouldAwait: !isSubprocess,
  reference
});
var loopOnMessages = ({ anyProcess, channel, isSubprocess, ipc, shouldAwait, reference }) => {
  validateIpcMethod({
    methodName: "getEachMessage",
    isSubprocess,
    ipc,
    isConnected: isConnected(anyProcess)
  });
  addReference(channel, reference);
  const ipcEmitter = getIpcEmitter(anyProcess, channel, isSubprocess);
  const controller = new AbortController();
  const state = {};
  stopOnDisconnect(anyProcess, ipcEmitter, controller);
  abortOnStrictError({
    ipcEmitter,
    isSubprocess,
    controller,
    state
  });
  return iterateOnMessages({
    anyProcess,
    channel,
    ipcEmitter,
    isSubprocess,
    shouldAwait,
    controller,
    state,
    reference
  });
};
var stopOnDisconnect = async (anyProcess, ipcEmitter, controller) => {
  try {
    await once6(ipcEmitter, "disconnect", { signal: controller.signal });
    controller.abort();
  } catch {
  }
};
var abortOnStrictError = async ({ ipcEmitter, isSubprocess, controller, state }) => {
  try {
    const [error] = await once6(ipcEmitter, "strict:error", { signal: controller.signal });
    state.error = getStrictResponseError(error, isSubprocess);
    controller.abort();
  } catch {
  }
};
var iterateOnMessages = async function* ({ anyProcess, channel, ipcEmitter, isSubprocess, shouldAwait, controller, state, reference }) {
  try {
    for await (const [message] of on3(ipcEmitter, "message", { signal: controller.signal })) {
      throwIfStrictError(state);
      yield message;
    }
  } catch {
    throwIfStrictError(state);
  } finally {
    controller.abort();
    removeReference(channel, reference);
    if (!isSubprocess) {
      disconnect(anyProcess);
    }
    if (shouldAwait) {
      await anyProcess;
    }
  }
};
var throwIfStrictError = ({ error }) => {
  if (error) {
    throw error;
  }
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/ipc/methods.js
var addIpcMethods = (subprocess, { ipc }) => {
  Object.assign(subprocess, getIpcMethods(subprocess, false, ipc));
};
var getIpcExport = () => {
  const anyProcess = process8;
  const isSubprocess = true;
  const ipc = process8.channel !== void 0;
  return {
    ...getIpcMethods(anyProcess, isSubprocess, ipc),
    getCancelSignal: getCancelSignal.bind(void 0, {
      anyProcess,
      channel: anyProcess.channel,
      isSubprocess,
      ipc
    })
  };
};
var getIpcMethods = (anyProcess, isSubprocess, ipc) => ({
  sendMessage: sendMessage.bind(void 0, {
    anyProcess,
    channel: anyProcess.channel,
    isSubprocess,
    ipc
  }),
  getOneMessage: getOneMessage.bind(void 0, {
    anyProcess,
    channel: anyProcess.channel,
    isSubprocess,
    ipc
  }),
  getEachMessage: getEachMessage.bind(void 0, {
    anyProcess,
    channel: anyProcess.channel,
    isSubprocess,
    ipc
  })
});

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/return/early-error.js
init_esm_shims();
import { ChildProcess as ChildProcess2 } from "node:child_process";
import {
  PassThrough,
  Readable,
  Writable,
  Duplex
} from "node:stream";
var handleEarlyError = ({ error, command, escapedCommand, fileDescriptors, options, startTime, verboseInfo }) => {
  cleanupCustomStreams(fileDescriptors);
  const subprocess = new ChildProcess2();
  createDummyStreams(subprocess, fileDescriptors);
  Object.assign(subprocess, { readable, writable, duplex });
  const earlyError = makeEarlyError({
    error,
    command,
    escapedCommand,
    fileDescriptors,
    options,
    startTime,
    isSync: false
  });
  const promise = handleDummyPromise(earlyError, verboseInfo, options);
  return { subprocess, promise };
};
var createDummyStreams = (subprocess, fileDescriptors) => {
  const stdin = createDummyStream();
  const stdout = createDummyStream();
  const stderr = createDummyStream();
  const extraStdio = Array.from({ length: fileDescriptors.length - 3 }, createDummyStream);
  const all = createDummyStream();
  const stdio = [stdin, stdout, stderr, ...extraStdio];
  Object.assign(subprocess, {
    stdin,
    stdout,
    stderr,
    all,
    stdio
  });
};
var createDummyStream = () => {
  const stream = new PassThrough();
  stream.end();
  return stream;
};
var readable = () => new Readable({ read() {
} });
var writable = () => new Writable({ write() {
} });
var duplex = () => new Duplex({ read() {
}, write() {
} });
var handleDummyPromise = async (error, verboseInfo, options) => handleResult(error, verboseInfo, options);

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/stdio/handle-async.js
init_esm_shims();
import { createReadStream, createWriteStream } from "node:fs";
import { Buffer as Buffer4 } from "node:buffer";
import { Readable as Readable2, Writable as Writable2, Duplex as Duplex2 } from "node:stream";
var handleStdioAsync = (options, verboseInfo) => handleStdio(addPropertiesAsync, options, verboseInfo, false);
var forbiddenIfAsync = ({ type, optionName }) => {
  throw new TypeError(`The \`${optionName}\` option cannot be ${TYPE_TO_MESSAGE[type]}.`);
};
var addProperties2 = {
  fileNumber: forbiddenIfAsync,
  generator: generatorToStream,
  asyncGenerator: generatorToStream,
  nodeStream: ({ value: value2 }) => ({ stream: value2 }),
  webTransform({ value: { transform: transform3, writableObjectMode, readableObjectMode } }) {
    const objectMode = writableObjectMode || readableObjectMode;
    const stream = Duplex2.fromWeb(transform3, { objectMode });
    return { stream };
  },
  duplex: ({ value: { transform: transform3 } }) => ({ stream: transform3 }),
  native() {
  }
};
var addPropertiesAsync = {
  input: {
    ...addProperties2,
    fileUrl: ({ value: value2 }) => ({ stream: createReadStream(value2) }),
    filePath: ({ value: { file } }) => ({ stream: createReadStream(file) }),
    webStream: ({ value: value2 }) => ({ stream: Readable2.fromWeb(value2) }),
    iterable: ({ value: value2 }) => ({ stream: Readable2.from(value2) }),
    asyncIterable: ({ value: value2 }) => ({ stream: Readable2.from(value2) }),
    string: ({ value: value2 }) => ({ stream: Readable2.from(value2) }),
    uint8Array: ({ value: value2 }) => ({ stream: Readable2.from(Buffer4.from(value2)) })
  },
  output: {
    ...addProperties2,
    fileUrl: ({ value: value2 }) => ({ stream: createWriteStream(value2) }),
    filePath: ({ value: { file, append } }) => ({ stream: createWriteStream(file, append ? { flags: "a" } : {}) }),
    webStream: ({ value: value2 }) => ({ stream: Writable2.fromWeb(value2) }),
    iterable: forbiddenIfAsync,
    asyncIterable: forbiddenIfAsync,
    string: forbiddenIfAsync,
    uint8Array: forbiddenIfAsync
  }
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/io/output-async.js
init_esm_shims();

// ../../.yarn/cache/@sindresorhus-merge-streams-npm-4.0.0-ac54b7bcc7-482ee54362.zip/node_modules/@sindresorhus/merge-streams/index.js
init_esm_shims();
import { on as on4, once as once7 } from "node:events";
import { PassThrough as PassThroughStream, getDefaultHighWaterMark as getDefaultHighWaterMark2 } from "node:stream";
import { finished as finished2 } from "node:stream/promises";
function mergeStreams(streams) {
  if (!Array.isArray(streams)) {
    throw new TypeError(`Expected an array, got \`${typeof streams}\`.`);
  }
  for (const stream of streams) {
    validateStream(stream);
  }
  const objectMode = streams.some(({ readableObjectMode }) => readableObjectMode);
  const highWaterMark = getHighWaterMark(streams, objectMode);
  const passThroughStream = new MergedStream({
    objectMode,
    writableHighWaterMark: highWaterMark,
    readableHighWaterMark: highWaterMark
  });
  for (const stream of streams) {
    passThroughStream.add(stream);
  }
  return passThroughStream;
}
var getHighWaterMark = (streams, objectMode) => {
  if (streams.length === 0) {
    return getDefaultHighWaterMark2(objectMode);
  }
  const highWaterMarks = streams.filter(({ readableObjectMode }) => readableObjectMode === objectMode).map(({ readableHighWaterMark }) => readableHighWaterMark);
  return Math.max(...highWaterMarks);
};
var MergedStream = class extends PassThroughStream {
  #streams = /* @__PURE__ */ new Set([]);
  #ended = /* @__PURE__ */ new Set([]);
  #aborted = /* @__PURE__ */ new Set([]);
  #onFinished;
  #unpipeEvent = Symbol("unpipe");
  #streamPromises = /* @__PURE__ */ new WeakMap();
  add(stream) {
    validateStream(stream);
    if (this.#streams.has(stream)) {
      return;
    }
    this.#streams.add(stream);
    this.#onFinished ??= onMergedStreamFinished(this, this.#streams, this.#unpipeEvent);
    const streamPromise = endWhenStreamsDone({
      passThroughStream: this,
      stream,
      streams: this.#streams,
      ended: this.#ended,
      aborted: this.#aborted,
      onFinished: this.#onFinished,
      unpipeEvent: this.#unpipeEvent
    });
    this.#streamPromises.set(stream, streamPromise);
    stream.pipe(this, { end: false });
  }
  async remove(stream) {
    validateStream(stream);
    if (!this.#streams.has(stream)) {
      return false;
    }
    const streamPromise = this.#streamPromises.get(stream);
    if (streamPromise === void 0) {
      return false;
    }
    this.#streamPromises.delete(stream);
    stream.unpipe(this);
    await streamPromise;
    return true;
  }
};
var onMergedStreamFinished = async (passThroughStream, streams, unpipeEvent) => {
  updateMaxListeners(passThroughStream, PASSTHROUGH_LISTENERS_COUNT);
  const controller = new AbortController();
  try {
    await Promise.race([
      onMergedStreamEnd(passThroughStream, controller),
      onInputStreamsUnpipe(passThroughStream, streams, unpipeEvent, controller)
    ]);
  } finally {
    controller.abort();
    updateMaxListeners(passThroughStream, -PASSTHROUGH_LISTENERS_COUNT);
  }
};
var onMergedStreamEnd = async (passThroughStream, { signal }) => {
  try {
    await finished2(passThroughStream, { signal, cleanup: true });
  } catch (error) {
    errorOrAbortStream(passThroughStream, error);
    throw error;
  }
};
var onInputStreamsUnpipe = async (passThroughStream, streams, unpipeEvent, { signal }) => {
  for await (const [unpipedStream] of on4(passThroughStream, "unpipe", { signal })) {
    if (streams.has(unpipedStream)) {
      unpipedStream.emit(unpipeEvent);
    }
  }
};
var validateStream = (stream) => {
  if (typeof stream?.pipe !== "function") {
    throw new TypeError(`Expected a readable stream, got: \`${typeof stream}\`.`);
  }
};
var endWhenStreamsDone = async ({ passThroughStream, stream, streams, ended, aborted: aborted2, onFinished, unpipeEvent }) => {
  updateMaxListeners(passThroughStream, PASSTHROUGH_LISTENERS_PER_STREAM);
  const controller = new AbortController();
  try {
    await Promise.race([
      afterMergedStreamFinished(onFinished, stream, controller),
      onInputStreamEnd({
        passThroughStream,
        stream,
        streams,
        ended,
        aborted: aborted2,
        controller
      }),
      onInputStreamUnpipe({
        stream,
        streams,
        ended,
        aborted: aborted2,
        unpipeEvent,
        controller
      })
    ]);
  } finally {
    controller.abort();
    updateMaxListeners(passThroughStream, -PASSTHROUGH_LISTENERS_PER_STREAM);
  }
  if (streams.size > 0 && streams.size === ended.size + aborted2.size) {
    if (ended.size === 0 && aborted2.size > 0) {
      abortStream(passThroughStream);
    } else {
      endStream(passThroughStream);
    }
  }
};
var afterMergedStreamFinished = async (onFinished, stream, { signal }) => {
  try {
    await onFinished;
    if (!signal.aborted) {
      abortStream(stream);
    }
  } catch (error) {
    if (!signal.aborted) {
      errorOrAbortStream(stream, error);
    }
  }
};
var onInputStreamEnd = async ({ passThroughStream, stream, streams, ended, aborted: aborted2, controller: { signal } }) => {
  try {
    await finished2(stream, {
      signal,
      cleanup: true,
      readable: true,
      writable: false
    });
    if (streams.has(stream)) {
      ended.add(stream);
    }
  } catch (error) {
    if (signal.aborted || !streams.has(stream)) {
      return;
    }
    if (isAbortError(error)) {
      aborted2.add(stream);
    } else {
      errorStream(passThroughStream, error);
    }
  }
};
var onInputStreamUnpipe = async ({ stream, streams, ended, aborted: aborted2, unpipeEvent, controller: { signal } }) => {
  await once7(stream, unpipeEvent, { signal });
  if (!stream.readable) {
    return once7(signal, "abort", { signal });
  }
  streams.delete(stream);
  ended.delete(stream);
  aborted2.delete(stream);
};
var endStream = (stream) => {
  if (stream.writable) {
    stream.end();
  }
};
var errorOrAbortStream = (stream, error) => {
  if (isAbortError(error)) {
    abortStream(stream);
  } else {
    errorStream(stream, error);
  }
};
var isAbortError = (error) => error?.code === "ERR_STREAM_PREMATURE_CLOSE";
var abortStream = (stream) => {
  if (stream.readable || stream.writable) {
    stream.destroy();
  }
};
var errorStream = (stream, error) => {
  if (!stream.destroyed) {
    stream.once("error", noop2);
    stream.destroy(error);
  }
};
var noop2 = () => {
};
var updateMaxListeners = (passThroughStream, increment2) => {
  const maxListeners = passThroughStream.getMaxListeners();
  if (maxListeners !== 0 && maxListeners !== Number.POSITIVE_INFINITY) {
    passThroughStream.setMaxListeners(maxListeners + increment2);
  }
};
var PASSTHROUGH_LISTENERS_COUNT = 2;
var PASSTHROUGH_LISTENERS_PER_STREAM = 1;

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/io/pipeline.js
init_esm_shims();
import { finished as finished3 } from "node:stream/promises";
var pipeStreams = (source, destination) => {
  source.pipe(destination);
  onSourceFinish(source, destination);
  onDestinationFinish(source, destination);
};
var onSourceFinish = async (source, destination) => {
  if (isStandardStream(source) || isStandardStream(destination)) {
    return;
  }
  try {
    await finished3(source, { cleanup: true, readable: true, writable: false });
  } catch {
  }
  endDestinationStream(destination);
};
var endDestinationStream = (destination) => {
  if (destination.writable) {
    destination.end();
  }
};
var onDestinationFinish = async (source, destination) => {
  if (isStandardStream(source) || isStandardStream(destination)) {
    return;
  }
  try {
    await finished3(destination, { cleanup: true, readable: false, writable: true });
  } catch {
  }
  abortSourceStream(source);
};
var abortSourceStream = (source) => {
  if (source.readable) {
    source.destroy();
  }
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/io/output-async.js
var pipeOutputAsync = (subprocess, fileDescriptors, controller) => {
  const pipeGroups = /* @__PURE__ */ new Map();
  for (const [fdNumber, { stdioItems, direction }] of Object.entries(fileDescriptors)) {
    for (const { stream } of stdioItems.filter(({ type }) => TRANSFORM_TYPES.has(type))) {
      pipeTransform(subprocess, stream, direction, fdNumber);
    }
    for (const { stream } of stdioItems.filter(({ type }) => !TRANSFORM_TYPES.has(type))) {
      pipeStdioItem({
        subprocess,
        stream,
        direction,
        fdNumber,
        pipeGroups,
        controller
      });
    }
  }
  for (const [outputStream, inputStreams] of pipeGroups.entries()) {
    const inputStream = inputStreams.length === 1 ? inputStreams[0] : mergeStreams(inputStreams);
    pipeStreams(inputStream, outputStream);
  }
};
var pipeTransform = (subprocess, stream, direction, fdNumber) => {
  if (direction === "output") {
    pipeStreams(subprocess.stdio[fdNumber], stream);
  } else {
    pipeStreams(stream, subprocess.stdio[fdNumber]);
  }
  const streamProperty = SUBPROCESS_STREAM_PROPERTIES[fdNumber];
  if (streamProperty !== void 0) {
    subprocess[streamProperty] = stream;
  }
  subprocess.stdio[fdNumber] = stream;
};
var SUBPROCESS_STREAM_PROPERTIES = ["stdin", "stdout", "stderr"];
var pipeStdioItem = ({ subprocess, stream, direction, fdNumber, pipeGroups, controller }) => {
  if (stream === void 0) {
    return;
  }
  setStandardStreamMaxListeners(stream, controller);
  const [inputStream, outputStream] = direction === "output" ? [stream, subprocess.stdio[fdNumber]] : [subprocess.stdio[fdNumber], stream];
  const outputStreams = pipeGroups.get(inputStream) ?? [];
  pipeGroups.set(inputStream, [...outputStreams, outputStream]);
};
var setStandardStreamMaxListeners = (stream, { signal }) => {
  if (isStandardStream(stream)) {
    incrementMaxListeners(stream, MAX_LISTENERS_INCREMENT, signal);
  }
};
var MAX_LISTENERS_INCREMENT = 2;

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/terminate/cleanup.js
init_esm_shims();
import { addAbortListener as addAbortListener2 } from "node:events";

// ../../.yarn/cache/signal-exit-npm-4.1.0-abb7bd2c45-41602dce54.zip/node_modules/signal-exit/dist/mjs/index.js
init_esm_shims();

// ../../.yarn/cache/signal-exit-npm-4.1.0-abb7bd2c45-41602dce54.zip/node_modules/signal-exit/dist/mjs/signals.js
init_esm_shims();
var signals = [];
signals.push("SIGHUP", "SIGINT", "SIGTERM");
if (process.platform !== "win32") {
  signals.push(
    "SIGALRM",
    "SIGABRT",
    "SIGVTALRM",
    "SIGXCPU",
    "SIGXFSZ",
    "SIGUSR2",
    "SIGTRAP",
    "SIGSYS",
    "SIGQUIT",
    "SIGIOT"
    // should detect profiler and enable/disable accordingly.
    // see #21
    // 'SIGPROF'
  );
}
if (process.platform === "linux") {
  signals.push("SIGIO", "SIGPOLL", "SIGPWR", "SIGSTKFLT");
}

// ../../.yarn/cache/signal-exit-npm-4.1.0-abb7bd2c45-41602dce54.zip/node_modules/signal-exit/dist/mjs/index.js
var processOk = (process10) => !!process10 && typeof process10 === "object" && typeof process10.removeListener === "function" && typeof process10.emit === "function" && typeof process10.reallyExit === "function" && typeof process10.listeners === "function" && typeof process10.kill === "function" && typeof process10.pid === "number" && typeof process10.on === "function";
var kExitEmitter = Symbol.for("signal-exit emitter");
var global2 = globalThis;
var ObjectDefineProperty = Object.defineProperty.bind(Object);
var Emitter = class {
  emitted = {
    afterExit: false,
    exit: false
  };
  listeners = {
    afterExit: [],
    exit: []
  };
  count = 0;
  id = Math.random();
  constructor() {
    if (global2[kExitEmitter]) {
      return global2[kExitEmitter];
    }
    ObjectDefineProperty(global2, kExitEmitter, {
      value: this,
      writable: false,
      enumerable: false,
      configurable: false
    });
  }
  on(ev, fn) {
    this.listeners[ev].push(fn);
  }
  removeListener(ev, fn) {
    const list = this.listeners[ev];
    const i2 = list.indexOf(fn);
    if (i2 === -1) {
      return;
    }
    if (i2 === 0 && list.length === 1) {
      list.length = 0;
    } else {
      list.splice(i2, 1);
    }
  }
  emit(ev, code, signal) {
    if (this.emitted[ev]) {
      return false;
    }
    this.emitted[ev] = true;
    let ret = false;
    for (const fn of this.listeners[ev]) {
      ret = fn(code, signal) === true || ret;
    }
    if (ev === "exit") {
      ret = this.emit("afterExit", code, signal) || ret;
    }
    return ret;
  }
};
var SignalExitBase = class {
};
var signalExitWrap = (handler) => {
  return {
    onExit(cb, opts) {
      return handler.onExit(cb, opts);
    },
    load() {
      return handler.load();
    },
    unload() {
      return handler.unload();
    }
  };
};
var SignalExitFallback = class extends SignalExitBase {
  onExit() {
    return () => {
    };
  }
  load() {
  }
  unload() {
  }
};
var SignalExit = class extends SignalExitBase {
  // "SIGHUP" throws an `ENOSYS` error on Windows,
  // so use a supported signal instead
  /* c8 ignore start */
  #hupSig = process9.platform === "win32" ? "SIGINT" : "SIGHUP";
  /* c8 ignore stop */
  #emitter = new Emitter();
  #process;
  #originalProcessEmit;
  #originalProcessReallyExit;
  #sigListeners = {};
  #loaded = false;
  constructor(process10) {
    super();
    this.#process = process10;
    this.#sigListeners = {};
    for (const sig of signals) {
      this.#sigListeners[sig] = () => {
        const listeners = this.#process.listeners(sig);
        let { count: count2 } = this.#emitter;
        const p = process10;
        if (typeof p.__signal_exit_emitter__ === "object" && typeof p.__signal_exit_emitter__.count === "number") {
          count2 += p.__signal_exit_emitter__.count;
        }
        if (listeners.length === count2) {
          this.unload();
          const ret = this.#emitter.emit("exit", null, sig);
          const s = sig === "SIGHUP" ? this.#hupSig : sig;
          if (!ret)
            process10.kill(process10.pid, s);
        }
      };
    }
    this.#originalProcessReallyExit = process10.reallyExit;
    this.#originalProcessEmit = process10.emit;
  }
  onExit(cb, opts) {
    if (!processOk(this.#process)) {
      return () => {
      };
    }
    if (this.#loaded === false) {
      this.load();
    }
    const ev = opts?.alwaysLast ? "afterExit" : "exit";
    this.#emitter.on(ev, cb);
    return () => {
      this.#emitter.removeListener(ev, cb);
      if (this.#emitter.listeners["exit"].length === 0 && this.#emitter.listeners["afterExit"].length === 0) {
        this.unload();
      }
    };
  }
  load() {
    if (this.#loaded) {
      return;
    }
    this.#loaded = true;
    this.#emitter.count += 1;
    for (const sig of signals) {
      try {
        const fn = this.#sigListeners[sig];
        if (fn)
          this.#process.on(sig, fn);
      } catch (_2) {
      }
    }
    this.#process.emit = (ev, ...a2) => {
      return this.#processEmit(ev, ...a2);
    };
    this.#process.reallyExit = (code) => {
      return this.#processReallyExit(code);
    };
  }
  unload() {
    if (!this.#loaded) {
      return;
    }
    this.#loaded = false;
    signals.forEach((sig) => {
      const listener = this.#sigListeners[sig];
      if (!listener) {
        throw new Error("Listener not defined for signal: " + sig);
      }
      try {
        this.#process.removeListener(sig, listener);
      } catch (_2) {
      }
    });
    this.#process.emit = this.#originalProcessEmit;
    this.#process.reallyExit = this.#originalProcessReallyExit;
    this.#emitter.count -= 1;
  }
  #processReallyExit(code) {
    if (!processOk(this.#process)) {
      return 0;
    }
    this.#process.exitCode = code || 0;
    this.#emitter.emit("exit", this.#process.exitCode, null);
    return this.#originalProcessReallyExit.call(this.#process, this.#process.exitCode);
  }
  #processEmit(ev, ...args) {
    const og = this.#originalProcessEmit;
    if (ev === "exit" && processOk(this.#process)) {
      if (typeof args[0] === "number") {
        this.#process.exitCode = args[0];
      }
      const ret = og.call(this.#process, ev, ...args);
      this.#emitter.emit("exit", this.#process.exitCode, null);
      return ret;
    } else {
      return og.call(this.#process, ev, ...args);
    }
  }
};
var process9 = globalThis.process;
var {
  /**
   * Called when the process is exiting, whether via signal, explicit
   * exit, or running out of stuff to do.
   *
   * If the global process object is not suitable for instrumentation,
   * then this will be a no-op.
   *
   * Returns a function that may be used to unload signal-exit.
   */
  onExit,
  /**
   * Load the listeners.  Likely you never need to call this, unless
   * doing a rather deep integration with signal-exit functionality.
   * Mostly exposed for the benefit of testing.
   *
   * @internal
   */
  load,
  /**
   * Unload the listeners.  Likely you never need to call this, unless
   * doing a rather deep integration with signal-exit functionality.
   * Mostly exposed for the benefit of testing.
   *
   * @internal
   */
  unload
} = signalExitWrap(processOk(process9) ? new SignalExit(process9) : new SignalExitFallback());

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/terminate/cleanup.js
var cleanupOnExit = (subprocess, { cleanup, detached }, { signal }) => {
  if (!cleanup || detached) {
    return;
  }
  const removeExitHandler = onExit(() => {
    subprocess.kill();
  });
  addAbortListener2(signal, () => {
    removeExitHandler();
  });
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/pipe/setup.js
init_esm_shims();

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/pipe/pipe-arguments.js
init_esm_shims();
var normalizePipeArguments = ({ source, sourcePromise, boundOptions, createNested }, ...pipeArguments) => {
  const startTime = getStartTime();
  const {
    destination,
    destinationStream,
    destinationError,
    from,
    unpipeSignal
  } = getDestinationStream(boundOptions, createNested, pipeArguments);
  const { sourceStream, sourceError } = getSourceStream(source, from);
  const { options: sourceOptions, fileDescriptors } = SUBPROCESS_OPTIONS.get(source);
  return {
    sourcePromise,
    sourceStream,
    sourceOptions,
    sourceError,
    destination,
    destinationStream,
    destinationError,
    unpipeSignal,
    fileDescriptors,
    startTime
  };
};
var getDestinationStream = (boundOptions, createNested, pipeArguments) => {
  try {
    const {
      destination,
      pipeOptions: { from, to, unpipeSignal } = {}
    } = getDestination(boundOptions, createNested, ...pipeArguments);
    const destinationStream = getToStream(destination, to);
    return {
      destination,
      destinationStream,
      from,
      unpipeSignal
    };
  } catch (error) {
    return { destinationError: error };
  }
};
var getDestination = (boundOptions, createNested, firstArgument, ...pipeArguments) => {
  if (Array.isArray(firstArgument)) {
    const destination = createNested(mapDestinationArguments, boundOptions)(firstArgument, ...pipeArguments);
    return { destination, pipeOptions: boundOptions };
  }
  if (typeof firstArgument === "string" || firstArgument instanceof URL || isDenoExecPath(firstArgument)) {
    if (Object.keys(boundOptions).length > 0) {
      throw new TypeError('Please use .pipe("file", ..., options) or .pipe(execa("file", ..., options)) instead of .pipe(options)("file", ...).');
    }
    const [rawFile, rawArguments, rawOptions] = normalizeParameters(firstArgument, ...pipeArguments);
    const destination = createNested(mapDestinationArguments)(rawFile, rawArguments, rawOptions);
    return { destination, pipeOptions: rawOptions };
  }
  if (SUBPROCESS_OPTIONS.has(firstArgument)) {
    if (Object.keys(boundOptions).length > 0) {
      throw new TypeError("Please use .pipe(options)`command` or .pipe($(options)`command`) instead of .pipe(options)($`command`).");
    }
    return { destination: firstArgument, pipeOptions: pipeArguments[0] };
  }
  throw new TypeError(`The first argument must be a template string, an options object, or an Execa subprocess: ${firstArgument}`);
};
var mapDestinationArguments = ({ options }) => ({ options: { ...options, stdin: "pipe", piped: true } });
var getSourceStream = (source, from) => {
  try {
    const sourceStream = getFromStream(source, from);
    return { sourceStream };
  } catch (error) {
    return { sourceError: error };
  }
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/pipe/throw.js
init_esm_shims();
var handlePipeArgumentsError = ({
  sourceStream,
  sourceError,
  destinationStream,
  destinationError,
  fileDescriptors,
  sourceOptions,
  startTime
}) => {
  const error = getPipeArgumentsError({
    sourceStream,
    sourceError,
    destinationStream,
    destinationError
  });
  if (error !== void 0) {
    throw createNonCommandError({
      error,
      fileDescriptors,
      sourceOptions,
      startTime
    });
  }
};
var getPipeArgumentsError = ({ sourceStream, sourceError, destinationStream, destinationError }) => {
  if (sourceError !== void 0 && destinationError !== void 0) {
    return destinationError;
  }
  if (destinationError !== void 0) {
    abortSourceStream(sourceStream);
    return destinationError;
  }
  if (sourceError !== void 0) {
    endDestinationStream(destinationStream);
    return sourceError;
  }
};
var createNonCommandError = ({ error, fileDescriptors, sourceOptions, startTime }) => makeEarlyError({
  error,
  command: PIPE_COMMAND_MESSAGE,
  escapedCommand: PIPE_COMMAND_MESSAGE,
  fileDescriptors,
  options: sourceOptions,
  startTime,
  isSync: false
});
var PIPE_COMMAND_MESSAGE = "source.pipe(destination)";

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/pipe/sequence.js
init_esm_shims();
var waitForBothSubprocesses = async (subprocessPromises) => {
  const [
    { status: sourceStatus, reason: sourceReason, value: sourceResult = sourceReason },
    { status: destinationStatus, reason: destinationReason, value: destinationResult = destinationReason }
  ] = await subprocessPromises;
  if (!destinationResult.pipedFrom.includes(sourceResult)) {
    destinationResult.pipedFrom.push(sourceResult);
  }
  if (destinationStatus === "rejected") {
    throw destinationResult;
  }
  if (sourceStatus === "rejected") {
    throw sourceResult;
  }
  return destinationResult;
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/pipe/streaming.js
init_esm_shims();
import { finished as finished4 } from "node:stream/promises";
var pipeSubprocessStream = (sourceStream, destinationStream, maxListenersController) => {
  const mergedStream = MERGED_STREAMS.has(destinationStream) ? pipeMoreSubprocessStream(sourceStream, destinationStream) : pipeFirstSubprocessStream(sourceStream, destinationStream);
  incrementMaxListeners(sourceStream, SOURCE_LISTENERS_PER_PIPE, maxListenersController.signal);
  incrementMaxListeners(destinationStream, DESTINATION_LISTENERS_PER_PIPE, maxListenersController.signal);
  cleanupMergedStreamsMap(destinationStream);
  return mergedStream;
};
var pipeFirstSubprocessStream = (sourceStream, destinationStream) => {
  const mergedStream = mergeStreams([sourceStream]);
  pipeStreams(mergedStream, destinationStream);
  MERGED_STREAMS.set(destinationStream, mergedStream);
  return mergedStream;
};
var pipeMoreSubprocessStream = (sourceStream, destinationStream) => {
  const mergedStream = MERGED_STREAMS.get(destinationStream);
  mergedStream.add(sourceStream);
  return mergedStream;
};
var cleanupMergedStreamsMap = async (destinationStream) => {
  try {
    await finished4(destinationStream, { cleanup: true, readable: false, writable: true });
  } catch {
  }
  MERGED_STREAMS.delete(destinationStream);
};
var MERGED_STREAMS = /* @__PURE__ */ new WeakMap();
var SOURCE_LISTENERS_PER_PIPE = 2;
var DESTINATION_LISTENERS_PER_PIPE = 1;

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/pipe/abort.js
init_esm_shims();
import { aborted } from "node:util";
var unpipeOnAbort = (unpipeSignal, unpipeContext) => unpipeSignal === void 0 ? [] : [unpipeOnSignalAbort(unpipeSignal, unpipeContext)];
var unpipeOnSignalAbort = async (unpipeSignal, { sourceStream, mergedStream, fileDescriptors, sourceOptions, startTime }) => {
  await aborted(unpipeSignal, sourceStream);
  await mergedStream.remove(sourceStream);
  const error = new Error("Pipe canceled by `unpipeSignal` option.");
  throw createNonCommandError({
    error,
    fileDescriptors,
    sourceOptions,
    startTime
  });
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/pipe/setup.js
var pipeToSubprocess = (sourceInfo, ...pipeArguments) => {
  if (isPlainObject(pipeArguments[0])) {
    return pipeToSubprocess.bind(void 0, {
      ...sourceInfo,
      boundOptions: { ...sourceInfo.boundOptions, ...pipeArguments[0] }
    });
  }
  const { destination, ...normalizedInfo } = normalizePipeArguments(sourceInfo, ...pipeArguments);
  const promise = handlePipePromise({ ...normalizedInfo, destination });
  promise.pipe = pipeToSubprocess.bind(void 0, {
    ...sourceInfo,
    source: destination,
    sourcePromise: promise,
    boundOptions: {}
  });
  return promise;
};
var handlePipePromise = async ({
  sourcePromise,
  sourceStream,
  sourceOptions,
  sourceError,
  destination,
  destinationStream,
  destinationError,
  unpipeSignal,
  fileDescriptors,
  startTime
}) => {
  const subprocessPromises = getSubprocessPromises(sourcePromise, destination);
  handlePipeArgumentsError({
    sourceStream,
    sourceError,
    destinationStream,
    destinationError,
    fileDescriptors,
    sourceOptions,
    startTime
  });
  const maxListenersController = new AbortController();
  try {
    const mergedStream = pipeSubprocessStream(sourceStream, destinationStream, maxListenersController);
    return await Promise.race([
      waitForBothSubprocesses(subprocessPromises),
      ...unpipeOnAbort(unpipeSignal, {
        sourceStream,
        mergedStream,
        sourceOptions,
        fileDescriptors,
        startTime
      })
    ]);
  } finally {
    maxListenersController.abort();
  }
};
var getSubprocessPromises = (sourcePromise, destination) => Promise.allSettled([sourcePromise, destination]);

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/resolve/all-async.js
init_esm_shims();

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/resolve/stdio.js
init_esm_shims();

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/io/contents.js
init_esm_shims();
import { setImmediate as setImmediate2 } from "node:timers/promises";

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/io/iterate.js
init_esm_shims();
import { on as on5 } from "node:events";
import { getDefaultHighWaterMark as getDefaultHighWaterMark3 } from "node:stream";
var iterateOnSubprocessStream = ({ subprocessStdout, subprocess, binary, shouldEncode, encoding, preserveNewlines }) => {
  const controller = new AbortController();
  stopReadingOnExit(subprocess, controller);
  return iterateOnStream({
    stream: subprocessStdout,
    controller,
    binary,
    shouldEncode: !subprocessStdout.readableObjectMode && shouldEncode,
    encoding,
    shouldSplit: !subprocessStdout.readableObjectMode,
    preserveNewlines
  });
};
var stopReadingOnExit = async (subprocess, controller) => {
  try {
    await subprocess;
  } catch {
  } finally {
    controller.abort();
  }
};
var iterateForResult = ({ stream, onStreamEnd, lines, encoding, stripFinalNewline: stripFinalNewline2, allMixed }) => {
  const controller = new AbortController();
  stopReadingOnStreamEnd(onStreamEnd, controller, stream);
  const objectMode = stream.readableObjectMode && !allMixed;
  return iterateOnStream({
    stream,
    controller,
    binary: encoding === "buffer",
    shouldEncode: !objectMode,
    encoding,
    shouldSplit: !objectMode && lines,
    preserveNewlines: !stripFinalNewline2
  });
};
var stopReadingOnStreamEnd = async (onStreamEnd, controller, stream) => {
  try {
    await onStreamEnd;
  } catch {
    stream.destroy();
  } finally {
    controller.abort();
  }
};
var iterateOnStream = ({ stream, controller, binary, shouldEncode, encoding, shouldSplit, preserveNewlines }) => {
  const onStdoutChunk = on5(stream, "data", {
    signal: controller.signal,
    highWaterMark: HIGH_WATER_MARK,
    // Backward compatibility with older name for this option
    // See https://github.com/nodejs/node/pull/52080#discussion_r1525227861
    // @todo Remove after removing support for Node 21
    highWatermark: HIGH_WATER_MARK
  });
  return iterateOnData({
    onStdoutChunk,
    controller,
    binary,
    shouldEncode,
    encoding,
    shouldSplit,
    preserveNewlines
  });
};
var DEFAULT_OBJECT_HIGH_WATER_MARK = getDefaultHighWaterMark3(true);
var HIGH_WATER_MARK = DEFAULT_OBJECT_HIGH_WATER_MARK;
var iterateOnData = async function* ({ onStdoutChunk, controller, binary, shouldEncode, encoding, shouldSplit, preserveNewlines }) {
  const generators = getGenerators({
    binary,
    shouldEncode,
    encoding,
    shouldSplit,
    preserveNewlines
  });
  try {
    for await (const [chunk] of onStdoutChunk) {
      yield* transformChunkSync(chunk, generators, 0);
    }
  } catch (error) {
    if (!controller.signal.aborted) {
      throw error;
    }
  } finally {
    yield* finalChunksSync(generators);
  }
};
var getGenerators = ({ binary, shouldEncode, encoding, shouldSplit, preserveNewlines }) => [
  getEncodingTransformGenerator(binary, encoding, !shouldEncode),
  getSplitLinesGenerator(binary, preserveNewlines, !shouldSplit, {})
].filter(Boolean);

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/io/contents.js
var getStreamOutput = async ({ stream, onStreamEnd, fdNumber, encoding, buffer, maxBuffer, lines, allMixed, stripFinalNewline: stripFinalNewline2, verboseInfo, streamInfo }) => {
  const logPromise = logOutputAsync({
    stream,
    onStreamEnd,
    fdNumber,
    encoding,
    allMixed,
    verboseInfo,
    streamInfo
  });
  if (!buffer) {
    await Promise.all([resumeStream(stream), logPromise]);
    return;
  }
  const stripFinalNewlineValue = getStripFinalNewline(stripFinalNewline2, fdNumber);
  const iterable = iterateForResult({
    stream,
    onStreamEnd,
    lines,
    encoding,
    stripFinalNewline: stripFinalNewlineValue,
    allMixed
  });
  const [output] = await Promise.all([
    getStreamContents2({
      stream,
      iterable,
      fdNumber,
      encoding,
      maxBuffer,
      lines
    }),
    logPromise
  ]);
  return output;
};
var logOutputAsync = async ({ stream, onStreamEnd, fdNumber, encoding, allMixed, verboseInfo, streamInfo: { fileDescriptors } }) => {
  if (!shouldLogOutput({
    stdioItems: fileDescriptors[fdNumber]?.stdioItems,
    encoding,
    verboseInfo,
    fdNumber
  })) {
    return;
  }
  const linesIterable = iterateForResult({
    stream,
    onStreamEnd,
    lines: true,
    encoding,
    stripFinalNewline: true,
    allMixed
  });
  await logLines(linesIterable, stream, fdNumber, verboseInfo);
};
var resumeStream = async (stream) => {
  await setImmediate2();
  if (stream.readableFlowing === null) {
    stream.resume();
  }
};
var getStreamContents2 = async ({ stream, stream: { readableObjectMode }, iterable, fdNumber, encoding, maxBuffer, lines }) => {
  try {
    if (readableObjectMode || lines) {
      return await getStreamAsArray(iterable, { maxBuffer });
    }
    if (encoding === "buffer") {
      return new Uint8Array(await getStreamAsArrayBuffer(iterable, { maxBuffer }));
    }
    return await getStreamAsString(iterable, { maxBuffer });
  } catch (error) {
    return handleBufferedData(handleMaxBuffer({
      error,
      stream,
      readableObjectMode,
      lines,
      encoding,
      fdNumber
    }));
  }
};
var getBufferedData = async (streamPromise) => {
  try {
    return await streamPromise;
  } catch (error) {
    return handleBufferedData(error);
  }
};
var handleBufferedData = ({ bufferedData }) => isArrayBuffer(bufferedData) ? new Uint8Array(bufferedData) : bufferedData;

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/resolve/wait-stream.js
init_esm_shims();
import { finished as finished5 } from "node:stream/promises";
var waitForStream = async (stream, fdNumber, streamInfo, { isSameDirection, stopOnExit = false } = {}) => {
  const state = handleStdinDestroy(stream, streamInfo);
  const abortController = new AbortController();
  try {
    await Promise.race([
      ...stopOnExit ? [streamInfo.exitPromise] : [],
      finished5(stream, { cleanup: true, signal: abortController.signal })
    ]);
  } catch (error) {
    if (!state.stdinCleanedUp) {
      handleStreamError(error, fdNumber, streamInfo, isSameDirection);
    }
  } finally {
    abortController.abort();
  }
};
var handleStdinDestroy = (stream, { originalStreams: [originalStdin], subprocess }) => {
  const state = { stdinCleanedUp: false };
  if (stream === originalStdin) {
    spyOnStdinDestroy(stream, subprocess, state);
  }
  return state;
};
var spyOnStdinDestroy = (subprocessStdin, subprocess, state) => {
  const { _destroy } = subprocessStdin;
  subprocessStdin._destroy = (...destroyArguments) => {
    setStdinCleanedUp(subprocess, state);
    _destroy.call(subprocessStdin, ...destroyArguments);
  };
};
var setStdinCleanedUp = ({ exitCode, signalCode }, state) => {
  if (exitCode !== null || signalCode !== null) {
    state.stdinCleanedUp = true;
  }
};
var handleStreamError = (error, fdNumber, streamInfo, isSameDirection) => {
  if (!shouldIgnoreStreamError(error, fdNumber, streamInfo, isSameDirection)) {
    throw error;
  }
};
var shouldIgnoreStreamError = (error, fdNumber, streamInfo, isSameDirection = true) => {
  if (streamInfo.propagating) {
    return isStreamEpipe(error) || isStreamAbort(error);
  }
  streamInfo.propagating = true;
  return isInputFileDescriptor(streamInfo, fdNumber) === isSameDirection ? isStreamEpipe(error) : isStreamAbort(error);
};
var isInputFileDescriptor = ({ fileDescriptors }, fdNumber) => fdNumber !== "all" && fileDescriptors[fdNumber].direction === "input";
var isStreamAbort = (error) => error?.code === "ERR_STREAM_PREMATURE_CLOSE";
var isStreamEpipe = (error) => error?.code === "EPIPE";

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/resolve/stdio.js
var waitForStdioStreams = ({ subprocess, encoding, buffer, maxBuffer, lines, stripFinalNewline: stripFinalNewline2, verboseInfo, streamInfo }) => subprocess.stdio.map((stream, fdNumber) => waitForSubprocessStream({
  stream,
  fdNumber,
  encoding,
  buffer: buffer[fdNumber],
  maxBuffer: maxBuffer[fdNumber],
  lines: lines[fdNumber],
  allMixed: false,
  stripFinalNewline: stripFinalNewline2,
  verboseInfo,
  streamInfo
}));
var waitForSubprocessStream = async ({ stream, fdNumber, encoding, buffer, maxBuffer, lines, allMixed, stripFinalNewline: stripFinalNewline2, verboseInfo, streamInfo }) => {
  if (!stream) {
    return;
  }
  const onStreamEnd = waitForStream(stream, fdNumber, streamInfo);
  if (isInputFileDescriptor(streamInfo, fdNumber)) {
    await onStreamEnd;
    return;
  }
  const [output] = await Promise.all([
    getStreamOutput({
      stream,
      onStreamEnd,
      fdNumber,
      encoding,
      buffer,
      maxBuffer,
      lines,
      allMixed,
      stripFinalNewline: stripFinalNewline2,
      verboseInfo,
      streamInfo
    }),
    onStreamEnd
  ]);
  return output;
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/resolve/all-async.js
var makeAllStream = ({ stdout, stderr }, { all }) => all && (stdout || stderr) ? mergeStreams([stdout, stderr].filter(Boolean)) : void 0;
var waitForAllStream = ({ subprocess, encoding, buffer, maxBuffer, lines, stripFinalNewline: stripFinalNewline2, verboseInfo, streamInfo }) => waitForSubprocessStream({
  ...getAllStream(subprocess, buffer),
  fdNumber: "all",
  encoding,
  maxBuffer: maxBuffer[1] + maxBuffer[2],
  lines: lines[1] || lines[2],
  allMixed: getAllMixed(subprocess),
  stripFinalNewline: stripFinalNewline2,
  verboseInfo,
  streamInfo
});
var getAllStream = ({ stdout, stderr, all }, [, bufferStdout, bufferStderr]) => {
  const buffer = bufferStdout || bufferStderr;
  if (!buffer) {
    return { stream: all, buffer };
  }
  if (!bufferStdout) {
    return { stream: stderr, buffer };
  }
  if (!bufferStderr) {
    return { stream: stdout, buffer };
  }
  return { stream: all, buffer };
};
var getAllMixed = ({ all, stdout, stderr }) => all && stdout && stderr && stdout.readableObjectMode !== stderr.readableObjectMode;

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/resolve/wait-subprocess.js
init_esm_shims();
import { once as once8 } from "node:events";

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/ipc/buffer-messages.js
init_esm_shims();

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/verbose/ipc.js
init_esm_shims();
var shouldLogIpc = (verboseInfo) => isFullVerbose(verboseInfo, "ipc");
var logIpcOutput = (message, verboseInfo) => {
  const verboseMessage = serializeVerboseMessage(message);
  verboseLog({
    type: "ipc",
    verboseMessage,
    fdNumber: "ipc",
    verboseInfo
  });
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/ipc/buffer-messages.js
var waitForIpcOutput = async ({
  subprocess,
  buffer: bufferArray,
  maxBuffer: maxBufferArray,
  ipc,
  ipcOutput,
  verboseInfo
}) => {
  if (!ipc) {
    return ipcOutput;
  }
  const isVerbose2 = shouldLogIpc(verboseInfo);
  const buffer = getFdSpecificValue(bufferArray, "ipc");
  const maxBuffer = getFdSpecificValue(maxBufferArray, "ipc");
  for await (const message of loopOnMessages({
    anyProcess: subprocess,
    channel: subprocess.channel,
    isSubprocess: false,
    ipc,
    shouldAwait: false,
    reference: true
  })) {
    if (buffer) {
      checkIpcMaxBuffer(subprocess, ipcOutput, maxBuffer);
      ipcOutput.push(message);
    }
    if (isVerbose2) {
      logIpcOutput(message, verboseInfo);
    }
  }
  return ipcOutput;
};
var getBufferedIpcOutput = async (ipcOutputPromise, ipcOutput) => {
  await Promise.allSettled([ipcOutputPromise]);
  return ipcOutput;
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/resolve/wait-subprocess.js
var waitForSubprocessResult = async ({
  subprocess,
  options: {
    encoding,
    buffer,
    maxBuffer,
    lines,
    timeoutDuration: timeout,
    cancelSignal,
    gracefulCancel,
    forceKillAfterDelay,
    stripFinalNewline: stripFinalNewline2,
    ipc,
    ipcInput
  },
  context,
  verboseInfo,
  fileDescriptors,
  originalStreams,
  onInternalError,
  controller
}) => {
  const exitPromise = waitForExit(subprocess, context);
  const streamInfo = {
    originalStreams,
    fileDescriptors,
    subprocess,
    exitPromise,
    propagating: false
  };
  const stdioPromises = waitForStdioStreams({
    subprocess,
    encoding,
    buffer,
    maxBuffer,
    lines,
    stripFinalNewline: stripFinalNewline2,
    verboseInfo,
    streamInfo
  });
  const allPromise = waitForAllStream({
    subprocess,
    encoding,
    buffer,
    maxBuffer,
    lines,
    stripFinalNewline: stripFinalNewline2,
    verboseInfo,
    streamInfo
  });
  const ipcOutput = [];
  const ipcOutputPromise = waitForIpcOutput({
    subprocess,
    buffer,
    maxBuffer,
    ipc,
    ipcOutput,
    verboseInfo
  });
  const originalPromises = waitForOriginalStreams(originalStreams, subprocess, streamInfo);
  const customStreamsEndPromises = waitForCustomStreamsEnd(fileDescriptors, streamInfo);
  try {
    return await Promise.race([
      Promise.all([
        {},
        waitForSuccessfulExit(exitPromise),
        Promise.all(stdioPromises),
        allPromise,
        ipcOutputPromise,
        sendIpcInput(subprocess, ipcInput),
        ...originalPromises,
        ...customStreamsEndPromises
      ]),
      onInternalError,
      throwOnSubprocessError(subprocess, controller),
      ...throwOnTimeout(subprocess, timeout, context, controller),
      ...throwOnCancel({
        subprocess,
        cancelSignal,
        gracefulCancel,
        context,
        controller
      }),
      ...throwOnGracefulCancel({
        subprocess,
        cancelSignal,
        gracefulCancel,
        forceKillAfterDelay,
        context,
        controller
      })
    ]);
  } catch (error) {
    context.terminationReason ??= "other";
    return Promise.all([
      { error },
      exitPromise,
      Promise.all(stdioPromises.map((stdioPromise) => getBufferedData(stdioPromise))),
      getBufferedData(allPromise),
      getBufferedIpcOutput(ipcOutputPromise, ipcOutput),
      Promise.allSettled(originalPromises),
      Promise.allSettled(customStreamsEndPromises)
    ]);
  }
};
var waitForOriginalStreams = (originalStreams, subprocess, streamInfo) => originalStreams.map((stream, fdNumber) => stream === subprocess.stdio[fdNumber] ? void 0 : waitForStream(stream, fdNumber, streamInfo));
var waitForCustomStreamsEnd = (fileDescriptors, streamInfo) => fileDescriptors.flatMap(({ stdioItems }, fdNumber) => stdioItems.filter(({ value: value2, stream = value2 }) => isStream(stream, { checkOpen: false }) && !isStandardStream(stream)).map(({ type, value: value2, stream = value2 }) => waitForStream(stream, fdNumber, streamInfo, {
  isSameDirection: TRANSFORM_TYPES.has(type),
  stopOnExit: type === "native"
})));
var throwOnSubprocessError = async (subprocess, { signal }) => {
  const [error] = await once8(subprocess, "error", { signal });
  throw error;
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/convert/add.js
init_esm_shims();

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/convert/concurrent.js
init_esm_shims();
var initializeConcurrentStreams = () => ({
  readableDestroy: /* @__PURE__ */ new WeakMap(),
  writableFinal: /* @__PURE__ */ new WeakMap(),
  writableDestroy: /* @__PURE__ */ new WeakMap()
});
var addConcurrentStream = (concurrentStreams, stream, waitName) => {
  const weakMap = concurrentStreams[waitName];
  if (!weakMap.has(stream)) {
    weakMap.set(stream, []);
  }
  const promises = weakMap.get(stream);
  const promise = createDeferred();
  promises.push(promise);
  const resolve = promise.resolve.bind(promise);
  return { resolve, promises };
};
var waitForConcurrentStreams = async ({ resolve, promises }, subprocess) => {
  resolve();
  const [isSubprocessExit] = await Promise.race([
    Promise.allSettled([true, subprocess]),
    Promise.all([false, ...promises])
  ]);
  return !isSubprocessExit;
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/convert/readable.js
init_esm_shims();
import { Readable as Readable3 } from "node:stream";
import { callbackify as callbackify2 } from "node:util";

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/convert/shared.js
init_esm_shims();
import { finished as finished6 } from "node:stream/promises";
var safeWaitForSubprocessStdin = async (subprocessStdin) => {
  if (subprocessStdin === void 0) {
    return;
  }
  try {
    await waitForSubprocessStdin(subprocessStdin);
  } catch {
  }
};
var safeWaitForSubprocessStdout = async (subprocessStdout) => {
  if (subprocessStdout === void 0) {
    return;
  }
  try {
    await waitForSubprocessStdout(subprocessStdout);
  } catch {
  }
};
var waitForSubprocessStdin = async (subprocessStdin) => {
  await finished6(subprocessStdin, { cleanup: true, readable: false, writable: true });
};
var waitForSubprocessStdout = async (subprocessStdout) => {
  await finished6(subprocessStdout, { cleanup: true, readable: true, writable: false });
};
var waitForSubprocess = async (subprocess, error) => {
  await subprocess;
  if (error) {
    throw error;
  }
};
var destroyOtherStream = (stream, isOpen, error) => {
  if (error && !isStreamAbort(error)) {
    stream.destroy(error);
  } else if (isOpen) {
    stream.destroy();
  }
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/convert/readable.js
var createReadable = ({ subprocess, concurrentStreams, encoding }, { from, binary: binaryOption = true, preserveNewlines = true } = {}) => {
  const binary = binaryOption || BINARY_ENCODINGS.has(encoding);
  const { subprocessStdout, waitReadableDestroy } = getSubprocessStdout(subprocess, from, concurrentStreams);
  const { readableEncoding, readableObjectMode, readableHighWaterMark } = getReadableOptions(subprocessStdout, binary);
  const { read, onStdoutDataDone } = getReadableMethods({
    subprocessStdout,
    subprocess,
    binary,
    encoding,
    preserveNewlines
  });
  const readable2 = new Readable3({
    read,
    destroy: callbackify2(onReadableDestroy.bind(void 0, { subprocessStdout, subprocess, waitReadableDestroy })),
    highWaterMark: readableHighWaterMark,
    objectMode: readableObjectMode,
    encoding: readableEncoding
  });
  onStdoutFinished({
    subprocessStdout,
    onStdoutDataDone,
    readable: readable2,
    subprocess
  });
  return readable2;
};
var getSubprocessStdout = (subprocess, from, concurrentStreams) => {
  const subprocessStdout = getFromStream(subprocess, from);
  const waitReadableDestroy = addConcurrentStream(concurrentStreams, subprocessStdout, "readableDestroy");
  return { subprocessStdout, waitReadableDestroy };
};
var getReadableOptions = ({ readableEncoding, readableObjectMode, readableHighWaterMark }, binary) => binary ? { readableEncoding, readableObjectMode, readableHighWaterMark } : { readableEncoding, readableObjectMode: true, readableHighWaterMark: DEFAULT_OBJECT_HIGH_WATER_MARK };
var getReadableMethods = ({ subprocessStdout, subprocess, binary, encoding, preserveNewlines }) => {
  const onStdoutDataDone = createDeferred();
  const onStdoutData = iterateOnSubprocessStream({
    subprocessStdout,
    subprocess,
    binary,
    shouldEncode: !binary,
    encoding,
    preserveNewlines
  });
  return {
    read() {
      onRead(this, onStdoutData, onStdoutDataDone);
    },
    onStdoutDataDone
  };
};
var onRead = async (readable2, onStdoutData, onStdoutDataDone) => {
  try {
    const { value: value2, done } = await onStdoutData.next();
    if (done) {
      onStdoutDataDone.resolve();
    } else {
      readable2.push(value2);
    }
  } catch {
  }
};
var onStdoutFinished = async ({ subprocessStdout, onStdoutDataDone, readable: readable2, subprocess, subprocessStdin }) => {
  try {
    await waitForSubprocessStdout(subprocessStdout);
    await subprocess;
    await safeWaitForSubprocessStdin(subprocessStdin);
    await onStdoutDataDone;
    if (readable2.readable) {
      readable2.push(null);
    }
  } catch (error) {
    await safeWaitForSubprocessStdin(subprocessStdin);
    destroyOtherReadable(readable2, error);
  }
};
var onReadableDestroy = async ({ subprocessStdout, subprocess, waitReadableDestroy }, error) => {
  if (await waitForConcurrentStreams(waitReadableDestroy, subprocess)) {
    destroyOtherReadable(subprocessStdout, error);
    await waitForSubprocess(subprocess, error);
  }
};
var destroyOtherReadable = (stream, error) => {
  destroyOtherStream(stream, stream.readable, error);
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/convert/writable.js
init_esm_shims();
import { Writable as Writable3 } from "node:stream";
import { callbackify as callbackify3 } from "node:util";
var createWritable = ({ subprocess, concurrentStreams }, { to } = {}) => {
  const { subprocessStdin, waitWritableFinal, waitWritableDestroy } = getSubprocessStdin(subprocess, to, concurrentStreams);
  const writable2 = new Writable3({
    ...getWritableMethods(subprocessStdin, subprocess, waitWritableFinal),
    destroy: callbackify3(onWritableDestroy.bind(void 0, {
      subprocessStdin,
      subprocess,
      waitWritableFinal,
      waitWritableDestroy
    })),
    highWaterMark: subprocessStdin.writableHighWaterMark,
    objectMode: subprocessStdin.writableObjectMode
  });
  onStdinFinished(subprocessStdin, writable2);
  return writable2;
};
var getSubprocessStdin = (subprocess, to, concurrentStreams) => {
  const subprocessStdin = getToStream(subprocess, to);
  const waitWritableFinal = addConcurrentStream(concurrentStreams, subprocessStdin, "writableFinal");
  const waitWritableDestroy = addConcurrentStream(concurrentStreams, subprocessStdin, "writableDestroy");
  return { subprocessStdin, waitWritableFinal, waitWritableDestroy };
};
var getWritableMethods = (subprocessStdin, subprocess, waitWritableFinal) => ({
  write: onWrite.bind(void 0, subprocessStdin),
  final: callbackify3(onWritableFinal.bind(void 0, subprocessStdin, subprocess, waitWritableFinal))
});
var onWrite = (subprocessStdin, chunk, encoding, done) => {
  if (subprocessStdin.write(chunk, encoding)) {
    done();
  } else {
    subprocessStdin.once("drain", done);
  }
};
var onWritableFinal = async (subprocessStdin, subprocess, waitWritableFinal) => {
  if (await waitForConcurrentStreams(waitWritableFinal, subprocess)) {
    if (subprocessStdin.writable) {
      subprocessStdin.end();
    }
    await subprocess;
  }
};
var onStdinFinished = async (subprocessStdin, writable2, subprocessStdout) => {
  try {
    await waitForSubprocessStdin(subprocessStdin);
    if (writable2.writable) {
      writable2.end();
    }
  } catch (error) {
    await safeWaitForSubprocessStdout(subprocessStdout);
    destroyOtherWritable(writable2, error);
  }
};
var onWritableDestroy = async ({ subprocessStdin, subprocess, waitWritableFinal, waitWritableDestroy }, error) => {
  await waitForConcurrentStreams(waitWritableFinal, subprocess);
  if (await waitForConcurrentStreams(waitWritableDestroy, subprocess)) {
    destroyOtherWritable(subprocessStdin, error);
    await waitForSubprocess(subprocess, error);
  }
};
var destroyOtherWritable = (stream, error) => {
  destroyOtherStream(stream, stream.writable, error);
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/convert/duplex.js
init_esm_shims();
import { Duplex as Duplex3 } from "node:stream";
import { callbackify as callbackify4 } from "node:util";
var createDuplex = ({ subprocess, concurrentStreams, encoding }, { from, to, binary: binaryOption = true, preserveNewlines = true } = {}) => {
  const binary = binaryOption || BINARY_ENCODINGS.has(encoding);
  const { subprocessStdout, waitReadableDestroy } = getSubprocessStdout(subprocess, from, concurrentStreams);
  const { subprocessStdin, waitWritableFinal, waitWritableDestroy } = getSubprocessStdin(subprocess, to, concurrentStreams);
  const { readableEncoding, readableObjectMode, readableHighWaterMark } = getReadableOptions(subprocessStdout, binary);
  const { read, onStdoutDataDone } = getReadableMethods({
    subprocessStdout,
    subprocess,
    binary,
    encoding,
    preserveNewlines
  });
  const duplex2 = new Duplex3({
    read,
    ...getWritableMethods(subprocessStdin, subprocess, waitWritableFinal),
    destroy: callbackify4(onDuplexDestroy.bind(void 0, {
      subprocessStdout,
      subprocessStdin,
      subprocess,
      waitReadableDestroy,
      waitWritableFinal,
      waitWritableDestroy
    })),
    readableHighWaterMark,
    writableHighWaterMark: subprocessStdin.writableHighWaterMark,
    readableObjectMode,
    writableObjectMode: subprocessStdin.writableObjectMode,
    encoding: readableEncoding
  });
  onStdoutFinished({
    subprocessStdout,
    onStdoutDataDone,
    readable: duplex2,
    subprocess,
    subprocessStdin
  });
  onStdinFinished(subprocessStdin, duplex2, subprocessStdout);
  return duplex2;
};
var onDuplexDestroy = async ({ subprocessStdout, subprocessStdin, subprocess, waitReadableDestroy, waitWritableFinal, waitWritableDestroy }, error) => {
  await Promise.all([
    onReadableDestroy({ subprocessStdout, subprocess, waitReadableDestroy }, error),
    onWritableDestroy({
      subprocessStdin,
      subprocess,
      waitWritableFinal,
      waitWritableDestroy
    }, error)
  ]);
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/convert/iterable.js
init_esm_shims();
var createIterable = (subprocess, encoding, {
  from,
  binary: binaryOption = false,
  preserveNewlines = false
} = {}) => {
  const binary = binaryOption || BINARY_ENCODINGS.has(encoding);
  const subprocessStdout = getFromStream(subprocess, from);
  const onStdoutData = iterateOnSubprocessStream({
    subprocessStdout,
    subprocess,
    binary,
    shouldEncode: true,
    encoding,
    preserveNewlines
  });
  return iterateOnStdoutData(onStdoutData, subprocessStdout, subprocess);
};
var iterateOnStdoutData = async function* (onStdoutData, subprocessStdout, subprocess) {
  try {
    yield* onStdoutData;
  } finally {
    if (subprocessStdout.readable) {
      subprocessStdout.destroy();
    }
    await subprocess;
  }
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/convert/add.js
var addConvertedStreams = (subprocess, { encoding }) => {
  const concurrentStreams = initializeConcurrentStreams();
  subprocess.readable = createReadable.bind(void 0, { subprocess, concurrentStreams, encoding });
  subprocess.writable = createWritable.bind(void 0, { subprocess, concurrentStreams });
  subprocess.duplex = createDuplex.bind(void 0, { subprocess, concurrentStreams, encoding });
  subprocess.iterable = createIterable.bind(void 0, subprocess, encoding);
  subprocess[Symbol.asyncIterator] = createIterable.bind(void 0, subprocess, encoding, {});
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/methods/promise.js
init_esm_shims();
var mergePromise = (subprocess, promise) => {
  for (const [property, descriptor] of descriptors) {
    const value2 = descriptor.value.bind(promise);
    Reflect.defineProperty(subprocess, property, { ...descriptor, value: value2 });
  }
};
var nativePromisePrototype = (async () => {
})().constructor.prototype;
var descriptors = ["then", "catch", "finally"].map((property) => [
  property,
  Reflect.getOwnPropertyDescriptor(nativePromisePrototype, property)
]);

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/methods/main-async.js
var execaCoreAsync = (rawFile, rawArguments, rawOptions, createNested) => {
  const { file, commandArguments, command, escapedCommand, startTime, verboseInfo, options, fileDescriptors } = handleAsyncArguments(rawFile, rawArguments, rawOptions);
  const { subprocess, promise } = spawnSubprocessAsync({
    file,
    commandArguments,
    options,
    startTime,
    verboseInfo,
    command,
    escapedCommand,
    fileDescriptors
  });
  subprocess.pipe = pipeToSubprocess.bind(void 0, {
    source: subprocess,
    sourcePromise: promise,
    boundOptions: {},
    createNested
  });
  mergePromise(subprocess, promise);
  SUBPROCESS_OPTIONS.set(subprocess, { options, fileDescriptors });
  return subprocess;
};
var handleAsyncArguments = (rawFile, rawArguments, rawOptions) => {
  const { command, escapedCommand, startTime, verboseInfo } = handleCommand(rawFile, rawArguments, rawOptions);
  const { file, commandArguments, options: normalizedOptions } = normalizeOptions(rawFile, rawArguments, rawOptions);
  const options = handleAsyncOptions(normalizedOptions);
  const fileDescriptors = handleStdioAsync(options, verboseInfo);
  return {
    file,
    commandArguments,
    command,
    escapedCommand,
    startTime,
    verboseInfo,
    options,
    fileDescriptors
  };
};
var handleAsyncOptions = ({ timeout, signal, ...options }) => {
  if (signal !== void 0) {
    throw new TypeError('The "signal" option has been renamed to "cancelSignal" instead.');
  }
  return { ...options, timeoutDuration: timeout };
};
var spawnSubprocessAsync = ({ file, commandArguments, options, startTime, verboseInfo, command, escapedCommand, fileDescriptors }) => {
  let subprocess;
  try {
    subprocess = spawn(file, commandArguments, options);
  } catch (error) {
    return handleEarlyError({
      error,
      command,
      escapedCommand,
      fileDescriptors,
      options,
      startTime,
      verboseInfo
    });
  }
  const controller = new AbortController();
  setMaxListeners(Number.POSITIVE_INFINITY, controller.signal);
  const originalStreams = [...subprocess.stdio];
  pipeOutputAsync(subprocess, fileDescriptors, controller);
  cleanupOnExit(subprocess, options, controller);
  const context = {};
  const onInternalError = createDeferred();
  subprocess.kill = subprocessKill.bind(void 0, {
    kill: subprocess.kill.bind(subprocess),
    options,
    onInternalError,
    context,
    controller
  });
  subprocess.all = makeAllStream(subprocess, options);
  addConvertedStreams(subprocess, options);
  addIpcMethods(subprocess, options);
  const promise = handlePromise({
    subprocess,
    options,
    startTime,
    verboseInfo,
    fileDescriptors,
    originalStreams,
    command,
    escapedCommand,
    context,
    onInternalError,
    controller
  });
  return { subprocess, promise };
};
var handlePromise = async ({ subprocess, options, startTime, verboseInfo, fileDescriptors, originalStreams, command, escapedCommand, context, onInternalError, controller }) => {
  const [
    errorInfo,
    [exitCode, signal],
    stdioResults,
    allResult,
    ipcOutput
  ] = await waitForSubprocessResult({
    subprocess,
    options,
    context,
    verboseInfo,
    fileDescriptors,
    originalStreams,
    onInternalError,
    controller
  });
  controller.abort();
  onInternalError.resolve();
  const stdio = stdioResults.map((stdioResult, fdNumber) => stripNewline(stdioResult, options, fdNumber));
  const all = stripNewline(allResult, options, "all");
  const result = getAsyncResult({
    errorInfo,
    exitCode,
    signal,
    stdio,
    all,
    ipcOutput,
    context,
    options,
    command,
    escapedCommand,
    startTime
  });
  return handleResult(result, verboseInfo, options);
};
var getAsyncResult = ({ errorInfo, exitCode, signal, stdio, all, ipcOutput, context, options, command, escapedCommand, startTime }) => "error" in errorInfo ? makeError({
  error: errorInfo.error,
  command,
  escapedCommand,
  timedOut: context.terminationReason === "timeout",
  isCanceled: context.terminationReason === "cancel" || context.terminationReason === "gracefulCancel",
  isGracefullyCanceled: context.terminationReason === "gracefulCancel",
  isMaxBuffer: errorInfo.error instanceof MaxBufferError,
  isForcefullyTerminated: context.isForcefullyTerminated,
  exitCode,
  signal,
  stdio,
  all,
  ipcOutput,
  options,
  startTime,
  isSync: false
}) : makeSuccessResult({
  command,
  escapedCommand,
  stdio,
  all,
  ipcOutput,
  options,
  startTime
});

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/methods/bind.js
init_esm_shims();
var mergeOptions = (boundOptions, options) => {
  const newOptions = Object.fromEntries(
    Object.entries(options).map(([optionName, optionValue]) => [
      optionName,
      mergeOption(optionName, boundOptions[optionName], optionValue)
    ])
  );
  return { ...boundOptions, ...newOptions };
};
var mergeOption = (optionName, boundOptionValue, optionValue) => {
  if (DEEP_OPTIONS.has(optionName) && isPlainObject(boundOptionValue) && isPlainObject(optionValue)) {
    return { ...boundOptionValue, ...optionValue };
  }
  return optionValue;
};
var DEEP_OPTIONS = /* @__PURE__ */ new Set(["env", ...FD_SPECIFIC_OPTIONS]);

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/methods/create.js
var createExeca = (mapArguments, boundOptions, deepOptions, setBoundExeca) => {
  const createNested = (mapArguments2, boundOptions2, setBoundExeca2) => createExeca(mapArguments2, boundOptions2, deepOptions, setBoundExeca2);
  const boundExeca = (...execaArguments) => callBoundExeca({
    mapArguments,
    deepOptions,
    boundOptions,
    setBoundExeca,
    createNested
  }, ...execaArguments);
  if (setBoundExeca !== void 0) {
    setBoundExeca(boundExeca, createNested, boundOptions);
  }
  return boundExeca;
};
var callBoundExeca = ({ mapArguments, deepOptions = {}, boundOptions = {}, setBoundExeca, createNested }, firstArgument, ...nextArguments) => {
  if (isPlainObject(firstArgument)) {
    return createNested(mapArguments, mergeOptions(boundOptions, firstArgument), setBoundExeca);
  }
  const { file, commandArguments, options, isSync } = parseArguments({
    mapArguments,
    firstArgument,
    nextArguments,
    deepOptions,
    boundOptions
  });
  return isSync ? execaCoreSync(file, commandArguments, options) : execaCoreAsync(file, commandArguments, options, createNested);
};
var parseArguments = ({ mapArguments, firstArgument, nextArguments, deepOptions, boundOptions }) => {
  const callArguments = isTemplateString(firstArgument) ? parseTemplates(firstArgument, nextArguments) : [firstArgument, ...nextArguments];
  const [initialFile, initialArguments, initialOptions] = normalizeParameters(...callArguments);
  const mergedOptions = mergeOptions(mergeOptions(deepOptions, boundOptions), initialOptions);
  const {
    file = initialFile,
    commandArguments = initialArguments,
    options = mergedOptions,
    isSync = false
  } = mapArguments({ file: initialFile, commandArguments: initialArguments, options: mergedOptions });
  return {
    file,
    commandArguments,
    options,
    isSync
  };
};

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/methods/command.js
init_esm_shims();
var mapCommandAsync = ({ file, commandArguments }) => parseCommand(file, commandArguments);
var mapCommandSync = ({ file, commandArguments }) => ({ ...parseCommand(file, commandArguments), isSync: true });
var parseCommand = (command, unusedArguments) => {
  if (unusedArguments.length > 0) {
    throw new TypeError(`The command and its arguments must be passed as a single string: ${command} ${unusedArguments}.`);
  }
  const [file, ...commandArguments] = parseCommandString(command);
  return { file, commandArguments };
};
var parseCommandString = (command) => {
  if (typeof command !== "string") {
    throw new TypeError(`The command must be a string: ${String(command)}.`);
  }
  const trimmedCommand = command.trim();
  if (trimmedCommand === "") {
    return [];
  }
  const tokens = [];
  for (const token of trimmedCommand.split(SPACES_REGEXP)) {
    const previousToken = tokens.at(-1);
    if (previousToken && previousToken.endsWith("\\")) {
      tokens[tokens.length - 1] = `${previousToken.slice(0, -1)} ${token}`;
    } else {
      tokens.push(token);
    }
  }
  return tokens;
};
var SPACES_REGEXP = / +/g;

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/lib/methods/script.js
init_esm_shims();
var setScriptSync = (boundExeca, createNested, boundOptions) => {
  boundExeca.sync = createNested(mapScriptSync, boundOptions);
  boundExeca.s = boundExeca.sync;
};
var mapScriptAsync = ({ options }) => getScriptOptions(options);
var mapScriptSync = ({ options }) => ({ ...getScriptOptions(options), isSync: true });
var getScriptOptions = (options) => ({ options: { ...getScriptStdinOption(options), ...options } });
var getScriptStdinOption = ({ input, inputFile, stdio }) => input === void 0 && inputFile === void 0 && stdio === void 0 ? { stdin: "inherit" } : {};
var deepScriptOptions = { preferLocal: true };

// ../../.yarn/cache/execa-npm-9.5.2-ac35c57136-94782a6282.zip/node_modules/execa/index.js
var execa = createExeca(() => ({}));
var execaSync = createExeca(() => ({ isSync: true }));
var execaCommand = createExeca(mapCommandAsync);
var execaCommandSync = createExeca(mapCommandSync);
var execaNode = createExeca(mapNode);
var $2 = createExeca(mapScriptAsync, {}, deepScriptOptions, setScriptSync);
var {
  sendMessage: sendMessage2,
  getOneMessage: getOneMessage2,
  getEachMessage: getEachMessage2,
  getCancelSignal: getCancelSignal2
} = getIpcExport();

// src/constants.ts
init_esm_shims();
var REACT_NATIVE_VERSION = "0.72.6";
var APP_MANIFEST_NAME = "app.json";

// src/utils/getPackageManager.ts
init_esm_shims();
function getPackageManager({ isExecutor = false } = {}) {
  const userAgent = process.env.npm_config_user_agent;
  const packageManagerCommands = {
    npm: isExecutor ? "npx" : "npm",
    pnpm: "pnpm",
    yarn: "yarn"
  };
  if (!userAgent) {
    return {
      packageManager: packageManagerCommands["npm"],
      version: "0.0.0"
    };
  }
  const [packageManagerInfo] = userAgent.match(/(\w+)\/(\d+\.\d+\.\d+)/) || [];
  const [packageManager, version] = packageManagerInfo?.split("/") ?? ["npm", null];
  if (!packageManager) {
    return {
      packageManager: packageManagerCommands["npm"],
      version: "0.0.0"
    };
  }
  return {
    packageManager: packageManagerCommands[packageManager],
    version: version ?? "0.0.0"
  };
}

// src/plugins/appsInTossWeb.ts
var validateAppInTossWebPluginOptions = /* @__PURE__ */ (() => {
  const _io0 = (input) => "object" === typeof input.commands && null !== input.commands && _io1(input.commands) && ("object" === typeof input.brand && null !== input.brand && _io2(input.brand)) && (void 0 === input.webViewProps || "object" === typeof input.webViewProps && null !== input.webViewProps && false === Array.isArray(input.webViewProps) && _io3(input.webViewProps)) && (Array.isArray(input.permissions) && input.permissions.every((elem) => "object" === typeof elem && null !== elem && _iu0(elem)));
  const _io1 = (input) => "string" === typeof input.build;
  const _io2 = (input) => "string" === typeof input.displayName && "string" === typeof input.primaryColor && "string" === typeof input.icon && ("basic" === input.bridgeColorMode || "inverted" === input.bridgeColorMode);
  const _io3 = (input) => (void 0 === input.type || "partner" === input.type || "external" === input.type || "game" === input.type) && (void 0 === input.allowsInlineMediaPlayback || "boolean" === typeof input.allowsInlineMediaPlayback) && (void 0 === input.bounces || "boolean" === typeof input.bounces) && (void 0 === input.pullToRefreshEnabled || "boolean" === typeof input.pullToRefreshEnabled) && (void 0 === input.overScrollMode || "always" === input.overScrollMode || "content" === input.overScrollMode || "never" === input.overScrollMode) && (void 0 === input.mediaPlaybackRequiresUserAction || "boolean" === typeof input.mediaPlaybackRequiresUserAction) && (void 0 === input.allowsBackForwardNavigationGestures || "boolean" === typeof input.allowsBackForwardNavigationGestures);
  const _io4 = (input) => "clipboard" === input.name && ("read" === input.access || "write" === input.access);
  const _io5 = (input) => "geolocation" === input.name && "access" === input.access;
  const _io6 = (input) => "contacts" === input.name && ("read" === input.access || "write" === input.access);
  const _io7 = (input) => "photos" === input.name && ("read" === input.access || "write" === input.access);
  const _io8 = (input) => "camera" === input.name && "access" === input.access;
  const _iu0 = (input) => (() => {
    if ("camera" === input.name)
      return _io8(input);
    else if ("photos" === input.name)
      return _io7(input);
    else if ("contacts" === input.name)
      return _io6(input);
    else if ("geolocation" === input.name)
      return _io5(input);
    else if ("clipboard" === input.name)
      return _io4(input);
    else
      return false;
  })();
  const _vo0 = (input, _path, _exceptionable = true) => [("object" === typeof input.commands && null !== input.commands || _report(_exceptionable, {
    path: _path + ".commands",
    expected: "__type",
    value: input.commands
  })) && _vo1(input.commands, _path + ".commands", _exceptionable) || _report(_exceptionable, {
    path: _path + ".commands",
    expected: "__type",
    value: input.commands
  }), ("object" === typeof input.brand && null !== input.brand || _report(_exceptionable, {
    path: _path + ".brand",
    expected: "__type.o1",
    value: input.brand
  })) && _vo2(input.brand, _path + ".brand", _exceptionable) || _report(_exceptionable, {
    path: _path + ".brand",
    expected: "__type.o1",
    value: input.brand
  }), void 0 === input.webViewProps || ("object" === typeof input.webViewProps && null !== input.webViewProps && false === Array.isArray(input.webViewProps) || _report(_exceptionable, {
    path: _path + ".webViewProps",
    expected: "(__type.o2 | undefined)",
    value: input.webViewProps
  })) && _vo3(input.webViewProps, _path + ".webViewProps", _exceptionable) || _report(_exceptionable, {
    path: _path + ".webViewProps",
    expected: "(__type.o2 | undefined)",
    value: input.webViewProps
  }), (Array.isArray(input.permissions) || _report(_exceptionable, {
    path: _path + ".permissions",
    expected: "Array<Permission>",
    value: input.permissions
  })) && input.permissions.map((elem, _index2) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
    path: _path + ".permissions[" + _index2 + "]",
    expected: "(CameraPermission | ClipboardPermission | ContactsPermission | GeolocationPermission | PhotosPermission)",
    value: elem
  })) && _vu0(elem, _path + ".permissions[" + _index2 + "]", _exceptionable) || _report(_exceptionable, {
    path: _path + ".permissions[" + _index2 + "]",
    expected: "(CameraPermission | ClipboardPermission | ContactsPermission | GeolocationPermission | PhotosPermission)",
    value: elem
  })).every((flag) => flag) || _report(_exceptionable, {
    path: _path + ".permissions",
    expected: "Array<Permission>",
    value: input.permissions
  })].every((flag) => flag);
  const _vo1 = (input, _path, _exceptionable = true) => ["string" === typeof input.build || _report(_exceptionable, {
    path: _path + ".build",
    expected: "string",
    value: input.build
  })].every((flag) => flag);
  const _vo2 = (input, _path, _exceptionable = true) => ["string" === typeof input.displayName || _report(_exceptionable, {
    path: _path + ".displayName",
    expected: "string",
    value: input.displayName
  }), "string" === typeof input.primaryColor || _report(_exceptionable, {
    path: _path + ".primaryColor",
    expected: "string",
    value: input.primaryColor
  }), "string" === typeof input.icon || _report(_exceptionable, {
    path: _path + ".icon",
    expected: "string",
    value: input.icon
  }), "basic" === input.bridgeColorMode || "inverted" === input.bridgeColorMode || _report(_exceptionable, {
    path: _path + ".bridgeColorMode",
    expected: '("basic" | "inverted")',
    value: input.bridgeColorMode
  })].every((flag) => flag);
  const _vo3 = (input, _path, _exceptionable = true) => [void 0 === input.type || "partner" === input.type || "external" === input.type || "game" === input.type || _report(_exceptionable, {
    path: _path + ".type",
    expected: '("external" | "game" | "partner" | undefined)',
    value: input.type
  }), void 0 === input.allowsInlineMediaPlayback || "boolean" === typeof input.allowsInlineMediaPlayback || _report(_exceptionable, {
    path: _path + ".allowsInlineMediaPlayback",
    expected: "(boolean | undefined)",
    value: input.allowsInlineMediaPlayback
  }), void 0 === input.bounces || "boolean" === typeof input.bounces || _report(_exceptionable, {
    path: _path + ".bounces",
    expected: "(boolean | undefined)",
    value: input.bounces
  }), void 0 === input.pullToRefreshEnabled || "boolean" === typeof input.pullToRefreshEnabled || _report(_exceptionable, {
    path: _path + ".pullToRefreshEnabled",
    expected: "(boolean | undefined)",
    value: input.pullToRefreshEnabled
  }), void 0 === input.overScrollMode || "always" === input.overScrollMode || "content" === input.overScrollMode || "never" === input.overScrollMode || _report(_exceptionable, {
    path: _path + ".overScrollMode",
    expected: '("always" | "content" | "never" | undefined)',
    value: input.overScrollMode
  }), void 0 === input.mediaPlaybackRequiresUserAction || "boolean" === typeof input.mediaPlaybackRequiresUserAction || _report(_exceptionable, {
    path: _path + ".mediaPlaybackRequiresUserAction",
    expected: "(boolean | undefined)",
    value: input.mediaPlaybackRequiresUserAction
  }), void 0 === input.allowsBackForwardNavigationGestures || "boolean" === typeof input.allowsBackForwardNavigationGestures || _report(_exceptionable, {
    path: _path + ".allowsBackForwardNavigationGestures",
    expected: "(boolean | undefined)",
    value: input.allowsBackForwardNavigationGestures
  })].every((flag) => flag);
  const _vo4 = (input, _path, _exceptionable = true) => ["clipboard" === input.name || _report(_exceptionable, {
    path: _path + ".name",
    expected: '"clipboard"',
    value: input.name
  }), "read" === input.access || "write" === input.access || _report(_exceptionable, {
    path: _path + ".access",
    expected: '("read" | "write")',
    value: input.access
  })].every((flag) => flag);
  const _vo5 = (input, _path, _exceptionable = true) => ["geolocation" === input.name || _report(_exceptionable, {
    path: _path + ".name",
    expected: '"geolocation"',
    value: input.name
  }), "access" === input.access || _report(_exceptionable, {
    path: _path + ".access",
    expected: '"access"',
    value: input.access
  })].every((flag) => flag);
  const _vo6 = (input, _path, _exceptionable = true) => ["contacts" === input.name || _report(_exceptionable, {
    path: _path + ".name",
    expected: '"contacts"',
    value: input.name
  }), "read" === input.access || "write" === input.access || _report(_exceptionable, {
    path: _path + ".access",
    expected: '("read" | "write")',
    value: input.access
  })].every((flag) => flag);
  const _vo7 = (input, _path, _exceptionable = true) => ["photos" === input.name || _report(_exceptionable, {
    path: _path + ".name",
    expected: '"photos"',
    value: input.name
  }), "read" === input.access || "write" === input.access || _report(_exceptionable, {
    path: _path + ".access",
    expected: '("read" | "write")',
    value: input.access
  })].every((flag) => flag);
  const _vo8 = (input, _path, _exceptionable = true) => ["camera" === input.name || _report(_exceptionable, {
    path: _path + ".name",
    expected: '"camera"',
    value: input.name
  }), "access" === input.access || _report(_exceptionable, {
    path: _path + ".access",
    expected: '"access"',
    value: input.access
  })].every((flag) => flag);
  const _vu0 = (input, _path, _exceptionable = true) => (() => {
    if ("camera" === input.name)
      return _vo8(input, _path, _exceptionable);
    else if ("photos" === input.name)
      return _vo7(input, _path, _exceptionable);
    else if ("contacts" === input.name)
      return _vo6(input, _path, _exceptionable);
    else if ("geolocation" === input.name)
      return _vo5(input, _path, _exceptionable);
    else if ("clipboard" === input.name)
      return _vo4(input, _path, _exceptionable);
    else
      return _report(_exceptionable, {
        path: _path,
        expected: "(CameraPermission | PhotosPermission | ContactsPermission | GeolocationPermission | ClipboardPermission)",
        value: input
      });
  })();
  const __is = (input) => "object" === typeof input && null !== input && _io0(input);
  let errors;
  let _report;
  return (input) => {
    if (false === __is(input)) {
      errors = [];
      _report = __typia_transform__validateReport._validateReport(errors);
      ((input2, _path, _exceptionable = true) => ("object" === typeof input2 && null !== input2 || _report(true, {
        path: _path + "",
        expected: "AppsInTossWebPluginOptions",
        value: input2
      })) && _vo0(input2, _path + "", true) || _report(true, {
        path: _path + "",
        expected: "AppsInTossWebPluginOptions",
        value: input2
      }))(input, "$input", true);
      const success = 0 === errors.length;
      return success ? {
        success,
        data: input
      } : {
        success,
        errors,
        data: input
      };
    }
    return {
      success: true,
      data: input
    };
  };
})();
function appsInTossWebBuild(options) {
  const packageRoot = getPackageRoot2();
  return {
    name: "apps-in-toss-web:build",
    build: {
      order: "pre",
      handler: async ({ outdir }) => {
        const { packageManager } = getPackageManager({ isExecutor: true });
        const webDistDir = path6.join(outdir, "web");
        await fs.promises.rm(outdir, { recursive: true, force: true });
        await execa(packageManager, options.commands.build.split(" "), {
          cwd: packageRoot,
          stdio: "inherit",
          shell: true
        });
        await fs.promises.mkdir(webDistDir, { recursive: true });
        const items = await fs.promises.readdir(outdir);
        for (const item of items) {
          const src = path6.join(outdir, item);
          const dest = path6.join(webDistDir, item);
          if (src === webDistDir) {
            continue;
          }
          await fs.promises.rename(src, dest);
        }
        const webDistFiles = await fs.promises.readdir(webDistDir);
        if (webDistFiles.length === 0) {
          throw new Error(`\uC6F9 \uBE4C\uB4DC \uACB0\uACFC\uBB3C\uC774 \uC874\uC7AC\uD558\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4. granite.config.ts\uC5D0\uC11C \uC124\uC815\uD55C outdir \uACBD\uB85C\uC640 \uBE4C\uB4DC \uBA85\uB839\uC5B4(web.commands.build)\uC758 \uACB0\uACFC\uBB3C \uACBD\uB85C\uAC00 \uAC19\uC740\uC9C0 \uD655\uC778\uD558\uC138\uC694.`);
        }
        if (!webDistFiles.includes("index.html")) {
          throw new Error(`\uC6F9 \uBE4C\uB4DC \uACB0\uACFC\uBB3C\uC5D0 ${outdir}/web/index.html \uD30C\uC77C\uC774 \uD544\uC694\uD574\uC694. \uD604\uC7AC\uB294 CSR / SSG \uD658\uACBD\uB9CC \uC9C0\uC6D0\uD558\uACE0 \uC788\uC5B4\uC694.`);
        }
      }
    }
  };
}
async function getWebDistFiles(webDistDir) {
  const additionalFilesToZip = [];
  try {
    const allFiles = await fs.promises.readdir(webDistDir, { recursive: true });
    const webFiles = await Promise.all(allFiles.map(async (file) => {
      const filePath = path6.join(webDistDir, file);
      const stat = await fs.promises.stat(filePath);
      return stat.isFile() ? file : null;
    })).then((files) => files.filter((file) => file !== null));
    additionalFilesToZip.push(...webFiles.map((file) => ({
      path: path6.join(webDistDir, file),
      name: path6.join("web", file)
    })));
  } catch {
  }
  return additionalFilesToZip;
}
function appsInTossCreateArtifact(deploymentId) {
  const packageRoot = getPackageRoot2();
  return {
    name: "apps-in-toss:create-artifact",
    build: {
      order: "post",
      handler: async ({ buildResults, appName, cwd, outdir }) => {
        const { dependencies, devDependencies } = await collectDependencyVersions(cwd);
        const additionalFilesToZip = await getWebDistFiles(path6.join(outdir, "web"));
        const buildFailed = buildResults.some(isBuildFailure);
        if (buildFailed) {
          throw new Error("\uBC88\uB4E4 \uBE4C\uB4DC \uC2E4\uD328");
        }
        const artifactOutfile = await createArtifact({
          reactNativeVersion: REACT_NATIVE_VERSION,
          deploymentId,
          bundleFiles: buildResults.filter(isBuildSuccess).map(({ outfile, sourcemapOutfile, platform: platform2 }) => [
            {
              path: outfile,
              platform: platform2
            },
            {
              path: sourcemapOutfile,
              platform: platform2
            }
          ]).flat(),
          outfile: path6.join(cwd, `${appName}.ait`),
          appJsonPath: path6.join(packageRoot, ".granite", APP_MANIFEST_NAME),
          additionalFilesToZip,
          packageJson: {
            dependencies,
            devDependencies
          }
        });
        if (!artifactOutfile) {
          throw new Error("\uC544\uD2F0\uD329\uD2B8 \uC0DD\uC131\uC5D0 \uC2E4\uD328\uD588\uC5B4\uC694.");
        }
        const filename = path6.basename(artifactOutfile);
        f2.success(`${filename} \uBE4C\uB4DC \uC644\uB8CC`);
      }
    }
  };
}
function appsInTossWeb(deploymentId, options) {
  const result = validateAppInTossWebPluginOptions(options);
  if (!result.success) {
    console.error("[Apps In Toss Plugin] \uD50C\uB7EC\uADF8\uC778 \uC635\uC158\uC774 \uC62C\uBC14\uB974\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4. granite.config.ts \uAD6C\uC131\uC744 \uD655\uC778\uD574\uC8FC\uC138\uC694.");
    process.exit(1);
  }
  return [appsInTossAppJson(options), appsInTossWebBuild(options), appsInTossCreateArtifact(deploymentId)];
}

// src/plugins/resolvePlugins.ts
init_esm_shims();
var flattenPlugins = async (plugin) => {
  if (Array.isArray(plugin)) {
    const flattened = await Promise.all(
      plugin.map(async (p) => {
        if (p instanceof Promise) {
          const resolved2 = await p;
          if (Array.isArray(resolved2)) {
            const nested = await Promise.all(resolved2.map(flattenPlugins));
            return nested.flat();
          }
          return flattenPlugins(resolved2);
        }
        return flattenPlugins(p);
      })
    );
    return flattened.flat();
  }
  const resolved = await plugin;
  return [resolved];
};
async function resolvePlugins(plugins) {
  const pluginsResolved = await flattenPlugins(plugins);
  return {
    build: {
      preHandlers: pluginsResolved.filter((plugin) => plugin.build?.order === "pre").map((plugin) => plugin.build?.handler),
      postHandlers: pluginsResolved.filter((plugin) => plugin.build?.order === "post").map((plugin) => plugin.build?.handler)
    }
  };
}

// src/runPrebuildToBuild.ts
async function babelBuild({ platform: platform2, buildNumber, deploymentId, config }) {
  const prebuilt = fileURLToPath3(import.meta.resolve(`@apps-in-toss/web-framework/prebuilt/prod/${platform2}`));
  const bundle = await fs2.promises.readFile(prebuilt, "utf-8");
  const result = await transform(bundle, {
    babelrc: false,
    configFile: false,
    sourceMaps: true,
    plugins: [
      [
        babelJsonReplacementPlugin,
        {
          json: {
            appName: config.appName,
            webPort: "NOOP",
            webHost: "NOOP",
            buildNumber,
            deploymentId,
            brandDisplayName: config.brand.displayName,
            brandIcon: config.brand.icon,
            brandPrimaryColor: config.brand.primaryColor,
            brandBridgeColorMode: config.brand.bridgeColorMode,
            webViewType: config.webViewProps.type,
            navigationBar: JSON.stringify(config.navigationBar),
            ...config.webViewProps
          },
          identifierName: "Ait"
        }
      ]
    ],
    generatorOpts: {
      compact: false,
      comments: false
    }
  });
  return result;
}
async function writeBundle(result, { platform: platform2, config }) {
  if (!(result?.code && result?.map)) {
    throw new Error(`Failed to build ${platform2}`);
  }
  const packageRoot = getPackageRoot3();
  await fs2.promises.mkdir(path7.join(packageRoot, config.outdir), { recursive: true });
  const basePath = path7.join(packageRoot, config.outdir);
  const bundleName = `${config.appName}.${platform2}.js`;
  const bundlePath = path7.join(basePath, bundleName);
  const sourcemapPath = `${bundlePath}.map`;
  await fs2.promises.writeFile(bundlePath, result.code);
  await fs2.promises.writeFile(sourcemapPath, JSON.stringify(result.map));
  return { bundlePath, sourcemapPath };
}
function getBuildNumber() {
  const date = /* @__PURE__ */ new Date();
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const day = String(date.getDate()).padStart(2, "0");
  const hours = String(date.getHours()).padStart(2, "0");
  const minutes = String(date.getMinutes()).padStart(2, "0");
  const seconds = String(date.getSeconds()).padStart(2, "0");
  return `${year}${month}${day}${hours}${minutes}${seconds}`;
}
async function runPrebuildToBuild(cwd, config) {
  const buildNumber = getBuildNumber();
  const deploymentId = uuidv7();
  const resolvedPlugins = await resolvePlugins([
    appsInTossWeb(deploymentId, {
      commands: config.web.commands,
      permissions: config.permissions,
      brand: config.brand,
      webViewProps: config.webViewProps
    })
  ]);
  const pluginContext = {
    meta: /* @__PURE__ */ Object.create(null)
  };
  for (const preHandler of resolvedPlugins.build.preHandlers) {
    await preHandler?.call(pluginContext, {
      cwd,
      entryFile: "",
      appName: config.appName,
      outdir: config.outdir,
      buildResults: []
    });
  }
  const transformResults = [];
  await Te(
    ["ios", "android"].map((platform2) => ({
      title: `Building ${platform2}`,
      task: async () => {
        const buildResult = await babelBuild({
          config,
          platform: platform2,
          buildNumber,
          deploymentId
        });
        const { bundlePath, sourcemapPath } = await writeBundle(buildResult, { platform: platform2, config });
        transformResults.push({ bundlePath, sourcemapPath, platform: platform2 });
      }
    }))
  );
  for (const postHandler of resolvedPlugins.build.postHandlers) {
    await postHandler?.call(pluginContext, {
      cwd,
      entryFile: "",
      appName: config.appName,
      outdir: config.outdir,
      buildResults: transformResults.map(({ bundlePath, sourcemapPath, platform: platform2 }) => ({
        errors: [],
        warnings: [],
        tag: `${config.appName}-${platform2}`,
        outfile: bundlePath,
        sourcemapOutfile: sourcemapPath,
        extra: {},
        outputFiles: [],
        metafile: { inputs: {}, outputs: {} },
        mangleCache: {},
        bundle: {},
        duration: 0,
        platform: platform2,
        size: 0,
        totalModuleCount: 0
      }))
    });
  }
}

// src/cli/commands/BuildCommand.ts
var BuildCommand = class extends Command {
  static paths = [[`build`]];
  static usage = Command.Usage({
    category: "Build",
    description: "Granite App \uBC88\uB4E4\uC744 \uC0DD\uC131\uD569\uB2C8\uB2E4",
    examples: [
      ["\uBE4C\uB4DC\uD558\uAE30", "granite build"],
      ["\uC9C0\uC815\uB41C \uB300\uC0C1\uB9CC \uBE4C\uB4DC\uD558\uAE30", "granite build --id service-ios"]
    ]
  });
  tag = options_exports.String("--tag", {
    description: "\uAD6C\uC131 \uD30C\uC77C\uC5D0\uC11C \uC9C0\uC815\uD55C \uD0DC\uADF8\uC5D0 \uD574\uB2F9\uD558\uB294 \uB300\uC0C1\uB9CC \uBC88\uB4E4\uB9C1 \uD569\uB2C8\uB2E4"
  });
  disableCache = options_exports.Boolean("--disable-cache", {
    description: "\uCE90\uC2DC\uB97C \uBE44\uD65C\uC131\uD654 \uD569\uB2C8\uB2E4"
  });
  async execute() {
    const packageRoot = getPackageRoot4();
    const config = await loadConfig();
    await runPrebuildToBuild(packageRoot, config);
    f2.success("Build completed");
  }
};

// src/cli/commands/DevCommand.ts
init_esm_shims();
import { getPackageRoot as getPackageRoot5 } from "@granite-js/utils";

// ../../.yarn/__virtual__/@hono-node-server-virtual-cf2888014c/0/cache/@hono-node-server-npm-1.13.8-e78cfff928-5880892fdd.zip/node_modules/@hono/node-server/dist/index.mjs
init_esm_shims();
import { createServer as createServerHTTP } from "http";
import { Http2ServerRequest } from "http2";
import { Readable as Readable4 } from "stream";
import crypto2 from "crypto";
var RequestError = class extends Error {
  static name = "RequestError";
  constructor(message, options) {
    super(message, options);
  }
};
var toRequestError = (e2) => {
  if (e2 instanceof RequestError) {
    return e2;
  }
  return new RequestError(e2.message, { cause: e2 });
};
var GlobalRequest = global.Request;
var Request2 = class extends GlobalRequest {
  constructor(input, options) {
    if (typeof input === "object" && getRequestCache in input) {
      input = input[getRequestCache]();
    }
    if (typeof options?.body?.getReader !== "undefined") {
      ;
      options.duplex ??= "half";
    }
    super(input, options);
  }
};
var newRequestFromIncoming = (method, url, incoming, abortController) => {
  const headerRecord = [];
  const rawHeaders = incoming.rawHeaders;
  for (let i2 = 0; i2 < rawHeaders.length; i2 += 2) {
    const { [i2]: key, [i2 + 1]: value2 } = rawHeaders;
    if (key.charCodeAt(0) !== /*:*/
    58) {
      headerRecord.push([key, value2]);
    }
  }
  const init = {
    method,
    headers: headerRecord,
    signal: abortController.signal
  };
  if (method === "TRACE") {
    init.method = "GET";
    const req = new Request2(url, init);
    Object.defineProperty(req, "method", {
      get() {
        return "TRACE";
      }
    });
    return req;
  }
  if (!(method === "GET" || method === "HEAD")) {
    if ("rawBody" in incoming && incoming.rawBody instanceof Buffer) {
      init.body = new ReadableStream({
        start(controller) {
          controller.enqueue(incoming.rawBody);
          controller.close();
        }
      });
    } else {
      init.body = Readable4.toWeb(incoming);
    }
  }
  return new Request2(url, init);
};
var getRequestCache = Symbol("getRequestCache");
var requestCache = Symbol("requestCache");
var incomingKey = Symbol("incomingKey");
var urlKey = Symbol("urlKey");
var abortControllerKey = Symbol("abortControllerKey");
var getAbortController = Symbol("getAbortController");
var requestPrototype = {
  get method() {
    return this[incomingKey].method || "GET";
  },
  get url() {
    return this[urlKey];
  },
  [getAbortController]() {
    this[getRequestCache]();
    return this[abortControllerKey];
  },
  [getRequestCache]() {
    this[abortControllerKey] ||= new AbortController();
    return this[requestCache] ||= newRequestFromIncoming(
      this.method,
      this[urlKey],
      this[incomingKey],
      this[abortControllerKey]
    );
  }
};
[
  "body",
  "bodyUsed",
  "cache",
  "credentials",
  "destination",
  "headers",
  "integrity",
  "mode",
  "redirect",
  "referrer",
  "referrerPolicy",
  "signal",
  "keepalive"
].forEach((k3) => {
  Object.defineProperty(requestPrototype, k3, {
    get() {
      return this[getRequestCache]()[k3];
    }
  });
});
["arrayBuffer", "blob", "clone", "formData", "json", "text"].forEach((k3) => {
  Object.defineProperty(requestPrototype, k3, {
    value: function() {
      return this[getRequestCache]()[k3]();
    }
  });
});
Object.setPrototypeOf(requestPrototype, Request2.prototype);
var newRequest = (incoming, defaultHostname) => {
  const req = Object.create(requestPrototype);
  req[incomingKey] = incoming;
  const host = (incoming instanceof Http2ServerRequest ? incoming.authority : incoming.headers.host) || defaultHostname;
  if (!host) {
    throw new RequestError("Missing host header");
  }
  const url = new URL(
    `${incoming instanceof Http2ServerRequest || incoming.socket && incoming.socket.encrypted ? "https" : "http"}://${host}${incoming.url}`
  );
  if (url.hostname.length !== host.length && url.hostname !== host.replace(/:\d+$/, "")) {
    throw new RequestError("Invalid host header");
  }
  req[urlKey] = url.href;
  return req;
};
function writeFromReadableStream(stream, writable2) {
  if (stream.locked) {
    throw new TypeError("ReadableStream is locked.");
  } else if (writable2.destroyed) {
    stream.cancel();
    return;
  }
  const reader = stream.getReader();
  writable2.on("close", cancel);
  writable2.on("error", cancel);
  reader.read().then(flow, cancel);
  return reader.closed.finally(() => {
    writable2.off("close", cancel);
    writable2.off("error", cancel);
  });
  function cancel(error) {
    reader.cancel(error).catch(() => {
    });
    if (error) {
      writable2.destroy(error);
    }
  }
  function onDrain() {
    reader.read().then(flow, cancel);
  }
  function flow({ done, value: value2 }) {
    try {
      if (done) {
        writable2.end();
      } else if (!writable2.write(value2)) {
        writable2.once("drain", onDrain);
      } else {
        return reader.read().then(flow, cancel);
      }
    } catch (e2) {
      cancel(e2);
    }
  }
}
var buildOutgoingHttpHeaders = (headers) => {
  const res = {};
  if (!(headers instanceof Headers)) {
    headers = new Headers(headers ?? void 0);
  }
  const cookies = [];
  for (const [k3, v] of headers) {
    if (k3 === "set-cookie") {
      cookies.push(v);
    } else {
      res[k3] = v;
    }
  }
  if (cookies.length > 0) {
    res["set-cookie"] = cookies;
  }
  res["content-type"] ??= "text/plain; charset=UTF-8";
  return res;
};
var responseCache = Symbol("responseCache");
var getResponseCache = Symbol("getResponseCache");
var cacheKey = Symbol("cache");
var GlobalResponse = global.Response;
var Response2 = class _Response {
  #body;
  #init;
  [getResponseCache]() {
    delete this[cacheKey];
    return this[responseCache] ||= new GlobalResponse(this.#body, this.#init);
  }
  constructor(body, init) {
    this.#body = body;
    if (init instanceof _Response) {
      const cachedGlobalResponse = init[responseCache];
      if (cachedGlobalResponse) {
        this.#init = cachedGlobalResponse;
        this[getResponseCache]();
        return;
      } else {
        this.#init = init.#init;
      }
    } else {
      this.#init = init;
    }
    if (typeof body === "string" || typeof body?.getReader !== "undefined") {
      let headers = init?.headers || { "content-type": "text/plain; charset=UTF-8" };
      if (headers instanceof Headers) {
        headers = buildOutgoingHttpHeaders(headers);
      }
      ;
      this[cacheKey] = [init?.status || 200, body, headers];
    }
  }
};
[
  "body",
  "bodyUsed",
  "headers",
  "ok",
  "redirected",
  "status",
  "statusText",
  "trailers",
  "type",
  "url"
].forEach((k3) => {
  Object.defineProperty(Response2.prototype, k3, {
    get() {
      return this[getResponseCache]()[k3];
    }
  });
});
["arrayBuffer", "blob", "clone", "formData", "json", "text"].forEach((k3) => {
  Object.defineProperty(Response2.prototype, k3, {
    value: function() {
      return this[getResponseCache]()[k3]();
    }
  });
});
Object.setPrototypeOf(Response2, GlobalResponse);
Object.setPrototypeOf(Response2.prototype, GlobalResponse.prototype);
var stateKey = Reflect.ownKeys(new GlobalResponse()).find(
  (k3) => typeof k3 === "symbol" && k3.toString() === "Symbol(state)"
);
if (!stateKey) {
  console.warn("Failed to find Response internal state key");
}
function getInternalBody(response) {
  if (!stateKey) {
    return;
  }
  if (response instanceof Response2) {
    response = response[getResponseCache]();
  }
  const state = response[stateKey];
  return state && state.body || void 0;
}
var X_ALREADY_SENT = "x-hono-already-sent";
var webFetch = global.fetch;
if (typeof global.crypto === "undefined") {
  global.crypto = crypto2;
}
global.fetch = (info, init) => {
  init = {
    // Disable compression handling so people can return the result of a fetch
    // directly in the loader without messing with the Content-Encoding header.
    compress: false,
    ...init
  };
  return webFetch(info, init);
};
var regBuffer = /^no$/i;
var regContentType = /^(application\/json\b|text\/(?!event-stream\b))/i;
var handleRequestError = () => new Response(null, {
  status: 400
});
var handleFetchError = (e2) => new Response(null, {
  status: e2 instanceof Error && (e2.name === "TimeoutError" || e2.constructor.name === "TimeoutError") ? 504 : 500
});
var handleResponseError = (e2, outgoing) => {
  const err = e2 instanceof Error ? e2 : new Error("unknown error", { cause: e2 });
  if (err.code === "ERR_STREAM_PREMATURE_CLOSE") {
    console.info("The user aborted a request.");
  } else {
    console.error(e2);
    if (!outgoing.headersSent) {
      outgoing.writeHead(500, { "Content-Type": "text/plain" });
    }
    outgoing.end(`Error: ${err.message}`);
    outgoing.destroy(err);
  }
};
var responseViaCache = (res, outgoing) => {
  const [status, body, header] = res[cacheKey];
  if (typeof body === "string") {
    header["Content-Length"] = Buffer.byteLength(body);
    outgoing.writeHead(status, header);
    outgoing.end(body);
  } else {
    outgoing.writeHead(status, header);
    return writeFromReadableStream(body, outgoing)?.catch(
      (e2) => handleResponseError(e2, outgoing)
    );
  }
};
var responseViaResponseObject = async (res, outgoing, options = {}) => {
  if (res instanceof Promise) {
    if (options.errorHandler) {
      try {
        res = await res;
      } catch (err) {
        const errRes = await options.errorHandler(err);
        if (!errRes) {
          return;
        }
        res = errRes;
      }
    } else {
      res = await res.catch(handleFetchError);
    }
  }
  if (cacheKey in res) {
    return responseViaCache(res, outgoing);
  }
  const resHeaderRecord = buildOutgoingHttpHeaders(res.headers);
  const internalBody = getInternalBody(res);
  if (internalBody) {
    const { length, source, stream } = internalBody;
    if (source instanceof Uint8Array && source.byteLength !== length) {
    } else {
      if (length) {
        resHeaderRecord["content-length"] = length;
      }
      outgoing.writeHead(res.status, resHeaderRecord);
      if (typeof source === "string" || source instanceof Uint8Array) {
        outgoing.end(source);
      } else if (source instanceof Blob) {
        outgoing.end(new Uint8Array(await source.arrayBuffer()));
      } else {
        await writeFromReadableStream(stream, outgoing);
      }
      return;
    }
  }
  if (res.body) {
    const {
      "transfer-encoding": transferEncoding,
      "content-encoding": contentEncoding,
      "content-length": contentLength,
      "x-accel-buffering": accelBuffering,
      "content-type": contentType
    } = resHeaderRecord;
    if (transferEncoding || contentEncoding || contentLength || // nginx buffering variant
    accelBuffering && regBuffer.test(accelBuffering) || !regContentType.test(contentType)) {
      outgoing.writeHead(res.status, resHeaderRecord);
      await writeFromReadableStream(res.body, outgoing);
    } else {
      const buffer = await res.arrayBuffer();
      resHeaderRecord["content-length"] = buffer.byteLength;
      outgoing.writeHead(res.status, resHeaderRecord);
      outgoing.end(new Uint8Array(buffer));
    }
  } else if (resHeaderRecord[X_ALREADY_SENT]) {
  } else {
    outgoing.writeHead(res.status, resHeaderRecord);
    outgoing.end();
  }
};
var getRequestListener = (fetchCallback, options = {}) => {
  if (options.overrideGlobalObjects !== false && global.Request !== Request2) {
    Object.defineProperty(global, "Request", {
      value: Request2
    });
    Object.defineProperty(global, "Response", {
      value: Response2
    });
  }
  return async (incoming, outgoing) => {
    let res, req;
    try {
      req = newRequest(incoming, options.hostname);
      outgoing.on("close", () => {
        const abortController = req[abortControllerKey];
        if (!abortController) {
          return;
        }
        if (incoming.errored) {
          req[abortControllerKey].abort(incoming.errored.toString());
        } else if (!outgoing.writableFinished) {
          req[abortControllerKey].abort("Client connection prematurely closed.");
        }
      });
      res = fetchCallback(req, { incoming, outgoing });
      if (cacheKey in res) {
        return responseViaCache(res, outgoing);
      }
    } catch (e2) {
      if (!res) {
        if (options.errorHandler) {
          res = await options.errorHandler(req ? e2 : toRequestError(e2));
          if (!res) {
            return;
          }
        } else if (!req) {
          res = handleRequestError();
        } else {
          res = handleFetchError(e2);
        }
      } else {
        return handleResponseError(e2, outgoing);
      }
    }
    try {
      return responseViaResponseObject(res, outgoing, options);
    } catch (e2) {
      return handleResponseError(e2, outgoing);
    }
  };
};
var createAdaptorServer = (options) => {
  const fetchCallback = options.fetch;
  const requestListener = getRequestListener(fetchCallback, {
    hostname: options.hostname,
    overrideGlobalObjects: options.overrideGlobalObjects
  });
  const createServer = options.createServer || createServerHTTP;
  const server = createServer(options.serverOptions || {}, requestListener);
  return server;
};
var serve = (options, listeningListener) => {
  const server = createAdaptorServer(options);
  server.listen(options?.port ?? 3e3, options.hostname, () => {
    const serverInfo = server.address();
    listeningListener && listeningListener(serverInfo);
  });
  return server;
};

// src/server.ts
init_esm_shims();
import fs3 from "fs";
import path8 from "path";
import { fileURLToPath as fileURLToPath4 } from "url";
import { transform as transform2 } from "@babel/core";

// ../../.yarn/__virtual__/@hono-node-ws-virtual-785f464fc0/0/cache/@hono-node-ws-npm-1.1.3-0f8a52633d-8b87483902.zip/node_modules/@hono/node-ws/dist/index.js
init_esm_shims();

// ../../.yarn/__virtual__/ws-virtual-8cab04b328/0/cache/ws-npm-8.18.1-166778b26f-e498965d69.zip/node_modules/ws/wrapper.mjs
init_esm_shims();
var import_stream4 = __toESM(require_stream(), 1);
var import_receiver = __toESM(require_receiver(), 1);
var import_sender = __toESM(require_sender(), 1);
var import_websocket = __toESM(require_websocket(), 1);
var import_websocket_server = __toESM(require_websocket_server(), 1);

// ../../.yarn/__virtual__/@hono-node-ws-virtual-785f464fc0/0/cache/@hono-node-ws-npm-1.1.3-0f8a52633d-8b87483902.zip/node_modules/@hono/node-ws/dist/index.js
var CloseEvent = globalThis.CloseEvent ?? class extends Event {
  #eventInitDict;
  constructor(type, eventInitDict = {}) {
    super(type, eventInitDict);
    this.#eventInitDict = eventInitDict;
  }
  get wasClean() {
    return this.#eventInitDict.wasClean ?? false;
  }
  get code() {
    return this.#eventInitDict.code ?? 0;
  }
  get reason() {
    return this.#eventInitDict.reason ?? "";
  }
};
var createNodeWebSocket = (init) => {
  const wss = new import_websocket_server.default({ noServer: true });
  const waiterMap = /* @__PURE__ */ new Map();
  wss.on("connection", (ws, request) => {
    const waiter = waiterMap.get(request);
    if (waiter) {
      waiter.resolve(ws);
      waiterMap.delete(request);
    }
  });
  const nodeUpgradeWebSocket = (request, response) => {
    return new Promise((resolve) => {
      waiterMap.set(request, { resolve, response });
    });
  };
  return {
    injectWebSocket(server) {
      server.on("upgrade", async (request, socket, head) => {
        const url = new URL(request.url ?? "/", init.baseUrl ?? "http://localhost");
        const headers = new Headers();
        for (const key in request.headers) {
          const value2 = request.headers[key];
          if (!value2) {
            continue;
          }
          headers.append(key, Array.isArray(value2) ? value2[0] : value2);
        }
        const response = await init.app.request(
          url,
          { headers },
          { incoming: request, outgoing: void 0 }
        );
        const waiter = waiterMap.get(request);
        if (!waiter || waiter.response !== response) {
          socket.end(
            "HTTP/1.1 400 Bad Request\r\nConnection: close\r\nContent-Length: 0\r\n\r\n"
          );
          waiterMap.delete(request);
          return;
        }
        wss.handleUpgrade(request, socket, head, (ws) => {
          wss.emit("connection", ws, request);
        });
      });
    },
    upgradeWebSocket: (createEvents, options) => async function upgradeWebSocket(c4, next) {
      if (c4.req.header("upgrade")?.toLowerCase() !== "websocket") {
        await next();
        return;
      }
      const response = new Response();
      (async () => {
        const ws = await nodeUpgradeWebSocket(c4.env.incoming, response);
        let events;
        try {
          events = await createEvents(c4);
        } catch (e2) {
          ;
          (options?.onError ?? console.error)(e2);
          ws.close();
          return;
        }
        const ctx = {
          binaryType: "arraybuffer",
          close(code, reason) {
            ws.close(code, reason);
          },
          protocol: ws.protocol,
          raw: ws,
          get readyState() {
            return ws.readyState;
          },
          send(source, opts) {
            ws.send(source, {
              compress: opts?.compress
            });
          },
          url: new URL(c4.req.url)
        };
        try {
          events?.onOpen?.(new Event("open"), ctx);
        } catch (e2) {
          ;
          (options?.onError ?? console.error)(e2);
        }
        ws.on("message", (data, isBinary) => {
          const datas = Array.isArray(data) ? data : [data];
          for (const data2 of datas) {
            try {
              events?.onMessage?.(
                new MessageEvent("message", {
                  data: isBinary ? data2 instanceof ArrayBuffer ? data2 : data2.buffer.slice(data2.byteOffset, data2.byteOffset + data2.byteLength) : data2.toString("utf-8")
                }),
                ctx
              );
            } catch (e2) {
              ;
              (options?.onError ?? console.error)(e2);
            }
          }
        });
        ws.on("close", (code, reason) => {
          try {
            events?.onClose?.(new CloseEvent("close", { code, reason: reason.toString() }), ctx);
          } catch (e2) {
            ;
            (options?.onError ?? console.error)(e2);
          }
        });
        ws.on("error", (error) => {
          try {
            events?.onError?.(
              new ErrorEvent("error", {
                error
              }),
              ctx
            );
          } catch (e2) {
            ;
            (options?.onError ?? console.error)(e2);
          }
        });
      })();
      return response;
    }
  };
};

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/index.js
init_esm_shims();

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/hono.js
init_esm_shims();

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/hono-base.js
init_esm_shims();

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/compose.js
init_esm_shims();
var compose = (middleware, onError, onNotFound) => {
  return (context, next) => {
    let index = -1;
    return dispatch(0);
    async function dispatch(i2) {
      if (i2 <= index) {
        throw new Error("next() called multiple times");
      }
      index = i2;
      let res;
      let isError = false;
      let handler;
      if (middleware[i2]) {
        handler = middleware[i2][0][0];
        context.req.routeIndex = i2;
      } else {
        handler = i2 === middleware.length && next || void 0;
      }
      if (handler) {
        try {
          res = await handler(context, () => dispatch(i2 + 1));
        } catch (err) {
          if (err instanceof Error && onError) {
            context.error = err;
            res = await onError(err, context);
            isError = true;
          } else {
            throw err;
          }
        }
      } else {
        if (context.finalized === false && onNotFound) {
          res = await onNotFound(context);
        }
      }
      if (res && (context.finalized === false || isError)) {
        context.res = res;
      }
      return context;
    }
  };
};

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/context.js
init_esm_shims();

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/request.js
init_esm_shims();

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/utils/body.js
init_esm_shims();
var parseBody = async (request, options = /* @__PURE__ */ Object.create(null)) => {
  const { all = false, dot = false } = options;
  const headers = request instanceof HonoRequest ? request.raw.headers : request.headers;
  const contentType = headers.get("Content-Type");
  if (contentType?.startsWith("multipart/form-data") || contentType?.startsWith("application/x-www-form-urlencoded")) {
    return parseFormData(request, { all, dot });
  }
  return {};
};
async function parseFormData(request, options) {
  const formData = await request.formData();
  if (formData) {
    return convertFormDataToBodyData(formData, options);
  }
  return {};
}
function convertFormDataToBodyData(formData, options) {
  const form = /* @__PURE__ */ Object.create(null);
  formData.forEach((value2, key) => {
    const shouldParseAllValues = options.all || key.endsWith("[]");
    if (!shouldParseAllValues) {
      form[key] = value2;
    } else {
      handleParsingAllValues(form, key, value2);
    }
  });
  if (options.dot) {
    Object.entries(form).forEach(([key, value2]) => {
      const shouldParseDotValues = key.includes(".");
      if (shouldParseDotValues) {
        handleParsingNestedValues(form, key, value2);
        delete form[key];
      }
    });
  }
  return form;
}
var handleParsingAllValues = (form, key, value2) => {
  if (form[key] !== void 0) {
    if (Array.isArray(form[key])) {
      ;
      form[key].push(value2);
    } else {
      form[key] = [form[key], value2];
    }
  } else {
    form[key] = value2;
  }
};
var handleParsingNestedValues = (form, key, value2) => {
  let nestedForm = form;
  const keys = key.split(".");
  keys.forEach((key2, index) => {
    if (index === keys.length - 1) {
      nestedForm[key2] = value2;
    } else {
      if (!nestedForm[key2] || typeof nestedForm[key2] !== "object" || Array.isArray(nestedForm[key2]) || nestedForm[key2] instanceof File) {
        nestedForm[key2] = /* @__PURE__ */ Object.create(null);
      }
      nestedForm = nestedForm[key2];
    }
  });
};

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/utils/url.js
init_esm_shims();
var splitPath = (path9) => {
  const paths = path9.split("/");
  if (paths[0] === "") {
    paths.shift();
  }
  return paths;
};
var splitRoutingPath = (routePath) => {
  const { groups, path: path9 } = extractGroupsFromPath(routePath);
  const paths = splitPath(path9);
  return replaceGroupMarks(paths, groups);
};
var extractGroupsFromPath = (path9) => {
  const groups = [];
  path9 = path9.replace(/\{[^}]+\}/g, (match, index) => {
    const mark = `@${index}`;
    groups.push([mark, match]);
    return mark;
  });
  return { groups, path: path9 };
};
var replaceGroupMarks = (paths, groups) => {
  for (let i2 = groups.length - 1; i2 >= 0; i2--) {
    const [mark] = groups[i2];
    for (let j2 = paths.length - 1; j2 >= 0; j2--) {
      if (paths[j2].includes(mark)) {
        paths[j2] = paths[j2].replace(mark, groups[i2][1]);
        break;
      }
    }
  }
  return paths;
};
var patternCache = {};
var getPattern = (label, next) => {
  if (label === "*") {
    return "*";
  }
  const match = label.match(/^\:([^\{\}]+)(?:\{(.+)\})?$/);
  if (match) {
    const cacheKey2 = `${label}#${next}`;
    if (!patternCache[cacheKey2]) {
      if (match[2]) {
        patternCache[cacheKey2] = next && next[0] !== ":" && next[0] !== "*" ? [cacheKey2, match[1], new RegExp(`^${match[2]}(?=/${next})`)] : [label, match[1], new RegExp(`^${match[2]}$`)];
      } else {
        patternCache[cacheKey2] = [label, match[1], true];
      }
    }
    return patternCache[cacheKey2];
  }
  return null;
};
var tryDecode = (str, decoder) => {
  try {
    return decoder(str);
  } catch {
    return str.replace(/(?:%[0-9A-Fa-f]{2})+/g, (match) => {
      try {
        return decoder(match);
      } catch {
        return match;
      }
    });
  }
};
var tryDecodeURI = (str) => tryDecode(str, decodeURI);
var getPath = (request) => {
  const url = request.url;
  const start = url.indexOf("/", 8);
  let i2 = start;
  for (; i2 < url.length; i2++) {
    const charCode = url.charCodeAt(i2);
    if (charCode === 37) {
      const queryIndex = url.indexOf("?", i2);
      const path9 = url.slice(start, queryIndex === -1 ? void 0 : queryIndex);
      return tryDecodeURI(path9.includes("%25") ? path9.replace(/%25/g, "%2525") : path9);
    } else if (charCode === 63) {
      break;
    }
  }
  return url.slice(start, i2);
};
var getPathNoStrict = (request) => {
  const result = getPath(request);
  return result.length > 1 && result.at(-1) === "/" ? result.slice(0, -1) : result;
};
var mergePath = (base, sub, ...rest) => {
  if (rest.length) {
    sub = mergePath(sub, ...rest);
  }
  return `${base?.[0] === "/" ? "" : "/"}${base}${sub === "/" ? "" : `${base?.at(-1) === "/" ? "" : "/"}${sub?.[0] === "/" ? sub.slice(1) : sub}`}`;
};
var checkOptionalParameter = (path9) => {
  if (path9.charCodeAt(path9.length - 1) !== 63 || !path9.includes(":")) {
    return null;
  }
  const segments = path9.split("/");
  const results = [];
  let basePath = "";
  segments.forEach((segment) => {
    if (segment !== "" && !/\:/.test(segment)) {
      basePath += "/" + segment;
    } else if (/\:/.test(segment)) {
      if (/\?/.test(segment)) {
        if (results.length === 0 && basePath === "") {
          results.push("/");
        } else {
          results.push(basePath);
        }
        const optionalSegment = segment.replace("?", "");
        basePath += "/" + optionalSegment;
        results.push(basePath);
      } else {
        basePath += "/" + segment;
      }
    }
  });
  return results.filter((v, i2, a2) => a2.indexOf(v) === i2);
};
var _decodeURI = (value2) => {
  if (!/[%+]/.test(value2)) {
    return value2;
  }
  if (value2.indexOf("+") !== -1) {
    value2 = value2.replace(/\+/g, " ");
  }
  return value2.indexOf("%") !== -1 ? decodeURIComponent_(value2) : value2;
};
var _getQueryParam = (url, key, multiple) => {
  let encoded;
  if (!multiple && key && !/[%+]/.test(key)) {
    let keyIndex2 = url.indexOf(`?${key}`, 8);
    if (keyIndex2 === -1) {
      keyIndex2 = url.indexOf(`&${key}`, 8);
    }
    while (keyIndex2 !== -1) {
      const trailingKeyCode = url.charCodeAt(keyIndex2 + key.length + 1);
      if (trailingKeyCode === 61) {
        const valueIndex = keyIndex2 + key.length + 2;
        const endIndex = url.indexOf("&", valueIndex);
        return _decodeURI(url.slice(valueIndex, endIndex === -1 ? void 0 : endIndex));
      } else if (trailingKeyCode == 38 || isNaN(trailingKeyCode)) {
        return "";
      }
      keyIndex2 = url.indexOf(`&${key}`, keyIndex2 + 1);
    }
    encoded = /[%+]/.test(url);
    if (!encoded) {
      return void 0;
    }
  }
  const results = {};
  encoded ??= /[%+]/.test(url);
  let keyIndex = url.indexOf("?", 8);
  while (keyIndex !== -1) {
    const nextKeyIndex = url.indexOf("&", keyIndex + 1);
    let valueIndex = url.indexOf("=", keyIndex);
    if (valueIndex > nextKeyIndex && nextKeyIndex !== -1) {
      valueIndex = -1;
    }
    let name = url.slice(
      keyIndex + 1,
      valueIndex === -1 ? nextKeyIndex === -1 ? void 0 : nextKeyIndex : valueIndex
    );
    if (encoded) {
      name = _decodeURI(name);
    }
    keyIndex = nextKeyIndex;
    if (name === "") {
      continue;
    }
    let value2;
    if (valueIndex === -1) {
      value2 = "";
    } else {
      value2 = url.slice(valueIndex + 1, nextKeyIndex === -1 ? void 0 : nextKeyIndex);
      if (encoded) {
        value2 = _decodeURI(value2);
      }
    }
    if (multiple) {
      if (!(results[name] && Array.isArray(results[name]))) {
        results[name] = [];
      }
      ;
      results[name].push(value2);
    } else {
      results[name] ??= value2;
    }
  }
  return key ? results[key] : results;
};
var getQueryParam = _getQueryParam;
var getQueryParams = (url, key) => {
  return _getQueryParam(url, key, true);
};
var decodeURIComponent_ = decodeURIComponent;

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/request.js
var tryDecodeURIComponent = (str) => tryDecode(str, decodeURIComponent_);
var HonoRequest = class {
  raw;
  #validatedData;
  #matchResult;
  routeIndex = 0;
  path;
  bodyCache = {};
  constructor(request, path9 = "/", matchResult = [[]]) {
    this.raw = request;
    this.path = path9;
    this.#matchResult = matchResult;
    this.#validatedData = {};
  }
  param(key) {
    return key ? this.#getDecodedParam(key) : this.#getAllDecodedParams();
  }
  #getDecodedParam(key) {
    const paramKey = this.#matchResult[0][this.routeIndex][1][key];
    const param = this.#getParamValue(paramKey);
    return param ? /\%/.test(param) ? tryDecodeURIComponent(param) : param : void 0;
  }
  #getAllDecodedParams() {
    const decoded = {};
    const keys = Object.keys(this.#matchResult[0][this.routeIndex][1]);
    for (const key of keys) {
      const value2 = this.#getParamValue(this.#matchResult[0][this.routeIndex][1][key]);
      if (value2 && typeof value2 === "string") {
        decoded[key] = /\%/.test(value2) ? tryDecodeURIComponent(value2) : value2;
      }
    }
    return decoded;
  }
  #getParamValue(paramKey) {
    return this.#matchResult[1] ? this.#matchResult[1][paramKey] : paramKey;
  }
  query(key) {
    return getQueryParam(this.url, key);
  }
  queries(key) {
    return getQueryParams(this.url, key);
  }
  header(name) {
    if (name) {
      return this.raw.headers.get(name) ?? void 0;
    }
    const headerData = {};
    this.raw.headers.forEach((value2, key) => {
      headerData[key] = value2;
    });
    return headerData;
  }
  async parseBody(options) {
    return this.bodyCache.parsedBody ??= await parseBody(this, options);
  }
  #cachedBody = (key) => {
    const { bodyCache, raw: raw2 } = this;
    const cachedBody = bodyCache[key];
    if (cachedBody) {
      return cachedBody;
    }
    const anyCachedKey = Object.keys(bodyCache)[0];
    if (anyCachedKey) {
      return bodyCache[anyCachedKey].then((body) => {
        if (anyCachedKey === "json") {
          body = JSON.stringify(body);
        }
        return new Response(body)[key]();
      });
    }
    return bodyCache[key] = raw2[key]();
  };
  json() {
    return this.#cachedBody("json");
  }
  text() {
    return this.#cachedBody("text");
  }
  arrayBuffer() {
    return this.#cachedBody("arrayBuffer");
  }
  blob() {
    return this.#cachedBody("blob");
  }
  formData() {
    return this.#cachedBody("formData");
  }
  addValidatedData(target, data) {
    this.#validatedData[target] = data;
  }
  valid(target) {
    return this.#validatedData[target];
  }
  get url() {
    return this.raw.url;
  }
  get method() {
    return this.raw.method;
  }
  get matchedRoutes() {
    return this.#matchResult[0].map(([[, route]]) => route);
  }
  get routePath() {
    return this.#matchResult[0].map(([[, route]]) => route)[this.routeIndex].path;
  }
};

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/utils/html.js
init_esm_shims();
var HtmlEscapedCallbackPhase = {
  Stringify: 1,
  BeforeStream: 2,
  Stream: 3
};
var raw = (value2, callbacks) => {
  const escapedString = new String(value2);
  escapedString.isEscaped = true;
  escapedString.callbacks = callbacks;
  return escapedString;
};
var resolveCallback = async (str, phase, preserveCallbacks, context, buffer) => {
  if (typeof str === "object" && !(str instanceof String)) {
    if (!(str instanceof Promise)) {
      str = str.toString();
    }
    if (str instanceof Promise) {
      str = await str;
    }
  }
  const callbacks = str.callbacks;
  if (!callbacks?.length) {
    return Promise.resolve(str);
  }
  if (buffer) {
    buffer[0] += str;
  } else {
    buffer = [str];
  }
  const resStr = Promise.all(callbacks.map((c4) => c4({ phase, buffer, context }))).then(
    (res) => Promise.all(
      res.filter(Boolean).map((str2) => resolveCallback(str2, phase, false, context, buffer))
    ).then(() => buffer[0])
  );
  if (preserveCallbacks) {
    return raw(await resStr, callbacks);
  } else {
    return resStr;
  }
};

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/context.js
var TEXT_PLAIN = "text/plain; charset=UTF-8";
var setHeaders = (headers, map = {}) => {
  for (const key of Object.keys(map)) {
    headers.set(key, map[key]);
  }
  return headers;
};
var Context = class {
  #rawRequest;
  #req;
  env = {};
  #var;
  finalized = false;
  error;
  #status = 200;
  #executionCtx;
  #headers;
  #preparedHeaders;
  #res;
  #isFresh = true;
  #layout;
  #renderer;
  #notFoundHandler;
  #matchResult;
  #path;
  constructor(req, options) {
    this.#rawRequest = req;
    if (options) {
      this.#executionCtx = options.executionCtx;
      this.env = options.env;
      this.#notFoundHandler = options.notFoundHandler;
      this.#path = options.path;
      this.#matchResult = options.matchResult;
    }
  }
  get req() {
    this.#req ??= new HonoRequest(this.#rawRequest, this.#path, this.#matchResult);
    return this.#req;
  }
  get event() {
    if (this.#executionCtx && "respondWith" in this.#executionCtx) {
      return this.#executionCtx;
    } else {
      throw Error("This context has no FetchEvent");
    }
  }
  get executionCtx() {
    if (this.#executionCtx) {
      return this.#executionCtx;
    } else {
      throw Error("This context has no ExecutionContext");
    }
  }
  get res() {
    this.#isFresh = false;
    return this.#res ||= new Response("404 Not Found", { status: 404 });
  }
  set res(_res) {
    this.#isFresh = false;
    if (this.#res && _res) {
      try {
        for (const [k3, v] of this.#res.headers.entries()) {
          if (k3 === "content-type") {
            continue;
          }
          if (k3 === "set-cookie") {
            const cookies = this.#res.headers.getSetCookie();
            _res.headers.delete("set-cookie");
            for (const cookie of cookies) {
              _res.headers.append("set-cookie", cookie);
            }
          } else {
            _res.headers.set(k3, v);
          }
        }
      } catch (e2) {
        if (e2 instanceof TypeError && e2.message.includes("immutable")) {
          this.res = new Response(_res.body, {
            headers: _res.headers,
            status: _res.status
          });
          return;
        } else {
          throw e2;
        }
      }
    }
    this.#res = _res;
    this.finalized = true;
  }
  render = (...args) => {
    this.#renderer ??= (content) => this.html(content);
    return this.#renderer(...args);
  };
  setLayout = (layout) => this.#layout = layout;
  getLayout = () => this.#layout;
  setRenderer = (renderer) => {
    this.#renderer = renderer;
  };
  header = (name, value2, options) => {
    if (value2 === void 0) {
      if (this.#headers) {
        this.#headers.delete(name);
      } else if (this.#preparedHeaders) {
        delete this.#preparedHeaders[name.toLocaleLowerCase()];
      }
      if (this.finalized) {
        this.res.headers.delete(name);
      }
      return;
    }
    if (options?.append) {
      if (!this.#headers) {
        this.#isFresh = false;
        this.#headers = new Headers(this.#preparedHeaders);
        this.#preparedHeaders = {};
      }
      this.#headers.append(name, value2);
    } else {
      if (this.#headers) {
        this.#headers.set(name, value2);
      } else {
        this.#preparedHeaders ??= {};
        this.#preparedHeaders[name.toLowerCase()] = value2;
      }
    }
    if (this.finalized) {
      if (options?.append) {
        this.res.headers.append(name, value2);
      } else {
        this.res.headers.set(name, value2);
      }
    }
  };
  status = (status) => {
    this.#isFresh = false;
    this.#status = status;
  };
  set = (key, value2) => {
    this.#var ??= /* @__PURE__ */ new Map();
    this.#var.set(key, value2);
  };
  get = (key) => {
    return this.#var ? this.#var.get(key) : void 0;
  };
  get var() {
    if (!this.#var) {
      return {};
    }
    return Object.fromEntries(this.#var);
  }
  #newResponse(data, arg, headers) {
    if (this.#isFresh && !headers && !arg && this.#status === 200) {
      return new Response(data, {
        headers: this.#preparedHeaders
      });
    }
    if (arg && typeof arg !== "number") {
      const header = new Headers(arg.headers);
      if (this.#headers) {
        this.#headers.forEach((v, k3) => {
          if (k3 === "set-cookie") {
            header.append(k3, v);
          } else {
            header.set(k3, v);
          }
        });
      }
      const headers2 = setHeaders(header, this.#preparedHeaders);
      return new Response(data, {
        headers: headers2,
        status: arg.status ?? this.#status
      });
    }
    const status = typeof arg === "number" ? arg : this.#status;
    this.#preparedHeaders ??= {};
    this.#headers ??= new Headers();
    setHeaders(this.#headers, this.#preparedHeaders);
    if (this.#res) {
      this.#res.headers.forEach((v, k3) => {
        if (k3 === "set-cookie") {
          this.#headers?.append(k3, v);
        } else {
          this.#headers?.set(k3, v);
        }
      });
      setHeaders(this.#headers, this.#preparedHeaders);
    }
    headers ??= {};
    for (const [k3, v] of Object.entries(headers)) {
      if (typeof v === "string") {
        this.#headers.set(k3, v);
      } else {
        this.#headers.delete(k3);
        for (const v2 of v) {
          this.#headers.append(k3, v2);
        }
      }
    }
    return new Response(data, {
      status,
      headers: this.#headers
    });
  }
  newResponse = (...args) => this.#newResponse(...args);
  body = (data, arg, headers) => {
    return typeof arg === "number" ? this.#newResponse(data, arg, headers) : this.#newResponse(data, arg);
  };
  text = (text, arg, headers) => {
    if (!this.#preparedHeaders) {
      if (this.#isFresh && !headers && !arg) {
        return new Response(text);
      }
      this.#preparedHeaders = {};
    }
    this.#preparedHeaders["content-type"] = TEXT_PLAIN;
    if (typeof arg === "number") {
      return this.#newResponse(text, arg, headers);
    }
    return this.#newResponse(text, arg);
  };
  json = (object, arg, headers) => {
    const body = JSON.stringify(object);
    this.#preparedHeaders ??= {};
    this.#preparedHeaders["content-type"] = "application/json";
    return typeof arg === "number" ? this.#newResponse(body, arg, headers) : this.#newResponse(body, arg);
  };
  html = (html, arg, headers) => {
    this.#preparedHeaders ??= {};
    this.#preparedHeaders["content-type"] = "text/html; charset=UTF-8";
    if (typeof html === "object") {
      return resolveCallback(html, HtmlEscapedCallbackPhase.Stringify, false, {}).then((html2) => {
        return typeof arg === "number" ? this.#newResponse(html2, arg, headers) : this.#newResponse(html2, arg);
      });
    }
    return typeof arg === "number" ? this.#newResponse(html, arg, headers) : this.#newResponse(html, arg);
  };
  redirect = (location, status) => {
    this.#headers ??= new Headers();
    this.#headers.set("Location", String(location));
    return this.newResponse(null, status ?? 302);
  };
  notFound = () => {
    this.#notFoundHandler ??= () => new Response();
    return this.#notFoundHandler(this);
  };
};

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/router.js
init_esm_shims();
var METHOD_NAME_ALL = "ALL";
var METHOD_NAME_ALL_LOWERCASE = "all";
var METHODS = ["get", "post", "put", "delete", "options", "patch"];
var MESSAGE_MATCHER_IS_ALREADY_BUILT = "Can not add a route since the matcher is already built.";
var UnsupportedPathError = class extends Error {
};

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/utils/constants.js
init_esm_shims();
var COMPOSED_HANDLER = "__COMPOSED_HANDLER";

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/hono-base.js
var notFoundHandler = (c4) => {
  return c4.text("404 Not Found", 404);
};
var errorHandler = (err, c4) => {
  if ("getResponse" in err) {
    return err.getResponse();
  }
  console.error(err);
  return c4.text("Internal Server Error", 500);
};
var Hono = class {
  get;
  post;
  put;
  delete;
  options;
  patch;
  all;
  on;
  use;
  router;
  getPath;
  _basePath = "/";
  #path = "/";
  routes = [];
  constructor(options = {}) {
    const allMethods = [...METHODS, METHOD_NAME_ALL_LOWERCASE];
    allMethods.forEach((method) => {
      this[method] = (args1, ...args) => {
        if (typeof args1 === "string") {
          this.#path = args1;
        } else {
          this.#addRoute(method, this.#path, args1);
        }
        args.forEach((handler) => {
          this.#addRoute(method, this.#path, handler);
        });
        return this;
      };
    });
    this.on = (method, path9, ...handlers) => {
      for (const p of [path9].flat()) {
        this.#path = p;
        for (const m2 of [method].flat()) {
          handlers.map((handler) => {
            this.#addRoute(m2.toUpperCase(), this.#path, handler);
          });
        }
      }
      return this;
    };
    this.use = (arg1, ...handlers) => {
      if (typeof arg1 === "string") {
        this.#path = arg1;
      } else {
        this.#path = "*";
        handlers.unshift(arg1);
      }
      handlers.forEach((handler) => {
        this.#addRoute(METHOD_NAME_ALL, this.#path, handler);
      });
      return this;
    };
    const { strict, ...optionsWithoutStrict } = options;
    Object.assign(this, optionsWithoutStrict);
    this.getPath = strict ?? true ? options.getPath ?? getPath : getPathNoStrict;
  }
  #clone() {
    const clone = new Hono({
      router: this.router,
      getPath: this.getPath
    });
    clone.routes = this.routes;
    return clone;
  }
  #notFoundHandler = notFoundHandler;
  errorHandler = errorHandler;
  route(path9, app) {
    const subApp = this.basePath(path9);
    app.routes.map((r2) => {
      let handler;
      if (app.errorHandler === errorHandler) {
        handler = r2.handler;
      } else {
        handler = async (c4, next) => (await compose([], app.errorHandler)(c4, () => r2.handler(c4, next))).res;
        handler[COMPOSED_HANDLER] = r2.handler;
      }
      subApp.#addRoute(r2.method, r2.path, handler);
    });
    return this;
  }
  basePath(path9) {
    const subApp = this.#clone();
    subApp._basePath = mergePath(this._basePath, path9);
    return subApp;
  }
  onError = (handler) => {
    this.errorHandler = handler;
    return this;
  };
  notFound = (handler) => {
    this.#notFoundHandler = handler;
    return this;
  };
  mount(path9, applicationHandler, options) {
    let replaceRequest;
    let optionHandler;
    if (options) {
      if (typeof options === "function") {
        optionHandler = options;
      } else {
        optionHandler = options.optionHandler;
        replaceRequest = options.replaceRequest;
      }
    }
    const getOptions = optionHandler ? (c4) => {
      const options2 = optionHandler(c4);
      return Array.isArray(options2) ? options2 : [options2];
    } : (c4) => {
      let executionContext = void 0;
      try {
        executionContext = c4.executionCtx;
      } catch {
      }
      return [c4.env, executionContext];
    };
    replaceRequest ||= (() => {
      const mergedPath = mergePath(this._basePath, path9);
      const pathPrefixLength = mergedPath === "/" ? 0 : mergedPath.length;
      return (request) => {
        const url = new URL(request.url);
        url.pathname = url.pathname.slice(pathPrefixLength) || "/";
        return new Request(url, request);
      };
    })();
    const handler = async (c4, next) => {
      const res = await applicationHandler(replaceRequest(c4.req.raw), ...getOptions(c4));
      if (res) {
        return res;
      }
      await next();
    };
    this.#addRoute(METHOD_NAME_ALL, mergePath(path9, "*"), handler);
    return this;
  }
  #addRoute(method, path9, handler) {
    method = method.toUpperCase();
    path9 = mergePath(this._basePath, path9);
    const r2 = { path: path9, method, handler };
    this.router.add(method, path9, [handler, r2]);
    this.routes.push(r2);
  }
  #handleError(err, c4) {
    if (err instanceof Error) {
      return this.errorHandler(err, c4);
    }
    throw err;
  }
  #dispatch(request, executionCtx, env, method) {
    if (method === "HEAD") {
      return (async () => new Response(null, await this.#dispatch(request, executionCtx, env, "GET")))();
    }
    const path9 = this.getPath(request, { env });
    const matchResult = this.router.match(method, path9);
    const c4 = new Context(request, {
      path: path9,
      matchResult,
      env,
      executionCtx,
      notFoundHandler: this.#notFoundHandler
    });
    if (matchResult[0].length === 1) {
      let res;
      try {
        res = matchResult[0][0][0][0](c4, async () => {
          c4.res = await this.#notFoundHandler(c4);
        });
      } catch (err) {
        return this.#handleError(err, c4);
      }
      return res instanceof Promise ? res.then(
        (resolved) => resolved || (c4.finalized ? c4.res : this.#notFoundHandler(c4))
      ).catch((err) => this.#handleError(err, c4)) : res ?? this.#notFoundHandler(c4);
    }
    const composed = compose(matchResult[0], this.errorHandler, this.#notFoundHandler);
    return (async () => {
      try {
        const context = await composed(c4);
        if (!context.finalized) {
          throw new Error(
            "Context is not finalized. Did you forget to return a Response object or `await next()`?"
          );
        }
        return context.res;
      } catch (err) {
        return this.#handleError(err, c4);
      }
    })();
  }
  fetch = (request, ...rest) => {
    return this.#dispatch(request, rest[1], rest[0], request.method);
  };
  request = (input, requestInit, Env, executionCtx) => {
    if (input instanceof Request) {
      return this.fetch(requestInit ? new Request(input, requestInit) : input, Env, executionCtx);
    }
    input = input.toString();
    return this.fetch(
      new Request(
        /^https?:\/\//.test(input) ? input : `http://localhost${mergePath("/", input)}`,
        requestInit
      ),
      Env,
      executionCtx
    );
  };
  fire = () => {
    addEventListener("fetch", (event) => {
      event.respondWith(this.#dispatch(event.request, event, void 0, event.request.method));
    });
  };
};

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/router/reg-exp-router/index.js
init_esm_shims();

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/router/reg-exp-router/router.js
init_esm_shims();

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/router/reg-exp-router/node.js
init_esm_shims();
var LABEL_REG_EXP_STR = "[^/]+";
var ONLY_WILDCARD_REG_EXP_STR = ".*";
var TAIL_WILDCARD_REG_EXP_STR = "(?:|/.*)";
var PATH_ERROR = Symbol();
var regExpMetaChars = new Set(".\\+*[^]$()");
function compareKey(a2, b2) {
  if (a2.length === 1) {
    return b2.length === 1 ? a2 < b2 ? -1 : 1 : -1;
  }
  if (b2.length === 1) {
    return 1;
  }
  if (a2 === ONLY_WILDCARD_REG_EXP_STR || a2 === TAIL_WILDCARD_REG_EXP_STR) {
    return 1;
  } else if (b2 === ONLY_WILDCARD_REG_EXP_STR || b2 === TAIL_WILDCARD_REG_EXP_STR) {
    return -1;
  }
  if (a2 === LABEL_REG_EXP_STR) {
    return 1;
  } else if (b2 === LABEL_REG_EXP_STR) {
    return -1;
  }
  return a2.length === b2.length ? a2 < b2 ? -1 : 1 : b2.length - a2.length;
}
var Node = class {
  #index;
  #varIndex;
  #children = /* @__PURE__ */ Object.create(null);
  insert(tokens, index, paramMap, context, pathErrorCheckOnly) {
    if (tokens.length === 0) {
      if (this.#index !== void 0) {
        throw PATH_ERROR;
      }
      if (pathErrorCheckOnly) {
        return;
      }
      this.#index = index;
      return;
    }
    const [token, ...restTokens] = tokens;
    const pattern = token === "*" ? restTokens.length === 0 ? ["", "", ONLY_WILDCARD_REG_EXP_STR] : ["", "", LABEL_REG_EXP_STR] : token === "/*" ? ["", "", TAIL_WILDCARD_REG_EXP_STR] : token.match(/^\:([^\{\}]+)(?:\{(.+)\})?$/);
    let node;
    if (pattern) {
      const name = pattern[1];
      let regexpStr = pattern[2] || LABEL_REG_EXP_STR;
      if (name && pattern[2]) {
        regexpStr = regexpStr.replace(/^\((?!\?:)(?=[^)]+\)$)/, "(?:");
        if (/\((?!\?:)/.test(regexpStr)) {
          throw PATH_ERROR;
        }
      }
      node = this.#children[regexpStr];
      if (!node) {
        if (Object.keys(this.#children).some(
          (k3) => k3 !== ONLY_WILDCARD_REG_EXP_STR && k3 !== TAIL_WILDCARD_REG_EXP_STR
        )) {
          throw PATH_ERROR;
        }
        if (pathErrorCheckOnly) {
          return;
        }
        node = this.#children[regexpStr] = new Node();
        if (name !== "") {
          node.#varIndex = context.varIndex++;
        }
      }
      if (!pathErrorCheckOnly && name !== "") {
        paramMap.push([name, node.#varIndex]);
      }
    } else {
      node = this.#children[token];
      if (!node) {
        if (Object.keys(this.#children).some(
          (k3) => k3.length > 1 && k3 !== ONLY_WILDCARD_REG_EXP_STR && k3 !== TAIL_WILDCARD_REG_EXP_STR
        )) {
          throw PATH_ERROR;
        }
        if (pathErrorCheckOnly) {
          return;
        }
        node = this.#children[token] = new Node();
      }
    }
    node.insert(restTokens, index, paramMap, context, pathErrorCheckOnly);
  }
  buildRegExpStr() {
    const childKeys = Object.keys(this.#children).sort(compareKey);
    const strList = childKeys.map((k3) => {
      const c4 = this.#children[k3];
      return (typeof c4.#varIndex === "number" ? `(${k3})@${c4.#varIndex}` : regExpMetaChars.has(k3) ? `\\${k3}` : k3) + c4.buildRegExpStr();
    });
    if (typeof this.#index === "number") {
      strList.unshift(`#${this.#index}`);
    }
    if (strList.length === 0) {
      return "";
    }
    if (strList.length === 1) {
      return strList[0];
    }
    return "(?:" + strList.join("|") + ")";
  }
};

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/router/reg-exp-router/trie.js
init_esm_shims();
var Trie = class {
  #context = { varIndex: 0 };
  #root = new Node();
  insert(path9, index, pathErrorCheckOnly) {
    const paramAssoc = [];
    const groups = [];
    for (let i2 = 0; ; ) {
      let replaced = false;
      path9 = path9.replace(/\{[^}]+\}/g, (m2) => {
        const mark = `@\\${i2}`;
        groups[i2] = [mark, m2];
        i2++;
        replaced = true;
        return mark;
      });
      if (!replaced) {
        break;
      }
    }
    const tokens = path9.match(/(?::[^\/]+)|(?:\/\*$)|./g) || [];
    for (let i2 = groups.length - 1; i2 >= 0; i2--) {
      const [mark] = groups[i2];
      for (let j2 = tokens.length - 1; j2 >= 0; j2--) {
        if (tokens[j2].indexOf(mark) !== -1) {
          tokens[j2] = tokens[j2].replace(mark, groups[i2][1]);
          break;
        }
      }
    }
    this.#root.insert(tokens, index, paramAssoc, this.#context, pathErrorCheckOnly);
    return paramAssoc;
  }
  buildRegExp() {
    let regexp = this.#root.buildRegExpStr();
    if (regexp === "") {
      return [/^$/, [], []];
    }
    let captureIndex = 0;
    const indexReplacementMap = [];
    const paramReplacementMap = [];
    regexp = regexp.replace(/#(\d+)|@(\d+)|\.\*\$/g, (_2, handlerIndex, paramIndex) => {
      if (handlerIndex !== void 0) {
        indexReplacementMap[++captureIndex] = Number(handlerIndex);
        return "$()";
      }
      if (paramIndex !== void 0) {
        paramReplacementMap[Number(paramIndex)] = ++captureIndex;
        return "";
      }
      return "";
    });
    return [new RegExp(`^${regexp}`), indexReplacementMap, paramReplacementMap];
  }
};

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/router/reg-exp-router/router.js
var emptyParam = [];
var nullMatcher = [/^$/, [], /* @__PURE__ */ Object.create(null)];
var wildcardRegExpCache = /* @__PURE__ */ Object.create(null);
function buildWildcardRegExp(path9) {
  return wildcardRegExpCache[path9] ??= new RegExp(
    path9 === "*" ? "" : `^${path9.replace(
      /\/\*$|([.\\+*[^\]$()])/g,
      (_2, metaChar) => metaChar ? `\\${metaChar}` : "(?:|/.*)"
    )}$`
  );
}
function clearWildcardRegExpCache() {
  wildcardRegExpCache = /* @__PURE__ */ Object.create(null);
}
function buildMatcherFromPreprocessedRoutes(routes) {
  const trie = new Trie();
  const handlerData = [];
  if (routes.length === 0) {
    return nullMatcher;
  }
  const routesWithStaticPathFlag = routes.map(
    (route) => [!/\*|\/:/.test(route[0]), ...route]
  ).sort(
    ([isStaticA, pathA], [isStaticB, pathB]) => isStaticA ? 1 : isStaticB ? -1 : pathA.length - pathB.length
  );
  const staticMap = /* @__PURE__ */ Object.create(null);
  for (let i2 = 0, j2 = -1, len = routesWithStaticPathFlag.length; i2 < len; i2++) {
    const [pathErrorCheckOnly, path9, handlers] = routesWithStaticPathFlag[i2];
    if (pathErrorCheckOnly) {
      staticMap[path9] = [handlers.map(([h2]) => [h2, /* @__PURE__ */ Object.create(null)]), emptyParam];
    } else {
      j2++;
    }
    let paramAssoc;
    try {
      paramAssoc = trie.insert(path9, j2, pathErrorCheckOnly);
    } catch (e2) {
      throw e2 === PATH_ERROR ? new UnsupportedPathError(path9) : e2;
    }
    if (pathErrorCheckOnly) {
      continue;
    }
    handlerData[j2] = handlers.map(([h2, paramCount]) => {
      const paramIndexMap = /* @__PURE__ */ Object.create(null);
      paramCount -= 1;
      for (; paramCount >= 0; paramCount--) {
        const [key, value2] = paramAssoc[paramCount];
        paramIndexMap[key] = value2;
      }
      return [h2, paramIndexMap];
    });
  }
  const [regexp, indexReplacementMap, paramReplacementMap] = trie.buildRegExp();
  for (let i2 = 0, len = handlerData.length; i2 < len; i2++) {
    for (let j2 = 0, len2 = handlerData[i2].length; j2 < len2; j2++) {
      const map = handlerData[i2][j2]?.[1];
      if (!map) {
        continue;
      }
      const keys = Object.keys(map);
      for (let k3 = 0, len3 = keys.length; k3 < len3; k3++) {
        map[keys[k3]] = paramReplacementMap[map[keys[k3]]];
      }
    }
  }
  const handlerMap = [];
  for (const i2 in indexReplacementMap) {
    handlerMap[i2] = handlerData[indexReplacementMap[i2]];
  }
  return [regexp, handlerMap, staticMap];
}
function findMiddleware(middleware, path9) {
  if (!middleware) {
    return void 0;
  }
  for (const k3 of Object.keys(middleware).sort((a2, b2) => b2.length - a2.length)) {
    if (buildWildcardRegExp(k3).test(path9)) {
      return [...middleware[k3]];
    }
  }
  return void 0;
}
var RegExpRouter = class {
  name = "RegExpRouter";
  #middleware;
  #routes;
  constructor() {
    this.#middleware = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };
    this.#routes = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };
  }
  add(method, path9, handler) {
    const middleware = this.#middleware;
    const routes = this.#routes;
    if (!middleware || !routes) {
      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);
    }
    if (!middleware[method]) {
      ;
      [middleware, routes].forEach((handlerMap) => {
        handlerMap[method] = /* @__PURE__ */ Object.create(null);
        Object.keys(handlerMap[METHOD_NAME_ALL]).forEach((p) => {
          handlerMap[method][p] = [...handlerMap[METHOD_NAME_ALL][p]];
        });
      });
    }
    if (path9 === "/*") {
      path9 = "*";
    }
    const paramCount = (path9.match(/\/:/g) || []).length;
    if (/\*$/.test(path9)) {
      const re = buildWildcardRegExp(path9);
      if (method === METHOD_NAME_ALL) {
        Object.keys(middleware).forEach((m2) => {
          middleware[m2][path9] ||= findMiddleware(middleware[m2], path9) || findMiddleware(middleware[METHOD_NAME_ALL], path9) || [];
        });
      } else {
        middleware[method][path9] ||= findMiddleware(middleware[method], path9) || findMiddleware(middleware[METHOD_NAME_ALL], path9) || [];
      }
      Object.keys(middleware).forEach((m2) => {
        if (method === METHOD_NAME_ALL || method === m2) {
          Object.keys(middleware[m2]).forEach((p) => {
            re.test(p) && middleware[m2][p].push([handler, paramCount]);
          });
        }
      });
      Object.keys(routes).forEach((m2) => {
        if (method === METHOD_NAME_ALL || method === m2) {
          Object.keys(routes[m2]).forEach(
            (p) => re.test(p) && routes[m2][p].push([handler, paramCount])
          );
        }
      });
      return;
    }
    const paths = checkOptionalParameter(path9) || [path9];
    for (let i2 = 0, len = paths.length; i2 < len; i2++) {
      const path22 = paths[i2];
      Object.keys(routes).forEach((m2) => {
        if (method === METHOD_NAME_ALL || method === m2) {
          routes[m2][path22] ||= [
            ...findMiddleware(middleware[m2], path22) || findMiddleware(middleware[METHOD_NAME_ALL], path22) || []
          ];
          routes[m2][path22].push([handler, paramCount - len + i2 + 1]);
        }
      });
    }
  }
  match(method, path9) {
    clearWildcardRegExpCache();
    const matchers = this.#buildAllMatchers();
    this.match = (method2, path22) => {
      const matcher = matchers[method2] || matchers[METHOD_NAME_ALL];
      const staticMatch = matcher[2][path22];
      if (staticMatch) {
        return staticMatch;
      }
      const match = path22.match(matcher[0]);
      if (!match) {
        return [[], emptyParam];
      }
      const index = match.indexOf("", 1);
      return [matcher[1][index], match];
    };
    return this.match(method, path9);
  }
  #buildAllMatchers() {
    const matchers = /* @__PURE__ */ Object.create(null);
    Object.keys(this.#routes).concat(Object.keys(this.#middleware)).forEach((method) => {
      matchers[method] ||= this.#buildMatcher(method);
    });
    this.#middleware = this.#routes = void 0;
    return matchers;
  }
  #buildMatcher(method) {
    const routes = [];
    let hasOwnRoute = method === METHOD_NAME_ALL;
    [this.#middleware, this.#routes].forEach((r2) => {
      const ownRoute = r2[method] ? Object.keys(r2[method]).map((path9) => [path9, r2[method][path9]]) : [];
      if (ownRoute.length !== 0) {
        hasOwnRoute ||= true;
        routes.push(...ownRoute);
      } else if (method !== METHOD_NAME_ALL) {
        routes.push(
          ...Object.keys(r2[METHOD_NAME_ALL]).map((path9) => [path9, r2[METHOD_NAME_ALL][path9]])
        );
      }
    });
    if (!hasOwnRoute) {
      return null;
    } else {
      return buildMatcherFromPreprocessedRoutes(routes);
    }
  }
};

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/router/smart-router/index.js
init_esm_shims();

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/router/smart-router/router.js
init_esm_shims();
var SmartRouter = class {
  name = "SmartRouter";
  #routers = [];
  #routes = [];
  constructor(init) {
    this.#routers = init.routers;
  }
  add(method, path9, handler) {
    if (!this.#routes) {
      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);
    }
    this.#routes.push([method, path9, handler]);
  }
  match(method, path9) {
    if (!this.#routes) {
      throw new Error("Fatal error");
    }
    const routers = this.#routers;
    const routes = this.#routes;
    const len = routers.length;
    let i2 = 0;
    let res;
    for (; i2 < len; i2++) {
      const router = routers[i2];
      try {
        for (let i22 = 0, len2 = routes.length; i22 < len2; i22++) {
          router.add(...routes[i22]);
        }
        res = router.match(method, path9);
      } catch (e2) {
        if (e2 instanceof UnsupportedPathError) {
          continue;
        }
        throw e2;
      }
      this.match = router.match.bind(router);
      this.#routers = [router];
      this.#routes = void 0;
      break;
    }
    if (i2 === len) {
      throw new Error("Fatal error");
    }
    this.name = `SmartRouter + ${this.activeRouter.name}`;
    return res;
  }
  get activeRouter() {
    if (this.#routes || this.#routers.length !== 1) {
      throw new Error("No active router has been determined yet.");
    }
    return this.#routers[0];
  }
};

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/router/trie-router/index.js
init_esm_shims();

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/router/trie-router/router.js
init_esm_shims();

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/router/trie-router/node.js
init_esm_shims();
var emptyParams = /* @__PURE__ */ Object.create(null);
var Node2 = class {
  #methods;
  #children;
  #patterns;
  #order = 0;
  #params = emptyParams;
  constructor(method, handler, children) {
    this.#children = children || /* @__PURE__ */ Object.create(null);
    this.#methods = [];
    if (method && handler) {
      const m2 = /* @__PURE__ */ Object.create(null);
      m2[method] = { handler, possibleKeys: [], score: 0 };
      this.#methods = [m2];
    }
    this.#patterns = [];
  }
  insert(method, path9, handler) {
    this.#order = ++this.#order;
    let curNode = this;
    const parts = splitRoutingPath(path9);
    const possibleKeys = [];
    for (let i2 = 0, len = parts.length; i2 < len; i2++) {
      const p = parts[i2];
      const nextP = parts[i2 + 1];
      const pattern = getPattern(p, nextP);
      const key = Array.isArray(pattern) ? pattern[0] : p;
      if (Object.keys(curNode.#children).includes(key)) {
        curNode = curNode.#children[key];
        const pattern2 = getPattern(p, nextP);
        if (pattern2) {
          possibleKeys.push(pattern2[1]);
        }
        continue;
      }
      curNode.#children[key] = new Node2();
      if (pattern) {
        curNode.#patterns.push(pattern);
        possibleKeys.push(pattern[1]);
      }
      curNode = curNode.#children[key];
    }
    const m2 = /* @__PURE__ */ Object.create(null);
    const handlerSet = {
      handler,
      possibleKeys: possibleKeys.filter((v, i2, a2) => a2.indexOf(v) === i2),
      score: this.#order
    };
    m2[method] = handlerSet;
    curNode.#methods.push(m2);
    return curNode;
  }
  #getHandlerSets(node, method, nodeParams, params) {
    const handlerSets = [];
    for (let i2 = 0, len = node.#methods.length; i2 < len; i2++) {
      const m2 = node.#methods[i2];
      const handlerSet = m2[method] || m2[METHOD_NAME_ALL];
      const processedSet = {};
      if (handlerSet !== void 0) {
        handlerSet.params = /* @__PURE__ */ Object.create(null);
        handlerSets.push(handlerSet);
        if (nodeParams !== emptyParams || params && params !== emptyParams) {
          for (let i22 = 0, len2 = handlerSet.possibleKeys.length; i22 < len2; i22++) {
            const key = handlerSet.possibleKeys[i22];
            const processed = processedSet[handlerSet.score];
            handlerSet.params[key] = params?.[key] && !processed ? params[key] : nodeParams[key] ?? params?.[key];
            processedSet[handlerSet.score] = true;
          }
        }
      }
    }
    return handlerSets;
  }
  search(method, path9) {
    const handlerSets = [];
    this.#params = emptyParams;
    const curNode = this;
    let curNodes = [curNode];
    const parts = splitPath(path9);
    const curNodesQueue = [];
    for (let i2 = 0, len = parts.length; i2 < len; i2++) {
      const part = parts[i2];
      const isLast = i2 === len - 1;
      const tempNodes = [];
      for (let j2 = 0, len2 = curNodes.length; j2 < len2; j2++) {
        const node = curNodes[j2];
        const nextNode = node.#children[part];
        if (nextNode) {
          nextNode.#params = node.#params;
          if (isLast) {
            if (nextNode.#children["*"]) {
              handlerSets.push(
                ...this.#getHandlerSets(nextNode.#children["*"], method, node.#params)
              );
            }
            handlerSets.push(...this.#getHandlerSets(nextNode, method, node.#params));
          } else {
            tempNodes.push(nextNode);
          }
        }
        for (let k3 = 0, len3 = node.#patterns.length; k3 < len3; k3++) {
          const pattern = node.#patterns[k3];
          const params = node.#params === emptyParams ? {} : { ...node.#params };
          if (pattern === "*") {
            const astNode = node.#children["*"];
            if (astNode) {
              handlerSets.push(...this.#getHandlerSets(astNode, method, node.#params));
              astNode.#params = params;
              tempNodes.push(astNode);
            }
            continue;
          }
          if (part === "") {
            continue;
          }
          const [key, name, matcher] = pattern;
          const child = node.#children[key];
          const restPathString = parts.slice(i2).join("/");
          if (matcher instanceof RegExp) {
            const m2 = matcher.exec(restPathString);
            if (m2) {
              params[name] = m2[0];
              handlerSets.push(...this.#getHandlerSets(child, method, node.#params, params));
              if (Object.keys(child.#children).length) {
                child.#params = params;
                const componentCount = m2[0].match(/\//)?.length ?? 0;
                const targetCurNodes = curNodesQueue[componentCount] ||= [];
                targetCurNodes.push(child);
              }
              continue;
            }
          }
          if (matcher === true || matcher.test(part)) {
            params[name] = part;
            if (isLast) {
              handlerSets.push(...this.#getHandlerSets(child, method, params, node.#params));
              if (child.#children["*"]) {
                handlerSets.push(
                  ...this.#getHandlerSets(child.#children["*"], method, params, node.#params)
                );
              }
            } else {
              child.#params = params;
              tempNodes.push(child);
            }
          }
        }
      }
      curNodes = tempNodes.concat(curNodesQueue.shift() ?? []);
    }
    if (handlerSets.length > 1) {
      handlerSets.sort((a2, b2) => {
        return a2.score - b2.score;
      });
    }
    return [handlerSets.map(({ handler, params }) => [handler, params])];
  }
};

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/router/trie-router/router.js
var TrieRouter = class {
  name = "TrieRouter";
  #node;
  constructor() {
    this.#node = new Node2();
  }
  add(method, path9, handler) {
    const results = checkOptionalParameter(path9);
    if (results) {
      for (let i2 = 0, len = results.length; i2 < len; i2++) {
        this.#node.insert(method, results[i2], handler);
      }
      return;
    }
    this.#node.insert(method, path9, handler);
  }
  match(method, path9) {
    return this.#node.search(method, path9);
  }
};

// ../../.yarn/cache/hono-npm-4.7.4-9bd547bbac-b189c5b755.zip/node_modules/hono/dist/hono.js
var Hono2 = class extends Hono {
  constructor(options = {}) {
    super(options);
    this.router = options.router ?? new SmartRouter({
      routers: [new RegExpRouter(), new TrieRouter()]
    });
  }
};

// src/server.ts
var import_picocolors3 = __toESM(require_picocolors2(), 1);

// src/logger/HMRLogger.ts
init_esm_shims();
var import_picocolors2 = __toESM(require_picocolors2(), 1);
function createTag(level) {
  const baseTag = import_picocolors2.default.bold(import_picocolors2.default.bgCyan(import_picocolors2.default.white(" RN ")));
  const levelText = import_picocolors2.default.bold(` ${level.toUpperCase()} `);
  let levelTag = levelText;
  switch (level) {
    case "info":
      levelTag = import_picocolors2.default.bgCyan(import_picocolors2.default.white(levelText));
      break;
    case "warn":
      levelTag = import_picocolors2.default.bgYellow(import_picocolors2.default.white(levelText));
      break;
    case "error":
      levelTag = import_picocolors2.default.bgRed(import_picocolors2.default.white(levelText));
      break;
    case "log":
      levelTag = import_picocolors2.default.bgWhite(import_picocolors2.default.black(levelText));
      break;
    default:
      levelTag = import_picocolors2.default.gray(levelText);
      break;
  }
  return `${baseTag} ${levelTag}`;
}
function createHMRLogger() {
  const log = (level, ...data) => {
    console.log(createTag(level), ...data);
  };
  return { log };
}

// src/server.ts
function parsePermissions(permissions) {
  const permissionMap = /* @__PURE__ */ new Map();
  for (const permission of permissions) {
    const { name, access } = permission;
    if (!permissionMap.has(name)) {
      permissionMap.set(name, /* @__PURE__ */ new Set());
    }
    let accessValue = null;
    switch (access) {
      case "read":
        accessValue = "r";
        break;
      case "write":
        accessValue = "w";
        break;
      case "access":
        accessValue = "a";
        break;
      default:
        accessValue = null;
    }
    if (!accessValue) {
      continue;
    }
    permissionMap.get(name).add(accessValue);
  }
  return Array.from(permissionMap.entries()).map(([name, accesses]) => `${name}:${Array.from(accesses).sort().join("")}`).sort().join(",");
}
function createWebSocketServer(app) {
  const { injectWebSocket, upgradeWebSocket } = createNodeWebSocket({ app });
  const logger = createHMRLogger();
  app.get(
    // End-point for `HMRClient` connection in React Native core.
    "/hot",
    upgradeWebSocket(() => ({
      onMessage(event) {
        if (typeof event.data !== "string") {
          return;
        }
        const { type, level, data } = JSON.parse(event.data);
        if (type !== "log") {
          return;
        }
        if (typeof type === "string" && Array.isArray(data)) {
          logger.log(level, ...data);
        }
      },
      onClose() {
        logger.log("info", "Device disconnected");
      },
      onError(error) {
        console.error(import_picocolors3.default.red("WebSocket Error"), error);
      }
    }))
  );
  return { injectWebSocket };
}
var createApp = (config) => {
  const app = new Hono2();
  const transformCache = /* @__PURE__ */ new Map();
  app.get("/status", (c4) => {
    c4.header("X-React-Native-Project-Root", path8.resolve(__dirname, "..", "react-native"));
    return c4.text("packager-status:running");
  });
  app.get("/permissions", (c4) => {
    return c4.text(parsePermissions(config.permissions));
  });
  app.get("/index.bundle", async (c4) => {
    const platform2 = c4.req.query("platform");
    const key = JSON.stringify([platform2]);
    if (platform2 == null) {
      return c4.text("Error: platform is required", 400);
    }
    c4.header("Surrogate-Control", "no-store");
    c4.header("Cache-Control", "no-store, no-cache, must-revalidate, proxy-revalidate");
    c4.header("Pragma", "no-cache");
    c4.header("Expires", "0");
    c4.header("Content-Type", "application/javascript");
    if (transformCache.has(key)) {
      return c4.body(transformCache.get(key));
    }
    console.log(`Building React Native bundle... (platform: ${platform2})`);
    const bundle = await (config.production ? buildProdBundle(platform2, config) : buildDevBundle(platform2, config));
    if (bundle == null) {
      return c4.text("Error", 500);
    }
    transformCache.set(key, bundle);
    return c4.body(bundle);
  });
  const wss = createWebSocketServer(app);
  return { app, wss };
};
async function buildDevBundle(platform2, { appName, web, brand, webViewProps, navigationBar }) {
  const prebuilt = fileURLToPath4(import.meta.resolve(`@apps-in-toss/web-framework/prebuilt/dev/${platform2}`));
  const bundle = await fs3.promises.readFile(prebuilt, "utf-8");
  const result = await transform2(bundle, {
    babelrc: false,
    configFile: false,
    plugins: [
      [
        babelJsonReplacementPlugin,
        {
          json: {
            deploymentId: "local",
            buildNumber: "00000000",
            appName,
            webPort: web.port,
            webHost: web.host,
            brandDisplayName: brand.displayName,
            brandIcon: brand.icon,
            brandPrimaryColor: brand.primaryColor,
            brandBridgeColorMode: brand.bridgeColorMode,
            webViewType: webViewProps.type,
            navigationBar: JSON.stringify(navigationBar),
            ...webViewProps
          },
          identifierName: "Ait"
        }
      ]
    ],
    generatorOpts: {
      compact: true,
      comments: false
    }
  });
  return result?.code;
}
async function buildProdBundle(platform2, config) {
  const result = await babelBuild({
    platform: platform2,
    buildNumber: "00000000",
    deploymentId: "local",
    config
  });
  return result?.code;
}

// src/utils/printLogo.ts
init_esm_shims();
var import_picocolors4 = __toESM(require_picocolors2(), 1);
var LOGO = [
  " \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557",
  "\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255D \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2551\u255A\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255D\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255D",
  "\u2588\u2588\u2551  \u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255D\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2557  ",
  "\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u255A\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u255D  ",
  "\u255A\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255D\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551 \u255A\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557",
  " \u255A\u2550\u2550\u2550\u2550\u2550\u255D \u255A\u2550\u255D  \u255A\u2550\u255D\u255A\u2550\u255D  \u255A\u2550\u255D\u255A\u2550\u255D  \u255A\u2550\u2550\u2550\u255D\u255A\u2550\u255D   \u255A\u2550\u255D   \u255A\u2550\u2550\u2550\u2550\u2550\u2550\u255D"
];
var GREETING_MESSAGE = "Welcome to Granite";
function printLogo() {
  const maxLength = LOGO.reduce((prev, line) => Math.max(line.length, prev), 0);
  console.log();
  console.log(LOGO.join("\n"));
  const padding = new Array(Math.floor(maxLength / 2 - GREETING_MESSAGE.length / 2)).fill(" ").join("");
  console.log(`
${padding}${import_picocolors4.default.blue(GREETING_MESSAGE)}
`);
}

// src/cli/commands/DevCommand.ts
var DevCommand = class extends Command {
  static paths = [[`dev`]];
  static usage = Command.Usage({
    category: "Development",
    description: "Granite \uAC1C\uBC1C \uC11C\uBC84\uB97C \uC2E4\uD589\uD569\uB2C8\uB2E4",
    examples: [["\uAC1C\uBC1C \uC11C\uBC84 \uC2E4\uD589\uD558\uAE30", "granite dev"]]
  });
  host = options_exports.String("--host", "0.0.0.0");
  port = options_exports.String("--port", "8081");
  experimental = options_exports.Boolean("--experimental-mode", false);
  async execute() {
    const packageRoot = getPackageRoot5();
    const config = await loadConfig();
    const result = validateAppInTossWebPluginOptions({
      commands: config.web.commands,
      permissions: config.permissions,
      brand: config.brand,
      webViewProps: config.webViewProps
    });
    if (!result.success) {
      console.error("[Apps In Toss Plugin] \uD50C\uB7EC\uADF8\uC778 \uC635\uC158\uC774 \uC62C\uBC14\uB974\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4. granite.config.ts \uAD6C\uC131\uC744 \uD655\uC778\uD574\uC8FC\uC138\uC694.");
      process.exit(1);
    }
    const { app, wss } = createApp({ ...config, production: this.experimental === true });
    const server = serve(
      {
        hostname: this.host,
        fetch: app.fetch,
        port: parseInt(this.port, 10)
      },
      async (info) => {
        printLogo();
        console.log(`Listening on http://${this.host}:${info.port}`);
        const { packageManager } = getPackageManager({ isExecutor: true });
        await execa(packageManager, config.web.commands.dev.split(" "), {
          cwd: packageRoot,
          shell: true,
          stdio: "inherit"
        });
      }
    );
    wss.injectWebSocket(server);
  }
};

// src/cli/index.ts
var cli = new Cli({
  binaryLabel: "granite",
  binaryName: "granite",
  enableCapture: true
});
async function initialize() {
  cli.register(DevCommand);
  cli.register(BuildCommand);
  cli.runExit(process.argv.slice(2));
}
export {
  initialize
};
/*! Bundled license information:

cosmiconfig/dist/loaders.js:
  (* istanbul ignore next -- @preserve *)

cosmiconfig/dist/util.js:
  (* istanbul ignore next -- @preserve *)

cosmiconfig/dist/ExplorerBase.js:
  (* istanbul ignore if -- @preserve *)
  (* istanbul ignore next -- @preserve *)

cosmiconfig/dist/Explorer.js:
  (* istanbul ignore if -- @preserve *)

cosmiconfig/dist/ExplorerSync.js:
  (* istanbul ignore if -- @preserve *)

uuidv7/dist/index.js:
  (**
   * uuidv7: A JavaScript implementation of UUID version 7
   *
   * Copyright 2021-2024 LiosK
   *
   * @license Apache-2.0
   * @packageDocumentation
   *)
*/
