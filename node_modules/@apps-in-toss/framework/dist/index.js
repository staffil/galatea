var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));

// src/index.ts
import { Analytics as InternalAnalytics } from "@apps-in-toss/analytics";

// src/core/registerApp.tsx
import { Analytics } from "@apps-in-toss/analytics";
import { isMinVersionSupported as isMinVersionSupported3, setIosSwipeGestureEnabled as setIosSwipeGestureEnabled2, eventLog } from "@apps-in-toss/native-modules";
import { Granite as Granite6 } from "@granite-js/react-native";
import { TDSProvider } from "@toss/tds-react-native";
import { AppRegistry } from "react-native";

// src/core/components/AppEvent.tsx
import { INTERNAL__module as INTERNAL__module2 } from "@apps-in-toss/native-modules";
import { Granite as Granite2, getSchemeUri as getSchemeUri3, useVisibility as useVisibility2 } from "@granite-js/react-native";
import { useEffect as useEffect2 } from "react";

// src/env.ts
var env = {
  getDeploymentId: () => __DEV__ ? "local" : global.__appsInToss?.deploymentId
};

// src/hooks/useCaptureExitLog.ts
import { INTERNAL__module } from "@apps-in-toss/native-modules";
import { Granite, useVisibility } from "@granite-js/react-native";
import { useCallback, useEffect, useRef } from "react";

// src/core/hooks/useReferrer.ts
import { getSchemeUri } from "@granite-js/react-native";
import { useMemo } from "react";
function useReferrer() {
  return useMemo(() => {
    try {
      return new URL(getSchemeUri()).searchParams.get("referrer");
    } catch {
      return null;
    }
  }, []);
}

// src/utils/isPrivateScheme.ts
import { getSchemeUri as getSchemeUri2 } from "@granite-js/react-native";
function isPrivateScheme() {
  try {
    return new URL(getSchemeUri2()).protocol === "intoss-private:";
  } catch {
    return false;
  }
}

// src/hooks/useCaptureExitLog.ts
var EXIT_IMPRESSION_LOG_NAME = "appsintoss_app_visit__common_module::impression__stay_time";
var EXIT_IMPRESSION_SCHEMA_ID = 1631628;
function useCaptureExitLog() {
  const referrer = useReferrer();
  const visible = useVisibility();
  const enterTime = useRef(void 0);
  useEffect(() => {
    if (visible === true) {
      enterTime.current = Date.now();
    }
  }, [visible]);
  const captureExitLog = useCallback(
    (exitTime) => {
      if (enterTime.current == null) {
        return;
      }
      const stayTime = Math.floor(exitTime - enterTime.current);
      INTERNAL__module.tossCoreEventLog({
        log_name: EXIT_IMPRESSION_LOG_NAME,
        log_type: "event",
        params: {
          schema_id: EXIT_IMPRESSION_SCHEMA_ID,
          event_type: "impression",
          referrer,
          deployment_id: env.getDeploymentId(),
          app_name: Granite.appName,
          is_private: isPrivateScheme(),
          stay_time: stayTime.toString(),
          exit_time: exitTime.toString()
        }
      });
      enterTime.current = void 0;
    },
    [referrer]
  );
  return { captureExitLog };
}

// src/core/components/AppEvent.tsx
var ENTRY_APP_EVENT_SCHEMA_ID = 1562181;
function EntryAppEvent() {
  const referrer = useReferrer() ?? "";
  useEffect2(() => {
    INTERNAL__module2.tossCoreEventLog({
      log_name: "appsintoss_app_visit::impression__enter_appsintoss",
      log_type: "info",
      params: {
        is_transform: true,
        schema_id: ENTRY_APP_EVENT_SCHEMA_ID,
        referrer,
        deployment_id: env.getDeploymentId(),
        app_name: Granite2.appName,
        is_private: isPrivateScheme()
      }
    });
  }, [referrer]);
  return null;
}
function SystemAppEvent({ ...initialProps }) {
  useEffect2(() => {
    INTERNAL__module2.tossCoreEventLog({
      log_name: "AppsInTossInitialProps",
      log_type: "debug",
      params: {
        ...initialProps,
        schemeUri: getSchemeUri3(),
        deployment_id: env.getDeploymentId(),
        app_name: Granite2.appName,
        is_private: isPrivateScheme()
      }
    });
  }, [initialProps]);
  return null;
}
function StayTimeAppEvent() {
  const visible = useVisibility2();
  const { captureExitLog } = useCaptureExitLog();
  useEffect2(() => {
    if (visible === false) {
      captureExitLog(Date.now());
    }
  }, [visible, captureExitLog]);
  return null;
}
var AppEvent = {
  Entry: EntryAppEvent,
  System: SystemAppEvent,
  StayTime: StayTimeAppEvent
};

// src/core/components/AppUpdate.tsx
import { openURL } from "@granite-js/react-native";
import { useEffect as useEffect3 } from "react";
import { Fragment, jsx } from "react/jsx-runtime";
var UPDATE_SCHEME = "servicetoss://update/forced/j?updateType=required";
function AppUpdate() {
  useEffect3(() => {
    openURL(`supertoss://closePage?url=${UPDATE_SCHEME}`);
  }, []);
  return /* @__PURE__ */ jsx(Fragment, {});
}

// src/core/hooks/useAppsInTossBridge.ts
import { appsInTossEvent } from "@apps-in-toss/native-modules";
import { useBridge } from "@toss/tds-react-native";
import { useEffect as useEffect4 } from "react";

// src/core/utils/getAppsInTossGlobals.ts
function getAppsInTossGlobals() {
  if (global.__appsInToss == null) {
    throw new Error("invalid apps-in-toss globals");
  }
  return global.__appsInToss;
}

// src/core/utils/toIcon.ts
function toIcon(source) {
  return source.startsWith("http") ? { source: { uri: source } } : { name: source };
}

// src/core/hooks/useAppsInTossBridge.ts
function useAppsInTossBridge() {
  const controller = useBridge();
  const appsInTossGlobals = getAppsInTossGlobals();
  useEffect4(() => {
    const isGameApp = appsInTossGlobals.webViewType === "game" || appsInTossGlobals.appType === "game";
    controller.open({
      serviceName: appsInTossGlobals.brandDisplayName,
      icon: toIcon(appsInTossGlobals.brandIcon),
      color: appsInTossGlobals.brandPrimaryColor,
      colorMode: isGameApp ? "inverted" : appsInTossGlobals.brandBridgeColorMode,
      onExited: () => {
        appsInTossEvent.emit("entryMessageExited", void 0);
      }
    });
  }, []);
}

// src/components/RNAppContainer.tsx
import { appsInTossEvent as appsInTossEvent2, setIosSwipeGestureEnabled } from "@apps-in-toss/native-modules";
import { useEffect as useEffect9, useState as useState3 } from "react";
import { Platform as Platform3 } from "react-native";

// src/components/GameProfile.tsx
import { getGameCenterGameProfile as getGameCenterGameProfile2, isMinVersionSupported } from "@apps-in-toss/native-modules";
import { Loader } from "@toss/tds-react-native";
import { useEffect as useEffect5 } from "react";
import { Pressable, View } from "react-native";

// src/constant/game-center.ts
var GAME_PROFILE_WEBVIEW_URL = "servicetoss://game-center/profile";
var GAME_CENTER_MIN_VERSION = {
  android: "5.221.0",
  ios: "5.221.0"
};

// src/hooks/useGameCenterProfile.ts
import { getGameCenterGameProfile } from "@apps-in-toss/native-modules";
import { closeView, openURL as openURL3 } from "@granite-js/react-native";
import { useDialog } from "@toss/tds-react-native";
import { josa } from "es-hangul";
import { useCallback as useCallback2, useRef as useRef2, useState } from "react";

// src/components/GameProfileToast.tsx
import { Asset, Toast } from "@toss/tds-react-native";
import { AdaptiveColorProvider, ColorPreferenceProvider, useOverlay } from "@toss/tds-react-native/private";
import { jsx as jsx2 } from "react/jsx-runtime";
var useGameProfileToast = () => {
  const overlay = useOverlay();
  const openGameProfileToast = (nickname, profileImageUri) => {
    return new Promise((resolve) => {
      overlay.open(({ isOpen, close, exit }) => {
        return /* @__PURE__ */ jsx2(ColorPreferenceProvider, { colorPreference: "dark", children: /* @__PURE__ */ jsx2(AdaptiveColorProvider, { children: /* @__PURE__ */ jsx2(
          Toast,
          {
            open: isOpen,
            onClose: () => {
              resolve();
              close();
            },
            onExited: exit,
            position: "top",
            text: `${nickname}\uB2D8 \uBC18\uAC00\uC6CC\uC694!`,
            icon: /* @__PURE__ */ jsx2(
              Asset.Image,
              {
                style: { borderRadius: 64, overflow: "hidden" },
                frameShape: Asset.frameShape.CleanW32,
                source: { uri: profileImageUri }
              }
            )
          }
        ) }) });
      });
    });
  };
  return { openGameProfileToast };
};

// src/utils/error.ts
var DEFAULT_ERROR = {
  title: "\uC7A0\uC2DC \uD6C4 \uB2E4\uC2DC \uC2DC\uB3C4\uD574\uC8FC\uC138\uC694",
  description: "\uBB38\uC81C\uAC00 \uACC4\uC18D\uB418\uBA74 \uD1A0\uC2A4 \uACE0\uAC1D\uC13C\uD130(1599-4905)\uB85C \uBB38\uC758\uD574\uC8FC\uC138\uC694."
};

// src/utils/market.ts
import { Platform } from "react-native";
var PLAYSTORE_LINK = "https://play.google.com/store/apps/details?id=viva.republica.toss";
var APPSTORE_LINK = "https://itunes.apple.com/app/id839333328";
var getMarketLink = () => {
  return Platform.OS === "android" ? PLAYSTORE_LINK : APPSTORE_LINK;
};

// src/utils/openTransparentWebView.ts
import { openURL as openURL2 } from "@granite-js/react-native";

// src/private.ts
import { onVisibilityChangedByTransparentServiceWeb } from "@apps-in-toss/native-modules";
var INTERNAL__onVisibilityChangedByTransparentServiceWeb = onVisibilityChangedByTransparentServiceWeb;

// src/utils/openTransparentWebView.ts
var openTransparentWebView = ({
  webUrl,
  cleanupWhenDismissed = true,
  onEvent,
  onError,
  callbackId = "fn",
  params
}) => {
  const url = new URL("supertoss://transparent-service-web");
  url.searchParams.set("url", webUrl);
  url.searchParams.set("onVisibilityChangeCallback", callbackId);
  Object.entries(params ?? {}).forEach(([key, value]) => {
    url.searchParams.set(key, value);
  });
  const cleanup = INTERNAL__onVisibilityChangedByTransparentServiceWeb({
    options: { callbackId },
    onError: (error) => {
      onError(error);
      cleanup();
    },
    onEvent: (value) => {
      onEvent(value);
      if (cleanupWhenDismissed && value === true) {
        cleanup();
      }
    }
  });
  openURL2(url.toString());
};

// src/hooks/useGameCenterProfile.ts
var useGameCenterProfile = (isReadyForProfileUI) => {
  const [profileData, setProfileData] = useState(void 0);
  const [isProfileDataLoading, setIsProfileDataLoading] = useState(true);
  const [isProfileDataRefetching, setIsProfileDataRefetching] = useState(false);
  const shouldShowLoadingOverlay = isProfileDataLoading && isReadyForProfileUI;
  const shouldShowProfileNotFoundOverlay = profileData?.statusCode === "PROFILE_NOT_FOUND" && isReadyForProfileUI && !isProfileDataRefetching;
  const canShowBottomSheetOrToast = !isProfileDataLoading && isReadyForProfileUI;
  const [isWebviewLoading, setIsWebviewLoading] = useState(false);
  const isCompletedProfileFlow = useRef2(false);
  const { openAlert, openConfirm } = useDialog();
  const { openGameProfileToast } = useGameProfileToast();
  const openErrorAlert = useCallback2(async () => {
    await openAlert({
      title: DEFAULT_ERROR.title,
      description: DEFAULT_ERROR.description
    });
    closeView();
  }, [openAlert]);
  const openProfileWebview = useCallback2(() => {
    if (isWebviewLoading) {
      return;
    }
    setIsWebviewLoading(true);
    openTransparentWebView({
      webUrl: `${GAME_PROFILE_WEBVIEW_URL}?appName=${getAppName()}&referrer=appsintoss.${getAppName()}`,
      onEvent: async (isClosedTransparentWebView) => {
        if (isClosedTransparentWebView) {
          try {
            setIsWebviewLoading(false);
            setIsProfileDataRefetching(true);
            const data = await getGameCenterGameProfile();
            setProfileData(data);
            setIsProfileDataRefetching(false);
            if (data?.statusCode === "SUCCESS") {
              openGameProfileToast(data.nickname, data.profileImageUri);
            }
          } catch (_) {
            setIsProfileDataRefetching(false);
            openErrorAlert();
          }
        }
      },
      onError: () => {
        openErrorAlert();
      }
    });
  }, [isWebviewLoading, openGameProfileToast, openErrorAlert]);
  const updateAppToSupportedMinVersion = useCallback2(async () => {
    const upddateConfirmDialogLabel = {
      title: `${josa(getAppsInTossGlobals().brandDisplayName, "\uC744/\uB97C")} \uD558\uB824\uBA74 
\uC571\uC744 \uC5C5\uB370\uC774\uD2B8\uD574\uC8FC\uC138\uC694`,
      leftButton: "\uB2EB\uAE30",
      rightButton: "\uC5C5\uB370\uC774\uD2B8\uD558\uAE30"
    };
    const isConfirmed = await openConfirm({
      title: upddateConfirmDialogLabel.title,
      leftButton: upddateConfirmDialogLabel.leftButton,
      rightButton: upddateConfirmDialogLabel.rightButton,
      closeOnDimmerClick: true
    });
    if (!isConfirmed) {
      closeView();
      return;
    }
    const STORE_SCHEME = getMarketLink();
    openURL3(`supertoss://web?url=${STORE_SCHEME}&external=browser`);
  }, [openConfirm]);
  return {
    profileData,
    isProfileDataLoading,
    isProfileDataRefetching,
    shouldShowLoadingOverlay,
    shouldShowProfileNotFoundOverlay,
    canShowBottomSheetOrToast,
    isCompletedProfileFlow,
    updateAppToSupportedMinVersion,
    setIsProfileDataLoading,
    openProfileWebview,
    setProfileData,
    openErrorAlert,
    openGameProfileToast
  };
};

// src/utils/zIndex.ts
var Z_INDEX = {
  /* 게임 프로필을 위한 overlay
   */
  PROFILE_OVERLAY: 9998,
  // 게임을 종료할 수 있는 X 버튼
  CLOSE_BUTTON: 9999
};

// src/components/GameProfile.tsx
import { Fragment as Fragment2, jsx as jsx3, jsxs } from "react/jsx-runtime";
var GameProfile = ({ children, isReadyForProfileUI }) => {
  const {
    profileData,
    isProfileDataRefetching,
    shouldShowLoadingOverlay,
    shouldShowProfileNotFoundOverlay,
    canShowBottomSheetOrToast,
    isCompletedProfileFlow,
    openProfileWebview,
    updateAppToSupportedMinVersion,
    setIsProfileDataLoading,
    setProfileData,
    openErrorAlert,
    openGameProfileToast
  } = useGameCenterProfile(isReadyForProfileUI);
  useEffect5(() => {
    try {
      const getProfileData = async () => {
        const data = await getGameCenterGameProfile2();
        setProfileData(data);
        setIsProfileDataLoading(false);
      };
      getProfileData();
    } catch (_) {
      openErrorAlert();
      setIsProfileDataLoading(false);
    }
  }, []);
  useEffect5(() => {
    const handleGameProfileFlow = async () => {
      if (!canShowBottomSheetOrToast) {
        return;
      }
      if (isCompletedProfileFlow.current) {
        return;
      }
      isCompletedProfileFlow.current = true;
      if (!isMinVersionSupported(GAME_CENTER_MIN_VERSION)) {
        updateAppToSupportedMinVersion();
        return;
      }
      if (profileData?.statusCode === "SUCCESS") {
        openGameProfileToast(profileData.nickname, profileData.profileImageUri);
        return;
      }
      if (profileData?.statusCode === "PROFILE_NOT_FOUND") {
        openProfileWebview();
      }
    };
    handleGameProfileFlow();
  }, [
    canShowBottomSheetOrToast,
    isCompletedProfileFlow,
    openGameProfileToast,
    openProfileWebview,
    profileData,
    updateAppToSupportedMinVersion
  ]);
  if (!isMinVersionSupported(GAME_CENTER_MIN_VERSION)) {
    return /* @__PURE__ */ jsxs(Fragment2, { children: [
      /* @__PURE__ */ jsx3(View, { style: { flex: 1, position: "relative" }, children }),
      /* @__PURE__ */ jsx3(
        Pressable,
        {
          style: {
            ...overlayStyle
          },
          onPress: () => {
            updateAppToSupportedMinVersion();
          }
        }
      )
    ] });
  }
  if (shouldShowLoadingOverlay || isProfileDataRefetching) {
    return /* @__PURE__ */ jsxs(Fragment2, { children: [
      /* @__PURE__ */ jsx3(View, { style: { flex: 1, position: "relative" }, children }),
      /* @__PURE__ */ jsx3(
        View,
        {
          style: {
            ...overlayStyle,
            justifyContent: "center",
            alignItems: "center",
            backgroundColor: "rgba(0, 0, 0, 0.2)"
          },
          children: /* @__PURE__ */ jsx3(Loader, { size: "large", type: "light" })
        }
      )
    ] });
  }
  if (shouldShowProfileNotFoundOverlay) {
    return /* @__PURE__ */ jsxs(Fragment2, { children: [
      /* @__PURE__ */ jsx3(View, { style: { flex: 1, position: "relative" }, children }),
      shouldShowProfileNotFoundOverlay && /* @__PURE__ */ jsx3(
        Pressable,
        {
          style: {
            ...overlayStyle
          },
          onPress: () => {
            openProfileWebview();
          }
        }
      )
    ] });
  }
  return /* @__PURE__ */ jsx3(Fragment2, { children: /* @__PURE__ */ jsx3(View, { style: { flex: 1, position: "relative" }, children }) });
};
var overlayStyle = {
  position: "absolute",
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  zIndex: Z_INDEX.PROFILE_OVERLAY
};

// src/components/NavigationBar/RNNavigationBar/Default.tsx
import { NavigationBackButton, NavigationLeft, TopNavigation } from "@toss/tds-react-native/private";

// src/components/NavigationBar/RNNavigationBar/hooks/useHardwareBackPress.ts
import { useEffect as useEffect6 } from "react";
import { BackHandler } from "react-native";
function useHardwareBackPress(handler) {
  useEffect6(() => {
    const handleBackPress = () => {
      handler();
      return true;
    };
    BackHandler.addEventListener("hardwareBackPress", handleBackPress);
    return () => BackHandler.removeEventListener("hardwareBackPress", handleBackPress);
  }, [handler]);
}

// src/components/NavigationBar/RNNavigationBar/hooks/useNavigationEvent.ts
import { closeView as closeView2, useBackEventContext, useNavigation } from "@granite-js/react-native";
import { useMemo as useMemo2 } from "react";

// src/components/NavigationBar/RNNavigationBar/hooks/useCloseConfirm.ts
import { useDialog as useDialog2 } from "@toss/tds-react-native";
import { josa as josa2 } from "es-hangul";
import { useCallback as useCallback3 } from "react";
function useCloseConfirm() {
  const { brandDisplayName } = getAppsInTossGlobals();
  const { openConfirm } = useDialog2();
  return useCallback3(async ({ onEntered }) => {
    return await openConfirm({
      title: `${josa2(brandDisplayName, "\uC744/\uB97C")} \uC885\uB8CC\uD560\uAE4C\uC694?`,
      leftButton: "\uCDE8\uC18C",
      rightButton: "\uC885\uB8CC\uD558\uAE30",
      closeOnDimmerClick: true,
      onEntered
    });
  }, [brandDisplayName, openConfirm]);
}

// src/components/NavigationBar/common/useNavigationBarLogging.tsx
import { INTERNAL__module as INTERNAL__module3 } from "@apps-in-toss/native-modules";
import { Granite as Granite3 } from "@granite-js/react-native";
var NAVI_BAR_IMPRESSION_SCHEMA_ID = 1596837;
var NAVI_BAR_IMPRESSION_LOG_NAME = "appsintoss_app_visit__common_module::impression__navigation_bar";
var CLOSE_POPUP_SHOW_SCHEMA_ID = 1644490;
var CLOSE_POPUP_SHOW_LOG_NAME = "appsintoss_app_visit__common_module::popup__close_app";
var CLOSE_BUTTON_CLICK_SCHEMA_ID = 1596831;
var CLOSE_BUTTON_CLICK_LOG_NAME = "appsintoss_app_visit__common_module::click__icon_close";
var CLOSE_POPUP_CTA_CLICK_SCHEMA_ID = 1644492;
var CLOSE_POPUP_CTA_CLICK_LOG_NAME = "appsintoss_app_visit__common_module::popup__close_app::click__cta";
var HOME_BUTTON_CLICK_SCHEMA_ID = 1596839;
var HOME_BUTTON_CLICK_LOG_NAME = "appsintoss_app_visit__common_module::click__icon_home";
function useNavigationBarLogging() {
  const referrer = useReferrer();
  const baseParams = {
    referrer,
    app_name: Granite3.appName
  };
  const logNavBarImpression = (naviBarConfig) => {
    INTERNAL__module3.tossCoreEventLog({
      log_name: NAVI_BAR_IMPRESSION_LOG_NAME,
      log_type: "event",
      params: {
        ...naviBarConfig,
        ...baseParams,
        event_type: "impression",
        schema_id: NAVI_BAR_IMPRESSION_SCHEMA_ID
      }
    });
  };
  const logHomeButtonClick = () => {
    INTERNAL__module3.tossCoreEventLog({
      log_name: HOME_BUTTON_CLICK_LOG_NAME,
      log_type: "event",
      params: {
        ...baseParams,
        event_type: "click",
        schema_id: HOME_BUTTON_CLICK_SCHEMA_ID
      }
    });
  };
  const logCloseButtonClick = () => {
    INTERNAL__module3.tossCoreEventLog({
      log_name: CLOSE_BUTTON_CLICK_LOG_NAME,
      log_type: "event",
      params: {
        ...baseParams,
        event_type: "click",
        schema_id: CLOSE_BUTTON_CLICK_SCHEMA_ID
      }
    });
  };
  const logClosePopupShow = () => {
    INTERNAL__module3.tossCoreEventLog({
      log_name: CLOSE_POPUP_SHOW_LOG_NAME,
      log_type: "popup",
      params: {
        ...baseParams,
        schema_id: CLOSE_POPUP_SHOW_SCHEMA_ID
      }
    });
  };
  const logClosePopupCtaClick = (confirm) => {
    INTERNAL__module3.tossCoreEventLog({
      log_name: CLOSE_POPUP_CTA_CLICK_LOG_NAME,
      log_type: "event",
      params: {
        ...baseParams,
        close_yn: confirm ? "Y" : "N",
        schema_id: CLOSE_POPUP_CTA_CLICK_SCHEMA_ID,
        event_type: "click"
      }
    });
  };
  return {
    navBarImpression: logNavBarImpression,
    closePopupShow: logClosePopupShow,
    closePopupCtaClick: logClosePopupCtaClick,
    closeButtonClick: logCloseButtonClick,
    homeButtonClick: logHomeButtonClick
  };
}

// src/components/NavigationBar/RNNavigationBar/hooks/useNavigationEvent.ts
function useNavigationEvent() {
  const backEventContext = useBackEventContext();
  const logging = useNavigationBarLogging();
  const navigation = useNavigation();
  const closeConfirm = useCloseConfirm();
  const { captureExitLog } = useCaptureExitLog();
  return useMemo2(() => {
    const close = async () => {
      const hasConfirmed = await closeConfirm({
        onEntered: logging.closePopupShow
      });
      logging.closePopupCtaClick(hasConfirmed);
      if (hasConfirmed) {
        captureExitLog(Date.now());
        closeView2();
      }
    };
    return {
      handleBack: () => {
        if (backEventContext.hasBackEvent) {
          backEventContext.onBack();
        } else if (navigation.canGoBack()) {
          navigation.goBack();
        } else {
          close();
        }
      },
      handleHomeButtonClick: () => {
        logging.homeButtonClick();
        navigation.navigate("/");
      },
      handleCloseButtonClick: () => {
        logging.closeButtonClick();
        close();
      }
    };
  }, [backEventContext, navigation, closeConfirm, logging, captureExitLog]);
}

// src/core/hooks/useMoreButtonBottomSheet/index.tsx
import { INTERNAL__appBridgeHandler, isMinVersionSupported as isMinVersionSupported2 } from "@apps-in-toss/native-modules";
import { openURL as openURL5 } from "@granite-js/react-native";
import { BottomSheet, List, ListHeader, ListRow as ListRow2 } from "@toss/tds-react-native";
import { useAdaptive as useAdaptive2, useOverlay as useOverlay2 } from "@toss/tds-react-native/private";
import { useEffect as useEffect7, useState as useState2 } from "react";

// src/core/hooks/useMoreButtonBottomSheet/AppShareListMenu.tsx
import { getOperationalEnvironment } from "@apps-in-toss/native-modules";
import { getSchemeUri as getSchemeUri4 } from "@granite-js/react-native";
import { ListRow, useDialog as useDialog3 } from "@toss/tds-react-native";
import { useAdaptive } from "@toss/tds-react-native/private";
import { NativeModules } from "react-native";

// src/core/hooks/useMoreButtonBottomSheet/useMoreButtonBottomSheetLogging.tsx
import { INTERNAL__module as INTERNAL__module4 } from "@apps-in-toss/native-modules";
import { Granite as Granite4 } from "@granite-js/react-native";
var BOTTOM_SHEET_SCHEMA_ID = 1596825;
var BOTTOM_SHEET_LOG_NAME = "appsintoss_app_visit__common_module::bottomsheet__more";
var BOTTOM_SHEET_OPEN_SCHEMA_ID = 1596829;
var BOTTOM_SHEET_OPEN_LOG_NAME = "appsintoss_app_visit__common_module::click__icon_more";
var BOTTOM_SHEET_CLOSE_CLICK_SCHEMA_ID = 1596843;
var BOTTOM_SHEET_CLOSE_CLICK_LOG_NAME = "appsintoss_app_visit__common_module::bottomsheet__more::click__close";
var BOTTOM_SHEET_MENU_CLICK_SCHEMA_ID = 1596841;
var BOTTOM_SHEET_MENU_CLICK_LOG_NAME = "appsintoss_app_visit__common_module::bottomsheet__more::click__menu";
function useMoreButtonBottomSheetLogging() {
  const referrer = useReferrer();
  const baseParams = {
    referrer,
    app_name: Granite4.appName
  };
  const logBottomSheetShow = () => {
    INTERNAL__module4.tossCoreEventLog({
      log_name: BOTTOM_SHEET_LOG_NAME,
      log_type: "popup",
      params: {
        ...baseParams,
        schema_id: BOTTOM_SHEET_SCHEMA_ID
      }
    });
  };
  const logBottomSheetOpen = () => {
    INTERNAL__module4.tossCoreEventLog({
      log_name: BOTTOM_SHEET_OPEN_LOG_NAME,
      log_type: "event",
      params: {
        ...baseParams,
        schema_id: BOTTOM_SHEET_OPEN_SCHEMA_ID,
        event_type: "click"
      }
    });
  };
  const logBottomSheetCloseClick = () => {
    INTERNAL__module4.tossCoreEventLog({
      log_name: BOTTOM_SHEET_CLOSE_CLICK_LOG_NAME,
      log_type: "event",
      params: {
        ...baseParams,
        schema_id: BOTTOM_SHEET_CLOSE_CLICK_SCHEMA_ID,
        event_type: "click"
      }
    });
  };
  const logBottomSheetMenuClick = ({ title }) => {
    INTERNAL__module4.tossCoreEventLog({
      log_name: BOTTOM_SHEET_MENU_CLICK_LOG_NAME,
      log_type: "event",
      params: {
        ...baseParams,
        schema_id: BOTTOM_SHEET_MENU_CLICK_SCHEMA_ID,
        event_type: "click",
        item_title: title
      }
    });
  };
  return {
    show: logBottomSheetShow,
    open: logBottomSheetOpen,
    close: logBottomSheetCloseClick,
    menuClick: logBottomSheetMenuClick
  };
}

// src/core/utils/url.ts
function addParamsToUrl(url, params) {
  const urlObj = new URL(url);
  for (const [key, value] of Object.entries(params)) {
    urlObj.searchParams.set(key, value);
  }
  return urlObj.toString();
}

// src/core/hooks/useMoreButtonBottomSheet/AppShareListMenu.tsx
import { jsx as jsx4 } from "react/jsx-runtime";
var SHARE_SCHEME_REFERRER = "appsintoss.common_module_share";
var APP_SHARE_MENU_INFO = {
  contactItemName: "\uACF5\uC720\uD558\uAE30",
  contactIconUrl: "https://static.toss.im/icons/png/4x/icon-share-dots-mono.png"
};
function AppShareListMenu() {
  const globals = getAppsInTossGlobals();
  const adaptive = useAdaptive();
  const logging = useMoreButtonBottomSheetLogging();
  const initialScheme = getSchemeUri4();
  const isSandbox = getOperationalEnvironment() === "sandbox";
  const { openConfirm } = useDialog3();
  const schemeForShare = addParamsToUrl(initialScheme, {
    referrer: SHARE_SCHEME_REFERRER
  });
  return /* @__PURE__ */ jsx4(
    ListRow,
    {
      left: /* @__PURE__ */ jsx4(
        ListRow.Icon,
        {
          color: globals.brandPrimaryColor,
          source: { uri: APP_SHARE_MENU_INFO.contactIconUrl },
          type: "background"
        }
      ),
      contents: /* @__PURE__ */ jsx4(
        ListRow.Texts,
        {
          type: "1RowTypeA",
          top: APP_SHARE_MENU_INFO.contactItemName,
          topProps: { color: adaptive.grey700 }
        }
      ),
      verticalPadding: "extraSmall",
      onPress: () => {
        if (isSandbox) {
          openConfirm({
            title: "\uACF5\uC720\uD558\uAE30 \uAE30\uB2A5 \uBBF8\uC9C0\uC6D0",
            description: "\uC0CC\uB4DC\uBC15\uC2A4 \uD658\uACBD\uC5D0\uC11C\uB294 \uC0AC\uC6A9\uD560 \uC218 \uC5C6\uC5B4\uC694. \uCF58\uC194\uC744 \uD1B5\uD574 \uD1A0\uC2A4\uC571\uC5D0\uC11C \uD14C\uC2A4\uD2B8\uD574 \uC8FC\uC138\uC694.",
            rightButton: "\uD655\uC778",
            closeOnDimmerClick: true
          });
          return;
        }
        logging.menuClick({ title: APP_SHARE_MENU_INFO.contactItemName });
        NativeModules.AppsInTossModule.shareWithScheme({
          params: {
            schemeURL: schemeForShare
          }
        });
      }
    }
  );
}

// src/hooks/useAppUpdateDialog.tsx
import { INTERNAL__module as INTERNAL__module5 } from "@apps-in-toss/native-modules";
import { Granite as Granite5, openURL as openURL4 } from "@granite-js/react-native";
import { useDialog as useDialog4 } from "@toss/tds-react-native";
import { useCallback as useCallback4 } from "react";
function useAppUpdateDialog() {
  const { openConfirm } = useDialog4();
  const logging = useAppUpdateDialogLogging();
  const openAppUpdateDialog = useCallback4(
    async ({
      title,
      description,
      leftButton = "\uB2EB\uAE30",
      rightButton = "\uC5C5\uB370\uC774\uD2B8\uD558\uAE30"
    }) => {
      logging.show();
      const isConfirmed = await openConfirm({
        title,
        description,
        leftButton,
        rightButton,
        closeOnDimmerClick: true
      });
      if (!isConfirmed) {
        logging.close();
        return;
      }
      logging.update();
      const STORE_SCHEME = getMarketLink();
      openURL4(`supertoss://web?url=${STORE_SCHEME}&external=browser`);
    },
    [logging, openConfirm]
  );
  return {
    open: openAppUpdateDialog
  };
}
var UPDATE_DIALOG_SCHEMA_ID = 1634992;
var UPDATE_DIALOG_LOG_NAME = "appsintoss_app_visit__common_module::bottomsheet__app_update";
var UPDATE_DIALOG_CTA_CLICK_SCHEMA_ID = 1634996;
var UPDATE_DIALOG_CTA_CLICK_LOG_NAME = "appsintoss_app_visit__common_module::bottomsheet__app_update::click__cta";
function useAppUpdateDialogLogging() {
  const referrer = useReferrer();
  const baseParams = {
    referrer,
    app_name: Granite5.appName
  };
  const logUpdateClick = () => {
    INTERNAL__module5.tossCoreEventLog({
      log_name: UPDATE_DIALOG_CTA_CLICK_LOG_NAME,
      log_type: "event",
      params: {
        ...baseParams,
        schema_id: UPDATE_DIALOG_CTA_CLICK_SCHEMA_ID,
        event_type: "click",
        button_type: "update"
      }
    });
  };
  const logCloseClick = () => {
    INTERNAL__module5.tossCoreEventLog({
      log_name: UPDATE_DIALOG_CTA_CLICK_LOG_NAME,
      log_type: "event",
      params: {
        ...baseParams,
        schema_id: UPDATE_DIALOG_CTA_CLICK_SCHEMA_ID,
        event_type: "click",
        button_type: "close"
      }
    });
  };
  const logDialogShow = () => {
    INTERNAL__module5.tossCoreEventLog({
      log_name: UPDATE_DIALOG_LOG_NAME,
      log_type: "popup",
      params: {
        ...baseParams,
        schema_id: UPDATE_DIALOG_SCHEMA_ID
      }
    });
  };
  return { update: logUpdateClick, close: logCloseClick, show: logDialogShow };
}

// src/core/utils/ensureValue.ts
function ensureValue(value, name) {
  if (value === void 0) {
    throw new Error(`${name} is required`);
  }
  return value;
}

// src/core/hooks/useMoreButtonBottomSheet/index.tsx
import { Fragment as Fragment3, jsx as jsx5, jsxs as jsxs2 } from "react/jsx-runtime";
var APP_BRIDGE_METHOD_NAME = "getMiniAppsSupportContact";
var MIN_VERSION = {
  BOTTOM_SHEET: {
    android: "5.226.0",
    ios: "5.226.0"
  },
  SHARE_LIST_MENU: {
    android: "5.230.0",
    ios: "5.230.0"
  }
};
function useMoreButtonBottomSheet() {
  const globals = getAppsInTossGlobals();
  const adaptive = useAdaptive2();
  const [itemList, setItemList] = useState2([]);
  const appUpdateDialog = useAppUpdateDialog();
  const logging = useMoreButtonBottomSheetLogging();
  const overlay = useOverlay2();
  const title = ensureValue(globals.brandDisplayName, "displayName");
  const isBottomSheetSupported = isMinVersionSupported2(MIN_VERSION.BOTTOM_SHEET);
  const isShareListMenuSupported = isMinVersionSupported2(MIN_VERSION.SHARE_LIST_MENU);
  useEffect7(() => {
    if (!isBottomSheetSupported) {
      return;
    }
    INTERNAL__appBridgeHandler.invokeAppBridgeMethod(
      APP_BRIDGE_METHOD_NAME,
      {},
      {
        onSuccess: ({ items }) => setItemList(items),
        onError: (error) => console.error("\uBA54\uB274 \uBAA9\uB85D\uC744 \uAC00\uC838\uC624\uB294 \uB370 \uC2E4\uD328\uD588\uC5B4\uC694:", error)
      }
    );
  }, [isBottomSheetSupported]);
  const onClickHandler = async () => {
    logging.open();
    if (!isBottomSheetSupported) {
      await appUpdateDialog.open({
        title: `\uC774 \uAE30\uB2A5\uC744 \uC4F0\uB824\uBA74 \uC571 \uC5C5\uB370\uC774\uD2B8\uAC00 \uD544\uC694\uD574\uC694`,
        description: `\uBB38\uC758, \uAD8C\uD55C \uC124\uC815, \uC2E0\uACE0 \uB4F1 \uAE30\uB2A5\uC744 \uC4F8 \uC218 \uC788\uC5B4\uC694`
      });
      return;
    }
    overlay.open(({ isOpen, exit, close }) => {
      const handleClose = () => {
        logging.close();
        close();
      };
      return /* @__PURE__ */ jsx5(BottomSheetImpressionArea, { children: /* @__PURE__ */ jsx5(
        BottomSheet.Root,
        {
          header: /* @__PURE__ */ jsx5(
            ListHeader,
            {
              title: /* @__PURE__ */ jsx5(ListHeader.TitleParagraph, { color: adaptive.grey800, fontWeight: "bold", typography: "t5", children: title })
            }
          ),
          open: isOpen,
          cta: /* @__PURE__ */ jsx5(
            BottomSheet.CTA,
            {
              size: "large",
              type: "dark",
              style: "weak",
              onPress: () => {
                handleClose();
              },
              children: "\uB2EB\uAE30"
            }
          ),
          onClose: handleClose,
          onExited: exit,
          children: /* @__PURE__ */ jsxs2(List, { rowSeparator: "none", children: [
            itemList.map((item) => {
              return /* @__PURE__ */ jsx5(
                ListRow2,
                {
                  left: /* @__PURE__ */ jsx5(
                    ListRow2.Icon,
                    {
                      color: globals.brandPrimaryColor,
                      source: { uri: item.contactIconUrl },
                      type: "background"
                    }
                  ),
                  contents: /* @__PURE__ */ jsx5(
                    ListRow2.Texts,
                    {
                      type: "1RowTypeA",
                      top: item.contactItemName,
                      topProps: { color: adaptive.grey700 }
                    }
                  ),
                  verticalPadding: "extraSmall",
                  onPress: () => {
                    logging.menuClick({ title: item.contactItemName });
                    openURL5(item.contactUri);
                  }
                },
                item.contactItemName
              );
            }),
            isShareListMenuSupported && /* @__PURE__ */ jsx5(AppShareListMenu, {})
          ] })
        }
      ) });
    });
  };
  return { open: onClickHandler };
}
function BottomSheetImpressionArea({ children }) {
  const logging = useMoreButtonBottomSheetLogging();
  useEffect7(() => {
    logging.show();
  }, [logging]);
  return /* @__PURE__ */ jsx5(Fragment3, { children });
}

// src/core/utils/safeParseNavigationBar.ts
function safeParseNavigationBar(navigationBar) {
  if (typeof navigationBar === "object") {
    return navigationBar;
  }
  try {
    return JSON.parse(navigationBar);
  } catch {
    return null;
  }
}

// src/components/NavigationBar/common/NavigationBarImpressionArea.tsx
import { useEffect as useEffect8, useRef as useRef3 } from "react";
import { Fragment as Fragment4, jsx as jsx6 } from "react/jsx-runtime";
function NavigationBarImpressionArea({
  children,
  withHomeButton
}) {
  const hasLogged = useRef3(false);
  const logging = useNavigationBarLogging();
  useEffect8(() => {
    if (hasLogged.current === false) {
      logging.navBarImpression({ home_icon_yn: withHomeButton ? "Y" : "N" });
      hasLogged.current = true;
    }
  }, [logging, withHomeButton]);
  return /* @__PURE__ */ jsx6(Fragment4, { children });
}

// src/components/NavigationBar/RNNavigationBar/Default.tsx
import { jsx as jsx7 } from "react/jsx-runtime";
function DefaultNavigationBar() {
  const globals = getAppsInTossGlobals();
  const { open: openMoreButtonBottomSheet } = useMoreButtonBottomSheet();
  const parsedNavigationBar = globals.navigationBar != null ? safeParseNavigationBar(globals.navigationBar) : null;
  const withHomeButton = parsedNavigationBar?.withHomeButton ?? false;
  const withBackButton = parsedNavigationBar?.withBackButton ?? true;
  const initialAccessoryButton = parsedNavigationBar?.initialAccessoryButton;
  const navigationEvent = useNavigationEvent();
  useHardwareBackPress(navigationEvent.handleBack);
  return /* @__PURE__ */ jsx7(NavigationBarImpressionArea, { withHomeButton, children: /* @__PURE__ */ jsx7(
    TopNavigation,
    {
      title: globals.brandDisplayName,
      icon: toIcon(globals.brandIcon),
      onPressDots: openMoreButtonBottomSheet,
      contentVisible: true,
      onPressTitle: withHomeButton ? navigationEvent.handleHomeButtonClick : void 0,
      onPressClose: navigationEvent.handleCloseButtonClick,
      withHome: withHomeButton,
      fixedRightButton: initialAccessoryButton,
      children: /* @__PURE__ */ jsx7(NavigationLeft, { visible: withBackButton, children: /* @__PURE__ */ jsx7(NavigationBackButton, { onPress: navigationEvent.handleBack, canGoBack: false }) })
    }
  ) });
}

// src/components/NavigationBar/RNNavigationBar/Game.tsx
import { PageNavbar } from "@toss/tds-react-native";
import { NavigationRightContent, useSafeAreaTop } from "@toss/tds-react-native/private";
import { Platform as Platform2, View as View2 } from "react-native";
import { Fragment as Fragment5, jsx as jsx8, jsxs as jsxs3 } from "react/jsx-runtime";
function GameNavigationBar() {
  const safeAreaTop = useSafeAreaTop();
  const global2 = getAppsInTossGlobals();
  const { open: openMoreButtonBottomSheet } = useMoreButtonBottomSheet();
  const navigationEvent = useNavigationEvent();
  useHardwareBackPress(navigationEvent.handleBack);
  const parsedNavigationBar = global2.navigationBar != null ? safeParseNavigationBar(global2.navigationBar) : null;
  const initialAccessoryButton = parsedNavigationBar?.initialAccessoryButton;
  return /* @__PURE__ */ jsxs3(Fragment5, { children: [
    /* @__PURE__ */ jsx8(PageNavbar, { preference: { type: "none" } }),
    /* @__PURE__ */ jsx8(
      View2,
      {
        style: {
          width: "100%",
          // TODO: UI관련 스타일 설정은 TDS로 이관
          height: Platform2.OS === "ios" ? 44 : 54,
          flexDirection: "row",
          alignItems: "center",
          justifyContent: "flex-end",
          position: "absolute",
          zIndex: Z_INDEX.CLOSE_BUTTON,
          marginTop: safeAreaTop,
          paddingRight: 10
        },
        pointerEvents: "box-none",
        children: /* @__PURE__ */ jsx8(
          NavigationRightContent,
          {
            fixedRightButton: initialAccessoryButton,
            onPressDots: openMoreButtonBottomSheet,
            onPressClose: navigationEvent.handleCloseButtonClick,
            theme: "dark"
          }
        )
      }
    )
  ] });
}

// src/components/NavigationBar/RNNavigationBar/index.tsx
var RNNavigationBar = {
  Default: DefaultNavigationBar,
  Game: GameNavigationBar
};

// src/bridge-entry.ts
var bridge_entry_exports = {};
__reExport(bridge_entry_exports, async_bridges_star);
__reExport(bridge_entry_exports, constant_bridges_star);
__reExport(bridge_entry_exports, event_bridges_star);
import * as async_bridges_star from "@apps-in-toss/native-modules/async-bridges";
import * as constant_bridges_star from "@apps-in-toss/native-modules/constant-bridges";
import * as event_bridges_star from "@apps-in-toss/native-modules/event-bridges";

// src/components/RNAppContainer.tsx
import { Fragment as Fragment6, jsx as jsx9, jsxs as jsxs4 } from "react/jsx-runtime";
function RNAppContainer({ children }) {
  const global2 = getAppsInTossGlobals();
  switch (global2.appType) {
    case "game":
      return /* @__PURE__ */ jsx9(GameAppContainer, { children });
    case "general":
    default:
      return /* @__PURE__ */ jsx9(GeneralAppContainer, { children });
  }
}
function GameAppContainer({ children }) {
  const [isEntryMessageExited, setIsEntryMessageExited] = useState3(false);
  useEffect9(() => {
    if (Platform3.OS === "ios") {
      setIosSwipeGestureEnabled({ isEnabled: false });
      return () => {
        setIosSwipeGestureEnabled({ isEnabled: true });
      };
    }
    return;
  }, []);
  useEffect9(() => {
    appsInTossEvent2.addEventListener("entryMessageExited", {
      onEvent: () => {
        setIsEntryMessageExited(true);
      }
    });
  }, []);
  return /* @__PURE__ */ jsxs4(Fragment6, { children: [
    /* @__PURE__ */ jsx9(RNNavigationBar.Game, {}),
    (0, bridge_entry_exports.getOperationalEnvironment)() === "toss" ? /* @__PURE__ */ jsx9(GameProfile, { isReadyForProfileUI: isEntryMessageExited, children }) : children
  ] });
}
function GeneralAppContainer({ children }) {
  return /* @__PURE__ */ jsxs4(Fragment6, { children: [
    /* @__PURE__ */ jsx9(RNNavigationBar.Default, {}),
    children
  ] });
}

// src/core/registerApp.tsx
import { Fragment as Fragment7, jsx as jsx10, jsxs as jsxs5 } from "react/jsx-runtime";
function AppsInTossContainer(Container, { children, ...initialProps }) {
  if (!isMinVersionSupported3({
    android: "5.220.0",
    ios: "5.221.0"
  })) {
    return /* @__PURE__ */ jsxs5(Fragment7, { children: [
      /* @__PURE__ */ jsx10(AppEvent.Entry, {}),
      /* @__PURE__ */ jsx10(AppEvent.System, { ...initialProps }),
      /* @__PURE__ */ jsx10(AppUpdate, {})
    ] });
  }
  return /* @__PURE__ */ jsxs5(Fragment7, { children: [
    /* @__PURE__ */ jsx10(AppEvent.StayTime, {}),
    /* @__PURE__ */ jsx10(AppEvent.Entry, {}),
    /* @__PURE__ */ jsx10(AppEvent.System, { ...initialProps }),
    /* @__PURE__ */ jsx10(Container, { ...initialProps, children: /* @__PURE__ */ jsx10(TDSProvider, { colorPreference: "light", token: { color: { primary: getAppsInTossGlobals().brandPrimaryColor } }, children: /* @__PURE__ */ jsx10(TDSContainer, { ...initialProps, children }) }) })
  ] });
}
function TDSContainer({ children }) {
  useAppsInTossBridge();
  return /* @__PURE__ */ jsx10(Fragment7, { children });
}
function registerApp(container, { context, analytics }) {
  const appName = getAppName();
  const isRegistered = AppRegistry.getAppKeys().includes(appName);
  if (!isRegistered) {
    Analytics.init({
      logger: (params) => void eventLog(params),
      debug: analytics?.debug ?? __DEV__
    });
    const App = Granite6.registerApp(AppsInTossContainer.bind(null, container), {
      appName,
      context,
      setIosSwipeGestureEnabled: setIosSwipeGestureEnabled2,
      router: {
        screenContainer: AppsInTossScreenContainer,
        defaultScreenOption: {
          statusBarStyle: "dark"
        }
      }
    });
    global.Page = App;
  }
  return global.Page;
}
function AppsInTossScreenContainer({ children }) {
  const isRNApp = getAppsInTossGlobals().webViewType == null;
  return /* @__PURE__ */ jsx10(Analytics.Screen, { children: isRNApp ? /* @__PURE__ */ jsx10(RNAppContainer, { children }) : children });
}
function getAppName() {
  try {
    return global.__granite.app.name;
  } catch (error) {
    console.error("unexpected error occurred while getting app name");
    throw error;
  }
}

// src/core/index.ts
var AppsInToss = {
  registerApp
};

// src/components/WebView.tsx
import {
  GoogleAdMob,
  IAP,
  Storage,
  AppsInTossModule,
  appsInTossEvent as appsInTossEvent4,
  iapCreateOneTimePurchaseOrder,
  processProductGrant,
  requestOneTimePurchase
} from "@apps-in-toss/native-modules";
import * as appsInTossAsyncBridges from "@apps-in-toss/native-modules/async-bridges";
import * as appsInTossConstantBridges from "@apps-in-toss/native-modules/constant-bridges";
import * as appsInTossEventBridges from "@apps-in-toss/native-modules/event-bridges";
import { getSchemeUri as getSchemeUri6 } from "@granite-js/react-native";
import { ExternalWebViewScreen, tdsEvent } from "@toss/tds-react-native";
import { useSafeAreaBottom, useSafeAreaTop as useSafeAreaTop3, useTopNavigation } from "@toss/tds-react-native/private";
import { useEffect as useEffect12, useMemo as useMemo6, useRef as useRef6, useState as useState6 } from "react";
import { BackHandler as BackHandler2, Platform as Platform6 } from "react-native";

// src/components/GameWebView.tsx
import { setIosSwipeGestureEnabled as setIosSwipeGestureEnabled3, appsInTossEvent as appsInTossEvent3, getOperationalEnvironment as getOperationalEnvironment3 } from "@apps-in-toss/native-modules";
import {
  WebView as PlainWebView
} from "@granite-js/native/react-native-webview";
import { forwardRef, useEffect as useEffect10, useState as useState4 } from "react";
import { Platform as Platform5 } from "react-native";

// src/components/NavigationBar/GameWebviewNavigationBar.tsx
import { closeView as closeView3 } from "@granite-js/react-native";
import { PageNavbar as PageNavbar2, useDialog as useDialog5 } from "@toss/tds-react-native";
import { NavigationRightContent as NavigationRightContent2, useSafeAreaTop as useSafeAreaTop2 } from "@toss/tds-react-native/private";
import { josa as josa3 } from "es-hangul";
import { useCallback as useCallback5 } from "react";
import { Platform as Platform4, View as View3 } from "react-native";
import { Fragment as Fragment8, jsx as jsx11, jsxs as jsxs6 } from "react/jsx-runtime";
function GameWebviewNavigationBar() {
  const safeAreaTop = useSafeAreaTop2();
  const { openConfirm } = useDialog5();
  const { captureExitLog } = useCaptureExitLog();
  const global2 = getAppsInTossGlobals();
  const logging = useNavigationBarLogging();
  const { open: openMoreButtonBottomSheet } = useMoreButtonBottomSheet();
  const parsedNavigationBar = global2.navigationBar != null ? safeParseNavigationBar(global2.navigationBar) : null;
  const initialAccessoryButton = parsedNavigationBar?.initialAccessoryButton;
  const handleGameWebviewClose = useCallback5(async () => {
    logging.closeButtonClick();
    const isConfirmed = await openConfirm({
      title: `${josa3(global2.brandDisplayName, "\uC744/\uB97C")} \uC885\uB8CC\uD560\uAE4C\uC694?`,
      leftButton: "\uCDE8\uC18C",
      rightButton: "\uC885\uB8CC\uD558\uAE30",
      closeOnDimmerClick: true,
      onEntered: logging.closePopupShow
    });
    logging.closePopupCtaClick(isConfirmed);
    if (isConfirmed) {
      captureExitLog(Date.now());
      closeView3();
    }
  }, [captureExitLog, global2.brandDisplayName, logging, openConfirm]);
  return /* @__PURE__ */ jsxs6(Fragment8, { children: [
    /* @__PURE__ */ jsx11(PageNavbar2, { preference: { type: "none" } }),
    /* @__PURE__ */ jsx11(
      View3,
      {
        style: {
          width: "100%",
          // TODO: UI관련 스타일 설정은 TDS로 이관
          height: Platform4.OS === "ios" ? 44 : 54,
          flexDirection: "row",
          alignItems: "center",
          justifyContent: "flex-end",
          position: "absolute",
          zIndex: Z_INDEX.CLOSE_BUTTON,
          marginTop: safeAreaTop,
          paddingRight: 10
        },
        pointerEvents: "box-none",
        children: /* @__PURE__ */ jsx11(
          NavigationRightContent2,
          {
            fixedRightButton: initialAccessoryButton,
            onPressDots: openMoreButtonBottomSheet,
            onPressClose: () => {
              handleGameWebviewClose();
            },
            theme: "dark"
          }
        )
      }
    )
  ] });
}

// src/components/GameWebView.tsx
import { Fragment as Fragment9, jsx as jsx12, jsxs as jsxs7 } from "react/jsx-runtime";
var GameWebView = forwardRef(function GameWebView2(props, ref) {
  const [isEntryMessageExited, setIsEntryMessageExited] = useState4(false);
  useEffect10(() => {
    if (Platform5.OS === "ios") {
      setIosSwipeGestureEnabled3({ isEnabled: false });
      return () => {
        setIosSwipeGestureEnabled3({ isEnabled: true });
      };
    }
    return;
  }, []);
  useEffect10(() => {
    appsInTossEvent3.addEventListener("entryMessageExited", {
      onEvent: () => {
        setIsEntryMessageExited(true);
      }
    });
  }, []);
  return /* @__PURE__ */ jsxs7(Fragment9, { children: [
    /* @__PURE__ */ jsx12(GameWebviewNavigationBar, {}),
    getOperationalEnvironment3() === "toss" ? /* @__PURE__ */ jsx12(GameProfile, { isReadyForProfileUI: isEntryMessageExited, children: /* @__PURE__ */ jsx12(PlainWebView, { ref, ...props }) }) : /* @__PURE__ */ jsx12(PlainWebView, { ref, ...props })
  ] });
});

// src/components/PartnerWebView.tsx
import {
  WebView as PlainWebView2
} from "@granite-js/native/react-native-webview";
import { forwardRef as forwardRef2 } from "react";

// src/components/NavigationBar/PartnerWebviewNavigationBar.tsx
import { closeView as closeView4 } from "@granite-js/react-native";
import { useDialog as useDialog6 } from "@toss/tds-react-native";
import { NavigationBackButton as NavigationBackButton2, NavigationLeft as NavigationLeft2, TopNavigation as TopNavigation2 } from "@toss/tds-react-native/private";
import { josa as josa4 } from "es-hangul";
import { useCallback as useCallback6 } from "react";
import { jsx as jsx13 } from "react/jsx-runtime";
function PartnerWebviewNavigationBar({ onBackButtonClick, onHomeButtonClick }) {
  const globals = getAppsInTossGlobals();
  const { captureExitLog } = useCaptureExitLog();
  const logging = useNavigationBarLogging();
  const { openConfirm } = useDialog6();
  const { open: openMoreButtonBottomSheet } = useMoreButtonBottomSheet();
  const parsedNavigationBar = globals.navigationBar != null ? safeParseNavigationBar(globals.navigationBar) : null;
  const withHomeButton = parsedNavigationBar?.withHomeButton ?? false;
  const withBackButton = parsedNavigationBar?.withBackButton ?? true;
  const initialAccessoryButton = parsedNavigationBar?.initialAccessoryButton;
  const handleClose = useCallback6(async () => {
    logging.closeButtonClick();
    const isConfirmed = await openConfirm({
      title: `${josa4(globals.brandDisplayName, "\uC744/\uB97C")} \uC885\uB8CC\uD560\uAE4C\uC694?`,
      leftButton: "\uCDE8\uC18C",
      rightButton: "\uC885\uB8CC\uD558\uAE30",
      closeOnDimmerClick: true,
      onEntered: logging.closePopupShow
    });
    logging.closePopupCtaClick(isConfirmed);
    if (isConfirmed) {
      captureExitLog(Date.now());
      closeView4();
    }
  }, [captureExitLog, globals.brandDisplayName, logging, openConfirm]);
  return /* @__PURE__ */ jsx13(NavigationBarImpressionArea, { withHomeButton, children: /* @__PURE__ */ jsx13(
    TopNavigation2,
    {
      title: globals.brandDisplayName,
      icon: toIcon(globals.brandIcon),
      onPressDots: openMoreButtonBottomSheet,
      contentVisible: true,
      onPressTitle: withHomeButton ? onHomeButtonClick : void 0,
      onPressClose: handleClose,
      withHome: withHomeButton,
      fixedRightButton: initialAccessoryButton,
      children: /* @__PURE__ */ jsx13(NavigationLeft2, { visible: withBackButton, children: /* @__PURE__ */ jsx13(NavigationBackButton2, { onPress: onBackButtonClick, canGoBack: false }) })
    }
  ) });
}

// src/components/PartnerWebView.tsx
import { Fragment as Fragment10, jsx as jsx14, jsxs as jsxs8 } from "react/jsx-runtime";
var PartnerWebView = forwardRef2(function PartnerWebViewScreen({ onBackButtonClick, onHomeButtonClick, ...webViewProps }, ref) {
  return /* @__PURE__ */ jsxs8(Fragment10, { children: [
    /* @__PURE__ */ jsx14(PartnerWebviewNavigationBar, { onBackButtonClick, onHomeButtonClick }),
    /* @__PURE__ */ jsx14(PlainWebView2, { ref, ...webViewProps, style: { flex: 1 } })
  ] });
});

// src/bridge-handler/useBridgeHandler.tsx
import { useCallback as useCallback7, useMemo as useMemo3, useRef as useRef4 } from "react";
function serializeError(error) {
  return JSON.stringify(error, (_, value) => {
    if (value instanceof Error) {
      return {
        ...Object.entries(value).reduce((acc, [key, value2]) => {
          acc[key] = value2;
          return acc;
        }, {}),
        name: value.name,
        message: value.message,
        stack: value.stack,
        __isError: true
      };
    }
    return value;
  });
}
function methodHandler({
  args,
  eventId,
  functionName,
  handlerMap,
  injectJavaScript
}) {
  const func = handlerMap[functionName];
  if (!func) {
    console.error(`${functionName} is not a function`);
    return;
  }
  const wrappedFunc = async (...args2) => {
    const result = await func(...args2);
    return result;
  };
  wrappedFunc(...args).then((result) => {
    injectJavaScript?.(`
      window.__GRANITE_NATIVE_EMITTER.emit('${functionName}/resolve/${eventId}', ${JSON.stringify(result, null, 0)});
    `);
  }).catch((error) => {
    const serializedError = serializeError(error);
    injectJavaScript?.(`
      window.__GRANITE_NATIVE_EMITTER.emit('${functionName}/reject/${eventId}', ${serializedError});
    `);
  });
}
var globalEventListenerMap = /* @__PURE__ */ new Map();
function useBridgeHandler({
  onMessage,
  constantHandlerMap,
  asyncHandlerMap,
  eventListenerMap,
  injectedJavaScript: originalInjectedJavaScript
}) {
  const ref = useRef4(null);
  const injectedJavaScript = useMemo3(
    () => [
      `window.__CONSTANT_HANDLER_MAP = ${JSON.stringify(
        Object.entries(constantHandlerMap).reduce(
          (acc, [key, value]) => {
            acc[key] = typeof value === "function" ? value() : value;
            return acc;
          },
          {}
        )
      )};`,
      originalInjectedJavaScript,
      "true"
    ].join("\n"),
    [constantHandlerMap, originalInjectedJavaScript]
  );
  const createHandleOnEvent = (functionName, eventId) => (response) => {
    ref.current?.injectJavaScript(`
      window.__GRANITE_NATIVE_EMITTER.emit('${functionName}/onEvent/${eventId}', ${JSON.stringify(response, null, 0)});
    `);
  };
  const createHandleOnError = (functionName, eventId) => (error) => {
    const serializedError = serializeError(error);
    ref.current?.injectJavaScript(`
      window.__GRANITE_NATIVE_EMITTER.emit('${functionName}/onError/${eventId}', ${serializedError});
    `);
  };
  const $onMessage = useCallback7(
    async (e) => {
      onMessage?.(e);
      const data = JSON.parse(e.nativeEvent.data);
      if (typeof data !== "object" || data === null || typeof data.functionName !== "string" || typeof data.eventId !== "string" || typeof data.type !== "string" || !["addEventListener", "removeEventListener", "method"].includes(data.type)) {
        return;
      }
      switch (data.type) {
        case "addEventListener": {
          const handleOnEvent = createHandleOnEvent(data.functionName, data.eventId);
          const handleOnError = createHandleOnError(data.functionName, data.eventId);
          const remove = eventListenerMap[data.functionName]?.({
            onEvent: handleOnEvent,
            onError: handleOnError,
            options: data.args
          });
          if (remove) {
            globalEventListenerMap.set(`${data.functionName}/${data.eventId}`, remove);
          }
          break;
        }
        case "removeEventListener": {
          const key = `${data.functionName}/${data.eventId}`;
          const remove = globalEventListenerMap.get(key);
          remove?.();
          globalEventListenerMap.delete(key);
          break;
        }
        case "method": {
          methodHandler({
            args: data.args,
            eventId: data.eventId,
            functionName: data.functionName,
            handlerMap: asyncHandlerMap,
            injectJavaScript: ref.current?.injectJavaScript
          });
          break;
        }
      }
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [onMessage]
  );
  return {
    ref,
    injectedJavaScript,
    onMessage: $onMessage
  };
}

// src/core/hooks/useWebBackHandler.tsx
import { closeView as closeView5, useBackEventState } from "@granite-js/react-native";
import { useDialog as useDialog7 } from "@toss/tds-react-native";
import { josa as josa5 } from "es-hangul";
import { useCallback as useCallback9, useMemo as useMemo5 } from "react";

// src/hooks/useWebviewHistoryStack.tsx
import { useCallback as useCallback8, useMemo as useMemo4, useReducer } from "react";
var INITIAL_STATE = { stack: [], index: -1 };
function reducer(state, action) {
  switch (action.type) {
    case "NAVIGATION_CHANGE": {
      const { url, canGoForward } = action;
      if (state.stack.length === 0) {
        return { stack: [url], index: 0 };
      }
      const { stack, index } = state;
      const cur = stack[index];
      if (url === cur) {
        return state;
      }
      const prev = index > 0 ? stack[index - 1] : void 0;
      const next = index < stack.length - 1 ? stack[index + 1] : void 0;
      if (prev && url === prev && canGoForward) {
        return { ...state, index: index - 1 };
      }
      if (next && url === next) {
        return { ...state, index: index + 1 };
      }
      const base = stack.slice(0, index + 1);
      const nextStack = [...base, url];
      return { stack: nextStack, index: nextStack.length - 1 };
    }
    default:
      return state;
  }
}
function useWebViewHistory() {
  const [state, dispatch] = useReducer(reducer, INITIAL_STATE);
  const onNavigationStateChange = useCallback8(({ url, canGoForward: canGoForward2 }) => {
    dispatch({ type: "NAVIGATION_CHANGE", url, canGoForward: canGoForward2 });
  }, []);
  const { canGoBack, canGoForward } = useMemo4(() => {
    const canBack = state.index > 0;
    const canFwd = state.index >= 0 && state.index < state.stack.length - 1;
    return { canGoBack: canBack, canGoForward: canFwd };
  }, [state.index, state.stack.length]);
  return { onNavigationStateChange, hasHistory: canGoBack, canGoForward };
}

// src/core/hooks/useWebBackHandler.tsx
var HISTORY_BACK_SCRIPT = `
(function() {
  window.history.back();
  true;
})();
`;
var HISTORY_HOME_SCRIPT = `
  (function() {
    window.location.href = '/';
    true;
  })();
`;
function useWebBackHandler(webViewRef) {
  const { captureExitLog } = useCaptureExitLog();
  const { hasHistory, onNavigationStateChange } = useWebViewHistory();
  const {
    handlersRef: webBackHandlersRef,
    hasBackEvent: hasWebBackEvent,
    addEventListener: addWebBackEventListener,
    removeEventListener: removeWebBackEventListener
  } = useBackEventState();
  const logging = useNavigationBarLogging();
  const { openConfirm } = useDialog7();
  const global2 = getAppsInTossGlobals();
  const addEventListener = useCallback9(
    (handler) => {
      addWebBackEventListener(handler);
    },
    [addWebBackEventListener]
  );
  const removeEventListener = useCallback9(
    (handler) => {
      removeWebBackEventListener(handler);
    },
    [removeWebBackEventListener]
  );
  const handleWebBack = useCallback9(async () => {
    if (hasWebBackEvent) {
      for (const handler of webBackHandlersRef) {
        handler();
      }
      return;
    }
    if (hasHistory) {
      webViewRef.current?.injectJavaScript(HISTORY_BACK_SCRIPT);
    } else {
      const isConfirmed = await openConfirm({
        title: `${josa5(global2.brandDisplayName, "\uC744/\uB97C")} \uC885\uB8CC\uD560\uAE4C\uC694?`,
        leftButton: "\uCDE8\uC18C",
        rightButton: "\uC885\uB8CC\uD558\uAE30",
        closeOnDimmerClick: true,
        onEntered: logging.closePopupShow
      });
      logging.closePopupCtaClick(isConfirmed);
      if (isConfirmed) {
        captureExitLog(Date.now());
        closeView5();
      }
    }
  }, [
    captureExitLog,
    global2.brandDisplayName,
    hasHistory,
    hasWebBackEvent,
    webBackHandlersRef,
    logging,
    openConfirm,
    webViewRef
  ]);
  const handleWebHome = useCallback9(() => {
    logging.homeButtonClick();
    if (hasWebBackEvent) {
      for (const handler of webBackHandlersRef) {
        handler();
      }
      return;
    }
    webViewRef.current?.injectJavaScript(HISTORY_HOME_SCRIPT);
  }, [hasWebBackEvent, webBackHandlersRef, logging, webViewRef]);
  return useMemo5(
    () => ({ addEventListener, removeEventListener, handleWebBack, handleWebHome, onNavigationStateChange }),
    [addEventListener, removeEventListener, handleWebBack, handleWebHome, onNavigationStateChange]
  );
}

// src/core/utils/mergeRefs.ts
function mergeRefs(...refs) {
  return (value) => {
    refs.forEach((ref) => {
      if (typeof ref === "function") {
        ref(value);
      } else if (ref != null) {
        ref.current = value;
      }
    });
  };
}

// src/hooks/useCreateUserAgent.ts
import { getPlatformOS, getTossAppVersion } from "@apps-in-toss/native-modules";
import { useWindowDimensions } from "react-native";
var FontA11yCategory = {
  Large: "Large",
  xLarge: "xLarge",
  xxLarge: "xxLarge",
  xxxLarge: "xxxLarge",
  A11y_Medium: "A11y_Medium",
  A11y_Large: "A11y_Large",
  A11y_xLarge: "A11y_xLarge",
  A11y_xxLarge: "A11y_xxLarge",
  A11y_xxxLarge: "A11y_xxxLarge"
};
var androidFontScaleMap = {
  100: FontA11yCategory.Large,
  110: FontA11yCategory.xLarge,
  120: FontA11yCategory.xxLarge,
  135: FontA11yCategory.xxxLarge,
  160: FontA11yCategory.A11y_Medium,
  190: FontA11yCategory.A11y_Large,
  235: FontA11yCategory.A11y_xLarge,
  275: FontA11yCategory.A11y_xxLarge,
  310: FontA11yCategory.A11y_xxxLarge
};
var iosScaleToAndroidScale = {
  0.823: 100,
  0.882: 100,
  0.941: 100,
  1: 100,
  1.118: 110,
  1.235: 120,
  1.353: 135,
  1.786: 160,
  2.143: 190,
  2.643: 235,
  3.143: 275,
  3.571: 310
};
function convertToAndroidStyleScale(fontScale, platform) {
  if (platform === "android") {
    if (fontScale <= 1) {
      return 100;
    }
    const scaledValue = Math.round(fontScale * 100);
    const keys = Object.keys(androidFontScaleMap).map(Number).sort((a, b) => a - b);
    let closestKey = keys[0];
    let minDiff = Math.abs(scaledValue - closestKey);
    for (const key of keys) {
      const diff = Math.abs(scaledValue - key);
      if (diff < minDiff) {
        minDiff = diff;
        closestKey = key;
      }
    }
    return closestKey;
  } else {
    const iosScales = Object.keys(iosScaleToAndroidScale).map(Number);
    let closestScale = iosScales[0];
    let minDiff = Math.abs(fontScale - closestScale);
    for (const scale of iosScales) {
      const diff = Math.abs(fontScale - scale);
      if (diff < minDiff) {
        minDiff = diff;
        closestScale = scale;
      }
    }
    return iosScaleToAndroidScale[closestScale];
  }
}
function mapIOSFontScaleToCategory(fontScale) {
  if (fontScale < 1) {
    return FontA11yCategory.Large;
  }
  if (Math.abs(fontScale - 1) < 0.05) {
    return FontA11yCategory.Large;
  }
  if (Math.abs(fontScale - 1.118) < 0.05) {
    return FontA11yCategory.xLarge;
  }
  if (Math.abs(fontScale - 1.235) < 0.05) {
    return FontA11yCategory.xxLarge;
  }
  if (Math.abs(fontScale - 1.353) < 0.05) {
    return FontA11yCategory.xxxLarge;
  }
  if (Math.abs(fontScale - 1.786) < 0.05) {
    return FontA11yCategory.A11y_Medium;
  }
  if (Math.abs(fontScale - 2.143) < 0.05) {
    return FontA11yCategory.A11y_Large;
  }
  if (Math.abs(fontScale - 2.643) < 0.05) {
    return FontA11yCategory.A11y_xLarge;
  }
  if (Math.abs(fontScale - 3.143) < 0.05) {
    return FontA11yCategory.A11y_xxLarge;
  }
  if (Math.abs(fontScale - 3.571) < 0.05) {
    return FontA11yCategory.A11y_xxxLarge;
  }
  return FontA11yCategory.Large;
}
function mapAndroidFontScaleToCategory(fontScale) {
  if (fontScale <= 1) {
    return androidFontScaleMap[100];
  }
  const scaledValue = Math.round(fontScale * 100);
  const keys = Object.keys(androidFontScaleMap).map(Number).sort((a, b) => a - b);
  if (keys.length === 0) {
    return androidFontScaleMap[100];
  }
  let closestKey = keys[0];
  let minDiff = Math.abs(scaledValue - closestKey);
  for (const key of keys) {
    const diff = Math.abs(scaledValue - key);
    if (diff < minDiff) {
      minDiff = diff;
      closestKey = key;
    }
  }
  return androidFontScaleMap[closestKey];
}
function mapFontScaleToCategory(fontScale, platform) {
  return platform === "ios" ? mapIOSFontScaleToCategory(fontScale) : mapAndroidFontScaleToCategory(fontScale);
}
function useCreateUserAgent({
  batteryModePreference,
  colorPreference,
  locale,
  navbarPreference,
  pureSafeArea,
  safeArea,
  safeAreaBottomTransparency
}) {
  const platform = getPlatformOS();
  const appVersion = getTossAppVersion();
  const { fontScale } = useWindowDimensions();
  const platformString = platform === "ios" ? "iPhone" : "Android";
  const fontA11y = mapFontScaleToCategory(fontScale, platform);
  const normalizedFontScale = convertToAndroidStyleScale(fontScale, platform);
  return [
    `TossApp/${appVersion}`,
    batteryModePreference && `TossBatteryModePreference/${batteryModePreference}`,
    colorPreference && `TossColorPreference/${colorPreference}`,
    `TossFontAccessibility/${fontA11y}`,
    `TossFontScale/${normalizedFontScale}`,
    locale && `TossLocale/${locale}`,
    navbarPreference && `TossNavbarPreference/${navbarPreference}`,
    pureSafeArea && `TossPureSafeArea/${pureSafeArea}`,
    safeArea && `TossSafeArea/${safeArea}`,
    safeAreaBottomTransparency && `TossSafeAreaBottomTransparency/${safeAreaBottomTransparency}`,
    platformString
  ].filter(Boolean).join(" ");
}

// src/hooks/useGeolocation.ts
import { startUpdateLocation } from "@apps-in-toss/native-modules";
import { useVisibility as useVisibility3 } from "@granite-js/react-native";
import { useEffect as useEffect11, useState as useState5 } from "react";
function useGeolocation({ accuracy, distanceInterval, timeInterval }) {
  const isVisible = useVisibility3();
  const [location, setLocation] = useState5(null);
  useEffect11(() => {
    if (!isVisible) {
      return;
    }
    return startUpdateLocation({
      options: {
        accuracy,
        distanceInterval,
        timeInterval
      },
      onEvent: setLocation,
      onError: console.error
    });
  }, [accuracy, distanceInterval, timeInterval, isVisible]);
  return location;
}

// src/hooks/useWaitForReturnNavigator.tsx
import { useNavigation as useNavigation2, useVisibilityChange } from "@granite-js/react-native";
import { useCallback as useCallback10, useRef as useRef5 } from "react";
function useWaitForReturnNavigator() {
  const callbacks = useRef5([]).current;
  const navigation = useNavigation2();
  const startNavigating = useCallback10(
    (route, params) => {
      return new Promise((resolve) => {
        callbacks.push(resolve);
        navigation.navigate(route, params);
      });
    },
    [callbacks, navigation]
  );
  const handleVisibilityChange = useCallback10(
    (state) => {
      if (state === "visible" && callbacks.length > 0) {
        for (const callback of callbacks) {
          callback();
        }
        callbacks.splice(0, callbacks.length);
      }
    },
    [callbacks]
  );
  useVisibilityChange(handleVisibilityChange);
  return startNavigating;
}

// src/utils/log.ts
import { eventLog as eventLogNative } from "@apps-in-toss/native-modules";
import { getSchemeUri as getSchemeUri5 } from "@granite-js/react-native";

// src/utils/extractDateFromUUIDv7.ts
var extractDateFromUUIDv7 = (uuid) => {
  const timestampHex = uuid.split("-").join("").slice(0, 12);
  const timestamp = Number.parseInt(timestampHex, 16);
  return new Date(timestamp);
};

// src/utils/log.ts
var getGroupId = (url) => {
  try {
    const urlObject = new URL(url);
    return {
      groupId: urlObject.pathname,
      search: urlObject.search.startsWith("?") ? urlObject.search.substring(1) : urlObject.search
    };
  } catch {
    return {
      groupId: "unknown",
      search: "unknown"
    };
  }
};
var getReferrer = () => {
  try {
    const referrer = new URL(getSchemeUri5());
    return referrer.searchParams.get("referrer");
  } catch {
    return "";
  }
};
var trackScreen = (url) => {
  const { groupId, search } = getGroupId(url);
  const log = {
    log_type: "screen",
    log_name: `${groupId}::screen`,
    params: {
      search,
      referrer: getReferrer(),
      deployment_id: env.getDeploymentId(),
      deployment_timestamp: extractDateFromUUIDv7(env.getDeploymentId()).getTime()
    }
  };
  return eventLogNative(log);
};

// src/components/WebView.tsx
import { jsx as jsx15 } from "react/jsx-runtime";
var operationalEnvironment = appsInTossConstantBridges.getOperationalEnvironment();
var TYPES = ["partner", "external", "game"];
var WEBVIEW_TYPES = {
  partner: PartnerWebView,
  external: ExternalWebViewScreen,
  game: GameWebView
};
function mergeSchemeQueryParamsInto(url) {
  const baseUrl = new URL(url);
  const schemeUrl = new URL(getSchemeUri6());
  baseUrl.pathname = schemeUrl.pathname;
  for (const [key, value] of schemeUrl.searchParams.entries()) {
    baseUrl.searchParams.set(key, value);
  }
  return baseUrl;
}
function getWebViewUri(local) {
  if (__DEV__) {
    const devUrl = `http://${local.host}:${local.port}`;
    return mergeSchemeQueryParamsInto(devUrl).toString();
  }
  const { url: rawUrl } = AppsInTossModule.getWebBundleURL({});
  const url = mergeSchemeQueryParamsInto(rawUrl);
  const deploymentId = env.getDeploymentId();
  if (deploymentId) {
    url.searchParams.set("_deploymentId", deploymentId);
  }
  return url.toString();
}
function WebView({ type, local, onMessage, ...props }) {
  if (!TYPES.includes(type)) {
    throw new Error(`Invalid WebView type: '${type}'`);
  }
  const webViewRef = useRef6(null);
  const webBackHandler = useWebBackHandler(webViewRef);
  const uri = useMemo6(() => getWebViewUri(local), [local]);
  const top = useSafeAreaTop3();
  const bottom = useSafeAreaBottom();
  const global2 = getAppsInTossGlobals();
  const topNavigation = useTopNavigation();
  const disableTextSelectionCSS = `
    (function() {
      const style = document.createElement('style');
      style.textContent = '*:not(input):not(textarea) { -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; -webkit-touch-callout: none; }';
      document.head.appendChild(style);
    })();
  `;
  const [allowsBackForwardNavigationGestures, setAllowsBackForwardNavigationGestures] = useState6(
    props.allowsBackForwardNavigationGestures
  );
  const handler = useBridgeHandler({
    onMessage,
    injectedJavaScript: [disableTextSelectionCSS].join("\n"),
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    eventListenerMap: {
      ...appsInTossEventBridges,
      navigationAccessoryEvent: ({ onEvent, onError }) => tdsEvent.addEventListener("navigationAccessoryEvent", { onEvent, onError }),
      backEvent: ({ onEvent }) => {
        webBackHandler.addEventListener(onEvent);
        return () => {
          webBackHandler.removeEventListener(onEvent);
        };
      },
      entryMessageExited: ({ onEvent, onError }) => appsInTossEvent4.addEventListener("entryMessageExited", { onEvent, onError }),
      updateLocationEvent: ({ onEvent, onError, options }) => appsInTossEvent4.addEventListener("updateLocationEvent", { onEvent, onError, options }),
      /** @internal */
      appBridgeCallbackEvent: ({ onEvent, onError, options }) => appsInTossEvent4.addEventListener("appBridgeCallbackEvent", { onEvent, onError, options }),
      /** AdMob */
      loadAdMobInterstitialAd: GoogleAdMob.loadAdMobInterstitialAd,
      showAdMobInterstitialAd: GoogleAdMob.showAdMobInterstitialAd,
      loadAdMobRewardedAd: GoogleAdMob.loadAdMobRewardedAd,
      showAdMobRewardedAd: GoogleAdMob.showAdMobRewardedAd,
      /** AdMobV2 */
      loadAppsInTossAdMob: GoogleAdMob.loadAppsInTossAdMob,
      showAppsInTossAdMob: GoogleAdMob.showAppsInTossAdMob,
      /** IAP */
      iapCreateOneTimePurchaseOrder: IAP.createOneTimePurchaseOrder,
      requestOneTimePurchase
    },
    constantHandlerMap: {
      ...appsInTossConstantBridges,
      getSafeAreaTop: () => top,
      getSafeAreaBottom: () => bottom,
      ...Object.fromEntries(Object.entries(global2).map(([key, value]) => [key, () => value])),
      /** AdMob */
      loadAdMobInterstitialAd_isSupported: GoogleAdMob.loadAdMobInterstitialAd.isSupported,
      showAdMobInterstitialAd_isSupported: GoogleAdMob.showAdMobInterstitialAd.isSupported,
      loadAdMobRewardedAd_isSupported: GoogleAdMob.loadAdMobRewardedAd.isSupported,
      showAdMobRewardedAd_isSupported: GoogleAdMob.showAdMobRewardedAd.isSupported,
      /** AdMobV2 */
      loadAppsInTossAdMob_isSupported: GoogleAdMob.loadAppsInTossAdMob.isSupported,
      showAppsInTossAdMob_isSupported: GoogleAdMob.showAppsInTossAdMob.isSupported,
      /** env */
      getDeploymentId: env.getDeploymentId
    },
    asyncHandlerMap: {
      ...appsInTossAsyncBridges,
      setIosSwipeGestureEnabled: (options) => {
        setAllowsBackForwardNavigationGestures(options.isEnabled);
        return appsInTossAsyncBridges.setIosSwipeGestureEnabled(options);
      },
      addAccessoryButton: async (params) => topNavigation.addAccessoryButton(params),
      removeAccessoryButton: async () => topNavigation.removeAccessoryButton(),
      /** permissions */
      requestPermission: appsInTossAsyncBridges.requestPermission,
      openPermissionDialog: appsInTossAsyncBridges.openPermissionDialog,
      getPermission: appsInTossAsyncBridges.getPermission,
      getClipboardText: appsInTossAsyncBridges.getClipboardText,
      setClipboardText: appsInTossAsyncBridges.setClipboardText,
      fetchAlbumPhotos: appsInTossAsyncBridges.fetchAlbumPhotos,
      fetchContacts: appsInTossAsyncBridges.fetchContacts,
      getCurrentLocation: appsInTossAsyncBridges.getCurrentLocation,
      openCamera: appsInTossAsyncBridges.openCamera,
      /** Storage */
      getStorageItem: Storage.getItem,
      setStorageItem: Storage.setItem,
      removeStorageItem: Storage.removeItem,
      clearItems: Storage.clearItems,
      /** IAP */
      iapGetProductItemList: IAP.getProductItemList,
      iapCreateOneTimePurchaseOrder,
      processProductGrant,
      getPendingOrders: IAP.getPendingOrders,
      getCompletedOrRefundedOrders: IAP.getCompletedOrRefundedOrders,
      completeProductGrant: IAP.completeProductGrant
    }
  });
  const headerPropForExternalWebView = useMemo6(() => {
    const parsedNavigationBar = global2.navigationBar != null ? safeParseNavigationBar(global2.navigationBar) : null;
    const initialAccessoryButton = parsedNavigationBar?.initialAccessoryButton;
    const withBackButton = parsedNavigationBar?.withBackButton ?? true;
    if (type === "external" && initialAccessoryButton != null) {
      return {
        header: {
          withBackButton,
          title: initialAccessoryButton.title,
          icon: initialAccessoryButton.icon
        }
      };
    }
    return {};
  }, [global2.navigationBar, type]);
  const BaseWebView = WEBVIEW_TYPES[type];
  const webViewDebuggingEnabled = operationalEnvironment === "sandbox";
  const userAgent = useCreateUserAgent({
    colorPreference: "light"
  });
  const refs = mergeRefs(handler.ref, webViewRef);
  useEffect12(() => {
    const callback = () => {
      webBackHandler.handleWebBack();
      return true;
    };
    BackHandler2.addEventListener("hardwareBackPress", callback);
    return () => BackHandler2.removeEventListener("hardwareBackPress", callback);
  }, [webBackHandler]);
  return /* @__PURE__ */ jsx15(
    BaseWebView,
    {
      ref: refs,
      ...props,
      ...headerPropForExternalWebView,
      source: {
        uri,
        // NOTE: https://github.com/react-native-webview/react-native-webview/pull/3133
        headers: {
          "User-Agent": userAgent
        }
      },
      onHomeButtonClick: webBackHandler.handleWebHome,
      onBackButtonClick: webBackHandler.handleWebBack,
      onNavigationStateChange: (event) => {
        if (event.url) {
          trackScreen(event.url);
        }
        props.onNavigationStateChange?.(event);
        webBackHandler.onNavigationStateChange(event);
      },
      userAgent: Platform6.OS === "ios" ? userAgent : void 0,
      sharedCookiesEnabled: true,
      webviewDebuggingEnabled: webViewDebuggingEnabled,
      thirdPartyCookiesEnabled: true,
      onMessage: handler.onMessage,
      injectedJavaScript: handler.injectedJavaScript,
      injectedJavaScriptBeforeContentLoaded: handler.injectedJavaScript,
      decelerationRate: Platform6.OS === "ios" ? 1 : void 0,
      allowsBackForwardNavigationGestures
    }
  );
}

// src/index.ts
export * from "@apps-in-toss/analytics";
import { useTopNavigation as useTopNavigation2, useOverlay as useOverlay3, OverlayProvider } from "@toss/tds-react-native/private";
export * from "@apps-in-toss/native-modules";
export * from "@apps-in-toss/types";
var Analytics2 = {
  init: InternalAnalytics.init,
  Impression: InternalAnalytics.Impression,
  Press: InternalAnalytics.Press,
  Area: InternalAnalytics.Area
};
export {
  Analytics2 as Analytics,
  AppsInToss,
  INTERNAL__onVisibilityChangedByTransparentServiceWeb,
  OverlayProvider,
  WebView,
  env,
  useCreateUserAgent,
  useGeolocation,
  useOverlay3 as useOverlay,
  useTopNavigation2 as useTopNavigation,
  useWaitForReturnNavigator
};
